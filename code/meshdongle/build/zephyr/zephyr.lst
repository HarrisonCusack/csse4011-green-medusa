
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00001000 <_vector_table>:
    1000:	e0 61 00 20 e1 5a 00 00 cb df 01 00 b5 5a 00 00     .a. .Z.......Z..
    1010:	b5 5a 00 00 b5 5a 00 00 b5 5a 00 00 00 00 00 00     .Z...Z...Z......
	...
    102c:	c9 57 00 00 b5 5a 00 00 00 00 00 00 75 57 00 00     .W...Z......uW..
    103c:	b5 5a 00 00                                         .Z..

00001040 <_irq_vector_table>:
    1040:	79 58 00 00 a7 45 02 00 79 58 00 00 79 58 00 00     yX...E..yX..yX..
    1050:	79 58 00 00 79 58 00 00 79 58 00 00 79 58 00 00     yX..yX..yX..yX..
    1060:	79 58 00 00 79 58 00 00 79 58 00 00 79 58 00 00     yX..yX..yX..yX..
    1070:	79 58 00 00 79 58 00 00 79 58 00 00 79 58 00 00     yX..yX..yX..yX..
    1080:	79 58 00 00 79 58 00 00 79 58 00 00 79 58 00 00     yX..yX..yX..yX..
    1090:	79 58 00 00 79 58 00 00 79 58 00 00 79 58 00 00     yX..yX..yX..yX..
    10a0:	79 58 00 00 79 58 00 00 79 58 00 00 79 58 00 00     yX..yX..yX..yX..
    10b0:	79 58 00 00 79 58 00 00 79 58 00 00 79 58 00 00     yX..yX..yX..yX..
    10c0:	79 58 00 00 79 58 00 00 79 58 00 00 79 58 00 00     yX..yX..yX..yX..
    10d0:	79 58 00 00 79 58 00 00 79 58 00 00 79 58 00 00     yX..yX..yX..yX..
    10e0:	79 58 00 00 79 58 00 00 79 58 00 00 79 58 00 00     yX..yX..yX..yX..
    10f0:	79 58 00 00 79 58 00 00 79 58 00 00 79 58 00 00     yX..yX..yX..yX..

Disassembly of section text:

00001100 <__aeabi_drsub>:
    1100:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    1104:	e002      	b.n	110c <__adddf3>
    1106:	bf00      	nop

00001108 <__aeabi_dsub>:
    1108:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000110c <__adddf3>:
    110c:	b530      	push	{r4, r5, lr}
    110e:	ea4f 0441 	mov.w	r4, r1, lsl #1
    1112:	ea4f 0543 	mov.w	r5, r3, lsl #1
    1116:	ea94 0f05 	teq	r4, r5
    111a:	bf08      	it	eq
    111c:	ea90 0f02 	teqeq	r0, r2
    1120:	bf1f      	itttt	ne
    1122:	ea54 0c00 	orrsne.w	ip, r4, r0
    1126:	ea55 0c02 	orrsne.w	ip, r5, r2
    112a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    112e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    1132:	f000 80e2 	beq.w	12fa <__adddf3+0x1ee>
    1136:	ea4f 5454 	mov.w	r4, r4, lsr #21
    113a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    113e:	bfb8      	it	lt
    1140:	426d      	neglt	r5, r5
    1142:	dd0c      	ble.n	115e <__adddf3+0x52>
    1144:	442c      	add	r4, r5
    1146:	ea80 0202 	eor.w	r2, r0, r2
    114a:	ea81 0303 	eor.w	r3, r1, r3
    114e:	ea82 0000 	eor.w	r0, r2, r0
    1152:	ea83 0101 	eor.w	r1, r3, r1
    1156:	ea80 0202 	eor.w	r2, r0, r2
    115a:	ea81 0303 	eor.w	r3, r1, r3
    115e:	2d36      	cmp	r5, #54	; 0x36
    1160:	bf88      	it	hi
    1162:	bd30      	pophi	{r4, r5, pc}
    1164:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    1168:	ea4f 3101 	mov.w	r1, r1, lsl #12
    116c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    1170:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    1174:	d002      	beq.n	117c <__adddf3+0x70>
    1176:	4240      	negs	r0, r0
    1178:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    117c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    1180:	ea4f 3303 	mov.w	r3, r3, lsl #12
    1184:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    1188:	d002      	beq.n	1190 <__adddf3+0x84>
    118a:	4252      	negs	r2, r2
    118c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1190:	ea94 0f05 	teq	r4, r5
    1194:	f000 80a7 	beq.w	12e6 <__adddf3+0x1da>
    1198:	f1a4 0401 	sub.w	r4, r4, #1
    119c:	f1d5 0e20 	rsbs	lr, r5, #32
    11a0:	db0d      	blt.n	11be <__adddf3+0xb2>
    11a2:	fa02 fc0e 	lsl.w	ip, r2, lr
    11a6:	fa22 f205 	lsr.w	r2, r2, r5
    11aa:	1880      	adds	r0, r0, r2
    11ac:	f141 0100 	adc.w	r1, r1, #0
    11b0:	fa03 f20e 	lsl.w	r2, r3, lr
    11b4:	1880      	adds	r0, r0, r2
    11b6:	fa43 f305 	asr.w	r3, r3, r5
    11ba:	4159      	adcs	r1, r3
    11bc:	e00e      	b.n	11dc <__adddf3+0xd0>
    11be:	f1a5 0520 	sub.w	r5, r5, #32
    11c2:	f10e 0e20 	add.w	lr, lr, #32
    11c6:	2a01      	cmp	r2, #1
    11c8:	fa03 fc0e 	lsl.w	ip, r3, lr
    11cc:	bf28      	it	cs
    11ce:	f04c 0c02 	orrcs.w	ip, ip, #2
    11d2:	fa43 f305 	asr.w	r3, r3, r5
    11d6:	18c0      	adds	r0, r0, r3
    11d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    11dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    11e0:	d507      	bpl.n	11f2 <__adddf3+0xe6>
    11e2:	f04f 0e00 	mov.w	lr, #0
    11e6:	f1dc 0c00 	rsbs	ip, ip, #0
    11ea:	eb7e 0000 	sbcs.w	r0, lr, r0
    11ee:	eb6e 0101 	sbc.w	r1, lr, r1
    11f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    11f6:	d31b      	bcc.n	1230 <__adddf3+0x124>
    11f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    11fc:	d30c      	bcc.n	1218 <__adddf3+0x10c>
    11fe:	0849      	lsrs	r1, r1, #1
    1200:	ea5f 0030 	movs.w	r0, r0, rrx
    1204:	ea4f 0c3c 	mov.w	ip, ip, rrx
    1208:	f104 0401 	add.w	r4, r4, #1
    120c:	ea4f 5244 	mov.w	r2, r4, lsl #21
    1210:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    1214:	f080 809a 	bcs.w	134c <__adddf3+0x240>
    1218:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    121c:	bf08      	it	eq
    121e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    1222:	f150 0000 	adcs.w	r0, r0, #0
    1226:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    122a:	ea41 0105 	orr.w	r1, r1, r5
    122e:	bd30      	pop	{r4, r5, pc}
    1230:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    1234:	4140      	adcs	r0, r0
    1236:	eb41 0101 	adc.w	r1, r1, r1
    123a:	3c01      	subs	r4, #1
    123c:	bf28      	it	cs
    123e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    1242:	d2e9      	bcs.n	1218 <__adddf3+0x10c>
    1244:	f091 0f00 	teq	r1, #0
    1248:	bf04      	itt	eq
    124a:	4601      	moveq	r1, r0
    124c:	2000      	moveq	r0, #0
    124e:	fab1 f381 	clz	r3, r1
    1252:	bf08      	it	eq
    1254:	3320      	addeq	r3, #32
    1256:	f1a3 030b 	sub.w	r3, r3, #11
    125a:	f1b3 0220 	subs.w	r2, r3, #32
    125e:	da0c      	bge.n	127a <__adddf3+0x16e>
    1260:	320c      	adds	r2, #12
    1262:	dd08      	ble.n	1276 <__adddf3+0x16a>
    1264:	f102 0c14 	add.w	ip, r2, #20
    1268:	f1c2 020c 	rsb	r2, r2, #12
    126c:	fa01 f00c 	lsl.w	r0, r1, ip
    1270:	fa21 f102 	lsr.w	r1, r1, r2
    1274:	e00c      	b.n	1290 <__adddf3+0x184>
    1276:	f102 0214 	add.w	r2, r2, #20
    127a:	bfd8      	it	le
    127c:	f1c2 0c20 	rsble	ip, r2, #32
    1280:	fa01 f102 	lsl.w	r1, r1, r2
    1284:	fa20 fc0c 	lsr.w	ip, r0, ip
    1288:	bfdc      	itt	le
    128a:	ea41 010c 	orrle.w	r1, r1, ip
    128e:	4090      	lslle	r0, r2
    1290:	1ae4      	subs	r4, r4, r3
    1292:	bfa2      	ittt	ge
    1294:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    1298:	4329      	orrge	r1, r5
    129a:	bd30      	popge	{r4, r5, pc}
    129c:	ea6f 0404 	mvn.w	r4, r4
    12a0:	3c1f      	subs	r4, #31
    12a2:	da1c      	bge.n	12de <__adddf3+0x1d2>
    12a4:	340c      	adds	r4, #12
    12a6:	dc0e      	bgt.n	12c6 <__adddf3+0x1ba>
    12a8:	f104 0414 	add.w	r4, r4, #20
    12ac:	f1c4 0220 	rsb	r2, r4, #32
    12b0:	fa20 f004 	lsr.w	r0, r0, r4
    12b4:	fa01 f302 	lsl.w	r3, r1, r2
    12b8:	ea40 0003 	orr.w	r0, r0, r3
    12bc:	fa21 f304 	lsr.w	r3, r1, r4
    12c0:	ea45 0103 	orr.w	r1, r5, r3
    12c4:	bd30      	pop	{r4, r5, pc}
    12c6:	f1c4 040c 	rsb	r4, r4, #12
    12ca:	f1c4 0220 	rsb	r2, r4, #32
    12ce:	fa20 f002 	lsr.w	r0, r0, r2
    12d2:	fa01 f304 	lsl.w	r3, r1, r4
    12d6:	ea40 0003 	orr.w	r0, r0, r3
    12da:	4629      	mov	r1, r5
    12dc:	bd30      	pop	{r4, r5, pc}
    12de:	fa21 f004 	lsr.w	r0, r1, r4
    12e2:	4629      	mov	r1, r5
    12e4:	bd30      	pop	{r4, r5, pc}
    12e6:	f094 0f00 	teq	r4, #0
    12ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    12ee:	bf06      	itte	eq
    12f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    12f4:	3401      	addeq	r4, #1
    12f6:	3d01      	subne	r5, #1
    12f8:	e74e      	b.n	1198 <__adddf3+0x8c>
    12fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    12fe:	bf18      	it	ne
    1300:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    1304:	d029      	beq.n	135a <__adddf3+0x24e>
    1306:	ea94 0f05 	teq	r4, r5
    130a:	bf08      	it	eq
    130c:	ea90 0f02 	teqeq	r0, r2
    1310:	d005      	beq.n	131e <__adddf3+0x212>
    1312:	ea54 0c00 	orrs.w	ip, r4, r0
    1316:	bf04      	itt	eq
    1318:	4619      	moveq	r1, r3
    131a:	4610      	moveq	r0, r2
    131c:	bd30      	pop	{r4, r5, pc}
    131e:	ea91 0f03 	teq	r1, r3
    1322:	bf1e      	ittt	ne
    1324:	2100      	movne	r1, #0
    1326:	2000      	movne	r0, #0
    1328:	bd30      	popne	{r4, r5, pc}
    132a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    132e:	d105      	bne.n	133c <__adddf3+0x230>
    1330:	0040      	lsls	r0, r0, #1
    1332:	4149      	adcs	r1, r1
    1334:	bf28      	it	cs
    1336:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    133a:	bd30      	pop	{r4, r5, pc}
    133c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    1340:	bf3c      	itt	cc
    1342:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    1346:	bd30      	popcc	{r4, r5, pc}
    1348:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    134c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    1350:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    1354:	f04f 0000 	mov.w	r0, #0
    1358:	bd30      	pop	{r4, r5, pc}
    135a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    135e:	bf1a      	itte	ne
    1360:	4619      	movne	r1, r3
    1362:	4610      	movne	r0, r2
    1364:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    1368:	bf1c      	itt	ne
    136a:	460b      	movne	r3, r1
    136c:	4602      	movne	r2, r0
    136e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    1372:	bf06      	itte	eq
    1374:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    1378:	ea91 0f03 	teqeq	r1, r3
    137c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    1380:	bd30      	pop	{r4, r5, pc}
    1382:	bf00      	nop

00001384 <__aeabi_ui2d>:
    1384:	f090 0f00 	teq	r0, #0
    1388:	bf04      	itt	eq
    138a:	2100      	moveq	r1, #0
    138c:	4770      	bxeq	lr
    138e:	b530      	push	{r4, r5, lr}
    1390:	f44f 6480 	mov.w	r4, #1024	; 0x400
    1394:	f104 0432 	add.w	r4, r4, #50	; 0x32
    1398:	f04f 0500 	mov.w	r5, #0
    139c:	f04f 0100 	mov.w	r1, #0
    13a0:	e750      	b.n	1244 <__adddf3+0x138>
    13a2:	bf00      	nop

000013a4 <__aeabi_i2d>:
    13a4:	f090 0f00 	teq	r0, #0
    13a8:	bf04      	itt	eq
    13aa:	2100      	moveq	r1, #0
    13ac:	4770      	bxeq	lr
    13ae:	b530      	push	{r4, r5, lr}
    13b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    13b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    13b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    13bc:	bf48      	it	mi
    13be:	4240      	negmi	r0, r0
    13c0:	f04f 0100 	mov.w	r1, #0
    13c4:	e73e      	b.n	1244 <__adddf3+0x138>
    13c6:	bf00      	nop

000013c8 <__aeabi_f2d>:
    13c8:	0042      	lsls	r2, r0, #1
    13ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
    13ce:	ea4f 0131 	mov.w	r1, r1, rrx
    13d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
    13d6:	bf1f      	itttt	ne
    13d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    13dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    13e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    13e4:	4770      	bxne	lr
    13e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    13ea:	bf08      	it	eq
    13ec:	4770      	bxeq	lr
    13ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    13f2:	bf04      	itt	eq
    13f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    13f8:	4770      	bxeq	lr
    13fa:	b530      	push	{r4, r5, lr}
    13fc:	f44f 7460 	mov.w	r4, #896	; 0x380
    1400:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    1404:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    1408:	e71c      	b.n	1244 <__adddf3+0x138>
    140a:	bf00      	nop

0000140c <__aeabi_ul2d>:
    140c:	ea50 0201 	orrs.w	r2, r0, r1
    1410:	bf08      	it	eq
    1412:	4770      	bxeq	lr
    1414:	b530      	push	{r4, r5, lr}
    1416:	f04f 0500 	mov.w	r5, #0
    141a:	e00a      	b.n	1432 <__aeabi_l2d+0x16>

0000141c <__aeabi_l2d>:
    141c:	ea50 0201 	orrs.w	r2, r0, r1
    1420:	bf08      	it	eq
    1422:	4770      	bxeq	lr
    1424:	b530      	push	{r4, r5, lr}
    1426:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    142a:	d502      	bpl.n	1432 <__aeabi_l2d+0x16>
    142c:	4240      	negs	r0, r0
    142e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    1432:	f44f 6480 	mov.w	r4, #1024	; 0x400
    1436:	f104 0432 	add.w	r4, r4, #50	; 0x32
    143a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    143e:	f43f aed8 	beq.w	11f2 <__adddf3+0xe6>
    1442:	f04f 0203 	mov.w	r2, #3
    1446:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    144a:	bf18      	it	ne
    144c:	3203      	addne	r2, #3
    144e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    1452:	bf18      	it	ne
    1454:	3203      	addne	r2, #3
    1456:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    145a:	f1c2 0320 	rsb	r3, r2, #32
    145e:	fa00 fc03 	lsl.w	ip, r0, r3
    1462:	fa20 f002 	lsr.w	r0, r0, r2
    1466:	fa01 fe03 	lsl.w	lr, r1, r3
    146a:	ea40 000e 	orr.w	r0, r0, lr
    146e:	fa21 f102 	lsr.w	r1, r1, r2
    1472:	4414      	add	r4, r2
    1474:	e6bd      	b.n	11f2 <__adddf3+0xe6>
    1476:	bf00      	nop

00001478 <__aeabi_uldivmod>:
    1478:	b953      	cbnz	r3, 1490 <__aeabi_uldivmod+0x18>
    147a:	b94a      	cbnz	r2, 1490 <__aeabi_uldivmod+0x18>
    147c:	2900      	cmp	r1, #0
    147e:	bf08      	it	eq
    1480:	2800      	cmpeq	r0, #0
    1482:	bf1c      	itt	ne
    1484:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    1488:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    148c:	f000 b80c 	b.w	14a8 <__aeabi_idiv0>
    1490:	f1ad 0c08 	sub.w	ip, sp, #8
    1494:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    1498:	f000 f81b 	bl	14d2 <__udivmoddi4>
    149c:	f8dd e004 	ldr.w	lr, [sp, #4]
    14a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    14a4:	b004      	add	sp, #16
    14a6:	4770      	bx	lr

000014a8 <__aeabi_idiv0>:
    14a8:	4770      	bx	lr
    14aa:	bf00      	nop

000014ac <__popcountsi2>:
    14ac:	0843      	lsrs	r3, r0, #1
    14ae:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
    14b2:	1ac0      	subs	r0, r0, r3
    14b4:	f000 3333 	and.w	r3, r0, #858993459	; 0x33333333
    14b8:	0880      	lsrs	r0, r0, #2
    14ba:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
    14be:	4418      	add	r0, r3
    14c0:	eb00 1010 	add.w	r0, r0, r0, lsr #4
    14c4:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
    14c8:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
    14cc:	4358      	muls	r0, r3
    14ce:	0e00      	lsrs	r0, r0, #24
    14d0:	4770      	bx	lr

000014d2 <__udivmoddi4>:
    14d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    14d6:	4607      	mov	r7, r0
    14d8:	468c      	mov	ip, r1
    14da:	4608      	mov	r0, r1
    14dc:	9e09      	ldr	r6, [sp, #36]	; 0x24
    14de:	4615      	mov	r5, r2
    14e0:	463c      	mov	r4, r7
    14e2:	4619      	mov	r1, r3
    14e4:	2b00      	cmp	r3, #0
    14e6:	f040 80c6 	bne.w	1676 <__udivmoddi4+0x1a4>
    14ea:	4282      	cmp	r2, r0
    14ec:	fab2 f782 	clz	r7, r2
    14f0:	d946      	bls.n	1580 <__udivmoddi4+0xae>
    14f2:	b14f      	cbz	r7, 1508 <__udivmoddi4+0x36>
    14f4:	f1c7 0e20 	rsb	lr, r7, #32
    14f8:	fa24 fe0e 	lsr.w	lr, r4, lr
    14fc:	fa00 f307 	lsl.w	r3, r0, r7
    1500:	40bd      	lsls	r5, r7
    1502:	ea4e 0c03 	orr.w	ip, lr, r3
    1506:	40bc      	lsls	r4, r7
    1508:	ea4f 4815 	mov.w	r8, r5, lsr #16
    150c:	fa1f fe85 	uxth.w	lr, r5
    1510:	fbbc f9f8 	udiv	r9, ip, r8
    1514:	0c22      	lsrs	r2, r4, #16
    1516:	fb08 c319 	mls	r3, r8, r9, ip
    151a:	fb09 fa0e 	mul.w	sl, r9, lr
    151e:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    1522:	459a      	cmp	sl, r3
    1524:	d928      	bls.n	1578 <__udivmoddi4+0xa6>
    1526:	18eb      	adds	r3, r5, r3
    1528:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
    152c:	d204      	bcs.n	1538 <__udivmoddi4+0x66>
    152e:	459a      	cmp	sl, r3
    1530:	d902      	bls.n	1538 <__udivmoddi4+0x66>
    1532:	f1a9 0002 	sub.w	r0, r9, #2
    1536:	442b      	add	r3, r5
    1538:	eba3 030a 	sub.w	r3, r3, sl
    153c:	b2a4      	uxth	r4, r4
    153e:	fbb3 f2f8 	udiv	r2, r3, r8
    1542:	fb08 3312 	mls	r3, r8, r2, r3
    1546:	fb02 fe0e 	mul.w	lr, r2, lr
    154a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    154e:	45a6      	cmp	lr, r4
    1550:	d914      	bls.n	157c <__udivmoddi4+0xaa>
    1552:	192c      	adds	r4, r5, r4
    1554:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
    1558:	d203      	bcs.n	1562 <__udivmoddi4+0x90>
    155a:	45a6      	cmp	lr, r4
    155c:	d901      	bls.n	1562 <__udivmoddi4+0x90>
    155e:	1e93      	subs	r3, r2, #2
    1560:	442c      	add	r4, r5
    1562:	eba4 040e 	sub.w	r4, r4, lr
    1566:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    156a:	b11e      	cbz	r6, 1574 <__udivmoddi4+0xa2>
    156c:	40fc      	lsrs	r4, r7
    156e:	2300      	movs	r3, #0
    1570:	6034      	str	r4, [r6, #0]
    1572:	6073      	str	r3, [r6, #4]
    1574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1578:	4648      	mov	r0, r9
    157a:	e7dd      	b.n	1538 <__udivmoddi4+0x66>
    157c:	4613      	mov	r3, r2
    157e:	e7f0      	b.n	1562 <__udivmoddi4+0x90>
    1580:	b902      	cbnz	r2, 1584 <__udivmoddi4+0xb2>
    1582:	deff      	udf	#255	; 0xff
    1584:	bb87      	cbnz	r7, 15e8 <__udivmoddi4+0x116>
    1586:	1a83      	subs	r3, r0, r2
    1588:	2101      	movs	r1, #1
    158a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    158e:	b2aa      	uxth	r2, r5
    1590:	fbb3 fcfe 	udiv	ip, r3, lr
    1594:	0c20      	lsrs	r0, r4, #16
    1596:	fb0e 331c 	mls	r3, lr, ip, r3
    159a:	fb0c f802 	mul.w	r8, ip, r2
    159e:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    15a2:	4598      	cmp	r8, r3
    15a4:	d963      	bls.n	166e <__udivmoddi4+0x19c>
    15a6:	18eb      	adds	r3, r5, r3
    15a8:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    15ac:	d204      	bcs.n	15b8 <__udivmoddi4+0xe6>
    15ae:	4598      	cmp	r8, r3
    15b0:	d902      	bls.n	15b8 <__udivmoddi4+0xe6>
    15b2:	f1ac 0002 	sub.w	r0, ip, #2
    15b6:	442b      	add	r3, r5
    15b8:	eba3 0308 	sub.w	r3, r3, r8
    15bc:	b2a4      	uxth	r4, r4
    15be:	fbb3 fcfe 	udiv	ip, r3, lr
    15c2:	fb0e 331c 	mls	r3, lr, ip, r3
    15c6:	fb0c f202 	mul.w	r2, ip, r2
    15ca:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    15ce:	42a2      	cmp	r2, r4
    15d0:	d94f      	bls.n	1672 <__udivmoddi4+0x1a0>
    15d2:	192c      	adds	r4, r5, r4
    15d4:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
    15d8:	d204      	bcs.n	15e4 <__udivmoddi4+0x112>
    15da:	42a2      	cmp	r2, r4
    15dc:	d902      	bls.n	15e4 <__udivmoddi4+0x112>
    15de:	f1ac 0302 	sub.w	r3, ip, #2
    15e2:	442c      	add	r4, r5
    15e4:	1aa4      	subs	r4, r4, r2
    15e6:	e7be      	b.n	1566 <__udivmoddi4+0x94>
    15e8:	f1c7 0c20 	rsb	ip, r7, #32
    15ec:	fa20 f80c 	lsr.w	r8, r0, ip
    15f0:	fa00 f307 	lsl.w	r3, r0, r7
    15f4:	fa24 fc0c 	lsr.w	ip, r4, ip
    15f8:	40bd      	lsls	r5, r7
    15fa:	ea4c 0203 	orr.w	r2, ip, r3
    15fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    1602:	b2ab      	uxth	r3, r5
    1604:	fbb8 fcfe 	udiv	ip, r8, lr
    1608:	0c11      	lsrs	r1, r2, #16
    160a:	fb0e 801c 	mls	r0, lr, ip, r8
    160e:	fb0c f903 	mul.w	r9, ip, r3
    1612:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
    1616:	4581      	cmp	r9, r0
    1618:	fa04 f407 	lsl.w	r4, r4, r7
    161c:	d923      	bls.n	1666 <__udivmoddi4+0x194>
    161e:	1828      	adds	r0, r5, r0
    1620:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
    1624:	d204      	bcs.n	1630 <__udivmoddi4+0x15e>
    1626:	4581      	cmp	r9, r0
    1628:	d902      	bls.n	1630 <__udivmoddi4+0x15e>
    162a:	f1ac 0102 	sub.w	r1, ip, #2
    162e:	4428      	add	r0, r5
    1630:	eba0 0009 	sub.w	r0, r0, r9
    1634:	b292      	uxth	r2, r2
    1636:	fbb0 fcfe 	udiv	ip, r0, lr
    163a:	fb0e 001c 	mls	r0, lr, ip, r0
    163e:	fb0c f803 	mul.w	r8, ip, r3
    1642:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
    1646:	4598      	cmp	r8, r3
    1648:	d90f      	bls.n	166a <__udivmoddi4+0x198>
    164a:	18eb      	adds	r3, r5, r3
    164c:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
    1650:	d204      	bcs.n	165c <__udivmoddi4+0x18a>
    1652:	4598      	cmp	r8, r3
    1654:	d902      	bls.n	165c <__udivmoddi4+0x18a>
    1656:	f1ac 0202 	sub.w	r2, ip, #2
    165a:	442b      	add	r3, r5
    165c:	eba3 0308 	sub.w	r3, r3, r8
    1660:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
    1664:	e791      	b.n	158a <__udivmoddi4+0xb8>
    1666:	4661      	mov	r1, ip
    1668:	e7e2      	b.n	1630 <__udivmoddi4+0x15e>
    166a:	4662      	mov	r2, ip
    166c:	e7f6      	b.n	165c <__udivmoddi4+0x18a>
    166e:	4660      	mov	r0, ip
    1670:	e7a2      	b.n	15b8 <__udivmoddi4+0xe6>
    1672:	4663      	mov	r3, ip
    1674:	e7b6      	b.n	15e4 <__udivmoddi4+0x112>
    1676:	4283      	cmp	r3, r0
    1678:	d905      	bls.n	1686 <__udivmoddi4+0x1b4>
    167a:	b10e      	cbz	r6, 1680 <__udivmoddi4+0x1ae>
    167c:	e9c6 7000 	strd	r7, r0, [r6]
    1680:	2100      	movs	r1, #0
    1682:	4608      	mov	r0, r1
    1684:	e776      	b.n	1574 <__udivmoddi4+0xa2>
    1686:	fab3 f183 	clz	r1, r3
    168a:	b981      	cbnz	r1, 16ae <__udivmoddi4+0x1dc>
    168c:	4283      	cmp	r3, r0
    168e:	d301      	bcc.n	1694 <__udivmoddi4+0x1c2>
    1690:	42ba      	cmp	r2, r7
    1692:	d80a      	bhi.n	16aa <__udivmoddi4+0x1d8>
    1694:	1abc      	subs	r4, r7, r2
    1696:	eb60 0303 	sbc.w	r3, r0, r3
    169a:	2001      	movs	r0, #1
    169c:	469c      	mov	ip, r3
    169e:	2e00      	cmp	r6, #0
    16a0:	d068      	beq.n	1774 <__udivmoddi4+0x2a2>
    16a2:	e9c6 4c00 	strd	r4, ip, [r6]
    16a6:	2100      	movs	r1, #0
    16a8:	e764      	b.n	1574 <__udivmoddi4+0xa2>
    16aa:	4608      	mov	r0, r1
    16ac:	e7f7      	b.n	169e <__udivmoddi4+0x1cc>
    16ae:	f1c1 0c20 	rsb	ip, r1, #32
    16b2:	408b      	lsls	r3, r1
    16b4:	fa22 f40c 	lsr.w	r4, r2, ip
    16b8:	431c      	orrs	r4, r3
    16ba:	fa02 f501 	lsl.w	r5, r2, r1
    16be:	fa00 f301 	lsl.w	r3, r0, r1
    16c2:	fa27 f20c 	lsr.w	r2, r7, ip
    16c6:	fa20 fb0c 	lsr.w	fp, r0, ip
    16ca:	ea4f 4914 	mov.w	r9, r4, lsr #16
    16ce:	4313      	orrs	r3, r2
    16d0:	fbbb f8f9 	udiv	r8, fp, r9
    16d4:	fa1f fe84 	uxth.w	lr, r4
    16d8:	fb09 bb18 	mls	fp, r9, r8, fp
    16dc:	0c1a      	lsrs	r2, r3, #16
    16de:	fb08 fa0e 	mul.w	sl, r8, lr
    16e2:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
    16e6:	4592      	cmp	sl, r2
    16e8:	fa07 f701 	lsl.w	r7, r7, r1
    16ec:	d93e      	bls.n	176c <__udivmoddi4+0x29a>
    16ee:	18a2      	adds	r2, r4, r2
    16f0:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
    16f4:	d204      	bcs.n	1700 <__udivmoddi4+0x22e>
    16f6:	4592      	cmp	sl, r2
    16f8:	d902      	bls.n	1700 <__udivmoddi4+0x22e>
    16fa:	f1a8 0002 	sub.w	r0, r8, #2
    16fe:	4422      	add	r2, r4
    1700:	eba2 020a 	sub.w	r2, r2, sl
    1704:	b29b      	uxth	r3, r3
    1706:	fbb2 f8f9 	udiv	r8, r2, r9
    170a:	fb09 2218 	mls	r2, r9, r8, r2
    170e:	fb08 fe0e 	mul.w	lr, r8, lr
    1712:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
    1716:	4596      	cmp	lr, r2
    1718:	d92a      	bls.n	1770 <__udivmoddi4+0x29e>
    171a:	18a2      	adds	r2, r4, r2
    171c:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    1720:	d204      	bcs.n	172c <__udivmoddi4+0x25a>
    1722:	4596      	cmp	lr, r2
    1724:	d902      	bls.n	172c <__udivmoddi4+0x25a>
    1726:	f1a8 0302 	sub.w	r3, r8, #2
    172a:	4422      	add	r2, r4
    172c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    1730:	fba0 9305 	umull	r9, r3, r0, r5
    1734:	eba2 020e 	sub.w	r2, r2, lr
    1738:	429a      	cmp	r2, r3
    173a:	46ce      	mov	lr, r9
    173c:	4698      	mov	r8, r3
    173e:	d302      	bcc.n	1746 <__udivmoddi4+0x274>
    1740:	d106      	bne.n	1750 <__udivmoddi4+0x27e>
    1742:	454f      	cmp	r7, r9
    1744:	d204      	bcs.n	1750 <__udivmoddi4+0x27e>
    1746:	ebb9 0e05 	subs.w	lr, r9, r5
    174a:	eb63 0804 	sbc.w	r8, r3, r4
    174e:	3801      	subs	r0, #1
    1750:	b186      	cbz	r6, 1774 <__udivmoddi4+0x2a2>
    1752:	ebb7 030e 	subs.w	r3, r7, lr
    1756:	eb62 0708 	sbc.w	r7, r2, r8
    175a:	fa07 fc0c 	lsl.w	ip, r7, ip
    175e:	40cb      	lsrs	r3, r1
    1760:	ea4c 0303 	orr.w	r3, ip, r3
    1764:	40cf      	lsrs	r7, r1
    1766:	e9c6 3700 	strd	r3, r7, [r6]
    176a:	e79c      	b.n	16a6 <__udivmoddi4+0x1d4>
    176c:	4640      	mov	r0, r8
    176e:	e7c7      	b.n	1700 <__udivmoddi4+0x22e>
    1770:	4643      	mov	r3, r8
    1772:	e7db      	b.n	172c <__udivmoddi4+0x25a>
    1774:	4631      	mov	r1, r6
    1776:	e6fd      	b.n	1574 <__udivmoddi4+0xa2>

00001778 <ull_drift_ticks_get>:
 * @param ticks_drift_minus[out] Negative part of drift uncertainty window
 */
void ull_drift_ticks_get(struct node_rx_event_done *done,
			 uint32_t *ticks_drift_plus,
			 uint32_t *ticks_drift_minus)
{
    1778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    177c:	4603      	mov	r3, r0
	uint32_t window_widening_event_us;
	uint32_t preamble_to_addr_us;

	start_to_address_actual_us =
		done->extra.drift.start_to_address_actual_us;
	window_widening_event_us =
    177e:	e9d0 800a 	ldrd	r8, r0, [r0, #40]	; 0x28
		done->extra.drift.window_widening_event_us;
	preamble_to_addr_us =
    1782:	6b1e      	ldr	r6, [r3, #48]	; 0x30
		done->extra.drift.preamble_to_addr_us;

	start_to_address_expected_us = EVENT_JITTER_US +
    1784:	4d18      	ldr	r5, [pc, #96]	; (17e8 <ull_drift_ticks_get+0x70>)
				       EVENT_TICKER_RES_MARGIN_US +
				       window_widening_event_us +
    1786:	1984      	adds	r4, r0, r6
	start_to_address_expected_us = EVENT_JITTER_US +
    1788:	3430      	adds	r4, #48	; 0x30
				       preamble_to_addr_us;

	if (start_to_address_actual_us <= start_to_address_expected_us) {
    178a:	45a0      	cmp	r8, r4
{
    178c:	4617      	mov	r7, r2
    178e:	4689      	mov	r9, r1
		*ticks_drift_plus =
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
    1790:	a313      	add	r3, pc, #76	; (adr r3, 17e0 <ull_drift_ticks_get+0x68>)
    1792:	e9d3 2300 	ldrd	r2, r3, [r3]
	if (start_to_address_actual_us <= start_to_address_expected_us) {
    1796:	d815      	bhi.n	17c4 <ull_drift_ticks_get+0x4c>
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
    1798:	fba0 0105 	umull	r0, r1, r0, r5
    179c:	f7ff fe6c 	bl	1478 <__aeabi_uldivmod>
    17a0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
    17a4:	f8c9 0000 	str.w	r0, [r9]
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
    17a8:	eba4 0008 	sub.w	r0, r4, r8
					       start_to_address_actual_us));
	} else {
		*ticks_drift_plus =
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
    17ac:	a30c      	add	r3, pc, #48	; (adr r3, 17e0 <ull_drift_ticks_get+0x68>)
    17ae:	e9d3 2300 	ldrd	r2, r3, [r3]
    17b2:	fba0 0105 	umull	r0, r1, r0, r5
    17b6:	f7ff fe5f 	bl	1478 <__aeabi_uldivmod>
    17ba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
    17be:	6038      	str	r0, [r7, #0]
					       EVENT_TICKER_RES_MARGIN_US +
					       preamble_to_addr_us);
	}
}
    17c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
    17c4:	fba8 0105 	umull	r0, r1, r8, r5
    17c8:	f7ff fe56 	bl	1478 <__aeabi_uldivmod>
    17cc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
    17d0:	f8c9 0000 	str.w	r0, [r9]
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
    17d4:	f106 0030 	add.w	r0, r6, #48	; 0x30
    17d8:	e7e8      	b.n	17ac <ull_drift_ticks_get+0x34>
    17da:	bf00      	nop
    17dc:	f3af 8000 	nop.w
    17e0:	1afd498d 	.word	0x1afd498d
    17e4:	00000007 	.word	0x00000007
    17e8:	3b9aca00 	.word	0x3b9aca00
    17ec:	00000000 	.word	0x00000000

000017f0 <ll_adv_enable>:
	uint8_t aux_is_started = 0U;
	uint32_t ticks_anchor;
#endif /* !CONFIG_BT_HCI_MESH_EXT */
#else /* !CONFIG_BT_CTLR_ADV_EXT || !CONFIG_BT_HCI_MESH_EXT */
uint8_t ll_adv_enable(uint8_t enable)
{
    17f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    17f4:	b08f      	sub	sp, #60	; 0x3c
	struct ll_adv_set *adv;
	struct lll_adv *lll;
	uint8_t hci_err;
	uint32_t ret;

	if (!enable) {
    17f6:	b920      	cbnz	r0, 1802 <ll_adv_enable+0x12>
		conn_release(adv);
	}
#endif /* CONFIG_BT_PERIPHERAL */

	return BT_HCI_ERR_CMD_DISALLOWED;
}
    17f8:	b00f      	add	sp, #60	; 0x3c
    17fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		return disable(handle);
    17fe:	f011 bafd 	b.w	12dfc <disable.constprop.0>
static inline struct ll_adv_set *is_disabled_get(uint8_t handle)
{
	struct ll_adv_set *adv;

	adv = ull_adv_set_get(handle);
	if (!adv || adv->is_enabled) {
    1802:	4ebd      	ldr	r6, [pc, #756]	; (1af8 <ll_adv_enable+0x308>)
    1804:	f896 706a 	ldrb.w	r7, [r6, #106]	; 0x6a
    1808:	f017 0701 	ands.w	r7, r7, #1
    180c:	f040 816e 	bne.w	1aec <ll_adv_enable+0x2fc>
	lll_adv_pdu_enqueue(&lll->adv_data, idx);
}

static inline struct pdu_adv *lll_adv_data_peek(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    1810:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
    1814:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    1818:	f8d3 902c 	ldr.w	r9, [r3, #44]	; 0x2c
	lll_adv_pdu_enqueue(&lll->scan_rsp, idx);
}

static inline struct pdu_adv *lll_adv_scan_rsp_peek(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    181c:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
    1820:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    1824:	f8d3 b038 	ldr.w	fp, [r3, #56]	; 0x38
#endif /* CONFIG_BT_CTLR_ADV_EXT */
	} else {
		pdu_adv_to_update = pdu;
	}

	if (pdu_adv_to_update) {
    1828:	f1b9 0f00 	cmp.w	r9, #0
    182c:	d013      	beq.n	1856 <ll_adv_enable+0x66>
#if defined(CONFIG_BT_CTLR_ADV_EXT)
		} else if (ll_adv_cmds_is_ext() && pdu->tx_addr) {
			own_id_addr = adv->rnd_addr;
#endif
		} else {
			own_id_addr = ll_addr_get(pdu->tx_addr);
    182e:	464c      	mov	r4, r9
    1830:	f814 0b02 	ldrb.w	r0, [r4], #2
    1834:	f3c0 1080 	ubfx	r0, r0, #6, #1
    1838:	f00f f89e 	bl	10978 <ll_addr_get>
	} else {
		tx_addr = own_id_addr;
	}

	adv_addr = adv_pdu_adva_get(pdu);
	memcpy(adv_addr, tx_addr, BDADDR_SIZE);
    183c:	2206      	movs	r2, #6
			own_id_addr = ll_addr_get(pdu->tx_addr);
    183e:	4601      	mov	r1, r0
	memcpy(adv_addr, tx_addr, BDADDR_SIZE);
    1840:	4620      	mov	r0, r4
    1842:	f01c fbf6 	bl	1e032 <memcpy>
		if (pdu_adv_to_update->tx_addr &&
    1846:	f899 3000 	ldrb.w	r3, [r9]
    184a:	065a      	lsls	r2, r3, #25
    184c:	d40d      	bmi.n	186a <ll_adv_enable+0x7a>
			ull_adv_pdu_update_addrs(adv, pdu_scan);
    184e:	48aa      	ldr	r0, [pc, #680]	; (1af8 <ll_adv_enable+0x308>)
    1850:	4659      	mov	r1, fp
    1852:	f022 fc0f 	bl	24074 <ull_adv_pdu_update_addrs>
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
    1856:	f899 3000 	ldrb.w	r3, [r9]
    185a:	f013 0f0e 	tst.w	r3, #14
    185e:	f040 80a2 	bne.w	19a6 <ll_adv_enable+0x1b6>
		if (lll->conn) {
    1862:	6a33      	ldr	r3, [r6, #32]
    1864:	b14b      	cbz	r3, 187a <ll_adv_enable+0x8a>
	return BT_HCI_ERR_CMD_DISALLOWED;
    1866:	270c      	movs	r7, #12
    1868:	e099      	b.n	199e <ll_adv_enable+0x1ae>
		    !mem_nz((void *)adv_addr, BDADDR_SIZE)) {
    186a:	2106      	movs	r1, #6
    186c:	4620      	mov	r0, r4
    186e:	f021 fff8 	bl	23862 <mem_nz>
		if (pdu_adv_to_update->tx_addr &&
    1872:	2800      	cmp	r0, #0
    1874:	d1eb      	bne.n	184e <ll_adv_enable+0x5e>
			return BT_HCI_ERR_INVALID_PARAM;
    1876:	2712      	movs	r7, #18
    1878:	e091      	b.n	199e <ll_adv_enable+0x1ae>
		link = ll_rx_link_alloc();
    187a:	f010 fa89 	bl	11d90 <ll_rx_link_alloc>
		if (!link) {
    187e:	4680      	mov	r8, r0
    1880:	b130      	cbz	r0, 1890 <ll_adv_enable+0xa0>
		node_rx = ll_rx_alloc();
    1882:	f010 fa91 	bl	11da8 <ll_rx_alloc>
		if (!node_rx) {
    1886:	4682      	mov	sl, r0
    1888:	b920      	cbnz	r0, 1894 <ll_adv_enable+0xa4>
			ll_rx_link_release(link);
    188a:	4640      	mov	r0, r8
    188c:	f010 fa86 	bl	11d9c <ll_rx_link_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    1890:	2707      	movs	r7, #7
    1892:	e084      	b.n	199e <ll_adv_enable+0x1ae>
		conn = ll_conn_acquire();
    1894:	f011 fd6c 	bl	13370 <ll_conn_acquire>
		if (!conn) {
    1898:	4604      	mov	r4, r0
    189a:	b918      	cbnz	r0, 18a4 <ll_adv_enable+0xb4>
			ll_rx_release(node_rx);
    189c:	4650      	mov	r0, sl
    189e:	f010 fa89 	bl	11db4 <ll_rx_release>
    18a2:	e7f2      	b.n	188a <ll_adv_enable+0x9a>
		conn_lll->handle = 0xFFFF;
    18a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
    18a8:	8502      	strh	r2, [r0, #40]	; 0x28
		if (!conn_lll->link_tx_free) {
    18aa:	6e82      	ldr	r2, [r0, #104]	; 0x68
		conn_lll = &conn->lll;
    18ac:	f100 031c 	add.w	r3, r0, #28
		if (!conn_lll->link_tx_free) {
    18b0:	b912      	cbnz	r2, 18b8 <ll_adv_enable+0xc8>
			conn_lll->link_tx_free = &conn_lll->link_tx;
    18b2:	f100 0260 	add.w	r2, r0, #96	; 0x60
    18b6:	6682      	str	r2, [r0, #104]	; 0x68
		memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
    18b8:	f104 025c 	add.w	r2, r4, #92	; 0x5c
    18bc:	f104 0158 	add.w	r1, r4, #88	; 0x58
    18c0:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    18c2:	930b      	str	r3, [sp, #44]	; 0x2c
    18c4:	f021 ffd8 	bl	23878 <memq_init>
		conn_lll->sn = 0;
    18c8:	f894 206e 	ldrb.w	r2, [r4, #110]	; 0x6e
    18cc:	f022 0207 	bic.w	r2, r2, #7
    18d0:	f884 206e 	strb.w	r2, [r4, #110]	; 0x6e
		conn_lll->data_chan_sel = 0;
    18d4:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
    18d8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    18dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
    18e0:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
		conn_lll->periph.initiated = 0;
    18e4:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    18e8:	f022 0207 	bic.w	r2, r2, #7
    18ec:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
		conn->connect_expire = 6;
    18f0:	2206      	movs	r2, #6
    18f2:	f8a4 2070 	strh.w	r2, [r4, #112]	; 0x70
		conn->common.fex_valid = 0;
    18f6:	f894 207c 	ldrb.w	r2, [r4, #124]	; 0x7c
		conn_lll->link_tx_free = NULL;
    18fa:	2500      	movs	r5, #0
		conn->common.fex_valid = 0;
    18fc:	f022 0207 	bic.w	r2, r2, #7
    1900:	f884 207c 	strb.w	r2, [r4, #124]	; 0x7c
		conn_lll->periph.window_widening_event_us = 0;
    1904:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
		conn_lll->link_tx_free = NULL;
    1908:	66a5      	str	r5, [r4, #104]	; 0x68
		conn_lll->packet_tx_head_len = 0;
    190a:	f8a4 506c 	strh.w	r5, [r4, #108]	; 0x6c
		conn_lll->latency_prepare = 0;
    190e:	85e5      	strh	r5, [r4, #46]	; 0x2e
		conn_lll->latency_event = 0;
    1910:	6325      	str	r5, [r4, #48]	; 0x30
		conn_lll->data_chan_use = 0;
    1912:	f884 503b 	strb.w	r5, [r4, #59]	; 0x3b
		conn_lll->periph.window_size_prepare_us = 0;
    1916:	6525      	str	r5, [r4, #80]	; 0x50
		conn->supervision_expire = 0;
    1918:	f8a4 5074 	strh.w	r5, [r4, #116]	; 0x74
		conn->procedure_expire = 0;
    191c:	f8a4 5078 	strh.w	r5, [r4, #120]	; 0x78
		conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0;
    1920:	f8a4 5088 	strh.w	r5, [r4, #136]	; 0x88
    1924:	f884 508a 	strb.w	r5, [r4, #138]	; 0x8a
		conn->llcp_rx = NULL;
    1928:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
		conn->llcp_cu.req = conn->llcp_cu.ack = 0;
    192c:	f8a4 509c 	strh.w	r5, [r4, #156]	; 0x9c
		conn->llcp_feature.req = conn->llcp_feature.ack = 0;
    1930:	f8a4 50b0 	strh.w	r5, [r4, #176]	; 0xb0
		conn->llcp_feature.features_conn = ll_feat_get();
    1934:	f022 fad4 	bl	23ee0 <ll_feat_get>
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
    1938:	f894 20ca 	ldrb.w	r2, [r4, #202]	; 0xca
		lll->conn = conn_lll;
    193c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    193e:	6233      	str	r3, [r6, #32]
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
    1940:	f022 0203 	bic.w	r2, r2, #3
    1944:	f884 20ca 	strb.w	r2, [r4, #202]	; 0xca
		conn->llcp_conn_param.disabled = 0;
    1948:	f894 20f6 	ldrb.w	r2, [r4, #246]	; 0xf6
		conn->llcp_version.req = conn->llcp_version.ack = 0;
    194c:	f8a4 50c8 	strh.w	r5, [r4, #200]	; 0xc8
		conn->llcp_feature.features_conn = ll_feat_get();
    1950:	e9c4 012e 	strd	r0, r1, [r4, #184]	; 0xb8
		conn->llcp_conn_param.disabled = 0;
    1954:	f365 1245 	bfi	r2, r5, #5, #1
		conn->llcp_feature.features_peer = 0;
    1958:	2000      	movs	r0, #0
    195a:	2100      	movs	r1, #0
		adv->node_rx_cc_free = node_rx;
    195c:	e9c6 8a18 	strd	r8, sl, [r6, #96]	; 0x60
		conn->llcp_feature.features_peer = 0;
    1960:	e9c4 0130 	strd	r0, r1, [r4, #192]	; 0xc0
		conn->tx_data = conn->tx_data_last = 0;
    1964:	e9c4 554a 	strd	r5, r5, [r4, #296]	; 0x128
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
    1968:	e9c4 5548 	strd	r5, r5, [r4, #288]	; 0x120
}

static inline void ull_hdr_init(struct ull_hdr *hdr)
{
	hdr->ref = 0U;
	hdr->disabled_cb = hdr->disabled_param = NULL;
    196c:	e9c4 5505 	strd	r5, r5, [r4, #20]
		conn->llcp_terminate.req = conn->llcp_terminate.ack = 0;
    1970:	f8a4 50d0 	strh.w	r5, [r4, #208]	; 0xd0
		conn->llcp_terminate.reason_final = 0;
    1974:	f884 50d3 	strb.w	r5, [r4, #211]	; 0xd3
		conn->llcp_terminate.node_rx.hdr.link = link;
    1978:	f8c4 80d4 	str.w	r8, [r4, #212]	; 0xd4
		conn->llcp_conn_param.req = 0;
    197c:	f8a4 50f4 	strh.w	r5, [r4, #244]	; 0xf4
		conn->llcp_conn_param.disabled = 0;
    1980:	f884 20f6 	strb.w	r2, [r4, #246]	; 0xf6
		conn->periph.ticks_to_offset = 0;
    1984:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
    1988:	f8c4 511c 	str.w	r5, [r4, #284]	; 0x11c
	hdr->ref = 0U;
    198c:	7025      	strb	r5, [r4, #0]

static inline void lll_hdr_init(void *lll, void *parent)
{
	struct lll_hdr *hdr = lll;

	hdr->parent = parent;
    198e:	61e4      	str	r4, [r4, #28]
		err = lll_clock_wait();
    1990:	f013 fb24 	bl	14fdc <lll_clock_wait>
		if (err) {
    1994:	b138      	cbz	r0, 19a6 <ll_adv_enable+0x1b6>
			conn_release(adv);
    1996:	4858      	ldr	r0, [pc, #352]	; (1af8 <ll_adv_enable+0x308>)
    1998:	f010 ffd8 	bl	1294c <conn_release>
			return BT_HCI_ERR_HW_FAILURE;
    199c:	2703      	movs	r7, #3
}
    199e:	4638      	mov	r0, r7
    19a0:	b00f      	add	sp, #60	; 0x3c
    19a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t ch_map = lll->chan_map;
    19a6:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
    19aa:	2101      	movs	r1, #1
	uint8_t ch_map = lll->chan_map;
    19ac:	f3c3 0342 	ubfx	r3, r3, #1, #3
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
    19b0:	f10d 0033 	add.w	r0, sp, #51	; 0x33
	uint8_t ch_map = lll->chan_map;
    19b4:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
    19b8:	f021 ff8a 	bl	238d0 <util_ones_count_get>
	if (adv_chn_cnt == 0) {
    19bc:	4602      	mov	r2, r0
    19be:	2800      	cmp	r0, #0
    19c0:	f000 808c 	beq.w	1adc <ll_adv_enable+0x2ec>
	uint16_t time_us = adv_time_get(pdu_adv, pdu_scan, adv_chn_cnt, phy,
    19c4:	f89b 1001 	ldrb.w	r1, [fp, #1]
    19c8:	4648      	mov	r0, r9
    19ca:	f022 fb09 	bl	23fe0 <adv_time_get.constprop.0.isra.0>
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
    19ce:	494b      	ldr	r1, [pc, #300]	; (1afc <ll_adv_enable+0x30c>)
	uint16_t interval = adv->interval;
    19d0:	f8b6 8068 	ldrh.w	r8, [r6, #104]	; 0x68
    19d4:	2400      	movs	r4, #0
	adv->ull.ticks_prepare_to_start =
    19d6:	2331      	movs	r3, #49	; 0x31
	adv->ull.ticks_preempt_to_start =
    19d8:	e9c6 3402 	strd	r3, r4, [r6, #8]
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
    19dc:	fba0 0101 	umull	r0, r1, r0, r1
    19e0:	a343      	add	r3, pc, #268	; (adr r3, 1af0 <ll_adv_enable+0x300>)
    19e2:	e9d3 2300 	ldrd	r2, r3, [r3]
	hdr->disabled_cb = hdr->disabled_param = NULL;
    19e6:	e9c6 4405 	strd	r4, r4, [r6, #20]
	hdr->ref = 0U;
    19ea:	7034      	strb	r4, [r6, #0]
	adv->ull.ticks_active_to_start = 0;
    19ec:	6074      	str	r4, [r6, #4]
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
    19ee:	f7ff fd43 	bl	1478 <__aeabi_uldivmod>
    19f2:	6130      	str	r0, [r6, #16]
	ticks_anchor = ticker_ticks_now_get();
    19f4:	f022 fa14 	bl	23e20 <ticker_ticks_now_get>
    19f8:	4605      	mov	r5, r0
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
    19fa:	f1b8 0f00 	cmp.w	r8, #0
    19fe:	d106      	bne.n	1a0e <ll_adv_enable+0x21e>
    1a00:	f899 4000 	ldrb.w	r4, [r9]
    1a04:	f004 040f 	and.w	r4, r4, #15
    1a08:	1e63      	subs	r3, r4, #1
    1a0a:	425c      	negs	r4, r3
    1a0c:	415c      	adcs	r4, r3
    1a0e:	f896 9024 	ldrb.w	r9, [r6, #36]	; 0x24
				   (adv->ull.ticks_slot + ticks_slot_overhead),
    1a12:	6933      	ldr	r3, [r6, #16]
    1a14:	f8df b0e8 	ldr.w	fp, [pc, #232]	; 1b00 <ll_adv_enable+0x310>
    1a18:	4a3a      	ldr	r2, [pc, #232]	; (1b04 <ll_adv_enable+0x314>)
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
    1a1a:	f364 0900 	bfi	r9, r4, #0, #1
    1a1e:	f886 9024 	strb.w	r9, [r6, #36]	; 0x24
	if (lll->is_hdcd) {
    1a22:	f04f 0a02 	mov.w	sl, #2
    1a26:	f019 0901 	ands.w	r9, r9, #1
    1a2a:	ac0d      	add	r4, sp, #52	; 0x34
		ret_cb = TICKER_STATUS_BUSY;
    1a2c:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
	if (lll->is_hdcd) {
    1a30:	d031      	beq.n	1a96 <ll_adv_enable+0x2a6>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1a32:	2000      	movs	r0, #0
    1a34:	e9cd 2605 	strd	r2, r6, [sp, #20]
    1a38:	e9cd 0300 	strd	r0, r3, [sp]
    1a3c:	9304      	str	r3, [sp, #16]
    1a3e:	2103      	movs	r1, #3
    1a40:	e9cd b407 	strd	fp, r4, [sp, #28]
    1a44:	e9cd 0002 	strd	r0, r0, [sp, #8]
    1a48:	462b      	mov	r3, r5
    1a4a:	4652      	mov	r2, sl
    1a4c:	f022 f9b5 	bl	23dba <ticker_start>
		ret = ull_ticker_status_take(ret, &ret_cb);
    1a50:	4621      	mov	r1, r4
    1a52:	f010 fac3 	bl	11fdc <ull_ticker_status_take>
		if (ret != TICKER_STATUS_SUCCESS) {
    1a56:	2800      	cmp	r0, #0
    1a58:	d140      	bne.n	1adc <ll_adv_enable+0x2ec>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1a5a:	4a2b      	ldr	r2, [pc, #172]	; (1b08 <ll_adv_enable+0x318>)
    1a5c:	9606      	str	r6, [sp, #24]
    1a5e:	f24a 33d8 	movw	r3, #41944	; 0xa3d8
    1a62:	e9cd 0204 	strd	r0, r2, [sp, #16]
    1a66:	9300      	str	r3, [sp, #0]
    1a68:	e9cd b407 	strd	fp, r4, [sp, #28]
    1a6c:	e9cd 0002 	strd	r0, r0, [sp, #8]
    1a70:	9001      	str	r0, [sp, #4]
    1a72:	462b      	mov	r3, r5
    1a74:	2201      	movs	r2, #1
    1a76:	2103      	movs	r1, #3
		ret_cb = TICKER_STATUS_BUSY;
    1a78:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1a7c:	f022 f99d 	bl	23dba <ticker_start>
	ret = ull_ticker_status_take(ret, &ret_cb);
    1a80:	4621      	mov	r1, r4
    1a82:	f010 faab 	bl	11fdc <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
    1a86:	bb48      	cbnz	r0, 1adc <ll_adv_enable+0x2ec>
	adv->is_enabled = 1;
    1a88:	f896 306a 	ldrb.w	r3, [r6, #106]	; 0x6a
    1a8c:	f043 0301 	orr.w	r3, r3, #1
    1a90:	f886 306a 	strb.w	r3, [r6, #106]	; 0x6a
	return 0;
    1a94:	e783      	b.n	199e <ll_adv_enable+0x1ae>
		ll_adv_ticker_ext[handle].ticks_slot_window =
    1a96:	491d      	ldr	r1, [pc, #116]	; (1b0c <ll_adv_enable+0x31c>)
			ULL_ADV_RANDOM_DELAY + ticks_slot;
    1a98:	f203 1047 	addw	r0, r3, #327	; 0x147
		ll_adv_ticker_ext[handle].ticks_slot_window =
    1a9c:	6008      	str	r0, [r1, #0]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    1a9e:	481c      	ldr	r0, [pc, #112]	; (1b10 <ll_adv_enable+0x320>)
		ret = ticker_start_ext(
    1aa0:	e9cd 3204 	strd	r3, r2, [sp, #16]
    1aa4:	e9cd 4108 	strd	r4, r1, [sp, #32]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    1aa8:	f04f 0c91 	mov.w	ip, #145	; 0x91
    1aac:	fba8 0100 	umull	r0, r1, r8, r0
		ret = ticker_start_ext(
    1ab0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1ab4:	e9cd 9302 	strd	r9, r3, [sp, #8]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    1ab8:	fb0c 1108 	mla	r1, ip, r8, r1
    1abc:	a30c      	add	r3, pc, #48	; (adr r3, 1af0 <ll_adv_enable+0x300>)
    1abe:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret = ticker_start_ext(
    1ac2:	e9cd 6b06 	strd	r6, fp, [sp, #24]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    1ac6:	f7ff fcd7 	bl	1478 <__aeabi_uldivmod>
		ret = ticker_start_ext(
    1aca:	462b      	mov	r3, r5
    1acc:	e9cd 9000 	strd	r9, r0, [sp]
    1ad0:	4652      	mov	r2, sl
    1ad2:	2103      	movs	r1, #3
    1ad4:	4648      	mov	r0, r9
    1ad6:	f00e fe5b 	bl	10790 <ticker_start_ext>
    1ada:	e7d1      	b.n	1a80 <ll_adv_enable+0x290>
	if (adv->lll.conn) {
    1adc:	6a33      	ldr	r3, [r6, #32]
    1ade:	2b00      	cmp	r3, #0
    1ae0:	f43f aec1 	beq.w	1866 <ll_adv_enable+0x76>
		conn_release(adv);
    1ae4:	4804      	ldr	r0, [pc, #16]	; (1af8 <ll_adv_enable+0x308>)
    1ae6:	f010 ff31 	bl	1294c <conn_release>
    1aea:	e6bc      	b.n	1866 <ll_adv_enable+0x76>
			return 0;
    1aec:	2700      	movs	r7, #0
    1aee:	e756      	b.n	199e <ll_adv_enable+0x1ae>
    1af0:	1afd498d 	.word	0x1afd498d
    1af4:	00000007 	.word	0x00000007
    1af8:	20002e58 	.word	0x20002e58
    1afc:	3b9aca00 	.word	0x3b9aca00
    1b00:	00011a31 	.word	0x00011a31
    1b04:	00012b15 	.word	0x00012b15
    1b08:	00012849 	.word	0x00012849
    1b0c:	20002ec4 	.word	0x20002ec4
    1b10:	84e72a00 	.word	0x84e72a00
    1b14:	00000000 	.word	0x00000000

00001b18 <ull_adv_time_update>:
{
    1b18:	b570      	push	{r4, r5, r6, lr}
	chan_map = lll->chan_map;
    1b1a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
    1b1e:	b08a      	sub	sp, #40	; 0x28
	chan_map = lll->chan_map;
    1b20:	f3c3 0342 	ubfx	r3, r3, #1, #3
{
    1b24:	460d      	mov	r5, r1
    1b26:	4604      	mov	r4, r0
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    1b28:	2101      	movs	r1, #1
    1b2a:	f10d 0023 	add.w	r0, sp, #35	; 0x23
{
    1b2e:	4616      	mov	r6, r2
	chan_map = lll->chan_map;
    1b30:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    1b34:	f021 fecc 	bl	238d0 <util_ones_count_get>
	time_us = adv_time_get(pdu, pdu_scan, chan_cnt, phy, phy_flags);
    1b38:	7871      	ldrb	r1, [r6, #1]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    1b3a:	4602      	mov	r2, r0
	time_us = adv_time_get(pdu, pdu_scan, chan_cnt, phy, phy_flags);
    1b3c:	4628      	mov	r0, r5
    1b3e:	f022 fa4f 	bl	23fe0 <adv_time_get.constprop.0.isra.0>
	time_ticks = HAL_TICKER_US_TO_TICKS(time_us);
    1b42:	491d      	ldr	r1, [pc, #116]	; (1bb8 <ull_adv_time_update+0xa0>)
    1b44:	a31a      	add	r3, pc, #104	; (adr r3, 1bb0 <ull_adv_time_update+0x98>)
    1b46:	e9d3 2300 	ldrd	r2, r3, [r3]
    1b4a:	fba0 0101 	umull	r0, r1, r0, r1
    1b4e:	f7ff fc93 	bl	1478 <__aeabi_uldivmod>
	if (adv->ull.ticks_slot > time_ticks) {
    1b52:	6921      	ldr	r1, [r4, #16]
	time_ticks = HAL_TICKER_US_TO_TICKS(time_us);
    1b54:	4605      	mov	r5, r0
	if (adv->ull.ticks_slot > time_ticks) {
    1b56:	428d      	cmp	r5, r1
    1b58:	d21f      	bcs.n	1b9a <ull_adv_time_update+0x82>
		ticks_minus = adv->ull.ticks_slot - time_ticks;
    1b5a:	1b48      	subs	r0, r1, r5
		ticks_plus = 0U;
    1b5c:	2100      	movs	r1, #0
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    1b5e:	4a17      	ldr	r2, [pc, #92]	; (1bbc <ull_adv_time_update+0xa4>)
	ret_cb = TICKER_STATUS_BUSY;
    1b60:	2302      	movs	r3, #2
    1b62:	9309      	str	r3, [sp, #36]	; 0x24
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    1b64:	1aa2      	subs	r2, r4, r2
    1b66:	236c      	movs	r3, #108	; 0x6c
    1b68:	fbb2 f2f3 	udiv	r2, r2, r3
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    1b6c:	4b14      	ldr	r3, [pc, #80]	; (1bc0 <ull_adv_time_update+0xa8>)
    1b6e:	9305      	str	r3, [sp, #20]
    1b70:	ae09      	add	r6, sp, #36	; 0x24
    1b72:	2300      	movs	r3, #0
    1b74:	3202      	adds	r2, #2
    1b76:	e9cd 1001 	strd	r1, r0, [sp, #4]
    1b7a:	e9cd 3303 	strd	r3, r3, [sp, #12]
    1b7e:	2103      	movs	r1, #3
    1b80:	9606      	str	r6, [sp, #24]
    1b82:	9300      	str	r3, [sp, #0]
    1b84:	b2d2      	uxtb	r2, r2
    1b86:	4618      	mov	r0, r3
    1b88:	f022 f932 	bl	23df0 <ticker_update>
	ret = ull_ticker_status_take(ret, &ret_cb);
    1b8c:	4631      	mov	r1, r6
    1b8e:	f010 fa25 	bl	11fdc <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
    1b92:	b940      	cbnz	r0, 1ba6 <ull_adv_time_update+0x8e>
	adv->ull.ticks_slot = time_ticks;
    1b94:	6125      	str	r5, [r4, #16]
}
    1b96:	b00a      	add	sp, #40	; 0x28
    1b98:	bd70      	pop	{r4, r5, r6, pc}
	} else if (adv->ull.ticks_slot < time_ticks) {
    1b9a:	d902      	bls.n	1ba2 <ull_adv_time_update+0x8a>
		ticks_plus = time_ticks - adv->ull.ticks_slot;
    1b9c:	1a69      	subs	r1, r5, r1
		ticks_minus = 0U;
    1b9e:	2000      	movs	r0, #0
    1ba0:	e7dd      	b.n	1b5e <ull_adv_time_update+0x46>
		return BT_HCI_ERR_SUCCESS;
    1ba2:	2000      	movs	r0, #0
    1ba4:	e7f7      	b.n	1b96 <ull_adv_time_update+0x7e>
		return BT_HCI_ERR_CMD_DISALLOWED;
    1ba6:	200c      	movs	r0, #12
    1ba8:	e7f5      	b.n	1b96 <ull_adv_time_update+0x7e>
    1baa:	bf00      	nop
    1bac:	f3af 8000 	nop.w
    1bb0:	1afd498d 	.word	0x1afd498d
    1bb4:	00000007 	.word	0x00000007
    1bb8:	3b9aca00 	.word	0x3b9aca00
    1bbc:	20002e58 	.word	0x20002e58
    1bc0:	00011a31 	.word	0x00011a31
    1bc4:	00000000 	.word	0x00000000

00001bc8 <ull_scan_enable>:
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
						   SCAN_INT_UNIT_US);
}

uint8_t ull_scan_enable(struct ll_scan_set *scan)
{
    1bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1bcc:	4604      	mov	r4, r0
	scan->is_stop = 0U;
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	/* Initialize LLL scan context */
	lll = &scan->lll;
	lll->init_addr_type = scan->own_addr_type;
    1bce:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    1bd2:	f894 3020 	ldrb.w	r3, [r4, #32]
	lll->is_stop = 0U;

	ull_hdr_init(&scan->ull);
	lll_hdr_init(lll, scan);

	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
    1bd6:	4f3e      	ldr	r7, [pc, #248]	; (1cd0 <ull_scan_enable+0x108>)
	lll->init_addr_type = scan->own_addr_type;
    1bd8:	f3c0 0040 	ubfx	r0, r0, #1, #1
    1bdc:	f360 1386 	bfi	r3, r0, #6, #1
{
    1be0:	b08c      	sub	sp, #48	; 0x30
	lll->init_addr_type = scan->own_addr_type;
    1be2:	f884 3020 	strb.w	r3, [r4, #32]
	(void)ll_addr_read(lll->init_addr_type, lll->init_addr);
    1be6:	f104 0121 	add.w	r1, r4, #33	; 0x21
    1bea:	f022 f91f 	bl	23e2c <ll_addr_read>
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
    1bee:	8d26      	ldrh	r6, [r4, #40]	; 0x28
	lll->chan = 0U;
    1bf0:	f894 3020 	ldrb.w	r3, [r4, #32]
    1bf4:	61e4      	str	r4, [r4, #28]
    1bf6:	2500      	movs	r5, #0
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
    1bf8:	fba6 0107 	umull	r0, r1, r6, r7
    1bfc:	f04f 0c91 	mov.w	ip, #145	; 0x91
	lll->chan = 0U;
    1c00:	f003 0379 	and.w	r3, r3, #121	; 0x79
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
    1c04:	fb0c 1106 	mla	r1, ip, r6, r1
	hdr->disabled_cb = hdr->disabled_param = NULL;
    1c08:	e9c4 5505 	strd	r5, r5, [r4, #20]
	lll->chan = 0U;
    1c0c:	f884 3020 	strb.w	r3, [r4, #32]
	hdr->ref = 0U;
    1c10:	7025      	strb	r5, [r4, #0]
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
    1c12:	a32d      	add	r3, pc, #180	; (adr r3, 1cc8 <ull_scan_enable+0x100>)
    1c14:	e9d3 2300 	ldrd	r2, r3, [r3]
    1c18:	f7ff fc2e 	bl	1478 <__aeabi_uldivmod>
						SCAN_INT_UNIT_US);

	/* TODO: active_to_start feature port */
	scan->ull.ticks_active_to_start = 0U;
	scan->ull.ticks_prepare_to_start =
    1c1c:	2331      	movs	r3, #49	; 0x31
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_XTAL_US);
	scan->ull.ticks_preempt_to_start =
    1c1e:	e9c4 3502 	strd	r3, r5, [r4, #8]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_PREEMPT_MIN_US);
	if ((lll->ticks_window +
    1c22:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	scan->ull.ticks_active_to_start = 0U;
    1c24:	6065      	str	r5, [r4, #4]
	if ((lll->ticks_window +
    1c26:	3309      	adds	r3, #9
	     HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US)) <
	    (ticks_interval -
    1c28:	f1a0 0231 	sub.w	r2, r0, #49	; 0x31
	if ((lll->ticks_window +
    1c2c:	4293      	cmp	r3, r2
	     HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_XTAL_US))) {
		scan->ull.ticks_slot =
    1c2e:	bf32      	itee	cc
    1c30:	6123      	strcc	r3, [r4, #16]
			(lll->ticks_window +
			 HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US));
	} else {
		if (IS_ENABLED(CONFIG_BT_CTLR_SCAN_UNRESERVED)) {
			scan->ull.ticks_slot = 0U;
    1c32:	6125      	strcs	r5, [r4, #16]
		} else {
			scan->ull.ticks_slot = ticks_interval -
				HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_XTAL_US);
		}

		lll->ticks_window = 0U;
    1c34:	62e5      	strcs	r5, [r4, #44]	; 0x2c
	return &ll_scan[handle];
}

uint8_t ull_scan_handle_get(struct ll_scan_set *scan)
{
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
    1c36:	4d27      	ldr	r5, [pc, #156]	; (1cd4 <ull_scan_enable+0x10c>)
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
    1c38:	4606      	mov	r6, r0
	ticks_anchor = ticker_ticks_now_get();
    1c3a:	f022 f8f1 	bl	23e20 <ticker_ticks_now_get>
	ret_cb = TICKER_STATUS_BUSY;
    1c3e:	2302      	movs	r3, #2
    1c40:	930b      	str	r3, [sp, #44]	; 0x2c
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
    1c42:	1b65      	subs	r5, r4, r5
    1c44:	2334      	movs	r3, #52	; 0x34
    1c46:	fbb5 f5f3 	udiv	r5, r5, r3
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1c4a:	4b23      	ldr	r3, [pc, #140]	; (1cd8 <ull_scan_enable+0x110>)
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
    1c4c:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1c50:	e9cd 4306 	strd	r4, r3, [sp, #24]
    1c54:	46b8      	mov	r8, r7
    1c56:	4b21      	ldr	r3, [pc, #132]	; (1cdc <ull_scan_enable+0x114>)
    1c58:	9305      	str	r3, [sp, #20]
	ticks_anchor = ticker_ticks_now_get();
    1c5a:	4607      	mov	r7, r0
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1c5c:	6923      	ldr	r3, [r4, #16]
    1c5e:	9304      	str	r3, [sp, #16]
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
    1c60:	fbac 0808 	umull	r0, r8, ip, r8
    1c64:	2191      	movs	r1, #145	; 0x91
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1c66:	f04f 0900 	mov.w	r9, #0
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
    1c6a:	fb01 810c 	mla	r1, r1, ip, r8
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1c6e:	f10d 0a2c 	add.w	sl, sp, #44	; 0x2c
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
    1c72:	a315      	add	r3, pc, #84	; (adr r3, 1cc8 <ull_scan_enable+0x100>)
    1c74:	e9d3 2300 	ldrd	r2, r3, [r3]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1c78:	f8cd a020 	str.w	sl, [sp, #32]
    1c7c:	f8cd 900c 	str.w	r9, [sp, #12]
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
    1c80:	f7ff fbfa 	bl	1478 <__aeabi_uldivmod>
    1c84:	4610      	mov	r0, r2
    1c86:	4619      	mov	r1, r3
    1c88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1c8c:	2300      	movs	r3, #0
    1c8e:	f7ff fbf3 	bl	1478 <__aeabi_uldivmod>
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1c92:	3504      	adds	r5, #4
    1c94:	b2ed      	uxtb	r5, r5
    1c96:	e9cd 6001 	strd	r6, r0, [sp, #4]
    1c9a:	2103      	movs	r1, #3
    1c9c:	f8cd 9000 	str.w	r9, [sp]
    1ca0:	463b      	mov	r3, r7
    1ca2:	462a      	mov	r2, r5
    1ca4:	4648      	mov	r0, r9
    1ca6:	f022 f888 	bl	23dba <ticker_start>
	ret = ull_ticker_status_take(ret, &ret_cb);
    1caa:	4651      	mov	r1, sl
    1cac:	f010 f996 	bl	11fdc <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
    1cb0:	b940      	cbnz	r0, 1cc4 <ull_scan_enable+0xfc>
	scan->is_enabled = 1U;
    1cb2:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    1cb6:	f043 0301 	orr.w	r3, r3, #1
    1cba:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
    1cbe:	b00c      	add	sp, #48	; 0x30
    1cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    1cc4:	200c      	movs	r0, #12
    1cc6:	e7fa      	b.n	1cbe <ull_scan_enable+0xf6>
    1cc8:	1afd498d 	.word	0x1afd498d
    1ccc:	00000007 	.word	0x00000007
    1cd0:	84e72a00 	.word	0x84e72a00
    1cd4:	20002ee8 	.word	0x20002ee8
    1cd8:	00011a31 	.word	0x00011a31
    1cdc:	00012f61 	.word	0x00012f61

00001ce0 <ll_scan_params_set>:
{
    1ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1ce2:	4604      	mov	r4, r0
	scan = ull_scan_is_disabled_get(SCAN_HANDLE_1M);
    1ce4:	2000      	movs	r0, #0
{
    1ce6:	4616      	mov	r6, r2
    1ce8:	461f      	mov	r7, r3
	scan = ull_scan_is_disabled_get(SCAN_HANDLE_1M);
    1cea:	f011 f9b5 	bl	13058 <ull_scan_is_disabled_get>
	if (!scan) {
    1cee:	4605      	mov	r5, r0
    1cf0:	b320      	cbz	r0, 1d3c <ll_scan_params_set+0x5c>
	scan->own_addr_type = own_addr_type;
    1cf2:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
	lll->interval = interval;
    1cf6:	8501      	strh	r1, [r0, #40]	; 0x28
	scan->own_addr_type = own_addr_type;
    1cf8:	f367 0342 	bfi	r3, r7, #1, #2
    1cfc:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
	lll->filter_policy = filter_policy;
    1d00:	f89d 3018 	ldrb.w	r3, [sp, #24]
    1d04:	0164      	lsls	r4, r4, #5
    1d06:	00db      	lsls	r3, r3, #3
    1d08:	f003 0318 	and.w	r3, r3, #24
    1d0c:	f004 0420 	and.w	r4, r4, #32
    1d10:	431c      	orrs	r4, r3
    1d12:	f890 3020 	ldrb.w	r3, [r0, #32]
    1d16:	f023 0338 	bic.w	r3, r3, #56	; 0x38
    1d1a:	431c      	orrs	r4, r3
    1d1c:	f880 4020 	strb.w	r4, [r0, #32]
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
    1d20:	4809      	ldr	r0, [pc, #36]	; (1d48 <ll_scan_params_set+0x68>)
    1d22:	2491      	movs	r4, #145	; 0x91
    1d24:	fba6 0100 	umull	r0, r1, r6, r0
    1d28:	a305      	add	r3, pc, #20	; (adr r3, 1d40 <ll_scan_params_set+0x60>)
    1d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
    1d2e:	fb04 1106 	mla	r1, r4, r6, r1
    1d32:	f7ff fba1 	bl	1478 <__aeabi_uldivmod>
    1d36:	62e8      	str	r0, [r5, #44]	; 0x2c
	return 0;
    1d38:	2000      	movs	r0, #0
}
    1d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    1d3c:	200c      	movs	r0, #12
    1d3e:	e7fc      	b.n	1d3a <ll_scan_params_set+0x5a>
    1d40:	1afd498d 	.word	0x1afd498d
    1d44:	00000007 	.word	0x00000007
    1d48:	84e72a00 	.word	0x84e72a00
    1d4c:	00000000 	.word	0x00000000

00001d50 <ull_conn_llcp>:

	return 0;
}

int ull_conn_llcp(struct ll_conn *conn, uint32_t ticks_at_expire, uint16_t lazy)
{
    1d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1d54:	4615      	mov	r5, r2
#if defined(CONFIG_BT_LL_SW_LLCP_LEGACY)
	/* Check if no other procedure with instant is requested and not in
	 * Encryption setup.
	 */
	if ((conn->llcp_ack == conn->llcp_req) &&
    1d56:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
    1d5a:	f890 2089 	ldrb.w	r2, [r0, #137]	; 0x89
    1d5e:	4293      	cmp	r3, r2
{
    1d60:	b08b      	sub	sp, #44	; 0x2c
    1d62:	4604      	mov	r4, r0
    1d64:	4689      	mov	r9, r1
	if ((conn->llcp_ack == conn->llcp_req) &&
    1d66:	d10b      	bne.n	1d80 <ull_conn_llcp+0x30>
#endif /* !CONFIG_BT_CTLR_LE_ENC */

		/* TODO: Optimize the checks below, maybe have common flag */

		/* check if connection update procedure is requested */
		if (conn->llcp_cu.ack != conn->llcp_cu.req) {
    1d68:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    1d6c:	f890 209c 	ldrb.w	r2, [r0, #156]	; 0x9c
    1d70:	428a      	cmp	r2, r1
    1d72:	d025      	beq.n	1dc0 <ull_conn_llcp+0x70>
			/* switch to LLCP_CONN_UPD state machine */
			conn->llcp_type = LLCP_CONN_UPD;
    1d74:	2201      	movs	r2, #1
			conn->llcp_ack -= 2U;
    1d76:	3b02      	subs	r3, #2
			conn->llcp_type = LLCP_CONN_UPD;
    1d78:	f880 208a 	strb.w	r2, [r0, #138]	; 0x8a
			conn->llcp_ack -= 2U;
    1d7c:	f880 3089 	strb.w	r3, [r0, #137]	; 0x89
	}

	/* Check if procedures with instant or encryption setup is requested or
	 * active.
	 */
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    1d80:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
    1d84:	f894 2089 	ldrb.w	r2, [r4, #137]	; 0x89
    1d88:	1a9a      	subs	r2, r3, r2
    1d8a:	f002 0203 	and.w	r2, r2, #3
    1d8e:	2a02      	cmp	r2, #2
    1d90:	f040 826d 	bne.w	226e <ull_conn_llcp+0x51e>
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */
		}

		/* Process procedures with instants or encryption setup */
		/* FIXME: Make LE Ping cacheable */
		switch (conn->llcp_type) {
    1d94:	f894 008a 	ldrb.w	r0, [r4, #138]	; 0x8a
    1d98:	2801      	cmp	r0, #1
    1d9a:	f000 8214 	beq.w	21c6 <ull_conn_llcp+0x476>
    1d9e:	2802      	cmp	r0, #2
    1da0:	f000 842c 	beq.w	25fc <ull_conn_llcp+0x8ac>
		}
		break;
#endif /* CONFIG_BT_CTLR_PHY */

		default:
			LL_ASSERT(0);
    1da4:	4acc      	ldr	r2, [pc, #816]	; (20d8 <ull_conn_llcp+0x388>)
    1da6:	49cd      	ldr	r1, [pc, #820]	; (20dc <ull_conn_llcp+0x38c>)
    1da8:	48cd      	ldr	r0, [pc, #820]	; (20e0 <ull_conn_llcp+0x390>)
    1daa:	f240 43e1 	movw	r3, #1249	; 0x4e1
    1dae:	f01a fa8b 	bl	1c2c8 <printk>
    1db2:	4040      	eors	r0, r0
    1db4:	f380 8811 	msr	BASEPRI, r0
    1db8:	f04f 0003 	mov.w	r0, #3
    1dbc:	df02      	svc	2
			break;
    1dbe:	e256      	b.n	226e <ull_conn_llcp+0x51e>
		} else if (conn->llcp_feature.ack != conn->llcp_feature.req) {
    1dc0:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
    1dc4:	f890 20b0 	ldrb.w	r2, [r0, #176]	; 0xb0
    1dc8:	4293      	cmp	r3, r2
    1dca:	d05b      	beq.n	1e84 <ull_conn_llcp+0x134>
static inline void event_fex_prep(struct ll_conn *conn)
{
	struct node_tx *tx;

	/* If waiting for response, do nothing */
	if (!((conn->llcp_feature.ack - conn->llcp_feature.req) & 0x01)) {
    1dcc:	1a9b      	subs	r3, r3, r2
    1dce:	07da      	lsls	r2, r3, #31
    1dd0:	d5d6      	bpl.n	1d80 <ull_conn_llcp+0x30>
		return;
	}

	if (conn->common.fex_valid) {
    1dd2:	f890 107c 	ldrb.w	r1, [r0, #124]	; 0x7c
    1dd6:	f011 0801 	ands.w	r8, r1, #1
    1dda:	d026      	beq.n	1e2a <ull_conn_llcp+0xda>
		struct node_rx_pdu *rx;
		struct pdu_data *pdu;

		/* get a rx node for ULL->LL */
		rx = ll_pdu_rx_alloc();
    1ddc:	f010 f89c 	bl	11f18 <ll_pdu_rx_alloc>
		if (!rx) {
    1de0:	4606      	mov	r6, r0
    1de2:	2800      	cmp	r0, #0
    1de4:	d0cc      	beq.n	1d80 <ull_conn_llcp+0x30>
			return;
		}

		/* procedure request acked */
		conn->llcp_feature.ack = conn->llcp_feature.req;
    1de6:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
    1dea:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1

		/* prepare feature rsp structure */
		rx->hdr.handle = conn->lll.handle;
    1dee:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    1df0:	80c3      	strh	r3, [r0, #6]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1df2:	2303      	movs	r3, #3
    1df4:	7103      	strb	r3, [r0, #4]
		pdu = (void *)rx->pdu;
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    1df6:	7f03      	ldrb	r3, [r0, #28]
    1df8:	f043 0303 	orr.w	r3, r3, #3
    1dfc:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
			   sizeof(struct pdu_data_llctrl_feature_rsp);
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
		(void)memset(&pdu->llctrl.feature_rsp.features[0], 0x00,
    1dfe:	f100 0720 	add.w	r7, r0, #32
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    1e02:	2309      	movs	r3, #9
    1e04:	7743      	strb	r3, [r0, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    1e06:	77c3      	strb	r3, [r0, #31]
		(void)memset(&pdu->llctrl.feature_rsp.features[0], 0x00,
    1e08:	2208      	movs	r2, #8
    1e0a:	2100      	movs	r1, #0
    1e0c:	4638      	mov	r0, r7
    1e0e:	f01c f91b 	bl	1e048 <memset>
			sizeof(pdu->llctrl.feature_rsp.features));
		sys_put_le64(conn->llcp_feature.features_peer,
    1e12:	e9d4 0130 	ldrd	r0, r1, [r4, #192]	; 0xc0
    1e16:	463a      	mov	r2, r7
    1e18:	f022 fa29 	bl	2426e <sys_put_le64>
			     pdu->llctrl.feature_req.features);

		/* enqueue feature rsp structure into rx queue */
		ll_rx_put(rx->hdr.link, rx);
    1e1c:	4631      	mov	r1, r6
			sys_cpu_to_le16(conn->llcp_version.company_id);
		pdu->llctrl.version_ind.sub_version_number =
			sys_cpu_to_le16(conn->llcp_version.sub_version_number);

		/* enqueue version ind structure into rx queue */
		ll_rx_put(rx->hdr.link, rx);
    1e1e:	6808      	ldr	r0, [r1, #0]
    1e20:	f00f ffce 	bl	11dc0 <ll_rx_put>
		ll_rx_sched();
    1e24:	f00f ffd6 	bl	11dd4 <ll_rx_sched>
    1e28:	e7aa      	b.n	1d80 <ull_conn_llcp+0x30>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1e2a:	48ae      	ldr	r0, [pc, #696]	; (20e4 <ull_conn_llcp+0x394>)
    1e2c:	f021 fcd4 	bl	237d8 <mem_acquire>
	if (tx) {
    1e30:	4606      	mov	r6, r0
    1e32:	2800      	cmp	r0, #0
    1e34:	d0a4      	beq.n	1d80 <ull_conn_llcp+0x30>
		conn->llcp_feature.ack--;
    1e36:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
    1e3a:	3b01      	subs	r3, #1
    1e3c:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    1e40:	7903      	ldrb	r3, [r0, #4]
    1e42:	f043 0303 	orr.w	r3, r3, #3
    1e46:	7103      	strb	r3, [r0, #4]
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
    1e48:	2309      	movs	r3, #9
    1e4a:	7143      	strb	r3, [r0, #5]
		pdu->llctrl.opcode = !conn->lll.role ?
    1e4c:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    1e50:	2b00      	cmp	r3, #0
    1e52:	bfac      	ite	ge
    1e54:	2308      	movge	r3, #8
    1e56:	230e      	movlt	r3, #14
		(void)memset(&pdu->llctrl.feature_req.features[0],
    1e58:	f100 0708 	add.w	r7, r0, #8
		pdu->llctrl.opcode = !conn->lll.role ?
    1e5c:	71c3      	strb	r3, [r0, #7]
		(void)memset(&pdu->llctrl.feature_req.features[0],
    1e5e:	2208      	movs	r2, #8
    1e60:	4641      	mov	r1, r8
    1e62:	4638      	mov	r0, r7
    1e64:	f01c f8f0 	bl	1e048 <memset>
		sys_put_le64(conn->llcp_feature.features_conn,
    1e68:	e9d4 012e 	ldrd	r0, r1, [r4, #184]	; 0xb8
    1e6c:	463a      	mov	r2, r7
    1e6e:	f022 f9fe 	bl	2426e <sys_put_le64>
		ctrl_tx_enqueue(conn, tx);
    1e72:	4631      	mov	r1, r6
			ctrl_tx_enqueue(conn, tx);
    1e74:	4620      	mov	r0, r4
    1e76:	f022 fa0b 	bl	24290 <ctrl_tx_enqueue>
			conn->procedure_expire = conn->procedure_reload;
    1e7a:	f8b4 3076 	ldrh.w	r3, [r4, #118]	; 0x76
    1e7e:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
    1e82:	e77d      	b.n	1d80 <ull_conn_llcp+0x30>
		} else if (conn->llcp_version.ack != conn->llcp_version.req) {
    1e84:	f890 30c9 	ldrb.w	r3, [r0, #201]	; 0xc9
    1e88:	f890 20c8 	ldrb.w	r2, [r0, #200]	; 0xc8
    1e8c:	4293      	cmp	r3, r2
    1e8e:	d05f      	beq.n	1f50 <ull_conn_llcp+0x200>
	if (!((conn->llcp_version.ack - conn->llcp_version.req) & 0x01)) {
    1e90:	1a9b      	subs	r3, r3, r2
    1e92:	07db      	lsls	r3, r3, #31
    1e94:	f57f af74 	bpl.w	1d80 <ull_conn_llcp+0x30>
	if (conn->llcp_version.tx == 0U) {
    1e98:	f890 30ca 	ldrb.w	r3, [r0, #202]	; 0xca
    1e9c:	07df      	lsls	r7, r3, #31
    1e9e:	d424      	bmi.n	1eea <ull_conn_llcp+0x19a>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1ea0:	4890      	ldr	r0, [pc, #576]	; (20e4 <ull_conn_llcp+0x394>)
    1ea2:	f021 fc99 	bl	237d8 <mem_acquire>
		if (tx) {
    1ea6:	4601      	mov	r1, r0
    1ea8:	2800      	cmp	r0, #0
    1eaa:	f43f af69 	beq.w	1d80 <ull_conn_llcp+0x30>
			conn->llcp_version.ack--;
    1eae:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    1eb2:	3b01      	subs	r3, #1
    1eb4:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
			conn->llcp_version.tx = 1U;
    1eb8:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
    1ebc:	f043 0301 	orr.w	r3, r3, #1
    1ec0:	f884 30ca 	strb.w	r3, [r4, #202]	; 0xca
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    1ec4:	7903      	ldrb	r3, [r0, #4]
    1ec6:	f043 0303 	orr.w	r3, r3, #3
    1eca:	7103      	strb	r3, [r0, #4]
			pdu->len =
    1ecc:	2306      	movs	r3, #6
    1ece:	7143      	strb	r3, [r0, #5]
			pdu->llctrl.opcode =
    1ed0:	230c      	movs	r3, #12
    1ed2:	71c3      	strb	r3, [r0, #7]
			pdu->llctrl.version_ind.version_number =
    1ed4:	7203      	strb	r3, [r0, #8]
			pdu->llctrl.version_ind.company_id = cid;
    1ed6:	f06f 030e 	mvn.w	r3, #14
    1eda:	7243      	strb	r3, [r0, #9]
    1edc:	2305      	movs	r3, #5
    1ede:	7283      	strb	r3, [r0, #10]
			pdu->llctrl.version_ind.sub_version_number = svn;
    1ee0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1ee4:	72c3      	strb	r3, [r0, #11]
    1ee6:	7303      	strb	r3, [r0, #12]
    1ee8:	e7c4      	b.n	1e74 <ull_conn_llcp+0x124>
	} else if (conn->llcp_version.rx) {
    1eea:	079e      	lsls	r6, r3, #30
    1eec:	d522      	bpl.n	1f34 <ull_conn_llcp+0x1e4>
		rx = ll_pdu_rx_alloc();
    1eee:	f010 f813 	bl	11f18 <ll_pdu_rx_alloc>
		if (!rx) {
    1ef2:	4601      	mov	r1, r0
    1ef4:	2800      	cmp	r0, #0
    1ef6:	f43f af43 	beq.w	1d80 <ull_conn_llcp+0x30>
		conn->llcp_version.ack = conn->llcp_version.req;
    1efa:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    1efe:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
		rx->hdr.handle = conn->lll.handle;
    1f02:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    1f04:	80c3      	strh	r3, [r0, #6]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1f06:	2303      	movs	r3, #3
    1f08:	7103      	strb	r3, [r0, #4]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    1f0a:	7f03      	ldrb	r3, [r0, #28]
    1f0c:	f043 0303 	orr.w	r3, r3, #3
    1f10:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
    1f12:	2306      	movs	r3, #6
    1f14:	7743      	strb	r3, [r0, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    1f16:	230c      	movs	r3, #12
    1f18:	77c3      	strb	r3, [r0, #31]
		pdu->llctrl.version_ind.version_number =
    1f1a:	f894 30cb 	ldrb.w	r3, [r4, #203]	; 0xcb
    1f1e:	f880 3020 	strb.w	r3, [r0, #32]
		pdu->llctrl.version_ind.company_id =
    1f22:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
    1f26:	f8a0 3021 	strh.w	r3, [r0, #33]	; 0x21
		pdu->llctrl.version_ind.sub_version_number =
    1f2a:	f8b4 30ce 	ldrh.w	r3, [r4, #206]	; 0xce
    1f2e:	f8a0 3023 	strh.w	r3, [r0, #35]	; 0x23
    1f32:	e774      	b.n	1e1e <ull_conn_llcp+0xce>
	} else {
		/* tx-ed but no rx, and new request placed */
		LL_ASSERT(0);
    1f34:	f640 63a1 	movw	r3, #3745	; 0xea1
	}
	break;
#endif /* CONFIG_BT_CTLR_SCHED_ADVANCED */

	default:
		LL_ASSERT(0);
    1f38:	4a67      	ldr	r2, [pc, #412]	; (20d8 <ull_conn_llcp+0x388>)
    1f3a:	4968      	ldr	r1, [pc, #416]	; (20dc <ull_conn_llcp+0x38c>)
    1f3c:	4868      	ldr	r0, [pc, #416]	; (20e0 <ull_conn_llcp+0x390>)
    1f3e:	f01a f9c3 	bl	1c2c8 <printk>
    1f42:	4040      	eors	r0, r0
    1f44:	f380 8811 	msr	BASEPRI, r0
    1f48:	f04f 0003 	mov.w	r0, #3
    1f4c:	df02      	svc	2
		break;
    1f4e:	e717      	b.n	1d80 <ull_conn_llcp+0x30>
		} else if (conn->llcp_conn_param.ack !=
    1f50:	f890 20f5 	ldrb.w	r2, [r0, #245]	; 0xf5
    1f54:	f890 30f4 	ldrb.w	r3, [r0, #244]	; 0xf4
    1f58:	429a      	cmp	r2, r3
    1f5a:	f43f af11 	beq.w	1d80 <ull_conn_llcp+0x30>
	return conn_upd_curr && (conn_upd_curr != conn);
    1f5e:	4e62      	ldr	r6, [pc, #392]	; (20e8 <ull_conn_llcp+0x398>)
    1f60:	6833      	ldr	r3, [r6, #0]
    1f62:	b113      	cbz	r3, 1f6a <ull_conn_llcp+0x21a>
	if (cpr_active_is_set(conn)) {
    1f64:	4298      	cmp	r0, r3
    1f66:	f47f af0b 	bne.w	1d80 <ull_conn_llcp+0x30>
	switch (conn->llcp_conn_param.state) {
    1f6a:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
    1f6e:	f003 030f 	and.w	r3, r3, #15
    1f72:	2b06      	cmp	r3, #6
    1f74:	f200 8124 	bhi.w	21c0 <ull_conn_llcp+0x470>
    1f78:	a201      	add	r2, pc, #4	; (adr r2, 1f80 <ull_conn_llcp+0x230>)
    1f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1f7e:	bf00      	nop
    1f80:	00001f9d 	.word	0x00001f9d
    1f84:	00002021 	.word	0x00002021
    1f88:	00002177 	.word	0x00002177
    1f8c:	00001d81 	.word	0x00001d81
    1f90:	00001d81 	.word	0x00001d81
    1f94:	00001d81 	.word	0x00001d81
    1f98:	00001d81 	.word	0x00001d81
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1f9c:	4851      	ldr	r0, [pc, #324]	; (20e4 <ull_conn_llcp+0x394>)
			event_counter = lll->event_counter +
    1f9e:	8e67      	ldrh	r7, [r4, #50]	; 0x32
					lll->latency_prepare + lazy;
    1fa0:	f8b4 802e 	ldrh.w	r8, [r4, #46]	; 0x2e
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1fa4:	f021 fc18 	bl	237d8 <mem_acquire>
	if (!tx) {
    1fa8:	4601      	mov	r1, r0
    1faa:	2800      	cmp	r0, #0
    1fac:	f43f aee8 	beq.w	1d80 <ull_conn_llcp+0x30>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1fb0:	7903      	ldrb	r3, [r0, #4]
	conn_upd_curr = conn;
    1fb2:	6034      	str	r4, [r6, #0]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1fb4:	f043 0303 	orr.w	r3, r3, #3
    1fb8:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    1fba:	2318      	movs	r3, #24
    1fbc:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    1fbe:	230f      	movs	r3, #15
    1fc0:	71c3      	strb	r3, [r0, #7]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    1fc2:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
    1fc6:	8103      	strh	r3, [r0, #8]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    1fc8:	f8b4 30fa 	ldrh.w	r3, [r4, #250]	; 0xfa
    1fcc:	8143      	strh	r3, [r0, #10]
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    1fce:	f8b4 30fc 	ldrh.w	r3, [r4, #252]	; 0xfc
    1fd2:	8183      	strh	r3, [r0, #12]
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    1fd4:	f8b4 30fe 	ldrh.w	r3, [r4, #254]	; 0xfe
    1fd8:	81c3      	strh	r3, [r0, #14]
	p->preferred_periodicity = 0U;
    1fda:	2300      	movs	r3, #0
    1fdc:	7403      	strb	r3, [r0, #16]
	p->offset0 = sys_cpu_to_le16(0x0000);
    1fde:	74c3      	strb	r3, [r0, #19]
    1fe0:	7503      	strb	r3, [r0, #20]
			event_counter = lll->event_counter +
    1fe2:	4447      	add	r7, r8
	p->offset1 = sys_cpu_to_le16(0xffff);
    1fe4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1fe8:	7543      	strb	r3, [r0, #21]
    1fea:	7583      	strb	r3, [r0, #22]
	p->offset2 = sys_cpu_to_le16(0xffff);
    1fec:	75c3      	strb	r3, [r0, #23]
    1fee:	7603      	strb	r3, [r0, #24]
	p->offset3 = sys_cpu_to_le16(0xffff);
    1ff0:	7643      	strb	r3, [r0, #25]
    1ff2:	7683      	strb	r3, [r0, #26]
	p->offset4 = sys_cpu_to_le16(0xffff);
    1ff4:	76c3      	strb	r3, [r0, #27]
    1ff6:	7703      	strb	r3, [r0, #28]
	p->offset5 = sys_cpu_to_le16(0xffff);
    1ff8:	7743      	strb	r3, [r0, #29]
    1ffa:	7783      	strb	r3, [r0, #30]
			event_counter = lll->event_counter +
    1ffc:	442f      	add	r7, r5
	conn->procedure_expire = conn->procedure_reload;
    1ffe:	f8b4 3076 	ldrh.w	r3, [r4, #118]	; 0x76
    2002:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
	p->reference_conn_event_count = sys_cpu_to_le16(event_counter);
    2006:	f8a0 7011 	strh.w	r7, [r0, #17]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    200a:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
    200e:	2204      	movs	r2, #4
    2010:	f362 0303 	bfi	r3, r2, #0, #4
    2014:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
	ctrl_tx_enqueue(conn, tx);
    2018:	4620      	mov	r0, r4
    201a:	f022 f939 	bl	24290 <ctrl_tx_enqueue>
    201e:	e6af      	b.n	1d80 <ull_conn_llcp+0x30>
	if (conn->llcp_conn_param.status) {
    2020:	f894 30f7 	ldrb.w	r3, [r4, #247]	; 0xf7
    2024:	b1eb      	cbz	r3, 2062 <ull_conn_llcp+0x312>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2026:	482f      	ldr	r0, [pc, #188]	; (20e4 <ull_conn_llcp+0x394>)
    2028:	f021 fbd6 	bl	237d8 <mem_acquire>
		if (!tx) {
    202c:	4601      	mov	r1, r0
    202e:	2800      	cmp	r0, #0
    2030:	f43f aea6 	beq.w	1d80 <ull_conn_llcp+0x30>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    2034:	7903      	ldrb	r3, [r0, #4]
    2036:	f043 0303 	orr.w	r3, r3, #3
    203a:	7103      	strb	r3, [r0, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    203c:	2311      	movs	r3, #17
    203e:	71c3      	strb	r3, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    2040:	2303      	movs	r3, #3
    2042:	7143      	strb	r3, [r0, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    2044:	230f      	movs	r3, #15
    2046:	7203      	strb	r3, [r0, #8]
		rej->error_code = conn->llcp_conn_param.status;
    2048:	f894 30f7 	ldrb.w	r3, [r4, #247]	; 0xf7
    204c:	7243      	strb	r3, [r0, #9]
		ctrl_tx_enqueue(conn, tx);
    204e:	4620      	mov	r0, r4
    2050:	f022 f91e 	bl	24290 <ctrl_tx_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    2054:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
    2058:	f884 30f5 	strb.w	r3, [r4, #245]	; 0xf5
	conn_upd_curr = NULL;
    205c:	2300      	movs	r3, #0
    205e:	6033      	str	r3, [r6, #0]
		return;
    2060:	e68e      	b.n	1d80 <ull_conn_llcp+0x30>
	if (!conn->lll.role) {
    2062:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
    2066:	2a00      	cmp	r2, #0
    2068:	db40      	blt.n	20ec <ull_conn_llcp+0x39c>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    206a:	f894 20f6 	ldrb.w	r2, [r4, #246]	; 0xf6
		conn->llcp_cu.win_offset_us = 0U;
    206e:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    2072:	2006      	movs	r0, #6
    2074:	f360 0203 	bfi	r2, r0, #0, #4
		preferred_periodicity = conn->llcp_conn_param.preferred_periodicity;
    2078:	f894 0100 	ldrb.w	r0, [r4, #256]	; 0x100
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    207c:	f884 20f6 	strb.w	r2, [r4, #246]	; 0xf6
		conn->llcp_cu.win_size = 1U;
    2080:	2201      	movs	r2, #1
    2082:	f884 20ac 	strb.w	r2, [r4, #172]	; 0xac
		interval_max = conn->llcp_conn_param.interval_max;
    2086:	f8b4 20fa 	ldrh.w	r2, [r4, #250]	; 0xfa
		if (preferred_periodicity) {
    208a:	b148      	cbz	r0, 20a0 <ull_conn_llcp+0x350>
			conn->llcp_cu.interval = (interval_max / preferred_periodicity) *
    208c:	fbb2 f3f0 	udiv	r3, r2, r0
    2090:	fb13 f300 	smulbb	r3, r3, r0
			if (conn->llcp_cu.interval < conn->llcp_conn_param.interval_min) {
    2094:	f8b4 00f8 	ldrh.w	r0, [r4, #248]	; 0xf8
			conn->llcp_cu.interval = (interval_max / preferred_periodicity) *
    2098:	b29b      	uxth	r3, r3
				conn->llcp_cu.interval = interval_max;
    209a:	4298      	cmp	r0, r3
    209c:	bf98      	it	ls
    209e:	461a      	movls	r2, r3
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
    20a0:	f8b4 30fc 	ldrh.w	r3, [r4, #252]	; 0xfc
    20a4:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
    20a8:	f8b4 30fe 	ldrh.w	r3, [r4, #254]	; 0xfe
    20ac:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
    20b0:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
			conn->llcp_cu.interval = interval_max;
    20b4:	f8a4 20a0 	strh.w	r2, [r4, #160]	; 0xa0
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
    20b8:	f3c3 1300 	ubfx	r3, r3, #4, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
    20bc:	f894 209e 	ldrb.w	r2, [r4, #158]	; 0x9e
    20c0:	00db      	lsls	r3, r3, #3
    20c2:	f043 0302 	orr.w	r3, r3, #2
    20c6:	f022 020f 	bic.w	r2, r2, #15
    20ca:	4313      	orrs	r3, r2
		conn->llcp_cu.ack--;
    20cc:	3901      	subs	r1, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
    20ce:	f884 309e 	strb.w	r3, [r4, #158]	; 0x9e
		conn->llcp_cu.ack--;
    20d2:	f884 109d 	strb.w	r1, [r4, #157]	; 0x9d
		return;
    20d6:	e653      	b.n	1d80 <ull_conn_llcp+0x30>
    20d8:	00027c2d 	.word	0x00027c2d
    20dc:	0002826c 	.word	0x0002826c
    20e0:	00027514 	.word	0x00027514
    20e4:	20002fc4 	.word	0x20002fc4
    20e8:	20002f30 	.word	0x20002f30
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    20ec:	4866      	ldr	r0, [pc, #408]	; (2288 <ull_conn_llcp+0x538>)
    20ee:	f021 fb73 	bl	237d8 <mem_acquire>
	if (!tx) {
    20f2:	4601      	mov	r1, r0
    20f4:	2800      	cmp	r0, #0
    20f6:	f43f ae43 	beq.w	1d80 <ull_conn_llcp+0x30>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    20fa:	7903      	ldrb	r3, [r0, #4]
    20fc:	f043 0303 	orr.w	r3, r3, #3
    2100:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
    2102:	2318      	movs	r3, #24
    2104:	7143      	strb	r3, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
    2106:	2310      	movs	r3, #16
    2108:	71c3      	strb	r3, [r0, #7]
	rsp->interval_min =
    210a:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
    210e:	8103      	strh	r3, [r0, #8]
	rsp->interval_max =
    2110:	f8b4 30fa 	ldrh.w	r3, [r4, #250]	; 0xfa
    2114:	8143      	strh	r3, [r0, #10]
	rsp->latency =
    2116:	f8b4 30fc 	ldrh.w	r3, [r4, #252]	; 0xfc
    211a:	8183      	strh	r3, [r0, #12]
	rsp->timeout =
    211c:	f8b4 30fe 	ldrh.w	r3, [r4, #254]	; 0xfe
    2120:	81c3      	strh	r3, [r0, #14]
	rsp->preferred_periodicity =
    2122:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
    2126:	7403      	strb	r3, [r0, #16]
	rsp->reference_conn_event_count =
    2128:	f8b4 3102 	ldrh.w	r3, [r4, #258]	; 0x102
    212c:	f8a0 3011 	strh.w	r3, [r0, #17]
	rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
    2130:	f8b4 3104 	ldrh.w	r3, [r4, #260]	; 0x104
    2134:	f8a0 3013 	strh.w	r3, [r0, #19]
	rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
    2138:	f8b4 3106 	ldrh.w	r3, [r4, #262]	; 0x106
    213c:	f8a0 3015 	strh.w	r3, [r0, #21]
	rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
    2140:	f8b4 3108 	ldrh.w	r3, [r4, #264]	; 0x108
    2144:	f8a0 3017 	strh.w	r3, [r0, #23]
	rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
    2148:	f8b4 310a 	ldrh.w	r3, [r4, #266]	; 0x10a
    214c:	f8a0 3019 	strh.w	r3, [r0, #25]
	rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
    2150:	f8b4 310c 	ldrh.w	r3, [r4, #268]	; 0x10c
    2154:	f8a0 301b 	strh.w	r3, [r0, #27]
	rsp->offset5 = sys_cpu_to_le16(conn->llcp_conn_param.offset5);
    2158:	f8b4 310e 	ldrh.w	r3, [r4, #270]	; 0x10e
    215c:	f8a0 301d 	strh.w	r3, [r0, #29]
	ctrl_tx_enqueue(conn, tx);
    2160:	4620      	mov	r0, r4
    2162:	f022 f895 	bl	24290 <ctrl_tx_enqueue>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD_WAIT;
    2166:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
    216a:	2205      	movs	r2, #5
    216c:	f362 0303 	bfi	r3, r2, #0, #4
    2170:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
    2174:	e604      	b.n	1d80 <ull_conn_llcp+0x30>
	rx = ll_pdu_rx_alloc();
    2176:	f00f fecf 	bl	11f18 <ll_pdu_rx_alloc>
	if (!rx) {
    217a:	4601      	mov	r1, r0
    217c:	2800      	cmp	r0, #0
    217e:	f43f adff 	beq.w	1d80 <ull_conn_llcp+0x30>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    2182:	f894 20f6 	ldrb.w	r2, [r4, #246]	; 0xf6
    2186:	2303      	movs	r3, #3
    2188:	f363 0203 	bfi	r2, r3, #0, #4
    218c:	f884 20f6 	strb.w	r2, [r4, #246]	; 0xf6
	rx->hdr.handle = conn->lll.handle;
    2190:	8d22      	ldrh	r2, [r4, #40]	; 0x28
	rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    2192:	7103      	strb	r3, [r0, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    2194:	7f03      	ldrb	r3, [r0, #28]
	rx->hdr.handle = conn->lll.handle;
    2196:	80c2      	strh	r2, [r0, #6]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    2198:	f043 0303 	orr.w	r3, r3, #3
    219c:	7703      	strb	r3, [r0, #28]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    219e:	2318      	movs	r3, #24
    21a0:	7743      	strb	r3, [r0, #29]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    21a2:	230f      	movs	r3, #15
    21a4:	77c3      	strb	r3, [r0, #31]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    21a6:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
    21aa:	8403      	strh	r3, [r0, #32]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    21ac:	f8b4 30fa 	ldrh.w	r3, [r4, #250]	; 0xfa
    21b0:	8443      	strh	r3, [r0, #34]	; 0x22
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    21b2:	f8b4 30fc 	ldrh.w	r3, [r4, #252]	; 0xfc
    21b6:	8483      	strh	r3, [r0, #36]	; 0x24
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    21b8:	f8b4 30fe 	ldrh.w	r3, [r4, #254]	; 0xfe
    21bc:	84c3      	strh	r3, [r0, #38]	; 0x26
	ll_rx_put(rx->hdr.link, rx);
    21be:	e62e      	b.n	1e1e <ull_conn_llcp+0xce>
		LL_ASSERT(0);
    21c0:	f640 73e1 	movw	r3, #4065	; 0xfe1
    21c4:	e6b8      	b.n	1f38 <ull_conn_llcp+0x1e8>
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    21c6:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
    21c8:	8e62      	ldrh	r2, [r4, #50]	; 0x32
    21ca:	440a      	add	r2, r1
    21cc:	fa15 f582 	uxtah	r5, r5, r2
    21d0:	fa1f fb82 	uxth.w	fp, r2
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    21d4:	f894 209e 	ldrb.w	r2, [r4, #158]	; 0x9e
    21d8:	f012 0107 	ands.w	r1, r2, #7
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    21dc:	b2ad      	uxth	r5, r5
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    21de:	d055      	beq.n	228c <ull_conn_llcp+0x53c>
		rx = ll_pdu_rx_alloc_peek(1);
    21e0:	f00f fe82 	bl	11ee8 <ll_pdu_rx_alloc_peek>
		if (!rx) {
    21e4:	4607      	mov	r7, r0
    21e6:	2800      	cmp	r0, #0
    21e8:	d041      	beq.n	226e <ull_conn_llcp+0x51e>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    21ea:	4827      	ldr	r0, [pc, #156]	; (2288 <ull_conn_llcp+0x538>)
    21ec:	f021 faf4 	bl	237d8 <mem_acquire>
		if (!tx) {
    21f0:	4606      	mov	r6, r0
    21f2:	2800      	cmp	r0, #0
    21f4:	d03b      	beq.n	226e <ull_conn_llcp+0x51e>
		cpr_active_check_and_set(conn);
    21f6:	4620      	mov	r0, r4
    21f8:	f010 ff3a 	bl	13070 <cpr_active_check_and_set>
		(void)ll_pdu_rx_alloc();
    21fc:	f00f fe8c 	bl	11f18 <ll_pdu_rx_alloc>
		rx->hdr.link->mem = conn->llcp_rx;
    2200:	683b      	ldr	r3, [r7, #0]
    2202:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
    2206:	605a      	str	r2, [r3, #4]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2208:	7933      	ldrb	r3, [r6, #4]
		conn->llcp_rx = rx;
    220a:	f8c4 7098 	str.w	r7, [r4, #152]	; 0x98
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    220e:	f043 0303 	orr.w	r3, r3, #3
    2212:	7133      	strb	r3, [r6, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    2214:	2200      	movs	r2, #0
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    2216:	230c      	movs	r3, #12
    2218:	7173      	strb	r3, [r6, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    221a:	71f2      	strb	r2, [r6, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size = conn->llcp_cu.win_size;
    221c:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
    2220:	7233      	strb	r3, [r6, #8]
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
    2222:	f240 41e2 	movw	r1, #1250	; 0x4e2
    2226:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
    222a:	fbb3 f3f1 	udiv	r3, r3, r1
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
    222e:	f8a6 3009 	strh.w	r3, [r6, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    2232:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
    2236:	f8a6 300b 	strh.w	r3, [r6, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    223a:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
    223e:	f8a6 300d 	strh.w	r3, [r6, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    2242:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
    2246:	f8a6 300f 	strh.w	r3, [r6, #15]
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    224a:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
    224e:	f362 0302 	bfi	r3, r2, #0, #3
    2252:	f884 309e 	strb.w	r3, [r4, #158]	; 0x9e
					      conn->lll.latency + 6;
    2256:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    2258:	3306      	adds	r3, #6
    225a:	441d      	add	r5, r3
    225c:	b2ad      	uxth	r5, r5
		conn->llcp.conn_upd.instant = event_counter +
    225e:	f8a4 508c 	strh.w	r5, [r4, #140]	; 0x8c
		pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    2262:	f8a6 5011 	strh.w	r5, [r6, #17]
			ctrl_tx_enqueue(conn, tx);
    2266:	4631      	mov	r1, r6
    2268:	4620      	mov	r0, r4
    226a:	f022 f811 	bl	24290 <ctrl_tx_enqueue>
	if (((conn->llcp_terminate.req - conn->llcp_terminate.ack) & 0xFF) ==
    226e:	f894 30d0 	ldrb.w	r3, [r4, #208]	; 0xd0
    2272:	f894 20d1 	ldrb.w	r2, [r4, #209]	; 0xd1
    2276:	1a9b      	subs	r3, r3, r2
    2278:	b2db      	uxtb	r3, r3
    227a:	2b01      	cmp	r3, #1
    227c:	f000 820a 	beq.w	2694 <ull_conn_llcp+0x944>
	return 0;
    2280:	2000      	movs	r0, #0
}
    2282:	b00b      	add	sp, #44	; 0x2c
    2284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2288:	20002fc4 	.word	0x20002fc4
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    228c:	f8b4 808c 	ldrh.w	r8, [r4, #140]	; 0x8c
    2290:	eba5 0508 	sub.w	r5, r5, r8
    2294:	fa1f fa85 	uxth.w	sl, r5
	} else if (instant_latency <= 0x7FFF) {
    2298:	042d      	lsls	r5, r5, #16
    229a:	d4e8      	bmi.n	226e <ull_conn_llcp+0x51e>
			conn->llcp_ack = conn->llcp_req;
    229c:	f884 3089 	strb.w	r3, [r4, #137]	; 0x89
		conn->llcp_cu.ack = conn->llcp_cu.req;
    22a0:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    22a4:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
		conn->llcp_cu.ack = conn->llcp_cu.req;
    22a8:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    22ac:	f894 30f5 	ldrb.w	r3, [r4, #245]	; 0xf5
    22b0:	4293      	cmp	r3, r2
    22b2:	d009      	beq.n	22c8 <ull_conn_llcp+0x578>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
    22b4:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    22b8:	f003 030f 	and.w	r3, r3, #15
    22bc:	2b06      	cmp	r3, #6
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    22be:	bf04      	itt	eq
    22c0:	f884 20f5 	strbeq.w	r2, [r4, #245]	; 0xf5
			conn->procedure_expire = 0U;
    22c4:	f8a4 1078 	strheq.w	r1, [r4, #120]	; 0x78
	if (conn == conn_upd_curr) {
    22c8:	4bbf      	ldr	r3, [pc, #764]	; (25c8 <ull_conn_llcp+0x878>)
		rx = conn->llcp_rx;
    22ca:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
	if (conn == conn_upd_curr) {
    22ce:	681a      	ldr	r2, [r3, #0]
    22d0:	4294      	cmp	r4, r2
		conn_upd_curr = NULL;
    22d2:	bf04      	itt	eq
    22d4:	2200      	moveq	r2, #0
    22d6:	601a      	streq	r2, [r3, #0]
		LL_ASSERT(rx && rx->hdr.link);
    22d8:	b10d      	cbz	r5, 22de <ull_conn_llcp+0x58e>
    22da:	682b      	ldr	r3, [r5, #0]
    22dc:	b963      	cbnz	r3, 22f8 <ull_conn_llcp+0x5a8>
    22de:	4abb      	ldr	r2, [pc, #748]	; (25cc <ull_conn_llcp+0x87c>)
    22e0:	49bb      	ldr	r1, [pc, #748]	; (25d0 <ull_conn_llcp+0x880>)
    22e2:	48bc      	ldr	r0, [pc, #752]	; (25d4 <ull_conn_llcp+0x884>)
    22e4:	f44f 6342 	mov.w	r3, #3104	; 0xc20
    22e8:	f019 ffee 	bl	1c2c8 <printk>
    22ec:	4040      	eors	r0, r0
    22ee:	f380 8811 	msr	BASEPRI, r0
    22f2:	f04f 0003 	mov.w	r0, #3
    22f6:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
    22f8:	6828      	ldr	r0, [r5, #0]
		if ((conn->llcp_cu.interval != lll->interval) ||
    22fa:	f8b4 20a0 	ldrh.w	r2, [r4, #160]	; 0xa0
		conn->llcp_rx = rx->hdr.link->mem;
    22fe:	6843      	ldr	r3, [r0, #4]
    2300:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
		if ((conn->llcp_cu.interval != lll->interval) ||
    2304:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
		    (conn->llcp_cu.latency != lll->latency) ||
    2306:	f8b4 60a2 	ldrh.w	r6, [r4, #162]	; 0xa2
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    230a:	f8b4 10a4 	ldrh.w	r1, [r4, #164]	; 0xa4
		if ((conn->llcp_cu.interval != lll->interval) ||
    230e:	429a      	cmp	r2, r3
    2310:	d113      	bne.n	233a <ull_conn_llcp+0x5ea>
    2312:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    2314:	42b3      	cmp	r3, r6
    2316:	d110      	bne.n	233a <ull_conn_llcp+0x5ea>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    2318:	f240 43e2 	movw	r3, #1250	; 0x4e2
    231c:	fb03 f702 	mul.w	r7, r3, r2
    2320:	f242 7310 	movw	r3, #10000	; 0x2710
    2324:	fb03 7301 	mla	r3, r3, r1, r7
    2328:	3b01      	subs	r3, #1
    232a:	fbb3 f3f7 	udiv	r3, r3, r7
		    (conn->llcp_cu.latency != lll->latency) ||
    232e:	f8b4 7072 	ldrh.w	r7, [r4, #114]	; 0x72
    2332:	b29b      	uxth	r3, r3
    2334:	429f      	cmp	r7, r3
    2336:	f000 811f 	beq.w	2578 <ull_conn_llcp+0x828>
			rx->hdr.handle = lll->handle;
    233a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    233c:	80eb      	strh	r3, [r5, #6]
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    233e:	2318      	movs	r3, #24
    2340:	712b      	strb	r3, [r5, #4]
			cu->status = 0x00;
    2342:	2300      	movs	r3, #0
    2344:	772b      	strb	r3, [r5, #28]
			cu->interval = conn->llcp_cu.interval;
    2346:	83ea      	strh	r2, [r5, #30]
			cu->latency = conn->llcp_cu.latency;
    2348:	842e      	strh	r6, [r5, #32]
			cu->timeout = conn->llcp_cu.timeout;
    234a:	8469      	strh	r1, [r5, #34]	; 0x22
		ll_rx_put(rx->hdr.link, rx);
    234c:	4629      	mov	r1, r5
    234e:	f00f fd37 	bl	11dc0 <ll_rx_put>
		ll_rx_sched();
    2352:	f00f fd3f 	bl	11dd4 <ll_rx_sched>
		if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
    2356:	68a3      	ldr	r3, [r4, #8]
    2358:	2b00      	cmp	r3, #0
    235a:	da0a      	bge.n	2372 <ull_conn_llcp+0x622>
			uint32_t ticks_prepare_to_start =
    235c:	68e0      	ldr	r0, [r4, #12]
    235e:	6862      	ldr	r2, [r4, #4]
			conn->ull.ticks_prepare_to_start &= ~XON_BITMASK;
    2360:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			ticks_at_expire -= (conn->ull.ticks_prepare_to_start -
    2364:	4290      	cmp	r0, r2
    2366:	bf2c      	ite	cs
    2368:	4481      	addcs	r9, r0
    236a:	4491      	addcc	r9, r2
			conn->ull.ticks_prepare_to_start &= ~XON_BITMASK;
    236c:	60a3      	str	r3, [r4, #8]
			ticks_at_expire -= (conn->ull.ticks_prepare_to_start -
    236e:	eba9 0903 	sub.w	r9, r9, r3
		conn_interval_old = instant_latency * lll->interval;
    2372:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
		latency = conn_interval_old / conn->llcp_cu.interval;
    2374:	f8b4 60a0 	ldrh.w	r6, [r4, #160]	; 0xa0
    2378:	4d97      	ldr	r5, [pc, #604]	; (25d8 <ull_conn_llcp+0x888>)
		conn_interval_old = instant_latency * lll->interval;
    237a:	fb10 f00a 	smulbb	r0, r0, sl
    237e:	b280      	uxth	r0, r0
		latency = conn_interval_old / conn->llcp_cu.interval;
    2380:	fbb0 f2f6 	udiv	r2, r0, r6
		conn_interval_new = latency * conn->llcp_cu.interval;
    2384:	fb16 f302 	smulbb	r3, r6, r2
    2388:	b29b      	uxth	r3, r3
		if (conn_interval_new > conn_interval_old) {
    238a:	4298      	cmp	r0, r3
		latency = conn_interval_old / conn->llcp_cu.interval;
    238c:	b297      	uxth	r7, r2
		if (conn_interval_new > conn_interval_old) {
    238e:	f240 41e2 	movw	r1, #1250	; 0x4e2
    2392:	f080 80f4 	bcs.w	257e <ull_conn_llcp+0x82e>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    2396:	1a18      	subs	r0, r3, r0
    2398:	4348      	muls	r0, r1
    239a:	a389      	add	r3, pc, #548	; (adr r3, 25c0 <ull_conn_llcp+0x870>)
    239c:	e9d3 2300 	ldrd	r2, r3, [r3]
    23a0:	fba0 0105 	umull	r0, r1, r0, r5
    23a4:	f7ff f868 	bl	1478 <__aeabi_uldivmod>
    23a8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    23ac:	4481      	add	r9, r0
		lll->latency_prepare -= (instant_latency - latency);
    23ae:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    23b0:	4498      	add	r8, r3
		} else if (lll->role) {
    23b2:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		lll->latency_prepare -= (instant_latency - latency);
    23b6:	eba8 0b0b 	sub.w	fp, r8, fp
    23ba:	44bb      	add	fp, r7
		conn_interval_us = conn->llcp_cu.interval *
    23bc:	f240 48e2 	movw	r8, #1250	; 0x4e2
		} else if (lll->role) {
    23c0:	2b00      	cmp	r3, #0
		lll->latency_prepare -= (instant_latency - latency);
    23c2:	f8a4 b02e 	strh.w	fp, [r4, #46]	; 0x2e
		conn_interval_us = conn->llcp_cu.interval *
    23c6:	fb08 fb06 	mul.w	fp, r8, r6
		} else if (lll->role) {
    23ca:	f280 80e6 	bge.w	259a <ull_conn_llcp+0x84a>
				lll->periph.window_widening_periodic_us *
    23ce:	6c22      	ldr	r2, [r4, #64]	; 0x40
			lll->periph.window_widening_prepare_us -=
    23d0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    23d2:	fb02 331a 	mls	r3, r2, sl, r3
    23d6:	64a3      	str	r3, [r4, #72]	; 0x48
				ceiling_fraction(((lll_clock_ppm_local_get() +
    23d8:	f022 f946 	bl	24668 <lll_clock_ppm_local_get>
    23dc:	4606      	mov	r6, r0
    23de:	f894 007c 	ldrb.w	r0, [r4, #124]	; 0x7c
    23e2:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    23e6:	f012 fe47 	bl	15078 <lll_clock_ppm_get>
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
    23ea:	f894 20ac 	ldrb.w	r2, [r4, #172]	; 0xac
				ceiling_fraction(((lll_clock_ppm_local_get() +
    23ee:	4406      	add	r6, r0
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
    23f0:	fb08 f202 	mul.w	r2, r8, r2
			lll->periph.window_size_prepare_us =
    23f4:	6522      	str	r2, [r4, #80]	; 0x50
				ceiling_fraction(((lll_clock_ppm_local_get() +
    23f6:	fb0b f606 	mul.w	r6, fp, r6
			conn->periph.ticks_to_offset = 0U;
    23fa:	2200      	movs	r2, #0
    23fc:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
				ceiling_fraction(((lll_clock_ppm_local_get() +
    2400:	f506 2674 	add.w	r6, r6, #999424	; 0xf4000
			lll->periph.window_widening_prepare_us +=
    2404:	6ca2      	ldr	r2, [r4, #72]	; 0x48
				ceiling_fraction(((lll_clock_ppm_local_get() +
    2406:	4875      	ldr	r0, [pc, #468]	; (25dc <ull_conn_llcp+0x88c>)
    2408:	f206 263f 	addw	r6, r6, #575	; 0x23f
				(conn_interval_us >> 1) - EVENT_IFS_US;
    240c:	ea4f 035b 	mov.w	r3, fp, lsr #1
				ceiling_fraction(((lll_clock_ppm_local_get() +
    2410:	fbb6 f6f0 	udiv	r6, r6, r0
				lll->periph.window_widening_periodic_us *
    2414:	fb06 f007 	mul.w	r0, r6, r7
				(conn_interval_us >> 1) - EVENT_IFS_US;
    2418:	3b96      	subs	r3, #150	; 0x96
			lll->periph.window_widening_prepare_us +=
    241a:	4402      	add	r2, r0
			lll->periph.window_widening_periodic_us =
    241c:	6426      	str	r6, [r4, #64]	; 0x40
			lll->periph.window_widening_max_us =
    241e:	6463      	str	r3, [r4, #68]	; 0x44
			lll->periph.window_widening_prepare_us +=
    2420:	429a      	cmp	r2, r3
    2422:	bf94      	ite	ls
    2424:	64a2      	strls	r2, [r4, #72]	; 0x48
    2426:	64a3      	strhi	r3, [r4, #72]	; 0x48
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    2428:	fba0 0105 	umull	r0, r1, r0, r5
    242c:	a364      	add	r3, pc, #400	; (adr r3, 25c0 <ull_conn_llcp+0x870>)
    242e:	e9d3 2300 	ldrd	r2, r3, [r3]
    2432:	f7ff f821 	bl	1478 <__aeabi_uldivmod>
    2436:	eba9 0900 	sub.w	r9, r9, r0
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    243a:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
    243e:	fbb0 f0f8 	udiv	r0, r0, r8
    2442:	fb08 f000 	mul.w	r0, r8, r0
    2446:	a35e      	add	r3, pc, #376	; (adr r3, 25c0 <ull_conn_llcp+0x870>)
    2448:	e9d3 2300 	ldrd	r2, r3, [r3]
    244c:	fba0 0105 	umull	r0, r1, r0, r5
    2450:	f7ff f812 	bl	1478 <__aeabi_uldivmod>
			periodic_us -= lll->periph.window_widening_periodic_us;
    2454:	ebab 0606 	sub.w	r6, fp, r6
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    2458:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
		lll->interval = conn->llcp_cu.interval;
    245c:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
    2460:	8563      	strh	r3, [r4, #42]	; 0x2a
		lll->latency = conn->llcp_cu.latency;
    2462:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
    2466:	85a3      	strh	r3, [r4, #44]	; 0x2c
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    2468:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
    246c:	f242 7210 	movw	r2, #10000	; 0x2710
    2470:	fb02 b303 	mla	r3, r2, r3, fp
    2474:	3b01      	subs	r3, #1
    2476:	fbb3 f3fb 	udiv	r3, r3, fp
    247a:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    247e:	4b58      	ldr	r3, [pc, #352]	; (25e0 <ull_conn_llcp+0x890>)
    2480:	445b      	add	r3, fp
    2482:	fbb3 f3fb 	udiv	r3, r3, fp
    2486:	f8a4 3076 	strh.w	r3, [r4, #118]	; 0x76
		if (conn->llcp_cu.cmd) {
    248a:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
    248e:	0718      	lsls	r0, r3, #28
			conn->supervision_expire = 0U;
    2490:	bf44      	itt	mi
    2492:	2300      	movmi	r3, #0
    2494:	f8a4 3074 	strhmi.w	r3, [r4, #116]	; 0x74
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    2498:	2102      	movs	r1, #2
    249a:	2001      	movs	r0, #1
    249c:	f014 fc56 	bl	16d4c <mayfly_is_enabled>
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    24a0:	2200      	movs	r2, #0
    24a2:	2102      	movs	r1, #2
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    24a4:	4682      	mov	sl, r0
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    24a6:	2001      	movs	r0, #1
    24a8:	f00d fc1a 	bl	fce0 <mayfly_enable>
		ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    24ac:	4620      	mov	r0, r4
    24ae:	f010 ff6b 	bl	13388 <ll_conn_handle_get>
    24b2:	f100 0805 	add.w	r8, r0, #5
    24b6:	fa5f f888 	uxtb.w	r8, r8
		ticker_status =	ticker_stop(TICKER_INSTANCE_ID_CTLR,
    24ba:	4b4a      	ldr	r3, [pc, #296]	; (25e4 <ull_conn_llcp+0x894>)
    24bc:	9400      	str	r4, [sp, #0]
    24be:	4642      	mov	r2, r8
    24c0:	2101      	movs	r1, #1
    24c2:	2000      	movs	r0, #0
    24c4:	f00e f9fe 	bl	108c4 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    24c8:	f030 0302 	bics.w	r3, r0, #2
    24cc:	d00c      	beq.n	24e8 <ull_conn_llcp+0x798>
    24ce:	4a3f      	ldr	r2, [pc, #252]	; (25cc <ull_conn_llcp+0x87c>)
    24d0:	4945      	ldr	r1, [pc, #276]	; (25e8 <ull_conn_llcp+0x898>)
    24d2:	4840      	ldr	r0, [pc, #256]	; (25d4 <ull_conn_llcp+0x884>)
    24d4:	f640 43cb 	movw	r3, #3275	; 0xccb
    24d8:	f019 fef6 	bl	1c2c8 <printk>
    24dc:	4040      	eors	r0, r0
    24de:	f380 8811 	msr	BASEPRI, r0
    24e2:	f04f 0003 	mov.w	r0, #3
    24e6:	df02      	svc	2
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    24e8:	fba6 6505 	umull	r6, r5, r6, r5
    24ec:	a334      	add	r3, pc, #208	; (adr r3, 25c0 <ull_conn_llcp+0x870>)
    24ee:	e9d3 2300 	ldrd	r2, r3, [r3]
    24f2:	4630      	mov	r0, r6
    24f4:	4629      	mov	r1, r5
    24f6:	f7fe ffbf 	bl	1478 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    24fa:	4b3c      	ldr	r3, [pc, #240]	; (25ec <ull_conn_llcp+0x89c>)
    24fc:	9408      	str	r4, [sp, #32]
    24fe:	e9cd 4306 	strd	r4, r3, [sp, #24]
    2502:	4b3b      	ldr	r3, [pc, #236]	; (25f0 <ull_conn_llcp+0x8a0>)
    2504:	9305      	str	r3, [sp, #20]
    2506:	6923      	ldr	r3, [r4, #16]
    2508:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_REMAINDER(periodic_us),
    250a:	f020 447f 	bic.w	r4, r0, #4278190080	; 0xff000000
    250e:	4839      	ldr	r0, [pc, #228]	; (25f4 <ull_conn_llcp+0x8a4>)
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    2510:	f64f 73fe 	movw	r3, #65534	; 0xfffe
    2514:	9303      	str	r3, [sp, #12]
				     HAL_TICKER_REMAINDER(periodic_us),
    2516:	fba4 0100 	umull	r0, r1, r4, r0
    251a:	2307      	movs	r3, #7
    251c:	1a30      	subs	r0, r6, r0
    251e:	fb03 1104 	mla	r1, r3, r4, r1
    2522:	eb65 0101 	sbc.w	r1, r5, r1
    2526:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    252a:	2300      	movs	r3, #0
    252c:	f7fe ffa4 	bl	1478 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    2530:	464b      	mov	r3, r9
    2532:	e9cd 4001 	strd	r4, r0, [sp, #4]
    2536:	9700      	str	r7, [sp, #0]
    2538:	4642      	mov	r2, r8
    253a:	2101      	movs	r1, #1
    253c:	2000      	movs	r0, #0
    253e:	f021 fc3c 	bl	23dba <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    2542:	f030 0302 	bics.w	r3, r0, #2
    2546:	d00c      	beq.n	2562 <ull_conn_llcp+0x812>
    2548:	4a20      	ldr	r2, [pc, #128]	; (25cc <ull_conn_llcp+0x87c>)
    254a:	4927      	ldr	r1, [pc, #156]	; (25e8 <ull_conn_llcp+0x898>)
    254c:	4821      	ldr	r0, [pc, #132]	; (25d4 <ull_conn_llcp+0x884>)
    254e:	f640 43e5 	movw	r3, #3301	; 0xce5
    2552:	f019 feb9 	bl	1c2c8 <printk>
    2556:	4040      	eors	r0, r0
    2558:	f380 8811 	msr	BASEPRI, r0
    255c:	f04f 0003 	mov.w	r0, #3
    2560:	df02      	svc	2
		if (mayfly_was_enabled) {
    2562:	f1ba 0f00 	cmp.w	sl, #0
    2566:	d004      	beq.n	2572 <ull_conn_llcp+0x822>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
    2568:	2201      	movs	r2, #1
    256a:	2102      	movs	r1, #2
    256c:	4610      	mov	r0, r2
    256e:	f00d fbb7 	bl	fce0 <mayfly_enable>
				return -ECANCELED;
    2572:	f06f 008b 	mvn.w	r0, #139	; 0x8b
    2576:	e684      	b.n	2282 <ull_conn_llcp+0x532>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
    2578:	2301      	movs	r3, #1
    257a:	712b      	strb	r3, [r5, #4]
    257c:	e6e6      	b.n	234c <ull_conn_llcp+0x5fc>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    257e:	fb06 0012 	mls	r0, r6, r2, r0
    2582:	b280      	uxth	r0, r0
    2584:	4348      	muls	r0, r1
    2586:	a30e      	add	r3, pc, #56	; (adr r3, 25c0 <ull_conn_llcp+0x870>)
    2588:	e9d3 2300 	ldrd	r2, r3, [r3]
    258c:	fba0 0105 	umull	r0, r1, r0, r5
    2590:	f7fe ff72 	bl	1478 <__aeabi_uldivmod>
    2594:	eba9 0900 	sub.w	r9, r9, r0
    2598:	e709      	b.n	23ae <ull_conn_llcp+0x65e>
			LL_ASSERT(0);
    259a:	4a0c      	ldr	r2, [pc, #48]	; (25cc <ull_conn_llcp+0x87c>)
    259c:	4916      	ldr	r1, [pc, #88]	; (25f8 <ull_conn_llcp+0x8a8>)
    259e:	480d      	ldr	r0, [pc, #52]	; (25d4 <ull_conn_llcp+0x884>)
    25a0:	f640 439c 	movw	r3, #3228	; 0xc9c
    25a4:	f019 fe90 	bl	1c2c8 <printk>
    25a8:	4040      	eors	r0, r0
    25aa:	f380 8811 	msr	BASEPRI, r0
    25ae:	f04f 0003 	mov.w	r0, #3
    25b2:	df02      	svc	2
		uint32_t ticks_win_offset = 0;
    25b4:	2700      	movs	r7, #0
		periodic_us = conn_interval_us;
    25b6:	465e      	mov	r6, fp
    25b8:	e750      	b.n	245c <ull_conn_llcp+0x70c>
    25ba:	bf00      	nop
    25bc:	f3af 8000 	nop.w
    25c0:	1afd498d 	.word	0x1afd498d
    25c4:	00000007 	.word	0x00000007
    25c8:	20002f30 	.word	0x20002f30
    25cc:	00027c2d 	.word	0x00027c2d
    25d0:	00027cf7 	.word	0x00027cf7
    25d4:	00027514 	.word	0x00027514
    25d8:	3b9aca00 	.word	0x3b9aca00
    25dc:	000f4240 	.word	0x000f4240
    25e0:	026259ff 	.word	0x026259ff
    25e4:	000132c1 	.word	0x000132c1
    25e8:	00027d0a 	.word	0x00027d0a
    25ec:	00013269 	.word	0x00013269
    25f0:	00014509 	.word	0x00014509
    25f4:	1afd498d 	.word	0x1afd498d
    25f8:	0002826c 	.word	0x0002826c
			event_counter = lll->event_counter +
    25fc:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
    25fe:	8e62      	ldrh	r2, [r4, #50]	; 0x32
    2600:	440a      	add	r2, r1
    2602:	4415      	add	r5, r2
	if (conn->llcp.chan_map.initiate) {
    2604:	f894 208c 	ldrb.w	r2, [r4, #140]	; 0x8c
    2608:	07d1      	lsls	r1, r2, #31
			event_counter = lll->event_counter +
    260a:	b2ad      	uxth	r5, r5
	if (conn->llcp.chan_map.initiate) {
    260c:	d524      	bpl.n	2658 <ull_conn_llcp+0x908>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    260e:	4835      	ldr	r0, [pc, #212]	; (26e4 <ull_conn_llcp+0x994>)
    2610:	f021 f8e2 	bl	237d8 <mem_acquire>
		if (tx) {
    2614:	4606      	mov	r6, r0
    2616:	2800      	cmp	r0, #0
    2618:	f43f ae29 	beq.w	226e <ull_conn_llcp+0x51e>
			conn->llcp.chan_map.initiate = 0U;
    261c:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
    2620:	f36f 0300 	bfc	r3, #0, #1
    2624:	f884 308c 	strb.w	r3, [r4, #140]	; 0x8c
						      conn->lll.latency + 6;
    2628:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    262a:	3306      	adds	r3, #6
    262c:	441d      	add	r5, r3
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    262e:	7903      	ldrb	r3, [r0, #4]
			conn->llcp.chan_map.instant = event_counter +
    2630:	f8a4 5092 	strh.w	r5, [r4, #146]	; 0x92
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2634:	f043 0303 	orr.w	r3, r3, #3
    2638:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    263a:	2308      	movs	r3, #8
    263c:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    263e:	2301      	movs	r3, #1
    2640:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    2642:	2205      	movs	r2, #5
    2644:	f104 018d 	add.w	r1, r4, #141	; 0x8d
    2648:	3008      	adds	r0, #8
    264a:	f01b fcf2 	bl	1e032 <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    264e:	f8b4 3092 	ldrh.w	r3, [r4, #146]	; 0x92
    2652:	f8a6 300d 	strh.w	r3, [r6, #13]
    2656:	e606      	b.n	2266 <ull_conn_llcp+0x516>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    2658:	f8b4 2092 	ldrh.w	r2, [r4, #146]	; 0x92
    265c:	1aad      	subs	r5, r5, r2
    265e:	042a      	lsls	r2, r5, #16
    2660:	f53f ae05 	bmi.w	226e <ull_conn_llcp+0x51e>
		memcpy(&lll->data_chan_map[0],
    2664:	f104 0534 	add.w	r5, r4, #52	; 0x34
			conn->llcp_ack = conn->llcp_req;
    2668:	f884 3089 	strb.w	r3, [r4, #137]	; 0x89
		memcpy(&lll->data_chan_map[0],
    266c:	2205      	movs	r2, #5
    266e:	f104 018d 	add.w	r1, r4, #141	; 0x8d
    2672:	4628      	mov	r0, r5
    2674:	f01b fcdd 	bl	1e032 <memcpy>
			util_ones_count_get(&lll->data_chan_map[0],
    2678:	2105      	movs	r1, #5
    267a:	4628      	mov	r0, r5
    267c:	f021 f928 	bl	238d0 <util_ones_count_get>
		lll->data_chan_count =
    2680:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    2684:	f360 0305 	bfi	r3, r0, #0, #6
    2688:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
    268c:	2301      	movs	r3, #1
    268e:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
    2692:	e5ec      	b.n	226e <ull_conn_llcp+0x51e>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2694:	4813      	ldr	r0, [pc, #76]	; (26e4 <ull_conn_llcp+0x994>)
    2696:	f021 f89f 	bl	237d8 <mem_acquire>
		if (tx) {
    269a:	4601      	mov	r1, r0
    269c:	b188      	cbz	r0, 26c2 <ull_conn_llcp+0x972>
			conn->llcp_terminate.ack--;
    269e:	f894 30d1 	ldrb.w	r3, [r4, #209]	; 0xd1
    26a2:	3b01      	subs	r3, #1
    26a4:	f884 30d1 	strb.w	r3, [r4, #209]	; 0xd1
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    26a8:	7903      	ldrb	r3, [r0, #4]
    26aa:	f043 0303 	orr.w	r3, r3, #3
    26ae:	7103      	strb	r3, [r0, #4]
			pdu_tx->len = offsetof(struct pdu_data_llctrl,
    26b0:	2302      	movs	r3, #2
    26b2:	7143      	strb	r3, [r0, #5]
			pdu_tx->llctrl.opcode =
    26b4:	71c3      	strb	r3, [r0, #7]
			pdu_tx->llctrl.terminate_ind.error_code =
    26b6:	f894 30d2 	ldrb.w	r3, [r4, #210]	; 0xd2
    26ba:	7203      	strb	r3, [r0, #8]
			ctrl_tx_enqueue(conn, tx);
    26bc:	4620      	mov	r0, r4
    26be:	f021 fde7 	bl	24290 <ctrl_tx_enqueue>
		if (!conn->procedure_expire) {
    26c2:	f8b4 0078 	ldrh.w	r0, [r4, #120]	; 0x78
    26c6:	2800      	cmp	r0, #0
    26c8:	f47f adda 	bne.w	2280 <ull_conn_llcp+0x530>
			conn->procedure_expire = conn->supervision_reload;
    26cc:	f8b4 3072 	ldrh.w	r3, [r4, #114]	; 0x72
			if (conn->procedure_expire <= 1U) {
    26d0:	2b01      	cmp	r3, #1
    26d2:	d902      	bls.n	26da <ull_conn_llcp+0x98a>
			conn->procedure_expire = conn->supervision_reload;
    26d4:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
    26d8:	e5d2      	b.n	2280 <ull_conn_llcp+0x530>
				conn->procedure_expire++;
    26da:	3301      	adds	r3, #1
    26dc:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
    26e0:	e5cf      	b.n	2282 <ull_conn_llcp+0x532>
    26e2:	bf00      	nop
    26e4:	20002fc4 	.word	0x20002fc4

000026e8 <ull_periph_setup>:
static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *param);

void ull_periph_setup(struct node_rx_hdr *rx, struct node_rx_ftr *ftr,
		     struct lll_conn *lll)
{
    26e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	memq_link_t *link;
	uint16_t timeout;
	uint8_t chan_sel;
	void *node;

	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    26ec:	680b      	ldr	r3, [r1, #0]
{
    26ee:	4615      	mov	r5, r2
	conn = lll->hdr.parent;
    26f0:	4617      	mov	r7, r2

	/* Populate the peripheral context */
	pdu_adv = (void *)((struct node_rx_pdu *)rx)->pdu;

	peer_addr_type = pdu_adv->tx_addr;
    26f2:	4602      	mov	r2, r0
{
    26f4:	b095      	sub	sp, #84	; 0x54
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    26f6:	f8d3 9000 	ldr.w	r9, [r3]
	peer_addr_type = pdu_adv->tx_addr;
    26fa:	f812 3f1c 	ldrb.w	r3, [r2, #28]!
    26fe:	920d      	str	r2, [sp, #52]	; 0x34
{
    2700:	4604      	mov	r4, r0
	peer_addr_type = pdu_adv->tx_addr;
    2702:	f3c3 1380 	ubfx	r3, r3, #6, #1
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    2706:	2206      	movs	r2, #6
{
    2708:	4688      	mov	r8, r1
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    270a:	f100 011e 	add.w	r1, r0, #30
    270e:	a812      	add	r0, sp, #72	; 0x48
	peer_addr_type = pdu_adv->tx_addr;
    2710:	930c      	str	r3, [sp, #48]	; 0x30
	conn = lll->hdr.parent;
    2712:	f857 6b08 	ldr.w	r6, [r7], #8
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    2716:	f01b fc8c 	bl	1e032 <memcpy>
		peer_addr_type += 2;
	} else {
#else /* CONFIG_BT_CTLR_PRIVACY */
	if (1) {
#endif /* CONFIG_BT_CTLR_PRIVACY */
		memcpy(peer_id_addr, peer_addr, BDADDR_SIZE);
    271a:	2206      	movs	r2, #6
    271c:	a912      	add	r1, sp, #72	; 0x48
    271e:	a810      	add	r0, sp, #64	; 0x40
    2720:	f01b fc87 	bl	1e032 <memcpy>
	}

	/* Use the link stored in the node rx to enqueue connection
	 * complete node rx towards LL context.
	 */
	link = rx->link;
    2724:	4621      	mov	r1, r4
	conn->own_id_addr_type = own_id_addr_type;
	(void)memcpy(conn->own_id_addr, own_id_addr,
		     sizeof(conn->own_id_addr));
#endif /* CONFIG_BT_CTLR_CHECK_SAME_PEER_CONN */

	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    2726:	2203      	movs	r2, #3
	link = rx->link;
    2728:	f851 ab2e 	ldr.w	sl, [r1], #46
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    272c:	4638      	mov	r0, r7
    272e:	f01b fc80 	bl	1e032 <memcpy>
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
    2732:	1d2b      	adds	r3, r5, #4
    2734:	4618      	mov	r0, r3
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    2736:	f105 0718 	add.w	r7, r5, #24
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
    273a:	2204      	movs	r2, #4
    273c:	f104 012a 	add.w	r1, r4, #42	; 0x2a
    2740:	930b      	str	r3, [sp, #44]	; 0x2c
    2742:	f01b fc76 	bl	1e032 <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    2746:	2205      	movs	r2, #5
    2748:	f104 013a 	add.w	r1, r4, #58	; 0x3a
    274c:	4638      	mov	r0, r7
    274e:	f01b fc70 	bl	1e032 <memcpy>
	       sizeof(lll->data_chan_map));
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    2752:	2105      	movs	r1, #5
    2754:	4638      	mov	r0, r7
    2756:	f021 f8bb 	bl	238d0 <util_ones_count_get>
    275a:	7f6a      	ldrb	r2, [r5, #29]
    275c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    2760:	f360 0205 	bfi	r2, r0, #0, #6
    2764:	776a      	strb	r2, [r5, #29]
			       sizeof(lll->data_chan_map));
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    2766:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
    276a:	f3c2 0104 	ubfx	r1, r2, #0, #5
    276e:	77a9      	strb	r1, [r5, #30]
	lll->interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
    2770:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
    2772:	81e9      	strh	r1, [r5, #14]
	if ((lll->data_chan_count < CHM_USED_COUNT_MIN) ||
    2774:	2801      	cmp	r0, #1
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    2776:	f002 021f 	and.w	r2, r2, #31
	lll->interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
    277a:	b28f      	uxth	r7, r1
	if ((lll->data_chan_count < CHM_USED_COUNT_MIN) ||
    277c:	d906      	bls.n	278c <ull_periph_setup+0xa4>
    277e:	321b      	adds	r2, #27
    2780:	f002 021f 	and.w	r2, r2, #31
    2784:	2a0b      	cmp	r2, #11
    2786:	d801      	bhi.n	278c <ull_periph_setup+0xa4>
	    (lll->data_chan_hop < CHM_HOP_COUNT_MIN) ||
	    (lll->data_chan_hop > CHM_HOP_COUNT_MAX) ||
    2788:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    278a:	b99f      	cbnz	r7, 27b4 <ull_periph_setup+0xcc>
{
	/* Reset the advertising disabled callback */
	hdr->disabled_cb = NULL;

	/* Let the advertiser continue with connectable advertising */
	lll->periph.initiated = 0U;
    278c:	f895 3020 	ldrb.w	r3, [r5, #32]
	hdr->disabled_cb = NULL;
    2790:	2200      	movs	r2, #0
	lll->periph.initiated = 0U;
    2792:	f362 0300 	bfi	r3, r2, #0, #1
	hdr->disabled_cb = NULL;
    2796:	f8c9 2014 	str.w	r2, [r9, #20]
	lll->periph.initiated = 0U;
    279a:	f885 3020 	strb.w	r3, [r5, #32]

	/* Mark for buffer for release */
	rx->type = NODE_RX_TYPE_RELEASE;
    279e:	2301      	movs	r3, #1
    27a0:	7123      	strb	r3, [r4, #4]
		/* Mark for buffer for release */
		rx->type = NODE_RX_TYPE_RELEASE;
	}

	/* Enqueue connection or CSA event to be release */
	ll_rx_put(link, rx);
    27a2:	4621      	mov	r1, r4
    27a4:	4650      	mov	r0, sl
    27a6:	f00f fb0b 	bl	11dc0 <ll_rx_put>
	ll_rx_sched();
    27aa:	f00f fb13 	bl	11dd4 <ll_rx_sched>
}
    27ae:	b015      	add	sp, #84	; 0x54
    27b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	((struct lll_adv *)ftr->param)->conn = NULL;
    27b4:	f8d8 2000 	ldr.w	r2, [r8]
    27b8:	930f      	str	r3, [sp, #60]	; 0x3c
    27ba:	2100      	movs	r1, #0
    27bc:	6051      	str	r1, [r2, #4]
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
    27be:	f894 1037 	ldrb.w	r1, [r4, #55]	; 0x37
    27c2:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
    27c6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    27ca:	822a      	strh	r2, [r5, #16]
	conn->periph.sca = pdu_adv->connect_ind.sca;
    27cc:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
    27d0:	f896 107c 	ldrb.w	r1, [r6, #124]	; 0x7c
	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
    27d4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    27d6:	930b      	str	r3, [sp, #44]	; 0x2c
	conn->periph.sca = pdu_adv->connect_ind.sca;
    27d8:	0952      	lsrs	r2, r2, #5
    27da:	f362 01c5 	bfi	r1, r2, #3, #3
    27de:	f886 107c 	strb.w	r1, [r6, #124]	; 0x7c
		ceiling_fraction(((lll_clock_ppm_local_get() +
    27e2:	f021 ff41 	bl	24668 <lll_clock_ppm_local_get>
    27e6:	900e      	str	r0, [sp, #56]	; 0x38
    27e8:	f896 007c 	ldrb.w	r0, [r6, #124]	; 0x7c
    27ec:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    27f0:	f012 fc42 	bl	15078 <lll_clock_ppm_get>
    27f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	memcpy((void *)&conn->periph.force, &lll->access_addr[0],
    27f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
    27f8:	f240 4be2 	movw	fp, #1250	; 0x4e2
    27fc:	fb0b f707 	mul.w	r7, fp, r7
		ceiling_fraction(((lll_clock_ppm_local_get() +
    2800:	4410      	add	r0, r2
    2802:	4378      	muls	r0, r7
    2804:	f500 2074 	add.w	r0, r0, #999424	; 0xf4000
    2808:	4a7d      	ldr	r2, [pc, #500]	; (2a00 <ull_periph_setup+0x318>)
    280a:	f200 203f 	addw	r0, r0, #575	; 0x23f
    280e:	fbb0 f0f2 	udiv	r0, r0, r2
	lll->periph.window_widening_max_us = (conn_interval_us >> 1) -
    2812:	087a      	lsrs	r2, r7, #1
    2814:	3a96      	subs	r2, #150	; 0x96
    2816:	62aa      	str	r2, [r5, #40]	; 0x28
	lll->periph.window_size_event_us = pdu_adv->connect_ind.win_size *
    2818:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
	lll->periph.window_widening_periodic_us =
    281c:	6268      	str	r0, [r5, #36]	; 0x24
	lll->periph.window_size_event_us = pdu_adv->connect_ind.win_size *
    281e:	fb0b f202 	mul.w	r2, fp, r2
    2822:	63aa      	str	r2, [r5, #56]	; 0x38
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    2824:	f8b4 b038 	ldrh.w	fp, [r4, #56]	; 0x38
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    2828:	f242 7110 	movw	r1, #10000	; 0x2710
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    282c:	fa1f f28b 	uxth.w	r2, fp
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    2830:	fb01 7202 	mla	r2, r1, r2, r7
    2834:	3a01      	subs	r2, #1
    2836:	fbb2 f2f7 	udiv	r2, r2, r7
    283a:	f8a6 2072 	strh.w	r2, [r6, #114]	; 0x72
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    283e:	4a71      	ldr	r2, [pc, #452]	; (2a04 <ull_periph_setup+0x31c>)
	memcpy((void *)&conn->periph.force, &lll->access_addr[0],
    2840:	4619      	mov	r1, r3
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    2842:	443a      	add	r2, r7
	memcpy((void *)&conn->periph.force, &lll->access_addr[0],
    2844:	f106 0080 	add.w	r0, r6, #128	; 0x80
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    2848:	fbb2 f2f7 	udiv	r2, r2, r7
    284c:	f8a6 2076 	strh.w	r2, [r6, #118]	; 0x76
	memcpy((void *)&conn->periph.force, &lll->access_addr[0],
    2850:	2204      	movs	r2, #4
    2852:	f01b fbee 	bl	1e032 <memcpy>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    2856:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2858:	07da      	lsls	r2, r3, #31
    285a:	d50b      	bpl.n	2874 <ull_periph_setup+0x18c>
    285c:	4a6a      	ldr	r2, [pc, #424]	; (2a08 <ull_periph_setup+0x320>)
    285e:	496b      	ldr	r1, [pc, #428]	; (2a0c <ull_periph_setup+0x324>)
    2860:	486b      	ldr	r0, [pc, #428]	; (2a10 <ull_periph_setup+0x328>)
    2862:	23f1      	movs	r3, #241	; 0xf1
    2864:	f019 fd30 	bl	1c2c8 <printk>
    2868:	4040      	eors	r0, r0
    286a:	f380 8811 	msr	BASEPRI, r0
    286e:	f04f 0003 	mov.w	r0, #3
    2872:	df02      	svc	2
	cc->status = 0U;
    2874:	f44f 7380 	mov.w	r3, #256	; 0x100
    2878:	83a3      	strh	r3, [r4, #28]
	cc->peer_addr_type = peer_addr_type;
    287a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    287e:	77a3      	strb	r3, [r4, #30]
	memcpy(cc->peer_addr, peer_id_addr, BDADDR_SIZE);
    2880:	2206      	movs	r2, #6
    2882:	a910      	add	r1, sp, #64	; 0x40
    2884:	f104 001f 	add.w	r0, r4, #31
    2888:	f01b fbd3 	bl	1e032 <memcpy>
	cc->interval = lll->interval;
    288c:	89eb      	ldrh	r3, [r5, #14]
    288e:	84e3      	strh	r3, [r4, #38]	; 0x26
	cc->latency = lll->latency;
    2890:	8a2b      	ldrh	r3, [r5, #16]
    2892:	8523      	strh	r3, [r4, #40]	; 0x28
	cc->sca = conn->periph.sca;
    2894:	f896 307c 	ldrb.w	r3, [r6, #124]	; 0x7c
	cc->timeout = timeout;
    2898:	f8a4 b02a 	strh.w	fp, [r4, #42]	; 0x2a
	cc->sca = conn->periph.sca;
    289c:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    28a0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	lll->handle = ll_conn_handle_get(conn);
    28a4:	4630      	mov	r0, r6
    28a6:	f010 fd6f 	bl	13388 <ll_conn_handle_get>
	ll_rx_put(link, rx);
    28aa:	4621      	mov	r1, r4
	lll->handle = ll_conn_handle_get(conn);
    28ac:	81a8      	strh	r0, [r5, #12]
	rx->handle = lll->handle;
    28ae:	80e0      	strh	r0, [r4, #6]
	ll_rx_put(link, rx);
    28b0:	4650      	mov	r0, sl
    28b2:	f00f fa85 	bl	11dc0 <ll_rx_put>
	ll_rx_sched();
    28b6:	f00f fa8d 	bl	11dd4 <ll_rx_sched>
	ready_delay_us = lll_radio_rx_ready_delay_get(0, 0);
    28ba:	2100      	movs	r1, #0
    28bc:	4608      	mov	r0, r1
    28be:	f021 fea7 	bl	24610 <lll_radio_rx_ready_delay_get>
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    28c2:	4c54      	ldr	r4, [pc, #336]	; (2a14 <ull_periph_setup+0x32c>)
	conn->ull.ticks_prepare_to_start =
    28c4:	f04f 0a00 	mov.w	sl, #0
	ready_delay_us = lll_radio_rx_ready_delay_get(0, 0);
    28c8:	4683      	mov	fp, r0
	conn->ull.ticks_prepare_to_start =
    28ca:	2331      	movs	r3, #49	; 0x31
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    28cc:	f200 4052 	addw	r0, r0, #1106	; 0x452
	conn->ull.ticks_prepare_to_start =
    28d0:	e9c6 a301 	strd	sl, r3, [r6, #4]
	conn->ull.ticks_preempt_to_start =
    28d4:	f8c6 a00c 	str.w	sl, [r6, #12]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    28d8:	a347      	add	r3, pc, #284	; (adr r3, 29f8 <ull_periph_setup+0x310>)
    28da:	e9d3 2300 	ldrd	r2, r3, [r3]
    28de:	fba0 0104 	umull	r0, r1, r0, r4
    28e2:	f7fe fdc9 	bl	1478 <__aeabi_uldivmod>
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
    28e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	conn_offset_us = ftr->radio_end_us;
    28e8:	f8d8 300c 	ldr.w	r3, [r8, #12]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    28ec:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
    28f0:	f240 41e2 	movw	r1, #1250	; 0x4e2
    28f4:	fb01 3302 	mla	r3, r1, r2, r3
	conn->ull.ticks_slot =
    28f8:	6130      	str	r0, [r6, #16]
	conn_interval_us -= lll->periph.window_widening_periodic_us;
    28fa:	6a68      	ldr	r0, [r5, #36]	; 0x24
	conn_offset_us -= EVENT_JITTER_US;
    28fc:	f203 41b2 	addw	r1, r3, #1202	; 0x4b2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    2900:	4652      	mov	r2, sl
	conn_interval_us -= lll->periph.window_widening_periodic_us;
    2902:	1a3f      	subs	r7, r7, r0
	conn_offset_us -= ready_delay_us;
    2904:	eba1 0b0b 	sub.w	fp, r1, fp
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    2908:	2001      	movs	r0, #1
    290a:	2102      	movs	r1, #2
    290c:	f00d f9e8 	bl	fce0 <mayfly_enable>
	ticker_id_adv = TICKER_ID_ADV_BASE + ull_adv_handle_get(adv);
    2910:	4648      	mov	r0, r9
    2912:	f010 fa51 	bl	12db8 <ull_adv_handle_get>
    2916:	1c82      	adds	r2, r0, #2
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    2918:	4b3f      	ldr	r3, [pc, #252]	; (2a18 <ull_periph_setup+0x330>)
    291a:	f8cd 9000 	str.w	r9, [sp]
    291e:	b2d2      	uxtb	r2, r2
    2920:	2101      	movs	r1, #1
    2922:	4650      	mov	r0, sl
    2924:	f00d ffce 	bl	108c4 <ticker_stop>
	ticker_op_stop_adv_cb(ticker_status, adv);
    2928:	4649      	mov	r1, r9
    292a:	f011 fdd1 	bl	144d0 <ticker_op_stop_adv_cb>
	if (adv->lll.is_hdcd) {
    292e:	f899 3024 	ldrb.w	r3, [r9, #36]	; 0x24
    2932:	07db      	lsls	r3, r3, #31
    2934:	d507      	bpl.n	2946 <ull_periph_setup+0x25e>
		ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    2936:	2201      	movs	r2, #1
    2938:	f8cd a000 	str.w	sl, [sp]
    293c:	4653      	mov	r3, sl
    293e:	4611      	mov	r1, r2
    2940:	4650      	mov	r0, sl
    2942:	f00d ffbf 	bl	108c4 <ticker_stop>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    2946:	4630      	mov	r0, r6
    2948:	f010 fd1e 	bl	13388 <ll_conn_handle_get>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    294c:	fba7 7904 	umull	r7, r9, r7, r4
    2950:	a329      	add	r3, pc, #164	; (adr r3, 29f8 <ull_periph_setup+0x310>)
    2952:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    2956:	4605      	mov	r5, r0
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    2958:	4649      	mov	r1, r9
    295a:	4638      	mov	r0, r7
    295c:	f7fe fd8c 	bl	1478 <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2960:	f8d8 3008 	ldr.w	r3, [r8, #8]
    2964:	f1a3 083a 	sub.w	r8, r3, #58	; 0x3a
    2968:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
    296c:	9308      	str	r3, [sp, #32]
    296e:	4b2b      	ldr	r3, [pc, #172]	; (2a1c <ull_periph_setup+0x334>)
    2970:	e9cd 6306 	strd	r6, r3, [sp, #24]
    2974:	4b2a      	ldr	r3, [pc, #168]	; (2a20 <ull_periph_setup+0x338>)
    2976:	9305      	str	r3, [sp, #20]
    2978:	6933      	ldr	r3, [r6, #16]
    297a:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    297c:	f020 467f 	bic.w	r6, r0, #4278190080	; 0xff000000
    2980:	4828      	ldr	r0, [pc, #160]	; (2a24 <ull_periph_setup+0x33c>)
    2982:	2307      	movs	r3, #7
    2984:	fba6 0100 	umull	r0, r1, r6, r0
    2988:	1a38      	subs	r0, r7, r0
    298a:	fb03 1106 	mla	r1, r3, r6, r1
    298e:	eb69 0101 	sbc.w	r1, r9, r1
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2992:	f04f 0a00 	mov.w	sl, #0
				     HAL_TICKER_REMAINDER(conn_interval_us),
    2996:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    299a:	2300      	movs	r3, #0
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    299c:	f8cd a00c 	str.w	sl, [sp, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    29a0:	f7fe fd6a 	bl	1478 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    29a4:	a314      	add	r3, pc, #80	; (adr r3, 29f8 <ull_periph_setup+0x310>)
    29a6:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    29aa:	e9cd 6001 	strd	r6, r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    29ae:	fbab 0104 	umull	r0, r1, fp, r4
    29b2:	f7fe fd61 	bl	1478 <__aeabi_uldivmod>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    29b6:	3505      	adds	r5, #5
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    29b8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    29bc:	b2ed      	uxtb	r5, r5
    29be:	9000      	str	r0, [sp, #0]
    29c0:	4643      	mov	r3, r8
    29c2:	462a      	mov	r2, r5
    29c4:	2101      	movs	r1, #1
    29c6:	4650      	mov	r0, sl
    29c8:	f021 f9f7 	bl	23dba <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    29cc:	f030 0302 	bics.w	r3, r0, #2
    29d0:	d00c      	beq.n	29ec <ull_periph_setup+0x304>
    29d2:	4a0d      	ldr	r2, [pc, #52]	; (2a08 <ull_periph_setup+0x320>)
    29d4:	4914      	ldr	r1, [pc, #80]	; (2a28 <ull_periph_setup+0x340>)
    29d6:	480e      	ldr	r0, [pc, #56]	; (2a10 <ull_periph_setup+0x328>)
    29d8:	f240 13c9 	movw	r3, #457	; 0x1c9
    29dc:	f019 fc74 	bl	1c2c8 <printk>
    29e0:	4040      	eors	r0, r0
    29e2:	f380 8811 	msr	BASEPRI, r0
    29e6:	f04f 0003 	mov.w	r0, #3
    29ea:	df02      	svc	2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
    29ec:	2201      	movs	r2, #1
    29ee:	2102      	movs	r1, #2
    29f0:	4610      	mov	r0, r2
    29f2:	f00d f975 	bl	fce0 <mayfly_enable>
    29f6:	e6da      	b.n	27ae <ull_periph_setup+0xc6>
    29f8:	1afd498d 	.word	0x1afd498d
    29fc:	00000007 	.word	0x00000007
    2a00:	000f4240 	.word	0x000f4240
    2a04:	026259ff 	.word	0x026259ff
    2a08:	00027da8 	.word	0x00027da8
    2a0c:	00027866 	.word	0x00027866
    2a10:	00027514 	.word	0x00027514
    2a14:	3b9aca00 	.word	0x3b9aca00
    2a18:	000144d1 	.word	0x000144d1
    2a1c:	000144a5 	.word	0x000144a5
    2a20:	00014509 	.word	0x00014509
    2a24:	1afd498d 	.word	0x1afd498d
    2a28:	00027d0a 	.word	0x00027d0a
    2a2c:	00000000 	.word	0x00000000

00002a30 <nrf_flash_sync_exe>:
	_ticker_sync_context.interval = duration - FLASH_SYNC_SWITCHING_TIME;
	_ticker_sync_context.slot = duration;
}

int nrf_flash_sync_exe(struct flash_op_desc *op_desc)
{
    2a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2a34:	b08f      	sub	sp, #60	; 0x3c
			      /* (MAYFLY_CALL_ID_PROGRAM) */
			   ticker_id, /* flash ticker id */
			   ticker_ticks_now_get(), /* current tick */
			   0, /* first int. immediately */
			   /* period */
			   HAL_TICKER_US_TO_TICKS(
    2a36:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 2b10 <nrf_flash_sync_exe+0xe0>
{
    2a3a:	900a      	str	r0, [sp, #40]	; 0x28
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
    2a3c:	f10d 0137 	add.w	r1, sp, #55	; 0x37
    2a40:	f10d 0036 	add.w	r0, sp, #54	; 0x36
    2a44:	f021 fa6f 	bl	23f26 <ll_timeslice_ticker_id_get>
			   HAL_TICKER_US_TO_TICKS(
    2a48:	4f32      	ldr	r7, [pc, #200]	; (2b14 <nrf_flash_sync_exe+0xe4>)
	err = ticker_start(instance_index,
    2a4a:	f89d a036 	ldrb.w	sl, [sp, #54]	; 0x36
    2a4e:	f89d b037 	ldrb.w	fp, [sp, #55]	; 0x37
    2a52:	f021 f9e5 	bl	23e20 <ticker_ticks_now_get>
			   HAL_TICKER_US_TO_TICKS(
    2a56:	f8d8 4000 	ldr.w	r4, [r8]
    2a5a:	fba4 5407 	umull	r5, r4, r4, r7
    2a5e:	a32a      	add	r3, pc, #168	; (adr r3, 2b08 <nrf_flash_sync_exe+0xd8>)
    2a60:	e9d3 2300 	ldrd	r2, r3, [r3]
	err = ticker_start(instance_index,
    2a64:	4681      	mov	r9, r0
			   HAL_TICKER_US_TO_TICKS(
    2a66:	4621      	mov	r1, r4
    2a68:	4628      	mov	r0, r5
    2a6a:	f7fe fd05 	bl	1478 <__aeabi_uldivmod>
	err = ticker_start(instance_index,
    2a6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			   HAL_TICKER_US_TO_TICKS(
    2a70:	900b      	str	r0, [sp, #44]	; 0x2c
				_ticker_sync_context.interval),
			   /* period remainder */
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
			   0, /* lazy, voluntary skips */
			   HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot),
    2a72:	f8d8 0004 	ldr.w	r0, [r8, #4]
	err = ticker_start(instance_index,
    2a76:	9306      	str	r3, [sp, #24]
    2a78:	4b27      	ldr	r3, [pc, #156]	; (2b18 <nrf_flash_sync_exe+0xe8>)
    2a7a:	9305      	str	r3, [sp, #20]
    2a7c:	2600      	movs	r6, #0
			   HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot),
    2a7e:	a322      	add	r3, pc, #136	; (adr r3, 2b08 <nrf_flash_sync_exe+0xd8>)
    2a80:	e9d3 2300 	ldrd	r2, r3, [r3]
    2a84:	fba0 0107 	umull	r0, r1, r0, r7
	err = ticker_start(instance_index,
    2a88:	e9cd 6607 	strd	r6, r6, [sp, #28]
			   HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot),
    2a8c:	f7fe fcf4 	bl	1478 <__aeabi_uldivmod>
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
    2a90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	err = ticker_start(instance_index,
    2a92:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2a96:	e9cd 6003 	strd	r6, r0, [sp, #12]
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
    2a9a:	4820      	ldr	r0, [pc, #128]	; (2b1c <nrf_flash_sync_exe+0xec>)
    2a9c:	f023 477f 	bic.w	r7, r3, #4278190080	; 0xff000000
    2aa0:	fba7 0100 	umull	r0, r1, r7, r0
    2aa4:	2307      	movs	r3, #7
    2aa6:	1a28      	subs	r0, r5, r0
    2aa8:	fb03 1107 	mla	r1, r3, r7, r1
    2aac:	eb64 0101 	sbc.w	r1, r4, r1
    2ab0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2ab4:	2300      	movs	r3, #0
    2ab6:	f7fe fcdf 	bl	1478 <__aeabi_uldivmod>
	err = ticker_start(instance_index,
    2aba:	9600      	str	r6, [sp, #0]
    2abc:	e9cd 7001 	strd	r7, r0, [sp, #4]
    2ac0:	464b      	mov	r3, r9
    2ac2:	465a      	mov	r2, fp
    2ac4:	2103      	movs	r1, #3
    2ac6:	4650      	mov	r0, sl
    2ac8:	f021 f977 	bl	23dba <ticker_start>
			   time_slot_callback_prepare,
			   op_desc,
			   NULL, /* no op callback */
			   NULL);

	if (err != TICKER_STATUS_SUCCESS && err != TICKER_STATUS_BUSY) {
    2acc:	f030 0402 	bics.w	r4, r0, #2
    2ad0:	d116      	bne.n	2b00 <nrf_flash_sync_exe+0xd0>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    2ad2:	4a13      	ldr	r2, [pc, #76]	; (2b20 <nrf_flash_sync_exe+0xf0>)
    2ad4:	4813      	ldr	r0, [pc, #76]	; (2b24 <nrf_flash_sync_exe+0xf4>)
    2ad6:	2300      	movs	r3, #0
    2ad8:	f018 fc3c 	bl	1b354 <z_impl_k_sem_take>
		result = -ECANCELED;
	} else if (k_sem_take(&sem_sync, K_MSEC(FLASH_TIMEOUT_MS)) != 0) {
    2adc:	b168      	cbz	r0, 2afa <nrf_flash_sync_exe+0xca>
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
    2ade:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
    2ae2:	f89d 0036 	ldrb.w	r0, [sp, #54]	; 0x36
    2ae6:	9400      	str	r4, [sp, #0]
    2ae8:	4623      	mov	r3, r4
    2aea:	2103      	movs	r1, #3
    2aec:	f00d feea 	bl	108c4 <ticker_stop>
		/* Stop any scheduled jobs */
		_ticker_stop(instance_index, 3, ticker_id);

		/* wait for operation's complete overrun*/
		result = -ETIMEDOUT;
    2af0:	f06f 0073 	mvn.w	r0, #115	; 0x73
	} else {
		result = _ticker_sync_context.result;
	}

	return result;
}
    2af4:	b00f      	add	sp, #60	; 0x3c
    2af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		result = _ticker_sync_context.result;
    2afa:	f8d8 000c 	ldr.w	r0, [r8, #12]
    2afe:	e7f9      	b.n	2af4 <nrf_flash_sync_exe+0xc4>
		result = -ECANCELED;
    2b00:	f06f 008b 	mvn.w	r0, #139	; 0x8b
	return result;
    2b04:	e7f6      	b.n	2af4 <nrf_flash_sync_exe+0xc4>
    2b06:	bf00      	nop
    2b08:	1afd498d 	.word	0x1afd498d
    2b0c:	00000007 	.word	0x00000007
    2b10:	20003c38 	.word	0x20003c38
    2b14:	3b9aca00 	.word	0x3b9aca00
    2b18:	00018611 	.word	0x00018611
    2b1c:	1afd498d 	.word	0x1afd498d
    2b20:	000b7b44 	.word	0x000b7b44
    2b24:	20003c48 	.word	0x20003c48

00002b28 <nrf_flash_sync_check_time_limit>:
{
	_ticker_sync_context.ticks_begin = ticker_ticks_now_get();
}

bool nrf_flash_sync_check_time_limit(uint32_t iteration)
{
    2b28:	b538      	push	{r3, r4, r5, lr}
	uint32_t ticks_diff;

	ticks_diff = ticker_ticks_diff_get(ticker_ticks_now_get(),
    2b2a:	4d0f      	ldr	r5, [pc, #60]	; (2b68 <nrf_flash_sync_check_time_limit+0x40>)
{
    2b2c:	4604      	mov	r4, r0
	ticks_diff = ticker_ticks_diff_get(ticker_ticks_now_get(),
    2b2e:	f021 f977 	bl	23e20 <ticker_ticks_now_get>
    2b32:	68a9      	ldr	r1, [r5, #8]
    2b34:	f021 f976 	bl	23e24 <ticker_ticks_diff_get>
					   _ticker_sync_context.ticks_begin);
	if (ticks_diff + ticks_diff/iteration >
	    HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot)) {
    2b38:	6869      	ldr	r1, [r5, #4]
	if (ticks_diff + ticks_diff/iteration >
    2b3a:	fbb0 f4f4 	udiv	r4, r0, r4
    2b3e:	4404      	add	r4, r0
	    HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot)) {
    2b40:	480a      	ldr	r0, [pc, #40]	; (2b6c <nrf_flash_sync_check_time_limit+0x44>)
    2b42:	a307      	add	r3, pc, #28	; (adr r3, 2b60 <nrf_flash_sync_check_time_limit+0x38>)
    2b44:	e9d3 2300 	ldrd	r2, r3, [r3]
    2b48:	fba1 0100 	umull	r0, r1, r1, r0
    2b4c:	f7fe fc94 	bl	1478 <__aeabi_uldivmod>
    2b50:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return true;
	}

	return false;
}
    2b54:	4284      	cmp	r4, r0
    2b56:	bf94      	ite	ls
    2b58:	2000      	movls	r0, #0
    2b5a:	2001      	movhi	r0, #1
    2b5c:	bd38      	pop	{r3, r4, r5, pc}
    2b5e:	bf00      	nop
    2b60:	1afd498d 	.word	0x1afd498d
    2b64:	00000007 	.word	0x00000007
    2b68:	20003c38 	.word	0x20003c38
    2b6c:	3b9aca00 	.word	0x3b9aca00

00002b70 <gen_onoff_status>:
/* Generic OnOff Client */

static int gen_onoff_status(struct bt_mesh_model *model,
			    struct bt_mesh_msg_ctx *ctx,
			    struct net_buf_simple *buf)
{
    2b70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	for (int i = 0; i < buf->len; i++) {
		//printk("%02x ", buf->data[i]); HARRISON COMMENTED
	}
	//printk("\n"); HARRISON COMMENTED
	
	uint8_t tid = net_buf_simple_pull_u8(buf);
    2b74:	4610      	mov	r0, r2
{
    2b76:	4614      	mov	r4, r2
    2b78:	460e      	mov	r6, r1
	uint8_t tid = net_buf_simple_pull_u8(buf);
    2b7a:	f022 f957 	bl	24e2c <net_buf_simple_pull_u8>
    2b7e:	4607      	mov	r7, r0
	uint8_t random = net_buf_simple_pull_u8(buf);
    2b80:	4620      	mov	r0, r4
    2b82:	f022 f953 	bl	24e2c <net_buf_simple_pull_u8>
	uint8_t address = net_buf_simple_pull_u8(buf);
    2b86:	4620      	mov	r0, r4
    2b88:	f022 f950 	bl	24e2c <net_buf_simple_pull_u8>
    2b8c:	4605      	mov	r5, r0
	uint8_t preamble = net_buf_simple_pull_u8(buf);
    2b8e:	4620      	mov	r0, r4
    2b90:	f022 f94c 	bl	24e2c <net_buf_simple_pull_u8>
	uint8_t type = net_buf_simple_pull_u8(buf);
    2b94:	4620      	mov	r0, r4
    2b96:	f022 f949 	bl	24e2c <net_buf_simple_pull_u8>
    2b9a:	4681      	mov	r9, r0
	uint8_t length = net_buf_simple_pull_u8(buf);
    2b9c:	4620      	mov	r0, r4
    2b9e:	f022 f945 	bl	24e2c <net_buf_simple_pull_u8>
	uint32_t time = net_buf_simple_pull_le32(buf);
    2ba2:	4620      	mov	r0, r4
    2ba4:	f022 f95c 	bl	24e60 <net_buf_simple_pull_le32>
    2ba8:	4680      	mov	r8, r0
	uint32_t data = net_buf_simple_pull_le32(buf);
    2baa:	4620      	mov	r0, r4
    2bac:	f022 f958 	bl	24e60 <net_buf_simple_pull_le32>
	printk("%d %d %d %f\n", address, time, type, *((float *)(&data)));
    2bb0:	f7fe fc0a 	bl	13c8 <__aeabi_f2d>
    2bb4:	464b      	mov	r3, r9
    2bb6:	e9cd 0100 	strd	r0, r1, [sp]
    2bba:	4642      	mov	r2, r8
    2bbc:	4809      	ldr	r0, [pc, #36]	; (2be4 <gen_onoff_status+0x74>)
    2bbe:	4629      	mov	r1, r5
    2bc0:	f019 fb82 	bl	1c2c8 <printk>
	//printk("Node: %d\tTime: %d\t Sensor: %d\tData: %f\n", address, time, type, *((float *)(&data))); HARRISON COMMENTED

	//printk("%02x %02x %02x %02x %02x %08x\n", tid, address, preamble, type, length, data);
	if (tid == onoff.tid && address != ctx->addr) {
    2bc4:	4b08      	ldr	r3, [pc, #32]	; (2be8 <gen_onoff_status+0x78>)
    2bc6:	785a      	ldrb	r2, [r3, #1]
    2bc8:	42ba      	cmp	r2, r7
    2bca:	d103      	bne.n	2bd4 <gen_onoff_status+0x64>
    2bcc:	88b2      	ldrh	r2, [r6, #4]
    2bce:	b2ad      	uxth	r5, r5
    2bd0:	42aa      	cmp	r2, r5
    2bd2:	d102      	bne.n	2bda <gen_onoff_status+0x6a>
		/* Duplicate */
		return 0;
	}

	onoff.tid = tid;
	onoff.src = ctx->addr;
    2bd4:	88b2      	ldrh	r2, [r6, #4]
	onoff.tid = tid;
    2bd6:	705f      	strb	r7, [r3, #1]
	onoff.src = ctx->addr;
    2bd8:	805a      	strh	r2, [r3, #2]

	//printk("no dupe %02x %02x %02x %02x %02x %08x\n", tid, address, preamble, type, length, data);

	return 0;
}
    2bda:	2000      	movs	r0, #0
    2bdc:	b003      	add	sp, #12
    2bde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2be2:	bf00      	nop
    2be4:	000271d8 	.word	0x000271d8
    2be8:	200011d0 	.word	0x200011d0

00002bec <gen_onoff_set_unack>:
{
    2bec:	b570      	push	{r4, r5, r6, lr}
	printk("gen_onoff_set_unack() %d %d\n", ctx->addr, addr);
    2bee:	4810      	ldr	r0, [pc, #64]	; (2c30 <gen_onoff_set_unack+0x44>)
{
    2bf0:	4614      	mov	r4, r2
    2bf2:	460d      	mov	r5, r1
	printk("gen_onoff_set_unack() %d %d\n", ctx->addr, addr);
    2bf4:	2202      	movs	r2, #2
    2bf6:	8889      	ldrh	r1, [r1, #4]
    2bf8:	f019 fb66 	bl	1c2c8 <printk>
	uint8_t tid = net_buf_simple_pull_u8(buf);
    2bfc:	4620      	mov	r0, r4
    2bfe:	f022 f915 	bl	24e2c <net_buf_simple_pull_u8>
    2c02:	4606      	mov	r6, r0
	uint8_t preamble = net_buf_simple_pull_u8(buf);
    2c04:	4620      	mov	r0, r4
    2c06:	f022 f911 	bl	24e2c <net_buf_simple_pull_u8>
	uint8_t type = net_buf_simple_pull_u8(buf);
    2c0a:	4620      	mov	r0, r4
    2c0c:	f022 f90e 	bl	24e2c <net_buf_simple_pull_u8>
	uint8_t length = net_buf_simple_pull_u8(buf);
    2c10:	4620      	mov	r0, r4
    2c12:	f022 f90b 	bl	24e2c <net_buf_simple_pull_u8>
	uint32_t data = net_buf_simple_pull_le32(buf);
    2c16:	4620      	mov	r0, r4
    2c18:	f022 f922 	bl	24e60 <net_buf_simple_pull_le32>
	if (tid == onoff.tid) {
    2c1c:	4b05      	ldr	r3, [pc, #20]	; (2c34 <gen_onoff_set_unack+0x48>)
    2c1e:	785a      	ldrb	r2, [r3, #1]
    2c20:	42b2      	cmp	r2, r6
	onoff.src = ctx->addr;
    2c22:	bf1e      	ittt	ne
    2c24:	88aa      	ldrhne	r2, [r5, #4]
	onoff.tid = tid;
    2c26:	705e      	strbne	r6, [r3, #1]
	onoff.src = ctx->addr;
    2c28:	805a      	strhne	r2, [r3, #2]
}
    2c2a:	2000      	movs	r0, #0
    2c2c:	bd70      	pop	{r4, r5, r6, pc}
    2c2e:	bf00      	nop
    2c30:	000271e5 	.word	0x000271e5
    2c34:	200011d0 	.word	0x200011d0

00002c38 <bt_ready>:
	printk("Provisioned and configured!\n");
	*/
}

static void bt_ready(int err)
{
    2c38:	b507      	push	{r0, r1, r2, lr}
	if (err) {
    2c3a:	4601      	mov	r1, r0
    2c3c:	b128      	cbz	r0, 2c4a <bt_ready+0x12>
		printk("Bluetooth init failed (err %d)\n", err);
    2c3e:	481a      	ldr	r0, [pc, #104]	; (2ca8 <bt_ready+0x70>)

	/* This will be a no-op if settings_load() loaded provisioning info */
	//bt_mesh_prov_enable(BT_MESH_PROV_ADV | BT_MESH_PROV_GATT);

	//printk("Mesh initialized\n"); HARRISON COMMENTED
}
    2c40:	b003      	add	sp, #12
    2c42:	f85d eb04 	ldr.w	lr, [sp], #4
		printk("Sensor key add failed (err: %d)\n", err);
    2c46:	f019 bb3f 	b.w	1c2c8 <printk>
	err = bt_mesh_init(&prov, &comp);
    2c4a:	4918      	ldr	r1, [pc, #96]	; (2cac <bt_ready+0x74>)
    2c4c:	4818      	ldr	r0, [pc, #96]	; (2cb0 <bt_ready+0x78>)
    2c4e:	f01d fb55 	bl	202fc <bt_mesh_init>
	if (err) {
    2c52:	4603      	mov	r3, r0
    2c54:	b110      	cbz	r0, 2c5c <bt_ready+0x24>
		printk("Initializing mesh failed (err %d)\n", err);
    2c56:	4601      	mov	r1, r0
    2c58:	4816      	ldr	r0, [pc, #88]	; (2cb4 <bt_ready+0x7c>)
    2c5a:	e7f1      	b.n	2c40 <bt_ready+0x8>
	err = bt_mesh_provision(net_key, net_idx, flags, iv_index, addr,
    2c5c:	4a16      	ldr	r2, [pc, #88]	; (2cb8 <bt_ready+0x80>)
    2c5e:	9201      	str	r2, [sp, #4]
    2c60:	2202      	movs	r2, #2
    2c62:	4601      	mov	r1, r0
    2c64:	9200      	str	r2, [sp, #0]
    2c66:	4602      	mov	r2, r0
    2c68:	4814      	ldr	r0, [pc, #80]	; (2cbc <bt_ready+0x84>)
    2c6a:	f007 f9d7 	bl	a01c <bt_mesh_provision>
	if (err == -EALREADY) {
    2c6e:	f110 0f78 	cmn.w	r0, #120	; 0x78
	err = bt_mesh_provision(net_key, net_idx, flags, iv_index, addr,
    2c72:	4601      	mov	r1, r0
	if (err == -EALREADY) {
    2c74:	d105      	bne.n	2c82 <bt_ready+0x4a>
		printk("Using stored settings\n");
    2c76:	4812      	ldr	r0, [pc, #72]	; (2cc0 <bt_ready+0x88>)
}
    2c78:	b003      	add	sp, #12
    2c7a:	f85d eb04 	ldr.w	lr, [sp], #4
		printk("Using stored settings\n");
    2c7e:	f019 bb23 	b.w	1c2c8 <printk>
	} else if (err) {
    2c82:	b108      	cbz	r0, 2c88 <bt_ready+0x50>
		printk("Provisioning failed (err %d)\n", err);
    2c84:	480f      	ldr	r0, [pc, #60]	; (2cc4 <bt_ready+0x8c>)
    2c86:	e7db      	b.n	2c40 <bt_ready+0x8>
	err = bt_mesh_app_key_add(app_idx, net_idx, app_key);
    2c88:	4a0f      	ldr	r2, [pc, #60]	; (2cc8 <bt_ready+0x90>)
    2c8a:	f01d fdad 	bl	207e8 <bt_mesh_app_key_add>
	if (err) {
    2c8e:	4601      	mov	r1, r0
    2c90:	b108      	cbz	r0, 2c96 <bt_ready+0x5e>
		printk("Sensor key add failed (err: %d)\n", err);
    2c92:	480e      	ldr	r0, [pc, #56]	; (2ccc <bt_ready+0x94>)
    2c94:	e7d4      	b.n	2c40 <bt_ready+0x8>
	models[2].keys[0] = app_idx;
    2c96:	4b0e      	ldr	r3, [pc, #56]	; (2cd0 <bt_ready+0x98>)
    2c98:	f8a3 0054 	strh.w	r0, [r3, #84]	; 0x54
	models[3].keys[0] = app_idx;
    2c9c:	f8a3 0078 	strh.w	r0, [r3, #120]	; 0x78
}
    2ca0:	b003      	add	sp, #12
    2ca2:	f85d fb04 	ldr.w	pc, [sp], #4
    2ca6:	bf00      	nop
    2ca8:	00027202 	.word	0x00027202
    2cac:	00026698 	.word	0x00026698
    2cb0:	00026708 	.word	0x00026708
    2cb4:	00027222 	.word	0x00027222
    2cb8:	00027340 	.word	0x00027340
    2cbc:	00027350 	.word	0x00027350
    2cc0:	00027245 	.word	0x00027245
    2cc4:	0002725c 	.word	0x0002725c
    2cc8:	00027330 	.word	0x00027330
    2ccc:	0002727a 	.word	0x0002727a
    2cd0:	20000294 	.word	0x20000294

00002cd4 <onoff_timeout>:
{
    2cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (onoff.transition_time) {
    2cd6:	4c10      	ldr	r4, [pc, #64]	; (2d18 <onoff_timeout+0x44>)
    2cd8:	6863      	ldr	r3, [r4, #4]
    2cda:	b1c3      	cbz	r3, 2d0e <onoff_timeout+0x3a>
		board_led_set(true);
    2cdc:	2001      	movs	r0, #1
    2cde:	f000 f9bb 	bl	3058 <board_led_set>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    2ce2:	2500      	movs	r5, #0
    2ce4:	6867      	ldr	r7, [r4, #4]
    2ce6:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    2cea:	f240 30e7 	movw	r0, #999	; 0x3e7
    2cee:	4629      	mov	r1, r5
    2cf0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2cf4:	2300      	movs	r3, #0
    2cf6:	fbe7 0106 	umlal	r0, r1, r7, r6
    2cfa:	f7fe fbbd 	bl	1478 <__aeabi_uldivmod>
    2cfe:	4602      	mov	r2, r0
    2d00:	460b      	mov	r3, r1
		k_work_reschedule(&onoff.work, K_MSEC(onoff.transition_time));
    2d02:	f104 0008 	add.w	r0, r4, #8
    2d06:	f018 fd07 	bl	1b718 <k_work_reschedule>
		onoff.transition_time = 0;
    2d0a:	6065      	str	r5, [r4, #4]
}
    2d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	board_led_set(onoff.val);
    2d0e:	7820      	ldrb	r0, [r4, #0]
}
    2d10:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	board_led_set(onoff.val);
    2d14:	f000 b9a0 	b.w	3058 <board_led_set>
    2d18:	200011d0 	.word	0x200011d0

00002d1c <onoff_status_send.isra.0>:
static int onoff_status_send(struct bt_mesh_model *model,
    2d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
}

static inline k_ticks_t k_work_delayable_remaining_get(
	const struct k_work_delayable *dwork)
{
	return z_timeout_remaining(&dwork->timeout);
    2d20:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 2de0 <onoff_status_send.isra.0+0xc4>
    2d24:	b088      	sub	sp, #32
    2d26:	4605      	mov	r5, r0
	printk("onoff_status_send()\n");
    2d28:	482e      	ldr	r0, [pc, #184]	; (2de4 <onoff_status_send.isra.0+0xc8>)
static int onoff_status_send(struct bt_mesh_model *model,
    2d2a:	460e      	mov	r6, r1
	printk("onoff_status_send()\n");
    2d2c:	f019 facc 	bl	1c2c8 <printk>
	BT_MESH_MODEL_BUF_DEFINE(buf, OP_ONOFF_STATUS, 3);
    2d30:	ab02      	add	r3, sp, #8
    2d32:	f44f 2210 	mov.w	r2, #589824	; 0x90000
	bt_mesh_model_msg_init(&buf, OP_ONOFF_STATUS);
    2d36:	f248 2104 	movw	r1, #33284	; 0x8204
    2d3a:	a805      	add	r0, sp, #20
	BT_MESH_MODEL_BUF_DEFINE(buf, OP_ONOFF_STATUS, 3);
    2d3c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    2d40:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&buf, OP_ONOFF_STATUS);
    2d42:	f01e fade 	bl	21302 <bt_mesh_model_msg_init>
    2d46:	f108 0018 	add.w	r0, r8, #24
    2d4a:	f023 f8f1 	bl	25f30 <z_timeout_remaining>
			return (uint32_t)((t * to_hz + off) / from_hz);
    2d4e:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
    2d52:	fba0 0407 	umull	r0, r4, r0, r7
    2d56:	0bc0      	lsrs	r0, r0, #15
    2d58:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	remaining = k_ticks_to_ms_floor32(
    2d5c:	f8d8 4004 	ldr.w	r4, [r8, #4]
	if (remaining) {
    2d60:	f898 1000 	ldrb.w	r1, [r8]
    2d64:	1824      	adds	r4, r4, r0
    2d66:	d022      	beq.n	2dae <onoff_status_send.isra.0+0x92>
		net_buf_simple_add_u8(&buf, !onoff.val);
    2d68:	f081 0101 	eor.w	r1, r1, #1
    2d6c:	a805      	add	r0, sp, #20
    2d6e:	f021 ffe1 	bl	24d34 <net_buf_simple_add_u8>
		net_buf_simple_add_u8(&buf, onoff.val);
    2d72:	f898 1000 	ldrb.w	r1, [r8]
    2d76:	a805      	add	r0, sp, #20
    2d78:	f021 ffdc 	bl	24d34 <net_buf_simple_add_u8>
	if (ms == SYS_FOREVER_MS) {
    2d7c:	1c63      	adds	r3, r4, #1
    2d7e:	d02c      	beq.n	2dda <onoff_status_send.isra.0+0xbe>
		if (ms >= BIT_MASK(6) * time_res[i]) {
    2d80:	f641 039b 	movw	r3, #6299	; 0x189b
    2d84:	429c      	cmp	r4, r3
    2d86:	d91f      	bls.n	2dc8 <onoff_status_send.isra.0+0xac>
    2d88:	f24f 6317 	movw	r3, #62999	; 0xf617
    2d8c:	429c      	cmp	r4, r3
    2d8e:	d91e      	bls.n	2dce <onoff_status_send.isra.0+0xb2>
    2d90:	4b15      	ldr	r3, [pc, #84]	; (2de8 <onoff_status_send.isra.0+0xcc>)
    2d92:	429c      	cmp	r4, r3
    2d94:	d91d      	bls.n	2dd2 <onoff_status_send.isra.0+0xb6>
    2d96:	4b15      	ldr	r3, [pc, #84]	; (2dec <onoff_status_send.isra.0+0xd0>)
    2d98:	429c      	cmp	r4, r3
    2d9a:	d81e      	bhi.n	2dda <onoff_status_send.isra.0+0xbe>
    2d9c:	4f14      	ldr	r7, [pc, #80]	; (2df0 <onoff_status_send.isra.0+0xd4>)
	for (int i = 0; i < ARRAY_SIZE(time_res); i++) {
    2d9e:	2303      	movs	r3, #3
		uint8_t steps = ceiling_fraction(ms, time_res[i]);
    2da0:	3c01      	subs	r4, #1
    2da2:	443c      	add	r4, r7
    2da4:	fbb4 f4f7 	udiv	r4, r4, r7
		return steps | (i << 6);
    2da8:	ea44 1483 	orr.w	r4, r4, r3, lsl #6
    2dac:	b2e1      	uxtb	r1, r4
		net_buf_simple_add_u8(&buf, onoff.val);
    2dae:	a805      	add	r0, sp, #20
    2db0:	f021 ffc0 	bl	24d34 <net_buf_simple_add_u8>
	return bt_mesh_model_send(model, ctx, &buf, NULL, NULL);
    2db4:	2300      	movs	r3, #0
    2db6:	9300      	str	r3, [sp, #0]
    2db8:	aa05      	add	r2, sp, #20
    2dba:	4631      	mov	r1, r6
    2dbc:	4628      	mov	r0, r5
    2dbe:	f01e fa49 	bl	21254 <bt_mesh_model_send>
}
    2dc2:	b008      	add	sp, #32
    2dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (int i = 0; i < ARRAY_SIZE(time_res); i++) {
    2dc8:	2300      	movs	r3, #0
		if (ms >= BIT_MASK(6) * time_res[i]) {
    2dca:	2764      	movs	r7, #100	; 0x64
    2dcc:	e7e8      	b.n	2da0 <onoff_status_send.isra.0+0x84>
	for (int i = 0; i < ARRAY_SIZE(time_res); i++) {
    2dce:	2301      	movs	r3, #1
    2dd0:	e7e6      	b.n	2da0 <onoff_status_send.isra.0+0x84>
    2dd2:	2302      	movs	r3, #2
		if (ms >= BIT_MASK(6) * time_res[i]) {
    2dd4:	f242 7710 	movw	r7, #10000	; 0x2710
    2dd8:	e7e2      	b.n	2da0 <onoff_status_send.isra.0+0x84>
		return 0x3f;
    2dda:	213f      	movs	r1, #63	; 0x3f
    2ddc:	e7e7      	b.n	2dae <onoff_status_send.isra.0+0x92>
    2dde:	bf00      	nop
    2de0:	200011d0 	.word	0x200011d0
    2de4:	0002729b 	.word	0x0002729b
    2de8:	00099cef 	.word	0x00099cef
    2dec:	0240c83f 	.word	0x0240c83f
    2df0:	000927c0 	.word	0x000927c0

00002df4 <gen_onoff_get>:
{
    2df4:	b538      	push	{r3, r4, r5, lr}
    2df6:	4604      	mov	r4, r0
    2df8:	460d      	mov	r5, r1
	printk("gen_onoff_get()\n");
    2dfa:	4804      	ldr	r0, [pc, #16]	; (2e0c <gen_onoff_get+0x18>)
    2dfc:	f019 fa64 	bl	1c2c8 <printk>
	onoff_status_send(model, ctx);
    2e00:	4620      	mov	r0, r4
    2e02:	4629      	mov	r1, r5
    2e04:	f7ff ff8a 	bl	2d1c <onoff_status_send.isra.0>
}
    2e08:	2000      	movs	r0, #0
    2e0a:	bd38      	pop	{r3, r4, r5, pc}
    2e0c:	000272b0 	.word	0x000272b0

00002e10 <gen_onoff_set>:
{
    2e10:	b570      	push	{r4, r5, r6, lr}
    2e12:	4604      	mov	r4, r0
    2e14:	460d      	mov	r5, r1
    2e16:	4616      	mov	r6, r2
	printk("gen_onoff_set()\n");
    2e18:	4806      	ldr	r0, [pc, #24]	; (2e34 <gen_onoff_set+0x24>)
    2e1a:	f019 fa55 	bl	1c2c8 <printk>
	(void)gen_onoff_set_unack(model, ctx, buf);
    2e1e:	4632      	mov	r2, r6
    2e20:	4629      	mov	r1, r5
    2e22:	4620      	mov	r0, r4
    2e24:	f7ff fee2 	bl	2bec <gen_onoff_set_unack>
	onoff_status_send(model, ctx);
    2e28:	4620      	mov	r0, r4
    2e2a:	4629      	mov	r1, r5
    2e2c:	f7ff ff76 	bl	2d1c <onoff_status_send.isra.0>
}
    2e30:	2000      	movs	r0, #0
    2e32:	bd70      	pop	{r4, r5, r6, pc}
    2e34:	000272c1 	.word	0x000272c1

00002e38 <gen_onoff_send.isra.0>:
static int gen_onoff_send(uint8_t device)
    2e38:	b5f0      	push	{r4, r5, r6, r7, lr}
		.app_idx = models[3].keys[0], /* Use the bound key */
    2e3a:	4f2f      	ldr	r7, [pc, #188]	; (2ef8 <gen_onoff_send.isra.0+0xc0>)
    2e3c:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
static int gen_onoff_send(uint8_t device)
    2e40:	b08f      	sub	sp, #60	; 0x3c
	struct bt_mesh_msg_ctx ctx = {
    2e42:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2e46:	2400      	movs	r4, #0
	if (ctx.app_idx == BT_MESH_KEY_UNUSED) {
    2e48:	429a      	cmp	r2, r3
	struct bt_mesh_msg_ctx ctx = {
    2e4a:	e9cd 4403 	strd	r4, r4, [sp, #12]
static int gen_onoff_send(uint8_t device)
    2e4e:	4606      	mov	r6, r0
	struct bt_mesh_msg_ctx ctx = {
    2e50:	f8cd 4013 	str.w	r4, [sp, #19]
    2e54:	f8ad 200e 	strh.w	r2, [sp, #14]
    2e58:	f8ad 3010 	strh.w	r3, [sp, #16]
    2e5c:	f88d 3017 	strb.w	r3, [sp, #23]
	if (ctx.app_idx == BT_MESH_KEY_UNUSED) {
    2e60:	d104      	bne.n	2e6c <gen_onoff_send.isra.0+0x34>
		printk("The Generic OnOff Client must be bound to a key before "
    2e62:	4826      	ldr	r0, [pc, #152]	; (2efc <gen_onoff_send.isra.0+0xc4>)
    2e64:	f019 fa30 	bl	1c2c8 <printk>
}
    2e68:	b00f      	add	sp, #60	; 0x3c
    2e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	BT_MESH_MODEL_BUF_DEFINE(buf, BT_MESH_MODEL_OP_SENSOR_GET, 3 + 3 + 4 + 1);
    2e6c:	ab09      	add	r3, sp, #36	; 0x24
    2e6e:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
	bt_mesh_model_msg_init(&buf, BT_MESH_MODEL_OP_SENSOR_GET);
    2e72:	a806      	add	r0, sp, #24
    2e74:	f248 2131 	movw	r1, #33329	; 0x8231
	BT_MESH_MODEL_BUF_DEFINE(buf, BT_MESH_MODEL_OP_SENSOR_GET, 3 + 3 + 4 + 1);
    2e78:	e9cd 2307 	strd	r2, r3, [sp, #28]
    2e7c:	9306      	str	r3, [sp, #24]
	bt_mesh_model_msg_init(&buf, BT_MESH_MODEL_OP_SENSOR_GET);
    2e7e:	f01e fa40 	bl	21302 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&buf, tid++);
    2e82:	4b1f      	ldr	r3, [pc, #124]	; (2f00 <gen_onoff_send.isra.0+0xc8>)
    2e84:	7819      	ldrb	r1, [r3, #0]
    2e86:	a806      	add	r0, sp, #24
    2e88:	1c4a      	adds	r2, r1, #1
    2e8a:	701a      	strb	r2, [r3, #0]
    2e8c:	f021 ff52 	bl	24d34 <net_buf_simple_add_u8>
	return z_impl_k_uptime_ticks();
    2e90:	f023 f88c 	bl	25fac <z_impl_k_uptime_ticks>
			return ((t * to_hz + off) / from_hz);
    2e94:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    2e98:	fb00 f105 	mul.w	r1, r0, r5
	net_buf_simple_add_u8(&buf, RANDOM_8);
    2e9c:	f3c1 31c7 	ubfx	r1, r1, #15, #8
    2ea0:	a806      	add	r0, sp, #24
    2ea2:	f021 ff47 	bl	24d34 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&buf, NODE_ADDR);
    2ea6:	2102      	movs	r1, #2
    2ea8:	a806      	add	r0, sp, #24
    2eaa:	f021 ff43 	bl	24d34 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&buf, PREAMBLE);
    2eae:	21af      	movs	r1, #175	; 0xaf
    2eb0:	a806      	add	r0, sp, #24
    2eb2:	f021 ff3f 	bl	24d34 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&buf, REQUEST);
    2eb6:	21ff      	movs	r1, #255	; 0xff
    2eb8:	a806      	add	r0, sp, #24
    2eba:	f021 ff3b 	bl	24d34 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&buf, 4);
    2ebe:	2104      	movs	r1, #4
    2ec0:	a806      	add	r0, sp, #24
    2ec2:	f021 ff37 	bl	24d34 <net_buf_simple_add_u8>
    2ec6:	f023 f871 	bl	25fac <z_impl_k_uptime_ticks>
    2eca:	fba0 2005 	umull	r2, r0, r0, r5
    2ece:	0bd2      	lsrs	r2, r2, #15
    2ed0:	fb05 0101 	mla	r1, r5, r1, r0
	net_buf_simple_add_le32(&buf, k_uptime_get_32());
    2ed4:	ea42 4141 	orr.w	r1, r2, r1, lsl #17
    2ed8:	a806      	add	r0, sp, #24
    2eda:	f021 ff54 	bl	24d86 <net_buf_simple_add_le32>
	net_buf_simple_add_u8(&buf, device);
    2ede:	4631      	mov	r1, r6
    2ee0:	a806      	add	r0, sp, #24
    2ee2:	f021 ff27 	bl	24d34 <net_buf_simple_add_u8>
	return bt_mesh_model_send(&models[3], &ctx, &buf, NULL, NULL);
    2ee6:	9400      	str	r4, [sp, #0]
    2ee8:	4623      	mov	r3, r4
    2eea:	aa06      	add	r2, sp, #24
    2eec:	a903      	add	r1, sp, #12
    2eee:	f107 006c 	add.w	r0, r7, #108	; 0x6c
    2ef2:	f01e f9af 	bl	21254 <bt_mesh_model_send>
    2ef6:	e7b7      	b.n	2e68 <gen_onoff_send.isra.0+0x30>
    2ef8:	20000294 	.word	0x20000294
    2efc:	000272d2 	.word	0x000272d2
    2f00:	20004000 	.word	0x20004000

00002f04 <main>:

void main(void)
{
    2f04:	b510      	push	{r4, lr}
	/* Enable the USB Driver */
    if (usb_enable(NULL)){
    2f06:	2000      	movs	r0, #0
    2f08:	f001 fbd0 	bl	46ac <usb_enable>
    2f0c:	2800      	cmp	r0, #0
    2f0e:	d135      	bne.n	2f7c <main+0x78>
		/* coverity[OVERRUN] */
		return (ssize_t) arch_syscall_invoke2(*(uintptr_t *)&buffer, *(uintptr_t *)&length, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
    2f10:	4c1b      	ldr	r4, [pc, #108]	; (2f80 <main+0x7c>)
    2f12:	2110      	movs	r1, #16
    2f14:	4620      	mov	r0, r4
    2f16:	f022 f8e1 	bl	250dc <z_impl_hwinfo_get_device_id>

	if (IS_ENABLED(CONFIG_HWINFO)) {
		err = hwinfo_get_device_id(dev_uuid, sizeof(dev_uuid));
	}

	if (err < 0) {
    2f1a:	2800      	cmp	r0, #0
		dev_uuid[0] = 0xdd;
    2f1c:	bfb8      	it	lt
    2f1e:	23dd      	movlt	r3, #221	; 0xdd
		dev_uuid[1] = 0xdd;
	}

	k_work_init(&button_work, button_pressed);
    2f20:	4918      	ldr	r1, [pc, #96]	; (2f84 <main+0x80>)
    2f22:	4819      	ldr	r0, [pc, #100]	; (2f88 <main+0x84>)
		dev_uuid[0] = 0xdd;
    2f24:	bfbc      	itt	lt
    2f26:	7023      	strblt	r3, [r4, #0]
		dev_uuid[1] = 0xdd;
    2f28:	7063      	strblt	r3, [r4, #1]
	k_work_init(&button_work, button_pressed);
    2f2a:	f022 fe7b 	bl	25c24 <k_work_init>

	err = board_init(&button_work);
    2f2e:	4816      	ldr	r0, [pc, #88]	; (2f88 <main+0x84>)
    2f30:	f000 f83c 	bl	2fac <board_init>
	if (err) {
    2f34:	4601      	mov	r1, r0
    2f36:	b120      	cbz	r0, 2f42 <main+0x3e>
		}

		//printk("tick\n"); HARRISON COMMENTED
		k_sleep(K_MSEC(5000));
	}
    2f38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Board init failed (err: %d)\n", err);
    2f3c:	4813      	ldr	r0, [pc, #76]	; (2f8c <main+0x88>)
    2f3e:	f019 b9c3 	b.w	1c2c8 <printk>
	k_work_init_delayable(&onoff.work, onoff_timeout);
    2f42:	4913      	ldr	r1, [pc, #76]	; (2f90 <main+0x8c>)
    2f44:	4813      	ldr	r0, [pc, #76]	; (2f94 <main+0x90>)
    2f46:	f022 fea3 	bl	25c90 <k_work_init_delayable>
	err = bt_enable(bt_ready);
    2f4a:	4813      	ldr	r0, [pc, #76]	; (2f98 <main+0x94>)
    2f4c:	f003 ff9e 	bl	6e8c <bt_enable>
	if (err) {
    2f50:	4601      	mov	r1, r0
    2f52:	b110      	cbz	r0, 2f5a <main+0x56>
		printk("Bluetooth init failed (err %d)\n", err);
    2f54:	4811      	ldr	r0, [pc, #68]	; (2f9c <main+0x98>)
    2f56:	f019 f9b7 	bl	1c2c8 <printk>
{
    2f5a:	2401      	movs	r4, #1
		if (bt_mesh_is_provisioned()) {
    2f5c:	f007 f81c 	bl	9f98 <bt_mesh_is_provisioned>
    2f60:	b118      	cbz	r0, 2f6a <main+0x66>
			(void)gen_onoff_send(device);
    2f62:	b2e0      	uxtb	r0, r4
    2f64:	f7ff ff68 	bl	2e38 <gen_onoff_send.isra.0>
			device++;
    2f68:	3401      	adds	r4, #1
			device = 1;
    2f6a:	2c0b      	cmp	r4, #11
    2f6c:	bfa8      	it	ge
    2f6e:	2401      	movge	r4, #1
	return z_impl_k_sleep(timeout);
    2f70:	2100      	movs	r1, #0
    2f72:	f44f 3020 	mov.w	r0, #163840	; 0x28000
    2f76:	f018 feab 	bl	1bcd0 <z_impl_k_sleep>
	while(1) {
    2f7a:	e7ef      	b.n	2f5c <main+0x58>
    2f7c:	bd10      	pop	{r4, pc}
    2f7e:	bf00      	nop
    2f80:	20003ff0 	.word	0x20003ff0
    2f84:	0001c257 	.word	0x0001c257
    2f88:	20002090 	.word	0x20002090
    2f8c:	00027313 	.word	0x00027313
    2f90:	00002cd5 	.word	0x00002cd5
    2f94:	200011d8 	.word	0x200011d8
    2f98:	00002c39 	.word	0x00002c39
    2f9c:	00027202 	.word	0x00027202

00002fa0 <button_cb>:
static struct k_work *button_work;

static void button_cb(const struct device *port, struct gpio_callback *cb,
		      gpio_port_pins_t pins)
{
	k_work_submit(button_work);
    2fa0:	4b01      	ldr	r3, [pc, #4]	; (2fa8 <button_cb+0x8>)
    2fa2:	6818      	ldr	r0, [r3, #0]
    2fa4:	f018 bb1c 	b.w	1b5e0 <k_work_submit>
    2fa8:	200020a0 	.word	0x200020a0

00002fac <board_init>:

	return 0;
}

int board_init(struct k_work *button_pressed)
{
    2fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2fb0:	4607      	mov	r7, r0
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    2fb2:	4c24      	ldr	r4, [pc, #144]	; (3044 <CONFIG_USB_DEVICE_VID+0x61>)
    2fb4:	4620      	mov	r0, r4
    2fb6:	f022 fbe7 	bl	25788 <z_device_is_ready>
	if (!device_is_ready(led_dev)) {
    2fba:	2800      	cmp	r0, #0
    2fbc:	d03f      	beq.n	303e <CONFIG_USB_DEVICE_VID+0x5b>
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
    2fbe:	6922      	ldr	r2, [r4, #16]
	const struct gpio_driver_api *api =
    2fc0:	68a1      	ldr	r1, [r4, #8]
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
    2fc2:	6813      	ldr	r3, [r2, #0]
    2fc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2fc8:	6013      	str	r3, [r2, #0]
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
	}

	return api->pin_configure(port, pin, flags);
    2fca:	4620      	mov	r0, r4
    2fcc:	680b      	ldr	r3, [r1, #0]
    2fce:	f640 2201 	movw	r2, #2561	; 0xa01
    2fd2:	2106      	movs	r1, #6
    2fd4:	4798      	blx	r3
	if (err) {
    2fd6:	4604      	mov	r4, r0
    2fd8:	bb70      	cbnz	r0, 3038 <CONFIG_USB_DEVICE_VID+0x55>
	const struct gpio_driver_api *api =
    2fda:	4d1b      	ldr	r5, [pc, #108]	; (3048 <CONFIG_USB_DEVICE_VID+0x65>)
	struct gpio_driver_data *data =
    2fdc:	f8d5 8010 	ldr.w	r8, [r5, #16]
	const struct gpio_driver_api *api =
    2fe0:	68ae      	ldr	r6, [r5, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    2fe2:	f8d8 3000 	ldr.w	r3, [r8]
    2fe6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2fea:	f8c8 3000 	str.w	r3, [r8]
	return api->pin_configure(port, pin, flags);
    2fee:	f240 1211 	movw	r2, #273	; 0x111
    2ff2:	6833      	ldr	r3, [r6, #0]
    2ff4:	2106      	movs	r1, #6
    2ff6:	4628      	mov	r0, r5
    2ff8:	4798      	blx	r3
	if (err) {
    2ffa:	4604      	mov	r4, r0
    2ffc:	b9e0      	cbnz	r0, 3038 <CONFIG_USB_DEVICE_VID+0x55>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    2ffe:	f8d8 3000 	ldr.w	r3, [r8]
	return api->pin_interrupt_configure(port, pin, mode, trig);
    3002:	69b4      	ldr	r4, [r6, #24]
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
    3004:	f013 0f40 	tst.w	r3, #64	; 0x40
	return api->pin_interrupt_configure(port, pin, mode, trig);
    3008:	bf0c      	ite	eq
    300a:	f44f 2380 	moveq.w	r3, #262144	; 0x40000
    300e:	f44f 3300 	movne.w	r3, #131072	; 0x20000
    3012:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
    3016:	2106      	movs	r1, #6
    3018:	4628      	mov	r0, r5
    301a:	47a0      	blx	r4
	if (err) {
    301c:	4604      	mov	r4, r0
    301e:	b958      	cbnz	r0, 3038 <CONFIG_USB_DEVICE_VID+0x55>
	button_work = button_pressed;
    3020:	4b0a      	ldr	r3, [pc, #40]	; (304c <CONFIG_USB_DEVICE_VID+0x69>)
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    3022:	490b      	ldr	r1, [pc, #44]	; (3050 <CONFIG_USB_DEVICE_VID+0x6d>)
    3024:	601f      	str	r7, [r3, #0]
    3026:	4b0b      	ldr	r3, [pc, #44]	; (3054 <CONFIG_USB_DEVICE_VID+0x71>)
    3028:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    302a:	2340      	movs	r3, #64	; 0x40
    302c:	608b      	str	r3, [r1, #8]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
    302e:	69f3      	ldr	r3, [r6, #28]
    3030:	b113      	cbz	r3, 3038 <CONFIG_USB_DEVICE_VID+0x55>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    3032:	2201      	movs	r2, #1
    3034:	4628      	mov	r0, r5
    3036:	4798      	blx	r3
	if (err) {
		return err;
	}

	return button_init(button_pressed);
}
    3038:	4620      	mov	r0, r4
    303a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENODEV;
    303e:	f06f 0412 	mvn.w	r4, #18
    3042:	e7f9      	b.n	3038 <CONFIG_USB_DEVICE_VID+0x55>
    3044:	00026368 	.word	0x00026368
    3048:	00026380 	.word	0x00026380
    304c:	200020a0 	.word	0x200020a0
    3050:	200020a4 	.word	0x200020a4
    3054:	00002fa1 	.word	0x00002fa1

00003058 <board_led_set>:
	const struct gpio_driver_data *const data =
    3058:	4b07      	ldr	r3, [pc, #28]	; (3078 <board_led_set+0x20>)
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    305a:	691a      	ldr	r2, [r3, #16]
    305c:	6812      	ldr	r2, [r2, #0]
    305e:	0652      	lsls	r2, r2, #25
		value = (value != 0) ? 0 : 1;
    3060:	bf48      	it	mi
    3062:	f080 0001 	eormi.w	r0, r0, #1
	if (value != 0)	{
    3066:	b120      	cbz	r0, 3072 <board_led_set+0x1a>
	return api->port_set_bits_raw(port, pins);
    3068:	689b      	ldr	r3, [r3, #8]
    306a:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    306c:	4802      	ldr	r0, [pc, #8]	; (3078 <board_led_set+0x20>)
    306e:	2140      	movs	r1, #64	; 0x40
    3070:	4718      	bx	r3
    3072:	689b      	ldr	r3, [r3, #8]
    3074:	691b      	ldr	r3, [r3, #16]
    3076:	e7f9      	b.n	306c <board_led_set+0x14>
    3078:	00026368 	.word	0x00026368

0000307c <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    307c:	680b      	ldr	r3, [r1, #0]
    307e:	3301      	adds	r3, #1
    3080:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    3082:	4b01      	ldr	r3, [pc, #4]	; (3088 <char_out+0xc>)
    3084:	681b      	ldr	r3, [r3, #0]
    3086:	4718      	bx	r3
    3088:	20000324 	.word	0x20000324

0000308c <__printk_hook_install>:
	_char_out = fn;
    308c:	4b01      	ldr	r3, [pc, #4]	; (3094 <__printk_hook_install+0x8>)
    308e:	6018      	str	r0, [r3, #0]
}
    3090:	4770      	bx	lr
    3092:	bf00      	nop
    3094:	20000324 	.word	0x20000324

00003098 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
    3098:	b507      	push	{r0, r1, r2, lr}
    309a:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
    309c:	2100      	movs	r1, #0
{
    309e:	4602      	mov	r2, r0
		struct out_context ctx = { 0 };
    30a0:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
    30a2:	4803      	ldr	r0, [pc, #12]	; (30b0 <vprintk+0x18>)
    30a4:	a901      	add	r1, sp, #4
    30a6:	f000 f8e5 	bl	3274 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    30aa:	b003      	add	sp, #12
    30ac:	f85d fb04 	ldr.w	pc, [sp], #4
    30b0:	0000307d 	.word	0x0000307d

000030b4 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    30b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    30b8:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    30bc:	f019 0808 	ands.w	r8, r9, #8
{
    30c0:	4604      	mov	r4, r0
    30c2:	4693      	mov	fp, r2
	if (processing) {
    30c4:	d00d      	beq.n	30e2 <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
    30c6:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    30c8:	bf0c      	ite	eq
    30ca:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    30ce:	f049 0920 	orrne.w	r9, r9, #32
    30d2:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    30d6:	f38b 8811 	msr	BASEPRI, fp
    30da:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    30de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    30e2:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    30e6:	2902      	cmp	r1, #2
    30e8:	d107      	bne.n	30fa <process_event+0x46>
			evt = process_recheck(mgr);
    30ea:	4620      	mov	r0, r4
    30ec:	f019 f913 	bl	1c316 <process_recheck>
		if (evt == EVT_NOP) {
    30f0:	2800      	cmp	r0, #0
    30f2:	d0f0      	beq.n	30d6 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    30f4:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    30f6:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
    30f8:	d14e      	bne.n	3198 <process_event+0xe4>
			res = mgr->last_res;
    30fa:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    30fc:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    30fe:	2f00      	cmp	r7, #0
    3100:	da15      	bge.n	312e <process_event+0x7a>
		*clients = mgr->clients;
    3102:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    3104:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    3108:	e9c4 8800 	strd	r8, r8, [r4]
    310c:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    3110:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    3112:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    3114:	8b21      	ldrh	r1, [r4, #24]
    3116:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    311a:	45ca      	cmp	sl, r9
    311c:	d002      	beq.n	3124 <process_event+0x70>
		if (do_monitors
    311e:	68a3      	ldr	r3, [r4, #8]
    3120:	2b00      	cmp	r3, #0
    3122:	d15a      	bne.n	31da <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
    3124:	b90d      	cbnz	r5, 312a <process_event+0x76>
		    || (transit != NULL)) {
    3126:	2e00      	cmp	r6, #0
    3128:	d071      	beq.n	320e <process_event+0x15a>
    312a:	2300      	movs	r3, #0
    312c:	e056      	b.n	31dc <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    312e:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    3132:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    3134:	2a01      	cmp	r2, #1
    3136:	d81e      	bhi.n	3176 <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    3138:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    313c:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    313e:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    3140:	b289      	uxth	r1, r1
    3142:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    3146:	d10a      	bne.n	315e <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    3148:	b13d      	cbz	r5, 315a <process_event+0xa6>
    314a:	8b63      	ldrh	r3, [r4, #26]
    314c:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    314e:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
    3150:	3301      	adds	r3, #1
    3152:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    3154:	2a00      	cmp	r2, #0
    3156:	d1fa      	bne.n	314e <process_event+0x9a>
    3158:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    315a:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    315e:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    3160:	4620      	mov	r0, r4
    3162:	f019 f8d8 	bl	1c316 <process_recheck>
    3166:	4606      	mov	r6, r0
    3168:	2800      	cmp	r0, #0
    316a:	d0d3      	beq.n	3114 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    316c:	8b23      	ldrh	r3, [r4, #24]
    316e:	f043 0320 	orr.w	r3, r3, #32
    3172:	8323      	strh	r3, [r4, #24]
    3174:	e7cd      	b.n	3112 <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
    3176:	2b04      	cmp	r3, #4
    3178:	d10c      	bne.n	3194 <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    317a:	f021 0107 	bic.w	r1, r1, #7
    317e:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    3180:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    3182:	4620      	mov	r0, r4
    3184:	f019 f8c7 	bl	1c316 <process_recheck>
    3188:	4605      	mov	r5, r0
    318a:	2800      	cmp	r0, #0
    318c:	d0c1      	beq.n	3112 <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    318e:	f041 0120 	orr.w	r1, r1, #32
    3192:	8321      	strh	r1, [r4, #24]
    3194:	2500      	movs	r5, #0
    3196:	e7bc      	b.n	3112 <process_event+0x5e>
		} else if (evt == EVT_START) {
    3198:	2803      	cmp	r0, #3
    319a:	d109      	bne.n	31b0 <process_event+0xfc>
			transit = mgr->transitions->start;
    319c:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    319e:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    31a2:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    31a4:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    31a8:	8323      	strh	r3, [r4, #24]
}
    31aa:	2500      	movs	r5, #0
		res = 0;
    31ac:	462f      	mov	r7, r5
    31ae:	e7b1      	b.n	3114 <process_event+0x60>
		} else if (evt == EVT_STOP) {
    31b0:	2804      	cmp	r0, #4
    31b2:	d106      	bne.n	31c2 <process_event+0x10e>
			transit = mgr->transitions->stop;
    31b4:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    31b6:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    31ba:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    31bc:	f043 0304 	orr.w	r3, r3, #4
    31c0:	e7f2      	b.n	31a8 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
    31c2:	2805      	cmp	r0, #5
    31c4:	d106      	bne.n	31d4 <process_event+0x120>
			transit = mgr->transitions->reset;
    31c6:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    31c8:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    31cc:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    31ce:	f043 0305 	orr.w	r3, r3, #5
    31d2:	e7e9      	b.n	31a8 <process_event+0xf4>
    31d4:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    31d6:	462e      	mov	r6, r5
    31d8:	e7e8      	b.n	31ac <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
    31da:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    31dc:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    31e0:	8321      	strh	r1, [r4, #24]
    31e2:	f38b 8811 	msr	BASEPRI, fp
    31e6:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    31ea:	b9fb      	cbnz	r3, 322c <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
    31ec:	bb85      	cbnz	r5, 3250 <process_event+0x19c>
			if (transit != NULL) {
    31ee:	b116      	cbz	r6, 31f6 <process_event+0x142>
				transit(mgr, transition_complete);
    31f0:	491f      	ldr	r1, [pc, #124]	; (3270 <process_event+0x1bc>)
    31f2:	4620      	mov	r0, r4
    31f4:	47b0      	blx	r6
	__asm__ volatile(
    31f6:	f04f 0320 	mov.w	r3, #32
    31fa:	f3ef 8b11 	mrs	fp, BASEPRI
    31fe:	f383 8812 	msr	BASEPRI_MAX, r3
    3202:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    3206:	8b23      	ldrh	r3, [r4, #24]
    3208:	f023 0308 	bic.w	r3, r3, #8
    320c:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    320e:	8b23      	ldrh	r3, [r4, #24]
    3210:	06da      	lsls	r2, r3, #27
    3212:	d525      	bpl.n	3260 <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    3214:	f023 0310 	bic.w	r3, r3, #16
    3218:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    321a:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    321c:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    3220:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    3224:	2900      	cmp	r1, #0
    3226:	f47f af5e 	bne.w	30e6 <process_event+0x32>
out:
    322a:	e754      	b.n	30d6 <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    322c:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    322e:	2900      	cmp	r1, #0
    3230:	d0dc      	beq.n	31ec <process_event+0x138>
	return node->next;
    3232:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
    3236:	f8d1 b004 	ldr.w	fp, [r1, #4]
    323a:	463b      	mov	r3, r7
    323c:	4652      	mov	r2, sl
    323e:	4620      	mov	r0, r4
    3240:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    3242:	f1b9 0f00 	cmp.w	r9, #0
    3246:	d0d1      	beq.n	31ec <process_event+0x138>
    3248:	4649      	mov	r1, r9
    324a:	f8d9 9000 	ldr.w	r9, [r9]
    324e:	e7f2      	b.n	3236 <process_event+0x182>
    3250:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    3252:	463b      	mov	r3, r7
    3254:	4652      	mov	r2, sl
    3256:	4620      	mov	r0, r4
    3258:	682d      	ldr	r5, [r5, #0]
    325a:	f019 f878 	bl	1c34e <notify_one>
    325e:	e7c5      	b.n	31ec <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    3260:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    3264:	bf1e      	ittt	ne
    3266:	f023 0320 	bicne.w	r3, r3, #32
    326a:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    326c:	2102      	movne	r1, #2
    326e:	e7d5      	b.n	321c <process_event+0x168>
    3270:	0001c37b 	.word	0x0001c37b

00003274 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    3274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3278:	4681      	mov	r9, r0
    327a:	b09b      	sub	sp, #108	; 0x6c
    327c:	468a      	mov	sl, r1
    327e:	4615      	mov	r5, r2
    3280:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    3282:	2600      	movs	r6, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    3284:	7828      	ldrb	r0, [r5, #0]
    3286:	b910      	cbnz	r0, 328e <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    3288:	4630      	mov	r0, r6
    328a:	f000 bdee 	b.w	3e6a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3d2>
			OUTC(*fp++);
    328e:	1c6b      	adds	r3, r5, #1
		if (*fp != '%') {
    3290:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    3292:	9302      	str	r3, [sp, #8]
		if (*fp != '%') {
    3294:	d006      	beq.n	32a4 <cbvprintf+0x30>
			OUTC(*fp++);
    3296:	4651      	mov	r1, sl
			OUTC('%');
    3298:	47c8      	blx	r9
    329a:	2800      	cmp	r0, #0
    329c:	f2c0 85e5 	blt.w	3e6a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3d2>
    32a0:	3601      	adds	r6, #1
		if (bps == NULL) {
    32a2:	e24c      	b.n	373e <cbvprintf+0x4ca>
		} state = {
    32a4:	2218      	movs	r2, #24
    32a6:	2100      	movs	r1, #0
    32a8:	a80c      	add	r0, sp, #48	; 0x30
    32aa:	f01a fecd 	bl	1e048 <memset>
	if (*sp == '%') {
    32ae:	786b      	ldrb	r3, [r5, #1]
    32b0:	2b25      	cmp	r3, #37	; 0x25
    32b2:	d07c      	beq.n	33ae <cbvprintf+0x13a>
    32b4:	2200      	movs	r2, #0
    32b6:	1c68      	adds	r0, r5, #1
    32b8:	4696      	mov	lr, r2
    32ba:	4690      	mov	r8, r2
    32bc:	4694      	mov	ip, r2
    32be:	4617      	mov	r7, r2
    32c0:	4601      	mov	r1, r0
		switch (*sp) {
    32c2:	f810 3b01 	ldrb.w	r3, [r0], #1
    32c6:	2b2b      	cmp	r3, #43	; 0x2b
    32c8:	f000 80a0 	beq.w	340c <cbvprintf+0x198>
    32cc:	f200 8097 	bhi.w	33fe <cbvprintf+0x18a>
    32d0:	2b20      	cmp	r3, #32
    32d2:	f000 809e 	beq.w	3412 <cbvprintf+0x19e>
    32d6:	2b23      	cmp	r3, #35	; 0x23
    32d8:	f000 809e 	beq.w	3418 <cbvprintf+0x1a4>
    32dc:	b12f      	cbz	r7, 32ea <cbvprintf+0x76>
    32de:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    32e2:	f040 0004 	orr.w	r0, r0, #4
    32e6:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
    32ea:	f1bc 0f00 	cmp.w	ip, #0
    32ee:	d005      	beq.n	32fc <cbvprintf+0x88>
    32f0:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    32f4:	f040 0008 	orr.w	r0, r0, #8
    32f8:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
    32fc:	f1b8 0f00 	cmp.w	r8, #0
    3300:	d005      	beq.n	330e <cbvprintf+0x9a>
    3302:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    3306:	f040 0010 	orr.w	r0, r0, #16
    330a:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
    330e:	f1be 0f00 	cmp.w	lr, #0
    3312:	d005      	beq.n	3320 <cbvprintf+0xac>
    3314:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    3318:	f040 0020 	orr.w	r0, r0, #32
    331c:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
    3320:	b12a      	cbz	r2, 332e <cbvprintf+0xba>
    3322:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    3326:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    332a:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	if (conv->flag_zero && conv->flag_dash) {
    332e:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    3332:	f002 0044 	and.w	r0, r2, #68	; 0x44
    3336:	2844      	cmp	r0, #68	; 0x44
    3338:	d103      	bne.n	3342 <cbvprintf+0xce>
		conv->flag_zero = false;
    333a:	f36f 1286 	bfc	r2, #6, #1
    333e:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	conv->width_present = true;
    3342:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
	if (*sp == '*') {
    3346:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
    3348:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    334c:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	if (*sp == '*') {
    3350:	d17e      	bne.n	3450 <cbvprintf+0x1dc>
		conv->width_star = true;
    3352:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    3356:	f042 0201 	orr.w	r2, r2, #1
			++sp;
    335a:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    335c:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	conv->prec_present = (*sp == '.');
    3360:	781a      	ldrb	r2, [r3, #0]
    3362:	2a2e      	cmp	r2, #46	; 0x2e
    3364:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    3368:	bf0c      	ite	eq
    336a:	2101      	moveq	r1, #1
    336c:	2100      	movne	r1, #0
    336e:	f361 0241 	bfi	r2, r1, #1, #1
    3372:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	if (!conv->prec_present) {
    3376:	d177      	bne.n	3468 <cbvprintf+0x1f4>
	if (*sp == '*') {
    3378:	785a      	ldrb	r2, [r3, #1]
    337a:	2a2a      	cmp	r2, #42	; 0x2a
    337c:	d06d      	beq.n	345a <cbvprintf+0x1e6>
	++sp;
    337e:	3301      	adds	r3, #1
	size_t val = 0;
    3380:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    3382:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    3386:	4618      	mov	r0, r3
    3388:	f810 2b01 	ldrb.w	r2, [r0], #1
    338c:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    3390:	2f09      	cmp	r7, #9
    3392:	f240 80ab 	bls.w	34ec <cbvprintf+0x278>
	conv->unsupported |= ((conv->prec_value < 0)
    3396:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
	conv->prec_value = prec;
    339a:	9110      	str	r1, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
    339c:	f3c2 0040 	ubfx	r0, r2, #1, #1
    33a0:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    33a4:	f361 0241 	bfi	r2, r1, #1, #1
    33a8:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
    33ac:	e05c      	b.n	3468 <cbvprintf+0x1f4>
		conv->specifier = *sp++;
    33ae:	1caa      	adds	r2, r5, #2
    33b0:	9202      	str	r2, [sp, #8]
    33b2:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
    33b6:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    33ba:	07df      	lsls	r7, r3, #31
    33bc:	f140 8173 	bpl.w	36a6 <cbvprintf+0x432>
			width = va_arg(ap, int);
    33c0:	f854 bb04 	ldr.w	fp, [r4], #4
			if (width < 0) {
    33c4:	f1bb 0f00 	cmp.w	fp, #0
    33c8:	da07      	bge.n	33da <cbvprintf+0x166>
				conv->flag_dash = true;
    33ca:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    33ce:	f042 0204 	orr.w	r2, r2, #4
    33d2:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				width = -width;
    33d6:	f1cb 0b00 	rsb	fp, fp, #0
		if (conv->prec_star) {
    33da:	0758      	lsls	r0, r3, #29
    33dc:	f140 816c 	bpl.w	36b8 <cbvprintf+0x444>
			int arg = va_arg(ap, int);
    33e0:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    33e4:	f1b8 0f00 	cmp.w	r8, #0
    33e8:	f280 816b 	bge.w	36c2 <cbvprintf+0x44e>
				conv->prec_present = false;
    33ec:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    33f0:	f36f 0341 	bfc	r3, #1, #1
    33f4:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
    33f8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    33fc:	e161      	b.n	36c2 <cbvprintf+0x44e>
		switch (*sp) {
    33fe:	2b2d      	cmp	r3, #45	; 0x2d
    3400:	d00d      	beq.n	341e <cbvprintf+0x1aa>
    3402:	2b30      	cmp	r3, #48	; 0x30
    3404:	f47f af6a 	bne.w	32dc <cbvprintf+0x68>
			conv->flag_zero = true;
    3408:	2201      	movs	r2, #1
	} while (loop);
    340a:	e759      	b.n	32c0 <cbvprintf+0x4c>
			conv->flag_plus = true;
    340c:	f04f 0c01 	mov.w	ip, #1
    3410:	e756      	b.n	32c0 <cbvprintf+0x4c>
			conv->flag_space = true;
    3412:	f04f 0801 	mov.w	r8, #1
    3416:	e753      	b.n	32c0 <cbvprintf+0x4c>
			conv->flag_hash = true;
    3418:	f04f 0e01 	mov.w	lr, #1
    341c:	e750      	b.n	32c0 <cbvprintf+0x4c>
		switch (*sp) {
    341e:	2701      	movs	r7, #1
    3420:	e74e      	b.n	32c0 <cbvprintf+0x4c>
		val = 10U * val + *sp++ - '0';
    3422:	fb0c 7202 	mla	r2, ip, r2, r7
    3426:	3a30      	subs	r2, #48	; 0x30
    3428:	4603      	mov	r3, r0
    342a:	4618      	mov	r0, r3
    342c:	f810 7b01 	ldrb.w	r7, [r0], #1
    3430:	f1a7 0e30 	sub.w	lr, r7, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    3434:	f1be 0f09 	cmp.w	lr, #9
    3438:	d9f3      	bls.n	3422 <cbvprintf+0x1ae>
	if (sp != wp) {
    343a:	4299      	cmp	r1, r3
    343c:	d090      	beq.n	3360 <cbvprintf+0xec>
		conv->unsupported |= ((conv->width_value < 0)
    343e:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		conv->width_value = width;
    3442:	920f      	str	r2, [sp, #60]	; 0x3c
				      || (width != (size_t)conv->width_value));
    3444:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    3446:	f362 0141 	bfi	r1, r2, #1, #1
    344a:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
    344e:	e787      	b.n	3360 <cbvprintf+0xec>
    3450:	460b      	mov	r3, r1
	size_t val = 0;
    3452:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    3454:	f04f 0c0a 	mov.w	ip, #10
    3458:	e7e7      	b.n	342a <cbvprintf+0x1b6>
		conv->prec_star = true;
    345a:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    345e:	f042 0204 	orr.w	r2, r2, #4
    3462:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		return ++sp;
    3466:	3302      	adds	r3, #2
	switch (*sp) {
    3468:	4619      	mov	r1, r3
    346a:	f811 2b01 	ldrb.w	r2, [r1], #1
    346e:	2a6c      	cmp	r2, #108	; 0x6c
    3470:	d05c      	beq.n	352c <cbvprintf+0x2b8>
    3472:	d840      	bhi.n	34f6 <cbvprintf+0x282>
    3474:	2a68      	cmp	r2, #104	; 0x68
    3476:	d046      	beq.n	3506 <cbvprintf+0x292>
    3478:	2a6a      	cmp	r2, #106	; 0x6a
    347a:	d061      	beq.n	3540 <cbvprintf+0x2cc>
    347c:	2a4c      	cmp	r2, #76	; 0x4c
    347e:	d067      	beq.n	3550 <cbvprintf+0x2dc>
    3480:	4619      	mov	r1, r3
	conv->specifier = *sp++;
    3482:	460b      	mov	r3, r1
    3484:	f813 2b01 	ldrb.w	r2, [r3], #1
    3488:	9302      	str	r3, [sp, #8]
	switch (conv->specifier) {
    348a:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
    348c:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	switch (conv->specifier) {
    3490:	f200 80df 	bhi.w	3652 <cbvprintf+0x3de>
    3494:	2a57      	cmp	r2, #87	; 0x57
    3496:	d868      	bhi.n	356a <cbvprintf+0x2f6>
    3498:	2a41      	cmp	r2, #65	; 0x41
    349a:	d004      	beq.n	34a6 <cbvprintf+0x232>
    349c:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
    34a0:	2b02      	cmp	r3, #2
    34a2:	f200 80d6 	bhi.w	3652 <cbvprintf+0x3de>
		conv->specifier_cat = SPECIFIER_FP;
    34a6:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
			|| (conv->specifier == 'A');
    34aa:	f002 02df 	and.w	r2, r2, #223	; 0xdf
		conv->specifier_cat = SPECIFIER_FP;
    34ae:	2104      	movs	r1, #4
			|| (conv->specifier == 'A');
    34b0:	f1a2 0841 	sub.w	r8, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
    34b4:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
    34b8:	f1d8 0200 	rsbs	r2, r8, #0
		conv->specifier_a = (conv->specifier == 'a')
    34bc:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
		conv->specifier_cat = SPECIFIER_FP;
    34c0:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			|| (conv->specifier == 'A');
    34c4:	eb42 0208 	adc.w	r2, r2, r8
		conv->specifier_a = (conv->specifier == 'a')
    34c8:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
    34cc:	060a      	lsls	r2, r1, #24
		conv->specifier_a = (conv->specifier == 'a')
    34ce:	f88d 1039 	strb.w	r1, [sp, #57]	; 0x39
		if (conv->specifier_a
    34d2:	b2cb      	uxtb	r3, r1
    34d4:	f100 80e5 	bmi.w	36a2 <cbvprintf+0x42e>
		if (conv->length_mod == LENGTH_L) {
    34d8:	f003 0278 	and.w	r2, r3, #120	; 0x78
    34dc:	2a18      	cmp	r2, #24
    34de:	f040 80b5 	bne.w	364c <cbvprintf+0x3d8>
			conv->length_mod = LENGTH_NONE;
    34e2:	f36f 03c6 	bfc	r3, #3, #4
    34e6:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    34ea:	e09c      	b.n	3626 <cbvprintf+0x3b2>
		val = 10U * val + *sp++ - '0';
    34ec:	fb0c 2101 	mla	r1, ip, r1, r2
    34f0:	3930      	subs	r1, #48	; 0x30
    34f2:	4603      	mov	r3, r0
    34f4:	e747      	b.n	3386 <cbvprintf+0x112>
	switch (*sp) {
    34f6:	2a74      	cmp	r2, #116	; 0x74
    34f8:	d026      	beq.n	3548 <cbvprintf+0x2d4>
    34fa:	2a7a      	cmp	r2, #122	; 0x7a
    34fc:	d1c0      	bne.n	3480 <cbvprintf+0x20c>
		conv->length_mod = LENGTH_Z;
    34fe:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    3502:	2206      	movs	r2, #6
    3504:	e00d      	b.n	3522 <cbvprintf+0x2ae>
		if (*++sp == 'h') {
    3506:	785a      	ldrb	r2, [r3, #1]
    3508:	2a68      	cmp	r2, #104	; 0x68
    350a:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    350e:	d106      	bne.n	351e <cbvprintf+0x2aa>
			conv->length_mod = LENGTH_HH;
    3510:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    3512:	f361 02c6 	bfi	r2, r1, #3, #4
    3516:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			++sp;
    351a:	1c99      	adds	r1, r3, #2
    351c:	e7b1      	b.n	3482 <cbvprintf+0x20e>
			conv->length_mod = LENGTH_H;
    351e:	4613      	mov	r3, r2
    3520:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    3522:	f362 03c6 	bfi	r3, r2, #3, #4
    3526:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		break;
    352a:	e7aa      	b.n	3482 <cbvprintf+0x20e>
		if (*++sp == 'l') {
    352c:	785a      	ldrb	r2, [r3, #1]
    352e:	2a6c      	cmp	r2, #108	; 0x6c
    3530:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    3534:	d101      	bne.n	353a <cbvprintf+0x2c6>
			conv->length_mod = LENGTH_LL;
    3536:	2104      	movs	r1, #4
    3538:	e7eb      	b.n	3512 <cbvprintf+0x29e>
			conv->length_mod = LENGTH_L;
    353a:	4613      	mov	r3, r2
    353c:	2203      	movs	r2, #3
    353e:	e7f0      	b.n	3522 <cbvprintf+0x2ae>
		conv->length_mod = LENGTH_J;
    3540:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    3544:	2205      	movs	r2, #5
    3546:	e7ec      	b.n	3522 <cbvprintf+0x2ae>
		conv->length_mod = LENGTH_T;
    3548:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    354c:	2207      	movs	r2, #7
    354e:	e7e8      	b.n	3522 <cbvprintf+0x2ae>
		conv->unsupported = true;
    3550:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    3554:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    3558:	f023 0302 	bic.w	r3, r3, #2
    355c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    3560:	f043 0302 	orr.w	r3, r3, #2
    3564:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
    3568:	e78b      	b.n	3482 <cbvprintf+0x20e>
	switch (conv->specifier) {
    356a:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
    356e:	2b20      	cmp	r3, #32
    3570:	d86f      	bhi.n	3652 <cbvprintf+0x3de>
    3572:	a101      	add	r1, pc, #4	; (adr r1, 3578 <cbvprintf+0x304>)
    3574:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    3578:	0000362b 	.word	0x0000362b
    357c:	00003653 	.word	0x00003653
    3580:	00003653 	.word	0x00003653
    3584:	00003653 	.word	0x00003653
    3588:	00003653 	.word	0x00003653
    358c:	00003653 	.word	0x00003653
    3590:	00003653 	.word	0x00003653
    3594:	00003653 	.word	0x00003653
    3598:	00003653 	.word	0x00003653
    359c:	000034a7 	.word	0x000034a7
    35a0:	00003653 	.word	0x00003653
    35a4:	0000362b 	.word	0x0000362b
    35a8:	000035fd 	.word	0x000035fd
    35ac:	000034a7 	.word	0x000034a7
    35b0:	000034a7 	.word	0x000034a7
    35b4:	000034a7 	.word	0x000034a7
    35b8:	00003653 	.word	0x00003653
    35bc:	000035fd 	.word	0x000035fd
    35c0:	00003653 	.word	0x00003653
    35c4:	00003653 	.word	0x00003653
    35c8:	00003653 	.word	0x00003653
    35cc:	00003653 	.word	0x00003653
    35d0:	00003661 	.word	0x00003661
    35d4:	0000362b 	.word	0x0000362b
    35d8:	00003685 	.word	0x00003685
    35dc:	00003653 	.word	0x00003653
    35e0:	00003653 	.word	0x00003653
    35e4:	00003685 	.word	0x00003685
    35e8:	00003653 	.word	0x00003653
    35ec:	0000362b 	.word	0x0000362b
    35f0:	00003653 	.word	0x00003653
    35f4:	00003653 	.word	0x00003653
    35f8:	0000362b 	.word	0x0000362b
		conv->specifier_cat = SPECIFIER_SINT;
    35fc:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    3600:	2101      	movs	r1, #1
		conv->specifier_cat = SPECIFIER_UINT;
    3602:	f361 0302 	bfi	r3, r1, #0, #3
    3606:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    360a:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    360e:	f003 0378 	and.w	r3, r3, #120	; 0x78
    3612:	2b40      	cmp	r3, #64	; 0x40
			conv->invalid = true;
    3614:	bf02      	ittt	eq
    3616:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
    361a:	f041 0101 	orreq.w	r1, r1, #1
    361e:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
    3622:	2a63      	cmp	r2, #99	; 0x63
    3624:	d005      	beq.n	3632 <cbvprintf+0x3be>
	bool unsupported = false;
    3626:	2300      	movs	r3, #0
    3628:	e006      	b.n	3638 <cbvprintf+0x3c4>
		conv->specifier_cat = SPECIFIER_UINT;
    362a:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    362e:	2102      	movs	r1, #2
    3630:	e7e7      	b.n	3602 <cbvprintf+0x38e>
			unsupported = (conv->length_mod != LENGTH_NONE);
    3632:	3b00      	subs	r3, #0
    3634:	bf18      	it	ne
    3636:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    3638:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    363c:	f3c2 0140 	ubfx	r1, r2, #1, #1
    3640:	430b      	orrs	r3, r1
    3642:	f363 0241 	bfi	r2, r3, #1, #1
    3646:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
    364a:	e6b4      	b.n	33b6 <cbvprintf+0x142>
		} else if ((conv->length_mod != LENGTH_NONE)
    364c:	f013 0f38 	tst.w	r3, #56	; 0x38
    3650:	d0e9      	beq.n	3626 <cbvprintf+0x3b2>
			conv->invalid = true;
    3652:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    3656:	f043 0301 	orr.w	r3, r3, #1
    365a:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    365e:	e7e2      	b.n	3626 <cbvprintf+0x3b2>
		conv->specifier_cat = SPECIFIER_PTR;
    3660:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    3664:	2203      	movs	r2, #3
    3666:	f362 0302 	bfi	r3, r2, #0, #3
    366a:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    366e:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    3672:	f003 0378 	and.w	r3, r3, #120	; 0x78
    3676:	f1a3 0c40 	sub.w	ip, r3, #64	; 0x40
    367a:	f1dc 0300 	rsbs	r3, ip, #0
    367e:	eb43 030c 	adc.w	r3, r3, ip
    3682:	e7d9      	b.n	3638 <cbvprintf+0x3c4>
		conv->specifier_cat = SPECIFIER_PTR;
    3684:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    3688:	2203      	movs	r2, #3
    368a:	f362 0302 	bfi	r3, r2, #0, #3
    368e:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
    3692:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    3696:	f013 0f78 	tst.w	r3, #120	; 0x78
    369a:	bf14      	ite	ne
    369c:	2301      	movne	r3, #1
    369e:	2300      	moveq	r3, #0
    36a0:	e7ca      	b.n	3638 <cbvprintf+0x3c4>
			unsupported = true;
    36a2:	2301      	movs	r3, #1
    36a4:	e7c8      	b.n	3638 <cbvprintf+0x3c4>
		} else if (conv->width_present) {
    36a6:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
    36aa:	2a00      	cmp	r2, #0
			width = conv->width_value;
    36ac:	bfb4      	ite	lt
    36ae:	f8dd b03c 	ldrlt.w	fp, [sp, #60]	; 0x3c
		int width = -1;
    36b2:	f04f 3bff 	movge.w	fp, #4294967295	; 0xffffffff
    36b6:	e690      	b.n	33da <cbvprintf+0x166>
		} else if (conv->prec_present) {
    36b8:	0799      	lsls	r1, r3, #30
    36ba:	f57f ae9d 	bpl.w	33f8 <cbvprintf+0x184>
			precision = conv->prec_value;
    36be:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
		conv->pad0_value = 0;
    36c2:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
    36c6:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    36c8:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
		    && (conv->specifier_cat == SPECIFIER_FP)
    36cc:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
    36d0:	f003 0207 	and.w	r2, r3, #7
    36d4:	2a04      	cmp	r2, #4
    36d6:	d109      	bne.n	36ec <cbvprintf+0x478>
		    && !conv->prec_present) {
    36d8:	078a      	lsls	r2, r1, #30
    36da:	d407      	bmi.n	36ec <cbvprintf+0x478>
			if (conv->specifier_a) {
    36dc:	f99d 2039 	ldrsb.w	r2, [sp, #57]	; 0x39
				precision = 6;
    36e0:	2a00      	cmp	r2, #0
    36e2:	bfb4      	ite	lt
    36e4:	f04f 080d 	movlt.w	r8, #13
    36e8:	f04f 0806 	movge.w	r8, #6
		enum specifier_cat_enum specifier_cat
    36ec:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    36f0:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    36f2:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    36f6:	d137      	bne.n	3768 <cbvprintf+0x4f4>
			switch (length_mod) {
    36f8:	1ecb      	subs	r3, r1, #3
    36fa:	2b04      	cmp	r3, #4
    36fc:	d821      	bhi.n	3742 <cbvprintf+0x4ce>
    36fe:	e8df f003 	tbb	[pc, r3]
    3702:	0903      	.short	0x0903
    3704:	2009      	.short	0x2009
    3706:	20          	.byte	0x20
    3707:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    3708:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
    370c:	17da      	asrs	r2, r3, #31
    370e:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
    3712:	e006      	b.n	3722 <cbvprintf+0x4ae>
					(sint_value_type)va_arg(ap, intmax_t);
    3714:	3407      	adds	r4, #7
    3716:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    371a:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    371e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
    3722:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
    3726:	07bb      	lsls	r3, r7, #30
    3728:	d056      	beq.n	37d8 <cbvprintf+0x564>
			OUTS(sp, fp);
    372a:	9b02      	ldr	r3, [sp, #8]
    372c:	462a      	mov	r2, r5
    372e:	4651      	mov	r1, sl
    3730:	4648      	mov	r0, r9
    3732:	f019 f921 	bl	1c978 <outs>
    3736:	2800      	cmp	r0, #0
    3738:	f2c0 8397 	blt.w	3e6a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3d2>
    373c:	4406      	add	r6, r0
			while (pad_len-- > 0) {
    373e:	9d02      	ldr	r5, [sp, #8]
    3740:	e5a0      	b.n	3284 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    3742:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    3746:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    3748:	ea4f 72e3 	mov.w	r2, r3, asr #31
    374c:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    3750:	d105      	bne.n	375e <cbvprintf+0x4ea>
				value->uint = (unsigned char)value->uint;
    3752:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
    3756:	930c      	str	r3, [sp, #48]	; 0x30
    3758:	2300      	movs	r3, #0
    375a:	930d      	str	r3, [sp, #52]	; 0x34
    375c:	e7e1      	b.n	3722 <cbvprintf+0x4ae>
			} else if (length_mod == LENGTH_H) {
    375e:	2902      	cmp	r1, #2
    3760:	d1df      	bne.n	3722 <cbvprintf+0x4ae>
				value->sint = (short)value->sint;
    3762:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
    3766:	e7d1      	b.n	370c <cbvprintf+0x498>
		} else if (specifier_cat == SPECIFIER_UINT) {
    3768:	2b02      	cmp	r3, #2
    376a:	d123      	bne.n	37b4 <cbvprintf+0x540>
			switch (length_mod) {
    376c:	1ecb      	subs	r3, r1, #3
    376e:	2b04      	cmp	r3, #4
    3770:	d813      	bhi.n	379a <cbvprintf+0x526>
    3772:	e8df f003 	tbb	[pc, r3]
    3776:	0a03      	.short	0x0a03
    3778:	120a      	.short	0x120a
    377a:	12          	.byte	0x12
    377b:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    377c:	6822      	ldr	r2, [r4, #0]
    377e:	920c      	str	r2, [sp, #48]	; 0x30
    3780:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
    3782:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    3784:	930d      	str	r3, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
    3786:	4604      	mov	r4, r0
    3788:	e7cb      	b.n	3722 <cbvprintf+0x4ae>
					(uint_value_type)va_arg(ap,
    378a:	1de0      	adds	r0, r4, #7
    378c:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
    3790:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    3794:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				break;
    3798:	e7f5      	b.n	3786 <cbvprintf+0x512>
					(uint_value_type)va_arg(ap, size_t);
    379a:	f854 3b04 	ldr.w	r3, [r4], #4
    379e:	930c      	str	r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    37a0:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    37a2:	f04f 0300 	mov.w	r3, #0
    37a6:	930d      	str	r3, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
    37a8:	d0d3      	beq.n	3752 <cbvprintf+0x4de>
			} else if (length_mod == LENGTH_H) {
    37aa:	2902      	cmp	r1, #2
    37ac:	d1b9      	bne.n	3722 <cbvprintf+0x4ae>
				value->uint = (unsigned short)value->uint;
    37ae:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    37b2:	e7d0      	b.n	3756 <cbvprintf+0x4e2>
		} else if (specifier_cat == SPECIFIER_FP) {
    37b4:	2b04      	cmp	r3, #4
    37b6:	d109      	bne.n	37cc <cbvprintf+0x558>
					(sint_value_type)va_arg(ap, long long);
    37b8:	1de3      	adds	r3, r4, #7
    37ba:	f023 0307 	bic.w	r3, r3, #7
    37be:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    37c2:	e9d3 2300 	ldrd	r2, r3, [r3]
    37c6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    37ca:	e7aa      	b.n	3722 <cbvprintf+0x4ae>
		} else if (specifier_cat == SPECIFIER_PTR) {
    37cc:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    37ce:	bf04      	itt	eq
    37d0:	f854 3b04 	ldreq.w	r3, [r4], #4
    37d4:	930c      	streq	r3, [sp, #48]	; 0x30
    37d6:	e7a4      	b.n	3722 <cbvprintf+0x4ae>
		switch (conv->specifier) {
    37d8:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
    37dc:	2a78      	cmp	r2, #120	; 0x78
    37de:	d8ae      	bhi.n	373e <cbvprintf+0x4ca>
    37e0:	2a57      	cmp	r2, #87	; 0x57
    37e2:	f200 808c 	bhi.w	38fe <cbvprintf+0x68a>
    37e6:	2a25      	cmp	r2, #37	; 0x25
    37e8:	f000 80d4 	beq.w	3994 <cbvprintf+0x720>
    37ec:	2a24      	cmp	r2, #36	; 0x24
    37ee:	d9a6      	bls.n	373e <cbvprintf+0x4ca>
    37f0:	2a41      	cmp	r2, #65	; 0x41
    37f2:	d003      	beq.n	37fc <cbvprintf+0x588>
    37f4:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
    37f8:	2b02      	cmp	r3, #2
    37fa:	d8a0      	bhi.n	373e <cbvprintf+0x4ca>
	} u = {
    37fc:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
	if ((u.u64 & SIGN_MASK) != 0U) {
    3800:	2b00      	cmp	r3, #0
    3802:	f2c0 81be 	blt.w	3b82 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xea>
	} else if (conv->flag_plus) {
    3806:	0738      	lsls	r0, r7, #28
    3808:	f100 81bd 	bmi.w	3b86 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xee>
		*sign = ' ';
    380c:	f017 0710 	ands.w	r7, r7, #16
    3810:	bf18      	it	ne
    3812:	2720      	movne	r7, #32
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    3814:	f3c3 550a 	ubfx	r5, r3, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
    3818:	f3c3 0313 	ubfx	r3, r3, #0, #20
    381c:	e9cd 1308 	strd	r1, r3, [sp, #32]
	bool is_subnormal = (expo == 0) && (fract != 0);
    3820:	2d00      	cmp	r5, #0
    3822:	f040 81b2 	bne.w	3b8a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xf2>
    3826:	ea51 0003 	orrs.w	r0, r1, r3
    382a:	bf14      	ite	ne
    382c:	2001      	movne	r0, #1
    382e:	2000      	moveq	r0, #0
	fract <<= EXPONENT_BITS;
    3830:	02db      	lsls	r3, r3, #11
    3832:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
    3836:	02c9      	lsls	r1, r1, #11
		c = 'f';
    3838:	2a46      	cmp	r2, #70	; 0x46
	if ((expo | fract) != 0) {
    383a:	ea45 0e01 	orr.w	lr, r5, r1
    383e:	ea43 7ce5 	orr.w	ip, r3, r5, asr #31
		c = 'f';
    3842:	bf08      	it	eq
    3844:	2266      	moveq	r2, #102	; 0x66
	if ((expo | fract) != 0) {
    3846:	ea5e 0c0c 	orrs.w	ip, lr, ip
	fract &= ~SIGN_MASK;
    384a:	e9cd 1308 	strd	r1, r3, [sp, #32]
	if ((expo | fract) != 0) {
    384e:	f000 8206 	beq.w	3c5e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c6>
		if (is_subnormal) {
    3852:	2800      	cmp	r0, #0
    3854:	f040 81ce 	bne.w	3bf4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x15c>
		fract |= BIT_63;
    3858:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    385c:	f04f 0c00 	mov.w	ip, #0
    3860:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
    3864:	f2a5 35fe 	subw	r5, r5, #1022	; 0x3fe
		fract |= BIT_63;
    3868:	9109      	str	r1, [sp, #36]	; 0x24
    386a:	4663      	mov	r3, ip
		fract *= 5U;
    386c:	f04f 0e05 	mov.w	lr, #5
	while (expo < -2) {
    3870:	f115 0f02 	cmn.w	r5, #2
    3874:	f2c0 81c5 	blt.w	3c02 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x16a>
    3878:	f1bc 0f00 	cmp.w	ip, #0
    387c:	d001      	beq.n	3882 <cbvprintf+0x60e>
    387e:	e9cd 0108 	strd	r0, r1, [sp, #32]
	while (expo > 0) {
    3882:	2d00      	cmp	r5, #0
		fract += 2;
    3884:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
	while (expo > 0) {
    3888:	f300 81d0 	bgt.w	3c2c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x194>
	fract >>= (4 - expo);
    388c:	9809      	ldr	r0, [sp, #36]	; 0x24
    388e:	9908      	ldr	r1, [sp, #32]
    3890:	f1c5 0c04 	rsb	ip, r5, #4
    3894:	351c      	adds	r5, #28
    3896:	fa00 f505 	lsl.w	r5, r0, r5
    389a:	f1ac 0e20 	sub.w	lr, ip, #32
    389e:	fa21 f10c 	lsr.w	r1, r1, ip
    38a2:	fa20 fe0e 	lsr.w	lr, r0, lr
    38a6:	4329      	orrs	r1, r5
    38a8:	ea41 010e 	orr.w	r1, r1, lr
    38ac:	fa20 f00c 	lsr.w	r0, r0, ip
    38b0:	e9cd 1008 	strd	r1, r0, [sp, #32]
	if ((c == 'g') || (c == 'G')) {
    38b4:	f002 01df 	and.w	r1, r2, #223	; 0xdf
    38b8:	2947      	cmp	r1, #71	; 0x47
    38ba:	f040 81d7 	bne.w	3c6c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1d4>
		if (decexp < (-4 + 1) || decexp > precision) {
    38be:	1cdd      	adds	r5, r3, #3
    38c0:	db02      	blt.n	38c8 <cbvprintf+0x654>
    38c2:	4598      	cmp	r8, r3
    38c4:	f280 81ce 	bge.w	3c64 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1cc>
			c += 'e' - 'g';  /* e or E */
    38c8:	3a02      	subs	r2, #2
			if (precision > 0) {
    38ca:	f1b8 0f00 	cmp.w	r8, #0
			c += 'e' - 'g';  /* e or E */
    38ce:	b2d2      	uxtb	r2, r2
			if (precision > 0) {
    38d0:	dd01      	ble.n	38d6 <cbvprintf+0x662>
				precision--;
    38d2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		if (!conv->flag_hash && (precision > 0)) {
    38d6:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    38da:	0688      	lsls	r0, r1, #26
    38dc:	f100 81c6 	bmi.w	3c6c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1d4>
    38e0:	f1b8 0f00 	cmp.w	r8, #0
    38e4:	bfd4      	ite	le
    38e6:	2100      	movle	r1, #0
    38e8:	2101      	movgt	r1, #1
	if (c == 'f') {
    38ea:	2a66      	cmp	r2, #102	; 0x66
	bool prune_zero = false;
    38ec:	9103      	str	r1, [sp, #12]
	if (c == 'f') {
    38ee:	f040 81bf 	bne.w	3c70 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1d8>
		if (decimals < 0) {
    38f2:	eb18 0503 	adds.w	r5, r8, r3
    38f6:	f140 81bd 	bpl.w	3c74 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1dc>
			decimals = 0;
    38fa:	2500      	movs	r5, #0
    38fc:	e1bd      	b.n	3c7a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1e2>
		switch (conv->specifier) {
    38fe:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
    3902:	2b20      	cmp	r3, #32
    3904:	f63f af1b 	bhi.w	373e <cbvprintf+0x4ca>
    3908:	a001      	add	r0, pc, #4	; (adr r0, 3910 <cbvprintf+0x69c>)
    390a:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
    390e:	bf00      	nop
    3910:	00003b25 	.word	0x00003b25
    3914:	0000373f 	.word	0x0000373f
    3918:	0000373f 	.word	0x0000373f
    391c:	0000373f 	.word	0x0000373f
    3920:	0000373f 	.word	0x0000373f
    3924:	0000373f 	.word	0x0000373f
    3928:	0000373f 	.word	0x0000373f
    392c:	0000373f 	.word	0x0000373f
    3930:	0000373f 	.word	0x0000373f
    3934:	000037fd 	.word	0x000037fd
    3938:	0000373f 	.word	0x0000373f
    393c:	000039c1 	.word	0x000039c1
    3940:	00003ac5 	.word	0x00003ac5
    3944:	000037fd 	.word	0x000037fd
    3948:	000037fd 	.word	0x000037fd
    394c:	000037fd 	.word	0x000037fd
    3950:	0000373f 	.word	0x0000373f
    3954:	00003ac5 	.word	0x00003ac5
    3958:	0000373f 	.word	0x0000373f
    395c:	0000373f 	.word	0x0000373f
    3960:	0000373f 	.word	0x0000373f
    3964:	0000373f 	.word	0x0000373f
    3968:	00003b5b 	.word	0x00003b5b
    396c:	00003b25 	.word	0x00003b25
    3970:	00003b29 	.word	0x00003b29
    3974:	0000373f 	.word	0x0000373f
    3978:	0000373f 	.word	0x0000373f
    397c:	0000399b 	.word	0x0000399b
    3980:	0000373f 	.word	0x0000373f
    3984:	00003b25 	.word	0x00003b25
    3988:	0000373f 	.word	0x0000373f
    398c:	0000373f 	.word	0x0000373f
    3990:	00003b25 	.word	0x00003b25
			OUTC('%');
    3994:	4651      	mov	r1, sl
    3996:	4610      	mov	r0, r2
    3998:	e47e      	b.n	3298 <cbvprintf+0x24>
			if (precision >= 0) {
    399a:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    399e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			if (precision >= 0) {
    39a0:	db09      	blt.n	39b6 <cbvprintf+0x742>
				len = strnlen(bps, precision);
    39a2:	4641      	mov	r1, r8
    39a4:	4610      	mov	r0, r2
    39a6:	9203      	str	r2, [sp, #12]
    39a8:	f01a fb1d 	bl	1dfe6 <strnlen>
				len = strlen(bps);
    39ac:	9a03      	ldr	r2, [sp, #12]
		char sign = 0;
    39ae:	2700      	movs	r7, #0
			bpe = bps + len;
    39b0:	1815      	adds	r5, r2, r0
		if (bps == NULL) {
    39b2:	b962      	cbnz	r2, 39ce <cbvprintf+0x75a>
    39b4:	e6c3      	b.n	373e <cbvprintf+0x4ca>
				len = strlen(bps);
    39b6:	4610      	mov	r0, r2
    39b8:	9203      	str	r2, [sp, #12]
    39ba:	f01a fb0d 	bl	1dfd8 <strlen>
    39be:	e7f5      	b.n	39ac <cbvprintf+0x738>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    39c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    39c2:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
		char sign = 0;
    39c6:	2700      	movs	r7, #0
			bpe = buf + 1;
    39c8:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
				bps = encode_float(value->dbl, conv, precision,
    39cc:	aa13      	add	r2, sp, #76	; 0x4c
		size_t nj_len = (bpe - bps);
    39ce:	1aab      	subs	r3, r5, r2
		if (sign != 0) {
    39d0:	b107      	cbz	r7, 39d4 <cbvprintf+0x760>
			nj_len += 1U;
    39d2:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    39d4:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
    39d8:	06c1      	lsls	r1, r0, #27
    39da:	f140 823a 	bpl.w	3e52 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3ba>
			nj_len += 2U;
    39de:	3302      	adds	r3, #2
		nj_len += conv->pad0_value;
    39e0:	990f      	ldr	r1, [sp, #60]	; 0x3c
		if (conv->pad_fp) {
    39e2:	0640      	lsls	r0, r0, #25
		nj_len += conv->pad0_value;
    39e4:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    39e6:	bf44      	itt	mi
    39e8:	9910      	ldrmi	r1, [sp, #64]	; 0x40
    39ea:	185b      	addmi	r3, r3, r1
		if (width > 0) {
    39ec:	f1bb 0f00 	cmp.w	fp, #0
    39f0:	dd23      	ble.n	3a3a <cbvprintf+0x7c6>
			width -= (int)nj_len;
    39f2:	ebab 0b03 	sub.w	fp, fp, r3
			if (!conv->flag_dash) {
    39f6:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    39fa:	0759      	lsls	r1, r3, #29
    39fc:	f3c3 0880 	ubfx	r8, r3, #2, #1
    3a00:	d41b      	bmi.n	3a3a <cbvprintf+0x7c6>
				if (conv->flag_zero) {
    3a02:	0658      	lsls	r0, r3, #25
    3a04:	f140 8234 	bpl.w	3e70 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3d8>
					if (sign != 0) {
    3a08:	2f00      	cmp	r7, #0
    3a0a:	f000 8234 	beq.w	3e76 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3de>
						OUTC(sign);
    3a0e:	4651      	mov	r1, sl
    3a10:	4638      	mov	r0, r7
    3a12:	9203      	str	r2, [sp, #12]
    3a14:	47c8      	blx	r9
    3a16:	2800      	cmp	r0, #0
    3a18:	f2c0 8227 	blt.w	3e6a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3d2>
    3a1c:	9a03      	ldr	r2, [sp, #12]
						sign = 0;
    3a1e:	4647      	mov	r7, r8
						OUTC(sign);
    3a20:	3601      	adds	r6, #1
					pad = '0';
    3a22:	f04f 0830 	mov.w	r8, #48	; 0x30
    3a26:	445e      	add	r6, fp
    3a28:	465b      	mov	r3, fp
				while (width-- > 0) {
    3a2a:	2b00      	cmp	r3, #0
    3a2c:	eba6 000b 	sub.w	r0, r6, fp
    3a30:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    3a34:	f300 8211 	bgt.w	3e5a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3c2>
    3a38:	4606      	mov	r6, r0
		if (sign != 0) {
    3a3a:	b147      	cbz	r7, 3a4e <cbvprintf+0x7da>
			OUTC(sign);
    3a3c:	4651      	mov	r1, sl
    3a3e:	4638      	mov	r0, r7
    3a40:	9203      	str	r2, [sp, #12]
    3a42:	47c8      	blx	r9
    3a44:	2800      	cmp	r0, #0
    3a46:	f2c0 8210 	blt.w	3e6a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3d2>
    3a4a:	9a03      	ldr	r2, [sp, #12]
    3a4c:	3601      	adds	r6, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
    3a4e:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    3a52:	0659      	lsls	r1, r3, #25
    3a54:	f140 8265 	bpl.w	3f22 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x48a>
			if (conv->specifier_a) {
    3a58:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
    3a5c:	2b00      	cmp	r3, #0
    3a5e:	eba6 0302 	sub.w	r3, r6, r2
    3a62:	9303      	str	r3, [sp, #12]
    3a64:	f2c0 820a 	blt.w	3e7c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3e4>
    3a68:	4617      	mov	r7, r2
				while (isdigit((int)*cp)) {
    3a6a:	7838      	ldrb	r0, [r7, #0]
    3a6c:	9b03      	ldr	r3, [sp, #12]
    3a6e:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
    3a72:	2a09      	cmp	r2, #9
    3a74:	46b8      	mov	r8, r7
    3a76:	eb03 0607 	add.w	r6, r3, r7
    3a7a:	f107 0701 	add.w	r7, r7, #1
    3a7e:	f240 8229 	bls.w	3ed4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x43c>
				if (!conv->pad_postdp) {
    3a82:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
				pad_len = conv->pad0_value;
    3a86:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
				if (!conv->pad_postdp) {
    3a88:	0693      	lsls	r3, r2, #26
    3a8a:	d408      	bmi.n	3a9e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6>
    3a8c:	443e      	add	r6, r7
					while (pad_len-- > 0) {
    3a8e:	2f00      	cmp	r7, #0
    3a90:	eba6 0307 	sub.w	r3, r6, r7
    3a94:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
    3a98:	f300 8222 	bgt.w	3ee0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x448>
    3a9c:	461e      	mov	r6, r3
				if (*cp == '.') {
    3a9e:	f898 0000 	ldrb.w	r0, [r8]
    3aa2:	282e      	cmp	r0, #46	; 0x2e
    3aa4:	d10b      	bne.n	3abe <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x26>
					OUTC(*cp++);
    3aa6:	4651      	mov	r1, sl
    3aa8:	47c8      	blx	r9
						OUTC('0');
    3aaa:	2800      	cmp	r0, #0
    3aac:	f2c0 81dd 	blt.w	3e6a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3d2>
					while (pad_len-- > 0) {
    3ab0:	2f00      	cmp	r7, #0
						OUTC('0');
    3ab2:	f106 0601 	add.w	r6, r6, #1
					while (pad_len-- > 0) {
    3ab6:	f300 821a 	bgt.w	3eee <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x456>
					OUTC(*cp++);
    3aba:	f108 0801 	add.w	r8, r8, #1
    3abe:	eba6 0608 	sub.w	r6, r6, r8
    3ac2:	e21d      	b.n	3f00 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x468>
			if (conv->flag_plus) {
    3ac4:	073d      	lsls	r5, r7, #28
    3ac6:	d42b      	bmi.n	3b20 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x88>
				sign = ' ';
    3ac8:	f017 0710 	ands.w	r7, r7, #16
    3acc:	bf18      	it	ne
    3ace:	2720      	movne	r7, #32
			sint = value->sint;
    3ad0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			if (sint < 0) {
    3ad4:	2b00      	cmp	r3, #0
    3ad6:	da05      	bge.n	3ae4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4c>
				value->uint = (uint_value_type)-sint;
    3ad8:	4252      	negs	r2, r2
    3ada:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    3ade:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				sign = '-';
    3ae2:	272d      	movs	r7, #45	; 0x2d
			bps = encode_uint(value->uint, conv, buf, bpe);
    3ae4:	f10d 0365 	add.w	r3, sp, #101	; 0x65
    3ae8:	9300      	str	r3, [sp, #0]
    3aea:	aa0e      	add	r2, sp, #56	; 0x38
    3aec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    3af0:	ab13      	add	r3, sp, #76	; 0x4c
    3af2:	f018 fefb 	bl	1c8ec <encode_uint>
    3af6:	4602      	mov	r2, r0
			if (precision >= 0) {
    3af8:	f1b8 0f00 	cmp.w	r8, #0
    3afc:	f10d 0565 	add.w	r5, sp, #101	; 0x65
    3b00:	f6ff af57 	blt.w	39b2 <cbvprintf+0x73e>
				conv->flag_zero = false;
    3b04:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
				size_t len = bpe - bps;
    3b08:	1aab      	subs	r3, r5, r2
				conv->flag_zero = false;
    3b0a:	f36f 1186 	bfc	r1, #6, #1
				if (len < (size_t)precision) {
    3b0e:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    3b10:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
    3b14:	f67f af4d 	bls.w	39b2 <cbvprintf+0x73e>
					conv->pad0_value = precision - (int)len;
    3b18:	eba8 0303 	sub.w	r3, r8, r3
    3b1c:	930f      	str	r3, [sp, #60]	; 0x3c
    3b1e:	e748      	b.n	39b2 <cbvprintf+0x73e>
				sign = '+';
    3b20:	272b      	movs	r7, #43	; 0x2b
    3b22:	e7d5      	b.n	3ad0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x38>
		switch (conv->specifier) {
    3b24:	2700      	movs	r7, #0
    3b26:	e7dd      	b.n	3ae4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4c>
			if (value->ptr != NULL) {
    3b28:	980c      	ldr	r0, [sp, #48]	; 0x30
    3b2a:	2800      	cmp	r0, #0
    3b2c:	f000 818d 	beq.w	3e4a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3b2>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    3b30:	f10d 0365 	add.w	r3, sp, #101	; 0x65
    3b34:	9300      	str	r3, [sp, #0]
    3b36:	aa0e      	add	r2, sp, #56	; 0x38
    3b38:	ab13      	add	r3, sp, #76	; 0x4c
    3b3a:	2100      	movs	r1, #0
    3b3c:	f018 fed6 	bl	1c8ec <encode_uint>
				conv->altform_0c = true;
    3b40:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
    3b44:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    3b48:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    3b4c:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    3b50:	4602      	mov	r2, r0
				conv->altform_0c = true;
    3b52:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		char sign = 0;
    3b56:	2700      	movs	r7, #0
				goto prec_int_pad0;
    3b58:	e7ce      	b.n	3af8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x60>
				store_count(conv, value->ptr, count);
    3b5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
    3b5c:	2907      	cmp	r1, #7
    3b5e:	f63f adee 	bhi.w	373e <cbvprintf+0x4ca>
    3b62:	e8df f001 	tbb	[pc, r1]
    3b66:	040c      	.short	0x040c
    3b68:	08080c06 	.word	0x08080c06
    3b6c:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    3b6e:	701e      	strb	r6, [r3, #0]
		break;
    3b70:	e5e5      	b.n	373e <cbvprintf+0x4ca>
		*(short *)dp = (short)count;
    3b72:	801e      	strh	r6, [r3, #0]
		break;
    3b74:	e5e3      	b.n	373e <cbvprintf+0x4ca>
		*(intmax_t *)dp = (intmax_t)count;
    3b76:	17f2      	asrs	r2, r6, #31
    3b78:	e9c3 6200 	strd	r6, r2, [r3]
		break;
    3b7c:	e5df      	b.n	373e <cbvprintf+0x4ca>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    3b7e:	601e      	str	r6, [r3, #0]
		break;
    3b80:	e5dd      	b.n	373e <cbvprintf+0x4ca>
		*sign = '-';
    3b82:	272d      	movs	r7, #45	; 0x2d
    3b84:	e646      	b.n	3814 <cbvprintf+0x5a0>
		*sign = '+';
    3b86:	272b      	movs	r7, #43	; 0x2b
    3b88:	e644      	b.n	3814 <cbvprintf+0x5a0>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
    3b8a:	f240 70ff 	movw	r0, #2047	; 0x7ff
    3b8e:	4285      	cmp	r5, r0
    3b90:	d12d      	bne.n	3bee <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x156>
		if (fract == 0) {
    3b92:	430b      	orrs	r3, r1
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    3b94:	f1a2 0241 	sub.w	r2, r2, #65	; 0x41
    3b98:	d11b      	bne.n	3bd2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x13a>
			if (isupper((int)c)) {
    3b9a:	2a19      	cmp	r2, #25
    3b9c:	d811      	bhi.n	3bc2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x12a>
				*buf++ = 'I';
    3b9e:	2349      	movs	r3, #73	; 0x49
    3ba0:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'N';
    3ba4:	234e      	movs	r3, #78	; 0x4e
    3ba6:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'F';
    3baa:	2346      	movs	r3, #70	; 0x46
				*buf++ = 'n';
    3bac:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
		conv->flag_zero = false;
    3bb0:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    3bb4:	f36f 1386 	bfc	r3, #6, #1
    3bb8:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
		*bpe = buf;
    3bbc:	f10d 054f 	add.w	r5, sp, #79	; 0x4f
		return bps;
    3bc0:	e704      	b.n	39cc <cbvprintf+0x758>
				*buf++ = 'i';
    3bc2:	2369      	movs	r3, #105	; 0x69
    3bc4:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
    3bc8:	236e      	movs	r3, #110	; 0x6e
    3bca:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'f';
    3bce:	2366      	movs	r3, #102	; 0x66
    3bd0:	e7ec      	b.n	3bac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x114>
			if (isupper((int)c)) {
    3bd2:	2a19      	cmp	r2, #25
				*buf++ = 'N';
    3bd4:	bf99      	ittee	ls
    3bd6:	234e      	movls	r3, #78	; 0x4e
				*buf++ = 'A';
    3bd8:	2241      	movls	r2, #65	; 0x41
				*buf++ = 'n';
    3bda:	236e      	movhi	r3, #110	; 0x6e
				*buf++ = 'a';
    3bdc:	2261      	movhi	r2, #97	; 0x61
				*buf++ = 'N';
    3bde:	bf94      	ite	ls
    3be0:	f88d 304c 	strbls.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
    3be4:	f88d 304c 	strbhi.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'a';
    3be8:	f88d 204d 	strb.w	r2, [sp, #77]	; 0x4d
    3bec:	e7de      	b.n	3bac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x114>
	bool is_subnormal = (expo == 0) && (fract != 0);
    3bee:	2000      	movs	r0, #0
    3bf0:	e61e      	b.n	3830 <cbvprintf+0x5bc>
				expo--;
    3bf2:	3d01      	subs	r5, #1
			while (((fract <<= 1) & BIT_63) == 0) {
    3bf4:	1849      	adds	r1, r1, r1
    3bf6:	415b      	adcs	r3, r3
    3bf8:	2b00      	cmp	r3, #0
    3bfa:	dafa      	bge.n	3bf2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x15a>
    3bfc:	e9cd 1308 	strd	r1, r3, [sp, #32]
    3c00:	e62a      	b.n	3858 <cbvprintf+0x5e4>
			fract >>= 1;
    3c02:	0840      	lsrs	r0, r0, #1
    3c04:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
    3c08:	0849      	lsrs	r1, r1, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    3c0a:	f1b1 3f33 	cmp.w	r1, #858993459	; 0x33333333
    3c0e:	46ac      	mov	ip, r5
			expo++;
    3c10:	f105 0501 	add.w	r5, r5, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    3c14:	d2f5      	bcs.n	3c02 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x16a>
		fract *= 5U;
    3c16:	fb0e f501 	mul.w	r5, lr, r1
    3c1a:	fba0 010e 	umull	r0, r1, r0, lr
    3c1e:	4429      	add	r1, r5
		decexp--;
    3c20:	3b01      	subs	r3, #1
		expo++;
    3c22:	f10c 0502 	add.w	r5, ip, #2
		decexp--;
    3c26:	f04f 0c01 	mov.w	ip, #1
    3c2a:	e621      	b.n	3870 <cbvprintf+0x5fc>
		fract += 2;
    3c2c:	3102      	adds	r1, #2
    3c2e:	f140 0000 	adc.w	r0, r0, #0
    3c32:	e9cd 1008 	strd	r1, r0, [sp, #32]
		_ldiv5(&fract);
    3c36:	a808      	add	r0, sp, #32
    3c38:	e9cd 2303 	strd	r2, r3, [sp, #12]
    3c3c:	f018 fe27 	bl	1c88e <_ldiv5>
		decexp++;
    3c40:	9b04      	ldr	r3, [sp, #16]
    3c42:	9a03      	ldr	r2, [sp, #12]
    3c44:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
		expo--;
    3c48:	3d01      	subs	r5, #1
		decexp++;
    3c4a:	3301      	adds	r3, #1
			fract <<= 1;
    3c4c:	1849      	adds	r1, r1, r1
    3c4e:	4140      	adcs	r0, r0
		} while (!(fract & BIT_63));
    3c50:	2800      	cmp	r0, #0
			expo--;
    3c52:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		} while (!(fract & BIT_63));
    3c56:	daf9      	bge.n	3c4c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1b4>
    3c58:	e9cd 1008 	strd	r1, r0, [sp, #32]
    3c5c:	e611      	b.n	3882 <cbvprintf+0x60e>
    3c5e:	2300      	movs	r3, #0
    3c60:	461d      	mov	r5, r3
    3c62:	e613      	b.n	388c <cbvprintf+0x618>
			precision -= decexp;
    3c64:	eba8 0803 	sub.w	r8, r8, r3
			c = 'f';
    3c68:	2266      	movs	r2, #102	; 0x66
    3c6a:	e634      	b.n	38d6 <cbvprintf+0x662>
	bool prune_zero = false;
    3c6c:	2100      	movs	r1, #0
    3c6e:	e63c      	b.n	38ea <cbvprintf+0x676>
		decimals = precision + 1;
    3c70:	f108 0501 	add.w	r5, r8, #1
	if (decimals > 16) {
    3c74:	2d10      	cmp	r5, #16
    3c76:	bfa8      	it	ge
    3c78:	2510      	movge	r5, #16
    3c7a:	2110      	movs	r1, #16
    3c7c:	9107      	str	r1, [sp, #28]
	uint64_t round = BIT64(59); /* 0.5 */
    3c7e:	2000      	movs	r0, #0
    3c80:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    3c84:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
	*v >>= 1;
    3c88:	e9dd 100a 	ldrd	r1, r0, [sp, #40]	; 0x28
	while (decimals--) {
    3c8c:	b9a5      	cbnz	r5, 3cb8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x220>
	fract += round;
    3c8e:	9d08      	ldr	r5, [sp, #32]
    3c90:	1949      	adds	r1, r1, r5
    3c92:	9d09      	ldr	r5, [sp, #36]	; 0x24
    3c94:	eb40 0505 	adc.w	r5, r0, r5
	if (fract >= BIT64(60)) {
    3c98:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
    3c9c:	d21b      	bcs.n	3cd6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x23e>
	fract += round;
    3c9e:	e9cd 1508 	strd	r1, r5, [sp, #32]
	if (c == 'f') {
    3ca2:	2a66      	cmp	r2, #102	; 0x66
    3ca4:	f040 8099 	bne.w	3dda <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x342>
		if (decexp > 0) {
    3ca8:	2b00      	cmp	r3, #0
    3caa:	dc23      	bgt.n	3cf4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x25c>
			*buf++ = '0';
    3cac:	2130      	movs	r1, #48	; 0x30
    3cae:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
    3cb2:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
    3cb6:	e02f      	b.n	3d18 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x280>
	*v >>= 1;
    3cb8:	0849      	lsrs	r1, r1, #1
    3cba:	ea41 71c0 	orr.w	r1, r1, r0, lsl #31
    3cbe:	0840      	lsrs	r0, r0, #1
    3cc0:	e9cd 100a 	strd	r1, r0, [sp, #40]	; 0x28
	_ldiv5(v);
    3cc4:	a80a      	add	r0, sp, #40	; 0x28
    3cc6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    3cca:	3d01      	subs	r5, #1
    3ccc:	f018 fddf 	bl	1c88e <_ldiv5>
    3cd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
}
    3cd4:	e7d8      	b.n	3c88 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1f0>
	*v >>= 1;
    3cd6:	0849      	lsrs	r1, r1, #1
    3cd8:	ea41 71c5 	orr.w	r1, r1, r5, lsl #31
	_ldiv5(v);
    3cdc:	a808      	add	r0, sp, #32
	*v >>= 1;
    3cde:	086d      	lsrs	r5, r5, #1
    3ce0:	e9cd 2304 	strd	r2, r3, [sp, #16]
    3ce4:	e9cd 1508 	strd	r1, r5, [sp, #32]
	_ldiv5(v);
    3ce8:	f018 fdd1 	bl	1c88e <_ldiv5>
		decexp++;
    3cec:	9b05      	ldr	r3, [sp, #20]
    3cee:	9a04      	ldr	r2, [sp, #16]
    3cf0:	3301      	adds	r3, #1
    3cf2:	e7d6      	b.n	3ca2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x20a>
	char *buf = bps;
    3cf4:	ad13      	add	r5, sp, #76	; 0x4c
			while (decexp > 0 && digit_count > 0) {
    3cf6:	9907      	ldr	r1, [sp, #28]
    3cf8:	2900      	cmp	r1, #0
    3cfa:	dd0b      	ble.n	3d14 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x27c>
				*buf++ = _get_digit(&fract, &digit_count);
    3cfc:	a907      	add	r1, sp, #28
    3cfe:	a808      	add	r0, sp, #32
    3d00:	e9cd 2304 	strd	r2, r3, [sp, #16]
    3d04:	f018 fddb 	bl	1c8be <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    3d08:	9b05      	ldr	r3, [sp, #20]
				*buf++ = _get_digit(&fract, &digit_count);
    3d0a:	f805 0b01 	strb.w	r0, [r5], #1
			while (decexp > 0 && digit_count > 0) {
    3d0e:	3b01      	subs	r3, #1
    3d10:	9a04      	ldr	r2, [sp, #16]
    3d12:	d1f0      	bne.n	3cf6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x25e>
			conv->pad0_value = decexp;
    3d14:	930f      	str	r3, [sp, #60]	; 0x3c
			decexp = 0;
    3d16:	2300      	movs	r3, #0
		if (conv->flag_hash || (precision > 0)) {
    3d18:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    3d1c:	0689      	lsls	r1, r1, #26
    3d1e:	d402      	bmi.n	3d26 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x28e>
    3d20:	f1b8 0f00 	cmp.w	r8, #0
    3d24:	dd1d      	ble.n	3d62 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2ca>
			*buf++ = '.';
    3d26:	212e      	movs	r1, #46	; 0x2e
    3d28:	f805 1b01 	strb.w	r1, [r5], #1
		if (decexp < 0 && precision > 0) {
    3d2c:	b19b      	cbz	r3, 3d56 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2be>
    3d2e:	f1b8 0f00 	cmp.w	r8, #0
    3d32:	dd16      	ble.n	3d62 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2ca>
			conv->pad0_value = -decexp;
    3d34:	4259      	negs	r1, r3
    3d36:	4541      	cmp	r1, r8
    3d38:	bfa8      	it	ge
    3d3a:	4641      	movge	r1, r8
			conv->pad_postdp = (conv->pad0_value > 0);
    3d3c:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
			conv->pad0_value = -decexp;
    3d40:	910f      	str	r1, [sp, #60]	; 0x3c
			conv->pad_postdp = (conv->pad0_value > 0);
    3d42:	2900      	cmp	r1, #0
			precision -= conv->pad0_value;
    3d44:	eba8 0801 	sub.w	r8, r8, r1
			conv->pad_postdp = (conv->pad0_value > 0);
    3d48:	bfd4      	ite	le
    3d4a:	2100      	movle	r1, #0
    3d4c:	2101      	movgt	r1, #1
    3d4e:	f361 1045 	bfi	r0, r1, #5, #1
    3d52:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
	while (precision > 0 && digit_count > 0) {
    3d56:	f1b8 0f00 	cmp.w	r8, #0
    3d5a:	dd02      	ble.n	3d62 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2ca>
    3d5c:	9907      	ldr	r1, [sp, #28]
    3d5e:	2900      	cmp	r1, #0
    3d60:	dc56      	bgt.n	3e10 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x378>
	if (prune_zero) {
    3d62:	9903      	ldr	r1, [sp, #12]
    3d64:	2900      	cmp	r1, #0
    3d66:	d163      	bne.n	3e30 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x398>
	conv->pad0_pre_exp = precision;
    3d68:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
	if ((c == 'e') || (c == 'E')) {
    3d6c:	f002 01df 	and.w	r1, r2, #223	; 0xdf
    3d70:	2945      	cmp	r1, #69	; 0x45
    3d72:	d121      	bne.n	3db8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x320>
		if (decexp < 0) {
    3d74:	2b00      	cmp	r3, #0
		*buf++ = c;
    3d76:	4629      	mov	r1, r5
			decexp = -decexp;
    3d78:	bfb8      	it	lt
    3d7a:	425b      	neglt	r3, r3
		*buf++ = c;
    3d7c:	f801 2b02 	strb.w	r2, [r1], #2
			*buf++ = '-';
    3d80:	bfb4      	ite	lt
    3d82:	222d      	movlt	r2, #45	; 0x2d
			*buf++ = '+';
    3d84:	222b      	movge	r2, #43	; 0x2b
		if (decexp >= 100) {
    3d86:	2b63      	cmp	r3, #99	; 0x63
    3d88:	706a      	strb	r2, [r5, #1]
    3d8a:	dd09      	ble.n	3da0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x308>
			*buf++ = (decexp / 100) + '0';
    3d8c:	2064      	movs	r0, #100	; 0x64
    3d8e:	fbb3 f2f0 	udiv	r2, r3, r0
    3d92:	f102 0c30 	add.w	ip, r2, #48	; 0x30
    3d96:	1ce9      	adds	r1, r5, #3
    3d98:	f885 c002 	strb.w	ip, [r5, #2]
			decexp %= 100;
    3d9c:	fb00 3312 	mls	r3, r0, r2, r3
		*buf++ = (decexp / 10) + '0';
    3da0:	200a      	movs	r0, #10
    3da2:	460d      	mov	r5, r1
    3da4:	fbb3 f2f0 	udiv	r2, r3, r0
		*buf++ = (decexp % 10) + '0';
    3da8:	fb00 3312 	mls	r3, r0, r2, r3
		*buf++ = (decexp / 10) + '0';
    3dac:	f102 0c30 	add.w	ip, r2, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
    3db0:	3330      	adds	r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    3db2:	f805 cb02 	strb.w	ip, [r5], #2
		*buf++ = (decexp % 10) + '0';
    3db6:	704b      	strb	r3, [r1, #1]
		|| (conv->pad0_pre_exp > 0);
    3db8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3dba:	2b00      	cmp	r3, #0
    3dbc:	dc43      	bgt.n	3e46 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3ae>
    3dbe:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3dc0:	2b00      	cmp	r3, #0
    3dc2:	bfd4      	ite	le
    3dc4:	2300      	movle	r3, #0
    3dc6:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
    3dc8:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
    3dcc:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
    3dd0:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
    3dd2:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
	*buf = 0;
    3dd6:	702b      	strb	r3, [r5, #0]
	return bps;
    3dd8:	e5f8      	b.n	39cc <cbvprintf+0x758>
		*buf = _get_digit(&fract, &digit_count);
    3dda:	a907      	add	r1, sp, #28
    3ddc:	a808      	add	r0, sp, #32
    3dde:	e9cd 2304 	strd	r2, r3, [sp, #16]
    3de2:	f018 fd6c 	bl	1c8be <_get_digit>
		if (*buf++ != '0') {
    3de6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		if (conv->flag_hash || (precision > 0)) {
    3dea:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		*buf = _get_digit(&fract, &digit_count);
    3dee:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
		if (*buf++ != '0') {
    3df2:	2830      	cmp	r0, #48	; 0x30
			decexp--;
    3df4:	bf18      	it	ne
    3df6:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
		if (conv->flag_hash || (precision > 0)) {
    3dfa:	0688      	lsls	r0, r1, #26
    3dfc:	d402      	bmi.n	3e04 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x36c>
    3dfe:	f1b8 0f00 	cmp.w	r8, #0
    3e02:	dd12      	ble.n	3e2a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x392>
			*buf++ = '.';
    3e04:	212e      	movs	r1, #46	; 0x2e
    3e06:	f88d 104d 	strb.w	r1, [sp, #77]	; 0x4d
    3e0a:	f10d 054e 	add.w	r5, sp, #78	; 0x4e
    3e0e:	e7a2      	b.n	3d56 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2be>
		*buf++ = _get_digit(&fract, &digit_count);
    3e10:	a907      	add	r1, sp, #28
    3e12:	a808      	add	r0, sp, #32
    3e14:	e9cd 2304 	strd	r2, r3, [sp, #16]
    3e18:	f018 fd51 	bl	1c8be <_get_digit>
		precision--;
    3e1c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    3e20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		*buf++ = _get_digit(&fract, &digit_count);
    3e24:	f805 0b01 	strb.w	r0, [r5], #1
		precision--;
    3e28:	e795      	b.n	3d56 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2be>
		if (*buf++ != '0') {
    3e2a:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
    3e2e:	e798      	b.n	3d62 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2ca>
		conv->pad0_pre_exp = 0;
    3e30:	2100      	movs	r1, #0
    3e32:	9110      	str	r1, [sp, #64]	; 0x40
		while (*--buf == '0') {
    3e34:	4628      	mov	r0, r5
    3e36:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
    3e3a:	2930      	cmp	r1, #48	; 0x30
    3e3c:	d0fa      	beq.n	3e34 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x39c>
		if (*buf != '.') {
    3e3e:	292e      	cmp	r1, #46	; 0x2e
    3e40:	bf18      	it	ne
    3e42:	4605      	movne	r5, r0
    3e44:	e792      	b.n	3d6c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2d4>
		|| (conv->pad0_pre_exp > 0);
    3e46:	2301      	movs	r3, #1
    3e48:	e7be      	b.n	3dc8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x330>
			bpe = bps + 5;
    3e4a:	4d4b      	ldr	r5, [pc, #300]	; (3f78 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4e0>)
		char sign = 0;
    3e4c:	4607      	mov	r7, r0
			bps = "(nil)";
    3e4e:	1f6a      	subs	r2, r5, #5
    3e50:	e5bd      	b.n	39ce <cbvprintf+0x75a>
		} else if (conv->altform_0) {
    3e52:	0701      	lsls	r1, r0, #28
			nj_len += 1U;
    3e54:	bf48      	it	mi
    3e56:	3301      	addmi	r3, #1
    3e58:	e5c2      	b.n	39e0 <cbvprintf+0x76c>
					OUTC(pad);
    3e5a:	4651      	mov	r1, sl
    3e5c:	4640      	mov	r0, r8
    3e5e:	9203      	str	r2, [sp, #12]
    3e60:	47c8      	blx	r9
    3e62:	2800      	cmp	r0, #0
    3e64:	9a03      	ldr	r2, [sp, #12]
    3e66:	f6bf addf 	bge.w	3a28 <cbvprintf+0x7b4>
#undef OUTS
#undef OUTC
}
    3e6a:	b01b      	add	sp, #108	; 0x6c
    3e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    3e70:	f04f 0820 	mov.w	r8, #32
    3e74:	e5d7      	b.n	3a26 <cbvprintf+0x7b2>
					pad = '0';
    3e76:	f04f 0830 	mov.w	r8, #48	; 0x30
    3e7a:	e5d4      	b.n	3a26 <cbvprintf+0x7b2>
			if (conv->specifier_a) {
    3e7c:	4690      	mov	r8, r2
    3e7e:	9b03      	ldr	r3, [sp, #12]
    3e80:	4647      	mov	r7, r8
    3e82:	4443      	add	r3, r8
				while (*cp != 'p') {
    3e84:	f818 0b01 	ldrb.w	r0, [r8], #1
    3e88:	2870      	cmp	r0, #112	; 0x70
    3e8a:	d11e      	bne.n	3eca <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x432>
			while (pad_len-- > 0) {
    3e8c:	461e      	mov	r6, r3
    3e8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3e90:	eb03 0806 	add.w	r8, r3, r6
    3e94:	eba8 0306 	sub.w	r3, r8, r6
    3e98:	2b00      	cmp	r3, #0
    3e9a:	dc3b      	bgt.n	3f14 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x47c>
			OUTS(cp, bpe);
    3e9c:	462b      	mov	r3, r5
    3e9e:	463a      	mov	r2, r7
			OUTS(bps, bpe);
    3ea0:	4651      	mov	r1, sl
    3ea2:	4648      	mov	r0, r9
    3ea4:	f018 fd68 	bl	1c978 <outs>
    3ea8:	2800      	cmp	r0, #0
    3eaa:	dbde      	blt.n	3e6a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3d2>
    3eac:	4430      	add	r0, r6
			while (pad_len-- > 0) {
    3eae:	4606      	mov	r6, r0
    3eb0:	4483      	add	fp, r0
		while (width > 0) {
    3eb2:	ebab 0306 	sub.w	r3, fp, r6
    3eb6:	2b00      	cmp	r3, #0
    3eb8:	f77f ac41 	ble.w	373e <cbvprintf+0x4ca>
			OUTC(' ');
    3ebc:	4651      	mov	r1, sl
    3ebe:	2020      	movs	r0, #32
    3ec0:	47c8      	blx	r9
    3ec2:	2800      	cmp	r0, #0
    3ec4:	dbd1      	blt.n	3e6a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3d2>
    3ec6:	3601      	adds	r6, #1
			--width;
    3ec8:	e7f3      	b.n	3eb2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x41a>
					OUTC(*cp++);
    3eca:	4651      	mov	r1, sl
    3ecc:	47c8      	blx	r9
    3ece:	2800      	cmp	r0, #0
    3ed0:	dad5      	bge.n	3e7e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3e6>
    3ed2:	e7ca      	b.n	3e6a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3d2>
					OUTC(*cp++);
    3ed4:	4651      	mov	r1, sl
    3ed6:	47c8      	blx	r9
    3ed8:	2800      	cmp	r0, #0
    3eda:	f6bf adc6 	bge.w	3a6a <cbvprintf+0x7f6>
    3ede:	e7c4      	b.n	3e6a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3d2>
						OUTC('0');
    3ee0:	4651      	mov	r1, sl
    3ee2:	2030      	movs	r0, #48	; 0x30
    3ee4:	47c8      	blx	r9
    3ee6:	2800      	cmp	r0, #0
    3ee8:	f6bf add1 	bge.w	3a8e <cbvprintf+0x81a>
    3eec:	e7bd      	b.n	3e6a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3d2>
						OUTC('0');
    3eee:	4651      	mov	r1, sl
    3ef0:	2030      	movs	r0, #48	; 0x30
    3ef2:	47c8      	blx	r9
    3ef4:	3f01      	subs	r7, #1
    3ef6:	e5d8      	b.n	3aaa <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x12>
					OUTC(*cp++);
    3ef8:	4651      	mov	r1, sl
    3efa:	47c8      	blx	r9
    3efc:	2800      	cmp	r0, #0
    3efe:	dbb4      	blt.n	3e6a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3d2>
    3f00:	4647      	mov	r7, r8
    3f02:	eb06 0308 	add.w	r3, r6, r8
				while (isdigit((int)*cp)) {
    3f06:	f818 0b01 	ldrb.w	r0, [r8], #1
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    3f0a:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
    3f0e:	2a09      	cmp	r2, #9
    3f10:	d9f2      	bls.n	3ef8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x460>
    3f12:	e7bb      	b.n	3e8c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3f4>
				OUTC('0');
    3f14:	4651      	mov	r1, sl
    3f16:	2030      	movs	r0, #48	; 0x30
    3f18:	47c8      	blx	r9
    3f1a:	2800      	cmp	r0, #0
    3f1c:	dba5      	blt.n	3e6a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3d2>
    3f1e:	3601      	adds	r6, #1
    3f20:	e7b8      	b.n	3e94 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3fc>
			if (conv->altform_0c | conv->altform_0) {
    3f22:	06d8      	lsls	r0, r3, #27
    3f24:	d401      	bmi.n	3f2a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x492>
    3f26:	0719      	lsls	r1, r3, #28
    3f28:	d507      	bpl.n	3f3a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4a2>
				OUTC('0');
    3f2a:	4651      	mov	r1, sl
    3f2c:	2030      	movs	r0, #48	; 0x30
    3f2e:	9203      	str	r2, [sp, #12]
    3f30:	47c8      	blx	r9
    3f32:	2800      	cmp	r0, #0
    3f34:	db99      	blt.n	3e6a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3d2>
    3f36:	9a03      	ldr	r2, [sp, #12]
    3f38:	3601      	adds	r6, #1
			if (conv->altform_0c) {
    3f3a:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    3f3e:	06db      	lsls	r3, r3, #27
    3f40:	d508      	bpl.n	3f54 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4bc>
				OUTC(conv->specifier);
    3f42:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
    3f46:	9203      	str	r2, [sp, #12]
    3f48:	4651      	mov	r1, sl
    3f4a:	47c8      	blx	r9
    3f4c:	2800      	cmp	r0, #0
    3f4e:	db8c      	blt.n	3e6a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3d2>
    3f50:	9a03      	ldr	r2, [sp, #12]
    3f52:	3601      	adds	r6, #1
			while (pad_len-- > 0) {
    3f54:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    3f56:	4437      	add	r7, r6
    3f58:	1bbb      	subs	r3, r7, r6
    3f5a:	2b00      	cmp	r3, #0
    3f5c:	dc01      	bgt.n	3f62 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4ca>
			OUTS(bps, bpe);
    3f5e:	462b      	mov	r3, r5
    3f60:	e79e      	b.n	3ea0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x408>
				OUTC('0');
    3f62:	4651      	mov	r1, sl
    3f64:	2030      	movs	r0, #48	; 0x30
    3f66:	9203      	str	r2, [sp, #12]
    3f68:	47c8      	blx	r9
    3f6a:	2800      	cmp	r0, #0
    3f6c:	f6ff af7d 	blt.w	3e6a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3d2>
    3f70:	9a03      	ldr	r2, [sp, #12]
    3f72:	3601      	adds	r6, #1
    3f74:	e7f0      	b.n	3f58 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4c0>
    3f76:	bf00      	nop
    3f78:	00027365 	.word	0x00027365

00003f7c <class_handler>:
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    3f7c:	4b0c      	ldr	r3, [pc, #48]	; (3fb0 <class_handler+0x34>)
{
    3f7e:	b4f0      	push	{r4, r5, r6, r7}
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    3f80:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3f82:	4e0c      	ldr	r6, [pc, #48]	; (3fb4 <class_handler+0x38>)
    3f84:	4b0c      	ldr	r3, [pc, #48]	; (3fb8 <class_handler+0x3c>)
    3f86:	42b3      	cmp	r3, r6
    3f88:	d303      	bcc.n	3f92 <class_handler+0x16>
			return iface->class_handler(pSetup, len, data);
		}
	}

	return -ENOTSUP;
}
    3f8a:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3f8e:	bcf0      	pop	{r4, r5, r6, r7}
    3f90:	4770      	bx	lr
		if_descr = cfg_data->interface_descriptor;
    3f92:	685d      	ldr	r5, [r3, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    3f94:	42bd      	cmp	r5, r7
    3f96:	d309      	bcc.n	3fac <class_handler+0x30>
		if (iface->class_handler &&
    3f98:	691c      	ldr	r4, [r3, #16]
    3f9a:	b13c      	cbz	r4, 3fac <class_handler+0x30>
		    if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    3f9c:	f895 c002 	ldrb.w	ip, [r5, #2]
    3fa0:	7905      	ldrb	r5, [r0, #4]
		if (iface->class_handler &&
    3fa2:	45ac      	cmp	ip, r5
    3fa4:	d102      	bne.n	3fac <class_handler+0x30>
			return iface->class_handler(pSetup, len, data);
    3fa6:	4623      	mov	r3, r4
}
    3fa8:	bcf0      	pop	{r4, r5, r6, r7}
			return iface->class_handler(pSetup, len, data);
    3faa:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3fac:	3324      	adds	r3, #36	; 0x24
    3fae:	e7ea      	b.n	3f86 <class_handler+0xa>
    3fb0:	200020b0 	.word	0x200020b0
    3fb4:	200011cc 	.word	0x200011cc
    3fb8:	200011a8 	.word	0x200011a8

00003fbc <custom_handler>:

static int custom_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    3fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3fc0:	4c13      	ldr	r4, [pc, #76]	; (4010 <custom_handler+0x54>)
    3fc2:	f8df 8050 	ldr.w	r8, [pc, #80]	; 4014 <custom_handler+0x58>
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    3fc6:	f8df 9050 	ldr.w	r9, [pc, #80]	; 4018 <custom_handler+0x5c>
{
    3fca:	4605      	mov	r5, r0
    3fcc:	460e      	mov	r6, r1
    3fce:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3fd0:	4544      	cmp	r4, r8
    3fd2:	d303      	bcc.n	3fdc <custom_handler+0x20>
			}
		}
	}

	return -ENOTSUP;
}
    3fd4:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3fd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if_descr = cfg_data->interface_descriptor;
    3fdc:	6862      	ldr	r2, [r4, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    3fde:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
    3fe2:	429a      	cmp	r2, r3
    3fe4:	d312      	bcc.n	400c <custom_handler+0x50>
		if (iface->custom_handler == NULL) {
    3fe6:	69a3      	ldr	r3, [r4, #24]
    3fe8:	b183      	cbz	r3, 400c <custom_handler+0x50>
		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    3fea:	7890      	ldrb	r0, [r2, #2]
    3fec:	7929      	ldrb	r1, [r5, #4]
    3fee:	4288      	cmp	r0, r1
    3ff0:	d105      	bne.n	3ffe <custom_handler+0x42>
			return iface->custom_handler(pSetup, len, data);
    3ff2:	463a      	mov	r2, r7
    3ff4:	4631      	mov	r1, r6
    3ff6:	4628      	mov	r0, r5
}
    3ff8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return iface->custom_handler(pSetup, len, data);
    3ffc:	4718      	bx	r3
			if (if_descr->bInterfaceClass == USB_BCC_AUDIO) {
    3ffe:	7952      	ldrb	r2, [r2, #5]
    4000:	2a01      	cmp	r2, #1
    4002:	d103      	bne.n	400c <custom_handler+0x50>
				(void)iface->custom_handler(pSetup, len, data);
    4004:	463a      	mov	r2, r7
    4006:	4631      	mov	r1, r6
    4008:	4628      	mov	r0, r5
    400a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    400c:	3424      	adds	r4, #36	; 0x24
    400e:	e7df      	b.n	3fd0 <custom_handler+0x14>
    4010:	200011a8 	.word	0x200011a8
    4014:	200011cc 	.word	0x200011cc
    4018:	200020b0 	.word	0x200020b0

0000401c <vendor_handler>:

static int vendor_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    401c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (!usb_handle_os_desc_feature(pSetup, len, data)) {
			return 0;
		}
	}

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    4020:	4c0b      	ldr	r4, [pc, #44]	; (4050 <vendor_handler+0x34>)
    4022:	f8df 8030 	ldr.w	r8, [pc, #48]	; 4054 <vendor_handler+0x38>
{
    4026:	4605      	mov	r5, r0
    4028:	460e      	mov	r6, r1
    402a:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    402c:	4544      	cmp	r4, r8
    402e:	d302      	bcc.n	4036 <vendor_handler+0x1a>
				return 0;
			}
		}
	}

	return -ENOTSUP;
    4030:	f06f 0085 	mvn.w	r0, #133	; 0x85
    4034:	e009      	b.n	404a <vendor_handler+0x2e>
		if (iface->vendor_handler) {
    4036:	6963      	ldr	r3, [r4, #20]
    4038:	b90b      	cbnz	r3, 403e <vendor_handler+0x22>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    403a:	3424      	adds	r4, #36	; 0x24
    403c:	e7f6      	b.n	402c <vendor_handler+0x10>
			if (!iface->vendor_handler(pSetup, len, data)) {
    403e:	463a      	mov	r2, r7
    4040:	4631      	mov	r1, r6
    4042:	4628      	mov	r0, r5
    4044:	4798      	blx	r3
    4046:	2800      	cmp	r0, #0
    4048:	d1f7      	bne.n	403a <vendor_handler+0x1e>
}
    404a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    404e:	bf00      	nop
    4050:	200011a8 	.word	0x200011a8
    4054:	200011cc 	.word	0x200011cc

00004058 <set_endpoint>:
{
    4058:	b507      	push	{r0, r1, r2, lr}
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
    405a:	7883      	ldrb	r3, [r0, #2]
    405c:	f88d 3000 	strb.w	r3, [sp]
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
    4060:	7903      	ldrb	r3, [r0, #4]
    4062:	7942      	ldrb	r2, [r0, #5]
    4064:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    4068:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
    406c:	78c3      	ldrb	r3, [r0, #3]
	ret = usb_dc_ep_configure(&ep_cfg);
    406e:	4668      	mov	r0, sp
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
    4070:	f003 0303 	and.w	r3, r3, #3
    4074:	f88d 3004 	strb.w	r3, [sp, #4]
	ret = usb_dc_ep_configure(&ep_cfg);
    4078:	f013 fbd8 	bl	1782c <usb_dc_ep_configure>
	if (ret == -EALREADY) {
    407c:	f110 0f78 	cmn.w	r0, #120	; 0x78
    4080:	d004      	beq.n	408c <set_endpoint+0x34>
	} else if (ret) {
    4082:	b118      	cbz	r0, 408c <set_endpoint+0x34>
		return false;
    4084:	2000      	movs	r0, #0
}
    4086:	b003      	add	sp, #12
    4088:	f85d fb04 	ldr.w	pc, [sp], #4
	ret = usb_dc_ep_enable(ep_cfg.ep_addr);
    408c:	f89d 0000 	ldrb.w	r0, [sp]
    4090:	f013 fc52 	bl	17938 <usb_dc_ep_enable>
	if (ret == -EALREADY) {
    4094:	f110 0f78 	cmn.w	r0, #120	; 0x78
    4098:	d001      	beq.n	409e <set_endpoint+0x46>
	} else if (ret) {
    409a:	2800      	cmp	r0, #0
    409c:	d1f2      	bne.n	4084 <set_endpoint+0x2c>
	usb_dev.configured = true;
    409e:	4b02      	ldr	r3, [pc, #8]	; (40a8 <set_endpoint+0x50>)
    40a0:	2001      	movs	r0, #1
    40a2:	f883 00b9 	strb.w	r0, [r3, #185]	; 0xb9
	return true;
    40a6:	e7ee      	b.n	4086 <set_endpoint+0x2e>
    40a8:	200020b0 	.word	0x200020b0

000040ac <usb_reset_alt_setting>:
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
    40ac:	4802      	ldr	r0, [pc, #8]	; (40b8 <usb_reset_alt_setting+0xc>)
    40ae:	2208      	movs	r2, #8
    40b0:	2100      	movs	r1, #0
    40b2:	f019 bfc9 	b.w	1e048 <memset>
    40b6:	bf00      	nop
    40b8:	2000216b 	.word	0x2000216b

000040bc <is_ep_valid.part.0>:
static bool is_ep_valid(uint8_t ep)
    40bc:	b570      	push	{r4, r5, r6, lr}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    40be:	4b0b      	ldr	r3, [pc, #44]	; (40ec <is_ep_valid.part.0+0x30>)
    40c0:	4c0b      	ldr	r4, [pc, #44]	; (40f0 <is_ep_valid.part.0+0x34>)
    40c2:	42a3      	cmp	r3, r4
    40c4:	d301      	bcc.n	40ca <is_ep_valid.part.0+0xe>
	return false;
    40c6:	2000      	movs	r0, #0
}
    40c8:	bd70      	pop	{r4, r5, r6, pc}
		ep_data = cfg_data->endpoint;
    40ca:	6a19      	ldr	r1, [r3, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    40cc:	7f1e      	ldrb	r6, [r3, #28]
    40ce:	2200      	movs	r2, #0
			if (ep_data[n].ep_addr == ep) {
    40d0:	3904      	subs	r1, #4
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    40d2:	b2d5      	uxtb	r5, r2
    40d4:	42ae      	cmp	r6, r5
    40d6:	d801      	bhi.n	40dc <is_ep_valid.part.0+0x20>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    40d8:	3324      	adds	r3, #36	; 0x24
    40da:	e7f2      	b.n	40c2 <is_ep_valid.part.0+0x6>
			if (ep_data[n].ep_addr == ep) {
    40dc:	3201      	adds	r2, #1
    40de:	f811 5032 	ldrb.w	r5, [r1, r2, lsl #3]
    40e2:	4285      	cmp	r5, r0
    40e4:	d1f5      	bne.n	40d2 <is_ep_valid.part.0+0x16>
				return true;
    40e6:	2001      	movs	r0, #1
    40e8:	e7ee      	b.n	40c8 <is_ep_valid.part.0+0xc>
    40ea:	bf00      	nop
    40ec:	200011a8 	.word	0x200011a8
    40f0:	200011cc 	.word	0x200011cc

000040f4 <usb_handle_request.constprop.0>:
	handler = usb_dev.req_handlers[type];
    40f4:	4809      	ldr	r0, [pc, #36]	; (411c <usb_handle_request.constprop.0+0x28>)
static bool usb_handle_request(struct usb_setup_packet *setup,
    40f6:	b508      	push	{r3, lr}
	uint32_t type = setup->RequestType.type;
    40f8:	7803      	ldrb	r3, [r0, #0]
    40fa:	f3c3 1341 	ubfx	r3, r3, #5, #2
	handler = usb_dev.req_handlers[type];
    40fe:	330a      	adds	r3, #10
    4100:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (handler == NULL) {
    4104:	b13b      	cbz	r3, 4116 <usb_handle_request.constprop.0+0x22>
	if ((*handler)(setup, len, data) < 0) {
    4106:	f100 0208 	add.w	r2, r0, #8
    410a:	f100 0110 	add.w	r1, r0, #16
    410e:	4798      	blx	r3
    4110:	43c0      	mvns	r0, r0
    4112:	0fc0      	lsrs	r0, r0, #31
}
    4114:	bd08      	pop	{r3, pc}
		return false;
    4116:	4618      	mov	r0, r3
    4118:	e7fc      	b.n	4114 <usb_handle_request.constprop.0+0x20>
    411a:	bf00      	nop
    411c:	200020b0 	.word	0x200020b0

00004120 <forward_status_cb>:
	if (status == USB_DC_DISCONNECTED) {
    4120:	2804      	cmp	r0, #4
{
    4122:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4126:	f8df 8088 	ldr.w	r8, [pc, #136]	; 41b0 <forward_status_cb+0x90>
    412a:	4604      	mov	r4, r0
    412c:	460e      	mov	r6, r1
	if (status == USB_DC_DISCONNECTED) {
    412e:	d10e      	bne.n	414e <forward_status_cb+0x2e>
		usb_reset_alt_setting();
    4130:	f7ff ffbc 	bl	40ac <usb_reset_alt_setting>
		if (usb_dev.configured) {
    4134:	f8df 907c 	ldr.w	r9, [pc, #124]	; 41b4 <forward_status_cb+0x94>
    4138:	f899 30b9 	ldrb.w	r3, [r9, #185]	; 0xb9
    413c:	b15b      	cbz	r3, 4156 <forward_status_cb+0x36>
			usb_cancel_transfers();
    413e:	f000 fdb5 	bl	4cac <usb_cancel_transfers>
			if (status == USB_DC_DISCONNECTED || status == USB_DC_RESET) {
    4142:	2c04      	cmp	r4, #4
    4144:	d001      	beq.n	414a <forward_status_cb+0x2a>
    4146:	2c01      	cmp	r4, #1
    4148:	d105      	bne.n	4156 <forward_status_cb+0x36>
    414a:	4d1b      	ldr	r5, [pc, #108]	; (41b8 <forward_status_cb+0x98>)
    414c:	e016      	b.n	417c <forward_status_cb+0x5c>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_SUSPEND || status == USB_DC_RESET) {
    414e:	2805      	cmp	r0, #5
    4150:	d0f0      	beq.n	4134 <forward_status_cb+0x14>
    4152:	2801      	cmp	r0, #1
    4154:	d0ee      	beq.n	4134 <forward_status_cb+0x14>
    4156:	4d18      	ldr	r5, [pc, #96]	; (41b8 <forward_status_cb+0x98>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    4158:	4545      	cmp	r5, r8
    415a:	d31e      	bcc.n	419a <forward_status_cb+0x7a>
	if (usb_dev.user_status_callback) {
    415c:	4b15      	ldr	r3, [pc, #84]	; (41b4 <forward_status_cb+0x94>)
    415e:	6a1b      	ldr	r3, [r3, #32]
    4160:	b31b      	cbz	r3, 41aa <forward_status_cb+0x8a>
		usb_dev.user_status_callback(status, param);
    4162:	4631      	mov	r1, r6
    4164:	4620      	mov	r0, r4
}
    4166:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		usb_dev.user_status_callback(status, param);
    416a:	4718      	bx	r3
		ep_data = cfg_data->endpoint;
    416c:	f8d5 a020 	ldr.w	sl, [r5, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    4170:	2700      	movs	r7, #0
    4172:	7f2a      	ldrb	r2, [r5, #28]
    4174:	b2fb      	uxtb	r3, r7
    4176:	429a      	cmp	r2, r3
    4178:	d803      	bhi.n	4182 <forward_status_cb+0x62>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    417a:	3524      	adds	r5, #36	; 0x24
    417c:	4545      	cmp	r5, r8
    417e:	d3f5      	bcc.n	416c <forward_status_cb+0x4c>
    4180:	e007      	b.n	4192 <forward_status_cb+0x72>
	return usb_dc_ep_disable(ep_data->ep_addr);
    4182:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
			if (ret < 0) {
    4186:	3701      	adds	r7, #1
	return usb_dc_ep_disable(ep_data->ep_addr);
    4188:	7918      	ldrb	r0, [r3, #4]
    418a:	f013 fbff 	bl	1798c <usb_dc_ep_disable>
			if (ret < 0) {
    418e:	2800      	cmp	r0, #0
    4190:	daef      	bge.n	4172 <forward_status_cb+0x52>
				usb_dev.configured = false;
    4192:	2300      	movs	r3, #0
    4194:	f889 30b9 	strb.w	r3, [r9, #185]	; 0xb9
    4198:	e7dd      	b.n	4156 <forward_status_cb+0x36>
		if (cfg_data->cb_usb_status) {
    419a:	68eb      	ldr	r3, [r5, #12]
    419c:	b11b      	cbz	r3, 41a6 <forward_status_cb+0x86>
			cfg_data->cb_usb_status(cfg_data, status, param);
    419e:	4632      	mov	r2, r6
    41a0:	4621      	mov	r1, r4
    41a2:	4628      	mov	r0, r5
    41a4:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    41a6:	3524      	adds	r5, #36	; 0x24
    41a8:	e7d6      	b.n	4158 <forward_status_cb+0x38>
}
    41aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    41ae:	bf00      	nop
    41b0:	200011cc 	.word	0x200011cc
    41b4:	200020b0 	.word	0x200020b0
    41b8:	200011a8 	.word	0x200011a8

000041bc <usb_halt_endpoint_req.isra.0>:
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    41bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t ep = setup->wIndex;
    41be:	b2c4      	uxtb	r4, r0
	if (USB_EP_GET_IDX(ep) == 0) {
    41c0:	0663      	lsls	r3, r4, #25
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    41c2:	460d      	mov	r5, r1
	uint8_t ep = setup->wIndex;
    41c4:	f88d 4007 	strb.w	r4, [sp, #7]
	if (USB_EP_GET_IDX(ep) == 0) {
    41c8:	d007      	beq.n	41da <usb_halt_endpoint_req.isra.0+0x1e>
    41ca:	4620      	mov	r0, r4
    41cc:	f7ff ff76 	bl	40bc <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
    41d0:	b188      	cbz	r0, 41f6 <usb_halt_endpoint_req.isra.0+0x3a>
	return (usb_dev.configuration != 0);
    41d2:	4b0f      	ldr	r3, [pc, #60]	; (4210 <usb_halt_endpoint_req.isra.0+0x54>)
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    41d4:	f893 00ba 	ldrb.w	r0, [r3, #186]	; 0xba
    41d8:	b168      	cbz	r0, 41f6 <usb_halt_endpoint_req.isra.0+0x3a>
		if (halt) {
    41da:	4e0d      	ldr	r6, [pc, #52]	; (4210 <usb_halt_endpoint_req.isra.0+0x54>)
			usb_dc_ep_set_stall(ep);
    41dc:	4620      	mov	r0, r4
		if (halt) {
    41de:	b165      	cbz	r5, 41fa <usb_halt_endpoint_req.isra.0+0x3e>
			usb_dc_ep_set_stall(ep);
    41e0:	f013 fb46 	bl	17870 <usb_dc_ep_set_stall>
			if (usb_dev.status_callback) {
    41e4:	69f3      	ldr	r3, [r6, #28]
    41e6:	b90b      	cbnz	r3, 41ec <usb_halt_endpoint_req.isra.0+0x30>
		return true;
    41e8:	2001      	movs	r0, #1
    41ea:	e004      	b.n	41f6 <usb_halt_endpoint_req.isra.0+0x3a>
				usb_dev.status_callback(USB_DC_SET_HALT, &ep);
    41ec:	2008      	movs	r0, #8
    41ee:	f10d 0107 	add.w	r1, sp, #7
    41f2:	4798      	blx	r3
		return true;
    41f4:	4628      	mov	r0, r5
}
    41f6:	b002      	add	sp, #8
    41f8:	bd70      	pop	{r4, r5, r6, pc}
			usb_dc_ep_clear_stall(ep);
    41fa:	f013 fb61 	bl	178c0 <usb_dc_ep_clear_stall>
			if (usb_dev.status_callback) {
    41fe:	69f3      	ldr	r3, [r6, #28]
    4200:	2b00      	cmp	r3, #0
    4202:	d0f1      	beq.n	41e8 <usb_halt_endpoint_req.isra.0+0x2c>
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
    4204:	f10d 0107 	add.w	r1, sp, #7
    4208:	2009      	movs	r0, #9
    420a:	4798      	blx	r3
    420c:	e7ec      	b.n	41e8 <usb_halt_endpoint_req.isra.0+0x2c>
    420e:	bf00      	nop
    4210:	200020b0 	.word	0x200020b0

00004214 <usb_handle_standard_request>:
{
    4214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (usb_dev.custom_req_handler &&
    4218:	4ea8      	ldr	r6, [pc, #672]	; (44bc <usb_handle_standard_request+0x2a8>)
    421a:	69b3      	ldr	r3, [r6, #24]
{
    421c:	4605      	mov	r5, r0
    421e:	460f      	mov	r7, r1
    4220:	4690      	mov	r8, r2
	if (usb_dev.custom_req_handler &&
    4222:	b963      	cbnz	r3, 423e <usb_handle_standard_request+0x2a>
	switch (setup->RequestType.recipient) {
    4224:	7828      	ldrb	r0, [r5, #0]
    4226:	f000 001f 	and.w	r0, r0, #31
    422a:	2801      	cmp	r0, #1
    422c:	f000 80a6 	beq.w	437c <usb_handle_standard_request+0x168>
    4230:	2802      	cmp	r0, #2
    4232:	f000 810e 	beq.w	4452 <usb_handle_standard_request+0x23e>
    4236:	b138      	cbz	r0, 4248 <usb_handle_standard_request+0x34>
		switch (setup->bRequest) {
    4238:	f06f 0015 	mvn.w	r0, #21
    423c:	e095      	b.n	436a <usb_handle_standard_request+0x156>
	    !usb_dev.custom_req_handler(setup, len, data_buf)) {
    423e:	4798      	blx	r3
	if (usb_dev.custom_req_handler &&
    4240:	2800      	cmp	r0, #0
    4242:	d1ef      	bne.n	4224 <usb_handle_standard_request+0x10>
	int rc = 0;
    4244:	2000      	movs	r0, #0
    4246:	e090      	b.n	436a <usb_handle_standard_request+0x156>
	if (usb_reqtype_is_to_host(setup)) {
    4248:	f995 2000 	ldrsb.w	r2, [r5]
		switch (setup->bRequest) {
    424c:	786b      	ldrb	r3, [r5, #1]
	if (usb_reqtype_is_to_host(setup)) {
    424e:	2a00      	cmp	r2, #0
    4250:	da31      	bge.n	42b6 <usb_handle_standard_request+0xa2>
		switch (setup->bRequest) {
    4252:	2b06      	cmp	r3, #6
	uint8_t *data = *data_buf;
    4254:	f8d8 2000 	ldr.w	r2, [r8]
		switch (setup->bRequest) {
    4258:	d010      	beq.n	427c <usb_handle_standard_request+0x68>
    425a:	2b08      	cmp	r3, #8
    425c:	d025      	beq.n	42aa <usb_handle_standard_request+0x96>
    425e:	2b00      	cmp	r3, #0
    4260:	d1ea      	bne.n	4238 <usb_handle_standard_request+0x24>
		data[0] |= USB_GET_STATUS_SELF_POWERED;
    4262:	2101      	movs	r1, #1
	data[1] = 0U;
    4264:	7053      	strb	r3, [r2, #1]
		data[0] |= USB_GET_STATUS_SELF_POWERED;
    4266:	7011      	strb	r1, [r2, #0]
		data[0] |= (usb_dev.remote_wakeup ?
    4268:	f896 10c3 	ldrb.w	r1, [r6, #195]	; 0xc3
    426c:	2900      	cmp	r1, #0
    426e:	bf18      	it	ne
    4270:	2302      	movne	r3, #2
    4272:	f043 0301 	orr.w	r3, r3, #1
    4276:	7013      	strb	r3, [r2, #0]
		*len = 2;
    4278:	2302      	movs	r3, #2
    427a:	e01a      	b.n	42b2 <usb_handle_standard_request+0x9e>
			return usb_get_descriptor(setup, len, data_buf);
    427c:	886b      	ldrh	r3, [r5, #2]
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
    427e:	0a1a      	lsrs	r2, r3, #8
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
    4280:	1f11      	subs	r1, r2, #4
    4282:	2901      	cmp	r1, #1
    4284:	d9d8      	bls.n	4238 <usb_handle_standard_request+0x24>
    4286:	2a07      	cmp	r2, #7
    4288:	d8d6      	bhi.n	4238 <usb_handle_standard_request+0x24>
	index = USB_GET_DESCRIPTOR_INDEX(setup->wValue);
    428a:	b2d9      	uxtb	r1, r3
	p = (uint8_t *)usb_dev.descriptors;
    428c:	6a73      	ldr	r3, [r6, #36]	; 0x24
	while (p[DESC_bLength] != 0U) {
    428e:	781c      	ldrb	r4, [r3, #0]
    4290:	2c00      	cmp	r4, #0
    4292:	d0d1      	beq.n	4238 <usb_handle_standard_request+0x24>
		if (p[DESC_bDescriptorType] == type) {
    4294:	785d      	ldrb	r5, [r3, #1]
    4296:	4295      	cmp	r5, r2
    4298:	d103      	bne.n	42a2 <usb_handle_standard_request+0x8e>
			if (cur_index == index) {
    429a:	4281      	cmp	r1, r0
    429c:	f000 8112 	beq.w	44c4 <usb_handle_standard_request+0x2b0>
			cur_index++;
    42a0:	3001      	adds	r0, #1
		p += p[DESC_bLength];
    42a2:	4423      	add	r3, r4
    42a4:	e7f3      	b.n	428e <usb_handle_standard_request+0x7a>
			*len = p[DESC_bLength];
    42a6:	781b      	ldrb	r3, [r3, #0]
    42a8:	e112      	b.n	44d0 <usb_handle_standard_request+0x2bc>
			data[0] = usb_dev.configuration;
    42aa:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    42ae:	7013      	strb	r3, [r2, #0]
			*len = 1;
    42b0:	2301      	movs	r3, #1
		*len = 2;
    42b2:	603b      	str	r3, [r7, #0]
		return true;
    42b4:	e059      	b.n	436a <usb_handle_standard_request+0x156>
		switch (setup->bRequest) {
    42b6:	3b01      	subs	r3, #1
    42b8:	2b08      	cmp	r3, #8
    42ba:	d8bd      	bhi.n	4238 <usb_handle_standard_request+0x24>
    42bc:	a201      	add	r2, pc, #4	; (adr r2, 42c4 <usb_handle_standard_request+0xb0>)
    42be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    42c2:	bf00      	nop
    42c4:	0000435d 	.word	0x0000435d
    42c8:	00004239 	.word	0x00004239
    42cc:	0000436f 	.word	0x0000436f
    42d0:	00004239 	.word	0x00004239
    42d4:	000042e9 	.word	0x000042e9
    42d8:	00004239 	.word	0x00004239
    42dc:	00004239 	.word	0x00004239
    42e0:	00004239 	.word	0x00004239
    42e4:	000042f5 	.word	0x000042f5
			return !usb_dc_set_address(setup->wValue);
    42e8:	78a8      	ldrb	r0, [r5, #2]
    42ea:	f013 fa8d 	bl	17808 <usb_dc_set_address>
		if (usb_handle_std_device_req(setup, len, data_buf) == false) {
    42ee:	2800      	cmp	r0, #0
    42f0:	d0a8      	beq.n	4244 <usb_handle_standard_request+0x30>
    42f2:	e7a1      	b.n	4238 <usb_handle_standard_request+0x24>
	if (setup->wValue == 0U) {
    42f4:	886c      	ldrh	r4, [r5, #2]
    42f6:	b144      	cbz	r4, 430a <usb_handle_standard_request+0xf6>
	uint8_t cur_config = 0xFF;
    42f8:	f04f 08ff 	mov.w	r8, #255	; 0xff
	uint8_t *p = (uint8_t *)usb_dev.descriptors;
    42fc:	6a77      	ldr	r7, [r6, #36]	; 0x24
	bool found = false;
    42fe:	2000      	movs	r0, #0
	uint8_t cur_alt_setting = 0xFF;
    4300:	46c1      	mov	r9, r8
	while (p[DESC_bLength] != 0U) {
    4302:	783c      	ldrb	r4, [r7, #0]
    4304:	b96c      	cbnz	r4, 4322 <usb_handle_standard_request+0x10e>
	if (found) {
    4306:	2800      	cmp	r0, #0
    4308:	d096      	beq.n	4238 <usb_handle_standard_request+0x24>
		usb_reset_alt_setting();
    430a:	f7ff fecf 	bl	40ac <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
    430e:	886b      	ldrh	r3, [r5, #2]
    4310:	f886 30ba 	strb.w	r3, [r6, #186]	; 0xba
		if (usb_dev.status_callback) {
    4314:	69f3      	ldr	r3, [r6, #28]
    4316:	2b00      	cmp	r3, #0
    4318:	d094      	beq.n	4244 <usb_handle_standard_request+0x30>
			usb_dev.status_callback(USB_DC_CONFIGURED,
    431a:	4969      	ldr	r1, [pc, #420]	; (44c0 <usb_handle_standard_request+0x2ac>)
    431c:	2003      	movs	r0, #3
    431e:	4798      	blx	r3
    4320:	e790      	b.n	4244 <usb_handle_standard_request+0x30>
		switch (p[DESC_bDescriptorType]) {
    4322:	787b      	ldrb	r3, [r7, #1]
    4324:	2b04      	cmp	r3, #4
    4326:	d00c      	beq.n	4342 <usb_handle_standard_request+0x12e>
    4328:	2b05      	cmp	r3, #5
    432a:	d00d      	beq.n	4348 <usb_handle_standard_request+0x134>
    432c:	2b02      	cmp	r3, #2
    432e:	d105      	bne.n	433c <usb_handle_standard_request+0x128>
			cur_config = p[CONF_DESC_bConfigurationValue];
    4330:	f897 8005 	ldrb.w	r8, [r7, #5]
			if (cur_config == setup->wValue) {
    4334:	886a      	ldrh	r2, [r5, #2]
				found = true;
    4336:	4542      	cmp	r2, r8
    4338:	bf08      	it	eq
    433a:	2001      	moveq	r0, #1
		p += p[DESC_bLength];
    433c:	783b      	ldrb	r3, [r7, #0]
    433e:	441f      	add	r7, r3
    4340:	e7df      	b.n	4302 <usb_handle_standard_request+0xee>
			cur_alt_setting =
    4342:	f897 9003 	ldrb.w	r9, [r7, #3]
			break;
    4346:	e7f9      	b.n	433c <usb_handle_standard_request+0x128>
			if ((cur_config != setup->wValue) ||
    4348:	886b      	ldrh	r3, [r5, #2]
    434a:	4543      	cmp	r3, r8
    434c:	d1f6      	bne.n	433c <usb_handle_standard_request+0x128>
    434e:	f1b9 0f00 	cmp.w	r9, #0
    4352:	d1f3      	bne.n	433c <usb_handle_standard_request+0x128>
			found = set_endpoint((struct usb_ep_descriptor *)p);
    4354:	4638      	mov	r0, r7
    4356:	f7ff fe7f 	bl	4058 <set_endpoint>
			break;
    435a:	e7ef      	b.n	433c <usb_handle_standard_request+0x128>
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
    435c:	886b      	ldrh	r3, [r5, #2]
    435e:	2b01      	cmp	r3, #1
    4360:	f47f af6a 	bne.w	4238 <usb_handle_standard_request+0x24>
					usb_dev.remote_wakeup = false;
    4364:	2000      	movs	r0, #0
    4366:	f886 00c3 	strb.w	r0, [r6, #195]	; 0xc3
}
    436a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
    436e:	886b      	ldrh	r3, [r5, #2]
    4370:	2b01      	cmp	r3, #1
    4372:	f47f af61 	bne.w	4238 <usb_handle_standard_request+0x24>
					usb_dev.remote_wakeup = true;
    4376:	f886 30c3 	strb.w	r3, [r6, #195]	; 0xc3
					return true;
    437a:	e763      	b.n	4244 <usb_handle_standard_request+0x30>
	if (!is_device_configured() ||
    437c:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    4380:	2b00      	cmp	r3, #0
    4382:	f43f af59 	beq.w	4238 <usb_handle_standard_request+0x24>
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    4386:	6a74      	ldr	r4, [r6, #36]	; 0x24
	   (!is_interface_valid((uint8_t)setup->wIndex))) {
    4388:	f8b5 c004 	ldrh.w	ip, [r5, #4]
    438c:	7928      	ldrb	r0, [r5, #4]
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    438e:	4623      	mov	r3, r4
	while (p[DESC_bLength] != 0U) {
    4390:	781a      	ldrb	r2, [r3, #0]
    4392:	2a00      	cmp	r2, #0
    4394:	f43f af50 	beq.w	4238 <usb_handle_standard_request+0x24>
		if (p[DESC_bDescriptorType] == USB_DESC_CONFIGURATION) {
    4398:	7859      	ldrb	r1, [r3, #1]
    439a:	2902      	cmp	r1, #2
    439c:	d104      	bne.n	43a8 <usb_handle_standard_request+0x194>
			if (interface < cfg_descr->bNumInterfaces) {
    439e:	f893 e004 	ldrb.w	lr, [r3, #4]
    43a2:	4586      	cmp	lr, r0
    43a4:	f200 8096 	bhi.w	44d4 <usb_handle_standard_request+0x2c0>
		p += p[DESC_bLength];
    43a8:	4413      	add	r3, r2
    43aa:	e7f1      	b.n	4390 <usb_handle_standard_request+0x17c>
			data[0] = 0U;
    43ac:	7010      	strb	r0, [r2, #0]
			data[1] = 0U;
    43ae:	7050      	strb	r0, [r2, #1]
			*len = 2;
    43b0:	6039      	str	r1, [r7, #0]
			return true;
    43b2:	e7da      	b.n	436a <usb_handle_standard_request+0x156>
		p += p[DESC_bLength];
    43b4:	440c      	add	r4, r1
    43b6:	e09b      	b.n	44f0 <usb_handle_standard_request+0x2dc>
		if (setup->bRequest == USB_SREQ_SET_INTERFACE) {
    43b8:	280b      	cmp	r0, #11
    43ba:	f47f af3d 	bne.w	4238 <usb_handle_standard_request+0x24>
	bool ret = false;
    43be:	2700      	movs	r7, #0
	uint8_t cur_iface = 0xFF;
    43c0:	f04f 0aff 	mov.w	sl, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
    43c4:	46d0      	mov	r8, sl
	const uint8_t *if_desc = NULL;
    43c6:	46b9      	mov	r9, r7
    43c8:	e006      	b.n	43d8 <usb_handle_standard_request+0x1c4>
		switch (p[DESC_bDescriptorType]) {
    43ca:	7863      	ldrb	r3, [r4, #1]
    43cc:	2b04      	cmp	r3, #4
    43ce:	d00f      	beq.n	43f0 <usb_handle_standard_request+0x1dc>
    43d0:	2b05      	cmp	r3, #5
    43d2:	d022      	beq.n	441a <usb_handle_standard_request+0x206>
		p += p[DESC_bLength];
    43d4:	7823      	ldrb	r3, [r4, #0]
    43d6:	441c      	add	r4, r3
	while (p[DESC_bLength] != 0U) {
    43d8:	7823      	ldrb	r3, [r4, #0]
    43da:	2b00      	cmp	r3, #0
    43dc:	d1f5      	bne.n	43ca <usb_handle_standard_request+0x1b6>
	if (usb_dev.status_callback) {
    43de:	69f3      	ldr	r3, [r6, #28]
    43e0:	b113      	cbz	r3, 43e8 <usb_handle_standard_request+0x1d4>
		usb_dev.status_callback(USB_DC_INTERFACE, if_desc);
    43e2:	4649      	mov	r1, r9
    43e4:	2007      	movs	r0, #7
    43e6:	4798      	blx	r3
		if (usb_handle_std_interface_req(setup, len, data_buf) == false) {
    43e8:	2f00      	cmp	r7, #0
    43ea:	f47f af2b 	bne.w	4244 <usb_handle_standard_request+0x30>
    43ee:	e723      	b.n	4238 <usb_handle_standard_request+0x24>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    43f0:	f894 a002 	ldrb.w	sl, [r4, #2]
			if (cur_iface == setup->wIndex &&
    43f4:	88aa      	ldrh	r2, [r5, #4]
			cur_alt_setting = p[INTF_DESC_bAlternateSetting];
    43f6:	f894 8003 	ldrb.w	r8, [r4, #3]
			if (cur_iface == setup->wIndex &&
    43fa:	4592      	cmp	sl, r2
    43fc:	4653      	mov	r3, sl
    43fe:	d1e9      	bne.n	43d4 <usb_handle_standard_request+0x1c0>
			    cur_alt_setting == setup->wValue) {
    4400:	8869      	ldrh	r1, [r5, #2]
			if (cur_iface == setup->wIndex &&
    4402:	4588      	cmp	r8, r1
    4404:	fa1f f288 	uxth.w	r2, r8
    4408:	d1e4      	bne.n	43d4 <usb_handle_standard_request+0x1c0>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    440a:	2b07      	cmp	r3, #7
    440c:	d81e      	bhi.n	444c <usb_handle_standard_request+0x238>
		usb_dev.alt_setting[iface] = alt_setting;
    440e:	4433      	add	r3, r6
		return true;
    4410:	46a1      	mov	r9, r4
				ret = usb_set_alt_setting(setup->wIndex,
    4412:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
	return true;
    4416:	2701      	movs	r7, #1
    4418:	e7dc      	b.n	43d4 <usb_handle_standard_request+0x1c0>
			if (cur_iface == setup->wIndex) {
    441a:	88ab      	ldrh	r3, [r5, #4]
    441c:	4553      	cmp	r3, sl
    441e:	d1d9      	bne.n	43d4 <usb_handle_standard_request+0x1c0>
	if (cur_alt_setting != alt_setting) {
    4420:	78ab      	ldrb	r3, [r5, #2]
    4422:	4543      	cmp	r3, r8
    4424:	d00d      	beq.n	4442 <usb_handle_standard_request+0x22e>
		ret = reset_endpoint(ep_desc);
    4426:	78a7      	ldrb	r7, [r4, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
    4428:	4638      	mov	r0, r7
    442a:	f000 fc21 	bl	4c70 <usb_cancel_transfer>
	ret = usb_dc_ep_disable(ep_cfg.ep_addr);
    442e:	4638      	mov	r0, r7
    4430:	f013 faac 	bl	1798c <usb_dc_ep_disable>
	if (ret == -EALREADY) {
    4434:	f110 0f78 	cmn.w	r0, #120	; 0x78
    4438:	d0ed      	beq.n	4416 <usb_handle_standard_request+0x202>
	} else if (ret) {
    443a:	fab0 f780 	clz	r7, r0
    443e:	097f      	lsrs	r7, r7, #5
    4440:	e7c8      	b.n	43d4 <usb_handle_standard_request+0x1c0>
		ret = set_endpoint(ep_desc);
    4442:	4620      	mov	r0, r4
    4444:	f7ff fe08 	bl	4058 <set_endpoint>
    4448:	4607      	mov	r7, r0
    444a:	e7c3      	b.n	43d4 <usb_handle_standard_request+0x1c0>
    444c:	46a1      	mov	r9, r4
	return false;
    444e:	2700      	movs	r7, #0
    4450:	e7c0      	b.n	43d4 <usb_handle_standard_request+0x1c0>
	if (usb_reqtype_is_to_host(setup)) {
    4452:	f995 2000 	ldrsb.w	r2, [r5]
		switch (setup->bRequest) {
    4456:	786b      	ldrb	r3, [r5, #1]
	if (usb_reqtype_is_to_host(setup)) {
    4458:	2a00      	cmp	r2, #0
    445a:	da19      	bge.n	4490 <usb_handle_standard_request+0x27c>
		if (setup->bRequest == USB_SREQ_GET_STATUS) {
    445c:	2b00      	cmp	r3, #0
    445e:	f47f aeeb 	bne.w	4238 <usb_handle_standard_request+0x24>
	uint8_t ep = setup->wIndex;
    4462:	792c      	ldrb	r4, [r5, #4]
	if (USB_EP_GET_IDX(ep) == 0) {
    4464:	0663      	lsls	r3, r4, #25
    4466:	d00a      	beq.n	447e <usb_handle_standard_request+0x26a>
    4468:	4620      	mov	r0, r4
    446a:	f7ff fe27 	bl	40bc <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
    446e:	2800      	cmp	r0, #0
    4470:	f43f aee2 	beq.w	4238 <usb_handle_standard_request+0x24>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    4474:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    4478:	2b00      	cmp	r3, #0
    447a:	f43f aedd 	beq.w	4238 <usb_handle_standard_request+0x24>
    447e:	f8d8 5000 	ldr.w	r5, [r8]
		usb_dc_ep_is_stalled(ep, &data[0]);
    4482:	4620      	mov	r0, r4
    4484:	4629      	mov	r1, r5
    4486:	f013 fa3b 	bl	17900 <usb_dc_ep_is_stalled>
		data[1] = 0U;
    448a:	2000      	movs	r0, #0
    448c:	7068      	strb	r0, [r5, #1]
    448e:	e6f3      	b.n	4278 <usb_handle_standard_request+0x64>
		switch (setup->bRequest) {
    4490:	2b01      	cmp	r3, #1
    4492:	d008      	beq.n	44a6 <usb_handle_standard_request+0x292>
    4494:	2b03      	cmp	r3, #3
    4496:	f47f aecf 	bne.w	4238 <usb_handle_standard_request+0x24>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    449a:	886b      	ldrh	r3, [r5, #2]
    449c:	2b00      	cmp	r3, #0
    449e:	f47f aecb 	bne.w	4238 <usb_handle_standard_request+0x24>
				return usb_halt_endpoint_req(setup, true);
    44a2:	2101      	movs	r1, #1
    44a4:	e003      	b.n	44ae <usb_handle_standard_request+0x29a>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    44a6:	8869      	ldrh	r1, [r5, #2]
    44a8:	2900      	cmp	r1, #0
    44aa:	f47f aec5 	bne.w	4238 <usb_handle_standard_request+0x24>
				return usb_halt_endpoint_req(setup, true);
    44ae:	88a8      	ldrh	r0, [r5, #4]
    44b0:	f7ff fe84 	bl	41bc <usb_halt_endpoint_req.isra.0>
		if (usb_handle_std_endpoint_req(setup, len, data_buf) == false) {
    44b4:	2800      	cmp	r0, #0
    44b6:	f47f aec5 	bne.w	4244 <usb_handle_standard_request+0x30>
    44ba:	e6bd      	b.n	4238 <usb_handle_standard_request+0x24>
    44bc:	200020b0 	.word	0x200020b0
    44c0:	2000216a 	.word	0x2000216a
		if (type == USB_DESC_CONFIGURATION) {
    44c4:	2a02      	cmp	r2, #2
		*data = p;
    44c6:	f8c8 3000 	str.w	r3, [r8]
		if (type == USB_DESC_CONFIGURATION) {
    44ca:	f47f aeec 	bne.w	42a6 <usb_handle_standard_request+0x92>
			*len = (p[CONF_DESC_wTotalLength]) |
    44ce:	885b      	ldrh	r3, [r3, #2]
				*len = 1;
    44d0:	603b      	str	r3, [r7, #0]
    44d2:	e6b7      	b.n	4244 <usb_handle_standard_request+0x30>
	if (usb_reqtype_is_to_host(setup)) {
    44d4:	f995 3000 	ldrsb.w	r3, [r5]
		switch (setup->bRequest) {
    44d8:	7868      	ldrb	r0, [r5, #1]
	if (usb_reqtype_is_to_host(setup)) {
    44da:	2b00      	cmp	r3, #0
    44dc:	f6bf af6c 	bge.w	43b8 <usb_handle_standard_request+0x1a4>
    44e0:	f8d8 2000 	ldr.w	r2, [r8]
		switch (setup->bRequest) {
    44e4:	2800      	cmp	r0, #0
    44e6:	f43f af61 	beq.w	43ac <usb_handle_standard_request+0x198>
    44ea:	280a      	cmp	r0, #10
    44ec:	f47f aea4 	bne.w	4238 <usb_handle_standard_request+0x24>
	while (p[DESC_bLength] != 0U) {
    44f0:	7821      	ldrb	r1, [r4, #0]
    44f2:	2900      	cmp	r1, #0
    44f4:	f43f aea0 	beq.w	4238 <usb_handle_standard_request+0x24>
		if (p[DESC_bDescriptorType] == USB_DESC_INTERFACE) {
    44f8:	7863      	ldrb	r3, [r4, #1]
    44fa:	2b04      	cmp	r3, #4
    44fc:	f47f af5a 	bne.w	43b4 <usb_handle_standard_request+0x1a0>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    4500:	78a3      	ldrb	r3, [r4, #2]
			if (cur_iface == setup->wIndex) {
    4502:	459c      	cmp	ip, r3
    4504:	f47f af56 	bne.w	43b4 <usb_handle_standard_request+0x1a0>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    4508:	2b07      	cmp	r3, #7
		return usb_dev.alt_setting[iface];
    450a:	bf96      	itet	ls
    450c:	199b      	addls	r3, r3, r6
	return 0;
    450e:	2300      	movhi	r3, #0
		return usb_dev.alt_setting[iface];
    4510:	f893 30bb 	ldrbls.w	r3, [r3, #187]	; 0xbb
				data[0] = usb_get_alt_setting(cur_iface);
    4514:	7013      	strb	r3, [r2, #0]
				*len = 1;
    4516:	2301      	movs	r3, #1
    4518:	e7da      	b.n	44d0 <usb_handle_standard_request+0x2bc>
    451a:	bf00      	nop

0000451c <usb_data_to_host>:
{
    451c:	b513      	push	{r0, r1, r4, lr}
	if (usb_dev.zlp_flag == false) {
    451e:	4c13      	ldr	r4, [pc, #76]	; (456c <usb_data_to_host+0x50>)
    4520:	7d23      	ldrb	r3, [r4, #20]
    4522:	b9cb      	cbnz	r3, 4558 <usb_data_to_host+0x3c>
		uint32_t chunk = usb_dev.data_buf_residue;
    4524:	68e2      	ldr	r2, [r4, #12]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
    4526:	68a1      	ldr	r1, [r4, #8]
		uint32_t chunk = usb_dev.data_buf_residue;
    4528:	9201      	str	r2, [sp, #4]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
    452a:	ab01      	add	r3, sp, #4
    452c:	2080      	movs	r0, #128	; 0x80
    452e:	f018 fb1f 	bl	1cb70 <usb_write>
		usb_dev.data_buf += chunk;
    4532:	9a01      	ldr	r2, [sp, #4]
    4534:	68a3      	ldr	r3, [r4, #8]
    4536:	4413      	add	r3, r2
    4538:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    453a:	68e3      	ldr	r3, [r4, #12]
    453c:	1a9b      	subs	r3, r3, r2
    453e:	60e3      	str	r3, [r4, #12]
		if (!usb_dev.data_buf_residue && chunk &&
    4540:	b943      	cbnz	r3, 4554 <usb_data_to_host+0x38>
    4542:	b13a      	cbz	r2, 4554 <usb_data_to_host+0x38>
		    usb_dev.setup.wLength > usb_dev.data_buf_len) {
    4544:	6923      	ldr	r3, [r4, #16]
    4546:	88e2      	ldrh	r2, [r4, #6]
		if (!usb_dev.data_buf_residue && chunk &&
    4548:	429a      	cmp	r2, r3
    454a:	dd03      	ble.n	4554 <usb_data_to_host+0x38>
			if (!(usb_dev.data_buf_len % USB_MAX_CTRL_MPS)) {
    454c:	069b      	lsls	r3, r3, #26
    454e:	d101      	bne.n	4554 <usb_data_to_host+0x38>
				usb_dev.zlp_flag = true;
    4550:	2301      	movs	r3, #1
    4552:	7523      	strb	r3, [r4, #20]
}
    4554:	b002      	add	sp, #8
    4556:	bd10      	pop	{r4, pc}
		usb_dev.zlp_flag = false;
    4558:	2300      	movs	r3, #0
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
    455a:	461a      	mov	r2, r3
    455c:	4619      	mov	r1, r3
    455e:	2080      	movs	r0, #128	; 0x80
		usb_dev.zlp_flag = false;
    4560:	7523      	strb	r3, [r4, #20]
}
    4562:	b002      	add	sp, #8
    4564:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
    4568:	f013 ba36 	b.w	179d8 <usb_dc_ep_write>
    456c:	200020b0 	.word	0x200020b0

00004570 <usb_handle_control_transfer>:
{
    4570:	b530      	push	{r4, r5, lr}
    4572:	b085      	sub	sp, #20
	uint32_t chunk = 0U;
    4574:	2300      	movs	r3, #0
{
    4576:	4602      	mov	r2, r0
    4578:	460d      	mov	r5, r1
	uint32_t chunk = 0U;
    457a:	9301      	str	r3, [sp, #4]
	if (ep == USB_CONTROL_EP_OUT && ep_status == USB_DC_EP_SETUP) {
    457c:	2800      	cmp	r0, #0
    457e:	d15f      	bne.n	4640 <usb_handle_control_transfer+0xd0>
    4580:	2900      	cmp	r1, #0
    4582:	d13c      	bne.n	45fe <usb_handle_control_transfer+0x8e>
		if (usb_dc_ep_read(ep, (uint8_t *)&setup_raw,
    4584:	2208      	movs	r2, #8
    4586:	460b      	mov	r3, r1
    4588:	eb0d 0102 	add.w	r1, sp, r2
    458c:	f020 fcb4 	bl	24ef8 <usb_dc_ep_read>
    4590:	2800      	cmp	r0, #0
    4592:	da04      	bge.n	459e <usb_handle_control_transfer+0x2e>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    4594:	2080      	movs	r0, #128	; 0x80
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    4596:	f013 f96b 	bl	17870 <usb_dc_ep_set_stall>
}
    459a:	b005      	add	sp, #20
    459c:	bd30      	pop	{r4, r5, pc}
		setup->bmRequestType = setup_raw.bmRequestType;
    459e:	4c2d      	ldr	r4, [pc, #180]	; (4654 <usb_handle_control_transfer+0xe4>)
		setup->bRequest = setup_raw.bRequest;
    45a0:	f89d 3009 	ldrb.w	r3, [sp, #9]
		setup->bmRequestType = setup_raw.bmRequestType;
    45a4:	f89d 2008 	ldrb.w	r2, [sp, #8]
		setup->bRequest = setup_raw.bRequest;
    45a8:	7063      	strb	r3, [r4, #1]
		setup->wValue = sys_le16_to_cpu(setup_raw.wValue);
    45aa:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    45ae:	8063      	strh	r3, [r4, #2]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
    45b0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
		setup->bmRequestType = setup_raw.bmRequestType;
    45b4:	7022      	strb	r2, [r4, #0]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
    45b6:	80a3      	strh	r3, [r4, #4]
		usb_dev.data_buf = usb_dev.req_data;
    45b8:	f104 0138 	add.w	r1, r4, #56	; 0x38
		setup->wLength = sys_le16_to_cpu(setup_raw.wLength);
    45bc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    45c0:	80e3      	strh	r3, [r4, #6]
		if (usb_reqtype_is_to_device(setup)) {
    45c2:	0612      	lsls	r2, r2, #24
		usb_dev.data_buf_residue = 0;
    45c4:	e9c4 5503 	strd	r5, r5, [r4, #12]
		usb_dev.data_buf = usb_dev.req_data;
    45c8:	60a1      	str	r1, [r4, #8]
		usb_dev.zlp_flag = false;
    45ca:	7525      	strb	r5, [r4, #20]
		if (usb_reqtype_is_to_device(setup)) {
    45cc:	d40a      	bmi.n	45e4 <usb_handle_control_transfer+0x74>
			if (setup->wLength > CONFIG_USB_REQUEST_BUFFER_SIZE) {
    45ce:	2b80      	cmp	r3, #128	; 0x80
    45d0:	d904      	bls.n	45dc <usb_handle_control_transfer+0x6c>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    45d2:	2080      	movs	r0, #128	; 0x80
    45d4:	f013 f94c 	bl	17870 <usb_dc_ep_set_stall>
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    45d8:	2000      	movs	r0, #0
    45da:	e7dc      	b.n	4596 <usb_handle_control_transfer+0x26>
			if (setup->wLength) {
    45dc:	b113      	cbz	r3, 45e4 <usb_handle_control_transfer+0x74>
				usb_dev.data_buf_residue = setup->wLength;
    45de:	e9c4 3303 	strd	r3, r3, [r4, #12]
				return;
    45e2:	e7da      	b.n	459a <usb_handle_control_transfer+0x2a>
		if (!usb_handle_request(setup,
    45e4:	f7ff fd86 	bl	40f4 <usb_handle_request.constprop.0>
    45e8:	2800      	cmp	r0, #0
    45ea:	d0d3      	beq.n	4594 <usb_handle_control_transfer+0x24>
		usb_dev.data_buf_residue = MIN(usb_dev.data_buf_len,
    45ec:	88e2      	ldrh	r2, [r4, #6]
    45ee:	6923      	ldr	r3, [r4, #16]
    45f0:	429a      	cmp	r2, r3
    45f2:	bfd4      	ite	le
    45f4:	60e2      	strle	r2, [r4, #12]
    45f6:	60e3      	strgt	r3, [r4, #12]
			usb_data_to_host();
    45f8:	f7ff ff90 	bl	451c <usb_data_to_host>
    45fc:	e7cd      	b.n	459a <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue <= 0) {
    45fe:	4c15      	ldr	r4, [pc, #84]	; (4654 <usb_handle_control_transfer+0xe4>)
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    4600:	e9d4 1502 	ldrd	r1, r5, [r4, #8]
		if (usb_dev.data_buf_residue <= 0) {
    4604:	2d00      	cmp	r5, #0
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    4606:	ab01      	add	r3, sp, #4
		if (usb_dev.data_buf_residue <= 0) {
    4608:	dc04      	bgt.n	4614 <usb_handle_control_transfer+0xa4>
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    460a:	f020 fc75 	bl	24ef8 <usb_dc_ep_read>
    460e:	2800      	cmp	r0, #0
    4610:	dac3      	bge.n	459a <usb_handle_control_transfer+0x2a>
    4612:	e7bf      	b.n	4594 <usb_handle_control_transfer+0x24>
		if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    4614:	462a      	mov	r2, r5
    4616:	f020 fc6f 	bl	24ef8 <usb_dc_ep_read>
    461a:	2800      	cmp	r0, #0
    461c:	dbd9      	blt.n	45d2 <usb_handle_control_transfer+0x62>
		usb_dev.data_buf += chunk;
    461e:	9901      	ldr	r1, [sp, #4]
    4620:	68a2      	ldr	r2, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    4622:	68e3      	ldr	r3, [r4, #12]
		usb_dev.data_buf += chunk;
    4624:	440a      	add	r2, r1
		usb_dev.data_buf_residue -= chunk;
    4626:	1a5b      	subs	r3, r3, r1
		usb_dev.data_buf += chunk;
    4628:	60a2      	str	r2, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    462a:	60e3      	str	r3, [r4, #12]
		if (usb_dev.data_buf_residue == 0) {
    462c:	2b00      	cmp	r3, #0
    462e:	d1b4      	bne.n	459a <usb_handle_control_transfer+0x2a>
			usb_dev.data_buf = usb_dev.req_data;
    4630:	f104 0338 	add.w	r3, r4, #56	; 0x38
    4634:	60a3      	str	r3, [r4, #8]
			if (!usb_handle_request(setup,
    4636:	f7ff fd5d 	bl	40f4 <usb_handle_request.constprop.0>
    463a:	2800      	cmp	r0, #0
    463c:	d1dc      	bne.n	45f8 <usb_handle_control_transfer+0x88>
    463e:	e7a9      	b.n	4594 <usb_handle_control_transfer+0x24>
	} else if (ep == USB_CONTROL_EP_IN) {
    4640:	2880      	cmp	r0, #128	; 0x80
    4642:	d1aa      	bne.n	459a <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue != 0 || usb_dev.zlp_flag == true) {
    4644:	4b03      	ldr	r3, [pc, #12]	; (4654 <usb_handle_control_transfer+0xe4>)
    4646:	68da      	ldr	r2, [r3, #12]
    4648:	2a00      	cmp	r2, #0
    464a:	d1d5      	bne.n	45f8 <usb_handle_control_transfer+0x88>
    464c:	7d1b      	ldrb	r3, [r3, #20]
    464e:	2b00      	cmp	r3, #0
    4650:	d1d2      	bne.n	45f8 <usb_handle_control_transfer+0x88>
    4652:	e7a2      	b.n	459a <usb_handle_control_transfer+0x2a>
    4654:	200020b0 	.word	0x200020b0

00004658 <usb_set_config>:
	usb_dev.descriptors = usb_descriptors;
    4658:	4b05      	ldr	r3, [pc, #20]	; (4670 <usb_set_config+0x18>)
	usb_dev.req_handlers[type] = handler;
    465a:	4a06      	ldr	r2, [pc, #24]	; (4674 <usb_set_config+0x1c>)
    465c:	629a      	str	r2, [r3, #40]	; 0x28
    465e:	4a06      	ldr	r2, [pc, #24]	; (4678 <usb_set_config+0x20>)
    4660:	62da      	str	r2, [r3, #44]	; 0x2c
    4662:	4a06      	ldr	r2, [pc, #24]	; (467c <usb_set_config+0x24>)
    4664:	631a      	str	r2, [r3, #48]	; 0x30
	usb_dev.custom_req_handler = handler;
    4666:	4a06      	ldr	r2, [pc, #24]	; (4680 <usb_set_config+0x28>)
	usb_dev.descriptors = usb_descriptors;
    4668:	6258      	str	r0, [r3, #36]	; 0x24
	usb_dev.custom_req_handler = handler;
    466a:	619a      	str	r2, [r3, #24]

	/* register class request handlers for each interface*/
	usb_register_custom_req_handler(custom_handler);

	return 0;
}
    466c:	2000      	movs	r0, #0
    466e:	4770      	bx	lr
    4670:	200020b0 	.word	0x200020b0
    4674:	00004215 	.word	0x00004215
    4678:	00003f7d 	.word	0x00003f7d
    467c:	0000401d 	.word	0x0000401d
    4680:	00003fbd 	.word	0x00003fbd

00004684 <usb_device_init>:
 */
static int usb_device_init(const struct device *dev)
{
	uint8_t *device_descriptor;

	if (usb_dev.enabled == true) {
    4684:	4b08      	ldr	r3, [pc, #32]	; (46a8 <usb_device_init+0x24>)
{
    4686:	b510      	push	{r4, lr}
	if (usb_dev.enabled == true) {
    4688:	f893 40b8 	ldrb.w	r4, [r3, #184]	; 0xb8
    468c:	b934      	cbnz	r4, 469c <usb_device_init+0x18>
		return -EALREADY;
	}

	/* register device descriptor */
	device_descriptor = usb_get_device_descriptor();
    468e:	f000 f9a3 	bl	49d8 <usb_get_device_descriptor>
	if (!device_descriptor) {
    4692:	b130      	cbz	r0, 46a2 <usb_device_init+0x1e>
		LOG_ERR("Failed to configure USB device stack");
		return -1;
	}

	usb_set_config(device_descriptor);
    4694:	f7ff ffe0 	bl	4658 <usb_set_config>

	if (IS_ENABLED(CONFIG_USB_DEVICE_INITIALIZE_AT_BOOT)) {
		return usb_enable(NULL);
	}

	return 0;
    4698:	4620      	mov	r0, r4
}
    469a:	bd10      	pop	{r4, pc}
		return -EALREADY;
    469c:	f06f 0077 	mvn.w	r0, #119	; 0x77
    46a0:	e7fb      	b.n	469a <usb_device_init+0x16>
		return -1;
    46a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    46a6:	e7f8      	b.n	469a <usb_device_init+0x16>
    46a8:	200020b0 	.word	0x200020b0

000046ac <usb_enable>:
{
    46ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    46b0:	4604      	mov	r4, r0
	if (usb_dev.enabled == true) {
    46b2:	4d35      	ldr	r5, [pc, #212]	; (4788 <usb_enable+0xdc>)
	return z_impl_k_mutex_lock(mutex, timeout);
    46b4:	4835      	ldr	r0, [pc, #212]	; (478c <usb_enable+0xe0>)
    46b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    46ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    46be:	f016 fd35 	bl	1b12c <z_impl_k_mutex_lock>
    46c2:	f895 60b8 	ldrb.w	r6, [r5, #184]	; 0xb8
    46c6:	2e00      	cmp	r6, #0
    46c8:	d15b      	bne.n	4782 <usb_enable+0xd6>
	usb_dev.status_callback = cb;
    46ca:	4831      	ldr	r0, [pc, #196]	; (4790 <usb_enable+0xe4>)
	usb_dev.user_status_callback = status_cb;
    46cc:	622c      	str	r4, [r5, #32]
	usb_dev.status_callback = cb;
    46ce:	61e8      	str	r0, [r5, #28]
	usb_dc_set_status_callback(forward_status_cb);
    46d0:	f013 fa98 	bl	17c04 <usb_dc_set_status_callback>
	ret = usb_dc_attach();
    46d4:	f013 f85a 	bl	1778c <usb_dc_attach>
	if (ret < 0) {
    46d8:	1e04      	subs	r4, r0, #0
    46da:	db36      	blt.n	474a <usb_enable+0x9e>
	ret = usb_transfer_init();
    46dc:	f000 fb0e 	bl	4cfc <usb_transfer_init>
	if (ret < 0) {
    46e0:	1e04      	subs	r4, r0, #0
    46e2:	db32      	blt.n	474a <usb_enable+0x9e>
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    46e4:	2340      	movs	r3, #64	; 0x40
	ret = usb_dc_ep_configure(&ep0_cfg);
    46e6:	4668      	mov	r0, sp
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    46e8:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;
    46ec:	f88d 6004 	strb.w	r6, [sp, #4]
	ep0_cfg.ep_addr = USB_CONTROL_EP_OUT;
    46f0:	f88d 6000 	strb.w	r6, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
    46f4:	f013 f89a 	bl	1782c <usb_dc_ep_configure>
	if (ret < 0) {
    46f8:	1e04      	subs	r4, r0, #0
    46fa:	db26      	blt.n	474a <usb_enable+0x9e>
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
    46fc:	2780      	movs	r7, #128	; 0x80
	ret = usb_dc_ep_configure(&ep0_cfg);
    46fe:	4668      	mov	r0, sp
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
    4700:	f88d 7000 	strb.w	r7, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
    4704:	f013 f892 	bl	1782c <usb_dc_ep_configure>
	if (ret < 0) {
    4708:	1e04      	subs	r4, r0, #0
    470a:	db1e      	blt.n	474a <usb_enable+0x9e>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_OUT,
    470c:	4921      	ldr	r1, [pc, #132]	; (4794 <usb_enable+0xe8>)
    470e:	4630      	mov	r0, r6
    4710:	f013 fa64 	bl	17bdc <usb_dc_ep_set_callback>
	if (ret < 0) {
    4714:	1e04      	subs	r4, r0, #0
    4716:	db18      	blt.n	474a <usb_enable+0x9e>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_IN,
    4718:	491e      	ldr	r1, [pc, #120]	; (4794 <usb_enable+0xe8>)
    471a:	4638      	mov	r0, r7
    471c:	f013 fa5e 	bl	17bdc <usb_dc_ep_set_callback>
	if (ret < 0) {
    4720:	1e04      	subs	r4, r0, #0
    4722:	db12      	blt.n	474a <usb_enable+0x9e>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    4724:	4c1c      	ldr	r4, [pc, #112]	; (4798 <usb_enable+0xec>)
    4726:	f8df 8074 	ldr.w	r8, [pc, #116]	; 479c <usb_enable+0xf0>
    472a:	4544      	cmp	r4, r8
    472c:	d314      	bcc.n	4758 <usb_enable+0xac>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_OUT);
    472e:	2000      	movs	r0, #0
    4730:	f013 f902 	bl	17938 <usb_dc_ep_enable>
	if (ret < 0) {
    4734:	1e04      	subs	r4, r0, #0
    4736:	db08      	blt.n	474a <usb_enable+0x9e>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
    4738:	2080      	movs	r0, #128	; 0x80
    473a:	f013 f8fd 	bl	17938 <usb_dc_ep_enable>
	if (ret < 0) {
    473e:	1e04      	subs	r4, r0, #0
    4740:	db03      	blt.n	474a <usb_enable+0x9e>
	usb_dev.enabled = true;
    4742:	2301      	movs	r3, #1
    4744:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
	ret = 0;
    4748:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
    474a:	4810      	ldr	r0, [pc, #64]	; (478c <usb_enable+0xe0>)
    474c:	f016 fd66 	bl	1b21c <z_impl_k_mutex_unlock>
}
    4750:	4620      	mov	r0, r4
    4752:	b002      	add	sp, #8
    4754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ep_data = cfg_data->endpoint;
    4758:	6a27      	ldr	r7, [r4, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    475a:	2600      	movs	r6, #0
    475c:	7f22      	ldrb	r2, [r4, #28]
    475e:	b2f3      	uxtb	r3, r6
    4760:	429a      	cmp	r2, r3
    4762:	d801      	bhi.n	4768 <usb_enable+0xbc>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    4764:	3424      	adds	r4, #36	; 0x24
    4766:	e7e0      	b.n	472a <usb_enable+0x7e>
			if (usb_dc_ep_set_callback(ep_data[n].ep_addr,
    4768:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    476c:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    4770:	7910      	ldrb	r0, [r2, #4]
    4772:	f013 fa33 	bl	17bdc <usb_dc_ep_set_callback>
    4776:	3601      	adds	r6, #1
    4778:	2800      	cmp	r0, #0
    477a:	d0ef      	beq.n	475c <usb_enable+0xb0>
    477c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    4780:	e7e3      	b.n	474a <usb_enable+0x9e>
		ret = -EALREADY;
    4782:	f06f 0477 	mvn.w	r4, #119	; 0x77
    4786:	e7e0      	b.n	474a <usb_enable+0x9e>
    4788:	200020b0 	.word	0x200020b0
    478c:	20000eec 	.word	0x20000eec
    4790:	00004121 	.word	0x00004121
    4794:	00004571 	.word	0x00004571
    4798:	200011a8 	.word	0x200011a8
    479c:	200011cc 	.word	0x200011cc

000047a0 <usb_update_sn_string_descriptor>:
 * case the device ID returned by the HWINFO driver is bigger, the lower
 * part is used for the USB Serial Number, as that part is usually having
 * more entropy.
 */
__weak uint8_t *usb_update_sn_string_descriptor(void)
{
    47a0:	b530      	push	{r4, r5, lr}
	 * unless the user requested a longer serial number.
	 */
	const int usblen = sizeof(CONFIG_USB_DEVICE_SN) / 2;
	uint8_t hwid[MAX(16, sizeof(CONFIG_USB_DEVICE_SN) / 2)];
	static uint8_t sn[sizeof(CONFIG_USB_DEVICE_SN) + 1];
	const char hex[] = "0123456789ABCDEF";
    47a2:	4b1f      	ldr	r3, [pc, #124]	; (4820 <usb_update_sn_string_descriptor+0x80>)
{
    47a4:	b08b      	sub	sp, #44	; 0x2c
	const char hex[] = "0123456789ABCDEF";
    47a6:	aa05      	add	r2, sp, #20
    47a8:	f103 0510 	add.w	r5, r3, #16
    47ac:	6818      	ldr	r0, [r3, #0]
    47ae:	6859      	ldr	r1, [r3, #4]
    47b0:	4614      	mov	r4, r2
    47b2:	c403      	stmia	r4!, {r0, r1}
    47b4:	3308      	adds	r3, #8
    47b6:	42ab      	cmp	r3, r5
    47b8:	4622      	mov	r2, r4
    47ba:	d1f7      	bne.n	47ac <usb_update_sn_string_descriptor+0xc>
    47bc:	781b      	ldrb	r3, [r3, #0]
    47be:	7023      	strb	r3, [r4, #0]
	int hwlen, skip;

	memset(hwid, 0, sizeof(hwid));
    47c0:	2210      	movs	r2, #16
    47c2:	2100      	movs	r1, #0
    47c4:	a801      	add	r0, sp, #4
    47c6:	f019 fc3f 	bl	1e048 <memset>
	memset(sn, 0, sizeof(sn));
    47ca:	2212      	movs	r2, #18
    47cc:	2100      	movs	r1, #0
    47ce:	4815      	ldr	r0, [pc, #84]	; (4824 <usb_update_sn_string_descriptor+0x84>)
    47d0:	f019 fc3a 	bl	1e048 <memset>
    47d4:	2110      	movs	r1, #16
    47d6:	a801      	add	r0, sp, #4
    47d8:	f020 fc80 	bl	250dc <z_impl_hwinfo_get_device_id>

	hwlen = hwinfo_get_device_id(hwid, sizeof(hwid));
	if (hwlen > 0) {
    47dc:	2800      	cmp	r0, #0
    47de:	dd1b      	ble.n	4818 <usb_update_sn_string_descriptor+0x78>
		skip = MAX(0, hwlen - usblen);
    47e0:	2808      	cmp	r0, #8
    47e2:	bfb8      	it	lt
    47e4:	2008      	movlt	r0, #8
    47e6:	3808      	subs	r0, #8
    47e8:	ab01      	add	r3, sp, #4
    47ea:	4a0e      	ldr	r2, [pc, #56]	; (4824 <usb_update_sn_string_descriptor+0x84>)
    47ec:	4418      	add	r0, r3
		LOG_HEXDUMP_DBG(&hwid[skip], usblen, "Serial Number");
		for (int i = 0; i < usblen; i++) {
    47ee:	2100      	movs	r1, #0
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    47f0:	f810 3b01 	ldrb.w	r3, [r0], #1
    47f4:	ac0a      	add	r4, sp, #40	; 0x28
    47f6:	eb04 1413 	add.w	r4, r4, r3, lsr #4
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    47fa:	f003 030f 	and.w	r3, r3, #15
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    47fe:	f814 4c14 	ldrb.w	r4, [r4, #-20]
    4802:	7014      	strb	r4, [r2, #0]
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    4804:	ac0a      	add	r4, sp, #40	; 0x28
    4806:	4423      	add	r3, r4
		for (int i = 0; i < usblen; i++) {
    4808:	3101      	adds	r1, #1
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    480a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
    480e:	7053      	strb	r3, [r2, #1]
		for (int i = 0; i < usblen; i++) {
    4810:	2908      	cmp	r1, #8
    4812:	f102 0202 	add.w	r2, r2, #2
    4816:	d1eb      	bne.n	47f0 <usb_update_sn_string_descriptor+0x50>
		}
	}

	return sn;
}
    4818:	4802      	ldr	r0, [pc, #8]	; (4824 <usb_update_sn_string_descriptor+0x84>)
    481a:	b00b      	add	sp, #44	; 0x2c
    481c:	bd30      	pop	{r4, r5, pc}
    481e:	bf00      	nop
    4820:	00027366 	.word	0x00027366
    4824:	20004001 	.word	0x20004001

00004828 <usb_fix_descriptor>:
 * Restrictions:
 * - just one device configuration (there is only one)
 * - string descriptor must be present
 */
static int usb_fix_descriptor(struct usb_desc_header *head)
{
    4828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    482c:	4604      	mov	r4, r0
    482e:	b085      	sub	sp, #20
	struct usb_cfg_descriptor *cfg_descr = NULL;
	struct usb_if_descriptor *if_descr = NULL;
	struct usb_cfg_data *cfg_data = NULL;
	struct usb_ep_descriptor *ep_descr = NULL;
	uint8_t numof_ifaces = 0U;
	uint8_t str_descr_idx = 0U;
    4830:	2500      	movs	r5, #0
	uint32_t requested_ep = BIT(16) | BIT(0);
    4832:	f04f 1b01 	mov.w	fp, #65537	; 0x10001
	uint8_t numof_ifaces = 0U;
    4836:	46a9      	mov	r9, r5
	struct usb_cfg_data *cfg_data = NULL;
    4838:	462e      	mov	r6, r5
	struct usb_cfg_descriptor *cfg_descr = NULL;
    483a:	46aa      	mov	sl, r5

	while (head->bLength != 0U) {
    483c:	7820      	ldrb	r0, [r4, #0]
    483e:	b920      	cbnz	r0, 484a <usb_fix_descriptor+0x22>

		/* Move to next descriptor */
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
	}

	if ((head + 1) != __usb_descriptor_end) {
    4840:	4b61      	ldr	r3, [pc, #388]	; (49c8 <usb_fix_descriptor+0x1a0>)
    4842:	3402      	adds	r4, #2
    4844:	429c      	cmp	r4, r3
    4846:	d01f      	beq.n	4888 <usb_fix_descriptor+0x60>
    4848:	e7f2      	b.n	4830 <usb_fix_descriptor+0x8>
		switch (head->bDescriptorType) {
    484a:	7863      	ldrb	r3, [r4, #1]
    484c:	2b05      	cmp	r3, #5
    484e:	d805      	bhi.n	485c <usb_fix_descriptor+0x34>
    4850:	e8df f003 	tbb	[pc, r3]
    4854:	78030478 	.word	0x78030478
    4858:	2007      	.short	0x2007
    485a:	46a2      	mov	sl, r4
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
    485c:	7823      	ldrb	r3, [r4, #0]
    485e:	441c      	add	r4, r3
    4860:	e7ec      	b.n	483c <usb_fix_descriptor+0x14>
			if (if_descr->bAlternateSetting) {
    4862:	78e3      	ldrb	r3, [r4, #3]
    4864:	2b00      	cmp	r3, #0
    4866:	d1f9      	bne.n	485c <usb_fix_descriptor+0x34>
			if (if_descr->bInterfaceNumber == 0U) {
    4868:	78a3      	ldrb	r3, [r4, #2]
    486a:	b183      	cbz	r3, 488e <usb_fix_descriptor+0x66>
			numof_ifaces++;
    486c:	f109 0901 	add.w	r9, r9, #1
    4870:	fa5f f989 	uxtb.w	r9, r9
			break;
    4874:	e7f2      	b.n	485c <usb_fix_descriptor+0x34>
		if (cfg_data->interface_descriptor == iface) {
    4876:	6872      	ldr	r2, [r6, #4]
    4878:	4294      	cmp	r4, r2
    487a:	f000 809d 	beq.w	49b8 <usb_fix_descriptor+0x190>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    487e:	3624      	adds	r6, #36	; 0x24
    4880:	429e      	cmp	r6, r3
    4882:	d3f8      	bcc.n	4876 <usb_fix_descriptor+0x4e>
					return -1;
    4884:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		LOG_DBG("try to fix next descriptor at %p", head + 1);
		return usb_fix_descriptor(head + 1);
	}

	return 0;
}
    4888:	b005      	add	sp, #20
    488a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    488e:	4e4f      	ldr	r6, [pc, #316]	; (49cc <usb_fix_descriptor+0x1a4>)
    4890:	4b4f      	ldr	r3, [pc, #316]	; (49d0 <usb_fix_descriptor+0x1a8>)
    4892:	e7f5      	b.n	4880 <usb_fix_descriptor+0x58>
			if (!cfg_data) {
    4894:	2e00      	cmp	r6, #0
    4896:	d0f5      	beq.n	4884 <usb_fix_descriptor+0x5c>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    4898:	2300      	movs	r3, #0
    489a:	2101      	movs	r1, #1
    489c:	7f32      	ldrb	r2, [r6, #28]
    489e:	4293      	cmp	r3, r2
    48a0:	d2f0      	bcs.n	4884 <usb_fix_descriptor+0x5c>
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
    48a2:	6a32      	ldr	r2, [r6, #32]
    48a4:	78a7      	ldrb	r7, [r4, #2]
    48a6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    48aa:	7910      	ldrb	r0, [r2, #4]
    48ac:	4287      	cmp	r7, r0
    48ae:	d001      	beq.n	48b4 <usb_fix_descriptor+0x8c>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    48b0:	3301      	adds	r3, #1
    48b2:	e7f3      	b.n	489c <usb_fix_descriptor+0x74>
    48b4:	2701      	movs	r7, #1
			ep_cfg.ep_type = (ep_descr->bmAttributes &
    48b6:	78e0      	ldrb	r0, [r4, #3]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
    48b8:	f894 c005 	ldrb.w	ip, [r4, #5]
			ep_cfg.ep_type = (ep_descr->bmAttributes &
    48bc:	f000 0003 	and.w	r0, r0, #3
    48c0:	f88d 000c 	strb.w	r0, [sp, #12]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
    48c4:	7920      	ldrb	r0, [r4, #4]
    48c6:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
    48ca:	f8ad 000a 	strh.w	r0, [sp, #10]
			if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    48ce:	f994 0002 	ldrsb.w	r0, [r4, #2]
    48d2:	2800      	cmp	r0, #0
    48d4:	fa5f f887 	uxtb.w	r8, r7
    48d8:	da28      	bge.n	492c <usb_fix_descriptor+0x104>
				if ((*requested_ep & (1U << (idx + 16U)))) {
    48da:	f107 0010 	add.w	r0, r7, #16
    48de:	fa01 f000 	lsl.w	r0, r1, r0
    48e2:	ea10 0f0b 	tst.w	r0, fp
    48e6:	d129      	bne.n	493c <usb_fix_descriptor+0x114>
				ep_cfg.ep_addr = (USB_EP_DIR_IN | idx);
    48e8:	f068 007f 	orn	r0, r8, #127	; 0x7f
    48ec:	f88d 0008 	strb.w	r0, [sp, #8]
			if (!usb_dc_ep_check_cap(&ep_cfg)) {
    48f0:	a802      	add	r0, sp, #8
    48f2:	e9cd 3200 	strd	r3, r2, [sp]
    48f6:	f020 fae7 	bl	24ec8 <usb_dc_ep_check_cap>
    48fa:	e9dd 3200 	ldrd	r3, r2, [sp]
    48fe:	2101      	movs	r1, #1
    4900:	b9e0      	cbnz	r0, 493c <usb_fix_descriptor+0x114>
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
    4902:	f89d 3008 	ldrb.w	r3, [sp, #8]
    4906:	70a3      	strb	r3, [r4, #2]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    4908:	f013 0f80 	tst.w	r3, #128	; 0x80
					*requested_ep |= (1U << (idx + 16U));
    490c:	bf1c      	itt	ne
    490e:	f108 0810 	addne.w	r8, r8, #16
    4912:	fa5f f888 	uxtbne.w	r8, r8
				ep_data[i].ep_addr = ep_cfg.ep_addr;
    4916:	7113      	strb	r3, [r2, #4]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    4918:	460b      	mov	r3, r1
					*requested_ep |= (1U << (idx + 16U));
    491a:	bf15      	itete	ne
    491c:	fa01 f808 	lslne.w	r8, r1, r8
					*requested_ep |= (1U << idx);
    4920:	40bb      	lsleq	r3, r7
					*requested_ep |= (1U << (idx + 16U));
    4922:	ea4b 0b08 	orrne.w	fp, fp, r8
					*requested_ep |= (1U << idx);
    4926:	ea4b 0b03 	orreq.w	fp, fp, r3
				return 0;
    492a:	e797      	b.n	485c <usb_fix_descriptor+0x34>
				if ((*requested_ep & (1U << (idx)))) {
    492c:	fa01 f007 	lsl.w	r0, r1, r7
    4930:	ea10 0f0b 	tst.w	r0, fp
    4934:	d102      	bne.n	493c <usb_fix_descriptor+0x114>
				ep_cfg.ep_addr = idx;
    4936:	f88d 8008 	strb.w	r8, [sp, #8]
    493a:	e7d9      	b.n	48f0 <usb_fix_descriptor+0xc8>
		for (uint8_t idx = 1; idx < 16U; idx++) {
    493c:	3701      	adds	r7, #1
    493e:	2f10      	cmp	r7, #16
    4940:	d1b9      	bne.n	48b6 <usb_fix_descriptor+0x8e>
    4942:	e7b5      	b.n	48b0 <usb_fix_descriptor+0x88>
			if (str_descr_idx == USB_DESC_SERIAL_NUMBER_IDX) {
    4944:	2d03      	cmp	r5, #3
    4946:	d11d      	bne.n	4984 <usb_fix_descriptor+0x15c>
	uint8_t *runtime_sn =  usb_update_sn_string_descriptor();
    4948:	f7ff ff2a 	bl	47a0 <usb_update_sn_string_descriptor>
	if (!runtime_sn) {
    494c:	4607      	mov	r7, r0
    494e:	b168      	cbz	r0, 496c <usb_fix_descriptor+0x144>
	runtime_sn_len = strlen(runtime_sn);
    4950:	f019 fb42 	bl	1dfd8 <strlen>
	if (!runtime_sn_len) {
    4954:	4680      	mov	r8, r0
    4956:	b148      	cbz	r0, 496c <usb_fix_descriptor+0x144>
	default_sn_len = strlen(CONFIG_USB_DEVICE_SN);
    4958:	481e      	ldr	r0, [pc, #120]	; (49d4 <usb_fix_descriptor+0x1ac>)
    495a:	f019 fb3d 	bl	1dfd8 <strlen>
	if (runtime_sn_len != default_sn_len) {
    495e:	4580      	cmp	r8, r0
    4960:	d104      	bne.n	496c <usb_fix_descriptor+0x144>
	memcpy(sn->bString, runtime_sn, runtime_sn_len);
    4962:	4642      	mov	r2, r8
    4964:	4639      	mov	r1, r7
    4966:	1ca0      	adds	r0, r4, #2
    4968:	f019 fb63 	bl	1e032 <memcpy>
	int idx_max = USB_BSTRING_UTF16LE_IDX_MAX(str_descr->bLength);
    496c:	7823      	ldrb	r3, [r4, #0]
	for (int i = idx_max; i >= 0; i -= 2) {
    496e:	f06f 0102 	mvn.w	r1, #2
    4972:	18e2      	adds	r2, r4, r3
    4974:	1b09      	subs	r1, r1, r4
    4976:	eb04 0353 	add.w	r3, r4, r3, lsr #1
    497a:	42d1      	cmn	r1, r2
    497c:	d513      	bpl.n	49a6 <usb_fix_descriptor+0x17e>
			str_descr_idx += 1U;
    497e:	3501      	adds	r5, #1
    4980:	b2ed      	uxtb	r5, r5
			break;
    4982:	e76b      	b.n	485c <usb_fix_descriptor+0x34>
			if (str_descr_idx) {
    4984:	2d00      	cmp	r5, #0
    4986:	d1f1      	bne.n	496c <usb_fix_descriptor+0x144>
				if (!cfg_descr) {
    4988:	f1ba 0f00 	cmp.w	sl, #0
    498c:	f43f af7a 	beq.w	4884 <usb_fix_descriptor+0x5c>
				sys_put_le16((uint8_t *)head - (uint8_t *)cfg_descr,
    4990:	eba4 030a 	sub.w	r3, r4, sl
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
    4994:	f88a 3002 	strb.w	r3, [sl, #2]
	dst[1] = val >> 8;
    4998:	f3c3 2307 	ubfx	r3, r3, #8, #8
    499c:	f88a 3003 	strb.w	r3, [sl, #3]
				cfg_descr->bNumInterfaces = numof_ifaces;
    49a0:	f88a 9004 	strb.w	r9, [sl, #4]
    49a4:	e7eb      	b.n	497e <usb_fix_descriptor+0x156>
		buf[i] = 0U;
    49a6:	f04f 0000 	mov.w	r0, #0
    49aa:	f802 0c01 	strb.w	r0, [r2, #-1]
		buf[i - 1] = buf[ascii_idx_max--];
    49ae:	f813 0901 	ldrb.w	r0, [r3], #-1
    49b2:	f802 0d02 	strb.w	r0, [r2, #-2]!
	for (int i = idx_max; i >= 0; i -= 2) {
    49b6:	e7e0      	b.n	497a <usb_fix_descriptor+0x152>
				if (cfg_data->interface_config) {
    49b8:	68b3      	ldr	r3, [r6, #8]
    49ba:	2b00      	cmp	r3, #0
    49bc:	f43f af56 	beq.w	486c <usb_fix_descriptor+0x44>
					cfg_data->interface_config(head,
    49c0:	4649      	mov	r1, r9
    49c2:	4620      	mov	r0, r4
    49c4:	4798      	blx	r3
    49c6:	e751      	b.n	486c <usb_fix_descriptor+0x44>
    49c8:	200011a5 	.word	0x200011a5
    49cc:	200011a8 	.word	0x200011a8
    49d0:	200011cc 	.word	0x200011cc
    49d4:	00027366 	.word	0x00027366

000049d8 <usb_get_device_descriptor>:


uint8_t *usb_get_device_descriptor(void)
{
    49d8:	b508      	push	{r3, lr}
	LOG_DBG("__usb_descriptor_start %p", __usb_descriptor_start);
	LOG_DBG("__usb_descriptor_end %p", __usb_descriptor_end);

	if (usb_fix_descriptor(__usb_descriptor_start)) {
    49da:	4804      	ldr	r0, [pc, #16]	; (49ec <usb_get_device_descriptor+0x14>)
    49dc:	f7ff ff24 	bl	4828 <usb_fix_descriptor>
		LOG_ERR("Failed to fixup USB descriptor");
		return NULL;
    49e0:	2800      	cmp	r0, #0
	}

	return (uint8_t *) __usb_descriptor_start;
}
    49e2:	4802      	ldr	r0, [pc, #8]	; (49ec <usb_get_device_descriptor+0x14>)
    49e4:	bf18      	it	ne
    49e6:	2000      	movne	r0, #0
    49e8:	bd08      	pop	{r3, pc}
    49ea:	bf00      	nop
    49ec:	200010f0 	.word	0x200010f0

000049f0 <usb_ep_get_transfer>:
/** Max number of parallel transfers */
static struct usb_transfer_data ut_data[CONFIG_USB_MAX_NUM_TRANSFERS];

/* Transfer management */
static struct usb_transfer_data *usb_ep_get_transfer(uint8_t ep)
{
    49f0:	b510      	push	{r4, lr}
    49f2:	4b09      	ldr	r3, [pc, #36]	; (4a18 <usb_ep_get_transfer+0x28>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    49f4:	2100      	movs	r1, #0
    49f6:	461a      	mov	r2, r3
		if (ut_data[i].ep == ep && ut_data[i].status != 0) {
    49f8:	781c      	ldrb	r4, [r3, #0]
    49fa:	4284      	cmp	r4, r0
    49fc:	d105      	bne.n	4a0a <usb_ep_get_transfer+0x1a>
    49fe:	685c      	ldr	r4, [r3, #4]
    4a00:	b11c      	cbz	r4, 4a0a <usb_ep_get_transfer+0x1a>
			return &ut_data[i];
    4a02:	2048      	movs	r0, #72	; 0x48
    4a04:	fb00 2001 	mla	r0, r0, r1, r2
		}
	}

	return NULL;
}
    4a08:	bd10      	pop	{r4, pc}
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    4a0a:	3101      	adds	r1, #1
    4a0c:	2904      	cmp	r1, #4
    4a0e:	f103 0348 	add.w	r3, r3, #72	; 0x48
    4a12:	d1f1      	bne.n	49f8 <usb_ep_get_transfer+0x8>
	return NULL;
    4a14:	2000      	movs	r0, #0
    4a16:	e7f7      	b.n	4a08 <usb_ep_get_transfer+0x18>
    4a18:	20002174 	.word	0x20002174

00004a1c <usb_transfer_work>:

	return false;
}

static void usb_transfer_work(struct k_work *item)
{
    4a1c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint8_t ep;

	trans = CONTAINER_OF(item, struct usb_transfer_data, work);
	ep = trans->ep;

	if (trans->status != -EBUSY) {
    4a20:	f850 3c30 	ldr.w	r3, [r0, #-48]
	ep = trans->ep;
    4a24:	f810 6c34 	ldrb.w	r6, [r0, #-52]
	if (trans->status != -EBUSY) {
    4a28:	3310      	adds	r3, #16
{
    4a2a:	4604      	mov	r4, r0
	if (trans->status != -EBUSY) {
    4a2c:	d110      	bne.n	4a50 <usb_transfer_work+0x34>
		/* transfer cancelled or already completed */
		LOG_DBG("Transfer cancelled or completed, ep 0x%02x", ep);
		goto done;
	}

	if (trans->flags & USB_TRANS_WRITE) {
    4a2e:	6903      	ldr	r3, [r0, #16]
		if (!trans->bsize) {
    4a30:	f850 2c28 	ldr.w	r2, [r0, #-40]
	if (trans->flags & USB_TRANS_WRITE) {
    4a34:	0799      	lsls	r1, r3, #30
    4a36:	d53c      	bpl.n	4ab2 <usb_transfer_work+0x96>
		if (!trans->bsize) {
    4a38:	bb02      	cbnz	r2, 4a7c <usb_transfer_work+0x60>
			if (!(trans->flags & USB_TRANS_NO_ZLP)) {
    4a3a:	f013 0304 	ands.w	r3, r3, #4
    4a3e:	d104      	bne.n	4a4a <usb_transfer_work+0x2e>
				LOG_DBG("Transfer ZLP");
				usb_write(ep, NULL, 0, NULL);
    4a40:	461a      	mov	r2, r3
    4a42:	4619      	mov	r1, r3
    4a44:	4630      	mov	r0, r6
    4a46:	f018 f893 	bl	1cb70 <usb_write>
			}
			trans->status = 0;
    4a4a:	2300      	movs	r3, #0

		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
		if (ret) {
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
			/* transfer error */
			trans->status = -EINVAL;
    4a4c:	f844 3c30 	str.w	r3, [r4, #-48]
		/* we expect mote data, clear NAK */
		usb_dc_ep_read_continue(ep);
	}

done:
	if (trans->status != -EBUSY && trans->cb) { /* Transfer complete */
    4a50:	f854 3c30 	ldr.w	r3, [r4, #-48]
    4a54:	3310      	adds	r3, #16
    4a56:	d00e      	beq.n	4a76 <usb_transfer_work+0x5a>
    4a58:	f854 5c20 	ldr.w	r5, [r4, #-32]
    4a5c:	b15d      	cbz	r5, 4a76 <usb_transfer_work+0x5a>
		usb_transfer_callback cb = trans->cb;
		int tsize = trans->tsize;
    4a5e:	f854 7c24 	ldr.w	r7, [r4, #-36]
		void *priv = trans->priv;
    4a62:	f854 8c1c 	ldr.w	r8, [r4, #-28]

		if (k_is_in_isr()) {
    4a66:	f020 ff4f 	bl	25908 <k_is_in_isr>
    4a6a:	2800      	cmp	r0, #0
    4a6c:	d04c      	beq.n	4b08 <usb_transfer_work+0xec>
			/* reschedule completion in thread context */
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    4a6e:	482e      	ldr	r0, [pc, #184]	; (4b28 <usb_transfer_work+0x10c>)
    4a70:	4621      	mov	r1, r4
    4a72:	f021 f8f0 	bl	25c56 <k_work_submit_to_queue>
		/* Transfer completion callback */
		if (trans->status != -ECANCELED) {
			cb(ep, tsize, priv);
		}
	}
}
    4a76:	b002      	add	sp, #8
    4a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
    4a7c:	f850 1c2c 	ldr.w	r1, [r0, #-44]
    4a80:	ab01      	add	r3, sp, #4
    4a82:	4630      	mov	r0, r6
    4a84:	f018 f874 	bl	1cb70 <usb_write>
		if (ret) {
    4a88:	b110      	cbz	r0, 4a90 <usb_transfer_work+0x74>
			trans->status = -EINVAL;
    4a8a:	f06f 0315 	mvn.w	r3, #21
    4a8e:	e7dd      	b.n	4a4c <usb_transfer_work+0x30>
		trans->buffer += bytes;
    4a90:	9a01      	ldr	r2, [sp, #4]
    4a92:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    4a96:	4413      	add	r3, r2
    4a98:	f844 3c2c 	str.w	r3, [r4, #-44]
		trans->bsize -= bytes;
    4a9c:	f854 3c28 	ldr.w	r3, [r4, #-40]
    4aa0:	1a9b      	subs	r3, r3, r2
    4aa2:	f844 3c28 	str.w	r3, [r4, #-40]
		trans->tsize += bytes;
    4aa6:	f854 3c24 	ldr.w	r3, [r4, #-36]
    4aaa:	4413      	add	r3, r2
    4aac:	f844 3c24 	str.w	r3, [r4, #-36]
    4ab0:	e7ce      	b.n	4a50 <usb_transfer_work+0x34>
		ret = usb_dc_ep_read_wait(ep, trans->buffer, trans->bsize,
    4ab2:	f850 1c2c 	ldr.w	r1, [r0, #-44]
    4ab6:	ab01      	add	r3, sp, #4
    4ab8:	4630      	mov	r0, r6
    4aba:	f013 f805 	bl	17ac8 <usb_dc_ep_read_wait>
		if (ret) {
    4abe:	2800      	cmp	r0, #0
    4ac0:	d1e3      	bne.n	4a8a <usb_transfer_work+0x6e>
		trans->buffer += bytes;
    4ac2:	9d01      	ldr	r5, [sp, #4]
    4ac4:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    4ac8:	442b      	add	r3, r5
    4aca:	f844 3c2c 	str.w	r3, [r4, #-44]
		trans->bsize -= bytes;
    4ace:	f854 3c28 	ldr.w	r3, [r4, #-40]
    4ad2:	1b5b      	subs	r3, r3, r5
    4ad4:	f844 3c28 	str.w	r3, [r4, #-40]
		trans->tsize += bytes;
    4ad8:	f854 3c24 	ldr.w	r3, [r4, #-36]
    4adc:	442b      	add	r3, r5
    4ade:	f844 3c24 	str.w	r3, [r4, #-36]
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
    4ae2:	2d00      	cmp	r5, #0
    4ae4:	d0b1      	beq.n	4a4a <usb_transfer_work+0x2e>
    4ae6:	4630      	mov	r0, r6
    4ae8:	f013 f892 	bl	17c10 <usb_dc_ep_mps>
    4aec:	fbb5 f3f0 	udiv	r3, r5, r0
    4af0:	fb03 5510 	mls	r5, r3, r0, r5
    4af4:	2d00      	cmp	r5, #0
    4af6:	d1a8      	bne.n	4a4a <usb_transfer_work+0x2e>
    4af8:	f854 3c28 	ldr.w	r3, [r4, #-40]
    4afc:	2b00      	cmp	r3, #0
    4afe:	d0a4      	beq.n	4a4a <usb_transfer_work+0x2e>
		usb_dc_ep_read_continue(ep);
    4b00:	4630      	mov	r0, r6
    4b02:	f013 f829 	bl	17b58 <usb_dc_ep_read_continue>
    4b06:	e7a3      	b.n	4a50 <usb_transfer_work+0x34>
		trans->cb = NULL;
    4b08:	f844 0c20 	str.w	r0, [r4, #-32]
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    4b0c:	f1a4 0018 	sub.w	r0, r4, #24
    4b10:	f016 fbfa 	bl	1b308 <z_impl_k_sem_give>
		if (trans->status != -ECANCELED) {
    4b14:	f854 3c30 	ldr.w	r3, [r4, #-48]
    4b18:	338c      	adds	r3, #140	; 0x8c
    4b1a:	d0ac      	beq.n	4a76 <usb_transfer_work+0x5a>
			cb(ep, tsize, priv);
    4b1c:	4642      	mov	r2, r8
    4b1e:	4639      	mov	r1, r7
    4b20:	4630      	mov	r0, r6
    4b22:	47a8      	blx	r5
    4b24:	e7a7      	b.n	4a76 <usb_transfer_work+0x5a>
    4b26:	bf00      	nop
    4b28:	20001208 	.word	0x20001208

00004b2c <usb_transfer_ep_callback>:

void usb_transfer_ep_callback(uint8_t ep, enum usb_dc_ep_cb_status_code status)
{
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);

	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
    4b2c:	1e4b      	subs	r3, r1, #1
    4b2e:	2b01      	cmp	r3, #1
{
    4b30:	b573      	push	{r0, r1, r4, r5, r6, lr}
    4b32:	4606      	mov	r6, r0
    4b34:	460d      	mov	r5, r1
	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
    4b36:	d80f      	bhi.n	4b58 <usb_transfer_ep_callback+0x2c>
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
    4b38:	f7ff ff5a 	bl	49f0 <usb_ep_get_transfer>
		return;
	}

	if (!trans) {
    4b3c:	4604      	mov	r4, r0
    4b3e:	b968      	cbnz	r0, 4b5c <usb_transfer_ep_callback+0x30>
		if (status == USB_DC_EP_DATA_OUT) {
    4b40:	2d01      	cmp	r5, #1
    4b42:	d109      	bne.n	4b58 <usb_transfer_ep_callback+0x2c>
			 * so drain it).
			 */
			do {
				uint8_t data;

				usb_dc_ep_read_wait(ep, &data, 1, &bytes);
    4b44:	ab01      	add	r3, sp, #4
    4b46:	2201      	movs	r2, #1
    4b48:	f10d 0103 	add.w	r1, sp, #3
    4b4c:	4630      	mov	r0, r6
    4b4e:	f012 ffbb 	bl	17ac8 <usb_dc_ep_read_wait>
			} while (bytes);
    4b52:	9b01      	ldr	r3, [sp, #4]
    4b54:	2b00      	cmp	r3, #0
    4b56:	d1f5      	bne.n	4b44 <usb_transfer_ep_callback+0x18>
		/* Read (out) needs to be done from ep_callback */
		usb_transfer_work(&trans->work);
	} else {
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
	}
}
    4b58:	b002      	add	sp, #8
    4b5a:	bd70      	pop	{r4, r5, r6, pc}
	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
    4b5c:	f020 fed4 	bl	25908 <k_is_in_isr>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    4b60:	f104 0134 	add.w	r1, r4, #52	; 0x34
	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
    4b64:	b108      	cbz	r0, 4b6a <usb_transfer_ep_callback+0x3e>
    4b66:	2d01      	cmp	r5, #1
    4b68:	d105      	bne.n	4b76 <usb_transfer_ep_callback+0x4a>
		usb_transfer_work(&trans->work);
    4b6a:	4608      	mov	r0, r1
}
    4b6c:	b002      	add	sp, #8
    4b6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		usb_transfer_work(&trans->work);
    4b72:	f7ff bf53 	b.w	4a1c <usb_transfer_work>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    4b76:	4803      	ldr	r0, [pc, #12]	; (4b84 <usb_transfer_ep_callback+0x58>)
}
    4b78:	b002      	add	sp, #8
    4b7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    4b7e:	f021 b86a 	b.w	25c56 <k_work_submit_to_queue>
    4b82:	bf00      	nop
    4b84:	20001208 	.word	0x20001208

00004b88 <usb_transfer>:

int usb_transfer(uint8_t ep, uint8_t *data, size_t dlen, unsigned int flags,
		 usb_transfer_callback cb, void *cb_data)
{
    4b88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4b8c:	4606      	mov	r6, r0
    4b8e:	9101      	str	r1, [sp, #4]
    4b90:	4615      	mov	r5, r2
    4b92:	4698      	mov	r8, r3
	struct usb_transfer_data *trans = NULL;
	int i, key, ret = 0;

	/* Parallel transfer to same endpoint is not supported. */
	if (usb_transfer_is_busy(ep)) {
    4b94:	f018 f834 	bl	1cc00 <usb_transfer_is_busy>
    4b98:	4604      	mov	r4, r0
    4b9a:	2800      	cmp	r0, #0
    4b9c:	d15f      	bne.n	4c5e <usb_transfer+0xd6>
    4b9e:	f04f 0320 	mov.w	r3, #32
    4ba2:	f3ef 8a11 	mrs	sl, BASEPRI
    4ba6:	f383 8812 	msr	BASEPRI_MAX, r3
    4baa:	f3bf 8f6f 	isb	sy
	LOG_DBG("Transfer start, ep 0x%02x, data %p, dlen %zd",
		ep, data, dlen);

	key = irq_lock();

	for (i = 0; i < ARRAY_SIZE(ut_data); i++) {
    4bae:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 4c64 <usb_transfer+0xdc>
    4bb2:	f04f 0948 	mov.w	r9, #72	; 0x48
		if (!k_sem_take(&ut_data[i].sem, K_NO_WAIT)) {
    4bb6:	fb09 f704 	mul.w	r7, r9, r4
	return z_impl_k_sem_take(sem, timeout);
    4bba:	2200      	movs	r2, #0
    4bbc:	2300      	movs	r3, #0
    4bbe:	4658      	mov	r0, fp
    4bc0:	f016 fbc8 	bl	1b354 <z_impl_k_sem_take>
    4bc4:	b968      	cbnz	r0, 4be2 <usb_transfer+0x5a>
		LOG_ERR("No transfer slot available");
		ret = -ENOMEM;
		goto done;
	}

	if (trans->status == -EBUSY) {
    4bc6:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 4c68 <usb_transfer+0xe0>
    4bca:	eb09 0407 	add.w	r4, r9, r7
    4bce:	6863      	ldr	r3, [r4, #4]
    4bd0:	f113 0f10 	cmn.w	r3, #16
    4bd4:	d114      	bne.n	4c00 <usb_transfer+0x78>
    4bd6:	9301      	str	r3, [sp, #4]
	z_impl_k_sem_give(sem);
    4bd8:	4658      	mov	r0, fp
    4bda:	f016 fb95 	bl	1b308 <z_impl_k_sem_give>
		/* A transfer is already ongoing and not completed */
		LOG_ERR("A transfer is already ongoing, ep 0x%02x", ep);
		k_sem_give(&trans->sem);
		ret = -EBUSY;
		goto done;
    4bde:	9b01      	ldr	r3, [sp, #4]
    4be0:	e006      	b.n	4bf0 <usb_transfer+0x68>
	for (i = 0; i < ARRAY_SIZE(ut_data); i++) {
    4be2:	3401      	adds	r4, #1
    4be4:	2c04      	cmp	r4, #4
    4be6:	f10b 0b48 	add.w	fp, fp, #72	; 0x48
    4bea:	d1e4      	bne.n	4bb6 <usb_transfer+0x2e>
		ret = -ENOMEM;
    4bec:	f06f 030b 	mvn.w	r3, #11
	__asm__ volatile(
    4bf0:	f38a 8811 	msr	BASEPRI, sl
    4bf4:	f3bf 8f6f 	isb	sy
	}

done:
	irq_unlock(key);
	return ret;
}
    4bf8:	4618      	mov	r0, r3
    4bfa:	b003      	add	sp, #12
    4bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	trans->buffer = data;
    4c00:	9b01      	ldr	r3, [sp, #4]
	trans->tsize = 0;
    4c02:	6120      	str	r0, [r4, #16]
	trans->bsize = dlen;
    4c04:	e9c4 3502 	strd	r3, r5, [r4, #8]
	trans->cb = cb;
    4c08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4c0a:	6163      	str	r3, [r4, #20]
	trans->priv = cb_data;
    4c0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4c0e:	61a3      	str	r3, [r4, #24]
	trans->status = -EBUSY;
    4c10:	f06f 030f 	mvn.w	r3, #15
	trans->ep = ep;
    4c14:	f809 6007 	strb.w	r6, [r9, r7]
	trans->flags = flags;
    4c18:	f8c4 8044 	str.w	r8, [r4, #68]	; 0x44
	trans->status = -EBUSY;
    4c1c:	6063      	str	r3, [r4, #4]
	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
    4c1e:	4630      	mov	r0, r6
    4c20:	f012 fff6 	bl	17c10 <usb_dc_ep_mps>
    4c24:	b158      	cbz	r0, 4c3e <usb_transfer+0xb6>
    4c26:	4630      	mov	r0, r6
    4c28:	f012 fff2 	bl	17c10 <usb_dc_ep_mps>
    4c2c:	fbb5 f2f0 	udiv	r2, r5, r0
    4c30:	fb02 5510 	mls	r5, r2, r0, r5
    4c34:	b11d      	cbz	r5, 4c3e <usb_transfer+0xb6>
		trans->flags |= USB_TRANS_NO_ZLP;
    4c36:	6c63      	ldr	r3, [r4, #68]	; 0x44
    4c38:	f043 0304 	orr.w	r3, r3, #4
    4c3c:	6463      	str	r3, [r4, #68]	; 0x44
	if (flags & USB_TRANS_WRITE) {
    4c3e:	f018 0f02 	tst.w	r8, #2
    4c42:	d007      	beq.n	4c54 <usb_transfer+0xcc>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    4c44:	3734      	adds	r7, #52	; 0x34
    4c46:	4809      	ldr	r0, [pc, #36]	; (4c6c <usb_transfer+0xe4>)
    4c48:	eb09 0107 	add.w	r1, r9, r7
    4c4c:	f021 f803 	bl	25c56 <k_work_submit_to_queue>
	int i, key, ret = 0;
    4c50:	2300      	movs	r3, #0
    4c52:	e7cd      	b.n	4bf0 <usb_transfer+0x68>
		ret = usb_dc_ep_read_continue(ep);
    4c54:	4630      	mov	r0, r6
    4c56:	f012 ff7f 	bl	17b58 <usb_dc_ep_read_continue>
    4c5a:	4603      	mov	r3, r0
    4c5c:	e7c8      	b.n	4bf0 <usb_transfer+0x68>
		return -EBUSY;
    4c5e:	f06f 030f 	mvn.w	r3, #15
    4c62:	e7c9      	b.n	4bf8 <usb_transfer+0x70>
    4c64:	20002190 	.word	0x20002190
    4c68:	20002174 	.word	0x20002174
    4c6c:	20001208 	.word	0x20001208

00004c70 <usb_cancel_transfer>:

void usb_cancel_transfer(uint8_t ep)
{
    4c70:	b510      	push	{r4, lr}
	__asm__ volatile(
    4c72:	f04f 0320 	mov.w	r3, #32
    4c76:	f3ef 8411 	mrs	r4, BASEPRI
    4c7a:	f383 8812 	msr	BASEPRI_MAX, r3
    4c7e:	f3bf 8f6f 	isb	sy
	struct usb_transfer_data *trans;
	unsigned int key;

	key = irq_lock();

	trans = usb_ep_get_transfer(ep);
    4c82:	f7ff feb5 	bl	49f0 <usb_ep_get_transfer>
	if (!trans) {
    4c86:	b150      	cbz	r0, 4c9e <usb_cancel_transfer+0x2e>
		goto done;
	}

	if (trans->status != -EBUSY) {
    4c88:	6843      	ldr	r3, [r0, #4]
    4c8a:	3310      	adds	r3, #16
    4c8c:	d107      	bne.n	4c9e <usb_cancel_transfer+0x2e>
		goto done;
	}

	trans->status = -ECANCELED;
    4c8e:	f06f 038b 	mvn.w	r3, #139	; 0x8b
    4c92:	6043      	str	r3, [r0, #4]
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    4c94:	f100 0134 	add.w	r1, r0, #52	; 0x34
    4c98:	4803      	ldr	r0, [pc, #12]	; (4ca8 <usb_cancel_transfer+0x38>)
    4c9a:	f020 ffdc 	bl	25c56 <k_work_submit_to_queue>
	__asm__ volatile(
    4c9e:	f384 8811 	msr	BASEPRI, r4
    4ca2:	f3bf 8f6f 	isb	sy

done:
	irq_unlock(key);
}
    4ca6:	bd10      	pop	{r4, pc}
    4ca8:	20001208 	.word	0x20001208

00004cac <usb_cancel_transfers>:

void usb_cancel_transfers(void)
{
    4cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4cb0:	4c10      	ldr	r4, [pc, #64]	; (4cf4 <usb_cancel_transfers+0x48>)

		key = irq_lock();

		if (trans->status == -EBUSY) {
			trans->status = -ECANCELED;
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    4cb2:	f8df 8044 	ldr.w	r8, [pc, #68]	; 4cf8 <usb_cancel_transfers+0x4c>
{
    4cb6:	2504      	movs	r5, #4
			trans->status = -ECANCELED;
    4cb8:	f06f 078b 	mvn.w	r7, #139	; 0x8b
	__asm__ volatile(
    4cbc:	f04f 0320 	mov.w	r3, #32
    4cc0:	f3ef 8611 	mrs	r6, BASEPRI
    4cc4:	f383 8812 	msr	BASEPRI_MAX, r3
    4cc8:	f3bf 8f6f 	isb	sy
		if (trans->status == -EBUSY) {
    4ccc:	6863      	ldr	r3, [r4, #4]
    4cce:	3310      	adds	r3, #16
    4cd0:	d105      	bne.n	4cde <usb_cancel_transfers+0x32>
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    4cd2:	f104 0134 	add.w	r1, r4, #52	; 0x34
    4cd6:	4640      	mov	r0, r8
			trans->status = -ECANCELED;
    4cd8:	6067      	str	r7, [r4, #4]
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    4cda:	f020 ffbc 	bl	25c56 <k_work_submit_to_queue>
	__asm__ volatile(
    4cde:	f386 8811 	msr	BASEPRI, r6
    4ce2:	f3bf 8f6f 	isb	sy
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    4ce6:	3d01      	subs	r5, #1
    4ce8:	f104 0448 	add.w	r4, r4, #72	; 0x48
    4cec:	d1e6      	bne.n	4cbc <usb_cancel_transfers+0x10>
			LOG_DBG("Cancel transfer for ep: 0x%02x", trans->ep);
		}

		irq_unlock(key);
	}
}
    4cee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4cf2:	bf00      	nop
    4cf4:	20002174 	.word	0x20002174
    4cf8:	20001208 	.word	0x20001208

00004cfc <usb_transfer_init>:
	return pdata.tsize;
}

/* Init transfer slots */
int usb_transfer_init(void)
{
    4cfc:	b570      	push	{r4, r5, r6, lr}
    4cfe:	4c0a      	ldr	r4, [pc, #40]	; (4d28 <usb_transfer_init+0x2c>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
		k_work_init(&ut_data[i].work, usb_transfer_work);
    4d00:	4e0a      	ldr	r6, [pc, #40]	; (4d2c <usb_transfer_init+0x30>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    4d02:	2500      	movs	r5, #0
		k_work_init(&ut_data[i].work, usb_transfer_work);
    4d04:	4631      	mov	r1, r6
    4d06:	4620      	mov	r0, r4
    4d08:	f020 ff8c 	bl	25c24 <k_work_init>
	return z_impl_k_sem_init(sem, initial_count, limit);
    4d0c:	2201      	movs	r2, #1
    4d0e:	f1a4 0018 	sub.w	r0, r4, #24
    4d12:	4611      	mov	r1, r2
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    4d14:	3501      	adds	r5, #1
    4d16:	f020 ff05 	bl	25b24 <z_impl_k_sem_init>
    4d1a:	2d04      	cmp	r5, #4
    4d1c:	f104 0448 	add.w	r4, r4, #72	; 0x48
    4d20:	d1f0      	bne.n	4d04 <usb_transfer_init+0x8>
		k_sem_init(&ut_data[i].sem, 1, 1);
	}

	return 0;
}
    4d22:	2000      	movs	r0, #0
    4d24:	bd70      	pop	{r4, r5, r6, pc}
    4d26:	bf00      	nop
    4d28:	200021a8 	.word	0x200021a8
    4d2c:	00004a1d 	.word	0x00004a1d

00004d30 <cdc_acm_class_handle_req>:
 *
 * @return  0 on success, negative errno code on fail.
 */
int cdc_acm_class_handle_req(struct usb_setup_packet *setup,
			     int32_t *len, uint8_t **data)
{
    4d30:	b570      	push	{r4, r5, r6, lr}
    4d32:	4604      	mov	r4, r0
    4d34:	460e      	mov	r6, r1
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;
	uint32_t rate;
	uint32_t new_rate;

	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
    4d36:	7901      	ldrb	r1, [r0, #4]
    4d38:	4812      	ldr	r0, [pc, #72]	; (4d84 <cdc_acm_class_handle_req+0x54>)
{
    4d3a:	4615      	mov	r5, r2
	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
    4d3c:	f017 ff3c 	bl	1cbb8 <usb_get_dev_data_by_iface>
					   (uint8_t)setup->wIndex);
	if (common == NULL) {
    4d40:	b1e8      	cbz	r0, 4d7e <cdc_acm_class_handle_req+0x4e>
		return -ENODEV;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	if (usb_reqtype_is_to_device(setup)) {
    4d42:	f994 2000 	ldrsb.w	r2, [r4]
		switch (setup->bRequest) {
    4d46:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_device(setup)) {
    4d48:	2a00      	cmp	r2, #0
    4d4a:	db11      	blt.n	4d70 <cdc_acm_class_handle_req+0x40>
		switch (setup->bRequest) {
    4d4c:	2b20      	cmp	r3, #32
    4d4e:	d004      	beq.n	4d5a <cdc_acm_class_handle_req+0x2a>
    4d50:	2b22      	cmp	r3, #34	; 0x22
    4d52:	d009      	beq.n	4d68 <cdc_acm_class_handle_req+0x38>
		}
	}

	LOG_DBG("CDC ACM bmRequestType 0x%02x bRequest 0x%02x unsupported",
		setup->bmRequestType, setup->bRequest);
	return -ENOTSUP;
    4d54:	f06f 0085 	mvn.w	r0, #133	; 0x85
    4d58:	e005      	b.n	4d66 <cdc_acm_class_handle_req+0x36>
			memcpy(&dev_data->line_coding, *data,
    4d5a:	6829      	ldr	r1, [r5, #0]
    4d5c:	2207      	movs	r2, #7
    4d5e:	380c      	subs	r0, #12
    4d60:	f019 f967 	bl	1e032 <memcpy>
			return 0;
    4d64:	2000      	movs	r0, #0
}
    4d66:	bd70      	pop	{r4, r5, r6, pc}
			dev_data->line_state = (uint8_t)setup->wValue;
    4d68:	8863      	ldrh	r3, [r4, #2]
    4d6a:	f800 3c05 	strb.w	r3, [r0, #-5]
			return 0;
    4d6e:	e7f9      	b.n	4d64 <cdc_acm_class_handle_req+0x34>
		if (setup->bRequest == GET_LINE_CODING) {
    4d70:	2b21      	cmp	r3, #33	; 0x21
    4d72:	d1ef      	bne.n	4d54 <cdc_acm_class_handle_req+0x24>
			*data = (uint8_t *)(&dev_data->line_coding);
    4d74:	380c      	subs	r0, #12
			*len = sizeof(dev_data->line_coding);
    4d76:	2307      	movs	r3, #7
			*data = (uint8_t *)(&dev_data->line_coding);
    4d78:	6028      	str	r0, [r5, #0]
			*len = sizeof(dev_data->line_coding);
    4d7a:	6033      	str	r3, [r6, #0]
    4d7c:	e7f2      	b.n	4d64 <cdc_acm_class_handle_req+0x34>
		return -ENODEV;
    4d7e:	f06f 0012 	mvn.w	r0, #18
    4d82:	e7f0      	b.n	4d66 <cdc_acm_class_handle_req+0x36>
    4d84:	20002294 	.word	0x20002294

00004d88 <cdc_acm_int_in>:
 *
 * @param ep        Endpoint address.
 * @param ep_status Endpoint status code.
 */
static void cdc_acm_int_in(uint8_t ep, enum usb_dc_ep_cb_status_code ep_status)
{
    4d88:	b508      	push	{r3, lr}
    4d8a:	4601      	mov	r1, r0
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;

	ARG_UNUSED(ep_status);

	common = usb_get_dev_data_by_ep(&cdc_acm_data_devlist, ep);
    4d8c:	4803      	ldr	r0, [pc, #12]	; (4d9c <cdc_acm_int_in+0x14>)
    4d8e:	f017 ff21 	bl	1cbd4 <usb_get_dev_data_by_ep>
	if (common == NULL) {
    4d92:	b110      	cbz	r0, 4d9a <cdc_acm_int_in+0x12>
		return;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	dev_data->notification_sent = 1U;
    4d94:	2301      	movs	r3, #1
    4d96:	f800 3c03 	strb.w	r3, [r0, #-3]
	LOG_DBG("CDC_IntIN EP[%x]\r", ep);
}
    4d9a:	bd08      	pop	{r3, pc}
    4d9c:	20002294 	.word	0x20002294

00004da0 <cdc_acm_irq_rx_enable>:
 *
 * @param dev CDC ACM device struct.
 */
static void cdc_acm_irq_rx_enable(const struct device *dev)
{
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    4da0:	6901      	ldr	r1, [r0, #16]

	dev_data->rx_irq_ena = true;
    4da2:	2301      	movs	r3, #1
    4da4:	f881 302b 	strb.w	r3, [r1, #43]	; 0x2b

	if (dev_data->cb && dev_data->rx_ready) {
    4da8:	680b      	ldr	r3, [r1, #0]
    4daa:	b133      	cbz	r3, 4dba <cdc_acm_irq_rx_enable+0x1a>
    4dac:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
    4db0:	b11b      	cbz	r3, 4dba <cdc_acm_irq_rx_enable+0x1a>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    4db2:	4802      	ldr	r0, [pc, #8]	; (4dbc <cdc_acm_irq_rx_enable+0x1c>)
    4db4:	3108      	adds	r1, #8
    4db6:	f020 bf4e 	b.w	25c56 <k_work_submit_to_queue>
	}
}
    4dba:	4770      	bx	lr
    4dbc:	20001208 	.word	0x20001208

00004dc0 <cdc_acm_irq_tx_enable>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    4dc0:	6901      	ldr	r1, [r0, #16]
	dev_data->tx_irq_ena = true;
    4dc2:	2301      	movs	r3, #1
    4dc4:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
	if (dev_data->cb && dev_data->tx_ready) {
    4dc8:	680b      	ldr	r3, [r1, #0]
    4dca:	b133      	cbz	r3, 4dda <cdc_acm_irq_tx_enable+0x1a>
    4dcc:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
    4dd0:	b11b      	cbz	r3, 4dda <cdc_acm_irq_tx_enable+0x1a>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    4dd2:	4802      	ldr	r0, [pc, #8]	; (4ddc <cdc_acm_irq_tx_enable+0x1c>)
    4dd4:	3108      	adds	r1, #8
    4dd6:	f020 bf3e 	b.w	25c56 <k_work_submit_to_queue>
}
    4dda:	4770      	bx	lr
    4ddc:	20001208 	.word	0x20001208

00004de0 <cdc_acm_reset_port>:
	dev_data->line_coding = (struct cdc_acm_line_coding)
    4de0:	4a0b      	ldr	r2, [pc, #44]	; (4e10 <cdc_acm_reset_port+0x30>)
{
    4de2:	4603      	mov	r3, r0
	dev_data->configured = false;
    4de4:	2100      	movs	r1, #0
    4de6:	f8a0 107e 	strh.w	r1, [r0, #126]	; 0x7e
	dev_data->tx_ready = false;
    4dea:	8501      	strh	r1, [r0, #40]	; 0x28
	dev_data->line_coding = (struct cdc_acm_line_coding)
    4dec:	6810      	ldr	r0, [r2, #0]
    4dee:	6758      	str	r0, [r3, #116]	; 0x74
    4df0:	8890      	ldrh	r0, [r2, #4]
    4df2:	7992      	ldrb	r2, [r2, #6]
    4df4:	f8a3 0078 	strh.w	r0, [r3, #120]	; 0x78
    4df8:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	dev_data->serial_state = 0;
    4dfc:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
	dev_data->line_state = 0;
    4e00:	f883 107b 	strb.w	r1, [r3, #123]	; 0x7b
	memset(&dev_data->rx_buf, 0, CDC_ACM_BUFFER_SIZE);
    4e04:	2240      	movs	r2, #64	; 0x40
    4e06:	f103 002c 	add.w	r0, r3, #44	; 0x2c
    4e0a:	f019 b91d 	b.w	1e048 <memset>
    4e0e:	bf00      	nop
    4e10:	00026654 	.word	0x00026654

00004e14 <cdc_acm_fifo_fill>:
{
    4e14:	b538      	push	{r3, r4, r5, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    4e16:	6905      	ldr	r5, [r0, #16]
	if (!dev_data->configured || dev_data->suspended) {
    4e18:	f895 007e 	ldrb.w	r0, [r5, #126]	; 0x7e
    4e1c:	b170      	cbz	r0, 4e3c <cdc_acm_fifo_fill+0x28>
    4e1e:	f895 307f 	ldrb.w	r3, [r5, #127]	; 0x7f
    4e22:	b963      	cbnz	r3, 4e3e <cdc_acm_fifo_fill+0x2a>
	dev_data->tx_ready = false;
    4e24:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
    4e28:	6f28      	ldr	r0, [r5, #112]	; 0x70
    4e2a:	f017 fe18 	bl	1ca5e <ring_buf_put>
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    4e2e:	f105 0118 	add.w	r1, r5, #24
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
    4e32:	4604      	mov	r4, r0
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    4e34:	4803      	ldr	r0, [pc, #12]	; (4e44 <cdc_acm_fifo_fill+0x30>)
    4e36:	f020 ff0e 	bl	25c56 <k_work_submit_to_queue>
	return wrote;
    4e3a:	4620      	mov	r0, r4
}
    4e3c:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
    4e3e:	2000      	movs	r0, #0
    4e40:	e7fc      	b.n	4e3c <cdc_acm_fifo_fill+0x28>
    4e42:	bf00      	nop
    4e44:	20001208 	.word	0x20001208

00004e48 <cdc_acm_read_cb>:
{
    4e48:	b573      	push	{r0, r1, r4, r5, r6, lr}
    4e4a:	4614      	mov	r4, r2
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
    4e4c:	f102 062c 	add.w	r6, r2, #44	; 0x2c
	if (size <= 0) {
    4e50:	1e0a      	subs	r2, r1, #0
{
    4e52:	4605      	mov	r5, r0
	if (size <= 0) {
    4e54:	dd10      	ble.n	4e78 <cdc_acm_read_cb+0x30>
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
    4e56:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    4e58:	4631      	mov	r1, r6
    4e5a:	f017 fe00 	bl	1ca5e <ring_buf_put>
	dev_data->rx_ready = true;
    4e5e:	2301      	movs	r3, #1
    4e60:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	if (dev_data->cb && dev_data->rx_irq_ena) {
    4e64:	6823      	ldr	r3, [r4, #0]
    4e66:	b13b      	cbz	r3, 4e78 <cdc_acm_read_cb+0x30>
    4e68:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
    4e6c:	b123      	cbz	r3, 4e78 <cdc_acm_read_cb+0x30>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    4e6e:	4808      	ldr	r0, [pc, #32]	; (4e90 <cdc_acm_read_cb+0x48>)
    4e70:	f104 0108 	add.w	r1, r4, #8
    4e74:	f020 feef 	bl	25c56 <k_work_submit_to_queue>
	usb_transfer(ep, dev_data->rx_buf, sizeof(dev_data->rx_buf),
    4e78:	4b06      	ldr	r3, [pc, #24]	; (4e94 <cdc_acm_read_cb+0x4c>)
    4e7a:	9300      	str	r3, [sp, #0]
    4e7c:	9401      	str	r4, [sp, #4]
    4e7e:	2301      	movs	r3, #1
    4e80:	2240      	movs	r2, #64	; 0x40
    4e82:	4631      	mov	r1, r6
    4e84:	4628      	mov	r0, r5
    4e86:	f7ff fe7f 	bl	4b88 <usb_transfer>
}
    4e8a:	b002      	add	sp, #8
    4e8c:	bd70      	pop	{r4, r5, r6, pc}
    4e8e:	bf00      	nop
    4e90:	20001208 	.word	0x20001208
    4e94:	00004e49 	.word	0x00004e49

00004e98 <cdc_acm_poll_out>:
 * is not ready, no data is transferred to the buffer, that is, c is dropped.
 * If the USB subsystem is ready and the buffer is full, the first character
 * from the tx_ringbuf is removed to make room for the new character.
 */
static void cdc_acm_poll_out(const struct device *dev, unsigned char c)
{
    4e98:	b513      	push	{r0, r1, r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    4e9a:	6904      	ldr	r4, [r0, #16]
{
    4e9c:	f88d 1007 	strb.w	r1, [sp, #7]

	if (!dev_data->configured || dev_data->suspended) {
    4ea0:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
    4ea4:	b18b      	cbz	r3, 4eca <cdc_acm_poll_out+0x32>
    4ea6:	f894 307f 	ldrb.w	r3, [r4, #127]	; 0x7f
    4eaa:	b973      	cbnz	r3, 4eca <cdc_acm_poll_out+0x32>
		return;
	}

	dev_data->tx_ready = false;

	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    4eac:	f10d 0107 	add.w	r1, sp, #7
    4eb0:	6f20      	ldr	r0, [r4, #112]	; 0x70
	dev_data->tx_ready = false;
    4eb2:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    4eb6:	2201      	movs	r2, #1
    4eb8:	f017 fdd1 	bl	1ca5e <ring_buf_put>
    4ebc:	4601      	mov	r1, r0
    4ebe:	b130      	cbz	r0, 4ece <cdc_acm_poll_out+0x36>
			LOG_ERR("Failed to drain buffer");
			return;
		}
	}

	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    4ec0:	480a      	ldr	r0, [pc, #40]	; (4eec <cdc_acm_poll_out+0x54>)
    4ec2:	f104 0118 	add.w	r1, r4, #24
    4ec6:	f020 fec6 	bl	25c56 <k_work_submit_to_queue>
}
    4eca:	b002      	add	sp, #8
    4ecc:	bd10      	pop	{r4, pc}
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
    4ece:	6f20      	ldr	r0, [r4, #112]	; 0x70
    4ed0:	2201      	movs	r2, #1
    4ed2:	f017 fe2c 	bl	1cb2e <ring_buf_get>
    4ed6:	2800      	cmp	r0, #0
    4ed8:	d0f7      	beq.n	4eca <cdc_acm_poll_out+0x32>
		    !ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    4eda:	6f20      	ldr	r0, [r4, #112]	; 0x70
    4edc:	2201      	movs	r2, #1
    4ede:	f10d 0107 	add.w	r1, sp, #7
    4ee2:	f017 fdbc 	bl	1ca5e <ring_buf_put>
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
    4ee6:	2800      	cmp	r0, #0
    4ee8:	d1ea      	bne.n	4ec0 <cdc_acm_poll_out+0x28>
    4eea:	e7ee      	b.n	4eca <cdc_acm_poll_out+0x32>
    4eec:	20001208 	.word	0x20001208

00004ef0 <cdc_acm_write_cb>:
	dev_data->tx_ready = true;
    4ef0:	2301      	movs	r3, #1
    4ef2:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
	if (dev_data->cb && dev_data->tx_irq_ena) {
    4ef6:	6813      	ldr	r3, [r2, #0]
{
    4ef8:	b510      	push	{r4, lr}
    4efa:	4614      	mov	r4, r2
	if (dev_data->cb && dev_data->tx_irq_ena) {
    4efc:	b13b      	cbz	r3, 4f0e <cdc_acm_write_cb+0x1e>
    4efe:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
    4f02:	b123      	cbz	r3, 4f0e <cdc_acm_write_cb+0x1e>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    4f04:	4808      	ldr	r0, [pc, #32]	; (4f28 <cdc_acm_write_cb+0x38>)
    4f06:	f102 0108 	add.w	r1, r2, #8
    4f0a:	f020 fea4 	bl	25c56 <k_work_submit_to_queue>
	if (ring_buf_is_empty(dev_data->tx_ringbuf)) {
    4f0e:	6f20      	ldr	r0, [r4, #112]	; 0x70
    4f10:	f017 fd4b 	bl	1c9aa <ring_buf_is_empty>
    4f14:	b930      	cbnz	r0, 4f24 <cdc_acm_write_cb+0x34>
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    4f16:	f104 0118 	add.w	r1, r4, #24
    4f1a:	4803      	ldr	r0, [pc, #12]	; (4f28 <cdc_acm_write_cb+0x38>)
}
    4f1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    4f20:	f020 be99 	b.w	25c56 <k_work_submit_to_queue>
}
    4f24:	bd10      	pop	{r4, pc}
    4f26:	bf00      	nop
    4f28:	20001208 	.word	0x20001208

00004f2c <tx_work_handler>:
{
    4f2c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct usb_cfg_data *cfg = (void *)dev->config;
    4f2e:	6e83      	ldr	r3, [r0, #104]	; 0x68
	uint8_t ep = cfg->endpoint[ACM_IN_EP_IDX].ep_addr;
    4f30:	685b      	ldr	r3, [r3, #4]
    4f32:	6a1b      	ldr	r3, [r3, #32]
    4f34:	7d1e      	ldrb	r6, [r3, #20]
{
    4f36:	4605      	mov	r5, r0
	if (usb_transfer_is_busy(ep)) {
    4f38:	4630      	mov	r0, r6
    4f3a:	f017 fe61 	bl	1cc00 <usb_transfer_is_busy>
    4f3e:	b9d0      	cbnz	r0, 4f76 <tx_work_handler+0x4a>
	len = ring_buf_get_claim(dev_data->tx_ringbuf, &data,
    4f40:	6da8      	ldr	r0, [r5, #88]	; 0x58
    4f42:	f44f 6280 	mov.w	r2, #1024	; 0x400
    4f46:	a903      	add	r1, sp, #12
    4f48:	f017 fda8 	bl	1ca9c <ring_buf_get_claim>
	if (!len) {
    4f4c:	4604      	mov	r4, r0
    4f4e:	b190      	cbz	r0, 4f76 <tx_work_handler+0x4a>
	if (!(len % CONFIG_CDC_ACM_BULK_EP_MPS)) {
    4f50:	0683      	lsls	r3, r0, #26
	struct cdc_acm_dev_data_t *dev_data =
    4f52:	f1a5 0318 	sub.w	r3, r5, #24
		len -= 1;
    4f56:	bf08      	it	eq
    4f58:	f100 34ff 	addeq.w	r4, r0, #4294967295	; 0xffffffff
	usb_transfer(ep, data, len, USB_TRANS_WRITE,
    4f5c:	9301      	str	r3, [sp, #4]
    4f5e:	4b07      	ldr	r3, [pc, #28]	; (4f7c <tx_work_handler+0x50>)
    4f60:	9903      	ldr	r1, [sp, #12]
    4f62:	9300      	str	r3, [sp, #0]
    4f64:	4622      	mov	r2, r4
    4f66:	2302      	movs	r3, #2
    4f68:	4630      	mov	r0, r6
    4f6a:	f7ff fe0d 	bl	4b88 <usb_transfer>
	ring_buf_get_finish(dev_data->tx_ringbuf, len);
    4f6e:	6da8      	ldr	r0, [r5, #88]	; 0x58
    4f70:	4621      	mov	r1, r4
    4f72:	f017 fdbe 	bl	1caf2 <ring_buf_get_finish>
}
    4f76:	b004      	add	sp, #16
    4f78:	bd70      	pop	{r4, r5, r6, pc}
    4f7a:	bf00      	nop
    4f7c:	00004ef1 	.word	0x00004ef1

00004f80 <cdc_acm_dev_status_cb>:
{
    4f80:	b538      	push	{r3, r4, r5, lr}
    4f82:	460d      	mov	r5, r1
	common = usb_get_dev_data_by_cfg(&cdc_acm_data_devlist, cfg);
    4f84:	4601      	mov	r1, r0
    4f86:	4824      	ldr	r0, [pc, #144]	; (5018 <cdc_acm_dev_status_cb+0x98>)
    4f88:	f017 fe0a 	bl	1cba0 <usb_get_dev_data_by_cfg>
	if (common == NULL) {
    4f8c:	4604      	mov	r4, r0
    4f8e:	b380      	cbz	r0, 4ff2 <cdc_acm_dev_status_cb+0x72>
	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);
    4f90:	4602      	mov	r2, r0
	switch (status) {
    4f92:	1e69      	subs	r1, r5, #1
	struct usb_cfg_data *cfg = (void *)dev->config;
    4f94:	f852 3980 	ldr.w	r3, [r2], #-128
    4f98:	685b      	ldr	r3, [r3, #4]
	switch (status) {
    4f9a:	2905      	cmp	r1, #5
    4f9c:	d829      	bhi.n	4ff2 <cdc_acm_dev_status_cb+0x72>
    4f9e:	e8df f001 	tbb	[pc, r1]
    4fa2:	2820      	.short	0x2820
    4fa4:	29252003 	.word	0x29252003
		if (!dev_data->configured) {
    4fa8:	f814 1c02 	ldrb.w	r1, [r4, #-2]
    4fac:	b931      	cbnz	r1, 4fbc <cdc_acm_dev_status_cb+0x3c>
			cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr, 0,
    4fae:	6a1b      	ldr	r3, [r3, #32]
    4fb0:	7b18      	ldrb	r0, [r3, #12]
    4fb2:	f7ff ff49 	bl	4e48 <cdc_acm_read_cb>
			dev_data->configured = true;
    4fb6:	2301      	movs	r3, #1
    4fb8:	f804 3c02 	strb.w	r3, [r4, #-2]
		if (!dev_data->tx_ready) {
    4fbc:	f814 3c58 	ldrb.w	r3, [r4, #-88]
    4fc0:	b9bb      	cbnz	r3, 4ff2 <cdc_acm_dev_status_cb+0x72>
			dev_data->tx_ready = true;
    4fc2:	2301      	movs	r3, #1
    4fc4:	f804 3c58 	strb.w	r3, [r4, #-88]
			if (dev_data->cb != NULL && dev_data->tx_irq_ena) {
    4fc8:	f854 3c80 	ldr.w	r3, [r4, #-128]
    4fcc:	b18b      	cbz	r3, 4ff2 <cdc_acm_dev_status_cb+0x72>
    4fce:	f814 3c56 	ldrb.w	r3, [r4, #-86]
    4fd2:	b173      	cbz	r3, 4ff2 <cdc_acm_dev_status_cb+0x72>
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    4fd4:	f1a4 0178 	sub.w	r1, r4, #120	; 0x78
    4fd8:	4810      	ldr	r0, [pc, #64]	; (501c <cdc_acm_dev_status_cb+0x9c>)
}
    4fda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    4fde:	f020 be3a 	b.w	25c56 <k_work_submit_to_queue>
}
    4fe2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		cdc_acm_reset_port(dev_data);
    4fe6:	4610      	mov	r0, r2
    4fe8:	f7ff befa 	b.w	4de0 <cdc_acm_reset_port>
		dev_data->suspended = true;
    4fec:	2301      	movs	r3, #1
    4fee:	f804 3c01 	strb.w	r3, [r4, #-1]
}
    4ff2:	bd38      	pop	{r3, r4, r5, pc}
		if (dev_data->suspended) {
    4ff4:	f814 1c01 	ldrb.w	r1, [r4, #-1]
    4ff8:	2900      	cmp	r1, #0
    4ffa:	d0fa      	beq.n	4ff2 <cdc_acm_dev_status_cb+0x72>
			if (dev_data->configured) {
    4ffc:	f814 0c02 	ldrb.w	r0, [r4, #-2]
			dev_data->suspended = false;
    5000:	2100      	movs	r1, #0
    5002:	f804 1c01 	strb.w	r1, [r4, #-1]
			if (dev_data->configured) {
    5006:	2800      	cmp	r0, #0
    5008:	d0f3      	beq.n	4ff2 <cdc_acm_dev_status_cb+0x72>
				cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr,
    500a:	6a1b      	ldr	r3, [r3, #32]
    500c:	7b18      	ldrb	r0, [r3, #12]
}
    500e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr,
    5012:	f7ff bf19 	b.w	4e48 <cdc_acm_read_cb>
    5016:	bf00      	nop
    5018:	20002294 	.word	0x20002294
    501c:	20001208 	.word	0x20001208

00005020 <cdc_acm_init>:
{
    5020:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    5022:	6904      	ldr	r4, [r0, #16]
	parent->next = child;
    5024:	2300      	movs	r3, #0
    5026:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    502a:	4b0c      	ldr	r3, [pc, #48]	; (505c <cdc_acm_init+0x3c>)
	dev_data->common.dev = dev;
    502c:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    5030:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&cdc_acm_data_devlist, &dev_data->common.node);
    5032:	f104 0284 	add.w	r2, r4, #132	; 0x84
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    5036:	b969      	cbnz	r1, 5054 <cdc_acm_init+0x34>
	list->head = node;
    5038:	e9c3 2200 	strd	r2, r2, [r3]
	k_work_init(&dev_data->cb_work, cdc_acm_irq_callback_work_handler);
    503c:	f104 0008 	add.w	r0, r4, #8
    5040:	4907      	ldr	r1, [pc, #28]	; (5060 <cdc_acm_init+0x40>)
    5042:	f020 fdef 	bl	25c24 <k_work_init>
	k_work_init(&dev_data->tx_work, tx_work_handler);
    5046:	f104 0018 	add.w	r0, r4, #24
    504a:	4906      	ldr	r1, [pc, #24]	; (5064 <cdc_acm_init+0x44>)
    504c:	f020 fdea 	bl	25c24 <k_work_init>
}
    5050:	2000      	movs	r0, #0
    5052:	bd10      	pop	{r4, pc}
	parent->next = child;
    5054:	600a      	str	r2, [r1, #0]
	list->tail = node;
    5056:	605a      	str	r2, [r3, #4]
}
    5058:	e7f0      	b.n	503c <cdc_acm_init+0x1c>
    505a:	bf00      	nop
    505c:	20002294 	.word	0x20002294
    5060:	0001cc2b 	.word	0x0001cc2b
    5064:	00004f2d 	.word	0x00004f2d

00005068 <cdc_acm_send_notification.isra.0>:
static int cdc_acm_send_notification(const struct device *dev,
    5068:	b530      	push	{r4, r5, lr}
    506a:	b085      	sub	sp, #20
	notification.bmRequestType = 0xA1;
    506c:	23a1      	movs	r3, #161	; 0xa1
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    506e:	6905      	ldr	r5, [r0, #16]
	notification.bmRequestType = 0xA1;
    5070:	f88d 3004 	strb.w	r3, [sp, #4]
	notification.bNotificationType = 0x20;
    5074:	2320      	movs	r3, #32
	struct usb_cfg_data * const cfg = (void *)dev->config;
    5076:	6842      	ldr	r2, [r0, #4]
	notification.bNotificationType = 0x20;
    5078:	f88d 3005 	strb.w	r3, [sp, #5]
	notification.wValue = 0U;
    507c:	2300      	movs	r3, #0
	dev_data->notification_sent = 0U;
    507e:	f885 307d 	strb.w	r3, [r5, #125]	; 0x7d
	notification.wLength = sys_cpu_to_le16(sizeof(serial_state));
    5082:	2002      	movs	r0, #2
    5084:	f8ad 000a 	strh.w	r0, [sp, #10]
	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
    5088:	6a10      	ldr	r0, [r2, #32]
	notification.data = sys_cpu_to_le16(serial_state);
    508a:	f8ad 100c 	strh.w	r1, [sp, #12]
	notification.wIndex = 0U;
    508e:	f8ad 3008 	strh.w	r3, [sp, #8]
	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
    5092:	7900      	ldrb	r0, [r0, #4]
	notification.wValue = 0U;
    5094:	f8ad 3006 	strh.w	r3, [sp, #6]
	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
    5098:	220a      	movs	r2, #10
    509a:	a901      	add	r1, sp, #4
    509c:	f017 fd68 	bl	1cb70 <usb_write>
	while (!((volatile uint8_t)dev_data->notification_sent)) {
    50a0:	4c05      	ldr	r4, [pc, #20]	; (50b8 <cdc_acm_send_notification.isra.0+0x50>)
    50a2:	f895 307d 	ldrb.w	r3, [r5, #125]	; 0x7d
    50a6:	b923      	cbnz	r3, 50b2 <cdc_acm_send_notification.isra.0+0x4a>
	z_impl_k_busy_wait(usec_to_wait);
    50a8:	2001      	movs	r0, #1
    50aa:	f020 ff81 	bl	25fb0 <z_impl_k_busy_wait>
		if (++cnt > CDC_CONTROL_SERIAL_STATE_TIMEOUT_US) {
    50ae:	3c01      	subs	r4, #1
    50b0:	d1f7      	bne.n	50a2 <cdc_acm_send_notification.isra.0+0x3a>
}
    50b2:	b005      	add	sp, #20
    50b4:	bd30      	pop	{r4, r5, pc}
    50b6:	bf00      	nop
    50b8:	000186a1 	.word	0x000186a1

000050bc <z_usb_work_q_init>:
K_KERNEL_STACK_DEFINE(z_usb_work_q_stack, CONFIG_USB_WORKQUEUE_STACK_SIZE);

struct k_work_q z_usb_work_q;

static int z_usb_work_q_init(const struct device *dev)
{
    50bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);

	k_work_queue_start(&z_usb_work_q,
    50be:	4d09      	ldr	r5, [pc, #36]	; (50e4 <z_usb_work_q_init+0x28>)
    50c0:	4909      	ldr	r1, [pc, #36]	; (50e8 <z_usb_work_q_init+0x2c>)
    50c2:	2400      	movs	r4, #0
    50c4:	9400      	str	r4, [sp, #0]
    50c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    50ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
    50ce:	4628      	mov	r0, r5
    50d0:	f016 fa8c 	bl	1b5ec <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
    50d4:	4905      	ldr	r1, [pc, #20]	; (50ec <z_usb_work_q_init+0x30>)
    50d6:	4628      	mov	r0, r5
    50d8:	f020 fc1c 	bl	25914 <z_impl_k_thread_name_set>
			   K_KERNEL_STACK_SIZEOF(z_usb_work_q_stack),
			   CONFIG_USB_WORKQUEUE_PRIORITY, NULL);
	k_thread_name_set(&z_usb_work_q.thread, "usbworkq");

	return 0;
}
    50dc:	4620      	mov	r0, r4
    50de:	b003      	add	sp, #12
    50e0:	bd30      	pop	{r4, r5, pc}
    50e2:	bf00      	nop
    50e4:	20001208 	.word	0x20001208
    50e8:	20004140 	.word	0x20004140
    50ec:	00027381 	.word	0x00027381

000050f0 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    50f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    50f4:	4605      	mov	r5, r0
	__asm__ volatile(
    50f6:	f04f 0320 	mov.w	r3, #32
    50fa:	f3ef 8611 	mrs	r6, BASEPRI
    50fe:	f383 8812 	msr	BASEPRI_MAX, r3
    5102:	f3bf 8f6f 	isb	sy
	return list->head;
    5106:	4b0e      	ldr	r3, [pc, #56]	; (5140 <pm_state_notify+0x50>)
    5108:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    510a:	b19c      	cbz	r4, 5134 <pm_state_notify+0x44>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    510c:	4f0d      	ldr	r7, [pc, #52]	; (5144 <pm_state_notify+0x54>)
    510e:	f8df 8038 	ldr.w	r8, [pc, #56]	; 5148 <pm_state_notify+0x58>
    5112:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    5116:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    511a:	2d00      	cmp	r5, #0
    511c:	bf08      	it	eq
    511e:	4613      	moveq	r3, r2
		if (callback) {
    5120:	b12b      	cbz	r3, 512e <pm_state_notify+0x3e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    5122:	f898 2014 	ldrb.w	r2, [r8, #20]
    5126:	fb09 f202 	mul.w	r2, r9, r2
    512a:	5cb8      	ldrb	r0, [r7, r2]
    512c:	4798      	blx	r3
	return node->next;
    512e:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    5130:	2c00      	cmp	r4, #0
    5132:	d1f0      	bne.n	5116 <pm_state_notify+0x26>
	__asm__ volatile(
    5134:	f386 8811 	msr	BASEPRI, r6
    5138:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    513c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5140:	2000229c 	.word	0x2000229c
    5144:	200022a4 	.word	0x200022a4
    5148:	20003f18 	.word	0x20003f18

0000514c <atomic_clear_bit.constprop.0>:
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    514c:	0942      	lsrs	r2, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
    514e:	2301      	movs	r3, #1
    5150:	f000 001f 	and.w	r0, r0, #31
    5154:	fa03 f000 	lsl.w	r0, r3, r0
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5158:	4b07      	ldr	r3, [pc, #28]	; (5178 <atomic_clear_bit.constprop.0+0x2c>)
    515a:	f3bf 8f5b 	dmb	ish
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    515e:	43c0      	mvns	r0, r0
    5160:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    5164:	e853 2f00 	ldrex	r2, [r3]
    5168:	4002      	ands	r2, r0
    516a:	e843 2100 	strex	r1, r2, [r3]
    516e:	2900      	cmp	r1, #0
    5170:	d1f8      	bne.n	5164 <atomic_clear_bit.constprop.0+0x18>
    5172:	f3bf 8f5b 	dmb	ish
}
    5176:	4770      	bx	lr
    5178:	200022b0 	.word	0x200022b0

0000517c <pm_system_resume>:

void pm_system_resume(void)
{
    517c:	b530      	push	{r4, r5, lr}
	uint8_t id = _current_cpu->id;
    517e:	4b1d      	ldr	r3, [pc, #116]	; (51f4 <pm_system_resume+0x78>)
    5180:	7d1c      	ldrb	r4, [r3, #20]
    5182:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    5186:	f004 031f 	and.w	r3, r4, #31
    518a:	2201      	movs	r2, #1
    518c:	409a      	lsls	r2, r3
    518e:	4b1a      	ldr	r3, [pc, #104]	; (51f8 <pm_system_resume+0x7c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    5190:	0961      	lsrs	r1, r4, #5
{
    5192:	b085      	sub	sp, #20
    5194:	43d0      	mvns	r0, r2
    5196:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    519a:	e853 1f00 	ldrex	r1, [r3]
    519e:	ea01 0500 	and.w	r5, r1, r0
    51a2:	e843 5c00 	strex	ip, r5, [r3]
    51a6:	f1bc 0f00 	cmp.w	ip, #0
    51aa:	d1f6      	bne.n	519a <pm_system_resume+0x1e>
    51ac:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    51b0:	4211      	tst	r1, r2
    51b2:	d017      	beq.n	51e4 <pm_system_resume+0x68>
		exit_pos_ops(z_cpus_pm_state[id]);
    51b4:	4d11      	ldr	r5, [pc, #68]	; (51fc <pm_system_resume+0x80>)
    51b6:	220c      	movs	r2, #12
    51b8:	fb02 5204 	mla	r2, r2, r4, r5
    51bc:	ca07      	ldmia	r2, {r0, r1, r2}
    51be:	ab01      	add	r3, sp, #4
    51c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    51c4:	4a0e      	ldr	r2, [pc, #56]	; (5200 <pm_system_resume+0x84>)
    51c6:	b17a      	cbz	r2, 51e8 <pm_system_resume+0x6c>
		pm_power_state_exit_post_ops(info);
    51c8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    51cc:	f018 ff5b 	bl	1e086 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    51d0:	2000      	movs	r0, #0
    51d2:	f7ff ff8d 	bl	50f0 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    51d6:	230c      	movs	r3, #12
    51d8:	435c      	muls	r4, r3
    51da:	192a      	adds	r2, r5, r4
    51dc:	2300      	movs	r3, #0
    51de:	512b      	str	r3, [r5, r4]
    51e0:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    51e4:	b005      	add	sp, #20
    51e6:	bd30      	pop	{r4, r5, pc}
    51e8:	f382 8811 	msr	BASEPRI, r2
    51ec:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    51f0:	e7ee      	b.n	51d0 <pm_system_resume+0x54>
    51f2:	bf00      	nop
    51f4:	20003f18 	.word	0x20003f18
    51f8:	200022b4 	.word	0x200022b4
    51fc:	200022a4 	.word	0x200022a4
    5200:	0001e087 	.word	0x0001e087

00005204 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    5204:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    5208:	4b35      	ldr	r3, [pc, #212]	; (52e0 <pm_system_suspend+0xdc>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    520a:	4a36      	ldr	r2, [pc, #216]	; (52e4 <pm_system_suspend+0xe0>)
    520c:	7d1c      	ldrb	r4, [r3, #20]
    520e:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    5212:	0963      	lsrs	r3, r4, #5
    5214:	ea4f 0983 	mov.w	r9, r3, lsl #2
    5218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    521c:	4d32      	ldr	r5, [pc, #200]	; (52e8 <pm_system_suspend+0xe4>)
    521e:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    5222:	f004 081f 	and.w	r8, r4, #31
    5226:	fa43 f308 	asr.w	r3, r3, r8

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    522a:	f013 0f01 	tst.w	r3, #1
{
    522e:	b085      	sub	sp, #20
    5230:	4607      	mov	r7, r0
	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    5232:	d10a      	bne.n	524a <pm_system_suspend+0x46>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
    5234:	4601      	mov	r1, r0
    5236:	4620      	mov	r0, r4
    5238:	f000 f876 	bl	5328 <pm_policy_next_state>
		if (info != NULL) {
    523c:	b128      	cbz	r0, 524a <pm_system_suspend+0x46>
			z_cpus_pm_state[id] = *info;
    523e:	c807      	ldmia	r0, {r0, r1, r2}
    5240:	230c      	movs	r3, #12
    5242:	fb03 5304 	mla	r3, r3, r4, r5
    5246:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    524a:	230c      	movs	r3, #12
    524c:	4363      	muls	r3, r4
    524e:	18ea      	adds	r2, r5, r3
    5250:	5cee      	ldrb	r6, [r5, r3]
    5252:	b936      	cbnz	r6, 5262 <pm_system_suspend+0x5e>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
    5254:	4620      	mov	r0, r4
    5256:	f7ff ff79 	bl	514c <atomic_clear_bit.constprop.0>
		ret = false;
    525a:	4630      	mov	r0, r6
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    525c:	b005      	add	sp, #20
    525e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
    5262:	1c7b      	adds	r3, r7, #1
    5264:	d00f      	beq.n	5286 <pm_system_suspend+0x82>
			return (uint32_t)((t * to_hz + off) / from_hz);
    5266:	f8d2 c008 	ldr.w	ip, [r2, #8]
    526a:	4820      	ldr	r0, [pc, #128]	; (52ec <pm_system_suspend+0xe8>)
    526c:	4a20      	ldr	r2, [pc, #128]	; (52f0 <pm_system_suspend+0xec>)
    526e:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    5272:	2100      	movs	r1, #0
    5274:	2300      	movs	r3, #0
    5276:	fbec 0106 	umlal	r0, r1, ip, r6
    527a:	f7fc f8fd 	bl	1478 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    527e:	2101      	movs	r1, #1
    5280:	1a38      	subs	r0, r7, r0
    5282:	f020 fe75 	bl	25f70 <z_set_timeout_expiry>
	k_sched_lock();
    5286:	f016 faa5 	bl	1b7d4 <k_sched_lock>
	pm_state_notify(true);
    528a:	2001      	movs	r0, #1
    528c:	f7ff ff30 	bl	50f0 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5290:	f3bf 8f5b 	dmb	ish
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    5294:	2301      	movs	r3, #1
    5296:	fa03 f808 	lsl.w	r8, r3, r8
    529a:	4b16      	ldr	r3, [pc, #88]	; (52f4 <pm_system_suspend+0xf0>)
    529c:	4499      	add	r9, r3
    529e:	e859 3f00 	ldrex	r3, [r9]
    52a2:	ea43 0308 	orr.w	r3, r3, r8
    52a6:	e849 3200 	strex	r2, r3, [r9]
    52aa:	2a00      	cmp	r2, #0
    52ac:	d1f7      	bne.n	529e <pm_system_suspend+0x9a>
    52ae:	f3bf 8f5b 	dmb	ish
	pm_state_set(z_cpus_pm_state[id]);
    52b2:	230c      	movs	r3, #12
    52b4:	fb03 5504 	mla	r5, r3, r4, r5
    52b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    52bc:	ab01      	add	r3, sp, #4
    52be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    52c2:	4a0d      	ldr	r2, [pc, #52]	; (52f8 <pm_system_suspend+0xf4>)
    52c4:	b11a      	cbz	r2, 52ce <pm_system_suspend+0xca>
		pm_power_state_set(info);
    52c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    52ca:	f018 fec9 	bl	1e060 <pm_power_state_set>
	pm_system_resume();
    52ce:	f7ff ff55 	bl	517c <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
    52d2:	4620      	mov	r0, r4
    52d4:	f7ff ff3a 	bl	514c <atomic_clear_bit.constprop.0>
	k_sched_unlock();
    52d8:	f016 fc4a 	bl	1bb70 <k_sched_unlock>
	bool ret = true;
    52dc:	2001      	movs	r0, #1
    52de:	e7bd      	b.n	525c <pm_system_suspend+0x58>
    52e0:	20003f18 	.word	0x20003f18
    52e4:	200022b0 	.word	0x200022b0
    52e8:	200022a4 	.word	0x200022a4
    52ec:	000f423f 	.word	0x000f423f
    52f0:	000f4240 	.word	0x000f4240
    52f4:	200022b4 	.word	0x200022b4
    52f8:	0001e061 	.word	0x0001e061

000052fc <pm_constraint_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    52fc:	4b05      	ldr	r3, [pc, #20]	; (5314 <pm_constraint_get+0x18>)
    52fe:	f3bf 8f5b 	dmb	ish
    5302:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    5306:	f3bf 8f5b 	dmb	ish
__weak bool pm_constraint_get(enum pm_state state)
{
	__ASSERT(state < PM_STATE_COUNT, "Invalid power state!");

	return (atomic_get(&power_state_disable_count[state]) == 0);
}
    530a:	fab0 f080 	clz	r0, r0
    530e:	0940      	lsrs	r0, r0, #5
    5310:	4770      	bx	lr
    5312:	bf00      	nop
    5314:	200022b8 	.word	0x200022b8

00005318 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    5318:	b908      	cbnz	r0, 531e <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    531a:	4b02      	ldr	r3, [pc, #8]	; (5324 <pm_state_cpu_get_all+0xc>)
    531c:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    531e:	2000      	movs	r0, #0
    5320:	4770      	bx	lr
    5322:	bf00      	nop
    5324:	000267a8 	.word	0x000267a8

00005328 <pm_policy_next_state>:

#include <logging/log.h>
LOG_MODULE_DECLARE(pm, CONFIG_PM_LOG_LEVEL);

const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    5328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    532c:	b085      	sub	sp, #20
    532e:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    5330:	a903      	add	r1, sp, #12
    5332:	f7ff fff1 	bl	5318 <pm_state_cpu_get_all>
    5336:	f8df a074 	ldr.w	sl, [pc, #116]	; 53ac <pm_policy_next_state+0x84>
    533a:	f8df 8074 	ldr.w	r8, [pc, #116]	; 53b0 <pm_policy_next_state+0x88>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    533e:	1e44      	subs	r4, r0, #1
    5340:	b224      	sxth	r4, r4
    5342:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    5346:	f04f 0900 	mov.w	r9, #0
    534a:	1c63      	adds	r3, r4, #1
    534c:	d104      	bne.n	5358 <pm_policy_next_state+0x30>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    534e:	2500      	movs	r5, #0
}
    5350:	4628      	mov	r0, r5
    5352:	b005      	add	sp, #20
    5354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
    5358:	9a03      	ldr	r2, [sp, #12]
    535a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    535e:	eb02 0583 	add.w	r5, r2, r3, lsl #2
		if (!pm_constraint_get(state->state)) {
    5362:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
    5366:	f7ff ffc9 	bl	52fc <pm_constraint_get>
    536a:	b1e0      	cbz	r0, 53a6 <pm_policy_next_state+0x7e>
    536c:	6868      	ldr	r0, [r5, #4]
    536e:	f04f 0b00 	mov.w	fp, #0
    5372:	46d4      	mov	ip, sl
    5374:	4659      	mov	r1, fp
    5376:	fbe0 c107 	umlal	ip, r1, r0, r7
    537a:	4642      	mov	r2, r8
    537c:	464b      	mov	r3, r9
    537e:	4660      	mov	r0, ip
    5380:	f7fc f87a 	bl	1478 <__aeabi_uldivmod>
    5384:	9001      	str	r0, [sp, #4]
    5386:	68a8      	ldr	r0, [r5, #8]
    5388:	46d4      	mov	ip, sl
    538a:	4659      	mov	r1, fp
    538c:	fbe0 c107 	umlal	ip, r1, r0, r7
    5390:	4642      	mov	r2, r8
    5392:	464b      	mov	r3, r9
    5394:	4660      	mov	r0, ip
    5396:	f7fc f86f 	bl	1478 <__aeabi_uldivmod>
		if ((ticks == K_TICKS_FOREVER) ||
    539a:	1c72      	adds	r2, r6, #1
    539c:	d0d8      	beq.n	5350 <pm_policy_next_state+0x28>
		    (ticks >= (min_residency + exit_latency))) {
    539e:	9b01      	ldr	r3, [sp, #4]
    53a0:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    53a2:	42b0      	cmp	r0, r6
    53a4:	d9d4      	bls.n	5350 <pm_policy_next_state+0x28>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    53a6:	3c01      	subs	r4, #1
    53a8:	b224      	sxth	r4, r4
    53aa:	e7ce      	b.n	534a <pm_policy_next_state+0x22>
    53ac:	000f423f 	.word	0x000f423f
    53b0:	000f4240 	.word	0x000f4240

000053b4 <uECC_get_rng>:
}

uECC_RNG_Function uECC_get_rng(void)
{
	return g_rng_function;
}
    53b4:	4b01      	ldr	r3, [pc, #4]	; (53bc <uECC_get_rng+0x8>)
    53b6:	6818      	ldr	r0, [r3, #0]
    53b8:	4770      	bx	lr
    53ba:	bf00      	nop
    53bc:	20000400 	.word	0x20000400

000053c0 <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
    53c0:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    53c2:	2208      	movs	r2, #8
{
    53c4:	b089      	sub	sp, #36	; 0x24
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    53c6:	f017 fe9e 	bl	1d106 <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
	tmp[3] = product[11];
    53ca:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    53cc:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
    53ce:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    53d0:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
    53d2:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    53d4:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
    53d6:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    53d8:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
    53da:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    53dc:	9307      	str	r3, [sp, #28]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    53de:	4613      	mov	r3, r2
    53e0:	466a      	mov	r2, sp
{
    53e2:	460c      	mov	r4, r1
    53e4:	4606      	mov	r6, r0
	tmp[0] = tmp[1] = tmp[2] = 0;
    53e6:	2700      	movs	r7, #0
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    53e8:	4611      	mov	r1, r2
    53ea:	4610      	mov	r0, r2
	tmp[0] = tmp[1] = tmp[2] = 0;
    53ec:	e9cd 7701 	strd	r7, r7, [sp, #4]
    53f0:	9700      	str	r7, [sp, #0]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    53f2:	f017 fd9e 	bl	1cf32 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    53f6:	4631      	mov	r1, r6
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    53f8:	4605      	mov	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    53fa:	4630      	mov	r0, r6
    53fc:	f017 fd99 	bl	1cf32 <uECC_vli_add>

	/* s2 */
	tmp[3] = product[12];
    5400:	6b21      	ldr	r1, [r4, #48]	; 0x30
    5402:	9103      	str	r1, [sp, #12]
	tmp[4] = product[13];
    5404:	6b61      	ldr	r1, [r4, #52]	; 0x34
    5406:	9104      	str	r1, [sp, #16]
	tmp[5] = product[14];
    5408:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    540a:	9105      	str	r1, [sp, #20]
	tmp[6] = product[15];
    540c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    540e:	4405      	add	r5, r0
	tmp[7] = 0;
    5410:	e9cd 1706 	strd	r1, r7, [sp, #24]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    5414:	4610      	mov	r0, r2
    5416:	4611      	mov	r1, r2
    5418:	f017 fd8b 	bl	1cf32 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    541c:	4631      	mov	r1, r6
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    541e:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    5420:	4630      	mov	r0, r6
    5422:	f017 fd86 	bl	1cf32 <uECC_vli_add>
    5426:	4405      	add	r5, r0

	/* s3 */
	tmp[0] = product[8];
    5428:	6a20      	ldr	r0, [r4, #32]
    542a:	9000      	str	r0, [sp, #0]
	tmp[1] = product[9];
    542c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    542e:	9001      	str	r0, [sp, #4]
	tmp[2] = product[10];
    5430:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5432:	9002      	str	r0, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[14];
    5434:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    5436:	9006      	str	r0, [sp, #24]
	tmp[7] = product[15];
    5438:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    543a:	9007      	str	r0, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    543c:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    543e:	e9cd 7704 	strd	r7, r7, [sp, #16]
    5442:	9703      	str	r7, [sp, #12]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    5444:	f017 fd75 	bl	1cf32 <uECC_vli_add>
    5448:	4405      	add	r5, r0

	/* s4 */
	tmp[0] = product[9];
    544a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    544c:	9000      	str	r0, [sp, #0]
	tmp[1] = product[10];
    544e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	tmp[2] = product[11];
	tmp[3] = product[13];
	tmp[4] = product[14];
    5450:	f8d4 c038 	ldr.w	ip, [r4, #56]	; 0x38
	tmp[1] = product[10];
    5454:	9001      	str	r0, [sp, #4]
	tmp[2] = product[11];
    5456:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    5458:	9002      	str	r0, [sp, #8]
	tmp[4] = product[14];
    545a:	f8cd c010 	str.w	ip, [sp, #16]
	tmp[3] = product[13];
    545e:	6b60      	ldr	r0, [r4, #52]	; 0x34
	tmp[5] = product[15];
    5460:	f8d4 c03c 	ldr.w	ip, [r4, #60]	; 0x3c
	tmp[3] = product[13];
    5464:	9003      	str	r0, [sp, #12]
	tmp[6] = product[13];
    5466:	e9cd c005 	strd	ip, r0, [sp, #20]
	tmp[7] = product[8];
    546a:	6a20      	ldr	r0, [r4, #32]
    546c:	9007      	str	r0, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    546e:	4630      	mov	r0, r6
    5470:	f017 fd5f 	bl	1cf32 <uECC_vli_add>
    5474:	4405      	add	r5, r0

	/* d1 */
	tmp[0] = product[11];
    5476:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    5478:	9000      	str	r0, [sp, #0]
	tmp[1] = product[12];
    547a:	6b20      	ldr	r0, [r4, #48]	; 0x30
    547c:	9001      	str	r0, [sp, #4]
	tmp[2] = product[13];
    547e:	6b60      	ldr	r0, [r4, #52]	; 0x34
    5480:	9002      	str	r0, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[8];
    5482:	6a20      	ldr	r0, [r4, #32]
    5484:	9006      	str	r0, [sp, #24]
	tmp[7] = product[10];
    5486:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5488:	9007      	str	r0, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    548a:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    548c:	e9cd 7704 	strd	r7, r7, [sp, #16]
    5490:	9703      	str	r7, [sp, #12]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    5492:	f017 fe6b 	bl	1d16c <uECC_vli_sub>

	/* d2 */
	tmp[0] = product[12];
    5496:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5498:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
    549a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    549c:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
    549e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    54a0:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
    54a2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    54a4:	9303      	str	r3, [sp, #12]
	tmp[4] = tmp[5] = 0;
	tmp[6] = product[9];
    54a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    54a8:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
    54aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    54ac:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    54ae:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    54b0:	2308      	movs	r3, #8
    54b2:	4630      	mov	r0, r6
	tmp[4] = tmp[5] = 0;
    54b4:	e9cd 7704 	strd	r7, r7, [sp, #16]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    54b8:	f017 fe58 	bl	1d16c <uECC_vli_sub>

	/* d3 */
	tmp[0] = product[13];
    54bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
    54be:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
    54c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    54c2:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
    54c4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    54c6:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
    54c8:	6a23      	ldr	r3, [r4, #32]
    54ca:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
    54cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    54ce:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
    54d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[6] = 0;
    54d2:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[12];
    54d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    54d8:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    54da:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    54dc:	2308      	movs	r3, #8
    54de:	4630      	mov	r0, r6
    54e0:	f017 fe44 	bl	1d16c <uECC_vli_sub>

	/* d4 */
	tmp[0] = product[14];
    54e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    54e6:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
    54e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[2] = 0;
    54ea:	e9cd 3701 	strd	r3, r7, [sp, #4]
	tmp[3] = product[9];
    54ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
    54f0:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
    54f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    54f4:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
    54f6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	tmp[6] = 0;
    54f8:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[13];
    54fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
    54fe:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    5500:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    5502:	2308      	movs	r3, #8
    5504:	4630      	mov	r0, r6
    5506:	f017 fe31 	bl	1d16c <uECC_vli_sub>

	if (carry < 0) {
    550a:	1a2d      	subs	r5, r5, r0
    550c:	d410      	bmi.n	5530 <vli_mmod_fast_secp256r1+0x170>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
		}
		while (carry < 0);
	} else  {
		while (carry || 
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
    550e:	4c0d      	ldr	r4, [pc, #52]	; (5544 <vli_mmod_fast_secp256r1+0x184>)
		while (carry || 
    5510:	b935      	cbnz	r5, 5520 <vli_mmod_fast_secp256r1+0x160>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
    5512:	2208      	movs	r2, #8
    5514:	4631      	mov	r1, r6
    5516:	4620      	mov	r0, r4
    5518:	f017 fe01 	bl	1d11e <uECC_vli_cmp_unsafe>
		while (carry || 
    551c:	2801      	cmp	r0, #1
    551e:	d00f      	beq.n	5540 <vli_mmod_fast_secp256r1+0x180>
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    5520:	2308      	movs	r3, #8
    5522:	4622      	mov	r2, r4
    5524:	4631      	mov	r1, r6
    5526:	4630      	mov	r0, r6
    5528:	f017 fe20 	bl	1d16c <uECC_vli_sub>
    552c:	1a2d      	subs	r5, r5, r0
    552e:	e7ef      	b.n	5510 <vli_mmod_fast_secp256r1+0x150>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    5530:	4a04      	ldr	r2, [pc, #16]	; (5544 <vli_mmod_fast_secp256r1+0x184>)
    5532:	2308      	movs	r3, #8
    5534:	4631      	mov	r1, r6
    5536:	4630      	mov	r0, r6
    5538:	f017 fcfb 	bl	1cf32 <uECC_vli_add>
		while (carry < 0);
    553c:	182d      	adds	r5, r5, r0
    553e:	d4f8      	bmi.n	5532 <vli_mmod_fast_secp256r1+0x172>
		}
	}
}
    5540:	b009      	add	sp, #36	; 0x24
    5542:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5544:	000267ac 	.word	0x000267ac

00005548 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
    5548:	4904      	ldr	r1, [pc, #16]	; (555c <sub_bytes+0x14>)
    554a:	1e43      	subs	r3, r0, #1
    554c:	300f      	adds	r0, #15
    554e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    5552:	5c8a      	ldrb	r2, [r1, r2]
    5554:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    5556:	4283      	cmp	r3, r0
    5558:	d1f9      	bne.n	554e <sub_bytes+0x6>
	}
}
    555a:	4770      	bx	lr
    555c:	0002738a 	.word	0x0002738a

00005560 <tc_aes128_set_encrypt_key>:
{
    5560:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
    5562:	4e26      	ldr	r6, [pc, #152]	; (55fc <tc_aes128_set_encrypt_key+0x9c>)
{
    5564:	4607      	mov	r7, r0
    5566:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    5568:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
    556a:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    556c:	ad01      	add	r5, sp, #4
    556e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    5570:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    5572:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    5574:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    5578:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
    557c:	4638      	mov	r0, r7
    557e:	2f00      	cmp	r7, #0
    5580:	d038      	beq.n	55f4 <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
    5582:	2c00      	cmp	r4, #0
    5584:	d038      	beq.n	55f8 <tc_aes128_set_encrypt_key+0x98>
    5586:	1f38      	subs	r0, r7, #4
    5588:	4621      	mov	r1, r4
    558a:	4602      	mov	r2, r0
    558c:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    558e:	784b      	ldrb	r3, [r1, #1]
    5590:	780d      	ldrb	r5, [r1, #0]
    5592:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    5594:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    5598:	78cd      	ldrb	r5, [r1, #3]
    559a:	432b      	orrs	r3, r5
    559c:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
    559e:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    55a0:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
    55a4:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    55a6:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    55aa:	d1f0      	bne.n	558e <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    55ac:	4c14      	ldr	r4, [pc, #80]	; (5600 <tc_aes128_set_encrypt_key+0xa0>)
    55ae:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
    55b0:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    55b2:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    55b4:	d116      	bne.n	55e4 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    55b6:	f3c3 4207 	ubfx	r2, r3, #16, #8
    55ba:	5ca5      	ldrb	r5, [r4, r2]
    55bc:	0e1a      	lsrs	r2, r3, #24
    55be:	5ca2      	ldrb	r2, [r4, r2]
    55c0:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    55c4:	f3c3 2507 	ubfx	r5, r3, #8, #8
    55c8:	b2db      	uxtb	r3, r3
    55ca:	5d65      	ldrb	r5, [r4, r5]
    55cc:	5ce3      	ldrb	r3, [r4, r3]
    55ce:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    55d2:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    55d6:	ad0c      	add	r5, sp, #48	; 0x30
    55d8:	f021 0303 	bic.w	r3, r1, #3
    55dc:	442b      	add	r3, r5
    55de:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    55e2:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
    55e4:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    55e8:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    55ea:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    55ec:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    55ee:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    55f0:	d1de      	bne.n	55b0 <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
    55f2:	2001      	movs	r0, #1
}
    55f4:	b00d      	add	sp, #52	; 0x34
    55f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    55f8:	4620      	mov	r0, r4
    55fa:	e7fb      	b.n	55f4 <tc_aes128_set_encrypt_key+0x94>
    55fc:	00026620 	.word	0x00026620
    5600:	0002738a 	.word	0x0002738a

00005604 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    5604:	4901      	ldr	r1, [pc, #4]	; (560c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    5606:	2210      	movs	r2, #16
	str	r2, [r1]
    5608:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    560a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    560c:	e000ed10 	.word	0xe000ed10

00005610 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    5610:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    5612:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    5614:	f380 8811 	msr	BASEPRI, r0
	isb
    5618:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    561c:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    5620:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    5622:	b662      	cpsie	i
	isb
    5624:	f3bf 8f6f 	isb	sy

	bx	lr
    5628:	4770      	bx	lr
    562a:	bf00      	nop

0000562c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    562c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    562e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    5630:	f381 8811 	msr	BASEPRI, r1

	wfe
    5634:	bf20      	wfe

	msr	BASEPRI, r0
    5636:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    563a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    563c:	4770      	bx	lr
    563e:	bf00      	nop

00005640 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    5640:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    5642:	2b00      	cmp	r3, #0
    5644:	db08      	blt.n	5658 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5646:	2201      	movs	r2, #1
    5648:	f000 001f 	and.w	r0, r0, #31
    564c:	fa02 f000 	lsl.w	r0, r2, r0
    5650:	095b      	lsrs	r3, r3, #5
    5652:	4a02      	ldr	r2, [pc, #8]	; (565c <arch_irq_enable+0x1c>)
    5654:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    5658:	4770      	bx	lr
    565a:	bf00      	nop
    565c:	e000e100 	.word	0xe000e100

00005660 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    5660:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    5662:	2b00      	cmp	r3, #0
    5664:	db0d      	blt.n	5682 <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5666:	2201      	movs	r2, #1
    5668:	095b      	lsrs	r3, r3, #5
    566a:	f000 001f 	and.w	r0, r0, #31
    566e:	fa02 f000 	lsl.w	r0, r2, r0
    5672:	3320      	adds	r3, #32
    5674:	4a03      	ldr	r2, [pc, #12]	; (5684 <arch_irq_disable+0x24>)
    5676:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    567a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    567e:	f3bf 8f6f 	isb	sy
}
    5682:	4770      	bx	lr
    5684:	e000e100 	.word	0xe000e100

00005688 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    5688:	4b05      	ldr	r3, [pc, #20]	; (56a0 <arch_irq_is_enabled+0x18>)
    568a:	0942      	lsrs	r2, r0, #5
    568c:	f000 001f 	and.w	r0, r0, #31
    5690:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    5694:	2301      	movs	r3, #1
    5696:	fa03 f000 	lsl.w	r0, r3, r0
}
    569a:	4010      	ands	r0, r2
    569c:	4770      	bx	lr
    569e:	bf00      	nop
    56a0:	e000e100 	.word	0xe000e100

000056a4 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    56a4:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    56a6:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    56a8:	bfa8      	it	ge
    56aa:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    56ae:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    56b2:	bfb8      	it	lt
    56b4:	4b06      	ldrlt	r3, [pc, #24]	; (56d0 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    56b6:	ea4f 1141 	mov.w	r1, r1, lsl #5
    56ba:	bfac      	ite	ge
    56bc:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    56c0:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    56c4:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    56c6:	bfb4      	ite	lt
    56c8:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    56ca:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    56ce:	4770      	bx	lr
    56d0:	e000ed14 	.word	0xe000ed14

000056d4 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
    56d4:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    56d6:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    56d8:	4b04      	ldr	r3, [pc, #16]	; (56ec <_arch_isr_direct_pm+0x18>)
    56da:	699a      	ldr	r2, [r3, #24]
    56dc:	b11a      	cbz	r2, 56e6 <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
    56de:	2200      	movs	r2, #0
    56e0:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
    56e2:	f020 f91c 	bl	2591e <z_pm_save_idle_exit>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    56e6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    56e8:	bd08      	pop	{r3, pc}
    56ea:	bf00      	nop
    56ec:	20003f18 	.word	0x20003f18

000056f0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    56f0:	bf30      	wfi
    b z_SysNmiOnReset
    56f2:	f7ff bffd 	b.w	56f0 <z_SysNmiOnReset>
    56f6:	bf00      	nop

000056f8 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    56f8:	4a0f      	ldr	r2, [pc, #60]	; (5738 <z_arm_prep_c+0x40>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    56fa:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    56fc:	4b0f      	ldr	r3, [pc, #60]	; (573c <z_arm_prep_c+0x44>)
    56fe:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    5702:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    5704:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5708:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    570c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    5710:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    5714:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
    5718:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    571c:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    5720:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
    5724:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    5728:	f015 fb4a 	bl	1adc0 <z_bss_zero>
	z_data_copy();
    572c:	f016 fb64 	bl	1bdf8 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    5730:	f000 f9ca 	bl	5ac8 <z_arm_interrupt_init>
	z_cstart();
    5734:	f015 fb4e 	bl	1add4 <z_cstart>
    5738:	00001000 	.word	0x00001000
    573c:	e000ed00 	.word	0xe000ed00

00005740 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    5740:	4a09      	ldr	r2, [pc, #36]	; (5768 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    5742:	490a      	ldr	r1, [pc, #40]	; (576c <arch_swap+0x2c>)
	_current->arch.basepri = key;
    5744:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    5746:	6809      	ldr	r1, [r1, #0]
    5748:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    574a:	4909      	ldr	r1, [pc, #36]	; (5770 <arch_swap+0x30>)
	_current->arch.basepri = key;
    574c:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    574e:	684b      	ldr	r3, [r1, #4]
    5750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    5754:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    5756:	2300      	movs	r3, #0
    5758:	f383 8811 	msr	BASEPRI, r3
    575c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    5760:	6893      	ldr	r3, [r2, #8]
}
    5762:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    5764:	4770      	bx	lr
    5766:	bf00      	nop
    5768:	20003f18 	.word	0x20003f18
    576c:	000271a0 	.word	0x000271a0
    5770:	e000ed00 	.word	0xe000ed00

00005774 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    5774:	4912      	ldr	r1, [pc, #72]	; (57c0 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    5776:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    5778:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    577c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    577e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    5782:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    5786:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    5788:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    578c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    5790:	4f0c      	ldr	r7, [pc, #48]	; (57c4 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    5792:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    5796:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    5798:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    579a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    579c:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    579e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    57a0:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    57a2:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    57a6:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    57a8:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    57aa:	f000 f9cf 	bl	5b4c <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    57ae:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    57b2:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    57b6:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    57ba:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    57be:	4770      	bx	lr
    ldr r1, =_kernel
    57c0:	20003f18 	.word	0x20003f18
    ldr v4, =_SCS_ICSR
    57c4:	e000ed04 	.word	0xe000ed04

000057c8 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    57c8:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    57cc:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    57ce:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    57d2:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    57d6:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    57d8:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    57dc:	2902      	cmp	r1, #2
    beq _oops
    57de:	d0ff      	beq.n	57e0 <_oops>

000057e0 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    57e0:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    57e2:	f018 fbea 	bl	1dfba <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    57e6:	bd01      	pop	{r0, pc}

000057e8 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    57e8:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    57ec:	9b00      	ldr	r3, [sp, #0]
    57ee:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    57f2:	490a      	ldr	r1, [pc, #40]	; (581c <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    57f4:	9b01      	ldr	r3, [sp, #4]
    57f6:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    57fa:	9b02      	ldr	r3, [sp, #8]
    57fc:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    5800:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    5804:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    5808:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    580c:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    5810:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    5812:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    5814:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    5816:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    5818:	4770      	bx	lr
    581a:	bf00      	nop
    581c:	0001c4ef 	.word	0x0001c4ef

00005820 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    5820:	4a09      	ldr	r2, [pc, #36]	; (5848 <z_check_thread_stack_fail+0x28>)
{
    5822:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    5824:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    5826:	b170      	cbz	r0, 5846 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    5828:	f113 0f16 	cmn.w	r3, #22
    582c:	6e80      	ldr	r0, [r0, #104]	; 0x68
    582e:	d005      	beq.n	583c <z_check_thread_stack_fail+0x1c>
    5830:	f1a0 0220 	sub.w	r2, r0, #32
    5834:	429a      	cmp	r2, r3
    5836:	d805      	bhi.n	5844 <z_check_thread_stack_fail+0x24>
    5838:	4283      	cmp	r3, r0
    583a:	d203      	bcs.n	5844 <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    583c:	4281      	cmp	r1, r0
    583e:	bf28      	it	cs
    5840:	2000      	movcs	r0, #0
    5842:	4770      	bx	lr
    5844:	2000      	movs	r0, #0
}
    5846:	4770      	bx	lr
    5848:	20003f18 	.word	0x20003f18

0000584c <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    584c:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    584e:	4b09      	ldr	r3, [pc, #36]	; (5874 <arch_switch_to_main_thread+0x28>)
    5850:	6098      	str	r0, [r3, #8]
{
    5852:	460d      	mov	r5, r1
    5854:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    5856:	f000 f979 	bl	5b4c <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    585a:	4620      	mov	r0, r4
    585c:	f385 8809 	msr	PSP, r5
    5860:	2100      	movs	r1, #0
    5862:	b663      	cpsie	if
    5864:	f381 8811 	msr	BASEPRI, r1
    5868:	f3bf 8f6f 	isb	sy
    586c:	2200      	movs	r2, #0
    586e:	2300      	movs	r3, #0
    5870:	f016 fe3d 	bl	1c4ee <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    5874:	20003f18 	.word	0x20003f18

00005878 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    5878:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    587a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    587c:	4a0b      	ldr	r2, [pc, #44]	; (58ac <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    587e:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    5880:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    5882:	bf1e      	ittt	ne
	movne	r1, #0
    5884:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    5886:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    5888:	f020 f849 	blne	2591e <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    588c:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    588e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    5892:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    5896:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    589a:	4905      	ldr	r1, [pc, #20]	; (58b0 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    589c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    589e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    58a0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    58a2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    58a6:	4903      	ldr	r1, [pc, #12]	; (58b4 <_isr_wrapper+0x3c>)
	bx r1
    58a8:	4708      	bx	r1
    58aa:	0000      	.short	0x0000
	ldr r2, =_kernel
    58ac:	20003f18 	.word	0x20003f18
	ldr r1, =_sw_isr_table
    58b0:	000263f8 	.word	0x000263f8
	ldr r1, =z_arm_int_exit
    58b4:	000058b9 	.word	0x000058b9

000058b8 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    58b8:	4b04      	ldr	r3, [pc, #16]	; (58cc <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    58ba:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    58bc:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    58be:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    58c0:	d003      	beq.n	58ca <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    58c2:	4903      	ldr	r1, [pc, #12]	; (58d0 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    58c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    58c8:	600a      	str	r2, [r1, #0]

000058ca <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    58ca:	4770      	bx	lr
	ldr r3, =_kernel
    58cc:	20003f18 	.word	0x20003f18
	ldr r1, =_SCS_ICSR
    58d0:	e000ed04 	.word	0xe000ed04

000058d4 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    58d4:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    58d6:	4b19      	ldr	r3, [pc, #100]	; (593c <mem_manage_fault+0x68>)
{
    58d8:	4614      	mov	r4, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    58da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    58dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    58de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
    58e0:	4605      	mov	r5, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    58e2:	0790      	lsls	r0, r2, #30
    58e4:	d519      	bpl.n	591a <mem_manage_fault+0x46>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    58e6:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    58e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    58ea:	0612      	lsls	r2, r2, #24
    58ec:	d515      	bpl.n	591a <mem_manage_fault+0x46>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    58ee:	b119      	cbz	r1, 58f8 <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    58f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    58f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    58f6:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    58f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    58fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    58fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    58fe:	06d1      	lsls	r1, r2, #27
    5900:	d40e      	bmi.n	5920 <mem_manage_fault+0x4c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    5902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    5904:	079a      	lsls	r2, r3, #30
    5906:	d40b      	bmi.n	5920 <mem_manage_fault+0x4c>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    5908:	2000      	movs	r0, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    590a:	4a0c      	ldr	r2, [pc, #48]	; (593c <mem_manage_fault+0x68>)
    590c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    590e:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    5912:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    5914:	2300      	movs	r3, #0
    5916:	7023      	strb	r3, [r4, #0]

	return reason;
}
    5918:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t mmfar = -EINVAL;
    591a:	f06f 0015 	mvn.w	r0, #21
    591e:	e7eb      	b.n	58f8 <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    5920:	4b06      	ldr	r3, [pc, #24]	; (593c <mem_manage_fault+0x68>)
    5922:	685b      	ldr	r3, [r3, #4]
    5924:	051b      	lsls	r3, r3, #20
    5926:	d5ef      	bpl.n	5908 <mem_manage_fault+0x34>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    5928:	4629      	mov	r1, r5
    592a:	f7ff ff79 	bl	5820 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    592e:	2800      	cmp	r0, #0
    5930:	d0ea      	beq.n	5908 <mem_manage_fault+0x34>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    5932:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    5936:	2002      	movs	r0, #2
    5938:	e7e7      	b.n	590a <mem_manage_fault+0x36>
    593a:	bf00      	nop
    593c:	e000ed00 	.word	0xe000ed00

00005940 <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    5940:	4b0d      	ldr	r3, [pc, #52]	; (5978 <bus_fault.constprop.0+0x38>)
    5942:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    5944:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    5946:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5948:	0592      	lsls	r2, r2, #22
    594a:	d508      	bpl.n	595e <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    594c:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    594e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5950:	0412      	lsls	r2, r2, #16
    5952:	d504      	bpl.n	595e <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    5954:	b118      	cbz	r0, 595e <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    5956:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5958:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    595c:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    595e:	4b06      	ldr	r3, [pc, #24]	; (5978 <bus_fault.constprop.0+0x38>)
    5960:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    5962:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5964:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    5966:	bf58      	it	pl
    5968:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    596a:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    596c:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    596e:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    5972:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    5974:	7008      	strb	r0, [r1, #0]

	return reason;
}
    5976:	4770      	bx	lr
    5978:	e000ed00 	.word	0xe000ed00

0000597c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    597c:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    597e:	4b48      	ldr	r3, [pc, #288]	; (5aa0 <z_arm_fault+0x124>)
    5980:	685b      	ldr	r3, [r3, #4]
{
    5982:	b08a      	sub	sp, #40	; 0x28
    5984:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    5986:	f3c3 0308 	ubfx	r3, r3, #0, #9
    598a:	2600      	movs	r6, #0
    598c:	f386 8811 	msr	BASEPRI, r6
    5990:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    5994:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
    5998:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
    599c:	d111      	bne.n	59c2 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    599e:	f002 010c 	and.w	r1, r2, #12
    59a2:	2908      	cmp	r1, #8
    59a4:	d00d      	beq.n	59c2 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    59a6:	0711      	lsls	r1, r2, #28
    59a8:	d401      	bmi.n	59ae <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    59aa:	4605      	mov	r5, r0
			*nested_exc = true;
    59ac:	2601      	movs	r6, #1
	*recoverable = false;
    59ae:	2200      	movs	r2, #0
	switch (fault) {
    59b0:	3b03      	subs	r3, #3
	*recoverable = false;
    59b2:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    59b6:	2b03      	cmp	r3, #3
    59b8:	d86b      	bhi.n	5a92 <z_arm_fault+0x116>
    59ba:	e8df f003 	tbb	[pc, r3]
    59be:	5504      	.short	0x5504
    59c0:	5d59      	.short	0x5d59
		return NULL;
    59c2:	4635      	mov	r5, r6
    59c4:	e7f3      	b.n	59ae <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    59c6:	4b36      	ldr	r3, [pc, #216]	; (5aa0 <z_arm_fault+0x124>)
    59c8:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    59ca:	f014 0402 	ands.w	r4, r4, #2
    59ce:	d160      	bne.n	5a92 <z_arm_fault+0x116>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    59d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    59d2:	2a00      	cmp	r2, #0
    59d4:	db15      	blt.n	5a02 <z_arm_fault+0x86>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    59d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    59d8:	0052      	lsls	r2, r2, #1
    59da:	d512      	bpl.n	5a02 <z_arm_fault+0x86>
	uint16_t fault_insn = *(ret_addr - 1);
    59dc:	69aa      	ldr	r2, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    59de:	f832 1c02 	ldrh.w	r1, [r2, #-2]
    59e2:	f64d 7202 	movw	r2, #57090	; 0xdf02
    59e6:	4291      	cmp	r1, r2
    59e8:	d00a      	beq.n	5a00 <z_arm_fault+0x84>
		} else if (SCB_MMFSR != 0) {
    59ea:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    59ee:	b30a      	cbz	r2, 5a34 <z_arm_fault+0xb8>
			reason = mem_manage_fault(esf, 1, recoverable);
    59f0:	f10d 0207 	add.w	r2, sp, #7
    59f4:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    59f6:	4628      	mov	r0, r5
    59f8:	f7ff ff6c 	bl	58d4 <mem_manage_fault>
		reason = bus_fault(esf, 0, recoverable);
    59fc:	4604      	mov	r4, r0
		break;
    59fe:	e000      	b.n	5a02 <z_arm_fault+0x86>
			reason = esf->basic.r0;
    5a00:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    5a02:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5a06:	b99b      	cbnz	r3, 5a30 <z_arm_fault+0xb4>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    5a08:	2220      	movs	r2, #32
    5a0a:	4629      	mov	r1, r5
    5a0c:	a802      	add	r0, sp, #8
    5a0e:	f018 fb10 	bl	1e032 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    5a12:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5a14:	2e00      	cmp	r6, #0
    5a16:	d03e      	beq.n	5a96 <z_arm_fault+0x11a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    5a18:	f3c3 0208 	ubfx	r2, r3, #0, #9
    5a1c:	b922      	cbnz	r2, 5a28 <z_arm_fault+0xac>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    5a1e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    5a22:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    5a26:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    5a28:	a902      	add	r1, sp, #8
    5a2a:	4620      	mov	r0, r4
    5a2c:	f018 fac3 	bl	1dfb6 <z_arm_fatal_error>
}
    5a30:	b00a      	add	sp, #40	; 0x28
    5a32:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
    5a34:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
    5a38:	b12a      	cbz	r2, 5a46 <z_arm_fault+0xca>
			reason = bus_fault(esf, 1, recoverable);
    5a3a:	f10d 0107 	add.w	r1, sp, #7
    5a3e:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    5a40:	f7ff ff7e 	bl	5940 <bus_fault.constprop.0>
    5a44:	e7da      	b.n	59fc <z_arm_fault+0x80>
		} else if (SCB_UFSR != 0) {
    5a46:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    5a48:	b292      	uxth	r2, r2
    5a4a:	2a00      	cmp	r2, #0
    5a4c:	d0d9      	beq.n	5a02 <z_arm_fault+0x86>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    5a4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    5a50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    5a52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    5a54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    5a56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    5a58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    5a5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5a5c:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    5a60:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    5a64:	629a      	str	r2, [r3, #40]	; 0x28
	return reason;
    5a66:	e7cc      	b.n	5a02 <z_arm_fault+0x86>
		reason = mem_manage_fault(esf, 0, recoverable);
    5a68:	f10d 0207 	add.w	r2, sp, #7
    5a6c:	2100      	movs	r1, #0
    5a6e:	e7c2      	b.n	59f6 <z_arm_fault+0x7a>
		reason = bus_fault(esf, 0, recoverable);
    5a70:	f10d 0107 	add.w	r1, sp, #7
    5a74:	2000      	movs	r0, #0
    5a76:	e7e3      	b.n	5a40 <z_arm_fault+0xc4>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    5a78:	4b09      	ldr	r3, [pc, #36]	; (5aa0 <z_arm_fault+0x124>)
    5a7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    5a7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    5a7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    5a80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    5a82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    5a84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    5a86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5a88:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    5a8c:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    5a90:	629a      	str	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    5a92:	2400      	movs	r4, #0
    5a94:	e7b5      	b.n	5a02 <z_arm_fault+0x86>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    5a96:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    5a9a:	f023 0301 	bic.w	r3, r3, #1
    5a9e:	e7c2      	b.n	5a26 <z_arm_fault+0xaa>
    5aa0:	e000ed00 	.word	0xe000ed00

00005aa4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    5aa4:	4a02      	ldr	r2, [pc, #8]	; (5ab0 <z_arm_fault_init+0xc>)
    5aa6:	6953      	ldr	r3, [r2, #20]
    5aa8:	f043 0310 	orr.w	r3, r3, #16
    5aac:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    5aae:	4770      	bx	lr
    5ab0:	e000ed00 	.word	0xe000ed00

00005ab4 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    5ab4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    5ab8:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    5abc:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    5abe:	4672      	mov	r2, lr
	bl z_arm_fault
    5ac0:	f7ff ff5c 	bl	597c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    5ac4:	bd01      	pop	{r0, pc}
    5ac6:	bf00      	nop

00005ac8 <z_arm_interrupt_init>:
    5ac8:	4804      	ldr	r0, [pc, #16]	; (5adc <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    5aca:	2300      	movs	r3, #0
    5acc:	2120      	movs	r1, #32
    5ace:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    5ad0:	3301      	adds	r3, #1
    5ad2:	2b30      	cmp	r3, #48	; 0x30
    5ad4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    5ad8:	d1f9      	bne.n	5ace <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    5ada:	4770      	bx	lr
    5adc:	e000e100 	.word	0xe000e100

00005ae0 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    5ae0:	f020 fbe8 	bl	262b4 <z_arm_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    5ae4:	2020      	movs	r0, #32
    msr BASEPRI, r0
    5ae6:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    5aea:	4808      	ldr	r0, [pc, #32]	; (5b0c <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    5aec:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    5af0:	1840      	adds	r0, r0, r1
    msr PSP, r0
    5af2:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    5af6:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    5afa:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    5afc:	4308      	orrs	r0, r1
    msr CONTROL, r0
    5afe:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    5b02:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    5b06:	f7ff fdf7 	bl	56f8 <z_arm_prep_c>
    5b0a:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    5b0c:	20006360 	.word	0x20006360

00005b10 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    5b10:	4b06      	ldr	r3, [pc, #24]	; (5b2c <z_impl_k_thread_abort+0x1c>)
    5b12:	689b      	ldr	r3, [r3, #8]
    5b14:	4283      	cmp	r3, r0
    5b16:	d107      	bne.n	5b28 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    5b18:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    5b1c:	b123      	cbz	r3, 5b28 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    5b1e:	4a04      	ldr	r2, [pc, #16]	; (5b30 <z_impl_k_thread_abort+0x20>)
    5b20:	6853      	ldr	r3, [r2, #4]
    5b22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    5b26:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    5b28:	f016 b902 	b.w	1bd30 <z_thread_abort>
    5b2c:	20003f18 	.word	0x20003f18
    5b30:	e000ed00 	.word	0xe000ed00

00005b34 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    5b34:	4b02      	ldr	r3, [pc, #8]	; (5b40 <z_arm_configure_static_mpu_regions+0xc>)
    5b36:	4a03      	ldr	r2, [pc, #12]	; (5b44 <z_arm_configure_static_mpu_regions+0x10>)
    5b38:	4803      	ldr	r0, [pc, #12]	; (5b48 <z_arm_configure_static_mpu_regions+0x14>)
    5b3a:	2101      	movs	r1, #1
    5b3c:	f000 b86e 	b.w	5c1c <arm_core_mpu_configure_static_mpu_regions>
    5b40:	20040000 	.word	0x20040000
    5b44:	20000000 	.word	0x20000000
    5b48:	00026858 	.word	0x00026858

00005b4c <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    5b4c:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    5b4e:	4b05      	ldr	r3, [pc, #20]	; (5b64 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    5b50:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    5b52:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    5b54:	4a04      	ldr	r2, [pc, #16]	; (5b68 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    5b56:	2120      	movs	r1, #32
    5b58:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    5b5c:	4618      	mov	r0, r3
    5b5e:	2101      	movs	r1, #1
    5b60:	f000 b866 	b.w	5c30 <arm_core_mpu_configure_dynamic_mpu_regions>
    5b64:	200022d4 	.word	0x200022d4
    5b68:	150b0000 	.word	0x150b0000

00005b6c <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    5b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    5b6e:	4f1f      	ldr	r7, [pc, #124]	; (5bec <mpu_configure_regions+0x80>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    5b70:	2600      	movs	r6, #0
    5b72:	428e      	cmp	r6, r1
    5b74:	db01      	blt.n	5b7a <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    5b76:	4610      	mov	r0, r2
    5b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
    5b7a:	6844      	ldr	r4, [r0, #4]
    5b7c:	b39c      	cbz	r4, 5be6 <mpu_configure_regions+0x7a>
		if (do_sanity_check &&
    5b7e:	b153      	cbz	r3, 5b96 <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    5b80:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    5b84:	ea14 0f0c 	tst.w	r4, ip
    5b88:	d118      	bne.n	5bbc <mpu_configure_regions+0x50>
		&&
    5b8a:	2c1f      	cmp	r4, #31
    5b8c:	d916      	bls.n	5bbc <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
    5b8e:	6805      	ldr	r5, [r0, #0]
		&&
    5b90:	ea1c 0f05 	tst.w	ip, r5
    5b94:	d112      	bne.n	5bbc <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    5b96:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    5b98:	6805      	ldr	r5, [r0, #0]
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    5b9a:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    5b9e:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
    5ba0:	d90f      	bls.n	5bc2 <mpu_configure_regions+0x56>
	if (size > (1UL << 31)) {
    5ba2:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    5ba6:	d80e      	bhi.n	5bc6 <mpu_configure_regions+0x5a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    5ba8:	3c01      	subs	r4, #1
    5baa:	fab4 f484 	clz	r4, r4
    5bae:	f1c4 041f 	rsb	r4, r4, #31
    5bb2:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    5bb4:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    5bb6:	ea4c 0404 	orr.w	r4, ip, r4
    5bba:	d906      	bls.n	5bca <mpu_configure_regions+0x5e>
			return -EINVAL;
    5bbc:	f06f 0215 	mvn.w	r2, #21
    5bc0:	e7d9      	b.n	5b76 <mpu_configure_regions+0xa>
		return REGION_32B;
    5bc2:	2408      	movs	r4, #8
    5bc4:	e7f6      	b.n	5bb4 <mpu_configure_regions+0x48>
		return REGION_4G;
    5bc6:	243e      	movs	r4, #62	; 0x3e
    5bc8:	e7f4      	b.n	5bb4 <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    5bca:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    5bce:	4315      	orrs	r5, r2
    5bd0:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    5bd4:	f044 0401 	orr.w	r4, r4, #1
    5bd8:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    5bdc:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
		reg_index++;
    5be0:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    5be2:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    5be6:	3601      	adds	r6, #1
    5be8:	300c      	adds	r0, #12
    5bea:	e7c2      	b.n	5b72 <mpu_configure_regions+0x6>
    5bec:	e000ed00 	.word	0xe000ed00

00005bf0 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    5bf0:	4b04      	ldr	r3, [pc, #16]	; (5c04 <arm_core_mpu_enable+0x14>)
    5bf2:	2205      	movs	r2, #5
    5bf4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    5bf8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5bfc:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    5c00:	4770      	bx	lr
    5c02:	bf00      	nop
    5c04:	e000ed00 	.word	0xe000ed00

00005c08 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    5c08:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    5c0c:	4b02      	ldr	r3, [pc, #8]	; (5c18 <arm_core_mpu_disable+0x10>)
    5c0e:	2200      	movs	r2, #0
    5c10:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    5c14:	4770      	bx	lr
    5c16:	bf00      	nop
    5c18:	e000ed00 	.word	0xe000ed00

00005c1c <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    5c1c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    5c1e:	4c03      	ldr	r4, [pc, #12]	; (5c2c <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    5c20:	2301      	movs	r3, #1
    5c22:	7822      	ldrb	r2, [r4, #0]
    5c24:	f7ff ffa2 	bl	5b6c <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    5c28:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    5c2a:	bd10      	pop	{r4, pc}
    5c2c:	20004013 	.word	0x20004013

00005c30 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    5c30:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    5c32:	4a09      	ldr	r2, [pc, #36]	; (5c58 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    5c34:	2300      	movs	r3, #0
    5c36:	7812      	ldrb	r2, [r2, #0]
    5c38:	f7ff ff98 	bl	5b6c <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    5c3c:	f110 0f16 	cmn.w	r0, #22
    5c40:	d002      	beq.n	5c48 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    5c42:	4a06      	ldr	r2, [pc, #24]	; (5c5c <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    5c44:	2807      	cmp	r0, #7
    5c46:	dd00      	ble.n	5c4a <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    5c48:	bd08      	pop	{r3, pc}
    5c4a:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    5c4e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
    5c52:	3001      	adds	r0, #1
    5c54:	e7f6      	b.n	5c44 <arm_core_mpu_configure_dynamic_mpu_regions+0x14>
    5c56:	bf00      	nop
    5c58:	20004013 	.word	0x20004013
    5c5c:	e000ed00 	.word	0xe000ed00

00005c60 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    5c60:	4914      	ldr	r1, [pc, #80]	; (5cb4 <z_arm_mpu_init+0x54>)
    5c62:	6808      	ldr	r0, [r1, #0]
    5c64:	2808      	cmp	r0, #8
{
    5c66:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    5c68:	d821      	bhi.n	5cae <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    5c6a:	f7ff ffcd 	bl	5c08 <arm_core_mpu_disable>
    5c6e:	4c12      	ldr	r4, [pc, #72]	; (5cb8 <z_arm_mpu_init+0x58>)
    5c70:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    5c72:	2200      	movs	r2, #0
    5c74:	4290      	cmp	r0, r2
    5c76:	f101 010c 	add.w	r1, r1, #12
    5c7a:	d105      	bne.n	5c88 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    5c7c:	4b0f      	ldr	r3, [pc, #60]	; (5cbc <z_arm_mpu_init+0x5c>)
    5c7e:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    5c80:	f7ff ffb6 	bl	5bf0 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    5c84:	2000      	movs	r0, #0
}
    5c86:	bd10      	pop	{r4, pc}
    5c88:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    5c8c:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    5c90:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    5c94:	4313      	orrs	r3, r2
    5c96:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    5c9a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    5c9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
    5ca2:	f043 0301 	orr.w	r3, r3, #1
    5ca6:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    5caa:	3201      	adds	r2, #1
    5cac:	e7e2      	b.n	5c74 <z_arm_mpu_init+0x14>
		return -1;
    5cae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5cb2:	e7e8      	b.n	5c86 <z_arm_mpu_init+0x26>
    5cb4:	00026864 	.word	0x00026864
    5cb8:	e000ed00 	.word	0xe000ed00
    5cbc:	20004013 	.word	0x20004013

00005cc0 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    5cc0:	4b01      	ldr	r3, [pc, #4]	; (5cc8 <__stdout_hook_install+0x8>)
    5cc2:	6018      	str	r0, [r3, #0]
}
    5cc4:	4770      	bx	lr
    5cc6:	bf00      	nop
    5cc8:	20000404 	.word	0x20000404

00005ccc <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
    5ccc:	b510      	push	{r4, lr}
	__asm__ volatile(
    5cce:	f04f 0320 	mov.w	r3, #32
    5cd2:	f3ef 8011 	mrs	r0, BASEPRI
    5cd6:	f383 8812 	msr	BASEPRI_MAX, r3
    5cda:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    5cde:	4a11      	ldr	r2, [pc, #68]	; (5d24 <nordicsemi_nrf52_init+0x58>)
    5ce0:	2301      	movs	r3, #1
    5ce2:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    5ce6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5cea:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    5cee:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    5cf2:	f8d1 4130 	ldr.w	r4, [r1, #304]	; 0x130
    5cf6:	2c08      	cmp	r4, #8
    5cf8:	d108      	bne.n	5d0c <nordicsemi_nrf52_init+0x40>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    5cfa:	f8d1 1134 	ldr.w	r1, [r1, #308]	; 0x134
            {
                switch(var2)
    5cfe:	2905      	cmp	r1, #5
    5d00:	d804      	bhi.n	5d0c <nordicsemi_nrf52_init+0x40>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    5d02:	4c09      	ldr	r4, [pc, #36]	; (5d28 <nordicsemi_nrf52_init+0x5c>)
    5d04:	5c61      	ldrb	r1, [r4, r1]
    5d06:	b109      	cbz	r1, 5d0c <nordicsemi_nrf52_init+0x40>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    5d08:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    5d0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5d10:	2201      	movs	r2, #1
    5d12:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    5d16:	f380 8811 	msr	BASEPRI, r0
    5d1a:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    5d1e:	2000      	movs	r0, #0
    5d20:	bd10      	pop	{r4, pc}
    5d22:	bf00      	nop
    5d24:	4001e000 	.word	0x4001e000
    5d28:	00027499 	.word	0x00027499

00005d2c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    5d2c:	b120      	cbz	r0, 5d38 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    5d2e:	4b03      	ldr	r3, [pc, #12]	; (5d3c <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    5d30:	0180      	lsls	r0, r0, #6
    5d32:	f043 0301 	orr.w	r3, r3, #1
    5d36:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    5d38:	4770      	bx	lr
    5d3a:	bf00      	nop
    5d3c:	00026690 	.word	0x00026690

00005d40 <board_nrf52840dongle_nrf52840_init>:

#if NRF_POWER_HAS_MAINREGSTATUS
NRF_STATIC_INLINE
nrf_power_mainregstatus_t nrf_power_mainregstatus_get(NRF_POWER_Type const * p_reg)
{
    return (nrf_power_mainregstatus_t)(((p_reg->MAINREGSTATUS) &
    5d40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5d44:	f8d3 3640 	ldr.w	r3, [r3, #1600]	; 0x640
	/* if the nrf52840dongle_nrf52840 board is powered from USB
	 * (high voltage mode), GPIO output voltage is set to 1.8 volts by
	 * default and that is not enough to turn the green and blue LEDs on.
	 * Increase GPIO voltage to 3.0 volts.
	 */
	if ((nrf_power_mainregstatus_get(NRF_POWER) ==
    5d48:	07db      	lsls	r3, r3, #31
    5d4a:	d52e      	bpl.n	5daa <board_nrf52840dongle_nrf52840_init+0x6a>
	     NRF_POWER_MAINREGSTATUS_HIGH) &&
	    ((NRF_UICR->REGOUT0 & UICR_REGOUT0_VOUT_Msk) ==
    5d4c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    5d50:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
    5d54:	f003 0307 	and.w	r3, r3, #7
	     NRF_POWER_MAINREGSTATUS_HIGH) &&
    5d58:	2b07      	cmp	r3, #7
    5d5a:	d126      	bne.n	5daa <board_nrf52840dongle_nrf52840_init+0x6a>
	     (UICR_REGOUT0_VOUT_DEFAULT << UICR_REGOUT0_VOUT_Pos))) {

		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    5d5c:	4a14      	ldr	r2, [pc, #80]	; (5db0 <board_nrf52840dongle_nrf52840_init+0x70>)
    5d5e:	2301      	movs	r3, #1
    5d60:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
    5d64:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    5d68:	2b00      	cmp	r3, #0
    5d6a:	d0fb      	beq.n	5d64 <board_nrf52840dongle_nrf52840_init+0x24>
			;
		}

		NRF_UICR->REGOUT0 =
		    (NRF_UICR->REGOUT0 & ~((uint32_t)UICR_REGOUT0_VOUT_Msk)) |
    5d6c:	f04f 2110 	mov.w	r1, #268439552	; 0x10001000
    5d70:	f8d1 3304 	ldr.w	r3, [r1, #772]	; 0x304
    5d74:	f023 0307 	bic.w	r3, r3, #7
    5d78:	f043 0304 	orr.w	r3, r3, #4
		NRF_UICR->REGOUT0 =
    5d7c:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
		    (UICR_REGOUT0_VOUT_3V0 << UICR_REGOUT0_VOUT_Pos);

		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    5d80:	2300      	movs	r3, #0
    5d82:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
    5d86:	4a0a      	ldr	r2, [pc, #40]	; (5db0 <board_nrf52840dongle_nrf52840_init+0x70>)
    5d88:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    5d8c:	2b00      	cmp	r3, #0
    5d8e:	d0fb      	beq.n	5d88 <board_nrf52840dongle_nrf52840_init+0x48>
  __ASM volatile ("dsb 0xF":::"memory");
    5d90:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    5d94:	4907      	ldr	r1, [pc, #28]	; (5db4 <board_nrf52840dongle_nrf52840_init+0x74>)
    5d96:	4b08      	ldr	r3, [pc, #32]	; (5db8 <board_nrf52840dongle_nrf52840_init+0x78>)
    5d98:	68ca      	ldr	r2, [r1, #12]
    5d9a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    5d9e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    5da0:	60cb      	str	r3, [r1, #12]
    5da2:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    5da6:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    5da8:	e7fd      	b.n	5da6 <board_nrf52840dongle_nrf52840_init+0x66>
		/* a reset is required for changes to take effect */
		NVIC_SystemReset();
	}

	return 0;
}
    5daa:	2000      	movs	r0, #0
    5dac:	4770      	bx	lr
    5dae:	bf00      	nop
    5db0:	4001e000 	.word	0x4001e000
    5db4:	e000ed00 	.word	0xe000ed00
    5db8:	05fa0004 	.word	0x05fa0004

00005dbc <le_gen_dhkey>:
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
}

static uint8_t le_gen_dhkey(uint8_t *key, uint8_t key_type)
{
    5dbc:	b570      	push	{r4, r5, r6, lr}
    5dbe:	4c21      	ldr	r4, [pc, #132]	; (5e44 <le_gen_dhkey+0x88>)
    5dc0:	f3bf 8f5b 	dmb	ish
    5dc4:	6823      	ldr	r3, [r4, #0]
    5dc6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    5dca:	07da      	lsls	r2, r3, #31
{
    5dcc:	4606      	mov	r6, r0
    5dce:	460d      	mov	r5, r1
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    5dd0:	d501      	bpl.n	5dd6 <le_gen_dhkey+0x1a>
		return BT_HCI_ERR_CMD_DISALLOWED;
    5dd2:	200c      	movs	r0, #12
			  key_type == BT_HCI_LE_KEY_TYPE_DEBUG);

	k_sem_give(&cmd_sem);

	return BT_HCI_ERR_SUCCESS;
}
    5dd4:	bd70      	pop	{r4, r5, r6, pc}
	if (key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
    5dd6:	2901      	cmp	r1, #1
    5dd8:	d831      	bhi.n	5e3e <le_gen_dhkey+0x82>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5dda:	f3bf 8f5b 	dmb	ish
    5dde:	e854 3f00 	ldrex	r3, [r4]
    5de2:	f043 0202 	orr.w	r2, r3, #2
    5de6:	e844 2100 	strex	r1, r2, [r4]
    5dea:	2900      	cmp	r1, #0
    5dec:	d1f7      	bne.n	5dde <le_gen_dhkey+0x22>
    5dee:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(flags, PENDING_DHKEY)) {
    5df2:	079b      	lsls	r3, r3, #30
    5df4:	d4ed      	bmi.n	5dd2 <le_gen_dhkey+0x16>
	sys_memcpy_swap(ecc.public_key_be, key, BT_PUB_KEY_COORD_LEN);
    5df6:	4814      	ldr	r0, [pc, #80]	; (5e48 <le_gen_dhkey+0x8c>)
    5df8:	4631      	mov	r1, r6
    5dfa:	f018 f973 	bl	1e0e4 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecc.public_key_be[BT_PUB_KEY_COORD_LEN], &key[BT_PUB_KEY_COORD_LEN],
    5dfe:	4813      	ldr	r0, [pc, #76]	; (5e4c <le_gen_dhkey+0x90>)
    5e00:	f106 0120 	add.w	r1, r6, #32
    5e04:	f018 f96e 	bl	1e0e4 <sys_memcpy_swap.constprop.0>
    5e08:	f3bf 8f5b 	dmb	ish
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	if (val) {
    5e0c:	b175      	cbz	r5, 5e2c <le_gen_dhkey+0x70>
    5e0e:	e854 3f00 	ldrex	r3, [r4]
    5e12:	f043 0304 	orr.w	r3, r3, #4
    5e16:	e844 3200 	strex	r2, r3, [r4]
    5e1a:	2a00      	cmp	r2, #0
    5e1c:	d1f7      	bne.n	5e0e <le_gen_dhkey+0x52>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5e1e:	f3bf 8f5b 	dmb	ish
	z_impl_k_sem_give(sem);
    5e22:	480b      	ldr	r0, [pc, #44]	; (5e50 <le_gen_dhkey+0x94>)
    5e24:	f015 fa70 	bl	1b308 <z_impl_k_sem_give>
    5e28:	2000      	movs	r0, #0
    5e2a:	e7d3      	b.n	5dd4 <le_gen_dhkey+0x18>
    5e2c:	e854 3f00 	ldrex	r3, [r4]
    5e30:	f023 0304 	bic.w	r3, r3, #4
    5e34:	e844 3200 	strex	r2, r3, [r4]
    5e38:	2a00      	cmp	r2, #0
    5e3a:	d0f0      	beq.n	5e1e <le_gen_dhkey+0x62>
    5e3c:	e7f6      	b.n	5e2c <le_gen_dhkey+0x70>
		return BT_HCI_ERR_INVALID_PARAM;
    5e3e:	2012      	movs	r0, #18
    5e40:	e7c8      	b.n	5dd4 <le_gen_dhkey+0x18>
    5e42:	bf00      	nop
    5e44:	200022e0 	.word	0x200022e0
    5e48:	20004034 	.word	0x20004034
    5e4c:	20004054 	.word	0x20004054
    5e50:	20000f00 	.word	0x20000f00

00005e54 <ecc_thread>:
{
    5e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5e58:	4f60      	ldr	r7, [pc, #384]	; (5fdc <ecc_thread+0x188>)
	return z_impl_k_sem_take(sem, timeout);
    5e5a:	f8df 8184 	ldr.w	r8, [pc, #388]	; 5fe0 <ecc_thread+0x18c>
    5e5e:	463e      	mov	r6, r7
    5e60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5e64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5e68:	4640      	mov	r0, r8
    5e6a:	f015 fa73 	bl	1b354 <z_impl_k_sem_take>
    5e6e:	f3bf 8f5b 	dmb	ish
    5e72:	683c      	ldr	r4, [r7, #0]
    5e74:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    5e78:	f014 0401 	ands.w	r4, r4, #1
    5e7c:	d055      	beq.n	5f2a <ecc_thread+0xd6>
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
    5e7e:	f8df 9164 	ldr.w	r9, [pc, #356]	; 5fe4 <ecc_thread+0x190>
    5e82:	4c59      	ldr	r4, [pc, #356]	; (5fe8 <ecc_thread+0x194>)
	} while (memcmp(ecc.private_key_be, debug_private_key_be, BT_PRIV_KEY_LEN) == 0);
    5e84:	4d59      	ldr	r5, [pc, #356]	; (5fec <ecc_thread+0x198>)
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
    5e86:	485a      	ldr	r0, [pc, #360]	; (5ff0 <ecc_thread+0x19c>)
    5e88:	464a      	mov	r2, r9
    5e8a:	4621      	mov	r1, r4
    5e8c:	f016 ffa5 	bl	1cdda <uECC_make_key>
		if (rc == TC_CRYPTO_FAIL) {
    5e90:	2800      	cmp	r0, #0
    5e92:	d03e      	beq.n	5f12 <ecc_thread+0xbe>
	} while (memcmp(ecc.private_key_be, debug_private_key_be, BT_PRIV_KEY_LEN) == 0);
    5e94:	2220      	movs	r2, #32
    5e96:	4629      	mov	r1, r5
    5e98:	4620      	mov	r0, r4
    5e9a:	f018 f8b9 	bl	1e010 <memcmp>
    5e9e:	2800      	cmp	r0, #0
    5ea0:	d0f1      	beq.n	5e86 <ecc_thread+0x32>
	return 0;
    5ea2:	f04f 0900 	mov.w	r9, #0
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    5ea6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5eaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5eae:	2001      	movs	r0, #1
    5eb0:	f000 f968 	bl	6184 <bt_buf_get_rx>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
    5eb4:	f100 0508 	add.w	r5, r0, #8
    5eb8:	2102      	movs	r1, #2
    5eba:	4604      	mov	r4, r0
    5ebc:	4628      	mov	r0, r5
    5ebe:	f01e ff2a 	bl	24d16 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    5ec2:	233e      	movs	r3, #62	; 0x3e
    5ec4:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    5ec6:	2342      	movs	r3, #66	; 0x42
    5ec8:	7043      	strb	r3, [r0, #1]
    5eca:	2101      	movs	r1, #1
    5ecc:	4628      	mov	r0, r5
    5ece:	f01e ff22 	bl	24d16 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
    5ed2:	2308      	movs	r3, #8
    5ed4:	7003      	strb	r3, [r0, #0]
    5ed6:	2141      	movs	r1, #65	; 0x41
    5ed8:	4628      	mov	r0, r5
    5eda:	f01e ff1c 	bl	24d16 <net_buf_simple_add>
    5ede:	4605      	mov	r5, r0
	evt->status = status;
    5ee0:	f800 9b01 	strb.w	r9, [r0], #1
	if (status) {
    5ee4:	f1b9 0f00 	cmp.w	r9, #0
    5ee8:	d016      	beq.n	5f18 <ecc_thread+0xc4>
		(void)memset(evt->key, 0, sizeof(evt->key));
    5eea:	2240      	movs	r2, #64	; 0x40
    5eec:	2100      	movs	r1, #0
    5eee:	f018 f8ab 	bl	1e048 <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5ef2:	f3bf 8f5b 	dmb	ish
    5ef6:	e856 3f00 	ldrex	r3, [r6]
    5efa:	f023 0301 	bic.w	r3, r3, #1
    5efe:	e846 3200 	strex	r2, r3, [r6]
    5f02:	2a00      	cmp	r2, #0
    5f04:	d1f7      	bne.n	5ef6 <ecc_thread+0xa2>
    5f06:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
    5f0a:	4620      	mov	r0, r4
	bt_recv(buf);
    5f0c:	f000 fd36 	bl	697c <bt_recv>
	while (true) {
    5f10:	e7a6      	b.n	5e60 <ecc_thread+0xc>
			return BT_HCI_ERR_UNSPECIFIED;
    5f12:	f04f 091f 	mov.w	r9, #31
    5f16:	e7c6      	b.n	5ea6 <ecc_thread+0x52>
		sys_memcpy_swap(evt->key, ecc.public_key_be, BT_PUB_KEY_COORD_LEN);
    5f18:	4935      	ldr	r1, [pc, #212]	; (5ff0 <ecc_thread+0x19c>)
    5f1a:	f018 f8e3 	bl	1e0e4 <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[BT_PUB_KEY_COORD_LEN],
    5f1e:	3120      	adds	r1, #32
    5f20:	f105 0021 	add.w	r0, r5, #33	; 0x21
    5f24:	f018 f8de 	bl	1e0e4 <sys_memcpy_swap.constprop.0>
    5f28:	e7e3      	b.n	5ef2 <ecc_thread+0x9e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5f2a:	f3bf 8f5b 	dmb	ish
    5f2e:	683b      	ldr	r3, [r7, #0]
    5f30:	f3bf 8f5b 	dmb	ish
		} else if (atomic_test_bit(flags, PENDING_DHKEY)) {
    5f34:	079b      	lsls	r3, r3, #30
    5f36:	d593      	bpl.n	5e60 <ecc_thread+0xc>
	ret = uECC_valid_public_key(ecc.public_key_be, &curve_secp256r1);
    5f38:	492a      	ldr	r1, [pc, #168]	; (5fe4 <ecc_thread+0x190>)
    5f3a:	482d      	ldr	r0, [pc, #180]	; (5ff0 <ecc_thread+0x19c>)
    5f3c:	f017 fe06 	bl	1db4c <uECC_valid_public_key>
	if (ret < 0) {
    5f40:	2800      	cmp	r0, #0
    5f42:	db11      	blt.n	5f68 <ecc_thread+0x114>
    5f44:	f3bf 8f5b 	dmb	ish
    5f48:	683b      	ldr	r3, [r7, #0]
		ret = uECC_shared_secret(ecc.public_key_be,
    5f4a:	4927      	ldr	r1, [pc, #156]	; (5fe8 <ecc_thread+0x194>)
    5f4c:	4827      	ldr	r0, [pc, #156]	; (5fec <ecc_thread+0x198>)
    5f4e:	f3bf 8f5b 	dmb	ish
    5f52:	f013 0f04 	tst.w	r3, #4
    5f56:	f101 0220 	add.w	r2, r1, #32
    5f5a:	4b22      	ldr	r3, [pc, #136]	; (5fe4 <ecc_thread+0x190>)
    5f5c:	bf18      	it	ne
    5f5e:	4601      	movne	r1, r0
    5f60:	4610      	mov	r0, r2
    5f62:	f016 ff89 	bl	1ce78 <uECC_shared_secret>
    5f66:	4604      	mov	r4, r0
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    5f68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5f6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5f70:	2001      	movs	r0, #1
    5f72:	f000 f907 	bl	6184 <bt_buf_get_rx>
    5f76:	f100 0908 	add.w	r9, r0, #8
    5f7a:	2102      	movs	r1, #2
    5f7c:	4605      	mov	r5, r0
    5f7e:	4648      	mov	r0, r9
    5f80:	f01e fec9 	bl	24d16 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    5f84:	233e      	movs	r3, #62	; 0x3e
    5f86:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    5f88:	2322      	movs	r3, #34	; 0x22
    5f8a:	7043      	strb	r3, [r0, #1]
    5f8c:	2101      	movs	r1, #1
    5f8e:	4648      	mov	r0, r9
    5f90:	f01e fec1 	bl	24d16 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
    5f94:	2309      	movs	r3, #9
    5f96:	7003      	strb	r3, [r0, #0]
    5f98:	2121      	movs	r1, #33	; 0x21
    5f9a:	4648      	mov	r0, r9
    5f9c:	f01e febb 	bl	24d16 <net_buf_simple_add>
    5fa0:	4603      	mov	r3, r0
	if (ret == TC_CRYPTO_FAIL) {
    5fa2:	3001      	adds	r0, #1
    5fa4:	b99c      	cbnz	r4, 5fce <ecc_thread+0x17a>
		evt->status = BT_HCI_ERR_UNSPECIFIED;
    5fa6:	221f      	movs	r2, #31
    5fa8:	701a      	strb	r2, [r3, #0]
		(void)memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
    5faa:	21ff      	movs	r1, #255	; 0xff
    5fac:	2220      	movs	r2, #32
    5fae:	f018 f84b 	bl	1e048 <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5fb2:	f3bf 8f5b 	dmb	ish
    5fb6:	e856 3f00 	ldrex	r3, [r6]
    5fba:	f023 0302 	bic.w	r3, r3, #2
    5fbe:	e846 3200 	strex	r2, r3, [r6]
    5fc2:	2a00      	cmp	r2, #0
    5fc4:	d1f7      	bne.n	5fb6 <ecc_thread+0x162>
    5fc6:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
    5fca:	4628      	mov	r0, r5
    5fcc:	e79e      	b.n	5f0c <ecc_thread+0xb8>
		evt->status = 0U;
    5fce:	2200      	movs	r2, #0
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
    5fd0:	4907      	ldr	r1, [pc, #28]	; (5ff0 <ecc_thread+0x19c>)
		evt->status = 0U;
    5fd2:	701a      	strb	r2, [r3, #0]
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
    5fd4:	f018 f886 	bl	1e0e4 <sys_memcpy_swap.constprop.0>
    5fd8:	e7eb      	b.n	5fb2 <ecc_thread+0x15e>
    5fda:	bf00      	nop
    5fdc:	200022e0 	.word	0x200022e0
    5fe0:	20000f00 	.word	0x20000f00
    5fe4:	00026884 	.word	0x00026884
    5fe8:	20004014 	.word	0x20004014
    5fec:	000274a6 	.word	0x000274a6
    5ff0:	20004034 	.word	0x20004034

00005ff4 <bt_hci_ecc_send>:

	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
}

int bt_hci_ecc_send(struct net_buf *buf)
{
    5ff4:	b570      	push	{r4, r5, r6, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    5ff6:	7d06      	ldrb	r6, [r0, #20]
    5ff8:	4604      	mov	r4, r0
	if (bt_buf_get_type(buf) == BT_BUF_CMD) {
    5ffa:	b976      	cbnz	r6, 601a <bt_hci_ecc_send+0x26>
		struct bt_hci_cmd_hdr *chdr = (void *)buf->data;
    5ffc:	6883      	ldr	r3, [r0, #8]

		switch (sys_le16_to_cpu(chdr->opcode)) {
    5ffe:	881d      	ldrh	r5, [r3, #0]
    6000:	f242 0226 	movw	r2, #8230	; 0x2026
    6004:	4295      	cmp	r5, r2
    6006:	d045      	beq.n	6094 <bt_hci_ecc_send+0xa0>
    6008:	d80f      	bhi.n	602a <bt_hci_ecc_send+0x36>
    600a:	f242 0201 	movw	r2, #8193	; 0x2001
    600e:	4295      	cmp	r5, r2
    6010:	d04f      	beq.n	60b2 <bt_hci_ecc_send+0xbe>
    6012:	f242 0325 	movw	r3, #8229	; 0x2025
    6016:	429d      	cmp	r5, r3
    6018:	d013      	beq.n	6042 <bt_hci_ecc_send+0x4e>
		default:
			break;
		}
	}

	return bt_dev.drv->send(buf);
    601a:	4b2a      	ldr	r3, [pc, #168]	; (60c4 <bt_hci_ecc_send+0xd0>)
    601c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
    6020:	4620      	mov	r0, r4
    6022:	691b      	ldr	r3, [r3, #16]
}
    6024:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_dev.drv->send(buf);
    6028:	4718      	bx	r3
		switch (sys_le16_to_cpu(chdr->opcode)) {
    602a:	f242 035e 	movw	r3, #8286	; 0x205e
    602e:	429d      	cmp	r5, r3
    6030:	d1f3      	bne.n	601a <bt_hci_ecc_send+0x26>
 *
 * @return New beginning of the buffer data.
 */
static inline void *net_buf_pull(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull(&buf->b, len);
    6032:	2103      	movs	r1, #3
    6034:	3008      	adds	r0, #8
    6036:	f01e fee9 	bl	24e0c <net_buf_simple_pull>
	cmd = (void *)buf->data;
    603a:	68a0      	ldr	r0, [r4, #8]
	status = le_gen_dhkey(cmd->key, cmd->key_type);
    603c:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    6040:	e02e      	b.n	60a0 <bt_hci_ecc_send+0xac>
    6042:	2103      	movs	r1, #3
    6044:	3008      	adds	r0, #8
    6046:	f01e fee1 	bl	24e0c <net_buf_simple_pull>
	net_buf_unref(buf);
    604a:	4620      	mov	r0, r4
    604c:	f011 f814 	bl	17078 <net_buf_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6050:	f3bf 8f5b 	dmb	ish
    6054:	4b1c      	ldr	r3, [pc, #112]	; (60c8 <bt_hci_ecc_send+0xd4>)
    6056:	681a      	ldr	r2, [r3, #0]
    6058:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_DHKEY)) {
    605c:	0792      	lsls	r2, r2, #30
    605e:	d507      	bpl.n	6070 <bt_hci_ecc_send+0x7c>
		status = BT_HCI_ERR_CMD_DISALLOWED;
    6060:	260c      	movs	r6, #12
	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
    6062:	4631      	mov	r1, r6
    6064:	f242 0025 	movw	r0, #8229	; 0x2025
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY_V2, status);
    6068:	f018 f818 	bl	1e09c <send_cmd_status>
}
    606c:	2000      	movs	r0, #0
    606e:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6070:	f3bf 8f5b 	dmb	ish
    6074:	e853 2f00 	ldrex	r2, [r3]
    6078:	f042 0101 	orr.w	r1, r2, #1
    607c:	e843 1000 	strex	r0, r1, [r3]
    6080:	2800      	cmp	r0, #0
    6082:	d1f7      	bne.n	6074 <bt_hci_ecc_send+0x80>
    6084:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_and_set_bit(flags, PENDING_PUB_KEY)) {
    6088:	07d3      	lsls	r3, r2, #31
    608a:	d4e9      	bmi.n	6060 <bt_hci_ecc_send+0x6c>
	z_impl_k_sem_give(sem);
    608c:	480f      	ldr	r0, [pc, #60]	; (60cc <bt_hci_ecc_send+0xd8>)
    608e:	f015 f93b 	bl	1b308 <z_impl_k_sem_give>
}
    6092:	e7e6      	b.n	6062 <bt_hci_ecc_send+0x6e>
    6094:	2103      	movs	r1, #3
    6096:	3008      	adds	r0, #8
    6098:	f01e feb8 	bl	24e0c <net_buf_simple_pull>
	status = le_gen_dhkey(cmd->key, BT_HCI_LE_KEY_TYPE_GENERATED);
    609c:	68a0      	ldr	r0, [r4, #8]
    609e:	4631      	mov	r1, r6
	status = le_gen_dhkey(cmd->key, cmd->key_type);
    60a0:	f7ff fe8c 	bl	5dbc <le_gen_dhkey>
    60a4:	4606      	mov	r6, r0
	net_buf_unref(buf);
    60a6:	4620      	mov	r0, r4
    60a8:	f010 ffe6 	bl	17078 <net_buf_unref>
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY_V2, status);
    60ac:	4631      	mov	r1, r6
    60ae:	4628      	mov	r0, r5
    60b0:	e7da      	b.n	6068 <bt_hci_ecc_send+0x74>
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
    60b2:	78da      	ldrb	r2, [r3, #3]
    60b4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    60b8:	70da      	strb	r2, [r3, #3]
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
    60ba:	791a      	ldrb	r2, [r3, #4]
    60bc:	f022 0201 	bic.w	r2, r2, #1
    60c0:	711a      	strb	r2, [r3, #4]
}
    60c2:	e7aa      	b.n	601a <bt_hci_ecc_send+0x26>
    60c4:	20000080 	.word	0x20000080
    60c8:	200022e0 	.word	0x200022e0
    60cc:	20000f00 	.word	0x20000f00

000060d0 <bt_hci_ecc_init>:
{
	return !bt_rand(dst, len);
}

void bt_hci_ecc_init(void)
{
    60d0:	b510      	push	{r4, lr}
    60d2:	b088      	sub	sp, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    60d4:	4c0c      	ldr	r4, [pc, #48]	; (6108 <bt_hci_ecc_init+0x38>)
    60d6:	490d      	ldr	r1, [pc, #52]	; (610c <bt_hci_ecc_init+0x3c>)
    60d8:	2200      	movs	r2, #0
    60da:	2300      	movs	r3, #0
    60dc:	e9cd 2306 	strd	r2, r3, [sp, #24]
    60e0:	2300      	movs	r3, #0
    60e2:	220a      	movs	r2, #10
    60e4:	e9cd 2303 	strd	r2, r3, [sp, #12]
    60e8:	e9cd 3301 	strd	r3, r3, [sp, #4]
    60ec:	9300      	str	r3, [sp, #0]
    60ee:	f44f 628f 	mov.w	r2, #1144	; 0x478
    60f2:	4b07      	ldr	r3, [pc, #28]	; (6110 <bt_hci_ecc_init+0x40>)
    60f4:	4620      	mov	r0, r4
    60f6:	f014 ff75 	bl	1afe4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    60fa:	4906      	ldr	r1, [pc, #24]	; (6114 <bt_hci_ecc_init+0x44>)
    60fc:	4620      	mov	r0, r4
	k_thread_create(&ecc_thread_data, ecc_thread_stack,
			K_KERNEL_STACK_SIZEOF(ecc_thread_stack), ecc_thread,
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecc_thread_data, "BT ECC");
}
    60fe:	b008      	add	sp, #32
    6100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6104:	f01f bc06 	b.w	25914 <z_impl_k_thread_name_set>
    6108:	200012a8 	.word	0x200012a8
    610c:	20004560 	.word	0x20004560
    6110:	00005e55 	.word	0x00005e55
    6114:	0002749f 	.word	0x0002749f

00006118 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    6118:	b430      	push	{r4, r5}
    611a:	4603      	mov	r3, r0
    611c:	4608      	mov	r0, r1
	switch (src->type) {
    611e:	781a      	ldrb	r2, [r3, #0]
    6120:	2a01      	cmp	r2, #1
    6122:	d013      	beq.n	614c <uuid_to_uuid128+0x34>
    6124:	2a02      	cmp	r2, #2
    6126:	d026      	beq.n	6176 <uuid_to_uuid128+0x5e>
    6128:	b972      	cbnz	r2, 6148 <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    612a:	4a15      	ldr	r2, [pc, #84]	; (6180 <uuid_to_uuid128+0x68>)
    612c:	f102 0410 	add.w	r4, r2, #16
    6130:	f852 5b04 	ldr.w	r5, [r2], #4
    6134:	f841 5b04 	str.w	r5, [r1], #4
    6138:	42a2      	cmp	r2, r4
    613a:	d1f9      	bne.n	6130 <uuid_to_uuid128+0x18>
		sys_put_le16(BT_UUID_16(src)->val,
    613c:	885b      	ldrh	r3, [r3, #2]
		*dst = uuid128_base;
    613e:	7812      	ldrb	r2, [r2, #0]
    6140:	700a      	strb	r2, [r1, #0]
	dst[0] = val;
    6142:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
    6144:	0a1b      	lsrs	r3, r3, #8
    6146:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    6148:	bc30      	pop	{r4, r5}
    614a:	4770      	bx	lr
		*dst = uuid128_base;
    614c:	4a0c      	ldr	r2, [pc, #48]	; (6180 <uuid_to_uuid128+0x68>)
    614e:	f102 0410 	add.w	r4, r2, #16
    6152:	f852 5b04 	ldr.w	r5, [r2], #4
    6156:	f841 5b04 	str.w	r5, [r1], #4
    615a:	42a2      	cmp	r2, r4
    615c:	d1f9      	bne.n	6152 <uuid_to_uuid128+0x3a>
		sys_put_le32(BT_UUID_32(src)->val,
    615e:	685b      	ldr	r3, [r3, #4]
		*dst = uuid128_base;
    6160:	7812      	ldrb	r2, [r2, #0]
    6162:	700a      	strb	r2, [r1, #0]
    6164:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
    6168:	7343      	strb	r3, [r0, #13]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    616a:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    616c:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
    616e:	0a1b      	lsrs	r3, r3, #8
    6170:	7382      	strb	r2, [r0, #14]
    6172:	7403      	strb	r3, [r0, #16]
}
    6174:	e7e8      	b.n	6148 <uuid_to_uuid128+0x30>
}
    6176:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
    6178:	2211      	movs	r2, #17
    617a:	4619      	mov	r1, r3
    617c:	f017 bf59 	b.w	1e032 <memcpy>
    6180:	000274c6 	.word	0x000274c6

00006184 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
    6184:	b538      	push	{r3, r4, r5, lr}
    6186:	4605      	mov	r5, r0
	return net_buf_alloc_fixed(pool, timeout);
    6188:	4805      	ldr	r0, [pc, #20]	; (61a0 <bt_buf_get_rx+0x1c>)
    618a:	f01e fd39 	bl	24c00 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    618e:	4604      	mov	r4, r0
    6190:	b120      	cbz	r0, 619c <bt_buf_get_rx+0x18>
	net_buf_simple_reserve(&buf->b, reserve);
    6192:	2100      	movs	r1, #0
    6194:	3008      	adds	r0, #8
    6196:	f01e fd58 	bl	24c4a <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    619a:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    619c:	4620      	mov	r0, r4
    619e:	bd38      	pop	{r3, r4, r5, pc}
    61a0:	20001098 	.word	0x20001098

000061a4 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    61a4:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
    61a6:	490b      	ldr	r1, [pc, #44]	; (61d4 <bt_buf_get_cmd_complete+0x30>)
{
    61a8:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
    61aa:	f8d1 0130 	ldr.w	r0, [r1, #304]	; 0x130
{
    61ae:	b510      	push	{r4, lr}
	if (bt_dev.sent_cmd) {
    61b0:	b920      	cbnz	r0, 61bc <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    61b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    61b6:	2001      	movs	r0, #1
    61b8:	f7ff bfe4 	b.w	6184 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
    61bc:	f01e fd73 	bl	24ca6 <net_buf_ref>
    61c0:	2301      	movs	r3, #1
		buf->len = 0U;
    61c2:	2100      	movs	r1, #0
    61c4:	7503      	strb	r3, [r0, #20]
    61c6:	8181      	strh	r1, [r0, #12]
		buf = net_buf_ref(bt_dev.sent_cmd);
    61c8:	4604      	mov	r4, r0
    61ca:	3008      	adds	r0, #8
    61cc:	f01e fd3d 	bl	24c4a <net_buf_simple_reserve>
}
    61d0:	4620      	mov	r0, r4
    61d2:	bd10      	pop	{r4, pc}
    61d4:	20000080 	.word	0x20000080

000061d8 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    61d8:	b570      	push	{r4, r5, r6, lr}
    61da:	4604      	mov	r4, r0
	switch (evt) {
    61dc:	2c0f      	cmp	r4, #15
{
    61de:	460d      	mov	r5, r1
    61e0:	4610      	mov	r0, r2
    61e2:	4619      	mov	r1, r3
	switch (evt) {
    61e4:	d805      	bhi.n	61f2 <bt_buf_get_evt+0x1a>
    61e6:	2c0d      	cmp	r4, #13
    61e8:	d912      	bls.n	6210 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    61ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    61ee:	f7ff bfd9 	b.w	61a4 <bt_buf_get_cmd_complete>
	switch (evt) {
    61f2:	2c13      	cmp	r4, #19
    61f4:	d10c      	bne.n	6210 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
    61f6:	480b      	ldr	r0, [pc, #44]	; (6224 <bt_buf_get_evt+0x4c>)
    61f8:	f01e fd02 	bl	24c00 <net_buf_alloc_fixed>
			if (buf) {
    61fc:	4604      	mov	r4, r0
    61fe:	b128      	cbz	r0, 620c <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
    6200:	2100      	movs	r1, #0
    6202:	3008      	adds	r0, #8
    6204:	f01e fd21 	bl	24c4a <net_buf_simple_reserve>
    6208:	2301      	movs	r3, #1
    620a:	7523      	strb	r3, [r4, #20]
}
    620c:	4620      	mov	r0, r4
    620e:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
    6210:	4602      	mov	r2, r0
    6212:	460b      	mov	r3, r1
		if (discardable) {
    6214:	b10d      	cbz	r5, 621a <bt_buf_get_evt+0x42>
    6216:	4804      	ldr	r0, [pc, #16]	; (6228 <bt_buf_get_evt+0x50>)
    6218:	e7ee      	b.n	61f8 <bt_buf_get_evt+0x20>
}
    621a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    621e:	2001      	movs	r0, #1
    6220:	f7ff bfb0 	b.w	6184 <bt_buf_get_rx>
    6224:	200010c4 	.word	0x200010c4
    6228:	20000fe8 	.word	0x20000fe8

0000622c <hci_disconn_complete_prio>:

	return false;
}

static void hci_disconn_complete_prio(struct net_buf *buf)
{
    622c:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    622e:	6883      	ldr	r3, [r0, #8]
	struct bt_conn *conn;

	BT_DBG("status 0x%02x handle %u reason 0x%02x", evt->status, handle,
	       evt->reason);

	if (evt->status) {
    6230:	781a      	ldrb	r2, [r3, #0]
    6232:	b972      	cbnz	r2, 6252 <hci_disconn_complete_prio+0x26>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    6234:	f8b3 4001 	ldrh.w	r4, [r3, #1]
		return;
	}

	conn = bt_conn_lookup_handle(handle);
    6238:	4620      	mov	r0, r4
    623a:	f001 ff1f 	bl	807c <bt_conn_lookup_handle>
	if (!conn) {
    623e:	4605      	mov	r5, r0
    6240:	b940      	cbnz	r0, 6254 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
    6242:	4b08      	ldr	r3, [pc, #32]	; (6264 <hci_disconn_complete_prio+0x38>)
    6244:	881a      	ldrh	r2, [r3, #0]
    6246:	b922      	cbnz	r2, 6252 <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
    6248:	ea6f 5004 	mvn.w	r0, r4, lsl #20
    624c:	ea6f 5010 	mvn.w	r0, r0, lsr #20
    6250:	8018      	strh	r0, [r3, #0]
		return;
	}

	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
	bt_conn_unref(conn);
}
    6252:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    6254:	2101      	movs	r1, #1
    6256:	f001 ff19 	bl	808c <bt_conn_set_state>
	bt_conn_unref(conn);
    625a:	4628      	mov	r0, r5
}
    625c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    6260:	f018 bdee 	b.w	1ee40 <bt_conn_unref>
    6264:	20003f58 	.word	0x20003f58

00006268 <hci_le_meta_event>:
#endif /* CONFIG_BT_DF_CONNECTION_CTE_REQ */

};

static void hci_le_meta_event(struct net_buf *buf)
{
    6268:	b510      	push	{r4, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    626a:	2101      	movs	r1, #1
    626c:	4604      	mov	r4, r0
    626e:	3008      	adds	r0, #8
    6270:	f01e fdd4 	bl	24e1c <net_buf_simple_pull_mem>

	evt = net_buf_pull_mem(buf, sizeof(*evt));

	BT_DBG("subevent 0x%02x", evt->subevent);

	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    6274:	4621      	mov	r1, r4
    6276:	4a03      	ldr	r2, [pc, #12]	; (6284 <hci_le_meta_event+0x1c>)
    6278:	7800      	ldrb	r0, [r0, #0]
}
    627a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    627e:	2308      	movs	r3, #8
    6280:	f018 b969 	b.w	1e556 <handle_event>
    6284:	00026964 	.word	0x00026964

00006288 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    6288:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    628a:	4c0c      	ldr	r4, [pc, #48]	; (62bc <find_pending_connect.part.0+0x34>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    628c:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    628e:	2205      	movs	r2, #5
    6290:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    6294:	f002 f87e 	bl	8394 <bt_conn_lookup_state_le>
		if (!conn) {
    6298:	b970      	cbnz	r0, 62b8 <find_pending_connect.part.0+0x30>
						       BT_ADDR_LE_NONE,
    629a:	4b09      	ldr	r3, [pc, #36]	; (62c0 <find_pending_connect.part.0+0x38>)
    629c:	6818      	ldr	r0, [r3, #0]
    629e:	889a      	ldrh	r2, [r3, #4]
    62a0:	9000      	str	r0, [sp, #0]
    62a2:	799b      	ldrb	r3, [r3, #6]
    62a4:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    62a8:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
						       BT_ADDR_LE_NONE,
    62ac:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    62b0:	2204      	movs	r2, #4
    62b2:	4669      	mov	r1, sp
    62b4:	f002 f86e 	bl	8394 <bt_conn_lookup_state_le>
}
    62b8:	b002      	add	sp, #8
    62ba:	bd10      	pop	{r4, pc}
    62bc:	20000080 	.word	0x20000080
    62c0:	0002665b 	.word	0x0002665b

000062c4 <hci_cmd_done>:
{
    62c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    62c6:	4607      	mov	r7, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    62c8:	7990      	ldrb	r0, [r2, #6]
{
    62ca:	460e      	mov	r6, r1
    62cc:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    62ce:	f010 fe0f 	bl	16ef0 <net_buf_pool_get>
    62d2:	4b30      	ldr	r3, [pc, #192]	; (6394 <hci_cmd_done+0xd0>)
    62d4:	4283      	cmp	r3, r0
    62d6:	d15b      	bne.n	6390 <hci_cmd_done+0xcc>
	if (cmd(buf)->opcode != opcode) {
    62d8:	4620      	mov	r0, r4
    62da:	f010 fe11 	bl	16f00 <net_buf_id>
    62de:	4d2e      	ldr	r5, [pc, #184]	; (6398 <hci_cmd_done+0xd4>)
    62e0:	230c      	movs	r3, #12
    62e2:	fb03 5000 	mla	r0, r3, r0, r5
    62e6:	8843      	ldrh	r3, [r0, #2]
    62e8:	42bb      	cmp	r3, r7
    62ea:	d151      	bne.n	6390 <hci_cmd_done+0xcc>
	if (bt_dev.sent_cmd) {
    62ec:	4f2b      	ldr	r7, [pc, #172]	; (639c <hci_cmd_done+0xd8>)
    62ee:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
    62f2:	b120      	cbz	r0, 62fe <hci_cmd_done+0x3a>
		net_buf_unref(bt_dev.sent_cmd);
    62f4:	f010 fec0 	bl	17078 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    62f8:	2300      	movs	r3, #0
    62fa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	if (cmd(buf)->state && !status) {
    62fe:	4620      	mov	r0, r4
    6300:	f010 fdfe 	bl	16f00 <net_buf_id>
    6304:	270c      	movs	r7, #12
    6306:	fb07 5000 	mla	r0, r7, r0, r5
    630a:	6843      	ldr	r3, [r0, #4]
    630c:	b1e3      	cbz	r3, 6348 <hci_cmd_done+0x84>
    630e:	b9de      	cbnz	r6, 6348 <hci_cmd_done+0x84>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    6310:	4620      	mov	r0, r4
    6312:	f010 fdf5 	bl	16f00 <net_buf_id>
    6316:	fb07 5000 	mla	r0, r7, r0, r5
	atomic_val_t mask = ATOMIC_MASK(bit);
    631a:	2201      	movs	r2, #1
    631c:	6840      	ldr	r0, [r0, #4]
    631e:	e9d0 3100 	ldrd	r3, r1, [r0]
	if (val) {
    6322:	7a00      	ldrb	r0, [r0, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
    6324:	f001 071f 	and.w	r7, r1, #31
    6328:	40ba      	lsls	r2, r7
	if (val) {
    632a:	0949      	lsrs	r1, r1, #5
    632c:	b318      	cbz	r0, 6376 <hci_cmd_done+0xb2>
    632e:	f3bf 8f5b 	dmb	ish
    6332:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    6336:	e853 1f00 	ldrex	r1, [r3]
    633a:	4311      	orrs	r1, r2
    633c:	e843 1000 	strex	r0, r1, [r3]
    6340:	2800      	cmp	r0, #0
    6342:	d1f8      	bne.n	6336 <hci_cmd_done+0x72>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6344:	f3bf 8f5b 	dmb	ish
	if (cmd(buf)->sync) {
    6348:	4620      	mov	r0, r4
    634a:	f010 fdd9 	bl	16f00 <net_buf_id>
    634e:	270c      	movs	r7, #12
    6350:	fb07 5000 	mla	r0, r7, r0, r5
    6354:	6883      	ldr	r3, [r0, #8]
    6356:	b1db      	cbz	r3, 6390 <hci_cmd_done+0xcc>
		cmd(buf)->status = status;
    6358:	4620      	mov	r0, r4
    635a:	f010 fdd1 	bl	16f00 <net_buf_id>
    635e:	4378      	muls	r0, r7
    6360:	542e      	strb	r6, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    6362:	4620      	mov	r0, r4
    6364:	f010 fdcc 	bl	16f00 <net_buf_id>
    6368:	fb07 5500 	mla	r5, r7, r0, r5
    636c:	68a8      	ldr	r0, [r5, #8]
}
    636e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_impl_k_sem_give(sem);
    6372:	f014 bfc9 	b.w	1b308 <z_impl_k_sem_give>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    6376:	43d2      	mvns	r2, r2
    6378:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    637c:	f3bf 8f5b 	dmb	ish
    6380:	e853 1f00 	ldrex	r1, [r3]
    6384:	4011      	ands	r1, r2
    6386:	e843 1000 	strex	r0, r1, [r3]
    638a:	2800      	cmp	r0, #0
    638c:	d0da      	beq.n	6344 <hci_cmd_done+0x80>
    638e:	e7f7      	b.n	6380 <hci_cmd_done+0xbc>
    6390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6392:	bf00      	nop
    6394:	2000106c 	.word	0x2000106c
    6398:	200022e8 	.word	0x200022e8
    639c:	20000080 	.word	0x20000080

000063a0 <hci_cmd_status>:
{
    63a0:	b538      	push	{r3, r4, r5, lr}
    63a2:	2104      	movs	r1, #4
    63a4:	4604      	mov	r4, r0
    63a6:	3008      	adds	r0, #8
    63a8:	f01e fd38 	bl	24e1c <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    63ac:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    63ae:	7801      	ldrb	r1, [r0, #0]
    63b0:	8840      	ldrh	r0, [r0, #2]
    63b2:	4622      	mov	r2, r4
    63b4:	f7ff ff86 	bl	62c4 <hci_cmd_done>
	if (ncmd) {
    63b8:	b125      	cbz	r5, 63c4 <hci_cmd_status+0x24>
    63ba:	4803      	ldr	r0, [pc, #12]	; (63c8 <hci_cmd_status+0x28>)
}
    63bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    63c0:	f014 bfa2 	b.w	1b308 <z_impl_k_sem_give>
    63c4:	bd38      	pop	{r3, r4, r5, pc}
    63c6:	bf00      	nop
    63c8:	20000198 	.word	0x20000198

000063cc <hci_cmd_complete>:
{
    63cc:	b538      	push	{r3, r4, r5, lr}
    63ce:	2103      	movs	r1, #3
    63d0:	4604      	mov	r4, r0
    63d2:	3008      	adds	r0, #8
    63d4:	f01e fd22 	bl	24e1c <net_buf_simple_pull_mem>
	status = buf->data[0];
    63d8:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    63da:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    63dc:	7819      	ldrb	r1, [r3, #0]
    63de:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    63e2:	4622      	mov	r2, r4
    63e4:	f7ff ff6e 	bl	62c4 <hci_cmd_done>
	if (ncmd) {
    63e8:	b125      	cbz	r5, 63f4 <hci_cmd_complete+0x28>
    63ea:	4803      	ldr	r0, [pc, #12]	; (63f8 <hci_cmd_complete+0x2c>)
}
    63ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    63f0:	f014 bf8a 	b.w	1b308 <z_impl_k_sem_give>
    63f4:	bd38      	pop	{r3, r4, r5, pc}
    63f6:	bf00      	nop
    63f8:	20000198 	.word	0x20000198

000063fc <hci_tx_thread>:
#define EV_COUNT 1
#endif /* CONFIG_BT_ISO */
#endif /* CONFIG_BT_CONN */

static void hci_tx_thread(void *p1, void *p2, void *p3)
{
    63fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BT_DBG("Started");

	while (1) {
		int ev_count, err;

		events[0].state = K_POLL_STATE_NOT_READY;
    6400:	f8df 8108 	ldr.w	r8, [pc, #264]	; 650c <hci_tx_thread+0x110>
		}

		BT_DBG("Calling k_poll with %d events", ev_count);

		err = k_poll(events, ev_count, K_FOREVER);
		BT_ASSERT(err == 0);
    6404:	f8df a108 	ldr.w	sl, [pc, #264]	; 6510 <hci_tx_thread+0x114>
		events[0].state = K_POLL_STATE_NOT_READY;
    6408:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    640c:	4841      	ldr	r0, [pc, #260]	; (6514 <hci_tx_thread+0x118>)
		events[0].state = K_POLL_STATE_NOT_READY;
    640e:	f36f 3352 	bfc	r3, #13, #6
    6412:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    6416:	f001 fdf3 	bl	8000 <bt_conn_prepare_events>
    641a:	1c45      	adds	r5, r0, #1
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
    641c:	483b      	ldr	r0, [pc, #236]	; (650c <hci_tx_thread+0x110>)
    641e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6422:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6426:	4629      	mov	r1, r5
    6428:	f015 fe5e 	bl	1c0e8 <z_impl_k_poll>
		BT_ASSERT(err == 0);
    642c:	b160      	cbz	r0, 6448 <hci_tx_thread+0x4c>
    642e:	493a      	ldr	r1, [pc, #232]	; (6518 <hci_tx_thread+0x11c>)
    6430:	483a      	ldr	r0, [pc, #232]	; (651c <hci_tx_thread+0x120>)
    6432:	f640 1393 	movw	r3, #2451	; 0x993
    6436:	4652      	mov	r2, sl
    6438:	f015 ff46 	bl	1c2c8 <printk>
    643c:	4040      	eors	r0, r0
    643e:	f380 8811 	msr	BASEPRI, r0
    6442:	f04f 0003 	mov.w	r0, #3
    6446:	df02      	svc	2
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    6448:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 6520 <hci_tx_thread+0x124>
{
    644c:	4e2f      	ldr	r6, [pc, #188]	; (650c <hci_tx_thread+0x110>)
	return z_impl_k_sem_take(sem, timeout);
    644e:	f5a9 779a 	sub.w	r7, r9, #308	; 0x134
    6452:	f1a9 0b1c 	sub.w	fp, r9, #28
	for (; count; ev++, count--) {
    6456:	b915      	cbnz	r5, 645e <hci_tx_thread+0x62>
	z_impl_k_yield();
    6458:	f015 fbb2 	bl	1bbc0 <z_impl_k_yield>
	while (1) {
    645c:	e7d4      	b.n	6408 <hci_tx_thread+0xc>
		switch (ev->state) {
    645e:	68f3      	ldr	r3, [r6, #12]
    6460:	f3c3 3345 	ubfx	r3, r3, #13, #6
    6464:	2b04      	cmp	r3, #4
    6466:	d147      	bne.n	64f8 <hci_tx_thread+0xfc>
			if (ev->tag == BT_EVENT_CMD_TX) {
    6468:	7b33      	ldrb	r3, [r6, #12]
    646a:	2b00      	cmp	r3, #0
    646c:	d147      	bne.n	64fe <hci_tx_thread+0x102>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    646e:	2200      	movs	r2, #0
    6470:	2300      	movs	r3, #0
    6472:	4648      	mov	r0, r9
    6474:	f01e fbc9 	bl	24c0a <net_buf_get>
	BT_ASSERT(buf);
    6478:	4604      	mov	r4, r0
    647a:	b960      	cbnz	r0, 6496 <hci_tx_thread+0x9a>
    647c:	4929      	ldr	r1, [pc, #164]	; (6524 <hci_tx_thread+0x128>)
    647e:	4827      	ldr	r0, [pc, #156]	; (651c <hci_tx_thread+0x120>)
    6480:	f640 132a 	movw	r3, #2346	; 0x92a
    6484:	4652      	mov	r2, sl
    6486:	f015 ff1f 	bl	1c2c8 <printk>
    648a:	4040      	eors	r0, r0
    648c:	f380 8811 	msr	BASEPRI, r0
    6490:	f04f 0003 	mov.w	r0, #3
    6494:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    6496:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    649a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    649e:	4658      	mov	r0, fp
    64a0:	f014 ff58 	bl	1b354 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    64a4:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
    64a8:	b120      	cbz	r0, 64b4 <hci_tx_thread+0xb8>
		net_buf_unref(bt_dev.sent_cmd);
    64aa:	f010 fde5 	bl	17078 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    64ae:	2300      	movs	r3, #0
    64b0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	bt_dev.sent_cmd = net_buf_ref(buf);
    64b4:	4620      	mov	r0, r4
    64b6:	f01e fbf6 	bl	24ca6 <net_buf_ref>
    64ba:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
	BT_DBG("buf %p len %u type %u", buf, buf->len, bt_buf_get_type(buf));

	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		return bt_hci_ecc_send(buf);
    64be:	4620      	mov	r0, r4
    64c0:	f7ff fd98 	bl	5ff4 <bt_hci_ecc_send>
	if (err) {
    64c4:	b1c0      	cbz	r0, 64f8 <hci_tx_thread+0xfc>
	z_impl_k_sem_give(sem);
    64c6:	4818      	ldr	r0, [pc, #96]	; (6528 <hci_tx_thread+0x12c>)
    64c8:	f014 ff1e 	bl	1b308 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    64cc:	4620      	mov	r0, r4
    64ce:	f010 fd17 	bl	16f00 <net_buf_id>
    64d2:	4b16      	ldr	r3, [pc, #88]	; (652c <hci_tx_thread+0x130>)
    64d4:	220c      	movs	r2, #12
    64d6:	fb02 3000 	mla	r0, r2, r0, r3
    64da:	211f      	movs	r1, #31
    64dc:	8840      	ldrh	r0, [r0, #2]
    64de:	4622      	mov	r2, r4
    64e0:	f7ff fef0 	bl	62c4 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    64e4:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
    64e8:	f010 fdc6 	bl	17078 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    64ec:	2300      	movs	r3, #0
		net_buf_unref(buf);
    64ee:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
    64f0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
		net_buf_unref(buf);
    64f4:	f010 fdc0 	bl	17078 <net_buf_unref>
	for (; count; ev++, count--) {
    64f8:	3614      	adds	r6, #20
    64fa:	3d01      	subs	r5, #1
    64fc:	e7ab      	b.n	6456 <hci_tx_thread+0x5a>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    64fe:	2b01      	cmp	r3, #1
    6500:	d1fa      	bne.n	64f8 <hci_tx_thread+0xfc>
					conn = CONTAINER_OF(ev->fifo,
    6502:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
    6504:	3838      	subs	r0, #56	; 0x38
    6506:	f002 f871 	bl	85ec <bt_conn_process_tx>
    650a:	e7f5      	b.n	64f8 <hci_tx_thread+0xfc>
    650c:	20000408 	.word	0x20000408
    6510:	000274d7 	.word	0x000274d7
    6514:	2000041c 	.word	0x2000041c
    6518:	0002750b 	.word	0x0002750b
    651c:	00027514 	.word	0x00027514
    6520:	200001b4 	.word	0x200001b4
    6524:	00027531 	.word	0x00027531
    6528:	20000198 	.word	0x20000198
    652c:	200022e8 	.word	0x200022e8

00006530 <bt_hci_cmd_state_set_init>:
{
    6530:	b510      	push	{r4, lr}
	state->bit = bit;
    6532:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
    6536:	f89d 3008 	ldrb.w	r3, [sp, #8]
    653a:	720b      	strb	r3, [r1, #8]
{
    653c:	460c      	mov	r4, r1
	cmd(buf)->state = state;
    653e:	f010 fcdf 	bl	16f00 <net_buf_id>
    6542:	4b03      	ldr	r3, [pc, #12]	; (6550 <bt_hci_cmd_state_set_init+0x20>)
    6544:	220c      	movs	r2, #12
    6546:	fb02 3300 	mla	r3, r2, r0, r3
    654a:	605c      	str	r4, [r3, #4]
}
    654c:	bd10      	pop	{r4, pc}
    654e:	bf00      	nop
    6550:	200022e8 	.word	0x200022e8

00006554 <bt_hci_cmd_create>:
{
    6554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
    6558:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    655c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6560:	4606      	mov	r6, r0
    6562:	4817      	ldr	r0, [pc, #92]	; (65c0 <bt_hci_cmd_create+0x6c>)
	cmd(buf)->opcode = opcode;
    6564:	4d17      	ldr	r5, [pc, #92]	; (65c4 <bt_hci_cmd_create+0x70>)
{
    6566:	460f      	mov	r7, r1
    6568:	f01e fb4a 	bl	24c00 <net_buf_alloc_fixed>
    656c:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
    656e:	f100 0a08 	add.w	sl, r0, #8
    6572:	2100      	movs	r1, #0
    6574:	f04f 0800 	mov.w	r8, #0
    6578:	4650      	mov	r0, sl
    657a:	f01e fb66 	bl	24c4a <net_buf_simple_reserve>
    657e:	f884 8014 	strb.w	r8, [r4, #20]
	cmd(buf)->opcode = opcode;
    6582:	4620      	mov	r0, r4
    6584:	f010 fcbc 	bl	16f00 <net_buf_id>
    6588:	f04f 090c 	mov.w	r9, #12
    658c:	fb09 5000 	mla	r0, r9, r0, r5
    6590:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
    6592:	4620      	mov	r0, r4
    6594:	f010 fcb4 	bl	16f00 <net_buf_id>
    6598:	fb09 5000 	mla	r0, r9, r0, r5
    659c:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
    65a0:	4620      	mov	r0, r4
    65a2:	f010 fcad 	bl	16f00 <net_buf_id>
    65a6:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
    65aa:	2103      	movs	r1, #3
    65ac:	f8c5 8004 	str.w	r8, [r5, #4]
    65b0:	4650      	mov	r0, sl
    65b2:	f01e fbb0 	bl	24d16 <net_buf_simple_add>
	hdr->param_len = param_len;
    65b6:	7087      	strb	r7, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    65b8:	8006      	strh	r6, [r0, #0]
}
    65ba:	4620      	mov	r0, r4
    65bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    65c0:	2000106c 	.word	0x2000106c
    65c4:	200022e8 	.word	0x200022e8

000065c8 <bt_hci_cmd_send>:
{
    65c8:	b538      	push	{r3, r4, r5, lr}
    65ca:	4605      	mov	r5, r0
	if (!buf) {
    65cc:	460c      	mov	r4, r1
    65ce:	b919      	cbnz	r1, 65d8 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    65d0:	f7ff ffc0 	bl	6554 <bt_hci_cmd_create>
		if (!buf) {
    65d4:	4604      	mov	r4, r0
    65d6:	b198      	cbz	r0, 6600 <bt_hci_cmd_send+0x38>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    65d8:	f640 4335 	movw	r3, #3125	; 0xc35
    65dc:	429d      	cmp	r5, r3
    65de:	d109      	bne.n	65f4 <bt_hci_cmd_send+0x2c>
		return bt_hci_ecc_send(buf);
    65e0:	4620      	mov	r0, r4
    65e2:	f7ff fd07 	bl	5ff4 <bt_hci_ecc_send>
		if (err) {
    65e6:	4605      	mov	r5, r0
    65e8:	b110      	cbz	r0, 65f0 <bt_hci_cmd_send+0x28>
			net_buf_unref(buf);
    65ea:	4620      	mov	r0, r4
    65ec:	f010 fd44 	bl	17078 <net_buf_unref>
}
    65f0:	4628      	mov	r0, r5
    65f2:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    65f4:	4804      	ldr	r0, [pc, #16]	; (6608 <bt_hci_cmd_send+0x40>)
    65f6:	4621      	mov	r1, r4
    65f8:	f01e fb48 	bl	24c8c <net_buf_put>
	return 0;
    65fc:	2500      	movs	r5, #0
    65fe:	e7f7      	b.n	65f0 <bt_hci_cmd_send+0x28>
			return -ENOBUFS;
    6600:	f06f 0568 	mvn.w	r5, #104	; 0x68
    6604:	e7f4      	b.n	65f0 <bt_hci_cmd_send+0x28>
    6606:	bf00      	nop
    6608:	200001b4 	.word	0x200001b4

0000660c <conn_auto_initiate>:
{
    660c:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    660e:	7a83      	ldrb	r3, [r0, #10]
    6610:	2b07      	cmp	r3, #7
{
    6612:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    6614:	d121      	bne.n	665a <conn_auto_initiate+0x4e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6616:	f3bf 8f5b 	dmb	ish
    661a:	6843      	ldr	r3, [r0, #4]
    661c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    6620:	049a      	lsls	r2, r3, #18
    6622:	d41a      	bmi.n	665a <conn_auto_initiate+0x4e>
    6624:	78c3      	ldrb	r3, [r0, #3]
    6626:	b123      	cbz	r3, 6632 <conn_auto_initiate+0x26>
	     BT_FEAT_LE_PER_INIT_FEAT_XCHG(bt_dev.le.features))) {
    6628:	4b0c      	ldr	r3, [pc, #48]	; (665c <conn_auto_initiate+0x50>)
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
    662a:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
    662e:	071b      	lsls	r3, r3, #28
    6630:	d513      	bpl.n	665a <conn_auto_initiate+0x4e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    6632:	2102      	movs	r1, #2
    6634:	f242 0016 	movw	r0, #8214	; 0x2016
    6638:	f7ff ff8c 	bl	6554 <bt_hci_cmd_create>
	if (!buf) {
    663c:	4605      	mov	r5, r0
    663e:	b160      	cbz	r0, 665a <conn_auto_initiate+0x4e>
    6640:	2102      	movs	r1, #2
    6642:	3008      	adds	r0, #8
    6644:	f01e fb67 	bl	24d16 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    6648:	8823      	ldrh	r3, [r4, #0]
    664a:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    664c:	4629      	mov	r1, r5
    664e:	f242 0016 	movw	r0, #8214	; 0x2016
}
    6652:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    6656:	f7ff bfb7 	b.w	65c8 <bt_hci_cmd_send>
}
    665a:	bd38      	pop	{r3, r4, r5, pc}
    665c:	20000080 	.word	0x20000080

00006660 <bt_hci_cmd_send_sync>:
{
    6660:	b5f0      	push	{r4, r5, r6, r7, lr}
    6662:	4615      	mov	r5, r2
    6664:	b087      	sub	sp, #28
	if (!buf) {
    6666:	460c      	mov	r4, r1
    6668:	b921      	cbnz	r1, 6674 <bt_hci_cmd_send_sync+0x14>
		buf = bt_hci_cmd_create(opcode, 0);
    666a:	f7ff ff73 	bl	6554 <bt_hci_cmd_create>
		if (!buf) {
    666e:	4604      	mov	r4, r0
    6670:	2800      	cmp	r0, #0
    6672:	d048      	beq.n	6706 <bt_hci_cmd_send_sync+0xa6>
	return z_impl_k_sem_init(sem, initial_count, limit);
    6674:	2201      	movs	r2, #1
    6676:	2100      	movs	r1, #0
    6678:	4668      	mov	r0, sp
    667a:	f01f fa53 	bl	25b24 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    667e:	4620      	mov	r0, r4
    6680:	f010 fc3e 	bl	16f00 <net_buf_id>
    6684:	4f21      	ldr	r7, [pc, #132]	; (670c <bt_hci_cmd_send_sync+0xac>)
    6686:	230c      	movs	r3, #12
    6688:	fb03 7000 	mla	r0, r3, r0, r7
    668c:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
    6690:	4620      	mov	r0, r4
    6692:	f01e fb08 	bl	24ca6 <net_buf_ref>
    6696:	4601      	mov	r1, r0
    6698:	481d      	ldr	r0, [pc, #116]	; (6710 <bt_hci_cmd_send_sync+0xb0>)
    669a:	f01e faf7 	bl	24c8c <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    669e:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    66a2:	2300      	movs	r3, #0
    66a4:	4668      	mov	r0, sp
    66a6:	f014 fe55 	bl	1b354 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    66aa:	4606      	mov	r6, r0
    66ac:	b180      	cbz	r0, 66d0 <bt_hci_cmd_send_sync+0x70>
    66ae:	4a19      	ldr	r2, [pc, #100]	; (6714 <bt_hci_cmd_send_sync+0xb4>)
    66b0:	4919      	ldr	r1, [pc, #100]	; (6718 <bt_hci_cmd_send_sync+0xb8>)
    66b2:	481a      	ldr	r0, [pc, #104]	; (671c <bt_hci_cmd_send_sync+0xbc>)
    66b4:	f240 1331 	movw	r3, #305	; 0x131
    66b8:	f015 fe06 	bl	1c2c8 <printk>
    66bc:	4818      	ldr	r0, [pc, #96]	; (6720 <bt_hci_cmd_send_sync+0xc0>)
    66be:	4631      	mov	r1, r6
    66c0:	f015 fe02 	bl	1c2c8 <printk>
    66c4:	4040      	eors	r0, r0
    66c6:	f380 8811 	msr	BASEPRI, r0
    66ca:	f04f 0003 	mov.w	r0, #3
    66ce:	df02      	svc	2
	status = cmd(buf)->status;
    66d0:	4620      	mov	r0, r4
    66d2:	f010 fc15 	bl	16f00 <net_buf_id>
    66d6:	230c      	movs	r3, #12
    66d8:	4358      	muls	r0, r3
    66da:	5c3e      	ldrb	r6, [r7, r0]
	if (status) {
    66dc:	b156      	cbz	r6, 66f4 <bt_hci_cmd_send_sync+0x94>
		net_buf_unref(buf);
    66de:	4620      	mov	r0, r4
    66e0:	f010 fcca 	bl	17078 <net_buf_unref>
			return -EIO;
    66e4:	2e09      	cmp	r6, #9
    66e6:	bf0c      	ite	eq
    66e8:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
    66ec:	f06f 0004 	mvnne.w	r0, #4
}
    66f0:	b007      	add	sp, #28
    66f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rsp) {
    66f4:	b115      	cbz	r5, 66fc <bt_hci_cmd_send_sync+0x9c>
		*rsp = buf;
    66f6:	602c      	str	r4, [r5, #0]
	return 0;
    66f8:	4630      	mov	r0, r6
    66fa:	e7f9      	b.n	66f0 <bt_hci_cmd_send_sync+0x90>
		net_buf_unref(buf);
    66fc:	4620      	mov	r0, r4
    66fe:	f010 fcbb 	bl	17078 <net_buf_unref>
	return 0;
    6702:	4628      	mov	r0, r5
    6704:	e7f4      	b.n	66f0 <bt_hci_cmd_send_sync+0x90>
			return -ENOBUFS;
    6706:	f06f 0068 	mvn.w	r0, #104	; 0x68
    670a:	e7f1      	b.n	66f0 <bt_hci_cmd_send_sync+0x90>
    670c:	200022e8 	.word	0x200022e8
    6710:	200001b4 	.word	0x200001b4
    6714:	000274d7 	.word	0x000274d7
    6718:	0002750b 	.word	0x0002750b
    671c:	00027514 	.word	0x00027514
    6720:	00027535 	.word	0x00027535

00006724 <bt_hci_le_enh_conn_complete>:
{
    6724:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    6728:	f8b0 7001 	ldrh.w	r7, [r0, #1]
		if (disconnected_handles[i] == handle) {
    672c:	4a68      	ldr	r2, [pc, #416]	; (68d0 <bt_hci_le_enh_conn_complete+0x1ac>)
	if (evt->status) {
    672e:	7804      	ldrb	r4, [r0, #0]
		if (disconnected_handles[i] == handle) {
    6730:	8811      	ldrh	r1, [r2, #0]
	handle |= ~BT_ACL_HANDLE_MASK;
    6732:	ea6f 5307 	mvn.w	r3, r7, lsl #20
    6736:	ea6f 5313 	mvn.w	r3, r3, lsr #20
		if (disconnected_handles[i] == handle) {
    673a:	b29b      	uxth	r3, r3
    673c:	4299      	cmp	r1, r3
    673e:	f04f 0600 	mov.w	r6, #0
			disconnected_handles[i] = 0;
    6742:	bf08      	it	eq
    6744:	8016      	strheq	r6, [r2, #0]
{
    6746:	b085      	sub	sp, #20
    6748:	4605      	mov	r5, r0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    674a:	fa1f f887 	uxth.w	r8, r7
			return true;
    674e:	bf08      	it	eq
    6750:	2601      	moveq	r6, #1
	if (evt->status) {
    6752:	b304      	cbz	r4, 6796 <bt_hci_le_enh_conn_complete+0x72>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    6754:	2c3c      	cmp	r4, #60	; 0x3c
    6756:	d159      	bne.n	680c <bt_hci_le_enh_conn_complete+0xe8>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    6758:	f000 fe94 	bl	7484 <bt_le_adv_lookup_legacy>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    675c:	f3bf 8f5b 	dmb	ish
    6760:	3010      	adds	r0, #16
    6762:	e850 3f00 	ldrex	r3, [r0]
    6766:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    676a:	e840 3200 	strex	r2, r3, [r0]
    676e:	2a00      	cmp	r2, #0
    6770:	d1f7      	bne.n	6762 <bt_hci_le_enh_conn_complete+0x3e>
    6772:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
    6776:	2000      	movs	r0, #0
    6778:	f7ff fd86 	bl	6288 <find_pending_connect.part.0>
		if (!conn) {
    677c:	4605      	mov	r5, r0
    677e:	2800      	cmp	r0, #0
    6780:	d044      	beq.n	680c <bt_hci_le_enh_conn_complete+0xe8>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
    6782:	7244      	strb	r4, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    6784:	2100      	movs	r1, #0
    6786:	f001 fc81 	bl	808c <bt_conn_set_state>
		bt_conn_unref(conn);
    678a:	4628      	mov	r0, r5
}
    678c:	b005      	add	sp, #20
    678e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		bt_conn_unref(conn);
    6792:	f018 bb55 	b.w	1ee40 <bt_conn_unref>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    6796:	7903      	ldrb	r3, [r0, #4]
    6798:	3b02      	subs	r3, #2
    679a:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    679c:	f100 0904 	add.w	r9, r0, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    67a0:	d837      	bhi.n	6812 <bt_hci_le_enh_conn_complete+0xee>
 *  @param dst Bluetooth LE device address destination buffer.
 *  @param src Bluetooth LE device address source buffer.
 */
static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    67a2:	2207      	movs	r2, #7
    67a4:	4649      	mov	r1, r9
    67a6:	a802      	add	r0, sp, #8
    67a8:	f017 fc43 	bl	1e032 <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    67ac:	f89d 3008 	ldrb.w	r3, [sp, #8]
	memcpy(dst, src, sizeof(*dst));
    67b0:	2206      	movs	r2, #6
    67b2:	3b02      	subs	r3, #2
    67b4:	f105 0111 	add.w	r1, r5, #17
    67b8:	f10d 0001 	add.w	r0, sp, #1
    67bc:	f88d 3008 	strb.w	r3, [sp, #8]
    67c0:	f017 fc37 	bl	1e032 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    67c4:	2301      	movs	r3, #1
    67c6:	f88d 3000 	strb.w	r3, [sp]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
    67ca:	78eb      	ldrb	r3, [r5, #3]
    67cc:	2b01      	cmp	r3, #1
    67ce:	d119      	bne.n	6804 <bt_hci_le_enh_conn_complete+0xe0>
    67d0:	a802      	add	r0, sp, #8
    67d2:	f7ff fd59 	bl	6288 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    67d6:	78eb      	ldrb	r3, [r5, #3]
    67d8:	2b01      	cmp	r3, #1
    67da:	4604      	mov	r4, r0
    67dc:	d111      	bne.n	6802 <bt_hci_le_enh_conn_complete+0xde>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    67de:	f000 fe51 	bl	7484 <bt_le_adv_lookup_legacy>
    67e2:	f3bf 8f5b 	dmb	ish
    67e6:	f100 0310 	add.w	r3, r0, #16
    67ea:	e853 2f00 	ldrex	r2, [r3]
    67ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    67f2:	e843 2100 	strex	r1, r2, [r3]
    67f6:	2900      	cmp	r1, #0
    67f8:	d1f7      	bne.n	67ea <bt_hci_le_enh_conn_complete+0xc6>
    67fa:	f3bf 8f5b 	dmb	ish
		(void)bt_le_lim_adv_cancel_timeout(adv);
    67fe:	f018 fa54 	bl	1ecaa <bt_le_lim_adv_cancel_timeout>
	if (!conn) {
    6802:	b9dc      	cbnz	r4, 683c <bt_hci_le_enh_conn_complete+0x118>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
    6804:	211f      	movs	r1, #31
    6806:	4640      	mov	r0, r8
    6808:	f018 f815 	bl	1e836 <bt_hci_disconnect>
}
    680c:	b005      	add	sp, #20
    680e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
    6812:	78c3      	ldrb	r3, [r0, #3]
    6814:	2b01      	cmp	r3, #1
    6816:	bf04      	itt	eq
    6818:	4b2e      	ldreq	r3, [pc, #184]	; (68d4 <bt_hci_le_enh_conn_complete+0x1b0>)
    681a:	f893 4067 	ldrbeq.w	r4, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
    681e:	4649      	mov	r1, r9
    6820:	4620      	mov	r0, r4
    6822:	f018 f8cb 	bl	1e9bc <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
    6826:	2207      	movs	r2, #7
    6828:	4601      	mov	r1, r0
    682a:	a802      	add	r0, sp, #8
    682c:	f017 fc01 	bl	1e032 <memcpy>
    6830:	2207      	movs	r2, #7
    6832:	4649      	mov	r1, r9
    6834:	4668      	mov	r0, sp
    6836:	f017 fbfc 	bl	1e032 <memcpy>
}
    683a:	e7c6      	b.n	67ca <bt_hci_le_enh_conn_complete+0xa6>
	conn->handle = handle;
    683c:	4620      	mov	r0, r4
	memcpy(dst, src, sizeof(*dst));
    683e:	2207      	movs	r2, #7
    6840:	f820 7b88 	strh.w	r7, [r0], #136
    6844:	a902      	add	r1, sp, #8
    6846:	f017 fbf4 	bl	1e032 <memcpy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    684a:	7e2a      	ldrb	r2, [r5, #24]
    684c:	7deb      	ldrb	r3, [r5, #23]
    684e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    6852:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    6856:	7eaa      	ldrb	r2, [r5, #26]
    6858:	7e6b      	ldrb	r3, [r5, #25]
    685a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    685e:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    6862:	7f2a      	ldrb	r2, [r5, #28]
    6864:	7eeb      	ldrb	r3, [r5, #27]
    6866:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    686a:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
    686e:	78eb      	ldrb	r3, [r5, #3]
    6870:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
    6872:	2200      	movs	r2, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    6874:	2b01      	cmp	r3, #1
	conn->err = 0U;
    6876:	7262      	strb	r2, [r4, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    6878:	d117      	bne.n	68aa <bt_hci_le_enh_conn_complete+0x186>
    687a:	2207      	movs	r2, #7
    687c:	4669      	mov	r1, sp
    687e:	f104 008f 	add.w	r0, r4, #143	; 0x8f
    6882:	f017 fbd6 	bl	1e032 <memcpy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    6886:	f000 fdfd 	bl	7484 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
    688a:	7a21      	ldrb	r1, [r4, #8]
    688c:	4d11      	ldr	r5, [pc, #68]	; (68d4 <bt_hci_le_enh_conn_complete+0x1b0>)
    688e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    6892:	2207      	movs	r2, #7
    6894:	4429      	add	r1, r5
    6896:	f104 0096 	add.w	r0, r4, #150	; 0x96
    689a:	f017 fbca 	bl	1e032 <memcpy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
    689e:	f8d5 30dc 	ldr.w	r3, [r5, #220]	; 0xdc
    68a2:	065b      	lsls	r3, r3, #25
    68a4:	d501      	bpl.n	68aa <bt_hci_le_enh_conn_complete+0x186>
			bt_le_adv_resume();
    68a6:	f000 ffa9 	bl	77fc <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    68aa:	2107      	movs	r1, #7
    68ac:	4620      	mov	r0, r4
    68ae:	f001 fbed 	bl	808c <bt_conn_set_state>
	if (is_disconnected) {
    68b2:	b11e      	cbz	r6, 68bc <bt_hci_le_enh_conn_complete+0x198>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    68b4:	2101      	movs	r1, #1
    68b6:	4620      	mov	r0, r4
    68b8:	f001 fbe8 	bl	808c <bt_conn_set_state>
	bt_conn_connected(conn);
    68bc:	4620      	mov	r0, r4
    68be:	f018 fafb 	bl	1eeb8 <bt_conn_connected>
	conn_auto_initiate(conn);
    68c2:	4620      	mov	r0, r4
    68c4:	f7ff fea2 	bl	660c <conn_auto_initiate>
	bt_conn_unref(conn);
    68c8:	4620      	mov	r0, r4
    68ca:	f018 fab9 	bl	1ee40 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    68ce:	e79d      	b.n	680c <bt_hci_le_enh_conn_complete+0xe8>
    68d0:	20003f58 	.word	0x20003f58
    68d4:	20000080 	.word	0x20000080

000068d8 <hci_event_prio>:
		      sizeof(struct bt_hci_evt_num_completed_packets)),
#endif /* CONFIG_BT_CONN_TX */
};

void hci_event_prio(struct net_buf *buf)
{
    68d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    68dc:	4604      	mov	r4, r0
	struct net_buf_simple_state state;
	struct bt_hci_evt_hdr *hdr;
	uint8_t evt_flags;

	net_buf_simple_save(&buf->b, &state);
    68de:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
    68e2:	4630      	mov	r0, r6
    68e4:	f01e facd 	bl	24e82 <net_buf_simple_headroom>
	state->len = buf->len;
    68e8:	f8b4 800c 	ldrh.w	r8, [r4, #12]

	BT_ASSERT(buf->len >= sizeof(*hdr));
    68ec:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
    68f0:	4605      	mov	r5, r0
    68f2:	d80c      	bhi.n	690e <hci_event_prio+0x36>
    68f4:	4a1c      	ldr	r2, [pc, #112]	; (6968 <hci_event_prio+0x90>)
    68f6:	491d      	ldr	r1, [pc, #116]	; (696c <hci_event_prio+0x94>)
    68f8:	481d      	ldr	r0, [pc, #116]	; (6970 <hci_event_prio+0x98>)
    68fa:	f640 532f 	movw	r3, #3375	; 0xd2f
    68fe:	f015 fce3 	bl	1c2c8 <printk>
    6902:	4040      	eors	r0, r0
    6904:	f380 8811 	msr	BASEPRI, r0
    6908:	f04f 0003 	mov.w	r0, #3
    690c:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    690e:	4630      	mov	r0, r6
    6910:	2102      	movs	r1, #2
    6912:	f01e fa83 	bl	24e1c <net_buf_simple_pull_mem>
    6916:	4607      	mov	r7, r0

	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    6918:	7800      	ldrb	r0, [r0, #0]
    691a:	f017 fe0a 	bl	1e532 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    691e:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    6920:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    6922:	d40c      	bmi.n	693e <hci_event_prio+0x66>
    6924:	4a10      	ldr	r2, [pc, #64]	; (6968 <hci_event_prio+0x90>)
    6926:	4913      	ldr	r1, [pc, #76]	; (6974 <hci_event_prio+0x9c>)
    6928:	4811      	ldr	r0, [pc, #68]	; (6970 <hci_event_prio+0x98>)
    692a:	f640 5333 	movw	r3, #3379	; 0xd33
    692e:	f015 fccb 	bl	1c2c8 <printk>
    6932:	4040      	eors	r0, r0
    6934:	f380 8811 	msr	BASEPRI, r0
    6938:	f04f 0003 	mov.w	r0, #3
    693c:	df02      	svc	2

	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    693e:	2305      	movs	r3, #5
    6940:	4a0d      	ldr	r2, [pc, #52]	; (6978 <hci_event_prio+0xa0>)
    6942:	7838      	ldrb	r0, [r7, #0]
    6944:	4621      	mov	r1, r4
    6946:	f017 fe06 	bl	1e556 <handle_event>

	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    694a:	07b3      	lsls	r3, r6, #30
    694c:	d507      	bpl.n	695e <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
    694e:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    6950:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    6954:	fa10 f585 	uxtah	r5, r0, r5
    6958:	60a5      	str	r5, [r4, #8]
		net_buf_simple_restore(&buf->b, &state);
	} else {
		net_buf_unref(buf);
	}
}
    695a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
    695e:	4620      	mov	r0, r4
}
    6960:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    6964:	f010 bb88 	b.w	17078 <net_buf_unref>
    6968:	000274d7 	.word	0x000274d7
    696c:	00027555 	.word	0x00027555
    6970:	00027514 	.word	0x00027514
    6974:	0002756e 	.word	0x0002756e
    6978:	000269d4 	.word	0x000269d4

0000697c <bt_recv>:

k_tid_t bt_recv_thread_id;

int bt_recv(struct net_buf *buf)
{
    697c:	b570      	push	{r4, r5, r6, lr}
	if (bt_recv_thread_id == NULL) {
    697e:	4d3b      	ldr	r5, [pc, #236]	; (6a6c <bt_recv+0xf0>)
    6980:	682b      	ldr	r3, [r5, #0]
{
    6982:	4604      	mov	r4, r0
	if (bt_recv_thread_id == NULL) {
    6984:	b913      	cbnz	r3, 698c <bt_recv+0x10>
	return z_impl_z_current_get();
    6986:	f015 f9bd 	bl	1bd04 <z_impl_z_current_get>
		bt_recv_thread_id = k_current_get();
    698a:	6028      	str	r0, [r5, #0]
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    698c:	7d23      	ldrb	r3, [r4, #20]

	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	BT_DBG("buf %p len %u", buf, buf->len);

	switch (bt_buf_get_type(buf)) {
    698e:	2b01      	cmp	r3, #1
    6990:	d036      	beq.n	6a00 <bt_recv+0x84>
    6992:	2b03      	cmp	r3, #3
    6994:	d163      	bne.n	6a5e <bt_recv+0xe2>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    6996:	89a3      	ldrh	r3, [r4, #12]
    6998:	2b03      	cmp	r3, #3
    699a:	d80c      	bhi.n	69b6 <bt_recv+0x3a>
    699c:	4a34      	ldr	r2, [pc, #208]	; (6a70 <bt_recv+0xf4>)
    699e:	4935      	ldr	r1, [pc, #212]	; (6a74 <bt_recv+0xf8>)
    69a0:	4835      	ldr	r0, [pc, #212]	; (6a78 <bt_recv+0xfc>)
    69a2:	f240 13b5 	movw	r3, #437	; 0x1b5
    69a6:	f015 fc8f 	bl	1c2c8 <printk>
    69aa:	4040      	eors	r0, r0
    69ac:	f380 8811 	msr	BASEPRI, r0
    69b0:	f04f 0003 	mov.w	r0, #3
    69b4:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    69b6:	2104      	movs	r1, #4
    69b8:	f104 0008 	add.w	r0, r4, #8
    69bc:	f01e fa2e 	bl	24e1c <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    69c0:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
    69c2:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    69c4:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    69c6:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
    69c8:	89a2      	ldrh	r2, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
    69ca:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
    69ce:	429a      	cmp	r2, r3
	acl(buf)->handle = bt_acl_handle(handle);
    69d0:	82e0      	strh	r0, [r4, #22]
	if (buf->len != len) {
    69d2:	d003      	beq.n	69dc <bt_recv+0x60>
	net_buf_unref(buf);
    69d4:	4620      	mov	r0, r4
    69d6:	f010 fb4f 	bl	17078 <net_buf_unref>
    69da:	e00f      	b.n	69fc <bt_recv+0x80>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    69dc:	f001 fb4e 	bl	807c <bt_conn_lookup_handle>
	if (!conn) {
    69e0:	4605      	mov	r5, r0
    69e2:	2800      	cmp	r0, #0
    69e4:	d0f6      	beq.n	69d4 <bt_recv+0x58>
	acl(buf)->index = bt_conn_index(conn);
    69e6:	f001 fbf9 	bl	81dc <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    69ea:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
    69ec:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    69ee:	4621      	mov	r1, r4
    69f0:	4628      	mov	r0, r5
    69f2:	f018 f9bd 	bl	1ed70 <bt_conn_recv>
	bt_conn_unref(conn);
    69f6:	4628      	mov	r0, r5
    69f8:	f018 fa22 	bl	1ee40 <bt_conn_unref>

		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
			net_buf_put(&bt_dev.rx_queue, buf);
		}
#endif
		return 0;
    69fc:	2000      	movs	r0, #0
	default:
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
		net_buf_unref(buf);
		return -EINVAL;
	}
}
    69fe:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    6a00:	89a3      	ldrh	r3, [r4, #12]
    6a02:	2b01      	cmp	r3, #1
    6a04:	d80c      	bhi.n	6a20 <bt_recv+0xa4>
    6a06:	4a1a      	ldr	r2, [pc, #104]	; (6a70 <bt_recv+0xf4>)
    6a08:	491a      	ldr	r1, [pc, #104]	; (6a74 <bt_recv+0xf8>)
    6a0a:	481b      	ldr	r0, [pc, #108]	; (6a78 <bt_recv+0xfc>)
    6a0c:	f640 1317 	movw	r3, #2327	; 0x917
    6a10:	f015 fc5a 	bl	1c2c8 <printk>
    6a14:	4040      	eors	r0, r0
    6a16:	f380 8811 	msr	BASEPRI, r0
    6a1a:	f04f 0003 	mov.w	r0, #3
    6a1e:	df02      	svc	2
    6a20:	2102      	movs	r1, #2
    6a22:	f104 0008 	add.w	r0, r4, #8
    6a26:	f01e f9f9 	bl	24e1c <net_buf_simple_pull_mem>
    6a2a:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    6a2c:	7800      	ldrb	r0, [r0, #0]
    6a2e:	f017 fd80 	bl	1e532 <bt_hci_evt_get_flags>
    6a32:	0783      	lsls	r3, r0, #30
    6a34:	d40c      	bmi.n	6a50 <bt_recv+0xd4>
    6a36:	4a0e      	ldr	r2, [pc, #56]	; (6a70 <bt_recv+0xf4>)
    6a38:	4910      	ldr	r1, [pc, #64]	; (6a7c <bt_recv+0x100>)
    6a3a:	480f      	ldr	r0, [pc, #60]	; (6a78 <bt_recv+0xfc>)
    6a3c:	f640 131b 	movw	r3, #2331	; 0x91b
    6a40:	f015 fc42 	bl	1c2c8 <printk>
    6a44:	4040      	eors	r0, r0
    6a46:	f380 8811 	msr	BASEPRI, r0
    6a4a:	f04f 0003 	mov.w	r0, #3
    6a4e:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    6a50:	4a0b      	ldr	r2, [pc, #44]	; (6a80 <bt_recv+0x104>)
    6a52:	7828      	ldrb	r0, [r5, #0]
    6a54:	2304      	movs	r3, #4
    6a56:	4621      	mov	r1, r4
    6a58:	f017 fd7d 	bl	1e556 <handle_event>
    6a5c:	e7ba      	b.n	69d4 <bt_recv+0x58>
		net_buf_unref(buf);
    6a5e:	4620      	mov	r0, r4
    6a60:	f010 fb0a 	bl	17078 <net_buf_unref>
		return -EINVAL;
    6a64:	f06f 0015 	mvn.w	r0, #21
    6a68:	e7c9      	b.n	69fe <bt_recv+0x82>
    6a6a:	bf00      	nop
    6a6c:	200022e4 	.word	0x200022e4
    6a70:	000274d7 	.word	0x000274d7
    6a74:	00027555 	.word	0x00027555
    6a78:	00027514 	.word	0x00027514
    6a7c:	00027587 	.word	0x00027587
    6a80:	000269b4 	.word	0x000269b4

00006a84 <bt_recv_prio>:

#if defined(CONFIG_BT_RECV_IS_RX_THREAD)
int bt_recv_prio(struct net_buf *buf)
{
    6a84:	b510      	push	{r4, lr}
	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    6a86:	7d03      	ldrb	r3, [r0, #20]
    6a88:	2b01      	cmp	r3, #1
{
    6a8a:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    6a8c:	d00c      	beq.n	6aa8 <bt_recv_prio+0x24>
    6a8e:	4a09      	ldr	r2, [pc, #36]	; (6ab4 <bt_recv_prio+0x30>)
    6a90:	4909      	ldr	r1, [pc, #36]	; (6ab8 <bt_recv_prio+0x34>)
    6a92:	480a      	ldr	r0, [pc, #40]	; (6abc <bt_recv_prio+0x38>)
    6a94:	f640 537c 	movw	r3, #3452	; 0xd7c
    6a98:	f015 fc16 	bl	1c2c8 <printk>
    6a9c:	4040      	eors	r0, r0
    6a9e:	f380 8811 	msr	BASEPRI, r0
    6aa2:	f04f 0003 	mov.w	r0, #3
    6aa6:	df02      	svc	2

	hci_event_prio(buf);
    6aa8:	4620      	mov	r0, r4
    6aaa:	f7ff ff15 	bl	68d8 <hci_event_prio>

	return 0;
}
    6aae:	2000      	movs	r0, #0
    6ab0:	bd10      	pop	{r4, pc}
    6ab2:	bf00      	nop
    6ab4:	000274d7 	.word	0x000274d7
    6ab8:	000275b5 	.word	0x000275b5
    6abc:	00027514 	.word	0x00027514

00006ac0 <bt_hci_driver_register>:
#endif /* defined(CONFIG_BT_RECV_IS_RX_THREAD) */

int bt_hci_driver_register(const struct bt_hci_driver *drv)
{
	if (bt_dev.drv) {
    6ac0:	4a08      	ldr	r2, [pc, #32]	; (6ae4 <bt_hci_driver_register+0x24>)
{
    6ac2:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    6ac4:	f8d2 014c 	ldr.w	r0, [r2, #332]	; 0x14c
    6ac8:	b930      	cbnz	r0, 6ad8 <bt_hci_driver_register+0x18>
		return -EALREADY;
	}

	if (!drv->open || !drv->send) {
    6aca:	68d9      	ldr	r1, [r3, #12]
    6acc:	b139      	cbz	r1, 6ade <bt_hci_driver_register+0x1e>
    6ace:	6919      	ldr	r1, [r3, #16]
    6ad0:	b129      	cbz	r1, 6ade <bt_hci_driver_register+0x1e>
		return -EINVAL;
	}

	bt_dev.drv = drv;
    6ad2:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
	BT_DBG("Registered %s", drv->name ? drv->name : "");

	bt_monitor_new_index(BT_MONITOR_TYPE_PRIMARY, drv->bus,
			     BT_ADDR_ANY, drv->name ? drv->name : "bt0");

	return 0;
    6ad6:	4770      	bx	lr
		return -EALREADY;
    6ad8:	f06f 0077 	mvn.w	r0, #119	; 0x77
    6adc:	4770      	bx	lr
		return -EINVAL;
    6ade:	f06f 0015 	mvn.w	r0, #21
}
    6ae2:	4770      	bx	lr
    6ae4:	20000080 	.word	0x20000080

00006ae8 <bt_finalize_init>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6ae8:	4b07      	ldr	r3, [pc, #28]	; (6b08 <bt_finalize_init+0x20>)
    6aea:	f3bf 8f5b 	dmb	ish
    6aee:	e853 2f00 	ldrex	r2, [r3]
    6af2:	f042 0202 	orr.w	r2, r2, #2
    6af6:	e843 2100 	strex	r1, r2, [r3]
    6afa:	2900      	cmp	r1, #0
    6afc:	d1f7      	bne.n	6aee <bt_finalize_init+0x6>
    6afe:	f3bf 8f5b 	dmb	ish
void bt_finalize_init(void)
{
	atomic_set_bit(bt_dev.flags, BT_DEV_READY);

	if (IS_ENABLED(CONFIG_BT_OBSERVER)) {
		bt_le_scan_update(false);
    6b02:	2000      	movs	r0, #0
    6b04:	f000 bef4 	b.w	78f0 <bt_le_scan_update>
    6b08:	2000014c 	.word	0x2000014c

00006b0c <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
    6b0c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    6b0e:	4dbb      	ldr	r5, [pc, #748]	; (6dfc <bt_init+0x2f0>)
    6b10:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
    6b14:	6899      	ldr	r1, [r3, #8]
    6b16:	f011 0101 	ands.w	r1, r1, #1
    6b1a:	d123      	bne.n	6b64 <bt_init+0x58>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    6b1c:	aa01      	add	r2, sp, #4
    6b1e:	f640 4003 	movw	r0, #3075	; 0xc03
    6b22:	f7ff fd9d 	bl	6660 <bt_hci_cmd_send_sync>
		if (err) {
    6b26:	4604      	mov	r4, r0
    6b28:	2800      	cmp	r0, #0
    6b2a:	d16e      	bne.n	6c0a <bt_init+0xfe>
	uint8_t status = buf->data[0];
    6b2c:	9b01      	ldr	r3, [sp, #4]
    6b2e:	689b      	ldr	r3, [r3, #8]
	if (status) {
    6b30:	781b      	ldrb	r3, [r3, #0]
    6b32:	b9a3      	cbnz	r3, 6b5e <bt_init+0x52>
		bt_scan_reset();
    6b34:	f000 fed6 	bl	78e4 <bt_scan_reset>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6b38:	f3bf 8f5b 	dmb	ish
    6b3c:	462b      	mov	r3, r5
    6b3e:	f853 2fcc 	ldr.w	r2, [r3, #204]!
    6b42:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    6b46:	f002 0205 	and.w	r2, r2, #5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    6b4a:	f3bf 8f5b 	dmb	ish
    6b4e:	e853 1f00 	ldrex	r1, [r3]
    6b52:	e843 2000 	strex	r0, r2, [r3]
    6b56:	2800      	cmp	r0, #0
    6b58:	d1f9      	bne.n	6b4e <bt_init+0x42>
    6b5a:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    6b5e:	9801      	ldr	r0, [sp, #4]
    6b60:	f010 fa8a 	bl	17078 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    6b64:	aa01      	add	r2, sp, #4
    6b66:	2100      	movs	r1, #0
    6b68:	f241 0003 	movw	r0, #4099	; 0x1003
    6b6c:	f7ff fd78 	bl	6660 <bt_hci_cmd_send_sync>
	if (err) {
    6b70:	4604      	mov	r4, r0
    6b72:	2800      	cmp	r0, #0
    6b74:	d149      	bne.n	6c0a <bt_init+0xfe>
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
    6b76:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    6b78:	48a1      	ldr	r0, [pc, #644]	; (6e00 <bt_init+0x2f4>)
    6b7a:	6899      	ldr	r1, [r3, #8]
    6b7c:	2208      	movs	r2, #8
    6b7e:	3101      	adds	r1, #1
    6b80:	f017 fa57 	bl	1e032 <memcpy>
	net_buf_unref(rsp);
    6b84:	9801      	ldr	r0, [sp, #4]
    6b86:	f010 fa77 	bl	17078 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    6b8a:	4621      	mov	r1, r4
    6b8c:	aa01      	add	r2, sp, #4
    6b8e:	f241 0001 	movw	r0, #4097	; 0x1001
    6b92:	f7ff fd65 	bl	6660 <bt_hci_cmd_send_sync>
	if (err) {
    6b96:	4604      	mov	r4, r0
    6b98:	2800      	cmp	r0, #0
    6b9a:	d136      	bne.n	6c0a <bt_init+0xfe>
	read_local_ver_complete(rsp);
    6b9c:	9801      	ldr	r0, [sp, #4]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
    6b9e:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    6ba0:	785a      	ldrb	r2, [r3, #1]
    6ba2:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    6ba6:	78d9      	ldrb	r1, [r3, #3]
    6ba8:	789a      	ldrb	r2, [r3, #2]
    6baa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    6bae:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
    6bb2:	791a      	ldrb	r2, [r3, #4]
    6bb4:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    6bb8:	7a19      	ldrb	r1, [r3, #8]
    6bba:	79da      	ldrb	r2, [r3, #7]
    6bbc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    6bc0:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    6bc4:	795a      	ldrb	r2, [r3, #5]
    6bc6:	799b      	ldrb	r3, [r3, #6]
    6bc8:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    6bcc:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
    6bd0:	f010 fa52 	bl	17078 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    6bd4:	4621      	mov	r1, r4
    6bd6:	aa01      	add	r2, sp, #4
    6bd8:	f241 0002 	movw	r0, #4098	; 0x1002
    6bdc:	f7ff fd40 	bl	6660 <bt_hci_cmd_send_sync>
	if (err) {
    6be0:	4604      	mov	r4, r0
    6be2:	b990      	cbnz	r0, 6c0a <bt_init+0xfe>
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
    6be4:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
    6be6:	4887      	ldr	r0, [pc, #540]	; (6e04 <bt_init+0x2f8>)
    6be8:	6899      	ldr	r1, [r3, #8]
    6bea:	2240      	movs	r2, #64	; 0x40
    6bec:	3101      	adds	r1, #1
    6bee:	f017 fa20 	bl	1e032 <memcpy>
		bt_hci_ecc_supported_commands(bt_dev.supported_commands);
    6bf2:	4884      	ldr	r0, [pc, #528]	; (6e04 <bt_init+0x2f8>)
    6bf4:	f017 fa80 	bl	1e0f8 <bt_hci_ecc_supported_commands>
	net_buf_unref(rsp);
    6bf8:	9801      	ldr	r0, [sp, #4]
    6bfa:	f010 fa3d 	bl	17078 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    6bfe:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    6c02:	0658      	lsls	r0, r3, #25
    6c04:	d404      	bmi.n	6c10 <bt_init+0x104>
		return -ENODEV;
    6c06:	f06f 0412 	mvn.w	r4, #18
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
    6c0a:	4620      	mov	r0, r4
    6c0c:	b002      	add	sp, #8
    6c0e:	bd70      	pop	{r4, r5, r6, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    6c10:	4621      	mov	r1, r4
    6c12:	aa01      	add	r2, sp, #4
    6c14:	f242 0003 	movw	r0, #8195	; 0x2003
    6c18:	f7ff fd22 	bl	6660 <bt_hci_cmd_send_sync>
	if (err) {
    6c1c:	4604      	mov	r4, r0
    6c1e:	2800      	cmp	r0, #0
    6c20:	d1f3      	bne.n	6c0a <bt_init+0xfe>
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
    6c22:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    6c24:	4878      	ldr	r0, [pc, #480]	; (6e08 <bt_init+0x2fc>)
    6c26:	6899      	ldr	r1, [r3, #8]
    6c28:	2208      	movs	r2, #8
    6c2a:	3101      	adds	r1, #1
    6c2c:	f017 fa01 	bl	1e032 <memcpy>
	net_buf_unref(rsp);
    6c30:	9801      	ldr	r0, [sp, #4]
    6c32:	f010 fa21 	bl	17078 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    6c36:	4621      	mov	r1, r4
    6c38:	aa01      	add	r2, sp, #4
    6c3a:	f242 0002 	movw	r0, #8194	; 0x2002
    6c3e:	f7ff fd0f 	bl	6660 <bt_hci_cmd_send_sync>
		if (err) {
    6c42:	4604      	mov	r4, r0
    6c44:	2800      	cmp	r0, #0
    6c46:	d1e0      	bne.n	6c0a <bt_init+0xfe>
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
    6c48:	9b01      	ldr	r3, [sp, #4]
    6c4a:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    6c4c:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    6c50:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
    6c54:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
    6c56:	b121      	cbz	r1, 6c62 <bt_init+0x156>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    6c58:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
    6c5a:	486c      	ldr	r0, [pc, #432]	; (6e0c <bt_init+0x300>)
    6c5c:	4611      	mov	r1, r2
    6c5e:	f01e ff61 	bl	25b24 <z_impl_k_sem_init>
		net_buf_unref(rsp);
    6c62:	9801      	ldr	r0, [sp, #4]
    6c64:	f010 fa08 	bl	17078 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    6c68:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
    6c6c:	f016 0620 	ands.w	r6, r6, #32
    6c70:	f000 80b9 	beq.w	6de6 <bt_init+0x2da>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    6c74:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
    6c78:	0719      	lsls	r1, r3, #28
    6c7a:	f100 80df 	bmi.w	6e3c <bt_init+0x330>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    6c7e:	2108      	movs	r1, #8
    6c80:	f242 0001 	movw	r0, #8193	; 0x2001
    6c84:	f7ff fc66 	bl	6554 <bt_hci_cmd_create>
	if (!buf) {
    6c88:	4604      	mov	r4, r0
    6c8a:	2800      	cmp	r0, #0
    6c8c:	f000 80b2 	beq.w	6df4 <bt_init+0x2e8>
	return net_buf_simple_add(&buf->b, len);
    6c90:	2108      	movs	r1, #8
    6c92:	4408      	add	r0, r1
    6c94:	f01e f83f 	bl	24d16 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    6c98:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    6c9c:	f895 209a 	ldrb.w	r2, [r5, #154]	; 0x9a
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    6ca0:	f013 0f02 	tst.w	r3, #2
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    6ca4:	f002 0206 	and.w	r2, r2, #6
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    6ca8:	bf0c      	ite	eq
    6caa:	230f      	moveq	r3, #15
    6cac:	232f      	movne	r3, #47	; 0x2f
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    6cae:	2a06      	cmp	r2, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    6cb0:	bf08      	it	eq
    6cb2:	f443 73c0 	orreq.w	r3, r3, #384	; 0x180
	dst[0] = val;
    6cb6:	2200      	movs	r2, #0
    6cb8:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    6cba:	0a1b      	lsrs	r3, r3, #8
    6cbc:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
    6cbe:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    6cc0:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    6cc2:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    6cc4:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    6cc6:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    6cc8:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    6cca:	4621      	mov	r1, r4
    6ccc:	f242 0001 	movw	r0, #8193	; 0x2001
    6cd0:	f7ff fcc6 	bl	6660 <bt_hci_cmd_send_sync>
	if (err) {
    6cd4:	4604      	mov	r4, r0
    6cd6:	2800      	cmp	r0, #0
    6cd8:	d197      	bne.n	6c0a <bt_init+0xfe>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    6cda:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
	if (bt_dev.le.acl_mtu) {
    6cde:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
	if (BT_FEAT_BREDR(bt_dev.features)) {
    6ce2:	069a      	lsls	r2, r3, #26
    6ce4:	f100 80bf 	bmi.w	6e66 <bt_init+0x35a>
	if (bt_dev.le.acl_mtu) {
    6ce8:	b9d1      	cbnz	r1, 6d20 <bt_init+0x214>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    6cea:	aa01      	add	r2, sp, #4
    6cec:	f241 0005 	movw	r0, #4101	; 0x1005
    6cf0:	f7ff fcb6 	bl	6660 <bt_hci_cmd_send_sync>
	if (err) {
    6cf4:	4604      	mov	r4, r0
    6cf6:	2800      	cmp	r0, #0
    6cf8:	d187      	bne.n	6c0a <bt_init+0xfe>
	if (bt_dev.le.acl_mtu) {
    6cfa:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
    6cfe:	b963      	cbnz	r3, 6d1a <bt_init+0x20e>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
    6d00:	9b01      	ldr	r3, [sp, #4]
    6d02:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    6d04:	785a      	ldrb	r2, [r3, #1]
    6d06:	7899      	ldrb	r1, [r3, #2]
    6d08:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    6d0c:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    6d10:	889a      	ldrh	r2, [r3, #4]
    6d12:	483e      	ldr	r0, [pc, #248]	; (6e0c <bt_init+0x300>)
    6d14:	4611      	mov	r1, r2
    6d16:	f01e ff05 	bl	25b24 <z_impl_k_sem_init>
	net_buf_unref(rsp);
    6d1a:	9801      	ldr	r0, [sp, #4]
    6d1c:	f010 f9ac 	bl	17078 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    6d20:	2108      	movs	r1, #8
    6d22:	f640 4001 	movw	r0, #3073	; 0xc01
    6d26:	f7ff fc15 	bl	6554 <bt_hci_cmd_create>
	if (!buf) {
    6d2a:	4604      	mov	r4, r0
    6d2c:	2800      	cmp	r0, #0
    6d2e:	d061      	beq.n	6df4 <bt_init+0x2e8>
    6d30:	2108      	movs	r1, #8
    6d32:	4408      	add	r0, r1
    6d34:	f01d ffef 	bl	24d16 <net_buf_simple_add>
	dst[0] = val;
    6d38:	2310      	movs	r3, #16
    6d3a:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    6d3c:	2388      	movs	r3, #136	; 0x88
	dst[0] = val;
    6d3e:	2200      	movs	r2, #0
	dst[1] = val >> 8;
    6d40:	7043      	strb	r3, [r0, #1]
    6d42:	2602      	movs	r6, #2
    6d44:	2320      	movs	r3, #32
	dst[0] = val;
    6d46:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    6d48:	70c6      	strb	r6, [r0, #3]
	dst[0] = val;
    6d4a:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    6d4c:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    6d4e:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    6d50:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    6d52:	4621      	mov	r1, r4
    6d54:	f640 4001 	movw	r0, #3073	; 0xc01
    6d58:	f7ff fc82 	bl	6660 <bt_hci_cmd_send_sync>
	if (err) {
    6d5c:	4604      	mov	r4, r0
    6d5e:	2800      	cmp	r0, #0
    6d60:	f47f af53 	bne.w	6c0a <bt_init+0xfe>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    6d64:	4601      	mov	r1, r0
    6d66:	aa01      	add	r2, sp, #4
    6d68:	f64f 4001 	movw	r0, #64513	; 0xfc01
    6d6c:	f7ff fc78 	bl	6660 <bt_hci_cmd_send_sync>
	if (err) {
    6d70:	4604      	mov	r4, r0
    6d72:	bb48      	cbnz	r0, 6dc8 <bt_init+0x2bc>
	net_buf_unref(rsp);
    6d74:	9801      	ldr	r0, [sp, #4]
    6d76:	f010 f97f 	bl	17078 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    6d7a:	4621      	mov	r1, r4
    6d7c:	aa01      	add	r2, sp, #4
    6d7e:	f64f 4002 	movw	r0, #64514	; 0xfc02
    6d82:	f7ff fc6d 	bl	6660 <bt_hci_cmd_send_sync>
	if (err) {
    6d86:	4604      	mov	r4, r0
    6d88:	b9f0      	cbnz	r0, 6dc8 <bt_init+0x2bc>
	rp.cmds = (void *)rsp->data;
    6d8a:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    6d8c:	4820      	ldr	r0, [pc, #128]	; (6e10 <bt_init+0x304>)
    6d8e:	6899      	ldr	r1, [r3, #8]
    6d90:	4632      	mov	r2, r6
    6d92:	3101      	adds	r1, #1
    6d94:	f017 f94d 	bl	1e032 <memcpy>
	net_buf_unref(rsp);
    6d98:	9801      	ldr	r0, [sp, #4]
    6d9a:	f010 f96d 	bl	17078 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    6d9e:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
    6da2:	075b      	lsls	r3, r3, #29
    6da4:	d510      	bpl.n	6dc8 <bt_init+0x2bc>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    6da6:	aa01      	add	r2, sp, #4
    6da8:	4621      	mov	r1, r4
    6daa:	f64f 4003 	movw	r0, #64515	; 0xfc03
    6dae:	f7ff fc57 	bl	6660 <bt_hci_cmd_send_sync>
		if (err) {
    6db2:	b948      	cbnz	r0, 6dc8 <bt_init+0x2bc>
		rp.feat = (void *)rsp->data;
    6db4:	9b01      	ldr	r3, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
    6db6:	4817      	ldr	r0, [pc, #92]	; (6e14 <bt_init+0x308>)
    6db8:	6899      	ldr	r1, [r3, #8]
    6dba:	2201      	movs	r2, #1
    6dbc:	4411      	add	r1, r2
    6dbe:	f017 f938 	bl	1e032 <memcpy>
		net_buf_unref(rsp);
    6dc2:	9801      	ldr	r0, [sp, #4]
    6dc4:	f010 f958 	bl	17078 <net_buf_unref>
	err = bt_id_init();
    6dc8:	f000 fabc 	bl	7344 <bt_id_init>
	if (err) {
    6dcc:	4604      	mov	r4, r0
    6dce:	2800      	cmp	r0, #0
    6dd0:	f47f af1b 	bne.w	6c0a <bt_init+0xfe>
		err = bt_conn_init();
    6dd4:	f001 fc70 	bl	86b8 <bt_conn_init>
		if (err) {
    6dd8:	4604      	mov	r4, r0
    6dda:	2800      	cmp	r0, #0
    6ddc:	f47f af15 	bne.w	6c0a <bt_init+0xfe>
	bt_finalize_init();
    6de0:	f7ff fe82 	bl	6ae8 <bt_finalize_init>
	return 0;
    6de4:	e711      	b.n	6c0a <bt_init+0xfe>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    6de6:	2102      	movs	r1, #2
    6de8:	f640 406d 	movw	r0, #3181	; 0xc6d
    6dec:	f7ff fbb2 	bl	6554 <bt_hci_cmd_create>
		if (!buf) {
    6df0:	4604      	mov	r4, r0
    6df2:	b988      	cbnz	r0, 6e18 <bt_init+0x30c>
		return -ENOBUFS;
    6df4:	f06f 0468 	mvn.w	r4, #104	; 0x68
    6df8:	e707      	b.n	6c0a <bt_init+0xfe>
    6dfa:	bf00      	nop
    6dfc:	20000080 	.word	0x20000080
    6e00:	200000f0 	.word	0x200000f0
    6e04:	200000f8 	.word	0x200000f8
    6e08:	20000150 	.word	0x20000150
    6e0c:	20000180 	.word	0x20000180
    6e10:	20000139 	.word	0x20000139
    6e14:	20000138 	.word	0x20000138
    6e18:	2102      	movs	r1, #2
    6e1a:	3008      	adds	r0, #8
    6e1c:	f01d ff7b 	bl	24d16 <net_buf_simple_add>
		cp_le->le = 0x01;
    6e20:	2301      	movs	r3, #1
    6e22:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    6e24:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    6e26:	4621      	mov	r1, r4
    6e28:	4632      	mov	r2, r6
    6e2a:	f640 406d 	movw	r0, #3181	; 0xc6d
    6e2e:	f7ff fc17 	bl	6660 <bt_hci_cmd_send_sync>
		if (err) {
    6e32:	4604      	mov	r4, r0
    6e34:	2800      	cmp	r0, #0
    6e36:	f43f af1d 	beq.w	6c74 <bt_init+0x168>
    6e3a:	e6e6      	b.n	6c0a <bt_init+0xfe>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    6e3c:	aa01      	add	r2, sp, #4
    6e3e:	2100      	movs	r1, #0
    6e40:	f242 001c 	movw	r0, #8220	; 0x201c
    6e44:	f7ff fc0c 	bl	6660 <bt_hci_cmd_send_sync>
		if (err) {
    6e48:	4604      	mov	r4, r0
    6e4a:	2800      	cmp	r0, #0
    6e4c:	f47f aedd 	bne.w	6c0a <bt_init+0xfe>
		le_read_supp_states_complete(rsp);
    6e50:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    6e52:	6883      	ldr	r3, [r0, #8]
    6e54:	f8d3 2001 	ldr.w	r2, [r3, #1]
    6e58:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    6e5c:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
    6e60:	f010 f90a 	bl	17078 <net_buf_unref>
    6e64:	e70b      	b.n	6c7e <bt_init+0x172>
	else if (!bt_dev.le.acl_mtu) {
    6e66:	2900      	cmp	r1, #0
    6e68:	f47f af5a 	bne.w	6d20 <bt_init+0x214>
		return -EIO;
    6e6c:	f06f 0404 	mvn.w	r4, #4
    6e70:	e6cb      	b.n	6c0a <bt_init+0xfe>
    6e72:	bf00      	nop

00006e74 <init_work>:

static void init_work(struct k_work *work)
{
    6e74:	b510      	push	{r4, lr}
	int err;

	err = bt_init();
    6e76:	f7ff fe49 	bl	6b0c <bt_init>
	if (ready_cb) {
    6e7a:	4b03      	ldr	r3, [pc, #12]	; (6e88 <init_work+0x14>)
    6e7c:	681b      	ldr	r3, [r3, #0]
    6e7e:	b113      	cbz	r3, 6e86 <init_work+0x12>
		ready_cb(err);
	}
}
    6e80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    6e84:	4718      	bx	r3
}
    6e86:	bd10      	pop	{r4, pc}
    6e88:	20002300 	.word	0x20002300

00006e8c <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
    6e8c:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bt_dev.drv) {
    6e8e:	4d25      	ldr	r5, [pc, #148]	; (6f24 <bt_enable+0x98>)
    6e90:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
{
    6e94:	b088      	sub	sp, #32
    6e96:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    6e98:	2b00      	cmp	r3, #0
    6e9a:	d03d      	beq.n	6f18 <bt_enable+0x8c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6e9c:	f3bf 8f5b 	dmb	ish
    6ea0:	f105 02cc 	add.w	r2, r5, #204	; 0xcc
    6ea4:	e852 3f00 	ldrex	r3, [r2]
    6ea8:	f043 0101 	orr.w	r1, r3, #1
    6eac:	e842 1000 	strex	r0, r1, [r2]
    6eb0:	2800      	cmp	r0, #0
    6eb2:	d1f7      	bne.n	6ea4 <bt_enable+0x18>
    6eb4:	f3bf 8f5b 	dmb	ish
		BT_ERR("No HCI driver registered");
		return -ENODEV;
	}

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    6eb8:	f013 0301 	ands.w	r3, r3, #1
    6ebc:	d12f      	bne.n	6f1e <bt_enable+0x92>
		if (err) {
			BT_WARN("Failed to set device name (%d)", err);
		}
	}

	ready_cb = cb;
    6ebe:	4a1a      	ldr	r2, [pc, #104]	; (6f28 <bt_enable+0x9c>)
    6ec0:	6016      	str	r6, [r2, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    6ec2:	2000      	movs	r0, #0
    6ec4:	2100      	movs	r1, #0
    6ec6:	f06f 0208 	mvn.w	r2, #8
    6eca:	e9cd 0106 	strd	r0, r1, [sp, #24]
    6ece:	e9cd 3202 	strd	r3, r2, [sp, #8]
    6ed2:	e9cd 3300 	strd	r3, r3, [sp]
    6ed6:	9304      	str	r3, [sp, #16]
    6ed8:	4914      	ldr	r1, [pc, #80]	; (6f2c <bt_enable+0xa0>)
    6eda:	4b15      	ldr	r3, [pc, #84]	; (6f30 <bt_enable+0xa4>)
    6edc:	4815      	ldr	r0, [pc, #84]	; (6f34 <bt_enable+0xa8>)
    6ede:	f44f 7220 	mov.w	r2, #640	; 0x280
    6ee2:	f014 f87f 	bl	1afe4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    6ee6:	4914      	ldr	r1, [pc, #80]	; (6f38 <bt_enable+0xac>)
    6ee8:	4812      	ldr	r0, [pc, #72]	; (6f34 <bt_enable+0xa8>)
    6eea:	f01e fd13 	bl	25914 <z_impl_k_thread_name_set>
			0, K_NO_WAIT);
	k_thread_name_set(&rx_thread_data, "BT RX");
#endif

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		bt_hci_ecc_init();
    6eee:	f7ff f8ef 	bl	60d0 <bt_hci_ecc_init>
	}

	err = bt_dev.drv->open();
    6ef2:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
    6ef6:	68db      	ldr	r3, [r3, #12]
    6ef8:	4798      	blx	r3
	if (err) {
    6efa:	4604      	mov	r4, r0
    6efc:	b948      	cbnz	r0, 6f12 <bt_enable+0x86>
		return err;
	}

	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);

	if (!cb) {
    6efe:	b926      	cbnz	r6, 6f0a <bt_enable+0x7e>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
    6f00:	b008      	add	sp, #32
    6f02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
    6f06:	f7ff be01 	b.w	6b0c <bt_init>
	k_work_submit(&bt_dev.init);
    6f0a:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
    6f0e:	f014 fb67 	bl	1b5e0 <k_work_submit>
}
    6f12:	4620      	mov	r0, r4
    6f14:	b008      	add	sp, #32
    6f16:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
    6f18:	f06f 0412 	mvn.w	r4, #18
    6f1c:	e7f9      	b.n	6f12 <bt_enable+0x86>
		return -EALREADY;
    6f1e:	f06f 0477 	mvn.w	r4, #119	; 0x77
    6f22:	e7f6      	b.n	6f12 <bt_enable+0x86>
    6f24:	20000080 	.word	0x20000080
    6f28:	20002300 	.word	0x20002300
    6f2c:	20004a00 	.word	0x20004a00
    6f30:	000063fd 	.word	0x000063fd
    6f34:	20001328 	.word	0x20001328
    6f38:	000275d8 	.word	0x000275d8

00006f3c <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
    6f3c:	4800      	ldr	r0, [pc, #0]	; (6f40 <bt_get_name+0x4>)
    6f3e:	4770      	bx	lr
    6f40:	000275de 	.word	0x000275de

00006f44 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
    6f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    6f46:	4f0b      	ldr	r7, [pc, #44]	; (6f74 <id_find+0x30>)
{
    6f48:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
    6f4a:	2500      	movs	r5, #0
    6f4c:	79fb      	ldrb	r3, [r7, #7]
    6f4e:	b2ec      	uxtb	r4, r5
    6f50:	42a3      	cmp	r3, r4
    6f52:	d802      	bhi.n	6f5a <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    6f54:	f06f 0401 	mvn.w	r4, #1
    6f58:	e009      	b.n	6f6e <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    6f5a:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
    6f5e:	2207      	movs	r2, #7
    6f60:	4439      	add	r1, r7
    6f62:	4630      	mov	r0, r6
    6f64:	f017 f854 	bl	1e010 <memcmp>
    6f68:	3501      	adds	r5, #1
    6f6a:	2800      	cmp	r0, #0
    6f6c:	d1ee      	bne.n	6f4c <id_find+0x8>
}
    6f6e:	4620      	mov	r0, r4
    6f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6f72:	bf00      	nop
    6f74:	20000080 	.word	0x20000080

00006f78 <set_random_address>:
{
    6f78:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
    6f7a:	4914      	ldr	r1, [pc, #80]	; (6fcc <set_random_address+0x54>)
    6f7c:	2206      	movs	r2, #6
    6f7e:	4605      	mov	r5, r0
    6f80:	f017 f846 	bl	1e010 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    6f84:	4604      	mov	r4, r0
    6f86:	b1e0      	cbz	r0, 6fc2 <set_random_address+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    6f88:	2106      	movs	r1, #6
    6f8a:	f242 0005 	movw	r0, #8197	; 0x2005
    6f8e:	f7ff fae1 	bl	6554 <bt_hci_cmd_create>
	if (!buf) {
    6f92:	4604      	mov	r4, r0
    6f94:	b1b8      	cbz	r0, 6fc6 <set_random_address+0x4e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    6f96:	2206      	movs	r2, #6
    6f98:	4629      	mov	r1, r5
    6f9a:	3008      	adds	r0, #8
    6f9c:	f01d fec1 	bl	24d22 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    6fa0:	4621      	mov	r1, r4
    6fa2:	2200      	movs	r2, #0
    6fa4:	f242 0005 	movw	r0, #8197	; 0x2005
    6fa8:	f7ff fb5a 	bl	6660 <bt_hci_cmd_send_sync>
	if (err) {
    6fac:	4604      	mov	r4, r0
    6fae:	b940      	cbnz	r0, 6fc2 <set_random_address+0x4a>
	memcpy(dst, src, sizeof(*dst));
    6fb0:	2206      	movs	r2, #6
    6fb2:	4806      	ldr	r0, [pc, #24]	; (6fcc <set_random_address+0x54>)
    6fb4:	4629      	mov	r1, r5
    6fb6:	f017 f83c 	bl	1e032 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    6fba:	4b05      	ldr	r3, [pc, #20]	; (6fd0 <set_random_address+0x58>)
    6fbc:	2201      	movs	r2, #1
    6fbe:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
    6fc2:	4620      	mov	r0, r4
    6fc4:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    6fc6:	f06f 0468 	mvn.w	r4, #104	; 0x68
    6fca:	e7fa      	b.n	6fc2 <set_random_address+0x4a>
    6fcc:	200000e1 	.word	0x200000e1
    6fd0:	20000080 	.word	0x20000080

00006fd4 <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    6fd4:	b530      	push	{r4, r5, lr}
    6fd6:	4604      	mov	r4, r0
    6fd8:	b085      	sub	sp, #20
{
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    6fda:	460d      	mov	r5, r1
    6fdc:	b1a1      	cbz	r1, 7008 <id_create.constprop.0+0x34>
    6fde:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    6fe0:	2207      	movs	r2, #7
    6fe2:	a902      	add	r1, sp, #8
    6fe4:	4628      	mov	r0, r5
    6fe6:	9302      	str	r3, [sp, #8]
    6fe8:	f8cd 300b 	str.w	r3, [sp, #11]
    6fec:	f017 f810 	bl	1e010 <memcmp>
    6ff0:	b150      	cbz	r0, 7008 <id_create.constprop.0+0x34>
	memcpy(dst, src, sizeof(*dst));
    6ff2:	4812      	ldr	r0, [pc, #72]	; (703c <id_create.constprop.0+0x68>)
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    6ff4:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    6ff8:	2207      	movs	r2, #7
    6ffa:	4629      	mov	r1, r5
    6ffc:	4420      	add	r0, r4
    6ffe:	f017 f818 	bl	1e032 <memcpy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
    7002:	2000      	movs	r0, #0
}
    7004:	b005      	add	sp, #20
    7006:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
    7008:	4668      	mov	r0, sp
    700a:	f017 fa84 	bl	1e516 <bt_addr_le_create_static>
			if (err) {
    700e:	2800      	cmp	r0, #0
    7010:	d1f8      	bne.n	7004 <id_create.constprop.0+0x30>
		} while (id_find(&new_addr) >= 0);
    7012:	4668      	mov	r0, sp
    7014:	f7ff ff96 	bl	6f44 <id_find>
    7018:	2800      	cmp	r0, #0
    701a:	daf5      	bge.n	7008 <id_create.constprop.0+0x34>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    701c:	4807      	ldr	r0, [pc, #28]	; (703c <id_create.constprop.0+0x68>)
    701e:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    7022:	4404      	add	r4, r0
    7024:	2207      	movs	r2, #7
    7026:	4669      	mov	r1, sp
    7028:	4620      	mov	r0, r4
    702a:	f017 f802 	bl	1e032 <memcpy>
		if (addr) {
    702e:	2d00      	cmp	r5, #0
    7030:	d0e7      	beq.n	7002 <id_create.constprop.0+0x2e>
    7032:	2207      	movs	r2, #7
    7034:	4621      	mov	r1, r4
    7036:	4628      	mov	r0, r5
    7038:	e7e1      	b.n	6ffe <id_create.constprop.0+0x2a>
    703a:	bf00      	nop
    703c:	20000080 	.word	0x20000080

00007040 <bt_id_adv_random_addr_check>:
{
    7040:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    7042:	4805      	ldr	r0, [pc, #20]	; (7058 <bt_id_adv_random_addr_check+0x18>)
    7044:	f017 fcaa 	bl	1e99c <atomic_get>
	if (!(atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING) ||
    7048:	0503      	lsls	r3, r0, #20
    704a:	d402      	bmi.n	7052 <bt_id_adv_random_addr_check+0x12>
    704c:	4802      	ldr	r0, [pc, #8]	; (7058 <bt_id_adv_random_addr_check+0x18>)
    704e:	f017 fca5 	bl	1e99c <atomic_get>
}
    7052:	2001      	movs	r0, #1
    7054:	bd08      	pop	{r3, pc}
    7056:	bf00      	nop
    7058:	2000014c 	.word	0x2000014c

0000705c <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
    705c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    705e:	460c      	mov	r4, r1
	int new_id, err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    7060:	4605      	mov	r5, r0
    7062:	b918      	cbnz	r0, 706c <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    7064:	b1ec      	cbz	r4, 70a2 <bt_id_create+0x46>
		return -EINVAL;
    7066:	f06f 0015 	mvn.w	r0, #21
    706a:	e018      	b.n	709e <bt_id_create+0x42>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    706c:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    706e:	2207      	movs	r2, #7
    7070:	4669      	mov	r1, sp
    7072:	9300      	str	r3, [sp, #0]
    7074:	f8cd 3003 	str.w	r3, [sp, #3]
    7078:	f016 ffca 	bl	1e010 <memcmp>
    707c:	2800      	cmp	r0, #0
    707e:	d0f1      	beq.n	7064 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    7080:	782b      	ldrb	r3, [r5, #0]
    7082:	2b01      	cmp	r3, #1
    7084:	d1ef      	bne.n	7066 <bt_id_create+0xa>
    7086:	79ab      	ldrb	r3, [r5, #6]
    7088:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    708c:	2bc0      	cmp	r3, #192	; 0xc0
    708e:	d1ea      	bne.n	7066 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
    7090:	4628      	mov	r0, r5
    7092:	f7ff ff57 	bl	6f44 <id_find>
    7096:	2800      	cmp	r0, #0
    7098:	dbe4      	blt.n	7064 <bt_id_create+0x8>
			return -EALREADY;
    709a:	f06f 0077 	mvn.w	r0, #119	; 0x77
	if (err) {
		return err;
	}

	return new_id;
}
    709e:	b002      	add	sp, #8
    70a0:	bd70      	pop	{r4, r5, r6, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    70a2:	4e12      	ldr	r6, [pc, #72]	; (70ec <bt_id_create+0x90>)
    70a4:	79f3      	ldrb	r3, [r6, #7]
    70a6:	2b01      	cmp	r3, #1
    70a8:	d01c      	beq.n	70e4 <bt_id_create+0x88>
    70aa:	f106 00cc 	add.w	r0, r6, #204	; 0xcc
    70ae:	f017 fc75 	bl	1e99c <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    70b2:	07c3      	lsls	r3, r0, #31
    70b4:	d40b      	bmi.n	70ce <bt_id_create+0x72>
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
    70b6:	2d00      	cmp	r5, #0
    70b8:	d0d5      	beq.n	7066 <bt_id_create+0xa>
    70ba:	2207      	movs	r2, #7
    70bc:	4669      	mov	r1, sp
    70be:	4628      	mov	r0, r5
    70c0:	9400      	str	r4, [sp, #0]
    70c2:	f8cd 4003 	str.w	r4, [sp, #3]
    70c6:	f016 ffa3 	bl	1e010 <memcmp>
    70ca:	2800      	cmp	r0, #0
    70cc:	d0cb      	beq.n	7066 <bt_id_create+0xa>
	new_id = bt_dev.id_count++;
    70ce:	79f4      	ldrb	r4, [r6, #7]
	err = id_create(new_id, addr, irk);
    70d0:	4629      	mov	r1, r5
	new_id = bt_dev.id_count++;
    70d2:	1c63      	adds	r3, r4, #1
	err = id_create(new_id, addr, irk);
    70d4:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
    70d6:	71f3      	strb	r3, [r6, #7]
	err = id_create(new_id, addr, irk);
    70d8:	f7ff ff7c 	bl	6fd4 <id_create.constprop.0>
	new_id = bt_dev.id_count++;
    70dc:	2800      	cmp	r0, #0
    70de:	bf08      	it	eq
    70e0:	4620      	moveq	r0, r4
    70e2:	e7dc      	b.n	709e <bt_id_create+0x42>
		return -ENOMEM;
    70e4:	f06f 000b 	mvn.w	r0, #11
    70e8:	e7d9      	b.n	709e <bt_id_create+0x42>
    70ea:	bf00      	nop
    70ec:	20000080 	.word	0x20000080

000070f0 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
    70f0:	b570      	push	{r4, r5, r6, lr}
    70f2:	b086      	sub	sp, #24
    70f4:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    70f6:	aa01      	add	r2, sp, #4
    70f8:	2100      	movs	r1, #0
    70fa:	f241 0009 	movw	r0, #4105	; 0x1009
    70fe:	f7ff faaf 	bl	6660 <bt_hci_cmd_send_sync>
	if (err) {
    7102:	4604      	mov	r4, r0
    7104:	b970      	cbnz	r0, 7124 <bt_id_read_public_addr+0x34>
		BT_WARN("Failed to read public address");
		return 0U;
	}

	rp = (void *)rsp->data;
    7106:	9b01      	ldr	r3, [sp, #4]

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    7108:	9002      	str	r0, [sp, #8]
    710a:	689d      	ldr	r5, [r3, #8]
    710c:	f8ad 000c 	strh.w	r0, [sp, #12]
    7110:	3501      	adds	r5, #1
	return memcmp(a, b, sizeof(*a));
    7112:	2206      	movs	r2, #6
    7114:	a902      	add	r1, sp, #8
    7116:	4628      	mov	r0, r5
    7118:	f016 ff7a 	bl	1e010 <memcmp>
    711c:	b920      	cbnz	r0, 7128 <bt_id_read_public_addr+0x38>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
    711e:	9801      	ldr	r0, [sp, #4]
    7120:	f00f ffaa 	bl	17078 <net_buf_unref>
		return 0U;
    7124:	2000      	movs	r0, #0
    7126:	e016      	b.n	7156 <bt_id_read_public_addr+0x66>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
    7128:	4b0c      	ldr	r3, [pc, #48]	; (715c <bt_id_read_public_addr+0x6c>)
    712a:	6818      	ldr	r0, [r3, #0]
    712c:	9004      	str	r0, [sp, #16]
    712e:	889b      	ldrh	r3, [r3, #4]
    7130:	f8ad 3014 	strh.w	r3, [sp, #20]
    7134:	2206      	movs	r2, #6
    7136:	a904      	add	r1, sp, #16
    7138:	4628      	mov	r0, r5
    713a:	f016 ff69 	bl	1e010 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    713e:	2800      	cmp	r0, #0
    7140:	d0ed      	beq.n	711e <bt_id_read_public_addr+0x2e>
	memcpy(dst, src, sizeof(*dst));
    7142:	2206      	movs	r2, #6
    7144:	4629      	mov	r1, r5
    7146:	1c70      	adds	r0, r6, #1
    7148:	f016 ff73 	bl	1e032 <memcpy>
	}

	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
    714c:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    714e:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
    7150:	f00f ff92 	bl	17078 <net_buf_unref>
	return 1U;
    7154:	2001      	movs	r0, #1
}
    7156:	b006      	add	sp, #24
    7158:	bd70      	pop	{r4, r5, r6, pc}
    715a:	bf00      	nop
    715c:	00026662 	.word	0x00026662

00007160 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
    7160:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
    7162:	4668      	mov	r0, sp
    7164:	f7ff ffc4 	bl	70f0 <bt_id_read_public_addr>
    7168:	4b04      	ldr	r3, [pc, #16]	; (717c <bt_setup_public_id_addr+0x1c>)
    716a:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
    716c:	b118      	cbz	r0, 7176 <bt_setup_public_id_addr+0x16>
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	return id_create(BT_ID_DEFAULT, &addr, irk);
    716e:	4669      	mov	r1, sp
    7170:	2000      	movs	r0, #0
    7172:	f7ff ff2f 	bl	6fd4 <id_create.constprop.0>
}
    7176:	b003      	add	sp, #12
    7178:	f85d fb04 	ldr.w	pc, [sp], #4
    717c:	20000080 	.word	0x20000080

00007180 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
    7180:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    7184:	4b15      	ldr	r3, [pc, #84]	; (71dc <bt_read_static_addr+0x5c>)
    7186:	f893 40ba 	ldrb.w	r4, [r3, #186]	; 0xba
    718a:	f014 0401 	ands.w	r4, r4, #1
{
    718e:	4607      	mov	r7, r0
    7190:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    7192:	d015      	beq.n	71c0 <bt_read_static_addr+0x40>
		BT_WARN("Read Static Addresses command not available");
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    7194:	aa01      	add	r2, sp, #4
    7196:	2100      	movs	r1, #0
    7198:	f64f 4009 	movw	r0, #64521	; 0xfc09
    719c:	f7ff fa60 	bl	6660 <bt_hci_cmd_send_sync>
	if (err) {
    71a0:	4605      	mov	r5, r0
    71a2:	b9c8      	cbnz	r0, 71d8 <bt_read_static_addr+0x58>
		BT_WARN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	rp = (void *)rsp->data;
    71a4:	9b01      	ldr	r3, [sp, #4]
    71a6:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
    71a8:	785c      	ldrb	r4, [r3, #1]
    71aa:	42b4      	cmp	r4, r6
    71ac:	bf28      	it	cs
    71ae:	4634      	movcs	r4, r6
		net_buf_unref(rsp);
		return 0;
	}

	for (i = 0; i < cnt; i++) {
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    71b0:	f04f 0816 	mov.w	r8, #22
    71b4:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
    71b6:	42a5      	cmp	r5, r4
    71b8:	db06      	blt.n	71c8 <bt_read_static_addr+0x48>
	}

	net_buf_unref(rsp);
    71ba:	9801      	ldr	r0, [sp, #4]
    71bc:	f00f ff5c 	bl	17078 <net_buf_unref>
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
	}

	return cnt;
}
    71c0:	4620      	mov	r0, r4
    71c2:	b002      	add	sp, #8
    71c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    71c8:	fb08 7005 	mla	r0, r8, r5, r7
    71cc:	2216      	movs	r2, #22
    71ce:	4631      	mov	r1, r6
    71d0:	f016 ff2f 	bl	1e032 <memcpy>
	for (i = 0; i < cnt; i++) {
    71d4:	3501      	adds	r5, #1
    71d6:	e7ee      	b.n	71b6 <bt_read_static_addr+0x36>
		return 0;
    71d8:	2400      	movs	r4, #0
    71da:	e7f1      	b.n	71c0 <bt_read_static_addr+0x40>
    71dc:	20000080 	.word	0x20000080

000071e0 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
    71e0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
    71e2:	4e15      	ldr	r6, [pc, #84]	; (7238 <bt_setup_random_id_addr+0x58>)
    71e4:	79f4      	ldrb	r4, [r6, #7]
{
    71e6:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
    71e8:	b9f4      	cbnz	r4, 7228 <bt_setup_random_id_addr+0x48>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    71ea:	2101      	movs	r1, #1
    71ec:	a802      	add	r0, sp, #8
    71ee:	f7ff ffc7 	bl	7180 <bt_read_static_addr>
    71f2:	71f0      	strb	r0, [r6, #7]

		if (bt_dev.id_count) {
    71f4:	b1c0      	cbz	r0, 7228 <bt_setup_random_id_addr+0x48>
					atomic_set_bit(bt_dev.flags,
						       BT_DEV_STORE_ID);
				}
#endif /* CONFIG_BT_PRIVACY */

				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    71f6:	2716      	movs	r7, #22
    71f8:	ab02      	add	r3, sp, #8
    71fa:	b2e5      	uxtb	r5, r4
    71fc:	fb07 3105 	mla	r1, r7, r5, r3
    7200:	2206      	movs	r2, #6
    7202:	f10d 0001 	add.w	r0, sp, #1
    7206:	f016 ff14 	bl	1e032 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
    720a:	2301      	movs	r3, #1

				err = id_create(i, &addr, irk);
    720c:	4669      	mov	r1, sp
    720e:	4628      	mov	r0, r5
				addr.type = BT_ADDR_LE_RANDOM;
    7210:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
    7214:	f7ff fede 	bl	6fd4 <id_create.constprop.0>
				if (err) {
    7218:	b920      	cbnz	r0, 7224 <bt_setup_random_id_addr+0x44>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    721a:	79f2      	ldrb	r2, [r6, #7]
    721c:	3401      	adds	r4, #1
    721e:	b2e3      	uxtb	r3, r4
    7220:	429a      	cmp	r2, r3
    7222:	d8e9      	bhi.n	71f8 <bt_setup_random_id_addr+0x18>
	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
}
    7224:	b009      	add	sp, #36	; 0x24
    7226:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_id_create(NULL, NULL);
    7228:	2100      	movs	r1, #0
    722a:	4608      	mov	r0, r1
}
    722c:	b009      	add	sp, #36	; 0x24
    722e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
    7232:	f7ff bf13 	b.w	705c <bt_id_create>
    7236:	bf00      	nop
    7238:	20000080 	.word	0x20000080

0000723c <bt_id_set_scan_own_addr>:

	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
}

int bt_id_set_scan_own_addr(bool active_scan, uint8_t *own_addr_type)
{
    723c:	b570      	push	{r4, r5, r6, lr}
			*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
		} else {
			*own_addr_type = BT_ADDR_LE_RANDOM;
		}
	} else {
		*own_addr_type = bt_dev.id_addr[0].type;
    723e:	4b0b      	ldr	r3, [pc, #44]	; (726c <bt_id_set_scan_own_addr+0x30>)
    7240:	781b      	ldrb	r3, [r3, #0]
    7242:	700b      	strb	r3, [r1, #0]
{
    7244:	4606      	mov	r6, r0
    7246:	460d      	mov	r5, r1
		/* Use NRPA unless identity has been explicitly requested
		 * (through Kconfig).
		 * Use same RPA as legacy advertiser if advertising.
		 */
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
		    !is_adv_using_rand_addr()) {
    7248:	f017 fbae 	bl	1e9a8 <is_adv_using_rand_addr>
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    724c:	b928      	cbnz	r0, 725a <bt_id_set_scan_own_addr+0x1e>
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
    724e:	f017 fbb7 	bl	1e9c0 <bt_id_set_private_addr>
			if (err) {
    7252:	4604      	mov	r4, r0
    7254:	b918      	cbnz	r0, 725e <bt_id_set_scan_own_addr+0x22>

				BT_WARN("Ignoring failure to set address for passive scan (%d)",
					err);
			}

			*own_addr_type = BT_ADDR_LE_RANDOM;
    7256:	2301      	movs	r3, #1
    7258:	702b      	strb	r3, [r5, #0]
				return err;
			}
		}
	}

	return 0;
    725a:	2400      	movs	r4, #0
    725c:	e004      	b.n	7268 <bt_id_set_scan_own_addr+0x2c>
				if (active_scan || !is_adv_using_rand_addr()) {
    725e:	b91e      	cbnz	r6, 7268 <bt_id_set_scan_own_addr+0x2c>
    7260:	f017 fba2 	bl	1e9a8 <is_adv_using_rand_addr>
    7264:	2800      	cmp	r0, #0
    7266:	d1f6      	bne.n	7256 <bt_id_set_scan_own_addr+0x1a>
}
    7268:	4620      	mov	r0, r4
    726a:	bd70      	pop	{r4, r5, r6, pc}
    726c:	20000080 	.word	0x20000080

00007270 <bt_id_set_adv_own_addr>:
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
    7270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int err = 0;

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    7274:	f011 0401 	ands.w	r4, r1, #1
	id_addr = &bt_dev.id_addr[adv->id];
    7278:	7806      	ldrb	r6, [r0, #0]
{
    727a:	4680      	mov	r8, r0
    727c:	460d      	mov	r5, r1
    727e:	4691      	mov	r9, r2
    7280:	461f      	mov	r7, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    7282:	d02b      	beq.n	72dc <bt_id_set_adv_own_addr+0x6c>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    7284:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 733c <bt_id_set_adv_own_addr+0xcc>
    7288:	b12a      	cbz	r2, 7296 <bt_id_set_adv_own_addr+0x26>
    728a:	0688      	lsls	r0, r1, #26
    728c:	d503      	bpl.n	7296 <bt_id_set_adv_own_addr+0x26>
    728e:	f898 30d0 	ldrb.w	r3, [r8, #208]	; 0xd0
    7292:	0659      	lsls	r1, r3, #25
    7294:	d54f      	bpl.n	7336 <bt_id_set_adv_own_addr+0xc6>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    7296:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
    729a:	ea4f 0ac6 	mov.w	sl, r6, lsl #3
    729e:	f818 3003 	ldrb.w	r3, [r8, r3]
    72a2:	2b01      	cmp	r3, #1
    72a4:	d009      	beq.n	72ba <bt_id_set_adv_own_addr+0x4a>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
    72a6:	ebaa 0606 	sub.w	r6, sl, r6
    72aa:	f818 3006 	ldrb.w	r3, [r8, r6]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    72ae:	f1b9 0f00 	cmp.w	r9, #0
    72b2:	d10e      	bne.n	72d2 <bt_id_set_adv_own_addr+0x62>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    72b4:	703b      	strb	r3, [r7, #0]
		if (err) {
			return err;
		}
	}

	return 0;
    72b6:	2400      	movs	r4, #0
    72b8:	e008      	b.n	72cc <bt_id_set_adv_own_addr+0x5c>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
    72ba:	2007      	movs	r0, #7
    72bc:	fb10 3006 	smlabb	r0, r0, r6, r3
		return set_random_address(addr);
    72c0:	4440      	add	r0, r8
    72c2:	f7ff fe59 	bl	6f78 <set_random_address>
				if (err) {
    72c6:	4604      	mov	r4, r0
    72c8:	2800      	cmp	r0, #0
    72ca:	d0ec      	beq.n	72a6 <bt_id_set_adv_own_addr+0x36>
}
    72cc:	4620      	mov	r0, r4
    72ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    72d2:	06aa      	lsls	r2, r5, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    72d4:	bf48      	it	mi
    72d6:	f043 0302 	orrmi.w	r3, r3, #2
    72da:	e7eb      	b.n	72b4 <bt_id_set_adv_own_addr+0x44>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
    72dc:	f011 0504 	ands.w	r5, r1, #4
    72e0:	d014      	beq.n	730c <bt_id_set_adv_own_addr+0x9c>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    72e2:	f8df 8058 	ldr.w	r8, [pc, #88]	; 733c <bt_id_set_adv_own_addr+0xcc>
    72e6:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
    72ea:	00f5      	lsls	r5, r6, #3
    72ec:	f818 3003 	ldrb.w	r3, [r8, r3]
    72f0:	2b01      	cmp	r3, #1
    72f2:	d106      	bne.n	7302 <bt_id_set_adv_own_addr+0x92>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
    72f4:	2007      	movs	r0, #7
    72f6:	fb10 3006 	smlabb	r0, r0, r6, r3
		return set_random_address(addr);
    72fa:	4440      	add	r0, r8
    72fc:	f7ff fe3c 	bl	6f78 <set_random_address>
    7300:	4604      	mov	r4, r0
			*own_addr_type = id_addr->type;
    7302:	1bad      	subs	r5, r5, r6
    7304:	f818 3005 	ldrb.w	r3, [r8, r5]
    7308:	703b      	strb	r3, [r7, #0]
    730a:	e7df      	b.n	72cc <bt_id_set_adv_own_addr+0x5c>
    730c:	480c      	ldr	r0, [pc, #48]	; (7340 <bt_id_set_adv_own_addr+0xd0>)
    730e:	f017 fb45 	bl	1e99c <atomic_get>
			if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    7312:	0683      	lsls	r3, r0, #26
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    7314:	f3c0 1640 	ubfx	r6, r0, #5, #1
    7318:	d502      	bpl.n	7320 <bt_id_set_adv_own_addr+0xb0>
				bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
    731a:	4628      	mov	r0, r5
    731c:	f017 fcd9 	bl	1ecd2 <bt_le_scan_set_enable>
			err = bt_id_set_adv_private_addr(adv);
    7320:	4640      	mov	r0, r8
    7322:	f017 fb5f 	bl	1e9e4 <bt_id_set_adv_private_addr>
    7326:	4604      	mov	r4, r0
			*own_addr_type = BT_ADDR_LE_RANDOM;
    7328:	2001      	movs	r0, #1
    732a:	7038      	strb	r0, [r7, #0]
			if (scan_enabled) {
    732c:	2e00      	cmp	r6, #0
    732e:	d0cd      	beq.n	72cc <bt_id_set_adv_own_addr+0x5c>
				bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
    7330:	f017 fccf 	bl	1ecd2 <bt_le_scan_set_enable>
		if (err) {
    7334:	e7ca      	b.n	72cc <bt_id_set_adv_own_addr+0x5c>
			return -ENOTSUP;
    7336:	f06f 0485 	mvn.w	r4, #133	; 0x85
    733a:	e7c7      	b.n	72cc <bt_id_set_adv_own_addr+0x5c>
    733c:	20000080 	.word	0x20000080
    7340:	2000014c 	.word	0x2000014c

00007344 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
    7344:	b510      	push	{r4, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    7346:	4c0a      	ldr	r4, [pc, #40]	; (7370 <bt_id_init+0x2c>)
    7348:	79e3      	ldrb	r3, [r4, #7]
    734a:	b10b      	cbz	r3, 7350 <bt_id_init+0xc>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
    734c:	2000      	movs	r0, #0
}
    734e:	bd10      	pop	{r4, pc}
		err = bt_setup_public_id_addr();
    7350:	f7ff ff06 	bl	7160 <bt_setup_public_id_addr>
		if (err) {
    7354:	2800      	cmp	r0, #0
    7356:	d1fa      	bne.n	734e <bt_id_init+0xa>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    7358:	79e3      	ldrb	r3, [r4, #7]
    735a:	2b00      	cmp	r3, #0
    735c:	d1f6      	bne.n	734c <bt_id_init+0x8>
		err = bt_setup_random_id_addr();
    735e:	f7ff ff3f 	bl	71e0 <bt_setup_random_id_addr>
		if (err) {
    7362:	2800      	cmp	r0, #0
    7364:	d1f3      	bne.n	734e <bt_id_init+0xa>
		err = set_random_address(&bt_dev.id_addr[0].a);
    7366:	1c60      	adds	r0, r4, #1
}
    7368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = set_random_address(&bt_dev.id_addr[0].a);
    736c:	f7ff be04 	b.w	6f78 <set_random_address>
    7370:	20000080 	.word	0x20000080

00007374 <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    7374:	6843      	ldr	r3, [r0, #4]
{
    7376:	b537      	push	{r0, r1, r2, r4, r5, lr}
    7378:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    737a:	0558      	lsls	r0, r3, #21
    737c:	d502      	bpl.n	7384 <valid_adv_param+0x10>
		return false;
    737e:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
    7380:	b003      	add	sp, #12
    7382:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    7384:	6922      	ldr	r2, [r4, #16]
    7386:	b10a      	cbz	r2, 738c <valid_adv_param+0x18>
    7388:	07d9      	lsls	r1, r3, #31
    738a:	d5f8      	bpl.n	737e <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
    738c:	4d1a      	ldr	r5, [pc, #104]	; (73f8 <valid_adv_param+0x84>)
    738e:	7820      	ldrb	r0, [r4, #0]
    7390:	79eb      	ldrb	r3, [r5, #7]
    7392:	4283      	cmp	r3, r0
    7394:	d9f3      	bls.n	737e <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    7396:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    739a:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    739c:	2207      	movs	r2, #7
    739e:	4669      	mov	r1, sp
    73a0:	4428      	add	r0, r5
    73a2:	9300      	str	r3, [sp, #0]
    73a4:	f8cd 3003 	str.w	r3, [sp, #3]
    73a8:	f016 fe32 	bl	1e010 <memcmp>
	if (param->id >= bt_dev.id_count ||
    73ac:	2800      	cmp	r0, #0
    73ae:	d0e6      	beq.n	737e <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    73b0:	6860      	ldr	r0, [r4, #4]
    73b2:	07c2      	lsls	r2, r0, #31
    73b4:	d406      	bmi.n	73c4 <valid_adv_param+0x50>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    73b6:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
    73ba:	2b08      	cmp	r3, #8
    73bc:	d802      	bhi.n	73c4 <valid_adv_param+0x50>
    73be:	68a3      	ldr	r3, [r4, #8]
    73c0:	2b9f      	cmp	r3, #159	; 0x9f
    73c2:	d9dc      	bls.n	737e <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
    73c4:	f010 0f30 	tst.w	r0, #48	; 0x30
    73c8:	d002      	beq.n	73d0 <valid_adv_param+0x5c>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
    73ca:	6923      	ldr	r3, [r4, #16]
    73cc:	2b00      	cmp	r3, #0
    73ce:	d0d6      	beq.n	737e <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
    73d0:	06c3      	lsls	r3, r0, #27
    73d2:	d401      	bmi.n	73d8 <valid_adv_param+0x64>
    73d4:	6923      	ldr	r3, [r4, #16]
    73d6:	b943      	cbnz	r3, 73ea <valid_adv_param+0x76>
		if (param->interval_min > param->interval_max ||
    73d8:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    73dc:	429a      	cmp	r2, r3
    73de:	d8ce      	bhi.n	737e <valid_adv_param+0xa>
    73e0:	2a1f      	cmp	r2, #31
    73e2:	d9cc      	bls.n	737e <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
    73e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    73e8:	d8c9      	bhi.n	737e <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
    73ea:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
    73ee:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
    73f2:	bf18      	it	ne
    73f4:	2001      	movne	r0, #1
    73f6:	e7c3      	b.n	7380 <valid_adv_param+0xc>
    73f8:	20000080 	.word	0x20000080

000073fc <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
    73fc:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
    73fe:	4606      	mov	r6, r0
    7400:	4b1e      	ldr	r3, [pc, #120]	; (747c <le_adv_start_add_conn+0x80>)
    7402:	f816 2b09 	ldrb.w	r2, [r6], #9
    7406:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
{
    740a:	b085      	sub	sp, #20

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    740c:	2300      	movs	r3, #0
{
    740e:	4605      	mov	r5, r0
    7410:	2207      	movs	r2, #7
    7412:	460f      	mov	r7, r1
    7414:	4630      	mov	r0, r6
    7416:	4669      	mov	r1, sp
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    7418:	9300      	str	r3, [sp, #0]
    741a:	f8cd 3003 	str.w	r3, [sp, #3]
    741e:	f016 fdf7 	bl	1e010 <memcmp>
    7422:	782a      	ldrb	r2, [r5, #0]
    7424:	4604      	mov	r4, r0
    7426:	b9a8      	cbnz	r0, 7454 <le_adv_start_add_conn+0x58>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
    7428:	4b15      	ldr	r3, [pc, #84]	; (7480 <le_adv_start_add_conn+0x84>)
    742a:	6818      	ldr	r0, [r3, #0]
    742c:	8899      	ldrh	r1, [r3, #4]
    742e:	9002      	str	r0, [sp, #8]
    7430:	799b      	ldrb	r3, [r3, #6]
    7432:	f8ad 100c 	strh.w	r1, [sp, #12]
    7436:	4610      	mov	r0, r2
    7438:	a902      	add	r1, sp, #8
    743a:	f88d 300e 	strb.w	r3, [sp, #14]
    743e:	f000 ff71 	bl	8324 <bt_conn_add_le>
		if (!conn) {
    7442:	4605      	mov	r5, r0
    7444:	b1b8      	cbz	r0, 7476 <le_adv_start_add_conn+0x7a>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
    7446:	2104      	movs	r1, #4
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
	if (!conn) {
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    7448:	f000 fe20 	bl	808c <bt_conn_set_state>
	*out_conn = conn;
    744c:	603d      	str	r5, [r7, #0]
	return 0;
}
    744e:	4620      	mov	r0, r4
    7450:	b005      	add	sp, #20
    7452:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
    7454:	4631      	mov	r1, r6
    7456:	4610      	mov	r0, r2
    7458:	f017 fd7d 	bl	1ef56 <bt_conn_exists_le>
    745c:	4604      	mov	r4, r0
    745e:	b938      	cbnz	r0, 7470 <le_adv_start_add_conn+0x74>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
    7460:	7828      	ldrb	r0, [r5, #0]
    7462:	4631      	mov	r1, r6
    7464:	f000 ff5e 	bl	8324 <bt_conn_add_le>
	if (!conn) {
    7468:	4605      	mov	r5, r0
    746a:	b120      	cbz	r0, 7476 <le_adv_start_add_conn+0x7a>
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    746c:	2105      	movs	r1, #5
    746e:	e7eb      	b.n	7448 <le_adv_start_add_conn+0x4c>
		return -EINVAL;
    7470:	f06f 0415 	mvn.w	r4, #21
    7474:	e7eb      	b.n	744e <le_adv_start_add_conn+0x52>
		return -ENOMEM;
    7476:	f06f 040b 	mvn.w	r4, #11
    747a:	e7e8      	b.n	744e <le_adv_start_add_conn+0x52>
    747c:	20000080 	.word	0x20000080
    7480:	00026668 	.word	0x00026668

00007484 <bt_le_adv_lookup_legacy>:
}
    7484:	4800      	ldr	r0, [pc, #0]	; (7488 <bt_le_adv_lookup_legacy+0x4>)
    7486:	4770      	bx	lr
    7488:	20000098 	.word	0x20000098

0000748c <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
    748c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
    7490:	690e      	ldr	r6, [r1, #16]
{
    7492:	b08f      	sub	sp, #60	; 0x3c
    7494:	469a      	mov	sl, r3
	struct bt_conn *conn = NULL;
    7496:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable = false;
    7498:	ebb6 0903 	subs.w	r9, r6, r3
{
    749c:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    749e:	488c      	ldr	r0, [pc, #560]	; (76d0 <bt_le_adv_start_legacy+0x244>)
    74a0:	9205      	str	r2, [sp, #20]
	bool dir_adv = (param->peer != NULL), scannable = false;
    74a2:	bf18      	it	ne
    74a4:	f04f 0901 	movne.w	r9, #1
	struct bt_conn *conn = NULL;
    74a8:	9307      	str	r3, [sp, #28]
    74aa:	f017 fac5 	bl	1ea38 <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    74ae:	0787      	lsls	r7, r0, #30
{
    74b0:	460c      	mov	r4, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    74b2:	f140 8102 	bpl.w	76ba <bt_le_adv_start_legacy+0x22e>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
    74b6:	4608      	mov	r0, r1
    74b8:	f7ff ff5c 	bl	7374 <valid_adv_param>
    74bc:	b928      	cbnz	r0, 74ca <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
    74be:	f06f 0b15 	mvn.w	fp, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
    74c2:	4658      	mov	r0, fp
    74c4:	b00f      	add	sp, #60	; 0x3c
    74c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
    74ca:	4620      	mov	r0, r4
    74cc:	f7ff fdb8 	bl	7040 <bt_id_adv_random_addr_check>
    74d0:	4680      	mov	r8, r0
    74d2:	2800      	cmp	r0, #0
    74d4:	d0f3      	beq.n	74be <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    74d6:	f105 0710 	add.w	r7, r5, #16
    74da:	4638      	mov	r0, r7
    74dc:	f017 faac 	bl	1ea38 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    74e0:	f3c0 1b80 	ubfx	fp, r0, #6, #1
    74e4:	0640      	lsls	r0, r0, #25
    74e6:	f100 80eb 	bmi.w	76c0 <bt_le_adv_start_legacy+0x234>
	(void)memset(&set_param, 0, sizeof(set_param));
    74ea:	220f      	movs	r2, #15
    74ec:	4659      	mov	r1, fp
    74ee:	a80a      	add	r0, sp, #40	; 0x28
    74f0:	f016 fdaa 	bl	1e048 <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    74f4:	68a3      	ldr	r3, [r4, #8]
    74f6:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	set_param.channel_map  = get_adv_channel_map(param->options);
    74fa:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    74fc:	68e3      	ldr	r3, [r4, #12]
    74fe:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	set_param.channel_map  = get_adv_channel_map(param->options);
    7502:	f017 fa8a 	bl	1ea1a <get_adv_channel_map>
	if (adv->id != param->id) {
    7506:	782a      	ldrb	r2, [r5, #0]
    7508:	7823      	ldrb	r3, [r4, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
    750a:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
	if (adv->id != param->id) {
    750e:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
    7510:	f88d b036 	strb.w	fp, [sp, #54]	; 0x36
	if (adv->id != param->id) {
    7514:	d004      	beq.n	7520 <bt_le_adv_start_legacy+0x94>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    7516:	486e      	ldr	r0, [pc, #440]	; (76d0 <bt_le_adv_start_legacy+0x244>)
    7518:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    751c:	f017 fa92 	bl	1ea44 <atomic_and>
	bt_dev.adv_conn_id = adv->id;
    7520:	4a6c      	ldr	r2, [pc, #432]	; (76d4 <bt_le_adv_start_legacy+0x248>)
	adv->id = param->id;
    7522:	7823      	ldrb	r3, [r4, #0]
    7524:	702b      	strb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
    7526:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
    752a:	6861      	ldr	r1, [r4, #4]
    752c:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
    7530:	464a      	mov	r2, r9
    7532:	4628      	mov	r0, r5
    7534:	f7ff fe9c 	bl	7270 <bt_id_set_adv_own_addr>
	if (err) {
    7538:	4683      	mov	fp, r0
    753a:	2800      	cmp	r0, #0
    753c:	d1c1      	bne.n	74c2 <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, param->peer);
    753e:	f105 0009 	add.w	r0, r5, #9
	if (dir_adv) {
    7542:	2e00      	cmp	r6, #0
    7544:	d049      	beq.n	75da <bt_le_adv_start_legacy+0x14e>
	memcpy(dst, src, sizeof(*dst));
    7546:	6921      	ldr	r1, [r4, #16]
    7548:	2207      	movs	r2, #7
    754a:	f016 fd72 	bl	1e032 <memcpy>
	name_type = get_adv_name_type_param(param);
    754e:	4620      	mov	r0, r4
    7550:	f017 fb76 	bl	1ec40 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    7554:	6863      	ldr	r3, [r4, #4]
    7556:	07d9      	lsls	r1, r3, #31
	name_type = get_adv_name_type_param(param);
    7558:	4681      	mov	r9, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    755a:	d547      	bpl.n	75ec <bt_le_adv_start_legacy+0x160>
		if (dir_adv) {
    755c:	2e00      	cmp	r6, #0
    755e:	d042      	beq.n	75e6 <bt_le_adv_start_legacy+0x15a>
				set_param.type = BT_HCI_ADV_DIRECT_IND;
    7560:	f013 0f10 	tst.w	r3, #16
    7564:	bf14      	ite	ne
    7566:	2304      	movne	r3, #4
    7568:	2301      	moveq	r3, #1
    756a:	6921      	ldr	r1, [r4, #16]
    756c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    7570:	2207      	movs	r2, #7
    7572:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
    7576:	f016 fd5c 	bl	1e032 <memcpy>
	bool dir_adv = (param->peer != NULL), scannable = false;
    757a:	f04f 0800 	mov.w	r8, #0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    757e:	210f      	movs	r1, #15
    7580:	f242 0006 	movw	r0, #8198	; 0x2006
    7584:	f7fe ffe6 	bl	6554 <bt_hci_cmd_create>
	if (!buf) {
    7588:	4683      	mov	fp, r0
    758a:	2800      	cmp	r0, #0
    758c:	f000 809b 	beq.w	76c6 <bt_le_adv_start_legacy+0x23a>
    7590:	220f      	movs	r2, #15
    7592:	a90a      	add	r1, sp, #40	; 0x28
    7594:	3008      	adds	r0, #8
    7596:	f01d fbc4 	bl	24d22 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    759a:	2200      	movs	r2, #0
    759c:	4659      	mov	r1, fp
    759e:	f242 0006 	movw	r0, #8198	; 0x2006
    75a2:	f7ff f85d 	bl	6660 <bt_hci_cmd_send_sync>
	if (err) {
    75a6:	2800      	cmp	r0, #0
    75a8:	f040 8090 	bne.w	76cc <bt_le_adv_start_legacy+0x240>
	if (!dir_adv) {
    75ac:	b376      	cbz	r6, 760c <bt_le_adv_start_legacy+0x180>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    75ae:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    75b0:	07db      	lsls	r3, r3, #31
    75b2:	d439      	bmi.n	7628 <bt_le_adv_start_legacy+0x19c>
	return bt_le_adv_set_enable_legacy(adv, enable);
    75b4:	2101      	movs	r1, #1
    75b6:	4628      	mov	r0, r5
    75b8:	f017 fb52 	bl	1ec60 <bt_le_adv_set_enable_legacy>
	if (err) {
    75bc:	4683      	mov	fp, r0
    75be:	9807      	ldr	r0, [sp, #28]
    75c0:	f1bb 0f00 	cmp.w	fp, #0
    75c4:	d073      	beq.n	76ae <bt_le_adv_start_legacy+0x222>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    75c6:	2800      	cmp	r0, #0
    75c8:	f43f af7b 	beq.w	74c2 <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    75cc:	2100      	movs	r1, #0
    75ce:	f000 fd5d 	bl	808c <bt_conn_set_state>
			bt_conn_unref(conn);
    75d2:	9807      	ldr	r0, [sp, #28]
    75d4:	f017 fc34 	bl	1ee40 <bt_conn_unref>
    75d8:	e773      	b.n	74c2 <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    75da:	9608      	str	r6, [sp, #32]
    75dc:	2207      	movs	r2, #7
    75de:	f8cd 6023 	str.w	r6, [sp, #35]	; 0x23
    75e2:	a908      	add	r1, sp, #32
    75e4:	e7b1      	b.n	754a <bt_le_adv_start_legacy+0xbe>
			set_param.type = BT_HCI_ADV_IND;
    75e6:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
    75ea:	e7c8      	b.n	757e <bt_le_adv_start_legacy+0xf2>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
    75ec:	059a      	lsls	r2, r3, #22
    75ee:	d403      	bmi.n	75f8 <bt_le_adv_start_legacy+0x16c>
    75f0:	9b18      	ldr	r3, [sp, #96]	; 0x60
    75f2:	b90b      	cbnz	r3, 75f8 <bt_le_adv_start_legacy+0x16c>
    75f4:	2802      	cmp	r0, #2
    75f6:	d103      	bne.n	7600 <bt_le_adv_start_legacy+0x174>
		set_param.type = BT_HCI_ADV_SCAN_IND;
    75f8:	2302      	movs	r3, #2
    75fa:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    75fe:	e7be      	b.n	757e <bt_le_adv_start_legacy+0xf2>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
    7600:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
    7602:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
		set_param.type = BT_HCI_ADV_NONCONN_IND;
    7606:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    760a:	e7b8      	b.n	757e <bt_le_adv_start_legacy+0xf2>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
    760c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    760e:	9300      	str	r3, [sp, #0]
    7610:	e9cd 8901 	strd	r8, r9, [sp, #4]
    7614:	9b18      	ldr	r3, [sp, #96]	; 0x60
    7616:	9905      	ldr	r1, [sp, #20]
    7618:	4652      	mov	r2, sl
    761a:	4628      	mov	r0, r5
    761c:	f017 fa99 	bl	1eb52 <le_adv_update.constprop.0>
		if (err) {
    7620:	4683      	mov	fp, r0
    7622:	2800      	cmp	r0, #0
    7624:	d0c3      	beq.n	75ae <bt_le_adv_start_legacy+0x122>
    7626:	e74c      	b.n	74c2 <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
    7628:	a907      	add	r1, sp, #28
    762a:	4628      	mov	r0, r5
    762c:	f7ff fee6 	bl	73fc <le_adv_start_add_conn>
		if (err) {
    7630:	4683      	mov	fp, r0
    7632:	2800      	cmp	r0, #0
    7634:	d0be      	beq.n	75b4 <bt_le_adv_start_legacy+0x128>
			if (err == -ENOMEM && !dir_adv &&
    7636:	f110 0f0c 	cmn.w	r0, #12
    763a:	f47f af42 	bne.w	74c2 <bt_le_adv_start_legacy+0x36>
    763e:	2e00      	cmp	r6, #0
    7640:	f47f af3f 	bne.w	74c2 <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    7644:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
    7646:	0798      	lsls	r0, r3, #30
    7648:	f53f af3b 	bmi.w	74c2 <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    764c:	6862      	ldr	r2, [r4, #4]
    764e:	f082 0202 	eor.w	r2, r2, #2
    7652:	f3c2 0b40 	ubfx	fp, r2, #1, #1
    7656:	f00b 0201 	and.w	r2, fp, #1
    765a:	210d      	movs	r1, #13
    765c:	4638      	mov	r0, r7
    765e:	f017 fa61 	bl	1eb24 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
    7662:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
    7666:	425a      	negs	r2, r3
    7668:	415a      	adcs	r2, r3
    766a:	2107      	movs	r1, #7
    766c:	4638      	mov	r0, r7
    766e:	f017 fa59 	bl	1eb24 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
    7672:	f1a9 0102 	sub.w	r1, r9, #2
    7676:	424a      	negs	r2, r1
    7678:	414a      	adcs	r2, r1
    767a:	4638      	mov	r0, r7
    767c:	2108      	movs	r1, #8
    767e:	f017 fa51 	bl	1eb24 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
    7682:	6862      	ldr	r2, [r4, #4]
    7684:	2109      	movs	r1, #9
    7686:	f002 0201 	and.w	r2, r2, #1
    768a:	4638      	mov	r0, r7
    768c:	f017 fa4a 	bl	1eb24 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
    7690:	4642      	mov	r2, r8
    7692:	210a      	movs	r1, #10
    7694:	4638      	mov	r0, r7
    7696:	f017 fa45 	bl	1eb24 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
    769a:	6862      	ldr	r2, [r4, #4]
    769c:	210c      	movs	r1, #12
    769e:	f3c2 0280 	ubfx	r2, r2, #2, #1
    76a2:	4638      	mov	r0, r7
    76a4:	f017 fa3e 	bl	1eb24 <atomic_set_bit_to>
	return 0;
    76a8:	f04f 0b00 	mov.w	fp, #0
    76ac:	e709      	b.n	74c2 <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    76ae:	b108      	cbz	r0, 76b4 <bt_le_adv_start_legacy+0x228>
		bt_conn_unref(conn);
    76b0:	f017 fbc6 	bl	1ee40 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    76b4:	2e00      	cmp	r6, #0
    76b6:	d1ce      	bne.n	7656 <bt_le_adv_start_legacy+0x1ca>
    76b8:	e7c8      	b.n	764c <bt_le_adv_start_legacy+0x1c0>
		return -EAGAIN;
    76ba:	f06f 0b0a 	mvn.w	fp, #10
    76be:	e700      	b.n	74c2 <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
    76c0:	f06f 0b77 	mvn.w	fp, #119	; 0x77
    76c4:	e6fd      	b.n	74c2 <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
    76c6:	f06f 0b68 	mvn.w	fp, #104	; 0x68
    76ca:	e6fa      	b.n	74c2 <bt_le_adv_start_legacy+0x36>
    76cc:	4683      	mov	fp, r0
    76ce:	e6f8      	b.n	74c2 <bt_le_adv_start_legacy+0x36>
    76d0:	2000014c 	.word	0x2000014c
    76d4:	20000080 	.word	0x20000080

000076d8 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    76d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    76da:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    76dc:	9a06      	ldr	r2, [sp, #24]
{
    76de:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    76e0:	e9cd 3200 	strd	r3, r2, [sp]
    76e4:	462b      	mov	r3, r5
    76e6:	460a      	mov	r2, r1
    76e8:	4601      	mov	r1, r0
    76ea:	4811      	ldr	r0, [pc, #68]	; (7730 <bt_le_adv_start+0x58>)
    76ec:	f7ff fece 	bl	748c <bt_le_adv_start_legacy>
    76f0:	4621      	mov	r1, r4
    76f2:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
    76f4:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
    76f6:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
    76fa:	429d      	cmp	r5, r3
    76fc:	d102      	bne.n	7704 <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
    76fe:	4630      	mov	r0, r6
    7700:	b002      	add	sp, #8
    7702:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
    7704:	880a      	ldrh	r2, [r1, #0]
    7706:	4282      	cmp	r2, r0
    7708:	d104      	bne.n	7714 <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
    770a:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
    770c:	b112      	cbz	r2, 7714 <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
    770e:	7812      	ldrb	r2, [r2, #0]
    7710:	07d2      	lsls	r2, r2, #31
    7712:	d402      	bmi.n	771a <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
    7714:	3301      	adds	r3, #1
    7716:	3108      	adds	r1, #8
    7718:	e7ef      	b.n	76fa <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
    771a:	4906      	ldr	r1, [pc, #24]	; (7734 <bt_le_adv_start+0x5c>)
    771c:	4806      	ldr	r0, [pc, #24]	; (7738 <bt_le_adv_start+0x60>)
    771e:	f01e fab7 	bl	25c90 <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
    7722:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    7726:	2300      	movs	r3, #0
    7728:	4803      	ldr	r0, [pc, #12]	; (7738 <bt_le_adv_start+0x60>)
    772a:	f013 fff5 	bl	1b718 <k_work_reschedule>
    772e:	e7e6      	b.n	76fe <bt_le_adv_start+0x26>
    7730:	20000098 	.word	0x20000098
    7734:	0001ecb1 	.word	0x0001ecb1
    7738:	200000b0 	.word	0x200000b0

0000773c <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
    773c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
	int err;

	(void)bt_le_lim_adv_cancel_timeout(adv);
    773e:	4829      	ldr	r0, [pc, #164]	; (77e4 <bt_le_adv_stop+0xa8>)
    7740:	f017 fab3 	bl	1ecaa <bt_le_lim_adv_cancel_timeout>
    7744:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
    7748:	4827      	ldr	r0, [pc, #156]	; (77e8 <bt_le_adv_stop+0xac>)
    774a:	f017 f97b 	bl	1ea44 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    774e:	4826      	ldr	r0, [pc, #152]	; (77e8 <bt_le_adv_stop+0xac>)
    7750:	f017 f972 	bl	1ea38 <atomic_get>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    7754:	0641      	lsls	r1, r0, #25
    7756:	d403      	bmi.n	7760 <bt_le_adv_stop+0x24>
		/* Legacy advertiser exists, but is not currently advertising.
		 * This happens when keep advertising behavior is active but
		 * no conn object is available to do connectable advertising.
		 */
		bt_le_adv_delete_legacy();
		return 0;
    7758:	2400      	movs	r4, #0
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
    775a:	4620      	mov	r0, r4
    775c:	b004      	add	sp, #16
    775e:	bd10      	pop	{r4, pc}
    7760:	4821      	ldr	r0, [pc, #132]	; (77e8 <bt_le_adv_stop+0xac>)
    7762:	f017 f969 	bl	1ea38 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    7766:	0582      	lsls	r2, r0, #22
    7768:	d521      	bpl.n	77ae <bt_le_adv_stop+0x72>
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    776a:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    776c:	481f      	ldr	r0, [pc, #124]	; (77ec <bt_le_adv_stop+0xb0>)
    776e:	9300      	str	r3, [sp, #0]
    7770:	2207      	movs	r2, #7
    7772:	4669      	mov	r1, sp
    7774:	f8cd 3003 	str.w	r3, [sp, #3]
    7778:	f016 fc4a 	bl	1e010 <memcmp>
    777c:	4b1c      	ldr	r3, [pc, #112]	; (77f0 <bt_le_adv_stop+0xb4>)
    777e:	bb60      	cbnz	r0, 77da <bt_le_adv_stop+0x9e>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
    7780:	4a1c      	ldr	r2, [pc, #112]	; (77f4 <bt_le_adv_stop+0xb8>)
    7782:	8891      	ldrh	r1, [r2, #4]
    7784:	6810      	ldr	r0, [r2, #0]
    7786:	7992      	ldrb	r2, [r2, #6]
    7788:	f8ad 100c 	strh.w	r1, [sp, #12]
    778c:	f88d 200e 	strb.w	r2, [sp, #14]
    7790:	9002      	str	r0, [sp, #8]
    7792:	2204      	movs	r2, #4
    7794:	a902      	add	r1, sp, #8
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    7796:	7e18      	ldrb	r0, [r3, #24]
    7798:	f000 fdfc 	bl	8394 <bt_conn_lookup_state_le>
    779c:	4604      	mov	r4, r0
	if (conn) {
    779e:	b130      	cbz	r0, 77ae <bt_le_adv_stop+0x72>
		conn->err = status;
    77a0:	2100      	movs	r1, #0
    77a2:	7241      	strb	r1, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    77a4:	f000 fc72 	bl	808c <bt_conn_set_state>
		bt_conn_unref(conn);
    77a8:	4620      	mov	r0, r4
    77aa:	f017 fb49 	bl	1ee40 <bt_conn_unref>
		err = bt_le_adv_set_enable_legacy(adv, false);
    77ae:	480d      	ldr	r0, [pc, #52]	; (77e4 <bt_le_adv_stop+0xa8>)
    77b0:	2100      	movs	r1, #0
    77b2:	f017 fa55 	bl	1ec60 <bt_le_adv_set_enable_legacy>
		if (err) {
    77b6:	4604      	mov	r4, r0
    77b8:	2800      	cmp	r0, #0
    77ba:	d1ce      	bne.n	775a <bt_le_adv_stop+0x1e>
    77bc:	480e      	ldr	r0, [pc, #56]	; (77f8 <bt_le_adv_stop+0xbc>)
    77be:	f017 f93b 	bl	1ea38 <atomic_get>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    77c2:	0683      	lsls	r3, r0, #26
    77c4:	d5c8      	bpl.n	7758 <bt_le_adv_stop+0x1c>
			bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
    77c6:	4620      	mov	r0, r4
    77c8:	f017 fa83 	bl	1ecd2 <bt_le_scan_set_enable>
			bt_id_set_private_addr(BT_ID_DEFAULT);
    77cc:	4620      	mov	r0, r4
    77ce:	f017 f8f7 	bl	1e9c0 <bt_id_set_private_addr>
			bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
    77d2:	2001      	movs	r0, #1
    77d4:	f017 fa7d 	bl	1ecd2 <bt_le_scan_set_enable>
    77d8:	e7bf      	b.n	775a <bt_le_adv_stop+0x1e>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    77da:	2205      	movs	r2, #5
    77dc:	f103 0121 	add.w	r1, r3, #33	; 0x21
    77e0:	e7d9      	b.n	7796 <bt_le_adv_stop+0x5a>
    77e2:	bf00      	nop
    77e4:	20000098 	.word	0x20000098
    77e8:	200000a8 	.word	0x200000a8
    77ec:	200000a1 	.word	0x200000a1
    77f0:	20000080 	.word	0x20000080
    77f4:	00026668 	.word	0x00026668
    77f8:	2000014c 	.word	0x2000014c

000077fc <bt_le_adv_resume>:

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
    77fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    77fe:	481e      	ldr	r0, [pc, #120]	; (7878 <bt_le_adv_resume+0x7c>)
    7800:	4c1d      	ldr	r4, [pc, #116]	; (7878 <bt_le_adv_resume+0x7c>)
    7802:	f017 f919 	bl	1ea38 <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
    7806:	f410 5f00 	tst.w	r0, #8192	; 0x2000
    780a:	d032      	beq.n	7872 <bt_le_adv_resume+0x76>
    780c:	4620      	mov	r0, r4
    780e:	f017 f913 	bl	1ea38 <atomic_get>
    7812:	0642      	lsls	r2, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    7814:	f3c0 1580 	ubfx	r5, r0, #6, #1
    7818:	d42b      	bmi.n	7872 <bt_le_adv_resume+0x76>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    781a:	4620      	mov	r0, r4
    781c:	f017 f90c 	bl	1ea38 <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
    7820:	0583      	lsls	r3, r0, #22
    7822:	d526      	bpl.n	7872 <bt_le_adv_resume+0x76>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
    7824:	a901      	add	r1, sp, #4
    7826:	f1a4 0010 	sub.w	r0, r4, #16
    782a:	f7ff fde7 	bl	73fc <le_adv_start_add_conn>
	if (err) {
    782e:	bb00      	cbnz	r0, 7872 <bt_le_adv_resume+0x76>
	return bt_le_adv_set_enable_legacy(adv, enable);
    7830:	2101      	movs	r1, #1
    7832:	f1a4 0010 	sub.w	r0, r4, #16
    7836:	f017 fa13 	bl	1ec60 <bt_le_adv_set_enable_legacy>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		bt_id_set_adv_private_addr(adv);
	}

	err = bt_le_adv_set_enable(adv, true);
	if (err) {
    783a:	b150      	cbz	r0, 7852 <bt_le_adv_resume+0x56>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    783c:	4629      	mov	r1, r5
    783e:	9801      	ldr	r0, [sp, #4]
    7840:	f000 fc24 	bl	808c <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    7844:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
    7848:	4620      	mov	r0, r4
    784a:	f017 f8fb 	bl	1ea44 <atomic_and>
	return (old & mask) != 0;
    784e:	f3c0 3540 	ubfx	r5, r0, #13, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
    7852:	9801      	ldr	r0, [sp, #4]
    7854:	f017 faf4 	bl	1ee40 <bt_conn_unref>
	if (persist_paused) {
    7858:	b15d      	cbz	r5, 7872 <bt_le_adv_resume+0x76>
    785a:	f3bf 8f5b 	dmb	ish
    785e:	e854 3f00 	ldrex	r3, [r4]
    7862:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    7866:	e844 3200 	strex	r2, r3, [r4]
    786a:	2a00      	cmp	r2, #0
    786c:	d1f7      	bne.n	785e <bt_le_adv_resume+0x62>
    786e:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
    7872:	b003      	add	sp, #12
    7874:	bd30      	pop	{r4, r5, pc}
    7876:	bf00      	nop
    7878:	200000a8 	.word	0x200000a8

0000787c <bt_le_scan_set_enable_legacy>:

	return 0;
}

static int bt_le_scan_set_enable_legacy(uint8_t enable)
{
    787c:	b530      	push	{r4, r5, lr}
	struct bt_hci_cp_le_set_scan_enable *cp;
	struct bt_hci_cmd_state_set state;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    787e:	2102      	movs	r1, #2
{
    7880:	b087      	sub	sp, #28
    7882:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    7884:	f242 000c 	movw	r0, #8204	; 0x200c
    7888:	f7fe fe64 	bl	6554 <bt_hci_cmd_create>
	if (!buf) {
    788c:	4605      	mov	r5, r0
    788e:	b318      	cbz	r0, 78d8 <bt_le_scan_set_enable_legacy+0x5c>
	return net_buf_simple_add(&buf->b, len);
    7890:	2102      	movs	r1, #2
    7892:	3008      	adds	r0, #8
    7894:	f01d fa3f 	bl	24d16 <net_buf_simple_add>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));

	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    7898:	2c01      	cmp	r4, #1
    789a:	d11b      	bne.n	78d4 <bt_le_scan_set_enable_legacy+0x58>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    789c:	f3bf 8f5b 	dmb	ish
    78a0:	4b0f      	ldr	r3, [pc, #60]	; (78e0 <bt_le_scan_set_enable_legacy+0x64>)
    78a2:	681b      	ldr	r3, [r3, #0]
    78a4:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    78a8:	f3c3 2300 	ubfx	r3, r3, #8, #1
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
						 BT_DEV_SCAN_FILTER_DUP);
	} else {
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    78ac:	7043      	strb	r3, [r0, #1]
	}

	cp->enable = enable;

	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
    78ae:	1e63      	subs	r3, r4, #1
	cp->enable = enable;
    78b0:	7004      	strb	r4, [r0, #0]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
    78b2:	425c      	negs	r4, r3
    78b4:	415c      	adcs	r4, r3
    78b6:	4a0a      	ldr	r2, [pc, #40]	; (78e0 <bt_le_scan_set_enable_legacy+0x64>)
    78b8:	9400      	str	r4, [sp, #0]
    78ba:	a903      	add	r1, sp, #12
    78bc:	4628      	mov	r0, r5
    78be:	2305      	movs	r3, #5
    78c0:	f7fe fe36 	bl	6530 <bt_hci_cmd_state_set_init>
				  enable == BT_HCI_LE_SCAN_ENABLE);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    78c4:	2200      	movs	r2, #0
    78c6:	4629      	mov	r1, r5
    78c8:	f242 000c 	movw	r0, #8204	; 0x200c
    78cc:	f7fe fec8 	bl	6660 <bt_hci_cmd_send_sync>
	if (err) {
		return err;
	}

	return 0;
}
    78d0:	b007      	add	sp, #28
    78d2:	bd30      	pop	{r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    78d4:	2300      	movs	r3, #0
    78d6:	e7e9      	b.n	78ac <bt_le_scan_set_enable_legacy+0x30>
		return -ENOBUFS;
    78d8:	f06f 0068 	mvn.w	r0, #104	; 0x68
    78dc:	e7f8      	b.n	78d0 <bt_le_scan_set_enable_legacy+0x54>
    78de:	bf00      	nop
    78e0:	2000014c 	.word	0x2000014c

000078e4 <bt_scan_reset>:
	scan_dev_found_cb = NULL;
    78e4:	4b01      	ldr	r3, [pc, #4]	; (78ec <bt_scan_reset+0x8>)
    78e6:	2200      	movs	r2, #0
    78e8:	601a      	str	r2, [r3, #0]
}
    78ea:	4770      	bx	lr
    78ec:	2000230c 	.word	0x2000230c

000078f0 <bt_le_scan_update>:
    78f0:	4b0a      	ldr	r3, [pc, #40]	; (791c <bt_le_scan_update+0x2c>)
    78f2:	f3bf 8f5b 	dmb	ish
    78f6:	681a      	ldr	r2, [r3, #0]
    78f8:	f3bf 8f5b 	dmb	ish
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
}

int bt_le_scan_update(bool fast_scan)
{
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    78fc:	f3c2 1080 	ubfx	r0, r2, #6, #1
    7900:	0652      	lsls	r2, r2, #25
    7902:	d408      	bmi.n	7916 <bt_le_scan_update+0x26>
    7904:	f3bf 8f5b 	dmb	ish
    7908:	681b      	ldr	r3, [r3, #0]
    790a:	f3bf 8f5b 	dmb	ish
		return 0;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    790e:	069b      	lsls	r3, r3, #26
    7910:	d501      	bpl.n	7916 <bt_le_scan_update+0x26>
	return bt_le_scan_set_enable_legacy(enable);
    7912:	f7ff bfb3 	b.w	787c <bt_le_scan_set_enable_legacy>
		return start_passive_scan(fast_scan);
	}
#endif

	return 0;
}
    7916:	2000      	movs	r0, #0
    7918:	4770      	bx	lr
    791a:	bf00      	nop
    791c:	2000014c 	.word	0x2000014c

00007920 <bt_hci_le_adv_report>:
#endif /* CONFIG_BT_DF_CONNECTIONLESS_CTE_RX */
#endif /* defined(CONFIG_BT_PER_ADV_SYNC) */
#endif /* defined(CONFIG_BT_EXT_ADV) */

void bt_hci_le_adv_report(struct net_buf *buf)
{
    7920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
    7924:	f100 0808 	add.w	r8, r0, #8
    7928:	b08b      	sub	sp, #44	; 0x2c
    792a:	4604      	mov	r4, r0
    792c:	4640      	mov	r0, r8
    792e:	f01d fa7d 	bl	24e2c <net_buf_simple_pull_u8>
	if (scan_dev_found_cb) {
    7932:	f8df b144 	ldr.w	fp, [pc, #324]	; 7a78 <bt_hci_le_adv_report+0x158>
    7936:	4606      	mov	r6, r0
	uint8_t num_reports = net_buf_pull_u8(buf);
	struct bt_hci_evt_le_advertising_info *evt;

	BT_DBG("Adv number of reports %u",  num_reports);

	while (num_reports--) {
    7938:	b916      	cbnz	r6, 7940 <bt_hci_le_adv_report+0x20>

		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);

		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
	}
}
    793a:	b00b      	add	sp, #44	; 0x2c
    793c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (buf->len < sizeof(*evt)) {
    7940:	89a3      	ldrh	r3, [r4, #12]
    7942:	2b08      	cmp	r3, #8
    7944:	d9f9      	bls.n	793a <bt_hci_le_adv_report+0x1a>
	return net_buf_simple_pull_mem(&buf->b, len);
    7946:	2109      	movs	r1, #9
    7948:	4640      	mov	r0, r8
    794a:	f01d fa67 	bl	24e1c <net_buf_simple_pull_mem>
		adv_info.rssi = evt->data[evt->length];
    794e:	f890 9008 	ldrb.w	r9, [r0, #8]
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
    7952:	237f      	movs	r3, #127	; 0x7f
    7954:	f88d 301e 	strb.w	r3, [sp, #30]
		adv_info.rssi = evt->data[evt->length];
    7958:	eb00 0309 	add.w	r3, r0, r9
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    795c:	2201      	movs	r2, #1
		adv_info.rssi = evt->data[evt->length];
    795e:	7a5b      	ldrb	r3, [r3, #9]
    7960:	f88d 301d 	strb.w	r3, [sp, #29]
		adv_info.sid = BT_GAP_SID_INVALID;
    7964:	23ff      	movs	r3, #255	; 0xff
    7966:	f88d 301c 	strb.w	r3, [sp, #28]
		adv_info.interval = 0U;
    796a:	2300      	movs	r3, #0
    796c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    7970:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
		adv_info.adv_type = evt->evt_type;
    7974:	7802      	ldrb	r2, [r0, #0]
    7976:	f88d 201f 	strb.w	r2, [sp, #31]
    797a:	2a04      	cmp	r2, #4
    797c:	bf9c      	itt	ls
    797e:	4b3f      	ldrls	r3, [pc, #252]	; (7a7c <bt_hci_le_adv_report+0x15c>)
    7980:	5c9b      	ldrbls	r3, [r3, r2]
		adv_info.adv_props = get_adv_props_legacy(evt->evt_type);
    7982:	f8ad 3020 	strh.w	r3, [sp, #32]
    7986:	4b3e      	ldr	r3, [pc, #248]	; (7a80 <bt_hci_le_adv_report+0x160>)
    7988:	f3bf 8f5b 	dmb	ish
    798c:	681b      	ldr	r3, [r3, #0]
    798e:	f3bf 8f5b 	dmb	ish
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    7992:	065a      	lsls	r2, r3, #25
    7994:	4605      	mov	r5, r0
		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);
    7996:	f100 0101 	add.w	r1, r0, #1
    799a:	fa1f f989 	uxth.w	r9, r9
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    799e:	d50b      	bpl.n	79b8 <bt_hci_le_adv_report+0x98>
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
    79a0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    79a4:	075b      	lsls	r3, r3, #29
    79a6:	d507      	bpl.n	79b8 <bt_hci_le_adv_report+0x98>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
    79a8:	7a29      	ldrb	r1, [r5, #8]
	return net_buf_simple_pull(&buf->b, len);
    79aa:	4640      	mov	r0, r8
    79ac:	3101      	adds	r1, #1
    79ae:	3e01      	subs	r6, #1
    79b0:	f01d fa2c 	bl	24e0c <net_buf_simple_pull>
    79b4:	b2f6      	uxtb	r6, r6
    79b6:	e7bf      	b.n	7938 <bt_hci_le_adv_report+0x18>
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
    79b8:	786b      	ldrb	r3, [r5, #1]
    79ba:	1e9a      	subs	r2, r3, #2
    79bc:	2a01      	cmp	r2, #1
    79be:	d848      	bhi.n	7a52 <bt_hci_le_adv_report+0x132>
	memcpy(dst, src, sizeof(*dst));
    79c0:	2207      	movs	r2, #7
    79c2:	a802      	add	r0, sp, #8
    79c4:	f016 fb35 	bl	1e032 <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    79c8:	f89d 3008 	ldrb.w	r3, [sp, #8]
    79cc:	3b02      	subs	r3, #2
    79ce:	f88d 3008 	strb.w	r3, [sp, #8]
	info->addr = &id_addr;
    79d2:	ab02      	add	r3, sp, #8
    79d4:	9306      	str	r3, [sp, #24]
	if (scan_dev_found_cb) {
    79d6:	f8db 3000 	ldr.w	r3, [fp]
    79da:	b1a3      	cbz	r3, 7a06 <bt_hci_le_adv_report+0xe6>
	state->offset = net_buf_simple_headroom(buf);
    79dc:	4640      	mov	r0, r8
    79de:	f01d fa50 	bl	24e82 <net_buf_simple_headroom>
	state->len = buf->len;
    79e2:	89a7      	ldrh	r7, [r4, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
    79e4:	f89d 201f 	ldrb.w	r2, [sp, #31]
    79e8:	f99d 101d 	ldrsb.w	r1, [sp, #29]
    79ec:	f8db c000 	ldr.w	ip, [fp]
		buf->len = len;
    79f0:	f8a4 900c 	strh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    79f4:	4682      	mov	sl, r0
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
    79f6:	4643      	mov	r3, r8
    79f8:	a802      	add	r0, sp, #8
    79fa:	47e0      	blx	ip
	buf->data = buf->__buf + state->offset;
    79fc:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    79fe:	81a7      	strh	r7, [r4, #12]
	buf->data = buf->__buf + state->offset;
    7a00:	fa10 f08a 	uxtah	r0, r0, sl
    7a04:	60a0      	str	r0, [r4, #8]
	return list->head;
    7a06:	4b1f      	ldr	r3, [pc, #124]	; (7a84 <bt_hci_le_adv_report+0x164>)
    7a08:	681a      	ldr	r2, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    7a0a:	2a00      	cmp	r2, #0
    7a0c:	d0cc      	beq.n	79a8 <bt_hci_le_adv_report+0x88>
	return node->next;
    7a0e:	f852 7908 	ldr.w	r7, [r2], #-8
    7a12:	b107      	cbz	r7, 7a16 <bt_hci_le_adv_report+0xf6>
    7a14:	3f08      	subs	r7, #8
		if (listener->recv) {
    7a16:	6813      	ldr	r3, [r2, #0]
    7a18:	9201      	str	r2, [sp, #4]
    7a1a:	b193      	cbz	r3, 7a42 <bt_hci_le_adv_report+0x122>
	state->offset = net_buf_simple_headroom(buf);
    7a1c:	4640      	mov	r0, r8
    7a1e:	f01d fa30 	bl	24e82 <net_buf_simple_headroom>
			listener->recv(info, buf);
    7a22:	9a01      	ldr	r2, [sp, #4]
	state->len = buf->len;
    7a24:	89a3      	ldrh	r3, [r4, #12]
    7a26:	6812      	ldr	r2, [r2, #0]
			buf->len = len;
    7a28:	f8a4 900c 	strh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    7a2c:	4682      	mov	sl, r0
			listener->recv(info, buf);
    7a2e:	4641      	mov	r1, r8
    7a30:	a806      	add	r0, sp, #24
	state->len = buf->len;
    7a32:	9300      	str	r3, [sp, #0]
    7a34:	4790      	blx	r2
	buf->data = buf->__buf + state->offset;
    7a36:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    7a38:	9b00      	ldr	r3, [sp, #0]
    7a3a:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf + state->offset;
    7a3c:	fa10 f08a 	uxtah	r0, r0, sl
    7a40:	60a0      	str	r0, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    7a42:	2f00      	cmp	r7, #0
    7a44:	d0b0      	beq.n	79a8 <bt_hci_le_adv_report+0x88>
    7a46:	68bb      	ldr	r3, [r7, #8]
    7a48:	b103      	cbz	r3, 7a4c <bt_hci_le_adv_report+0x12c>
    7a4a:	3b08      	subs	r3, #8
		adv_info.adv_type = evt->evt_type;
    7a4c:	463a      	mov	r2, r7
    7a4e:	461f      	mov	r7, r3
    7a50:	e7e1      	b.n	7a16 <bt_hci_le_adv_report+0xf6>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
    7a52:	2bff      	cmp	r3, #255	; 0xff
    7a54:	d109      	bne.n	7a6a <bt_hci_le_adv_report+0x14a>
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
    7a56:	2300      	movs	r3, #0
    7a58:	9304      	str	r3, [sp, #16]
    7a5a:	2207      	movs	r2, #7
    7a5c:	f8cd 3013 	str.w	r3, [sp, #19]
    7a60:	a904      	add	r1, sp, #16
    7a62:	a802      	add	r0, sp, #8
    7a64:	f016 fae5 	bl	1e032 <memcpy>
}
    7a68:	e7b3      	b.n	79d2 <bt_hci_le_adv_report+0xb2>
		bt_addr_le_copy(&id_addr,
    7a6a:	2000      	movs	r0, #0
    7a6c:	f016 ffa6 	bl	1e9bc <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
    7a70:	2207      	movs	r2, #7
    7a72:	4601      	mov	r1, r0
    7a74:	e7f5      	b.n	7a62 <bt_hci_le_adv_report+0x142>
    7a76:	bf00      	nop
    7a78:	2000230c 	.word	0x2000230c
    7a7c:	000275e5 	.word	0x000275e5
    7a80:	2000014c 	.word	0x2000014c
    7a84:	20002304 	.word	0x20002304

00007a88 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
    7a88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    7a8c:	4c62      	ldr	r4, [pc, #392]	; (7c18 <bt_le_scan_start+0x190>)
    7a8e:	f3bf 8f5b 	dmb	ish
    7a92:	6823      	ldr	r3, [r4, #0]
    7a94:	f3bf 8f5b 	dmb	ish
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    7a98:	f013 0f02 	tst.w	r3, #2
{
    7a9c:	4605      	mov	r5, r0
    7a9e:	460f      	mov	r7, r1
    7aa0:	4626      	mov	r6, r4
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    7aa2:	f000 80b6 	beq.w	7c12 <bt_le_scan_start+0x18a>
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    7aa6:	7802      	ldrb	r2, [r0, #0]
    7aa8:	2a01      	cmp	r2, #1
    7aaa:	d905      	bls.n	7ab8 <bt_le_scan_start+0x30>
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
    7aac:	f06f 0415 	mvn.w	r4, #21
	}

	scan_dev_found_cb = cb;

	return 0;
}
    7ab0:	4620      	mov	r0, r4
    7ab2:	b003      	add	sp, #12
    7ab4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
    7ab8:	6843      	ldr	r3, [r0, #4]
    7aba:	f033 030f 	bics.w	r3, r3, #15
    7abe:	d1f5      	bne.n	7aac <bt_le_scan_start+0x24>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
    7ac0:	8900      	ldrh	r0, [r0, #8]
    7ac2:	1f03      	subs	r3, r0, #4
    7ac4:	b29b      	uxth	r3, r3
    7ac6:	f643 7cfc 	movw	ip, #16380	; 0x3ffc
    7aca:	4563      	cmp	r3, ip
    7acc:	d8ee      	bhi.n	7aac <bt_le_scan_start+0x24>
	if (param->window < 0x0004 || param->window > 0x4000) {
    7ace:	8969      	ldrh	r1, [r5, #10]
    7ad0:	1f0b      	subs	r3, r1, #4
    7ad2:	b29b      	uxth	r3, r3
    7ad4:	4563      	cmp	r3, ip
    7ad6:	d8e9      	bhi.n	7aac <bt_le_scan_start+0x24>
	if (param->window > param->interval) {
    7ad8:	4288      	cmp	r0, r1
    7ada:	d3e7      	bcc.n	7aac <bt_le_scan_start+0x24>
	if (param->type && !bt_id_scan_random_addr_check()) {
    7adc:	b98a      	cbnz	r2, 7b02 <bt_le_scan_start+0x7a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7ade:	f3bf 8f5b 	dmb	ish
    7ae2:	e856 0f00 	ldrex	r0, [r6]
    7ae6:	f040 0340 	orr.w	r3, r0, #64	; 0x40
    7aea:	e846 3200 	strex	r2, r3, [r6]
    7aee:	2a00      	cmp	r2, #0
    7af0:	d1f7      	bne.n	7ae2 <bt_le_scan_start+0x5a>
    7af2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    7af6:	f010 0040 	ands.w	r0, r0, #64	; 0x40
    7afa:	d007      	beq.n	7b0c <bt_le_scan_start+0x84>
		return -EALREADY;
    7afc:	f06f 0477 	mvn.w	r4, #119	; 0x77
    7b00:	e7d6      	b.n	7ab0 <bt_le_scan_start+0x28>
	if (param->type && !bt_id_scan_random_addr_check()) {
    7b02:	f016 ff81 	bl	1ea08 <bt_id_scan_random_addr_check>
    7b06:	2800      	cmp	r0, #0
    7b08:	d1e9      	bne.n	7ade <bt_le_scan_start+0x56>
    7b0a:	e7cf      	b.n	7aac <bt_le_scan_start+0x24>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7b0c:	f3bf 8f5b 	dmb	ish
    7b10:	6823      	ldr	r3, [r4, #0]
    7b12:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    7b16:	0699      	lsls	r1, r3, #26
    7b18:	d509      	bpl.n	7b2e <bt_le_scan_start+0xa6>
	return bt_le_scan_set_enable_legacy(enable);
    7b1a:	f7ff feaf 	bl	787c <bt_le_scan_set_enable_legacy>
		if (err) {
    7b1e:	4604      	mov	r4, r0
    7b20:	b128      	cbz	r0, 7b2e <bt_le_scan_start+0xa6>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    7b22:	f06f 0140 	mvn.w	r1, #64	; 0x40
    7b26:	483c      	ldr	r0, [pc, #240]	; (7c18 <bt_le_scan_start+0x190>)
    7b28:	f017 f8c4 	bl	1ecb4 <atomic_and>
		return err;
    7b2c:	e7c0      	b.n	7ab0 <bt_le_scan_start+0x28>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
    7b2e:	686b      	ldr	r3, [r5, #4]
	if (val) {
    7b30:	07da      	lsls	r2, r3, #31
    7b32:	d515      	bpl.n	7b60 <bt_le_scan_start+0xd8>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7b34:	f3bf 8f5b 	dmb	ish
    7b38:	e856 3f00 	ldrex	r3, [r6]
    7b3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    7b40:	e846 3200 	strex	r2, r3, [r6]
    7b44:	2a00      	cmp	r2, #0
    7b46:	d1f7      	bne.n	7b38 <bt_le_scan_start+0xb0>
    7b48:	f3bf 8f5b 	dmb	ish
		if (param->timeout) {
    7b4c:	89ac      	ldrh	r4, [r5, #12]
    7b4e:	b16c      	cbz	r4, 7b6c <bt_le_scan_start+0xe4>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    7b50:	4831      	ldr	r0, [pc, #196]	; (7c18 <bt_le_scan_start+0x190>)
    7b52:	f06f 0140 	mvn.w	r1, #64	; 0x40
    7b56:	f017 f8ad 	bl	1ecb4 <atomic_and>
			return -ENOTSUP;
    7b5a:	f06f 0485 	mvn.w	r4, #133	; 0x85
    7b5e:	e7a7      	b.n	7ab0 <bt_le_scan_start+0x28>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    7b60:	f46f 7180 	mvn.w	r1, #256	; 0x100
    7b64:	482c      	ldr	r0, [pc, #176]	; (7c18 <bt_le_scan_start+0x190>)
    7b66:	f017 f8a5 	bl	1ecb4 <atomic_and>
    7b6a:	e7ef      	b.n	7b4c <bt_le_scan_start+0xc4>
		err = start_le_scan_legacy(param->type, param->interval,
    7b6c:	f895 8000 	ldrb.w	r8, [r5]
    7b70:	f8b5 9008 	ldrh.w	r9, [r5, #8]
    7b74:	896d      	ldrh	r5, [r5, #10]
	(void)memset(&set_param, 0, sizeof(set_param));
    7b76:	4621      	mov	r1, r4
    7b78:	2207      	movs	r2, #7
    7b7a:	4668      	mov	r0, sp
    7b7c:	f016 fa64 	bl	1e048 <memset>
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
    7b80:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    7b84:	4258      	negs	r0, r3
    7b86:	f10d 0105 	add.w	r1, sp, #5
    7b8a:	4158      	adcs	r0, r3
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_NO_FILTER;
    7b8c:	f88d 4006 	strb.w	r4, [sp, #6]
	set_param.scan_type = scan_type;
    7b90:	f88d 8000 	strb.w	r8, [sp]
	set_param.interval = sys_cpu_to_le16(interval);
    7b94:	f8ad 9001 	strh.w	r9, [sp, #1]
	set_param.window = sys_cpu_to_le16(window);
    7b98:	f8ad 5003 	strh.w	r5, [sp, #3]
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
    7b9c:	f7ff fb4e 	bl	723c <bt_id_set_scan_own_addr>
	if (err) {
    7ba0:	4604      	mov	r4, r0
    7ba2:	2800      	cmp	r0, #0
    7ba4:	d1bd      	bne.n	7b22 <bt_le_scan_start+0x9a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    7ba6:	2107      	movs	r1, #7
    7ba8:	f242 000b 	movw	r0, #8203	; 0x200b
    7bac:	f7fe fcd2 	bl	6554 <bt_hci_cmd_create>
	if (!buf) {
    7bb0:	4605      	mov	r5, r0
    7bb2:	b358      	cbz	r0, 7c0c <bt_le_scan_start+0x184>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    7bb4:	2207      	movs	r2, #7
    7bb6:	4669      	mov	r1, sp
    7bb8:	3008      	adds	r0, #8
    7bba:	f01d f8b2 	bl	24d22 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
    7bbe:	4622      	mov	r2, r4
    7bc0:	4629      	mov	r1, r5
    7bc2:	f242 000b 	movw	r0, #8203	; 0x200b
    7bc6:	f7fe fd4b 	bl	6660 <bt_hci_cmd_send_sync>
	if (err) {
    7bca:	4604      	mov	r4, r0
    7bcc:	2800      	cmp	r0, #0
    7bce:	d1a8      	bne.n	7b22 <bt_le_scan_start+0x9a>
	return bt_le_scan_set_enable_legacy(enable);
    7bd0:	2001      	movs	r0, #1
    7bd2:	f7ff fe53 	bl	787c <bt_le_scan_set_enable_legacy>
	if (err) {
    7bd6:	4604      	mov	r4, r0
    7bd8:	2800      	cmp	r0, #0
    7bda:	d1a2      	bne.n	7b22 <bt_le_scan_start+0x9a>
	if (val) {
    7bdc:	f1b8 0f01 	cmp.w	r8, #1
    7be0:	d10e      	bne.n	7c00 <bt_le_scan_start+0x178>
    7be2:	f3bf 8f5b 	dmb	ish
    7be6:	e856 3f00 	ldrex	r3, [r6]
    7bea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    7bee:	e846 3200 	strex	r2, r3, [r6]
    7bf2:	2a00      	cmp	r2, #0
    7bf4:	d1f7      	bne.n	7be6 <bt_le_scan_start+0x15e>
    7bf6:	f3bf 8f5b 	dmb	ish
	scan_dev_found_cb = cb;
    7bfa:	4b08      	ldr	r3, [pc, #32]	; (7c1c <bt_le_scan_start+0x194>)
    7bfc:	601f      	str	r7, [r3, #0]
	return 0;
    7bfe:	e757      	b.n	7ab0 <bt_le_scan_start+0x28>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    7c00:	f06f 0180 	mvn.w	r1, #128	; 0x80
    7c04:	4804      	ldr	r0, [pc, #16]	; (7c18 <bt_le_scan_start+0x190>)
    7c06:	f017 f855 	bl	1ecb4 <atomic_and>
	if (err) {
    7c0a:	e7f6      	b.n	7bfa <bt_le_scan_start+0x172>
		return -ENOBUFS;
    7c0c:	f06f 0468 	mvn.w	r4, #104	; 0x68
    7c10:	e787      	b.n	7b22 <bt_le_scan_start+0x9a>
		return -EAGAIN;
    7c12:	f06f 040a 	mvn.w	r4, #10
    7c16:	e74b      	b.n	7ab0 <bt_le_scan_start+0x28>
    7c18:	2000014c 	.word	0x2000014c
    7c1c:	2000230c 	.word	0x2000230c

00007c20 <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
    7c20:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    7c22:	4808      	ldr	r0, [pc, #32]	; (7c44 <bt_le_scan_stop+0x24>)
    7c24:	f06f 0140 	mvn.w	r1, #64	; 0x40
    7c28:	f017 f844 	bl	1ecb4 <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    7c2c:	0643      	lsls	r3, r0, #25
    7c2e:	d506      	bpl.n	7c3e <bt_le_scan_stop+0x1e>
	scan_dev_found_cb = NULL;
    7c30:	4b05      	ldr	r3, [pc, #20]	; (7c48 <bt_le_scan_stop+0x28>)
    7c32:	2000      	movs	r0, #0
    7c34:	6018      	str	r0, [r3, #0]
		bt_id_pending_keys_update();
#endif
	}

	return bt_le_scan_update(false);
}
    7c36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
    7c3a:	f7ff be59 	b.w	78f0 <bt_le_scan_update>
}
    7c3e:	f06f 0077 	mvn.w	r0, #119	; 0x77
    7c42:	bd08      	pop	{r3, pc}
    7c44:	2000014c 	.word	0x2000014c
    7c48:	2000230c 	.word	0x2000230c

00007c4c <bt_pub_key_gen>:
{
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
}

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
    7c4c:	b570      	push	{r4, r5, r6, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
    7c4e:	4b31      	ldr	r3, [pc, #196]	; (7d14 <bt_pub_key_gen+0xc8>)
    7c50:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
    7c54:	f003 0306 	and.w	r3, r3, #6
    7c58:	2b06      	cmp	r3, #6
    7c5a:	d152      	bne.n	7d02 <bt_pub_key_gen+0xb6>
			new_cb->func(debug_public_key);
			return 0;
		}
	}

	if (!new_cb) {
    7c5c:	2800      	cmp	r0, #0
    7c5e:	d053      	beq.n	7d08 <bt_pub_key_gen+0xbc>
	return list->head;
    7c60:	4e2d      	ldr	r6, [pc, #180]	; (7d18 <bt_pub_key_gen+0xcc>)
    7c62:	6832      	ldr	r2, [r6, #0]
		return -EINVAL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    7c64:	b132      	cbz	r2, 7c74 <bt_pub_key_gen+0x28>
    7c66:	1f13      	subs	r3, r2, #4
		if (cb == new_cb) {
    7c68:	4298      	cmp	r0, r3
    7c6a:	d050      	beq.n	7d0e <bt_pub_key_gen+0xc2>
	return node->next;
    7c6c:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    7c6e:	b10b      	cbz	r3, 7c74 <bt_pub_key_gen+0x28>
    7c70:	3b04      	subs	r3, #4
    7c72:	e7f9      	b.n	7c68 <bt_pub_key_gen+0x1c>
	parent->next = child;
    7c74:	6042      	str	r2, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
    7c76:	6872      	ldr	r2, [r6, #4]
			BT_WARN("Callback already registered");
			return -EALREADY;
		}
	}

	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
    7c78:	1d03      	adds	r3, r0, #4
	list->head = node;
    7c7a:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
    7c7c:	b902      	cbnz	r2, 7c80 <bt_pub_key_gen+0x34>
	list->tail = node;
    7c7e:	6073      	str	r3, [r6, #4]
    7c80:	4c26      	ldr	r4, [pc, #152]	; (7d1c <bt_pub_key_gen+0xd0>)
    7c82:	f3bf 8f5b 	dmb	ish
    7c86:	e854 2f00 	ldrex	r2, [r4]
    7c8a:	f042 0310 	orr.w	r3, r2, #16
    7c8e:	e844 3100 	strex	r1, r3, [r4]
    7c92:	2900      	cmp	r1, #0
    7c94:	d1f7      	bne.n	7c86 <bt_pub_key_gen+0x3a>
    7c96:	f3bf 8f5b 	dmb	ish

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    7c9a:	f012 0210 	ands.w	r2, r2, #16
    7c9e:	d002      	beq.n	7ca6 <bt_pub_key_gen+0x5a>
		return 0;
    7ca0:	2500      	movs	r5, #0
		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
}
    7ca2:	4628      	mov	r0, r5
    7ca4:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7ca6:	f3bf 8f5b 	dmb	ish
    7caa:	e854 3f00 	ldrex	r3, [r4]
    7cae:	f023 0308 	bic.w	r3, r3, #8
    7cb2:	e844 3100 	strex	r1, r3, [r4]
    7cb6:	2900      	cmp	r1, #0
    7cb8:	d1f7      	bne.n	7caa <bt_pub_key_gen+0x5e>
    7cba:	f3bf 8f5b 	dmb	ish
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
    7cbe:	4611      	mov	r1, r2
    7cc0:	f242 0025 	movw	r0, #8229	; 0x2025
    7cc4:	f7fe fccc 	bl	6660 <bt_hci_cmd_send_sync>
	if (err) {
    7cc8:	4605      	mov	r5, r0
    7cca:	2800      	cmp	r0, #0
    7ccc:	d0e8      	beq.n	7ca0 <bt_pub_key_gen+0x54>
    7cce:	f3bf 8f5b 	dmb	ish
    7cd2:	e854 3f00 	ldrex	r3, [r4]
    7cd6:	f023 0310 	bic.w	r3, r3, #16
    7cda:	e844 3200 	strex	r2, r3, [r4]
    7cde:	2a00      	cmp	r2, #0
    7ce0:	d1f7      	bne.n	7cd2 <bt_pub_key_gen+0x86>
    7ce2:	f3bf 8f5b 	dmb	ish
	return list->head;
    7ce6:	6834      	ldr	r4, [r6, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    7ce8:	b13c      	cbz	r4, 7cfa <bt_pub_key_gen+0xae>
			if (cb->func) {
    7cea:	f854 3c04 	ldr.w	r3, [r4, #-4]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    7cee:	3c04      	subs	r4, #4
			if (cb->func) {
    7cf0:	b10b      	cbz	r3, 7cf6 <bt_pub_key_gen+0xaa>
				cb->func(NULL);
    7cf2:	2000      	movs	r0, #0
    7cf4:	4798      	blx	r3
	return node->next;
    7cf6:	6864      	ldr	r4, [r4, #4]
    7cf8:	e7f6      	b.n	7ce8 <bt_pub_key_gen+0x9c>
	list->head = NULL;
    7cfa:	2300      	movs	r3, #0
	list->tail = NULL;
    7cfc:	e9c6 3300 	strd	r3, r3, [r6]
		return err;
    7d00:	e7cf      	b.n	7ca2 <bt_pub_key_gen+0x56>
		return -ENOTSUP;
    7d02:	f06f 0585 	mvn.w	r5, #133	; 0x85
    7d06:	e7cc      	b.n	7ca2 <bt_pub_key_gen+0x56>
		return -EINVAL;
    7d08:	f06f 0515 	mvn.w	r5, #21
    7d0c:	e7c9      	b.n	7ca2 <bt_pub_key_gen+0x56>
			return -EALREADY;
    7d0e:	f06f 0577 	mvn.w	r5, #119	; 0x77
    7d12:	e7c6      	b.n	7ca2 <bt_pub_key_gen+0x56>
    7d14:	20000080 	.word	0x20000080
    7d18:	20002314 	.word	0x20002314
    7d1c:	2000014c 	.word	0x2000014c

00007d20 <bt_hci_evt_le_pkey_complete>:

	return 0;
}

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
    7d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7d22:	4c1b      	ldr	r4, [pc, #108]	; (7d90 <bt_hci_evt_le_pkey_complete+0x70>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
    7d24:	6886      	ldr	r6, [r0, #8]
    7d26:	f3bf 8f5b 	dmb	ish
    7d2a:	e854 3f00 	ldrex	r3, [r4]
    7d2e:	f023 0310 	bic.w	r3, r3, #16
    7d32:	e844 3200 	strex	r2, r3, [r4]
    7d36:	2a00      	cmp	r2, #0
    7d38:	d1f7      	bne.n	7d2a <bt_hci_evt_le_pkey_complete+0xa>
    7d3a:	f3bf 8f5b 	dmb	ish

	BT_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
    7d3e:	7833      	ldrb	r3, [r6, #0]
    7d40:	b983      	cbnz	r3, 7d64 <bt_hci_evt_le_pkey_complete+0x44>
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
    7d42:	4814      	ldr	r0, [pc, #80]	; (7d94 <bt_hci_evt_le_pkey_complete+0x74>)
    7d44:	2240      	movs	r2, #64	; 0x40
    7d46:	1c71      	adds	r1, r6, #1
    7d48:	f016 f973 	bl	1e032 <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7d4c:	f3bf 8f5b 	dmb	ish
    7d50:	e854 3f00 	ldrex	r3, [r4]
    7d54:	f043 0308 	orr.w	r3, r3, #8
    7d58:	e844 3200 	strex	r2, r3, [r4]
    7d5c:	2a00      	cmp	r2, #0
    7d5e:	d1f7      	bne.n	7d50 <bt_hci_evt_le_pkey_complete+0x30>
    7d60:	f3bf 8f5b 	dmb	ish
	return list->head;
    7d64:	4d0c      	ldr	r5, [pc, #48]	; (7d98 <bt_hci_evt_le_pkey_complete+0x78>)
    7d66:	682c      	ldr	r4, [r5, #0]
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    7d68:	b16c      	cbz	r4, 7d86 <bt_hci_evt_le_pkey_complete+0x66>
		if (cb->func) {
			cb->func(evt->status ? NULL : pub_key);
    7d6a:	4f0a      	ldr	r7, [pc, #40]	; (7d94 <bt_hci_evt_le_pkey_complete+0x74>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    7d6c:	3c04      	subs	r4, #4
		if (cb->func) {
    7d6e:	6823      	ldr	r3, [r4, #0]
    7d70:	b12b      	cbz	r3, 7d7e <bt_hci_evt_le_pkey_complete+0x5e>
			cb->func(evt->status ? NULL : pub_key);
    7d72:	7832      	ldrb	r2, [r6, #0]
    7d74:	2a00      	cmp	r2, #0
    7d76:	bf0c      	ite	eq
    7d78:	4638      	moveq	r0, r7
    7d7a:	2000      	movne	r0, #0
    7d7c:	4798      	blx	r3
	return node->next;
    7d7e:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    7d80:	b10c      	cbz	r4, 7d86 <bt_hci_evt_le_pkey_complete+0x66>
    7d82:	3c04      	subs	r4, #4
    7d84:	e7f3      	b.n	7d6e <bt_hci_evt_le_pkey_complete+0x4e>
	list->head = NULL;
    7d86:	2300      	movs	r3, #0
	list->tail = NULL;
    7d88:	e9c5 3300 	strd	r3, r3, [r5]
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
    7d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7d8e:	bf00      	nop
    7d90:	2000014c 	.word	0x2000014c
    7d94:	20004074 	.word	0x20004074
    7d98:	20002314 	.word	0x20002314

00007d9c <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	BT_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
    7d9c:	4905      	ldr	r1, [pc, #20]	; (7db4 <bt_hci_evt_le_dhkey_complete+0x18>)
    7d9e:	680b      	ldr	r3, [r1, #0]
    7da0:	b133      	cbz	r3, 7db0 <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
    7da2:	6882      	ldr	r2, [r0, #8]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
    7da4:	2000      	movs	r0, #0
    7da6:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
    7da8:	7811      	ldrb	r1, [r2, #0]
    7daa:	b901      	cbnz	r1, 7dae <bt_hci_evt_le_dhkey_complete+0x12>
    7dac:	1c50      	adds	r0, r2, #1
    7dae:	4718      	bx	r3
	}
}
    7db0:	4770      	bx	lr
    7db2:	bf00      	nop
    7db4:	20002310 	.word	0x20002310

00007db8 <tx_free>:
	}
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    7db8:	2300      	movs	r3, #0
	tx->user_data = NULL;
    7dba:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
    7dbe:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
    7dc0:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
    7dc2:	4801      	ldr	r0, [pc, #4]	; (7dc8 <tx_free+0x10>)
    7dc4:	f01d be5d 	b.w	25a82 <k_queue_append>
    7dc8:	20000f48 	.word	0x20000f48

00007dcc <notify_connected>:

static void notify_connected(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    7dcc:	4b0e      	ldr	r3, [pc, #56]	; (7e08 <notify_connected+0x3c>)
{
    7dce:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    7dd0:	681d      	ldr	r5, [r3, #0]
{
    7dd2:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    7dd4:	b955      	cbnz	r5, 7dec <notify_connected+0x20>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    7dd6:	4d0d      	ldr	r5, [pc, #52]	; (7e0c <notify_connected+0x40>)
    7dd8:	4e0d      	ldr	r6, [pc, #52]	; (7e10 <notify_connected+0x44>)
		if (cb->connected) {
			cb->connected(conn, conn->err);
    7dda:	7a61      	ldrb	r1, [r4, #9]
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    7ddc:	42b5      	cmp	r5, r6
    7dde:	d30c      	bcc.n	7dfa <notify_connected+0x2e>
		}
	}

	if (!conn->err) {
    7de0:	b989      	cbnz	r1, 7e06 <notify_connected+0x3a>
		bt_gatt_connected(conn);
    7de2:	4620      	mov	r0, r4
	}
}
    7de4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_gatt_connected(conn);
    7de8:	f002 b80c 	b.w	9e04 <bt_gatt_connected>
		if (cb->connected) {
    7dec:	682b      	ldr	r3, [r5, #0]
    7dee:	b113      	cbz	r3, 7df6 <notify_connected+0x2a>
			cb->connected(conn, conn->err);
    7df0:	7a61      	ldrb	r1, [r4, #9]
    7df2:	4620      	mov	r0, r4
    7df4:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    7df6:	692d      	ldr	r5, [r5, #16]
    7df8:	e7ec      	b.n	7dd4 <notify_connected+0x8>
		if (cb->connected) {
    7dfa:	682b      	ldr	r3, [r5, #0]
    7dfc:	b10b      	cbz	r3, 7e02 <notify_connected+0x36>
			cb->connected(conn, conn->err);
    7dfe:	4620      	mov	r0, r4
    7e00:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    7e02:	3514      	adds	r5, #20
    7e04:	e7e9      	b.n	7dda <notify_connected+0xe>
}
    7e06:	bd70      	pop	{r4, r5, r6, pc}
    7e08:	2000231c 	.word	0x2000231c
    7e0c:	0002659c 	.word	0x0002659c
    7e10:	000265c4 	.word	0x000265c4

00007e14 <send_frag>:
{
    7e14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
    7e18:	694d      	ldr	r5, [r1, #20]
{
    7e1a:	4604      	mov	r4, r0
    7e1c:	460e      	mov	r6, r1
    7e1e:	4690      	mov	r8, r2
    7e20:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
    7e22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7e26:	483e      	ldr	r0, [pc, #248]	; (7f20 <send_frag+0x10c>)
    7e28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7e2c:	f013 fa92 	bl	1b354 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
    7e30:	7aa3      	ldrb	r3, [r4, #10]
    7e32:	2b07      	cmp	r3, #7
    7e34:	d146      	bne.n	7ec4 <send_frag+0xb0>
	__asm__ volatile(
    7e36:	f04f 0320 	mov.w	r3, #32
    7e3a:	f3ef 8211 	mrs	r2, BASEPRI
    7e3e:	f383 8812 	msr	BASEPRI_MAX, r3
    7e42:	f3bf 8f6f 	isb	sy
	if (tx) {
    7e46:	69a3      	ldr	r3, [r4, #24]
    7e48:	2d00      	cmp	r5, #0
    7e4a:	d04d      	beq.n	7ee8 <send_frag+0xd4>
	parent->next = child;
    7e4c:	2100      	movs	r1, #0
    7e4e:	6029      	str	r1, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
    7e50:	2b00      	cmp	r3, #0
    7e52:	d146      	bne.n	7ee2 <send_frag+0xce>
	list->head = node;
    7e54:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
    7e58:	f382 8811 	msr	BASEPRI, r2
    7e5c:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
    7e60:	2104      	movs	r1, #4
    7e62:	f106 0008 	add.w	r0, r6, #8
    7e66:	f01c ffa4 	bl	24db2 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    7e6a:	8823      	ldrh	r3, [r4, #0]
    7e6c:	f008 08fd 	and.w	r8, r8, #253	; 0xfd
    7e70:	ea43 3808 	orr.w	r8, r3, r8, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    7e74:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    7e76:	f8a0 8000 	strh.w	r8, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    7e7a:	3b04      	subs	r3, #4
    7e7c:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    7e7e:	2302      	movs	r3, #2
    7e80:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
    7e82:	4630      	mov	r0, r6
    7e84:	f016 fd4f 	bl	1e926 <bt_send>
	if (err) {
    7e88:	2800      	cmp	r0, #0
    7e8a:	d047      	beq.n	7f1c <send_frag+0x108>
	__asm__ volatile(
    7e8c:	f04f 0320 	mov.w	r3, #32
    7e90:	f3ef 8011 	mrs	r0, BASEPRI
    7e94:	f383 8812 	msr	BASEPRI_MAX, r3
    7e98:	f3bf 8f6f 	isb	sy
		if (tx) {
    7e9c:	2d00      	cmp	r5, #0
    7e9e:	d037      	beq.n	7f10 <send_frag+0xfc>
	return list->head;
    7ea0:	6963      	ldr	r3, [r4, #20]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    7ea2:	2200      	movs	r2, #0
    7ea4:	b153      	cbz	r3, 7ebc <send_frag+0xa8>
    7ea6:	429d      	cmp	r5, r3
    7ea8:	d12f      	bne.n	7f0a <send_frag+0xf6>
	return node->next;
    7eaa:	682b      	ldr	r3, [r5, #0]
	return list->tail;
    7eac:	69a1      	ldr	r1, [r4, #24]
Z_GENLIST_REMOVE(slist, snode)
    7eae:	bb3a      	cbnz	r2, 7f00 <send_frag+0xec>
    7eb0:	42a9      	cmp	r1, r5
	list->head = node;
    7eb2:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
    7eb4:	d100      	bne.n	7eb8 <send_frag+0xa4>
	list->tail = node;
    7eb6:	61a3      	str	r3, [r4, #24]
	parent->next = child;
    7eb8:	2300      	movs	r3, #0
    7eba:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
    7ebc:	f380 8811 	msr	BASEPRI, r0
    7ec0:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    7ec4:	4816      	ldr	r0, [pc, #88]	; (7f20 <send_frag+0x10c>)
    7ec6:	f013 fa1f 	bl	1b308 <z_impl_k_sem_give>
	if (tx) {
    7eca:	b115      	cbz	r5, 7ed2 <send_frag+0xbe>
		tx_free(tx);
    7ecc:	4628      	mov	r0, r5
    7ece:	f7ff ff73 	bl	7db8 <tx_free>
	if (always_consume) {
    7ed2:	b11f      	cbz	r7, 7edc <send_frag+0xc8>
		net_buf_unref(buf);
    7ed4:	4630      	mov	r0, r6
    7ed6:	f00f f8cf 	bl	17078 <net_buf_unref>
	return false;
    7eda:	2700      	movs	r7, #0
}
    7edc:	4638      	mov	r0, r7
    7ede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7ee2:	601d      	str	r5, [r3, #0]
	list->tail = node;
    7ee4:	61a5      	str	r5, [r4, #24]
}
    7ee6:	e7b7      	b.n	7e58 <send_frag+0x44>
		if (tail_tx) {
    7ee8:	b133      	cbz	r3, 7ef8 <send_frag+0xe4>
			pending_no_cb = &tail_tx->pending_no_cb;
    7eea:	f103 090c 	add.w	r9, r3, #12
    7eee:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
    7ef0:	3301      	adds	r3, #1
    7ef2:	f8c9 3000 	str.w	r3, [r9]
    7ef6:	e7af      	b.n	7e58 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
    7ef8:	69e3      	ldr	r3, [r4, #28]
    7efa:	f104 091c 	add.w	r9, r4, #28
    7efe:	e7f7      	b.n	7ef0 <send_frag+0xdc>
Z_GENLIST_REMOVE(slist, snode)
    7f00:	42a9      	cmp	r1, r5
	parent->next = child;
    7f02:	6013      	str	r3, [r2, #0]
	list->tail = node;
    7f04:	bf08      	it	eq
    7f06:	61a2      	streq	r2, [r4, #24]
}
    7f08:	e7d6      	b.n	7eb8 <send_frag+0xa4>
	return node->next;
    7f0a:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    7f0c:	681b      	ldr	r3, [r3, #0]
    7f0e:	e7c9      	b.n	7ea4 <send_frag+0x90>
			(*pending_no_cb)--;
    7f10:	f8d9 3000 	ldr.w	r3, [r9]
    7f14:	3b01      	subs	r3, #1
    7f16:	f8c9 3000 	str.w	r3, [r9]
    7f1a:	e7cf      	b.n	7ebc <send_frag+0xa8>
	return true;
    7f1c:	2701      	movs	r7, #1
    7f1e:	e7dd      	b.n	7edc <send_frag+0xc8>
    7f20:	20000180 	.word	0x20000180

00007f24 <bt_conn_get_pkts>:
}
    7f24:	4800      	ldr	r0, [pc, #0]	; (7f28 <bt_conn_get_pkts+0x4>)
    7f26:	4770      	bx	lr
    7f28:	20000180 	.word	0x20000180

00007f2c <bt_conn_new>:
{
    7f2c:	b538      	push	{r3, r4, r5, lr}
    7f2e:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
    7f30:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    7f32:	2501      	movs	r5, #1
    7f34:	428b      	cmp	r3, r1
    7f36:	d102      	bne.n	7f3e <bt_conn_new+0x12>
		return NULL;
    7f38:	2400      	movs	r4, #0
}
    7f3a:	4620      	mov	r0, r4
    7f3c:	bd38      	pop	{r3, r4, r5, pc}
    7f3e:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
    7f42:	f3bf 8f5b 	dmb	ish
    7f46:	e852 0f00 	ldrex	r0, [r2]
    7f4a:	2800      	cmp	r0, #0
    7f4c:	d104      	bne.n	7f58 <bt_conn_new+0x2c>
    7f4e:	e842 5c00 	strex	ip, r5, [r2]
    7f52:	f1bc 0f00 	cmp.w	ip, #0
    7f56:	d1f6      	bne.n	7f46 <bt_conn_new+0x1a>
    7f58:	f3bf 8f5b 	dmb	ish
		if (atomic_cas(&conns[i].ref, 0, 1)) {
    7f5c:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    7f60:	d002      	beq.n	7f68 <bt_conn_new+0x3c>
	for (i = 0; i < size; i++) {
    7f62:	3301      	adds	r3, #1
    7f64:	4604      	mov	r4, r0
    7f66:	e7e5      	b.n	7f34 <bt_conn_new+0x8>
	if (!conn) {
    7f68:	2c00      	cmp	r4, #0
    7f6a:	d0e6      	beq.n	7f3a <bt_conn_new+0xe>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
    7f6c:	22b8      	movs	r2, #184	; 0xb8
    7f6e:	2100      	movs	r1, #0
    7f70:	4620      	mov	r0, r4
    7f72:	f016 f869 	bl	1e048 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
    7f76:	f104 0058 	add.w	r0, r4, #88	; 0x58
    7f7a:	4904      	ldr	r1, [pc, #16]	; (7f8c <bt_conn_new+0x60>)
    7f7c:	f01d fe88 	bl	25c90 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
    7f80:	4903      	ldr	r1, [pc, #12]	; (7f90 <bt_conn_new+0x64>)
    7f82:	f104 0028 	add.w	r0, r4, #40	; 0x28
    7f86:	f01d fe4d 	bl	25c24 <k_work_init>
	return conn;
    7f8a:	e7d6      	b.n	7f3a <bt_conn_new+0xe>
    7f8c:	0000849d 	.word	0x0000849d
    7f90:	0001ed1d 	.word	0x0001ed1d

00007f94 <bt_conn_send_cb>:
{
    7f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7f96:	461f      	mov	r7, r3
	if (conn->state != BT_CONN_CONNECTED) {
    7f98:	7a83      	ldrb	r3, [r0, #10]
    7f9a:	2b07      	cmp	r3, #7
{
    7f9c:	4604      	mov	r4, r0
    7f9e:	460d      	mov	r5, r1
    7fa0:	4616      	mov	r6, r2
	if (conn->state != BT_CONN_CONNECTED) {
    7fa2:	d114      	bne.n	7fce <bt_conn_send_cb+0x3a>
	if (cb) {
    7fa4:	b312      	cbz	r2, 7fec <bt_conn_send_cb+0x58>
	return z_impl_z_current_get();
    7fa6:	f013 fead 	bl	1bd04 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
    7faa:	4b13      	ldr	r3, [pc, #76]	; (7ff8 <bt_conn_send_cb+0x64>)
    7fac:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
    7fae:	4813      	ldr	r0, [pc, #76]	; (7ffc <bt_conn_send_cb+0x68>)
    7fb0:	bf07      	ittee	eq
    7fb2:	2200      	moveq	r2, #0
    7fb4:	2300      	moveq	r3, #0
    7fb6:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
    7fba:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
    7fbe:	f013 f96f 	bl	1b2a0 <z_impl_k_queue_get>
		if (!tx) {
    7fc2:	b1a8      	cbz	r0, 7ff0 <bt_conn_send_cb+0x5c>
		if (conn->state != BT_CONN_CONNECTED) {
    7fc4:	7aa3      	ldrb	r3, [r4, #10]
    7fc6:	2b07      	cmp	r3, #7
    7fc8:	d004      	beq.n	7fd4 <bt_conn_send_cb+0x40>
			tx_free(tx);
    7fca:	f7ff fef5 	bl	7db8 <tx_free>
		return -ENOTCONN;
    7fce:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    7fd2:	e00a      	b.n	7fea <bt_conn_send_cb+0x56>
		tx->pending_no_cb = 0U;
    7fd4:	2300      	movs	r3, #0
		tx->user_data = user_data;
    7fd6:	e9c0 6701 	strd	r6, r7, [r0, #4]
		tx->pending_no_cb = 0U;
    7fda:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
    7fdc:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
    7fde:	f104 0038 	add.w	r0, r4, #56	; 0x38
    7fe2:	4629      	mov	r1, r5
    7fe4:	f01c fe52 	bl	24c8c <net_buf_put>
	return 0;
    7fe8:	2000      	movs	r0, #0
}
    7fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tx_data(buf)->tx = NULL;
    7fec:	614a      	str	r2, [r1, #20]
    7fee:	e7f6      	b.n	7fde <bt_conn_send_cb+0x4a>
			return -ENOBUFS;
    7ff0:	f06f 0068 	mvn.w	r0, #104	; 0x68
    7ff4:	e7f9      	b.n	7fea <bt_conn_send_cb+0x56>
    7ff6:	bf00      	nop
    7ff8:	20001fe8 	.word	0x20001fe8
    7ffc:	20000f48 	.word	0x20000f48

00008000 <bt_conn_prepare_events>:
	conn_change.signaled = 0U;
    8000:	4b1b      	ldr	r3, [pc, #108]	; (8070 <bt_conn_prepare_events+0x70>)
{
    8002:	b510      	push	{r4, lr}
	conn_change.signaled = 0U;
    8004:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    8006:	2101      	movs	r1, #1
	conn_change.signaled = 0U;
    8008:	609a      	str	r2, [r3, #8]
{
    800a:	4604      	mov	r4, r0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    800c:	f01e f92e 	bl	2626c <k_poll_event_init>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    8010:	f3bf 8f5b 	dmb	ish
    8014:	4b17      	ldr	r3, [pc, #92]	; (8074 <bt_conn_prepare_events+0x74>)
    8016:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
    801a:	f3bf 8f5b 	dmb	ish
		if (!conn_prepare_events(conn, &events[ev_count])) {
    801e:	f104 0014 	add.w	r0, r4, #20
	if (!atomic_get(&conn->ref)) {
    8022:	b90a      	cbnz	r2, 8028 <bt_conn_prepare_events+0x28>
		conn_cleanup(conn);
    8024:	2001      	movs	r0, #1
}
    8026:	bd10      	pop	{r4, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
    8028:	7a9a      	ldrb	r2, [r3, #10]
    802a:	b99a      	cbnz	r2, 8054 <bt_conn_prepare_events+0x54>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    802c:	f3bf 8f5b 	dmb	ish
    8030:	1d1a      	adds	r2, r3, #4
    8032:	e852 1f00 	ldrex	r1, [r2]
    8036:	f021 0c40 	bic.w	ip, r1, #64	; 0x40
    803a:	e842 ce00 	strex	lr, ip, [r2]
    803e:	f1be 0f00 	cmp.w	lr, #0
    8042:	d1f6      	bne.n	8032 <bt_conn_prepare_events+0x32>
    8044:	f3bf 8f5b 	dmb	ish
    8048:	064a      	lsls	r2, r1, #25
    804a:	d503      	bpl.n	8054 <bt_conn_prepare_events+0x54>
		conn_cleanup(conn);
    804c:	4618      	mov	r0, r3
    804e:	f016 fe71 	bl	1ed34 <conn_cleanup>
    8052:	e7e7      	b.n	8024 <bt_conn_prepare_events+0x24>
	if (conn->state != BT_CONN_CONNECTED) {
    8054:	7a9b      	ldrb	r3, [r3, #10]
    8056:	2b07      	cmp	r3, #7
    8058:	d1e4      	bne.n	8024 <bt_conn_prepare_events+0x24>
	k_poll_event_init(&events[0],
    805a:	4b07      	ldr	r3, [pc, #28]	; (8078 <bt_conn_prepare_events+0x78>)
    805c:	2200      	movs	r2, #0
    805e:	2104      	movs	r1, #4
    8060:	f01e f904 	bl	2626c <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
    8064:	2301      	movs	r3, #1
    8066:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
    806a:	2002      	movs	r0, #2
	return ev_count;
    806c:	e7db      	b.n	8026 <bt_conn_prepare_events+0x26>
    806e:	bf00      	nop
    8070:	20000444 	.word	0x20000444
    8074:	200013a8 	.word	0x200013a8
    8078:	200013e0 	.word	0x200013e0

0000807c <bt_conn_lookup_handle>:
{
    807c:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
    807e:	2101      	movs	r1, #1
    8080:	4801      	ldr	r0, [pc, #4]	; (8088 <bt_conn_lookup_handle+0xc>)
    8082:	f016 bef7 	b.w	1ee74 <conn_lookup_handle>
    8086:	bf00      	nop
    8088:	200013a8 	.word	0x200013a8

0000808c <bt_conn_set_state>:
{
    808c:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
    808e:	7a85      	ldrb	r5, [r0, #10]
    8090:	428d      	cmp	r5, r1
{
    8092:	4604      	mov	r4, r0
	if (conn->state == state) {
    8094:	f000 809d 	beq.w	81d2 <bt_conn_set_state+0x146>
	conn->state = state;
    8098:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
    809a:	b925      	cbnz	r5, 80a6 <bt_conn_set_state+0x1a>
		if (conn->type != BT_CONN_TYPE_ISO) {
    809c:	7883      	ldrb	r3, [r0, #2]
    809e:	2b08      	cmp	r3, #8
    80a0:	d001      	beq.n	80a6 <bt_conn_set_state+0x1a>
			bt_conn_ref(conn);
    80a2:	f016 feb2 	bl	1ee0a <bt_conn_ref>
	switch (conn->state) {
    80a6:	7aa3      	ldrb	r3, [r4, #10]
    80a8:	2b01      	cmp	r3, #1
    80aa:	d116      	bne.n	80da <bt_conn_set_state+0x4e>
	z_impl_k_sem_give(sem);
    80ac:	4d49      	ldr	r5, [pc, #292]	; (81d4 <bt_conn_set_state+0x148>)
		tx->pending_no_cb = 0U;
    80ae:	2600      	movs	r6, #0
	__asm__ volatile(
    80b0:	f04f 0320 	mov.w	r3, #32
    80b4:	f3ef 8211 	mrs	r2, BASEPRI
    80b8:	f383 8812 	msr	BASEPRI_MAX, r3
    80bc:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
    80c0:	69e3      	ldr	r3, [r4, #28]
    80c2:	2b00      	cmp	r3, #0
    80c4:	d066      	beq.n	8194 <bt_conn_set_state+0x108>
			conn->pending_no_cb--;
    80c6:	3b01      	subs	r3, #1
    80c8:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    80ca:	f382 8811 	msr	BASEPRI, r2
    80ce:	f3bf 8f6f 	isb	sy
    80d2:	4628      	mov	r0, r5
    80d4:	f013 f918 	bl	1b308 <z_impl_k_sem_give>
}
    80d8:	e7ea      	b.n	80b0 <bt_conn_set_state+0x24>
	switch (conn->state) {
    80da:	2b07      	cmp	r3, #7
    80dc:	d009      	beq.n	80f2 <bt_conn_set_state+0x66>
    80de:	2b00      	cmp	r3, #0
    80e0:	d177      	bne.n	81d2 <bt_conn_set_state+0x146>
		if (conn->type == BT_CONN_TYPE_SCO) {
    80e2:	78a3      	ldrb	r3, [r4, #2]
    80e4:	2b04      	cmp	r3, #4
    80e6:	d11e      	bne.n	8126 <bt_conn_set_state+0x9a>
			bt_conn_unref(conn);
    80e8:	4620      	mov	r0, r4
}
    80ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
    80ee:	f016 bea7 	b.w	1ee40 <bt_conn_unref>
		if (conn->type == BT_CONN_TYPE_SCO) {
    80f2:	78a3      	ldrb	r3, [r4, #2]
    80f4:	2b04      	cmp	r3, #4
    80f6:	d06c      	beq.n	81d2 <bt_conn_set_state+0x146>
	z_impl_k_queue_init(queue);
    80f8:	f104 0038 	add.w	r0, r4, #56	; 0x38
    80fc:	f01d fc95 	bl	25a2a <z_impl_k_queue_init>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    8100:	4835      	ldr	r0, [pc, #212]	; (81d8 <bt_conn_set_state+0x14c>)
    8102:	2100      	movs	r1, #0
    8104:	f014 f84c 	bl	1c1a0 <z_impl_k_poll_signal_raise>
	list->head = NULL;
    8108:	2300      	movs	r3, #0
	list->tail = NULL;
    810a:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    810e:	78e3      	ldrb	r3, [r4, #3]
    8110:	2b01      	cmp	r3, #1
    8112:	d15e      	bne.n	81d2 <bt_conn_set_state+0x146>
			k_work_schedule(&conn->deferred_work,
    8114:	f104 0058 	add.w	r0, r4, #88	; 0x58
    8118:	f44f 3220 	mov.w	r2, #163840	; 0x28000
}
    811c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&conn->deferred_work,
    8120:	2300      	movs	r3, #0
    8122:	f013 bac5 	b.w	1b6b0 <k_work_schedule>
		switch (old_state) {
    8126:	3d01      	subs	r5, #1
    8128:	2d05      	cmp	r5, #5
    812a:	d852      	bhi.n	81d2 <bt_conn_set_state+0x146>
    812c:	a301      	add	r3, pc, #4	; (adr r3, 8134 <bt_conn_set_state+0xa8>)
    812e:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
    8132:	bf00      	nop
    8134:	0000814d 	.word	0x0000814d
    8138:	00008187 	.word	0x00008187
    813c:	000080e9 	.word	0x000080e9
    8140:	000080e9 	.word	0x000080e9
    8144:	00008187 	.word	0x00008187
    8148:	00008187 	.word	0x00008187
			tx_notify(conn);
    814c:	4620      	mov	r0, r4
    814e:	f016 fdc2 	bl	1ecd6 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
    8152:	78a3      	ldrb	r3, [r4, #2]
    8154:	2b01      	cmp	r3, #1
    8156:	d103      	bne.n	8160 <bt_conn_set_state+0xd4>
				k_work_cancel_delayable(&conn->deferred_work);
    8158:	f104 0058 	add.w	r0, r4, #88	; 0x58
    815c:	f01d fda6 	bl	25cac <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    8160:	f3bf 8f5b 	dmb	ish
    8164:	3404      	adds	r4, #4
    8166:	e854 3f00 	ldrex	r3, [r4]
    816a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    816e:	e844 3200 	strex	r2, r3, [r4]
    8172:	2a00      	cmp	r2, #0
    8174:	d1f7      	bne.n	8166 <bt_conn_set_state+0xda>
    8176:	f3bf 8f5b 	dmb	ish
    817a:	4817      	ldr	r0, [pc, #92]	; (81d8 <bt_conn_set_state+0x14c>)
}
    817c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8180:	2100      	movs	r1, #0
    8182:	f014 b80d 	b.w	1c1a0 <z_impl_k_poll_signal_raise>
			if (conn->err) {
    8186:	7a63      	ldrb	r3, [r4, #9]
    8188:	2b00      	cmp	r3, #0
    818a:	d0ad      	beq.n	80e8 <bt_conn_set_state+0x5c>
				notify_connected(conn);
    818c:	4620      	mov	r0, r4
    818e:	f7ff fe1d 	bl	7dcc <notify_connected>
    8192:	e7a9      	b.n	80e8 <bt_conn_set_state+0x5c>
	return list->head;
    8194:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
    8196:	b128      	cbz	r0, 81a4 <bt_conn_set_state+0x118>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    8198:	69a1      	ldr	r1, [r4, #24]
	return node->next;
    819a:	6803      	ldr	r3, [r0, #0]
	list->head = node;
    819c:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    819e:	4288      	cmp	r0, r1
	list->tail = node;
    81a0:	bf08      	it	eq
    81a2:	61a3      	streq	r3, [r4, #24]
    81a4:	f382 8811 	msr	BASEPRI, r2
    81a8:	f3bf 8f6f 	isb	sy
		if (!node) {
    81ac:	b188      	cbz	r0, 81d2 <bt_conn_set_state+0x146>
	__asm__ volatile(
    81ae:	f04f 0220 	mov.w	r2, #32
    81b2:	f3ef 8311 	mrs	r3, BASEPRI
    81b6:	f382 8812 	msr	BASEPRI_MAX, r2
    81ba:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
    81be:	68c2      	ldr	r2, [r0, #12]
    81c0:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
    81c2:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
    81c4:	f383 8811 	msr	BASEPRI, r3
    81c8:	f3bf 8f6f 	isb	sy
		tx_free(tx);
    81cc:	f7ff fdf4 	bl	7db8 <tx_free>
    81d0:	e77f      	b.n	80d2 <bt_conn_set_state+0x46>
}
    81d2:	bd70      	pop	{r4, r5, r6, pc}
    81d4:	20000180 	.word	0x20000180
    81d8:	20000444 	.word	0x20000444

000081dc <bt_conn_index>:
		index = conn - acl_conns;
    81dc:	4b03      	ldr	r3, [pc, #12]	; (81ec <bt_conn_index+0x10>)
    81de:	1ac0      	subs	r0, r0, r3
    81e0:	4b03      	ldr	r3, [pc, #12]	; (81f0 <bt_conn_index+0x14>)
    81e2:	1180      	asrs	r0, r0, #6
    81e4:	4358      	muls	r0, r3
}
    81e6:	b2c0      	uxtb	r0, r0
    81e8:	4770      	bx	lr
    81ea:	bf00      	nop
    81ec:	200013a8 	.word	0x200013a8
    81f0:	aaaaaaab 	.word	0xaaaaaaab

000081f4 <bt_conn_create_pdu_timeout>:
{
    81f4:	b538      	push	{r3, r4, r5, lr}
    81f6:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
    81f8:	4906      	ldr	r1, [pc, #24]	; (8214 <bt_conn_create_pdu_timeout+0x20>)
    81fa:	2800      	cmp	r0, #0
    81fc:	bf08      	it	eq
    81fe:	4608      	moveq	r0, r1
    8200:	f01c fcfe 	bl	24c00 <net_buf_alloc_fixed>
	if (!buf) {
    8204:	4604      	mov	r4, r0
    8206:	b118      	cbz	r0, 8210 <bt_conn_create_pdu_timeout+0x1c>
	net_buf_simple_reserve(&buf->b, reserve);
    8208:	1d29      	adds	r1, r5, #4
    820a:	3008      	adds	r0, #8
    820c:	f01c fd1d 	bl	24c4a <net_buf_simple_reserve>
}
    8210:	4620      	mov	r0, r4
    8212:	bd38      	pop	{r3, r4, r5, pc}
    8214:	20000f90 	.word	0x20000f90

00008218 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
    8218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    821a:	f3bf 8f5b 	dmb	ish
    821e:	6842      	ldr	r2, [r0, #4]
    8220:	f3bf 8f5b 	dmb	ish
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
    8224:	0592      	lsls	r2, r2, #22
{
    8226:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
    8228:	f100 0304 	add.w	r3, r0, #4
    822c:	d519      	bpl.n	8262 <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
    822e:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
    8232:	f8b0 10a0 	ldrh.w	r1, [r0, #160]	; 0xa0
    8236:	4291      	cmp	r1, r2
    8238:	d813      	bhi.n	8262 <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
    823a:	f8b0 10a2 	ldrh.w	r1, [r0, #162]	; 0xa2
    823e:	4291      	cmp	r1, r2
    8240:	d30f      	bcc.n	8262 <notify_le_param_updated+0x4a>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
    8242:	e9d0 1229 	ldrd	r1, r2, [r0, #164]	; 0xa4
    8246:	4291      	cmp	r1, r2
    8248:	d10b      	bne.n	8262 <notify_le_param_updated+0x4a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    824a:	f3bf 8f5b 	dmb	ish
    824e:	e853 2f00 	ldrex	r2, [r3]
    8252:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    8256:	e843 2100 	strex	r1, r2, [r3]
    825a:	2900      	cmp	r1, #0
    825c:	d1f7      	bne.n	824e <notify_le_param_updated+0x36>
    825e:	f3bf 8f5b 	dmb	ish
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
    8262:	4b10      	ldr	r3, [pc, #64]	; (82a4 <notify_le_param_updated+0x8c>)
    8264:	681d      	ldr	r5, [r3, #0]
    8266:	b925      	cbnz	r5, 8272 <notify_le_param_updated+0x5a>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    8268:	4d0f      	ldr	r5, [pc, #60]	; (82a8 <notify_le_param_updated+0x90>)
    826a:	4f10      	ldr	r7, [pc, #64]	; (82ac <notify_le_param_updated+0x94>)
    826c:	42bd      	cmp	r5, r7
    826e:	d30c      	bcc.n	828a <notify_le_param_updated+0x72>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
    8270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->le_param_updated) {
    8272:	68ee      	ldr	r6, [r5, #12]
    8274:	b13e      	cbz	r6, 8286 <notify_le_param_updated+0x6e>
			cb->le_param_updated(conn, conn->le.interval,
    8276:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    827a:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    827e:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    8282:	4620      	mov	r0, r4
    8284:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    8286:	692d      	ldr	r5, [r5, #16]
    8288:	e7ed      	b.n	8266 <notify_le_param_updated+0x4e>
		if (cb->le_param_updated) {
    828a:	68ee      	ldr	r6, [r5, #12]
    828c:	b13e      	cbz	r6, 829e <notify_le_param_updated+0x86>
			cb->le_param_updated(conn, conn->le.interval,
    828e:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    8292:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    8296:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    829a:	4620      	mov	r0, r4
    829c:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    829e:	3514      	adds	r5, #20
    82a0:	e7e4      	b.n	826c <notify_le_param_updated+0x54>
    82a2:	bf00      	nop
    82a4:	2000231c 	.word	0x2000231c
    82a8:	0002659c 	.word	0x0002659c
    82ac:	000265c4 	.word	0x000265c4

000082b0 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
    82b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    82b4:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
    82b6:	4608      	mov	r0, r1
{
    82b8:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
    82ba:	f016 fb13 	bl	1e8e4 <bt_le_conn_params_valid>
    82be:	4605      	mov	r5, r0
    82c0:	b918      	cbnz	r0, 82ca <le_param_req+0x1a>
		return false;
    82c2:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
    82c4:	4628      	mov	r0, r5
    82c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    82ca:	4b13      	ldr	r3, [pc, #76]	; (8318 <le_param_req+0x68>)
    82cc:	681e      	ldr	r6, [r3, #0]
    82ce:	b946      	cbnz	r6, 82e2 <le_param_req+0x32>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    82d0:	4e12      	ldr	r6, [pc, #72]	; (831c <le_param_req+0x6c>)
    82d2:	f8df 804c 	ldr.w	r8, [pc, #76]	; 8320 <le_param_req+0x70>
    82d6:	4546      	cmp	r6, r8
    82d8:	d2f4      	bcs.n	82c4 <le_param_req+0x14>
		if (!cb->le_param_req) {
    82da:	68b3      	ldr	r3, [r6, #8]
    82dc:	b983      	cbnz	r3, 8300 <le_param_req+0x50>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    82de:	3614      	adds	r6, #20
    82e0:	e7f9      	b.n	82d6 <le_param_req+0x26>
		if (!cb->le_param_req) {
    82e2:	68b3      	ldr	r3, [r6, #8]
    82e4:	b90b      	cbnz	r3, 82ea <le_param_req+0x3a>
	for (cb = callback_list; cb; cb = cb->_next) {
    82e6:	6936      	ldr	r6, [r6, #16]
    82e8:	e7f1      	b.n	82ce <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
    82ea:	4621      	mov	r1, r4
    82ec:	4638      	mov	r0, r7
    82ee:	4798      	blx	r3
    82f0:	2800      	cmp	r0, #0
    82f2:	d0e6      	beq.n	82c2 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
    82f4:	4620      	mov	r0, r4
    82f6:	f016 faf5 	bl	1e8e4 <bt_le_conn_params_valid>
    82fa:	2800      	cmp	r0, #0
    82fc:	d1f3      	bne.n	82e6 <le_param_req+0x36>
    82fe:	e7e0      	b.n	82c2 <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
    8300:	4621      	mov	r1, r4
    8302:	4638      	mov	r0, r7
    8304:	4798      	blx	r3
    8306:	2800      	cmp	r0, #0
    8308:	d0db      	beq.n	82c2 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
    830a:	4620      	mov	r0, r4
    830c:	f016 faea 	bl	1e8e4 <bt_le_conn_params_valid>
    8310:	2800      	cmp	r0, #0
    8312:	d1e4      	bne.n	82de <le_param_req+0x2e>
    8314:	e7d5      	b.n	82c2 <le_param_req+0x12>
    8316:	bf00      	nop
    8318:	2000231c 	.word	0x2000231c
    831c:	0002659c 	.word	0x0002659c
    8320:	000265c4 	.word	0x000265c4

00008324 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
    8324:	b570      	push	{r4, r5, r6, lr}
    8326:	4606      	mov	r6, r0
    8328:	460d      	mov	r5, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
    832a:	4809      	ldr	r0, [pc, #36]	; (8350 <bt_conn_add_le+0x2c>)
    832c:	2101      	movs	r1, #1
    832e:	f7ff fdfd 	bl	7f2c <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
    8332:	4604      	mov	r4, r0
    8334:	b150      	cbz	r0, 834c <bt_conn_add_le+0x28>
		return NULL;
	}

	conn->id = id;
    8336:	7206      	strb	r6, [r0, #8]
    8338:	2207      	movs	r2, #7
    833a:	4629      	mov	r1, r5
    833c:	3088      	adds	r0, #136	; 0x88
    833e:	f015 fe78 	bl	1e032 <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
    8342:	2301      	movs	r3, #1
    8344:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    8346:	4b03      	ldr	r3, [pc, #12]	; (8354 <bt_conn_add_le+0x30>)
    8348:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
    834c:	4620      	mov	r0, r4
    834e:	bd70      	pop	{r4, r5, r6, pc}
    8350:	200013a8 	.word	0x200013a8
    8354:	00280018 	.word	0x00280018

00008358 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
    8358:	b570      	push	{r4, r5, r6, lr}
    835a:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    835c:	480c      	ldr	r0, [pc, #48]	; (8390 <bt_conn_lookup_addr_le+0x38>)
{
    835e:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    8360:	f016 fd53 	bl	1ee0a <bt_conn_ref>

		if (!conn) {
    8364:	4604      	mov	r4, r0
    8366:	b128      	cbz	r0, 8374 <bt_conn_lookup_addr_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    8368:	7883      	ldrb	r3, [r0, #2]
    836a:	2b01      	cmp	r3, #1
    836c:	d004      	beq.n	8378 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
    836e:	f016 fd67 	bl	1ee40 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
    8372:	2400      	movs	r4, #0
}
    8374:	4620      	mov	r0, r4
    8376:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
    8378:	4629      	mov	r1, r5
    837a:	4632      	mov	r2, r6
    837c:	f016 fdcb 	bl	1ef16 <bt_conn_is_peer_addr_le>
    8380:	4605      	mov	r5, r0
    8382:	2800      	cmp	r0, #0
    8384:	d1f6      	bne.n	8374 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
    8386:	4620      	mov	r0, r4
    8388:	f016 fd5a 	bl	1ee40 <bt_conn_unref>
	return NULL;
    838c:	462c      	mov	r4, r5
			continue;
    838e:	e7f1      	b.n	8374 <bt_conn_lookup_addr_le+0x1c>
    8390:	200013a8 	.word	0x200013a8

00008394 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
    8394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8396:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    8398:	480e      	ldr	r0, [pc, #56]	; (83d4 <bt_conn_lookup_state_le+0x40>)
{
    839a:	460e      	mov	r6, r1
    839c:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    839e:	f016 fd34 	bl	1ee0a <bt_conn_ref>

		if (!conn) {
    83a2:	4604      	mov	r4, r0
    83a4:	b1a0      	cbz	r0, 83d0 <bt_conn_lookup_state_le+0x3c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    83a6:	7883      	ldrb	r3, [r0, #2]
    83a8:	2b01      	cmp	r3, #1
    83aa:	d003      	beq.n	83b4 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
    83ac:	f016 fd48 	bl	1ee40 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
    83b0:	2400      	movs	r4, #0
			continue;
    83b2:	e00d      	b.n	83d0 <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
    83b4:	b136      	cbz	r6, 83c4 <bt_conn_lookup_state_le+0x30>
    83b6:	4632      	mov	r2, r6
    83b8:	4629      	mov	r1, r5
    83ba:	f016 fdac 	bl	1ef16 <bt_conn_is_peer_addr_le>
    83be:	b908      	cbnz	r0, 83c4 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
    83c0:	4620      	mov	r0, r4
    83c2:	e7f3      	b.n	83ac <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
    83c4:	7aa3      	ldrb	r3, [r4, #10]
    83c6:	42bb      	cmp	r3, r7
    83c8:	d1fa      	bne.n	83c0 <bt_conn_lookup_state_le+0x2c>
    83ca:	7a23      	ldrb	r3, [r4, #8]
    83cc:	42ab      	cmp	r3, r5
    83ce:	d1f7      	bne.n	83c0 <bt_conn_lookup_state_le+0x2c>
}
    83d0:	4620      	mov	r0, r4
    83d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    83d4:	200013a8 	.word	0x200013a8

000083d8 <bt_conn_get_info>:
{
	return &conn->le.dst;
}

int bt_conn_get_info(const struct bt_conn *conn, struct bt_conn_info *info)
{
    83d8:	b510      	push	{r4, lr}
	info->type = conn->type;
    83da:	7882      	ldrb	r2, [r0, #2]
    83dc:	700a      	strb	r2, [r1, #0]
	info->role = conn->role;
    83de:	78c4      	ldrb	r4, [r0, #3]
    83e0:	704c      	strb	r4, [r1, #1]
	info->id = conn->id;
    83e2:	7a03      	ldrb	r3, [r0, #8]
    83e4:	708b      	strb	r3, [r1, #2]

	switch (conn->type) {
    83e6:	2a01      	cmp	r2, #1
    83e8:	d11c      	bne.n	8424 <bt_conn_get_info+0x4c>
	case BT_CONN_TYPE_LE:
		info->le.dst = &conn->le.dst;
    83ea:	f100 0288 	add.w	r2, r0, #136	; 0x88
    83ee:	608a      	str	r2, [r1, #8]
		info->le.src = &bt_dev.id_addr[conn->id];
    83f0:	4a0e      	ldr	r2, [pc, #56]	; (842c <bt_conn_get_info+0x54>)
    83f2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    83f6:	4413      	add	r3, r2
    83f8:	604b      	str	r3, [r1, #4]
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
			info->le.local = &conn->le.init_addr;
			info->le.remote = &conn->le.resp_addr;
    83fa:	f100 0296 	add.w	r2, r0, #150	; 0x96
			info->le.local = &conn->le.init_addr;
    83fe:	f100 038f 	add.w	r3, r0, #143	; 0x8f
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
    8402:	b964      	cbnz	r4, 841e <bt_conn_get_info+0x46>
			info->le.remote = &conn->le.resp_addr;
    8404:	e9c1 3203 	strd	r3, r2, [r1, #12]
		} else {
			info->le.local = &conn->le.resp_addr;
			info->le.remote = &conn->le.init_addr;
		}
		info->le.interval = conn->le.interval;
    8408:	f8b0 309e 	ldrh.w	r3, [r0, #158]	; 0x9e
    840c:	828b      	strh	r3, [r1, #20]
		info->le.latency = conn->le.latency;
    840e:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
    8412:	82cb      	strh	r3, [r1, #22]
		info->le.timeout = conn->le.timeout;
    8414:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
    8418:	830b      	strh	r3, [r1, #24]
		info->le.phy = &conn->le.phy;
#endif
#if defined(CONFIG_BT_USER_DATA_LEN_UPDATE)
		info->le.data_len = &conn->le.data_len;
#endif
		return 0;
    841a:	2000      	movs	r0, #0
		return 0;
#endif
	}

	return -EINVAL;
}
    841c:	bd10      	pop	{r4, pc}
			info->le.remote = &conn->le.init_addr;
    841e:	e9c1 2303 	strd	r2, r3, [r1, #12]
    8422:	e7f1      	b.n	8408 <bt_conn_get_info+0x30>
	return -EINVAL;
    8424:	f06f 0015 	mvn.w	r0, #21
    8428:	e7f8      	b.n	841c <bt_conn_get_info+0x44>
    842a:	bf00      	nop
    842c:	20000080 	.word	0x20000080

00008430 <send_conn_le_param_update>:
{
    8430:	b538      	push	{r3, r4, r5, lr}
    8432:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
    8434:	4608      	mov	r0, r1
{
    8436:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    8438:	f016 fa54 	bl	1e8e4 <bt_le_conn_params_valid>
    843c:	b348      	cbz	r0, 8492 <send_conn_le_param_update+0x62>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    843e:	4b16      	ldr	r3, [pc, #88]	; (8498 <send_conn_le_param_update+0x68>)
    8440:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
    8444:	0799      	lsls	r1, r3, #30
    8446:	d407      	bmi.n	8458 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
    8448:	78e3      	ldrb	r3, [r4, #3]
    844a:	b183      	cbz	r3, 846e <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
    844c:	4629      	mov	r1, r5
    844e:	4620      	mov	r0, r4
}
    8450:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    8454:	f000 b9b6 	b.w	87c4 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    8458:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
    845c:	079a      	lsls	r2, r3, #30
    845e:	d5f3      	bpl.n	8448 <send_conn_le_param_update+0x18>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    8460:	f3bf 8f5b 	dmb	ish
    8464:	6863      	ldr	r3, [r4, #4]
    8466:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
    846a:	055b      	lsls	r3, r3, #21
    846c:	d4ec      	bmi.n	8448 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
    846e:	4629      	mov	r1, r5
    8470:	4620      	mov	r0, r4
    8472:	f016 fd78 	bl	1ef66 <bt_conn_le_conn_update>
		if (rc == 0) {
    8476:	b958      	cbnz	r0, 8490 <send_conn_le_param_update+0x60>
			conn->le.interval_min = param->interval_min;
    8478:	882b      	ldrh	r3, [r5, #0]
    847a:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
    847e:	886b      	ldrh	r3, [r5, #2]
    8480:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
    8484:	88ab      	ldrh	r3, [r5, #4]
    8486:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
    848a:	88eb      	ldrh	r3, [r5, #6]
    848c:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
    8490:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    8492:	f06f 0015 	mvn.w	r0, #21
    8496:	e7fb      	b.n	8490 <send_conn_le_param_update+0x60>
    8498:	20000080 	.word	0x20000080

0000849c <deferred_work>:
{
    849c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
    849e:	f810 3c4e 	ldrb.w	r3, [r0, #-78]
{
    84a2:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
    84a4:	f1a0 0558 	sub.w	r5, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
    84a8:	b9fb      	cbnz	r3, 84ea <deferred_work+0x4e>
		bt_l2cap_disconnected(conn);
    84aa:	4628      	mov	r0, r5
    84ac:	f016 fddd 	bl	1f06a <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    84b0:	4b2c      	ldr	r3, [pc, #176]	; (8564 <deferred_work+0xc8>)
    84b2:	681e      	ldr	r6, [r3, #0]
    84b4:	b94e      	cbnz	r6, 84ca <deferred_work+0x2e>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    84b6:	4e2c      	ldr	r6, [pc, #176]	; (8568 <deferred_work+0xcc>)
    84b8:	4f2c      	ldr	r7, [pc, #176]	; (856c <deferred_work+0xd0>)
    84ba:	42be      	cmp	r6, r7
    84bc:	d30d      	bcc.n	84da <deferred_work+0x3e>
		bt_conn_unref(conn);
    84be:	4628      	mov	r0, r5
}
    84c0:	b003      	add	sp, #12
    84c2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
    84c6:	f016 bcbb 	b.w	1ee40 <bt_conn_unref>
		if (cb->disconnected) {
    84ca:	6873      	ldr	r3, [r6, #4]
    84cc:	b11b      	cbz	r3, 84d6 <deferred_work+0x3a>
			cb->disconnected(conn, conn->err);
    84ce:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
    84d2:	4628      	mov	r0, r5
    84d4:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    84d6:	6936      	ldr	r6, [r6, #16]
    84d8:	e7ec      	b.n	84b4 <deferred_work+0x18>
		if (cb->disconnected) {
    84da:	6873      	ldr	r3, [r6, #4]
    84dc:	b11b      	cbz	r3, 84e6 <deferred_work+0x4a>
			cb->disconnected(conn, conn->err);
    84de:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
    84e2:	4628      	mov	r0, r5
    84e4:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    84e6:	3614      	adds	r6, #20
    84e8:	e7e7      	b.n	84ba <deferred_work+0x1e>
	if (conn->type != BT_CONN_TYPE_LE) {
    84ea:	f810 3c56 	ldrb.w	r3, [r0, #-86]
    84ee:	2b01      	cmp	r3, #1
    84f0:	d12f      	bne.n	8552 <deferred_work+0xb6>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    84f2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(conn->flags,
    84f6:	f1a0 0654 	sub.w	r6, r0, #84	; 0x54
    84fa:	e856 3f00 	ldrex	r3, [r6]
    84fe:	f423 7200 	bic.w	r2, r3, #512	; 0x200
    8502:	e846 2100 	strex	r1, r2, [r6]
    8506:	2900      	cmp	r1, #0
    8508:	d1f7      	bne.n	84fa <deferred_work+0x5e>
    850a:	f3bf 8f5b 	dmb	ish
    850e:	059b      	lsls	r3, r3, #22
    8510:	d521      	bpl.n	8556 <deferred_work+0xba>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
    8512:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    8516:	f8ad 3000 	strh.w	r3, [sp]
    851a:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
    851e:	f8ad 3002 	strh.w	r3, [sp, #2]
    8522:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
    8526:	f8ad 3004 	strh.w	r3, [sp, #4]
    852a:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
    852e:	f8ad 3006 	strh.w	r3, [sp, #6]
		send_conn_le_param_update(conn, param);
    8532:	4669      	mov	r1, sp
    8534:	4628      	mov	r0, r5
    8536:	f7ff ff7b 	bl	8430 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    853a:	f3bf 8f5b 	dmb	ish
    853e:	e856 3f00 	ldrex	r3, [r6]
    8542:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    8546:	e846 3200 	strex	r2, r3, [r6]
    854a:	2a00      	cmp	r2, #0
    854c:	d1f7      	bne.n	853e <deferred_work+0xa2>
    854e:	f3bf 8f5b 	dmb	ish
}
    8552:	b003      	add	sp, #12
    8554:	bdf0      	pop	{r4, r5, r6, r7, pc}
		param = BT_LE_CONN_PARAM(
    8556:	4a06      	ldr	r2, [pc, #24]	; (8570 <deferred_work+0xd4>)
    8558:	6810      	ldr	r0, [r2, #0]
    855a:	6851      	ldr	r1, [r2, #4]
    855c:	466b      	mov	r3, sp
    855e:	c303      	stmia	r3!, {r0, r1}
    8560:	e7e7      	b.n	8532 <deferred_work+0x96>
    8562:	bf00      	nop
    8564:	2000231c 	.word	0x2000231c
    8568:	0002659c 	.word	0x0002659c
    856c:	000265c4 	.word	0x000265c4
    8570:	0002664c 	.word	0x0002664c

00008574 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
    8574:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
    8576:	4801      	ldr	r0, [pc, #4]	; (857c <bt_conn_create_frag_timeout+0x8>)
    8578:	f7ff be3c 	b.w	81f4 <bt_conn_create_pdu_timeout>
    857c:	20001014 	.word	0x20001014

00008580 <create_frag>:
{
    8580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8584:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
    8586:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    858a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    858e:	2000      	movs	r0, #0
{
    8590:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
    8592:	f7ff ffef 	bl	8574 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
    8596:	7ab3      	ldrb	r3, [r6, #10]
    8598:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
    859a:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
    859c:	f04f 0600 	mov.w	r6, #0
    85a0:	d005      	beq.n	85ae <create_frag+0x2e>
		net_buf_unref(frag);
    85a2:	f00e fd69 	bl	17078 <net_buf_unref>
		return NULL;
    85a6:	4635      	mov	r5, r6
}
    85a8:	4628      	mov	r0, r5
    85aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
    85ae:	6146      	str	r6, [r0, #20]
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
    85b0:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
    85b4:	4e0c      	ldr	r6, [pc, #48]	; (85e8 <create_frag+0x68>)
    85b6:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    85b8:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
    85bc:	f01c fc65 	bl	24e8a <net_buf_simple_tailroom>
    85c0:	4580      	cmp	r8, r0
    85c2:	d20c      	bcs.n	85de <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
    85c4:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
    85c8:	f854 1f08 	ldr.w	r1, [r4, #8]!
    85cc:	4632      	mov	r2, r6
    85ce:	4638      	mov	r0, r7
    85d0:	f01c fba7 	bl	24d22 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
    85d4:	4631      	mov	r1, r6
    85d6:	4620      	mov	r0, r4
    85d8:	f01c fc18 	bl	24e0c <net_buf_simple_pull>
    85dc:	e7e4      	b.n	85a8 <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
    85de:	4638      	mov	r0, r7
    85e0:	f01c fc53 	bl	24e8a <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    85e4:	b286      	uxth	r6, r0
    85e6:	e7ef      	b.n	85c8 <create_frag+0x48>
    85e8:	20000080 	.word	0x20000080

000085ec <bt_conn_process_tx>:
{
    85ec:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
    85ee:	7a83      	ldrb	r3, [r0, #10]
{
    85f0:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    85f2:	b993      	cbnz	r3, 861a <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    85f4:	f3bf 8f5b 	dmb	ish
    85f8:	1d03      	adds	r3, r0, #4
    85fa:	e853 2f00 	ldrex	r2, [r3]
    85fe:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    8602:	e843 1500 	strex	r5, r1, [r3]
    8606:	2d00      	cmp	r5, #0
    8608:	d1f7      	bne.n	85fa <bt_conn_process_tx+0xe>
    860a:	f3bf 8f5b 	dmb	ish
    860e:	0653      	lsls	r3, r2, #25
    8610:	d503      	bpl.n	861a <bt_conn_process_tx+0x2e>
}
    8612:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
    8616:	f016 bb8d 	b.w	1ed34 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    861a:	2200      	movs	r2, #0
    861c:	2300      	movs	r3, #0
    861e:	f104 0038 	add.w	r0, r4, #56	; 0x38
    8622:	f01c faf2 	bl	24c0a <net_buf_get>
	BT_ASSERT(buf);
    8626:	4605      	mov	r5, r0
    8628:	b960      	cbnz	r0, 8644 <bt_conn_process_tx+0x58>
    862a:	4a1f      	ldr	r2, [pc, #124]	; (86a8 <bt_conn_process_tx+0xbc>)
    862c:	491f      	ldr	r1, [pc, #124]	; (86ac <bt_conn_process_tx+0xc0>)
    862e:	4820      	ldr	r0, [pc, #128]	; (86b0 <bt_conn_process_tx+0xc4>)
    8630:	f240 23e7 	movw	r3, #743	; 0x2e7
    8634:	f013 fe48 	bl	1c2c8 <printk>
    8638:	4040      	eors	r0, r0
    863a:	f380 8811 	msr	BASEPRI, r0
    863e:	f04f 0003 	mov.w	r0, #3
    8642:	df02      	svc	2
	return bt_dev.le.acl_mtu;
    8644:	4e1b      	ldr	r6, [pc, #108]	; (86b4 <bt_conn_process_tx+0xc8>)
	if (buf->len <= conn_mtu(conn)) {
    8646:	89aa      	ldrh	r2, [r5, #12]
    8648:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
    864c:	429a      	cmp	r2, r3
    864e:	d807      	bhi.n	8660 <bt_conn_process_tx+0x74>
		return send_frag(conn, buf, FRAG_SINGLE, false);
    8650:	2300      	movs	r3, #0
    8652:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
    8654:	4629      	mov	r1, r5
    8656:	4620      	mov	r0, r4
    8658:	f7ff fbdc 	bl	7e14 <send_frag>
	if (!send_buf(conn, buf)) {
    865c:	b130      	cbz	r0, 866c <bt_conn_process_tx+0x80>
}
    865e:	bd70      	pop	{r4, r5, r6, pc}
	frag = create_frag(conn, buf);
    8660:	4629      	mov	r1, r5
    8662:	4620      	mov	r0, r4
    8664:	f7ff ff8c 	bl	8580 <create_frag>
	if (!frag) {
    8668:	4601      	mov	r1, r0
    866a:	b920      	cbnz	r0, 8676 <bt_conn_process_tx+0x8a>
		net_buf_unref(buf);
    866c:	4628      	mov	r0, r5
}
    866e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
    8672:	f00e bd01 	b.w	17078 <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
    8676:	2301      	movs	r3, #1
    8678:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    867a:	4620      	mov	r0, r4
    867c:	f7ff fbca 	bl	7e14 <send_frag>
    8680:	2800      	cmp	r0, #0
    8682:	d0f3      	beq.n	866c <bt_conn_process_tx+0x80>
	while (buf->len > conn_mtu(conn)) {
    8684:	89aa      	ldrh	r2, [r5, #12]
    8686:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
    868a:	429a      	cmp	r2, r3
    868c:	d802      	bhi.n	8694 <bt_conn_process_tx+0xa8>
	return send_frag(conn, buf, FRAG_END, false);
    868e:	2300      	movs	r3, #0
    8690:	2203      	movs	r2, #3
    8692:	e7df      	b.n	8654 <bt_conn_process_tx+0x68>
		frag = create_frag(conn, buf);
    8694:	4629      	mov	r1, r5
    8696:	4620      	mov	r0, r4
    8698:	f7ff ff72 	bl	8580 <create_frag>
		if (!frag) {
    869c:	4601      	mov	r1, r0
    869e:	2800      	cmp	r0, #0
    86a0:	d0e4      	beq.n	866c <bt_conn_process_tx+0x80>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    86a2:	2301      	movs	r3, #1
    86a4:	461a      	mov	r2, r3
    86a6:	e7e8      	b.n	867a <bt_conn_process_tx+0x8e>
    86a8:	000275ea 	.word	0x000275ea
    86ac:	00027531 	.word	0x00027531
    86b0:	00027514 	.word	0x00027514
    86b4:	20000080 	.word	0x20000080

000086b8 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
    86b8:	b570      	push	{r4, r5, r6, lr}
    86ba:	4d0b      	ldr	r5, [pc, #44]	; (86e8 <bt_conn_init+0x30>)
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
    86bc:	4e0b      	ldr	r6, [pc, #44]	; (86ec <bt_conn_init+0x34>)
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
    86be:	2400      	movs	r4, #0
		k_fifo_put(&free_tx, &conn_tx[i]);
    86c0:	4629      	mov	r1, r5
    86c2:	4630      	mov	r0, r6
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
    86c4:	3401      	adds	r4, #1
		k_fifo_put(&free_tx, &conn_tx[i]);
    86c6:	f01d f9dc 	bl	25a82 <k_queue_append>
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
    86ca:	2c05      	cmp	r4, #5
    86cc:	f105 0510 	add.w	r5, r5, #16
    86d0:	d1f6      	bne.n	86c0 <bt_conn_init+0x8>
	}

	bt_att_init();
    86d2:	f017 f9b8 	bl	1fa46 <bt_att_init>

	err = bt_smp_init();
    86d6:	f017 fe09 	bl	202ec <bt_smp_init>
	if (err) {
    86da:	4604      	mov	r4, r0
    86dc:	b908      	cbnz	r0, 86e2 <bt_conn_init+0x2a>
		return err;
	}

	bt_l2cap_init();
    86de:	f016 fd53 	bl	1f188 <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
    86e2:	4620      	mov	r0, r4
    86e4:	bd70      	pop	{r4, r5, r6, pc}
    86e6:	bf00      	nop
    86e8:	20002320 	.word	0x20002320
    86ec:	20000f48 	.word	0x20000f48

000086f0 <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    86f0:	4b04      	ldr	r3, [pc, #16]	; (8704 <l2cap_accept+0x14>)
    86f2:	6818      	ldr	r0, [r3, #0]
    86f4:	b918      	cbnz	r0, 86fe <l2cap_accept+0xe>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    86f6:	4a04      	ldr	r2, [pc, #16]	; (8708 <l2cap_accept+0x18>)
    86f8:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
    86fa:	600b      	str	r3, [r1, #0]

		return 0;
    86fc:	4770      	bx	lr
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
    86fe:	f06f 000b 	mvn.w	r0, #11
}
    8702:	4770      	bx	lr
    8704:	20001468 	.word	0x20001468
    8708:	00026a1c 	.word	0x00026a1c

0000870c <bt_l2cap_connected>:
{
    870c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    8710:	4e29      	ldr	r6, [pc, #164]	; (87b8 <bt_l2cap_connected+0xac>)
    8712:	4f2a      	ldr	r7, [pc, #168]	; (87bc <bt_l2cap_connected+0xb0>)
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
    8714:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 87c0 <bt_l2cap_connected+0xb4>
{
    8718:	4604      	mov	r4, r0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    871a:	42be      	cmp	r6, r7
    871c:	d302      	bcc.n	8724 <bt_l2cap_connected+0x18>
}
    871e:	b003      	add	sp, #12
    8720:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
    8724:	6873      	ldr	r3, [r6, #4]
    8726:	a901      	add	r1, sp, #4
    8728:	4620      	mov	r0, r4
    872a:	4798      	blx	r3
    872c:	2800      	cmp	r0, #0
    872e:	db3d      	blt.n	87ac <bt_l2cap_connected+0xa0>
		ch = BT_L2CAP_LE_CHAN(chan);
    8730:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
    8732:	8833      	ldrh	r3, [r6, #0]
    8734:	f8a5 3070 	strh.w	r3, [r5, #112]	; 0x70
		ch->tx.cid = fchan->cid;
    8738:	f8a5 3080 	strh.w	r3, [r5, #128]	; 0x80
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
    873c:	4641      	mov	r1, r8
    873e:	f105 0010 	add.w	r0, r5, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
    8742:	f8d6 9008 	ldr.w	r9, [r6, #8]
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
    8746:	f01d faa3 	bl	25c90 <k_work_init_delayable>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    874a:	f3bf 8f5b 	dmb	ish
    874e:	f105 0368 	add.w	r3, r5, #104	; 0x68
    8752:	2200      	movs	r2, #0
    8754:	e853 1f00 	ldrex	r1, [r3]
    8758:	e843 2000 	strex	r0, r2, [r3]
    875c:	2800      	cmp	r0, #0
    875e:	d1f9      	bne.n	8754 <bt_l2cap_connected+0x48>
    8760:	f3bf 8f5b 	dmb	ish
	parent->next = child;
    8764:	60aa      	str	r2, [r5, #8]
	return list->tail;
    8766:	6d62      	ldr	r2, [r4, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
    8768:	f105 0308 	add.w	r3, r5, #8
Z_GENLIST_APPEND(slist, snode)
    876c:	bb02      	cbnz	r2, 87b0 <bt_l2cap_connected+0xa4>
	list->head = node;
    876e:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (chan->ops->connected) {
    8772:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
    8774:	602c      	str	r4, [r5, #0]
		if (chan->ops->connected) {
    8776:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
    8778:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
    877c:	681b      	ldr	r3, [r3, #0]
    877e:	b103      	cbz	r3, 8782 <bt_l2cap_connected+0x76>
			chan->ops->connected(chan);
    8780:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    8782:	9b01      	ldr	r3, [sp, #4]
    8784:	f3bf 8f5b 	dmb	ish
    8788:	3368      	adds	r3, #104	; 0x68
    878a:	e853 2f00 	ldrex	r2, [r3]
    878e:	f042 0201 	orr.w	r2, r2, #1
    8792:	e843 2100 	strex	r1, r2, [r3]
    8796:	2900      	cmp	r1, #0
    8798:	d1f7      	bne.n	878a <bt_l2cap_connected+0x7e>
    879a:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
    879e:	9801      	ldr	r0, [sp, #4]
    87a0:	6843      	ldr	r3, [r0, #4]
    87a2:	699b      	ldr	r3, [r3, #24]
    87a4:	b113      	cbz	r3, 87ac <bt_l2cap_connected+0xa0>
			chan->ops->status(chan, chan->status);
    87a6:	f100 0168 	add.w	r1, r0, #104	; 0x68
    87aa:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    87ac:	360c      	adds	r6, #12
    87ae:	e7b4      	b.n	871a <bt_l2cap_connected+0xe>
	parent->next = child;
    87b0:	6013      	str	r3, [r2, #0]
	list->tail = node;
    87b2:	6563      	str	r3, [r4, #84]	; 0x54
}
    87b4:	e7dd      	b.n	8772 <bt_l2cap_connected+0x66>
    87b6:	bf00      	nop
    87b8:	00026578 	.word	0x00026578
    87bc:	0002659c 	.word	0x0002659c
    87c0:	0001f051 	.word	0x0001f051

000087c4 <bt_l2cap_update_conn_param>:
{
    87c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    87c6:	460d      	mov	r5, r1
	ident++;
    87c8:	4916      	ldr	r1, [pc, #88]	; (8824 <bt_l2cap_update_conn_param+0x60>)
    87ca:	780b      	ldrb	r3, [r1, #0]
    87cc:	3301      	adds	r3, #1
	if (!ident) {
    87ce:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		ident++;
    87d2:	bf08      	it	eq
    87d4:	2301      	moveq	r3, #1
    87d6:	700b      	strb	r3, [r1, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    87d8:	7809      	ldrb	r1, [r1, #0]
{
    87da:	4606      	mov	r6, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    87dc:	2208      	movs	r2, #8
    87de:	2012      	movs	r0, #18
    87e0:	f016 fbed 	bl	1efbe <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
    87e4:	4604      	mov	r4, r0
    87e6:	b1d0      	cbz	r0, 881e <bt_l2cap_update_conn_param+0x5a>
	return net_buf_simple_add(&buf->b, len);
    87e8:	2108      	movs	r1, #8
    87ea:	4408      	add	r0, r1
    87ec:	f01c fa93 	bl	24d16 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    87f0:	882b      	ldrh	r3, [r5, #0]
    87f2:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    87f4:	886b      	ldrh	r3, [r5, #2]
    87f6:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    87f8:	88ab      	ldrh	r3, [r5, #4]
    87fa:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    87fc:	88eb      	ldrh	r3, [r5, #6]
    87fe:	80c3      	strh	r3, [r0, #6]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
    8800:	2300      	movs	r3, #0
    8802:	9300      	str	r3, [sp, #0]
    8804:	4622      	mov	r2, r4
    8806:	2105      	movs	r1, #5
    8808:	4630      	mov	r0, r6
    880a:	f016 fc42 	bl	1f092 <bt_l2cap_send_cb>
	if (err) {
    880e:	4605      	mov	r5, r0
    8810:	b110      	cbz	r0, 8818 <bt_l2cap_update_conn_param+0x54>
		net_buf_unref(buf);
    8812:	4620      	mov	r0, r4
    8814:	f00e fc30 	bl	17078 <net_buf_unref>
}
    8818:	4628      	mov	r0, r5
    881a:	b002      	add	sp, #8
    881c:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    881e:	f06f 050b 	mvn.w	r5, #11
    8822:	e7f9      	b.n	8818 <bt_l2cap_update_conn_param+0x54>
    8824:	200040b4 	.word	0x200040b4

00008828 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
    8828:	4b02      	ldr	r3, [pc, #8]	; (8834 <att_cfm_sent+0xc>)
    882a:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
    882e:	f016 bcbe 	b.w	1f1ae <att_sent>
    8832:	bf00      	nop
    8834:	0001f713 	.word	0x0001f713

00008838 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
    8838:	4b02      	ldr	r3, [pc, #8]	; (8844 <att_rsp_sent+0xc>)
    883a:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
    883e:	f016 bcb6 	b.w	1f1ae <att_sent>
    8842:	bf00      	nop
    8844:	0001f6f7 	.word	0x0001f6f7

00008848 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
    8848:	4b02      	ldr	r3, [pc, #8]	; (8854 <att_req_sent+0xc>)
    884a:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
    884e:	f016 bcae 	b.w	1f1ae <att_sent>
    8852:	bf00      	nop
    8854:	0001f4c7 	.word	0x0001f4c7

00008858 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
    8858:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
    885a:	3808      	subs	r0, #8
    885c:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
    885e:	a901      	add	r1, sp, #4
    8860:	4802      	ldr	r0, [pc, #8]	; (886c <bt_att_released+0x14>)
    8862:	f01d f828 	bl	258b6 <k_mem_slab_free>
}
    8866:	b003      	add	sp, #12
    8868:	f85d fb04 	ldr.w	pc, [sp], #4
    886c:	20000e60 	.word	0x20000e60

00008870 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
    8870:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    8872:	2300      	movs	r3, #0
{
    8874:	4607      	mov	r7, r0
    8876:	460e      	mov	r6, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    8878:	481e      	ldr	r0, [pc, #120]	; (88f4 <bt_att_accept+0x84>)
    887a:	2200      	movs	r2, #0
    887c:	4669      	mov	r1, sp
    887e:	f012 fb51 	bl	1af24 <k_mem_slab_alloc>
    8882:	4604      	mov	r4, r0
    8884:	b120      	cbz	r0, 8890 <bt_att_accept+0x20>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
    8886:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
    888a:	4620      	mov	r0, r4
    888c:	b003      	add	sp, #12
    888e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(att, 0, sizeof(*att));
    8890:	4601      	mov	r1, r0
    8892:	222c      	movs	r2, #44	; 0x2c
    8894:	9800      	ldr	r0, [sp, #0]
    8896:	f015 fbd7 	bl	1e048 <memset>
	att->conn = conn;
    889a:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    889c:	4816      	ldr	r0, [pc, #88]	; (88f8 <bt_att_accept+0x88>)
	list->tail = NULL;
    889e:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
    88a0:	e9c5 7400 	strd	r7, r4, [r5]
	list->tail = NULL;
    88a4:	e9c5 4409 	strd	r4, r4, [r5, #36]	; 0x24
    88a8:	2200      	movs	r2, #0
    88aa:	2300      	movs	r3, #0
    88ac:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
    88ae:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    88b0:	f012 fb38 	bl	1af24 <k_mem_slab_alloc>
    88b4:	4604      	mov	r4, r0
    88b6:	2800      	cmp	r0, #0
    88b8:	d1e5      	bne.n	8886 <bt_att_accept+0x16>
	(void)memset(chan, 0, sizeof(*chan));
    88ba:	4601      	mov	r1, r0
    88bc:	f44f 72a4 	mov.w	r2, #328	; 0x148
    88c0:	9801      	ldr	r0, [sp, #4]
    88c2:	f015 fbc1 	bl	1e048 <memset>
	chan->chan.chan.ops = &ops;
    88c6:	9801      	ldr	r0, [sp, #4]
    88c8:	4b0c      	ldr	r3, [pc, #48]	; (88fc <bt_att_accept+0x8c>)
    88ca:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
    88cc:	30f8      	adds	r0, #248	; 0xf8
    88ce:	f01d f8ac 	bl	25a2a <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    88d2:	9b01      	ldr	r3, [sp, #4]
    88d4:	f3bf 8f5b 	dmb	ish
    88d8:	33f0      	adds	r3, #240	; 0xf0
    88da:	e853 2f00 	ldrex	r2, [r3]
    88de:	e843 4100 	strex	r1, r4, [r3]
    88e2:	2900      	cmp	r1, #0
    88e4:	d1f9      	bne.n	88da <bt_att_accept+0x6a>
    88e6:	f3bf 8f5b 	dmb	ish
	chan->att = att;
    88ea:	9b01      	ldr	r3, [sp, #4]
    88ec:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
    88f0:	6033      	str	r3, [r6, #0]
	return 0;
    88f2:	e7ca      	b.n	888a <bt_att_accept+0x1a>
    88f4:	20000e44 	.word	0x20000e44
    88f8:	20000e60 	.word	0x20000e60
    88fc:	20000454 	.word	0x20000454

00008900 <read_group_cb>:
{
    8900:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    8904:	4605      	mov	r5, r0
    8906:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    8908:	f04f 0800 	mov.w	r8, #0
    890c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    8910:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
    8912:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    8914:	f88d 8008 	strb.w	r8, [sp, #8]
    8918:	a902      	add	r1, sp, #8
{
    891a:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    891c:	f8ad 300a 	strh.w	r3, [sp, #10]
    8920:	f015 fdb0 	bl	1e484 <bt_uuid_cmp>
    8924:	b1a0      	cbz	r0, 8950 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    8926:	f642 0301 	movw	r3, #10241	; 0x2801
    892a:	6828      	ldr	r0, [r5, #0]
    892c:	f88d 800c 	strb.w	r8, [sp, #12]
    8930:	a903      	add	r1, sp, #12
    8932:	f8ad 300e 	strh.w	r3, [sp, #14]
    8936:	f015 fda5 	bl	1e484 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    893a:	b148      	cbz	r0, 8950 <read_group_cb+0x50>
		if (data->group &&
    893c:	6923      	ldr	r3, [r4, #16]
    893e:	b11b      	cbz	r3, 8948 <read_group_cb+0x48>
    8940:	885a      	ldrh	r2, [r3, #2]
    8942:	42b2      	cmp	r2, r6
    8944:	d200      	bcs.n	8948 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
    8946:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    8948:	2001      	movs	r0, #1
}
    894a:	b004      	add	sp, #16
    894c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    8950:	6861      	ldr	r1, [r4, #4]
    8952:	6828      	ldr	r0, [r5, #0]
    8954:	f015 fd96 	bl	1e484 <bt_uuid_cmp>
    8958:	b110      	cbz	r0, 8960 <read_group_cb+0x60>
		data->group = NULL;
    895a:	2300      	movs	r3, #0
    895c:	6123      	str	r3, [r4, #16]
    895e:	e7f3      	b.n	8948 <read_group_cb+0x48>
	if (data->rsp->len &&
    8960:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    8962:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
    8964:	781a      	ldrb	r2, [r3, #0]
    8966:	b13a      	cbz	r2, 8978 <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    8968:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
    896c:	8981      	ldrh	r1, [r0, #12]
    896e:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    8970:	4293      	cmp	r3, r2
    8972:	da01      	bge.n	8978 <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
    8974:	2000      	movs	r0, #0
    8976:	e7e8      	b.n	894a <read_group_cb+0x4a>
    8978:	2104      	movs	r1, #4
    897a:	3008      	adds	r0, #8
    897c:	f01c f9cb 	bl	24d16 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    8980:	4b09      	ldr	r3, [pc, #36]	; (89a8 <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    8982:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    8984:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
    8986:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    8988:	8046      	strh	r6, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    898a:	4629      	mov	r1, r5
    898c:	9300      	str	r3, [sp, #0]
    898e:	9401      	str	r4, [sp, #4]
    8990:	2300      	movs	r3, #0
    8992:	4638      	mov	r0, r7
    8994:	f016 fdd4 	bl	1f540 <att_chan_read>
	if (read < 0) {
    8998:	2800      	cmp	r0, #0
    899a:	dbeb      	blt.n	8974 <read_group_cb+0x74>
	if (!data->group) {
    899c:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
    899e:	3800      	subs	r0, #0
    89a0:	bf18      	it	ne
    89a2:	2001      	movne	r0, #1
    89a4:	e7d1      	b.n	894a <read_group_cb+0x4a>
    89a6:	bf00      	nop
    89a8:	0001f47b 	.word	0x0001f47b

000089ac <chan_send>:
{
    89ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    89b0:	688b      	ldr	r3, [r1, #8]
    89b2:	781b      	ldrb	r3, [r3, #0]
    89b4:	2bd2      	cmp	r3, #210	; 0xd2
{
    89b6:	4606      	mov	r6, r0
    89b8:	460c      	mov	r4, r1
    89ba:	4617      	mov	r7, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    89bc:	d10c      	bne.n	89d8 <chan_send+0x2c>
		err = bt_smp_sign(chan->att->conn, buf);
    89be:	6803      	ldr	r3, [r0, #0]
    89c0:	6818      	ldr	r0, [r3, #0]
    89c2:	f017 fc90 	bl	202e6 <bt_smp_sign>
		if (err) {
    89c6:	4605      	mov	r5, r0
    89c8:	b130      	cbz	r0, 89d8 <chan_send+0x2c>
			net_buf_unref(buf);
    89ca:	4620      	mov	r0, r4
    89cc:	f00e fb54 	bl	17078 <net_buf_unref>
}
    89d0:	4628      	mov	r0, r5
    89d2:	b003      	add	sp, #12
    89d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
    89d8:	f104 0008 	add.w	r0, r4, #8
    89dc:	f01c fa51 	bl	24e82 <net_buf_simple_headroom>
	state->len = buf->len;
    89e0:	f8b4 900c 	ldrh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    89e4:	4680      	mov	r8, r0
	chan->sent = cb ? cb : chan_cb(buf);
    89e6:	b957      	cbnz	r7, 89fe <chan_send+0x52>
	switch (att_op_get_type(buf->data[0])) {
    89e8:	68a3      	ldr	r3, [r4, #8]
    89ea:	7818      	ldrb	r0, [r3, #0]
    89ec:	f016 fbf7 	bl	1f1de <att_op_get_type>
    89f0:	3801      	subs	r0, #1
    89f2:	b2c0      	uxtb	r0, r0
    89f4:	2804      	cmp	r0, #4
    89f6:	bf9c      	itt	ls
    89f8:	4b13      	ldrls	r3, [pc, #76]	; (8a48 <chan_send+0x9c>)
    89fa:	f853 7020 	ldrls.w	r7, [r3, r0, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    89fe:	6833      	ldr	r3, [r6, #0]
	chan->sent = cb ? cb : chan_cb(buf);
    8a00:	f8c6 7140 	str.w	r7, [r6, #320]	; 0x140
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    8a04:	6818      	ldr	r0, [r3, #0]
	if (cb == chan_rsp_sent) {
    8a06:	4b11      	ldr	r3, [pc, #68]	; (8a4c <chan_send+0xa0>)
    8a08:	429f      	cmp	r7, r3
    8a0a:	d018      	beq.n	8a3e <chan_send+0x92>
	} else if (cb == chan_cfm_sent) {
    8a0c:	4b10      	ldr	r3, [pc, #64]	; (8a50 <chan_send+0xa4>)
    8a0e:	429f      	cmp	r7, r3
    8a10:	d017      	beq.n	8a42 <chan_send+0x96>
		return att_sent;
    8a12:	4910      	ldr	r1, [pc, #64]	; (8a54 <chan_send+0xa8>)
    8a14:	4b10      	ldr	r3, [pc, #64]	; (8a58 <chan_send+0xac>)
    8a16:	4a11      	ldr	r2, [pc, #68]	; (8a5c <chan_send+0xb0>)
    8a18:	428f      	cmp	r7, r1
    8a1a:	bf18      	it	ne
    8a1c:	4613      	movne	r3, r2
			       &chan->chan.chan);
    8a1e:	3608      	adds	r6, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    8a20:	9600      	str	r6, [sp, #0]
    8a22:	4622      	mov	r2, r4
    8a24:	2104      	movs	r1, #4
    8a26:	f016 fb34 	bl	1f092 <bt_l2cap_send_cb>
	if (err) {
    8a2a:	4605      	mov	r5, r0
    8a2c:	2800      	cmp	r0, #0
    8a2e:	d0cf      	beq.n	89d0 <chan_send+0x24>
	buf->data = buf->__buf + state->offset;
    8a30:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    8a32:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
    8a36:	fa10 f088 	uxtah	r0, r0, r8
    8a3a:	60a0      	str	r0, [r4, #8]
}
    8a3c:	e7c8      	b.n	89d0 <chan_send+0x24>
		return att_rsp_sent;
    8a3e:	4b08      	ldr	r3, [pc, #32]	; (8a60 <chan_send+0xb4>)
    8a40:	e7ed      	b.n	8a1e <chan_send+0x72>
		return att_cfm_sent;
    8a42:	4b08      	ldr	r3, [pc, #32]	; (8a64 <chan_send+0xb8>)
    8a44:	e7eb      	b.n	8a1e <chan_send+0x72>
    8a46:	bf00      	nop
    8a48:	00026a40 	.word	0x00026a40
    8a4c:	0001f6f7 	.word	0x0001f6f7
    8a50:	0001f713 	.word	0x0001f713
    8a54:	0001f4c7 	.word	0x0001f4c7
    8a58:	00008849 	.word	0x00008849
    8a5c:	0001f1af 	.word	0x0001f1af
    8a60:	00008839 	.word	0x00008839
    8a64:	00008829 	.word	0x00008829

00008a68 <bt_att_chan_send_rsp.constprop.0>:
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
    8a68:	b538      	push	{r3, r4, r5, lr}
	return chan_send(chan, buf, cb);
    8a6a:	4a07      	ldr	r2, [pc, #28]	; (8a88 <bt_att_chan_send_rsp.constprop.0+0x20>)
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
    8a6c:	4604      	mov	r4, r0
    8a6e:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
    8a70:	f7ff ff9c 	bl	89ac <chan_send>
	if (err) {
    8a74:	b130      	cbz	r0, 8a84 <bt_att_chan_send_rsp.constprop.0+0x1c>
		net_buf_put(&chan->tx_queue, buf);
    8a76:	4629      	mov	r1, r5
    8a78:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
}
    8a7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
    8a80:	f01c b904 	b.w	24c8c <net_buf_put>
}
    8a84:	bd38      	pop	{r3, r4, r5, pc}
    8a86:	bf00      	nop
    8a88:	0001f6f7 	.word	0x0001f6f7

00008a8c <read_type_cb>:
{
    8a8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
    8a90:	f8d2 8000 	ldr.w	r8, [r2]
{
    8a94:	4606      	mov	r6, r0
    8a96:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    8a98:	6800      	ldr	r0, [r0, #0]
    8a9a:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
    8a9c:	f8d8 5008 	ldr.w	r5, [r8, #8]
{
    8aa0:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    8aa2:	f015 fcef 	bl	1e484 <bt_uuid_cmp>
    8aa6:	4607      	mov	r7, r0
    8aa8:	2800      	cmp	r0, #0
    8aaa:	d13e      	bne.n	8b2a <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    8aac:	4628      	mov	r0, r5
    8aae:	2215      	movs	r2, #21
    8ab0:	4631      	mov	r1, r6
    8ab2:	f017 fb75 	bl	201a0 <bt_gatt_check_perm>
    8ab6:	4605      	mov	r5, r0
    8ab8:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    8aba:	b148      	cbz	r0, 8ad0 <read_type_cb+0x44>
		if (data->rsp->len) {
    8abc:	68e3      	ldr	r3, [r4, #12]
    8abe:	781b      	ldrb	r3, [r3, #0]
    8ac0:	b923      	cbnz	r3, 8acc <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
    8ac2:	2500      	movs	r5, #0
}
    8ac4:	4628      	mov	r0, r5
    8ac6:	b003      	add	sp, #12
    8ac8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
    8acc:	7527      	strb	r7, [r4, #20]
    8ace:	e7f8      	b.n	8ac2 <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    8ad0:	68a0      	ldr	r0, [r4, #8]
    8ad2:	f01c f8ec 	bl	24cae <net_buf_frag_last>
	return net_buf_simple_add(&buf->b, len);
    8ad6:	2102      	movs	r1, #2
    8ad8:	3008      	adds	r0, #8
    8ada:	f01c f91c 	bl	24d16 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    8ade:	4b14      	ldr	r3, [pc, #80]	; (8b30 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    8ae0:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    8ae2:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
    8ae4:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    8ae8:	4631      	mov	r1, r6
    8aea:	9300      	str	r3, [sp, #0]
    8aec:	9401      	str	r4, [sp, #4]
    8aee:	462b      	mov	r3, r5
    8af0:	4640      	mov	r0, r8
    8af2:	f016 fd25 	bl	1f540 <att_chan_read>
	if (read < 0) {
    8af6:	2800      	cmp	r0, #0
    8af8:	da07      	bge.n	8b0a <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
    8afa:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
    8afe:	bf26      	itte	cs
    8b00:	4240      	negcs	r0, r0
    8b02:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    8b04:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
    8b06:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    8b08:	e7dc      	b.n	8ac4 <read_type_cb+0x38>
	if (!data->item) {
    8b0a:	6923      	ldr	r3, [r4, #16]
    8b0c:	2b00      	cmp	r3, #0
    8b0e:	d0d8      	beq.n	8ac2 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    8b10:	68a0      	ldr	r0, [r4, #8]
    8b12:	f016 fb44 	bl	1f19e <net_buf_frags_len>
    8b16:	f8b8 508a 	ldrh.w	r5, [r8, #138]	; 0x8a
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    8b1a:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    8b1c:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    8b1e:	7818      	ldrb	r0, [r3, #0]
    8b20:	4285      	cmp	r5, r0
    8b22:	bf94      	ite	ls
    8b24:	2500      	movls	r5, #0
    8b26:	2501      	movhi	r5, #1
    8b28:	e7cc      	b.n	8ac4 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
    8b2a:	2501      	movs	r5, #1
    8b2c:	e7ca      	b.n	8ac4 <read_type_cb+0x38>
    8b2e:	bf00      	nop
    8b30:	0001f1bb 	.word	0x0001f1bb

00008b34 <bt_att_connected>:
{
    8b34:	b570      	push	{r4, r5, r6, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    8b36:	4606      	mov	r6, r0
{
    8b38:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    8b3a:	2104      	movs	r1, #4
    8b3c:	f856 0908 	ldr.w	r0, [r6], #-8
    8b40:	f016 faf1 	bl	1f126 <bt_l2cap_le_lookup_tx_cid>
	struct bt_att *att = att_chan->att;
    8b44:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (sys_slist_is_empty(&att->chans)) {
    8b48:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    8b4a:	b91b      	cbnz	r3, 8b54 <bt_att_connected+0x20>
    8b4c:	f105 000c 	add.w	r0, r5, #12
    8b50:	f01c ff6b 	bl	25a2a <z_impl_k_queue_init>
	parent->next = child;
    8b54:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    8b56:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
Z_GENLIST_PREPEND(slist, snode)
    8b5a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
    8b5c:	f504 739e 	add.w	r3, r4, #316	; 0x13c
	list->head = node;
    8b60:	626b      	str	r3, [r5, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
    8b62:	b902      	cbnz	r2, 8b66 <bt_att_connected+0x32>
	list->tail = node;
    8b64:	62ab      	str	r3, [r5, #40]	; 0x28
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    8b66:	f3bf 8f5b 	dmb	ish
    8b6a:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    8b6e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
    8b72:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    8b74:	bf58      	it	pl
    8b76:	2317      	movpl	r3, #23
	att_chan_mtu_updated(att_chan);
    8b78:	4630      	mov	r0, r6
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    8b7a:	bf5c      	itt	pl
    8b7c:	f8a4 3082 	strhpl.w	r3, [r4, #130]	; 0x82
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    8b80:	f8a4 3072 	strhpl.w	r3, [r4, #114]	; 0x72
	att_chan_mtu_updated(att_chan);
    8b84:	f016 fc43 	bl	1f40e <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
    8b88:	f504 7084 	add.w	r0, r4, #264	; 0x108
    8b8c:	4902      	ldr	r1, [pc, #8]	; (8b98 <bt_att_connected+0x64>)
}
    8b8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
    8b92:	f01d b87d 	b.w	25c90 <k_work_init_delayable>
    8b96:	bf00      	nop
    8b98:	0001fa8d 	.word	0x0001fa8d

00008b9c <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
    8b9c:	898b      	ldrh	r3, [r1, #12]
{
    8b9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8ba2:	4604      	mov	r4, r0
    8ba4:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    8ba6:	2b00      	cmp	r3, #0
    8ba8:	d060      	beq.n	8c6c <bt_att_recv+0xd0>
	return net_buf_simple_pull_mem(&buf->b, len);
    8baa:	2101      	movs	r1, #1
    8bac:	f105 0008 	add.w	r0, r5, #8
    8bb0:	f01c f934 	bl	24e1c <net_buf_simple_pull_mem>
	if (!att_chan->att) {
    8bb4:	f854 3c08 	ldr.w	r3, [r4, #-8]
    8bb8:	4607      	mov	r7, r0
    8bba:	2b00      	cmp	r3, #0
    8bbc:	d056      	beq.n	8c6c <bt_att_recv+0xd0>
		if (hdr->code == handlers[i].op) {
    8bbe:	7801      	ldrb	r1, [r0, #0]
    8bc0:	4a2e      	ldr	r2, [pc, #184]	; (8c7c <bt_att_recv+0xe0>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
    8bc2:	f1a4 0608 	sub.w	r6, r4, #8
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    8bc6:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
    8bc8:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
    8bcc:	4288      	cmp	r0, r1
    8bce:	d11b      	bne.n	8c08 <bt_att_recv+0x6c>
		if (handler->type == ATT_REQUEST &&
    8bd0:	00d9      	lsls	r1, r3, #3
    8bd2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    8bd6:	f893 8002 	ldrb.w	r8, [r3, #2]
    8bda:	f1b8 0f01 	cmp.w	r8, #1
    8bde:	d023      	beq.n	8c28 <bt_att_recv+0x8c>
		} else if (handler->type == ATT_INDICATION &&
    8be0:	f1b8 0f05 	cmp.w	r8, #5
    8be4:	d131      	bne.n	8c4a <bt_att_recv+0xae>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    8be6:	f3bf 8f5b 	dmb	ish
    8bea:	34e8      	adds	r4, #232	; 0xe8
    8bec:	e854 3f00 	ldrex	r3, [r4]
    8bf0:	f043 0002 	orr.w	r0, r3, #2
    8bf4:	e844 0c00 	strex	ip, r0, [r4]
    8bf8:	f1bc 0f00 	cmp.w	ip, #0
    8bfc:	d1f6      	bne.n	8bec <bt_att_recv+0x50>
    8bfe:	f3bf 8f5b 	dmb	ish
    8c02:	f013 0f02 	tst.w	r3, #2
    8c06:	e01f      	b.n	8c48 <bt_att_recv+0xac>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    8c08:	3301      	adds	r3, #1
    8c0a:	2b0d      	cmp	r3, #13
    8c0c:	d1dc      	bne.n	8bc8 <bt_att_recv+0x2c>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
    8c0e:	4608      	mov	r0, r1
    8c10:	f016 fae5 	bl	1f1de <att_op_get_type>
    8c14:	b350      	cbz	r0, 8c6c <bt_att_recv+0xd0>
    8c16:	2805      	cmp	r0, #5
    8c18:	d028      	beq.n	8c6c <bt_att_recv+0xd0>
	if (!req) {
    8c1a:	b339      	cbz	r1, 8c6c <bt_att_recv+0xd0>
    8c1c:	2306      	movs	r3, #6
    8c1e:	2200      	movs	r2, #0
    8c20:	4630      	mov	r0, r6
    8c22:	f016 fe5c 	bl	1f8de <send_err_rsp.part.0>
    8c26:	e021      	b.n	8c6c <bt_att_recv+0xd0>
    8c28:	34e8      	adds	r4, #232	; 0xe8
    8c2a:	f3bf 8f5b 	dmb	ish
    8c2e:	e854 3f00 	ldrex	r3, [r4]
    8c32:	f043 0001 	orr.w	r0, r3, #1
    8c36:	e844 0c00 	strex	ip, r0, [r4]
    8c3a:	f1bc 0f00 	cmp.w	ip, #0
    8c3e:	d1f6      	bne.n	8c2e <bt_att_recv+0x92>
    8c40:	f3bf 8f5b 	dmb	ish
		if (handler->type == ATT_REQUEST &&
    8c44:	f013 0f01 	tst.w	r3, #1
    8c48:	d110      	bne.n	8c6c <bt_att_recv+0xd0>
	if (buf->len < handler->expect_len) {
    8c4a:	440a      	add	r2, r1
    8c4c:	89a9      	ldrh	r1, [r5, #12]
    8c4e:	7853      	ldrb	r3, [r2, #1]
    8c50:	4299      	cmp	r1, r3
    8c52:	d30e      	bcc.n	8c72 <bt_att_recv+0xd6>
		err = handler->func(att_chan, buf);
    8c54:	6853      	ldr	r3, [r2, #4]
    8c56:	4629      	mov	r1, r5
    8c58:	4630      	mov	r0, r6
    8c5a:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    8c5c:	f1b8 0f01 	cmp.w	r8, #1
		err = handler->func(att_chan, buf);
    8c60:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    8c62:	d103      	bne.n	8c6c <bt_att_recv+0xd0>
    8c64:	b110      	cbz	r0, 8c6c <bt_att_recv+0xd0>
		send_err_rsp(att_chan, hdr->code, 0, err);
    8c66:	7839      	ldrb	r1, [r7, #0]
	if (!req) {
    8c68:	2900      	cmp	r1, #0
    8c6a:	d1d8      	bne.n	8c1e <bt_att_recv+0x82>
}
    8c6c:	2000      	movs	r0, #0
    8c6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (handler->type == ATT_REQUEST && err) {
    8c72:	f1b8 0f01 	cmp.w	r8, #1
    8c76:	d1f9      	bne.n	8c6c <bt_att_recv+0xd0>
		err = BT_ATT_ERR_INVALID_PDU;
    8c78:	2304      	movs	r3, #4
    8c7a:	e7f4      	b.n	8c66 <bt_att_recv+0xca>
    8c7c:	00026a54 	.word	0x00026a54

00008c80 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
    8c80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8c84:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    8c86:	6803      	ldr	r3, [r0, #0]
    8c88:	460e      	mov	r6, r1
    8c8a:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
    8c8c:	b087      	sub	sp, #28
    8c8e:	4605      	mov	r5, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    8c90:	bf18      	it	ne
    8c92:	2101      	movne	r1, #1
    8c94:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
    8c96:	4690      	mov	r8, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    8c98:	f017 fad8 	bl	2024c <bt_gatt_change_aware>
    8c9c:	2800      	cmp	r0, #0
    8c9e:	d04a      	beq.n	8d36 <att_write_rsp.constprop.0+0xb6>
	if (!handle) {
    8ca0:	2f00      	cmp	r7, #0
    8ca2:	d04a      	beq.n	8d3a <att_write_rsp.constprop.0+0xba>
	(void)memset(&data, 0, sizeof(data));
    8ca4:	2218      	movs	r2, #24
    8ca6:	2100      	movs	r1, #0
    8ca8:	4668      	mov	r0, sp
    8caa:	f015 f9cd 	bl	1e048 <memset>
	if (rsp) {
    8cae:	f1b8 0f00 	cmp.w	r8, #0
    8cb2:	d122      	bne.n	8cfa <att_write_rsp.constprop.0+0x7a>
	data.conn = chan->att->conn;
    8cb4:	682b      	ldr	r3, [r5, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    8cb6:	4a22      	ldr	r2, [pc, #136]	; (8d40 <att_write_rsp.constprop.0+0xc0>)
	data.conn = chan->att->conn;
    8cb8:	681b      	ldr	r3, [r3, #0]
    8cba:	9300      	str	r3, [sp, #0]
	data.value = value;
    8cbc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8cbe:	9303      	str	r3, [sp, #12]
	data.len = len;
    8cc0:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    8cc4:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    8cc8:	2301      	movs	r3, #1
    8cca:	f88d 3014 	strb.w	r3, [sp, #20]
	data.offset = offset;
    8cce:	f04f 0900 	mov.w	r9, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    8cd2:	466b      	mov	r3, sp
    8cd4:	4639      	mov	r1, r7
    8cd6:	4638      	mov	r0, r7
	data.req = req;
    8cd8:	f88d 6008 	strb.w	r6, [sp, #8]
	data.offset = offset;
    8cdc:	f8ad 9012 	strh.w	r9, [sp, #18]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    8ce0:	f016 faaa 	bl	1f238 <bt_gatt_foreach_attr>
	if (data.err) {
    8ce4:	f89d 4014 	ldrb.w	r4, [sp, #20]
    8ce8:	b1f4      	cbz	r4, 8d28 <att_write_rsp.constprop.0+0xa8>
		if (rsp) {
    8cea:	f1b8 0f00 	cmp.w	r8, #0
    8cee:	d10e      	bne.n	8d0e <att_write_rsp.constprop.0+0x8e>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    8cf0:	2400      	movs	r4, #0
}
    8cf2:	4620      	mov	r0, r4
    8cf4:	b007      	add	sp, #28
    8cf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
    8cfa:	2200      	movs	r2, #0
    8cfc:	4641      	mov	r1, r8
    8cfe:	4628      	mov	r0, r5
    8d00:	f016 fdc8 	bl	1f894 <bt_att_chan_create_pdu>
    8d04:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    8d06:	2800      	cmp	r0, #0
    8d08:	d1d4      	bne.n	8cb4 <att_write_rsp.constprop.0+0x34>
			return BT_ATT_ERR_UNLIKELY;
    8d0a:	240e      	movs	r4, #14
    8d0c:	e7f1      	b.n	8cf2 <att_write_rsp.constprop.0+0x72>
			net_buf_unref(data.buf);
    8d0e:	9801      	ldr	r0, [sp, #4]
    8d10:	f00e f9b2 	bl	17078 <net_buf_unref>
	if (!req) {
    8d14:	2e00      	cmp	r6, #0
    8d16:	d0eb      	beq.n	8cf0 <att_write_rsp.constprop.0+0x70>
    8d18:	f89d 3014 	ldrb.w	r3, [sp, #20]
    8d1c:	463a      	mov	r2, r7
    8d1e:	4631      	mov	r1, r6
    8d20:	4628      	mov	r0, r5
    8d22:	f016 fddc 	bl	1f8de <send_err_rsp.part.0>
    8d26:	e7e3      	b.n	8cf0 <att_write_rsp.constprop.0+0x70>
	if (data.buf) {
    8d28:	9901      	ldr	r1, [sp, #4]
    8d2a:	2900      	cmp	r1, #0
    8d2c:	d0e0      	beq.n	8cf0 <att_write_rsp.constprop.0+0x70>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    8d2e:	4628      	mov	r0, r5
    8d30:	f7ff fe9a 	bl	8a68 <bt_att_chan_send_rsp.constprop.0>
    8d34:	e7dd      	b.n	8cf2 <att_write_rsp.constprop.0+0x72>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    8d36:	2412      	movs	r4, #18
    8d38:	e7db      	b.n	8cf2 <att_write_rsp.constprop.0+0x72>
		return BT_ATT_ERR_INVALID_HANDLE;
    8d3a:	2401      	movs	r4, #1
    8d3c:	e7d9      	b.n	8cf2 <att_write_rsp.constprop.0+0x72>
    8d3e:	bf00      	nop
    8d40:	0001f4dd 	.word	0x0001f4dd

00008d44 <att_read_group_req>:
{
    8d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    8d48:	898c      	ldrh	r4, [r1, #12]
    8d4a:	3c04      	subs	r4, #4
    8d4c:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    8d4e:	2c02      	cmp	r4, #2
{
    8d50:	4605      	mov	r5, r0
    8d52:	b08c      	sub	sp, #48	; 0x30
    8d54:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    8d56:	d001      	beq.n	8d5c <att_read_group_req+0x18>
    8d58:	2c10      	cmp	r4, #16
    8d5a:	d16e      	bne.n	8e3a <att_read_group_req+0xf6>
    8d5c:	2104      	movs	r1, #4
    8d5e:	3008      	adds	r0, #8
    8d60:	f01c f85c 	bl	24e1c <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    8d64:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
    8d68:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    8d6a:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    8d6c:	1d01      	adds	r1, r0, #4
    8d6e:	4622      	mov	r2, r4
    8d70:	4640      	mov	r0, r8
    8d72:	f015 fbb5 	bl	1e4e0 <bt_uuid_create>
    8d76:	2800      	cmp	r0, #0
    8d78:	d061      	beq.n	8e3e <att_read_group_req+0xfa>
	if (!start || !end) {
    8d7a:	2e00      	cmp	r6, #0
    8d7c:	d03a      	beq.n	8df4 <att_read_group_req+0xb0>
    8d7e:	2400      	movs	r4, #0
    8d80:	2f00      	cmp	r7, #0
    8d82:	d036      	beq.n	8df2 <att_read_group_req+0xae>
	if (start > end) {
    8d84:	42be      	cmp	r6, r7
    8d86:	d835      	bhi.n	8df4 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    8d88:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    8d8c:	a901      	add	r1, sp, #4
    8d8e:	4640      	mov	r0, r8
    8d90:	f88d 4004 	strb.w	r4, [sp, #4]
    8d94:	f8ad 3006 	strh.w	r3, [sp, #6]
    8d98:	f015 fb74 	bl	1e484 <bt_uuid_cmp>
    8d9c:	2800      	cmp	r0, #0
    8d9e:	d134      	bne.n	8e0a <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
    8da0:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    8da2:	2214      	movs	r2, #20
    8da4:	2100      	movs	r1, #0
    8da6:	a807      	add	r0, sp, #28
    8da8:	f015 f94e 	bl	1e048 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    8dac:	2201      	movs	r2, #1
    8dae:	2111      	movs	r1, #17
    8db0:	4620      	mov	r0, r4
    8db2:	f016 fdd7 	bl	1f964 <bt_att_create_pdu>
    8db6:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    8db8:	2800      	cmp	r0, #0
    8dba:	d040      	beq.n	8e3e <att_read_group_req+0xfa>
	return net_buf_simple_add(&buf->b, len);
    8dbc:	2101      	movs	r1, #1
    8dbe:	3008      	adds	r0, #8
	data.uuid = uuid;
    8dc0:	e9cd 5807 	strd	r5, r8, [sp, #28]
    8dc4:	f01b ffa7 	bl	24d16 <net_buf_simple_add>
	data.rsp->len = 0U;
    8dc8:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    8dcc:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    8dce:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
    8dd0:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    8dd4:	4a1b      	ldr	r2, [pc, #108]	; (8e44 <att_read_group_req+0x100>)
	data.group = NULL;
    8dd6:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    8dda:	4639      	mov	r1, r7
    8ddc:	4630      	mov	r0, r6
    8dde:	f016 fa2b 	bl	1f238 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    8de2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8de4:	781c      	ldrb	r4, [r3, #0]
    8de6:	bb1c      	cbnz	r4, 8e30 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
    8de8:	9809      	ldr	r0, [sp, #36]	; 0x24
    8dea:	f00e f945 	bl	17078 <net_buf_unref>
	if (!req) {
    8dee:	230a      	movs	r3, #10
    8df0:	e018      	b.n	8e24 <att_read_group_req+0xe0>
			*err = 0U;
    8df2:	463e      	mov	r6, r7
	if (!req) {
    8df4:	2301      	movs	r3, #1
    8df6:	4632      	mov	r2, r6
    8df8:	2110      	movs	r1, #16
    8dfa:	4628      	mov	r0, r5
    8dfc:	f016 fd6f 	bl	1f8de <send_err_rsp.part.0>
		return 0;
    8e00:	2400      	movs	r4, #0
}
    8e02:	4620      	mov	r0, r4
    8e04:	b00c      	add	sp, #48	; 0x30
    8e06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    8e0a:	f642 0301 	movw	r3, #10241	; 0x2801
    8e0e:	a907      	add	r1, sp, #28
    8e10:	4640      	mov	r0, r8
    8e12:	f88d 401c 	strb.w	r4, [sp, #28]
    8e16:	f8ad 301e 	strh.w	r3, [sp, #30]
    8e1a:	f015 fb33 	bl	1e484 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    8e1e:	2800      	cmp	r0, #0
    8e20:	d0be      	beq.n	8da0 <att_read_group_req+0x5c>
	if (!req) {
    8e22:	2310      	movs	r3, #16
    8e24:	4632      	mov	r2, r6
    8e26:	2110      	movs	r1, #16
    8e28:	4628      	mov	r0, r5
    8e2a:	f016 fd58 	bl	1f8de <send_err_rsp.part.0>
		return 0;
    8e2e:	e7e8      	b.n	8e02 <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    8e30:	9909      	ldr	r1, [sp, #36]	; 0x24
    8e32:	4628      	mov	r0, r5
    8e34:	f7ff fe18 	bl	8a68 <bt_att_chan_send_rsp.constprop.0>
	return 0;
    8e38:	e7e2      	b.n	8e00 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
    8e3a:	2404      	movs	r4, #4
    8e3c:	e7e1      	b.n	8e02 <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
    8e3e:	240e      	movs	r4, #14
    8e40:	e7df      	b.n	8e02 <att_read_group_req+0xbe>
    8e42:	bf00      	nop
    8e44:	00008901 	.word	0x00008901

00008e48 <att_read_mult_req>:
{
    8e48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    8e4c:	6886      	ldr	r6, [r0, #8]
{
    8e4e:	b085      	sub	sp, #20
    8e50:	4604      	mov	r4, r0
    8e52:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
    8e54:	4630      	mov	r0, r6
    8e56:	2101      	movs	r1, #1
    8e58:	f017 f9f8 	bl	2024c <bt_gatt_change_aware>
    8e5c:	b3b8      	cbz	r0, 8ece <att_read_mult_req+0x86>
	(void)memset(&data, 0, sizeof(data));
    8e5e:	2210      	movs	r2, #16
    8e60:	2100      	movs	r1, #0
    8e62:	4668      	mov	r0, sp
    8e64:	f015 f8f0 	bl	1e048 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    8e68:	2200      	movs	r2, #0
    8e6a:	210f      	movs	r1, #15
    8e6c:	4630      	mov	r0, r6
    8e6e:	f016 fd79 	bl	1f964 <bt_att_create_pdu>
    8e72:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    8e74:	b368      	cbz	r0, 8ed2 <att_read_mult_req+0x8a>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    8e76:	f8df 9060 	ldr.w	r9, [pc, #96]	; 8ed8 <att_read_mult_req+0x90>
	data.chan = chan;
    8e7a:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
    8e7c:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    8e80:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
    8e84:	89ab      	ldrh	r3, [r5, #12]
    8e86:	2b01      	cmp	r3, #1
    8e88:	d804      	bhi.n	8e94 <att_read_mult_req+0x4c>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    8e8a:	9902      	ldr	r1, [sp, #8]
    8e8c:	4620      	mov	r0, r4
    8e8e:	f7ff fdeb 	bl	8a68 <bt_att_chan_send_rsp.constprop.0>
    8e92:	e018      	b.n	8ec6 <att_read_mult_req+0x7e>
    8e94:	4638      	mov	r0, r7
    8e96:	f01b ffd1 	bl	24e3c <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    8e9a:	466b      	mov	r3, sp
    8e9c:	464a      	mov	r2, r9
    8e9e:	4601      	mov	r1, r0
    8ea0:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    8ea2:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    8ea6:	f016 f9c7 	bl	1f238 <bt_gatt_foreach_attr>
		if (data.err) {
    8eaa:	f89d 300c 	ldrb.w	r3, [sp, #12]
    8eae:	2b00      	cmp	r3, #0
    8eb0:	d0e8      	beq.n	8e84 <att_read_mult_req+0x3c>
			net_buf_unref(data.buf);
    8eb2:	9802      	ldr	r0, [sp, #8]
    8eb4:	f00e f8e0 	bl	17078 <net_buf_unref>
	if (!req) {
    8eb8:	f89d 300c 	ldrb.w	r3, [sp, #12]
    8ebc:	4632      	mov	r2, r6
    8ebe:	210e      	movs	r1, #14
    8ec0:	4620      	mov	r0, r4
    8ec2:	f016 fd0c 	bl	1f8de <send_err_rsp.part.0>
	return 0;
    8ec6:	2000      	movs	r0, #0
}
    8ec8:	b005      	add	sp, #20
    8eca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    8ece:	2012      	movs	r0, #18
    8ed0:	e7fa      	b.n	8ec8 <att_read_mult_req+0x80>
		return BT_ATT_ERR_UNLIKELY;
    8ed2:	200e      	movs	r0, #14
    8ed4:	e7f8      	b.n	8ec8 <att_read_mult_req+0x80>
    8ed6:	bf00      	nop
    8ed8:	0001f72f 	.word	0x0001f72f

00008edc <att_read_rsp>:
{
    8edc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    8ee0:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
    8ee4:	4605      	mov	r5, r0
    8ee6:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
    8ee8:	4640      	mov	r0, r8
    8eea:	2101      	movs	r1, #1
{
    8eec:	4614      	mov	r4, r2
    8eee:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
    8ef0:	f017 f9ac 	bl	2024c <bt_gatt_change_aware>
    8ef4:	b388      	cbz	r0, 8f5a <att_read_rsp+0x7e>
	if (!handle) {
    8ef6:	b396      	cbz	r6, 8f5e <att_read_rsp+0x82>
	(void)memset(&data, 0, sizeof(data));
    8ef8:	2210      	movs	r2, #16
    8efa:	2100      	movs	r1, #0
    8efc:	4668      	mov	r0, sp
    8efe:	f015 f8a3 	bl	1e048 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    8f02:	2200      	movs	r2, #0
    8f04:	4621      	mov	r1, r4
    8f06:	4640      	mov	r0, r8
    8f08:	f016 fd2c 	bl	1f964 <bt_att_create_pdu>
    8f0c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    8f0e:	b340      	cbz	r0, 8f62 <att_read_rsp+0x86>
	data.offset = offset;
    8f10:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    8f14:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    8f18:	2301      	movs	r3, #1
    8f1a:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    8f1e:	4a12      	ldr	r2, [pc, #72]	; (8f68 <att_read_rsp+0x8c>)
	data.chan = chan;
    8f20:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    8f22:	466b      	mov	r3, sp
    8f24:	4631      	mov	r1, r6
    8f26:	4630      	mov	r0, r6
    8f28:	f016 f986 	bl	1f238 <bt_gatt_foreach_attr>
	if (data.err) {
    8f2c:	f89d 400c 	ldrb.w	r4, [sp, #12]
    8f30:	b174      	cbz	r4, 8f50 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
    8f32:	9802      	ldr	r0, [sp, #8]
    8f34:	f00e f8a0 	bl	17078 <net_buf_unref>
	if (!req) {
    8f38:	f89d 300c 	ldrb.w	r3, [sp, #12]
    8f3c:	4632      	mov	r2, r6
    8f3e:	4639      	mov	r1, r7
    8f40:	4628      	mov	r0, r5
    8f42:	f016 fccc 	bl	1f8de <send_err_rsp.part.0>
		return 0;
    8f46:	2400      	movs	r4, #0
}
    8f48:	4620      	mov	r0, r4
    8f4a:	b004      	add	sp, #16
    8f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    8f50:	9902      	ldr	r1, [sp, #8]
    8f52:	4628      	mov	r0, r5
    8f54:	f7ff fd88 	bl	8a68 <bt_att_chan_send_rsp.constprop.0>
	return 0;
    8f58:	e7f6      	b.n	8f48 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    8f5a:	2412      	movs	r4, #18
    8f5c:	e7f4      	b.n	8f48 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
    8f5e:	2401      	movs	r4, #1
    8f60:	e7f2      	b.n	8f48 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    8f62:	240e      	movs	r4, #14
    8f64:	e7f0      	b.n	8f48 <att_read_rsp+0x6c>
    8f66:	bf00      	nop
    8f68:	0001f72f 	.word	0x0001f72f

00008f6c <att_read_type_req>:
{
    8f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    8f70:	898c      	ldrh	r4, [r1, #12]
    8f72:	3c04      	subs	r4, #4
    8f74:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    8f76:	2c02      	cmp	r4, #2
{
    8f78:	4605      	mov	r5, r0
    8f7a:	b08c      	sub	sp, #48	; 0x30
    8f7c:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    8f7e:	d001      	beq.n	8f84 <att_read_type_req+0x18>
    8f80:	2c10      	cmp	r4, #16
    8f82:	d14f      	bne.n	9024 <att_read_type_req+0xb8>
	return net_buf_simple_pull_mem(&buf->b, len);
    8f84:	2104      	movs	r1, #4
    8f86:	3008      	adds	r0, #8
    8f88:	f01b ff48 	bl	24e1c <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    8f8c:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
    8f90:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    8f92:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    8f94:	1d01      	adds	r1, r0, #4
    8f96:	4622      	mov	r2, r4
    8f98:	4640      	mov	r0, r8
    8f9a:	f015 faa1 	bl	1e4e0 <bt_uuid_create>
    8f9e:	b188      	cbz	r0, 8fc4 <att_read_type_req+0x58>
	if (!start || !end) {
    8fa0:	b19e      	cbz	r6, 8fca <att_read_type_req+0x5e>
    8fa2:	b18f      	cbz	r7, 8fc8 <att_read_type_req+0x5c>
	if (start > end) {
    8fa4:	42b7      	cmp	r7, r6
    8fa6:	d310      	bcc.n	8fca <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
    8fa8:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
    8faa:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    8fac:	2100      	movs	r1, #0
    8fae:	eb0d 0002 	add.w	r0, sp, r2
    8fb2:	f015 f849 	bl	1e048 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    8fb6:	2201      	movs	r2, #1
    8fb8:	2109      	movs	r1, #9
    8fba:	4620      	mov	r0, r4
    8fbc:	f016 fcd2 	bl	1f964 <bt_att_create_pdu>
    8fc0:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    8fc2:	b968      	cbnz	r0, 8fe0 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
    8fc4:	240e      	movs	r4, #14
    8fc6:	e007      	b.n	8fd8 <att_read_type_req+0x6c>
			*err = 0U;
    8fc8:	463e      	mov	r6, r7
	if (!req) {
    8fca:	2301      	movs	r3, #1
    8fcc:	4632      	mov	r2, r6
    8fce:	2108      	movs	r1, #8
    8fd0:	4628      	mov	r0, r5
    8fd2:	f016 fc84 	bl	1f8de <send_err_rsp.part.0>
		return 0;
    8fd6:	2400      	movs	r4, #0
}
    8fd8:	4620      	mov	r0, r4
    8fda:	b00c      	add	sp, #48	; 0x30
    8fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
    8fe0:	2101      	movs	r1, #1
    8fe2:	3008      	adds	r0, #8
	data.uuid = uuid;
    8fe4:	e9cd 5806 	strd	r5, r8, [sp, #24]
    8fe8:	f01b fe95 	bl	24d16 <net_buf_simple_add>
	data.rsp->len = 0U;
    8fec:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    8ff0:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    8ff2:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    8ff4:	4a0c      	ldr	r2, [pc, #48]	; (9028 <att_read_type_req+0xbc>)
	data.rsp->len = 0U;
    8ff6:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    8ffa:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    8ffc:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    9000:	4630      	mov	r0, r6
    9002:	ab06      	add	r3, sp, #24
    9004:	f016 f918 	bl	1f238 <bt_gatt_foreach_attr>
	if (data.err) {
    9008:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    900c:	b12c      	cbz	r4, 901a <att_read_type_req+0xae>
		net_buf_unref(data.buf);
    900e:	9808      	ldr	r0, [sp, #32]
    9010:	f00e f832 	bl	17078 <net_buf_unref>
	if (!req) {
    9014:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    9018:	e7d8      	b.n	8fcc <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    901a:	9908      	ldr	r1, [sp, #32]
    901c:	4628      	mov	r0, r5
    901e:	f7ff fd23 	bl	8a68 <bt_att_chan_send_rsp.constprop.0>
	return 0;
    9022:	e7d9      	b.n	8fd8 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
    9024:	2404      	movs	r4, #4
    9026:	e7d7      	b.n	8fd8 <att_read_type_req+0x6c>
    9028:	00008a8d 	.word	0x00008a8d

0000902c <att_find_type_req>:
{
    902c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9030:	4688      	mov	r8, r1
    9032:	b086      	sub	sp, #24
    9034:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
    9036:	2106      	movs	r1, #6
    9038:	f108 0008 	add.w	r0, r8, #8
    903c:	f01b feee 	bl	24e1c <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
    9040:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
    9042:	b317      	cbz	r7, 908a <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
    9044:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
    9048:	f1b9 0f00 	cmp.w	r9, #0
    904c:	d01c      	beq.n	9088 <att_find_type_req+0x5c>
	if (start > end) {
    904e:	454f      	cmp	r7, r9
    9050:	d81b      	bhi.n	908a <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
    9052:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    9054:	f8ad 3002 	strh.w	r3, [sp, #2]
    9058:	2400      	movs	r4, #0
    905a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    905e:	a901      	add	r1, sp, #4
    9060:	4668      	mov	r0, sp
	value = buf->data;
    9062:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    9066:	f88d 4000 	strb.w	r4, [sp]
    906a:	f88d 4004 	strb.w	r4, [sp, #4]
    906e:	f8ad 3006 	strh.w	r3, [sp, #6]
    9072:	f015 fa07 	bl	1e484 <bt_uuid_cmp>
    9076:	4606      	mov	r6, r0
    9078:	b190      	cbz	r0, 90a0 <att_find_type_req+0x74>
	if (!req) {
    907a:	230a      	movs	r3, #10
    907c:	463a      	mov	r2, r7
    907e:	2106      	movs	r1, #6
    9080:	4628      	mov	r0, r5
    9082:	f016 fc2c 	bl	1f8de <send_err_rsp.part.0>
		return 0;
    9086:	e007      	b.n	9098 <att_find_type_req+0x6c>
			*err = 0U;
    9088:	464f      	mov	r7, r9
	if (!req) {
    908a:	2301      	movs	r3, #1
    908c:	463a      	mov	r2, r7
    908e:	2106      	movs	r1, #6
    9090:	4628      	mov	r0, r5
    9092:	f016 fc24 	bl	1f8de <send_err_rsp.part.0>
		return 0;
    9096:	2400      	movs	r4, #0
}
    9098:	4620      	mov	r0, r4
    909a:	b006      	add	sp, #24
    909c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    90a0:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
    90a4:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    90a8:	4601      	mov	r1, r0
    90aa:	2214      	movs	r2, #20
    90ac:	a801      	add	r0, sp, #4
    90ae:	f014 ffcb 	bl	1e048 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    90b2:	4632      	mov	r2, r6
    90b4:	2107      	movs	r1, #7
    90b6:	4640      	mov	r0, r8
    90b8:	f016 fc54 	bl	1f964 <bt_att_create_pdu>
    90bc:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    90be:	b1d8      	cbz	r0, 90f8 <att_find_type_req+0xcc>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    90c0:	230a      	movs	r3, #10
    90c2:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    90c6:	4a0d      	ldr	r2, [pc, #52]	; (90fc <att_find_type_req+0xd0>)
	data.value_len = value_len;
    90c8:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    90cc:	ab01      	add	r3, sp, #4
    90ce:	4649      	mov	r1, r9
    90d0:	4638      	mov	r0, r7
	data.value = value;
    90d2:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
    90d6:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    90d8:	f016 f8ae 	bl	1f238 <bt_gatt_foreach_attr>
	if (data.err) {
    90dc:	f89d 4015 	ldrb.w	r4, [sp, #21]
    90e0:	b12c      	cbz	r4, 90ee <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
    90e2:	9802      	ldr	r0, [sp, #8]
    90e4:	f00d ffc8 	bl	17078 <net_buf_unref>
	if (!req) {
    90e8:	f89d 3015 	ldrb.w	r3, [sp, #21]
    90ec:	e7ce      	b.n	908c <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    90ee:	9902      	ldr	r1, [sp, #8]
    90f0:	4628      	mov	r0, r5
    90f2:	f7ff fcb9 	bl	8a68 <bt_att_chan_send_rsp.constprop.0>
	return 0;
    90f6:	e7cf      	b.n	9098 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    90f8:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    90fa:	e7cd      	b.n	9098 <att_find_type_req+0x6c>
    90fc:	0001f24f 	.word	0x0001f24f

00009100 <att_find_info_req>:
{
    9100:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    9102:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    9104:	881e      	ldrh	r6, [r3, #0]
{
    9106:	b085      	sub	sp, #20
    9108:	4605      	mov	r5, r0
	if (!start || !end) {
    910a:	b19e      	cbz	r6, 9134 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
    910c:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    910e:	b184      	cbz	r4, 9132 <att_find_info_req+0x32>
	if (start > end) {
    9110:	42b4      	cmp	r4, r6
    9112:	d30f      	bcc.n	9134 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
    9114:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
    9116:	2210      	movs	r2, #16
    9118:	2100      	movs	r1, #0
    911a:	4668      	mov	r0, sp
    911c:	f014 ff94 	bl	1e048 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    9120:	2200      	movs	r2, #0
    9122:	2105      	movs	r1, #5
    9124:	4638      	mov	r0, r7
    9126:	f016 fc1d 	bl	1f964 <bt_att_create_pdu>
    912a:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    912c:	b958      	cbnz	r0, 9146 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
    912e:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
    9130:	e007      	b.n	9142 <att_find_info_req+0x42>
			*err = 0U;
    9132:	4626      	mov	r6, r4
	if (!req) {
    9134:	2301      	movs	r3, #1
    9136:	4632      	mov	r2, r6
    9138:	2104      	movs	r1, #4
    913a:	4628      	mov	r0, r5
    913c:	f016 fbcf 	bl	1f8de <send_err_rsp.part.0>
	return 0;
    9140:	2000      	movs	r0, #0
}
    9142:	b005      	add	sp, #20
    9144:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    9146:	4621      	mov	r1, r4
    9148:	4a08      	ldr	r2, [pc, #32]	; (916c <att_find_info_req+0x6c>)
	data.chan = chan;
    914a:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    914c:	466b      	mov	r3, sp
    914e:	4630      	mov	r0, r6
    9150:	f016 f872 	bl	1f238 <bt_gatt_foreach_attr>
	if (!data.rsp) {
    9154:	9c02      	ldr	r4, [sp, #8]
    9156:	b924      	cbnz	r4, 9162 <att_find_info_req+0x62>
		net_buf_unref(data.buf);
    9158:	9801      	ldr	r0, [sp, #4]
    915a:	f00d ff8d 	bl	17078 <net_buf_unref>
	if (!req) {
    915e:	230a      	movs	r3, #10
    9160:	e7e9      	b.n	9136 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    9162:	9901      	ldr	r1, [sp, #4]
    9164:	4628      	mov	r0, r5
    9166:	f7ff fc7f 	bl	8a68 <bt_att_chan_send_rsp.constprop.0>
    916a:	e7e9      	b.n	9140 <att_find_info_req+0x40>
    916c:	0001f377 	.word	0x0001f377

00009170 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
    9170:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_att_req *req = NULL;
    9172:	2300      	movs	r3, #0
{
    9174:	4605      	mov	r5, r0
    9176:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
    9178:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
    917a:	f012 fdc3 	bl	1bd04 <z_impl_z_current_get>

	if (k_current_get() == bt_recv_thread_id) {
    917e:	4b0b      	ldr	r3, [pc, #44]	; (91ac <bt_att_req_alloc+0x3c>)
    9180:	681b      	ldr	r3, [r3, #0]
    9182:	4283      	cmp	r3, r0
		/* No req will be fulfilled while blocking on the bt_recv thread.
		 * Blocking would cause deadlock.
		 */
		timeout = K_NO_WAIT;
    9184:	bf04      	itt	eq
    9186:	2500      	moveq	r5, #0
    9188:	462c      	moveq	r4, r5
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    918a:	a901      	add	r1, sp, #4
    918c:	4808      	ldr	r0, [pc, #32]	; (91b0 <bt_att_req_alloc+0x40>)
    918e:	462a      	mov	r2, r5
    9190:	4623      	mov	r3, r4
    9192:	f011 fec7 	bl	1af24 <k_mem_slab_alloc>
    9196:	4601      	mov	r1, r0
    9198:	b930      	cbnz	r0, 91a8 <bt_att_req_alloc+0x38>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
    919a:	9801      	ldr	r0, [sp, #4]
    919c:	2210      	movs	r2, #16
    919e:	f014 ff53 	bl	1e048 <memset>

	return req;
    91a2:	9801      	ldr	r0, [sp, #4]
}
    91a4:	b003      	add	sp, #12
    91a6:	bd30      	pop	{r4, r5, pc}
		return NULL;
    91a8:	2000      	movs	r0, #0
    91aa:	e7fb      	b.n	91a4 <bt_att_req_alloc+0x34>
    91ac:	200022e4 	.word	0x200022e4
    91b0:	20000eb4 	.word	0x20000eb4

000091b4 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
    91b4:	b507      	push	{r0, r1, r2, lr}
    91b6:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
    91b8:	6880      	ldr	r0, [r0, #8]
    91ba:	b120      	cbz	r0, 91c6 <bt_att_req_free+0x12>
		net_buf_unref(req->buf);
    91bc:	f00d ff5c 	bl	17078 <net_buf_unref>
		req->buf = NULL;
    91c0:	9b01      	ldr	r3, [sp, #4]
    91c2:	2200      	movs	r2, #0
    91c4:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
    91c6:	4803      	ldr	r0, [pc, #12]	; (91d4 <bt_att_req_free+0x20>)
    91c8:	a901      	add	r1, sp, #4
    91ca:	f01c fb74 	bl	258b6 <k_mem_slab_free>
}
    91ce:	b003      	add	sp, #12
    91d0:	f85d fb04 	ldr.w	pc, [sp], #4
    91d4:	20000eb4 	.word	0x20000eb4

000091d8 <att_handle_rsp>:
{
    91d8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    91dc:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
    91de:	f500 7088 	add.w	r0, r0, #272	; 0x110
{
    91e2:	4688      	mov	r8, r1
    91e4:	4691      	mov	r9, r2
    91e6:	461f      	mov	r7, r3
	k_work_cancel_delayable(&chan->timeout_work);
    91e8:	f01c fd60 	bl	25cac <k_work_cancel_delayable>
	if (!chan->req) {
    91ec:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
    91f0:	2600      	movs	r6, #0
    91f2:	b1f0      	cbz	r0, 9232 <att_handle_rsp+0x5a>
	if (chan->req == &cancel) {
    91f4:	4b10      	ldr	r3, [pc, #64]	; (9238 <att_handle_rsp+0x60>)
    91f6:	4298      	cmp	r0, r3
    91f8:	d112      	bne.n	9220 <att_handle_rsp+0x48>
		chan->req = NULL;
    91fa:	f8c4 60f4 	str.w	r6, [r4, #244]	; 0xf4
	bt_att_func_t func = NULL;
    91fe:	4635      	mov	r5, r6
	att_req_send_process(chan->att);
    9200:	6820      	ldr	r0, [r4, #0]
    9202:	f016 fafb 	bl	1f7fc <att_req_send_process>
	if (func) {
    9206:	b13d      	cbz	r5, 9218 <att_handle_rsp+0x40>
		func(chan->att->conn, err, pdu, len, params);
    9208:	6820      	ldr	r0, [r4, #0]
    920a:	f8cd a000 	str.w	sl, [sp]
    920e:	6800      	ldr	r0, [r0, #0]
    9210:	464b      	mov	r3, r9
    9212:	4642      	mov	r2, r8
    9214:	4639      	mov	r1, r7
    9216:	47a8      	blx	r5
}
    9218:	2000      	movs	r0, #0
    921a:	b002      	add	sp, #8
    921c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	func = chan->req->func;
    9220:	6845      	ldr	r5, [r0, #4]
	chan->req->func = NULL;
    9222:	6046      	str	r6, [r0, #4]
	params = chan->req->user_data;
    9224:	f8d0 a00c 	ldr.w	sl, [r0, #12]
	bt_att_req_free(chan->req);
    9228:	f7ff ffc4 	bl	91b4 <bt_att_req_free>
	chan->req = NULL;
    922c:	f8c4 60f4 	str.w	r6, [r4, #244]	; 0xf4
    9230:	e7e6      	b.n	9200 <att_handle_rsp+0x28>
	bt_att_func_t func = NULL;
    9232:	4605      	mov	r5, r0
    9234:	e7e4      	b.n	9200 <att_handle_rsp+0x28>
    9236:	bf00      	nop
    9238:	20002370 	.word	0x20002370

0000923c <bt_att_disconnected>:
{
    923c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att *att = att_chan->att;
    923e:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
    9242:	b085      	sub	sp, #20
    9244:	4604      	mov	r4, r0
	if (!att_chan->att) {
    9246:	2d00      	cmp	r5, #0
    9248:	d04d      	beq.n	92e6 <bt_att_disconnected+0xaa>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
    924a:	f500 719e 	add.w	r1, r0, #316	; 0x13c
    924e:	f105 0024 	add.w	r0, r5, #36	; 0x24
    9252:	f016 fa36 	bl	1f6c2 <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
    9256:	f1a4 0608 	sub.w	r6, r4, #8
    925a:	f104 07f0 	add.w	r7, r4, #240	; 0xf0
    925e:	2200      	movs	r2, #0
    9260:	2300      	movs	r3, #0
    9262:	4638      	mov	r0, r7
    9264:	f01b fcd1 	bl	24c0a <net_buf_get>
    9268:	4602      	mov	r2, r0
    926a:	bb18      	cbnz	r0, 92b4 <bt_att_disconnected+0x78>
	if (chan->req) {
    926c:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
    9270:	b123      	cbz	r3, 927c <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
    9272:	4601      	mov	r1, r0
    9274:	230e      	movs	r3, #14
    9276:	4630      	mov	r0, r6
    9278:	f7ff ffae 	bl	91d8 <att_handle_rsp>
	chan->att = NULL;
    927c:	2300      	movs	r3, #0
    927e:	f844 3c08 	str.w	r3, [r4, #-8]
	if (!sys_slist_is_empty(&att->chans)) {
    9282:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    9284:	2b00      	cmp	r3, #0
    9286:	d12e      	bne.n	92e6 <bt_att_disconnected+0xaa>
	att_reset(att);
    9288:	9503      	str	r5, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
    928a:	9803      	ldr	r0, [sp, #12]
    928c:	2200      	movs	r2, #0
    928e:	2300      	movs	r3, #0
    9290:	300c      	adds	r0, #12
    9292:	f01b fcba 	bl	24c0a <net_buf_get>
    9296:	b980      	cbnz	r0, 92ba <bt_att_disconnected+0x7e>
	while (!sys_slist_is_empty(&att->reqs)) {
    9298:	9803      	ldr	r0, [sp, #12]
	return list->head;
    929a:	6845      	ldr	r5, [r0, #4]
    929c:	b985      	cbnz	r5, 92c0 <bt_att_disconnected+0x84>
	att->conn = NULL;
    929e:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
    92a0:	a903      	add	r1, sp, #12
    92a2:	4812      	ldr	r0, [pc, #72]	; (92ec <bt_att_disconnected+0xb0>)
    92a4:	f01c fb07 	bl	258b6 <k_mem_slab_free>
	bt_gatt_disconnected(ch->chan.conn);
    92a8:	6820      	ldr	r0, [r4, #0]
}
    92aa:	b005      	add	sp, #20
    92ac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_gatt_disconnected(ch->chan.conn);
    92b0:	f000 bdfa 	b.w	9ea8 <bt_gatt_disconnected>
		net_buf_unref(buf);
    92b4:	f00d fee0 	bl	17078 <net_buf_unref>
    92b8:	e7d1      	b.n	925e <bt_att_disconnected+0x22>
		net_buf_unref(buf);
    92ba:	f00d fedd 	bl	17078 <net_buf_unref>
    92be:	e7e4      	b.n	928a <bt_att_disconnected+0x4e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    92c0:	6882      	ldr	r2, [r0, #8]
		if (req->func) {
    92c2:	686e      	ldr	r6, [r5, #4]
	return node->next;
    92c4:	682b      	ldr	r3, [r5, #0]
	list->head = node;
    92c6:	6043      	str	r3, [r0, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    92c8:	4295      	cmp	r5, r2
	list->tail = node;
    92ca:	bf08      	it	eq
    92cc:	6083      	streq	r3, [r0, #8]
    92ce:	b136      	cbz	r6, 92de <bt_att_disconnected+0xa2>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
    92d0:	68eb      	ldr	r3, [r5, #12]
    92d2:	9300      	str	r3, [sp, #0]
    92d4:	2300      	movs	r3, #0
    92d6:	6800      	ldr	r0, [r0, #0]
    92d8:	461a      	mov	r2, r3
    92da:	210e      	movs	r1, #14
    92dc:	47b0      	blx	r6
		bt_att_req_free(req);
    92de:	4628      	mov	r0, r5
    92e0:	f7ff ff68 	bl	91b4 <bt_att_req_free>
    92e4:	e7d8      	b.n	9298 <bt_att_disconnected+0x5c>
}
    92e6:	b005      	add	sp, #20
    92e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    92ea:	bf00      	nop
    92ec:	20000e44 	.word	0x20000e44

000092f0 <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
    92f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    92f2:	4d0d      	ldr	r5, [pc, #52]	; (9328 <find_cf_cfg+0x38>)
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
    92f4:	4604      	mov	r4, r0
    92f6:	b968      	cbnz	r0, 9314 <find_cf_cfg+0x24>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    92f8:	9000      	str	r0, [sp, #0]
	return memcmp(a, b, sizeof(*a));
    92fa:	2207      	movs	r2, #7
    92fc:	f8cd 0003 	str.w	r0, [sp, #3]
    9300:	4669      	mov	r1, sp
    9302:	1c68      	adds	r0, r5, #1
    9304:	f014 fe84 	bl	1e010 <memcmp>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
    9308:	2800      	cmp	r0, #0
    930a:	bf08      	it	eq
    930c:	462c      	moveq	r4, r5
			return cfg;
		}
	}

	return NULL;
}
    930e:	4620      	mov	r0, r4
    9310:	b003      	add	sp, #12
    9312:	bd30      	pop	{r4, r5, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    9314:	462a      	mov	r2, r5
    9316:	f812 1b01 	ldrb.w	r1, [r2], #1
    931a:	f015 fdfc 	bl	1ef16 <bt_conn_is_peer_addr_le>
	return NULL;
    931e:	2800      	cmp	r0, #0
    9320:	bf14      	ite	ne
    9322:	462c      	movne	r4, r5
    9324:	2400      	moveq	r4, #0
    9326:	e7f2      	b.n	930e <find_cf_cfg+0x1e>
    9328:	20002388 	.word	0x20002388

0000932c <bt_gatt_service_init.part.0>:
		}
	}
}
#endif

static void bt_gatt_service_init(void)
    932c:	4908      	ldr	r1, [pc, #32]	; (9350 <bt_gatt_service_init.part.0+0x24>)
{
	if (!atomic_cas(&service_init, 0, 1)) {
		return;
	}

	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    932e:	4a09      	ldr	r2, [pc, #36]	; (9354 <bt_gatt_service_init.part.0+0x28>)
    9330:	880b      	ldrh	r3, [r1, #0]
static void bt_gatt_service_init(void)
    9332:	b510      	push	{r4, lr}
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    9334:	4c08      	ldr	r4, [pc, #32]	; (9358 <bt_gatt_service_init.part.0+0x2c>)
    9336:	2000      	movs	r0, #0
    9338:	42a2      	cmp	r2, r4
    933a:	d302      	bcc.n	9342 <bt_gatt_service_init.part.0+0x16>
    933c:	b100      	cbz	r0, 9340 <bt_gatt_service_init.part.0+0x14>
    933e:	800b      	strh	r3, [r1, #0]
		last_static_handle += svc->attr_count;
	}
}
    9340:	bd10      	pop	{r4, pc}
		last_static_handle += svc->attr_count;
    9342:	6850      	ldr	r0, [r2, #4]
    9344:	4403      	add	r3, r0
    9346:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    9348:	3208      	adds	r2, #8
    934a:	2001      	movs	r0, #1
    934c:	e7f4      	b.n	9338 <bt_gatt_service_init.part.0+0xc>
    934e:	bf00      	nop
    9350:	20003f5a 	.word	0x20003f5a
    9354:	000265c4 	.word	0x000265c4
    9358:	000265d4 	.word	0x000265d4

0000935c <sc_indicate>:
}

#if defined(CONFIG_BT_GATT_DYNAMIC_DB) || \
    (defined(CONFIG_BT_GATT_CACHING) && defined(CONFIG_BT_SETTINGS))
static void sc_indicate(uint16_t start, uint16_t end)
{
    935c:	b570      	push	{r4, r5, r6, lr}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    935e:	4c12      	ldr	r4, [pc, #72]	; (93a8 <sc_indicate+0x4c>)
    9360:	4606      	mov	r6, r0
    9362:	460d      	mov	r5, r1
    9364:	f104 0050 	add.w	r0, r4, #80	; 0x50
    9368:	2101      	movs	r1, #1
    936a:	f016 fc6e 	bl	1fc4a <atomic_or>
	BT_DBG("start 0x%04x end 0x%04x", start, end);

	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    936e:	07c2      	lsls	r2, r0, #31
    9370:	d40e      	bmi.n	9390 <sc_indicate+0x34>
		gatt_sc.start = start;
    9372:	8326      	strh	r6, [r4, #24]
		*end = new_end;
    9374:	8365      	strh	r5, [r4, #26]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    9376:	480d      	ldr	r0, [pc, #52]	; (93ac <sc_indicate+0x50>)
    9378:	f016 fc0c 	bl	1fb94 <atomic_get>
	if (!update_range(&gatt_sc.start, &gatt_sc.end, start, end)) {
		return;
	}

submit:
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
    937c:	0783      	lsls	r3, r0, #30
    937e:	d40d      	bmi.n	939c <sc_indicate+0x40>
		return;
	}

	/* Reschedule since the range has changed */
	sc_work_submit(SC_TIMEOUT);
}
    9380:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&gatt_sc.work, timeout);
    9384:	480a      	ldr	r0, [pc, #40]	; (93b0 <sc_indicate+0x54>)
    9386:	f44f 72a4 	mov.w	r2, #328	; 0x148
    938a:	2300      	movs	r3, #0
    938c:	f012 b9c4 	b.w	1b718 <k_work_reschedule>
	if (new_start >= *start && new_end <= *end) {
    9390:	8b22      	ldrh	r2, [r4, #24]
    9392:	8b63      	ldrh	r3, [r4, #26]
    9394:	42b2      	cmp	r2, r6
    9396:	d802      	bhi.n	939e <sc_indicate+0x42>
    9398:	42ab      	cmp	r3, r5
    939a:	d3eb      	bcc.n	9374 <sc_indicate+0x18>
}
    939c:	bd70      	pop	{r4, r5, r6, pc}
	if (*end < new_end) {
    939e:	42ab      	cmp	r3, r5
		*start = new_start;
    93a0:	8326      	strh	r6, [r4, #24]
	if (*end < new_end) {
    93a2:	d2e8      	bcs.n	9376 <sc_indicate+0x1a>
    93a4:	e7e6      	b.n	9374 <sc_indicate+0x18>
    93a6:	bf00      	nop
    93a8:	200015b8 	.word	0x200015b8
    93ac:	20001608 	.word	0x20001608
    93b0:	200015d8 	.word	0x200015d8

000093b4 <db_changed>:
	sys_slist_append(&callback_list, &cb->node);
}

#if defined(CONFIG_BT_GATT_DYNAMIC_DB)
static void db_changed(void)
{
    93b4:	b513      	push	{r0, r1, r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    93b6:	f06f 0104 	mvn.w	r1, #4
    93ba:	4813      	ldr	r0, [pc, #76]	; (9408 <db_changed+0x54>)
    93bc:	4c13      	ldr	r4, [pc, #76]	; (940c <db_changed+0x58>)
    93be:	f016 fcbf 	bl	1fd40 <atomic_and.isra.0>
#if defined(CONFIG_BT_GATT_CACHING)
	int i;

	atomic_clear_bit(gatt_sc.flags, DB_HASH_VALID);
	k_work_reschedule(&db_hash.work, DB_HASH_TIMEOUT);
    93c2:	f44f 72a4 	mov.w	r2, #328	; 0x148
    93c6:	2300      	movs	r3, #0
    93c8:	4811      	ldr	r0, [pc, #68]	; (9410 <db_changed+0x5c>)
    93ca:	f012 f9a5 	bl	1b718 <k_work_reschedule>

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    93ce:	2300      	movs	r3, #0
    93d0:	2207      	movs	r2, #7
    93d2:	4669      	mov	r1, sp
    93d4:	1c60      	adds	r0, r4, #1
    93d6:	9300      	str	r3, [sp, #0]
    93d8:	f8cd 3003 	str.w	r3, [sp, #3]
    93dc:	f014 fe18 	bl	1e010 <memcmp>
    93e0:	b178      	cbz	r0, 9402 <db_changed+0x4e>
			continue;
		}

		if (CF_ROBUST_CACHING(cfg)) {
    93e2:	7a23      	ldrb	r3, [r4, #8]
    93e4:	07db      	lsls	r3, r3, #31
    93e6:	d50c      	bpl.n	9402 <db_changed+0x4e>
    93e8:	f06f 0102 	mvn.w	r1, #2
    93ec:	f104 000c 	add.w	r0, r4, #12
    93f0:	f016 fca6 	bl	1fd40 <atomic_and.isra.0>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    93f4:	f06f 0101 	mvn.w	r1, #1
				       bt_addr_le_str(&cfg->peer));
			}
		}
	}
#endif
}
    93f8:	b002      	add	sp, #8
    93fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    93fe:	f016 bc9f 	b.w	1fd40 <atomic_and.isra.0>
    9402:	b002      	add	sp, #8
    9404:	bd10      	pop	{r4, pc}
    9406:	bf00      	nop
    9408:	20001608 	.word	0x20001608
    940c:	20002388 	.word	0x20002388
    9410:	20001560 	.word	0x20001560

00009414 <find_sc_cfg>:
{
    9414:	b510      	push	{r4, lr}
		if (id == sc_cfg[i].id &&
    9416:	4c06      	ldr	r4, [pc, #24]	; (9430 <find_sc_cfg+0x1c>)
    9418:	7823      	ldrb	r3, [r4, #0]
    941a:	4283      	cmp	r3, r0
    941c:	d104      	bne.n	9428 <find_sc_cfg+0x14>
    941e:	2207      	movs	r2, #7
    9420:	1c60      	adds	r0, r4, #1
    9422:	f014 fdf5 	bl	1e010 <memcmp>
    9426:	b108      	cbz	r0, 942c <find_sc_cfg+0x18>
	return NULL;
    9428:	2000      	movs	r0, #0
}
    942a:	bd10      	pop	{r4, pc}
			return &sc_cfg[i];
    942c:	4620      	mov	r0, r4
    942e:	e7fc      	b.n	942a <find_sc_cfg+0x16>
    9430:	20003f5c 	.word	0x20003f5c

00009434 <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
    9434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    9438:	4b1f      	ldr	r3, [pc, #124]	; (94b8 <disconnected_cb+0x84>)
{
    943a:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    943c:	6882      	ldr	r2, [r0, #8]
    943e:	429a      	cmp	r2, r3
{
    9440:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    9442:	d102      	bne.n	944a <disconnected_cb+0x16>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    9444:	68c4      	ldr	r4, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
    9446:	8963      	ldrh	r3, [r4, #10]
    9448:	b9cb      	cbnz	r3, 947e <disconnected_cb+0x4a>

		BT_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
    944a:	2001      	movs	r0, #1
    944c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    9450:	f105 0888 	add.w	r8, r5, #136	; 0x88
    9454:	7a28      	ldrb	r0, [r5, #8]
    9456:	4641      	mov	r1, r8
    9458:	f015 fa67 	bl	1e92a <bt_addr_le_is_bonded>
    945c:	b948      	cbnz	r0, 9472 <disconnected_cb+0x3e>
				if (ccc == &sc_ccc) {
    945e:	4b17      	ldr	r3, [pc, #92]	; (94bc <disconnected_cb+0x88>)
    9460:	429c      	cmp	r4, r3
    9462:	d102      	bne.n	946a <disconnected_cb+0x36>
					sc_clear(conn);
    9464:	4628      	mov	r0, r5
    9466:	f016 fdff 	bl	20068 <sc_clear>
				clear_ccc_cfg(cfg);
    946a:	4620      	mov	r0, r4
    946c:	f016 fd3b 	bl	1fee6 <clear_ccc_cfg>
	if (!value_used) {
    9470:	e01a      	b.n	94a8 <disconnected_cb+0x74>
	memcpy(dst, src, sizeof(*dst));
    9472:	2207      	movs	r2, #7
    9474:	4641      	mov	r1, r8
    9476:	4638      	mov	r0, r7
    9478:	f014 fddb 	bl	1e032 <memcpy>
    947c:	e014      	b.n	94a8 <disconnected_cb+0x74>
		if (!cfg->value) {
    947e:	8923      	ldrh	r3, [r4, #8]
    9480:	b193      	cbz	r3, 94a8 <disconnected_cb+0x74>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    9482:	4627      	mov	r7, r4
    9484:	4628      	mov	r0, r5
    9486:	f817 1b01 	ldrb.w	r1, [r7], #1
    948a:	463a      	mov	r2, r7
    948c:	f015 fd43 	bl	1ef16 <bt_conn_is_peer_addr_le>
    9490:	2800      	cmp	r0, #0
    9492:	d1dd      	bne.n	9450 <disconnected_cb+0x1c>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    9494:	7820      	ldrb	r0, [r4, #0]
    9496:	4639      	mov	r1, r7
    9498:	f7fe ff5e 	bl	8358 <bt_conn_lookup_addr_le>
			if (tmp) {
    949c:	b120      	cbz	r0, 94a8 <disconnected_cb+0x74>
				if (tmp->state == BT_CONN_CONNECTED) {
    949e:	7a85      	ldrb	r5, [r0, #10]
				bt_conn_unref(tmp);
    94a0:	f015 fcce 	bl	1ee40 <bt_conn_unref>
	if (!value_used) {
    94a4:	2d07      	cmp	r5, #7
    94a6:	d0d0      	beq.n	944a <disconnected_cb+0x16>
		if (ccc->cfg_changed) {
    94a8:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
    94aa:	2100      	movs	r1, #0
    94ac:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
    94ae:	2b00      	cmp	r3, #0
    94b0:	d0cb      	beq.n	944a <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
    94b2:	4630      	mov	r0, r6
    94b4:	4798      	blx	r3
    94b6:	e7c8      	b.n	944a <disconnected_cb+0x16>
    94b8:	0001ff39 	.word	0x0001ff39
    94bc:	200004a8 	.word	0x200004a8

000094c0 <sc_indicate_rsp>:
{
    94c0:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    94c2:	f06f 0102 	mvn.w	r1, #2
    94c6:	4604      	mov	r4, r0
    94c8:	480c      	ldr	r0, [pc, #48]	; (94fc <sc_indicate_rsp+0x3c>)
    94ca:	f016 fc39 	bl	1fd40 <atomic_and.isra.0>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    94ce:	f016 fb61 	bl	1fb94 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    94d2:	07c2      	lsls	r2, r0, #31
    94d4:	d504      	bpl.n	94e0 <sc_indicate_rsp+0x20>
	k_work_reschedule(&gatt_sc.work, timeout);
    94d6:	480a      	ldr	r0, [pc, #40]	; (9500 <sc_indicate_rsp+0x40>)
    94d8:	2200      	movs	r2, #0
    94da:	2300      	movs	r3, #0
    94dc:	f012 f91c 	bl	1b718 <k_work_reschedule>
	cfg = find_cf_cfg(conn);
    94e0:	4620      	mov	r0, r4
    94e2:	f7ff ff05 	bl	92f0 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
    94e6:	b140      	cbz	r0, 94fa <sc_indicate_rsp+0x3a>
    94e8:	7a03      	ldrb	r3, [r0, #8]
    94ea:	07db      	lsls	r3, r3, #31
    94ec:	d505      	bpl.n	94fa <sc_indicate_rsp+0x3a>
}
    94ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    94f2:	2101      	movs	r1, #1
    94f4:	300c      	adds	r0, #12
    94f6:	f016 bba8 	b.w	1fc4a <atomic_or>
    94fa:	bd10      	pop	{r4, pc}
    94fc:	20001608 	.word	0x20001608
    9500:	200015d8 	.word	0x200015d8

00009504 <bt_gatt_init>:
{
    9504:	b508      	push	{r3, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    9506:	4b1a      	ldr	r3, [pc, #104]	; (9570 <bt_gatt_init+0x6c>)
    9508:	f3bf 8f5b 	dmb	ish
    950c:	2201      	movs	r2, #1
    950e:	e853 1f00 	ldrex	r1, [r3]
    9512:	2900      	cmp	r1, #0
    9514:	d103      	bne.n	951e <bt_gatt_init+0x1a>
    9516:	e843 2000 	strex	r0, r2, [r3]
    951a:	2800      	cmp	r0, #0
    951c:	d1f7      	bne.n	950e <bt_gatt_init+0xa>
    951e:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
    9522:	d123      	bne.n	956c <bt_gatt_init+0x68>
    9524:	f3bf 8f5b 	dmb	ish
    9528:	4b12      	ldr	r3, [pc, #72]	; (9574 <bt_gatt_init+0x70>)
    952a:	e853 1f00 	ldrex	r1, [r3]
    952e:	2900      	cmp	r1, #0
    9530:	d103      	bne.n	953a <bt_gatt_init+0x36>
    9532:	e843 2000 	strex	r0, r2, [r3]
    9536:	2800      	cmp	r0, #0
    9538:	d1f7      	bne.n	952a <bt_gatt_init+0x26>
    953a:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
    953e:	d101      	bne.n	9544 <bt_gatt_init+0x40>
    9540:	f7ff fef4 	bl	932c <bt_gatt_service_init.part.0>
	list->head = NULL;
    9544:	4b0c      	ldr	r3, [pc, #48]	; (9578 <bt_gatt_init+0x74>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
    9546:	490d      	ldr	r1, [pc, #52]	; (957c <bt_gatt_init+0x78>)
    9548:	480d      	ldr	r0, [pc, #52]	; (9580 <bt_gatt_init+0x7c>)
    954a:	2200      	movs	r2, #0
	list->tail = NULL;
    954c:	e9c3 2200 	strd	r2, r2, [r3]
    9550:	f01c fb9e 	bl	25c90 <k_work_init_delayable>
	k_work_schedule(&db_hash.work, DB_HASH_TIMEOUT);
    9554:	2300      	movs	r3, #0
    9556:	480a      	ldr	r0, [pc, #40]	; (9580 <bt_gatt_init+0x7c>)
    9558:	f44f 72a4 	mov.w	r2, #328	; 0x148
    955c:	f012 f8a8 	bl	1b6b0 <k_work_schedule>
}
    9560:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
    9564:	4907      	ldr	r1, [pc, #28]	; (9584 <bt_gatt_init+0x80>)
    9566:	4808      	ldr	r0, [pc, #32]	; (9588 <bt_gatt_init+0x84>)
    9568:	f01c bb92 	b.w	25c90 <k_work_init_delayable>
}
    956c:	bd08      	pop	{r3, pc}
    956e:	bf00      	nop
    9570:	200023a0 	.word	0x200023a0
    9574:	200023bc 	.word	0x200023bc
    9578:	20002380 	.word	0x20002380
    957c:	00020199 	.word	0x00020199
    9580:	20001560 	.word	0x20001560
    9584:	00009b39 	.word	0x00009b39
    9588:	200015d8 	.word	0x200015d8

0000958c <bt_gatt_service_unregister>:
{
    958c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    9590:	4604      	mov	r4, r0
	k_sched_lock();
    9592:	f012 f91f 	bl	1b7d4 <k_sched_lock>
	return list->head;
    9596:	4a30      	ldr	r2, [pc, #192]	; (9658 <bt_gatt_service_unregister+0xcc>)
    9598:	6813      	ldr	r3, [r2, #0]
	if (!sys_slist_find_and_remove(&db, &svc->node)) {
    959a:	f104 0008 	add.w	r0, r4, #8
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    959e:	2100      	movs	r1, #0
    95a0:	b93b      	cbnz	r3, 95b2 <bt_gatt_service_unregister+0x26>
		k_sched_unlock();
    95a2:	f012 fae5 	bl	1bb70 <k_sched_unlock>
		return err;
    95a6:	f06f 0501 	mvn.w	r5, #1
}
    95aa:	4628      	mov	r0, r5
    95ac:	b002      	add	sp, #8
    95ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    95b2:	4298      	cmp	r0, r3
    95b4:	d11e      	bne.n	95f4 <bt_gatt_service_unregister+0x68>
	return node->next;
    95b6:	68a3      	ldr	r3, [r4, #8]
	return list->tail;
    95b8:	6855      	ldr	r5, [r2, #4]
Z_GENLIST_REMOVE(slist, snode)
    95ba:	b9b1      	cbnz	r1, 95ea <bt_gatt_service_unregister+0x5e>
    95bc:	42a8      	cmp	r0, r5
	list->head = node;
    95be:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    95c0:	d100      	bne.n	95c4 <bt_gatt_service_unregister+0x38>
	list->tail = node;
    95c2:	6053      	str	r3, [r2, #4]
	parent->next = child;
    95c4:	2500      	movs	r5, #0
		if (attr->write == bt_gatt_attr_write_ccc) {
    95c6:	f8df 9094 	ldr.w	r9, [pc, #148]	; 965c <bt_gatt_service_unregister+0xd0>
    95ca:	60a5      	str	r5, [r4, #8]
		struct bt_gatt_attr *attr = &svc->attrs[i];
    95cc:	f04f 0814 	mov.w	r8, #20
	ccc->value = 0;
    95d0:	462f      	mov	r7, r5
	for (uint16_t i = 0; i < svc->attr_count; i++) {
    95d2:	6863      	ldr	r3, [r4, #4]
    95d4:	b2aa      	uxth	r2, r5
    95d6:	4293      	cmp	r3, r2
    95d8:	d80f      	bhi.n	95fa <bt_gatt_service_unregister+0x6e>
	if (!atomic_get(&init)) {
    95da:	4821      	ldr	r0, [pc, #132]	; (9660 <bt_gatt_service_unregister+0xd4>)
    95dc:	f016 fada 	bl	1fb94 <atomic_get>
    95e0:	4605      	mov	r5, r0
    95e2:	bb48      	cbnz	r0, 9638 <bt_gatt_service_unregister+0xac>
		k_sched_unlock();
    95e4:	f012 fac4 	bl	1bb70 <k_sched_unlock>
		return 0;
    95e8:	e7df      	b.n	95aa <bt_gatt_service_unregister+0x1e>
Z_GENLIST_REMOVE(slist, snode)
    95ea:	42a8      	cmp	r0, r5
	parent->next = child;
    95ec:	600b      	str	r3, [r1, #0]
	list->tail = node;
    95ee:	bf08      	it	eq
    95f0:	6051      	streq	r1, [r2, #4]
}
    95f2:	e7e7      	b.n	95c4 <bt_gatt_service_unregister+0x38>
	return node->next;
    95f4:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    95f6:	681b      	ldr	r3, [r3, #0]
    95f8:	e7d2      	b.n	95a0 <bt_gatt_service_unregister+0x14>
		struct bt_gatt_attr *attr = &svc->attrs[i];
    95fa:	6823      	ldr	r3, [r4, #0]
    95fc:	fb08 3302 	mla	r3, r8, r2, r3
		if (attr->write == bt_gatt_attr_write_ccc) {
    9600:	689a      	ldr	r2, [r3, #8]
    9602:	454a      	cmp	r2, r9
    9604:	d116      	bne.n	9634 <bt_gatt_service_unregister+0xa8>
			gatt_unregister_ccc(attr->user_data);
    9606:	68de      	ldr	r6, [r3, #12]
		if (bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    9608:	9700      	str	r7, [sp, #0]
    960a:	f106 0a01 	add.w	sl, r6, #1
	ccc->value = 0;
    960e:	8177      	strh	r7, [r6, #10]
	return memcmp(a, b, sizeof(*a));
    9610:	2207      	movs	r2, #7
    9612:	4669      	mov	r1, sp
    9614:	4650      	mov	r0, sl
		if (bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    9616:	f8cd 7003 	str.w	r7, [sp, #3]
    961a:	f014 fcf9 	bl	1e010 <memcmp>
    961e:	b148      	cbz	r0, 9634 <bt_gatt_service_unregister+0xa8>
			conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    9620:	7830      	ldrb	r0, [r6, #0]
    9622:	4651      	mov	r1, sl
    9624:	f7fe fe98 	bl	8358 <bt_conn_lookup_addr_le>
			if (conn) {
    9628:	b108      	cbz	r0, 962e <bt_gatt_service_unregister+0xa2>
				bt_conn_unref(conn);
    962a:	f015 fc09 	bl	1ee40 <bt_conn_unref>
			clear_ccc_cfg(cfg);
    962e:	4630      	mov	r0, r6
    9630:	f016 fc59 	bl	1fee6 <clear_ccc_cfg>
	for (uint16_t i = 0; i < svc->attr_count; i++) {
    9634:	3501      	adds	r5, #1
    9636:	e7cc      	b.n	95d2 <bt_gatt_service_unregister+0x46>
		    svc->attrs[svc->attr_count - 1].handle);
    9638:	e9d4 2300 	ldrd	r2, r3, [r4]
	sc_indicate(svc->attrs[0].handle,
    963c:	2114      	movs	r1, #20
    963e:	fb01 2303 	mla	r3, r1, r3, r2
    9642:	8a10      	ldrh	r0, [r2, #16]
    9644:	f833 1c04 	ldrh.w	r1, [r3, #-4]
    9648:	f7ff fe88 	bl	935c <sc_indicate>
	return 0;
    964c:	2500      	movs	r5, #0
	db_changed();
    964e:	f7ff feb1 	bl	93b4 <db_changed>
	k_sched_unlock();
    9652:	f012 fa8d 	bl	1bb70 <k_sched_unlock>
	return 0;
    9656:	e7a8      	b.n	95aa <bt_gatt_service_unregister+0x1e>
    9658:	20002398 	.word	0x20002398
    965c:	0001ff39 	.word	0x0001ff39
    9660:	200023a0 	.word	0x200023a0

00009664 <bt_gatt_attr_get_handle>:
{
    9664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
    9668:	4603      	mov	r3, r0
    966a:	b148      	cbz	r0, 9680 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
    966c:	8a00      	ldrh	r0, [r0, #16]
    966e:	b938      	cbnz	r0, 9680 <bt_gatt_attr_get_handle+0x1c>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    9670:	4912      	ldr	r1, [pc, #72]	; (96bc <bt_gatt_attr_get_handle+0x58>)
    9672:	f8df e04c 	ldr.w	lr, [pc, #76]	; 96c0 <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
    9676:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    9678:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    967c:	4571      	cmp	r1, lr
    967e:	d301      	bcc.n	9684 <bt_gatt_attr_get_handle+0x20>
}
    9680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    9684:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
    9688:	42bb      	cmp	r3, r7
    968a:	d304      	bcc.n	9696 <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    968c:	fb0c 7206 	mla	r2, ip, r6, r7
    9690:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
    9692:	4293      	cmp	r3, r2
    9694:	d90e      	bls.n	96b4 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
    9696:	19a2      	adds	r2, r4, r6
    9698:	b292      	uxth	r2, r2
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    969a:	3108      	adds	r1, #8
    969c:	4614      	mov	r4, r2
    969e:	e7ed      	b.n	967c <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
    96a0:	fb0c 7805 	mla	r8, ip, r5, r7
    96a4:	4543      	cmp	r3, r8
    96a6:	d007      	beq.n	96b8 <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
    96a8:	3501      	adds	r5, #1
    96aa:	1962      	adds	r2, r4, r5
    96ac:	42b5      	cmp	r5, r6
    96ae:	b292      	uxth	r2, r2
    96b0:	d1f6      	bne.n	96a0 <bt_gatt_attr_get_handle+0x3c>
    96b2:	e7f2      	b.n	969a <bt_gatt_attr_get_handle+0x36>
    96b4:	2500      	movs	r5, #0
    96b6:	e7f8      	b.n	96aa <bt_gatt_attr_get_handle+0x46>
    96b8:	4610      	mov	r0, r2
    96ba:	e7e1      	b.n	9680 <bt_gatt_attr_get_handle+0x1c>
    96bc:	000265c4 	.word	0x000265c4
    96c0:	000265d4 	.word	0x000265d4

000096c4 <bt_gatt_foreach_attr_type>:
{
    96c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    96c8:	b089      	sub	sp, #36	; 0x24
    96ca:	4699      	mov	r9, r3
	if (!num_matches) {
    96cc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
{
    96d0:	4604      	mov	r4, r0
    96d2:	460f      	mov	r7, r1
    96d4:	4690      	mov	r8, r2
	if (!num_matches) {
    96d6:	b91b      	cbnz	r3, 96e0 <bt_gatt_foreach_attr_type+0x1c>
		num_matches = UINT16_MAX;
    96d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    96dc:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
	if (start_handle <= last_static_handle) {
    96e0:	4b31      	ldr	r3, [pc, #196]	; (97a8 <bt_gatt_foreach_attr_type+0xe4>)
    96e2:	881b      	ldrh	r3, [r3, #0]
    96e4:	42a3      	cmp	r3, r4
    96e6:	d230      	bcs.n	974a <bt_gatt_foreach_attr_type+0x86>
	foreach_attr_type_dyndb(start_handle, end_handle, uuid, attr_data,
    96e8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
    96ec:	f8ad 301e 	strh.w	r3, [sp, #30]
	return list->head;
    96f0:	4b2e      	ldr	r3, [pc, #184]	; (97ac <bt_gatt_foreach_attr_type+0xe8>)
    96f2:	681d      	ldr	r5, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    96f4:	bb7d      	cbnz	r5, 9756 <bt_gatt_foreach_attr_type+0x92>
}
    96f6:	b009      	add	sp, #36	; 0x24
    96f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
    96fc:	6869      	ldr	r1, [r5, #4]
    96fe:	4451      	add	r1, sl
    9700:	42a1      	cmp	r1, r4
    9702:	d220      	bcs.n	9746 <bt_gatt_foreach_attr_type+0x82>
				handle += static_svc->attr_count;
    9704:	b289      	uxth	r1, r1
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    9706:	3508      	adds	r5, #8
    9708:	468a      	mov	sl, r1
    970a:	4b29      	ldr	r3, [pc, #164]	; (97b0 <bt_gatt_foreach_attr_type+0xec>)
    970c:	429d      	cmp	r5, r3
    970e:	d3f5      	bcc.n	96fc <bt_gatt_foreach_attr_type+0x38>
    9710:	e7ea      	b.n	96e8 <bt_gatt_foreach_attr_type+0x24>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    9712:	9b14      	ldr	r3, [sp, #80]	; 0x50
    9714:	6828      	ldr	r0, [r5, #0]
    9716:	9304      	str	r3, [sp, #16]
    9718:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    971a:	9303      	str	r3, [sp, #12]
    971c:	ab12      	add	r3, sp, #72	; 0x48
    971e:	e9cd 9301 	strd	r9, r3, [sp, #4]
    9722:	f8cd 8000 	str.w	r8, [sp]
    9726:	463b      	mov	r3, r7
    9728:	4622      	mov	r2, r4
    972a:	fb0b 0006 	mla	r0, fp, r6, r0
    972e:	f016 fae2 	bl	1fcf6 <gatt_foreach_iter>
    9732:	2800      	cmp	r0, #0
    9734:	d0df      	beq.n	96f6 <bt_gatt_foreach_attr_type+0x32>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    9736:	3601      	adds	r6, #1
    9738:	686b      	ldr	r3, [r5, #4]
    973a:	eb0a 0106 	add.w	r1, sl, r6
    973e:	42b3      	cmp	r3, r6
    9740:	b289      	uxth	r1, r1
    9742:	d8e6      	bhi.n	9712 <bt_gatt_foreach_attr_type+0x4e>
    9744:	e7df      	b.n	9706 <bt_gatt_foreach_attr_type+0x42>
    9746:	2600      	movs	r6, #0
    9748:	e7f6      	b.n	9738 <bt_gatt_foreach_attr_type+0x74>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    974a:	4d1a      	ldr	r5, [pc, #104]	; (97b4 <bt_gatt_foreach_attr_type+0xf0>)
		uint16_t handle = 1;
    974c:	f04f 0a01 	mov.w	sl, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
    9750:	f04f 0b14 	mov.w	fp, #20
    9754:	e7d9      	b.n	970a <bt_gatt_foreach_attr_type+0x46>
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    9756:	3d08      	subs	r5, #8
			struct bt_gatt_attr *attr = &svc->attrs[i];
    9758:	f04f 0a14 	mov.w	sl, #20
			if (gatt_foreach_iter(attr, attr->handle,
    975c:	f10d 0b1e 	add.w	fp, sp, #30
	return node->next;
    9760:	68ae      	ldr	r6, [r5, #8]
		next = SYS_SLIST_PEEK_NEXT_CONTAINER(svc, node);
    9762:	b1de      	cbz	r6, 979c <bt_gatt_foreach_attr_type+0xd8>
			if (next->attrs[0].handle <= start_handle) {
    9764:	f856 3c08 	ldr.w	r3, [r6, #-8]
    9768:	8a1b      	ldrh	r3, [r3, #16]
    976a:	42a3      	cmp	r3, r4
    976c:	d81a      	bhi.n	97a4 <bt_gatt_foreach_attr_type+0xe0>
    976e:	68ad      	ldr	r5, [r5, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    9770:	2d00      	cmp	r5, #0
    9772:	d0c0      	beq.n	96f6 <bt_gatt_foreach_attr_type+0x32>
    9774:	3d08      	subs	r5, #8
    9776:	e7f3      	b.n	9760 <bt_gatt_foreach_attr_type+0x9c>
			struct bt_gatt_attr *attr = &svc->attrs[i];
    9778:	6828      	ldr	r0, [r5, #0]
			if (gatt_foreach_iter(attr, attr->handle,
    977a:	9b14      	ldr	r3, [sp, #80]	; 0x50
			struct bt_gatt_attr *attr = &svc->attrs[i];
    977c:	fb0a 0006 	mla	r0, sl, r6, r0
			if (gatt_foreach_iter(attr, attr->handle,
    9780:	4622      	mov	r2, r4
    9782:	8a01      	ldrh	r1, [r0, #16]
    9784:	9304      	str	r3, [sp, #16]
    9786:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    9788:	e9cd 8900 	strd	r8, r9, [sp]
    978c:	e9cd b302 	strd	fp, r3, [sp, #8]
    9790:	463b      	mov	r3, r7
    9792:	f016 fab0 	bl	1fcf6 <gatt_foreach_iter>
    9796:	2800      	cmp	r0, #0
    9798:	d0ad      	beq.n	96f6 <bt_gatt_foreach_attr_type+0x32>
		for (i = 0; i < svc->attr_count; i++) {
    979a:	3601      	adds	r6, #1
    979c:	686b      	ldr	r3, [r5, #4]
    979e:	429e      	cmp	r6, r3
    97a0:	d3ea      	bcc.n	9778 <bt_gatt_foreach_attr_type+0xb4>
    97a2:	e7e4      	b.n	976e <bt_gatt_foreach_attr_type+0xaa>
    97a4:	2600      	movs	r6, #0
    97a6:	e7f9      	b.n	979c <bt_gatt_foreach_attr_type+0xd8>
    97a8:	20003f5a 	.word	0x20003f5a
    97ac:	20002398 	.word	0x20002398
    97b0:	000265d4 	.word	0x000265d4
    97b4:	000265c4 	.word	0x000265c4

000097b8 <bt_gatt_service_register>:
{
    97b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    97bc:	4b5f      	ldr	r3, [pc, #380]	; (993c <bt_gatt_service_register+0x184>)
    97be:	f3bf 8f5b 	dmb	ish
    97c2:	4604      	mov	r4, r0
    97c4:	2201      	movs	r2, #1
    97c6:	e853 1f00 	ldrex	r1, [r3]
    97ca:	2900      	cmp	r1, #0
    97cc:	d103      	bne.n	97d6 <bt_gatt_service_register+0x1e>
    97ce:	e843 2000 	strex	r0, r2, [r3]
    97d2:	2800      	cmp	r0, #0
    97d4:	d1f7      	bne.n	97c6 <bt_gatt_service_register+0xe>
    97d6:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
    97da:	d101      	bne.n	97e0 <bt_gatt_service_register+0x28>
    97dc:	f7ff fda6 	bl	932c <bt_gatt_service_init.part.0>
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    97e0:	6823      	ldr	r3, [r4, #0]
    97e2:	2500      	movs	r5, #0
    97e4:	6818      	ldr	r0, [r3, #0]
    97e6:	f88d 5000 	strb.w	r5, [sp]
    97ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    97ee:	4669      	mov	r1, sp
    97f0:	f8ad 3002 	strh.w	r3, [sp, #2]
    97f4:	f014 fe46 	bl	1e484 <bt_uuid_cmp>
    97f8:	b928      	cbnz	r0, 9806 <bt_gatt_service_register+0x4e>
		return -EALREADY;
    97fa:	f06f 0577 	mvn.w	r5, #119	; 0x77
}
    97fe:	4628      	mov	r0, r5
    9800:	b003      	add	sp, #12
    9802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	    !bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GATT)) {
    9806:	6823      	ldr	r3, [r4, #0]
    9808:	a901      	add	r1, sp, #4
    980a:	6818      	ldr	r0, [r3, #0]
    980c:	f88d 5004 	strb.w	r5, [sp, #4]
    9810:	f641 0301 	movw	r3, #6145	; 0x1801
    9814:	f8ad 3006 	strh.w	r3, [sp, #6]
    9818:	f014 fe34 	bl	1e484 <bt_uuid_cmp>
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    981c:	2800      	cmp	r0, #0
    981e:	d0ec      	beq.n	97fa <bt_gatt_service_register+0x42>
	return list->head;
    9820:	4d47      	ldr	r5, [pc, #284]	; (9940 <bt_gatt_service_register+0x188>)
	k_sched_lock();
    9822:	f011 ffd7 	bl	1b7d4 <k_sched_lock>
	if (sys_slist_is_empty(&db)) {
    9826:	682e      	ldr	r6, [r5, #0]
	struct bt_gatt_attr *attrs = svc->attrs;
    9828:	f8d4 9000 	ldr.w	r9, [r4]
	uint16_t count = svc->attr_count;
    982c:	f8b4 8004 	ldrh.w	r8, [r4, #4]
	if (sys_slist_is_empty(&db)) {
    9830:	b936      	cbnz	r6, 9840 <bt_gatt_service_register+0x88>
		handle = last_static_handle;
    9832:	4b44      	ldr	r3, [pc, #272]	; (9944 <bt_gatt_service_register+0x18c>)
    9834:	881f      	ldrh	r7, [r3, #0]
	bt_gatt_foreach_attr(handle, handle, found_attr, &attr);
    9836:	f8df b110 	ldr.w	fp, [pc, #272]	; 9948 <bt_gatt_service_register+0x190>
	const struct bt_gatt_attr *attr = NULL;
    983a:	f04f 0a00 	mov.w	sl, #0
    983e:	e019      	b.n	9874 <bt_gatt_service_register+0xbc>
	return list->tail;
    9840:	686b      	ldr	r3, [r5, #4]
	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
    9842:	2b00      	cmp	r3, #0
    9844:	d078      	beq.n	9938 <bt_gatt_service_register+0x180>
	handle = last->attrs[last->attr_count - 1].handle;
    9846:	e953 3202 	ldrd	r3, r2, [r3, #-8]
    984a:	2114      	movs	r1, #20
    984c:	fb01 3302 	mla	r3, r1, r2, r3
    9850:	f833 7c04 	ldrh.w	r7, [r3, #-4]
    9854:	463e      	mov	r6, r7
    9856:	e7ee      	b.n	9836 <bt_gatt_service_register+0x7e>
		if (!attrs->handle) {
    9858:	f8b9 1010 	ldrh.w	r1, [r9, #16]
    985c:	bb31      	cbnz	r1, 98ac <bt_gatt_service_register+0xf4>
			attrs->handle = ++handle;
    985e:	1c79      	adds	r1, r7, #1
    9860:	b289      	uxth	r1, r1
    9862:	f8a9 1010 	strh.w	r1, [r9, #16]
	for (; attrs && count; attrs++, count--) {
    9866:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    986a:	f109 0914 	add.w	r9, r9, #20
    986e:	fa1f f888 	uxth.w	r8, r8
    9872:	460f      	mov	r7, r1
    9874:	f1b9 0f00 	cmp.w	r9, #0
    9878:	d002      	beq.n	9880 <bt_gatt_service_register+0xc8>
    987a:	f1b8 0f00 	cmp.w	r8, #0
    987e:	d1eb      	bne.n	9858 <bt_gatt_service_register+0xa0>
	if (last_handle == 0 || svc->attrs[0].handle > last_handle) {
    9880:	b11e      	cbz	r6, 988a <bt_gatt_service_register+0xd2>
    9882:	6823      	ldr	r3, [r4, #0]
    9884:	8a1f      	ldrh	r7, [r3, #16]
    9886:	42be      	cmp	r6, r7
    9888:	d21e      	bcs.n	98c8 <bt_gatt_service_register+0x110>
	parent->next = child;
    988a:	2200      	movs	r2, #0
		sys_slist_append(&db, &svc->node);
    988c:	f104 0308 	add.w	r3, r4, #8
    9890:	60a2      	str	r2, [r4, #8]
	return list->tail;
    9892:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
    9894:	bb5a      	cbnz	r2, 98ee <bt_gatt_service_register+0x136>
	list->head = node;
    9896:	e9c5 3300 	strd	r3, r3, [r5]
	if (!atomic_get(&init)) {
    989a:	482c      	ldr	r0, [pc, #176]	; (994c <bt_gatt_service_register+0x194>)
    989c:	f016 f97a 	bl	1fb94 <atomic_get>
    98a0:	4605      	mov	r5, r0
    98a2:	2800      	cmp	r0, #0
    98a4:	d133      	bne.n	990e <bt_gatt_service_register+0x156>
		k_sched_unlock();
    98a6:	f012 f963 	bl	1bb70 <k_sched_unlock>
		return 0;
    98aa:	e7a8      	b.n	97fe <bt_gatt_service_register+0x46>
		} else if (attrs->handle > handle) {
    98ac:	42b9      	cmp	r1, r7
    98ae:	d8da      	bhi.n	9866 <bt_gatt_service_register+0xae>
	bt_gatt_foreach_attr(handle, handle, found_attr, &attr);
    98b0:	ab01      	add	r3, sp, #4
    98b2:	465a      	mov	r2, fp
    98b4:	4608      	mov	r0, r1
	const struct bt_gatt_attr *attr = NULL;
    98b6:	f8cd a004 	str.w	sl, [sp, #4]
	bt_gatt_foreach_attr(handle, handle, found_attr, &attr);
    98ba:	f016 fc62 	bl	20182 <bt_gatt_foreach_attr>
	return attr;
    98be:	9b01      	ldr	r3, [sp, #4]
		} else if (find_attr(attrs->handle)) {
    98c0:	2b00      	cmp	r3, #0
    98c2:	d134      	bne.n	992e <bt_gatt_service_register+0x176>
    98c4:	4639      	mov	r1, r7
    98c6:	e7ce      	b.n	9866 <bt_gatt_service_register+0xae>
	return list->head;
    98c8:	6829      	ldr	r1, [r5, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, tmp, node) {
    98ca:	2900      	cmp	r1, #0
    98cc:	d0e5      	beq.n	989a <bt_gatt_service_register+0xe2>
    98ce:	f1a1 0308 	sub.w	r3, r1, #8
    98d2:	2200      	movs	r2, #0
		if (tmp->attrs[0].handle > svc->attrs[0].handle) {
    98d4:	6818      	ldr	r0, [r3, #0]
    98d6:	8a00      	ldrh	r0, [r0, #16]
    98d8:	42b8      	cmp	r0, r7
    98da:	d911      	bls.n	9900 <bt_gatt_service_register+0x148>
				sys_slist_insert(&db, &prev->node, &svc->node);
    98dc:	f104 0308 	add.w	r3, r4, #8
			if (prev) {
    98e0:	b142      	cbz	r2, 98f4 <bt_gatt_service_register+0x13c>
	return node->next;
    98e2:	6891      	ldr	r1, [r2, #8]
	parent->next = child;
    98e4:	60a1      	str	r1, [r4, #8]
Z_GENLIST_INSERT(slist, snode)
    98e6:	2900      	cmp	r1, #0
    98e8:	d0d3      	beq.n	9892 <bt_gatt_service_register+0xda>
	parent->next = child;
    98ea:	6093      	str	r3, [r2, #8]
	if (err < 0) {
    98ec:	e7d5      	b.n	989a <bt_gatt_service_register+0xe2>
    98ee:	6013      	str	r3, [r2, #0]
	list->tail = node;
    98f0:	606b      	str	r3, [r5, #4]
    98f2:	e7d2      	b.n	989a <bt_gatt_service_register+0xe2>
Z_GENLIST_PREPEND(slist, snode)
    98f4:	686a      	ldr	r2, [r5, #4]
	parent->next = child;
    98f6:	60a1      	str	r1, [r4, #8]
	list->head = node;
    98f8:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
    98fa:	2a00      	cmp	r2, #0
    98fc:	d1cd      	bne.n	989a <bt_gatt_service_register+0xe2>
    98fe:	e7f7      	b.n	98f0 <bt_gatt_service_register+0x138>
	return node->next;
    9900:	6898      	ldr	r0, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, tmp, node) {
    9902:	2800      	cmp	r0, #0
    9904:	d0c9      	beq.n	989a <bt_gatt_service_register+0xe2>
    9906:	461a      	mov	r2, r3
    9908:	f1a0 0308 	sub.w	r3, r0, #8
    990c:	e7e2      	b.n	98d4 <bt_gatt_service_register+0x11c>
		    svc->attrs[svc->attr_count - 1].handle);
    990e:	e9d4 2300 	ldrd	r2, r3, [r4]
	sc_indicate(svc->attrs[0].handle,
    9912:	2114      	movs	r1, #20
    9914:	fb01 2303 	mla	r3, r1, r3, r2
    9918:	8a10      	ldrh	r0, [r2, #16]
    991a:	f833 1c04 	ldrh.w	r1, [r3, #-4]
    991e:	f7ff fd1d 	bl	935c <sc_indicate>
	return 0;
    9922:	2500      	movs	r5, #0
	db_changed();
    9924:	f7ff fd46 	bl	93b4 <db_changed>
	k_sched_unlock();
    9928:	f012 f922 	bl	1bb70 <k_sched_unlock>
	return 0;
    992c:	e767      	b.n	97fe <bt_gatt_service_register+0x46>
		k_sched_unlock();
    992e:	f012 f91f 	bl	1bb70 <k_sched_unlock>
			return -EINVAL;
    9932:	f06f 0515 	mvn.w	r5, #21
		return err;
    9936:	e762      	b.n	97fe <bt_gatt_service_register+0x46>
	handle = last->attrs[last->attr_count - 1].handle;
    9938:	681b      	ldr	r3, [r3, #0]
    993a:	deff      	udf	#255	; 0xff
    993c:	200023bc 	.word	0x200023bc
    9940:	20002398 	.word	0x20002398
    9944:	20003f5a 	.word	0x20003f5a
    9948:	0001fb4d 	.word	0x0001fb4d
    994c:	200023a0 	.word	0x200023a0

00009950 <db_hash_gen.constprop.0>:
static void db_hash_gen(bool store)
    9950:	b510      	push	{r4, lr}
    9952:	b0c8      	sub	sp, #288	; 0x120
	uint8_t key[16] = {};
    9954:	2300      	movs	r3, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    9956:	aa1c      	add	r2, sp, #112	; 0x70
    9958:	4669      	mov	r1, sp
    995a:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
    995c:	e9cd 3300 	strd	r3, r3, [sp]
    9960:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    9964:	f014 fa5c 	bl	1de20 <tc_cmac_setup>
    9968:	b1d8      	cbz	r0, 99a2 <db_hash_gen.constprop.0+0x52>
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
    996a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    996e:	2001      	movs	r0, #1
    9970:	4a0d      	ldr	r2, [pc, #52]	; (99a8 <db_hash_gen.constprop.0+0x58>)
    9972:	ab04      	add	r3, sp, #16
    9974:	f016 fc05 	bl	20182 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
    9978:	480c      	ldr	r0, [pc, #48]	; (99ac <db_hash_gen.constprop.0+0x5c>)
    997a:	a904      	add	r1, sp, #16
    997c:	f014 fae6 	bl	1df4c <tc_cmac_final>
    9980:	b178      	cbz	r0, 99a2 <db_hash_gen.constprop.0+0x52>
    9982:	4b0a      	ldr	r3, [pc, #40]	; (99ac <db_hash_gen.constprop.0+0x5c>)
    9984:	2208      	movs	r2, #8
    9986:	f103 010f 	add.w	r1, r3, #15
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
    998a:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
    998c:	780c      	ldrb	r4, [r1, #0]
    998e:	f803 4b01 	strb.w	r4, [r3], #1
	for (i = 0; i < (length/2); i++) {
    9992:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
    9994:	f801 0901 	strb.w	r0, [r1], #-1
	for (i = 0; i < (length/2); i++) {
    9998:	d1f7      	bne.n	998a <db_hash_gen.constprop.0+0x3a>
    999a:	4805      	ldr	r0, [pc, #20]	; (99b0 <db_hash_gen.constprop.0+0x60>)
    999c:	2104      	movs	r1, #4
    999e:	f016 f954 	bl	1fc4a <atomic_or>
}
    99a2:	b048      	add	sp, #288	; 0x120
    99a4:	bd10      	pop	{r4, pc}
    99a6:	bf00      	nop
    99a8:	0001fba1 	.word	0x0001fba1
    99ac:	20001550 	.word	0x20001550
    99b0:	20001608 	.word	0x20001608

000099b4 <gatt_indicate>:
{
    99b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    99b8:	4615      	mov	r5, r2
    99ba:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr,
    99bc:	2214      	movs	r2, #20
    99be:	6869      	ldr	r1, [r5, #4]
{
    99c0:	4680      	mov	r8, r0
	if (bt_gatt_check_perm(conn, params->attr,
    99c2:	f016 fbed 	bl	201a0 <bt_gatt_check_perm>
    99c6:	2800      	cmp	r0, #0
    99c8:	d139      	bne.n	9a3e <gatt_indicate+0x8a>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    99ca:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
    99ce:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
    99d0:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    99d2:	f7ff fbcd 	bl	9170 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
    99d6:	3602      	adds	r6, #2
	if (!req) {
    99d8:	4604      	mov	r4, r0
    99da:	b920      	cbnz	r0, 99e6 <gatt_indicate+0x32>
		return -ENOMEM;
    99dc:	f06f 050b 	mvn.w	r5, #11
}
    99e0:	4628      	mov	r0, r5
    99e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req->func = func;
    99e6:	4b17      	ldr	r3, [pc, #92]	; (9a44 <gatt_indicate+0x90>)
    99e8:	6043      	str	r3, [r0, #4]
	req->user_data = params;
    99ea:	60c5      	str	r5, [r0, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
    99ec:	4632      	mov	r2, r6
    99ee:	211d      	movs	r1, #29
    99f0:	4640      	mov	r0, r8
    99f2:	f015 ffb7 	bl	1f964 <bt_att_create_pdu>
	if (!buf) {
    99f6:	4606      	mov	r6, r0
    99f8:	b918      	cbnz	r0, 9a02 <gatt_indicate+0x4e>
		bt_att_req_free(req);
    99fa:	4620      	mov	r0, r4
    99fc:	f7ff fbda 	bl	91b4 <bt_att_req_free>
    9a00:	e7ec      	b.n	99dc <gatt_indicate+0x28>
	return net_buf_simple_add(&buf->b, len);
    9a02:	f100 0a08 	add.w	sl, r0, #8
    9a06:	2102      	movs	r1, #2
    9a08:	4650      	mov	r0, sl
    9a0a:	f01b f984 	bl	24d16 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
    9a0e:	4607      	mov	r7, r0
    9a10:	8aa9      	ldrh	r1, [r5, #20]
    9a12:	f827 9b02 	strh.w	r9, [r7], #2
    9a16:	4650      	mov	r0, sl
    9a18:	f01b f97d 	bl	24d16 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    9a1c:	8aaa      	ldrh	r2, [r5, #20]
    9a1e:	6929      	ldr	r1, [r5, #16]
    9a20:	4638      	mov	r0, r7
    9a22:	f014 fb06 	bl	1e032 <memcpy>
	req->buf = buf;
    9a26:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
    9a28:	4621      	mov	r1, r4
    9a2a:	4640      	mov	r0, r8
    9a2c:	f016 f879 	bl	1fb22 <bt_att_req_send>
	if (err) {
    9a30:	4605      	mov	r5, r0
    9a32:	2800      	cmp	r0, #0
    9a34:	d0d4      	beq.n	99e0 <gatt_indicate+0x2c>
		bt_att_req_free(req);
    9a36:	4620      	mov	r0, r4
    9a38:	f7ff fbbc 	bl	91b4 <bt_att_req_free>
    9a3c:	e7d0      	b.n	99e0 <gatt_indicate+0x2c>
		return -EPERM;
    9a3e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    9a42:	e7cd      	b.n	99e0 <gatt_indicate+0x2c>
    9a44:	0001fb67 	.word	0x0001fb67

00009a48 <bt_gatt_indicate>:
{
    9a48:	b530      	push	{r4, r5, lr}
    9a4a:	4604      	mov	r4, r0
    9a4c:	b08b      	sub	sp, #44	; 0x2c
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    9a4e:	4837      	ldr	r0, [pc, #220]	; (9b2c <bt_gatt_indicate+0xe4>)
    9a50:	f016 f8a0 	bl	1fb94 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    9a54:	0782      	lsls	r2, r0, #30
{
    9a56:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    9a58:	d561      	bpl.n	9b1e <bt_gatt_indicate+0xd6>
	if (conn && conn->state != BT_CONN_CONNECTED) {
    9a5a:	b114      	cbz	r4, 9a62 <bt_gatt_indicate+0x1a>
    9a5c:	7aa3      	ldrb	r3, [r4, #10]
    9a5e:	2b07      	cmp	r3, #7
    9a60:	d160      	bne.n	9b24 <bt_gatt_indicate+0xdc>
	data.attr = params->attr;
    9a62:	6868      	ldr	r0, [r5, #4]
    9a64:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
    9a66:	f7ff fdfd 	bl	9664 <bt_gatt_attr_get_handle>
	if (params->uuid) {
    9a6a:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
    9a6c:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
    9a70:	b33a      	cbz	r2, 9ac2 <bt_gatt_indicate+0x7a>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    9a72:	a905      	add	r1, sp, #20
    9a74:	9102      	str	r1, [sp, #8]
    9a76:	492e      	ldr	r1, [pc, #184]	; (9b30 <bt_gatt_indicate+0xe8>)
    9a78:	9101      	str	r1, [sp, #4]
    9a7a:	2101      	movs	r1, #1
	found->attr = NULL;
    9a7c:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    9a7e:	9100      	str	r1, [sp, #0]
    9a80:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
    9a84:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    9a86:	f7ff fe1d 	bl	96c4 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
    9a8a:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
    9a8c:	b91b      	cbnz	r3, 9a96 <bt_gatt_indicate+0x4e>
			return -ENOENT;
    9a8e:	f06f 0001 	mvn.w	r0, #1
}
    9a92:	b00b      	add	sp, #44	; 0x2c
    9a94:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
    9a96:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
    9a98:	9b05      	ldr	r3, [sp, #20]
    9a9a:	6818      	ldr	r0, [r3, #0]
    9a9c:	2300      	movs	r3, #0
    9a9e:	f88d 3010 	strb.w	r3, [sp, #16]
    9aa2:	a904      	add	r1, sp, #16
    9aa4:	f642 0303 	movw	r3, #10243	; 0x2803
    9aa8:	f8ad 3012 	strh.w	r3, [sp, #18]
    9aac:	f014 fcea 	bl	1e484 <bt_uuid_cmp>
    9ab0:	b970      	cbnz	r0, 9ad0 <bt_gatt_indicate+0x88>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
    9ab2:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    9ab4:	68c3      	ldr	r3, [r0, #12]
    9ab6:	799b      	ldrb	r3, [r3, #6]
    9ab8:	069b      	lsls	r3, r3, #26
    9aba:	d405      	bmi.n	9ac8 <bt_gatt_indicate+0x80>
			return -EINVAL;
    9abc:	f06f 0015 	mvn.w	r0, #21
    9ac0:	e7e7      	b.n	9a92 <bt_gatt_indicate+0x4a>
		if (!data.handle) {
    9ac2:	2800      	cmp	r0, #0
    9ac4:	d1e8      	bne.n	9a98 <bt_gatt_indicate+0x50>
    9ac6:	e7e2      	b.n	9a8e <bt_gatt_indicate+0x46>
		data.handle = bt_gatt_attr_value_handle(data.attr);
    9ac8:	f016 fb0d 	bl	200e6 <bt_gatt_attr_value_handle>
    9acc:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
    9ad0:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
    9ad4:	b13c      	cbz	r4, 9ae6 <bt_gatt_indicate+0x9e>
		params->_ref = 1;
    9ad6:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
    9ad8:	4601      	mov	r1, r0
		params->_ref = 1;
    9ada:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
    9adc:	462a      	mov	r2, r5
    9ade:	4620      	mov	r0, r4
    9ae0:	f7ff ff68 	bl	99b4 <gatt_indicate>
    9ae4:	e7d5      	b.n	9a92 <bt_gatt_indicate+0x4a>
	data.err = -ENOTCONN;
    9ae6:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    9aea:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
    9aec:	2302      	movs	r3, #2
    9aee:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    9af2:	f642 1302 	movw	r3, #10498	; 0x2902
    9af6:	f8ad 3012 	strh.w	r3, [sp, #18]
    9afa:	ab05      	add	r3, sp, #20
    9afc:	9302      	str	r3, [sp, #8]
    9afe:	4b0d      	ldr	r3, [pc, #52]	; (9b34 <bt_gatt_indicate+0xec>)
    9b00:	9301      	str	r3, [sp, #4]
    9b02:	2301      	movs	r3, #1
    9b04:	9300      	str	r3, [sp, #0]
	params->_ref = 0;
    9b06:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    9b08:	4623      	mov	r3, r4
    9b0a:	aa04      	add	r2, sp, #16
    9b0c:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
    9b10:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    9b12:	f88d 4010 	strb.w	r4, [sp, #16]
    9b16:	f7ff fdd5 	bl	96c4 <bt_gatt_foreach_attr_type>
	return data.err;
    9b1a:	9807      	ldr	r0, [sp, #28]
    9b1c:	e7b9      	b.n	9a92 <bt_gatt_indicate+0x4a>
		return -EAGAIN;
    9b1e:	f06f 000a 	mvn.w	r0, #10
    9b22:	e7b6      	b.n	9a92 <bt_gatt_indicate+0x4a>
		return -ENOTCONN;
    9b24:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    9b28:	e7b3      	b.n	9a92 <bt_gatt_indicate+0x4a>
    9b2a:	bf00      	nop
    9b2c:	2000014c 	.word	0x2000014c
    9b30:	0001fb8d 	.word	0x0001fb8d
    9b34:	00009c85 	.word	0x00009c85

00009b38 <sc_process>:
{
    9b38:	b573      	push	{r0, r1, r4, r5, r6, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
    9b3a:	f830 3c08 	ldrh.w	r3, [r0, #-8]
    9b3e:	f8ad 3004 	strh.w	r3, [sp, #4]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    9b42:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
    9b46:	4604      	mov	r4, r0
	sc_range[1] = sys_cpu_to_le16(sc->end);
    9b48:	f830 3c06 	ldrh.w	r3, [r0, #-6]
    9b4c:	f8ad 3006 	strh.w	r3, [sp, #6]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    9b50:	f1a0 0620 	sub.w	r6, r0, #32
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    9b54:	f06f 0101 	mvn.w	r1, #1
    9b58:	4628      	mov	r0, r5
    9b5a:	f016 f8f1 	bl	1fd40 <atomic_and.isra.0>
	sc->params.attr = &_1_gatt_svc.attrs[2];
    9b5e:	4b0d      	ldr	r3, [pc, #52]	; (9b94 <sc_process+0x5c>)
    9b60:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
    9b64:	4b0c      	ldr	r3, [pc, #48]	; (9b98 <sc_process+0x60>)
    9b66:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
    9b6a:	ab01      	add	r3, sp, #4
	sc->start = 0U;
    9b6c:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
    9b6e:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
    9b72:	2304      	movs	r3, #4
	sc->start = 0U;
    9b74:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->end = 0U;
    9b78:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
    9b7c:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
    9b80:	4631      	mov	r1, r6
    9b82:	f7ff ff61 	bl	9a48 <bt_gatt_indicate>
    9b86:	b918      	cbnz	r0, 9b90 <sc_process+0x58>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    9b88:	2102      	movs	r1, #2
    9b8a:	4628      	mov	r0, r5
    9b8c:	f016 f85d 	bl	1fc4a <atomic_or>
}
    9b90:	b002      	add	sp, #8
    9b92:	bd70      	pop	{r4, r5, r6, pc}
    9b94:	00026ae4 	.word	0x00026ae4
    9b98:	000094c1 	.word	0x000094c1

00009b9c <bt_gatt_notify_cb>:
{
    9b9c:	b530      	push	{r4, r5, lr}
    9b9e:	4604      	mov	r4, r0
    9ba0:	b08b      	sub	sp, #44	; 0x2c
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    9ba2:	4835      	ldr	r0, [pc, #212]	; (9c78 <bt_gatt_notify_cb+0xdc>)
    9ba4:	f015 fff6 	bl	1fb94 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    9ba8:	0782      	lsls	r2, r0, #30
{
    9baa:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    9bac:	d55d      	bpl.n	9c6a <bt_gatt_notify_cb+0xce>
	if (conn && conn->state != BT_CONN_CONNECTED) {
    9bae:	b114      	cbz	r4, 9bb6 <bt_gatt_notify_cb+0x1a>
    9bb0:	7aa3      	ldrb	r3, [r4, #10]
    9bb2:	2b07      	cmp	r3, #7
    9bb4:	d15c      	bne.n	9c70 <bt_gatt_notify_cb+0xd4>
	data.attr = params->attr;
    9bb6:	6868      	ldr	r0, [r5, #4]
    9bb8:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
    9bba:	f7ff fd53 	bl	9664 <bt_gatt_attr_get_handle>
	if (params->uuid) {
    9bbe:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
    9bc0:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
    9bc4:	b33a      	cbz	r2, 9c16 <bt_gatt_notify_cb+0x7a>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    9bc6:	a905      	add	r1, sp, #20
    9bc8:	9102      	str	r1, [sp, #8]
    9bca:	492c      	ldr	r1, [pc, #176]	; (9c7c <bt_gatt_notify_cb+0xe0>)
    9bcc:	9101      	str	r1, [sp, #4]
    9bce:	2101      	movs	r1, #1
	found->attr = NULL;
    9bd0:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    9bd2:	9100      	str	r1, [sp, #0]
    9bd4:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
    9bd8:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    9bda:	f7ff fd73 	bl	96c4 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
    9bde:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
    9be0:	b91b      	cbnz	r3, 9bea <bt_gatt_notify_cb+0x4e>
			return -ENOENT;
    9be2:	f06f 0001 	mvn.w	r0, #1
}
    9be6:	b00b      	add	sp, #44	; 0x2c
    9be8:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
    9bea:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
    9bec:	9b05      	ldr	r3, [sp, #20]
    9bee:	6818      	ldr	r0, [r3, #0]
    9bf0:	2300      	movs	r3, #0
    9bf2:	f88d 3010 	strb.w	r3, [sp, #16]
    9bf6:	a904      	add	r1, sp, #16
    9bf8:	f642 0303 	movw	r3, #10243	; 0x2803
    9bfc:	f8ad 3012 	strh.w	r3, [sp, #18]
    9c00:	f014 fc40 	bl	1e484 <bt_uuid_cmp>
    9c04:	b970      	cbnz	r0, 9c24 <bt_gatt_notify_cb+0x88>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
    9c06:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
    9c08:	68c3      	ldr	r3, [r0, #12]
    9c0a:	799b      	ldrb	r3, [r3, #6]
    9c0c:	06db      	lsls	r3, r3, #27
    9c0e:	d405      	bmi.n	9c1c <bt_gatt_notify_cb+0x80>
			return -EINVAL;
    9c10:	f06f 0015 	mvn.w	r0, #21
    9c14:	e7e7      	b.n	9be6 <bt_gatt_notify_cb+0x4a>
		if (!data.handle) {
    9c16:	2800      	cmp	r0, #0
    9c18:	d1e8      	bne.n	9bec <bt_gatt_notify_cb+0x50>
    9c1a:	e7e2      	b.n	9be2 <bt_gatt_notify_cb+0x46>
		data.handle = bt_gatt_attr_value_handle(data.attr);
    9c1c:	f016 fa63 	bl	200e6 <bt_gatt_attr_value_handle>
    9c20:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_notify(conn, data.handle, params);
    9c24:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
    9c28:	b12c      	cbz	r4, 9c36 <bt_gatt_notify_cb+0x9a>
		return gatt_notify(conn, data.handle, params);
    9c2a:	4601      	mov	r1, r0
    9c2c:	462a      	mov	r2, r5
    9c2e:	4620      	mov	r0, r4
    9c30:	f016 fad9 	bl	201e6 <gatt_notify>
    9c34:	e7d7      	b.n	9be6 <bt_gatt_notify_cb+0x4a>
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    9c36:	f642 1202 	movw	r2, #10498	; 0x2902
    9c3a:	f8ad 2012 	strh.w	r2, [sp, #18]
    9c3e:	aa05      	add	r2, sp, #20
	data.err = -ENOTCONN;
    9c40:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    9c44:	9202      	str	r2, [sp, #8]
    9c46:	4a0e      	ldr	r2, [pc, #56]	; (9c80 <bt_gatt_notify_cb+0xe4>)
	data.err = -ENOTCONN;
    9c48:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
    9c4a:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    9c4c:	e9cd 3200 	strd	r3, r2, [sp]
	data.type = BT_GATT_CCC_NOTIFY;
    9c50:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    9c54:	aa04      	add	r2, sp, #16
    9c56:	4623      	mov	r3, r4
    9c58:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.nfy_params = params;
    9c5c:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    9c5e:	f88d 4010 	strb.w	r4, [sp, #16]
    9c62:	f7ff fd2f 	bl	96c4 <bt_gatt_foreach_attr_type>
	return data.err;
    9c66:	9807      	ldr	r0, [sp, #28]
    9c68:	e7bd      	b.n	9be6 <bt_gatt_notify_cb+0x4a>
		return -EAGAIN;
    9c6a:	f06f 000a 	mvn.w	r0, #10
    9c6e:	e7ba      	b.n	9be6 <bt_gatt_notify_cb+0x4a>
		return -ENOTCONN;
    9c70:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    9c74:	e7b7      	b.n	9be6 <bt_gatt_notify_cb+0x4a>
    9c76:	bf00      	nop
    9c78:	2000014c 	.word	0x2000014c
    9c7c:	0001fb8d 	.word	0x0001fb8d
    9c80:	00009c85 	.word	0x00009c85

00009c84 <notify_cb>:
{
    9c84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    9c86:	4b32      	ldr	r3, [pc, #200]	; (9d50 <notify_cb+0xcc>)
{
    9c88:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    9c8a:	6882      	ldr	r2, [r0, #8]
    9c8c:	429a      	cmp	r2, r3
{
    9c8e:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    9c90:	d12e      	bne.n	9cf0 <notify_cb+0x6c>
	ccc = attr->user_data;
    9c92:	68c7      	ldr	r7, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
    9c94:	4b2f      	ldr	r3, [pc, #188]	; (9d54 <notify_cb+0xd0>)
    9c96:	429f      	cmp	r7, r3
    9c98:	d11a      	bne.n	9cd0 <notify_cb+0x4c>
    9c9a:	4d2f      	ldr	r5, [pc, #188]	; (9d58 <notify_cb+0xd4>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    9c9c:	2300      	movs	r3, #0
    9c9e:	2207      	movs	r2, #7
    9ca0:	4669      	mov	r1, sp
    9ca2:	1c68      	adds	r0, r5, #1
    9ca4:	9300      	str	r3, [sp, #0]
    9ca6:	f8cd 3003 	str.w	r3, [sp, #3]
    9caa:	f014 f9b1 	bl	1e010 <memcmp>
    9cae:	b178      	cbz	r0, 9cd0 <notify_cb+0x4c>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
    9cb0:	4629      	mov	r1, r5
    9cb2:	2207      	movs	r2, #7
    9cb4:	f811 0b01 	ldrb.w	r0, [r1], #1
    9cb8:	f7fe fb6c 	bl	8394 <bt_conn_lookup_state_le>
			if (!conn) {
    9cbc:	b9e0      	cbnz	r0, 9cf8 <notify_cb+0x74>
				sc = (struct sc_data *)data->ind_params->data;
    9cbe:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
    9cc0:	4629      	mov	r1, r5
				sc = (struct sc_data *)data->ind_params->data;
    9cc2:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
    9cc4:	f811 0b01 	ldrb.w	r0, [r1], #1
    9cc8:	8853      	ldrh	r3, [r2, #2]
    9cca:	8812      	ldrh	r2, [r2, #0]
    9ccc:	f016 f9a4 	bl	20018 <sc_save>
		if (cfg->value != data->type) {
    9cd0:	893a      	ldrh	r2, [r7, #8]
    9cd2:	89a3      	ldrh	r3, [r4, #12]
    9cd4:	429a      	cmp	r2, r3
    9cd6:	d10b      	bne.n	9cf0 <notify_cb+0x6c>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    9cd8:	4639      	mov	r1, r7
    9cda:	f811 0b01 	ldrb.w	r0, [r1], #1
    9cde:	f7fe fb3b 	bl	8358 <bt_conn_lookup_addr_le>
		if (!conn) {
    9ce2:	4605      	mov	r5, r0
    9ce4:	b120      	cbz	r0, 9cf0 <notify_cb+0x6c>
		if (conn->state != BT_CONN_CONNECTED) {
    9ce6:	7a83      	ldrb	r3, [r0, #10]
    9ce8:	2b07      	cmp	r3, #7
    9cea:	d008      	beq.n	9cfe <notify_cb+0x7a>
			bt_conn_unref(conn);
    9cec:	f015 f8a8 	bl	1ee40 <bt_conn_unref>
	return BT_GATT_ITER_CONTINUE;
    9cf0:	2701      	movs	r7, #1
}
    9cf2:	4638      	mov	r0, r7
    9cf4:	b003      	add	sp, #12
    9cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bt_conn_unref(conn);
    9cf8:	f015 f8a2 	bl	1ee40 <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    9cfc:	e7e8      	b.n	9cd0 <notify_cb+0x4c>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
    9cfe:	697b      	ldr	r3, [r7, #20]
    9d00:	b123      	cbz	r3, 9d0c <notify_cb+0x88>
    9d02:	4631      	mov	r1, r6
    9d04:	4798      	blx	r3
    9d06:	b908      	cbnz	r0, 9d0c <notify_cb+0x88>
			bt_conn_unref(conn);
    9d08:	4628      	mov	r0, r5
    9d0a:	e7ef      	b.n	9cec <notify_cb+0x68>
		if (bt_gatt_check_perm(conn, attr,
    9d0c:	2214      	movs	r2, #20
    9d0e:	4631      	mov	r1, r6
    9d10:	4628      	mov	r0, r5
    9d12:	f016 fa45 	bl	201a0 <bt_gatt_check_perm>
    9d16:	4607      	mov	r7, r0
    9d18:	2800      	cmp	r0, #0
    9d1a:	d1e9      	bne.n	9cf0 <notify_cb+0x6c>
		if (data->type == BT_GATT_CCC_INDICATE) {
    9d1c:	89a3      	ldrh	r3, [r4, #12]
			err = gatt_indicate(conn, data->handle,
    9d1e:	88a1      	ldrh	r1, [r4, #4]
    9d20:	6922      	ldr	r2, [r4, #16]
		if (data->type == BT_GATT_CCC_INDICATE) {
    9d22:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
    9d24:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
    9d26:	d10f      	bne.n	9d48 <notify_cb+0xc4>
			err = gatt_indicate(conn, data->handle,
    9d28:	f7ff fe44 	bl	99b4 <gatt_indicate>
			if (err == 0) {
    9d2c:	4606      	mov	r6, r0
    9d2e:	b918      	cbnz	r0, 9d38 <notify_cb+0xb4>
				data->ind_params->_ref++;
    9d30:	6922      	ldr	r2, [r4, #16]
    9d32:	7d93      	ldrb	r3, [r2, #22]
    9d34:	3301      	adds	r3, #1
    9d36:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
    9d38:	4628      	mov	r0, r5
    9d3a:	f015 f881 	bl	1ee40 <bt_conn_unref>
		if (err < 0) {
    9d3e:	2e00      	cmp	r6, #0
    9d40:	dbd7      	blt.n	9cf2 <notify_cb+0x6e>
		data->err = 0;
    9d42:	2300      	movs	r3, #0
    9d44:	60a3      	str	r3, [r4, #8]
    9d46:	e7d3      	b.n	9cf0 <notify_cb+0x6c>
			err = gatt_notify(conn, data->handle, data->nfy_params);
    9d48:	f016 fa4d 	bl	201e6 <gatt_notify>
    9d4c:	4606      	mov	r6, r0
    9d4e:	e7f3      	b.n	9d38 <notify_cb+0xb4>
    9d50:	0001ff39 	.word	0x0001ff39
    9d54:	200004a8 	.word	0x200004a8
    9d58:	20003f5c 	.word	0x20003f5c

00009d5c <update_ccc>:
{
    9d5c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    9d5e:	4b24      	ldr	r3, [pc, #144]	; (9df0 <update_ccc+0x94>)
	struct bt_conn *conn = data->conn;
    9d60:	6814      	ldr	r4, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
    9d62:	6882      	ldr	r2, [r0, #8]
    9d64:	429a      	cmp	r2, r3
{
    9d66:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    9d68:	d13f      	bne.n	9dea <update_ccc+0x8e>
	ccc = attr->user_data;
    9d6a:	68c6      	ldr	r6, [r0, #12]
		if (!cfg->value ||
    9d6c:	8933      	ldrh	r3, [r6, #8]
    9d6e:	2b00      	cmp	r3, #0
    9d70:	d03b      	beq.n	9dea <update_ccc+0x8e>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    9d72:	4632      	mov	r2, r6
    9d74:	4620      	mov	r0, r4
    9d76:	f812 1b01 	ldrb.w	r1, [r2], #1
    9d7a:	f015 f8cc 	bl	1ef16 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
    9d7e:	2800      	cmp	r0, #0
    9d80:	d033      	beq.n	9dea <update_ccc+0x8e>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
    9d82:	222a      	movs	r2, #42	; 0x2a
    9d84:	4629      	mov	r1, r5
    9d86:	4620      	mov	r0, r4
    9d88:	f016 fa0a 	bl	201a0 <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
    9d8c:	2803      	cmp	r0, #3
    9d8e:	d02c      	beq.n	9dea <update_ccc+0x8e>
		gatt_ccc_changed(attr, ccc);
    9d90:	4631      	mov	r1, r6
    9d92:	4628      	mov	r0, r5
    9d94:	f015 fedd 	bl	1fb52 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
    9d98:	4b16      	ldr	r3, [pc, #88]	; (9df4 <update_ccc+0x98>)
    9d9a:	429e      	cmp	r6, r3
    9d9c:	d125      	bne.n	9dea <update_ccc+0x8e>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
    9d9e:	7a20      	ldrb	r0, [r4, #8]
    9da0:	f104 0188 	add.w	r1, r4, #136	; 0x88
    9da4:	f7ff fb36 	bl	9414 <find_sc_cfg>
	if (!cfg) {
    9da8:	b1f8      	cbz	r0, 9dea <update_ccc+0x8e>
	if (!(cfg->data.start || cfg->data.end)) {
    9daa:	8902      	ldrh	r2, [r0, #8]
    9dac:	8943      	ldrh	r3, [r0, #10]
    9dae:	ea53 0102 	orrs.w	r1, r3, r2
    9db2:	d01a      	beq.n	9dea <update_ccc+0x8e>
	index = bt_conn_index(conn);
    9db4:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
    9db6:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
    9dba:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
    9dbe:	f7fe fa0d 	bl	81dc <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    9dc2:	490d      	ldr	r1, [pc, #52]	; (9df8 <update_ccc+0x9c>)
    9dc4:	4a0d      	ldr	r2, [pc, #52]	; (9dfc <update_ccc+0xa0>)
    9dc6:	2318      	movs	r3, #24
    9dc8:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    9dcc:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    9dce:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
    9dd0:	4a0b      	ldr	r2, [pc, #44]	; (9e00 <update_ccc+0xa4>)
    9dd2:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
    9dd4:	aa01      	add	r2, sp, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    9dd6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].data = &sc_range[0];
    9dda:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
    9ddc:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    9dde:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
    9de2:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    9de4:	4620      	mov	r0, r4
    9de6:	f7ff fe2f 	bl	9a48 <bt_gatt_indicate>
}
    9dea:	2001      	movs	r0, #1
    9dec:	b002      	add	sp, #8
    9dee:	bd70      	pop	{r4, r5, r6, pc}
    9df0:	0001ff39 	.word	0x0001ff39
    9df4:	200004a8 	.word	0x200004a8
    9df8:	200023a4 	.word	0x200023a4
    9dfc:	00026ae4 	.word	0x00026ae4
    9e00:	000200af 	.word	0x000200af

00009e04 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
    9e04:	b507      	push	{r0, r1, r2, lr}
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    9e06:	4a06      	ldr	r2, [pc, #24]	; (9e20 <bt_gatt_connected+0x1c>)
	data.conn = conn;
    9e08:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    9e0a:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
    9e0c:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    9e0e:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
    9e12:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    9e16:	f016 f9b4 	bl	20182 <bt_gatt_foreach_attr>
	 * CF storage on pairing complete.
	 */
	bt_conn_cb_register(&gatt_conn_cb);
#endif /* CONFIG_BT_SETTINGS && CONFIG_BT_SMP */
#endif /* CONFIG_BT_GATT_CLIENT */
}
    9e1a:	b003      	add	sp, #12
    9e1c:	f85d fb04 	ldr.w	pc, [sp], #4
    9e20:	00009d5d 	.word	0x00009d5d

00009e24 <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
    9e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return list->head;
    9e26:	4b08      	ldr	r3, [pc, #32]	; (9e48 <bt_gatt_att_max_mtu_changed+0x24>)
    9e28:	681c      	ldr	r4, [r3, #0]
    9e2a:	4605      	mov	r5, r0
    9e2c:	460e      	mov	r6, r1
    9e2e:	4617      	mov	r7, r2
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    9e30:	b14c      	cbz	r4, 9e46 <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
    9e32:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    9e36:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
    9e38:	b11b      	cbz	r3, 9e42 <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
    9e3a:	463a      	mov	r2, r7
    9e3c:	4631      	mov	r1, r6
    9e3e:	4628      	mov	r0, r5
    9e40:	4798      	blx	r3
	return node->next;
    9e42:	6864      	ldr	r4, [r4, #4]
    9e44:	e7f4      	b.n	9e30 <bt_gatt_att_max_mtu_changed+0xc>
		}
	}
}
    9e46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9e48:	20002380 	.word	0x20002380

00009e4c <db_hash_read>:
{
    9e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
    9e4e:	4913      	ldr	r1, [pc, #76]	; (9e9c <db_hash_read+0x50>)
{
    9e50:	f8bd 6018 	ldrh.w	r6, [sp, #24]
    9e54:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
    9e56:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
    9e5a:	461f      	mov	r7, r3
    9e5c:	4615      	mov	r5, r2
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
    9e5e:	f01b ff39 	bl	25cd4 <k_work_cancel_delayable_sync>
    9e62:	480f      	ldr	r0, [pc, #60]	; (9ea0 <db_hash_read+0x54>)
    9e64:	f015 fe96 	bl	1fb94 <atomic_get>
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
    9e68:	0743      	lsls	r3, r0, #29
    9e6a:	d401      	bmi.n	9e70 <db_hash_read+0x24>
		db_hash_gen(true);
    9e6c:	f7ff fd70 	bl	9950 <db_hash_gen.constprop.0>
	(void)bt_gatt_change_aware(conn, true);
    9e70:	2101      	movs	r1, #1
    9e72:	4620      	mov	r0, r4
    9e74:	f016 f9ea 	bl	2024c <bt_gatt_change_aware>
	if (offset > value_len) {
    9e78:	2e10      	cmp	r6, #16
    9e7a:	d80c      	bhi.n	9e96 <db_hash_read+0x4a>
	len = MIN(buf_len, value_len - offset);
    9e7c:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
    9e80:	4908      	ldr	r1, [pc, #32]	; (9ea4 <db_hash_read+0x58>)
	len = MIN(buf_len, value_len - offset);
    9e82:	42bc      	cmp	r4, r7
    9e84:	bfa8      	it	ge
    9e86:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
    9e88:	4622      	mov	r2, r4
    9e8a:	4431      	add	r1, r6
    9e8c:	4628      	mov	r0, r5
    9e8e:	f014 f8d0 	bl	1e032 <memcpy>
}
    9e92:	4620      	mov	r0, r4
    9e94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    9e96:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
    9e9a:	e7fa      	b.n	9e92 <db_hash_read+0x46>
    9e9c:	20001590 	.word	0x20001590
    9ea0:	20001608 	.word	0x20001608
    9ea4:	20001550 	.word	0x20001550

00009ea8 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
    9ea8:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    9eaa:	4603      	mov	r3, r0
    9eac:	4a12      	ldr	r2, [pc, #72]	; (9ef8 <bt_gatt_disconnected+0x50>)
{
    9eae:	4605      	mov	r5, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    9eb0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    9eb4:	2001      	movs	r0, #1
    9eb6:	f016 f964 	bl	20182 <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
    9eba:	4628      	mov	r0, r5
    9ebc:	f7ff fa18 	bl	92f0 <find_cf_cfg>
	if (!cfg) {
    9ec0:	4604      	mov	r4, r0
    9ec2:	b1c0      	cbz	r0, 9ef6 <bt_gatt_disconnected+0x4e>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    9ec4:	f105 0688 	add.w	r6, r5, #136	; 0x88
    9ec8:	7a28      	ldrb	r0, [r5, #8]
    9eca:	4631      	mov	r1, r6
    9ecc:	f014 fd2d 	bl	1e92a <bt_addr_le_is_bonded>
    9ed0:	b920      	cbnz	r0, 9edc <bt_gatt_disconnected+0x34>
		clear_cf_cfg(cfg);
    9ed2:	4620      	mov	r0, r4
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
    9ed4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		clear_cf_cfg(cfg);
    9ed8:	f015 bfe7 	b.w	1feaa <clear_cf_cfg>
	memcpy(dst, src, sizeof(*dst));
    9edc:	4631      	mov	r1, r6
    9ede:	1c60      	adds	r0, r4, #1
    9ee0:	2207      	movs	r2, #7
    9ee2:	f014 f8a6 	bl	1e032 <memcpy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    9ee6:	f104 000c 	add.w	r0, r4, #12
    9eea:	f06f 0102 	mvn.w	r1, #2
}
    9eee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9ef2:	f015 bf25 	b.w	1fd40 <atomic_and.isra.0>
    9ef6:	bd70      	pop	{r4, r5, r6, pc}
    9ef8:	00009435 	.word	0x00009435

00009efc <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
    9efc:	4b04      	ldr	r3, [pc, #16]	; (9f10 <bt_smp_accept+0x14>)
    9efe:	6818      	ldr	r0, [r3, #0]
    9f00:	b918      	cbnz	r0, 9f0a <bt_smp_accept+0xe>
			continue;
		}

		smp->chan.ops = &ops;
    9f02:	4a04      	ldr	r2, [pc, #16]	; (9f14 <bt_smp_accept+0x18>)
    9f04:	605a      	str	r2, [r3, #4]

		*chan = &smp->chan;
    9f06:	600b      	str	r3, [r1, #0]

		return 0;
    9f08:	4770      	bx	lr
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
    9f0a:	f06f 000b 	mvn.w	r0, #11
}
    9f0e:	4770      	bx	lr
    9f10:	20001610 	.word	0x20001610
    9f14:	00026be8 	.word	0x00026be8

00009f18 <bt_mesh_reset>:

	return -ENOTSUP;
}

void bt_mesh_reset(void)
{
    9f18:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9f1a:	481e      	ldr	r0, [pc, #120]	; (9f94 <bt_mesh_reset+0x7c>)
    9f1c:	f3bf 8f5b 	dmb	ish
    9f20:	6803      	ldr	r3, [r0, #0]
    9f22:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
    9f26:	07db      	lsls	r3, r3, #31
    9f28:	d532      	bpl.n	9f90 <bt_mesh_reset+0x78>
		return;
	}

	bt_mesh.iv_index = 0U;
    9f2a:	2400      	movs	r4, #0
	bt_mesh.ivu_duration = 0;
	bt_mesh.seq = 0U;

	memset(bt_mesh.flags, 0, sizeof(bt_mesh.flags));
    9f2c:	4621      	mov	r1, r4
    9f2e:	2204      	movs	r2, #4
	bt_mesh.iv_index = 0U;
    9f30:	f1a0 0508 	sub.w	r5, r0, #8
    9f34:	f840 4c08 	str.w	r4, [r0, #-8]
	bt_mesh.ivu_duration = 0;
    9f38:	f880 41f0 	strb.w	r4, [r0, #496]	; 0x1f0
	bt_mesh.seq = 0U;
    9f3c:	f840 4c04 	str.w	r4, [r0, #-4]
	memset(bt_mesh.flags, 0, sizeof(bt_mesh.flags));
    9f40:	f014 f882 	bl	1e048 <memset>

	/* If this fails, the work handler will return early on the next
	 * execution, as the device is not provisioned. If the device is
	 * reprovisioned, the timer is always restarted.
	 */
	(void)k_work_cancel_delayable(&bt_mesh.ivu_timer);
    9f44:	f505 7000 	add.w	r0, r5, #512	; 0x200
    9f48:	f01b feb0 	bl	25cac <k_work_cancel_delayable>

	bt_mesh_model_reset();
    9f4c:	f003 fbc8 	bl	d6e0 <bt_mesh_model_reset>
	bt_mesh_cfg_default_set();
    9f50:	f000 f98a 	bl	a268 <bt_mesh_cfg_default_set>
	bt_mesh_trans_reset();
    9f54:	f001 ff82 	bl	be5c <bt_mesh_trans_reset>
	bt_mesh_app_keys_reset();
    9f58:	f001 fc16 	bl	b788 <bt_mesh_app_keys_reset>
	bt_mesh_net_keys_reset();
    9f5c:	f001 fa50 	bl	b400 <bt_mesh_net_keys_reset>

	bt_mesh_net_loopback_clear(BT_MESH_KEY_ANY);
    9f60:	f64f 70ff 	movw	r0, #65535	; 0xffff
    9f64:	f000 ff1a 	bl	ad9c <bt_mesh_net_loopback_clear>

		bt_mesh_lpn_disable(true);
	}

	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND)) {
		bt_mesh_friends_clear();
    9f68:	f004 f80a 	bl	df80 <bt_mesh_friends_clear>
	}

	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY)) {
		(void)bt_mesh_proxy_gatt_disable();
    9f6c:	f005 fc84 	bl	f878 <bt_mesh_proxy_gatt_disable>

	if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		bt_mesh_net_clear();
	}

	(void)memset(bt_mesh.dev_key, 0, sizeof(bt_mesh.dev_key));
    9f70:	4621      	mov	r1, r4
    9f72:	2210      	movs	r2, #16
    9f74:	f505 700c 	add.w	r0, r5, #560	; 0x230
    9f78:	f014 f866 	bl	1e048 <memset>

	bt_mesh_scan_disable();
    9f7c:	f016 fa7b 	bl	20476 <bt_mesh_scan_disable>
	bt_mesh_beacon_disable();
    9f80:	f000 fc08 	bl	a794 <bt_mesh_beacon_disable>

	bt_mesh_comp_unprovision();
    9f84:	f003 f8aa 	bl	d0dc <bt_mesh_comp_unprovision>

	if (IS_ENABLED(CONFIG_BT_MESH_PROV)) {
		bt_mesh_prov_reset();
	}
}
    9f88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_mesh_prov_reset();
    9f8c:	f004 bbce 	b.w	e72c <bt_mesh_prov_reset>
}
    9f90:	bd38      	pop	{r3, r4, r5, pc}
    9f92:	bf00      	nop
    9f94:	20001730 	.word	0x20001730

00009f98 <bt_mesh_is_provisioned>:
    9f98:	4b04      	ldr	r3, [pc, #16]	; (9fac <bt_mesh_is_provisioned+0x14>)
    9f9a:	f3bf 8f5b 	dmb	ish
    9f9e:	6818      	ldr	r0, [r3, #0]
    9fa0:	f3bf 8f5b 	dmb	ish

bool bt_mesh_is_provisioned(void)
{
	return atomic_test_bit(bt_mesh.flags, BT_MESH_VALID);
}
    9fa4:	f000 0001 	and.w	r0, r0, #1
    9fa8:	4770      	bx	lr
    9faa:	bf00      	nop
    9fac:	20001730 	.word	0x20001730

00009fb0 <bt_mesh_start>:
		mod->cb->start(mod);
	}
}

int bt_mesh_start(void)
{
    9fb0:	b538      	push	{r3, r4, r5, lr}
	int err;

	err = bt_mesh_adv_enable();
    9fb2:	f003 fcb1 	bl	d918 <bt_mesh_adv_enable>
	if (err) {
    9fb6:	4604      	mov	r4, r0
    9fb8:	bb30      	cbnz	r0, a008 <bt_mesh_start+0x58>
		BT_ERR("Failed enabling advertiser");
		return err;
	}

	if (bt_mesh_beacon_enabled()) {
    9fba:	f000 f8c1 	bl	a140 <bt_mesh_beacon_enabled>
    9fbe:	b328      	cbz	r0, a00c <bt_mesh_start+0x5c>
		bt_mesh_beacon_enable();
    9fc0:	f000 fbd6 	bl	a770 <bt_mesh_beacon_enable>
	} else {
		bt_mesh_beacon_disable();
	}

	if (!IS_ENABLED(CONFIG_BT_MESH_PROV) || !bt_mesh_prov_active() ||
    9fc4:	f004 fb9e 	bl	e704 <bt_mesh_prov_active>
    9fc8:	b120      	cbz	r0, 9fd4 <bt_mesh_start+0x24>
	    bt_mesh_prov_link.bearer->type == BT_MESH_PROV_ADV) {
    9fca:	4b12      	ldr	r3, [pc, #72]	; (a014 <bt_mesh_start+0x64>)
    9fcc:	685b      	ldr	r3, [r3, #4]
	if (!IS_ENABLED(CONFIG_BT_MESH_PROV) || !bt_mesh_prov_active() ||
    9fce:	781b      	ldrb	r3, [r3, #0]
    9fd0:	2b01      	cmp	r3, #1
    9fd2:	d105      	bne.n	9fe0 <bt_mesh_start+0x30>
		if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT)) {
			(void)bt_mesh_pb_gatt_disable();
    9fd4:	f005 f9b2 	bl	f33c <bt_mesh_pb_gatt_disable>
		}

		if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY)) {
			(void)bt_mesh_proxy_gatt_enable();
    9fd8:	f005 fbf4 	bl	f7c4 <bt_mesh_proxy_gatt_enable>
			bt_mesh_adv_gatt_update();
    9fdc:	f018 ff41 	bl	22e62 <bt_mesh_adv_gatt_update>
	}

	if (IS_ENABLED(CONFIG_BT_MESH_LOW_POWER)) {
		bt_mesh_lpn_init();
	} else {
		bt_mesh_scan_enable();
    9fe0:	f000 f9bc 	bl	a35c <bt_mesh_scan_enable>
	}

	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND)) {
		bt_mesh_friend_init();
    9fe4:	f004 f9ac 	bl	e340 <bt_mesh_friend_init>
	}

	if (IS_ENABLED(CONFIG_BT_MESH_PROV)) {
		struct bt_mesh_subnet *sub = bt_mesh_subnet_next(NULL);
    9fe8:	2000      	movs	r0, #0
    9fea:	f001 f9e9 	bl	b3c0 <bt_mesh_subnet_next>
    9fee:	4605      	mov	r5, r0
		uint16_t addr = bt_mesh_primary_addr();
    9ff0:	f003 f87a 	bl	d0e8 <bt_mesh_primary_addr>
    9ff4:	4601      	mov	r1, r0

		bt_mesh_prov_complete(sub->net_idx, addr);
    9ff6:	8ba8      	ldrh	r0, [r5, #28]
    9ff8:	f004 fb90 	bl	e71c <bt_mesh_prov_complete>
	}

	bt_mesh_hb_start();
    9ffc:	f002 fdb0 	bl	cb60 <bt_mesh_hb_start>

	bt_mesh_model_foreach(model_start, NULL);
    a000:	4805      	ldr	r0, [pc, #20]	; (a018 <bt_mesh_start+0x68>)
    a002:	2100      	movs	r1, #0
    a004:	f002 ff44 	bl	ce90 <bt_mesh_model_foreach>

	return 0;
}
    a008:	4620      	mov	r0, r4
    a00a:	bd38      	pop	{r3, r4, r5, pc}
		bt_mesh_beacon_disable();
    a00c:	f000 fbc2 	bl	a794 <bt_mesh_beacon_disable>
    a010:	e7d8      	b.n	9fc4 <bt_mesh_start+0x14>
    a012:	bf00      	nop
    a014:	2000248c 	.word	0x2000248c
    a018:	000202f1 	.word	0x000202f1

0000a01c <bt_mesh_provision>:
{
    a01c:	b538      	push	{r3, r4, r5, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a01e:	4c1c      	ldr	r4, [pc, #112]	; (a090 <bt_mesh_provision+0x74>)
    a020:	f3bf 8f5b 	dmb	ish
    a024:	4605      	mov	r5, r0
    a026:	4608      	mov	r0, r1
    a028:	4611      	mov	r1, r2
    a02a:	e854 2f00 	ldrex	r2, [r4]
    a02e:	f042 0c01 	orr.w	ip, r2, #1
    a032:	e844 ce00 	strex	lr, ip, [r4]
    a036:	f1be 0f00 	cmp.w	lr, #0
    a03a:	d1f6      	bne.n	a02a <bt_mesh_provision+0xe>
    a03c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_mesh.flags, BT_MESH_VALID)) {
    a040:	07d2      	lsls	r2, r2, #31
    a042:	d421      	bmi.n	a088 <bt_mesh_provision+0x6c>
	err = bt_mesh_net_create(net_idx, flags, net_key, iv_index);
    a044:	462a      	mov	r2, r5
    a046:	f000 fcb1 	bl	a9ac <bt_mesh_net_create>
	if (err) {
    a04a:	4605      	mov	r5, r0
    a04c:	b168      	cbz	r0, a06a <bt_mesh_provision+0x4e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a04e:	f3bf 8f5b 	dmb	ish
    a052:	e854 3f00 	ldrex	r3, [r4]
    a056:	f023 0301 	bic.w	r3, r3, #1
    a05a:	e844 3200 	strex	r2, r3, [r4]
    a05e:	2a00      	cmp	r2, #0
    a060:	d1f7      	bne.n	a052 <bt_mesh_provision+0x36>
    a062:	f3bf 8f5b 	dmb	ish
}
    a066:	4628      	mov	r0, r5
    a068:	bd38      	pop	{r3, r4, r5, pc}
	bt_mesh.seq = 0U;
    a06a:	f844 0c04 	str.w	r0, [r4, #-4]
	bt_mesh_comp_provision(addr);
    a06e:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    a072:	f003 f81d 	bl	d0b0 <bt_mesh_comp_provision>
	memcpy(bt_mesh.dev_key, dev_key, 16);
    a076:	9905      	ldr	r1, [sp, #20]
    a078:	2210      	movs	r2, #16
    a07a:	f504 700a 	add.w	r0, r4, #552	; 0x228
    a07e:	f013 ffd8 	bl	1e032 <memcpy>
	bt_mesh_start();
    a082:	f7ff ff95 	bl	9fb0 <bt_mesh_start>
	return 0;
    a086:	e7ee      	b.n	a066 <bt_mesh_provision+0x4a>
		return -EALREADY;
    a088:	f06f 0577 	mvn.w	r5, #119	; 0x77
    a08c:	e7eb      	b.n	a066 <bt_mesh_provision+0x4a>
    a08e:	bf00      	nop
    a090:	20001730 	.word	0x20001730

0000a094 <feature_set>:
	return atomic_test_bit(bt_mesh.flags, BT_MESH_BEACON);
}

static int feature_set(int feature_flag, enum bt_mesh_feat_state state)
{
	if (state != BT_MESH_FEATURE_DISABLED &&
    a094:	2901      	cmp	r1, #1
{
    a096:	b510      	push	{r4, lr}
    a098:	4604      	mov	r4, r0
	if (state != BT_MESH_FEATURE_DISABLED &&
    a09a:	d820      	bhi.n	a0de <feature_set+0x4a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    a09c:	f3bf 8f5b 	dmb	ish
    a0a0:	4812      	ldr	r0, [pc, #72]	; (a0ec <feature_set+0x58>)
    a0a2:	6802      	ldr	r2, [r0, #0]
    a0a4:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    a0a8:	4122      	asrs	r2, r4
	    state != BT_MESH_FEATURE_ENABLED) {
		return -EINVAL;
	}

	if (atomic_test_bit(bt_mesh.flags, feature_flag) ==
	    (state == BT_MESH_FEATURE_ENABLED)) {
    a0aa:	f001 0301 	and.w	r3, r1, #1
	if (atomic_test_bit(bt_mesh.flags, feature_flag) ==
    a0ae:	f002 0201 	and.w	r2, r2, #1
    a0b2:	4293      	cmp	r3, r2
    a0b4:	d016      	beq.n	a0e4 <feature_set+0x50>
	atomic_val_t mask = ATOMIC_MASK(bit);
    a0b6:	2101      	movs	r1, #1
    a0b8:	40a1      	lsls	r1, r4
	if (val) {
    a0ba:	b11b      	cbz	r3, a0c4 <feature_set+0x30>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    a0bc:	f016 f93d 	bl	2033a <atomic_or.isra.0>
	}

	atomic_set_bit_to(bt_mesh.flags, feature_flag,
			  (state == BT_MESH_FEATURE_ENABLED));

	return 0;
    a0c0:	2000      	movs	r0, #0
}
    a0c2:	bd10      	pop	{r4, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    a0c4:	43c9      	mvns	r1, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a0c6:	f3bf 8f5b 	dmb	ish
    a0ca:	e850 2f00 	ldrex	r2, [r0]
    a0ce:	400a      	ands	r2, r1
    a0d0:	e840 2400 	strex	r4, r2, [r0]
    a0d4:	2c00      	cmp	r4, #0
    a0d6:	d1f8      	bne.n	a0ca <feature_set+0x36>
    a0d8:	f3bf 8f5b 	dmb	ish
    a0dc:	e7f0      	b.n	a0c0 <feature_set+0x2c>
		return -EINVAL;
    a0de:	f06f 0015 	mvn.w	r0, #21
    a0e2:	e7ee      	b.n	a0c2 <feature_set+0x2e>
		return -EALREADY;
    a0e4:	f06f 0077 	mvn.w	r0, #119	; 0x77
    a0e8:	e7eb      	b.n	a0c2 <feature_set+0x2e>
    a0ea:	bf00      	nop
    a0ec:	20001730 	.word	0x20001730

0000a0f0 <bt_mesh_beacon_set>:
{
    a0f0:	b508      	push	{r3, lr}
    a0f2:	4603      	mov	r3, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    a0f4:	4811      	ldr	r0, [pc, #68]	; (a13c <bt_mesh_beacon_set+0x4c>)
    a0f6:	f3bf 8f5b 	dmb	ish
    a0fa:	6802      	ldr	r2, [r0, #0]
    a0fc:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_BEACON) == beacon) {
    a100:	f3c2 12c0 	ubfx	r2, r2, #7, #1
    a104:	4293      	cmp	r3, r2
    a106:	d017      	beq.n	a138 <bt_mesh_beacon_set+0x48>
	if (val) {
    a108:	b133      	cbz	r3, a118 <bt_mesh_beacon_set+0x28>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    a10a:	2180      	movs	r1, #128	; 0x80
    a10c:	f016 f915 	bl	2033a <atomic_or.isra.0>
}
    a110:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_mesh_beacon_enable();
    a114:	f000 bb2c 	b.w	a770 <bt_mesh_beacon_enable>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a118:	f3bf 8f5b 	dmb	ish
    a11c:	e850 3f00 	ldrex	r3, [r0]
    a120:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    a124:	e840 3200 	strex	r2, r3, [r0]
    a128:	2a00      	cmp	r2, #0
    a12a:	d1f7      	bne.n	a11c <bt_mesh_beacon_set+0x2c>
    a12c:	f3bf 8f5b 	dmb	ish
}
    a130:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_mesh_beacon_disable();
    a134:	f000 bb2e 	b.w	a794 <bt_mesh_beacon_disable>
}
    a138:	bd08      	pop	{r3, pc}
    a13a:	bf00      	nop
    a13c:	20001730 	.word	0x20001730

0000a140 <bt_mesh_beacon_enabled>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    a140:	4b04      	ldr	r3, [pc, #16]	; (a154 <bt_mesh_beacon_enabled+0x14>)
    a142:	f3bf 8f5b 	dmb	ish
    a146:	6818      	ldr	r0, [r3, #0]
    a148:	f3bf 8f5b 	dmb	ish
}
    a14c:	f3c0 10c0 	ubfx	r0, r0, #7, #1
    a150:	4770      	bx	lr
    a152:	bf00      	nop
    a154:	20001730 	.word	0x20001730

0000a158 <bt_mesh_gatt_proxy_set>:
{
	return sub->node_id == BT_MESH_NODE_IDENTITY_RUNNING;
}

int bt_mesh_gatt_proxy_set(enum bt_mesh_feat_state gatt_proxy)
{
    a158:	b538      	push	{r3, r4, r5, lr}

	if (!IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY)) {
		return -ENOTSUP;
	}

	err = feature_set(BT_MESH_GATT_PROXY, gatt_proxy);
    a15a:	4601      	mov	r1, r0
{
    a15c:	4605      	mov	r5, r0
	err = feature_set(BT_MESH_GATT_PROXY, gatt_proxy);
    a15e:	2008      	movs	r0, #8
    a160:	f7ff ff98 	bl	a094 <feature_set>
	if (err) {
    a164:	4604      	mov	r4, r0
    a166:	b930      	cbnz	r0, a176 <bt_mesh_gatt_proxy_set+0x1e>
		return err;
	}

	if ((gatt_proxy == BT_MESH_FEATURE_ENABLED) ||
    a168:	2d01      	cmp	r5, #1
    a16a:	d106      	bne.n	a17a <bt_mesh_gatt_proxy_set+0x22>
	    (gatt_proxy == BT_MESH_FEATURE_DISABLED &&
	     !bt_mesh_subnet_find(node_id_is_running, NULL))) {
		bt_mesh_adv_gatt_update();
    a16c:	f018 fe79 	bl	22e62 <bt_mesh_adv_gatt_update>
	}

	bt_mesh_hb_feature_changed(BT_MESH_FEAT_PROXY);
    a170:	2002      	movs	r0, #2
    a172:	f002 fccf 	bl	cb14 <bt_mesh_hb_feature_changed>
	    atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
	}

	return 0;
}
    a176:	4620      	mov	r0, r4
    a178:	bd38      	pop	{r3, r4, r5, pc}
	if ((gatt_proxy == BT_MESH_FEATURE_ENABLED) ||
    a17a:	2d00      	cmp	r5, #0
    a17c:	d1f8      	bne.n	a170 <bt_mesh_gatt_proxy_set+0x18>
	     !bt_mesh_subnet_find(node_id_is_running, NULL))) {
    a17e:	4601      	mov	r1, r0
    a180:	4802      	ldr	r0, [pc, #8]	; (a18c <bt_mesh_gatt_proxy_set+0x34>)
    a182:	f001 f8dd 	bl	b340 <bt_mesh_subnet_find>
	    (gatt_proxy == BT_MESH_FEATURE_DISABLED &&
    a186:	2800      	cmp	r0, #0
    a188:	d1f2      	bne.n	a170 <bt_mesh_gatt_proxy_set+0x18>
    a18a:	e7ef      	b.n	a16c <bt_mesh_gatt_proxy_set+0x14>
    a18c:	00020331 	.word	0x00020331

0000a190 <bt_mesh_gatt_proxy_get>:
    a190:	4b04      	ldr	r3, [pc, #16]	; (a1a4 <bt_mesh_gatt_proxy_get+0x14>)
    a192:	f3bf 8f5b 	dmb	ish
    a196:	6818      	ldr	r0, [r3, #0]
    a198:	f3bf 8f5b 	dmb	ish
	if (!IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY)) {
		return BT_MESH_FEATURE_NOT_SUPPORTED;
	}

	return feature_get(BT_MESH_GATT_PROXY);
}
    a19c:	f3c0 2000 	ubfx	r0, r0, #8, #1
    a1a0:	4770      	bx	lr
    a1a2:	bf00      	nop
    a1a4:	20001730 	.word	0x20001730

0000a1a8 <bt_mesh_default_ttl_set>:

int bt_mesh_default_ttl_set(uint8_t default_ttl)
{
	if (default_ttl == 1 || default_ttl > BT_MESH_TTL_MAX) {
    a1a8:	2801      	cmp	r0, #1
    a1aa:	d00a      	beq.n	a1c2 <bt_mesh_default_ttl_set+0x1a>
    a1ac:	0603      	lsls	r3, r0, #24
    a1ae:	d408      	bmi.n	a1c2 <bt_mesh_default_ttl_set+0x1a>
		return -EINVAL;
	}

	if (default_ttl == bt_mesh.default_ttl) {
    a1b0:	4b05      	ldr	r3, [pc, #20]	; (a1c8 <bt_mesh_default_ttl_set+0x20>)
    a1b2:	f893 21fb 	ldrb.w	r2, [r3, #507]	; 0x1fb
    a1b6:	4282      	cmp	r2, r0
    a1b8:	d001      	beq.n	a1be <bt_mesh_default_ttl_set+0x16>
		return 0;
	}

	bt_mesh.default_ttl = default_ttl;
    a1ba:	f883 01fb 	strb.w	r0, [r3, #507]	; 0x1fb
		return 0;
    a1be:	2000      	movs	r0, #0
	    atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
	}

	return 0;
}
    a1c0:	4770      	bx	lr
		return -EINVAL;
    a1c2:	f06f 0015 	mvn.w	r0, #21
    a1c6:	4770      	bx	lr
    a1c8:	20001728 	.word	0x20001728

0000a1cc <bt_mesh_default_ttl_get>:

uint8_t bt_mesh_default_ttl_get(void)
{
	return bt_mesh.default_ttl;
}
    a1cc:	4b01      	ldr	r3, [pc, #4]	; (a1d4 <bt_mesh_default_ttl_get+0x8>)
    a1ce:	f893 01fb 	ldrb.w	r0, [r3, #507]	; 0x1fb
    a1d2:	4770      	bx	lr
    a1d4:	20001728 	.word	0x20001728

0000a1d8 <bt_mesh_friend_get>:
    a1d8:	4b04      	ldr	r3, [pc, #16]	; (a1ec <bt_mesh_friend_get+0x14>)
    a1da:	f3bf 8f5b 	dmb	ish
    a1de:	6818      	ldr	r0, [r3, #0]
    a1e0:	f3bf 8f5b 	dmb	ish
	if (!IS_ENABLED(CONFIG_BT_MESH_FRIEND)) {
		return BT_MESH_FEATURE_NOT_SUPPORTED;
	}

	return feature_get(BT_MESH_FRIEND);
}
    a1e4:	f3c0 2040 	ubfx	r0, r0, #9, #1
    a1e8:	4770      	bx	lr
    a1ea:	bf00      	nop
    a1ec:	20001730 	.word	0x20001730

0000a1f0 <bt_mesh_net_transmit_set>:

void bt_mesh_net_transmit_set(uint8_t xmit)
{
	if (bt_mesh.net_xmit == xmit) {
    a1f0:	4b03      	ldr	r3, [pc, #12]	; (a200 <bt_mesh_net_transmit_set+0x10>)
    a1f2:	f893 21f9 	ldrb.w	r2, [r3, #505]	; 0x1f9
    a1f6:	4282      	cmp	r2, r0
		return;
	}

	bt_mesh.net_xmit = xmit;
    a1f8:	bf18      	it	ne
    a1fa:	f883 01f9 	strbne.w	r0, [r3, #505]	; 0x1f9

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
	}
}
    a1fe:	4770      	bx	lr
    a200:	20001728 	.word	0x20001728

0000a204 <bt_mesh_net_transmit_get>:

uint8_t bt_mesh_net_transmit_get(void)
{
	return bt_mesh.net_xmit;
}
    a204:	4b01      	ldr	r3, [pc, #4]	; (a20c <bt_mesh_net_transmit_get+0x8>)
    a206:	f893 01f9 	ldrb.w	r0, [r3, #505]	; 0x1f9
    a20a:	4770      	bx	lr
    a20c:	20001728 	.word	0x20001728

0000a210 <bt_mesh_relay_set>:

int bt_mesh_relay_set(enum bt_mesh_feat_state relay, uint8_t xmit)
{
    a210:	b510      	push	{r4, lr}
    a212:	460c      	mov	r4, r1

	if (!IS_ENABLED(CONFIG_BT_MESH_RELAY)) {
		return -ENOTSUP;
	}

	err = feature_set(BT_MESH_RELAY, relay);
    a214:	4601      	mov	r1, r0
    a216:	2006      	movs	r0, #6
    a218:	f7ff ff3c 	bl	a094 <feature_set>
	if (err == -EINVAL) {
    a21c:	f110 0f16 	cmn.w	r0, #22
    a220:	d00d      	beq.n	a23e <bt_mesh_relay_set+0x2e>
		return err;
	}

	if (err == -EALREADY && bt_mesh.relay_xmit == xmit) {
    a222:	f110 0f78 	cmn.w	r0, #120	; 0x78
    a226:	4b06      	ldr	r3, [pc, #24]	; (a240 <bt_mesh_relay_set+0x30>)
    a228:	d103      	bne.n	a232 <bt_mesh_relay_set+0x22>
    a22a:	f893 21fa 	ldrb.w	r2, [r3, #506]	; 0x1fa
    a22e:	42a2      	cmp	r2, r4
    a230:	d005      	beq.n	a23e <bt_mesh_relay_set+0x2e>
		return -EALREADY;
	}

	bt_mesh.relay_xmit = xmit;
	bt_mesh_hb_feature_changed(BT_MESH_FEAT_RELAY);
    a232:	2001      	movs	r0, #1
	bt_mesh.relay_xmit = xmit;
    a234:	f883 41fa 	strb.w	r4, [r3, #506]	; 0x1fa
	bt_mesh_hb_feature_changed(BT_MESH_FEAT_RELAY);
    a238:	f002 fc6c 	bl	cb14 <bt_mesh_hb_feature_changed>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
	}

	return 0;
    a23c:	2000      	movs	r0, #0
}
    a23e:	bd10      	pop	{r4, pc}
    a240:	20001728 	.word	0x20001728

0000a244 <bt_mesh_relay_get>:
    a244:	4b04      	ldr	r3, [pc, #16]	; (a258 <bt_mesh_relay_get+0x14>)
    a246:	f3bf 8f5b 	dmb	ish
    a24a:	6818      	ldr	r0, [r3, #0]
    a24c:	f3bf 8f5b 	dmb	ish

enum bt_mesh_feat_state bt_mesh_relay_get(void)
{
	return feature_get(BT_MESH_RELAY);
}
    a250:	f3c0 1080 	ubfx	r0, r0, #6, #1
    a254:	4770      	bx	lr
    a256:	bf00      	nop
    a258:	20001730 	.word	0x20001730

0000a25c <bt_mesh_relay_retransmit_get>:
	if (!IS_ENABLED(CONFIG_BT_MESH_RELAY)) {
		return 0;
	}

	return bt_mesh.relay_xmit;
}
    a25c:	4b01      	ldr	r3, [pc, #4]	; (a264 <bt_mesh_relay_retransmit_get+0x8>)
    a25e:	f893 01fa 	ldrb.w	r0, [r3, #506]	; 0x1fa
    a262:	4770      	bx	lr
    a264:	20001728 	.word	0x20001728

0000a268 <bt_mesh_cfg_default_set>:
}

void bt_mesh_cfg_default_set(void)
{
	bt_mesh.default_ttl = CONFIG_BT_MESH_DEFAULT_TTL;
	bt_mesh.net_xmit =
    a268:	480c      	ldr	r0, [pc, #48]	; (a29c <bt_mesh_cfg_default_set+0x34>)
{
    a26a:	b508      	push	{r3, lr}
	bt_mesh.net_xmit =
    a26c:	230a      	movs	r3, #10
    a26e:	f880 31f9 	strb.w	r3, [r0, #505]	; 0x1f9
		BT_MESH_TRANSMIT(CONFIG_BT_MESH_NETWORK_TRANSMIT_COUNT,
				 CONFIG_BT_MESH_NETWORK_TRANSMIT_INTERVAL);

#if defined(CONFIG_BT_MESH_RELAY)
	bt_mesh.relay_xmit =
    a272:	f240 730a 	movw	r3, #1802	; 0x70a
    a276:	f8a0 31fa 	strh.w	r3, [r0, #506]	; 0x1fa
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    a27a:	2140      	movs	r1, #64	; 0x40
    a27c:	3008      	adds	r0, #8
    a27e:	f016 f85c 	bl	2033a <atomic_or.isra.0>
    a282:	2180      	movs	r1, #128	; 0x80
    a284:	f016 f859 	bl	2033a <atomic_or.isra.0>
    a288:	f44f 7180 	mov.w	r1, #256	; 0x100
    a28c:	f016 f855 	bl	2033a <atomic_or.isra.0>
	}

	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND_ENABLED)) {
		atomic_set_bit(bt_mesh.flags, BT_MESH_FRIEND);
	}
}
    a290:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    a294:	f44f 7100 	mov.w	r1, #512	; 0x200
    a298:	f016 b84f 	b.w	2033a <atomic_or.isra.0>
    a29c:	20001728 	.word	0x20001728

0000a2a0 <bt_mesh_adv_create>:
}

struct net_buf *bt_mesh_adv_create(enum bt_mesh_adv_type type,
				   enum bt_mesh_adv_tag tag,
				   uint8_t xmit, k_timeout_t timeout)
{
    a2a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a2a4:	4b18      	ldr	r3, [pc, #96]	; (a308 <bt_mesh_adv_create+0x68>)
    a2a6:	f3bf 8f5b 	dmb	ish
    a2aa:	681b      	ldr	r3, [r3, #0]
    a2ac:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_SUSPENDED)) {
    a2b0:	f3c3 0940 	ubfx	r9, r3, #1, #1
    a2b4:	079b      	lsls	r3, r3, #30
{
    a2b6:	4680      	mov	r8, r0
    a2b8:	460c      	mov	r4, r1
    a2ba:	4617      	mov	r7, r2
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_SUSPENDED)) {
    a2bc:	d421      	bmi.n	a302 <bt_mesh_adv_create+0x62>
	return net_buf_alloc_fixed(pool, timeout);
    a2be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    a2c2:	4812      	ldr	r0, [pc, #72]	; (a30c <bt_mesh_adv_create+0x6c>)
    a2c4:	f01a fc9c 	bl	24c00 <net_buf_alloc_fixed>
	if (!buf) {
    a2c8:	4606      	mov	r6, r0
    a2ca:	b1b8      	cbz	r0, a2fc <bt_mesh_adv_create+0x5c>
	adv = get_id(net_buf_id(buf));
    a2cc:	f00c fe18 	bl	16f00 <net_buf_id>
	return &adv_pool[id];
    a2d0:	4d0f      	ldr	r5, [pc, #60]	; (a310 <bt_mesh_adv_create+0x70>)
    a2d2:	220c      	movs	r2, #12
    a2d4:	fb02 5500 	mla	r5, r2, r0, r5
	BT_MESH_ADV(buf) = adv;
    a2d8:	6175      	str	r5, [r6, #20]
	(void)memset(adv, 0, sizeof(*adv));
    a2da:	4649      	mov	r1, r9
    a2dc:	4628      	mov	r0, r5
    a2de:	f013 feb3 	bl	1e048 <memset>
	adv->type         = type;
    a2e2:	0124      	lsls	r4, r4, #4
    a2e4:	7a2b      	ldrb	r3, [r5, #8]
	adv->xmit         = xmit;
    a2e6:	726f      	strb	r7, [r5, #9]
	adv->type         = type;
    a2e8:	f004 0470 	and.w	r4, r4, #112	; 0x70
    a2ec:	f008 0803 	and.w	r8, r8, #3
    a2f0:	ea44 0408 	orr.w	r4, r4, r8
    a2f4:	f023 0373 	bic.w	r3, r3, #115	; 0x73
    a2f8:	431c      	orrs	r4, r3
    a2fa:	722c      	strb	r4, [r5, #8]
	return bt_mesh_adv_create_from_pool(&adv_buf_pool, adv_alloc, type,
					    tag, xmit, timeout);
}
    a2fc:	4630      	mov	r0, r6
    a2fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return NULL;
    a302:	2600      	movs	r6, #0
	return bt_mesh_adv_create_from_pool(&adv_buf_pool, adv_alloc, type,
    a304:	e7fa      	b.n	a2fc <bt_mesh_adv_create+0x5c>
    a306:	bf00      	nop
    a308:	20001730 	.word	0x20001730
    a30c:	20000fbc 	.word	0x20000fbc
    a310:	200023c0 	.word	0x200023c0

0000a314 <bt_mesh_adv_buf_get>:
		return NULL;
	}
}
#else /* !CONFIG_BT_MESH_RELAY_ADV_SETS */
struct net_buf *bt_mesh_adv_buf_get(k_timeout_t timeout)
{
    a314:	4602      	mov	r2, r0
    a316:	460b      	mov	r3, r1
	return net_buf_get(&bt_mesh_adv_queue, timeout);
    a318:	4801      	ldr	r0, [pc, #4]	; (a320 <bt_mesh_adv_buf_get+0xc>)
    a31a:	f01a bc76 	b.w	24c0a <net_buf_get>
    a31e:	bf00      	nop
    a320:	20000f30 	.word	0x20000f30

0000a324 <bt_mesh_adv_buf_get_cancel>:
	z_impl_k_queue_cancel_wait(queue);
    a324:	4801      	ldr	r0, [pc, #4]	; (a32c <bt_mesh_adv_buf_get_cancel+0x8>)
    a326:	f01b bb8c 	b.w	25a42 <z_impl_k_queue_cancel_wait>
    a32a:	bf00      	nop
    a32c:	20000f30 	.word	0x20000f30

0000a330 <bt_mesh_adv_send>:

}

void bt_mesh_adv_send(struct net_buf *buf, const struct bt_mesh_send_cb *cb,
		      void *cb_data)
{
    a330:	b510      	push	{r4, lr}
	BT_DBG("type 0x%02x len %u: %s", BT_MESH_ADV(buf)->type, buf->len,
	       bt_hex(buf->data, buf->len));

	BT_MESH_ADV(buf)->cb = cb;
    a332:	6944      	ldr	r4, [r0, #20]
	BT_MESH_ADV(buf)->cb_data = cb_data;
    a334:	e9c4 1200 	strd	r1, r2, [r4]
	BT_MESH_ADV(buf)->busy = 1U;
    a338:	6942      	ldr	r2, [r0, #20]
    a33a:	7a13      	ldrb	r3, [r2, #8]
    a33c:	f043 0308 	orr.w	r3, r3, #8
    a340:	7213      	strb	r3, [r2, #8]
	} else {
		net_buf_put(&bt_mesh_relay_queue, net_buf_ref(buf));
		bt_mesh_adv_buf_relay_ready();
	}
#else /* !CONFIG_BT_MESH_RELAY_ADV_SETS */
	net_buf_put(&bt_mesh_adv_queue, net_buf_ref(buf));
    a342:	f01a fcb0 	bl	24ca6 <net_buf_ref>
    a346:	4601      	mov	r1, r0
    a348:	4803      	ldr	r0, [pc, #12]	; (a358 <bt_mesh_adv_send+0x28>)
    a34a:	f01a fc9f 	bl	24c8c <net_buf_put>
	bt_mesh_adv_buf_local_ready();
#endif /* CONFIG_BT_MESH_RELAY_ADV_SETS */
}
    a34e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_mesh_adv_buf_local_ready();
    a352:	f018 bd85 	b.w	22e60 <bt_mesh_adv_buf_local_ready>
    a356:	bf00      	nop
    a358:	20000f30 	.word	0x20000f30

0000a35c <bt_mesh_scan_enable>:
		net_buf_simple_pull(buf, len);
	}
}

int bt_mesh_scan_enable(void)
{
    a35c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct bt_le_scan_param scan_param = {
    a35e:	2100      	movs	r1, #0
    a360:	2214      	movs	r2, #20
    a362:	a801      	add	r0, sp, #4
    a364:	f013 fe70 	bl	1e048 <memset>
    a368:	f04f 1330 	mov.w	r3, #3145776	; 0x300030
			.window     = MESH_SCAN_WINDOW };
	int err;

	BT_DBG("");

	err = bt_le_scan_start(&scan_param, bt_mesh_scan_cb);
    a36c:	4906      	ldr	r1, [pc, #24]	; (a388 <bt_mesh_scan_enable+0x2c>)
	struct bt_le_scan_param scan_param = {
    a36e:	9303      	str	r3, [sp, #12]
	err = bt_le_scan_start(&scan_param, bt_mesh_scan_cb);
    a370:	a801      	add	r0, sp, #4
    a372:	f7fd fb89 	bl	7a88 <bt_le_scan_start>
	if (err && err != -EALREADY) {
    a376:	b118      	cbz	r0, a380 <bt_mesh_scan_enable+0x24>
		BT_ERR("starting scan failed (err %d)", err);
		return err;
	}

	return 0;
    a378:	f110 0f78 	cmn.w	r0, #120	; 0x78
    a37c:	bf08      	it	eq
    a37e:	2000      	moveq	r0, #0
}
    a380:	b007      	add	sp, #28
    a382:	f85d fb04 	ldr.w	pc, [sp], #4
    a386:	bf00      	nop
    a388:	000203e5 	.word	0x000203e5

0000a38c <beacon_send>:

	bt_mesh_subnet_foreach(sub_update_beacon_observation);
}

static void beacon_send(struct k_work *work)
{
    a38c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a390:	b08c      	sub	sp, #48	; 0x30
	BT_DBG("");

	if (bt_mesh_is_provisioned()) {
    a392:	f7ff fe01 	bl	9f98 <bt_mesh_is_provisioned>
    a396:	b318      	cbz	r0, a3e0 <beacon_send+0x54>
		if (!bt_mesh_beacon_enabled() &&
    a398:	f7ff fed2 	bl	a140 <bt_mesh_beacon_enabled>
    a39c:	b1a8      	cbz	r0, a3ca <beacon_send+0x3e>
	first_half = !first_half;
    a39e:	4a4b      	ldr	r2, [pc, #300]	; (a4cc <beacon_send+0x140>)
    a3a0:	7813      	ldrb	r3, [r2, #0]
    a3a2:	f083 0301 	eor.w	r3, r3, #1
    a3a6:	7013      	strb	r3, [r2, #0]
	if (first_half) {
    a3a8:	b913      	cbnz	r3, a3b0 <beacon_send+0x24>
	bt_mesh_subnet_foreach(sub_update_beacon_observation);
    a3aa:	4849      	ldr	r0, [pc, #292]	; (a4d0 <beacon_send+0x144>)
    a3ac:	f000 ffec 	bl	b388 <bt_mesh_subnet_foreach>
		    !atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_INITIATOR)) {
			return;
		}

		update_beacon_observation();
		(void)bt_mesh_subnet_find(secure_beacon_send, NULL);
    a3b0:	4848      	ldr	r0, [pc, #288]	; (a4d4 <beacon_send+0x148>)
    a3b2:	2100      	movs	r1, #0
    a3b4:	f000 ffc4 	bl	b340 <bt_mesh_subnet_find>

		k_work_schedule(&beacon_timer, PROVISIONED_INTERVAL);
    a3b8:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
		/* Don't send anything if we have an active provisioning link */
		if (!bt_mesh_prov_active()) {
			unprovisioned_beacon_send();
		}

		k_work_schedule(&beacon_timer, K_SECONDS(CONFIG_BT_MESH_UNPROV_BEACON_INT));
    a3bc:	4846      	ldr	r0, [pc, #280]	; (a4d8 <beacon_send+0x14c>)
    a3be:	2300      	movs	r3, #0
	}

}
    a3c0:	b00c      	add	sp, #48	; 0x30
    a3c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_work_schedule(&beacon_timer, K_SECONDS(CONFIG_BT_MESH_UNPROV_BEACON_INT));
    a3c6:	f011 b973 	b.w	1b6b0 <k_work_schedule>
    a3ca:	4b44      	ldr	r3, [pc, #272]	; (a4dc <beacon_send+0x150>)
    a3cc:	f3bf 8f5b 	dmb	ish
    a3d0:	681b      	ldr	r3, [r3, #0]
    a3d2:	f3bf 8f5b 	dmb	ish
		if (!bt_mesh_beacon_enabled() &&
    a3d6:	071b      	lsls	r3, r3, #28
    a3d8:	d4e1      	bmi.n	a39e <beacon_send+0x12>
}
    a3da:	b00c      	add	sp, #48	; 0x30
    a3dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!bt_mesh_prov_active()) {
    a3e0:	f004 f990 	bl	e704 <bt_mesh_prov_active>
    a3e4:	4604      	mov	r4, r0
    a3e6:	2800      	cmp	r0, #0
    a3e8:	d16b      	bne.n	a4c2 <beacon_send+0x136>
				 UNPROV_XMIT, K_NO_WAIT);
    a3ea:	2200      	movs	r2, #0
    a3ec:	2300      	movs	r3, #0
	uint8_t uri_hash[16] = { 0 };
    a3ee:	e9cd 0004 	strd	r0, r0, [sp, #16]
    a3f2:	e9cd 0006 	strd	r0, r0, [sp, #24]
	buf = bt_mesh_adv_create(BT_MESH_ADV_BEACON, BT_MESH_LOCAL_ADV,
    a3f6:	e9cd 2300 	strd	r2, r3, [sp]
    a3fa:	2101      	movs	r1, #1
    a3fc:	220a      	movs	r2, #10
    a3fe:	2002      	movs	r0, #2
    a400:	f7ff ff4e 	bl	a2a0 <bt_mesh_adv_create>
	if (!buf) {
    a404:	4606      	mov	r6, r0
    a406:	2800      	cmp	r0, #0
    a408:	d05b      	beq.n	a4c2 <beacon_send+0x136>
	prov = bt_mesh_prov_get();
    a40a:	f004 f975 	bl	e6f8 <bt_mesh_prov_get>
	return net_buf_simple_add_u8(&buf->b, val);
    a40e:	f106 0708 	add.w	r7, r6, #8
    a412:	4605      	mov	r5, r0
    a414:	4621      	mov	r1, r4
    a416:	4638      	mov	r0, r7
    a418:	f01a fc8c 	bl	24d34 <net_buf_simple_add_u8>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    a41c:	6829      	ldr	r1, [r5, #0]
    a41e:	2210      	movs	r2, #16
    a420:	4638      	mov	r0, r7
    a422:	f01a fc7e 	bl	24d22 <net_buf_simple_add_mem>
	if (prov->uri && bt_mesh_s1(prov->uri, uri_hash) == 0) {
    a426:	f8d5 8004 	ldr.w	r8, [r5, #4]
    a42a:	f1b8 0f00 	cmp.w	r8, #0
    a42e:	d04b      	beq.n	a4c8 <beacon_send+0x13c>

static inline bool bt_mesh_s1(const char *m, uint8_t salt[16])
{
	const uint8_t zero[16] = { 0 };

	return bt_mesh_aes_cmac_one(zero, m, strlen(m), salt);
    a430:	4640      	mov	r0, r8
	const uint8_t zero[16] = { 0 };
    a432:	e9cd 4408 	strd	r4, r4, [sp, #32]
    a436:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
	return bt_mesh_aes_cmac_one(zero, m, strlen(m), salt);
    a43a:	f013 fdcd 	bl	1dfd8 <strlen>
	return bt_mesh_aes_cmac(key, &sg, 1, mac);
    a43e:	ab04      	add	r3, sp, #16
	struct bt_mesh_sg sg = { m, len };
    a440:	e9cd 8002 	strd	r8, r0, [sp, #8]
	return bt_mesh_aes_cmac(key, &sg, 1, mac);
    a444:	2201      	movs	r2, #1
    a446:	a902      	add	r1, sp, #8
    a448:	a808      	add	r0, sp, #32
    a44a:	f016 fd0b 	bl	20e64 <bt_mesh_aes_cmac>
    a44e:	2800      	cmp	r0, #0
    a450:	d13a      	bne.n	a4c8 <beacon_send+0x13c>
		oob_info = prov->oob_info | BT_MESH_PROV_OOB_URI;
    a452:	8929      	ldrh	r1, [r5, #8]
    a454:	f041 0102 	orr.w	r1, r1, #2
	net_buf_simple_add_be16(&buf->b, val);
    a458:	4638      	mov	r0, r7
    a45a:	f01a fc7d 	bl	24d58 <net_buf_simple_add_be16>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    a45e:	2204      	movs	r2, #4
    a460:	a904      	add	r1, sp, #16
    a462:	4638      	mov	r0, r7
    a464:	f01a fc5d 	bl	24d22 <net_buf_simple_add_mem>
	bt_mesh_adv_send(buf, NULL, NULL);
    a468:	2200      	movs	r2, #0
    a46a:	4611      	mov	r1, r2
    a46c:	4630      	mov	r0, r6
    a46e:	f7ff ff5f 	bl	a330 <bt_mesh_adv_send>
	net_buf_unref(buf);
    a472:	4630      	mov	r0, r6
    a474:	f00c fe00 	bl	17078 <net_buf_unref>
	if (prov->uri) {
    a478:	686b      	ldr	r3, [r5, #4]
    a47a:	b313      	cbz	r3, a4c2 <beacon_send+0x136>
					 UNPROV_XMIT, K_NO_WAIT);
    a47c:	2200      	movs	r2, #0
    a47e:	2300      	movs	r3, #0
		buf = bt_mesh_adv_create(BT_MESH_ADV_URI, BT_MESH_LOCAL_ADV,
    a480:	e9cd 2300 	strd	r2, r3, [sp]
    a484:	2101      	movs	r1, #1
    a486:	220a      	movs	r2, #10
    a488:	2003      	movs	r0, #3
    a48a:	f7ff ff09 	bl	a2a0 <bt_mesh_adv_create>
		if (!buf) {
    a48e:	4604      	mov	r4, r0
    a490:	b1b8      	cbz	r0, a4c2 <beacon_send+0x136>
		len = strlen(prov->uri);
    a492:	6868      	ldr	r0, [r5, #4]
    a494:	f013 fda0 	bl	1dfd8 <strlen>
	return net_buf_simple_tailroom(&buf->b);
    a498:	f104 0708 	add.w	r7, r4, #8
    a49c:	4606      	mov	r6, r0
    a49e:	4638      	mov	r0, r7
    a4a0:	f01a fcf3 	bl	24e8a <net_buf_simple_tailroom>
		if (net_buf_tailroom(buf) < len) {
    a4a4:	4286      	cmp	r6, r0
    a4a6:	d809      	bhi.n	a4bc <beacon_send+0x130>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    a4a8:	6869      	ldr	r1, [r5, #4]
    a4aa:	4632      	mov	r2, r6
    a4ac:	4638      	mov	r0, r7
    a4ae:	f01a fc38 	bl	24d22 <net_buf_simple_add_mem>
			bt_mesh_adv_send(buf, NULL, NULL);
    a4b2:	2200      	movs	r2, #0
    a4b4:	4611      	mov	r1, r2
    a4b6:	4620      	mov	r0, r4
    a4b8:	f7ff ff3a 	bl	a330 <bt_mesh_adv_send>
		net_buf_unref(buf);
    a4bc:	4620      	mov	r0, r4
    a4be:	f00c fddb 	bl	17078 <net_buf_unref>
		k_work_schedule(&beacon_timer, K_SECONDS(CONFIG_BT_MESH_UNPROV_BEACON_INT));
    a4c2:	f44f 3220 	mov.w	r2, #163840	; 0x28000
    a4c6:	e779      	b.n	a3bc <beacon_send+0x30>
		oob_info = prov->oob_info;
    a4c8:	8929      	ldrh	r1, [r5, #8]
    a4ca:	e7c5      	b.n	a458 <beacon_send+0xcc>
    a4cc:	200040b5 	.word	0x200040b5
    a4d0:	00020489 	.word	0x00020489
    a4d4:	0000a535 	.word	0x0000a535
    a4d8:	200016f8 	.word	0x200016f8
    a4dc:	20001730 	.word	0x20001730

0000a4e0 <bt_mesh_beacon_create>:
{
    a4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a4e2:	460c      	mov	r4, r1
    a4e4:	4605      	mov	r5, r0
	uint8_t flags = bt_mesh_net_flags(sub);
    a4e6:	f000 febf 	bl	b268 <bt_mesh_net_flags>
	net_buf_simple_add_u8(buf, BEACON_TYPE_SECURE);
    a4ea:	2101      	movs	r1, #1
	uint8_t flags = bt_mesh_net_flags(sub);
    a4ec:	4607      	mov	r7, r0
	net_buf_simple_add_u8(buf, BEACON_TYPE_SECURE);
    a4ee:	4620      	mov	r0, r4
    a4f0:	f01a fc20 	bl	24d34 <net_buf_simple_add_u8>
	keys = &sub->keys[SUBNET_KEY_TX_IDX(sub)];
    a4f4:	7fae      	ldrb	r6, [r5, #30]
    a4f6:	1eb3      	subs	r3, r6, #2
    a4f8:	425e      	negs	r6, r3
	net_buf_simple_add_u8(buf, flags);
    a4fa:	4639      	mov	r1, r7
    a4fc:	4620      	mov	r0, r4
	keys = &sub->keys[SUBNET_KEY_TX_IDX(sub)];
    a4fe:	415e      	adcs	r6, r3
	net_buf_simple_add_u8(buf, flags);
    a500:	f01a fc18 	bl	24d34 <net_buf_simple_add_u8>
	net_buf_simple_add_mem(buf, keys->net_id, 8);
    a504:	215a      	movs	r1, #90	; 0x5a
    a506:	fb01 5106 	mla	r1, r1, r6, r5
    a50a:	2208      	movs	r2, #8
    a50c:	315e      	adds	r1, #94	; 0x5e
    a50e:	4620      	mov	r0, r4
    a510:	f01a fc07 	bl	24d22 <net_buf_simple_add_mem>
	net_buf_simple_add_be32(buf, bt_mesh.iv_index);
    a514:	4b06      	ldr	r3, [pc, #24]	; (a530 <bt_mesh_beacon_create+0x50>)
    a516:	4620      	mov	r0, r4
    a518:	6819      	ldr	r1, [r3, #0]
    a51a:	f01a fc3f 	bl	24d9c <net_buf_simple_add_be32>
	net_buf_simple_add_mem(buf, sub->auth, 8);
    a51e:	f105 0124 	add.w	r1, r5, #36	; 0x24
    a522:	4620      	mov	r0, r4
    a524:	2208      	movs	r2, #8
}
    a526:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	net_buf_simple_add_mem(buf, sub->auth, 8);
    a52a:	f01a bbfa 	b.w	24d22 <net_buf_simple_add_mem>
    a52e:	bf00      	nop
    a530:	20001728 	.word	0x20001728

0000a534 <secure_beacon_send>:
{
    a534:	b537      	push	{r0, r1, r2, r4, r5, lr}
    a536:	4604      	mov	r4, r0
	return z_impl_k_uptime_ticks();
    a538:	f01b fd38 	bl	25fac <z_impl_k_uptime_ticks>
			return ((t * to_hz + off) / from_hz);
    a53c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    a540:	fba0 3002 	umull	r3, r0, r0, r2
    a544:	fb02 0001 	mla	r0, r2, r1, r0
    a548:	0bdb      	lsrs	r3, r3, #15
	time_diff = now - sub->beacon_sent;
    a54a:	6822      	ldr	r2, [r4, #0]
    a54c:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
    a550:	1a9b      	subs	r3, r3, r2
	if (time_diff < (600 * MSEC_PER_SEC) &&
    a552:	4a15      	ldr	r2, [pc, #84]	; (a5a8 <secure_beacon_send+0x74>)
    a554:	4293      	cmp	r3, r2
    a556:	d809      	bhi.n	a56c <secure_beacon_send+0x38>
		time_diff < BEACON_THRESHOLD(sub)) {
    a558:	7922      	ldrb	r2, [r4, #4]
    a55a:	f242 7110 	movw	r1, #10000	; 0x2710
    a55e:	fb02 1101 	mla	r1, r2, r1, r1
    a562:	f5a1 519c 	sub.w	r1, r1, #4992	; 0x1380
    a566:	3908      	subs	r1, #8
	if (time_diff < (600 * MSEC_PER_SEC) &&
    a568:	4299      	cmp	r1, r3
    a56a:	d817      	bhi.n	a59c <secure_beacon_send+0x68>
				 PROV_XMIT, K_NO_WAIT);
    a56c:	2200      	movs	r2, #0
    a56e:	2300      	movs	r3, #0
	buf = bt_mesh_adv_create(BT_MESH_ADV_BEACON, BT_MESH_LOCAL_ADV,
    a570:	e9cd 2300 	strd	r2, r3, [sp]
    a574:	2101      	movs	r1, #1
    a576:	2208      	movs	r2, #8
    a578:	2002      	movs	r0, #2
    a57a:	f7ff fe91 	bl	a2a0 <bt_mesh_adv_create>
	if (!buf) {
    a57e:	4605      	mov	r5, r0
    a580:	b178      	cbz	r0, a5a2 <secure_beacon_send+0x6e>
	bt_mesh_beacon_create(sub, &buf->b);
    a582:	f100 0108 	add.w	r1, r0, #8
    a586:	4620      	mov	r0, r4
    a588:	f7ff ffaa 	bl	a4e0 <bt_mesh_beacon_create>
	bt_mesh_adv_send(buf, &send_cb, sub);
    a58c:	4628      	mov	r0, r5
    a58e:	4907      	ldr	r1, [pc, #28]	; (a5ac <secure_beacon_send+0x78>)
    a590:	4622      	mov	r2, r4
    a592:	f7ff fecd 	bl	a330 <bt_mesh_adv_send>
	net_buf_unref(buf);
    a596:	4628      	mov	r0, r5
    a598:	f00c fd6e 	bl	17078 <net_buf_unref>
		return false;
    a59c:	2000      	movs	r0, #0
}
    a59e:	b003      	add	sp, #12
    a5a0:	bd30      	pop	{r4, r5, pc}
		return true; /* Bail out */
    a5a2:	2001      	movs	r0, #1
    a5a4:	e7fb      	b.n	a59e <secure_beacon_send+0x6a>
    a5a6:	bf00      	nop
    a5a8:	000927bf 	.word	0x000927bf
    a5ac:	00026c1c 	.word	0x00026c1c

0000a5b0 <bt_mesh_beacon_update>:
		break;
	}
}

void bt_mesh_beacon_update(struct bt_mesh_subnet *sub)
{
    a5b0:	b523      	push	{r0, r1, r5, lr}
    a5b2:	4605      	mov	r5, r0
	uint8_t flags = bt_mesh_net_flags(sub);
    a5b4:	f000 fe58 	bl	b268 <bt_mesh_net_flags>
	struct bt_mesh_subnet_keys *keys;
	int err;

	keys = &sub->keys[SUBNET_KEY_TX_IDX(sub)];
    a5b8:	7fab      	ldrb	r3, [r5, #30]
    a5ba:	1e9a      	subs	r2, r3, #2
    a5bc:	4253      	negs	r3, r2
    a5be:	4153      	adcs	r3, r2
	uint8_t flags = bt_mesh_net_flags(sub);
    a5c0:	4601      	mov	r1, r0

	BT_DBG("NetIndex 0x%03x Using %s key", sub->net_idx,
	       SUBNET_KEY_TX_IDX(sub) ? "new" : "current");
	BT_DBG("flags 0x%02x, IVI 0x%08x", flags, bt_mesh.iv_index);

	err = bt_mesh_beacon_auth(keys->beacon, flags, keys->net_id,
    a5c2:	205a      	movs	r0, #90	; 0x5a
    a5c4:	4343      	muls	r3, r0
    a5c6:	f103 025e 	add.w	r2, r3, #94	; 0x5e
    a5ca:	f103 0076 	add.w	r0, r3, #118	; 0x76
				   bt_mesh.iv_index, sub->auth);
    a5ce:	f105 0324 	add.w	r3, r5, #36	; 0x24
	err = bt_mesh_beacon_auth(keys->beacon, flags, keys->net_id,
    a5d2:	9300      	str	r3, [sp, #0]
    a5d4:	4b03      	ldr	r3, [pc, #12]	; (a5e4 <bt_mesh_beacon_update+0x34>)
    a5d6:	442a      	add	r2, r5
    a5d8:	681b      	ldr	r3, [r3, #0]
    a5da:	4428      	add	r0, r5
    a5dc:	f016 fd80 	bl	210e0 <bt_mesh_beacon_auth>
	if (err) {
		BT_ERR("Failed updating net beacon for 0x%03x", sub->net_idx);
	}
}
    a5e0:	b002      	add	sp, #8
    a5e2:	bd20      	pop	{r5, pc}
    a5e4:	20001728 	.word	0x20001728

0000a5e8 <bt_mesh_beacon_init>:
	.evt_handler = subnet_evt,
};

void bt_mesh_beacon_init(void)
{
	k_work_init_delayable(&beacon_timer, beacon_send);
    a5e8:	4901      	ldr	r1, [pc, #4]	; (a5f0 <bt_mesh_beacon_init+0x8>)
    a5ea:	4802      	ldr	r0, [pc, #8]	; (a5f4 <bt_mesh_beacon_init+0xc>)
    a5ec:	f01b bb50 	b.w	25c90 <k_work_init_delayable>
    a5f0:	0000a38d 	.word	0x0000a38d
    a5f4:	200016f8 	.word	0x200016f8

0000a5f8 <bt_mesh_beacon_ivu_initiator>:
	if (val) {
    a5f8:	4b0d      	ldr	r3, [pc, #52]	; (a630 <bt_mesh_beacon_ivu_initiator+0x38>)
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a5fa:	f3bf 8f5b 	dmb	ish
    a5fe:	b170      	cbz	r0, a61e <bt_mesh_beacon_ivu_initiator+0x26>
    a600:	e853 2f00 	ldrex	r2, [r3]
    a604:	f042 0208 	orr.w	r2, r2, #8
    a608:	e843 2100 	strex	r1, r2, [r3]
    a60c:	2900      	cmp	r1, #0
    a60e:	d1f7      	bne.n	a600 <bt_mesh_beacon_ivu_initiator+0x8>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a610:	f3bf 8f5b 	dmb	ish
	 * An alternative solution would be to check whether beacons are enabled
	 * here, and cancel if not. As the cancel operation may fail, we would
	 * still have to implement an early exit mechanism, so we might as well
	 * just use this every time.
	 */
	k_work_schedule(&beacon_timer, K_NO_WAIT);
    a614:	4807      	ldr	r0, [pc, #28]	; (a634 <bt_mesh_beacon_ivu_initiator+0x3c>)
    a616:	2200      	movs	r2, #0
    a618:	2300      	movs	r3, #0
    a61a:	f011 b849 	b.w	1b6b0 <k_work_schedule>
    a61e:	e853 2f00 	ldrex	r2, [r3]
    a622:	f022 0208 	bic.w	r2, r2, #8
    a626:	e843 2100 	strex	r1, r2, [r3]
    a62a:	2900      	cmp	r1, #0
    a62c:	d0f0      	beq.n	a610 <bt_mesh_beacon_ivu_initiator+0x18>
    a62e:	e7f6      	b.n	a61e <bt_mesh_beacon_ivu_initiator+0x26>
    a630:	20001730 	.word	0x20001730
    a634:	200016f8 	.word	0x200016f8

0000a638 <bt_mesh_beacon_recv>:
{
    a638:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < 1) {
    a63a:	8883      	ldrh	r3, [r0, #4]
{
    a63c:	b085      	sub	sp, #20
    a63e:	4604      	mov	r4, r0
	if (buf->len < 1) {
    a640:	b12b      	cbz	r3, a64e <bt_mesh_beacon_recv+0x16>
	type = net_buf_simple_pull_u8(buf);
    a642:	f01a fbf3 	bl	24e2c <net_buf_simple_pull_u8>
	switch (type) {
    a646:	4605      	mov	r5, r0
    a648:	b118      	cbz	r0, a652 <bt_mesh_beacon_recv+0x1a>
    a64a:	2801      	cmp	r0, #1
    a64c:	d022      	beq.n	a694 <bt_mesh_beacon_recv+0x5c>
}
    a64e:	b005      	add	sp, #20
    a650:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (buf->len != 18 && buf->len != 22) {
    a652:	88a3      	ldrh	r3, [r4, #4]
    a654:	f023 0304 	bic.w	r3, r3, #4
    a658:	b29b      	uxth	r3, r3
    a65a:	2b12      	cmp	r3, #18
    a65c:	d1f7      	bne.n	a64e <bt_mesh_beacon_recv+0x16>
	uuid = net_buf_simple_pull_mem(buf, 16);
    a65e:	2110      	movs	r1, #16
    a660:	4620      	mov	r0, r4
    a662:	f01a fbdb 	bl	24e1c <net_buf_simple_pull_mem>
    a666:	4606      	mov	r6, r0
	oob_info = net_buf_simple_pull_be16(buf);
    a668:	4620      	mov	r0, r4
    a66a:	f01a fbef 	bl	24e4c <net_buf_simple_pull_be16>
	if (buf->len == 4) {
    a66e:	88a3      	ldrh	r3, [r4, #4]
    a670:	2b04      	cmp	r3, #4
	oob_info = net_buf_simple_pull_be16(buf);
    a672:	4607      	mov	r7, r0
	if (buf->len == 4) {
    a674:	d104      	bne.n	a680 <bt_mesh_beacon_recv+0x48>
		uri_hash_val = net_buf_simple_pull_be32(buf);
    a676:	4620      	mov	r0, r4
    a678:	f01a fbfa 	bl	24e70 <net_buf_simple_pull_be32>
		uri_hash = &uri_hash_val;
    a67c:	466d      	mov	r5, sp
		uri_hash_val = net_buf_simple_pull_be32(buf);
    a67e:	9000      	str	r0, [sp, #0]
	prov = bt_mesh_prov_get();
    a680:	f004 f83a 	bl	e6f8 <bt_mesh_prov_get>
	if (prov->unprovisioned_beacon) {
    a684:	6b43      	ldr	r3, [r0, #52]	; 0x34
    a686:	2b00      	cmp	r3, #0
    a688:	d0e1      	beq.n	a64e <bt_mesh_beacon_recv+0x16>
		prov->unprovisioned_beacon(uuid,
    a68a:	462a      	mov	r2, r5
    a68c:	4639      	mov	r1, r7
    a68e:	4630      	mov	r0, r6
    a690:	4798      	blx	r3
    a692:	e7dc      	b.n	a64e <bt_mesh_beacon_recv+0x16>
	if (buf->len < 21) {
    a694:	88a3      	ldrh	r3, [r4, #4]
    a696:	2b14      	cmp	r3, #20
    a698:	d9d9      	bls.n	a64e <bt_mesh_beacon_recv+0x16>
	sub = bt_mesh_subnet_find(beacon_cache_match, buf->data);
    a69a:	6821      	ldr	r1, [r4, #0]
    a69c:	4831      	ldr	r0, [pc, #196]	; (a764 <bt_mesh_beacon_recv+0x12c>)
    a69e:	f000 fe4f 	bl	b340 <bt_mesh_subnet_find>
	if (sub) {
    a6a2:	4605      	mov	r5, r0
    a6a4:	2800      	cmp	r0, #0
    a6a6:	d151      	bne.n	a74c <bt_mesh_beacon_recv+0x114>
	params.flags = net_buf_simple_pull_u8(buf);
    a6a8:	4620      	mov	r0, r4
	data = buf->data;
    a6aa:	6826      	ldr	r6, [r4, #0]
	params.flags = net_buf_simple_pull_u8(buf);
    a6ac:	f01a fbbe 	bl	24e2c <net_buf_simple_pull_u8>
	params.net_id = net_buf_simple_pull_mem(buf, 8);
    a6b0:	2108      	movs	r1, #8
	params.flags = net_buf_simple_pull_u8(buf);
    a6b2:	f88d 000c 	strb.w	r0, [sp, #12]
	params.net_id = net_buf_simple_pull_mem(buf, 8);
    a6b6:	4620      	mov	r0, r4
    a6b8:	f01a fbb0 	bl	24e1c <net_buf_simple_pull_mem>
    a6bc:	9000      	str	r0, [sp, #0]
	params.iv_index = net_buf_simple_pull_be32(buf);
    a6be:	4620      	mov	r0, r4
    a6c0:	f01a fbd6 	bl	24e70 <net_buf_simple_pull_be32>
	params.auth = buf->data;
    a6c4:	6823      	ldr	r3, [r4, #0]
	params.iv_index = net_buf_simple_pull_be32(buf);
    a6c6:	9002      	str	r0, [sp, #8]
	sub = bt_mesh_subnet_find(subnet_by_id, &params);
    a6c8:	4669      	mov	r1, sp
    a6ca:	4827      	ldr	r0, [pc, #156]	; (a768 <bt_mesh_beacon_recv+0x130>)
	params.auth = buf->data;
    a6cc:	9301      	str	r3, [sp, #4]
	sub = bt_mesh_subnet_find(subnet_by_id, &params);
    a6ce:	f000 fe37 	bl	b340 <bt_mesh_subnet_find>
	if (!sub) {
    a6d2:	4605      	mov	r5, r0
    a6d4:	2800      	cmp	r0, #0
    a6d6:	d0ba      	beq.n	a64e <bt_mesh_beacon_recv+0x16>
	if (sub->kr_phase == BT_MESH_KR_PHASE_2 && !params.new_key) {
    a6d8:	7f83      	ldrb	r3, [r0, #30]
    a6da:	2b02      	cmp	r3, #2
    a6dc:	d103      	bne.n	a6e6 <bt_mesh_beacon_recv+0xae>
    a6de:	f89d 300d 	ldrb.w	r3, [sp, #13]
    a6e2:	2b00      	cmp	r3, #0
    a6e4:	d0b3      	beq.n	a64e <bt_mesh_beacon_recv+0x16>
	memcpy(sub->beacon_cache, data, 21);
    a6e6:	2215      	movs	r2, #21
    a6e8:	4631      	mov	r1, r6
    a6ea:	1da8      	adds	r0, r5, #6
    a6ec:	f013 fca1 	bl	1e032 <memcpy>
	bt_mesh_kr_update(sub, BT_MESH_KEY_REFRESH(params.flags),
    a6f0:	f89d 100c 	ldrb.w	r1, [sp, #12]
    a6f4:	f89d 200d 	ldrb.w	r2, [sp, #13]
    a6f8:	4628      	mov	r0, r5
    a6fa:	f001 0101 	and.w	r1, r1, #1
    a6fe:	f015 ff67 	bl	205d0 <bt_mesh_kr_update>
	if (bt_mesh_subnet_get(BT_MESH_KEY_PRIMARY) &&
    a702:	2000      	movs	r0, #0
    a704:	f000 fde4 	bl	b2d0 <bt_mesh_subnet_get>
    a708:	b108      	cbz	r0, a70e <bt_mesh_beacon_recv+0xd6>
    a70a:	8bab      	ldrh	r3, [r5, #28]
    a70c:	b9f3      	cbnz	r3, a74c <bt_mesh_beacon_recv+0x114>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    a70e:	f3bf 8f5b 	dmb	ish
    a712:	4b16      	ldr	r3, [pc, #88]	; (a76c <bt_mesh_beacon_recv+0x134>)
    a714:	681a      	ldr	r2, [r3, #0]
    a716:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_INITIATOR) &&
    a71a:	0712      	lsls	r2, r2, #28
    a71c:	d50f      	bpl.n	a73e <bt_mesh_beacon_recv+0x106>
    a71e:	f3bf 8f5b 	dmb	ish
    a722:	681a      	ldr	r2, [r3, #0]
    a724:	f3bf 8f5b 	dmb	ish
	     BT_MESH_IV_UPDATE(params.flags))) {
    a728:	f89d 300c 	ldrb.w	r3, [sp, #12]
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_INITIATOR) &&
    a72c:	f3c2 0280 	ubfx	r2, r2, #2, #1
	     BT_MESH_IV_UPDATE(params.flags))) {
    a730:	f3c3 0340 	ubfx	r3, r3, #1, #1
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_INITIATOR) &&
    a734:	429a      	cmp	r2, r3
    a736:	d102      	bne.n	a73e <bt_mesh_beacon_recv+0x106>
		bt_mesh_beacon_ivu_initiator(false);
    a738:	2000      	movs	r0, #0
    a73a:	f7ff ff5d 	bl	a5f8 <bt_mesh_beacon_ivu_initiator>
	bt_mesh_net_iv_update(params.iv_index, BT_MESH_IV_UPDATE(params.flags));
    a73e:	f89d 100c 	ldrb.w	r1, [sp, #12]
    a742:	9802      	ldr	r0, [sp, #8]
    a744:	f3c1 0140 	ubfx	r1, r1, #1, #1
    a748:	f000 f958 	bl	a9fc <bt_mesh_net_iv_update>
	if (bt_mesh_beacon_enabled() &&
    a74c:	f7ff fcf8 	bl	a140 <bt_mesh_beacon_enabled>
    a750:	2800      	cmp	r0, #0
    a752:	f43f af7c 	beq.w	a64e <bt_mesh_beacon_recv+0x16>
	    sub->beacons_cur < 0xff) {
    a756:	796b      	ldrb	r3, [r5, #5]
	if (bt_mesh_beacon_enabled() &&
    a758:	2bff      	cmp	r3, #255	; 0xff
		sub->beacons_cur++;
    a75a:	bf1c      	itt	ne
    a75c:	3301      	addne	r3, #1
    a75e:	716b      	strbne	r3, [r5, #5]
    a760:	e775      	b.n	a64e <bt_mesh_beacon_recv+0x16>
    a762:	bf00      	nop
    a764:	00020493 	.word	0x00020493
    a768:	000204a5 	.word	0x000204a5
    a76c:	20001730 	.word	0x20001730

0000a770 <bt_mesh_beacon_enable>:

	bt_mesh_beacon_update(sub);
}

void bt_mesh_beacon_enable(void)
{
    a770:	b510      	push	{r4, lr}
	if (bt_mesh_is_provisioned()) {
    a772:	f7ff fc11 	bl	9f98 <bt_mesh_is_provisioned>
    a776:	b110      	cbz	r0, a77e <bt_mesh_beacon_enable+0xe>
		bt_mesh_subnet_foreach(subnet_beacon_enable);
    a778:	4804      	ldr	r0, [pc, #16]	; (a78c <bt_mesh_beacon_enable+0x1c>)
    a77a:	f000 fe05 	bl	b388 <bt_mesh_subnet_foreach>
	}

	k_work_reschedule(&beacon_timer, K_NO_WAIT);
}
    a77e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_reschedule(&beacon_timer, K_NO_WAIT);
    a782:	4803      	ldr	r0, [pc, #12]	; (a790 <bt_mesh_beacon_enable+0x20>)
    a784:	2200      	movs	r2, #0
    a786:	2300      	movs	r3, #0
    a788:	f010 bfc6 	b.w	1b718 <k_work_reschedule>
    a78c:	00020529 	.word	0x00020529
    a790:	200016f8 	.word	0x200016f8

0000a794 <bt_mesh_beacon_disable>:
    a794:	4b05      	ldr	r3, [pc, #20]	; (a7ac <bt_mesh_beacon_disable+0x18>)
    a796:	f3bf 8f5b 	dmb	ish
    a79a:	681b      	ldr	r3, [r3, #0]
    a79c:	f3bf 8f5b 	dmb	ish

void bt_mesh_beacon_disable(void)
{
	if (!atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_INITIATOR)) {
    a7a0:	071b      	lsls	r3, r3, #28
    a7a2:	d402      	bmi.n	a7aa <bt_mesh_beacon_disable+0x16>
		/* If this fails, we'll do an early exit in the work handler. */
		(void)k_work_cancel_delayable(&beacon_timer);
    a7a4:	4802      	ldr	r0, [pc, #8]	; (a7b0 <bt_mesh_beacon_disable+0x1c>)
    a7a6:	f01b ba81 	b.w	25cac <k_work_cancel_delayable>
	}
}
    a7aa:	4770      	bx	lr
    a7ac:	20001730 	.word	0x20001730
    a7b0:	200016f8 	.word	0x200016f8

0000a7b4 <net_decrypt>:
}

static bool net_decrypt(struct bt_mesh_net_rx *rx, struct net_buf_simple *in,
			struct net_buf_simple *out,
			const struct bt_mesh_net_cred *cred)
{
    a7b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a7b8:	461e      	mov	r6, r3
	bool proxy = (rx->net_if == BT_MESH_NET_IF_PROXY_CFG);

	if (NID(in->data) != cred->nid) {
    a7ba:	680b      	ldr	r3, [r1, #0]
{
    a7bc:	4614      	mov	r4, r2
	if (NID(in->data) != cred->nid) {
    a7be:	781a      	ldrb	r2, [r3, #0]
{
    a7c0:	4605      	mov	r5, r0
	if (NID(in->data) != cred->nid) {
    a7c2:	7830      	ldrb	r0, [r6, #0]
    a7c4:	f002 037f 	and.w	r3, r2, #127	; 0x7f
    a7c8:	4298      	cmp	r0, r3
    a7ca:	d002      	beq.n	a7d2 <net_decrypt+0x1e>
		return false;
    a7cc:	2000      	movs	r0, #0

	BT_DBG("src 0x%04x", rx->ctx.addr);

	return bt_mesh_net_decrypt(cred->enc, out, BT_MESH_NET_IVI_RX(rx),
				   proxy) == 0;
}
    a7ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	rx->old_iv = (IVI(in->data) != (bt_mesh.iv_index & 0x01));
    a7d2:	f8df 80c8 	ldr.w	r8, [pc, #200]	; a89c <net_decrypt+0xe8>
	bool proxy = (rx->net_if == BT_MESH_NET_IF_PROXY_CFG);
    a7d6:	7d2f      	ldrb	r7, [r5, #20]
	rx->old_iv = (IVI(in->data) != (bt_mesh.iv_index & 0x01));
    a7d8:	f8d8 3000 	ldr.w	r3, [r8]
    a7dc:	f003 0301 	and.w	r3, r3, #1
    a7e0:	ea83 13d2 	eor.w	r3, r3, r2, lsr #7
    a7e4:	463a      	mov	r2, r7
    a7e6:	f363 0200 	bfi	r2, r3, #0, #1
	buf->len  = 0U;
    a7ea:	2300      	movs	r3, #0
    a7ec:	752a      	strb	r2, [r5, #20]
    a7ee:	80a3      	strh	r3, [r4, #4]
	buf->data = buf->__buf;
    a7f0:	68a3      	ldr	r3, [r4, #8]
    a7f2:	6023      	str	r3, [r4, #0]
	net_buf_simple_add_mem(out, in->data, in->len);
    a7f4:	888a      	ldrh	r2, [r1, #4]
    a7f6:	6809      	ldr	r1, [r1, #0]
    a7f8:	4620      	mov	r0, r4
    a7fa:	f01a fa92 	bl	24d22 <net_buf_simple_add_mem>
	if (bt_mesh_net_obfuscate(out->data, BT_MESH_NET_IVI_RX(rx),
    a7fe:	7d2b      	ldrb	r3, [r5, #20]
    a800:	f8d8 1000 	ldr.w	r1, [r8]
    a804:	6820      	ldr	r0, [r4, #0]
    a806:	f003 0301 	and.w	r3, r3, #1
    a80a:	f106 0211 	add.w	r2, r6, #17
    a80e:	1ac9      	subs	r1, r1, r3
    a810:	f002 fa7a 	bl	cd08 <bt_mesh_net_obfuscate>
    a814:	2800      	cmp	r0, #0
    a816:	d1d9      	bne.n	a7cc <net_decrypt+0x18>
	return ((uint16_t)src[0] << 8) | src[1];
    a818:	6823      	ldr	r3, [r4, #0]
    a81a:	f8b3 2005 	ldrh.w	r2, [r3, #5]
    a81e:	ba52      	rev16	r2, r2
    a820:	b290      	uxth	r0, r2
	rx->ctx.addr = SRC(out->data);
    a822:	812a      	strh	r2, [r5, #8]
	if (!BT_MESH_ADDR_IS_UNICAST(rx->ctx.addr)) {
    a824:	b212      	sxth	r2, r2
    a826:	2a00      	cmp	r2, #0
    a828:	ddd0      	ble.n	a7cc <net_decrypt+0x18>
	if (bt_mesh_has_addr(rx->ctx.addr)) {
    a82a:	f002 fc77 	bl	d11c <bt_mesh_has_addr>
    a82e:	2800      	cmp	r0, #0
    a830:	d1cc      	bne.n	a7cc <net_decrypt+0x18>
	if (rx->net_if == BT_MESH_NET_IF_ADV && msg_cache_match(out)) {
    a832:	7d2d      	ldrb	r5, [r5, #20]
    a834:	f015 0130 	ands.w	r1, r5, #48	; 0x30
    a838:	d11d      	bne.n	a876 <net_decrypt+0xc2>
		if (msg_cache[i].src == SRC(pdu->data) &&
    a83a:	6823      	ldr	r3, [r4, #0]
    a83c:	f8df b060 	ldr.w	fp, [pc, #96]	; a8a0 <net_decrypt+0xec>
    a840:	f8b3 9005 	ldrh.w	r9, [r3, #5]
    a844:	fa99 f999 	rev16.w	r9, r9
    a848:	fa1f f989 	uxth.w	r9, r9
		    msg_cache[i].seq == (SEQ(pdu->data) & BIT_MASK(17))) {
    a84c:	f103 0a02 	add.w	sl, r3, #2
		if (msg_cache[i].src == SRC(pdu->data) &&
    a850:	f83b 3021 	ldrh.w	r3, [fp, r1, lsl #2]
    a854:	f3c3 030e 	ubfx	r3, r3, #0, #15
    a858:	454b      	cmp	r3, r9
    a85a:	d109      	bne.n	a870 <net_decrypt+0xbc>
		    msg_cache[i].seq == (SEQ(pdu->data) & BIT_MASK(17))) {
    a85c:	4650      	mov	r0, sl
    a85e:	f015 fe67 	bl	20530 <sys_get_be24>
    a862:	f85b 3021 	ldr.w	r3, [fp, r1, lsl #2]
    a866:	f3c0 0010 	ubfx	r0, r0, #0, #17
		if (msg_cache[i].src == SRC(pdu->data) &&
    a86a:	ebb0 3fd3 	cmp.w	r0, r3, lsr #15
    a86e:	d0ad      	beq.n	a7cc <net_decrypt+0x18>
	for (i = 0U; i < ARRAY_SIZE(msg_cache); i++) {
    a870:	3101      	adds	r1, #1
    a872:	290a      	cmp	r1, #10
    a874:	d1ec      	bne.n	a850 <net_decrypt+0x9c>
	bool proxy = (rx->net_if == BT_MESH_NET_IF_PROXY_CFG);
    a876:	f007 0330 	and.w	r3, r7, #48	; 0x30
	return bt_mesh_net_decrypt(cred->enc, out, BT_MESH_NET_IVI_RX(rx),
    a87a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    a87e:	f8d8 2000 	ldr.w	r2, [r8]
    a882:	424b      	negs	r3, r1
    a884:	f005 0501 	and.w	r5, r5, #1
    a888:	414b      	adcs	r3, r1
    a88a:	1b52      	subs	r2, r2, r5
    a88c:	4621      	mov	r1, r4
    a88e:	1c70      	adds	r0, r6, #1
    a890:	f016 fb8e 	bl	20fb0 <bt_mesh_net_decrypt>
				   proxy) == 0;
    a894:	fab0 f080 	clz	r0, r0
    a898:	0940      	lsrs	r0, r0, #5
    a89a:	e798      	b.n	a7ce <net_decrypt+0x1a>
    a89c:	20001728 	.word	0x20001728
    a8a0:	20002434 	.word	0x20002434

0000a8a4 <bt_mesh_net_local>:
{
    a8a4:	b5f0      	push	{r4, r5, r6, r7, lr}
	return list->head;
    a8a6:	4e2d      	ldr	r6, [pc, #180]	; (a95c <bt_mesh_net_local+0xb8>)
		k_mem_slab_free(&loopback_buf_pool, (void **)&buf);
    a8a8:	4d2d      	ldr	r5, [pc, #180]	; (a960 <bt_mesh_net_local+0xbc>)
{
    a8aa:	b08b      	sub	sp, #44	; 0x2c
    a8ac:	69f4      	ldr	r4, [r6, #28]
Z_GENLIST_GET(slist, snode)
    a8ae:	2c00      	cmp	r4, #0
    a8b0:	d052      	beq.n	a958 <bt_mesh_net_local+0xb4>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    a8b2:	6a32      	ldr	r2, [r6, #32]
	return node->next;
    a8b4:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    a8b6:	61f3      	str	r3, [r6, #28]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    a8b8:	4294      	cmp	r4, r2
		struct bt_mesh_net_rx rx = {
    a8ba:	f04f 0100 	mov.w	r1, #0
    a8be:	f04f 0210 	mov.w	r2, #16
    a8c2:	a806      	add	r0, sp, #24
	list->tail = node;
    a8c4:	bf08      	it	eq
    a8c6:	6233      	streq	r3, [r6, #32]
		struct loopback_buf *buf = CONTAINER_OF(node, struct loopback_buf, node);
    a8c8:	9400      	str	r4, [sp, #0]
		struct bt_mesh_net_rx rx = {
    a8ca:	f013 fbbd 	bl	1e048 <memset>
			.sub = buf->sub,
    a8ce:	6867      	ldr	r7, [r4, #4]
		struct bt_mesh_net_rx rx = {
    a8d0:	9704      	str	r7, [sp, #16]
    a8d2:	8bbb      	ldrh	r3, [r7, #28]
    a8d4:	f8ad 3014 	strh.w	r3, [sp, #20]
    a8d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    a8dc:	f8ad 3016 	strh.w	r3, [sp, #22]
    a8e0:	89e3      	ldrh	r3, [r4, #14]
    a8e2:	ba5b      	rev16	r3, r3
    a8e4:	f8ad 3018 	strh.w	r3, [sp, #24]
    a8e8:	8a23      	ldrh	r3, [r4, #16]
    a8ea:	ba5b      	rev16	r3, r3
    a8ec:	f8ad 301a 	strh.w	r3, [sp, #26]
				.recv_ttl = TTL(buf->data),
    a8f0:	7aa1      	ldrb	r1, [r4, #10]
    a8f2:	f001 037f 	and.w	r3, r1, #127	; 0x7f
		struct bt_mesh_net_rx rx = {
    a8f6:	f88d 301d 	strb.w	r3, [sp, #29]
			.seq = SEQ(buf->data),
    a8fa:	f104 000b 	add.w	r0, r4, #11
		struct bt_mesh_net_rx rx = {
    a8fe:	2301      	movs	r3, #1
    a900:	f88d 301f 	strb.w	r3, [sp, #31]
			.seq = SEQ(buf->data),
    a904:	f015 fe14 	bl	20530 <sys_get_be24>
			.old_iv = (IVI(buf->data) != (bt_mesh.iv_index & 0x01)),
    a908:	6833      	ldr	r3, [r6, #0]
		struct bt_mesh_net_rx rx = {
    a90a:	9008      	str	r0, [sp, #32]
			.old_iv = (IVI(buf->data) != (bt_mesh.iv_index & 0x01)),
    a90c:	7a62      	ldrb	r2, [r4, #9]
    a90e:	f003 0301 	and.w	r3, r3, #1
		struct bt_mesh_net_rx rx = {
    a912:	ea83 13d2 	eor.w	r3, r3, r2, lsr #7
			.new_key = SUBNET_KEY_TX_IDX(buf->sub),
    a916:	7fba      	ldrb	r2, [r7, #30]
    a918:	1e90      	subs	r0, r2, #2
    a91a:	4242      	negs	r2, r0
    a91c:	4142      	adcs	r2, r0
		struct bt_mesh_net_rx rx = {
    a91e:	f043 0350 	orr.w	r3, r3, #80	; 0x50
    a922:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
    a926:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
			.ctl = CTL(buf->data),
    a92a:	09c9      	lsrs	r1, r1, #7
		struct bt_mesh_net_rx rx = {
    a92c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
    a930:	f022 027b 	bic.w	r2, r2, #123	; 0x7b
    a934:	4313      	orrs	r3, r2
    a936:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		net_buf_simple_init_with_data(&sbuf, buf->data, buf->len);
    a93a:	7a22      	ldrb	r2, [r4, #8]
    a93c:	f104 0109 	add.w	r1, r4, #9
    a940:	a801      	add	r0, sp, #4
    a942:	f01a f97c 	bl	24c3e <net_buf_simple_init_with_data>
		(void)bt_mesh_trans_recv(&sbuf, &rx);
    a946:	a904      	add	r1, sp, #16
    a948:	a801      	add	r0, sp, #4
    a94a:	f001 fc55 	bl	c1f8 <bt_mesh_trans_recv>
		k_mem_slab_free(&loopback_buf_pool, (void **)&buf);
    a94e:	4669      	mov	r1, sp
    a950:	4628      	mov	r0, r5
    a952:	f01a ffb0 	bl	258b6 <k_mem_slab_free>
    a956:	e7a9      	b.n	a8ac <bt_mesh_net_local+0x8>
}
    a958:	b00b      	add	sp, #44	; 0x2c
    a95a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a95c:	20001728 	.word	0x20001728
    a960:	20000e98 	.word	0x20000e98

0000a964 <atomic_get.constprop.0>:
    a964:	4b03      	ldr	r3, [pc, #12]	; (a974 <atomic_get.constprop.0+0x10>)
    a966:	f3bf 8f5b 	dmb	ish
    a96a:	6898      	ldr	r0, [r3, #8]
    a96c:	f3bf 8f5b 	dmb	ish
}
    a970:	4770      	bx	lr
    a972:	bf00      	nop
    a974:	20001728 	.word	0x20001728

0000a978 <atomic_set_bit_to.constprop.0>:
    a978:	4b0b      	ldr	r3, [pc, #44]	; (a9a8 <atomic_set_bit_to.constprop.0+0x30>)
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a97a:	f3bf 8f5b 	dmb	ish
    a97e:	b150      	cbz	r0, a996 <atomic_set_bit_to.constprop.0+0x1e>
    a980:	e853 2f00 	ldrex	r2, [r3]
    a984:	f042 0204 	orr.w	r2, r2, #4
    a988:	e843 2100 	strex	r1, r2, [r3]
    a98c:	2900      	cmp	r1, #0
    a98e:	d1f7      	bne.n	a980 <atomic_set_bit_to.constprop.0+0x8>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a990:	f3bf 8f5b 	dmb	ish
	}
}
    a994:	4770      	bx	lr
    a996:	e853 2f00 	ldrex	r2, [r3]
    a99a:	f022 0204 	bic.w	r2, r2, #4
    a99e:	e843 2100 	strex	r1, r2, [r3]
    a9a2:	2900      	cmp	r1, #0
    a9a4:	d0f4      	beq.n	a990 <atomic_set_bit_to.constprop.0+0x18>
    a9a6:	e7f6      	b.n	a996 <atomic_set_bit_to.constprop.0+0x1e>
    a9a8:	20001730 	.word	0x20001730

0000a9ac <bt_mesh_net_create>:
{
    a9ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a9ae:	460d      	mov	r5, r1
    a9b0:	461e      	mov	r6, r3
	if (BT_MESH_KEY_REFRESH(flags)) {
    a9b2:	f015 0301 	ands.w	r3, r5, #1
{
    a9b6:	4611      	mov	r1, r2
		err = bt_mesh_subnet_set(idx, BT_MESH_KR_PHASE_2, NULL, key);
    a9b8:	bf1d      	ittte	ne
    a9ba:	4613      	movne	r3, r2
    a9bc:	2102      	movne	r1, #2
    a9be:	2200      	movne	r2, #0
		err = bt_mesh_subnet_set(idx, BT_MESH_KR_NORMAL, key, NULL);
    a9c0:	4619      	moveq	r1, r3
    a9c2:	f015 fed0 	bl	20766 <bt_mesh_subnet_set>
    a9c6:	4604      	mov	r4, r0
	if (err) {
    a9c8:	b980      	cbnz	r0, a9ec <bt_mesh_net_create+0x40>
	(void)memset(msg_cache, 0, sizeof(msg_cache));
    a9ca:	4601      	mov	r1, r0
    a9cc:	2228      	movs	r2, #40	; 0x28
    a9ce:	4808      	ldr	r0, [pc, #32]	; (a9f0 <bt_mesh_net_create+0x44>)
	bt_mesh.iv_index = iv_index;
    a9d0:	4f08      	ldr	r7, [pc, #32]	; (a9f4 <bt_mesh_net_create+0x48>)
	(void)memset(msg_cache, 0, sizeof(msg_cache));
    a9d2:	f013 fb39 	bl	1e048 <memset>
	msg_cache_next = 0U;
    a9d6:	4b08      	ldr	r3, [pc, #32]	; (a9f8 <bt_mesh_net_create+0x4c>)
	bt_mesh.iv_index = iv_index;
    a9d8:	603e      	str	r6, [r7, #0]
	atomic_set_bit_to(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS,
    a9da:	f3c5 0040 	ubfx	r0, r5, #1, #1
	msg_cache_next = 0U;
    a9de:	801c      	strh	r4, [r3, #0]
	atomic_set_bit_to(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS,
    a9e0:	f7ff ffca 	bl	a978 <atomic_set_bit_to.constprop.0>
	if (BT_MESH_IV_UPDATE(flags)) {
    a9e4:	b110      	cbz	r0, a9ec <bt_mesh_net_create+0x40>
		bt_mesh.ivu_duration = BT_MESH_IVU_MIN_HOURS;
    a9e6:	2360      	movs	r3, #96	; 0x60
    a9e8:	f887 31f8 	strb.w	r3, [r7, #504]	; 0x1f8
}
    a9ec:	4620      	mov	r0, r4
    a9ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a9f0:	20002434 	.word	0x20002434
    a9f4:	20001728 	.word	0x20001728
    a9f8:	20003f68 	.word	0x20003f68

0000a9fc <bt_mesh_net_iv_update>:
{
    a9fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a9fe:	4606      	mov	r6, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    aa00:	f7ff ffb0 	bl	a964 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS)) {
    aa04:	f010 0f04 	tst.w	r0, #4
    aa08:	4c2d      	ldr	r4, [pc, #180]	; (aac0 <bt_mesh_net_iv_update+0xc4>)
{
    aa0a:	460d      	mov	r5, r1
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    aa0c:	f3c0 0380 	ubfx	r3, r0, #2, #1
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS)) {
    aa10:	d006      	beq.n	aa20 <bt_mesh_net_iv_update+0x24>
		if (iv_index != bt_mesh.iv_index) {
    aa12:	6823      	ldr	r3, [r4, #0]
    aa14:	42b3      	cmp	r3, r6
    aa16:	d100      	bne.n	aa1a <bt_mesh_net_iv_update+0x1e>
		if (iv_update) {
    aa18:	b399      	cbz	r1, aa82 <bt_mesh_net_iv_update+0x86>
			return false;
    aa1a:	2300      	movs	r3, #0
}
    aa1c:	4618      	mov	r0, r3
    aa1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (iv_index == bt_mesh.iv_index) {
    aa20:	6822      	ldr	r2, [r4, #0]
		if (iv_index < bt_mesh.iv_index ||
    aa22:	42b2      	cmp	r2, r6
    aa24:	d2fa      	bcs.n	aa1c <bt_mesh_net_iv_update+0x20>
		    iv_index > bt_mesh.iv_index + 42) {
    aa26:	f102 012a 	add.w	r1, r2, #42	; 0x2a
		if (iv_index < bt_mesh.iv_index ||
    aa2a:	42b1      	cmp	r1, r6
    aa2c:	d3f6      	bcc.n	aa1c <bt_mesh_net_iv_update+0x20>
		if ((iv_index > bt_mesh.iv_index + 1) ||
    aa2e:	3201      	adds	r2, #1
    aa30:	42b2      	cmp	r2, r6
    aa32:	d301      	bcc.n	aa38 <bt_mesh_net_iv_update+0x3c>
    aa34:	d125      	bne.n	aa82 <bt_mesh_net_iv_update+0x86>
		    (iv_index == bt_mesh.iv_index + 1 && !iv_update)) {
    aa36:	bb25      	cbnz	r5, aa82 <bt_mesh_net_iv_update+0x86>
			if (ivi_was_recovered) {
    aa38:	4a22      	ldr	r2, [pc, #136]	; (aac4 <bt_mesh_net_iv_update+0xc8>)
    aa3a:	7817      	ldrb	r7, [r2, #0]
    aa3c:	2f00      	cmp	r7, #0
    aa3e:	d1ed      	bne.n	aa1c <bt_mesh_net_iv_update+0x20>
			ivi_was_recovered = true;
    aa40:	2301      	movs	r3, #1
    aa42:	7013      	strb	r3, [r2, #0]
			bt_mesh_rpl_clear();
    aa44:	f001 fe94 	bl	c770 <bt_mesh_rpl_clear>
			bt_mesh.seq = 0U;
    aa48:	e9c4 6700 	strd	r6, r7, [r4]
	atomic_set_bit_to(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS, iv_update);
    aa4c:	4628      	mov	r0, r5
    aa4e:	f7ff ff93 	bl	a978 <atomic_set_bit_to.constprop.0>
	bt_mesh.ivu_duration = 0U;
    aa52:	2500      	movs	r5, #0
	k_work_reschedule(&bt_mesh.ivu_timer, BT_MESH_IVU_TIMEOUT);
    aa54:	4a1c      	ldr	r2, [pc, #112]	; (aac8 <bt_mesh_net_iv_update+0xcc>)
    aa56:	481d      	ldr	r0, [pc, #116]	; (aacc <bt_mesh_net_iv_update+0xd0>)
	bt_mesh.ivu_duration = 0U;
    aa58:	f884 51f8 	strb.w	r5, [r4, #504]	; 0x1f8
	k_work_reschedule(&bt_mesh.ivu_timer, BT_MESH_IVU_TIMEOUT);
    aa5c:	2300      	movs	r3, #0
    aa5e:	f010 fe5b 	bl	1b718 <k_work_reschedule>
		bt_mesh_friend_sec_update(BT_MESH_KEY_ANY);
    aa62:	f64f 70ff 	movw	r0, #65535	; 0xffff
    aa66:	f003 faa1 	bl	dfac <bt_mesh_friend_sec_update>
	bt_mesh_subnet_foreach(bt_mesh_beacon_update);
    aa6a:	4819      	ldr	r0, [pc, #100]	; (aad0 <bt_mesh_net_iv_update+0xd4>)
    aa6c:	f000 fc8c 	bl	b388 <bt_mesh_subnet_foreach>
	    bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED) {
    aa70:	f7ff fb8e 	bl	a190 <bt_mesh_gatt_proxy_get>
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    aa74:	2801      	cmp	r0, #1
    aa76:	d102      	bne.n	aa7e <bt_mesh_net_iv_update+0x82>
		bt_mesh_proxy_beacon_send(NULL);
    aa78:	4628      	mov	r0, r5
    aa7a:	f004 fd69 	bl	f550 <bt_mesh_proxy_beacon_send>
	return true;
    aa7e:	2301      	movs	r3, #1
    aa80:	e7cc      	b.n	aa1c <bt_mesh_net_iv_update+0x20>
		if (bt_mesh.ivu_duration < BT_MESH_IVU_MIN_HOURS) {
    aa82:	f894 31f8 	ldrb.w	r3, [r4, #504]	; 0x1f8
    aa86:	2b5f      	cmp	r3, #95	; 0x5f
    aa88:	d9c7      	bls.n	aa1a <bt_mesh_net_iv_update+0x1e>
	if (!iv_update && bt_mesh_tx_in_progress()) {
    aa8a:	b985      	cbnz	r5, aaae <bt_mesh_net_iv_update+0xb2>
    aa8c:	f001 f9d6 	bl	be3c <bt_mesh_tx_in_progress>
    aa90:	b1a0      	cbz	r0, aabc <bt_mesh_net_iv_update+0xc0>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    aa92:	f3bf 8f5b 	dmb	ish
    aa96:	4b0f      	ldr	r3, [pc, #60]	; (aad4 <bt_mesh_net_iv_update+0xd8>)
    aa98:	e853 2f00 	ldrex	r2, [r3]
    aa9c:	f042 0220 	orr.w	r2, r2, #32
    aaa0:	e843 2100 	strex	r1, r2, [r3]
    aaa4:	2900      	cmp	r1, #0
    aaa6:	d1f7      	bne.n	aa98 <bt_mesh_net_iv_update+0x9c>
    aaa8:	f3bf 8f5b 	dmb	ish
    aaac:	e7b5      	b.n	aa1a <bt_mesh_net_iv_update+0x1e>
		bt_mesh.iv_index = iv_index;
    aaae:	6026      	str	r6, [r4, #0]
		bt_mesh_rpl_reset();
    aab0:	f001 fe66 	bl	c780 <bt_mesh_rpl_reset>
		ivi_was_recovered = false;
    aab4:	4b03      	ldr	r3, [pc, #12]	; (aac4 <bt_mesh_net_iv_update+0xc8>)
    aab6:	2200      	movs	r2, #0
    aab8:	701a      	strb	r2, [r3, #0]
    aaba:	e7c7      	b.n	aa4c <bt_mesh_net_iv_update+0x50>
		bt_mesh.seq = 0U;
    aabc:	6065      	str	r5, [r4, #4]
    aabe:	e7c5      	b.n	aa4c <bt_mesh_net_iv_update+0x50>
    aac0:	20001728 	.word	0x20001728
    aac4:	200040b6 	.word	0x200040b6
    aac8:	a8c00000 	.word	0xa8c00000
    aacc:	20001928 	.word	0x20001928
    aad0:	0000a5b1 	.word	0x0000a5b1
    aad4:	20001730 	.word	0x20001730

0000aad8 <ivu_refresh>:
		bt_mesh_net_relay(&buf, &rx);
	}
}

static void ivu_refresh(struct k_work *work)
{
    aad8:	b510      	push	{r4, lr}
	if (!bt_mesh_is_provisioned()) {
    aada:	f7ff fa5d 	bl	9f98 <bt_mesh_is_provisioned>
    aade:	b300      	cbz	r0, ab22 <ivu_refresh+0x4a>
		return;
	}

	bt_mesh.ivu_duration = MIN(UINT8_MAX,
    aae0:	4c10      	ldr	r4, [pc, #64]	; (ab24 <ivu_refresh+0x4c>)
    aae2:	f894 31f8 	ldrb.w	r3, [r4, #504]	; 0x1f8
    aae6:	2be7      	cmp	r3, #231	; 0xe7
    aae8:	bf28      	it	cs
    aaea:	23e7      	movcs	r3, #231	; 0xe7
    aaec:	3318      	adds	r3, #24
    aaee:	b2db      	uxtb	r3, r3
	BT_DBG("%s for %u hour%s",
	       atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS) ?
	       "IVU in Progress" : "IVU Normal mode",
	       bt_mesh.ivu_duration, bt_mesh.ivu_duration == 1U ? "" : "s");

	if (bt_mesh.ivu_duration < BT_MESH_IVU_MIN_HOURS) {
    aaf0:	2b5f      	cmp	r3, #95	; 0x5f
	bt_mesh.ivu_duration = MIN(UINT8_MAX,
    aaf2:	f884 31f8 	strb.w	r3, [r4, #504]	; 0x1f8
	if (bt_mesh.ivu_duration < BT_MESH_IVU_MIN_HOURS) {
    aaf6:	d807      	bhi.n	ab08 <ivu_refresh+0x30>
		if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
			store_iv(true);
		}

		k_work_reschedule(&bt_mesh.ivu_timer, BT_MESH_IVU_TIMEOUT);
    aaf8:	f504 7000 	add.w	r0, r4, #512	; 0x200
    aafc:	4a0a      	ldr	r2, [pc, #40]	; (ab28 <ivu_refresh+0x50>)
		bt_mesh_beacon_ivu_initiator(true);
		bt_mesh_net_iv_update(bt_mesh.iv_index, false);
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		store_iv(true);
	}
}
    aafe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_work_reschedule(&bt_mesh.ivu_timer, BT_MESH_IVU_TIMEOUT);
    ab02:	2300      	movs	r3, #0
    ab04:	f010 be08 	b.w	1b718 <k_work_reschedule>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    ab08:	f7ff ff2c 	bl	a964 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS)) {
    ab0c:	0743      	lsls	r3, r0, #29
    ab0e:	d508      	bpl.n	ab22 <ivu_refresh+0x4a>
		bt_mesh_beacon_ivu_initiator(true);
    ab10:	2001      	movs	r0, #1
    ab12:	f7ff fd71 	bl	a5f8 <bt_mesh_beacon_ivu_initiator>
		bt_mesh_net_iv_update(bt_mesh.iv_index, false);
    ab16:	6820      	ldr	r0, [r4, #0]
    ab18:	2100      	movs	r1, #0
}
    ab1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_mesh_net_iv_update(bt_mesh.iv_index, false);
    ab1e:	f7ff bf6d 	b.w	a9fc <bt_mesh_net_iv_update>
}
    ab22:	bd10      	pop	{r4, pc}
    ab24:	20001728 	.word	0x20001728
    ab28:	a8c00000 	.word	0xa8c00000

0000ab2c <bt_mesh_next_seq>:
{
    ab2c:	b538      	push	{r3, r4, r5, lr}
	uint32_t seq = bt_mesh.seq++;
    ab2e:	4c0e      	ldr	r4, [pc, #56]	; (ab68 <bt_mesh_next_seq+0x3c>)
    ab30:	6865      	ldr	r5, [r4, #4]
    ab32:	1c6b      	adds	r3, r5, #1
    ab34:	6063      	str	r3, [r4, #4]
    ab36:	f7ff ff15 	bl	a964 <atomic_get.constprop.0>
    ab3a:	4603      	mov	r3, r0
	if (!atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS) &&
    ab3c:	075b      	lsls	r3, r3, #29
    ab3e:	f3c0 0080 	ubfx	r0, r0, #2, #1
    ab42:	d40e      	bmi.n	ab62 <bt_mesh_next_seq+0x36>
    ab44:	6863      	ldr	r3, [r4, #4]
    ab46:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    ab4a:	d90a      	bls.n	ab62 <bt_mesh_next_seq+0x36>
	    bt_mesh_subnet_get(BT_MESH_KEY_PRIMARY)) {
    ab4c:	f000 fbc0 	bl	b2d0 <bt_mesh_subnet_get>
	    bt_mesh.seq > IV_UPDATE_SEQ_LIMIT &&
    ab50:	b138      	cbz	r0, ab62 <bt_mesh_next_seq+0x36>
		bt_mesh_beacon_ivu_initiator(true);
    ab52:	2001      	movs	r0, #1
    ab54:	f7ff fd50 	bl	a5f8 <bt_mesh_beacon_ivu_initiator>
		bt_mesh_net_iv_update(bt_mesh.iv_index + 1, true);
    ab58:	6820      	ldr	r0, [r4, #0]
    ab5a:	2101      	movs	r1, #1
    ab5c:	4408      	add	r0, r1
    ab5e:	f7ff ff4d 	bl	a9fc <bt_mesh_net_iv_update>
}
    ab62:	4628      	mov	r0, r5
    ab64:	bd38      	pop	{r3, r4, r5, pc}
    ab66:	bf00      	nop
    ab68:	20001728 	.word	0x20001728

0000ab6c <net_header_encode>:
{
    ab6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const bool ctl = (tx->ctx->app_idx == BT_MESH_KEY_UNUSED);
    ab6e:	6843      	ldr	r3, [r0, #4]
    ab70:	885f      	ldrh	r7, [r3, #2]
	if (ctl && net_buf_simple_tailroom(buf) < 8) {
    ab72:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ab76:	429f      	cmp	r7, r3
{
    ab78:	4605      	mov	r5, r0
    ab7a:	460e      	mov	r6, r1
    ab7c:	4614      	mov	r4, r2
	if (ctl && net_buf_simple_tailroom(buf) < 8) {
    ab7e:	d007      	beq.n	ab90 <net_header_encode+0x24>
	} else if (net_buf_simple_tailroom(buf) < 4) {
    ab80:	4620      	mov	r0, r4
    ab82:	f01a f982 	bl	24e8a <net_buf_simple_tailroom>
    ab86:	2803      	cmp	r0, #3
    ab88:	d808      	bhi.n	ab9c <net_header_encode+0x30>
		return -EINVAL;
    ab8a:	f06f 0015 	mvn.w	r0, #21
}
    ab8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (ctl && net_buf_simple_tailroom(buf) < 8) {
    ab90:	4610      	mov	r0, r2
    ab92:	f01a f97a 	bl	24e8a <net_buf_simple_tailroom>
    ab96:	2807      	cmp	r0, #7
    ab98:	d8f2      	bhi.n	ab80 <net_header_encode+0x14>
    ab9a:	e7f6      	b.n	ab8a <net_header_encode+0x1e>
	net_buf_simple_push_be16(buf, tx->ctx->addr);
    ab9c:	686b      	ldr	r3, [r5, #4]
    ab9e:	4620      	mov	r0, r4
    aba0:	8899      	ldrh	r1, [r3, #4]
    aba2:	f01a f90e 	bl	24dc2 <net_buf_simple_push_be16>
	net_buf_simple_push_be16(buf, tx->src);
    aba6:	8929      	ldrh	r1, [r5, #8]
    aba8:	4620      	mov	r0, r4
    abaa:	f01a f90a 	bl	24dc2 <net_buf_simple_push_be16>
	net_buf_simple_push_be24(buf, bt_mesh_next_seq());
    abae:	f7ff ffbd 	bl	ab2c <bt_mesh_next_seq>
    abb2:	4601      	mov	r1, r0
    abb4:	4620      	mov	r0, r4
    abb6:	f01a f919 	bl	24dec <net_buf_simple_push_be24>
	if (ctl) {
    abba:	f64f 73ff 	movw	r3, #65535	; 0xffff
    abbe:	429f      	cmp	r7, r3
    abc0:	686b      	ldr	r3, [r5, #4]
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl | 0x80);
    abc2:	7ad9      	ldrb	r1, [r3, #11]
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl);
    abc4:	4620      	mov	r0, r4
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl | 0x80);
    abc6:	bf08      	it	eq
    abc8:	f041 0180 	orreq.w	r1, r1, #128	; 0x80
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl);
    abcc:	f01a f905 	bl	24dda <net_buf_simple_push_u8>
	net_buf_simple_push_u8(buf, (nid | (BT_MESH_NET_IVI_TX & 1) << 7));
    abd0:	4b07      	ldr	r3, [pc, #28]	; (abf0 <net_header_encode+0x84>)
    abd2:	7819      	ldrb	r1, [r3, #0]
    abd4:	f7ff fec6 	bl	a964 <atomic_get.constprop.0>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    abd8:	f3c0 0080 	ubfx	r0, r0, #2, #1
    abdc:	1a09      	subs	r1, r1, r0
    abde:	ea46 11c1 	orr.w	r1, r6, r1, lsl #7
    abe2:	4620      	mov	r0, r4
    abe4:	b2c9      	uxtb	r1, r1
    abe6:	f01a f8f8 	bl	24dda <net_buf_simple_push_u8>
	return 0;
    abea:	2000      	movs	r0, #0
    abec:	e7cf      	b.n	ab8e <net_header_encode+0x22>
    abee:	bf00      	nop
    abf0:	20001728 	.word	0x20001728

0000abf4 <bt_mesh_net_encode>:
{
    abf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	tx->friend_cred = 0U;
    abf8:	7ac3      	ldrb	r3, [r0, #11]
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
    abfa:	6807      	ldr	r7, [r0, #0]
	tx->friend_cred = 0U;
    abfc:	f36f 0300 	bfc	r3, #0, #1
    ac00:	72c3      	strb	r3, [r0, #11]
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
    ac02:	7fbc      	ldrb	r4, [r7, #30]
    ac04:	1ea3      	subs	r3, r4, #2
    ac06:	425c      	negs	r4, r3
    ac08:	415c      	adcs	r4, r3
{
    ac0a:	460d      	mov	r5, r1
	err = net_header_encode(tx, cred->nid, buf);
    ac0c:	215a      	movs	r1, #90	; 0x5a
    ac0e:	434c      	muls	r4, r1
    ac10:	193b      	adds	r3, r7, r4
{
    ac12:	4616      	mov	r6, r2
	err = net_header_encode(tx, cred->nid, buf);
    ac14:	f893 103d 	ldrb.w	r1, [r3, #61]	; 0x3d
    ac18:	462a      	mov	r2, r5
    ac1a:	f7ff ffa7 	bl	ab6c <net_header_encode>
	if (err) {
    ac1e:	b970      	cbnz	r0, ac3e <bt_mesh_net_encode+0x4a>
	return net_encrypt(buf, cred, BT_MESH_NET_IVI_TX, proxy);
    ac20:	4b08      	ldr	r3, [pc, #32]	; (ac44 <bt_mesh_net_encode+0x50>)
    ac22:	681a      	ldr	r2, [r3, #0]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    ac24:	f7ff fe9e 	bl	a964 <atomic_get.constprop.0>
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
    ac28:	343d      	adds	r4, #61	; 0x3d
	return net_encrypt(buf, cred, BT_MESH_NET_IVI_TX, proxy);
    ac2a:	f3c0 0080 	ubfx	r0, r0, #2, #1
    ac2e:	4633      	mov	r3, r6
    ac30:	1a12      	subs	r2, r2, r0
    ac32:	1939      	adds	r1, r7, r4
    ac34:	4628      	mov	r0, r5
}
    ac36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return net_encrypt(buf, cred, BT_MESH_NET_IVI_TX, proxy);
    ac3a:	f015 bc81 	b.w	20540 <net_encrypt>
}
    ac3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ac42:	bf00      	nop
    ac44:	20001728 	.word	0x20001728

0000ac48 <bt_mesh_net_send>:
{
    ac48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ac4c:	461f      	mov	r7, r3
	tx->friend_cred = 0U;
    ac4e:	7ac3      	ldrb	r3, [r0, #11]
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
    ac50:	f8d0 8000 	ldr.w	r8, [r0]
	tx->friend_cred = 0U;
    ac54:	f36f 0300 	bfc	r3, #0, #1
    ac58:	72c3      	strb	r3, [r0, #11]
{
    ac5a:	460d      	mov	r5, r1
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
    ac5c:	f898 101e 	ldrb.w	r1, [r8, #30]
{
    ac60:	4616      	mov	r6, r2
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
    ac62:	1e8a      	subs	r2, r1, #2
{
    ac64:	b085      	sub	sp, #20
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
    ac66:	4253      	negs	r3, r2
    ac68:	4153      	adcs	r3, r2
    ac6a:	9300      	str	r3, [sp, #0]
	err = net_header_encode(tx, cred->nid, &buf->b);
    ac6c:	9a00      	ldr	r2, [sp, #0]
    ac6e:	235a      	movs	r3, #90	; 0x5a
    ac70:	fb03 8302 	mla	r3, r3, r2, r8
    ac74:	f105 0908 	add.w	r9, r5, #8
    ac78:	f893 103d 	ldrb.w	r1, [r3, #61]	; 0x3d
    ac7c:	464a      	mov	r2, r9
{
    ac7e:	4604      	mov	r4, r0
	err = net_header_encode(tx, cred->nid, &buf->b);
    ac80:	f7ff ff74 	bl	ab6c <net_header_encode>
	if (err) {
    ac84:	2800      	cmp	r0, #0
    ac86:	f040 8081 	bne.w	ad8c <bt_mesh_net_send+0x144>
	if (bt_mesh_fixed_group_match(tx->ctx->addr) ||
    ac8a:	6863      	ldr	r3, [r4, #4]
    ac8c:	8898      	ldrh	r0, [r3, #4]
    ac8e:	f015 fb70 	bl	20372 <bt_mesh_fixed_group_match>
    ac92:	b170      	cbz	r0, acb2 <bt_mesh_net_send+0x6a>
		err = loopback(tx, buf->data, buf->len);
    ac94:	68ab      	ldr	r3, [r5, #8]
    ac96:	9301      	str	r3, [sp, #4]
	err = k_mem_slab_alloc(&loopback_buf_pool, (void **)&buf, K_NO_WAIT);
    ac98:	483d      	ldr	r0, [pc, #244]	; (ad90 <bt_mesh_net_send+0x148>)
		err = loopback(tx, buf->data, buf->len);
    ac9a:	f8b5 a00c 	ldrh.w	sl, [r5, #12]
	err = k_mem_slab_alloc(&loopback_buf_pool, (void **)&buf, K_NO_WAIT);
    ac9e:	2200      	movs	r2, #0
    aca0:	2300      	movs	r3, #0
    aca2:	a903      	add	r1, sp, #12
    aca4:	f010 f93e 	bl	1af24 <k_mem_slab_alloc>
	if (err) {
    aca8:	4683      	mov	fp, r0
    acaa:	b178      	cbz	r0, accc <bt_mesh_net_send+0x84>
		return -ENOMEM;
    acac:	f06f 0b0b 	mvn.w	fp, #11
    acb0:	e021      	b.n	acf6 <bt_mesh_net_send+0xae>
	    bt_mesh_has_addr(tx->ctx->addr)) {
    acb2:	6863      	ldr	r3, [r4, #4]
    acb4:	8898      	ldrh	r0, [r3, #4]
    acb6:	f002 fa31 	bl	d11c <bt_mesh_has_addr>
	if (bt_mesh_fixed_group_match(tx->ctx->addr) ||
    acba:	2800      	cmp	r0, #0
    acbc:	d1ea      	bne.n	ac94 <bt_mesh_net_send+0x4c>
	if (tx->ctx->send_ttl == 1U) {
    acbe:	6863      	ldr	r3, [r4, #4]
    acc0:	7adb      	ldrb	r3, [r3, #11]
    acc2:	2b01      	cmp	r3, #1
    acc4:	d11f      	bne.n	ad06 <bt_mesh_net_send+0xbe>
		err = -EINVAL;
    acc6:	f06f 0b15 	mvn.w	fp, #21
    acca:	e04b      	b.n	ad64 <bt_mesh_net_send+0x11c>
	buf->sub = tx->sub;
    accc:	9803      	ldr	r0, [sp, #12]
    acce:	6822      	ldr	r2, [r4, #0]
    acd0:	6042      	str	r2, [r0, #4]
	(void)memcpy(buf->data, data, len);
    acd2:	9901      	ldr	r1, [sp, #4]
    acd4:	4652      	mov	r2, sl
    acd6:	3009      	adds	r0, #9
    acd8:	f013 f9ab 	bl	1e032 <memcpy>
	buf->len = len;
    acdc:	9a03      	ldr	r2, [sp, #12]
	return list->tail;
    acde:	492d      	ldr	r1, [pc, #180]	; (ad94 <bt_mesh_net_send+0x14c>)
    ace0:	f882 a008 	strb.w	sl, [r2, #8]
    ace4:	6a08      	ldr	r0, [r1, #32]
	parent->next = child;
    ace6:	f8c2 b000 	str.w	fp, [r2]
Z_GENLIST_APPEND(slist, snode)
    acea:	bb90      	cbnz	r0, ad52 <bt_mesh_net_send+0x10a>
	list->head = node;
    acec:	e9c1 2207 	strd	r2, r2, [r1, #28]
	k_work_submit(&bt_mesh.local_work);
    acf0:	4829      	ldr	r0, [pc, #164]	; (ad98 <bt_mesh_net_send+0x150>)
    acf2:	f010 fc75 	bl	1b5e0 <k_work_submit>
		if (BT_MESH_ADDR_IS_UNICAST(tx->ctx->addr) ||
    acf6:	6862      	ldr	r2, [r4, #4]
    acf8:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
    acfc:	2900      	cmp	r1, #0
    acfe:	dc2b      	bgt.n	ad58 <bt_mesh_net_send+0x110>
    ad00:	7ad2      	ldrb	r2, [r2, #11]
    ad02:	2a01      	cmp	r2, #1
    ad04:	d028      	beq.n	ad58 <bt_mesh_net_send+0x110>
	err = net_encrypt(&buf->b, cred, BT_MESH_NET_IVI_TX, false);
    ad06:	4b23      	ldr	r3, [pc, #140]	; (ad94 <bt_mesh_net_send+0x14c>)
    ad08:	681a      	ldr	r2, [r3, #0]
    ad0a:	f7ff fe2b 	bl	a964 <atomic_get.constprop.0>
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
    ad0e:	9b00      	ldr	r3, [sp, #0]
    ad10:	215a      	movs	r1, #90	; 0x5a
	err = net_encrypt(&buf->b, cred, BT_MESH_NET_IVI_TX, false);
    ad12:	f3c0 0080 	ubfx	r0, r0, #2, #1
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
    ad16:	fb01 8103 	mla	r1, r1, r3, r8
	err = net_encrypt(&buf->b, cred, BT_MESH_NET_IVI_TX, false);
    ad1a:	1a12      	subs	r2, r2, r0
    ad1c:	2300      	movs	r3, #0
    ad1e:	313d      	adds	r1, #61	; 0x3d
    ad20:	4648      	mov	r0, r9
    ad22:	f015 fc0d 	bl	20540 <net_encrypt>
	if (err) {
    ad26:	4683      	mov	fp, r0
    ad28:	b9e0      	cbnz	r0, ad64 <bt_mesh_net_send+0x11c>
	BT_MESH_ADV(buf)->cb = cb;
    ad2a:	696a      	ldr	r2, [r5, #20]
	BT_MESH_ADV(buf)->cb_data = cb_data;
    ad2c:	e9c2 6700 	strd	r6, r7, [r2]
	    bt_mesh_proxy_relay(buf, tx->ctx->addr) &&
    ad30:	6862      	ldr	r2, [r4, #4]
    ad32:	4628      	mov	r0, r5
    ad34:	8891      	ldrh	r1, [r2, #4]
    ad36:	f004 fde5 	bl	f904 <bt_mesh_proxy_relay>
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    ad3a:	b120      	cbz	r0, ad46 <bt_mesh_net_send+0xfe>
	    BT_MESH_ADDR_IS_UNICAST(tx->ctx->addr)) {
    ad3c:	6862      	ldr	r2, [r4, #4]
	    bt_mesh_proxy_relay(buf, tx->ctx->addr) &&
    ad3e:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
    ad42:	2a00      	cmp	r2, #0
    ad44:	dc0c      	bgt.n	ad60 <bt_mesh_net_send+0x118>
	bt_mesh_adv_send(buf, cb, cb_data);
    ad46:	463a      	mov	r2, r7
    ad48:	4631      	mov	r1, r6
    ad4a:	4628      	mov	r0, r5
    ad4c:	f7ff faf0 	bl	a330 <bt_mesh_adv_send>
    ad50:	e008      	b.n	ad64 <bt_mesh_net_send+0x11c>
	parent->next = child;
    ad52:	6002      	str	r2, [r0, #0]
	list->tail = node;
    ad54:	620a      	str	r2, [r1, #32]
}
    ad56:	e7cb      	b.n	acf0 <bt_mesh_net_send+0xa8>
			if (!err) {
    ad58:	f1bb 0f00 	cmp.w	fp, #0
    ad5c:	d102      	bne.n	ad64 <bt_mesh_net_send+0x11c>
void bt_mesh_net_settings_commit(void);

static inline void send_cb_finalize(const struct bt_mesh_send_cb *cb,
				    void *cb_data)
{
	if (!cb) {
    ad5e:	b946      	cbnz	r6, ad72 <bt_mesh_net_send+0x12a>
		return -ENOMEM;
    ad60:	f04f 0b00 	mov.w	fp, #0
	net_buf_unref(buf);
    ad64:	4628      	mov	r0, r5
    ad66:	f00c f987 	bl	17078 <net_buf_unref>
}
    ad6a:	4658      	mov	r0, fp
    ad6c:	b005      	add	sp, #20
    ad6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return;
	}

	if (cb->start) {
    ad72:	6834      	ldr	r4, [r6, #0]
    ad74:	b11c      	cbz	r4, ad7e <bt_mesh_net_send+0x136>
		cb->start(0, 0, cb_data);
    ad76:	463a      	mov	r2, r7
    ad78:	4659      	mov	r1, fp
    ad7a:	4658      	mov	r0, fp
    ad7c:	47a0      	blx	r4
	}

	if (cb->end) {
    ad7e:	6872      	ldr	r2, [r6, #4]
    ad80:	2a00      	cmp	r2, #0
    ad82:	d0ed      	beq.n	ad60 <bt_mesh_net_send+0x118>
		cb->end(0, cb_data);
    ad84:	4639      	mov	r1, r7
    ad86:	2000      	movs	r0, #0
    ad88:	4790      	blx	r2
    ad8a:	e7eb      	b.n	ad64 <bt_mesh_net_send+0x11c>
    ad8c:	4683      	mov	fp, r0
    ad8e:	e7e9      	b.n	ad64 <bt_mesh_net_send+0x11c>
    ad90:	20000e98 	.word	0x20000e98
    ad94:	20001728 	.word	0x20001728
    ad98:	20001734 	.word	0x20001734

0000ad9c <bt_mesh_net_loopback_clear>:
{
    ad9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	list->tail = NULL;
    ada0:	2400      	movs	r4, #0
	return list->head;
    ada2:	4d14      	ldr	r5, [pc, #80]	; (adf4 <bt_mesh_net_loopback_clear+0x58>)
			k_mem_slab_free(&loopback_buf_pool, (void **)&buf);
    ada4:	f8df 9050 	ldr.w	r9, [pc, #80]	; adf8 <bt_mesh_net_loopback_clear+0x5c>
{
    ada8:	4606      	mov	r6, r0
	list->head = NULL;
    adaa:	4627      	mov	r7, r4
		if (net_idx == BT_MESH_KEY_ANY || net_idx == buf->sub->net_idx) {
    adac:	f64f 78ff 	movw	r8, #65535	; 0xffff
	return list->head;
    adb0:	69eb      	ldr	r3, [r5, #28]
Z_GENLIST_GET(slist, snode)
    adb2:	b95b      	cbnz	r3, adcc <bt_mesh_net_loopback_clear+0x30>
	bt_mesh.local_queue = new_list;
    adb4:	e9c5 7407 	strd	r7, r4, [r5, #28]
}
    adb8:	b003      	add	sp, #12
    adba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	parent->next = child;
    adbe:	2200      	movs	r2, #0
    adc0:	601a      	str	r2, [r3, #0]
Z_GENLIST_APPEND(slist, snode)
    adc2:	b10c      	cbz	r4, adc8 <bt_mesh_net_loopback_clear+0x2c>
	parent->next = child;
    adc4:	6023      	str	r3, [r4, #0]
}
    adc6:	e013      	b.n	adf0 <bt_mesh_net_loopback_clear+0x54>
	list->head = node;
    adc8:	461f      	mov	r7, r3
    adca:	e011      	b.n	adf0 <bt_mesh_net_loopback_clear+0x54>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    adcc:	6a29      	ldr	r1, [r5, #32]
	return node->next;
    adce:	681a      	ldr	r2, [r3, #0]
	list->head = node;
    add0:	61ea      	str	r2, [r5, #28]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    add2:	428b      	cmp	r3, r1
	list->tail = node;
    add4:	bf08      	it	eq
    add6:	622a      	streq	r2, [r5, #32]
		if (net_idx == BT_MESH_KEY_ANY || net_idx == buf->sub->net_idx) {
    add8:	4546      	cmp	r6, r8
		struct loopback_buf *buf = CONTAINER_OF(node, struct loopback_buf, node);
    adda:	9301      	str	r3, [sp, #4]
		if (net_idx == BT_MESH_KEY_ANY || net_idx == buf->sub->net_idx) {
    addc:	d003      	beq.n	ade6 <bt_mesh_net_loopback_clear+0x4a>
    adde:	685a      	ldr	r2, [r3, #4]
    ade0:	8b92      	ldrh	r2, [r2, #28]
    ade2:	42b2      	cmp	r2, r6
    ade4:	d1eb      	bne.n	adbe <bt_mesh_net_loopback_clear+0x22>
			k_mem_slab_free(&loopback_buf_pool, (void **)&buf);
    ade6:	a901      	add	r1, sp, #4
    ade8:	4648      	mov	r0, r9
    adea:	f01a fd64 	bl	258b6 <k_mem_slab_free>
    adee:	4623      	mov	r3, r4
    adf0:	461c      	mov	r4, r3
    adf2:	e7dd      	b.n	adb0 <bt_mesh_net_loopback_clear+0x14>
    adf4:	20001728 	.word	0x20001728
    adf8:	20000e98 	.word	0x20000e98

0000adfc <bt_mesh_net_header_parse>:
{
    adfc:	b510      	push	{r4, lr}
	rx->old_iv = (IVI(buf->data) != (bt_mesh.iv_index & 0x01));
    adfe:	4b11      	ldr	r3, [pc, #68]	; (ae44 <bt_mesh_net_header_parse+0x48>)
    ae00:	6804      	ldr	r4, [r0, #0]
    ae02:	681b      	ldr	r3, [r3, #0]
    ae04:	7822      	ldrb	r2, [r4, #0]
    ae06:	f003 0301 	and.w	r3, r3, #1
    ae0a:	ea83 13d2 	eor.w	r3, r3, r2, lsr #7
    ae0e:	7d0a      	ldrb	r2, [r1, #20]
    ae10:	f363 0200 	bfi	r2, r3, #0, #1
    ae14:	750a      	strb	r2, [r1, #20]
	rx->ctl = CTL(buf->data);
    ae16:	7863      	ldrb	r3, [r4, #1]
    ae18:	b2d2      	uxtb	r2, r2
    ae1a:	09db      	lsrs	r3, r3, #7
    ae1c:	f363 02c3 	bfi	r2, r3, #3, #1
    ae20:	750a      	strb	r2, [r1, #20]
	rx->ctx.recv_ttl = TTL(buf->data);
    ae22:	7863      	ldrb	r3, [r4, #1]
    ae24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    ae28:	734b      	strb	r3, [r1, #13]
	rx->seq = SEQ(buf->data);
    ae2a:	1ca0      	adds	r0, r4, #2
    ae2c:	f015 fb80 	bl	20530 <sys_get_be24>
    ae30:	6108      	str	r0, [r1, #16]
	rx->ctx.addr = SRC(buf->data);
    ae32:	f8b4 3005 	ldrh.w	r3, [r4, #5]
    ae36:	ba5b      	rev16	r3, r3
    ae38:	810b      	strh	r3, [r1, #8]
	rx->ctx.recv_dst = DST(buf->data);
    ae3a:	f8b4 3007 	ldrh.w	r3, [r4, #7]
    ae3e:	ba5b      	rev16	r3, r3
    ae40:	814b      	strh	r3, [r1, #10]
}
    ae42:	bd10      	pop	{r4, pc}
    ae44:	20001728 	.word	0x20001728

0000ae48 <bt_mesh_net_decode>:
{
    ae48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ae4c:	4698      	mov	r8, r3
	if (in->len < BT_MESH_NET_MIN_PDU_LEN) {
    ae4e:	8883      	ldrh	r3, [r0, #4]
{
    ae50:	4614      	mov	r4, r2
	if (in->len < BT_MESH_NET_MIN_PDU_LEN) {
    ae52:	f1a3 0212 	sub.w	r2, r3, #18
    ae56:	2a0b      	cmp	r2, #11
{
    ae58:	460e      	mov	r6, r1
	if (in->len < BT_MESH_NET_MIN_PDU_LEN) {
    ae5a:	d875      	bhi.n	af48 <bt_mesh_net_decode+0x100>
	if (net_if == BT_MESH_NET_IF_ADV && check_dup(in)) {
    ae5c:	bb91      	cbnz	r1, aec4 <bt_mesh_net_decode+0x7c>
	return buf->data + buf->len;
    ae5e:	6805      	ldr	r5, [r0, #0]
    ae60:	441d      	add	r5, r3
    ae62:	f815 7c07 	ldrb.w	r7, [r5, #-7]
    ae66:	f815 3c08 	ldrb.w	r3, [r5, #-8]
    ae6a:	f815 2c06 	ldrb.w	r2, [r5, #-6]
	return ((uint32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
    ae6e:	ea47 2303 	orr.w	r3, r7, r3, lsl #8
	return ((uint16_t)src[0] << 8) | src[1];
    ae72:	f815 7c05 	ldrb.w	r7, [r5, #-5]
	return ((uint32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
    ae76:	ea47 2702 	orr.w	r7, r7, r2, lsl #8
    ae7a:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
	return ((uint16_t)src[0] << 8) | src[1];
    ae7e:	f815 2c04 	ldrb.w	r2, [r5, #-4]
    ae82:	f815 3c03 	ldrb.w	r3, [r5, #-3]
	return ((uint32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
    ae86:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	return ((uint16_t)src[0] << 8) | src[1];
    ae8a:	f815 2c02 	ldrb.w	r2, [r5, #-2]
    ae8e:	f815 5c01 	ldrb.w	r5, [r5, #-1]
	return ((uint32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
    ae92:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
    ae96:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    ae9a:	4b30      	ldr	r3, [pc, #192]	; (af5c <bt_mesh_net_decode+0x114>)
	val = sys_get_be32(tail - 4) ^ sys_get_be32(tail - 8);
    ae9c:	407d      	eors	r5, r7
	for (i = 0; i < ARRAY_SIZE(dup_cache); i++) {
    ae9e:	460a      	mov	r2, r1
    aea0:	461f      	mov	r7, r3
		if (dup_cache[i] == val) {
    aea2:	f853 1b04 	ldr.w	r1, [r3], #4
    aea6:	428d      	cmp	r5, r1
    aea8:	d04e      	beq.n	af48 <bt_mesh_net_decode+0x100>
	for (i = 0; i < ARRAY_SIZE(dup_cache); i++) {
    aeaa:	3201      	adds	r2, #1
    aeac:	2a0a      	cmp	r2, #10
    aeae:	d1f8      	bne.n	aea2 <bt_mesh_net_decode+0x5a>
	dup_cache[dup_cache_next++] = val;
    aeb0:	492b      	ldr	r1, [pc, #172]	; (af60 <bt_mesh_net_decode+0x118>)
    aeb2:	680b      	ldr	r3, [r1, #0]
    aeb4:	f847 5023 	str.w	r5, [r7, r3, lsl #2]
    aeb8:	1c5d      	adds	r5, r3, #1
	dup_cache_next %= ARRAY_SIZE(dup_cache);
    aeba:	fb95 f3f2 	sdiv	r3, r5, r2
    aebe:	fb02 5513 	mls	r5, r2, r3, r5
    aec2:	600d      	str	r5, [r1, #0]
	rx->net_if = net_if;
    aec4:	7d23      	ldrb	r3, [r4, #20]
    aec6:	f366 1305 	bfi	r3, r6, #4, #2
    aeca:	7523      	strb	r3, [r4, #20]
	if (!bt_mesh_net_cred_find(rx, in, out, net_decrypt)) {
    aecc:	4601      	mov	r1, r0
    aece:	4b25      	ldr	r3, [pc, #148]	; (af64 <bt_mesh_net_decode+0x11c>)
    aed0:	4642      	mov	r2, r8
    aed2:	4620      	mov	r0, r4
    aed4:	f000 faae 	bl	b434 <bt_mesh_net_cred_find>
    aed8:	2800      	cmp	r0, #0
    aeda:	d038      	beq.n	af4e <bt_mesh_net_decode+0x106>
	rx->ctx.recv_ttl = TTL(out->data);
    aedc:	f8d8 1000 	ldr.w	r1, [r8]
	rx->ctl = CTL(out->data);
    aee0:	7d22      	ldrb	r2, [r4, #20]
	rx->ctx.app_idx = BT_MESH_KEY_UNUSED;
    aee2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    aee6:	80e3      	strh	r3, [r4, #6]
	rx->ctx.recv_ttl = TTL(out->data);
    aee8:	784b      	ldrb	r3, [r1, #1]
    aeea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    aeee:	7363      	strb	r3, [r4, #13]
	if (rx->ctx.recv_ttl == 0U) {
    aef0:	3b00      	subs	r3, #0
    aef2:	bf18      	it	ne
    aef4:	2301      	movne	r3, #1
    aef6:	425b      	negs	r3, r3
    aef8:	73e3      	strb	r3, [r4, #15]
	rx->ctl = CTL(out->data);
    aefa:	784b      	ldrb	r3, [r1, #1]
    aefc:	09db      	lsrs	r3, r3, #7
    aefe:	f363 02c3 	bfi	r2, r3, #3, #1
    af02:	7522      	strb	r2, [r4, #20]
	rx->seq = SEQ(out->data);
    af04:	1c88      	adds	r0, r1, #2
    af06:	f015 fb13 	bl	20530 <sys_get_be24>
    af0a:	6120      	str	r0, [r4, #16]
	return ((uint16_t)src[0] << 8) | src[1];
    af0c:	f8b1 3007 	ldrh.w	r3, [r1, #7]
	if (net_if != BT_MESH_NET_IF_PROXY_CFG &&
    af10:	2e03      	cmp	r6, #3
    af12:	ba5b      	rev16	r3, r3
    af14:	b29a      	uxth	r2, r3
	rx->ctx.recv_dst = DST(out->data);
    af16:	8163      	strh	r3, [r4, #10]
	if (net_if != BT_MESH_NET_IF_PROXY_CFG &&
    af18:	d000      	beq.n	af1c <bt_mesh_net_decode+0xd4>
    af1a:	b1da      	cbz	r2, af54 <bt_mesh_net_decode+0x10c>
	msg_cache[rx->msg_cache_idx].src = rx->ctx.addr;
    af1c:	8922      	ldrh	r2, [r4, #8]
	rx->msg_cache_idx = msg_cache_next++;
    af1e:	4912      	ldr	r1, [pc, #72]	; (af68 <bt_mesh_net_decode+0x120>)
	msg_cache[rx->msg_cache_idx].src = rx->ctx.addr;
    af20:	f3c2 020e 	ubfx	r2, r2, #0, #15
	rx->msg_cache_idx = msg_cache_next++;
    af24:	880b      	ldrh	r3, [r1, #0]
    af26:	82e3      	strh	r3, [r4, #22]
	msg_cache[rx->msg_cache_idx].src = rx->ctx.addr;
    af28:	ea42 30c0 	orr.w	r0, r2, r0, lsl #15
    af2c:	4a0f      	ldr	r2, [pc, #60]	; (af6c <bt_mesh_net_decode+0x124>)
    af2e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	rx->msg_cache_idx = msg_cache_next++;
    af32:	3301      	adds	r3, #1
	msg_cache_next %= ARRAY_SIZE(msg_cache);
    af34:	b29b      	uxth	r3, r3
    af36:	220a      	movs	r2, #10
    af38:	fbb3 f0f2 	udiv	r0, r3, r2
    af3c:	fb02 3310 	mls	r3, r2, r0, r3
    af40:	800b      	strh	r3, [r1, #0]
	return 0;
    af42:	2000      	movs	r0, #0
}
    af44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EINVAL;
    af48:	f06f 0015 	mvn.w	r0, #21
    af4c:	e7fa      	b.n	af44 <bt_mesh_net_decode+0xfc>
		return -ENOENT;
    af4e:	f06f 0001 	mvn.w	r0, #1
    af52:	e7f7      	b.n	af44 <bt_mesh_net_decode+0xfc>
		return -EBADMSG;
    af54:	f06f 004c 	mvn.w	r0, #76	; 0x4c
    af58:	e7f4      	b.n	af44 <bt_mesh_net_decode+0xfc>
    af5a:	bf00      	nop
    af5c:	20002408 	.word	0x20002408
    af60:	20002430 	.word	0x20002430
    af64:	0000a7b5 	.word	0x0000a7b5
    af68:	20003f68 	.word	0x20003f68
    af6c:	20002434 	.word	0x20002434

0000af70 <bt_mesh_net_recv>:
{
    af70:	b5f0      	push	{r4, r5, r6, r7, lr}
    af72:	b095      	sub	sp, #84	; 0x54
	NET_BUF_SIMPLE_DEFINE(buf, BT_MESH_NET_MAX_PDU_LEN);
    af74:	ab0c      	add	r3, sp, #48	; 0x30
{
    af76:	4616      	mov	r6, r2
	NET_BUF_SIMPLE_DEFINE(buf, BT_MESH_NET_MAX_PDU_LEN);
    af78:	f44f 12e8 	mov.w	r2, #1900544	; 0x1d0000
    af7c:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct bt_mesh_net_rx rx = { .ctx.recv_rssi = rssi };
    af80:	2218      	movs	r2, #24
{
    af82:	460c      	mov	r4, r1
    af84:	4605      	mov	r5, r0
	struct bt_mesh_net_rx rx = { .ctx.recv_rssi = rssi };
    af86:	2100      	movs	r1, #0
    af88:	eb0d 0002 	add.w	r0, sp, r2
	NET_BUF_SIMPLE_DEFINE(buf, BT_MESH_NET_MAX_PDU_LEN);
    af8c:	9303      	str	r3, [sp, #12]
	struct bt_mesh_net_rx rx = { .ctx.recv_rssi = rssi };
    af8e:	f013 f85b 	bl	1e048 <memset>
    af92:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
	if (!bt_mesh_is_provisioned()) {
    af96:	f7fe ffff 	bl	9f98 <bt_mesh_is_provisioned>
    af9a:	2800      	cmp	r0, #0
    af9c:	d065      	beq.n	b06a <bt_mesh_net_recv+0xfa>
	if (bt_mesh_net_decode(data, net_if, &rx, &buf)) {
    af9e:	ab03      	add	r3, sp, #12
    afa0:	aa06      	add	r2, sp, #24
    afa2:	4631      	mov	r1, r6
    afa4:	4628      	mov	r0, r5
    afa6:	f7ff ff4f 	bl	ae48 <bt_mesh_net_decode>
    afaa:	2800      	cmp	r0, #0
    afac:	d15d      	bne.n	b06a <bt_mesh_net_recv+0xfa>
	state->offset = net_buf_simple_headroom(buf);
    afae:	a803      	add	r0, sp, #12
    afb0:	f019 ff67 	bl	24e82 <net_buf_simple_headroom>
    afb4:	4604      	mov	r4, r0
	rx.local_match = (bt_mesh_fixed_group_match(rx.ctx.recv_dst) ||
    afb6:	f8bd 0022 	ldrh.w	r0, [sp, #34]	; 0x22
	state->len = buf->len;
    afba:	f8bd 7010 	ldrh.w	r7, [sp, #16]
    afbe:	f015 f9d8 	bl	20372 <bt_mesh_fixed_group_match>
    afc2:	2800      	cmp	r0, #0
    afc4:	d140      	bne.n	b048 <bt_mesh_net_recv+0xd8>
			  bt_mesh_has_addr(rx.ctx.recv_dst));
    afc6:	f8bd 0022 	ldrh.w	r0, [sp, #34]	; 0x22
    afca:	f002 f8a7 	bl	d11c <bt_mesh_has_addr>
	rx.local_match = (bt_mesh_fixed_group_match(rx.ctx.recv_dst) ||
    afce:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    afd2:	2e02      	cmp	r6, #2
	rx.local_match = (bt_mesh_fixed_group_match(rx.ctx.recv_dst) ||
    afd4:	f360 1386 	bfi	r3, r0, #6, #1
    afd8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    afdc:	d036      	beq.n	b04c <bt_mesh_net_recv+0xdc>
	if (bt_mesh_trans_recv(&buf, &rx) == -EAGAIN) {
    afde:	a906      	add	r1, sp, #24
    afe0:	a803      	add	r0, sp, #12
    afe2:	f001 f909 	bl	c1f8 <bt_mesh_trans_recv>
    afe6:	300b      	adds	r0, #11
    afe8:	d10a      	bne.n	b000 <bt_mesh_net_recv+0x90>
		msg_cache[rx.msg_cache_idx].src = BT_MESH_ADDR_UNASSIGNED;
    afea:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
    afee:	4a5c      	ldr	r2, [pc, #368]	; (b160 <bt_mesh_net_recv+0x1f0>)
    aff0:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
    aff4:	f36f 010e 	bfc	r1, #0, #15
    aff8:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
		msg_cache_next = rx.msg_cache_idx;
    affc:	4a59      	ldr	r2, [pc, #356]	; (b164 <bt_mesh_net_recv+0x1f4>)
    affe:	8013      	strh	r3, [r2, #0]
	if (!BT_MESH_ADDR_IS_UNICAST(rx.ctx.recv_dst) ||
    b000:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
    b004:	2b00      	cmp	r3, #0
    b006:	dd04      	ble.n	b012 <bt_mesh_net_recv+0xa2>
	    (!rx.local_match && !rx.friend_match)) {
    b008:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
	if (!BT_MESH_ADDR_IS_UNICAST(rx.ctx.recv_dst) ||
    b00c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    b010:	d12b      	bne.n	b06a <bt_mesh_net_recv+0xfa>
	buf->data = buf->__buf + state->offset;
    b012:	9805      	ldr	r0, [sp, #20]
	if (rx->ctx.recv_ttl <= 1U) {
    b014:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
	buf->len = state->len;
    b018:	f8ad 7010 	strh.w	r7, [sp, #16]
	buf->data = buf->__buf + state->offset;
    b01c:	fa10 f484 	uxtah	r4, r0, r4
    b020:	2b01      	cmp	r3, #1
    b022:	9403      	str	r4, [sp, #12]
    b024:	d921      	bls.n	b06a <bt_mesh_net_recv+0xfa>
	if (rx->net_if == BT_MESH_NET_IF_ADV &&
    b026:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    b02a:	f013 0f34 	tst.w	r3, #52	; 0x34
    b02e:	d108      	bne.n	b042 <bt_mesh_net_recv+0xd2>
	    bt_mesh_relay_get() != BT_MESH_RELAY_ENABLED &&
    b030:	f7ff f908 	bl	a244 <bt_mesh_relay_get>
	    !rx->friend_cred &&
    b034:	2801      	cmp	r0, #1
    b036:	d11a      	bne.n	b06e <bt_mesh_net_recv+0xfe>
	if (rx->net_if == BT_MESH_NET_IF_ADV && !rx->friend_cred) {
    b038:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    b03c:	f013 0f34 	tst.w	r3, #52	; 0x34
    b040:	d01a      	beq.n	b078 <bt_mesh_net_recv+0x108>
		transmit = bt_mesh_net_transmit_get();
    b042:	f7ff f8df 	bl	a204 <bt_mesh_net_transmit_get>
    b046:	e019      	b.n	b07c <bt_mesh_net_recv+0x10c>
	rx.local_match = (bt_mesh_fixed_group_match(rx.ctx.recv_dst) ||
    b048:	2001      	movs	r0, #1
    b04a:	e7c0      	b.n	afce <bt_mesh_net_recv+0x5e>
		bt_mesh_proxy_addr_add(data, rx.ctx.addr);
    b04c:	f8bd 1020 	ldrh.w	r1, [sp, #32]
    b050:	4628      	mov	r0, r5
    b052:	f004 fc25 	bl	f8a0 <bt_mesh_proxy_addr_add>
		if (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_DISABLED &&
    b056:	f7ff f89b 	bl	a190 <bt_mesh_gatt_proxy_get>
		    !rx.local_match) {
    b05a:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    b05e:	f003 0340 	and.w	r3, r3, #64	; 0x40
		if (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_DISABLED &&
    b062:	4318      	orrs	r0, r3
    b064:	b2c0      	uxtb	r0, r0
    b066:	2800      	cmp	r0, #0
    b068:	d1b9      	bne.n	afde <bt_mesh_net_recv+0x6e>
}
    b06a:	b015      	add	sp, #84	; 0x54
    b06c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	    bt_mesh_gatt_proxy_get() != BT_MESH_GATT_PROXY_ENABLED) {
    b06e:	f7ff f88f 	bl	a190 <bt_mesh_gatt_proxy_get>
	    bt_mesh_relay_get() != BT_MESH_RELAY_ENABLED &&
    b072:	2801      	cmp	r0, #1
    b074:	d1f9      	bne.n	b06a <bt_mesh_net_recv+0xfa>
    b076:	e7df      	b.n	b038 <bt_mesh_net_recv+0xc8>
		transmit = bt_mesh_relay_retransmit_get();
    b078:	f7ff f8f0 	bl	a25c <bt_mesh_relay_retransmit_get>
		transmit = bt_mesh_net_transmit_get();
    b07c:	4602      	mov	r2, r0
				 transmit, K_NO_WAIT);
    b07e:	2100      	movs	r1, #0
    b080:	2000      	movs	r0, #0
	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA, BT_MESH_RELAY_ADV,
    b082:	e9cd 0100 	strd	r0, r1, [sp]
    b086:	2102      	movs	r1, #2
    b088:	2001      	movs	r0, #1
    b08a:	f7ff f909 	bl	a2a0 <bt_mesh_adv_create>
	if (!buf) {
    b08e:	4604      	mov	r4, r0
    b090:	2800      	cmp	r0, #0
    b092:	d0ea      	beq.n	b06a <bt_mesh_net_recv+0xfa>
	sbuf->data[1] &= 0x80;
    b094:	9a03      	ldr	r2, [sp, #12]
    b096:	7853      	ldrb	r3, [r2, #1]
    b098:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    b09c:	7053      	strb	r3, [r2, #1]
	sbuf->data[1] |= rx->ctx.recv_ttl - 1U;
    b09e:	9a03      	ldr	r2, [sp, #12]
    b0a0:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    b0a4:	7851      	ldrb	r1, [r2, #1]
    b0a6:	3b01      	subs	r3, #1
    b0a8:	430b      	orrs	r3, r1
    b0aa:	7053      	strb	r3, [r2, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
    b0ac:	f100 0508 	add.w	r5, r0, #8
    b0b0:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    b0b4:	9903      	ldr	r1, [sp, #12]
    b0b6:	4628      	mov	r0, r5
    b0b8:	f019 fe33 	bl	24d22 <net_buf_simple_add_mem>
	cred = &rx->sub->keys[SUBNET_KEY_TX_IDX(rx->sub)].msg;
    b0bc:	9a06      	ldr	r2, [sp, #24]
	if (rx->friend_cred) {
    b0be:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
	cred = &rx->sub->keys[SUBNET_KEY_TX_IDX(rx->sub)].msg;
    b0c2:	7f93      	ldrb	r3, [r2, #30]
    b0c4:	1e99      	subs	r1, r3, #2
    b0c6:	424b      	negs	r3, r1
    b0c8:	414b      	adcs	r3, r1
    b0ca:	215a      	movs	r1, #90	; 0x5a
    b0cc:	434b      	muls	r3, r1
    b0ce:	f103 013d 	add.w	r1, r3, #61	; 0x3d
	if (rx->friend_cred) {
    b0d2:	0740      	lsls	r0, r0, #29
	cred = &rx->sub->keys[SUBNET_KEY_TX_IDX(rx->sub)].msg;
    b0d4:	4411      	add	r1, r2
	if (rx->friend_cred) {
    b0d6:	d50b      	bpl.n	b0f0 <bt_mesh_net_recv+0x180>
		buf->data[0] &= 0x80; /* Clear everything except IVI */
    b0d8:	68a6      	ldr	r6, [r4, #8]
    b0da:	7830      	ldrb	r0, [r6, #0]
    b0dc:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
    b0e0:	7030      	strb	r0, [r6, #0]
		buf->data[0] |= cred->nid;
    b0e2:	68a0      	ldr	r0, [r4, #8]
    b0e4:	4413      	add	r3, r2
    b0e6:	7802      	ldrb	r2, [r0, #0]
    b0e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    b0ec:	4313      	orrs	r3, r2
    b0ee:	7003      	strb	r3, [r0, #0]
	if (net_encrypt(&buf->b, cred, BT_MESH_NET_IVI_RX(rx), false)) {
    b0f0:	4b1d      	ldr	r3, [pc, #116]	; (b168 <bt_mesh_net_recv+0x1f8>)
    b0f2:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
    b0f6:	6818      	ldr	r0, [r3, #0]
    b0f8:	f002 0201 	and.w	r2, r2, #1
    b0fc:	1a82      	subs	r2, r0, r2
    b0fe:	2300      	movs	r3, #0
    b100:	4628      	mov	r0, r5
    b102:	f015 fa1d 	bl	20540 <net_encrypt>
    b106:	bb20      	cbnz	r0, b152 <bt_mesh_net_recv+0x1e2>
	    (rx->friend_cred ||
    b108:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    b10c:	075a      	lsls	r2, r3, #29
    b10e:	d512      	bpl.n	b136 <bt_mesh_net_recv+0x1c6>
		bt_mesh_proxy_relay(buf, rx->ctx.recv_dst);
    b110:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
    b114:	4620      	mov	r0, r4
    b116:	f004 fbf5 	bl	f904 <bt_mesh_proxy_relay>
	if (relay_to_adv(rx->net_if) || rx->friend_cred) {
    b11a:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
	switch (net_if) {
    b11e:	f013 0f30 	tst.w	r3, #48	; 0x30
	if (relay_to_adv(rx->net_if) || rx->friend_cred) {
    b122:	f3c3 1201 	ubfx	r2, r3, #4, #2
	switch (net_if) {
    b126:	d00b      	beq.n	b140 <bt_mesh_net_recv+0x1d0>
    b128:	2a02      	cmp	r2, #2
    b12a:	d016      	beq.n	b15a <bt_mesh_net_recv+0x1ea>
	if (relay_to_adv(rx->net_if) || rx->friend_cred) {
    b12c:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    b130:	075b      	lsls	r3, r3, #29
    b132:	d409      	bmi.n	b148 <bt_mesh_net_recv+0x1d8>
done:
    b134:	e00d      	b.n	b152 <bt_mesh_net_recv+0x1e2>
	     bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED)) {
    b136:	f7ff f82b 	bl	a190 <bt_mesh_gatt_proxy_get>
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    b13a:	2801      	cmp	r0, #1
    b13c:	d1ed      	bne.n	b11a <bt_mesh_net_recv+0x1aa>
    b13e:	e7e7      	b.n	b110 <bt_mesh_net_recv+0x1a0>
		return (bt_mesh_relay_get() == BT_MESH_RELAY_ENABLED);
    b140:	f7ff f880 	bl	a244 <bt_mesh_relay_get>
	if (relay_to_adv(rx->net_if) || rx->friend_cred) {
    b144:	2801      	cmp	r0, #1
    b146:	d1f1      	bne.n	b12c <bt_mesh_net_recv+0x1bc>
		bt_mesh_adv_send(buf, NULL, NULL);
    b148:	2200      	movs	r2, #0
    b14a:	4611      	mov	r1, r2
    b14c:	4620      	mov	r0, r4
    b14e:	f7ff f8ef 	bl	a330 <bt_mesh_adv_send>
	net_buf_unref(buf);
    b152:	4620      	mov	r0, r4
    b154:	f00b ff90 	bl	17078 <net_buf_unref>
    b158:	e787      	b.n	b06a <bt_mesh_net_recv+0xfa>
		return (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED);
    b15a:	f7ff f819 	bl	a190 <bt_mesh_gatt_proxy_get>
    b15e:	e7f1      	b.n	b144 <bt_mesh_net_recv+0x1d4>
    b160:	20002434 	.word	0x20002434
    b164:	20003f68 	.word	0x20003f68
    b168:	20001728 	.word	0x20001728

0000b16c <bt_mesh_net_init>:

void bt_mesh_net_init(void)
{
    b16c:	b510      	push	{r4, lr}
	k_work_init_delayable(&bt_mesh.ivu_timer, ivu_refresh);
    b16e:	4c06      	ldr	r4, [pc, #24]	; (b188 <bt_mesh_net_init+0x1c>)
    b170:	4906      	ldr	r1, [pc, #24]	; (b18c <bt_mesh_net_init+0x20>)
    b172:	f504 7000 	add.w	r0, r4, #512	; 0x200
    b176:	f01a fd8b 	bl	25c90 <k_work_init_delayable>

	k_work_init(&bt_mesh.local_work, bt_mesh_net_local);
    b17a:	f104 000c 	add.w	r0, r4, #12
    b17e:	4904      	ldr	r1, [pc, #16]	; (b190 <bt_mesh_net_init+0x24>)
}
    b180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init(&bt_mesh.local_work, bt_mesh_net_local);
    b184:	f01a bd4e 	b.w	25c24 <k_work_init>
    b188:	20001728 	.word	0x20001728
    b18c:	0000aad9 	.word	0x0000aad9
    b190:	0000a8a5 	.word	0x0000a8a5

0000b194 <subnet_evt>:
		.net_idx = BT_MESH_KEY_UNUSED,
	},
};

static void subnet_evt(struct bt_mesh_subnet *sub, enum bt_mesh_key_evt evt)
{
    b194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	STRUCT_SECTION_FOREACH(bt_mesh_subnet_cb, cb) {
    b196:	4c06      	ldr	r4, [pc, #24]	; (b1b0 <subnet_evt+0x1c>)
    b198:	4f06      	ldr	r7, [pc, #24]	; (b1b4 <subnet_evt+0x20>)
{
    b19a:	4605      	mov	r5, r0
    b19c:	460e      	mov	r6, r1
	STRUCT_SECTION_FOREACH(bt_mesh_subnet_cb, cb) {
    b19e:	42bc      	cmp	r4, r7
    b1a0:	d300      	bcc.n	b1a4 <subnet_evt+0x10>
		cb->evt_handler(sub, evt);
	}
}
    b1a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		cb->evt_handler(sub, evt);
    b1a4:	f854 3b04 	ldr.w	r3, [r4], #4
    b1a8:	4631      	mov	r1, r6
    b1aa:	4628      	mov	r0, r5
    b1ac:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_mesh_subnet_cb, cb) {
    b1ae:	e7f6      	b.n	b19e <subnet_evt+0xa>
    b1b0:	000265d4 	.word	0x000265d4
    b1b4:	000265e4 	.word	0x000265e4

0000b1b8 <subnet_alloc>:
{
	struct bt_mesh_subnet *sub = NULL;

	for (int i = 0; i < ARRAY_SIZE(subnets); i++) {
		/* Check for already existing subnet */
		if (subnets[i].net_idx == net_idx) {
    b1b8:	4b0e      	ldr	r3, [pc, #56]	; (b1f4 <subnet_alloc+0x3c>)
{
    b1ba:	b510      	push	{r4, lr}
		if (subnets[i].net_idx == net_idx) {
    b1bc:	8b9c      	ldrh	r4, [r3, #28]
    b1be:	42a0      	cmp	r0, r4
{
    b1c0:	4602      	mov	r2, r0
		if (subnets[i].net_idx == net_idx) {
    b1c2:	d00f      	beq.n	b1e4 <subnet_alloc+0x2c>
			return &subnets[i];
		}

		if (!sub && subnets[i].net_idx == BT_MESH_KEY_UNUSED) {
    b1c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
			sub = &subnets[i];
    b1c8:	428c      	cmp	r4, r1
    b1ca:	bf0c      	ite	eq
    b1cc:	4618      	moveq	r0, r3
    b1ce:	2000      	movne	r0, #0
		if (subnets[i].net_idx == net_idx) {
    b1d0:	f8b3 40fc 	ldrh.w	r4, [r3, #252]	; 0xfc
    b1d4:	42a2      	cmp	r2, r4
    b1d6:	d00a      	beq.n	b1ee <subnet_alloc+0x36>
		if (!sub && subnets[i].net_idx == BT_MESH_KEY_UNUSED) {
    b1d8:	b918      	cbnz	r0, b1e2 <subnet_alloc+0x2a>
			sub = &subnets[i];
    b1da:	33e0      	adds	r3, #224	; 0xe0
    b1dc:	428c      	cmp	r4, r1
    b1de:	bf08      	it	eq
    b1e0:	4618      	moveq	r0, r3
		}
	}

	return sub;
}
    b1e2:	bd10      	pop	{r4, pc}
	for (int i = 0; i < ARRAY_SIZE(subnets); i++) {
    b1e4:	2000      	movs	r0, #0
			return &subnets[i];
    b1e6:	22e0      	movs	r2, #224	; 0xe0
    b1e8:	fb02 3000 	mla	r0, r2, r0, r3
    b1ec:	e7f9      	b.n	b1e2 <subnet_alloc+0x2a>
	for (int i = 0; i < ARRAY_SIZE(subnets); i++) {
    b1ee:	2001      	movs	r0, #1
    b1f0:	e7f9      	b.n	b1e6 <subnet_alloc+0x2e>
    b1f2:	bf00      	nop
    b1f4:	200004c0 	.word	0x200004c0

0000b1f8 <net_keys_create>:
	return bt_mesh_k2(key, p, p_len, &cred->nid, cred->enc, cred->privacy);
}

static int net_keys_create(struct bt_mesh_subnet_keys *keys,
			   const uint8_t key[16])
{
    b1f8:	b530      	push	{r4, r5, lr}
    b1fa:	b085      	sub	sp, #20
	uint8_t p = 0;
    b1fc:	2300      	movs	r3, #0
    b1fe:	f88d 300f 	strb.w	r3, [sp, #15]
	return bt_mesh_k2(key, p, p_len, &cred->nid, cred->enc, cred->privacy);
    b202:	f100 0322 	add.w	r3, r0, #34	; 0x22
{
    b206:	460d      	mov	r5, r1
	return bt_mesh_k2(key, p, p_len, &cred->nid, cred->enc, cred->privacy);
    b208:	9301      	str	r3, [sp, #4]
    b20a:	f100 0312 	add.w	r3, r0, #18
{
    b20e:	4604      	mov	r4, r0
	return bt_mesh_k2(key, p, p_len, &cred->nid, cred->enc, cred->privacy);
    b210:	9300      	str	r3, [sp, #0]
    b212:	2201      	movs	r2, #1
    b214:	f100 0311 	add.w	r3, r0, #17
    b218:	f10d 010f 	add.w	r1, sp, #15
    b21c:	4628      	mov	r0, r5
    b21e:	f001 fcaf 	bl	cb80 <bt_mesh_k2>
	int err;

	err = msg_cred_create(&keys->msg, &p, 1, key);
	if (err) {
    b222:	b9d0      	cbnz	r0, b25a <net_keys_create+0x62>
		BT_ERR("Unable to generate NID, EncKey & PrivacyKey");
		return err;
	}

	memcpy(keys->net, key, 16);
    b224:	4629      	mov	r1, r5
    b226:	2210      	movs	r2, #16
    b228:	1c60      	adds	r0, r4, #1
    b22a:	f012 ff02 	bl	1e032 <memcpy>

	BT_DBG("NID 0x%02x EncKey %s", keys->msg.nid,
	       bt_hex(keys->msg.enc, 16));
	BT_DBG("PrivacyKey %s", bt_hex(keys->msg.privacy, 16));

	err = bt_mesh_k3(key, keys->net_id);
    b22e:	f104 0132 	add.w	r1, r4, #50	; 0x32
    b232:	4628      	mov	r0, r5
    b234:	f001 fcfc 	bl	cc30 <bt_mesh_k3>
	if (err) {
    b238:	b978      	cbnz	r0, b25a <net_keys_create+0x62>
}

static inline int bt_mesh_identity_key(const uint8_t net_key[16],
				       uint8_t identity_key[16])
{
	return bt_mesh_id128(net_key, "nkik", identity_key);
    b23a:	4909      	ldr	r1, [pc, #36]	; (b260 <net_keys_create+0x68>)
    b23c:	f104 023a 	add.w	r2, r4, #58	; 0x3a
    b240:	4628      	mov	r0, r5
    b242:	f001 fd4b 	bl	ccdc <bt_mesh_id128>

	BT_DBG("NetID %s", bt_hex(keys->net_id, 8));

#if defined(CONFIG_BT_MESH_GATT_PROXY)
	err = bt_mesh_identity_key(key, keys->identity);
	if (err) {
    b246:	b940      	cbnz	r0, b25a <net_keys_create+0x62>
}

static inline int bt_mesh_beacon_key(const uint8_t net_key[16],
				     uint8_t beacon_key[16])
{
	return bt_mesh_id128(net_key, "nkbk", beacon_key);
    b248:	4906      	ldr	r1, [pc, #24]	; (b264 <net_keys_create+0x6c>)
    b24a:	f104 024a 	add.w	r2, r4, #74	; 0x4a
    b24e:	4628      	mov	r0, r5
    b250:	f001 fd44 	bl	ccdc <bt_mesh_id128>

	BT_DBG("IdentityKey %s", bt_hex(keys->identity, 16));
#endif /* GATT_PROXY */

	err = bt_mesh_beacon_key(key, keys->beacon);
	if (err) {
    b254:	b908      	cbnz	r0, b25a <net_keys_create+0x62>
		return err;
	}

	BT_DBG("BeaconKey %s", bt_hex(keys->beacon, 16));

	keys->valid = 1U;
    b256:	2301      	movs	r3, #1
    b258:	7023      	strb	r3, [r4, #0]

	return 0;
}
    b25a:	b005      	add	sp, #20
    b25c:	bd30      	pop	{r4, r5, pc}
    b25e:	bf00      	nop
    b260:	0002761e 	.word	0x0002761e
    b264:	00027623 	.word	0x00027623

0000b268 <bt_mesh_net_flags>:
	if (sub && (sub->kr_phase == BT_MESH_KR_PHASE_2)) {
    b268:	b118      	cbz	r0, b272 <bt_mesh_net_flags+0xa>
    b26a:	7f80      	ldrb	r0, [r0, #30]
	uint8_t flags = 0x00;
    b26c:	1e82      	subs	r2, r0, #2
    b26e:	4250      	negs	r0, r2
    b270:	4150      	adcs	r0, r2
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b272:	4b05      	ldr	r3, [pc, #20]	; (b288 <bt_mesh_net_flags+0x20>)
    b274:	f3bf 8f5b 	dmb	ish
    b278:	681b      	ldr	r3, [r3, #0]
    b27a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS)) {
    b27e:	075b      	lsls	r3, r3, #29
		flags |= BT_MESH_NET_FLAG_IVU;
    b280:	bf48      	it	mi
    b282:	f040 0002 	orrmi.w	r0, r0, #2
}
    b286:	4770      	bx	lr
    b288:	20001730 	.word	0x20001730

0000b28c <bt_mesh_subnets_get>:

	return STATUS_SUCCESS;
}

ssize_t bt_mesh_subnets_get(uint16_t net_idxs[], size_t max, off_t skip)
{
    b28c:	b530      	push	{r4, r5, lr}
	size_t count = 0;

	for (int i = 0; i < ARRAY_SIZE(subnets); i++) {
		struct bt_mesh_subnet *sub = &subnets[i];

		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    b28e:	4c0f      	ldr	r4, [pc, #60]	; (b2cc <bt_mesh_subnets_get+0x40>)
{
    b290:	4603      	mov	r3, r0
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    b292:	8ba0      	ldrh	r0, [r4, #28]
    b294:	f64f 75ff 	movw	r5, #65535	; 0xffff
    b298:	42a8      	cmp	r0, r5
    b29a:	d010      	beq.n	b2be <bt_mesh_subnets_get+0x32>
			continue;
		}

		if (skip) {
    b29c:	b972      	cbnz	r2, b2bc <bt_mesh_subnets_get+0x30>
			skip--;
			continue;
		}

		if (count >= max) {
    b29e:	b151      	cbz	r1, b2b6 <bt_mesh_subnets_get+0x2a>
			return -ENOMEM;
		}

		net_idxs[count++] = sub->net_idx;
    b2a0:	8018      	strh	r0, [r3, #0]
    b2a2:	2001      	movs	r0, #1
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    b2a4:	f8b4 40fc 	ldrh.w	r4, [r4, #252]	; 0xfc
    b2a8:	f64f 75ff 	movw	r5, #65535	; 0xffff
    b2ac:	42ac      	cmp	r4, r5
    b2ae:	d004      	beq.n	b2ba <bt_mesh_subnets_get+0x2e>
		if (skip) {
    b2b0:	b91a      	cbnz	r2, b2ba <bt_mesh_subnets_get+0x2e>
		if (count >= max) {
    b2b2:	4281      	cmp	r1, r0
    b2b4:	d805      	bhi.n	b2c2 <bt_mesh_subnets_get+0x36>
			return -ENOMEM;
    b2b6:	f06f 000b 	mvn.w	r0, #11
	}

	return count;
}
    b2ba:	bd30      	pop	{r4, r5, pc}
			skip--;
    b2bc:	3a01      	subs	r2, #1
	size_t count = 0;
    b2be:	2000      	movs	r0, #0
    b2c0:	e7f0      	b.n	b2a4 <bt_mesh_subnets_get+0x18>
		net_idxs[count++] = sub->net_idx;
    b2c2:	f823 4010 	strh.w	r4, [r3, r0, lsl #1]
    b2c6:	3001      	adds	r0, #1
	return count;
    b2c8:	e7f7      	b.n	b2ba <bt_mesh_subnets_get+0x2e>
    b2ca:	bf00      	nop
    b2cc:	200004c0 	.word	0x200004c0

0000b2d0 <bt_mesh_subnet_get>:

struct bt_mesh_subnet *bt_mesh_subnet_get(uint16_t net_idx)
{
    b2d0:	4603      	mov	r3, r0
	for (int i = 0; i < ARRAY_SIZE(subnets); i++) {
		struct bt_mesh_subnet *sub = &subnets[i];

		if (sub->net_idx == net_idx) {
    b2d2:	4805      	ldr	r0, [pc, #20]	; (b2e8 <bt_mesh_subnet_get+0x18>)
    b2d4:	8b82      	ldrh	r2, [r0, #28]
    b2d6:	429a      	cmp	r2, r3
    b2d8:	d005      	beq.n	b2e6 <bt_mesh_subnet_get+0x16>
    b2da:	f8b0 20fc 	ldrh.w	r2, [r0, #252]	; 0xfc
			return sub;
		}
	}

	return NULL;
    b2de:	30e0      	adds	r0, #224	; 0xe0
    b2e0:	429a      	cmp	r2, r3
    b2e2:	bf18      	it	ne
    b2e4:	2000      	movne	r0, #0
}
    b2e6:	4770      	bx	lr
    b2e8:	200004c0 	.word	0x200004c0

0000b2ec <bt_mesh_subnet_kr_phase_set>:
{
    b2ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
	const uint8_t valid_transitions[] = {
    b2ee:	4b13      	ldr	r3, [pc, #76]	; (b33c <bt_mesh_subnet_kr_phase_set+0x50>)
    b2f0:	881a      	ldrh	r2, [r3, #0]
    b2f2:	789b      	ldrb	r3, [r3, #2]
    b2f4:	f8ad 2004 	strh.w	r2, [sp, #4]
    b2f8:	f88d 3006 	strb.w	r3, [sp, #6]
	sub = bt_mesh_subnet_get(net_idx);
    b2fc:	f7ff ffe8 	bl	b2d0 <bt_mesh_subnet_get>
{
    b300:	460c      	mov	r4, r1
	if (!sub) {
    b302:	4605      	mov	r5, r0
    b304:	b918      	cbnz	r0, b30e <bt_mesh_subnet_kr_phase_set+0x22>
		*phase = 0x00;
    b306:	7008      	strb	r0, [r1, #0]
		return STATUS_INVALID_NETKEY;
    b308:	2004      	movs	r0, #4
}
    b30a:	b003      	add	sp, #12
    b30c:	bd30      	pop	{r4, r5, pc}
	if (*phase == sub->kr_phase) {
    b30e:	7809      	ldrb	r1, [r1, #0]
    b310:	7f83      	ldrb	r3, [r0, #30]
    b312:	4299      	cmp	r1, r3
    b314:	d00c      	beq.n	b330 <bt_mesh_subnet_kr_phase_set+0x44>
	if (sub->kr_phase < ARRAY_SIZE(valid_transitions) &&
    b316:	2b02      	cmp	r3, #2
    b318:	d80c      	bhi.n	b334 <bt_mesh_subnet_kr_phase_set+0x48>
	    valid_transitions[sub->kr_phase] & BIT(*phase)) {
    b31a:	aa02      	add	r2, sp, #8
    b31c:	441a      	add	r2, r3
    b31e:	f812 2c04 	ldrb.w	r2, [r2, #-4]
	if (sub->kr_phase < ARRAY_SIZE(valid_transitions) &&
    b322:	40ca      	lsrs	r2, r1
    b324:	07d2      	lsls	r2, r2, #31
    b326:	d505      	bpl.n	b334 <bt_mesh_subnet_kr_phase_set+0x48>
		key_refresh(sub, *phase);
    b328:	f015 f91c 	bl	20564 <key_refresh>
		*phase = sub->kr_phase;
    b32c:	7fab      	ldrb	r3, [r5, #30]
    b32e:	7023      	strb	r3, [r4, #0]
		return STATUS_SUCCESS;
    b330:	2000      	movs	r0, #0
    b332:	e7ea      	b.n	b30a <bt_mesh_subnet_kr_phase_set+0x1e>
	*phase = sub->kr_phase;
    b334:	7023      	strb	r3, [r4, #0]
	return STATUS_CANNOT_UPDATE;
    b336:	200b      	movs	r0, #11
    b338:	e7e7      	b.n	b30a <bt_mesh_subnet_kr_phase_set+0x1e>
    b33a:	bf00      	nop
    b33c:	00027628 	.word	0x00027628

0000b340 <bt_mesh_subnet_find>:
	return 0;
}

struct bt_mesh_subnet *bt_mesh_subnet_find(bool (*cb)(struct bt_mesh_subnet *sub, void *cb_data),
					   void *cb_data)
{
    b340:	b570      	push	{r4, r5, r6, lr}
	for (int i = 0; i < ARRAY_SIZE(subnets); i++) {
		if (subnets[i].net_idx == BT_MESH_KEY_UNUSED) {
    b342:	4c0f      	ldr	r4, [pc, #60]	; (b380 <bt_mesh_subnet_find+0x40>)
    b344:	8ba2      	ldrh	r2, [r4, #28]
    b346:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b34a:	429a      	cmp	r2, r3
{
    b34c:	4605      	mov	r5, r0
    b34e:	460e      	mov	r6, r1
		if (subnets[i].net_idx == BT_MESH_KEY_UNUSED) {
    b350:	d003      	beq.n	b35a <bt_mesh_subnet_find+0x1a>
			continue;
		}

		if (!cb || cb(&subnets[i], cb_data)) {
    b352:	4620      	mov	r0, r4
    b354:	b14d      	cbz	r5, b36a <bt_mesh_subnet_find+0x2a>
    b356:	47a8      	blx	r5
    b358:	b978      	cbnz	r0, b37a <bt_mesh_subnet_find+0x3a>
		if (subnets[i].net_idx == BT_MESH_KEY_UNUSED) {
    b35a:	f8b4 20fc 	ldrh.w	r2, [r4, #252]	; 0xfc
    b35e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b362:	429a      	cmp	r2, r3
    b364:	d007      	beq.n	b376 <bt_mesh_subnet_find+0x36>
		if (!cb || cb(&subnets[i], cb_data)) {
    b366:	b90d      	cbnz	r5, b36c <bt_mesh_subnet_find+0x2c>
    b368:	4806      	ldr	r0, [pc, #24]	; (b384 <bt_mesh_subnet_find+0x44>)
			return &subnets[i];
		}
	}

	return NULL;
}
    b36a:	bd70      	pop	{r4, r5, r6, pc}
		if (!cb || cb(&subnets[i], cb_data)) {
    b36c:	4805      	ldr	r0, [pc, #20]	; (b384 <bt_mesh_subnet_find+0x44>)
    b36e:	4631      	mov	r1, r6
    b370:	47a8      	blx	r5
    b372:	2800      	cmp	r0, #0
    b374:	d1f8      	bne.n	b368 <bt_mesh_subnet_find+0x28>
	return NULL;
    b376:	2000      	movs	r0, #0
    b378:	e7f7      	b.n	b36a <bt_mesh_subnet_find+0x2a>
		if (!cb || cb(&subnets[i], cb_data)) {
    b37a:	4620      	mov	r0, r4
    b37c:	e7f5      	b.n	b36a <bt_mesh_subnet_find+0x2a>
    b37e:	bf00      	nop
    b380:	200004c0 	.word	0x200004c0
    b384:	200005a0 	.word	0x200005a0

0000b388 <bt_mesh_subnet_foreach>:

size_t bt_mesh_subnet_foreach(void (*cb)(struct bt_mesh_subnet *sub))
{
    b388:	b570      	push	{r4, r5, r6, lr}
	size_t count = 0;

	for (int i = 0; i < ARRAY_SIZE(subnets); i++) {
		if (subnets[i].net_idx == BT_MESH_KEY_UNUSED) {
    b38a:	4e0b      	ldr	r6, [pc, #44]	; (b3b8 <bt_mesh_subnet_foreach+0x30>)
    b38c:	8bb2      	ldrh	r2, [r6, #28]
    b38e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b392:	429a      	cmp	r2, r3
{
    b394:	4605      	mov	r5, r0
		if (subnets[i].net_idx == BT_MESH_KEY_UNUSED) {
    b396:	d00d      	beq.n	b3b4 <bt_mesh_subnet_foreach+0x2c>
			continue;
		}

		cb(&subnets[i]);
    b398:	4630      	mov	r0, r6
    b39a:	47a8      	blx	r5
		count++;
    b39c:	2401      	movs	r4, #1
		if (subnets[i].net_idx == BT_MESH_KEY_UNUSED) {
    b39e:	f8b6 20fc 	ldrh.w	r2, [r6, #252]	; 0xfc
    b3a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b3a6:	429a      	cmp	r2, r3
    b3a8:	d002      	beq.n	b3b0 <bt_mesh_subnet_foreach+0x28>
		cb(&subnets[i]);
    b3aa:	4804      	ldr	r0, [pc, #16]	; (b3bc <bt_mesh_subnet_foreach+0x34>)
    b3ac:	47a8      	blx	r5
		count++;
    b3ae:	3401      	adds	r4, #1
	}

	return count;
}
    b3b0:	4620      	mov	r0, r4
    b3b2:	bd70      	pop	{r4, r5, r6, pc}
	size_t count = 0;
    b3b4:	2400      	movs	r4, #0
    b3b6:	e7f2      	b.n	b39e <bt_mesh_subnet_foreach+0x16>
    b3b8:	200004c0 	.word	0x200004c0
    b3bc:	200005a0 	.word	0x200005a0

0000b3c0 <bt_mesh_subnet_next>:

struct bt_mesh_subnet *bt_mesh_subnet_next(struct bt_mesh_subnet *sub)
{
	if (sub) {
    b3c0:	b1b8      	cbz	r0, b3f2 <bt_mesh_subnet_next+0x32>
		sub = &subnets[0];
	}

	for (int i = 0; i < ARRAY_SIZE(subnets); i++, sub++) {
		/* Roll over once we reach the end */
		if (sub == &subnets[ARRAY_SIZE(subnets)]) {
    b3c2:	4b0d      	ldr	r3, [pc, #52]	; (b3f8 <bt_mesh_subnet_next+0x38>)
		sub++;
    b3c4:	30e0      	adds	r0, #224	; 0xe0
		sub = &subnets[0];
    b3c6:	f5a3 72e0 	sub.w	r2, r3, #448	; 0x1c0
    b3ca:	4298      	cmp	r0, r3
    b3cc:	bf08      	it	eq
    b3ce:	4610      	moveq	r0, r2
			sub = &subnets[0];
		}

		if (sub->net_idx != BT_MESH_KEY_UNUSED) {
    b3d0:	8b83      	ldrh	r3, [r0, #28]
    b3d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    b3d6:	4293      	cmp	r3, r2
    b3d8:	d10a      	bne.n	b3f0 <bt_mesh_subnet_next+0x30>
		if (sub == &subnets[ARRAY_SIZE(subnets)]) {
    b3da:	4a07      	ldr	r2, [pc, #28]	; (b3f8 <bt_mesh_subnet_next+0x38>)
	for (int i = 0; i < ARRAY_SIZE(subnets); i++, sub++) {
    b3dc:	30e0      	adds	r0, #224	; 0xe0
			sub = &subnets[0];
    b3de:	f5a2 71e0 	sub.w	r1, r2, #448	; 0x1c0
    b3e2:	4290      	cmp	r0, r2
    b3e4:	bf08      	it	eq
    b3e6:	4608      	moveq	r0, r1
		if (sub->net_idx != BT_MESH_KEY_UNUSED) {
    b3e8:	8b82      	ldrh	r2, [r0, #28]
			return sub;
		}
	}

	return NULL;
    b3ea:	429a      	cmp	r2, r3
    b3ec:	bf08      	it	eq
    b3ee:	2000      	moveq	r0, #0
}
    b3f0:	4770      	bx	lr
		sub = &subnets[0];
    b3f2:	4802      	ldr	r0, [pc, #8]	; (b3fc <bt_mesh_subnet_next+0x3c>)
    b3f4:	e7ec      	b.n	b3d0 <bt_mesh_subnet_next+0x10>
    b3f6:	bf00      	nop
    b3f8:	20000680 	.word	0x20000680
    b3fc:	200004c0 	.word	0x200004c0

0000b400 <bt_mesh_net_keys_reset>:

void bt_mesh_net_keys_reset(void)
{
    b400:	b510      	push	{r4, lr}
	 * are associated with each net key.
	 */
	for (i = 0; i < ARRAY_SIZE(subnets); i++) {
		struct bt_mesh_subnet *sub = &subnets[i];

		if (sub->net_idx != BT_MESH_KEY_UNUSED) {
    b402:	4c0a      	ldr	r4, [pc, #40]	; (b42c <bt_mesh_net_keys_reset+0x2c>)
    b404:	8ba2      	ldrh	r2, [r4, #28]
    b406:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b40a:	429a      	cmp	r2, r3
    b40c:	d002      	beq.n	b414 <bt_mesh_net_keys_reset+0x14>
			subnet_del(sub);
    b40e:	4620      	mov	r0, r4
    b410:	f015 f8cc 	bl	205ac <subnet_del>
		if (sub->net_idx != BT_MESH_KEY_UNUSED) {
    b414:	f8b4 20fc 	ldrh.w	r2, [r4, #252]	; 0xfc
    b418:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b41c:	429a      	cmp	r2, r3
    b41e:	d004      	beq.n	b42a <bt_mesh_net_keys_reset+0x2a>
		}
	}
}
    b420:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			subnet_del(sub);
    b424:	4802      	ldr	r0, [pc, #8]	; (b430 <bt_mesh_net_keys_reset+0x30>)
    b426:	f015 b8c1 	b.w	205ac <subnet_del>
}
    b42a:	bd10      	pop	{r4, pc}
    b42c:	200004c0 	.word	0x200004c0
    b430:	200005a0 	.word	0x200005a0

0000b434 <bt_mesh_net_cred_find>:
			   struct net_buf_simple *out,
			   bool (*cb)(struct bt_mesh_net_rx *rx,
				      struct net_buf_simple *in,
				      struct net_buf_simple *out,
				      const struct bt_mesh_net_cred *cred))
{
    b434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b438:	4d30      	ldr	r5, [pc, #192]	; (b4fc <bt_mesh_net_cred_find+0xc8>)
    b43a:	4604      	mov	r4, r0
    b43c:	460e      	mov	r6, r1
    b43e:	4617      	mov	r7, r2
    b440:	4698      	mov	r8, r3
    b442:	f505 79e8 	add.w	r9, r5, #464	; 0x1d0
#if defined(CONFIG_BT_MESH_FRIEND)
	/** Each friendship has unique friendship credentials */
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
		struct bt_mesh_friend *frnd = &bt_mesh.frnd[i];

		if (!frnd->subnet) {
    b446:	6bab      	ldr	r3, [r5, #56]	; 0x38
    b448:	b333      	cbz	r3, b498 <bt_mesh_net_cred_find+0x64>
			continue;
		}

		rx->sub = frnd->subnet;
    b44a:	6023      	str	r3, [r4, #0]

		for (j = 0; j < ARRAY_SIZE(frnd->cred); j++) {
			if (!rx->sub->keys[j].valid) {
    b44c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    b450:	b133      	cbz	r3, b460 <bt_mesh_net_cred_find+0x2c>
				continue;
			}

			if (cb(rx, in, out, &frnd->cred[j])) {
    b452:	f105 033c 	add.w	r3, r5, #60	; 0x3c
    b456:	463a      	mov	r2, r7
    b458:	4631      	mov	r1, r6
    b45a:	4620      	mov	r0, r4
    b45c:	47c0      	blx	r8
    b45e:	b9c8      	cbnz	r0, b494 <bt_mesh_net_cred_find+0x60>
			if (!rx->sub->keys[j].valid) {
    b460:	6823      	ldr	r3, [r4, #0]
    b462:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
    b466:	b1bb      	cbz	r3, b498 <bt_mesh_net_cred_find+0x64>
			if (cb(rx, in, out, &frnd->cred[j])) {
    b468:	f105 035d 	add.w	r3, r5, #93	; 0x5d
    b46c:	463a      	mov	r2, r7
    b46e:	4631      	mov	r1, r6
    b470:	4620      	mov	r0, r4
    b472:	47c0      	blx	r8
    b474:	b180      	cbz	r0, b498 <bt_mesh_net_cred_find+0x64>
		for (j = 0; j < ARRAY_SIZE(frnd->cred); j++) {
    b476:	2301      	movs	r3, #1
				rx->new_key = (j > 0);
    b478:	7d22      	ldrb	r2, [r4, #20]
    b47a:	005b      	lsls	r3, r3, #1
    b47c:	f043 0304 	orr.w	r3, r3, #4
    b480:	f022 0206 	bic.w	r2, r2, #6
    b484:	4313      	orrs	r3, r2
			if (!rx->sub->keys[j].valid) {
				continue;
			}

			if (cb(rx, in, out, &rx->sub->keys[j].msg)) {
				rx->new_key = (j > 0);
    b486:	7523      	strb	r3, [r4, #20]
				rx->friend_cred = 0U;
				rx->ctx.net_idx = rx->sub->net_idx;
    b488:	6823      	ldr	r3, [r4, #0]
    b48a:	8b9b      	ldrh	r3, [r3, #28]
    b48c:	80a3      	strh	r3, [r4, #4]
				return true;
    b48e:	2001      	movs	r0, #1
			}
		}
	}

	return false;
}
    b490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (j = 0; j < ARRAY_SIZE(frnd->cred); j++) {
    b494:	2300      	movs	r3, #0
    b496:	e7ef      	b.n	b478 <bt_mesh_net_cred_find+0x44>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
    b498:	35e8      	adds	r5, #232	; 0xe8
    b49a:	45a9      	cmp	r9, r5
    b49c:	d1d3      	bne.n	b446 <bt_mesh_net_cred_find+0x12>
    b49e:	4d18      	ldr	r5, [pc, #96]	; (b500 <bt_mesh_net_cred_find+0xcc>)
	for (i = 0; i < ARRAY_SIZE(subnets); i++) {
    b4a0:	f04f 0900 	mov.w	r9, #0
		if (rx->sub->net_idx == BT_MESH_KEY_UNUSED) {
    b4a4:	f64f 7aff 	movw	sl, #65535	; 0xffff
    b4a8:	8bab      	ldrh	r3, [r5, #28]
		rx->sub = &subnets[i];
    b4aa:	6025      	str	r5, [r4, #0]
		if (rx->sub->net_idx == BT_MESH_KEY_UNUSED) {
    b4ac:	4553      	cmp	r3, sl
    b4ae:	d01f      	beq.n	b4f0 <bt_mesh_net_cred_find+0xbc>
			if (!rx->sub->keys[j].valid) {
    b4b0:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
    b4b4:	b133      	cbz	r3, b4c4 <bt_mesh_net_cred_find+0x90>
			if (cb(rx, in, out, &rx->sub->keys[j].msg)) {
    b4b6:	f105 033d 	add.w	r3, r5, #61	; 0x3d
    b4ba:	463a      	mov	r2, r7
    b4bc:	4631      	mov	r1, r6
    b4be:	4620      	mov	r0, r4
    b4c0:	47c0      	blx	r8
    b4c2:	b998      	cbnz	r0, b4ec <bt_mesh_net_cred_find+0xb8>
			if (!rx->sub->keys[j].valid) {
    b4c4:	6823      	ldr	r3, [r4, #0]
    b4c6:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
    b4ca:	b18a      	cbz	r2, b4f0 <bt_mesh_net_cred_find+0xbc>
			if (cb(rx, in, out, &rx->sub->keys[j].msg)) {
    b4cc:	3397      	adds	r3, #151	; 0x97
    b4ce:	463a      	mov	r2, r7
    b4d0:	4631      	mov	r1, r6
    b4d2:	4620      	mov	r0, r4
    b4d4:	47c0      	blx	r8
    b4d6:	b158      	cbz	r0, b4f0 <bt_mesh_net_cred_find+0xbc>
		for (j = 0; j < ARRAY_SIZE(rx->sub->keys); j++) {
    b4d8:	2201      	movs	r2, #1
				rx->new_key = (j > 0);
    b4da:	7d23      	ldrb	r3, [r4, #20]
    b4dc:	f023 0306 	bic.w	r3, r3, #6
    b4e0:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
    b4e4:	e7cf      	b.n	b486 <bt_mesh_net_cred_find+0x52>
    b4e6:	f04f 0901 	mov.w	r9, #1
    b4ea:	e7dd      	b.n	b4a8 <bt_mesh_net_cred_find+0x74>
		for (j = 0; j < ARRAY_SIZE(rx->sub->keys); j++) {
    b4ec:	2200      	movs	r2, #0
    b4ee:	e7f4      	b.n	b4da <bt_mesh_net_cred_find+0xa6>
	for (i = 0; i < ARRAY_SIZE(subnets); i++) {
    b4f0:	35e0      	adds	r5, #224	; 0xe0
    b4f2:	f1b9 0f00 	cmp.w	r9, #0
    b4f6:	d0f6      	beq.n	b4e6 <bt_mesh_net_cred_find+0xb2>
	return false;
    b4f8:	2000      	movs	r0, #0
    b4fa:	e7c9      	b.n	b490 <bt_mesh_net_cred_find+0x5c>
    b4fc:	20001728 	.word	0x20001728
    b500:	200004c0 	.word	0x200004c0

0000b504 <app_get>:
};

static struct app_key *app_get(uint16_t app_idx)
{
	for (int i = 0; i < ARRAY_SIZE(apps); i++) {
		if (apps[i].app_idx == app_idx) {
    b504:	4b07      	ldr	r3, [pc, #28]	; (b524 <app_get+0x20>)
    b506:	885a      	ldrh	r2, [r3, #2]
    b508:	4282      	cmp	r2, r0
    b50a:	d007      	beq.n	b51c <app_get+0x18>
    b50c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    b50e:	4282      	cmp	r2, r0
    b510:	d106      	bne.n	b520 <app_get+0x1c>
	for (int i = 0; i < ARRAY_SIZE(apps); i++) {
    b512:	2001      	movs	r0, #1
			return &apps[i];
    b514:	2228      	movs	r2, #40	; 0x28
    b516:	fb02 3000 	mla	r0, r2, r0, r3
    b51a:	4770      	bx	lr
	for (int i = 0; i < ARRAY_SIZE(apps); i++) {
    b51c:	2000      	movs	r0, #0
    b51e:	e7f9      	b.n	b514 <app_get+0x10>
		}
	}

	return NULL;
    b520:	2000      	movs	r0, #0
}
    b522:	4770      	bx	lr
    b524:	20000d60 	.word	0x20000d60

0000b528 <app_key_evt>:

	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_APP_KEYS_PENDING);
}

static void app_key_evt(struct app_key *app, enum bt_mesh_key_evt evt)
{
    b528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	STRUCT_SECTION_FOREACH(bt_mesh_app_key_cb, cb) {
    b52a:	4d07      	ldr	r5, [pc, #28]	; (b548 <app_key_evt+0x20>)
    b52c:	4f07      	ldr	r7, [pc, #28]	; (b54c <app_key_evt+0x24>)
{
    b52e:	4604      	mov	r4, r0
    b530:	460e      	mov	r6, r1
	STRUCT_SECTION_FOREACH(bt_mesh_app_key_cb, cb) {
    b532:	42bd      	cmp	r5, r7
    b534:	d300      	bcc.n	b538 <app_key_evt+0x10>
		cb->evt_handler(app->app_idx, app->net_idx, evt);
	}
}
    b536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		cb->evt_handler(app->app_idx, app->net_idx, evt);
    b538:	f855 3b04 	ldr.w	r3, [r5], #4
    b53c:	8821      	ldrh	r1, [r4, #0]
    b53e:	8860      	ldrh	r0, [r4, #2]
    b540:	4632      	mov	r2, r6
    b542:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_mesh_app_key_cb, cb) {
    b544:	e7f5      	b.n	b532 <app_key_evt+0xa>
    b546:	bf00      	nop
    b548:	000265e4 	.word	0x000265e4
    b54c:	000265e8 	.word	0x000265e8

0000b550 <app_key_alloc>:
{
	struct app_key *app = NULL;

	for (int i = 0; i < ARRAY_SIZE(apps); i++) {
		/* Check for already existing app_key */
		if (apps[i].app_idx == app_idx) {
    b550:	4b0d      	ldr	r3, [pc, #52]	; (b588 <app_key_alloc+0x38>)
{
    b552:	b510      	push	{r4, lr}
		if (apps[i].app_idx == app_idx) {
    b554:	885c      	ldrh	r4, [r3, #2]
    b556:	42a0      	cmp	r0, r4
{
    b558:	4602      	mov	r2, r0
		if (apps[i].app_idx == app_idx) {
    b55a:	d00e      	beq.n	b57a <app_key_alloc+0x2a>
			return &apps[i];
		}

		if (!app && apps[i].app_idx == BT_MESH_KEY_UNUSED) {
    b55c:	f64f 71ff 	movw	r1, #65535	; 0xffff
			app = &apps[i];
    b560:	428c      	cmp	r4, r1
    b562:	bf0c      	ite	eq
    b564:	4618      	moveq	r0, r3
    b566:	2000      	movne	r0, #0
		if (apps[i].app_idx == app_idx) {
    b568:	8d5c      	ldrh	r4, [r3, #42]	; 0x2a
    b56a:	42a2      	cmp	r2, r4
    b56c:	d00a      	beq.n	b584 <app_key_alloc+0x34>
		if (!app && apps[i].app_idx == BT_MESH_KEY_UNUSED) {
    b56e:	b918      	cbnz	r0, b578 <app_key_alloc+0x28>
			app = &apps[i];
    b570:	3328      	adds	r3, #40	; 0x28
    b572:	428c      	cmp	r4, r1
    b574:	bf08      	it	eq
    b576:	4618      	moveq	r0, r3
		}
	}

	return app;
}
    b578:	bd10      	pop	{r4, pc}
	for (int i = 0; i < ARRAY_SIZE(apps); i++) {
    b57a:	2000      	movs	r0, #0
			return &apps[i];
    b57c:	2228      	movs	r2, #40	; 0x28
    b57e:	fb02 3000 	mla	r0, r2, r0, r3
    b582:	e7f9      	b.n	b578 <app_key_alloc+0x28>
	for (int i = 0; i < ARRAY_SIZE(apps); i++) {
    b584:	2001      	movs	r0, #1
    b586:	e7f9      	b.n	b57c <app_key_alloc+0x2c>
    b588:	20000d60 	.word	0x20000d60

0000b58c <subnet_evt>:
	return BT_MESH_KEY_UNUSED;
}

static void subnet_evt(struct bt_mesh_subnet *sub, enum bt_mesh_key_evt evt)
{
	if (evt == BT_MESH_KEY_UPDATED || evt == BT_MESH_KEY_ADDED) {
    b58c:	f011 0ffd 	tst.w	r1, #253	; 0xfd
{
    b590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b594:	4607      	mov	r7, r0
    b596:	460d      	mov	r5, r1
	if (evt == BT_MESH_KEY_UPDATED || evt == BT_MESH_KEY_ADDED) {
    b598:	d015      	beq.n	b5c6 <subnet_evt+0x3a>
    b59a:	4c1c      	ldr	r4, [pc, #112]	; (b60c <subnet_evt+0x80>)
    b59c:	f04f 0802 	mov.w	r8, #2
	}

	for (int i = 0; i < ARRAY_SIZE(apps); i++) {
		struct app_key *app = &apps[i];

		if (app->app_idx == BT_MESH_KEY_UNUSED) {
    b5a0:	f64f 79ff 	movw	r9, #65535	; 0xffff
    b5a4:	8863      	ldrh	r3, [r4, #2]
    b5a6:	454b      	cmp	r3, r9
    b5a8:	d008      	beq.n	b5bc <subnet_evt+0x30>
			continue;
		}

		if (app->net_idx != sub->net_idx) {
    b5aa:	8822      	ldrh	r2, [r4, #0]
    b5ac:	8bbb      	ldrh	r3, [r7, #28]
    b5ae:	429a      	cmp	r2, r3
    b5b0:	d104      	bne.n	b5bc <subnet_evt+0x30>
			continue;
		}

		if (evt == BT_MESH_KEY_DELETED) {
    b5b2:	2d01      	cmp	r5, #1
    b5b4:	d10c      	bne.n	b5d0 <subnet_evt+0x44>
			app_key_del(app);
    b5b6:	4620      	mov	r0, r4
    b5b8:	f015 f906 	bl	207c8 <app_key_del>
	for (int i = 0; i < ARRAY_SIZE(apps); i++) {
    b5bc:	f1b8 0f01 	cmp.w	r8, #1
    b5c0:	f104 0428 	add.w	r4, r4, #40	; 0x28
    b5c4:	d101      	bne.n	b5ca <subnet_evt+0x3e>
			app_key_revoke(app);
		} else if (evt == BT_MESH_KEY_SWAPPED && app->updated) {
			app_key_evt(app, BT_MESH_KEY_SWAPPED);
		}
	}
}
    b5c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b5ca:	f04f 0801 	mov.w	r8, #1
    b5ce:	e7e9      	b.n	b5a4 <subnet_evt+0x18>
		} else if (evt == BT_MESH_KEY_REVOKED) {
    b5d0:	2d04      	cmp	r5, #4
    b5d2:	d115      	bne.n	b600 <subnet_evt+0x74>
	if (!app->updated) {
    b5d4:	7923      	ldrb	r3, [r4, #4]
    b5d6:	2b00      	cmp	r3, #0
    b5d8:	d0f0      	beq.n	b5bc <subnet_evt+0x30>
	memcpy(&app->keys[0], &app->keys[1], sizeof(app->keys[0]));
    b5da:	f104 0616 	add.w	r6, r4, #22
    b5de:	2211      	movs	r2, #17
    b5e0:	4631      	mov	r1, r6
    b5e2:	1d60      	adds	r0, r4, #5
    b5e4:	f012 fd25 	bl	1e032 <memcpy>
	memset(&app->keys[1], 0, sizeof(app->keys[1]));
    b5e8:	2211      	movs	r2, #17
    b5ea:	2100      	movs	r1, #0
    b5ec:	4630      	mov	r0, r6
    b5ee:	f012 fd2b 	bl	1e048 <memset>
	app->updated = false;
    b5f2:	2300      	movs	r3, #0
    b5f4:	7123      	strb	r3, [r4, #4]
			app_key_evt(app, BT_MESH_KEY_SWAPPED);
    b5f6:	4629      	mov	r1, r5
    b5f8:	4620      	mov	r0, r4
    b5fa:	f7ff ff95 	bl	b528 <app_key_evt>
    b5fe:	e7dd      	b.n	b5bc <subnet_evt+0x30>
		} else if (evt == BT_MESH_KEY_SWAPPED && app->updated) {
    b600:	2d03      	cmp	r5, #3
    b602:	d1db      	bne.n	b5bc <subnet_evt+0x30>
    b604:	7923      	ldrb	r3, [r4, #4]
    b606:	2b00      	cmp	r3, #0
    b608:	d0d8      	beq.n	b5bc <subnet_evt+0x30>
    b60a:	e7f4      	b.n	b5f6 <subnet_evt+0x6a>
    b60c:	20000d60 	.word	0x20000d60

0000b610 <bt_mesh_app_key_exists>:
		if (apps[i].app_idx == app_idx) {
    b610:	4b05      	ldr	r3, [pc, #20]	; (b628 <bt_mesh_app_key_exists+0x18>)
    b612:	885a      	ldrh	r2, [r3, #2]
    b614:	4282      	cmp	r2, r0
    b616:	d004      	beq.n	b622 <bt_mesh_app_key_exists+0x12>
    b618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    b61a:	1a1b      	subs	r3, r3, r0
    b61c:	4258      	negs	r0, r3
    b61e:	4158      	adcs	r0, r3
    b620:	4770      	bx	lr
			return true;
    b622:	2001      	movs	r0, #1
}
    b624:	4770      	bx	lr
    b626:	bf00      	nop
    b628:	20000d60 	.word	0x20000d60

0000b62c <bt_mesh_app_keys_get>:
{
    b62c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b62e:	4c11      	ldr	r4, [pc, #68]	; (b674 <bt_mesh_app_keys_get+0x48>)
    b630:	4605      	mov	r5, r0
    b632:	2602      	movs	r6, #2
	size_t count = 0;
    b634:	2000      	movs	r0, #0
		if (app->app_idx == BT_MESH_KEY_UNUSED) {
    b636:	f64f 77ff 	movw	r7, #65535	; 0xffff
    b63a:	f8b4 c002 	ldrh.w	ip, [r4, #2]
    b63e:	45bc      	cmp	ip, r7
    b640:	d007      	beq.n	b652 <bt_mesh_app_keys_get+0x26>
		if (net_idx != BT_MESH_KEY_ANY && app->net_idx != net_idx) {
    b642:	42bd      	cmp	r5, r7
    b644:	d003      	beq.n	b64e <bt_mesh_app_keys_get+0x22>
    b646:	f8b4 e000 	ldrh.w	lr, [r4]
    b64a:	45ae      	cmp	lr, r5
    b64c:	d101      	bne.n	b652 <bt_mesh_app_keys_get+0x26>
		if (skip) {
    b64e:	b13b      	cbz	r3, b660 <bt_mesh_app_keys_get+0x34>
			skip--;
    b650:	3b01      	subs	r3, #1
	for (int i = 0; i < ARRAY_SIZE(apps); i++) {
    b652:	2e01      	cmp	r6, #1
    b654:	f104 0428 	add.w	r4, r4, #40	; 0x28
    b658:	d100      	bne.n	b65c <bt_mesh_app_keys_get+0x30>
}
    b65a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b65c:	2601      	movs	r6, #1
    b65e:	e7ec      	b.n	b63a <bt_mesh_app_keys_get+0xe>
		if (count >= max) {
    b660:	4282      	cmp	r2, r0
    b662:	d903      	bls.n	b66c <bt_mesh_app_keys_get+0x40>
		app_idxs[count++] = app->app_idx;
    b664:	f821 c010 	strh.w	ip, [r1, r0, lsl #1]
    b668:	3001      	adds	r0, #1
    b66a:	e7f2      	b.n	b652 <bt_mesh_app_keys_get+0x26>
			return -ENOMEM;
    b66c:	f06f 000b 	mvn.w	r0, #11
    b670:	e7f3      	b.n	b65a <bt_mesh_app_keys_get+0x2e>
    b672:	bf00      	nop
    b674:	20000d60 	.word	0x20000d60

0000b678 <bt_mesh_keys_resolve>:
{
    b678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b67a:	4604      	mov	r4, r0
	if (BT_MESH_IS_DEV_KEY(ctx->app_idx)) {
    b67c:	8840      	ldrh	r0, [r0, #2]
{
    b67e:	461e      	mov	r6, r3
	if (BT_MESH_IS_DEV_KEY(ctx->app_idx)) {
    b680:	1cc3      	adds	r3, r0, #3
    b682:	b29b      	uxth	r3, r3
    b684:	2b01      	cmp	r3, #1
{
    b686:	460f      	mov	r7, r1
    b688:	4615      	mov	r5, r2
	if (BT_MESH_IS_DEV_KEY(ctx->app_idx)) {
    b68a:	d817      	bhi.n	b6bc <bt_mesh_keys_resolve+0x44>
		*sub = bt_mesh_subnet_get(ctx->net_idx);
    b68c:	8820      	ldrh	r0, [r4, #0]
    b68e:	f7ff fe1f 	bl	b2d0 <bt_mesh_subnet_get>
    b692:	6038      	str	r0, [r7, #0]
		if (!*sub) {
    b694:	b910      	cbnz	r0, b69c <bt_mesh_keys_resolve+0x24>
			return -EINVAL;
    b696:	f06f 0015 	mvn.w	r0, #21
}
    b69a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (ctx->app_idx == BT_MESH_KEY_DEV_REMOTE &&
    b69c:	8862      	ldrh	r2, [r4, #2]
    b69e:	f64f 73fd 	movw	r3, #65533	; 0xfffd
    b6a2:	429a      	cmp	r2, r3
    b6a4:	d004      	beq.n	b6b0 <bt_mesh_keys_resolve+0x38>
			*app_key = bt_mesh.dev_key;
    b6a6:	4b12      	ldr	r3, [pc, #72]	; (b6f0 <bt_mesh_keys_resolve+0x78>)
    b6a8:	602b      	str	r3, [r5, #0]
		*aid = 0;
    b6aa:	2000      	movs	r0, #0
    b6ac:	7030      	strb	r0, [r6, #0]
		return 0;
    b6ae:	e7f4      	b.n	b69a <bt_mesh_keys_resolve+0x22>
		    !bt_mesh_has_addr(ctx->addr)) {
    b6b0:	88a0      	ldrh	r0, [r4, #4]
    b6b2:	f001 fd33 	bl	d11c <bt_mesh_has_addr>
		if (ctx->app_idx == BT_MESH_KEY_DEV_REMOTE &&
    b6b6:	2800      	cmp	r0, #0
    b6b8:	d1f5      	bne.n	b6a6 <bt_mesh_keys_resolve+0x2e>
    b6ba:	e7ec      	b.n	b696 <bt_mesh_keys_resolve+0x1e>
	app = app_get(ctx->app_idx);
    b6bc:	f7ff ff22 	bl	b504 <app_get>
	if (!app) {
    b6c0:	4604      	mov	r4, r0
    b6c2:	2800      	cmp	r0, #0
    b6c4:	d0e7      	beq.n	b696 <bt_mesh_keys_resolve+0x1e>
	*sub = bt_mesh_subnet_get(app->net_idx);
    b6c6:	8800      	ldrh	r0, [r0, #0]
    b6c8:	f7ff fe02 	bl	b2d0 <bt_mesh_subnet_get>
    b6cc:	6038      	str	r0, [r7, #0]
	if (!*sub) {
    b6ce:	2800      	cmp	r0, #0
    b6d0:	d0e1      	beq.n	b696 <bt_mesh_keys_resolve+0x1e>
	if ((*sub)->kr_phase == BT_MESH_KR_PHASE_2 && app->updated) {
    b6d2:	7f83      	ldrb	r3, [r0, #30]
    b6d4:	2b02      	cmp	r3, #2
    b6d6:	d107      	bne.n	b6e8 <bt_mesh_keys_resolve+0x70>
    b6d8:	7923      	ldrb	r3, [r4, #4]
    b6da:	b12b      	cbz	r3, b6e8 <bt_mesh_keys_resolve+0x70>
		*aid = app->keys[1].id;
    b6dc:	7da3      	ldrb	r3, [r4, #22]
    b6de:	7033      	strb	r3, [r6, #0]
		*app_key = app->keys[1].val;
    b6e0:	3417      	adds	r4, #23
		*app_key = app->keys[0].val;
    b6e2:	602c      	str	r4, [r5, #0]
	return 0;
    b6e4:	2000      	movs	r0, #0
    b6e6:	e7d8      	b.n	b69a <bt_mesh_keys_resolve+0x22>
		*aid = app->keys[0].id;
    b6e8:	7963      	ldrb	r3, [r4, #5]
    b6ea:	7033      	strb	r3, [r6, #0]
		*app_key = app->keys[0].val;
    b6ec:	3406      	adds	r4, #6
    b6ee:	e7f8      	b.n	b6e2 <bt_mesh_keys_resolve+0x6a>
    b6f0:	20001958 	.word	0x20001958

0000b6f4 <bt_mesh_app_key_find>:
{
    b6f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b6f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
    b6fc:	4688      	mov	r8, r1
    b6fe:	4616      	mov	r6, r2
    b700:	461f      	mov	r7, r3
	if (dev_key) {
    b702:	4604      	mov	r4, r0
    b704:	b180      	cbz	r0, b728 <bt_mesh_app_key_find+0x34>
		if (BT_MESH_ADDR_IS_UNICAST(rx->ctx.recv_dst)) {
    b706:	f9b2 300a 	ldrsh.w	r3, [r2, #10]
    b70a:	2b00      	cmp	r3, #0
    b70c:	dc03      	bgt.n	b716 <bt_mesh_app_key_find+0x22>
		return BT_MESH_KEY_UNUSED;
    b70e:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
    b712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			err = cb(rx, bt_mesh.dev_key, cb_data);
    b716:	4919      	ldr	r1, [pc, #100]	; (b77c <bt_mesh_app_key_find+0x88>)
    b718:	464a      	mov	r2, r9
    b71a:	4630      	mov	r0, r6
    b71c:	47b8      	blx	r7
			if (!err) {
    b71e:	2800      	cmp	r0, #0
    b720:	d1f5      	bne.n	b70e <bt_mesh_app_key_find+0x1a>
				return BT_MESH_KEY_DEV_LOCAL;
    b722:	f64f 70fe 	movw	r0, #65534	; 0xfffe
    b726:	e7f4      	b.n	b712 <bt_mesh_app_key_find+0x1e>
    b728:	4d15      	ldr	r5, [pc, #84]	; (b780 <bt_mesh_app_key_find+0x8c>)
		if (app->app_idx == BT_MESH_KEY_UNUSED) {
    b72a:	f64f 7aff 	movw	sl, #65535	; 0xffff
    b72e:	f835 3c14 	ldrh.w	r3, [r5, #-20]
    b732:	4553      	cmp	r3, sl
    b734:	4629      	mov	r1, r5
    b736:	d01b      	beq.n	b770 <bt_mesh_app_key_find+0x7c>
		if (app->net_idx != rx->sub->net_idx) {
    b738:	6833      	ldr	r3, [r6, #0]
    b73a:	f835 2c16 	ldrh.w	r2, [r5, #-22]
    b73e:	8b9b      	ldrh	r3, [r3, #28]
    b740:	429a      	cmp	r2, r3
    b742:	d115      	bne.n	b770 <bt_mesh_app_key_find+0x7c>
		if (rx->new_key && app->updated) {
    b744:	7d33      	ldrb	r3, [r6, #20]
    b746:	079b      	lsls	r3, r3, #30
    b748:	d502      	bpl.n	b750 <bt_mesh_app_key_find+0x5c>
    b74a:	f815 3c12 	ldrb.w	r3, [r5, #-18]
    b74e:	b90b      	cbnz	r3, b754 <bt_mesh_app_key_find+0x60>
			cred = &app->keys[0];
    b750:	f1a5 0111 	sub.w	r1, r5, #17
		if (cred->id != aid) {
    b754:	780b      	ldrb	r3, [r1, #0]
    b756:	4543      	cmp	r3, r8
    b758:	d10a      	bne.n	b770 <bt_mesh_app_key_find+0x7c>
		err = cb(rx, cred->val, cb_data);
    b75a:	464a      	mov	r2, r9
    b75c:	3101      	adds	r1, #1
    b75e:	4630      	mov	r0, r6
    b760:	47b8      	blx	r7
		if (err) {
    b762:	b928      	cbnz	r0, b770 <bt_mesh_app_key_find+0x7c>
		return app->app_idx;
    b764:	4807      	ldr	r0, [pc, #28]	; (b784 <bt_mesh_app_key_find+0x90>)
    b766:	2328      	movs	r3, #40	; 0x28
    b768:	fb03 0404 	mla	r4, r3, r4, r0
    b76c:	8860      	ldrh	r0, [r4, #2]
    b76e:	e7d0      	b.n	b712 <bt_mesh_app_key_find+0x1e>
	for (i = 0; i < ARRAY_SIZE(apps); i++) {
    b770:	3528      	adds	r5, #40	; 0x28
    b772:	2c00      	cmp	r4, #0
    b774:	d1cb      	bne.n	b70e <bt_mesh_app_key_find+0x1a>
    b776:	2401      	movs	r4, #1
    b778:	e7d9      	b.n	b72e <bt_mesh_app_key_find+0x3a>
    b77a:	bf00      	nop
    b77c:	20001958 	.word	0x20001958
    b780:	20000d76 	.word	0x20000d76
    b784:	20000d60 	.word	0x20000d60

0000b788 <bt_mesh_app_keys_reset>:
BT_MESH_SUBNET_CB_DEFINE(app_keys) = {
	.evt_handler = subnet_evt,
};

void bt_mesh_app_keys_reset(void)
{
    b788:	b510      	push	{r4, lr}
	for (int i = 0; i < ARRAY_SIZE(apps); i++) {
		struct app_key *app = &apps[i];

		if (app->app_idx != BT_MESH_KEY_UNUSED) {
    b78a:	4c0a      	ldr	r4, [pc, #40]	; (b7b4 <bt_mesh_app_keys_reset+0x2c>)
    b78c:	8862      	ldrh	r2, [r4, #2]
    b78e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b792:	429a      	cmp	r2, r3
    b794:	d002      	beq.n	b79c <bt_mesh_app_keys_reset+0x14>
			app_key_del(app);
    b796:	4620      	mov	r0, r4
    b798:	f015 f816 	bl	207c8 <app_key_del>
		if (app->app_idx != BT_MESH_KEY_UNUSED) {
    b79c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    b79e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b7a2:	429a      	cmp	r2, r3
    b7a4:	d004      	beq.n	b7b0 <bt_mesh_app_keys_reset+0x28>
		}
	}
}
    b7a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			app_key_del(app);
    b7aa:	4803      	ldr	r0, [pc, #12]	; (b7b8 <bt_mesh_app_keys_reset+0x30>)
    b7ac:	f015 b80c 	b.w	207c8 <app_key_del>
}
    b7b0:	bd10      	pop	{r4, pc}
    b7b2:	bf00      	nop
    b7b4:	20000d60 	.word	0x20000d60
    b7b8:	20000d88 	.word	0x20000d88

0000b7bc <seg_rx_reset>:
	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_ACK, buf, sizeof(buf),
				NULL, NULL);
}

static void seg_rx_reset(struct seg_rx *rx, bool full_reset)
{
    b7bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b7c0:	4604      	mov	r4, r0
	BT_DBG("rx %p", rx);

	/* If this fails, the handler will exit early on the next execution, as
	 * it checks rx->in_use.
	 */
	(void)k_work_cancel_delayable(&rx->ack);
    b7c2:	3030      	adds	r0, #48	; 0x30
{
    b7c4:	460d      	mov	r5, r1
	(void)k_work_cancel_delayable(&rx->ack);
    b7c6:	f01a fa71 	bl	25cac <k_work_cancel_delayable>

	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && rx->obo &&
    b7ca:	f994 301f 	ldrsb.w	r3, [r4, #31]
    b7ce:	2b00      	cmp	r3, #0
    b7d0:	da10      	bge.n	b7f4 <seg_rx_reset+0x38>
	    rx->block != BLOCK_COMPLETE(rx->seg_n)) {
    b7d2:	7fe3      	ldrb	r3, [r4, #31]
    b7d4:	f003 031f 	and.w	r3, r3, #31
    b7d8:	1c5a      	adds	r2, r3, #1
    b7da:	2301      	movs	r3, #1
    b7dc:	4093      	lsls	r3, r2
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && rx->obo &&
    b7de:	6a62      	ldr	r2, [r4, #36]	; 0x24
	    rx->block != BLOCK_COMPLETE(rx->seg_n)) {
    b7e0:	3b01      	subs	r3, #1
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && rx->obo &&
    b7e2:	429a      	cmp	r2, r3
    b7e4:	d006      	beq.n	b7f4 <seg_rx_reset+0x38>
		BT_WARN("Clearing incomplete buffers from Friend queue");
		bt_mesh_friend_clear_incomplete(rx->sub, rx->src, rx->dst,
    b7e6:	8b62      	ldrh	r2, [r4, #26]
    b7e8:	8b21      	ldrh	r1, [r4, #24]
    b7ea:	6820      	ldr	r0, [r4, #0]
    b7ec:	f104 0310 	add.w	r3, r4, #16
    b7f0:	f002 ff1c 	bl	e62c <bt_mesh_friend_clear_incomplete>
{
    b7f4:	2600      	movs	r6, #0
	for (i = 0; i <= rx->seg_n; i++) {
		if (!rx->seg[i]) {
			continue;
		}

		k_mem_slab_free(&segs, &rx->seg[i]);
    b7f6:	f8df 8040 	ldr.w	r8, [pc, #64]	; b838 <seg_rx_reset+0x7c>
    b7fa:	1d27      	adds	r7, r4, #4
		rx->seg[i] = NULL;
    b7fc:	46b1      	mov	r9, r6
		if (!rx->seg[i]) {
    b7fe:	4639      	mov	r1, r7
    b800:	3704      	adds	r7, #4
    b802:	680b      	ldr	r3, [r1, #0]
    b804:	b123      	cbz	r3, b810 <seg_rx_reset+0x54>
		k_mem_slab_free(&segs, &rx->seg[i]);
    b806:	4640      	mov	r0, r8
    b808:	f01a f855 	bl	258b6 <k_mem_slab_free>
		rx->seg[i] = NULL;
    b80c:	f847 9c04 	str.w	r9, [r7, #-4]
	for (i = 0; i <= rx->seg_n; i++) {
    b810:	7fe3      	ldrb	r3, [r4, #31]
    b812:	3601      	adds	r6, #1
    b814:	f003 021f 	and.w	r2, r3, #31
    b818:	4296      	cmp	r6, r2
    b81a:	ddf0      	ble.n	b7fe <seg_rx_reset+0x42>
	}

	rx->in_use = 0U;
    b81c:	f36f 1386 	bfc	r3, #6, #1
    b820:	77e3      	strb	r3, [r4, #31]

	/* We don't always reset these values since we need to be able to
	 * send an ack if we receive a segment after we've already received
	 * the full SDU.
	 */
	if (full_reset) {
    b822:	b135      	cbz	r5, b832 <seg_rx_reset+0x76>
		rx->seq_auth = 0U;
    b824:	2000      	movs	r0, #0
    b826:	2100      	movs	r1, #0
    b828:	e9c4 0104 	strd	r0, r1, [r4, #16]
		rx->sub = NULL;
    b82c:	2300      	movs	r3, #0
    b82e:	6023      	str	r3, [r4, #0]
		rx->src = BT_MESH_ADDR_UNASSIGNED;
    b830:	61a3      	str	r3, [r4, #24]
		rx->dst = BT_MESH_ADDR_UNASSIGNED;
	}
}
    b832:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b836:	bf00      	nop
    b838:	20000ed0 	.word	0x20000ed0

0000b83c <seg_tx_reset>:
{
    b83c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b840:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable(&tx->retransmit);
    b842:	3030      	adds	r0, #48	; 0x30
    b844:	f01a fa32 	bl	25cac <k_work_cancel_delayable>
	tx->cb = NULL;
    b848:	2500      	movs	r5, #0
	tx->blocked = false;
    b84a:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
	k_mem_slab_free(&segs, (void **)&tx->seg[seg_idx]);
    b84e:	4f20      	ldr	r7, [pc, #128]	; (b8d0 <seg_tx_reset+0x94>)
	tx->sub = NULL;
    b850:	6025      	str	r5, [r4, #0]
	tx->seq_auth = 0U;
    b852:	2000      	movs	r0, #0
    b854:	2100      	movs	r1, #0
	tx->cb_data = NULL;
    b856:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
	tx->seq_auth = 0U;
    b85a:	e9c4 0104 	strd	r0, r1, [r4, #16]
	tx->blocked = false;
    b85e:	f365 0200 	bfi	r2, r5, #0, #1
	tx->src = BT_MESH_ADDR_UNASSIGNED;
    b862:	61a5      	str	r5, [r4, #24]
	tx->blocked = false;
    b864:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
	for (i = 0; i <= tx->seg_n && tx->nack_count; i++) {
    b868:	1d26      	adds	r6, r4, #4
	tx->seg[seg_idx] = NULL;
    b86a:	46a8      	mov	r8, r5
	for (i = 0; i <= tx->seg_n && tx->nack_count; i++) {
    b86c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    b870:	b19b      	cbz	r3, b89a <seg_tx_reset+0x5e>
		if (!tx->seg[i]) {
    b872:	6833      	ldr	r3, [r6, #0]
    b874:	b153      	cbz	r3, b88c <seg_tx_reset+0x50>
	k_mem_slab_free(&segs, (void **)&tx->seg[seg_idx]);
    b876:	4631      	mov	r1, r6
    b878:	4638      	mov	r0, r7
    b87a:	f01a f81c 	bl	258b6 <k_mem_slab_free>
	tx->seg[seg_idx] = NULL;
    b87e:	f8c6 8000 	str.w	r8, [r6]
	tx->nack_count--;
    b882:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    b886:	3b01      	subs	r3, #1
    b888:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	for (i = 0; i <= tx->seg_n && tx->nack_count; i++) {
    b88c:	f894 3020 	ldrb.w	r3, [r4, #32]
    b890:	3501      	adds	r5, #1
    b892:	42ab      	cmp	r3, r5
    b894:	f106 0604 	add.w	r6, r6, #4
    b898:	dae8      	bge.n	b86c <seg_tx_reset+0x30>
	tx->nack_count = 0;
    b89a:	2100      	movs	r1, #0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b89c:	4b0d      	ldr	r3, [pc, #52]	; (b8d4 <seg_tx_reset+0x98>)
    b89e:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    b8a2:	f3bf 8f5b 	dmb	ish
    b8a6:	e853 2f00 	ldrex	r2, [r3]
    b8aa:	f022 0020 	bic.w	r0, r2, #32
    b8ae:	e843 0400 	strex	r4, r0, [r3]
    b8b2:	2c00      	cmp	r4, #0
    b8b4:	d1f7      	bne.n	b8a6 <seg_tx_reset+0x6a>
    b8b6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_mesh.flags, BT_MESH_IVU_PENDING)) {
    b8ba:	0692      	lsls	r2, r2, #26
    b8bc:	d505      	bpl.n	b8ca <seg_tx_reset+0x8e>
}
    b8be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_mesh_net_iv_update(bt_mesh.iv_index, false);
    b8c2:	f853 0c08 	ldr.w	r0, [r3, #-8]
    b8c6:	f7ff b899 	b.w	a9fc <bt_mesh_net_iv_update>
}
    b8ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b8ce:	bf00      	nop
    b8d0:	20000ed0 	.word	0x20000ed0
    b8d4:	20001730 	.word	0x20001730

0000b8d8 <seg_tx_complete>:
{
    b8d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b8dc:	4604      	mov	r4, r0
	void *cb_data = tx->cb_data;
    b8de:	e9d0 670a 	ldrd	r6, r7, [r0, #40]	; 0x28
		if (&seg_tx[i] != tx &&
    b8e2:	4813      	ldr	r0, [pc, #76]	; (b930 <seg_tx_complete+0x58>)
    b8e4:	4284      	cmp	r4, r0
{
    b8e6:	460d      	mov	r5, r1
		if (&seg_tx[i] != tx &&
    b8e8:	d014      	beq.n	b914 <seg_tx_complete+0x3c>
		    seg_tx[i].blocked &&
    b8ea:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
		if (&seg_tx[i] != tx &&
    b8ee:	07da      	lsls	r2, r3, #31
    b8f0:	d510      	bpl.n	b914 <seg_tx_complete+0x3c>
	return (tx->src == src) && (tx->dst == dst);
    b8f2:	8b01      	ldrh	r1, [r0, #24]
    b8f4:	8b22      	ldrh	r2, [r4, #24]
    b8f6:	4291      	cmp	r1, r2
    b8f8:	d10c      	bne.n	b914 <seg_tx_complete+0x3c>
    b8fa:	8b41      	ldrh	r1, [r0, #26]
    b8fc:	8b62      	ldrh	r2, [r4, #26]
    b8fe:	4291      	cmp	r1, r2
    b900:	d108      	bne.n	b914 <seg_tx_complete+0x3c>
		blocked->blocked = false;
    b902:	f36f 0300 	bfc	r3, #0, #1
    b906:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
		k_work_reschedule(&blocked->retransmit, K_NO_WAIT);
    b90a:	2200      	movs	r2, #0
    b90c:	2300      	movs	r3, #0
    b90e:	3030      	adds	r0, #48	; 0x30
    b910:	f00f ff02 	bl	1b718 <k_work_reschedule>
	seg_tx_reset(tx);
    b914:	4620      	mov	r0, r4
    b916:	f7ff ff91 	bl	b83c <seg_tx_reset>
	if (cb && cb->end) {
    b91a:	b136      	cbz	r6, b92a <seg_tx_complete+0x52>
    b91c:	6873      	ldr	r3, [r6, #4]
    b91e:	b123      	cbz	r3, b92a <seg_tx_complete+0x52>
		cb->end(err, cb_data);
    b920:	4639      	mov	r1, r7
    b922:	4628      	mov	r0, r5
}
    b924:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb->end(err, cb_data);
    b928:	4718      	bx	r3
}
    b92a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b92e:	bf00      	nop
    b930:	200019c8 	.word	0x200019c8

0000b934 <seg_tx_send_unacked>:
{
    b934:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!tx->nack_count) {
    b938:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
{
    b93c:	b089      	sub	sp, #36	; 0x24
    b93e:	4604      	mov	r4, r0
	if (!tx->nack_count) {
    b940:	b383      	cbz	r3, b9a4 <seg_tx_send_unacked+0x70>
		.net_idx = tx->sub->net_idx,
    b942:	6801      	ldr	r1, [r0, #0]
	struct bt_mesh_net_tx net_tx = {
    b944:	9105      	str	r1, [sp, #20]
	struct bt_mesh_msg_ctx ctx = {
    b946:	2300      	movs	r3, #0
    b948:	2501      	movs	r5, #1
    b94a:	f8cd 300e 	str.w	r3, [sp, #14]
    b94e:	8b8b      	ldrh	r3, [r1, #28]
    b950:	f8ad 3008 	strh.w	r3, [sp, #8]
	struct bt_mesh_net_tx net_tx = {
    b954:	a902      	add	r1, sp, #8
	struct bt_mesh_msg_ctx ctx = {
    b956:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
    b95a:	f88d 5012 	strb.w	r5, [sp, #18]
	struct bt_mesh_net_tx net_tx = {
    b95e:	9106      	str	r1, [sp, #24]
	struct bt_mesh_msg_ctx ctx = {
    b960:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
	struct bt_mesh_net_tx net_tx = {
    b964:	8b01      	ldrh	r1, [r0, #24]
	struct bt_mesh_msg_ctx ctx = {
    b966:	f88d 5013 	strb.w	r5, [sp, #19]
	struct bt_mesh_net_tx net_tx = {
    b96a:	f8ad 101c 	strh.w	r1, [sp, #28]
    b96e:	7f85      	ldrb	r5, [r0, #30]
    b970:	7fc1      	ldrb	r1, [r0, #31]
    b972:	f88d 101e 	strb.w	r1, [sp, #30]
		.friend_cred = tx->friend_cred,
    b976:	f3c3 1140 	ubfx	r1, r3, #5, #1
	struct bt_mesh_net_tx net_tx = {
    b97a:	ea41 0185 	orr.w	r1, r1, r5, lsl #2
	struct bt_mesh_msg_ctx ctx = {
    b97e:	f343 0240 	sbfx	r2, r3, #1, #1
	struct bt_mesh_net_tx net_tx = {
    b982:	f88d 101f 	strb.w	r1, [sp, #31]
	if (!tx->attempts) {
    b986:	f890 1023 	ldrb.w	r1, [r0, #35]	; 0x23
	struct bt_mesh_msg_ctx ctx = {
    b98a:	f8ad 200a 	strh.w	r2, [sp, #10]
		.addr = tx->dst,
    b98e:	8b42      	ldrh	r2, [r0, #26]
	struct bt_mesh_msg_ctx ctx = {
    b990:	f8ad 200c 	strh.w	r2, [sp, #12]
	if (!tx->attempts) {
    b994:	b949      	cbnz	r1, b9aa <seg_tx_send_unacked+0x76>
		if (BT_MESH_ADDR_IS_UNICAST(tx->dst)) {
    b996:	b212      	sxth	r2, r2
    b998:	2a00      	cmp	r2, #0
			seg_tx_complete(tx, -ETIMEDOUT);
    b99a:	bfc8      	it	gt
    b99c:	f06f 0173 	mvngt.w	r1, #115	; 0x73
			seg_tx_complete(tx, 0);
    b9a0:	f7ff ff9a 	bl	b8d8 <seg_tx_complete>
}
    b9a4:	b009      	add	sp, #36	; 0x24
    b9a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	tx->sending = 1U;
    b9aa:	f043 0310 	orr.w	r3, r3, #16
		err = bt_mesh_net_send(&net_tx, seg, &seg_sent_cb, tx);
    b9ae:	f8df 80d8 	ldr.w	r8, [pc, #216]	; ba88 <seg_tx_send_unacked+0x154>
	tx->sending = 1U;
    b9b2:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
					 tx->xmit, BUF_TIMEOUT);
    b9b6:	2600      	movs	r6, #0
    b9b8:	2700      	movs	r7, #0
	for (; tx->seg_o <= tx->seg_n; tx->seg_o++) {
    b9ba:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    b9be:	f894 2020 	ldrb.w	r2, [r4, #32]
    b9c2:	429a      	cmp	r2, r3
    b9c4:	d208      	bcs.n	b9d8 <seg_tx_send_unacked+0xa4>
	tx->seg_o = 0U;
    b9c6:	2300      	movs	r3, #0
    b9c8:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	tx->attempts--;
    b9cc:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
    b9d0:	3b01      	subs	r3, #1
    b9d2:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
    b9d6:	e030      	b.n	ba3a <seg_tx_send_unacked+0x106>
		if (!tx->seg[tx->seg_o]) {
    b9d8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    b9dc:	685b      	ldr	r3, [r3, #4]
    b9de:	b92b      	cbnz	r3, b9ec <seg_tx_send_unacked+0xb8>
	for (; tx->seg_o <= tx->seg_n; tx->seg_o++) {
    b9e0:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    b9e4:	3301      	adds	r3, #1
    b9e6:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    b9ea:	e7e6      	b.n	b9ba <seg_tx_send_unacked+0x86>
		seg = bt_mesh_adv_create(BT_MESH_ADV_DATA, BT_MESH_LOCAL_ADV,
    b9ec:	2101      	movs	r1, #1
    b9ee:	e9cd 6700 	strd	r6, r7, [sp]
    b9f2:	7fe2      	ldrb	r2, [r4, #31]
    b9f4:	4608      	mov	r0, r1
    b9f6:	f7fe fc53 	bl	a2a0 <bt_mesh_adv_create>
		if (!seg) {
    b9fa:	4605      	mov	r5, r0
    b9fc:	b1e8      	cbz	r0, ba3a <seg_tx_send_unacked+0x106>
	net_buf_simple_reserve(&buf->b, reserve);
    b9fe:	f100 0908 	add.w	r9, r0, #8
    ba02:	2109      	movs	r1, #9
    ba04:	4648      	mov	r0, r9
    ba06:	f019 f920 	bl	24c4a <net_buf_simple_reserve>
		seg_tx_buf_build(tx, tx->seg_o, &seg->b);
    ba0a:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
    ba0e:	464a      	mov	r2, r9
    ba10:	4620      	mov	r0, r4
    ba12:	f014 ff92 	bl	2093a <seg_tx_buf_build>
		tx->seg_pending++;
    ba16:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
    ba1a:	3301      	adds	r3, #1
    ba1c:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
		err = bt_mesh_net_send(&net_tx, seg, &seg_sent_cb, tx);
    ba20:	4642      	mov	r2, r8
    ba22:	4623      	mov	r3, r4
    ba24:	4629      	mov	r1, r5
    ba26:	a805      	add	r0, sp, #20
    ba28:	f7ff f90e 	bl	ac48 <bt_mesh_net_send>
		if (err) {
    ba2c:	2800      	cmp	r0, #0
    ba2e:	d0d7      	beq.n	b9e0 <seg_tx_send_unacked+0xac>
			tx->seg_pending--;
    ba30:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
    ba34:	3b01      	subs	r3, #1
    ba36:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	if (!tx->seg_pending) {
    ba3a:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
    ba3e:	b9e1      	cbnz	r1, ba7a <seg_tx_send_unacked+0x146>
				  K_MSEC(SEG_RETRANSMIT_TIMEOUT(tx)));
    ba40:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
    ba44:	2b00      	cmp	r3, #0
    ba46:	bfc4      	itt	gt
    ba48:	f894 2024 	ldrbgt.w	r2, [r4, #36]	; 0x24
    ba4c:	f44f 73c8 	movgt.w	r3, #400	; 0x190
    ba50:	f04f 0032 	mov.w	r0, #50	; 0x32
    ba54:	bfc8      	it	gt
    ba56:	fb00 3002 	mlagt	r0, r0, r2, r3
    ba5a:	03c0      	lsls	r0, r0, #15
    ba5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ba60:	2300      	movs	r3, #0
    ba62:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    ba66:	03c9      	lsls	r1, r1, #15
    ba68:	f7f5 fd06 	bl	1478 <__aeabi_uldivmod>
		k_work_reschedule(&tx->retransmit,
    ba6c:	f104 0530 	add.w	r5, r4, #48	; 0x30
    ba70:	4602      	mov	r2, r0
    ba72:	460b      	mov	r3, r1
    ba74:	4628      	mov	r0, r5
    ba76:	f00f fe4f 	bl	1b718 <k_work_reschedule>
	tx->sending = 0U;
    ba7a:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
    ba7e:	f36f 1304 	bfc	r3, #4, #1
    ba82:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
    ba86:	e78d      	b.n	b9a4 <seg_tx_send_unacked+0x70>
    ba88:	00026c24 	.word	0x00026c24

0000ba8c <ctl_recv>:
{
    ba8c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    ba90:	460e      	mov	r6, r1
	switch (ctl_op) {
    ba92:	f016 067f 	ands.w	r6, r6, #127	; 0x7f
{
    ba96:	4604      	mov	r4, r0
    ba98:	4611      	mov	r1, r2
    ba9a:	4698      	mov	r8, r3
	switch (ctl_op) {
    ba9c:	d010      	beq.n	bac0 <ctl_recv+0x34>
    ba9e:	2e0a      	cmp	r6, #10
    baa0:	f000 8099 	beq.w	bbd6 <ctl_recv+0x14a>
	if (!rx->local_match) {
    baa4:	7d03      	ldrb	r3, [r0, #20]
    baa6:	f013 0540 	ands.w	r5, r3, #64	; 0x40
    baaa:	d00e      	beq.n	baca <ctl_recv+0x3e>
		switch (ctl_op) {
    baac:	1e75      	subs	r5, r6, #1
    baae:	2d07      	cmp	r5, #7
    bab0:	f200 80b4 	bhi.w	bc1c <ctl_recv+0x190>
    bab4:	e8df f005 	tbb	[pc, r5]
    bab8:	b299b294 	.word	0xb299b294
    babc:	ada8a39e 	.word	0xada8a39e
	if (buf->len < 6) {
    bac0:	8893      	ldrh	r3, [r2, #4]
    bac2:	2b05      	cmp	r3, #5
    bac4:	d805      	bhi.n	bad2 <ctl_recv+0x46>
		return -EINVAL;
    bac6:	f06f 0515 	mvn.w	r5, #21
}
    baca:	4628      	mov	r0, r5
    bacc:	b002      	add	sp, #8
    bace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	seq_zero = net_buf_simple_pull_be16(buf);
    bad2:	4610      	mov	r0, r2
    bad4:	9201      	str	r2, [sp, #4]
    bad6:	f019 f9b9 	bl	24e4c <net_buf_simple_pull_be16>
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && rx->friend_match) {
    bada:	f994 3014 	ldrsb.w	r3, [r4, #20]
    bade:	9901      	ldr	r1, [sp, #4]
    bae0:	2b00      	cmp	r3, #0
	obo = seq_zero >> 15;
    bae2:	f3c0 39cf 	ubfx	r9, r0, #15, #16
	seq_zero = (seq_zero >> 2) & TRANS_SEQ_ZERO_MASK;
    bae6:	f3c0 058c 	ubfx	r5, r0, #2, #13
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && rx->friend_match) {
    baea:	da0c      	bge.n	bb06 <ctl_recv+0x7a>
		*seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_RX(rx), seq_zero);
    baec:	7d22      	ldrb	r2, [r4, #20]
    baee:	f002 0301 	and.w	r3, r2, #1
    baf2:	4a4c      	ldr	r2, [pc, #304]	; (bc24 <ctl_recv+0x198>)
    baf4:	6812      	ldr	r2, [r2, #0]
    baf6:	1ad2      	subs	r2, r2, r3
    baf8:	0a13      	lsrs	r3, r2, #8
    bafa:	ea45 6202 	orr.w	r2, r5, r2, lsl #24
    bafe:	e9c8 2300 	strd	r2, r3, [r8]
		return 0;
    bb02:	4635      	mov	r5, r6
    bb04:	e7e1      	b.n	baca <ctl_recv+0x3e>
	ack = net_buf_simple_pull_be32(buf);
    bb06:	4608      	mov	r0, r1
    bb08:	f019 f9b2 	bl	24e70 <net_buf_simple_pull_be32>
	tx = seg_tx_lookup(seq_zero, obo, rx->ctx.addr);
    bb0c:	8921      	ldrh	r1, [r4, #8]
		if ((tx->seq_auth & TRANS_SEQ_ZERO_MASK) != seq_zero) {
    bb0e:	4c46      	ldr	r4, [pc, #280]	; (bc28 <ctl_recv+0x19c>)
	ack = net_buf_simple_pull_be32(buf);
    bb10:	4607      	mov	r7, r0
		if ((tx->seq_auth & TRANS_SEQ_ZERO_MASK) != seq_zero) {
    bb12:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
    bb16:	f3c2 030c 	ubfx	r3, r2, #0, #13
    bb1a:	42b6      	cmp	r6, r6
    bb1c:	bf08      	it	eq
    bb1e:	42ab      	cmpeq	r3, r5
    bb20:	d1d1      	bne.n	bac6 <ctl_recv+0x3a>
		if (tx->dst == addr) {
    bb22:	8b63      	ldrh	r3, [r4, #26]
    bb24:	428b      	cmp	r3, r1
    bb26:	d00a      	beq.n	bb3e <ctl_recv+0xb2>
		if (obo && tx->nack_count == tx->seg_n + 1) {
    bb28:	f1b9 0f00 	cmp.w	r9, #0
    bb2c:	d0cb      	beq.n	bac6 <ctl_recv+0x3a>
    bb2e:	f894 3020 	ldrb.w	r3, [r4, #32]
    bb32:	f894 5022 	ldrb.w	r5, [r4, #34]	; 0x22
    bb36:	3301      	adds	r3, #1
    bb38:	429d      	cmp	r5, r3
    bb3a:	d1c4      	bne.n	bac6 <ctl_recv+0x3a>
			tx->dst = addr;
    bb3c:	8361      	strh	r1, [r4, #26]
	if (!BT_MESH_ADDR_IS_UNICAST(tx->dst)) {
    bb3e:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
    bb42:	2b00      	cmp	r3, #0
    bb44:	ddbf      	ble.n	bac6 <ctl_recv+0x3a>
	*seq_auth = tx->seq_auth;
    bb46:	e9c8 2000 	strd	r2, r0, [r8]
	if (!ack) {
    bb4a:	b937      	cbnz	r7, bb5a <ctl_recv+0xce>
		seg_tx_complete(tx, -ECANCELED);
    bb4c:	4836      	ldr	r0, [pc, #216]	; (bc28 <ctl_recv+0x19c>)
    bb4e:	f06f 018b 	mvn.w	r1, #139	; 0x8b
    bb52:	f7ff fec1 	bl	b8d8 <seg_tx_complete>
		return 0;
    bb56:	463d      	mov	r5, r7
    bb58:	e7b7      	b.n	baca <ctl_recv+0x3e>
	if (find_msb_set(ack) - 1 > tx->seg_n) {
    bb5a:	f894 2020 	ldrb.w	r2, [r4, #32]
{
	if (op == 0) {
		return 0;
	}

	return 32 - __builtin_clz(op);
    bb5e:	fab7 f387 	clz	r3, r7
    bb62:	f1c3 031f 	rsb	r3, r3, #31
    bb66:	4293      	cmp	r3, r2
    bb68:	d8ad      	bhi.n	bac6 <ctl_recv+0x3a>
	k_mem_slab_free(&segs, (void **)&tx->seg[seg_idx]);
    bb6a:	f8df a0c0 	ldr.w	sl, [pc, #192]	; bc2c <ctl_recv+0x1a0>
	tx->seg[seg_idx] = NULL;
    bb6e:	f04f 0800 	mov.w	r8, #0
		ack &= ~BIT(bit - 1);
    bb72:	f04f 0901 	mov.w	r9, #1
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS
	return __builtin_ffs(op);
    bb76:	2f00      	cmp	r7, #0
    bb78:	fa97 f6a7 	rbit	r6, r7
    bb7c:	fab6 f686 	clz	r6, r6
    bb80:	bf08      	it	eq
    bb82:	f04f 36ff 	moveq.w	r6, #4294967295	; 0xffffffff
	while ((bit = find_lsb_set(ack))) {
    bb86:	1c75      	adds	r5, r6, #1
    bb88:	d108      	bne.n	bb9c <ctl_recv+0x110>
	if (tx->nack_count) {
    bb8a:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    bb8e:	b1eb      	cbz	r3, bbcc <ctl_recv+0x140>
		k_work_reschedule(&tx->retransmit, K_NO_WAIT);
    bb90:	2200      	movs	r2, #0
    bb92:	2300      	movs	r3, #0
    bb94:	4826      	ldr	r0, [pc, #152]	; (bc30 <ctl_recv+0x1a4>)
    bb96:	f00f fdbf 	bl	1b718 <k_work_reschedule>
    bb9a:	e796      	b.n	baca <ctl_recv+0x3e>
		if (tx->seg[bit - 1]) {
    bb9c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
    bba0:	685b      	ldr	r3, [r3, #4]
    bba2:	b173      	cbz	r3, bbc2 <ctl_recv+0x136>
	k_mem_slab_free(&segs, (void **)&tx->seg[seg_idx]);
    bba4:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    bba8:	4650      	mov	r0, sl
    bbaa:	f019 fe84 	bl	258b6 <k_mem_slab_free>
    bbae:	b2f3      	uxtb	r3, r6
	tx->seg[seg_idx] = NULL;
    bbb0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    bbb4:	f8c3 8004 	str.w	r8, [r3, #4]
	tx->nack_count--;
    bbb8:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    bbbc:	3b01      	subs	r3, #1
    bbbe:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
		ack &= ~BIT(bit - 1);
    bbc2:	fa09 f606 	lsl.w	r6, r9, r6
    bbc6:	ea27 0706 	bic.w	r7, r7, r6
    bbca:	e7d4      	b.n	bb76 <ctl_recv+0xea>
		seg_tx_complete(tx, 0);
    bbcc:	4816      	ldr	r0, [pc, #88]	; (bc28 <ctl_recv+0x19c>)
    bbce:	4629      	mov	r1, r5
    bbd0:	f7ff fe82 	bl	b8d8 <seg_tx_complete>
    bbd4:	e779      	b.n	baca <ctl_recv+0x3e>
}
    bbd6:	b002      	add	sp, #8
    bbd8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return bt_mesh_hb_recv(rx, buf);
    bbdc:	f000 be9a 	b.w	c914 <bt_mesh_hb_recv>
}
    bbe0:	b002      	add	sp, #8
    bbe2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return bt_mesh_friend_poll(rx, buf);
    bbe6:	f002 ba07 	b.w	dff8 <bt_mesh_friend_poll>
}
    bbea:	b002      	add	sp, #8
    bbec:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return bt_mesh_friend_req(rx, buf);
    bbf0:	f002 ba9a 	b.w	e128 <bt_mesh_friend_req>
}
    bbf4:	b002      	add	sp, #8
    bbf6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return bt_mesh_friend_clear(rx, buf);
    bbfa:	f017 bb7a 	b.w	232f2 <bt_mesh_friend_clear>
}
    bbfe:	b002      	add	sp, #8
    bc00:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return bt_mesh_friend_clear_cfm(rx, buf);
    bc04:	f002 ba60 	b.w	e0c8 <bt_mesh_friend_clear_cfm>
}
    bc08:	b002      	add	sp, #8
    bc0a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return bt_mesh_friend_sub_add(rx, buf);
    bc0e:	f017 bbb5 	b.w	2337c <bt_mesh_friend_sub_add>
}
    bc12:	b002      	add	sp, #8
    bc14:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return bt_mesh_friend_sub_rem(rx, buf);
    bc18:	f017 bbe8 	b.w	233ec <bt_mesh_friend_sub_rem>
		switch (ctl_op) {
    bc1c:	f06f 0501 	mvn.w	r5, #1
    bc20:	e753      	b.n	baca <ctl_recv+0x3e>
    bc22:	bf00      	nop
    bc24:	20001728 	.word	0x20001728
    bc28:	200019c8 	.word	0x200019c8
    bc2c:	20000ed0 	.word	0x20000ed0
    bc30:	200019f8 	.word	0x200019f8

0000bc34 <send_seg>:
{
    bc34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if (seg_tx[i].nack_count) {
    bc38:	4c7c      	ldr	r4, [pc, #496]	; (be2c <send_seg+0x1f8>)
{
    bc3a:	b091      	sub	sp, #68	; 0x44
    bc3c:	4605      	mov	r5, r0
    bc3e:	460e      	mov	r6, r1
    bc40:	9305      	str	r3, [sp, #20]
			blocked |= seg_tx_blocks(&seg_tx[i], net_tx->src,
    bc42:	8901      	ldrh	r1, [r0, #8]
						 net_tx->ctx->addr);
    bc44:	6843      	ldr	r3, [r0, #4]
		if (seg_tx[i].nack_count) {
    bc46:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
{
    bc4a:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
    bc4e:	4617      	mov	r7, r2
			blocked |= seg_tx_blocks(&seg_tx[i], net_tx->src,
    bc50:	889a      	ldrh	r2, [r3, #4]
		if (seg_tx[i].nack_count) {
    bc52:	2800      	cmp	r0, #0
    bc54:	f040 80e7 	bne.w	be26 <send_seg+0x1f2>
	if (ctl_op) {
    bc58:	f1b9 0f00 	cmp.w	r9, #0
    bc5c:	f000 8081 	beq.w	bd62 <send_seg+0x12e>
		tx->hdr = TRANS_CTL_HDR(*ctl_op, 1);
    bc60:	f899 3000 	ldrb.w	r3, [r9]
    bc64:	f063 037f 	orn	r3, r3, #127	; 0x7f
		tx->hdr = SEG_HDR(1, net_tx->aid);
    bc68:	77a3      	strb	r3, [r4, #30]
	tx->dst = net_tx->ctx->addr;
    bc6a:	8362      	strh	r2, [r4, #26]
	tx->seg_n = (sdu->len - 1) / seg_len(!!ctl_op);
    bc6c:	88b2      	ldrh	r2, [r6, #4]
	tx->src = net_tx->src;
    bc6e:	8321      	strh	r1, [r4, #24]
		return BT_MESH_APP_SEG_SDU_MAX;
    bc70:	f1b9 0f00 	cmp.w	r9, #0
    bc74:	bf14      	ite	ne
    bc76:	2108      	movne	r1, #8
    bc78:	210c      	moveq	r1, #12
	tx->seg_n = (sdu->len - 1) / seg_len(!!ctl_op);
    bc7a:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
    bc7e:	fb93 f3f1 	sdiv	r3, r3, r1
    bc82:	b2db      	uxtb	r3, r3
    bc84:	f884 3020 	strb.w	r3, [r4, #32]
	tx->len = sdu->len;
    bc88:	83a2      	strh	r2, [r4, #28]
	tx->seg_o = 0;
    bc8a:	f04f 0000 	mov.w	r0, #0
	tx->seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_TX, bt_mesh.seq);
    bc8e:	4a68      	ldr	r2, [pc, #416]	; (be30 <send_seg+0x1fc>)
	tx->seg_o = 0;
    bc90:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
	tx->nack_count = tx->seg_n + 1;
    bc94:	f103 0301 	add.w	r3, r3, #1
    bc98:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
		return BT_MESH_APP_SEG_SDU_MAX;
    bc9c:	9103      	str	r1, [sp, #12]
	tx->seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_TX, bt_mesh.seq);
    bc9e:	6813      	ldr	r3, [r2, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    bca0:	f3bf 8f5b 	dmb	ish
    bca4:	6891      	ldr	r1, [r2, #8]
    bca6:	f3bf 8f5b 	dmb	ish
    bcaa:	f3c1 0180 	ubfx	r1, r1, #2, #1
    bcae:	6852      	ldr	r2, [r2, #4]
    bcb0:	eba3 0301 	sub.w	r3, r3, r1
    bcb4:	ea4f 2113 	mov.w	r1, r3, lsr #8
    bcb8:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
    bcbc:	e9c4 3104 	strd	r3, r1, [r4, #16]
	tx->cb_data = cb_data;
    bcc0:	9b05      	ldr	r3, [sp, #20]
	tx->sub = net_tx->sub;
    bcc2:	6829      	ldr	r1, [r5, #0]
	tx->cb_data = cb_data;
    bcc4:	62e3      	str	r3, [r4, #44]	; 0x2c
	tx->attempts = SEG_RETRANSMIT_ATTEMPTS;
    bcc6:	f04f 0304 	mov.w	r3, #4
    bcca:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	tx->cb = cb;
    bcce:	62a7      	str	r7, [r4, #40]	; 0x28
	tx->xmit = net_tx->xmit;
    bcd0:	7aab      	ldrb	r3, [r5, #10]
    bcd2:	77e3      	strb	r3, [r4, #31]
	tx->aszmic = net_tx->aszmic;
    bcd4:	7aea      	ldrb	r2, [r5, #11]
	tx->seg_pending = 0;
    bcd6:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
	tx->aszmic = net_tx->aszmic;
    bcda:	f3c2 0340 	ubfx	r3, r2, #1, #1
	tx->ctl = !!ctl_op;
    bcde:	bf18      	it	ne
    bce0:	2001      	movne	r0, #1
	tx->blocked = blocked;
    bce2:	009b      	lsls	r3, r3, #2
	tx->friend_cred = net_tx->friend_cred;
    bce4:	f002 0201 	and.w	r2, r2, #1
	tx->blocked = blocked;
    bce8:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
    bcec:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
    bcf0:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
	tx->sub = net_tx->sub;
    bcf4:	6021      	str	r1, [r4, #0]
	tx->blocked = blocked;
    bcf6:	f022 022f 	bic.w	r2, r2, #47	; 0x2f
    bcfa:	4313      	orrs	r3, r2
    bcfc:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	tx->ttl = net_tx->ctx->send_ttl;
    bd00:	686b      	ldr	r3, [r5, #4]
    bd02:	7adb      	ldrb	r3, [r3, #11]
    bd04:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	    !bt_mesh_friend_queue_has_space(tx->sub->net_idx, net_tx->src,
    bd08:	f894 3020 	ldrb.w	r3, [r4, #32]
    bd0c:	8b88      	ldrh	r0, [r1, #28]
    bd0e:	8929      	ldrh	r1, [r5, #8]
    bd10:	3301      	adds	r3, #1
    bd12:	b2db      	uxtb	r3, r3
    bd14:	9300      	str	r3, [sp, #0]
    bd16:	8b62      	ldrh	r2, [r4, #26]
    bd18:	4b46      	ldr	r3, [pc, #280]	; (be34 <send_seg+0x200>)
    bd1a:	f002 fb4d 	bl	e3b8 <bt_mesh_friend_queue_has_space>
    bd1e:	4b45      	ldr	r3, [pc, #276]	; (be34 <send_seg+0x200>)
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) &&
    bd20:	b918      	cbnz	r0, bd2a <send_seg+0xf6>
					    tx->seg_n + 1) &&
    bd22:	f9b4 201a 	ldrsh.w	r2, [r4, #26]
    bd26:	2a00      	cmp	r2, #0
    bd28:	dc27      	bgt.n	bd7a <send_seg+0x146>
    bd2a:	f1b9 0f00 	cmp.w	r9, #0
    bd2e:	bf18      	it	ne
    bd30:	2300      	movne	r3, #0
		err = k_mem_slab_alloc(&segs, &buf, BUF_TIMEOUT);
    bd32:	f8df a104 	ldr.w	sl, [pc, #260]	; be38 <send_seg+0x204>
    bd36:	9306      	str	r3, [sp, #24]
				type = BT_MESH_FRIEND_PDU_PARTIAL;
    bd38:	f04f 0800 	mov.w	r8, #0
	for (seg_o = 0U; sdu->len; seg_o++) {
    bd3c:	f8b6 b004 	ldrh.w	fp, [r6, #4]
    bd40:	fa5f f988 	uxtb.w	r9, r8
    bd44:	f1bb 0f00 	cmp.w	fp, #0
    bd48:	d120      	bne.n	bd8c <send_seg+0x158>
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && !tx->seg[0]) {
    bd4a:	6864      	ldr	r4, [r4, #4]
		seg_tx_reset(tx);
    bd4c:	4837      	ldr	r0, [pc, #220]	; (be2c <send_seg+0x1f8>)
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && !tx->seg[0]) {
    bd4e:	2c00      	cmp	r4, #0
    bd50:	d165      	bne.n	be1e <send_seg+0x1ea>
		seg_tx_reset(tx);
    bd52:	f7ff fd73 	bl	b83c <seg_tx_reset>
		send_cb_finalize(cb, cb_data);
    bd56:	4638      	mov	r0, r7
    bd58:	9905      	ldr	r1, [sp, #20]
    bd5a:	f014 fddc 	bl	20916 <send_cb_finalize>
		return 0;
    bd5e:	4620      	mov	r0, r4
    bd60:	e011      	b.n	bd86 <send_seg+0x152>
	} else if (BT_MESH_IS_DEV_KEY(net_tx->ctx->app_idx)) {
    bd62:	885b      	ldrh	r3, [r3, #2]
    bd64:	3303      	adds	r3, #3
    bd66:	b29b      	uxth	r3, r3
    bd68:	2b01      	cmp	r3, #1
		tx->hdr = SEG_HDR(1, net_tx->aid);
    bd6a:	bf85      	ittet	hi
    bd6c:	7aeb      	ldrbhi	r3, [r5, #11]
    bd6e:	f3c3 0385 	ubfxhi	r3, r3, #2, #6
		tx->hdr = SEG_HDR(0, 0);
    bd72:	2380      	movls	r3, #128	; 0x80
		tx->hdr = SEG_HDR(1, net_tx->aid);
    bd74:	f063 033f 	ornhi	r3, r3, #63	; 0x3f
    bd78:	e776      	b.n	bc68 <send_seg+0x34>
		seg_tx_reset(tx);
    bd7a:	f1a3 0010 	sub.w	r0, r3, #16
			seg_tx_reset(tx);
    bd7e:	f7ff fd5d 	bl	b83c <seg_tx_reset>
			return -ENOBUFS;
    bd82:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    bd86:	b011      	add	sp, #68	; 0x44
    bd88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = k_mem_slab_alloc(&segs, &buf, BUF_TIMEOUT);
    bd8c:	2200      	movs	r2, #0
    bd8e:	2300      	movs	r3, #0
    bd90:	a908      	add	r1, sp, #32
    bd92:	4650      	mov	r0, sl
    bd94:	f00f f8c6 	bl	1af24 <k_mem_slab_alloc>
		if (err) {
    bd98:	9004      	str	r0, [sp, #16]
    bd9a:	b108      	cbz	r0, bda0 <send_seg+0x16c>
			seg_tx_reset(tx);
    bd9c:	4823      	ldr	r0, [pc, #140]	; (be2c <send_seg+0x1f8>)
    bd9e:	e7ee      	b.n	bd7e <send_seg+0x14a>
		memcpy(buf, net_buf_simple_pull_mem(sdu, len), len);
    bda0:	88b2      	ldrh	r2, [r6, #4]
    bda2:	9b03      	ldr	r3, [sp, #12]
    bda4:	f8dd b020 	ldr.w	fp, [sp, #32]
    bda8:	429a      	cmp	r2, r3
    bdaa:	bf28      	it	cs
    bdac:	461a      	movcs	r2, r3
    bdae:	4611      	mov	r1, r2
    bdb0:	4630      	mov	r0, r6
    bdb2:	9207      	str	r2, [sp, #28]
    bdb4:	f019 f832 	bl	24e1c <net_buf_simple_pull_mem>
    bdb8:	9a07      	ldr	r2, [sp, #28]
    bdba:	4601      	mov	r1, r0
    bdbc:	4658      	mov	r0, fp
		tx->seg[seg_o] = buf;
    bdbe:	eb04 0b89 	add.w	fp, r4, r9, lsl #2
		memcpy(buf, net_buf_simple_pull_mem(sdu, len), len);
    bdc2:	f012 f936 	bl	1e032 <memcpy>
		tx->seg[seg_o] = buf;
    bdc6:	9b08      	ldr	r3, [sp, #32]
    bdc8:	f8cb 3004 	str.w	r3, [fp, #4]
			NET_BUF_SIMPLE_DEFINE(seg, 16);
    bdcc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    bdd0:	ab0c      	add	r3, sp, #48	; 0x30
    bdd2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
			seg_tx_buf_build(tx, seg_o, &seg);
    bdd6:	4815      	ldr	r0, [pc, #84]	; (be2c <send_seg+0x1f8>)
			NET_BUF_SIMPLE_DEFINE(seg, 16);
    bdd8:	9309      	str	r3, [sp, #36]	; 0x24
			seg_tx_buf_build(tx, seg_o, &seg);
    bdda:	aa09      	add	r2, sp, #36	; 0x24
    bddc:	4649      	mov	r1, r9
    bdde:	f014 fdac 	bl	2093a <seg_tx_buf_build>
			if (seg_o == tx->seg_n) {
    bde2:	f894 1020 	ldrb.w	r1, [r4, #32]
			if (bt_mesh_friend_enqueue_tx(
    bde6:	aa09      	add	r2, sp, #36	; 0x24
    bde8:	1c4b      	adds	r3, r1, #1
    bdea:	9200      	str	r2, [sp, #0]
    bdec:	b2db      	uxtb	r3, r3
    bdee:	9a06      	ldr	r2, [sp, #24]
    bdf0:	4589      	cmp	r9, r1
    bdf2:	bf0c      	ite	eq
    bdf4:	2102      	moveq	r1, #2
    bdf6:	2101      	movne	r1, #1
    bdf8:	4628      	mov	r0, r5
    bdfa:	f002 fb91 	bl	e520 <bt_mesh_friend_enqueue_tx>
    bdfe:	b158      	cbz	r0, be18 <send_seg+0x1e4>
			    BT_MESH_ADDR_IS_UNICAST(net_tx->ctx->addr)) {
    be00:	686b      	ldr	r3, [r5, #4]
				    tx->seg_n + 1, &seg) &&
    be02:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    be06:	2b00      	cmp	r3, #0
    be08:	dd06      	ble.n	be18 <send_seg+0x1e4>
				k_mem_slab_free(&segs, &buf);
    be0a:	a908      	add	r1, sp, #32
    be0c:	4650      	mov	r0, sl
    be0e:	f019 fd52 	bl	258b6 <k_mem_slab_free>
				tx->seg[seg_o] = NULL;
    be12:	9b04      	ldr	r3, [sp, #16]
    be14:	f8cb 3004 	str.w	r3, [fp, #4]
	for (seg_o = 0U; sdu->len; seg_o++) {
    be18:	f108 0801 	add.w	r8, r8, #1
    be1c:	e78e      	b.n	bd3c <send_seg+0x108>
	seg_tx_send_unacked(tx);
    be1e:	f7ff fd89 	bl	b934 <seg_tx_send_unacked>
	return 0;
    be22:	4658      	mov	r0, fp
    be24:	e7af      	b.n	bd86 <send_seg+0x152>
		return -EBUSY;
    be26:	f06f 000f 	mvn.w	r0, #15
    be2a:	e7ac      	b.n	bd86 <send_seg+0x152>
    be2c:	200019c8 	.word	0x200019c8
    be30:	20001728 	.word	0x20001728
    be34:	200019d8 	.word	0x200019d8
    be38:	20000ed0 	.word	0x20000ed0

0000be3c <bt_mesh_tx_in_progress>:
		if (seg_tx[i].nack_count) {
    be3c:	4b03      	ldr	r3, [pc, #12]	; (be4c <bt_mesh_tx_in_progress+0x10>)
    be3e:	f893 0022 	ldrb.w	r0, [r3, #34]	; 0x22
}
    be42:	3800      	subs	r0, #0
    be44:	bf18      	it	ne
    be46:	2001      	movne	r0, #1
    be48:	4770      	bx	lr
    be4a:	bf00      	nop
    be4c:	200019c8 	.word	0x200019c8

0000be50 <bt_mesh_rx_reset>:
	int i;

	BT_DBG("");

	for (i = 0; i < ARRAY_SIZE(seg_rx); i++) {
		seg_rx_reset(&seg_rx[i], true);
    be50:	4801      	ldr	r0, [pc, #4]	; (be58 <bt_mesh_rx_reset+0x8>)
    be52:	2101      	movs	r1, #1
    be54:	f7ff bcb2 	b.w	b7bc <seg_rx_reset>
    be58:	20001968 	.word	0x20001968

0000be5c <bt_mesh_trans_reset>:
{
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_VA_PENDING);
}

void bt_mesh_trans_reset(void)
{
    be5c:	b538      	push	{r3, r4, r5, lr}
	int i;

	bt_mesh_rx_reset();
    be5e:	f7ff fff7 	bl	be50 <bt_mesh_rx_reset>

	BT_DBG("");

	for (i = 0; i < ARRAY_SIZE(seg_tx); i++) {
		seg_tx_reset(&seg_tx[i]);
    be62:	480b      	ldr	r0, [pc, #44]	; (be90 <bt_mesh_trans_reset+0x34>)
    be64:	f7ff fcea 	bl	b83c <seg_tx_reset>
	}

	for (i = 0; i < ARRAY_SIZE(virtual_addrs); i++) {
		if (virtual_addrs[i].ref) {
    be68:	490a      	ldr	r1, [pc, #40]	; (be94 <bt_mesh_trans_reset+0x38>)
	for (i = 0; i < ARRAY_SIZE(virtual_addrs); i++) {
    be6a:	2300      	movs	r3, #0
		if (virtual_addrs[i].ref) {
    be6c:	2414      	movs	r4, #20
			virtual_addrs[i].ref = 0U;
    be6e:	f44f 4500 	mov.w	r5, #32768	; 0x8000
		if (virtual_addrs[i].ref) {
    be72:	fb04 f003 	mul.w	r0, r4, r3
    be76:	5a0a      	ldrh	r2, [r1, r0]
    be78:	f3c2 020e 	ubfx	r2, r2, #0, #15
    be7c:	b102      	cbz	r2, be80 <bt_mesh_trans_reset+0x24>
			virtual_addrs[i].ref = 0U;
    be7e:	520d      	strh	r5, [r1, r0]
	for (i = 0; i < ARRAY_SIZE(virtual_addrs); i++) {
    be80:	3301      	adds	r3, #1
    be82:	2b03      	cmp	r3, #3
    be84:	d1f5      	bne.n	be72 <bt_mesh_trans_reset+0x16>
	bt_mesh_rpl_clear();

	if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		store_va_label();
	}
}
    be86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_mesh_rpl_clear();
    be8a:	f000 bc71 	b.w	c770 <bt_mesh_rpl_clear>
    be8e:	bf00      	nop
    be90:	200019c8 	.word	0x200019c8
    be94:	20003f6a 	.word	0x20003f6a

0000be98 <bt_mesh_trans_init>:

void bt_mesh_trans_init(void)
{
    be98:	b508      	push	{r3, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(seg_tx); i++) {
		k_work_init_delayable(&seg_tx[i].retransmit, seg_retransmit);
    be9a:	4905      	ldr	r1, [pc, #20]	; (beb0 <bt_mesh_trans_init+0x18>)
    be9c:	4805      	ldr	r0, [pc, #20]	; (beb4 <bt_mesh_trans_init+0x1c>)
    be9e:	f019 fef7 	bl	25c90 <k_work_init_delayable>
	}

	for (i = 0; i < ARRAY_SIZE(seg_rx); i++) {
		k_work_init_delayable(&seg_rx[i].ack, seg_ack);
	}
}
    bea2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		k_work_init_delayable(&seg_rx[i].ack, seg_ack);
    bea6:	4904      	ldr	r1, [pc, #16]	; (beb8 <bt_mesh_trans_init+0x20>)
    bea8:	4804      	ldr	r0, [pc, #16]	; (bebc <bt_mesh_trans_init+0x24>)
    beaa:	f019 bef1 	b.w	25c90 <k_work_init_delayable>
    beae:	bf00      	nop
    beb0:	00020b1f 	.word	0x00020b1f
    beb4:	200019f8 	.word	0x200019f8
    beb8:	00020d17 	.word	0x00020d17
    bebc:	20001998 	.word	0x20001998

0000bec0 <bt_mesh_va_add>:
		store_va_label();
	}
}

uint8_t bt_mesh_va_add(const uint8_t uuid[16], uint16_t *addr)
{
    bec0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bec4:	4f23      	ldr	r7, [pc, #140]	; (bf54 <bt_mesh_va_add+0x94>)
	struct virtual_addr *va = NULL;
	int err;

	for (int i = 0; i < ARRAY_SIZE(virtual_addrs); i++) {
    bec6:	2600      	movs	r6, #0
{
    bec8:	4605      	mov	r5, r0
    beca:	4688      	mov	r8, r1
	struct virtual_addr *va = NULL;
    becc:	4634      	mov	r4, r6
    bece:	46ba      	mov	sl, r7
		if (!virtual_addrs[i].ref) {
    bed0:	f04f 0b14 	mov.w	fp, #20
    bed4:	fb0b f306 	mul.w	r3, fp, r6
    bed8:	eb0a 0903 	add.w	r9, sl, r3
    bedc:	f83a 3003 	ldrh.w	r3, [sl, r3]
    bee0:	f3c3 030e 	ubfx	r3, r3, #0, #15
    bee4:	b9b3      	cbnz	r3, bf14 <bt_mesh_va_add+0x54>
			if (!va) {
				va = &virtual_addrs[i];
    bee6:	2c00      	cmp	r4, #0
    bee8:	bf08      	it	eq
    beea:	463c      	moveq	r4, r7
	for (int i = 0; i < ARRAY_SIZE(virtual_addrs); i++) {
    beec:	3601      	adds	r6, #1
    beee:	2e03      	cmp	r6, #3
    bef0:	f107 0714 	add.w	r7, r7, #20
    bef4:	d1ee      	bne.n	bed4 <bt_mesh_va_add+0x14>
			va_store(&virtual_addrs[i]);
			return STATUS_SUCCESS;
		}
	}

	if (!va) {
    bef6:	b354      	cbz	r4, bf4e <bt_mesh_va_add+0x8e>
		return STATUS_INSUFF_RESOURCES;
	}

	memcpy(va->uuid, uuid, ARRAY_SIZE(va->uuid));
    bef8:	4629      	mov	r1, r5
    befa:	2210      	movs	r2, #16
    befc:	1d20      	adds	r0, r4, #4
    befe:	f012 f898 	bl	1e032 <memcpy>
	err = bt_mesh_virtual_addr(uuid, &va->addr);
    bf02:	1ca1      	adds	r1, r4, #2
    bf04:	4628      	mov	r0, r5
    bf06:	f000 ff59 	bl	cdbc <bt_mesh_virtual_addr>
	if (err) {
    bf0a:	b1c8      	cbz	r0, bf40 <bt_mesh_va_add+0x80>
		va->addr = BT_MESH_ADDR_UNASSIGNED;
    bf0c:	2300      	movs	r3, #0
    bf0e:	8063      	strh	r3, [r4, #2]
		return STATUS_UNSPECIFIED;
    bf10:	2010      	movs	r0, #16
    bf12:	e013      	b.n	bf3c <bt_mesh_va_add+0x7c>
		if (!memcmp(uuid, virtual_addrs[i].uuid,
    bf14:	2210      	movs	r2, #16
    bf16:	1d39      	adds	r1, r7, #4
    bf18:	4628      	mov	r0, r5
    bf1a:	f012 f879 	bl	1e010 <memcmp>
    bf1e:	2800      	cmp	r0, #0
    bf20:	d1e4      	bne.n	beec <bt_mesh_va_add+0x2c>
			*addr = virtual_addrs[i].addr;
    bf22:	f8b9 3002 	ldrh.w	r3, [r9, #2]
    bf26:	f8a8 3000 	strh.w	r3, [r8]
			virtual_addrs[i].ref++;
    bf2a:	f8b9 3000 	ldrh.w	r3, [r9]
    bf2e:	3301      	adds	r3, #1
    bf30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    bf34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    bf38:	f8a9 3000 	strh.w	r3, [r9]
	va_store(va);

	*addr = va->addr;

	return STATUS_SUCCESS;
}
    bf3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	va->ref = 1;
    bf40:	f248 0301 	movw	r3, #32769	; 0x8001
    bf44:	8023      	strh	r3, [r4, #0]
	*addr = va->addr;
    bf46:	8863      	ldrh	r3, [r4, #2]
    bf48:	f8a8 3000 	strh.w	r3, [r8]
	return STATUS_SUCCESS;
    bf4c:	e7f6      	b.n	bf3c <bt_mesh_va_add+0x7c>
		return STATUS_INSUFF_RESOURCES;
    bf4e:	2005      	movs	r0, #5
    bf50:	e7f4      	b.n	bf3c <bt_mesh_va_add+0x7c>
    bf52:	bf00      	nop
    bf54:	20003f6a 	.word	0x20003f6a

0000bf58 <bt_mesh_va_del>:

uint8_t bt_mesh_va_del(const uint8_t uuid[16], uint16_t *addr)
{
    bf58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bf5c:	4f19      	ldr	r7, [pc, #100]	; (bfc4 <bt_mesh_va_del+0x6c>)
    bf5e:	4681      	mov	r9, r0
    bf60:	460e      	mov	r6, r1
	struct virtual_addr *va = NULL;

	for (int i = 0; i < ARRAY_SIZE(virtual_addrs); i++) {
    bf62:	2500      	movs	r5, #0
		if (virtual_addrs[i].ref &&
    bf64:	1f3c      	subs	r4, r7, #4
    bf66:	f04f 0a14 	mov.w	sl, #20
    bf6a:	fb0a f305 	mul.w	r3, sl, r5
    bf6e:	eb04 0803 	add.w	r8, r4, r3
    bf72:	5ae3      	ldrh	r3, [r4, r3]
    bf74:	f3c3 030e 	ubfx	r3, r3, #0, #15
    bf78:	b1c3      	cbz	r3, bfac <bt_mesh_va_del+0x54>
		    !memcmp(uuid, virtual_addrs[i].uuid,
    bf7a:	2210      	movs	r2, #16
    bf7c:	4639      	mov	r1, r7
    bf7e:	4648      	mov	r0, r9
    bf80:	f012 f846 	bl	1e010 <memcmp>
		if (virtual_addrs[i].ref &&
    bf84:	b990      	cbnz	r0, bfac <bt_mesh_va_del+0x54>

	if (!va) {
		return STATUS_CANNOT_REMOVE;
	}

	va->ref--;
    bf86:	f8b8 3000 	ldrh.w	r3, [r8]
    bf8a:	f503 42ff 	add.w	r2, r3, #32640	; 0x7f80
    bf8e:	327f      	adds	r2, #127	; 0x7f
    bf90:	f362 030e 	bfi	r3, r2, #0, #15
    bf94:	f8a8 3000 	strh.w	r3, [r8]
	if (addr) {
    bf98:	b986      	cbnz	r6, bfbc <bt_mesh_va_del+0x64>
	store->changed = 1U;
    bf9a:	2314      	movs	r3, #20
    bf9c:	fb03 4405 	mla	r4, r3, r5, r4
		*addr = va->addr;
	}

	va_store(va);
	return STATUS_SUCCESS;
    bfa0:	2000      	movs	r0, #0
	store->changed = 1U;
    bfa2:	7863      	ldrb	r3, [r4, #1]
    bfa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    bfa8:	7063      	strb	r3, [r4, #1]
	return STATUS_SUCCESS;
    bfaa:	e005      	b.n	bfb8 <bt_mesh_va_del+0x60>
	for (int i = 0; i < ARRAY_SIZE(virtual_addrs); i++) {
    bfac:	3501      	adds	r5, #1
    bfae:	2d03      	cmp	r5, #3
    bfb0:	f107 0714 	add.w	r7, r7, #20
    bfb4:	d1d9      	bne.n	bf6a <bt_mesh_va_del+0x12>
		return STATUS_CANNOT_REMOVE;
    bfb6:	200c      	movs	r0, #12
}
    bfb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		*addr = va->addr;
    bfbc:	f8b8 3002 	ldrh.w	r3, [r8, #2]
    bfc0:	8033      	strh	r3, [r6, #0]
    bfc2:	e7ea      	b.n	bf9a <bt_mesh_va_del+0x42>
    bfc4:	20003f6e 	.word	0x20003f6e

0000bfc8 <bt_mesh_va_label_get>:
{
	int i;

	BT_DBG("addr 0x%04x", addr);

	for (i = 0; i < ARRAY_SIZE(virtual_addrs); i++) {
    bfc8:	490b      	ldr	r1, [pc, #44]	; (bff8 <bt_mesh_va_label_get+0x30>)
{
    bfca:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < ARRAY_SIZE(virtual_addrs); i++) {
    bfcc:	2200      	movs	r2, #0
    bfce:	460b      	mov	r3, r1
		if (virtual_addrs[i].ref && virtual_addrs[i].addr == addr) {
    bfd0:	2614      	movs	r6, #20
    bfd2:	fb06 f402 	mul.w	r4, r6, r2
    bfd6:	5b1d      	ldrh	r5, [r3, r4]
    bfd8:	f3c5 050e 	ubfx	r5, r5, #0, #15
    bfdc:	b12d      	cbz	r5, bfea <bt_mesh_va_label_get+0x22>
    bfde:	884d      	ldrh	r5, [r1, #2]
    bfe0:	4285      	cmp	r5, r0
    bfe2:	d102      	bne.n	bfea <bt_mesh_va_label_get+0x22>
			BT_DBG("Found Label UUID for 0x%04x: %s", addr,
			       bt_hex(virtual_addrs[i].uuid, 16));
			return virtual_addrs[i].uuid;
    bfe4:	1d20      	adds	r0, r4, #4
    bfe6:	4418      	add	r0, r3
	}

	BT_WARN("No matching Label UUID for 0x%04x", addr);

	return NULL;
}
    bfe8:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < ARRAY_SIZE(virtual_addrs); i++) {
    bfea:	3201      	adds	r2, #1
    bfec:	2a03      	cmp	r2, #3
    bfee:	f101 0114 	add.w	r1, r1, #20
    bff2:	d1ee      	bne.n	bfd2 <bt_mesh_va_label_get+0xa>
	return NULL;
    bff4:	2000      	movs	r0, #0
    bff6:	e7f7      	b.n	bfe8 <bt_mesh_va_label_get+0x20>
    bff8:	20003f6a 	.word	0x20003f6a

0000bffc <bt_mesh_trans_send>:
{
    bffc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c000:	461f      	mov	r7, r3
	if (msg->len < 1) {
    c002:	888b      	ldrh	r3, [r1, #4]
{
    c004:	b08b      	sub	sp, #44	; 0x2c
    c006:	4604      	mov	r4, r0
    c008:	460d      	mov	r5, r1
    c00a:	4616      	mov	r6, r2
	if (msg->len < 1) {
    c00c:	b923      	cbnz	r3, c018 <bt_mesh_trans_send+0x1c>
		return -EINVAL;
    c00e:	f06f 0015 	mvn.w	r0, #21
}
    c012:	b00b      	add	sp, #44	; 0x2c
    c014:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (msg->len > BT_MESH_TX_SDU_MAX - BT_MESH_MIC_SHORT) {
    c018:	2b20      	cmp	r3, #32
    c01a:	f200 8092 	bhi.w	c142 <bt_mesh_trans_send+0x146>
	if (net_buf_simple_tailroom(msg) < BT_MESH_MIC_SHORT) {
    c01e:	4608      	mov	r0, r1
    c020:	f018 ff33 	bl	24e8a <net_buf_simple_tailroom>
    c024:	2803      	cmp	r0, #3
    c026:	d9f2      	bls.n	c00e <bt_mesh_trans_send+0x12>
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
    c028:	f8d4 8004 	ldr.w	r8, [r4, #4]
    c02c:	f898 300b 	ldrb.w	r3, [r8, #11]
    c030:	2bff      	cmp	r3, #255	; 0xff
    c032:	d17b      	bne.n	c12c <bt_mesh_trans_send+0x130>
		tx->ctx->send_ttl = bt_mesh_default_ttl_get();
    c034:	f7fe f8ca 	bl	a1cc <bt_mesh_default_ttl_get>
    c038:	f888 000b 	strb.w	r0, [r8, #11]
	if (msg->len > BT_MESH_SDU_UNSEG_MAX) {
    c03c:	88ab      	ldrh	r3, [r5, #4]
		tx->ctx->send_rel = true;
    c03e:	6860      	ldr	r0, [r4, #4]
	if (msg->len > BT_MESH_SDU_UNSEG_MAX) {
    c040:	2b0b      	cmp	r3, #11
		tx->ctx->send_rel = true;
    c042:	bf84      	itt	hi
    c044:	2301      	movhi	r3, #1
    c046:	7283      	strbhi	r3, [r0, #10]
	if (tx->ctx->addr == BT_MESH_ADDR_UNASSIGNED ||
    c048:	8883      	ldrh	r3, [r0, #4]
    c04a:	2b00      	cmp	r3, #0
    c04c:	d0df      	beq.n	c00e <bt_mesh_trans_send+0x12>
    c04e:	b21b      	sxth	r3, r3
    c050:	2b00      	cmp	r3, #0
    c052:	dc04      	bgt.n	c05e <bt_mesh_trans_send+0x62>
	     BT_MESH_IS_DEV_KEY(tx->ctx->app_idx))) {
    c054:	8843      	ldrh	r3, [r0, #2]
    c056:	3303      	adds	r3, #3
	    (!BT_MESH_ADDR_IS_UNICAST(tx->ctx->addr) &&
    c058:	b29b      	uxth	r3, r3
    c05a:	2b01      	cmp	r3, #1
    c05c:	d9d7      	bls.n	c00e <bt_mesh_trans_send+0x12>
	err = bt_mesh_keys_resolve(tx->ctx, &tx->sub, &key, &aid);
    c05e:	f10d 030f 	add.w	r3, sp, #15
    c062:	aa04      	add	r2, sp, #16
    c064:	4621      	mov	r1, r4
    c066:	f7ff fb07 	bl	b678 <bt_mesh_keys_resolve>
	if (err) {
    c06a:	2800      	cmp	r0, #0
    c06c:	d1d1      	bne.n	c012 <bt_mesh_trans_send+0x16>
	tx->xmit = bt_mesh_net_transmit_get();
    c06e:	f7fe f8c9 	bl	a204 <bt_mesh_net_transmit_get>
	tx->aid = aid;
    c072:	7ae3      	ldrb	r3, [r4, #11]
    c074:	f89d 200f 	ldrb.w	r2, [sp, #15]
	tx->xmit = bt_mesh_net_transmit_get();
    c078:	72a0      	strb	r0, [r4, #10]
	tx->aid = aid;
    c07a:	f362 0387 	bfi	r3, r2, #2, #6
    c07e:	72e3      	strb	r3, [r4, #11]
	if (!tx->ctx->send_rel || net_buf_simple_tailroom(msg) < 8) {
    c080:	6863      	ldr	r3, [r4, #4]
    c082:	f893 900a 	ldrb.w	r9, [r3, #10]
    c086:	f1b9 0f00 	cmp.w	r9, #0
    c08a:	d008      	beq.n	c09e <bt_mesh_trans_send+0xa2>
    c08c:	4628      	mov	r0, r5
    c08e:	f018 fefc 	bl	24e8a <net_buf_simple_tailroom>
    c092:	2807      	cmp	r0, #7
    c094:	bf94      	ite	ls
    c096:	f04f 0900 	movls.w	r9, #0
    c09a:	f04f 0901 	movhi.w	r9, #1
    c09e:	7ae3      	ldrb	r3, [r4, #11]
	err = trans_encrypt(tx, key, msg);
    c0a0:	f8dd 8010 	ldr.w	r8, [sp, #16]
    c0a4:	f369 0341 	bfi	r3, r9, #1, #1
    c0a8:	72e3      	strb	r3, [r4, #11]
	struct bt_mesh_app_crypto_ctx crypto = {
    c0aa:	2210      	movs	r2, #16
    c0ac:	2100      	movs	r1, #0
    c0ae:	a806      	add	r0, sp, #24
    c0b0:	f011 ffca 	bl	1e048 <memset>
		.dev_key = BT_MESH_IS_DEV_KEY(tx->ctx->app_idx),
    c0b4:	6863      	ldr	r3, [r4, #4]
	struct bt_mesh_app_crypto_ctx crypto = {
    c0b6:	8922      	ldrh	r2, [r4, #8]
		.dev_key = BT_MESH_IS_DEV_KEY(tx->ctx->app_idx),
    c0b8:	8859      	ldrh	r1, [r3, #2]
	struct bt_mesh_app_crypto_ctx crypto = {
    c0ba:	f8ad 2016 	strh.w	r2, [sp, #22]
		.dev_key = BT_MESH_IS_DEV_KEY(tx->ctx->app_idx),
    c0be:	3103      	adds	r1, #3
    c0c0:	b289      	uxth	r1, r1
		.seq_num = bt_mesh.seq,
    c0c2:	4a21      	ldr	r2, [pc, #132]	; (c148 <bt_mesh_trans_send+0x14c>)
	struct bt_mesh_app_crypto_ctx crypto = {
    c0c4:	889b      	ldrh	r3, [r3, #4]
    c0c6:	f8ad 3018 	strh.w	r3, [sp, #24]
		.dev_key = BT_MESH_IS_DEV_KEY(tx->ctx->app_idx),
    c0ca:	2901      	cmp	r1, #1
	struct bt_mesh_app_crypto_ctx crypto = {
    c0cc:	6853      	ldr	r3, [r2, #4]
    c0ce:	9307      	str	r3, [sp, #28]
		.dev_key = BT_MESH_IS_DEV_KEY(tx->ctx->app_idx),
    c0d0:	bf8c      	ite	hi
    c0d2:	2100      	movhi	r1, #0
    c0d4:	2101      	movls	r1, #1
    c0d6:	f88d 1014 	strb.w	r1, [sp, #20]
	struct bt_mesh_app_crypto_ctx crypto = {
    c0da:	f88d 9015 	strb.w	r9, [sp, #21]
		.iv_index = BT_MESH_NET_IVI_TX,
    c0de:	6813      	ldr	r3, [r2, #0]
    c0e0:	f3bf 8f5b 	dmb	ish
    c0e4:	6892      	ldr	r2, [r2, #8]
    c0e6:	f3bf 8f5b 	dmb	ish
    c0ea:	f3c2 0280 	ubfx	r2, r2, #2, #1
    c0ee:	1a9b      	subs	r3, r3, r2
	struct bt_mesh_app_crypto_ctx crypto = {
    c0f0:	9308      	str	r3, [sp, #32]
	if (BT_MESH_ADDR_IS_VIRTUAL(tx->ctx->addr)) {
    c0f2:	6863      	ldr	r3, [r4, #4]
    c0f4:	8898      	ldrh	r0, [r3, #4]
    c0f6:	f480 4300 	eor.w	r3, r0, #32768	; 0x8000
    c0fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    c0fe:	d202      	bcs.n	c106 <bt_mesh_trans_send+0x10a>
		crypto.ad = bt_mesh_va_label_get(tx->ctx->addr);
    c100:	f7ff ff62 	bl	bfc8 <bt_mesh_va_label_get>
    c104:	9009      	str	r0, [sp, #36]	; 0x24
	return bt_mesh_app_encrypt(key, &crypto, msg);
    c106:	462a      	mov	r2, r5
    c108:	a905      	add	r1, sp, #20
    c10a:	4640      	mov	r0, r8
    c10c:	f014 ff98 	bl	21040 <bt_mesh_app_encrypt>
	if (err) {
    c110:	2800      	cmp	r0, #0
    c112:	f47f af7e 	bne.w	c012 <bt_mesh_trans_send+0x16>
	if (tx->ctx->send_rel) {
    c116:	6863      	ldr	r3, [r4, #4]
    c118:	7a9b      	ldrb	r3, [r3, #10]
		err = send_seg(tx, msg, cb, cb_data, NULL);
    c11a:	9000      	str	r0, [sp, #0]
	if (tx->ctx->send_rel) {
    c11c:	b153      	cbz	r3, c134 <bt_mesh_trans_send+0x138>
		err = send_seg(tx, msg, cb, cb_data, NULL);
    c11e:	463b      	mov	r3, r7
    c120:	4632      	mov	r2, r6
    c122:	4629      	mov	r1, r5
    c124:	4620      	mov	r0, r4
    c126:	f7ff fd85 	bl	bc34 <send_seg>
    c12a:	e772      	b.n	c012 <bt_mesh_trans_send+0x16>
	} else if (tx->ctx->send_ttl > BT_MESH_TTL_MAX) {
    c12c:	061b      	lsls	r3, r3, #24
    c12e:	f53f af6e 	bmi.w	c00e <bt_mesh_trans_send+0x12>
    c132:	e783      	b.n	c03c <bt_mesh_trans_send+0x40>
		err = send_unseg(tx, msg, cb, cb_data, NULL);
    c134:	463b      	mov	r3, r7
    c136:	4632      	mov	r2, r6
    c138:	4629      	mov	r1, r5
    c13a:	4620      	mov	r0, r4
    c13c:	f014 fcf2 	bl	20b24 <send_unseg>
    c140:	e767      	b.n	c012 <bt_mesh_trans_send+0x16>
		return -EMSGSIZE;
    c142:	f06f 0079 	mvn.w	r0, #121	; 0x79
    c146:	e764      	b.n	c012 <bt_mesh_trans_send+0x16>
    c148:	20001728 	.word	0x20001728

0000c14c <sdu_recv>:
{
    c14c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c150:	b08a      	sub	sp, #40	; 0x28
    c152:	4604      	mov	r4, r0
    c154:	460e      	mov	r6, r1
    c156:	e9dd 7812 	ldrd	r7, r8, [sp, #72]	; 0x48
    c15a:	4692      	mov	sl, r2
	struct decrypt_ctx ctx = {
    c15c:	2100      	movs	r1, #0
    c15e:	2210      	movs	r2, #16
    c160:	a803      	add	r0, sp, #12
			.dev_key = !AKF(&hdr),
    c162:	ea6f 1596 	mvn.w	r5, r6, lsr #6
{
    c166:	4699      	mov	r9, r3
			.dev_key = !AKF(&hdr),
    c168:	f005 0501 	and.w	r5, r5, #1
	struct decrypt_ctx ctx = {
    c16c:	f011 ff6c 	bl	1e048 <memset>
    c170:	8923      	ldrh	r3, [r4, #8]
			.dst = rx->ctx.recv_dst,
    c172:	8960      	ldrh	r0, [r4, #10]
	struct decrypt_ctx ctx = {
    c174:	f88d 5008 	strb.w	r5, [sp, #8]
    c178:	f88d a009 	strb.w	sl, [sp, #9]
    c17c:	f8ad 300a 	strh.w	r3, [sp, #10]
    c180:	f8ad 000c 	strh.w	r0, [sp, #12]
    c184:	f1b8 0f00 	cmp.w	r8, #0
    c188:	d02f      	beq.n	c1ea <sdu_recv+0x9e>
    c18a:	f8d8 2010 	ldr.w	r2, [r8, #16]
    c18e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
			.iv_index = BT_MESH_NET_IVI_RX(rx),
    c192:	4b17      	ldr	r3, [pc, #92]	; (c1f0 <sdu_recv+0xa4>)
	struct decrypt_ctx ctx = {
    c194:	9204      	str	r2, [sp, #16]
			.iv_index = BT_MESH_NET_IVI_RX(rx),
    c196:	7d22      	ldrb	r2, [r4, #20]
    c198:	681b      	ldr	r3, [r3, #0]
	struct decrypt_ctx ctx = {
    c19a:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
			.iv_index = BT_MESH_NET_IVI_RX(rx),
    c19e:	f002 0101 	and.w	r1, r2, #1
    c1a2:	1a5b      	subs	r3, r3, r1
	struct decrypt_ctx ctx = {
    c1a4:	9305      	str	r3, [sp, #20]
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && !rx->local_match) {
    c1a6:	0653      	lsls	r3, r2, #25
	struct decrypt_ctx ctx = {
    c1a8:	e9cd 9707 	strd	r9, r7, [sp, #28]
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && !rx->local_match) {
    c1ac:	d519      	bpl.n	c1e2 <sdu_recv+0x96>
	if (BT_MESH_ADDR_IS_VIRTUAL(rx->ctx.recv_dst)) {
    c1ae:	f480 4300 	eor.w	r3, r0, #32768	; 0x8000
    c1b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    c1b6:	d202      	bcs.n	c1be <sdu_recv+0x72>
		ctx.crypto.ad = bt_mesh_va_label_get(rx->ctx.recv_dst);
    c1b8:	f7ff ff06 	bl	bfc8 <bt_mesh_va_label_get>
    c1bc:	9006      	str	r0, [sp, #24]
	rx->ctx.app_idx = bt_mesh_app_key_find(ctx.crypto.dev_key, AID(&hdr),
    c1be:	ab02      	add	r3, sp, #8
    c1c0:	9300      	str	r3, [sp, #0]
    c1c2:	4622      	mov	r2, r4
    c1c4:	4b0b      	ldr	r3, [pc, #44]	; (c1f4 <sdu_recv+0xa8>)
    c1c6:	f006 013f 	and.w	r1, r6, #63	; 0x3f
    c1ca:	4628      	mov	r0, r5
    c1cc:	f7ff fa92 	bl	b6f4 <bt_mesh_app_key_find>
	if (rx->ctx.app_idx == BT_MESH_KEY_UNUSED) {
    c1d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c1d4:	4298      	cmp	r0, r3
	rx->ctx.app_idx = bt_mesh_app_key_find(ctx.crypto.dev_key, AID(&hdr),
    c1d6:	80e0      	strh	r0, [r4, #6]
	if (rx->ctx.app_idx == BT_MESH_KEY_UNUSED) {
    c1d8:	d003      	beq.n	c1e2 <sdu_recv+0x96>
	bt_mesh_model_recv(rx, sdu);
    c1da:	4639      	mov	r1, r7
    c1dc:	4620      	mov	r0, r4
    c1de:	f000 fff7 	bl	d1d0 <bt_mesh_model_recv>
}
    c1e2:	2000      	movs	r0, #0
    c1e4:	b00a      	add	sp, #40	; 0x28
    c1e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct decrypt_ctx ctx = {
    c1ea:	6922      	ldr	r2, [r4, #16]
    c1ec:	e7d1      	b.n	c192 <sdu_recv+0x46>
    c1ee:	bf00      	nop
    c1f0:	20001728 	.word	0x20001728
    c1f4:	00020a4d 	.word	0x00020a4d

0000c1f8 <bt_mesh_trans_recv>:
{
    c1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint64_t seq_auth = TRANS_SEQ_AUTH_NVAL;
    c1fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
    c200:	b097      	sub	sp, #92	; 0x5c
	uint64_t seq_auth = TRANS_SEQ_AUTH_NVAL;
    c202:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c206:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		rx->friend_match = bt_mesh_friend_match(rx->sub->net_idx,
    c20a:	680b      	ldr	r3, [r1, #0]
{
    c20c:	4606      	mov	r6, r0
    c20e:	460d      	mov	r5, r1
		rx->friend_match = bt_mesh_friend_match(rx->sub->net_idx,
    c210:	8b98      	ldrh	r0, [r3, #28]
    c212:	8949      	ldrh	r1, [r1, #10]
    c214:	f002 f8be 	bl	e394 <bt_mesh_friend_match>
    c218:	7d2b      	ldrb	r3, [r5, #20]
    c21a:	f360 13c7 	bfi	r3, r0, #7, #1
    c21e:	752b      	strb	r3, [r5, #20]
	net_buf_simple_pull(buf, BT_MESH_NET_HDR_LEN);
    c220:	2109      	movs	r1, #9
    c222:	4630      	mov	r0, r6
    c224:	f018 fdf2 	bl	24e0c <net_buf_simple_pull>
	state->offset = net_buf_simple_headroom(buf);
    c228:	4630      	mov	r0, r6
    c22a:	f018 fe2a 	bl	24e82 <net_buf_simple_headroom>
	if (SEG(buf->data)) {
    c22e:	f8d6 9000 	ldr.w	r9, [r6]
	state->len = buf->len;
    c232:	88b3      	ldrh	r3, [r6, #4]
    c234:	9305      	str	r3, [sp, #20]
    c236:	f999 3000 	ldrsb.w	r3, [r9]
	state->offset = net_buf_simple_headroom(buf);
    c23a:	9007      	str	r0, [sp, #28]
    c23c:	2b00      	cmp	r3, #0
    c23e:	f280 81e9 	bge.w	c614 <bt_mesh_trans_recv+0x41c>
		if (!rx->local_match && !rx->friend_match) {
    c242:	f895 a014 	ldrb.w	sl, [r5, #20]
    c246:	f01a 00c0 	ands.w	r0, sl, #192	; 0xc0
    c24a:	f000 8212 	beq.w	c672 <bt_mesh_trans_recv+0x47a>
	struct bt_mesh_rpl *rpl = NULL;
    c24e:	2300      	movs	r3, #0
    c250:	9309      	str	r3, [sp, #36]	; 0x24
	if (buf->len < 5) {
    c252:	9b05      	ldr	r3, [sp, #20]
    c254:	2b04      	cmp	r3, #4
    c256:	d803      	bhi.n	c260 <bt_mesh_trans_recv+0x68>
	uint8_t seg_count = 0;
    c258:	f04f 0800 	mov.w	r8, #0
	enum bt_mesh_friend_pdu_type pdu_type = BT_MESH_FRIEND_PDU_SINGLE;
    c25c:	2400      	movs	r4, #0
    c25e:	e1a6      	b.n	c5ae <bt_mesh_trans_recv+0x3b6>
	if (bt_mesh_rpl_check(net_rx, &rpl)) {
    c260:	a909      	add	r1, sp, #36	; 0x24
    c262:	4628      	mov	r0, r5
    c264:	f000 fa46 	bl	c6f4 <bt_mesh_rpl_check>
    c268:	4604      	mov	r4, r0
    c26a:	2800      	cmp	r0, #0
    c26c:	d1f4      	bne.n	c258 <bt_mesh_trans_recv+0x60>
	net_buf_simple_pull(buf, 1);
    c26e:	2101      	movs	r1, #1
    c270:	4630      	mov	r0, r6
    c272:	f018 fdcb 	bl	24e0c <net_buf_simple_pull>
	seq_zero = net_buf_simple_pull_be16(buf);
    c276:	4630      	mov	r0, r6
    c278:	f018 fde8 	bl	24e4c <net_buf_simple_pull_be16>
	seg_o = (seq_zero & 0x03) << 3;
    c27c:	00c7      	lsls	r7, r0, #3
	seq_zero = (seq_zero >> 2) & TRANS_SEQ_ZERO_MASK;
    c27e:	f3c0 088c 	ubfx	r8, r0, #2, #13
	seg_n = net_buf_simple_pull_u8(buf);
    c282:	4630      	mov	r0, r6
    c284:	f018 fdd2 	bl	24e2c <net_buf_simple_pull_u8>
	seg_o = (seq_zero & 0x03) << 3;
    c288:	f007 0718 	and.w	r7, r7, #24
	seg_o |= seg_n >> 5;
    c28c:	ea47 1750 	orr.w	r7, r7, r0, lsr #5
    c290:	b2ff      	uxtb	r7, r7
	seg_n &= 0x1f;
    c292:	f000 0a1f 	and.w	sl, r0, #31
	if (seg_o > seg_n) {
    c296:	4557      	cmp	r7, sl
	seg_n = net_buf_simple_pull_u8(buf);
    c298:	4683      	mov	fp, r0
	if (seg_o > seg_n) {
    c29a:	d8dd      	bhi.n	c258 <bt_mesh_trans_recv+0x60>
	*seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_RX(net_rx),
    c29c:	692b      	ldr	r3, [r5, #16]
    c29e:	4ab4      	ldr	r2, [pc, #720]	; (c570 <bt_mesh_trans_recv+0x378>)
    c2a0:	f895 c014 	ldrb.w	ip, [r5, #20]
    c2a4:	6812      	ldr	r2, [r2, #0]
		if (rx->src != net_rx->ctx.addr ||
    c2a6:	48b3      	ldr	r0, [pc, #716]	; (c574 <bt_mesh_trans_recv+0x37c>)
	*seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_RX(net_rx),
    c2a8:	eba3 0808 	sub.w	r8, r3, r8
    c2ac:	f00c 0c01 	and.w	ip, ip, #1
    c2b0:	f3c8 080c 	ubfx	r8, r8, #0, #13
    c2b4:	eba2 020c 	sub.w	r2, r2, ip
    c2b8:	eba3 0c08 	sub.w	ip, r3, r8
    c2bc:	ea4c 6c02 	orr.w	ip, ip, r2, lsl #24
	auth_seqnum = *seq_auth & BIT_MASK(24);
    c2c0:	f02c 437f 	bic.w	r3, ip, #4278190080	; 0xff000000
	*seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_RX(net_rx),
    c2c4:	0a11      	lsrs	r1, r2, #8
	auth_seqnum = *seq_auth & BIT_MASK(24);
    c2c6:	9306      	str	r3, [sp, #24]
		if (rx->src != net_rx->ctx.addr ||
    c2c8:	6982      	ldr	r2, [r0, #24]
    c2ca:	68ab      	ldr	r3, [r5, #8]
    c2cc:	429a      	cmp	r2, r3
	*seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_RX(net_rx),
    c2ce:	e9cd c10a 	strd	ip, r1, [sp, #40]	; 0x28
	*seg_count = seg_n + 1;
    c2d2:	f10a 0801 	add.w	r8, sl, #1
		if (rx->src != net_rx->ctx.addr ||
    c2d6:	d10c      	bne.n	c2f2 <bt_mesh_trans_recv+0xfa>
		if (rx->seq_auth >= *seq_auth) {
    c2d8:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
    c2dc:	4562      	cmp	r2, ip
    c2de:	eb73 0e01 	sbcs.w	lr, r3, r1
    c2e2:	f080 81c8 	bcs.w	c676 <bt_mesh_trans_recv+0x47e>
		if (rx->in_use) {
    c2e6:	7fc3      	ldrb	r3, [r0, #31]
    c2e8:	0659      	lsls	r1, r3, #25
    c2ea:	d502      	bpl.n	c2f2 <bt_mesh_trans_recv+0xfa>
			seg_rx_reset(rx, true);
    c2ec:	2101      	movs	r1, #1
    c2ee:	f7ff fa65 	bl	b7bc <seg_rx_reset>
	if (!sdu_len_is_ok(net_rx->ctl, seg_n)) {
    c2f2:	f1ba 0f02 	cmp.w	sl, #2
    c2f6:	7d2b      	ldrb	r3, [r5, #20]
    c2f8:	d92f      	bls.n	c35a <bt_mesh_trans_recv+0x162>
		send_ack(net_rx->sub, net_rx->ctx.recv_dst, net_rx->ctx.addr,
    c2fa:	09db      	lsrs	r3, r3, #7
    c2fc:	9302      	str	r3, [sp, #8]
    c2fe:	2400      	movs	r4, #0
    c300:	ab0a      	add	r3, sp, #40	; 0x28
    c302:	9300      	str	r3, [sp, #0]
    c304:	892a      	ldrh	r2, [r5, #8]
    c306:	7beb      	ldrb	r3, [r5, #15]
    c308:	8969      	ldrh	r1, [r5, #10]
    c30a:	6828      	ldr	r0, [r5, #0]
    c30c:	9401      	str	r4, [sp, #4]
    c30e:	f014 fcb7 	bl	20c80 <send_ack.isra.0>
			return -EMSGSIZE;
    c312:	f06f 0a79 	mvn.w	sl, #121	; 0x79
	buf->data = buf->__buf + state->offset;
    c316:	9b07      	ldr	r3, [sp, #28]
    c318:	68b0      	ldr	r0, [r6, #8]
    c31a:	fa10 f083 	uxtah	r0, r0, r3
	buf->len = state->len;
    c31e:	9b05      	ldr	r3, [sp, #20]
    c320:	80b3      	strh	r3, [r6, #4]
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && rx->friend_match && !err) {
    c322:	f995 3014 	ldrsb.w	r3, [r5, #20]
	buf->data = buf->__buf + state->offset;
    c326:	6030      	str	r0, [r6, #0]
    c328:	2b00      	cmp	r3, #0
    c32a:	da12      	bge.n	c352 <bt_mesh_trans_recv+0x15a>
    c32c:	f1ba 0f00 	cmp.w	sl, #0
    c330:	d10f      	bne.n	c352 <bt_mesh_trans_recv+0x15a>
		if (seq_auth == TRANS_SEQ_AUTH_NVAL) {
    c332:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    c336:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    c33a:	bf08      	it	eq
    c33c:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
			bt_mesh_friend_enqueue_rx(rx, pdu_type, NULL,
    c340:	9600      	str	r6, [sp, #0]
    c342:	4643      	mov	r3, r8
    c344:	bf0c      	ite	eq
    c346:	4652      	moveq	r2, sl
			bt_mesh_friend_enqueue_rx(rx, pdu_type, &seq_auth,
    c348:	aa0a      	addne	r2, sp, #40	; 0x28
    c34a:	4621      	mov	r1, r4
    c34c:	4628      	mov	r0, r5
    c34e:	f002 f86b 	bl	e428 <bt_mesh_friend_enqueue_rx>
}
    c352:	4650      	mov	r0, sl
    c354:	b017      	add	sp, #92	; 0x5c
    c356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) &&
    c35a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    c35e:	2b80      	cmp	r3, #128	; 0x80
    c360:	d119      	bne.n	c396 <bt_mesh_trans_recv+0x19e>
	    !bt_mesh_friend_queue_has_space(net_rx->sub->net_idx,
    c362:	682a      	ldr	r2, [r5, #0]
    c364:	8929      	ldrh	r1, [r5, #8]
    c366:	8b90      	ldrh	r0, [r2, #28]
    c368:	896a      	ldrh	r2, [r5, #10]
    c36a:	f8cd 8000 	str.w	r8, [sp]
    c36e:	ab0a      	add	r3, sp, #40	; 0x28
    c370:	f002 f822 	bl	e3b8 <bt_mesh_friend_queue_has_space>
	    net_rx->friend_match && !net_rx->local_match &&
    c374:	ab0a      	add	r3, sp, #40	; 0x28
    c376:	4604      	mov	r4, r0
    c378:	b968      	cbnz	r0, c396 <bt_mesh_trans_recv+0x19e>
			 net_rx->friend_match);
    c37a:	7d2a      	ldrb	r2, [r5, #20]
		send_ack(net_rx->sub, net_rx->ctx.recv_dst, net_rx->ctx.addr,
    c37c:	9300      	str	r3, [sp, #0]
    c37e:	09d2      	lsrs	r2, r2, #7
    c380:	e9cd 0201 	strd	r0, r2, [sp, #4]
    c384:	7beb      	ldrb	r3, [r5, #15]
    c386:	892a      	ldrh	r2, [r5, #8]
    c388:	8969      	ldrh	r1, [r5, #10]
    c38a:	6828      	ldr	r0, [r5, #0]
    c38c:	f014 fc78 	bl	20c80 <send_ack.isra.0>
		return -ENOBUFS;
    c390:	f06f 0a68 	mvn.w	sl, #104	; 0x68
    c394:	e7bf      	b.n	c316 <bt_mesh_trans_recv+0x11e>
	if (rpl && rpl->src && auth_seqnum <= rpl->seg &&
    c396:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c398:	b18b      	cbz	r3, c3be <bt_mesh_trans_recv+0x1c6>
    c39a:	881a      	ldrh	r2, [r3, #0]
    c39c:	f3c2 020e 	ubfx	r2, r2, #0, #15
    c3a0:	b16a      	cbz	r2, c3be <bt_mesh_trans_recv+0x1c6>
    c3a2:	685a      	ldr	r2, [r3, #4]
    c3a4:	9906      	ldr	r1, [sp, #24]
    c3a6:	ebb1 2f12 	cmp.w	r1, r2, lsr #8
    c3aa:	d808      	bhi.n	c3be <bt_mesh_trans_recv+0x1c6>
    c3ac:	f993 3001 	ldrsb.w	r3, [r3, #1]
	    (!rpl->old_iv || net_rx->old_iv)) {
    c3b0:	7d2a      	ldrb	r2, [r5, #20]
	if (rpl && rpl->src && auth_seqnum <= rpl->seg &&
    c3b2:	2b00      	cmp	r3, #0
    c3b4:	f280 812c 	bge.w	c610 <bt_mesh_trans_recv+0x418>
	    (!rpl->old_iv || net_rx->old_iv)) {
    c3b8:	07d2      	lsls	r2, r2, #31
    c3ba:	f100 8129 	bmi.w	c610 <bt_mesh_trans_recv+0x418>
 *
 * @return Number of unallocated memory blocks.
 */
static inline uint32_t k_mem_slab_num_free_get(struct k_mem_slab *slab)
{
	return slab->num_blocks - slab->num_used;
    c3be:	4b6e      	ldr	r3, [pc, #440]	; (c578 <bt_mesh_trans_recv+0x380>)
	if (k_mem_slab_num_free_get(&segs) < 1) {
    c3c0:	689a      	ldr	r2, [r3, #8]
    c3c2:	699b      	ldr	r3, [r3, #24]
    c3c4:	429a      	cmp	r2, r3
    c3c6:	d103      	bne.n	c3d0 <bt_mesh_trans_recv+0x1d8>
	enum bt_mesh_friend_pdu_type pdu_type = BT_MESH_FRIEND_PDU_SINGLE;
    c3c8:	2400      	movs	r4, #0
		return -ENOMEM;
    c3ca:	f06f 0a0b 	mvn.w	sl, #11
    c3ce:	e7a2      	b.n	c316 <bt_mesh_trans_recv+0x11e>
		if (rx->in_use) {
    c3d0:	4968      	ldr	r1, [pc, #416]	; (c574 <bt_mesh_trans_recv+0x37c>)
    c3d2:	f891 c01f 	ldrb.w	ip, [r1, #31]
    c3d6:	f01c 0440 	ands.w	r4, ip, #64	; 0x40
    c3da:	d1f5      	bne.n	c3c8 <bt_mesh_trans_recv+0x1d0>
		rx->sub = net_rx->sub;
    c3dc:	682b      	ldr	r3, [r5, #0]
		rx->ctl = net_rx->ctl;
    c3de:	f895 e014 	ldrb.w	lr, [r5, #20]
		rx->sub = net_rx->sub;
    c3e2:	600b      	str	r3, [r1, #0]
		rx->seq_auth = *seq_auth;
    c3e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
		rx->seg_n = seg_n;
    c3e8:	f00b 0b1f 	and.w	fp, fp, #31
		rx->ctl = net_rx->ctl;
    c3ec:	f3ce 0ec0 	ubfx	lr, lr, #3, #1
		rx->seg_n = seg_n;
    c3f0:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
		rx->seq_auth = *seq_auth;
    c3f4:	e9c1 2304 	strd	r2, r3, [r1, #16]
		rx->seg_n = seg_n;
    c3f8:	ea4b 1b4e 	orr.w	fp, fp, lr, lsl #5
    c3fc:	f02c 0c7f 	bic.w	ip, ip, #127	; 0x7f
    c400:	ea4b 0b0c 	orr.w	fp, fp, ip
    c404:	f881 b01f 	strb.w	fp, [r1, #31]
		rx->hdr = *hdr;
    c408:	f899 3000 	ldrb.w	r3, [r9]
    c40c:	778b      	strb	r3, [r1, #30]
		rx->ttl = net_rx->ctx.send_ttl;
    c40e:	7beb      	ldrb	r3, [r5, #15]
    c410:	f881 3020 	strb.w	r3, [r1, #32]
		rx->src = net_rx->ctx.addr;
    c414:	892b      	ldrh	r3, [r5, #8]
    c416:	830b      	strh	r3, [r1, #24]
		rx->dst = net_rx->ctx.recv_dst;
    c418:	896b      	ldrh	r3, [r5, #10]
    c41a:	834b      	strh	r3, [r1, #26]
	rx->obo = net_rx->friend_match;
    c41c:	7d2b      	ldrb	r3, [r5, #20]
		rx->block = 0U;
    c41e:	624c      	str	r4, [r1, #36]	; 0x24
	rx->obo = net_rx->friend_match;
    c420:	fa5f f28b 	uxtb.w	r2, fp
    c424:	09db      	lsrs	r3, r3, #7
    c426:	f363 12c7 	bfi	r2, r3, #7, #1
    c42a:	77ca      	strb	r2, [r1, #31]
	if (BIT(seg_o) & rx->block) {
    c42c:	f8df b144 	ldr.w	fp, [pc, #324]	; c574 <bt_mesh_trans_recv+0x37c>
    c430:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    c434:	40fc      	lsrs	r4, r7
    c436:	f014 0401 	ands.w	r4, r4, #1
    c43a:	f040 80e9 	bne.w	c610 <bt_mesh_trans_recv+0x418>
		rx->len = seg_n * seg_len(rx->ctl) + buf->len;
    c43e:	f89b 201f 	ldrb.w	r2, [fp, #31]
    c442:	88b3      	ldrh	r3, [r6, #4]
	if (seg_o == seg_n) {
    c444:	4557      	cmp	r7, sl
		rx->len = seg_n * seg_len(rx->ctl) + buf->len;
    c446:	f3c2 1140 	ubfx	r1, r2, #5, #1
	if (seg_o == seg_n) {
    c44a:	f040 80a9 	bne.w	c5a0 <bt_mesh_trans_recv+0x3a8>
		return BT_MESH_APP_SEG_SDU_MAX;
    c44e:	2900      	cmp	r1, #0
    c450:	bf14      	ite	ne
    c452:	2108      	movne	r1, #8
    c454:	210c      	moveq	r1, #12
		rx->len = seg_n * seg_len(rx->ctl) + buf->len;
    c456:	fb01 3307 	mla	r3, r1, r7, r3
    c45a:	b29b      	uxth	r3, r3
		if (rx->len > BT_MESH_RX_SDU_MAX) {
    c45c:	2b24      	cmp	r3, #36	; 0x24
		rx->len = seg_n * seg_len(rx->ctl) + buf->len;
    c45e:	f8ab 301c 	strh.w	r3, [fp, #28]
		if (rx->len > BT_MESH_RX_SDU_MAX) {
    c462:	f200 808d 	bhi.w	c580 <bt_mesh_trans_recv+0x388>
    c466:	f019 fda1 	bl	25fac <z_impl_k_uptime_ticks>
    c46a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c46e:	fba0 0302 	umull	r0, r3, r0, r2
    c472:	fb02 3301 	mla	r3, r2, r1, r3
    c476:	0bc0      	lsrs	r0, r0, #15
    c478:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return (uint32_t)k_uptime_get();
    c47c:	f8cb 0028 	str.w	r0, [fp, #40]	; 0x28
		int32_t timeout = ack_timeout(rx);
    c480:	483c      	ldr	r0, [pc, #240]	; (c574 <bt_mesh_trans_recv+0x37c>)
    c482:	f014 fac5 	bl	20a10 <ack_timeout>
    c486:	2400      	movs	r4, #0
		k_work_schedule(&rx->ack, K_MSEC(timeout));
    c488:	ea20 7ce0 	bic.w	ip, r0, r0, asr #31
    c48c:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
    c490:	f240 30e7 	movw	r0, #999	; 0x3e7
    c494:	4621      	mov	r1, r4
    c496:	fbcc 010e 	smlal	r0, r1, ip, lr
    c49a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c49e:	2300      	movs	r3, #0
    c4a0:	f7f4 ffea 	bl	1478 <__aeabi_uldivmod>
    c4a4:	4602      	mov	r2, r0
    c4a6:	460b      	mov	r3, r1
    c4a8:	4834      	ldr	r0, [pc, #208]	; (c57c <bt_mesh_trans_recv+0x384>)
    c4aa:	f00f f901 	bl	1b6b0 <k_work_schedule>
	err = k_mem_slab_alloc(&segs, &rx->seg[seg_o], K_NO_WAIT);
    c4ae:	1c79      	adds	r1, r7, #1
    c4b0:	b2c9      	uxtb	r1, r1
    c4b2:	4831      	ldr	r0, [pc, #196]	; (c578 <bt_mesh_trans_recv+0x380>)
    c4b4:	2200      	movs	r2, #0
    c4b6:	2300      	movs	r3, #0
    c4b8:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
    c4bc:	f00e fd32 	bl	1af24 <k_mem_slab_alloc>
	if (err) {
    c4c0:	4682      	mov	sl, r0
    c4c2:	2800      	cmp	r0, #0
    c4c4:	f47f af64 	bne.w	c390 <bt_mesh_trans_recv+0x198>
	memcpy(rx->seg[seg_o], buf->data, buf->len);
    c4c8:	eb0b 0387 	add.w	r3, fp, r7, lsl #2
    c4cc:	88b2      	ldrh	r2, [r6, #4]
    c4ce:	6858      	ldr	r0, [r3, #4]
    c4d0:	6831      	ldr	r1, [r6, #0]
    c4d2:	f011 fdae 	bl	1e032 <memcpy>
	rx->block |= BIT(seg_o);
    c4d6:	2401      	movs	r4, #1
    c4d8:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    c4dc:	fa04 f707 	lsl.w	r7, r4, r7
    c4e0:	431f      	orrs	r7, r3
	if (rx->block != BLOCK_COMPLETE(seg_n)) {
    c4e2:	fa04 f308 	lsl.w	r3, r4, r8
    c4e6:	3b01      	subs	r3, #1
    c4e8:	429f      	cmp	r7, r3
	rx->block |= BIT(seg_o);
    c4ea:	f8cb 7024 	str.w	r7, [fp, #36]	; 0x24
	if (rx->block != BLOCK_COMPLETE(seg_n)) {
    c4ee:	f47f af12 	bne.w	c316 <bt_mesh_trans_recv+0x11e>
	if (rpl) {
    c4f2:	9809      	ldr	r0, [sp, #36]	; 0x24
    c4f4:	b168      	cbz	r0, c512 <bt_mesh_trans_recv+0x31a>
		bt_mesh_rpl_update(rpl, net_rx);
    c4f6:	4629      	mov	r1, r5
    c4f8:	f014 fc6b 	bl	20dd2 <bt_mesh_rpl_update>
		rpl->seg = MAX(rpl->seg, auth_seqnum);
    c4fc:	9909      	ldr	r1, [sp, #36]	; 0x24
    c4fe:	9806      	ldr	r0, [sp, #24]
    c500:	684b      	ldr	r3, [r1, #4]
    c502:	f3c3 2217 	ubfx	r2, r3, #8, #24
    c506:	4282      	cmp	r2, r0
    c508:	bf38      	it	cc
    c50a:	4602      	movcc	r2, r0
    c50c:	f362 231f 	bfi	r3, r2, #8, #24
    c510:	604b      	str	r3, [r1, #4]
	(void)k_work_cancel_delayable(&rx->ack);
    c512:	481a      	ldr	r0, [pc, #104]	; (c57c <bt_mesh_trans_recv+0x384>)
    c514:	f019 fbca 	bl	25cac <k_work_cancel_delayable>
		 net_rx->ctx.send_ttl, seq_auth, rx->block, rx->obo);
    c518:	f89b 301f 	ldrb.w	r3, [fp, #31]
	send_ack(net_rx->sub, net_rx->ctx.recv_dst, net_rx->ctx.addr,
    c51c:	892a      	ldrh	r2, [r5, #8]
    c51e:	8969      	ldrh	r1, [r5, #10]
    c520:	6828      	ldr	r0, [r5, #0]
    c522:	09db      	lsrs	r3, r3, #7
    c524:	9302      	str	r3, [sp, #8]
    c526:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    c52a:	9301      	str	r3, [sp, #4]
    c52c:	ac0a      	add	r4, sp, #40	; 0x28
    c52e:	7beb      	ldrb	r3, [r5, #15]
    c530:	9400      	str	r4, [sp, #0]
    c532:	f014 fba5 	bl	20c80 <send_ack.isra.0>
	if (net_rx->ctl) {
    c536:	7d2b      	ldrb	r3, [r5, #20]
    c538:	071b      	lsls	r3, r3, #28
    c53a:	d53b      	bpl.n	c5b4 <bt_mesh_trans_recv+0x3bc>
		NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_RX_CTL_MAX);
    c53c:	ab10      	add	r3, sp, #64	; 0x40
    c53e:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
    c542:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
		seg_rx_assemble(rx, &sdu, 0U);
    c546:	480b      	ldr	r0, [pc, #44]	; (c574 <bt_mesh_trans_recv+0x37c>)
		NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_RX_CTL_MAX);
    c548:	930d      	str	r3, [sp, #52]	; 0x34
		seg_rx_assemble(rx, &sdu, 0U);
    c54a:	2200      	movs	r2, #0
    c54c:	a90d      	add	r1, sp, #52	; 0x34
    c54e:	f014 fa31 	bl	209b4 <seg_rx_assemble>
		err = ctl_recv(net_rx, *hdr, &sdu, seq_auth);
    c552:	f899 1000 	ldrb.w	r1, [r9]
    c556:	4623      	mov	r3, r4
    c558:	aa0d      	add	r2, sp, #52	; 0x34
    c55a:	4628      	mov	r0, r5
    c55c:	f7ff fa96 	bl	ba8c <ctl_recv>
		err = sdu_recv(net_rx, *hdr, ASZMIC(hdr), &seg_buf, &sdu, rx);
    c560:	4682      	mov	sl, r0
	seg_rx_reset(rx, false);
    c562:	4804      	ldr	r0, [pc, #16]	; (c574 <bt_mesh_trans_recv+0x37c>)
    c564:	2100      	movs	r1, #0
    c566:	f7ff f929 	bl	b7bc <seg_rx_reset>
	*pdu_type = BT_MESH_FRIEND_PDU_COMPLETE;
    c56a:	2402      	movs	r4, #2
	return err;
    c56c:	e6d3      	b.n	c316 <bt_mesh_trans_recv+0x11e>
    c56e:	bf00      	nop
    c570:	20001728 	.word	0x20001728
    c574:	20001968 	.word	0x20001968
    c578:	20000ed0 	.word	0x20000ed0
    c57c:	20001998 	.word	0x20001998
			send_ack(net_rx->sub, net_rx->ctx.recv_dst,
    c580:	ab0a      	add	r3, sp, #40	; 0x28
    c582:	09d2      	lsrs	r2, r2, #7
    c584:	e9cd 4201 	strd	r4, r2, [sp, #4]
    c588:	8969      	ldrh	r1, [r5, #10]
    c58a:	6828      	ldr	r0, [r5, #0]
    c58c:	9300      	str	r3, [sp, #0]
    c58e:	892a      	ldrh	r2, [r5, #8]
    c590:	7beb      	ldrb	r3, [r5, #15]
    c592:	f014 fb75 	bl	20c80 <send_ack.isra.0>
			seg_rx_reset(rx, true);
    c596:	2101      	movs	r1, #1
    c598:	4658      	mov	r0, fp
    c59a:	f7ff f90f 	bl	b7bc <seg_rx_reset>
    c59e:	e6b8      	b.n	c312 <bt_mesh_trans_recv+0x11a>
		return BT_MESH_APP_SEG_SDU_MAX;
    c5a0:	2900      	cmp	r1, #0
		if (buf->len != seg_len(rx->ctl)) {
    c5a2:	bf14      	ite	ne
    c5a4:	2208      	movne	r2, #8
    c5a6:	220c      	moveq	r2, #12
    c5a8:	4293      	cmp	r3, r2
    c5aa:	f43f af5c 	beq.w	c466 <bt_mesh_trans_recv+0x26e>
		return -EINVAL;
    c5ae:	f06f 0a15 	mvn.w	sl, #21
    c5b2:	e6b0      	b.n	c316 <bt_mesh_trans_recv+0x11e>
	} else if (rx->len < 1 + APP_MIC_LEN(ASZMIC(hdr))) {
    c5b4:	f899 3001 	ldrb.w	r3, [r9, #1]
    c5b8:	f8bb 201c 	ldrh.w	r2, [fp, #28]
    c5bc:	09db      	lsrs	r3, r3, #7
    c5be:	bf14      	ite	ne
    c5c0:	2309      	movne	r3, #9
    c5c2:	2305      	moveq	r3, #5
    c5c4:	429a      	cmp	r2, r3
    c5c6:	db20      	blt.n	c60a <bt_mesh_trans_recv+0x412>
	if (!buf->__buf) {
    c5c8:	4b47      	ldr	r3, [pc, #284]	; (c6e8 <bt_mesh_trans_recv+0x4f0>)
    c5ca:	6899      	ldr	r1, [r3, #8]
    c5cc:	b911      	cbnz	r1, c5d4 <bt_mesh_trans_recv+0x3dc>
		buf->__buf = (uint8_t *)buf + sizeof(*buf);
    c5ce:	f103 010c 	add.w	r1, r3, #12
    c5d2:	6099      	str	r1, [r3, #8]
	buf->data = buf->__buf + reserve_head;
    c5d4:	6899      	ldr	r1, [r3, #8]
    c5d6:	6019      	str	r1, [r3, #0]
	buf->len = 0U;
    c5d8:	2000      	movs	r0, #0
    c5da:	8098      	strh	r0, [r3, #4]
			&sdu, seg_buf.data, rx->len - APP_MIC_LEN(ASZMIC(hdr)));
    c5dc:	f899 3001 	ldrb.w	r3, [r9, #1]
    c5e0:	09db      	lsrs	r3, r3, #7
    c5e2:	bf14      	ite	ne
    c5e4:	2308      	movne	r3, #8
    c5e6:	2304      	moveq	r3, #4
		net_buf_simple_init_with_data(
    c5e8:	ac10      	add	r4, sp, #64	; 0x40
    c5ea:	1ad2      	subs	r2, r2, r3
    c5ec:	4620      	mov	r0, r4
    c5ee:	f018 fb26 	bl	24c3e <net_buf_simple_init_with_data>
		err = sdu_recv(net_rx, *hdr, ASZMIC(hdr), &seg_buf, &sdu, rx);
    c5f2:	f899 2001 	ldrb.w	r2, [r9, #1]
    c5f6:	f899 1000 	ldrb.w	r1, [r9]
    c5fa:	4b3b      	ldr	r3, [pc, #236]	; (c6e8 <bt_mesh_trans_recv+0x4f0>)
    c5fc:	e9cd 4b00 	strd	r4, fp, [sp]
    c600:	09d2      	lsrs	r2, r2, #7
    c602:	4628      	mov	r0, r5
    c604:	f7ff fda2 	bl	c14c <sdu_recv>
    c608:	e7aa      	b.n	c560 <bt_mesh_trans_recv+0x368>
		err = -EINVAL;
    c60a:	f06f 0a15 	mvn.w	sl, #21
    c60e:	e7a8      	b.n	c562 <bt_mesh_trans_recv+0x36a>
	enum bt_mesh_friend_pdu_type pdu_type = BT_MESH_FRIEND_PDU_SINGLE;
    c610:	2400      	movs	r4, #0
    c612:	e065      	b.n	c6e0 <bt_mesh_trans_recv+0x4e8>
	if (buf->len < 1) {
    c614:	9b05      	ldr	r3, [sp, #20]
    c616:	b913      	cbnz	r3, c61e <bt_mesh_trans_recv+0x426>
		seg_count = 1;
    c618:	f04f 0801 	mov.w	r8, #1
    c61c:	e61e      	b.n	c25c <bt_mesh_trans_recv+0x64>
	if (bt_mesh_rpl_check(rx, NULL)) {
    c61e:	2100      	movs	r1, #0
    c620:	4628      	mov	r0, r5
    c622:	f000 f867 	bl	c6f4 <bt_mesh_rpl_check>
    c626:	4607      	mov	r7, r0
    c628:	2800      	cmp	r0, #0
    c62a:	d1f5      	bne.n	c618 <bt_mesh_trans_recv+0x420>
	hdr = net_buf_simple_pull_u8(buf);
    c62c:	4630      	mov	r0, r6
    c62e:	f018 fbfd 	bl	24e2c <net_buf_simple_pull_u8>
	if (rx->ctl) {
    c632:	7d2c      	ldrb	r4, [r5, #20]
    c634:	f014 0408 	ands.w	r4, r4, #8
	hdr = net_buf_simple_pull_u8(buf);
    c638:	4601      	mov	r1, r0
	if (rx->ctl) {
    c63a:	d009      	beq.n	c650 <bt_mesh_trans_recv+0x458>
		return ctl_recv(rx, hdr, buf, seq_auth);
    c63c:	ab0a      	add	r3, sp, #40	; 0x28
    c63e:	4632      	mov	r2, r6
    c640:	4628      	mov	r0, r5
    c642:	f7ff fa23 	bl	ba8c <ctl_recv>
		seg_count = 1;
    c646:	f04f 0801 	mov.w	r8, #1
		return ctl_recv(rx, hdr, buf, seq_auth);
    c64a:	4682      	mov	sl, r0
	enum bt_mesh_friend_pdu_type pdu_type = BT_MESH_FRIEND_PDU_SINGLE;
    c64c:	463c      	mov	r4, r7
		return ctl_recv(rx, hdr, buf, seq_auth);
    c64e:	e662      	b.n	c316 <bt_mesh_trans_recv+0x11e>
	if (buf->len < 1 + APP_MIC_LEN(0)) {
    c650:	88b3      	ldrh	r3, [r6, #4]
    c652:	2b04      	cmp	r3, #4
    c654:	d9e0      	bls.n	c618 <bt_mesh_trans_recv+0x420>
	buf->len -= APP_MIC_LEN(0);
    c656:	3b04      	subs	r3, #4
    c658:	80b3      	strh	r3, [r6, #4]
	return sdu_recv(rx, hdr, 0, buf, &sdu, NULL);
    c65a:	4b24      	ldr	r3, [pc, #144]	; (c6ec <bt_mesh_trans_recv+0x4f4>)
    c65c:	9300      	str	r3, [sp, #0]
    c65e:	9401      	str	r4, [sp, #4]
    c660:	4633      	mov	r3, r6
    c662:	4622      	mov	r2, r4
    c664:	4628      	mov	r0, r5
    c666:	f7ff fd71 	bl	c14c <sdu_recv>
		seg_count = 1;
    c66a:	f04f 0801 	mov.w	r8, #1
	return sdu_recv(rx, hdr, 0, buf, &sdu, NULL);
    c66e:	4682      	mov	sl, r0
    c670:	e651      	b.n	c316 <bt_mesh_trans_recv+0x11e>
			return 0;
    c672:	4682      	mov	sl, r0
    c674:	e66d      	b.n	c352 <bt_mesh_trans_recv+0x15a>
		if (rx->seq_auth > *seq_auth) {
    c676:	4594      	cmp	ip, r2
    c678:	eb71 0303 	sbcs.w	r3, r1, r3
    c67c:	d397      	bcc.n	c5ae <bt_mesh_trans_recv+0x3b6>
	if (rx->hdr != *hdr || rx->seg_n != seg_n) {
    c67e:	f899 2000 	ldrb.w	r2, [r9]
    c682:	7f83      	ldrb	r3, [r0, #30]
    c684:	429a      	cmp	r2, r3
    c686:	d192      	bne.n	c5ae <bt_mesh_trans_recv+0x3b6>
    c688:	7fc3      	ldrb	r3, [r0, #31]
    c68a:	f003 031f 	and.w	r3, r3, #31
    c68e:	4553      	cmp	r3, sl
    c690:	f47f ade4 	bne.w	c25c <bt_mesh_trans_recv+0x64>
	if (rx->ctl != net_rx->ctl) {
    c694:	4816      	ldr	r0, [pc, #88]	; (c6f0 <bt_mesh_trans_recv+0x4f8>)
    c696:	7d29      	ldrb	r1, [r5, #20]
    c698:	7fc2      	ldrb	r2, [r0, #31]
    c69a:	f3c1 01c0 	ubfx	r1, r1, #3, #1
    c69e:	f3c2 1440 	ubfx	r4, r2, #5, #1
    c6a2:	428c      	cmp	r4, r1
    c6a4:	f47f adda 	bne.w	c25c <bt_mesh_trans_recv+0x64>
		if (rx->in_use) {
    c6a8:	f012 0440 	ands.w	r4, r2, #64	; 0x40
    c6ac:	f47f aebe 	bne.w	c42c <bt_mesh_trans_recv+0x234>
		if (rx->block == BLOCK_COMPLETE(rx->seg_n)) {
    c6b0:	1c59      	adds	r1, r3, #1
    c6b2:	2301      	movs	r3, #1
    c6b4:	6a40      	ldr	r0, [r0, #36]	; 0x24
    c6b6:	408b      	lsls	r3, r1
    c6b8:	3b01      	subs	r3, #1
    c6ba:	4283      	cmp	r3, r0
    c6bc:	f47f af77 	bne.w	c5ae <bt_mesh_trans_recv+0x3b6>
			send_ack(net_rx->sub, net_rx->ctx.recv_dst,
    c6c0:	09d2      	lsrs	r2, r2, #7
    c6c2:	e9cd 3201 	strd	r3, r2, [sp, #4]
    c6c6:	ab0a      	add	r3, sp, #40	; 0x28
    c6c8:	6828      	ldr	r0, [r5, #0]
    c6ca:	9300      	str	r3, [sp, #0]
    c6cc:	892a      	ldrh	r2, [r5, #8]
    c6ce:	7beb      	ldrb	r3, [r5, #15]
    c6d0:	8969      	ldrh	r1, [r5, #10]
    c6d2:	f014 fad5 	bl	20c80 <send_ack.isra.0>
			if (rpl) {
    c6d6:	9809      	ldr	r0, [sp, #36]	; 0x24
    c6d8:	b110      	cbz	r0, c6e0 <bt_mesh_trans_recv+0x4e8>
				bt_mesh_rpl_update(rpl, net_rx);
    c6da:	4629      	mov	r1, r5
    c6dc:	f014 fb79 	bl	20dd2 <bt_mesh_rpl_update>
		return -EALREADY;
    c6e0:	f06f 0a77 	mvn.w	sl, #119	; 0x77
    c6e4:	e617      	b.n	c316 <bt_mesh_trans_recv+0x11e>
    c6e6:	bf00      	nop
    c6e8:	2000068c 	.word	0x2000068c
    c6ec:	20000680 	.word	0x20000680
    c6f0:	20001968 	.word	0x20001968

0000c6f4 <bt_mesh_rpl_check>:
 * updated (needed for segmented messages), whereas if a NULL match is given
 * the RPL is immediately updated (used for unsegmented messages).
 */
bool bt_mesh_rpl_check(struct bt_mesh_net_rx *rx,
		struct bt_mesh_rpl **match)
{
    c6f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i;

	/* Don't bother checking messages from ourselves */
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
    c6f6:	7d06      	ldrb	r6, [r0, #20]
    c6f8:	f006 0330 	and.w	r3, r6, #48	; 0x30
    c6fc:	2b10      	cmp	r3, #16
{
    c6fe:	4605      	mov	r5, r0
    c700:	460c      	mov	r4, r1
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
    c702:	d00c      	beq.n	c71e <bt_mesh_rpl_check+0x2a>
		return false;
	}

	/* The RPL is used only for the local node */
	if (!rx->local_match) {
    c704:	f016 0040 	ands.w	r0, r6, #64	; 0x40
    c708:	d00a      	beq.n	c720 <bt_mesh_rpl_check+0x2c>
    c70a:	4818      	ldr	r0, [pc, #96]	; (c76c <bt_mesh_rpl_check+0x78>)
		return false;
	}

	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
    c70c:	2200      	movs	r2, #0
    c70e:	4601      	mov	r1, r0
		struct bt_mesh_rpl *rpl = &replay_list[i];

		/* Empty slot */
		if (!rpl->src) {
    c710:	f831 7032 	ldrh.w	r7, [r1, r2, lsl #3]
    c714:	f3c7 030e 	ubfx	r3, r7, #0, #15
    c718:	b91b      	cbnz	r3, c722 <bt_mesh_rpl_check+0x2e>
				return true;
			}

			if ((!rx->old_iv && rpl->old_iv) ||
			    rpl->seq < rx->seq) {
				if (match) {
    c71a:	b1ec      	cbz	r4, c758 <bt_mesh_rpl_check+0x64>
					*match = rpl;
    c71c:	6020      	str	r0, [r4, #0]
				} else {
					bt_mesh_rpl_update(rpl, rx);
				}

				return false;
    c71e:	2000      	movs	r0, #0
		}
	}

	BT_ERR("RPL is full!");
	return true;
}
    c720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (rpl->src == rx->ctx.addr) {
    c722:	892b      	ldrh	r3, [r5, #8]
    c724:	f3c7 070e 	ubfx	r7, r7, #0, #15
    c728:	429f      	cmp	r7, r3
    c72a:	d119      	bne.n	c760 <bt_mesh_rpl_check+0x6c>
			if (rx->old_iv && !rpl->old_iv) {
    c72c:	00d7      	lsls	r7, r2, #3
    c72e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
    c732:	f992 3001 	ldrsb.w	r3, [r2, #1]
    c736:	07f2      	lsls	r2, r6, #31
    c738:	d503      	bpl.n	c742 <bt_mesh_rpl_check+0x4e>
    c73a:	2b00      	cmp	r3, #0
    c73c:	db03      	blt.n	c746 <bt_mesh_rpl_check+0x52>
				return true;
    c73e:	2001      	movs	r0, #1
    c740:	e7ee      	b.n	c720 <bt_mesh_rpl_check+0x2c>
			if ((!rx->old_iv && rpl->old_iv) ||
    c742:	2b00      	cmp	r3, #0
    c744:	dbe9      	blt.n	c71a <bt_mesh_rpl_check+0x26>
			    rpl->seq < rx->seq) {
    c746:	4439      	add	r1, r7
    c748:	790a      	ldrb	r2, [r1, #4]
    c74a:	884b      	ldrh	r3, [r1, #2]
    c74c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
			if ((!rx->old_iv && rpl->old_iv) ||
    c750:	692a      	ldr	r2, [r5, #16]
    c752:	4293      	cmp	r3, r2
    c754:	d2f3      	bcs.n	c73e <bt_mesh_rpl_check+0x4a>
    c756:	e7e0      	b.n	c71a <bt_mesh_rpl_check+0x26>
					bt_mesh_rpl_update(rpl, rx);
    c758:	4629      	mov	r1, r5
    c75a:	f014 fb3a 	bl	20dd2 <bt_mesh_rpl_update>
    c75e:	e7de      	b.n	c71e <bt_mesh_rpl_check+0x2a>
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
    c760:	3201      	adds	r2, #1
    c762:	2a0a      	cmp	r2, #10
    c764:	f100 0008 	add.w	r0, r0, #8
    c768:	d1d2      	bne.n	c710 <bt_mesh_rpl_check+0x1c>
    c76a:	e7e8      	b.n	c73e <bt_mesh_rpl_check+0x4a>
    c76c:	20001a28 	.word	0x20001a28

0000c770 <bt_mesh_rpl_clear>:
	BT_DBG("");

	if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		schedule_rpl_clear();
	} else {
		(void)memset(replay_list, 0, sizeof(replay_list));
    c770:	4802      	ldr	r0, [pc, #8]	; (c77c <bt_mesh_rpl_clear+0xc>)
    c772:	2250      	movs	r2, #80	; 0x50
    c774:	2100      	movs	r1, #0
    c776:	f011 bc67 	b.w	1e048 <memset>
    c77a:	bf00      	nop
    c77c:	20001a28 	.word	0x20001a28

0000c780 <bt_mesh_rpl_reset>:

	return NULL;
}

void bt_mesh_rpl_reset(void)
{
    c780:	b570      	push	{r4, r5, r6, lr}
    c782:	4d0f      	ldr	r5, [pc, #60]	; (c7c0 <bt_mesh_rpl_reset+0x40>)
	int i;

	/* Discard "old old" IV Index entries from RPL and flag
	 * any other ones (which are valid) as old.
	 */
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
    c784:	2400      	movs	r4, #0
    c786:	462e      	mov	r6, r5
		struct bt_mesh_rpl *rpl = &replay_list[i];

		if (rpl->src) {
    c788:	f836 3034 	ldrh.w	r3, [r6, r4, lsl #3]
    c78c:	f3c3 030e 	ubfx	r3, r3, #0, #15
    c790:	b153      	cbz	r3, c7a8 <bt_mesh_rpl_reset+0x28>
			if (rpl->old_iv) {
    c792:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
    c796:	f993 2001 	ldrsb.w	r2, [r3, #1]
    c79a:	2a00      	cmp	r2, #0
    c79c:	da0a      	bge.n	c7b4 <bt_mesh_rpl_reset+0x34>
				if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
					clear_rpl(rpl);
				} else {
					(void)memset(rpl, 0, sizeof(*rpl));
    c79e:	2208      	movs	r2, #8
    c7a0:	2100      	movs	r1, #0
    c7a2:	4628      	mov	r0, r5
    c7a4:	f011 fc50 	bl	1e048 <memset>
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
    c7a8:	3401      	adds	r4, #1
    c7aa:	2c0a      	cmp	r4, #10
    c7ac:	f105 0508 	add.w	r5, r5, #8
    c7b0:	d1ea      	bne.n	c788 <bt_mesh_rpl_reset+0x8>
					schedule_rpl_store(rpl, true);
				}
			}
		}
	}
}
    c7b2:	bd70      	pop	{r4, r5, r6, pc}
				rpl->old_iv = true;
    c7b4:	785a      	ldrb	r2, [r3, #1]
    c7b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    c7ba:	705a      	strb	r2, [r3, #1]
				if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
    c7bc:	e7f4      	b.n	c7a8 <bt_mesh_rpl_reset+0x28>
    c7be:	bf00      	nop
    c7c0:	20001a28 	.word	0x20001a28

0000c7c4 <sub_end>:
		}
	}
}

static void sub_end(struct k_work *work)
{
    c7c4:	b570      	push	{r4, r5, r6, lr}
	sub.remaining = 0;
    c7c6:	4d07      	ldr	r5, [pc, #28]	; (c7e4 <sub_end+0x20>)
	STRUCT_SECTION_FOREACH(bt_mesh_hb_cb, cb) {
    c7c8:	4c07      	ldr	r4, [pc, #28]	; (c7e8 <sub_end+0x24>)
    c7ca:	4e08      	ldr	r6, [pc, #32]	; (c7ec <sub_end+0x28>)
	sub.remaining = 0;
    c7cc:	2300      	movs	r3, #0
    c7ce:	606b      	str	r3, [r5, #4]
	STRUCT_SECTION_FOREACH(bt_mesh_hb_cb, cb) {
    c7d0:	42b4      	cmp	r4, r6
    c7d2:	d300      	bcc.n	c7d6 <sub_end+0x12>
	notify_sub_end();
}
    c7d4:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->sub_end) {
    c7d6:	6863      	ldr	r3, [r4, #4]
    c7d8:	b10b      	cbz	r3, c7de <sub_end+0x1a>
			cb->sub_end(&sub);
    c7da:	4628      	mov	r0, r5
    c7dc:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_mesh_hb_cb, cb) {
    c7de:	3408      	adds	r4, #8
    c7e0:	e7f6      	b.n	c7d0 <sub_end+0xc>
    c7e2:	bf00      	nop
    c7e4:	2000246c 	.word	0x2000246c
    c7e8:	000265e8 	.word	0x000265e8
    c7ec:	000265e8 	.word	0x000265e8

0000c7f0 <hb_publish_end_cb>:
{
    c7f0:	b570      	push	{r4, r5, r6, lr}
	if (pub.period && pub.count > 1) {
    c7f2:	4d11      	ldr	r5, [pc, #68]	; (c838 <hb_publish_end_cb+0x48>)
    c7f4:	68ec      	ldr	r4, [r5, #12]
    c7f6:	b1b4      	cbz	r4, c826 <hb_publish_end_cb+0x36>
    c7f8:	886b      	ldrh	r3, [r5, #2]
    c7fa:	2b01      	cmp	r3, #1
    c7fc:	d913      	bls.n	c826 <hb_publish_end_cb+0x36>
		k_work_reschedule(&pub_timer, K_SECONDS(pub.period));
    c7fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    c802:	435c      	muls	r4, r3
    c804:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    c808:	f240 30e7 	movw	r0, #999	; 0x3e7
    c80c:	2100      	movs	r1, #0
    c80e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c812:	2300      	movs	r3, #0
    c814:	fbe4 0106 	umlal	r0, r1, r4, r6
    c818:	f7f4 fe2e 	bl	1478 <__aeabi_uldivmod>
    c81c:	4602      	mov	r2, r0
    c81e:	460b      	mov	r3, r1
    c820:	4806      	ldr	r0, [pc, #24]	; (c83c <hb_publish_end_cb+0x4c>)
    c822:	f00e ff79 	bl	1b718 <k_work_reschedule>
	if (pub.count != 0xffff) {
    c826:	886b      	ldrh	r3, [r5, #2]
    c828:	f64f 72ff 	movw	r2, #65535	; 0xffff
    c82c:	4293      	cmp	r3, r2
		pub.count--;
    c82e:	bf1c      	itt	ne
    c830:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
    c834:	806b      	strhne	r3, [r5, #2]
}
    c836:	bd70      	pop	{r4, r5, r6, pc}
    c838:	2000245c 	.word	0x2000245c
    c83c:	20001a78 	.word	0x20001a78

0000c840 <heartbeat_send.constprop.0>:

static int heartbeat_send(const struct bt_mesh_send_cb *cb, void *cb_data)
    c840:	b530      	push	{r4, r5, lr}
	struct __packed {
		uint8_t init_ttl;
		uint16_t feat;
	} hb;
	struct bt_mesh_msg_ctx ctx = {
		.net_idx = pub.net_idx,
    c842:	4c26      	ldr	r4, [pc, #152]	; (c8dc <heartbeat_send.constprop.0+0x9c>)
static int heartbeat_send(const struct bt_mesh_send_cb *cb, void *cb_data)
    c844:	b08b      	sub	sp, #44	; 0x2c
	struct bt_mesh_msg_ctx ctx = {
    c846:	f64f 72ff 	movw	r2, #65535	; 0xffff
    c84a:	f8ad 2012 	strh.w	r2, [sp, #18]
    c84e:	8822      	ldrh	r2, [r4, #0]
    c850:	f8ad 2014 	strh.w	r2, [sp, #20]
    c854:	2300      	movs	r3, #0
    c856:	7922      	ldrb	r2, [r4, #4]
    c858:	f88d 201b 	strb.w	r2, [sp, #27]
static int heartbeat_send(const struct bt_mesh_send_cb *cb, void *cb_data)
    c85c:	4605      	mov	r5, r0
		.net_idx = pub.net_idx,
    c85e:	8920      	ldrh	r0, [r4, #8]
	struct bt_mesh_msg_ctx ctx = {
    c860:	f8cd 3016 	str.w	r3, [sp, #22]
		.app_idx = BT_MESH_KEY_UNUSED,
		.addr = pub.dst,
		.send_ttl = pub.ttl,
	};
	struct bt_mesh_net_tx tx = {
    c864:	e9cd 3307 	strd	r3, r3, [sp, #28]
	struct bt_mesh_msg_ctx ctx = {
    c868:	f88d 301a 	strb.w	r3, [sp, #26]
	struct bt_mesh_net_tx tx = {
    c86c:	9309      	str	r3, [sp, #36]	; 0x24
	struct bt_mesh_msg_ctx ctx = {
    c86e:	f8ad 0010 	strh.w	r0, [sp, #16]
		.sub = bt_mesh_subnet_get(pub.net_idx),
    c872:	f7fe fd2d 	bl	b2d0 <bt_mesh_subnet_get>
	struct bt_mesh_net_tx tx = {
    c876:	ab04      	add	r3, sp, #16
    c878:	9308      	str	r3, [sp, #32]
    c87a:	9007      	str	r0, [sp, #28]
		.ctx = &ctx,
		.src = bt_mesh_primary_addr(),
    c87c:	f000 fc34 	bl	d0e8 <bt_mesh_primary_addr>
	struct bt_mesh_net_tx tx = {
    c880:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
		.xmit = bt_mesh_net_transmit_get(),
    c884:	f7fd fcbe 	bl	a204 <bt_mesh_net_transmit_get>
	struct bt_mesh_net_tx tx = {
    c888:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
	};

	/* Do nothing if heartbeat publication is not enabled or the subnet is
	 * removed.
	 */
	if (!tx.sub || pub.dst == BT_MESH_ADDR_UNASSIGNED) {
    c88c:	9807      	ldr	r0, [sp, #28]
    c88e:	b310      	cbz	r0, c8d6 <heartbeat_send.constprop.0+0x96>
    c890:	8820      	ldrh	r0, [r4, #0]
    c892:	b300      	cbz	r0, c8d6 <heartbeat_send.constprop.0+0x96>
		return 0;
	}

	hb.init_ttl = pub.ttl;
    c894:	7923      	ldrb	r3, [r4, #4]
    c896:	f88d 300c 	strb.w	r3, [sp, #12]

	if (bt_mesh_relay_get() == BT_MESH_RELAY_ENABLED) {
    c89a:	f7fd fcd3 	bl	a244 <bt_mesh_relay_get>
	uint16_t feat = 0U;
    c89e:	1e43      	subs	r3, r0, #1
    c8a0:	425c      	negs	r4, r3
    c8a2:	415c      	adcs	r4, r3
		feat |= BT_MESH_FEAT_RELAY;
	}

	if (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED) {
    c8a4:	f7fd fc74 	bl	a190 <bt_mesh_gatt_proxy_get>
    c8a8:	2801      	cmp	r0, #1
		feat |= BT_MESH_FEAT_PROXY;
    c8aa:	bf08      	it	eq
    c8ac:	f044 0402 	orreq.w	r4, r4, #2
	}

	if (bt_mesh_friend_get() == BT_MESH_FRIEND_ENABLED) {
    c8b0:	f7fd fc92 	bl	a1d8 <bt_mesh_friend_get>
    c8b4:	2801      	cmp	r0, #1

	hb.feat = sys_cpu_to_be16(feat);

	BT_DBG("InitTTL %u feat 0x%04x", pub.ttl, feat);

	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_HEARTBEAT, &hb, sizeof(hb),
    c8b6:	f04f 0300 	mov.w	r3, #0
		feat |= BT_MESH_FEAT_FRIEND;
    c8ba:	bf08      	it	eq
    c8bc:	f044 0404 	orreq.w	r4, r4, #4
	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_HEARTBEAT, &hb, sizeof(hb),
    c8c0:	e9cd 5300 	strd	r5, r3, [sp]
	hb.feat = sys_cpu_to_be16(feat);
    c8c4:	0224      	lsls	r4, r4, #8
	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_HEARTBEAT, &hb, sizeof(hb),
    c8c6:	2303      	movs	r3, #3
    c8c8:	aa03      	add	r2, sp, #12
    c8ca:	210a      	movs	r1, #10
    c8cc:	a807      	add	r0, sp, #28
	hb.feat = sys_cpu_to_be16(feat);
    c8ce:	f8ad 400d 	strh.w	r4, [sp, #13]
	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_HEARTBEAT, &hb, sizeof(hb),
    c8d2:	f014 f994 	bl	20bfe <bt_mesh_ctl_send>
				cb, cb_data);
}
    c8d6:	b00b      	add	sp, #44	; 0x2c
    c8d8:	bd30      	pop	{r4, r5, pc}
    c8da:	bf00      	nop
    c8dc:	2000245c 	.word	0x2000245c

0000c8e0 <hb_publish>:
		hb_publish_end_cb(err, cb_data);
	}
}

static void hb_publish(struct k_work *work)
{
    c8e0:	b510      	push	{r4, lr}
	int err;

	BT_DBG("hb_pub.count: %u", pub.count);

	/* Fast exit if disabled or expired */
	if (pub.period == 0U || pub.count == 0U) {
    c8e2:	4c0a      	ldr	r4, [pc, #40]	; (c90c <hb_publish+0x2c>)
    c8e4:	68e3      	ldr	r3, [r4, #12]
    c8e6:	b133      	cbz	r3, c8f6 <hb_publish+0x16>
    c8e8:	8863      	ldrh	r3, [r4, #2]
    c8ea:	b123      	cbz	r3, c8f6 <hb_publish+0x16>
		return;
	}

	sub = bt_mesh_subnet_get(pub.net_idx);
    c8ec:	8920      	ldrh	r0, [r4, #8]
    c8ee:	f7fe fcef 	bl	b2d0 <bt_mesh_subnet_get>
	if (!sub) {
    c8f2:	b908      	cbnz	r0, c8f8 <hb_publish+0x18>
		BT_ERR("No matching subnet for idx 0x%02x", pub.net_idx);
		pub.dst = BT_MESH_ADDR_UNASSIGNED;
    c8f4:	8020      	strh	r0, [r4, #0]

	err = heartbeat_send(&publish_cb, NULL);
	if (err) {
		hb_publish_end_cb(err, NULL);
	}
}
    c8f6:	bd10      	pop	{r4, pc}
	err = heartbeat_send(&publish_cb, NULL);
    c8f8:	4805      	ldr	r0, [pc, #20]	; (c910 <hb_publish+0x30>)
    c8fa:	f7ff ffa1 	bl	c840 <heartbeat_send.constprop.0>
	if (err) {
    c8fe:	2800      	cmp	r0, #0
    c900:	d0f9      	beq.n	c8f6 <hb_publish+0x16>
}
    c902:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		hb_publish_end_cb(err, NULL);
    c906:	2100      	movs	r1, #0
    c908:	f7ff bf72 	b.w	c7f0 <hb_publish_end_cb>
    c90c:	2000245c 	.word	0x2000245c
    c910:	00026c2c 	.word	0x00026c2c

0000c914 <bt_mesh_hb_recv>:
int bt_mesh_hb_recv(struct bt_mesh_net_rx *rx, struct net_buf_simple *buf)
{
	uint8_t init_ttl, hops;
	uint16_t feat;

	if (buf->len < 3) {
    c914:	888b      	ldrh	r3, [r1, #4]
    c916:	2b02      	cmp	r3, #2
{
    c918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c91c:	4607      	mov	r7, r0
    c91e:	460d      	mov	r5, r1
	if (buf->len < 3) {
    c920:	d949      	bls.n	c9b6 <bt_mesh_hb_recv+0xa2>
		BT_ERR("Too short heartbeat message");
		return -EINVAL;
	}

	init_ttl = (net_buf_simple_pull_u8(buf) & 0x7f);
    c922:	4608      	mov	r0, r1
    c924:	f018 fa82 	bl	24e2c <net_buf_simple_pull_u8>
	feat = net_buf_simple_pull_be16(buf);

	hops = (init_ttl - rx->ctx.recv_ttl + 1);

	if (rx->ctx.addr != sub.src || rx->ctx.recv_dst != sub.dst) {
    c928:	4e24      	ldr	r6, [pc, #144]	; (c9bc <bt_mesh_hb_recv+0xa8>)
	init_ttl = (net_buf_simple_pull_u8(buf) & 0x7f);
    c92a:	4604      	mov	r4, r0
	feat = net_buf_simple_pull_be16(buf);
    c92c:	4628      	mov	r0, r5
    c92e:	f018 fa8d 	bl	24e4c <net_buf_simple_pull_be16>
	if (rx->ctx.addr != sub.src || rx->ctx.recv_dst != sub.dst) {
    c932:	68ba      	ldr	r2, [r7, #8]
    c934:	68b3      	ldr	r3, [r6, #8]
    c936:	429a      	cmp	r2, r3
	feat = net_buf_simple_pull_be16(buf);
    c938:	4605      	mov	r5, r0
	if (rx->ctx.addr != sub.src || rx->ctx.recv_dst != sub.dst) {
    c93a:	d002      	beq.n	c942 <bt_mesh_hb_recv+0x2e>
		BT_DBG("No subscription for received heartbeat");
		return 0;
    c93c:	2000      	movs	r0, #0
	       (hops == 1U) ? "" : "s", feat);

	notify_recv(hops, feat);

	return 0;
}
    c93e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return k_work_delayable_busy_get(dwork) != 0;
    c942:	481f      	ldr	r0, [pc, #124]	; (c9c0 <bt_mesh_hb_recv+0xac>)
	hops = (init_ttl - rx->ctx.recv_ttl + 1);
    c944:	7b7f      	ldrb	r7, [r7, #13]
    c946:	f019 f9af 	bl	25ca8 <k_work_delayable_busy_get>
	if (!k_work_delayable_is_pending(&sub_timer)) {
    c94a:	2800      	cmp	r0, #0
    c94c:	d0f6      	beq.n	c93c <bt_mesh_hb_recv+0x28>
	init_ttl = (net_buf_simple_pull_u8(buf) & 0x7f);
    c94e:	f004 047f 	and.w	r4, r4, #127	; 0x7f
	hops = (init_ttl - rx->ctx.recv_ttl + 1);
    c952:	f1c7 0701 	rsb	r7, r7, #1
	sub.min_hops = MIN(sub.min_hops, hops);
    c956:	7bb3      	ldrb	r3, [r6, #14]
	hops = (init_ttl - rx->ctx.recv_ttl + 1);
    c958:	443c      	add	r4, r7
    c95a:	b2e4      	uxtb	r4, r4
	sub.min_hops = MIN(sub.min_hops, hops);
    c95c:	42a3      	cmp	r3, r4
    c95e:	bf28      	it	cs
    c960:	4623      	movcs	r3, r4
    c962:	73b3      	strb	r3, [r6, #14]
	sub.max_hops = MAX(sub.max_hops, hops);
    c964:	7bf3      	ldrb	r3, [r6, #15]
    c966:	42a3      	cmp	r3, r4
    c968:	bf38      	it	cc
    c96a:	4623      	movcc	r3, r4
    c96c:	73f3      	strb	r3, [r6, #15]
	if (sub.count < 0xffff) {
    c96e:	89b3      	ldrh	r3, [r6, #12]
    c970:	f64f 72ff 	movw	r2, #65535	; 0xffff
    c974:	4293      	cmp	r3, r2
		sub.count++;
    c976:	bf1c      	itt	ne
    c978:	3301      	addne	r3, #1
    c97a:	81b3      	strhne	r3, [r6, #12]
	if (sub.dst == BT_MESH_ADDR_UNASSIGNED) {
    c97c:	8973      	ldrh	r3, [r6, #10]
    c97e:	b15b      	cbz	r3, c998 <bt_mesh_hb_recv+0x84>
	return z_timeout_remaining(&dwork->timeout);
    c980:	4810      	ldr	r0, [pc, #64]	; (c9c4 <bt_mesh_hb_recv+0xb0>)
    c982:	f019 fad5 	bl	25f30 <z_timeout_remaining>
			return (uint32_t)((t * to_hz + off) / from_hz);
    c986:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c98a:	fba0 3002 	umull	r3, r0, r0, r2
    c98e:	0bdb      	lsrs	r3, r3, #15
    c990:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
	return rem_ms / MSEC_PER_SEC;
    c994:	fbb3 f3f2 	udiv	r3, r3, r2
	sub.remaining = sub_remaining();
    c998:	6073      	str	r3, [r6, #4]
	STRUCT_SECTION_FOREACH(bt_mesh_hb_cb, cb) {
    c99a:	4f0b      	ldr	r7, [pc, #44]	; (c9c8 <bt_mesh_hb_recv+0xb4>)
    c99c:	4e0b      	ldr	r6, [pc, #44]	; (c9cc <bt_mesh_hb_recv+0xb8>)
			cb->recv(&sub, hops, feat);
    c99e:	f8df 801c 	ldr.w	r8, [pc, #28]	; c9bc <bt_mesh_hb_recv+0xa8>
	STRUCT_SECTION_FOREACH(bt_mesh_hb_cb, cb) {
    c9a2:	42be      	cmp	r6, r7
    c9a4:	d2ca      	bcs.n	c93c <bt_mesh_hb_recv+0x28>
		if (cb->recv) {
    c9a6:	6833      	ldr	r3, [r6, #0]
    c9a8:	b11b      	cbz	r3, c9b2 <bt_mesh_hb_recv+0x9e>
			cb->recv(&sub, hops, feat);
    c9aa:	462a      	mov	r2, r5
    c9ac:	4621      	mov	r1, r4
    c9ae:	4640      	mov	r0, r8
    c9b0:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_mesh_hb_cb, cb) {
    c9b2:	3608      	adds	r6, #8
    c9b4:	e7f5      	b.n	c9a2 <bt_mesh_hb_recv+0x8e>
		return -EINVAL;
    c9b6:	f06f 0015 	mvn.w	r0, #21
    c9ba:	e7c0      	b.n	c93e <bt_mesh_hb_recv+0x2a>
    c9bc:	2000246c 	.word	0x2000246c
    c9c0:	20001aa8 	.word	0x20001aa8
    c9c4:	20001ab8 	.word	0x20001ab8
    c9c8:	000265e8 	.word	0x000265e8
    c9cc:	000265e8 	.word	0x000265e8

0000c9d0 <bt_mesh_hb_pub_set>:
	 */
	(void)k_work_cancel_delayable(&pub_timer);
}

uint8_t bt_mesh_hb_pub_set(struct bt_mesh_hb_pub *new_pub)
{
    c9d0:	b538      	push	{r3, r4, r5, lr}
	if (!new_pub || new_pub->dst == BT_MESH_ADDR_UNASSIGNED) {
    c9d2:	4604      	mov	r4, r0
    c9d4:	b108      	cbz	r0, c9da <bt_mesh_hb_pub_set+0xa>
    c9d6:	8803      	ldrh	r3, [r0, #0]
    c9d8:	b94b      	cbnz	r3, c9ee <bt_mesh_hb_pub_set+0x1e>
	pub.dst = BT_MESH_ADDR_UNASSIGNED;
    c9da:	4b11      	ldr	r3, [pc, #68]	; (ca20 <bt_mesh_hb_pub_set+0x50>)
	(void)k_work_cancel_delayable(&pub_timer);
    c9dc:	4811      	ldr	r0, [pc, #68]	; (ca24 <bt_mesh_hb_pub_set+0x54>)
	pub.dst = BT_MESH_ADDR_UNASSIGNED;
    c9de:	2400      	movs	r4, #0
    c9e0:	601c      	str	r4, [r3, #0]
	pub.ttl = 0U;
    c9e2:	711c      	strb	r4, [r3, #4]
	pub.period = 0U;
    c9e4:	60dc      	str	r4, [r3, #12]
	(void)k_work_cancel_delayable(&pub_timer);
    c9e6:	f019 f961 	bl	25cac <k_work_cancel_delayable>
    c9ea:	2000      	movs	r0, #0
		bt_mesh_settings_store_schedule(
					BT_MESH_SETTINGS_HB_PUB_PENDING);
	}

	return STATUS_SUCCESS;
}
    c9ec:	bd38      	pop	{r3, r4, r5, pc}
	if (!bt_mesh_subnet_get(new_pub->net_idx)) {
    c9ee:	8900      	ldrh	r0, [r0, #8]
    c9f0:	f7fe fc6e 	bl	b2d0 <bt_mesh_subnet_get>
    c9f4:	b190      	cbz	r0, ca1c <bt_mesh_hb_pub_set+0x4c>
	new_pub->feat &= BT_MESH_FEAT_SUPPORTED;
    c9f6:	88e3      	ldrh	r3, [r4, #6]
	pub = *new_pub;
    c9f8:	4d09      	ldr	r5, [pc, #36]	; (ca20 <bt_mesh_hb_pub_set+0x50>)
	new_pub->feat &= BT_MESH_FEAT_SUPPORTED;
    c9fa:	f003 030f 	and.w	r3, r3, #15
    c9fe:	80e3      	strh	r3, [r4, #6]
	pub = *new_pub;
    ca00:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    ca04:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	if (!bt_mesh_is_provisioned()) {
    ca08:	f7fd fac6 	bl	9f98 <bt_mesh_is_provisioned>
    ca0c:	2800      	cmp	r0, #0
    ca0e:	d0ec      	beq.n	c9ea <bt_mesh_hb_pub_set+0x1a>
	k_work_reschedule(&pub_timer, K_NO_WAIT);
    ca10:	2200      	movs	r2, #0
    ca12:	2300      	movs	r3, #0
    ca14:	4803      	ldr	r0, [pc, #12]	; (ca24 <bt_mesh_hb_pub_set+0x54>)
    ca16:	f00e fe7f 	bl	1b718 <k_work_reschedule>
	return STATUS_SUCCESS;
    ca1a:	e7e6      	b.n	c9ea <bt_mesh_hb_pub_set+0x1a>
		return STATUS_INVALID_NETKEY;
    ca1c:	2004      	movs	r0, #4
    ca1e:	e7e5      	b.n	c9ec <bt_mesh_hb_pub_set+0x1c>
    ca20:	2000245c 	.word	0x2000245c
    ca24:	20001a78 	.word	0x20001a78

0000ca28 <bt_mesh_hb_pub_get>:

void bt_mesh_hb_pub_get(struct bt_mesh_hb_pub *get)
{
	*get = pub;
    ca28:	4b03      	ldr	r3, [pc, #12]	; (ca38 <bt_mesh_hb_pub_get+0x10>)
{
    ca2a:	b510      	push	{r4, lr}
    ca2c:	4604      	mov	r4, r0
	*get = pub;
    ca2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    ca30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    ca34:	bd10      	pop	{r4, pc}
    ca36:	bf00      	nop
    ca38:	2000245c 	.word	0x2000245c

0000ca3c <bt_mesh_hb_sub_set>:

uint8_t bt_mesh_hb_sub_set(uint16_t src, uint16_t dst, uint32_t period)
{
	if (src != BT_MESH_ADDR_UNASSIGNED && !BT_MESH_ADDR_IS_UNICAST(src)) {
    ca3c:	0403      	lsls	r3, r0, #16
{
    ca3e:	b570      	push	{r4, r5, r6, lr}
    ca40:	4606      	mov	r6, r0
    ca42:	460c      	mov	r4, r1
    ca44:	4615      	mov	r5, r2
	if (src != BT_MESH_ADDR_UNASSIGNED && !BT_MESH_ADDR_IS_UNICAST(src)) {
    ca46:	d501      	bpl.n	ca4c <bt_mesh_hb_sub_set+0x10>
		BT_WARN("Prohibited source address");
		return STATUS_INVALID_ADDRESS;
    ca48:	2001      	movs	r0, #1
	 * configuration disables the subscription.
	 */
	k_work_reschedule(&sub_timer, K_SECONDS(sub.period));

	return STATUS_SUCCESS;
}
    ca4a:	bd70      	pop	{r4, r5, r6, pc}
	if (BT_MESH_ADDR_IS_VIRTUAL(dst) || BT_MESH_ADDR_IS_RFU(dst) ||
    ca4c:	f481 4300 	eor.w	r3, r1, #32768	; 0x8000
    ca50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    ca54:	d3f8      	bcc.n	ca48 <bt_mesh_hb_sub_set+0xc>
    ca56:	f501 7380 	add.w	r3, r1, #256	; 0x100
    ca5a:	b29b      	uxth	r3, r3
    ca5c:	2bfb      	cmp	r3, #251	; 0xfb
    ca5e:	d9f3      	bls.n	ca48 <bt_mesh_hb_sub_set+0xc>
    ca60:	b20b      	sxth	r3, r1
    ca62:	2b00      	cmp	r3, #0
    ca64:	dc04      	bgt.n	ca70 <bt_mesh_hb_sub_set+0x34>
	if (period > (1U << 16)) {
    ca66:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
    ca6a:	d906      	bls.n	ca7a <bt_mesh_hb_sub_set+0x3e>
		return STATUS_CANNOT_SET;
    ca6c:	200f      	movs	r0, #15
    ca6e:	e7ec      	b.n	ca4a <bt_mesh_hb_sub_set+0xe>
	    (BT_MESH_ADDR_IS_UNICAST(dst) && dst != bt_mesh_primary_addr())) {
    ca70:	f000 fb3a 	bl	d0e8 <bt_mesh_primary_addr>
    ca74:	42a0      	cmp	r0, r4
    ca76:	d1e7      	bne.n	ca48 <bt_mesh_hb_sub_set+0xc>
    ca78:	e7f5      	b.n	ca66 <bt_mesh_hb_sub_set+0x2a>
	if (src == BT_MESH_ADDR_UNASSIGNED || dst == BT_MESH_ADDR_UNASSIGNED) {
    ca7a:	4b13      	ldr	r3, [pc, #76]	; (cac8 <bt_mesh_hb_sub_set+0x8c>)
    ca7c:	b106      	cbz	r6, ca80 <bt_mesh_hb_sub_set+0x44>
    ca7e:	b9dc      	cbnz	r4, cab8 <bt_mesh_hb_sub_set+0x7c>
		sub.src = BT_MESH_ADDR_UNASSIGNED;
    ca80:	2200      	movs	r2, #0
		sub.count = 0U;
    ca82:	e9c3 2202 	strd	r2, r2, [r3, #8]
		sub.period = 0U;
    ca86:	601a      	str	r2, [r3, #0]
	k_work_reschedule(&sub_timer, K_SECONDS(sub.period));
    ca88:	681d      	ldr	r5, [r3, #0]
			return ((t * to_hz + off) / from_hz);
    ca8a:	2400      	movs	r4, #0
    ca8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    ca90:	435d      	muls	r5, r3
    ca92:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    ca96:	f240 30e7 	movw	r0, #999	; 0x3e7
    ca9a:	4621      	mov	r1, r4
    ca9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    caa0:	2300      	movs	r3, #0
    caa2:	fbe5 0106 	umlal	r0, r1, r5, r6
    caa6:	f7f4 fce7 	bl	1478 <__aeabi_uldivmod>
    caaa:	4602      	mov	r2, r0
    caac:	460b      	mov	r3, r1
    caae:	4807      	ldr	r0, [pc, #28]	; (cacc <bt_mesh_hb_sub_set+0x90>)
    cab0:	f00e fe32 	bl	1b718 <k_work_reschedule>
	return STATUS_SUCCESS;
    cab4:	4620      	mov	r0, r4
    cab6:	e7c8      	b.n	ca4a <bt_mesh_hb_sub_set+0xe>
	} else if (period) {
    cab8:	b125      	cbz	r5, cac4 <bt_mesh_hb_sub_set+0x88>
		sub.count = 0U;
    caba:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
		sub.src = src;
    cabe:	811e      	strh	r6, [r3, #8]
		sub.dst = dst;
    cac0:	815c      	strh	r4, [r3, #10]
		sub.count = 0U;
    cac2:	60da      	str	r2, [r3, #12]
		sub.period = 0U;
    cac4:	601d      	str	r5, [r3, #0]
    cac6:	e7df      	b.n	ca88 <bt_mesh_hb_sub_set+0x4c>
    cac8:	2000246c 	.word	0x2000246c
    cacc:	20001aa8 	.word	0x20001aa8

0000cad0 <bt_mesh_hb_sub_reset_count>:

void bt_mesh_hb_sub_reset_count(void)
{
	sub.count = 0;
    cad0:	4b01      	ldr	r3, [pc, #4]	; (cad8 <bt_mesh_hb_sub_reset_count+0x8>)
    cad2:	2200      	movs	r2, #0
    cad4:	819a      	strh	r2, [r3, #12]
}
    cad6:	4770      	bx	lr
    cad8:	2000246c 	.word	0x2000246c

0000cadc <bt_mesh_hb_sub_get>:

void bt_mesh_hb_sub_get(struct bt_mesh_hb_sub *get)
{
    cadc:	b538      	push	{r3, r4, r5, lr}
	*get = sub;
    cade:	4d0b      	ldr	r5, [pc, #44]	; (cb0c <bt_mesh_hb_sub_get+0x30>)
{
    cae0:	4604      	mov	r4, r0
	*get = sub;
    cae2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    cae6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (sub.dst == BT_MESH_ADDR_UNASSIGNED) {
    caea:	896b      	ldrh	r3, [r5, #10]
    caec:	b15b      	cbz	r3, cb06 <bt_mesh_hb_sub_get+0x2a>
    caee:	4808      	ldr	r0, [pc, #32]	; (cb10 <bt_mesh_hb_sub_get+0x34>)
    caf0:	f019 fa1e 	bl	25f30 <z_timeout_remaining>
			return (uint32_t)((t * to_hz + off) / from_hz);
    caf4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    caf8:	fba0 3002 	umull	r3, r0, r0, r2
    cafc:	0bdb      	lsrs	r3, r3, #15
    cafe:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
	return rem_ms / MSEC_PER_SEC;
    cb02:	fbb3 f3f2 	udiv	r3, r3, r2
	get->remaining = sub_remaining();
    cb06:	6063      	str	r3, [r4, #4]
}
    cb08:	bd38      	pop	{r3, r4, r5, pc}
    cb0a:	bf00      	nop
    cb0c:	2000246c 	.word	0x2000246c
    cb10:	20001ab8 	.word	0x20001ab8

0000cb14 <bt_mesh_hb_feature_changed>:

void bt_mesh_hb_feature_changed(uint16_t features)
{
	if (pub.dst == BT_MESH_ADDR_UNASSIGNED) {
    cb14:	4b04      	ldr	r3, [pc, #16]	; (cb28 <bt_mesh_hb_feature_changed+0x14>)
    cb16:	881a      	ldrh	r2, [r3, #0]
    cb18:	b12a      	cbz	r2, cb26 <bt_mesh_hb_feature_changed+0x12>
		return;
	}

	if (!(pub.feat & features)) {
    cb1a:	88db      	ldrh	r3, [r3, #6]
    cb1c:	4218      	tst	r0, r3
    cb1e:	d002      	beq.n	cb26 <bt_mesh_hb_feature_changed+0x12>
		return;
	}

	heartbeat_send(NULL, NULL);
    cb20:	2000      	movs	r0, #0
    cb22:	f7ff be8d 	b.w	c840 <heartbeat_send.constprop.0>
}
    cb26:	4770      	bx	lr
    cb28:	2000245c 	.word	0x2000245c

0000cb2c <bt_mesh_hb_init>:

void bt_mesh_hb_init(void)
{
    cb2c:	b508      	push	{r3, lr}
	pub.net_idx = BT_MESH_KEY_UNUSED;
    cb2e:	4b07      	ldr	r3, [pc, #28]	; (cb4c <bt_mesh_hb_init+0x20>)
	k_work_init_delayable(&pub_timer, hb_publish);
    cb30:	4907      	ldr	r1, [pc, #28]	; (cb50 <bt_mesh_hb_init+0x24>)
    cb32:	4808      	ldr	r0, [pc, #32]	; (cb54 <bt_mesh_hb_init+0x28>)
	pub.net_idx = BT_MESH_KEY_UNUSED;
    cb34:	f64f 72ff 	movw	r2, #65535	; 0xffff
    cb38:	811a      	strh	r2, [r3, #8]
	k_work_init_delayable(&pub_timer, hb_publish);
    cb3a:	f019 f8a9 	bl	25c90 <k_work_init_delayable>
	k_work_init_delayable(&sub_timer, sub_end);
}
    cb3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_work_init_delayable(&sub_timer, sub_end);
    cb42:	4905      	ldr	r1, [pc, #20]	; (cb58 <bt_mesh_hb_init+0x2c>)
    cb44:	4805      	ldr	r0, [pc, #20]	; (cb5c <bt_mesh_hb_init+0x30>)
    cb46:	f019 b8a3 	b.w	25c90 <k_work_init_delayable>
    cb4a:	bf00      	nop
    cb4c:	2000245c 	.word	0x2000245c
    cb50:	0000c8e1 	.word	0x0000c8e1
    cb54:	20001a78 	.word	0x20001a78
    cb58:	0000c7c5 	.word	0x0000c7c5
    cb5c:	20001aa8 	.word	0x20001aa8

0000cb60 <bt_mesh_hb_start>:

void bt_mesh_hb_start(void)
{
	if (pub.count && pub.period) {
    cb60:	4b05      	ldr	r3, [pc, #20]	; (cb78 <bt_mesh_hb_start+0x18>)
    cb62:	885a      	ldrh	r2, [r3, #2]
    cb64:	b132      	cbz	r2, cb74 <bt_mesh_hb_start+0x14>
    cb66:	68db      	ldr	r3, [r3, #12]
    cb68:	b123      	cbz	r3, cb74 <bt_mesh_hb_start+0x14>
		BT_DBG("Starting heartbeat publication");
		k_work_reschedule(&pub_timer, K_NO_WAIT);
    cb6a:	4804      	ldr	r0, [pc, #16]	; (cb7c <bt_mesh_hb_start+0x1c>)
    cb6c:	2200      	movs	r2, #0
    cb6e:	2300      	movs	r3, #0
    cb70:	f00e bdd2 	b.w	1b718 <k_work_reschedule>
	}
}
    cb74:	4770      	bx	lr
    cb76:	bf00      	nop
    cb78:	2000245c 	.word	0x2000245c
    cb7c:	20001a78 	.word	0x20001a78

0000cb80 <bt_mesh_k2>:
	return bt_mesh_aes_cmac_one(okm, info, strlen(info), okm);
}

int bt_mesh_k2(const uint8_t n[16], const uint8_t *p, size_t p_len,
	       uint8_t net_id[1], uint8_t enc_key[16], uint8_t priv_key[16])
{
    cb80:	b5f0      	push	{r4, r5, r6, r7, lr}
    cb82:	b095      	sub	sp, #84	; 0x54
    cb84:	4604      	mov	r4, r0
    cb86:	460f      	mov	r7, r1
	int err;

	BT_DBG("n %s", bt_hex(n, 16));
	BT_DBG("p %s", bt_hex(p, p_len));

	err = bt_mesh_s1("smk2", salt);
    cb88:	4828      	ldr	r0, [pc, #160]	; (cc2c <bt_mesh_k2+0xac>)
    cb8a:	a902      	add	r1, sp, #8
{
    cb8c:	4615      	mov	r5, r2
    cb8e:	461e      	mov	r6, r3
	err = bt_mesh_s1("smk2", salt);
    cb90:	f014 f994 	bl	20ebc <bt_mesh_s1>
	if (err) {
    cb94:	2800      	cmp	r0, #0
    cb96:	d146      	bne.n	cc26 <bt_mesh_k2+0xa6>
		return err;
	}

	err = bt_mesh_aes_cmac_one(salt, n, 16, t);
    cb98:	4621      	mov	r1, r4
    cb9a:	ab0a      	add	r3, sp, #40	; 0x28
    cb9c:	2210      	movs	r2, #16
    cb9e:	a802      	add	r0, sp, #8
    cba0:	f014 f982 	bl	20ea8 <bt_mesh_aes_cmac_one>
	if (err) {
    cba4:	4604      	mov	r4, r0
    cba6:	2800      	cmp	r0, #0
    cba8:	d13a      	bne.n	cc20 <bt_mesh_k2+0xa0>
		return err;
	}

	pad = 0x01;
    cbaa:	2301      	movs	r3, #1

	sg[0].data = NULL;
	sg[0].len  = 0;
	sg[1].data = p;
	sg[1].len  = p_len;
    cbac:	e9cd 7510 	strd	r7, r5, [sp, #64]	; 0x40
	sg[2].data = &pad;
    cbb0:	f10d 0207 	add.w	r2, sp, #7
	sg[2].len  = sizeof(pad);

	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
    cbb4:	ad06      	add	r5, sp, #24
	sg[2].len  = sizeof(pad);
    cbb6:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
	sg[0].len  = 0;
    cbba:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
	pad = 0x01;
    cbbe:	f88d 3007 	strb.w	r3, [sp, #7]
	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
    cbc2:	2203      	movs	r2, #3
    cbc4:	462b      	mov	r3, r5
    cbc6:	a90e      	add	r1, sp, #56	; 0x38
    cbc8:	a80a      	add	r0, sp, #40	; 0x28
    cbca:	f014 f94b 	bl	20e64 <bt_mesh_aes_cmac>
	if (err) {
    cbce:	4604      	mov	r4, r0
    cbd0:	bb30      	cbnz	r0, cc20 <bt_mesh_k2+0xa0>
		return err;
	}

	net_id[0] = out[15] & 0x7f;
    cbd2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27

	sg[0].data = out;
    cbd6:	950e      	str	r5, [sp, #56]	; 0x38
	net_id[0] = out[15] & 0x7f;
    cbd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    cbdc:	7033      	strb	r3, [r6, #0]
	sg[0].len  = sizeof(out);
	pad = 0x02;
    cbde:	2302      	movs	r3, #2
    cbe0:	f88d 3007 	strb.w	r3, [sp, #7]
	sg[0].len  = sizeof(out);
    cbe4:	2610      	movs	r6, #16

	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
    cbe6:	462b      	mov	r3, r5
    cbe8:	2203      	movs	r2, #3
    cbea:	a90e      	add	r1, sp, #56	; 0x38
    cbec:	a80a      	add	r0, sp, #40	; 0x28
	sg[0].len  = sizeof(out);
    cbee:	960f      	str	r6, [sp, #60]	; 0x3c
	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
    cbf0:	f014 f938 	bl	20e64 <bt_mesh_aes_cmac>
	if (err) {
    cbf4:	4604      	mov	r4, r0
    cbf6:	b998      	cbnz	r0, cc20 <bt_mesh_k2+0xa0>
		return err;
	}

	memcpy(enc_key, out, 16);
    cbf8:	4632      	mov	r2, r6
    cbfa:	4629      	mov	r1, r5
    cbfc:	981a      	ldr	r0, [sp, #104]	; 0x68
    cbfe:	f011 fa18 	bl	1e032 <memcpy>

	pad = 0x03;
    cc02:	2203      	movs	r2, #3

	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
    cc04:	462b      	mov	r3, r5
    cc06:	a90e      	add	r1, sp, #56	; 0x38
    cc08:	a80a      	add	r0, sp, #40	; 0x28
	pad = 0x03;
    cc0a:	f88d 2007 	strb.w	r2, [sp, #7]
	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
    cc0e:	f014 f929 	bl	20e64 <bt_mesh_aes_cmac>
	if (err) {
    cc12:	4604      	mov	r4, r0
    cc14:	b920      	cbnz	r0, cc20 <bt_mesh_k2+0xa0>
		return err;
	}

	memcpy(priv_key, out, 16);
    cc16:	981b      	ldr	r0, [sp, #108]	; 0x6c
    cc18:	4632      	mov	r2, r6
    cc1a:	4629      	mov	r1, r5
    cc1c:	f011 fa09 	bl	1e032 <memcpy>

	BT_DBG("NID 0x%02x enc_key %s", net_id[0], bt_hex(enc_key, 16));
	BT_DBG("priv_key %s", bt_hex(priv_key, 16));

	return 0;
}
    cc20:	4620      	mov	r0, r4
    cc22:	b015      	add	sp, #84	; 0x54
    cc24:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return err;
    cc26:	2401      	movs	r4, #1
    cc28:	e7fa      	b.n	cc20 <bt_mesh_k2+0xa0>
    cc2a:	bf00      	nop
    cc2c:	0002762c 	.word	0x0002762c

0000cc30 <bt_mesh_k3>:

int bt_mesh_k3(const uint8_t n[16], uint8_t out[8])
{
    cc30:	b530      	push	{r4, r5, lr}
	uint8_t id64[] = { 'i', 'd', '6', '4', 0x01 };
    cc32:	4b14      	ldr	r3, [pc, #80]	; (cc84 <bt_mesh_k3+0x54>)
{
    cc34:	b08b      	sub	sp, #44	; 0x2c
    cc36:	4604      	mov	r4, r0
	uint8_t id64[] = { 'i', 'd', '6', '4', 0x01 };
    cc38:	6818      	ldr	r0, [r3, #0]
    cc3a:	9000      	str	r0, [sp, #0]
    cc3c:	791b      	ldrb	r3, [r3, #4]
	uint8_t tmp[16];
	uint8_t t[16];
	int err;

	err = bt_mesh_s1("smk3", tmp);
    cc3e:	4812      	ldr	r0, [pc, #72]	; (cc88 <bt_mesh_k3+0x58>)
	uint8_t id64[] = { 'i', 'd', '6', '4', 0x01 };
    cc40:	f88d 3004 	strb.w	r3, [sp, #4]
{
    cc44:	460d      	mov	r5, r1
	err = bt_mesh_s1("smk3", tmp);
    cc46:	a902      	add	r1, sp, #8
    cc48:	f014 f938 	bl	20ebc <bt_mesh_s1>
	if (err) {
    cc4c:	b9b8      	cbnz	r0, cc7e <bt_mesh_k3+0x4e>
		return err;
	}

	err = bt_mesh_aes_cmac_one(tmp, n, 16, t);
    cc4e:	4621      	mov	r1, r4
    cc50:	ab06      	add	r3, sp, #24
    cc52:	2210      	movs	r2, #16
    cc54:	a802      	add	r0, sp, #8
    cc56:	f014 f927 	bl	20ea8 <bt_mesh_aes_cmac_one>
	if (err) {
    cc5a:	4604      	mov	r4, r0
    cc5c:	b960      	cbnz	r0, cc78 <bt_mesh_k3+0x48>
		return err;
	}

	err = bt_mesh_aes_cmac_one(t, id64, sizeof(id64), tmp);
    cc5e:	ab02      	add	r3, sp, #8
    cc60:	2205      	movs	r2, #5
    cc62:	4669      	mov	r1, sp
    cc64:	a806      	add	r0, sp, #24
    cc66:	f014 f91f 	bl	20ea8 <bt_mesh_aes_cmac_one>
	if (err) {
    cc6a:	4604      	mov	r4, r0
    cc6c:	b920      	cbnz	r0, cc78 <bt_mesh_k3+0x48>
		return err;
	}

	memcpy(out, tmp + 8, 8);
    cc6e:	2208      	movs	r2, #8
    cc70:	a904      	add	r1, sp, #16
    cc72:	4628      	mov	r0, r5
    cc74:	f011 f9dd 	bl	1e032 <memcpy>

	return 0;
}
    cc78:	4620      	mov	r0, r4
    cc7a:	b00b      	add	sp, #44	; 0x2c
    cc7c:	bd30      	pop	{r4, r5, pc}
		return err;
    cc7e:	2401      	movs	r4, #1
    cc80:	e7fa      	b.n	cc78 <bt_mesh_k3+0x48>
    cc82:	bf00      	nop
    cc84:	00027636 	.word	0x00027636
    cc88:	00027631 	.word	0x00027631

0000cc8c <bt_mesh_k4>:

int bt_mesh_k4(const uint8_t n[16], uint8_t out[1])
{
    cc8c:	b530      	push	{r4, r5, lr}
    cc8e:	b08b      	sub	sp, #44	; 0x2c
	uint8_t id6[] = { 'i', 'd', '6', 0x01 };
    cc90:	4b10      	ldr	r3, [pc, #64]	; (ccd4 <bt_mesh_k4+0x48>)
    cc92:	9301      	str	r3, [sp, #4]
{
    cc94:	4605      	mov	r5, r0
    cc96:	460c      	mov	r4, r1
	uint8_t tmp[16];
	uint8_t t[16];
	int err;

	err = bt_mesh_s1("smk4", tmp);
    cc98:	480f      	ldr	r0, [pc, #60]	; (ccd8 <bt_mesh_k4+0x4c>)
    cc9a:	a902      	add	r1, sp, #8
    cc9c:	f014 f90e 	bl	20ebc <bt_mesh_s1>
	if (err) {
    cca0:	b9a8      	cbnz	r0, ccce <bt_mesh_k4+0x42>
		return err;
	}

	err = bt_mesh_aes_cmac_one(tmp, n, 16, t);
    cca2:	ab06      	add	r3, sp, #24
    cca4:	2210      	movs	r2, #16
    cca6:	4629      	mov	r1, r5
    cca8:	a802      	add	r0, sp, #8
    ccaa:	f014 f8fd 	bl	20ea8 <bt_mesh_aes_cmac_one>
	if (err) {
    ccae:	b960      	cbnz	r0, ccca <bt_mesh_k4+0x3e>
		return err;
	}

	err = bt_mesh_aes_cmac_one(t, id6, sizeof(id6), tmp);
    ccb0:	2204      	movs	r2, #4
    ccb2:	ab02      	add	r3, sp, #8
    ccb4:	eb0d 0102 	add.w	r1, sp, r2
    ccb8:	a806      	add	r0, sp, #24
    ccba:	f014 f8f5 	bl	20ea8 <bt_mesh_aes_cmac_one>
	if (err) {
    ccbe:	b920      	cbnz	r0, ccca <bt_mesh_k4+0x3e>
		return err;
	}

	out[0] = tmp[15] & BIT_MASK(6);
    ccc0:	f89d 3017 	ldrb.w	r3, [sp, #23]
    ccc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    ccc8:	7023      	strb	r3, [r4, #0]

	return 0;
}
    ccca:	b00b      	add	sp, #44	; 0x2c
    cccc:	bd30      	pop	{r4, r5, pc}
		return err;
    ccce:	2001      	movs	r0, #1
    ccd0:	e7fb      	b.n	ccca <bt_mesh_k4+0x3e>
    ccd2:	bf00      	nop
    ccd4:	01366469 	.word	0x01366469
    ccd8:	0002763c 	.word	0x0002763c

0000ccdc <bt_mesh_id128>:

int bt_mesh_id128(const uint8_t n[16], const char *s, uint8_t out[16])
{
    ccdc:	b530      	push	{r4, r5, lr}
    ccde:	b087      	sub	sp, #28
    cce0:	4604      	mov	r4, r0
    cce2:	4608      	mov	r0, r1
	const char *id128 = "id128\x01";
	uint8_t salt[16];
	int err;

	err = bt_mesh_s1(s, salt);
    cce4:	a902      	add	r1, sp, #8
{
    cce6:	4615      	mov	r5, r2
	err = bt_mesh_s1(s, salt);
    cce8:	f014 f8e8 	bl	20ebc <bt_mesh_s1>
	if (err) {
    ccec:	b940      	cbnz	r0, cd00 <bt_mesh_id128+0x24>
		return err;
	}

	return bt_mesh_k1(n, 16, salt, id128, out);
    ccee:	4b05      	ldr	r3, [pc, #20]	; (cd04 <bt_mesh_id128+0x28>)
    ccf0:	9500      	str	r5, [sp, #0]
    ccf2:	aa02      	add	r2, sp, #8
    ccf4:	2110      	movs	r1, #16
    ccf6:	4620      	mov	r0, r4
    ccf8:	f014 f8f6 	bl	20ee8 <bt_mesh_k1>
}
    ccfc:	b007      	add	sp, #28
    ccfe:	bd30      	pop	{r4, r5, pc}
		return err;
    cd00:	2001      	movs	r0, #1
    cd02:	e7fb      	b.n	ccfc <bt_mesh_id128+0x20>
    cd04:	00027641 	.word	0x00027641

0000cd08 <bt_mesh_net_obfuscate>:
	sys_put_be32(iv_index, &nonce[9]);
}

int bt_mesh_net_obfuscate(uint8_t *pdu, uint32_t iv_index,
			  const uint8_t privacy_key[16])
{
    cd08:	b570      	push	{r4, r5, r6, lr}
	uint8_t priv_rand[16] = { 0x00, 0x00, 0x00, 0x00, 0x00, };
    cd0a:	4b18      	ldr	r3, [pc, #96]	; (cd6c <bt_mesh_net_obfuscate+0x64>)
{
    cd0c:	b088      	sub	sp, #32
    cd0e:	4604      	mov	r4, r0
    cd10:	460e      	mov	r6, r1
	uint8_t priv_rand[16] = { 0x00, 0x00, 0x00, 0x00, 0x00, };
    cd12:	6818      	ldr	r0, [r3, #0]
    cd14:	889b      	ldrh	r3, [r3, #4]
    cd16:	9000      	str	r0, [sp, #0]
    cd18:	f8ad 3004 	strh.w	r3, [sp, #4]
	uint8_t tmp[16];
	int err, i;

	BT_DBG("IVIndex %u, PrivacyKey %s", iv_index, bt_hex(privacy_key, 16));

	sys_put_be32(iv_index, &priv_rand[5]);
    cd1c:	f10d 0105 	add.w	r1, sp, #5
	uint8_t priv_rand[16] = { 0x00, 0x00, 0x00, 0x00, 0x00, };
    cd20:	2300      	movs	r3, #0
	sys_put_be32(iv_index, &priv_rand[5]);
    cd22:	4630      	mov	r0, r6
{
    cd24:	4615      	mov	r5, r2
	uint8_t priv_rand[16] = { 0x00, 0x00, 0x00, 0x00, 0x00, };
    cd26:	f8cd 3006 	str.w	r3, [sp, #6]
    cd2a:	f8cd 300a 	str.w	r3, [sp, #10]
    cd2e:	f8ad 300e 	strh.w	r3, [sp, #14]
	sys_put_be32(iv_index, &priv_rand[5]);
    cd32:	f014 f86e 	bl	20e12 <sys_put_be32>
	memcpy(&priv_rand[9], &pdu[7], 7);
    cd36:	2207      	movs	r2, #7
    cd38:	18a1      	adds	r1, r4, r2
    cd3a:	f10d 0009 	add.w	r0, sp, #9
    cd3e:	f011 f978 	bl	1e032 <memcpy>

	BT_DBG("PrivacyRandom %s", bt_hex(priv_rand, 16));

	err = bt_encrypt_be(privacy_key, priv_rand, tmp);
    cd42:	aa04      	add	r2, sp, #16
    cd44:	4669      	mov	r1, sp
    cd46:	4628      	mov	r0, r5
    cd48:	f017 f8c5 	bl	23ed6 <bt_encrypt_be>
	if (err) {
    cd4c:	b958      	cbnz	r0, cd66 <bt_mesh_net_obfuscate+0x5e>
    cd4e:	4623      	mov	r3, r4
    cd50:	aa04      	add	r2, sp, #16
    cd52:	3406      	adds	r4, #6
		return err;
	}

	for (i = 0; i < 6; i++) {
		pdu[1 + i] ^= tmp[i];
    cd54:	f813 5f01 	ldrb.w	r5, [r3, #1]!
    cd58:	f812 1b01 	ldrb.w	r1, [r2], #1
	for (i = 0; i < 6; i++) {
    cd5c:	42a3      	cmp	r3, r4
		pdu[1 + i] ^= tmp[i];
    cd5e:	ea81 0105 	eor.w	r1, r1, r5
    cd62:	7019      	strb	r1, [r3, #0]
	for (i = 0; i < 6; i++) {
    cd64:	d1f6      	bne.n	cd54 <bt_mesh_net_obfuscate+0x4c>
	}

	return 0;
}
    cd66:	b008      	add	sp, #32
    cd68:	bd70      	pop	{r4, r5, r6, pc}
    cd6a:	bf00      	nop
    cd6c:	0002666f 	.word	0x0002666f

0000cd70 <bt_mesh_fcs_calc>:
	0xb4, 0x25, 0x57, 0xc6, 0xb3, 0x22, 0x50, 0xc1,
	0xba, 0x2b, 0x59, 0xc8, 0xbd, 0x2c, 0x5e, 0xcf
};

uint8_t bt_mesh_fcs_calc(const uint8_t *data, uint8_t data_len)
{
    cd70:	b510      	push	{r4, lr}
	uint8_t fcs = 0xff;

	while (data_len--) {
		fcs = crc_table[fcs ^ *data++];
    cd72:	4a06      	ldr	r2, [pc, #24]	; (cd8c <bt_mesh_fcs_calc+0x1c>)
    cd74:	4401      	add	r1, r0
	uint8_t fcs = 0xff;
    cd76:	23ff      	movs	r3, #255	; 0xff
	while (data_len--) {
    cd78:	4288      	cmp	r0, r1
    cd7a:	d102      	bne.n	cd82 <bt_mesh_fcs_calc+0x12>
	}

	BT_DBG("fcs 0x%02x", 0xff - fcs);

	return 0xff - fcs;
    cd7c:	43d8      	mvns	r0, r3
}
    cd7e:	b2c0      	uxtb	r0, r0
    cd80:	bd10      	pop	{r4, pc}
		fcs = crc_table[fcs ^ *data++];
    cd82:	f810 4b01 	ldrb.w	r4, [r0], #1
    cd86:	4063      	eors	r3, r4
    cd88:	5cd3      	ldrb	r3, [r2, r3]
    cd8a:	e7f5      	b.n	cd78 <bt_mesh_fcs_calc+0x8>
    cd8c:	0002764d 	.word	0x0002764d

0000cd90 <bt_mesh_fcs_check>:

bool bt_mesh_fcs_check(struct net_buf_simple *buf, uint8_t received_fcs)
{
    cd90:	b530      	push	{r4, r5, lr}
	const uint8_t *data = buf->data;
    cd92:	6804      	ldr	r4, [r0, #0]
	uint16_t data_len = buf->len;
	uint8_t fcs = 0xff;

	while (data_len--) {
    cd94:	8880      	ldrh	r0, [r0, #4]
    cd96:	4d08      	ldr	r5, [pc, #32]	; (cdb8 <bt_mesh_fcs_check+0x28>)
    cd98:	4420      	add	r0, r4
	uint8_t fcs = 0xff;
    cd9a:	23ff      	movs	r3, #255	; 0xff
	while (data_len--) {
    cd9c:	4284      	cmp	r4, r0
    cd9e:	d106      	bne.n	cdae <bt_mesh_fcs_check+0x1e>
		fcs = crc_table[fcs ^ *data++];
	}

	return crc_table[fcs ^ received_fcs] == 0xcf;
    cda0:	404b      	eors	r3, r1
    cda2:	5ce8      	ldrb	r0, [r5, r3]
}
    cda4:	f1a0 03cf 	sub.w	r3, r0, #207	; 0xcf
    cda8:	4258      	negs	r0, r3
    cdaa:	4158      	adcs	r0, r3
    cdac:	bd30      	pop	{r4, r5, pc}
		fcs = crc_table[fcs ^ *data++];
    cdae:	f814 2b01 	ldrb.w	r2, [r4], #1
    cdb2:	405a      	eors	r2, r3
    cdb4:	5cab      	ldrb	r3, [r5, r2]
    cdb6:	e7f1      	b.n	cd9c <bt_mesh_fcs_check+0xc>
    cdb8:	0002764d 	.word	0x0002764d

0000cdbc <bt_mesh_virtual_addr>:

int bt_mesh_virtual_addr(const uint8_t virtual_label[16], uint16_t *addr)
{
    cdbc:	b530      	push	{r4, r5, lr}
    cdbe:	b089      	sub	sp, #36	; 0x24
    cdc0:	4605      	mov	r5, r0
    cdc2:	460c      	mov	r4, r1
	uint8_t salt[16];
	uint8_t tmp[16];
	int err;

	err = bt_mesh_s1("vtad", salt);
    cdc4:	480c      	ldr	r0, [pc, #48]	; (cdf8 <bt_mesh_virtual_addr+0x3c>)
    cdc6:	4669      	mov	r1, sp
    cdc8:	f014 f878 	bl	20ebc <bt_mesh_s1>
	if (err) {
    cdcc:	b990      	cbnz	r0, cdf4 <bt_mesh_virtual_addr+0x38>
		return err;
	}

	err = bt_mesh_aes_cmac_one(salt, virtual_label, 16, tmp);
    cdce:	ab04      	add	r3, sp, #16
    cdd0:	2210      	movs	r2, #16
    cdd2:	4629      	mov	r1, r5
    cdd4:	4668      	mov	r0, sp
    cdd6:	f014 f867 	bl	20ea8 <bt_mesh_aes_cmac_one>
	if (err) {
    cdda:	b948      	cbnz	r0, cdf0 <bt_mesh_virtual_addr+0x34>
		return err;
	}

	*addr = (sys_get_be16(&tmp[14]) & 0x3fff) | 0x8000;
    cddc:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    cde0:	ba5b      	rev16	r3, r3
    cde2:	f3c3 030d 	ubfx	r3, r3, #0, #14
    cde6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    cdea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    cdee:	8023      	strh	r3, [r4, #0]

	return 0;
}
    cdf0:	b009      	add	sp, #36	; 0x24
    cdf2:	bd30      	pop	{r4, r5, pc}
		return err;
    cdf4:	2001      	movs	r0, #1
    cdf6:	e7fb      	b.n	cdf0 <bt_mesh_virtual_addr+0x34>
    cdf8:	00027648 	.word	0x00027648

0000cdfc <mod_init>:
}
#endif

static void mod_init(struct bt_mesh_model *mod, struct bt_mesh_elem *elem,
		     bool vnd, bool primary, void *user_data)
{
    cdfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ce00:	9d06      	ldr	r5, [sp, #24]
	int i;
	int *err = user_data;

	if (*err) {
    ce02:	682e      	ldr	r6, [r5, #0]
{
    ce04:	4604      	mov	r4, r0
    ce06:	460f      	mov	r7, r1
    ce08:	4690      	mov	r8, r2
	if (*err) {
    ce0a:	bb06      	cbnz	r6, ce4e <mod_init+0x52>
		return;
	}

	if (mod->pub) {
    ce0c:	6880      	ldr	r0, [r0, #8]
    ce0e:	b120      	cbz	r0, ce1a <mod_init+0x1e>
		mod->pub->mod = mod;
    ce10:	f840 4b18 	str.w	r4, [r0], #24
		k_work_init_delayable(&mod->pub->timer, mod_publish);
    ce14:	491b      	ldr	r1, [pc, #108]	; (ce84 <mod_init+0x88>)
    ce16:	f018 ff3b 	bl	25c90 <k_work_init_delayable>
	}

	for (i = 0; i < ARRAY_SIZE(mod->keys); i++) {
		mod->keys[i] = BT_MESH_KEY_UNUSED;
    ce1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ce1e:	81a3      	strh	r3, [r4, #12]
	}

	mod->elem_idx = elem - dev_comp->elem;
    ce20:	4b19      	ldr	r3, [pc, #100]	; (ce88 <mod_init+0x8c>)
    ce22:	4a1a      	ldr	r2, [pc, #104]	; (ce8c <mod_init+0x90>)
    ce24:	681b      	ldr	r3, [r3, #0]
    ce26:	68db      	ldr	r3, [r3, #12]
    ce28:	1afb      	subs	r3, r7, r3
    ce2a:	111b      	asrs	r3, r3, #4
    ce2c:	7123      	strb	r3, [r4, #4]
	if (vnd) {
    ce2e:	f1b8 0f00 	cmp.w	r8, #0
    ce32:	d018      	beq.n	ce66 <mod_init+0x6a>
		mod->mod_idx = mod - elem->vnd_models;
    ce34:	68fb      	ldr	r3, [r7, #12]
    ce36:	1ae3      	subs	r3, r4, r3
    ce38:	109b      	asrs	r3, r3, #2
    ce3a:	4353      	muls	r3, r2
    ce3c:	7163      	strb	r3, [r4, #5]
	for (op = mod->op; op->func; op++) {
    ce3e:	6963      	ldr	r3, [r4, #20]
    ce40:	330c      	adds	r3, #12
    ce42:	f853 2c04 	ldr.w	r2, [r3, #-4]
    ce46:	4619      	mov	r1, r3
    ce48:	b91a      	cbnz	r2, ce52 <mod_init+0x56>

		if (IS_ENABLED(CONFIG_BT_MESH_MODEL_VND_MSG_CID_FORCE)) {
			*err = bt_mesh_vnd_mod_msg_cid_check(mod);
    ce4a:	602e      	str	r6, [r5, #0]
			if (*err) {
    ce4c:	b186      	cbz	r6, ce70 <mod_init+0x74>
	}

	if (mod->cb && mod->cb->init) {
		*err = mod->cb->init(mod);
	}
}
    ce4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cid == mod->vnd.company) {
    ce52:	8820      	ldrh	r0, [r4, #0]
    ce54:	f831 2c0c 	ldrh.w	r2, [r1, #-12]
    ce58:	4290      	cmp	r0, r2
    ce5a:	f103 030c 	add.w	r3, r3, #12
    ce5e:	d0f0      	beq.n	ce42 <mod_init+0x46>
		return -EINVAL;
    ce60:	f06f 0615 	mvn.w	r6, #21
    ce64:	e7f1      	b.n	ce4a <mod_init+0x4e>
		mod->mod_idx = mod - elem->models;
    ce66:	68bb      	ldr	r3, [r7, #8]
    ce68:	1ae3      	subs	r3, r4, r3
    ce6a:	109b      	asrs	r3, r3, #2
    ce6c:	4353      	muls	r3, r2
    ce6e:	7163      	strb	r3, [r4, #5]
	if (mod->cb && mod->cb->init) {
    ce70:	69a3      	ldr	r3, [r4, #24]
    ce72:	2b00      	cmp	r3, #0
    ce74:	d0eb      	beq.n	ce4e <mod_init+0x52>
    ce76:	689b      	ldr	r3, [r3, #8]
    ce78:	2b00      	cmp	r3, #0
    ce7a:	d0e8      	beq.n	ce4e <mod_init+0x52>
		*err = mod->cb->init(mod);
    ce7c:	4620      	mov	r0, r4
    ce7e:	4798      	blx	r3
    ce80:	6028      	str	r0, [r5, #0]
    ce82:	e7e4      	b.n	ce4e <mod_init+0x52>
    ce84:	0000cf65 	.word	0x0000cf65
    ce88:	2000247c 	.word	0x2000247c
    ce8c:	38e38e39 	.word	0x38e38e39

0000ce90 <bt_mesh_model_foreach>:
{
    ce90:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	for (i = 0; i < dev_comp->elem_count; i++) {
    ce94:	f8df a06c 	ldr.w	sl, [pc, #108]	; cf04 <bt_mesh_model_foreach+0x74>
{
    ce98:	4606      	mov	r6, r0
    ce9a:	460f      	mov	r7, r1
	for (i = 0; i < dev_comp->elem_count; i++) {
    ce9c:	2500      	movs	r5, #0
			struct bt_mesh_model *model = &elem->models[j];
    ce9e:	f04f 0924 	mov.w	r9, #36	; 0x24
	for (i = 0; i < dev_comp->elem_count; i++) {
    cea2:	f8da 3000 	ldr.w	r3, [sl]
    cea6:	689a      	ldr	r2, [r3, #8]
    cea8:	42aa      	cmp	r2, r5
    ceaa:	d802      	bhi.n	ceb2 <bt_mesh_model_foreach+0x22>
}
    ceac:	b002      	add	sp, #8
    ceae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		struct bt_mesh_elem *elem = &dev_comp->elem[i];
    ceb2:	68dc      	ldr	r4, [r3, #12]
		for (j = 0; j < elem->model_count; j++) {
    ceb4:	f04f 0800 	mov.w	r8, #0
		struct bt_mesh_elem *elem = &dev_comp->elem[i];
    ceb8:	eb04 1405 	add.w	r4, r4, r5, lsl #4
		for (j = 0; j < elem->model_count; j++) {
    cebc:	7923      	ldrb	r3, [r4, #4]
    cebe:	4543      	cmp	r3, r8
    cec0:	dc06      	bgt.n	ced0 <bt_mesh_model_foreach+0x40>
		for (j = 0; j < elem->vnd_model_count; j++) {
    cec2:	f04f 0800 	mov.w	r8, #0
    cec6:	7963      	ldrb	r3, [r4, #5]
    cec8:	4543      	cmp	r3, r8
    ceca:	dc0e      	bgt.n	ceea <bt_mesh_model_foreach+0x5a>
	for (i = 0; i < dev_comp->elem_count; i++) {
    cecc:	3501      	adds	r5, #1
    cece:	e7e8      	b.n	cea2 <bt_mesh_model_foreach+0x12>
			struct bt_mesh_model *model = &elem->models[j];
    ced0:	68a0      	ldr	r0, [r4, #8]
			func(model, elem, false, i == 0, user_data);
    ced2:	9700      	str	r7, [sp, #0]
    ced4:	fab5 f385 	clz	r3, r5
    ced8:	fb09 0008 	mla	r0, r9, r8, r0
    cedc:	095b      	lsrs	r3, r3, #5
    cede:	2200      	movs	r2, #0
    cee0:	4621      	mov	r1, r4
    cee2:	47b0      	blx	r6
		for (j = 0; j < elem->model_count; j++) {
    cee4:	f108 0801 	add.w	r8, r8, #1
    cee8:	e7e8      	b.n	cebc <bt_mesh_model_foreach+0x2c>
			struct bt_mesh_model *model = &elem->vnd_models[j];
    ceea:	68e0      	ldr	r0, [r4, #12]
			func(model, elem, true, i == 0, user_data);
    ceec:	9700      	str	r7, [sp, #0]
    ceee:	fab5 f385 	clz	r3, r5
    cef2:	fb09 0008 	mla	r0, r9, r8, r0
    cef6:	095b      	lsrs	r3, r3, #5
    cef8:	2201      	movs	r2, #1
    cefa:	4621      	mov	r1, r4
    cefc:	47b0      	blx	r6
		for (j = 0; j < elem->vnd_model_count; j++) {
    cefe:	f108 0801 	add.w	r8, r8, #1
    cf02:	e7e0      	b.n	cec6 <bt_mesh_model_foreach+0x36>
    cf04:	2000247c 	.word	0x2000247c

0000cf08 <bt_mesh_model_pub_period_get>:
	if (!mod->pub) {
    cf08:	6883      	ldr	r3, [r0, #8]
    cf0a:	b1eb      	cbz	r3, cf48 <bt_mesh_model_pub_period_get+0x40>
	switch (mod->pub->period >> 6) {
    cf0c:	7a98      	ldrb	r0, [r3, #10]
    cf0e:	0982      	lsrs	r2, r0, #6
    cf10:	2a02      	cmp	r2, #2
    cf12:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    cf16:	d012      	beq.n	cf3e <bt_mesh_model_pub_period_get+0x36>
    cf18:	2a03      	cmp	r2, #3
    cf1a:	d013      	beq.n	cf44 <bt_mesh_model_pub_period_get+0x3c>
    cf1c:	2a01      	cmp	r2, #1
    cf1e:	d00a      	beq.n	cf36 <bt_mesh_model_pub_period_get+0x2e>
		period = (mod->pub->period & BIT_MASK(6)) * 100U;
    cf20:	2264      	movs	r2, #100	; 0x64
    cf22:	fb10 f002 	smulbb	r0, r0, r2
	if (mod->pub->fast_period) {
    cf26:	79da      	ldrb	r2, [r3, #7]
    cf28:	0652      	lsls	r2, r2, #25
    cf2a:	d50e      	bpl.n	cf4a <bt_mesh_model_pub_period_get+0x42>
		return period >> mod->pub->period_div;
    cf2c:	7adb      	ldrb	r3, [r3, #11]
    cf2e:	f003 030f 	and.w	r3, r3, #15
    cf32:	4118      	asrs	r0, r3
    cf34:	4770      	bx	lr
		period = (mod->pub->period & BIT_MASK(6)) * MSEC_PER_SEC;
    cf36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
		period = (mod->pub->period & BIT_MASK(6)) * 600U * MSEC_PER_SEC;
    cf3a:	4350      	muls	r0, r2
		break;
    cf3c:	e7f3      	b.n	cf26 <bt_mesh_model_pub_period_get+0x1e>
		period = (mod->pub->period & BIT_MASK(6)) * 10U * MSEC_PER_SEC;
    cf3e:	f242 7210 	movw	r2, #10000	; 0x2710
    cf42:	e7fa      	b.n	cf3a <bt_mesh_model_pub_period_get+0x32>
		period = (mod->pub->period & BIT_MASK(6)) * 600U * MSEC_PER_SEC;
    cf44:	4a01      	ldr	r2, [pc, #4]	; (cf4c <bt_mesh_model_pub_period_get+0x44>)
    cf46:	e7f8      	b.n	cf3a <bt_mesh_model_pub_period_get+0x32>
		return 0;
    cf48:	4618      	mov	r0, r3
}
    cf4a:	4770      	bx	lr
    cf4c:	000927c0 	.word	0x000927c0

0000cf50 <bt_mesh_model_elem>:
	return &dev_comp->elem[mod->elem_idx];
    cf50:	4b03      	ldr	r3, [pc, #12]	; (cf60 <bt_mesh_model_elem+0x10>)
    cf52:	7900      	ldrb	r0, [r0, #4]
    cf54:	681b      	ldr	r3, [r3, #0]
    cf56:	68db      	ldr	r3, [r3, #12]
}
    cf58:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    cf5c:	4770      	bx	lr
    cf5e:	bf00      	nop
    cf60:	2000247c 	.word	0x2000247c

0000cf64 <mod_publish>:
{
    cf64:	b570      	push	{r4, r5, r6, lr}
	if (pub->addr == BT_MESH_ADDR_UNASSIGNED ||
    cf66:	f830 3c14 	ldrh.w	r3, [r0, #-20]
{
    cf6a:	b092      	sub	sp, #72	; 0x48
    cf6c:	4604      	mov	r4, r0
	if (pub->addr == BT_MESH_ADDR_UNASSIGNED ||
    cf6e:	2b00      	cmp	r3, #0
    cf70:	d07f      	beq.n	d072 <mod_publish+0x10e>
    cf72:	f3bf 8f5b 	dmb	ish
    cf76:	4b40      	ldr	r3, [pc, #256]	; (d078 <mod_publish+0x114>)
    cf78:	681b      	ldr	r3, [r3, #0]
    cf7a:	f3bf 8f5b 	dmb	ish
    cf7e:	079b      	lsls	r3, r3, #30
    cf80:	d477      	bmi.n	d072 <mod_publish+0x10e>
	if (pub->count) {
    cf82:	f814 3c0d 	ldrb.w	r3, [r4, #-13]
		    bt_mesh_model_pub_is_retransmission(pub->mod)) {
    cf86:	f850 0c18 	ldr.w	r0, [r0, #-24]
	if (pub->count) {
    cf8a:	f013 06f0 	ands.w	r6, r3, #240	; 0xf0
    cf8e:	d016      	beq.n	cfbe <mod_publish+0x5a>
		pub->count--;
    cf90:	33f0      	adds	r3, #240	; 0xf0
    cf92:	f804 3c0d 	strb.w	r3, [r4, #-13]
		if (pub->retr_update && pub->update &&
    cf96:	f914 3c11 	ldrsb.w	r3, [r4, #-17]
    cf9a:	2b00      	cmp	r3, #0
    cf9c:	da2f      	bge.n	cffe <mod_publish+0x9a>
    cf9e:	f854 2c04 	ldr.w	r2, [r4, #-4]
    cfa2:	b362      	cbz	r2, cffe <mod_publish+0x9a>
    cfa4:	6883      	ldr	r3, [r0, #8]
 *
 * @return true if this is a retransmission, false if this is a first publication.
 */
static inline bool bt_mesh_model_pub_is_retransmission(const struct bt_mesh_model *model)
{
	return model->pub->count != BT_MESH_PUB_TRANSMIT_COUNT(model->pub->retransmit);
    cfa6:	7ad9      	ldrb	r1, [r3, #11]
    cfa8:	7a5b      	ldrb	r3, [r3, #9]
    cfaa:	f003 0307 	and.w	r3, r3, #7
    cfae:	ebb3 1f11 	cmp.w	r3, r1, lsr #4
    cfb2:	d024      	beq.n	cffe <mod_publish+0x9a>
			err = pub->update(pub->mod);
    cfb4:	4790      	blx	r2
			if (err) {
    cfb6:	b310      	cbz	r0, cffe <mod_publish+0x9a>
		publish_sent(err, pub->mod);
    cfb8:	f854 1c18 	ldr.w	r1, [r4, #-24]
    cfbc:	e01a      	b.n	cff4 <mod_publish+0x90>
	pub->count = BT_MESH_PUB_TRANSMIT_COUNT(pub->retransmit);
    cfbe:	f814 2c0f 	ldrb.w	r2, [r4, #-15]
    cfc2:	f002 0207 	and.w	r2, r2, #7
    cfc6:	f362 1307 	bfi	r3, r2, #4, #4
    cfca:	f804 3c0d 	strb.w	r3, [r4, #-13]
	if (!pub->update) {
    cfce:	f854 3c04 	ldr.w	r3, [r4, #-4]
    cfd2:	b1a3      	cbz	r3, cffe <mod_publish+0x9a>
	err = pub->update(pub->mod);
    cfd4:	4798      	blx	r3
    cfd6:	4605      	mov	r5, r0
	pub->period_start = k_uptime_get_32();
    cfd8:	f014 f8a4 	bl	21124 <k_uptime_get_32>
    cfdc:	f844 0c0c 	str.w	r0, [r4, #-12]
	if (err) {
    cfe0:	b16d      	cbz	r5, cffe <mod_publish+0x9a>
		pub->count = 0;
    cfe2:	f814 3c0d 	ldrb.w	r3, [r4, #-13]
		publish_sent(err, pub->mod);
    cfe6:	f854 1c18 	ldr.w	r1, [r4, #-24]
		pub->count = 0;
    cfea:	f366 1307 	bfi	r3, r6, #4, #4
    cfee:	f804 3c0d 	strb.w	r3, [r4, #-13]
		publish_sent(err, pub->mod);
    cff2:	4628      	mov	r0, r5
}
    cff4:	b012      	add	sp, #72	; 0x48
    cff6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		publish_sent(err, pub->mod);
    cffa:	f014 b8ba 	b.w	21172 <publish_sent>
	err = publish_transmit(pub->mod);
    cffe:	f854 5c18 	ldr.w	r5, [r4, #-24]
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
    d002:	ab09      	add	r3, sp, #36	; 0x24
    d004:	f44f 1210 	mov.w	r2, #2359296	; 0x240000
    d008:	e9cd 2301 	strd	r2, r3, [sp, #4]
	struct bt_mesh_model_pub *pub = mod->pub;
    d00c:	68aa      	ldr	r2, [r5, #8]
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
    d00e:	9300      	str	r3, [sp, #0]
		.app_idx = pub->key,
    d010:	88d0      	ldrh	r0, [r2, #6]
	struct bt_mesh_msg_ctx ctx = {
    d012:	2100      	movs	r1, #0
    d014:	e9cd 1103 	strd	r1, r1, [sp, #12]
		.app_idx = pub->key,
    d018:	f3c0 000b 	ubfx	r0, r0, #0, #12
	struct bt_mesh_msg_ctx ctx = {
    d01c:	f8cd 1013 	str.w	r1, [sp, #19]
    d020:	f8ad 000e 	strh.w	r0, [sp, #14]
    d024:	8890      	ldrh	r0, [r2, #4]
    d026:	f8ad 0010 	strh.w	r0, [sp, #16]
    d02a:	7a10      	ldrb	r0, [r2, #8]
    d02c:	f88d 0017 	strb.w	r0, [sp, #23]
    d030:	ab03      	add	r3, sp, #12
		.src = bt_mesh_model_elem(mod)->addr,
    d032:	4628      	mov	r0, r5
	struct bt_mesh_net_tx tx = {
    d034:	e9cd 3107 	strd	r3, r1, [sp, #28]
    d038:	9106      	str	r1, [sp, #24]
		.src = bt_mesh_model_elem(mod)->addr,
    d03a:	f7ff ff89 	bl	cf50 <bt_mesh_model_elem>
	struct bt_mesh_net_tx tx = {
    d03e:	8803      	ldrh	r3, [r0, #0]
    d040:	f8ad 3020 	strh.w	r3, [sp, #32]
		.friend_cred = pub->cred,
    d044:	79d3      	ldrb	r3, [r2, #7]
	struct bt_mesh_net_tx tx = {
    d046:	f89d 1023 	ldrb.w	r1, [sp, #35]	; 0x23
		.friend_cred = pub->cred,
    d04a:	f3c3 1300 	ubfx	r3, r3, #4, #1
	struct bt_mesh_net_tx tx = {
    d04e:	f363 0100 	bfi	r1, r3, #0, #1
	net_buf_simple_add_mem(&sdu, pub->msg->data, pub->msg->len);
    d052:	6913      	ldr	r3, [r2, #16]
	struct bt_mesh_net_tx tx = {
    d054:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
	net_buf_simple_add_mem(&sdu, pub->msg->data, pub->msg->len);
    d058:	889a      	ldrh	r2, [r3, #4]
    d05a:	6819      	ldr	r1, [r3, #0]
    d05c:	4668      	mov	r0, sp
    d05e:	f017 fe60 	bl	24d22 <net_buf_simple_add_mem>
	return bt_mesh_trans_send(&tx, &sdu, &pub_sent_cb, mod);
    d062:	4a06      	ldr	r2, [pc, #24]	; (d07c <mod_publish+0x118>)
    d064:	462b      	mov	r3, r5
    d066:	4669      	mov	r1, sp
    d068:	a806      	add	r0, sp, #24
    d06a:	f7fe ffc7 	bl	bffc <bt_mesh_trans_send>
	if (err) {
    d06e:	2800      	cmp	r0, #0
    d070:	d1a2      	bne.n	cfb8 <mod_publish+0x54>
}
    d072:	b012      	add	sp, #72	; 0x48
    d074:	bd70      	pop	{r4, r5, r6, pc}
    d076:	bf00      	nop
    d078:	20001730 	.word	0x20001730
    d07c:	00026c34 	.word	0x00026c34

0000d080 <bt_mesh_comp_register>:

int bt_mesh_comp_register(const struct bt_mesh_comp *comp)
{
    d080:	b507      	push	{r0, r1, r2, lr}
	int err;

	/* There must be at least one element */
	if (!comp || !comp->elem_count) {
    d082:	b168      	cbz	r0, d0a0 <bt_mesh_comp_register+0x20>
    d084:	6883      	ldr	r3, [r0, #8]
    d086:	b15b      	cbz	r3, d0a0 <bt_mesh_comp_register+0x20>
		return -EINVAL;
	}

	dev_comp = comp;
    d088:	4b07      	ldr	r3, [pc, #28]	; (d0a8 <bt_mesh_comp_register+0x28>)

	err = 0;
	bt_mesh_model_foreach(mod_init, &err);
    d08a:	a901      	add	r1, sp, #4
	dev_comp = comp;
    d08c:	6018      	str	r0, [r3, #0]
	bt_mesh_model_foreach(mod_init, &err);
    d08e:	4807      	ldr	r0, [pc, #28]	; (d0ac <bt_mesh_comp_register+0x2c>)
	err = 0;
    d090:	2300      	movs	r3, #0
    d092:	9301      	str	r3, [sp, #4]
	bt_mesh_model_foreach(mod_init, &err);
    d094:	f7ff fefc 	bl	ce90 <bt_mesh_model_foreach>

	return err;
    d098:	9801      	ldr	r0, [sp, #4]
}
    d09a:	b003      	add	sp, #12
    d09c:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
    d0a0:	f06f 0015 	mvn.w	r0, #21
    d0a4:	e7f9      	b.n	d09a <bt_mesh_comp_register+0x1a>
    d0a6:	bf00      	nop
    d0a8:	2000247c 	.word	0x2000247c
    d0ac:	0000cdfd 	.word	0x0000cdfd

0000d0b0 <bt_mesh_comp_provision>:

void bt_mesh_comp_provision(uint16_t addr)
{
	int i;

	dev_primary_addr = addr;
    d0b0:	4b08      	ldr	r3, [pc, #32]	; (d0d4 <bt_mesh_comp_provision+0x24>)
{
    d0b2:	b570      	push	{r4, r5, r6, lr}
	dev_primary_addr = addr;
    d0b4:	8018      	strh	r0, [r3, #0]

	BT_DBG("addr 0x%04x elem_count %zu", addr, dev_comp->elem_count);

	for (i = 0; i < dev_comp->elem_count; i++) {
    d0b6:	4b08      	ldr	r3, [pc, #32]	; (d0d8 <bt_mesh_comp_provision+0x28>)
    d0b8:	6819      	ldr	r1, [r3, #0]
    d0ba:	688c      	ldr	r4, [r1, #8]
    d0bc:	2300      	movs	r3, #0
    d0be:	18c2      	adds	r2, r0, r3
    d0c0:	42a3      	cmp	r3, r4
    d0c2:	b292      	uxth	r2, r2
    d0c4:	d100      	bne.n	d0c8 <bt_mesh_comp_provision+0x18>
		elem->addr = addr++;

		BT_DBG("addr 0x%04x mod_count %u vnd_mod_count %u",
		       elem->addr, elem->model_count, elem->vnd_model_count);
	}
}
    d0c6:	bd70      	pop	{r4, r5, r6, pc}
		elem->addr = addr++;
    d0c8:	011d      	lsls	r5, r3, #4
    d0ca:	68ce      	ldr	r6, [r1, #12]
	for (i = 0; i < dev_comp->elem_count; i++) {
    d0cc:	3301      	adds	r3, #1
		elem->addr = addr++;
    d0ce:	5372      	strh	r2, [r6, r5]
	for (i = 0; i < dev_comp->elem_count; i++) {
    d0d0:	e7f5      	b.n	d0be <bt_mesh_comp_provision+0xe>
    d0d2:	bf00      	nop
    d0d4:	20003fa6 	.word	0x20003fa6
    d0d8:	2000247c 	.word	0x2000247c

0000d0dc <bt_mesh_comp_unprovision>:

void bt_mesh_comp_unprovision(void)
{
	BT_DBG("");

	dev_primary_addr = BT_MESH_ADDR_UNASSIGNED;
    d0dc:	4b01      	ldr	r3, [pc, #4]	; (d0e4 <bt_mesh_comp_unprovision+0x8>)
    d0de:	2200      	movs	r2, #0
    d0e0:	801a      	strh	r2, [r3, #0]
}
    d0e2:	4770      	bx	lr
    d0e4:	20003fa6 	.word	0x20003fa6

0000d0e8 <bt_mesh_primary_addr>:

uint16_t bt_mesh_primary_addr(void)
{
	return dev_primary_addr;
}
    d0e8:	4b01      	ldr	r3, [pc, #4]	; (d0f0 <bt_mesh_primary_addr+0x8>)
    d0ea:	8818      	ldrh	r0, [r3, #0]
    d0ec:	4770      	bx	lr
    d0ee:	bf00      	nop
    d0f0:	20003fa6 	.word	0x20003fa6

0000d0f4 <bt_mesh_elem_find>:

struct bt_mesh_elem *bt_mesh_elem_find(uint16_t addr)
{
	uint16_t index;

	if (!BT_MESH_ADDR_IS_UNICAST(addr)) {
    d0f4:	b203      	sxth	r3, r0
    d0f6:	2b00      	cmp	r3, #0
    d0f8:	dd0b      	ble.n	d112 <bt_mesh_elem_find+0x1e>
		return NULL;
	}

	index = addr - dev_comp->elem[0].addr;
    d0fa:	4b07      	ldr	r3, [pc, #28]	; (d118 <bt_mesh_elem_find+0x24>)
    d0fc:	681a      	ldr	r2, [r3, #0]
    d0fe:	68d3      	ldr	r3, [r2, #12]
	if (index >= dev_comp->elem_count) {
    d100:	6892      	ldr	r2, [r2, #8]
	index = addr - dev_comp->elem[0].addr;
    d102:	8819      	ldrh	r1, [r3, #0]
    d104:	1a40      	subs	r0, r0, r1
	if (index >= dev_comp->elem_count) {
    d106:	b280      	uxth	r0, r0
    d108:	4290      	cmp	r0, r2
    d10a:	d202      	bcs.n	d112 <bt_mesh_elem_find+0x1e>
		return NULL;
	}

	return &dev_comp->elem[index];
    d10c:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    d110:	4770      	bx	lr
		return NULL;
    d112:	2000      	movs	r0, #0
}
    d114:	4770      	bx	lr
    d116:	bf00      	nop
    d118:	2000247c 	.word	0x2000247c

0000d11c <bt_mesh_has_addr>:

bool bt_mesh_has_addr(uint16_t addr)
{
	uint16_t index;

	if (BT_MESH_ADDR_IS_UNICAST(addr)) {
    d11c:	b202      	sxth	r2, r0
    d11e:	2a00      	cmp	r2, #0
{
    d120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d122:	4603      	mov	r3, r0
	if (BT_MESH_ADDR_IS_UNICAST(addr)) {
    d124:	dc09      	bgt.n	d13a <bt_mesh_has_addr+0x1e>

	if (IS_ENABLED(CONFIG_BT_MESH_ACCESS_LAYER_MSG) && msg_cb) {
		return true;
	}

	for (index = 0; index < dev_comp->elem_count; index++) {
    d126:	4a1c      	ldr	r2, [pc, #112]	; (d198 <bt_mesh_has_addr+0x7c>)
    d128:	6815      	ldr	r5, [r2, #0]
    d12a:	68af      	ldr	r7, [r5, #8]
    d12c:	2400      	movs	r4, #0
		model = &elem->models[i];
    d12e:	2624      	movs	r6, #36	; 0x24
	for (index = 0; index < dev_comp->elem_count; index++) {
    d130:	b2a2      	uxth	r2, r4
    d132:	4297      	cmp	r7, r2
    d134:	d807      	bhi.n	d146 <bt_mesh_has_addr+0x2a>
		if (bt_mesh_elem_find_group(elem, addr)) {
			return true;
		}
	}

	return false;
    d136:	2000      	movs	r0, #0
    d138:	e004      	b.n	d144 <bt_mesh_has_addr+0x28>
		return bt_mesh_elem_find(addr) != NULL;
    d13a:	f7ff ffdb 	bl	d0f4 <bt_mesh_elem_find>
    d13e:	3800      	subs	r0, #0
    d140:	bf18      	it	ne
    d142:	2001      	movne	r0, #1
}
    d144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		struct bt_mesh_elem *elem = &dev_comp->elem[index];
    d146:	68e9      	ldr	r1, [r5, #12]
    d148:	eb01 1202 	add.w	r2, r1, r2, lsl #4
	for (i = 0; i < elem->model_count; i++) {
    d14c:	2100      	movs	r1, #0
    d14e:	f892 c004 	ldrb.w	ip, [r2, #4]
    d152:	4561      	cmp	r1, ip
    d154:	db06      	blt.n	d164 <bt_mesh_has_addr+0x48>
	for (i = 0; i < elem->vnd_model_count; i++) {
    d156:	f892 c005 	ldrb.w	ip, [r2, #5]
    d15a:	2100      	movs	r1, #0
    d15c:	4561      	cmp	r1, ip
    d15e:	db0d      	blt.n	d17c <bt_mesh_has_addr+0x60>
	for (index = 0; index < dev_comp->elem_count; index++) {
    d160:	3401      	adds	r4, #1
    d162:	e7e5      	b.n	d130 <bt_mesh_has_addr+0x14>
		model = &elem->models[i];
    d164:	6890      	ldr	r0, [r2, #8]
    d166:	fb06 0001 	mla	r0, r6, r1, r0
		if (mod->groups[i] == addr) {
    d16a:	f8b0 e00e 	ldrh.w	lr, [r0, #14]
    d16e:	459e      	cmp	lr, r3
    d170:	d010      	beq.n	d194 <bt_mesh_has_addr+0x78>
    d172:	8a00      	ldrh	r0, [r0, #16]
    d174:	4298      	cmp	r0, r3
    d176:	d00d      	beq.n	d194 <bt_mesh_has_addr+0x78>
	for (i = 0; i < elem->model_count; i++) {
    d178:	3101      	adds	r1, #1
    d17a:	e7ea      	b.n	d152 <bt_mesh_has_addr+0x36>
		model = &elem->vnd_models[i];
    d17c:	68d0      	ldr	r0, [r2, #12]
    d17e:	fb06 0001 	mla	r0, r6, r1, r0
		if (mod->groups[i] == addr) {
    d182:	f8b0 e00e 	ldrh.w	lr, [r0, #14]
    d186:	459e      	cmp	lr, r3
    d188:	d004      	beq.n	d194 <bt_mesh_has_addr+0x78>
    d18a:	8a00      	ldrh	r0, [r0, #16]
    d18c:	4298      	cmp	r0, r3
    d18e:	d001      	beq.n	d194 <bt_mesh_has_addr+0x78>
	for (i = 0; i < elem->vnd_model_count; i++) {
    d190:	3101      	adds	r1, #1
    d192:	e7e3      	b.n	d15c <bt_mesh_has_addr+0x40>
			return true;
    d194:	2001      	movs	r0, #1
    d196:	e7d5      	b.n	d144 <bt_mesh_has_addr+0x28>
    d198:	2000247c 	.word	0x2000247c

0000d19c <bt_mesh_comp_get>:
}

const struct bt_mesh_comp *bt_mesh_comp_get(void)
{
	return dev_comp;
}
    d19c:	4b01      	ldr	r3, [pc, #4]	; (d1a4 <bt_mesh_comp_get+0x8>)
    d19e:	6818      	ldr	r0, [r3, #0]
    d1a0:	4770      	bx	lr
    d1a2:	bf00      	nop
    d1a4:	2000247c 	.word	0x2000247c

0000d1a8 <bt_mesh_model_find_group>:
{
    d1a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    d1aa:	4604      	mov	r4, r0
	struct find_group_visitor_ctx ctx = {
    d1ac:	2300      	movs	r3, #0
		.mod = *mod,
    d1ae:	6800      	ldr	r0, [r0, #0]
	struct find_group_visitor_ctx ctx = {
    d1b0:	f8ad 100c 	strh.w	r1, [sp, #12]
	bt_mesh_model_extensions_walk(*mod, find_group_mod_visitor, &ctx);
    d1b4:	aa01      	add	r2, sp, #4
    d1b6:	4905      	ldr	r1, [pc, #20]	; (d1cc <bt_mesh_model_find_group+0x24>)
	struct find_group_visitor_ctx ctx = {
    d1b8:	9301      	str	r3, [sp, #4]
    d1ba:	9002      	str	r0, [sp, #8]
	bt_mesh_model_extensions_walk(*mod, find_group_mod_visitor, &ctx);
    d1bc:	f014 f88e 	bl	212dc <bt_mesh_model_extensions_walk>
	*mod = ctx.mod;
    d1c0:	9b02      	ldr	r3, [sp, #8]
}
    d1c2:	9801      	ldr	r0, [sp, #4]
	*mod = ctx.mod;
    d1c4:	6023      	str	r3, [r4, #0]
}
    d1c6:	b004      	add	sp, #16
    d1c8:	bd10      	pop	{r4, pc}
    d1ca:	bf00      	nop
    d1cc:	0002113f 	.word	0x0002113f

0000d1d0 <bt_mesh_model_recv>:
{
    d1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (buf->data[0] >> 6) {
    d1d4:	680b      	ldr	r3, [r1, #0]
    d1d6:	781b      	ldrb	r3, [r3, #0]
{
    d1d8:	4689      	mov	r9, r1
	switch (buf->data[0] >> 6) {
    d1da:	0999      	lsrs	r1, r3, #6
    d1dc:	2902      	cmp	r1, #2
{
    d1de:	b085      	sub	sp, #20
    d1e0:	4606      	mov	r6, r0
	switch (buf->data[0] >> 6) {
    d1e2:	d013      	beq.n	d20c <bt_mesh_model_recv+0x3c>
    d1e4:	2903      	cmp	r1, #3
    d1e6:	d019      	beq.n	d21c <bt_mesh_model_recv+0x4c>
		if (buf->data[0] == 0x7f) {
    d1e8:	2b7f      	cmp	r3, #127	; 0x7f
    d1ea:	d00c      	beq.n	d206 <bt_mesh_model_recv+0x36>
		*opcode = net_buf_simple_pull_u8(buf);
    d1ec:	4648      	mov	r0, r9
    d1ee:	f017 fe1d 	bl	24e2c <net_buf_simple_pull_u8>
		*opcode = net_buf_simple_pull_be16(buf);
    d1f2:	4605      	mov	r5, r0
		return 0;
    d1f4:	b2ab      	uxth	r3, r5
	for (i = 0; i < dev_comp->elem_count; i++) {
    d1f6:	f04f 0800 	mov.w	r8, #0
    d1fa:	9301      	str	r3, [sp, #4]
    d1fc:	4b48      	ldr	r3, [pc, #288]	; (d320 <bt_mesh_model_recv+0x150>)
    d1fe:	681b      	ldr	r3, [r3, #0]
    d200:	6899      	ldr	r1, [r3, #8]
    d202:	4588      	cmp	r8, r1
    d204:	d318      	bcc.n	d238 <bt_mesh_model_recv+0x68>
}
    d206:	b005      	add	sp, #20
    d208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (buf->len < 2) {
    d20c:	f8b9 3004 	ldrh.w	r3, [r9, #4]
    d210:	2b01      	cmp	r3, #1
    d212:	d9f8      	bls.n	d206 <bt_mesh_model_recv+0x36>
		*opcode = net_buf_simple_pull_be16(buf);
    d214:	4648      	mov	r0, r9
    d216:	f017 fe19 	bl	24e4c <net_buf_simple_pull_be16>
    d21a:	e7ea      	b.n	d1f2 <bt_mesh_model_recv+0x22>
		if (buf->len < 3) {
    d21c:	f8b9 3004 	ldrh.w	r3, [r9, #4]
    d220:	2b02      	cmp	r3, #2
    d222:	d9f0      	bls.n	d206 <bt_mesh_model_recv+0x36>
		*opcode = net_buf_simple_pull_u8(buf) << 16;
    d224:	4648      	mov	r0, r9
    d226:	f017 fe01 	bl	24e2c <net_buf_simple_pull_u8>
    d22a:	4605      	mov	r5, r0
		*opcode |= net_buf_simple_pull_le16(buf);
    d22c:	4648      	mov	r0, r9
    d22e:	f017 fe05 	bl	24e3c <net_buf_simple_pull_le16>
    d232:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
		return 0;
    d236:	e7dd      	b.n	d1f4 <bt_mesh_model_recv+0x24>
		op = find_op(&dev_comp->elem[i], opcode, &model);
    d238:	68df      	ldr	r7, [r3, #12]
    d23a:	eb07 1308 	add.w	r3, r7, r8, lsl #4
		models = elem->vnd_models;
    d23e:	e9d3 1402 	ldrd	r1, r4, [r3, #8]
	if (BT_MESH_MODEL_OP_LEN(opcode) < 3) {
    d242:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
		count = elem->model_count;
    d246:	bf33      	iteet	cc
    d248:	f893 e004 	ldrbcc.w	lr, [r3, #4]
		count = elem->vnd_model_count;
    d24c:	f893 e005 	ldrbcs.w	lr, [r3, #5]
    d250:	f8dd c004 	ldrcs.w	ip, [sp, #4]
		models = elem->models;
    d254:	460c      	movcc	r4, r1
	uint32_t cid = UINT32_MAX;
    d256:	bf38      	it	cc
    d258:	f04f 3cff 	movcc.w	ip, #4294967295	; 0xffffffff
	for (i = 0U; i < count; i++) {
    d25c:	2100      	movs	r1, #0
    d25e:	b2cb      	uxtb	r3, r1
    d260:	459e      	cmp	lr, r3
    d262:	d802      	bhi.n	d26a <bt_mesh_model_recv+0x9a>
	for (i = 0; i < dev_comp->elem_count; i++) {
    d264:	f108 0801 	add.w	r8, r8, #1
    d268:	e7c8      	b.n	d1fc <bt_mesh_model_recv+0x2c>
		if (IS_ENABLED(CONFIG_BT_MESH_MODEL_VND_MSG_CID_FORCE) &&
    d26a:	f1bc 3fff 	cmp.w	ip, #4294967295	; 0xffffffff
    d26e:	d002      	beq.n	d276 <bt_mesh_model_recv+0xa6>
		     cid != models[i].vnd.company) {
    d270:	8823      	ldrh	r3, [r4, #0]
		     cid != UINT32_MAX &&
    d272:	459c      	cmp	ip, r3
    d274:	d104      	bne.n	d280 <bt_mesh_model_recv+0xb0>
		for (op = (*model)->op; op->func; op++) {
    d276:	f8d4 a014 	ldr.w	sl, [r4, #20]
    d27a:	f8da 0008 	ldr.w	r0, [sl, #8]
    d27e:	b910      	cbnz	r0, d286 <bt_mesh_model_recv+0xb6>
	for (i = 0U; i < count; i++) {
    d280:	3101      	adds	r1, #1
    d282:	3424      	adds	r4, #36	; 0x24
    d284:	e7eb      	b.n	d25e <bt_mesh_model_recv+0x8e>
			if (op->opcode == opcode) {
    d286:	f8da 0000 	ldr.w	r0, [sl]
    d28a:	4285      	cmp	r5, r0
    d28c:	d016      	beq.n	d2bc <bt_mesh_model_recv+0xec>
		for (op = (*model)->op; op->func; op++) {
    d28e:	f10a 0a0c 	add.w	sl, sl, #12
    d292:	e7f2      	b.n	d27a <bt_mesh_model_recv+0xaa>
	} else if (BT_MESH_ADDR_IS_GROUP(dst) || BT_MESH_ADDR_IS_VIRTUAL(dst)) {
    d294:	f481 4000 	eor.w	r0, r1, #32768	; 0x8000
    d298:	f5b0 4ffe 	cmp.w	r0, #32512	; 0x7f00
    d29c:	d806      	bhi.n	d2ac <bt_mesh_model_recv+0xdc>
		return !!bt_mesh_model_find_group(&mod, dst);
    d29e:	a803      	add	r0, sp, #12
    d2a0:	f7ff ff82 	bl	d1a8 <bt_mesh_model_find_group>
    d2a4:	3800      	subs	r0, #0
    d2a6:	bf18      	it	ne
    d2a8:	2001      	movne	r0, #1
    d2aa:	e019      	b.n	d2e0 <bt_mesh_model_recv+0x110>
	return mod->elem_idx == 0;
    d2ac:	7920      	ldrb	r0, [r4, #4]
    d2ae:	fab0 f080 	clz	r0, r0
    d2b2:	0940      	lsrs	r0, r0, #5
    d2b4:	e014      	b.n	d2e0 <bt_mesh_model_recv+0x110>
		} else if ((op->len < 0) && (buf->len != (size_t)(-op->len))) {
    d2b6:	42c8      	cmn	r0, r1
    d2b8:	d01c      	beq.n	d2f4 <bt_mesh_model_recv+0x124>
    d2ba:	e7d3      	b.n	d264 <bt_mesh_model_recv+0x94>
		if (!bt_mesh_model_has_key(model, rx->ctx.app_idx)) {
    d2bc:	88f1      	ldrh	r1, [r6, #6]
    d2be:	4620      	mov	r0, r4
    d2c0:	f013 ffb6 	bl	21230 <bt_mesh_model_has_key>
    d2c4:	2800      	cmp	r0, #0
    d2c6:	d0cd      	beq.n	d264 <bt_mesh_model_recv+0x94>
	if (BT_MESH_ADDR_IS_UNICAST(dst)) {
    d2c8:	f9b6 000a 	ldrsh.w	r0, [r6, #10]
		if (!model_has_dst(model, rx->ctx.recv_dst)) {
    d2cc:	8971      	ldrh	r1, [r6, #10]
    d2ce:	9403      	str	r4, [sp, #12]
	if (BT_MESH_ADDR_IS_UNICAST(dst)) {
    d2d0:	2800      	cmp	r0, #0
    d2d2:	dddf      	ble.n	d294 <bt_mesh_model_recv+0xc4>
		return (dev_comp->elem[mod->elem_idx].addr == dst);
    d2d4:	7920      	ldrb	r0, [r4, #4]
    d2d6:	0100      	lsls	r0, r0, #4
    d2d8:	5a38      	ldrh	r0, [r7, r0]
    d2da:	1a43      	subs	r3, r0, r1
    d2dc:	4258      	negs	r0, r3
    d2de:	4158      	adcs	r0, r3
		if (!model_has_dst(model, rx->ctx.recv_dst)) {
    d2e0:	2800      	cmp	r0, #0
    d2e2:	d0bf      	beq.n	d264 <bt_mesh_model_recv+0x94>
		if ((op->len >= 0) && (buf->len < (size_t)op->len)) {
    d2e4:	f8da 1004 	ldr.w	r1, [sl, #4]
    d2e8:	f8b9 0004 	ldrh.w	r0, [r9, #4]
    d2ec:	2900      	cmp	r1, #0
    d2ee:	dbe2      	blt.n	d2b6 <bt_mesh_model_recv+0xe6>
    d2f0:	4281      	cmp	r1, r0
    d2f2:	d8b7      	bhi.n	d264 <bt_mesh_model_recv+0x94>
	state->offset = net_buf_simple_headroom(buf);
    d2f4:	4648      	mov	r0, r9
    d2f6:	f017 fdc4 	bl	24e82 <net_buf_simple_headroom>
		(void)op->func(model, &rx->ctx, buf);
    d2fa:	f8da 3008 	ldr.w	r3, [sl, #8]
	state->len = buf->len;
    d2fe:	f8b9 b004 	ldrh.w	fp, [r9, #4]
	state->offset = net_buf_simple_headroom(buf);
    d302:	4607      	mov	r7, r0
    d304:	464a      	mov	r2, r9
    d306:	1d31      	adds	r1, r6, #4
    d308:	4620      	mov	r0, r4
    d30a:	4798      	blx	r3
	buf->data = buf->__buf + state->offset;
    d30c:	f8d9 0008 	ldr.w	r0, [r9, #8]
	buf->len = state->len;
    d310:	f8a9 b004 	strh.w	fp, [r9, #4]
	buf->data = buf->__buf + state->offset;
    d314:	fa10 f787 	uxtah	r7, r0, r7
    d318:	f8c9 7000 	str.w	r7, [r9]
	buf->len = state->len;
    d31c:	e7a2      	b.n	d264 <bt_mesh_model_recv+0x94>
    d31e:	bf00      	nop
    d320:	2000247c 	.word	0x2000247c

0000d324 <app_key_evt>:
	mod_unbind(mod, *app_idx, true);
}

static void app_key_evt(uint16_t app_idx, uint16_t net_idx,
			enum bt_mesh_key_evt evt)
{
    d324:	b507      	push	{r0, r1, r2, lr}
	if (evt == BT_MESH_KEY_DELETED) {
    d326:	2a01      	cmp	r2, #1
{
    d328:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (evt == BT_MESH_KEY_DELETED) {
    d32c:	d104      	bne.n	d338 <app_key_evt+0x14>
		bt_mesh_model_foreach(&mod_app_key_del, &app_idx);
    d32e:	4804      	ldr	r0, [pc, #16]	; (d340 <app_key_evt+0x1c>)
    d330:	f10d 0106 	add.w	r1, sp, #6
    d334:	f7ff fdac 	bl	ce90 <bt_mesh_model_foreach>
	}
}
    d338:	b003      	add	sp, #12
    d33a:	f85d fb04 	ldr.w	pc, [sp], #4
    d33e:	bf00      	nop
    d340:	00022511 	.word	0x00022511

0000d344 <node_reset>:
	bt_mesh_reset();
}

static int node_reset(struct bt_mesh_model *model, struct bt_mesh_msg_ctx *ctx,
		      struct net_buf_simple *buf)
{
    d344:	b570      	push	{r4, r5, r6, lr}
    d346:	b088      	sub	sp, #32
	static const struct bt_mesh_send_cb reset_cb = {
		.start = reset_send_start,
		.end = reset_send_end,
	};

	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NODE_RESET_STATUS, 0);
    d348:	ab03      	add	r3, sp, #12
{
    d34a:	4604      	mov	r4, r0
    d34c:	460d      	mov	r5, r1
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NODE_RESET_STATUS, 0);
    d34e:	f44f 22c0 	mov.w	r2, #393216	; 0x60000

	BT_DBG("net_idx 0x%04x app_idx 0x%04x src 0x%04x len %u: %s",
	       ctx->net_idx, ctx->app_idx, ctx->addr, buf->len,
	       bt_hex(buf->data, buf->len));

	bt_mesh_model_msg_init(&msg, OP_NODE_RESET_STATUS);
    d352:	a805      	add	r0, sp, #20

	if (bt_mesh_model_send(model, ctx, &msg, &reset_cb, NULL)) {
    d354:	2600      	movs	r6, #0
	bt_mesh_model_msg_init(&msg, OP_NODE_RESET_STATUS);
    d356:	f248 014a 	movw	r1, #32842	; 0x804a
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NODE_RESET_STATUS, 0);
    d35a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    d35e:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_NODE_RESET_STATUS);
    d360:	f013 ffcf 	bl	21302 <bt_mesh_model_msg_init>
	if (bt_mesh_model_send(model, ctx, &msg, &reset_cb, NULL)) {
    d364:	4b04      	ldr	r3, [pc, #16]	; (d378 <node_reset+0x34>)
    d366:	9600      	str	r6, [sp, #0]
    d368:	aa05      	add	r2, sp, #20
    d36a:	4629      	mov	r1, r5
    d36c:	4620      	mov	r0, r4
    d36e:	f013 ff71 	bl	21254 <bt_mesh_model_send>
		BT_ERR("Unable to send Node Reset Status");
	}

	return 0;
}
    d372:	4630      	mov	r0, r6
    d374:	b008      	add	sp, #32
    d376:	bd70      	pop	{r4, r5, r6, pc}
    d378:	00026e8c 	.word	0x00026e8c

0000d37c <mod_sub_get_vnd>:
{
    d37c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d380:	4614      	mov	r4, r2
    d382:	b090      	sub	sp, #64	; 0x40
	NET_BUF_SIMPLE_DEFINE(msg, BT_MESH_TX_SDU_MAX);
    d384:	ab07      	add	r3, sp, #28
    d386:	f44f 1210 	mov.w	r2, #2359296	; 0x240000
{
    d38a:	4681      	mov	r9, r0
	addr = net_buf_simple_pull_le16(buf);
    d38c:	4620      	mov	r0, r4
	NET_BUF_SIMPLE_DEFINE(msg, BT_MESH_TX_SDU_MAX);
    d38e:	e9cd 2305 	strd	r2, r3, [sp, #20]
    d392:	9304      	str	r3, [sp, #16]
{
    d394:	468a      	mov	sl, r1
	addr = net_buf_simple_pull_le16(buf);
    d396:	f017 fd51 	bl	24e3c <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(addr)) {
    d39a:	b203      	sxth	r3, r0
    d39c:	2b00      	cmp	r3, #0
	addr = net_buf_simple_pull_le16(buf);
    d39e:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(addr)) {
    d3a0:	dd50      	ble.n	d444 <mod_sub_get_vnd+0xc8>
	company = net_buf_simple_pull_le16(buf);
    d3a2:	4620      	mov	r0, r4
    d3a4:	f017 fd4a 	bl	24e3c <net_buf_simple_pull_le16>
    d3a8:	4607      	mov	r7, r0
	id = net_buf_simple_pull_le16(buf);
    d3aa:	4620      	mov	r0, r4
    d3ac:	f017 fd46 	bl	24e3c <net_buf_simple_pull_le16>
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_LIST_VND);
    d3b0:	ac04      	add	r4, sp, #16
	id = net_buf_simple_pull_le16(buf);
    d3b2:	4606      	mov	r6, r0
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_LIST_VND);
    d3b4:	f248 012c 	movw	r1, #32812	; 0x802c
    d3b8:	4620      	mov	r0, r4
    d3ba:	f013 ffa2 	bl	21302 <bt_mesh_model_msg_init>
	elem = bt_mesh_elem_find(addr);
    d3be:	4628      	mov	r0, r5
    d3c0:	f7ff fe98 	bl	d0f4 <bt_mesh_elem_find>
	if (!elem) {
    d3c4:	b9d8      	cbnz	r0, d3fe <mod_sub_get_vnd+0x82>
		net_buf_simple_add_u8(&msg, STATUS_INVALID_ADDRESS);
    d3c6:	2101      	movs	r1, #1
		net_buf_simple_add_u8(&msg, STATUS_INVALID_MODEL);
    d3c8:	4620      	mov	r0, r4
    d3ca:	f017 fcb3 	bl	24d34 <net_buf_simple_add_u8>
		net_buf_simple_add_le16(&msg, addr);
    d3ce:	4629      	mov	r1, r5
    d3d0:	4620      	mov	r0, r4
    d3d2:	f017 fcb7 	bl	24d44 <net_buf_simple_add_le16>
		net_buf_simple_add_le16(&msg, company);
    d3d6:	4639      	mov	r1, r7
    d3d8:	4620      	mov	r0, r4
    d3da:	f017 fcb3 	bl	24d44 <net_buf_simple_add_le16>
		net_buf_simple_add_le16(&msg, id);
    d3de:	4631      	mov	r1, r6
    d3e0:	4620      	mov	r0, r4
    d3e2:	f017 fcaf 	bl	24d44 <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
    d3e6:	2500      	movs	r5, #0
    d3e8:	9500      	str	r5, [sp, #0]
    d3ea:	462b      	mov	r3, r5
    d3ec:	4622      	mov	r2, r4
    d3ee:	4651      	mov	r1, sl
    d3f0:	4648      	mov	r0, r9
    d3f2:	f013 ff2f 	bl	21254 <bt_mesh_model_send>
	return 0;
    d3f6:	4628      	mov	r0, r5
}
    d3f8:	b010      	add	sp, #64	; 0x40
    d3fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	mod = bt_mesh_model_find_vnd(elem, company, id);
    d3fe:	4632      	mov	r2, r6
    d400:	4639      	mov	r1, r7
    d402:	f013 ff40 	bl	21286 <bt_mesh_model_find_vnd>
	if (!mod) {
    d406:	4680      	mov	r8, r0
    d408:	b908      	cbnz	r0, d40e <mod_sub_get_vnd+0x92>
		net_buf_simple_add_u8(&msg, STATUS_INVALID_MODEL);
    d40a:	2102      	movs	r1, #2
    d40c:	e7dc      	b.n	d3c8 <mod_sub_get_vnd+0x4c>
	net_buf_simple_add_u8(&msg, STATUS_SUCCESS);
    d40e:	2100      	movs	r1, #0
    d410:	4620      	mov	r0, r4
    d412:	f017 fc8f 	bl	24d34 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, addr);
    d416:	4629      	mov	r1, r5
    d418:	4620      	mov	r0, r4
    d41a:	f017 fc93 	bl	24d44 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, company);
    d41e:	4639      	mov	r1, r7
    d420:	4620      	mov	r0, r4
    d422:	f017 fc8f 	bl	24d44 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, id);
    d426:	4631      	mov	r1, r6
    d428:	4620      	mov	r0, r4
    d42a:	f017 fc8b 	bl	24d44 <net_buf_simple_add_le16>
	visit_ctx.msg = &msg;
    d42e:	9403      	str	r4, [sp, #12]
	visit_ctx.elem_idx = mod->elem_idx;
    d430:	f898 3004 	ldrb.w	r3, [r8, #4]
	bt_mesh_model_extensions_walk(mod, mod_sub_list_visitor, &visit_ctx);
    d434:	4905      	ldr	r1, [pc, #20]	; (d44c <mod_sub_get_vnd+0xd0>)
	visit_ctx.elem_idx = mod->elem_idx;
    d436:	f8ad 3008 	strh.w	r3, [sp, #8]
	bt_mesh_model_extensions_walk(mod, mod_sub_list_visitor, &visit_ctx);
    d43a:	aa02      	add	r2, sp, #8
    d43c:	4640      	mov	r0, r8
    d43e:	f013 ff4d 	bl	212dc <bt_mesh_model_extensions_walk>
    d442:	e7d0      	b.n	d3e6 <mod_sub_get_vnd+0x6a>
		return -EINVAL;
    d444:	f06f 0015 	mvn.w	r0, #21
    d448:	e7d6      	b.n	d3f8 <mod_sub_get_vnd+0x7c>
    d44a:	bf00      	nop
    d44c:	000221e7 	.word	0x000221e7

0000d450 <mod_sub_get>:
{
    d450:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d454:	4614      	mov	r4, r2
    d456:	b091      	sub	sp, #68	; 0x44
	NET_BUF_SIMPLE_DEFINE(msg, BT_MESH_TX_SDU_MAX);
    d458:	ab07      	add	r3, sp, #28
    d45a:	f44f 1210 	mov.w	r2, #2359296	; 0x240000
{
    d45e:	4680      	mov	r8, r0
	addr = net_buf_simple_pull_le16(buf);
    d460:	4620      	mov	r0, r4
	NET_BUF_SIMPLE_DEFINE(msg, BT_MESH_TX_SDU_MAX);
    d462:	e9cd 2305 	strd	r2, r3, [sp, #20]
    d466:	9304      	str	r3, [sp, #16]
{
    d468:	4689      	mov	r9, r1
	addr = net_buf_simple_pull_le16(buf);
    d46a:	f017 fce7 	bl	24e3c <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(addr)) {
    d46e:	b203      	sxth	r3, r0
    d470:	2b00      	cmp	r3, #0
	addr = net_buf_simple_pull_le16(buf);
    d472:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(addr)) {
    d474:	dd42      	ble.n	d4fc <mod_sub_get+0xac>
	id = net_buf_simple_pull_le16(buf);
    d476:	4620      	mov	r0, r4
    d478:	f017 fce0 	bl	24e3c <net_buf_simple_pull_le16>
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_LIST);
    d47c:	ac04      	add	r4, sp, #16
	id = net_buf_simple_pull_le16(buf);
    d47e:	4606      	mov	r6, r0
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_LIST);
    d480:	f248 012a 	movw	r1, #32810	; 0x802a
    d484:	4620      	mov	r0, r4
    d486:	f013 ff3c 	bl	21302 <bt_mesh_model_msg_init>
	elem = bt_mesh_elem_find(addr);
    d48a:	4628      	mov	r0, r5
    d48c:	f7ff fe32 	bl	d0f4 <bt_mesh_elem_find>
	if (!elem) {
    d490:	b9b8      	cbnz	r0, d4c2 <mod_sub_get+0x72>
		net_buf_simple_add_u8(&msg, STATUS_INVALID_ADDRESS);
    d492:	2101      	movs	r1, #1
		net_buf_simple_add_u8(&msg, STATUS_INVALID_MODEL);
    d494:	4620      	mov	r0, r4
    d496:	f017 fc4d 	bl	24d34 <net_buf_simple_add_u8>
		net_buf_simple_add_le16(&msg, addr);
    d49a:	4629      	mov	r1, r5
    d49c:	4620      	mov	r0, r4
    d49e:	f017 fc51 	bl	24d44 <net_buf_simple_add_le16>
		net_buf_simple_add_le16(&msg, id);
    d4a2:	4631      	mov	r1, r6
    d4a4:	4620      	mov	r0, r4
    d4a6:	f017 fc4d 	bl	24d44 <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
    d4aa:	2500      	movs	r5, #0
    d4ac:	9500      	str	r5, [sp, #0]
    d4ae:	462b      	mov	r3, r5
    d4b0:	4622      	mov	r2, r4
    d4b2:	4649      	mov	r1, r9
    d4b4:	4640      	mov	r0, r8
    d4b6:	f013 fecd 	bl	21254 <bt_mesh_model_send>
	return 0;
    d4ba:	4628      	mov	r0, r5
}
    d4bc:	b011      	add	sp, #68	; 0x44
    d4be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	mod = bt_mesh_model_find(elem, id);
    d4c2:	4631      	mov	r1, r6
    d4c4:	f013 fef6 	bl	212b4 <bt_mesh_model_find>
	if (!mod) {
    d4c8:	4607      	mov	r7, r0
    d4ca:	b908      	cbnz	r0, d4d0 <mod_sub_get+0x80>
		net_buf_simple_add_u8(&msg, STATUS_INVALID_MODEL);
    d4cc:	2102      	movs	r1, #2
    d4ce:	e7e1      	b.n	d494 <mod_sub_get+0x44>
	net_buf_simple_add_u8(&msg, STATUS_SUCCESS);
    d4d0:	2100      	movs	r1, #0
    d4d2:	4620      	mov	r0, r4
    d4d4:	f017 fc2e 	bl	24d34 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, addr);
    d4d8:	4629      	mov	r1, r5
    d4da:	4620      	mov	r0, r4
    d4dc:	f017 fc32 	bl	24d44 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, id);
    d4e0:	4631      	mov	r1, r6
    d4e2:	4620      	mov	r0, r4
    d4e4:	f017 fc2e 	bl	24d44 <net_buf_simple_add_le16>
	visit_ctx.msg = &msg;
    d4e8:	9403      	str	r4, [sp, #12]
	visit_ctx.elem_idx = mod->elem_idx;
    d4ea:	793b      	ldrb	r3, [r7, #4]
	bt_mesh_model_extensions_walk(mod, mod_sub_list_visitor, &visit_ctx);
    d4ec:	4905      	ldr	r1, [pc, #20]	; (d504 <mod_sub_get+0xb4>)
	visit_ctx.elem_idx = mod->elem_idx;
    d4ee:	f8ad 3008 	strh.w	r3, [sp, #8]
	bt_mesh_model_extensions_walk(mod, mod_sub_list_visitor, &visit_ctx);
    d4f2:	aa02      	add	r2, sp, #8
    d4f4:	4638      	mov	r0, r7
    d4f6:	f013 fef1 	bl	212dc <bt_mesh_model_extensions_walk>
    d4fa:	e7d6      	b.n	d4aa <mod_sub_get+0x5a>
		return -EINVAL;
    d4fc:	f06f 0015 	mvn.w	r0, #21
    d500:	e7dc      	b.n	d4bc <mod_sub_get+0x6c>
    d502:	bf00      	nop
    d504:	000221e7 	.word	0x000221e7

0000d508 <mod_sub_del_all>:
{
    d508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((buf->len != 4U) && (buf->len != 6U)) {
    d50c:	8893      	ldrh	r3, [r2, #4]
    d50e:	f023 0302 	bic.w	r3, r3, #2
    d512:	b29b      	uxth	r3, r3
    d514:	2b04      	cmp	r3, #4
{
    d516:	b086      	sub	sp, #24
    d518:	4606      	mov	r6, r0
    d51a:	460f      	mov	r7, r1
    d51c:	4614      	mov	r4, r2
	if ((buf->len != 4U) && (buf->len != 6U)) {
    d51e:	d12e      	bne.n	d57e <mod_sub_del_all+0x76>
	elem_addr = net_buf_simple_pull_le16(buf);
    d520:	4610      	mov	r0, r2
    d522:	f017 fc8b 	bl	24e3c <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
    d526:	b203      	sxth	r3, r0
    d528:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
    d52a:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
    d52c:	dd2a      	ble.n	d584 <mod_sub_del_all+0x7c>
	mod_id = buf->data;
    d52e:	f8d4 8000 	ldr.w	r8, [r4]
	elem = bt_mesh_elem_find(elem_addr);
    d532:	f7ff fddf 	bl	d0f4 <bt_mesh_elem_find>
	if (!elem) {
    d536:	b9a0      	cbnz	r0, d562 <mod_sub_del_all+0x5a>
		vnd = (buf->len == 4U);
    d538:	88a3      	ldrh	r3, [r4, #4]
    d53a:	1f1a      	subs	r2, r3, #4
    d53c:	4253      	negs	r3, r2
    d53e:	4153      	adcs	r3, r2
    d540:	f88d 3017 	strb.w	r3, [sp, #23]
		status = STATUS_INVALID_ADDRESS;
    d544:	2201      	movs	r2, #1
	return send_mod_sub_status(model, ctx, status, elem_addr,
    d546:	f89d 3017 	ldrb.w	r3, [sp, #23]
    d54a:	e9cd 8301 	strd	r8, r3, [sp, #4]
    d54e:	2300      	movs	r3, #0
    d550:	9300      	str	r3, [sp, #0]
    d552:	4639      	mov	r1, r7
    d554:	462b      	mov	r3, r5
    d556:	4630      	mov	r0, r6
    d558:	f014 f864 	bl	21624 <send_mod_sub_status>
}
    d55c:	b006      	add	sp, #24
    d55e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	mod = get_model(elem, buf, &vnd);
    d562:	f10d 0217 	add.w	r2, sp, #23
    d566:	4621      	mov	r1, r4
    d568:	f014 fc02 	bl	21d70 <get_model>
	if (!mod) {
    d56c:	b128      	cbz	r0, d57a <mod_sub_del_all+0x72>
	bt_mesh_model_extensions_walk(mod, mod_sub_clear_visitor, NULL);
    d56e:	2200      	movs	r2, #0
    d570:	4906      	ldr	r1, [pc, #24]	; (d58c <mod_sub_del_all+0x84>)
    d572:	f013 feb3 	bl	212dc <bt_mesh_model_extensions_walk>
	status = STATUS_SUCCESS;
    d576:	2200      	movs	r2, #0
    d578:	e7e5      	b.n	d546 <mod_sub_del_all+0x3e>
		status = STATUS_INVALID_MODEL;
    d57a:	2202      	movs	r2, #2
    d57c:	e7e3      	b.n	d546 <mod_sub_del_all+0x3e>
		return -EMSGSIZE;
    d57e:	f06f 0079 	mvn.w	r0, #121	; 0x79
    d582:	e7eb      	b.n	d55c <mod_sub_del_all+0x54>
		return -EINVAL;
    d584:	f06f 0015 	mvn.w	r0, #21
    d588:	e7e8      	b.n	d55c <mod_sub_del_all+0x54>
    d58a:	bf00      	nop
    d58c:	00022841 	.word	0x00022841

0000d590 <mod_sub_overwrite>:
{
    d590:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if ((buf->len != 6U) && (buf->len != 8U)) {
    d594:	8893      	ldrh	r3, [r2, #4]
    d596:	2b06      	cmp	r3, #6
{
    d598:	b087      	sub	sp, #28
    d59a:	4607      	mov	r7, r0
    d59c:	4688      	mov	r8, r1
    d59e:	4614      	mov	r4, r2
	if ((buf->len != 6U) && (buf->len != 8U)) {
    d5a0:	d001      	beq.n	d5a6 <mod_sub_overwrite+0x16>
    d5a2:	2b08      	cmp	r3, #8
    d5a4:	d13a      	bne.n	d61c <mod_sub_overwrite+0x8c>
	elem_addr = net_buf_simple_pull_le16(buf);
    d5a6:	4620      	mov	r0, r4
    d5a8:	f017 fc48 	bl	24e3c <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
    d5ac:	b203      	sxth	r3, r0
    d5ae:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
    d5b0:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
    d5b2:	dd36      	ble.n	d622 <mod_sub_overwrite+0x92>
	sub_addr = net_buf_simple_pull_le16(buf);
    d5b4:	4620      	mov	r0, r4
    d5b6:	f017 fc41 	bl	24e3c <net_buf_simple_pull_le16>
    d5ba:	4606      	mov	r6, r0
	elem = bt_mesh_elem_find(elem_addr);
    d5bc:	4628      	mov	r0, r5
	mod_id = buf->data;
    d5be:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
    d5c2:	f7ff fd97 	bl	d0f4 <bt_mesh_elem_find>
	if (!elem) {
    d5c6:	b938      	cbnz	r0, d5d8 <mod_sub_overwrite+0x48>
		vnd = (buf->len == 4U);
    d5c8:	88a3      	ldrh	r3, [r4, #4]
    d5ca:	1f1a      	subs	r2, r3, #4
    d5cc:	4253      	negs	r3, r2
    d5ce:	4153      	adcs	r3, r2
    d5d0:	f88d 3017 	strb.w	r3, [sp, #23]
		status = STATUS_INVALID_ADDRESS;
    d5d4:	2201      	movs	r2, #1
    d5d6:	e012      	b.n	d5fe <mod_sub_overwrite+0x6e>
	mod = get_model(elem, buf, &vnd);
    d5d8:	4621      	mov	r1, r4
    d5da:	f10d 0217 	add.w	r2, sp, #23
    d5de:	f014 fbc7 	bl	21d70 <get_model>
	if (!mod) {
    d5e2:	4604      	mov	r4, r0
    d5e4:	b1c0      	cbz	r0, d618 <mod_sub_overwrite+0x88>
	if (!BT_MESH_ADDR_IS_GROUP(sub_addr)) {
    d5e6:	f506 4380 	add.w	r3, r6, #16384	; 0x4000
    d5ea:	b29b      	uxth	r3, r3
    d5ec:	f5b3 5f7c 	cmp.w	r3, #16128	; 0x3f00
    d5f0:	d8f0      	bhi.n	d5d4 <mod_sub_overwrite+0x44>
		bt_mesh_model_extensions_walk(mod, mod_sub_clear_visitor, NULL);
    d5f2:	2200      	movs	r2, #0
    d5f4:	490c      	ldr	r1, [pc, #48]	; (d628 <mod_sub_overwrite+0x98>)
    d5f6:	f013 fe71 	bl	212dc <bt_mesh_model_extensions_walk>
		mod->groups[0] = sub_addr;
    d5fa:	81e6      	strh	r6, [r4, #14]
		status = STATUS_SUCCESS;
    d5fc:	2200      	movs	r2, #0
	return send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
    d5fe:	f89d 3017 	ldrb.w	r3, [sp, #23]
    d602:	9600      	str	r6, [sp, #0]
    d604:	e9cd 9301 	strd	r9, r3, [sp, #4]
    d608:	4641      	mov	r1, r8
    d60a:	462b      	mov	r3, r5
    d60c:	4638      	mov	r0, r7
    d60e:	f014 f809 	bl	21624 <send_mod_sub_status>
}
    d612:	b007      	add	sp, #28
    d614:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		status = STATUS_INVALID_MODEL;
    d618:	2202      	movs	r2, #2
    d61a:	e7f0      	b.n	d5fe <mod_sub_overwrite+0x6e>
		return -EMSGSIZE;
    d61c:	f06f 0079 	mvn.w	r0, #121	; 0x79
    d620:	e7f7      	b.n	d612 <mod_sub_overwrite+0x82>
		return -EINVAL;
    d622:	f06f 0015 	mvn.w	r0, #21
    d626:	e7f4      	b.n	d612 <mod_sub_overwrite+0x82>
    d628:	00022841 	.word	0x00022841

0000d62c <mod_sub_va_overwrite>:
{
    d62c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d630:	b086      	sub	sp, #24
	uint16_t elem_addr, sub_addr = BT_MESH_ADDR_UNASSIGNED;
    d632:	2300      	movs	r3, #0
    d634:	f8ad 3016 	strh.w	r3, [sp, #22]
	if ((buf->len != 20U) && (buf->len != 22U)) {
    d638:	8893      	ldrh	r3, [r2, #4]
    d63a:	f023 0302 	bic.w	r3, r3, #2
    d63e:	b29b      	uxth	r3, r3
    d640:	2b14      	cmp	r3, #20
{
    d642:	4607      	mov	r7, r0
    d644:	4688      	mov	r8, r1
    d646:	4614      	mov	r4, r2
	if ((buf->len != 20U) && (buf->len != 22U)) {
    d648:	d142      	bne.n	d6d0 <mod_sub_va_overwrite+0xa4>
	elem_addr = net_buf_simple_pull_le16(buf);
    d64a:	4610      	mov	r0, r2
    d64c:	f017 fbf6 	bl	24e3c <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
    d650:	b203      	sxth	r3, r0
    d652:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
    d654:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
    d656:	dd3e      	ble.n	d6d6 <mod_sub_va_overwrite+0xaa>
	label_uuid = net_buf_simple_pull_mem(buf, 16);
    d658:	2110      	movs	r1, #16
    d65a:	4620      	mov	r0, r4
    d65c:	f017 fbde 	bl	24e1c <net_buf_simple_pull_mem>
    d660:	4682      	mov	sl, r0
	elem = bt_mesh_elem_find(elem_addr);
    d662:	4628      	mov	r0, r5
	mod_id = buf->data;
    d664:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
    d668:	f7ff fd44 	bl	d0f4 <bt_mesh_elem_find>
	if (!elem) {
    d66c:	b9b0      	cbnz	r0, d69c <mod_sub_va_overwrite+0x70>
		vnd = (buf->len == 4U);
    d66e:	88a3      	ldrh	r3, [r4, #4]
    d670:	1f1a      	subs	r2, r3, #4
    d672:	4253      	negs	r3, r2
    d674:	4153      	adcs	r3, r2
    d676:	f88d 3015 	strb.w	r3, [sp, #21]
		status = STATUS_INVALID_ADDRESS;
    d67a:	2401      	movs	r4, #1
	return send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
    d67c:	f89d 3015 	ldrb.w	r3, [sp, #21]
    d680:	e9cd 9301 	strd	r9, r3, [sp, #4]
    d684:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    d688:	9300      	str	r3, [sp, #0]
    d68a:	4622      	mov	r2, r4
    d68c:	462b      	mov	r3, r5
    d68e:	4641      	mov	r1, r8
    d690:	4638      	mov	r0, r7
    d692:	f013 ffc7 	bl	21624 <send_mod_sub_status>
}
    d696:	b006      	add	sp, #24
    d698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	mod = get_model(elem, buf, &vnd);
    d69c:	f10d 0215 	add.w	r2, sp, #21
    d6a0:	4621      	mov	r1, r4
    d6a2:	f014 fb65 	bl	21d70 <get_model>
	if (!mod) {
    d6a6:	4606      	mov	r6, r0
    d6a8:	b180      	cbz	r0, d6cc <mod_sub_va_overwrite+0xa0>
		status = bt_mesh_va_add(label_uuid, &sub_addr);
    d6aa:	f10d 0116 	add.w	r1, sp, #22
    d6ae:	4650      	mov	r0, sl
    d6b0:	f7fe fc06 	bl	bec0 <bt_mesh_va_add>
		if (status == STATUS_SUCCESS) {
    d6b4:	4604      	mov	r4, r0
    d6b6:	2800      	cmp	r0, #0
    d6b8:	d1e0      	bne.n	d67c <mod_sub_va_overwrite+0x50>
			bt_mesh_model_extensions_walk(mod, mod_sub_clear_visitor, NULL);
    d6ba:	4602      	mov	r2, r0
    d6bc:	4907      	ldr	r1, [pc, #28]	; (d6dc <mod_sub_va_overwrite+0xb0>)
    d6be:	4630      	mov	r0, r6
    d6c0:	f013 fe0c 	bl	212dc <bt_mesh_model_extensions_walk>
			mod->groups[0] = sub_addr;
    d6c4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    d6c8:	81f3      	strh	r3, [r6, #14]
			if (IS_ENABLED(CONFIG_BT_MESH_LOW_POWER)) {
    d6ca:	e7d7      	b.n	d67c <mod_sub_va_overwrite+0x50>
		status = STATUS_INVALID_MODEL;
    d6cc:	2402      	movs	r4, #2
    d6ce:	e7d5      	b.n	d67c <mod_sub_va_overwrite+0x50>
		return -EMSGSIZE;
    d6d0:	f06f 0079 	mvn.w	r0, #121	; 0x79
    d6d4:	e7df      	b.n	d696 <mod_sub_va_overwrite+0x6a>
		return -EINVAL;
    d6d6:	f06f 0015 	mvn.w	r0, #21
    d6da:	e7dc      	b.n	d696 <mod_sub_va_overwrite+0x6a>
    d6dc:	00022841 	.word	0x00022841

0000d6e0 <bt_mesh_model_reset>:
	}
}

void bt_mesh_model_reset(void)
{
	bt_mesh_model_foreach(mod_reset, NULL);
    d6e0:	4801      	ldr	r0, [pc, #4]	; (d6e8 <bt_mesh_model_reset+0x8>)
    d6e2:	2100      	movs	r1, #0
    d6e4:	f7ff bbd4 	b.w	ce90 <bt_mesh_model_foreach>
    d6e8:	00022827 	.word	0x00022827

0000d6ec <health_srv_init>:
		srv->cb->attn_off(srv->model);
	}
}

static int health_srv_init(struct bt_mesh_model *model)
{
    d6ec:	b538      	push	{r3, r4, r5, lr}
	struct bt_mesh_health_srv *srv = model->user_data;
    d6ee:	6a05      	ldr	r5, [r0, #32]
{
    d6f0:	4604      	mov	r4, r0

	if (!srv) {
    d6f2:	b175      	cbz	r5, d712 <health_srv_init+0x26>
		BT_ERR("No Health Server context provided");
		return -EINVAL;
	}

	if (!model->pub) {
    d6f4:	6883      	ldr	r3, [r0, #8]
    d6f6:	b163      	cbz	r3, d712 <health_srv_init+0x26>
		BT_ERR("Health Server has no publication support");
		return -EINVAL;
	}

	model->pub->update = health_pub_update;
    d6f8:	4a08      	ldr	r2, [pc, #32]	; (d71c <health_srv_init+0x30>)

	k_work_init_delayable(&srv->attn_timer, attention_off);
    d6fa:	4909      	ldr	r1, [pc, #36]	; (d720 <health_srv_init+0x34>)
	model->pub->update = health_pub_update;
    d6fc:	615a      	str	r2, [r3, #20]
	k_work_init_delayable(&srv->attn_timer, attention_off);
    d6fe:	f105 0008 	add.w	r0, r5, #8
    d702:	f018 fac5 	bl	25c90 <k_work_init_delayable>

	srv->model = model;
    d706:	602c      	str	r4, [r5, #0]

	if (bt_mesh_model_in_primary(model)) {
    d708:	7920      	ldrb	r0, [r4, #4]
    d70a:	b928      	cbnz	r0, d718 <health_srv_init+0x2c>
		health_srv = srv;
    d70c:	4b05      	ldr	r3, [pc, #20]	; (d724 <health_srv_init+0x38>)
    d70e:	601d      	str	r5, [r3, #0]
	}

	return 0;
}
    d710:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    d712:	f06f 0015 	mvn.w	r0, #21
    d716:	e7fb      	b.n	d710 <health_srv_init+0x24>
	return 0;
    d718:	2000      	movs	r0, #0
    d71a:	e7f9      	b.n	d710 <health_srv_init+0x24>
    d71c:	00022d83 	.word	0x00022d83
    d720:	00022ad7 	.word	0x00022ad7
    d724:	20002480 	.word	0x20002480

0000d728 <bt_mesh_attention>:
const struct bt_mesh_model_cb bt_mesh_health_srv_cb = {
	.init = health_srv_init,
};

void bt_mesh_attention(struct bt_mesh_model *model, uint8_t time)
{
    d728:	b570      	push	{r4, r5, r6, lr}
    d72a:	460c      	mov	r4, r1
	struct bt_mesh_health_srv *srv;

	if (!model) {
    d72c:	bb00      	cbnz	r0, d770 <bt_mesh_attention+0x48>
		srv = health_srv;
    d72e:	4b12      	ldr	r3, [pc, #72]	; (d778 <bt_mesh_attention+0x50>)
    d730:	681d      	ldr	r5, [r3, #0]
		if (!srv) {
    d732:	b1fd      	cbz	r5, d774 <bt_mesh_attention+0x4c>
			BT_WARN("No Health Server available");
			return;
		}

		model = srv->model;
    d734:	6828      	ldr	r0, [r5, #0]
	} else {
		srv = model->user_data;
	}

	if ((time > 0) && srv->cb && srv->cb->attn_on) {
    d736:	b124      	cbz	r4, d742 <bt_mesh_attention+0x1a>
    d738:	686b      	ldr	r3, [r5, #4]
    d73a:	b113      	cbz	r3, d742 <bt_mesh_attention+0x1a>
    d73c:	691b      	ldr	r3, [r3, #16]
    d73e:	b103      	cbz	r3, d742 <bt_mesh_attention+0x1a>
		srv->cb->attn_on(model);
    d740:	4798      	blx	r3
	}

	k_work_reschedule(&srv->attn_timer, K_SECONDS(time));
    d742:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    d746:	434c      	muls	r4, r1
			return ((t * to_hz + off) / from_hz);
    d748:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    d74c:	f240 30e7 	movw	r0, #999	; 0x3e7
    d750:	2100      	movs	r1, #0
    d752:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d756:	2300      	movs	r3, #0
    d758:	fbe4 0106 	umlal	r0, r1, r4, r6
    d75c:	f7f3 fe8c 	bl	1478 <__aeabi_uldivmod>
    d760:	4602      	mov	r2, r0
    d762:	460b      	mov	r3, r1
    d764:	f105 0008 	add.w	r0, r5, #8
}
    d768:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&srv->attn_timer, K_SECONDS(time));
    d76c:	f00d bfd4 	b.w	1b718 <k_work_reschedule>
		srv = model->user_data;
    d770:	6a05      	ldr	r5, [r0, #32]
    d772:	e7e0      	b.n	d736 <bt_mesh_attention+0xe>
}
    d774:	bd70      	pop	{r4, r5, r6, pc}
    d776:	bf00      	nop
    d778:	20002480 	.word	0x20002480

0000d77c <adv_thread>:

	BT_DBG("Advertising stopped (%u ms)", (uint32_t) k_uptime_delta(&time));
}

static void adv_thread(void *p1, void *p2, void *p3)
{
    d77c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			while (!buf) {

				/* Adv timeout may be set by a call from proxy
				 * to bt_mesh_adv_gatt_start:
				 */
				adv_timeout = SYS_FOREVER_MS;
    d780:	4e4e      	ldr	r6, [pc, #312]	; (d8bc <adv_thread+0x140>)
{
    d782:	b08a      	sub	sp, #40	; 0x28
			buf = bt_mesh_adv_buf_get(K_NO_WAIT);
    d784:	2000      	movs	r0, #0
    d786:	2100      	movs	r1, #0
    d788:	f7fc fdc4 	bl	a314 <bt_mesh_adv_buf_get>
				adv_timeout = SYS_FOREVER_MS;
    d78c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
			buf = bt_mesh_adv_buf_get(K_NO_WAIT);
    d790:	4604      	mov	r4, r0
			while (!buf) {
    d792:	2c00      	cmp	r4, #0
    d794:	d06d      	beq.n	d872 <adv_thread+0xf6>
		if (!buf) {
			continue;
		}

		/* busy == 0 means this was canceled */
		if (BT_MESH_ADV(buf)->busy) {
    d796:	6962      	ldr	r2, [r4, #20]
    d798:	7a13      	ldrb	r3, [r2, #8]
    d79a:	0719      	lsls	r1, r3, #28
    d79c:	d563      	bpl.n	d866 <adv_thread+0xea>
			BT_MESH_ADV(buf)->busy = 0U;
    d79e:	f36f 03c3 	bfc	r3, #3, #1
    d7a2:	7213      	strb	r3, [r2, #8]
		((bt_dev.hci_version >= BT_HCI_VERSION_5_0) ?
    d7a4:	4b46      	ldr	r3, [pc, #280]	; (d8c0 <adv_thread+0x144>)
			       ADV_INT_FAST_MS :
    d7a6:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
	struct bt_le_adv_param param = {};
    d7aa:	2214      	movs	r2, #20
			       ADV_INT_FAST_MS :
    d7ac:	2b08      	cmp	r3, #8
	struct bt_le_adv_param param = {};
    d7ae:	eb0d 0002 	add.w	r0, sp, r2
    d7b2:	f04f 0100 	mov.w	r1, #0
			       ADV_INT_FAST_MS :
    d7b6:	bf8c      	ite	hi
    d7b8:	2714      	movhi	r7, #20
    d7ba:	2764      	movls	r7, #100	; 0x64
	struct bt_le_adv_param param = {};
    d7bc:	f010 fc44 	bl	1e048 <memset>
	adv_int = MAX(adv_int_min,
    d7c0:	6960      	ldr	r0, [r4, #20]
    d7c2:	7a45      	ldrb	r5, [r0, #9]
    d7c4:	08ea      	lsrs	r2, r5, #3
    d7c6:	1c51      	adds	r1, r2, #1
    d7c8:	eb01 0281 	add.w	r2, r1, r1, lsl #2
    d7cc:	ebb7 0f42 	cmp.w	r7, r2, lsl #1
    d7d0:	bfda      	itte	le
    d7d2:	4611      	movle	r1, r2
    d7d4:	004b      	lslle	r3, r1, #1
    d7d6:	b2bb      	uxthgt	r3, r7
	duration = adv_int +
    d7d8:	f005 0207 	and.w	r2, r5, #7
    d7dc:	f103 050a 	add.w	r5, r3, #10
    d7e0:	fb02 5505 	mla	r5, r2, r5, r5
	ad.type = bt_mesh_adv_type[BT_MESH_ADV(buf)->type];
    d7e4:	7a02      	ldrb	r2, [r0, #8]
    d7e6:	4937      	ldr	r1, [pc, #220]	; (d8c4 <adv_thread+0x148>)
    d7e8:	f002 0203 	and.w	r2, r2, #3
	duration = adv_int +
    d7ec:	441d      	add	r5, r3
	ad.type = bt_mesh_adv_type[BT_MESH_ADV(buf)->type];
    d7ee:	5c8a      	ldrb	r2, [r1, r2]
    d7f0:	f88d 200c 	strb.w	r2, [sp, #12]
	ad.data_len = buf->len;
    d7f4:	89a2      	ldrh	r2, [r4, #12]
    d7f6:	f88d 200d 	strb.w	r2, [sp, #13]
	ad.data = buf->data;
    d7fa:	68a2      	ldr	r2, [r4, #8]
    d7fc:	9204      	str	r2, [sp, #16]
	duration = adv_int +
    d7fe:	b2ad      	uxth	r5, r5
	param.interval_min = BT_MESH_ADV_SCAN_UNIT(adv_int);
    d800:	2205      	movs	r2, #5
    d802:	00db      	lsls	r3, r3, #3
    d804:	fbb3 f3f2 	udiv	r3, r3, r2
	param.interval_max = param.interval_min;
    d808:	e9cd 3307 	strd	r3, r3, [sp, #28]
    d80c:	f018 fbce 	bl	25fac <z_impl_k_uptime_ticks>
	err = bt_le_adv_start(&param, &ad, 1, NULL, 0);
    d810:	2300      	movs	r3, #0
    d812:	9300      	str	r3, [sp, #0]
    d814:	2201      	movs	r2, #1
    d816:	a903      	add	r1, sp, #12
    d818:	a805      	add	r0, sp, #20
    d81a:	f7f9 ff5d 	bl	76d8 <bt_le_adv_start>
	bt_mesh_adv_send_start(duration, err, BT_MESH_ADV(buf));
    d81e:	f8d4 8014 	ldr.w	r8, [r4, #20]
			   const struct bt_data *sd, size_t sd_len);

static inline void bt_mesh_adv_send_start(uint16_t duration, int err,
					  struct bt_mesh_adv *adv)
{
	if (!adv->started) {
    d822:	f898 3008 	ldrb.w	r3, [r8, #8]
    d826:	075a      	lsls	r2, r3, #29
	err = bt_le_adv_start(&param, &ad, 1, NULL, 0);
    d828:	4607      	mov	r7, r0
    d82a:	d444      	bmi.n	d8b6 <adv_thread+0x13a>
		adv->started = 1;
    d82c:	f043 0304 	orr.w	r3, r3, #4
    d830:	f888 3008 	strb.w	r3, [r8, #8]

		if (adv->cb && adv->cb->start) {
    d834:	f8d8 3000 	ldr.w	r3, [r8]
    d838:	b133      	cbz	r3, d848 <adv_thread+0xcc>
    d83a:	681b      	ldr	r3, [r3, #0]
    d83c:	b123      	cbz	r3, d848 <adv_thread+0xcc>
			adv->cb->start(duration, err, adv->cb_data);
    d83e:	4601      	mov	r1, r0
    d840:	f8d8 2004 	ldr.w	r2, [r8, #4]
    d844:	4628      	mov	r0, r5
    d846:	4798      	blx	r3
		}

		if (err) {
    d848:	bb8f      	cbnz	r7, d8ae <adv_thread+0x132>
    d84a:	f240 30e7 	movw	r0, #999	; 0x3e7
    d84e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d852:	2300      	movs	r3, #0
    d854:	eb00 30c5 	add.w	r0, r0, r5, lsl #15
    d858:	2100      	movs	r1, #0
    d85a:	f7f3 fe0d 	bl	1478 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
    d85e:	f00e fa37 	bl	1bcd0 <z_impl_k_sleep>
	err = bt_le_adv_stop();
    d862:	f7f9 ff6b 	bl	773c <bt_le_adv_stop>
			adv_send(buf);
		}

		net_buf_unref(buf);
    d866:	4620      	mov	r0, r4
    d868:	f009 fc06 	bl	17078 <net_buf_unref>
	z_impl_k_yield();
    d86c:	f00e f9a8 	bl	1bbc0 <z_impl_k_yield>
}
    d870:	e788      	b.n	d784 <adv_thread+0x8>
				adv_timeout = SYS_FOREVER_MS;
    d872:	6037      	str	r7, [r6, #0]
				(void)bt_mesh_adv_gatt_send();
    d874:	f012 fdf3 	bl	2045e <bt_mesh_adv_gatt_send>
				buf = bt_mesh_adv_buf_get(SYS_TIMEOUT_MS(adv_timeout));
    d878:	6835      	ldr	r5, [r6, #0]
    d87a:	1c68      	adds	r0, r5, #1
    d87c:	d013      	beq.n	d8a6 <adv_thread+0x12a>
    d87e:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
    d882:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    d886:	f240 30e7 	movw	r0, #999	; 0x3e7
    d88a:	4621      	mov	r1, r4
    d88c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d890:	2300      	movs	r3, #0
    d892:	fbc5 010c 	smlal	r0, r1, r5, ip
    d896:	f7f3 fdef 	bl	1478 <__aeabi_uldivmod>
    d89a:	f7fc fd3b 	bl	a314 <bt_mesh_adv_buf_get>
    d89e:	4604      	mov	r4, r0
				bt_le_adv_stop();
    d8a0:	f7f9 ff4c 	bl	773c <bt_le_adv_stop>
    d8a4:	e775      	b.n	d792 <adv_thread+0x16>
				buf = bt_mesh_adv_buf_get(SYS_TIMEOUT_MS(adv_timeout));
    d8a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d8aa:	4601      	mov	r1, r0
    d8ac:	e7f5      	b.n	d89a <adv_thread+0x11e>
			adv->cb = NULL;
    d8ae:	2300      	movs	r3, #0
    d8b0:	f8c8 3000 	str.w	r3, [r8]
	if (err) {
    d8b4:	e7d7      	b.n	d866 <adv_thread+0xea>
    d8b6:	2800      	cmp	r0, #0
    d8b8:	d1d5      	bne.n	d866 <adv_thread+0xea>
    d8ba:	e7c6      	b.n	d84a <adv_thread+0xce>
    d8bc:	20002484 	.word	0x20002484
    d8c0:	20000080 	.word	0x20000080
    d8c4:	0002761a 	.word	0x0002761a

0000d8c8 <bt_mesh_adv_init>:
{
	bt_mesh_adv_buf_get_cancel();
}

void bt_mesh_adv_init(void)
{
    d8c8:	b510      	push	{r4, lr}
    d8ca:	b088      	sub	sp, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    d8cc:	4c0e      	ldr	r4, [pc, #56]	; (d908 <bt_mesh_adv_init+0x40>)
    d8ce:	490f      	ldr	r1, [pc, #60]	; (d90c <bt_mesh_adv_init+0x44>)
    d8d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    d8d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d8d8:	e9cd 2306 	strd	r2, r3, [sp, #24]
    d8dc:	2300      	movs	r3, #0
    d8de:	f06f 0208 	mvn.w	r2, #8
    d8e2:	e9cd 2303 	strd	r2, r3, [sp, #12]
    d8e6:	e9cd 3301 	strd	r3, r3, [sp, #4]
    d8ea:	9300      	str	r3, [sp, #0]
    d8ec:	f44f 7240 	mov.w	r2, #768	; 0x300
    d8f0:	4b07      	ldr	r3, [pc, #28]	; (d910 <bt_mesh_adv_init+0x48>)
    d8f2:	4620      	mov	r0, r4
    d8f4:	f00d fb76 	bl	1afe4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    d8f8:	4906      	ldr	r1, [pc, #24]	; (d914 <bt_mesh_adv_init+0x4c>)
    d8fa:	4620      	mov	r0, r4
	k_thread_create(&adv_thread_data, adv_thread_stack,
			K_KERNEL_STACK_SIZEOF(adv_thread_stack), adv_thread,
			NULL, NULL, NULL, K_PRIO_COOP(CONFIG_BT_MESH_ADV_PRIO),
			0, K_FOREVER);
	k_thread_name_set(&adv_thread_data, "BT Mesh adv");
}
    d8fc:	b008      	add	sp, #32
    d8fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d902:	f018 b807 	b.w	25914 <z_impl_k_thread_name_set>
    d906:	bf00      	nop
    d908:	20001ad8 	.word	0x20001ad8
    d90c:	20004ca0 	.word	0x20004ca0
    d910:	0000d77d 	.word	0x0000d77d
    d914:	0002774d 	.word	0x0002774d

0000d918 <bt_mesh_adv_enable>:

int bt_mesh_adv_enable(void)
{
    d918:	b508      	push	{r3, lr}
	z_impl_k_thread_start(thread);
    d91a:	4802      	ldr	r0, [pc, #8]	; (d924 <bt_mesh_adv_enable+0xc>)
    d91c:	f017 fffd 	bl	2591a <z_impl_k_thread_start>
	k_thread_start(&adv_thread_data);
	return 0;
}
    d920:	2000      	movs	r0, #0
    d922:	bd08      	pop	{r3, pc}
    d924:	20001ad8 	.word	0x20001ad8

0000d928 <bt_mesh_adv_gatt_start>:

int bt_mesh_adv_gatt_start(const struct bt_le_adv_param *param, int32_t duration,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
    d928:	b430      	push	{r4, r5}
	adv_timeout = duration;
    d92a:	4c05      	ldr	r4, [pc, #20]	; (d940 <bt_mesh_adv_gatt_start+0x18>)
{
    d92c:	460d      	mov	r5, r1
	adv_timeout = duration;
    d92e:	6025      	str	r5, [r4, #0]
	return bt_le_adv_start(param, ad, ad_len, sd, sd_len);
    d930:	9c03      	ldr	r4, [sp, #12]
{
    d932:	4611      	mov	r1, r2
    d934:	461a      	mov	r2, r3
    d936:	9b02      	ldr	r3, [sp, #8]
	return bt_le_adv_start(param, ad, ad_len, sd, sd_len);
    d938:	9402      	str	r4, [sp, #8]
}
    d93a:	bc30      	pop	{r4, r5}
	return bt_le_adv_start(param, ad, ad_len, sd, sd_len);
    d93c:	f7f9 becc 	b.w	76d8 <bt_le_adv_start>
    d940:	20002484 	.word	0x20002484

0000d944 <send_friend_clear>:
static const struct bt_mesh_send_cb clear_sent_cb = {
	.end = friend_clear_sent,
};

static void send_friend_clear(struct bt_mesh_friend *frnd)
{
    d944:	b510      	push	{r4, lr}
	struct bt_mesh_msg_ctx ctx = {
		.net_idx  = frnd->subnet->net_idx,
    d946:	6902      	ldr	r2, [r0, #16]
{
    d948:	b08a      	sub	sp, #40	; 0x28
	struct bt_mesh_msg_ctx ctx = {
    d94a:	8b91      	ldrh	r1, [r2, #28]
    d94c:	f8ad 1010 	strh.w	r1, [sp, #16]
    d950:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d954:	2300      	movs	r3, #0
    d956:	f8ad 1012 	strh.w	r1, [sp, #18]
    d95a:	f8b0 10b4 	ldrh.w	r1, [r0, #180]	; 0xb4
    d95e:	f8cd 3016 	str.w	r3, [sp, #22]
    d962:	f88d 301a 	strb.w	r3, [sp, #26]
    d966:	f8ad 1014 	strh.w	r1, [sp, #20]
		.app_idx  = BT_MESH_KEY_UNUSED,
		.addr     = frnd->clear.frnd,
		.send_ttl = BT_MESH_TTL_MAX,
	};
	struct bt_mesh_net_tx tx = {
    d96a:	9309      	str	r3, [sp, #36]	; 0x24
	struct bt_mesh_msg_ctx ctx = {
    d96c:	217f      	movs	r1, #127	; 0x7f
	struct bt_mesh_net_tx tx = {
    d96e:	ab04      	add	r3, sp, #16
{
    d970:	4604      	mov	r4, r0
	struct bt_mesh_msg_ctx ctx = {
    d972:	f88d 101b 	strb.w	r1, [sp, #27]
	struct bt_mesh_net_tx tx = {
    d976:	9207      	str	r2, [sp, #28]
    d978:	9308      	str	r3, [sp, #32]
		.sub  = frnd->subnet,
		.ctx  = &ctx,
		.src  = bt_mesh_primary_addr(),
    d97a:	f7ff fbb5 	bl	d0e8 <bt_mesh_primary_addr>
	struct bt_mesh_net_tx tx = {
    d97e:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
		.xmit = bt_mesh_net_transmit_get(),
    d982:	f7fc fc3f 	bl	a204 <bt_mesh_net_transmit_get>
	};
	struct bt_mesh_ctl_friend_clear req = {
    d986:	8823      	ldrh	r3, [r4, #0]
	struct bt_mesh_net_tx tx = {
    d988:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
	struct bt_mesh_ctl_friend_clear req = {
    d98c:	ba5b      	rev16	r3, r3
    d98e:	f8ad 300c 	strh.w	r3, [sp, #12]
    d992:	8963      	ldrh	r3, [r4, #10]
		.lpn_counter = sys_cpu_to_be16(frnd->lpn_counter),
	};

	BT_DBG("");

	bt_mesh_ctl_send(&tx, TRANS_CTL_OP_FRIEND_CLEAR, &req,
    d994:	9401      	str	r4, [sp, #4]
	struct bt_mesh_ctl_friend_clear req = {
    d996:	ba5b      	rev16	r3, r3
    d998:	f8ad 300e 	strh.w	r3, [sp, #14]
	bt_mesh_ctl_send(&tx, TRANS_CTL_OP_FRIEND_CLEAR, &req,
    d99c:	4b04      	ldr	r3, [pc, #16]	; (d9b0 <send_friend_clear+0x6c>)
    d99e:	9300      	str	r3, [sp, #0]
    d9a0:	aa03      	add	r2, sp, #12
    d9a2:	2304      	movs	r3, #4
    d9a4:	2105      	movs	r1, #5
    d9a6:	a807      	add	r0, sp, #28
    d9a8:	f013 f929 	bl	20bfe <bt_mesh_ctl_send>
			 sizeof(req), &clear_sent_cb, frnd);
}
    d9ac:	b00a      	add	sp, #40	; 0x28
    d9ae:	bd10      	pop	{r4, pc}
    d9b0:	00026f3c 	.word	0x00026f3c

0000d9b4 <friend_clear>:
{
    d9b4:	b570      	push	{r4, r5, r6, lr}
    d9b6:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable(&frnd->timer);
    d9b8:	3060      	adds	r0, #96	; 0x60
    d9ba:	f018 f977 	bl	25cac <k_work_cancel_delayable>
	memset(frnd->cred, 0, sizeof(frnd->cred));
    d9be:	2242      	movs	r2, #66	; 0x42
    d9c0:	2100      	movs	r1, #0
    d9c2:	f104 0014 	add.w	r0, r4, #20
    d9c6:	f010 fb3f 	bl	1e048 <memset>
	if (frnd->last) {
    d9ca:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    d9ce:	b120      	cbz	r0, d9da <friend_clear+0x26>
		net_buf_unref(frnd->last);
    d9d0:	f009 fb52 	bl	17078 <net_buf_unref>
		frnd->last = NULL;
    d9d4:	2300      	movs	r3, #0
    d9d6:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	purge_buffers(&frnd->queue);
    d9da:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    d9de:	f015 faf0 	bl	22fc2 <purge_buffers>
		purge_buffers(&seg->queue);
    d9e2:	f104 0090 	add.w	r0, r4, #144	; 0x90
    d9e6:	f015 faec 	bl	22fc2 <purge_buffers>
	STRUCT_SECTION_FOREACH(bt_mesh_friend_cb, cb) {
    d9ea:	4d12      	ldr	r5, [pc, #72]	; (da34 <friend_clear+0x80>)
    d9ec:	4e12      	ldr	r6, [pc, #72]	; (da38 <friend_clear+0x84>)
		seg->seg_count = 0U;
    d9ee:	2300      	movs	r3, #0
    d9f0:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
	STRUCT_SECTION_FOREACH(bt_mesh_friend_cb, cb) {
    d9f4:	42b5      	cmp	r5, r6
    d9f6:	d311      	bcc.n	da1c <friend_clear+0x68>
	frnd->counter++;
    d9f8:	89a3      	ldrh	r3, [r4, #12]
    d9fa:	3301      	adds	r3, #1
    d9fc:	81a3      	strh	r3, [r4, #12]
	frnd->fsn = 0U;
    d9fe:	78e3      	ldrb	r3, [r4, #3]
	frnd->subnet = NULL;
    da00:	2100      	movs	r1, #0
	frnd->fsn = 0U;
    da02:	f023 031d 	bic.w	r3, r3, #29
	frnd->subnet = NULL;
    da06:	6121      	str	r1, [r4, #16]
	frnd->queue_size = 0U;
    da08:	f8c4 10a8 	str.w	r1, [r4, #168]	; 0xa8
	frnd->fsn = 0U;
    da0c:	70e3      	strb	r3, [r4, #3]
	(void)memset(frnd->sub_list, 0, sizeof(frnd->sub_list));
    da0e:	f104 0056 	add.w	r0, r4, #86	; 0x56
    da12:	2206      	movs	r2, #6
}
    da14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(frnd->sub_list, 0, sizeof(frnd->sub_list));
    da18:	f010 bb16 	b.w	1e048 <memset>
		if (frnd->established && cb->terminated) {
    da1c:	78e3      	ldrb	r3, [r4, #3]
    da1e:	06db      	lsls	r3, r3, #27
    da20:	d505      	bpl.n	da2e <friend_clear+0x7a>
    da22:	686b      	ldr	r3, [r5, #4]
    da24:	b11b      	cbz	r3, da2e <friend_clear+0x7a>
			cb->terminated(frnd->subnet->net_idx, frnd->lpn);
    da26:	6922      	ldr	r2, [r4, #16]
    da28:	8821      	ldrh	r1, [r4, #0]
    da2a:	8b90      	ldrh	r0, [r2, #28]
    da2c:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_mesh_friend_cb, cb) {
    da2e:	350c      	adds	r5, #12
    da30:	e7e0      	b.n	d9f4 <friend_clear+0x40>
    da32:	bf00      	nop
    da34:	000265e8 	.word	0x000265e8
    da38:	000265e8 	.word	0x000265e8

0000da3c <create_friend_pdu.constprop.0>:
static struct net_buf *create_friend_pdu(struct bt_mesh_friend *frnd,
    da3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return net_buf_alloc_fixed(pool, timeout);
    da3e:	2200      	movs	r2, #0
    da40:	4604      	mov	r4, r0
    da42:	2300      	movs	r3, #0
    da44:	481c      	ldr	r0, [pc, #112]	; (dab8 <create_friend_pdu.constprop.0+0x7c>)
    da46:	460f      	mov	r7, r1
    da48:	f017 f8da 	bl	24c00 <net_buf_alloc_fixed>
	if (!buf) {
    da4c:	4606      	mov	r6, r0
    da4e:	b380      	cbz	r0, dab2 <create_friend_pdu.constprop.0+0x76>
	FRIEND_ADV(buf) = adv_alloc(net_buf_id(buf));
    da50:	f009 fa56 	bl	16f00 <net_buf_id>
	adv_pool[id].app_idx = BT_MESH_KEY_UNUSED;
    da54:	4b19      	ldr	r3, [pc, #100]	; (dabc <create_friend_pdu.constprop.0+0x80>)
	net_buf_add_u8(buf, (info->iv_index & 1) << 7); /* Will be reset in encryption */
    da56:	68a1      	ldr	r1, [r4, #8]
	adv_pool[id].app_idx = BT_MESH_KEY_UNUSED;
    da58:	f64f 72ff 	movw	r2, #65535	; 0xffff
    da5c:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
	return net_buf_simple_add_u8(&buf->b, val);
    da60:	f106 0508 	add.w	r5, r6, #8
	return &adv_pool[id];
    da64:	eb03 0340 	add.w	r3, r3, r0, lsl #1
	net_buf_add_u8(buf, (info->iv_index & 1) << 7); /* Will be reset in encryption */
    da68:	01c9      	lsls	r1, r1, #7
	FRIEND_ADV(buf) = adv_alloc(net_buf_id(buf));
    da6a:	6173      	str	r3, [r6, #20]
    da6c:	f001 0180 	and.w	r1, r1, #128	; 0x80
    da70:	4628      	mov	r0, r5
    da72:	f017 f95f 	bl	24d34 <net_buf_simple_add_u8>
	if (info->ctl) {
    da76:	f994 3007 	ldrsb.w	r3, [r4, #7]
    da7a:	79e1      	ldrb	r1, [r4, #7]
    da7c:	2b00      	cmp	r3, #0
		net_buf_add_u8(buf, info->ttl | 0x80);
    da7e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    da82:	bfb8      	it	lt
    da84:	f041 0180 	orrlt.w	r1, r1, #128	; 0x80
    da88:	4628      	mov	r0, r5
    da8a:	f017 f953 	bl	24d34 <net_buf_simple_add_u8>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    da8e:	2203      	movs	r2, #3
    da90:	1d21      	adds	r1, r4, #4
    da92:	4628      	mov	r0, r5
    da94:	f017 f945 	bl	24d22 <net_buf_simple_add_mem>
	net_buf_simple_add_be16(&buf->b, val);
    da98:	8821      	ldrh	r1, [r4, #0]
    da9a:	4628      	mov	r0, r5
    da9c:	f017 f95c 	bl	24d58 <net_buf_simple_add_be16>
    daa0:	8861      	ldrh	r1, [r4, #2]
    daa2:	4628      	mov	r0, r5
    daa4:	f017 f958 	bl	24d58 <net_buf_simple_add_be16>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    daa8:	88ba      	ldrh	r2, [r7, #4]
    daaa:	6839      	ldr	r1, [r7, #0]
    daac:	4628      	mov	r0, r5
    daae:	f017 f938 	bl	24d22 <net_buf_simple_add_mem>
}
    dab2:	4630      	mov	r0, r6
    dab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    dab6:	bf00      	nop
    dab8:	20001040 	.word	0x20001040
    dabc:	20003fa8 	.word	0x20003fa8

0000dac0 <encode_friend_ctl>:
{
    dac0:	b530      	push	{r4, r5, lr}
    dac2:	4605      	mov	r5, r0
    dac4:	b085      	sub	sp, #20
	net_buf_simple_push_u8(sdu, TRANS_CTL_HDR(ctl_op, 0));
    dac6:	4610      	mov	r0, r2
{
    dac8:	4614      	mov	r4, r2
	net_buf_simple_push_u8(sdu, TRANS_CTL_HDR(ctl_op, 0));
    daca:	f017 f986 	bl	24dda <net_buf_simple_push_u8>
	info.src = bt_mesh_primary_addr();
    dace:	f7ff fb0b 	bl	d0e8 <bt_mesh_primary_addr>
	info.dst = frnd->lpn;
    dad2:	882b      	ldrh	r3, [r5, #0]
	info.src = bt_mesh_primary_addr();
    dad4:	f8ad 0004 	strh.w	r0, [sp, #4]
	info.dst = frnd->lpn;
    dad8:	f8ad 3006 	strh.w	r3, [sp, #6]
	memset(info.seq, 0, sizeof(info.seq));
    dadc:	2203      	movs	r2, #3
	info.ttl = 0U;
    dade:	2380      	movs	r3, #128	; 0x80
	memset(info.seq, 0, sizeof(info.seq));
    dae0:	2100      	movs	r1, #0
    dae2:	a802      	add	r0, sp, #8
	info.ttl = 0U;
    dae4:	f88d 300b 	strb.w	r3, [sp, #11]
	memset(info.seq, 0, sizeof(info.seq));
    dae8:	f010 faae 	bl	1e048 <memset>
	info.iv_index = BT_MESH_NET_IVI_TX;
    daec:	4a08      	ldr	r2, [pc, #32]	; (db10 <encode_friend_ctl+0x50>)
    daee:	6813      	ldr	r3, [r2, #0]
    daf0:	f3bf 8f5b 	dmb	ish
    daf4:	6892      	ldr	r2, [r2, #8]
    daf6:	f3bf 8f5b 	dmb	ish
    dafa:	f3c2 0280 	ubfx	r2, r2, #2, #1
    dafe:	1a9b      	subs	r3, r3, r2
	return create_friend_pdu(frnd, &info, sdu);
    db00:	4621      	mov	r1, r4
    db02:	a801      	add	r0, sp, #4
	info.iv_index = BT_MESH_NET_IVI_TX;
    db04:	9303      	str	r3, [sp, #12]
	return create_friend_pdu(frnd, &info, sdu);
    db06:	f7ff ff99 	bl	da3c <create_friend_pdu.constprop.0>
}
    db0a:	b005      	add	sp, #20
    db0c:	bd30      	pop	{r4, r5, pc}
    db0e:	bf00      	nop
    db10:	20001728 	.word	0x20001728

0000db14 <enqueue_update.constprop.0>:
static void enqueue_update(struct bt_mesh_friend *frnd, uint8_t md)
    db14:	b530      	push	{r4, r5, lr}
    db16:	b087      	sub	sp, #28
	NET_BUF_SIMPLE_DEFINE(sdu, 1 + sizeof(*upd));
    db18:	ab01      	add	r3, sp, #4
    db1a:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
static void enqueue_update(struct bt_mesh_friend *frnd, uint8_t md)
    db1e:	4604      	mov	r4, r0
	net_buf_simple_reserve(&sdu, 1);
    db20:	2101      	movs	r1, #1
    db22:	a803      	add	r0, sp, #12
	NET_BUF_SIMPLE_DEFINE(sdu, 1 + sizeof(*upd));
    db24:	e9cd 2304 	strd	r2, r3, [sp, #16]
    db28:	9303      	str	r3, [sp, #12]
	net_buf_simple_reserve(&sdu, 1);
    db2a:	f017 f88e 	bl	24c4a <net_buf_simple_reserve>
	upd = net_buf_simple_add(&sdu, sizeof(*upd));
    db2e:	2106      	movs	r1, #6
    db30:	a803      	add	r0, sp, #12
    db32:	f017 f8f0 	bl	24d16 <net_buf_simple_add>
    db36:	4605      	mov	r5, r0
	upd->flags = bt_mesh_net_flags(frnd->subnet);
    db38:	6920      	ldr	r0, [r4, #16]
    db3a:	f7fd fb95 	bl	b268 <bt_mesh_net_flags>
    db3e:	4b0d      	ldr	r3, [pc, #52]	; (db74 <enqueue_update.constprop.0+0x60>)
    db40:	7028      	strb	r0, [r5, #0]
	upd->iv_index = sys_cpu_to_be32(bt_mesh.iv_index);
    db42:	681b      	ldr	r3, [r3, #0]
    db44:	ba1b      	rev	r3, r3
    db46:	f8c5 3001 	str.w	r3, [r5, #1]
	upd->md = md;
    db4a:	2300      	movs	r3, #0
	return encode_friend_ctl(frnd, TRANS_CTL_OP_FRIEND_UPDATE, &sdu);
    db4c:	2102      	movs	r1, #2
	upd->md = md;
    db4e:	716b      	strb	r3, [r5, #5]
	return encode_friend_ctl(frnd, TRANS_CTL_OP_FRIEND_UPDATE, &sdu);
    db50:	aa03      	add	r2, sp, #12
    db52:	4620      	mov	r0, r4
    db54:	f7ff ffb4 	bl	dac0 <encode_friend_ctl>
	if (!buf) {
    db58:	4601      	mov	r1, r0
    db5a:	b140      	cbz	r0, db6e <enqueue_update.constprop.0+0x5a>
	net_buf_slist_put(&frnd->queue, buf);
    db5c:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    db60:	f017 f877 	bl	24c52 <net_buf_slist_put>
	frnd->queue_size++;
    db64:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
    db68:	3301      	adds	r3, #1
    db6a:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
}
    db6e:	b007      	add	sp, #28
    db70:	bd30      	pop	{r4, r5, pc}
    db72:	bf00      	nop
    db74:	20001728 	.word	0x20001728

0000db78 <subnet_evt>:
	bt_mesh_adv_send(buf, &buf_sent_cb, frnd);
	net_buf_unref(buf);
}

static void subnet_evt(struct bt_mesh_subnet *sub, enum bt_mesh_key_evt evt)
{
    db78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    db7c:	4607      	mov	r7, r0
	int i, err;

	if (evt == BT_MESH_KEY_ADDED) {
    db7e:	b369      	cbz	r1, dbdc <subnet_evt+0x64>
    db80:	4c1f      	ldr	r4, [pc, #124]	; (dc00 <subnet_evt+0x88>)
    db82:	f04f 0802 	mov.w	r8, #2

		if (frnd->subnet != sub) {
			continue;
		}

		switch (evt) {
    db86:	1e4d      	subs	r5, r1, #1
		if (frnd->subnet != sub) {
    db88:	f854 3c25 	ldr.w	r3, [r4, #-37]
    db8c:	429f      	cmp	r7, r3
    db8e:	d120      	bne.n	dbd2 <subnet_evt+0x5a>
    db90:	f1a4 0635 	sub.w	r6, r4, #53	; 0x35
		switch (evt) {
    db94:	2d03      	cmp	r5, #3
    db96:	d81c      	bhi.n	dbd2 <subnet_evt+0x5a>
    db98:	e8df f005 	tbb	[pc, r5]
    db9c:	232e0518 	.word	0x232e0518
    dba0:	f04f 0801 	mov.w	r8, #1
    dba4:	e7f0      	b.n	db88 <subnet_evt+0x10>
	return bt_mesh_friend_cred_create(&frnd->cred[idx], frnd->lpn,
    dba6:	f834 9c35 	ldrh.w	r9, [r4, #-53]
    dbaa:	f7ff fa9d 	bl	d0e8 <bt_mesh_primary_addr>
					  frnd->subnet->keys[idx].net);
    dbae:	f854 3c25 	ldr.w	r3, [r4, #-37]
    dbb2:	3387      	adds	r3, #135	; 0x87
	return bt_mesh_friend_cred_create(&frnd->cred[idx], frnd->lpn,
    dbb4:	9301      	str	r3, [sp, #4]
    dbb6:	f834 3c29 	ldrh.w	r3, [r4, #-41]
    dbba:	9300      	str	r3, [sp, #0]
    dbbc:	4602      	mov	r2, r0
    dbbe:	f834 3c2b 	ldrh.w	r3, [r4, #-43]
    dbc2:	4649      	mov	r1, r9
    dbc4:	4620      	mov	r0, r4
    dbc6:	f012 fd3a 	bl	2063e <bt_mesh_friend_cred_create>
			friend_clear(frnd);
			break;
		case BT_MESH_KEY_UPDATED:
			BT_DBG("Generating new keys for 0x%04x", frnd->lpn);
			err = friend_cred_create(frnd, 1);
			if (err) {
    dbca:	b110      	cbz	r0, dbd2 <subnet_evt+0x5a>
				BT_ERR("Failed updating friend cred for 0x%04x",
				       frnd->lpn);
				friend_clear(frnd);
    dbcc:	4630      	mov	r0, r6
    dbce:	f7ff fef1 	bl	d9b4 <friend_clear>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
    dbd2:	f1b8 0f01 	cmp.w	r8, #1
    dbd6:	f104 04e8 	add.w	r4, r4, #232	; 0xe8
    dbda:	d1e1      	bne.n	dba0 <subnet_evt+0x28>
			break;
		default:
			break;
		}
	}
}
    dbdc:	b003      	add	sp, #12
    dbde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			memcpy(&frnd->cred[0], &frnd->cred[1],
    dbe2:	2221      	movs	r2, #33	; 0x21
    dbe4:	4621      	mov	r1, r4
    dbe6:	f1a4 0021 	sub.w	r0, r4, #33	; 0x21
    dbea:	f010 fa22 	bl	1e032 <memcpy>
			memset(&frnd->cred[1], 0, sizeof(frnd->cred[1]));
    dbee:	2221      	movs	r2, #33	; 0x21
    dbf0:	2100      	movs	r1, #0
    dbf2:	4620      	mov	r0, r4
    dbf4:	f010 fa28 	bl	1e048 <memset>
			enqueue_update(frnd, 0);
    dbf8:	4630      	mov	r0, r6
    dbfa:	f7ff ff8b 	bl	db14 <enqueue_update.constprop.0>
			break;
    dbfe:	e7e8      	b.n	dbd2 <subnet_evt+0x5a>
    dc00:	20001785 	.word	0x20001785

0000dc04 <encrypt_friend_pdu>:
{
    dc04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		cred = &frnd->subnet->keys[SUBNET_KEY_TX_IDX(frnd->subnet)]
    dc08:	6903      	ldr	r3, [r0, #16]
    dc0a:	7f9c      	ldrb	r4, [r3, #30]
{
    dc0c:	460d      	mov	r5, r1
		cred = &frnd->subnet->keys[SUBNET_KEY_TX_IDX(frnd->subnet)]
    dc0e:	1ea1      	subs	r1, r4, #2
    dc10:	424c      	negs	r4, r1
{
    dc12:	b092      	sub	sp, #72	; 0x48
    dc14:	4680      	mov	r8, r0
		cred = &frnd->subnet->keys[SUBNET_KEY_TX_IDX(frnd->subnet)]
    dc16:	414c      	adcs	r4, r1
	if (flooding_cred) {
    dc18:	2a00      	cmp	r2, #0
    dc1a:	d063      	beq.n	dce4 <encrypt_friend_pdu+0xe0>
		cred = &frnd->subnet->keys[SUBNET_KEY_TX_IDX(frnd->subnet)]
    dc1c:	225a      	movs	r2, #90	; 0x5a
    dc1e:	fb02 3404 	mla	r4, r2, r4, r3
    dc22:	343d      	adds	r4, #61	; 0x3d
	if (bt_mesh_has_addr(src)) {
    dc24:	462f      	mov	r7, r5
    dc26:	f857 3f08 	ldr.w	r3, [r7, #8]!
    dc2a:	f8b3 0005 	ldrh.w	r0, [r3, #5]
    dc2e:	ba40      	rev16	r0, r0
    dc30:	b280      	uxth	r0, r0
    dc32:	f7ff fa73 	bl	d11c <bt_mesh_has_addr>
    dc36:	2800      	cmp	r0, #0
    dc38:	f000 80c1 	beq.w	ddbe <encrypt_friend_pdu+0x1ba>
		if (FRIEND_ADV(buf)->app_idx != BT_MESH_KEY_UNUSED) {
    dc3c:	696b      	ldr	r3, [r5, #20]
    dc3e:	881e      	ldrh	r6, [r3, #0]
    dc40:	f64f 73ff 	movw	r3, #65535	; 0xffff
    dc44:	429e      	cmp	r6, r3
    dc46:	f000 8093 	beq.w	dd70 <encrypt_friend_pdu+0x16c>
	err = unseg_app_sdu_unpack(frnd, buf, &meta);
    dc4a:	f8d8 8010 	ldr.w	r8, [r8, #16]
	struct bt_mesh_net_rx net = {
    dc4e:	2218      	movs	r2, #24
    dc50:	2100      	movs	r1, #0
    dc52:	a804      	add	r0, sp, #16
    dc54:	f010 f9f8 	bl	1e048 <memset>
    dc58:	f8b8 301c 	ldrh.w	r3, [r8, #28]
    dc5c:	f8ad 3014 	strh.w	r3, [sp, #20]
	bt_mesh_net_header_parse(&buf->b, &net);
    dc60:	a904      	add	r1, sp, #16
    dc62:	4638      	mov	r0, r7
	struct bt_mesh_net_rx net = {
    dc64:	f8ad 6016 	strh.w	r6, [sp, #22]
	meta->subnet = frnd->subnet;
    dc68:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
	bt_mesh_net_header_parse(&buf->b, &net);
    dc6c:	f7fd f8c6 	bl	adfc <bt_mesh_net_header_parse>
	err = bt_mesh_keys_resolve(&net.ctx, &net.sub, &meta->key, &meta->aid);
    dc70:	ab11      	add	r3, sp, #68	; 0x44
    dc72:	aa0f      	add	r2, sp, #60	; 0x3c
    dc74:	a904      	add	r1, sp, #16
    dc76:	a805      	add	r0, sp, #20
    dc78:	f7fd fcfe 	bl	b678 <bt_mesh_keys_resolve>
	if (err) {
    dc7c:	bb78      	cbnz	r0, dcde <encrypt_friend_pdu+0xda>
	meta->crypto.src = net.ctx.addr;
    dc7e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    dc82:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	meta->crypto.iv_index = BT_MESH_NET_IVI_TX;
    dc86:	f8df 8160 	ldr.w	r8, [pc, #352]	; dde8 <encrypt_friend_pdu+0x1e4>
	meta->crypto.dst = net.ctx.recv_dst;
    dc8a:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    dc8e:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
	meta->crypto.iv_index = BT_MESH_NET_IVI_TX;
    dc92:	f8d8 3000 	ldr.w	r3, [r8]
    dc96:	f3bf 8f5b 	dmb	ish
    dc9a:	f8d8 2008 	ldr.w	r2, [r8, #8]
    dc9e:	f3bf 8f5b 	dmb	ish
    dca2:	f3c2 0280 	ubfx	r2, r2, #2, #1
    dca6:	1a9b      	subs	r3, r3, r2
    dca8:	930d      	str	r3, [sp, #52]	; 0x34
	meta->crypto.seq_num = net.seq;
    dcaa:	9b08      	ldr	r3, [sp, #32]
    dcac:	930c      	str	r3, [sp, #48]	; 0x30
	meta->crypto.dev_key = BT_MESH_IS_DEV_KEY(app_idx);
    dcae:	3603      	adds	r6, #3
	if (BT_MESH_ADDR_IS_VIRTUAL(meta->crypto.dst)) {
    dcb0:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
	meta->crypto.aszmic = 0;
    dcb4:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
	meta->crypto.dev_key = BT_MESH_IS_DEV_KEY(app_idx);
    dcb8:	b2b6      	uxth	r6, r6
    dcba:	2e01      	cmp	r6, #1
	if (BT_MESH_ADDR_IS_VIRTUAL(meta->crypto.dst)) {
    dcbc:	f483 4200 	eor.w	r2, r3, #32768	; 0x8000
	meta->crypto.dev_key = BT_MESH_IS_DEV_KEY(app_idx);
    dcc0:	bf8c      	ite	hi
    dcc2:	2600      	movhi	r6, #0
    dcc4:	2601      	movls	r6, #1
	if (BT_MESH_ADDR_IS_VIRTUAL(meta->crypto.dst)) {
    dcc6:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	meta->crypto.dev_key = BT_MESH_IS_DEV_KEY(app_idx);
    dcca:	f88d 6028 	strb.w	r6, [sp, #40]	; 0x28
	if (BT_MESH_ADDR_IS_VIRTUAL(meta->crypto.dst)) {
    dcce:	d20e      	bcs.n	dcee <encrypt_friend_pdu+0xea>
		meta->crypto.ad = bt_mesh_va_label_get(meta->crypto.dst);
    dcd0:	4618      	mov	r0, r3
    dcd2:	f7fe f979 	bl	bfc8 <bt_mesh_va_label_get>
    dcd6:	900e      	str	r0, [sp, #56]	; 0x38
		if (!meta->crypto.ad) {
    dcd8:	b950      	cbnz	r0, dcf0 <encrypt_friend_pdu+0xec>
			return -ENOENT;
    dcda:	f06f 0001 	mvn.w	r0, #1
}
    dcde:	b012      	add	sp, #72	; 0x48
    dce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cred = &frnd->cred[SUBNET_KEY_TX_IDX(frnd->subnet)];
    dce4:	eb04 1444 	add.w	r4, r4, r4, lsl #5
    dce8:	3414      	adds	r4, #20
    dcea:	4404      	add	r4, r0
    dcec:	e79a      	b.n	dc24 <encrypt_friend_pdu+0x20>
		meta->crypto.ad = NULL;
    dcee:	900e      	str	r0, [sp, #56]	; 0x38
	if (meta.crypto.seq_num == bt_mesh.seq) {
    dcf0:	f8d8 3004 	ldr.w	r3, [r8, #4]
    dcf4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    dcf6:	429a      	cmp	r2, r3
    dcf8:	d03a      	beq.n	dd70 <encrypt_friend_pdu+0x16c>
	net_buf_simple_clone(&buf->b, &in);
    dcfa:	a901      	add	r1, sp, #4
    dcfc:	4638      	mov	r0, r7
    dcfe:	f017 f804 	bl	24d0a <net_buf_simple_clone>
	net_buf_simple_pull(&in, BT_MESH_NET_HDR_LEN);
    dd02:	2109      	movs	r1, #9
    dd04:	a801      	add	r0, sp, #4
    dd06:	f017 f881 	bl	24e0c <net_buf_simple_pull>
	net_buf_simple_pull(&in, 1);
    dd0a:	2101      	movs	r1, #1
    dd0c:	a801      	add	r0, sp, #4
    dd0e:	f017 f87d 	bl	24e0c <net_buf_simple_pull>
	in.len -= BT_MESH_MIC_SHORT;
    dd12:	f8bd 3008 	ldrh.w	r3, [sp, #8]
	net_buf_simple_clone(&in, &out);
    dd16:	a904      	add	r1, sp, #16
	in.len -= BT_MESH_MIC_SHORT;
    dd18:	3b04      	subs	r3, #4
	net_buf_simple_clone(&in, &out);
    dd1a:	a801      	add	r0, sp, #4
	in.len -= BT_MESH_MIC_SHORT;
    dd1c:	f8ad 3008 	strh.w	r3, [sp, #8]
	net_buf_simple_clone(&in, &out);
    dd20:	f016 fff3 	bl	24d0a <net_buf_simple_clone>
	out.len = 0; /* length will be set by decrypt */
    dd24:	2300      	movs	r3, #0
    dd26:	f8ad 3014 	strh.w	r3, [sp, #20]
	return bt_mesh_app_decrypt(meta->key, &meta->crypto, &in, &out);
    dd2a:	980f      	ldr	r0, [sp, #60]	; 0x3c
    dd2c:	ab04      	add	r3, sp, #16
    dd2e:	aa01      	add	r2, sp, #4
    dd30:	a90a      	add	r1, sp, #40	; 0x28
    dd32:	f013 f9ae 	bl	21092 <bt_mesh_app_decrypt>
	if (err) {
    dd36:	2800      	cmp	r0, #0
    dd38:	d1d1      	bne.n	dcde <encrypt_friend_pdu+0xda>
	meta.crypto.seq_num = bt_mesh.seq;
    dd3a:	f8d8 3004 	ldr.w	r3, [r8, #4]
    dd3e:	930c      	str	r3, [sp, #48]	; 0x30
	net_buf_simple_clone(&buf->b, &sdu);
    dd40:	a904      	add	r1, sp, #16
    dd42:	4638      	mov	r0, r7
    dd44:	f016 ffe1 	bl	24d0a <net_buf_simple_clone>
	net_buf_simple_pull(&sdu, BT_MESH_NET_HDR_LEN);
    dd48:	2109      	movs	r1, #9
    dd4a:	a804      	add	r0, sp, #16
    dd4c:	f017 f85e 	bl	24e0c <net_buf_simple_pull>
	net_buf_simple_pull(&sdu, 1);
    dd50:	2101      	movs	r1, #1
    dd52:	a804      	add	r0, sp, #16
    dd54:	f017 f85a 	bl	24e0c <net_buf_simple_pull>
	sdu.len -= BT_MESH_MIC_SHORT;
    dd58:	f8bd 3014 	ldrh.w	r3, [sp, #20]
	return bt_mesh_app_encrypt(meta->key, &meta->crypto, &sdu);
    dd5c:	980f      	ldr	r0, [sp, #60]	; 0x3c
	sdu.len -= BT_MESH_MIC_SHORT;
    dd5e:	3b04      	subs	r3, #4
	return bt_mesh_app_encrypt(meta->key, &meta->crypto, &sdu);
    dd60:	aa04      	add	r2, sp, #16
    dd62:	a90a      	add	r1, sp, #40	; 0x28
	sdu.len -= BT_MESH_MIC_SHORT;
    dd64:	f8ad 3014 	strh.w	r3, [sp, #20]
	return bt_mesh_app_encrypt(meta->key, &meta->crypto, &sdu);
    dd68:	f013 f96a 	bl	21040 <bt_mesh_app_encrypt>
			if (err) {
    dd6c:	2800      	cmp	r0, #0
    dd6e:	d1b6      	bne.n	dcde <encrypt_friend_pdu+0xda>
		seq = bt_mesh_next_seq();
    dd70:	f7fc fedc 	bl	ab2c <bt_mesh_next_seq>
		sys_put_be24(seq, &buf->data[2]);
    dd74:	68ab      	ldr	r3, [r5, #8]
	dst[0] = val >> 16;
    dd76:	0c02      	lsrs	r2, r0, #16
    dd78:	709a      	strb	r2, [r3, #2]
	dst[1] = val;
    dd7a:	7118      	strb	r0, [r3, #4]
	dst[0] = val >> 8;
    dd7c:	f3c0 2207 	ubfx	r2, r0, #8, #8
		iv_index = BT_MESH_NET_IVI_TX;
    dd80:	4819      	ldr	r0, [pc, #100]	; (dde8 <encrypt_friend_pdu+0x1e4>)
    dd82:	70da      	strb	r2, [r3, #3]
    dd84:	6806      	ldr	r6, [r0, #0]
    dd86:	f3bf 8f5b 	dmb	ish
    dd8a:	6883      	ldr	r3, [r0, #8]
    dd8c:	f3bf 8f5b 	dmb	ish
    dd90:	f3c3 0380 	ubfx	r3, r3, #2, #1
    dd94:	1af6      	subs	r6, r6, r3
		FRIEND_ADV(buf)->app_idx = BT_MESH_KEY_UNUSED;
    dd96:	696b      	ldr	r3, [r5, #20]
    dd98:	f64f 72ff 	movw	r2, #65535	; 0xffff
    dd9c:	801a      	strh	r2, [r3, #0]
	buf->data[0] = (cred->nid | (iv_index & 1) << 7);
    dd9e:	4620      	mov	r0, r4
    dda0:	68aa      	ldr	r2, [r5, #8]
    dda2:	f810 3b01 	ldrb.w	r3, [r0], #1
    dda6:	ea43 13c6 	orr.w	r3, r3, r6, lsl #7
    ddaa:	7013      	strb	r3, [r2, #0]
	if (bt_mesh_net_encrypt(cred->enc, &buf->b, iv_index, false)) {
    ddac:	4639      	mov	r1, r7
    ddae:	2300      	movs	r3, #0
    ddb0:	4632      	mov	r2, r6
    ddb2:	f013 f8b1 	bl	20f18 <bt_mesh_net_encrypt>
    ddb6:	b160      	cbz	r0, ddd2 <encrypt_friend_pdu+0x1ce>
		return -EINVAL;
    ddb8:	f06f 0015 	mvn.w	r0, #21
    ddbc:	e78f      	b.n	dcde <encrypt_friend_pdu+0xda>
		iv_index = (bt_mesh.iv_index - ((bt_mesh.iv_index & 1) != ivi));
    ddbe:	4b0a      	ldr	r3, [pc, #40]	; (dde8 <encrypt_friend_pdu+0x1e4>)
    ddc0:	681e      	ldr	r6, [r3, #0]
		uint8_t ivi = (buf->data[0] >> 7);
    ddc2:	68ab      	ldr	r3, [r5, #8]
    ddc4:	781a      	ldrb	r2, [r3, #0]
		iv_index = (bt_mesh.iv_index - ((bt_mesh.iv_index & 1) != ivi));
    ddc6:	f006 0301 	and.w	r3, r6, #1
    ddca:	ea83 13d2 	eor.w	r3, r3, r2, lsr #7
    ddce:	1af6      	subs	r6, r6, r3
    ddd0:	e7e5      	b.n	dd9e <encrypt_friend_pdu+0x19a>
	if (bt_mesh_net_obfuscate(buf->data, iv_index, cred->privacy)) {
    ddd2:	68a8      	ldr	r0, [r5, #8]
    ddd4:	f104 0211 	add.w	r2, r4, #17
    ddd8:	4631      	mov	r1, r6
    ddda:	f7fe ff95 	bl	cd08 <bt_mesh_net_obfuscate>
    ddde:	2800      	cmp	r0, #0
    dde0:	f43f af7d 	beq.w	dcde <encrypt_friend_pdu+0xda>
    dde4:	e7e8      	b.n	ddb8 <encrypt_friend_pdu+0x1b4>
    dde6:	bf00      	nop
    dde8:	20001728 	.word	0x20001728

0000ddec <friend_timeout>:
	if (!friend_is_allocated(frnd)) {
    ddec:	f850 3c50 	ldr.w	r3, [r0, #-80]
{
    ddf0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    ddf4:	4604      	mov	r4, r0
	struct bt_mesh_friend *frnd = CONTAINER_OF(dwork, struct bt_mesh_friend,
    ddf6:	f1a0 0660 	sub.w	r6, r0, #96	; 0x60
	if (!friend_is_allocated(frnd)) {
    ddfa:	2b00      	cmp	r3, #0
    ddfc:	f000 8089 	beq.w	df12 <friend_timeout+0x126>
	if (frnd->send_last && frnd->last) {
    de00:	f810 3c5d 	ldrb.w	r3, [r0, #-93]
    de04:	079a      	lsls	r2, r3, #30
    de06:	d52a      	bpl.n	de5e <friend_timeout+0x72>
    de08:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    de0a:	b342      	cbz	r2, de5e <friend_timeout+0x72>
		frnd->send_last = 0U;
    de0c:	f36f 0341 	bfc	r3, #1, #1
    de10:	f800 3c5d 	strb.w	r3, [r0, #-93]
				 FRIEND_XMIT, K_NO_WAIT);
    de14:	2200      	movs	r2, #0
    de16:	2300      	movs	r3, #0
	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA, BT_MESH_LOCAL_ADV,
    de18:	2101      	movs	r1, #1
    de1a:	e9cd 2300 	strd	r2, r3, [sp]
    de1e:	4608      	mov	r0, r1
    de20:	2208      	movs	r2, #8
    de22:	f7fc fa3d 	bl	a2a0 <bt_mesh_adv_create>
	if (!buf) {
    de26:	4605      	mov	r5, r0
    de28:	2800      	cmp	r0, #0
    de2a:	d072      	beq.n	df12 <friend_timeout+0x126>
	net_buf_add_mem(buf, frnd->last->data, frnd->last->len);
    de2c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    de2e:	3008      	adds	r0, #8
    de30:	899a      	ldrh	r2, [r3, #12]
    de32:	6899      	ldr	r1, [r3, #8]
    de34:	f016 ff75 	bl	24d22 <net_buf_simple_add_mem>
	frnd->pending_req = 0U;
    de38:	f814 3c5d 	ldrb.w	r3, [r4, #-93]
	bt_mesh_adv_send(buf, &buf_sent_cb, frnd);
    de3c:	4936      	ldr	r1, [pc, #216]	; (df18 <friend_timeout+0x12c>)
	frnd->pending_buf = 1U;
    de3e:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    de42:	f043 0308 	orr.w	r3, r3, #8
	bt_mesh_adv_send(buf, &buf_sent_cb, frnd);
    de46:	4628      	mov	r0, r5
	frnd->pending_buf = 1U;
    de48:	f804 3c5d 	strb.w	r3, [r4, #-93]
	bt_mesh_adv_send(buf, &buf_sent_cb, frnd);
    de4c:	4632      	mov	r2, r6
    de4e:	f7fc fa6f 	bl	a330 <bt_mesh_adv_send>
	net_buf_unref(buf);
    de52:	4628      	mov	r0, r5
}
    de54:	b002      	add	sp, #8
    de56:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	net_buf_unref(buf);
    de5a:	f009 b90d 	b.w	17078 <net_buf_unref>
	if (frnd->established && !frnd->pending_req) {
    de5e:	f003 0314 	and.w	r3, r3, #20
    de62:	2b10      	cmp	r3, #16
    de64:	d105      	bne.n	de72 <friend_timeout+0x86>
		friend_clear(frnd);
    de66:	4630      	mov	r0, r6
}
    de68:	b002      	add	sp, #8
    de6a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		friend_clear(frnd);
    de6e:	f7ff bda1 	b.w	d9b4 <friend_clear>
	return list->head;
    de72:	6c25      	ldr	r5, [r4, #64]	; 0x40
Z_GENLIST_GET(slist, snode)
    de74:	b90d      	cbnz	r5, de7a <friend_timeout+0x8e>
	frnd->last = (void *)sys_slist_get(&frnd->queue);
    de76:	63e5      	str	r5, [r4, #60]	; 0x3c
    de78:	e7f5      	b.n	de66 <friend_timeout+0x7a>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    de7a:	6c63      	ldr	r3, [r4, #68]	; 0x44
	return node->next;
    de7c:	f8d5 8000 	ldr.w	r8, [r5]
	list->head = node;
    de80:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    de84:	429d      	cmp	r5, r3
	if (buf->len != 16) {
    de86:	89ab      	ldrh	r3, [r5, #12]
	list->tail = node;
    de88:	bf08      	it	eq
    de8a:	f8c4 8044 	streq.w	r8, [r4, #68]	; 0x44
    de8e:	2b10      	cmp	r3, #16
	frnd->last = (void *)sys_slist_get(&frnd->queue);
    de90:	63e5      	str	r5, [r4, #60]	; 0x3c
	if (buf->len != 16) {
    de92:	d12e      	bne.n	def2 <friend_timeout+0x106>
	net_buf_simple_save(&buf->b, &state);
    de94:	f105 0908 	add.w	r9, r5, #8
	state->offset = net_buf_simple_headroom(buf);
    de98:	4648      	mov	r0, r9
    de9a:	f016 fff2 	bl	24e82 <net_buf_simple_headroom>
	net_buf_skip(buf, 1); /* skip IVI, NID */
    de9e:	2101      	movs	r1, #1
    dea0:	4607      	mov	r7, r0
    dea2:	4628      	mov	r0, r5
	state->len = buf->len;
    dea4:	f8b5 a00c 	ldrh.w	sl, [r5, #12]
    dea8:	f015 f878 	bl	22f9c <net_buf_skip.isra.0>
	return net_buf_simple_pull_u8(&buf->b);
    deac:	4648      	mov	r0, r9
    deae:	f016 ffbd 	bl	24e2c <net_buf_simple_pull_u8>
	if (!(net_buf_pull_u8(buf) >> 7)) {
    deb2:	0603      	lsls	r3, r0, #24
    deb4:	d517      	bpl.n	dee6 <friend_timeout+0xfa>
	net_buf_skip(buf, 7); /* skip seqnum src dec*/
    deb6:	2107      	movs	r1, #7
    deb8:	4628      	mov	r0, r5
    deba:	f015 f86f 	bl	22f9c <net_buf_skip.isra.0>
	return net_buf_simple_pull_mem(&buf->b, len);
    debe:	2101      	movs	r1, #1
    dec0:	4648      	mov	r0, r9
    dec2:	f016 ffab 	bl	24e1c <net_buf_simple_pull_mem>
	if (TRANS_CTL_OP((uint8_t *) net_buf_pull_mem(buf, 1))
    dec6:	7803      	ldrb	r3, [r0, #0]
    dec8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    decc:	2b02      	cmp	r3, #2
    dece:	d10a      	bne.n	dee6 <friend_timeout+0xfa>
    ded0:	2106      	movs	r1, #6
    ded2:	4648      	mov	r0, r9
    ded4:	f016 ffa2 	bl	24e1c <net_buf_simple_pull_mem>
	md = (uint8_t)(sys_slist_peek_head(&frnd->queue) != NULL);
    ded8:	f1b8 0800 	subs.w	r8, r8, #0
    dedc:	bf18      	it	ne
    dede:	f04f 0801 	movne.w	r8, #1
    dee2:	f880 8005 	strb.w	r8, [r0, #5]
	buf->data = buf->__buf + state->offset;
    dee6:	6928      	ldr	r0, [r5, #16]
	buf->len = state->len;
    dee8:	f8a5 a00c 	strh.w	sl, [r5, #12]
	buf->data = buf->__buf + state->offset;
    deec:	fa10 f787 	uxtah	r7, r0, r7
    def0:	60af      	str	r7, [r5, #8]
	if (encrypt_friend_pdu(frnd, frnd->last, false)) {
    def2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    def4:	2200      	movs	r2, #0
    def6:	4630      	mov	r0, r6
    def8:	f7ff fe84 	bl	dc04 <encrypt_friend_pdu>
    defc:	b948      	cbnz	r0, df12 <friend_timeout+0x126>
	frnd->last->flags &= ~NET_BUF_FRAGS;
    defe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    df00:	795a      	ldrb	r2, [r3, #5]
	frnd->last->frags = NULL;
    df02:	6018      	str	r0, [r3, #0]
	frnd->last->flags &= ~NET_BUF_FRAGS;
    df04:	f022 0201 	bic.w	r2, r2, #1
    df08:	715a      	strb	r2, [r3, #5]
	frnd->queue_size--;
    df0a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    df0c:	3b01      	subs	r3, #1
    df0e:	64a3      	str	r3, [r4, #72]	; 0x48
    df10:	e780      	b.n	de14 <friend_timeout+0x28>
}
    df12:	b002      	add	sp, #8
    df14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    df18:	00026f34 	.word	0x00026f34

0000df1c <bt_mesh_friend_find>:
{
    df1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    df20:	4c16      	ldr	r4, [pc, #88]	; (df7c <bt_mesh_friend_find+0x60>)
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
    df22:	2500      	movs	r5, #0
    df24:	46a4      	mov	ip, r4
		if (net_idx != BT_MESH_KEY_ANY &&
    df26:	f64f 7eff 	movw	lr, #65535	; 0xffff
		if (established && !frnd->established) {
    df2a:	f04f 08e8 	mov.w	r8, #232	; 0xe8
		if (valid && !friend_is_allocated(frnd)) {
    df2e:	b10a      	cbz	r2, df34 <bt_mesh_friend_find+0x18>
    df30:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    df32:	b1f6      	cbz	r6, df72 <bt_mesh_friend_find+0x56>
		if (established && !frnd->established) {
    df34:	b12b      	cbz	r3, df42 <bt_mesh_friend_find+0x26>
    df36:	fb08 c605 	mla	r6, r8, r5, ip
    df3a:	f896 602b 	ldrb.w	r6, [r6, #43]	; 0x2b
    df3e:	06f6      	lsls	r6, r6, #27
    df40:	d517      	bpl.n	df72 <bt_mesh_friend_find+0x56>
		if (net_idx != BT_MESH_KEY_ANY &&
    df42:	4570      	cmp	r0, lr
    df44:	d004      	beq.n	df50 <bt_mesh_friend_find+0x34>
		    (!frnd->subnet || frnd->subnet->net_idx != net_idx)) {
    df46:	6ba6      	ldr	r6, [r4, #56]	; 0x38
		if (net_idx != BT_MESH_KEY_ANY &&
    df48:	b19e      	cbz	r6, df72 <bt_mesh_friend_find+0x56>
		    (!frnd->subnet || frnd->subnet->net_idx != net_idx)) {
    df4a:	8bb6      	ldrh	r6, [r6, #28]
    df4c:	4286      	cmp	r6, r0
    df4e:	d110      	bne.n	df72 <bt_mesh_friend_find+0x56>
	if (frnd->lpn == BT_MESH_ADDR_UNASSIGNED) {
    df50:	8d27      	ldrh	r7, [r4, #40]	; 0x28
    df52:	b177      	cbz	r7, df72 <bt_mesh_friend_find+0x56>
	return (addr >= frnd->lpn && addr < (frnd->lpn + frnd->num_elem));
    df54:	42b9      	cmp	r1, r7
    df56:	d30c      	bcc.n	df72 <bt_mesh_friend_find+0x56>
    df58:	f894 6030 	ldrb.w	r6, [r4, #48]	; 0x30
    df5c:	443e      	add	r6, r7
    df5e:	42b1      	cmp	r1, r6
    df60:	da07      	bge.n	df72 <bt_mesh_friend_find+0x56>
		struct bt_mesh_friend *frnd = &bt_mesh.frnd[i];
    df62:	20e8      	movs	r0, #232	; 0xe8
    df64:	fb00 c005 	mla	r0, r0, r5, ip
    df68:	3028      	adds	r0, #40	; 0x28
}
    df6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    df6e:	2501      	movs	r5, #1
    df70:	e7dd      	b.n	df2e <bt_mesh_friend_find+0x12>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
    df72:	34e8      	adds	r4, #232	; 0xe8
    df74:	2d00      	cmp	r5, #0
    df76:	d0fa      	beq.n	df6e <bt_mesh_friend_find+0x52>
	return NULL;
    df78:	2000      	movs	r0, #0
    df7a:	e7f6      	b.n	df6a <bt_mesh_friend_find+0x4e>
    df7c:	20001728 	.word	0x20001728

0000df80 <bt_mesh_friends_clear>:
{
    df80:	b510      	push	{r4, lr}
	return frnd->subnet != NULL;
    df82:	4c08      	ldr	r4, [pc, #32]	; (dfa4 <bt_mesh_friends_clear+0x24>)
		if (!friend_is_allocated(frnd)) {
    df84:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    df86:	b11b      	cbz	r3, df90 <bt_mesh_friends_clear+0x10>
		friend_clear(frnd);
    df88:	f104 0028 	add.w	r0, r4, #40	; 0x28
    df8c:	f7ff fd12 	bl	d9b4 <friend_clear>
		if (!friend_is_allocated(frnd)) {
    df90:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    df94:	b123      	cbz	r3, dfa0 <bt_mesh_friends_clear+0x20>
}
    df96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		friend_clear(frnd);
    df9a:	4803      	ldr	r0, [pc, #12]	; (dfa8 <bt_mesh_friends_clear+0x28>)
    df9c:	f7ff bd0a 	b.w	d9b4 <friend_clear>
}
    dfa0:	bd10      	pop	{r4, pc}
    dfa2:	bf00      	nop
    dfa4:	20001728 	.word	0x20001728
    dfa8:	20001838 	.word	0x20001838

0000dfac <bt_mesh_friend_sec_update>:
{
    dfac:	b538      	push	{r3, r4, r5, lr}
	return frnd->subnet != NULL;
    dfae:	4d0f      	ldr	r5, [pc, #60]	; (dfec <bt_mesh_friend_sec_update+0x40>)
    dfb0:	6bab      	ldr	r3, [r5, #56]	; 0x38
{
    dfb2:	4604      	mov	r4, r0
		if (!friend_is_allocated(frnd)) {
    dfb4:	b133      	cbz	r3, dfc4 <bt_mesh_friend_sec_update+0x18>
		if (net_idx == BT_MESH_KEY_ANY ||
    dfb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
    dfba:	4290      	cmp	r0, r2
    dfbc:	d10e      	bne.n	dfdc <bt_mesh_friend_sec_update+0x30>
			enqueue_update(frnd, 0x00);
    dfbe:	480c      	ldr	r0, [pc, #48]	; (dff0 <bt_mesh_friend_sec_update+0x44>)
    dfc0:	f7ff fda8 	bl	db14 <enqueue_update.constprop.0>
	return frnd->subnet != NULL;
    dfc4:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
		if (!friend_is_allocated(frnd)) {
    dfc8:	b17b      	cbz	r3, dfea <bt_mesh_friend_sec_update+0x3e>
		if (net_idx == BT_MESH_KEY_ANY ||
    dfca:	f64f 72ff 	movw	r2, #65535	; 0xffff
    dfce:	4294      	cmp	r4, r2
    dfd0:	d108      	bne.n	dfe4 <bt_mesh_friend_sec_update+0x38>
}
    dfd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			enqueue_update(frnd, 0x00);
    dfd6:	4807      	ldr	r0, [pc, #28]	; (dff4 <bt_mesh_friend_sec_update+0x48>)
    dfd8:	f7ff bd9c 	b.w	db14 <enqueue_update.constprop.0>
		if (net_idx == BT_MESH_KEY_ANY ||
    dfdc:	8b9b      	ldrh	r3, [r3, #28]
    dfde:	4283      	cmp	r3, r0
    dfe0:	d1f0      	bne.n	dfc4 <bt_mesh_friend_sec_update+0x18>
    dfe2:	e7ec      	b.n	dfbe <bt_mesh_friend_sec_update+0x12>
    dfe4:	8b9b      	ldrh	r3, [r3, #28]
    dfe6:	42a3      	cmp	r3, r4
    dfe8:	d0f3      	beq.n	dfd2 <bt_mesh_friend_sec_update+0x26>
}
    dfea:	bd38      	pop	{r3, r4, r5, pc}
    dfec:	20001728 	.word	0x20001728
    dff0:	20001750 	.word	0x20001750
    dff4:	20001838 	.word	0x20001838

0000dff8 <bt_mesh_friend_poll>:
{
    dff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (buf->len < sizeof(*msg)) {
    dffc:	888b      	ldrh	r3, [r1, #4]
{
    dffe:	460d      	mov	r5, r1
	if (buf->len < sizeof(*msg)) {
    e000:	2b00      	cmp	r3, #0
    e002:	d059      	beq.n	e0b8 <bt_mesh_friend_poll+0xc0>
	frnd = bt_mesh_friend_find(rx->sub->net_idx, rx->ctx.addr, true, false);
    e004:	6804      	ldr	r4, [r0, #0]
    e006:	8901      	ldrh	r1, [r0, #8]
    e008:	8ba0      	ldrh	r0, [r4, #28]
    e00a:	2300      	movs	r3, #0
    e00c:	2201      	movs	r2, #1
    e00e:	f7ff ff85 	bl	df1c <bt_mesh_friend_find>
	if (!frnd) {
    e012:	4604      	mov	r4, r0
    e014:	b918      	cbnz	r0, e01e <bt_mesh_friend_poll+0x26>
		return 0;
    e016:	2500      	movs	r5, #0
}
    e018:	4628      	mov	r0, r5
    e01a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	struct bt_mesh_ctl_friend_poll *msg = (void *)buf->data;
    e01e:	682f      	ldr	r7, [r5, #0]
	if (msg->fsn & ~1) {
    e020:	783d      	ldrb	r5, [r7, #0]
    e022:	f035 0501 	bics.w	r5, r5, #1
    e026:	d147      	bne.n	e0b8 <bt_mesh_friend_poll+0xc0>
	if (frnd->pending_buf) {
    e028:	78c3      	ldrb	r3, [r0, #3]
    e02a:	0719      	lsls	r1, r3, #28
    e02c:	d4f3      	bmi.n	e016 <bt_mesh_friend_poll+0x1e>
	friend_recv_delay(frnd);
    e02e:	f014 ff1a 	bl	22e66 <friend_recv_delay>
	STRUCT_SECTION_FOREACH(bt_mesh_friend_cb, cb) {
    e032:	4e23      	ldr	r6, [pc, #140]	; (e0c0 <bt_mesh_friend_poll+0xc8>)
    e034:	f8df 808c 	ldr.w	r8, [pc, #140]	; e0c4 <bt_mesh_friend_poll+0xcc>
    e038:	4546      	cmp	r6, r8
    e03a:	d30f      	bcc.n	e05c <bt_mesh_friend_poll+0x64>
	if (!frnd->established) {
    e03c:	78e3      	ldrb	r3, [r4, #3]
    e03e:	06da      	lsls	r2, r3, #27
    e040:	d514      	bpl.n	e06c <bt_mesh_friend_poll+0x74>
	if (msg->fsn == frnd->fsn && frnd->last) {
    e042:	78e3      	ldrb	r3, [r4, #3]
    e044:	7839      	ldrb	r1, [r7, #0]
    e046:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    e04a:	f003 0201 	and.w	r2, r3, #1
    e04e:	4291      	cmp	r1, r2
    e050:	d11f      	bne.n	e092 <bt_mesh_friend_poll+0x9a>
    e052:	b320      	cbz	r0, e09e <bt_mesh_friend_poll+0xa6>
		frnd->send_last = 1U;
    e054:	f043 0302 	orr.w	r3, r3, #2
    e058:	70e3      	strb	r3, [r4, #3]
    e05a:	e7dd      	b.n	e018 <bt_mesh_friend_poll+0x20>
		if (cb->polled) {
    e05c:	68b3      	ldr	r3, [r6, #8]
    e05e:	b11b      	cbz	r3, e068 <bt_mesh_friend_poll+0x70>
			cb->polled(frnd->subnet->net_idx, frnd->lpn);
    e060:	6922      	ldr	r2, [r4, #16]
    e062:	8821      	ldrh	r1, [r4, #0]
    e064:	8b90      	ldrh	r0, [r2, #28]
    e066:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_mesh_friend_cb, cb) {
    e068:	360c      	adds	r6, #12
    e06a:	e7e5      	b.n	e038 <bt_mesh_friend_poll+0x40>
		frnd->established = 1U;
    e06c:	f043 0310 	orr.w	r3, r3, #16
		STRUCT_SECTION_FOREACH(bt_mesh_friend_cb, cb) {
    e070:	4e13      	ldr	r6, [pc, #76]	; (e0c0 <bt_mesh_friend_poll+0xc8>)
		frnd->established = 1U;
    e072:	70e3      	strb	r3, [r4, #3]
		STRUCT_SECTION_FOREACH(bt_mesh_friend_cb, cb) {
    e074:	4546      	cmp	r6, r8
    e076:	d2e4      	bcs.n	e042 <bt_mesh_friend_poll+0x4a>
			if (cb->established) {
    e078:	f8d6 9000 	ldr.w	r9, [r6]
    e07c:	f1b9 0f00 	cmp.w	r9, #0
    e080:	d005      	beq.n	e08e <bt_mesh_friend_poll+0x96>
				cb->established(frnd->subnet->net_idx, frnd->lpn, frnd->recv_delay,
    e082:	6920      	ldr	r0, [r4, #16]
    e084:	6863      	ldr	r3, [r4, #4]
    e086:	78a2      	ldrb	r2, [r4, #2]
    e088:	8821      	ldrh	r1, [r4, #0]
    e08a:	8b80      	ldrh	r0, [r0, #28]
    e08c:	47c8      	blx	r9
		STRUCT_SECTION_FOREACH(bt_mesh_friend_cb, cb) {
    e08e:	360c      	adds	r6, #12
    e090:	e7f0      	b.n	e074 <bt_mesh_friend_poll+0x7c>
		if (frnd->last) {
    e092:	b120      	cbz	r0, e09e <bt_mesh_friend_poll+0xa6>
			net_buf_unref(frnd->last);
    e094:	f008 fff0 	bl	17078 <net_buf_unref>
			frnd->last = NULL;
    e098:	2300      	movs	r3, #0
    e09a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
		frnd->fsn = msg->fsn;
    e09e:	78e3      	ldrb	r3, [r4, #3]
    e0a0:	783a      	ldrb	r2, [r7, #0]
    e0a2:	f362 0300 	bfi	r3, r2, #0, #1
    e0a6:	70e3      	strb	r3, [r4, #3]
		if (sys_slist_is_empty(&frnd->queue)) {
    e0a8:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    e0ac:	2b00      	cmp	r3, #0
    e0ae:	d1b2      	bne.n	e016 <bt_mesh_friend_poll+0x1e>
			enqueue_update(frnd, 0);
    e0b0:	4620      	mov	r0, r4
    e0b2:	f7ff fd2f 	bl	db14 <enqueue_update.constprop.0>
			BT_DBG("Enqueued Friend Update to empty queue");
    e0b6:	e7af      	b.n	e018 <bt_mesh_friend_poll+0x20>
		return -EINVAL;
    e0b8:	f06f 0515 	mvn.w	r5, #21
    e0bc:	e7ac      	b.n	e018 <bt_mesh_friend_poll+0x20>
    e0be:	bf00      	nop
    e0c0:	000265e8 	.word	0x000265e8
    e0c4:	000265e8 	.word	0x000265e8

0000e0c8 <bt_mesh_friend_clear_cfm>:
{
    e0c8:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*msg)) {
    e0ca:	888b      	ldrh	r3, [r1, #4]
    e0cc:	2b03      	cmp	r3, #3
    e0ce:	d90b      	bls.n	e0e8 <bt_mesh_friend_clear_cfm+0x20>
		if (frnd->clear.frnd == prev_friend) {
    e0d0:	4c14      	ldr	r4, [pc, #80]	; (e124 <bt_mesh_friend_clear_cfm+0x5c>)
	frnd = find_clear(rx->ctx.addr);
    e0d2:	8903      	ldrh	r3, [r0, #8]
		if (frnd->clear.frnd == prev_friend) {
    e0d4:	f8b4 20dc 	ldrh.w	r2, [r4, #220]	; 0xdc
    e0d8:	429a      	cmp	r2, r3
    e0da:	d008      	beq.n	e0ee <bt_mesh_friend_clear_cfm+0x26>
    e0dc:	f8b4 21c4 	ldrh.w	r2, [r4, #452]	; 0x1c4
    e0e0:	429a      	cmp	r2, r3
    e0e2:	d01b      	beq.n	e11c <bt_mesh_friend_clear_cfm+0x54>
		return 0;
    e0e4:	2000      	movs	r0, #0
    e0e6:	e001      	b.n	e0ec <bt_mesh_friend_clear_cfm+0x24>
		return -EINVAL;
    e0e8:	f06f 0015 	mvn.w	r0, #21
}
    e0ec:	bd38      	pop	{r3, r4, r5, pc}
		struct bt_mesh_friend *frnd = &bt_mesh.frnd[i];
    e0ee:	3428      	adds	r4, #40	; 0x28
	struct bt_mesh_ctl_friend_clear_confirm *msg = (void *)buf->data;
    e0f0:	680a      	ldr	r2, [r1, #0]
	if (lpn_addr != frnd->lpn) {
    e0f2:	8821      	ldrh	r1, [r4, #0]
    e0f4:	8813      	ldrh	r3, [r2, #0]
    e0f6:	ba5b      	rev16	r3, r3
    e0f8:	b29b      	uxth	r3, r3
    e0fa:	4299      	cmp	r1, r3
    e0fc:	d1f2      	bne.n	e0e4 <bt_mesh_friend_clear_cfm+0x1c>
	if (lpn_counter != frnd->lpn_counter) {
    e0fe:	8853      	ldrh	r3, [r2, #2]
    e100:	8962      	ldrh	r2, [r4, #10]
    e102:	ba5b      	rev16	r3, r3
    e104:	b29b      	uxth	r3, r3
    e106:	429a      	cmp	r2, r3
    e108:	f04f 0500 	mov.w	r5, #0
    e10c:	d1ea      	bne.n	e0e4 <bt_mesh_friend_clear_cfm+0x1c>
	(void)k_work_cancel_delayable(&frnd->clear.timer);
    e10e:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    e112:	f017 fdcb 	bl	25cac <k_work_cancel_delayable>
	frnd->clear.frnd = BT_MESH_ADDR_UNASSIGNED;
    e116:	f8a4 50b4 	strh.w	r5, [r4, #180]	; 0xb4
	return 0;
    e11a:	e7e3      	b.n	e0e4 <bt_mesh_friend_clear_cfm+0x1c>
		struct bt_mesh_friend *frnd = &bt_mesh.frnd[i];
    e11c:	f504 7488 	add.w	r4, r4, #272	; 0x110
    e120:	e7e6      	b.n	e0f0 <bt_mesh_friend_clear_cfm+0x28>
    e122:	bf00      	nop
    e124:	20001728 	.word	0x20001728

0000e128 <bt_mesh_friend_req>:
{
    e128:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
    e12c:	7d03      	ldrb	r3, [r0, #20]
    e12e:	f003 0330 	and.w	r3, r3, #48	; 0x30
    e132:	2b10      	cmp	r3, #16
{
    e134:	b089      	sub	sp, #36	; 0x24
    e136:	4606      	mov	r6, r0
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
    e138:	f000 80f9 	beq.w	e32e <bt_mesh_friend_req+0x206>
	if (buf->len < sizeof(*msg)) {
    e13c:	888b      	ldrh	r3, [r1, #4]
    e13e:	2b09      	cmp	r3, #9
    e140:	f240 80f2 	bls.w	e328 <bt_mesh_friend_req+0x200>
	struct bt_mesh_ctl_friend_req *msg = (void *)buf->data;
    e144:	680d      	ldr	r5, [r1, #0]
	if (msg->recv_delay <= 0x09) {
    e146:	786b      	ldrb	r3, [r5, #1]
    e148:	2b09      	cmp	r3, #9
    e14a:	f240 80ed 	bls.w	e328 <bt_mesh_friend_req+0x200>
	return ((uint32_t)src[0] << 16) | sys_get_be16(&src[1]);
    e14e:	f8b5 7003 	ldrh.w	r7, [r5, #3]
    e152:	78ab      	ldrb	r3, [r5, #2]
    e154:	ba7f      	rev16	r7, r7
    e156:	b2bf      	uxth	r7, r7
    e158:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
	if (poll_to <= 0x000009 || poll_to >= 0x34bc00) {
    e15c:	4b75      	ldr	r3, [pc, #468]	; (e334 <bt_mesh_friend_req+0x20c>)
    e15e:	f1a7 020a 	sub.w	r2, r7, #10
    e162:	429a      	cmp	r2, r3
    e164:	f200 80e0 	bhi.w	e328 <bt_mesh_friend_req+0x200>
	if (msg->num_elem == 0x00) {
    e168:	79eb      	ldrb	r3, [r5, #7]
    e16a:	2b00      	cmp	r3, #0
    e16c:	f000 80dc 	beq.w	e328 <bt_mesh_friend_req+0x200>
	if (!BT_MESH_ADDR_IS_UNICAST(rx->ctx.addr + msg->num_elem - 1)) {
    e170:	8901      	ldrh	r1, [r0, #8]
    e172:	440b      	add	r3, r1
    e174:	2b01      	cmp	r3, #1
    e176:	f000 80d7 	beq.w	e328 <bt_mesh_friend_req+0x200>
    e17a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    e17e:	f300 80d3 	bgt.w	e328 <bt_mesh_friend_req+0x200>
	if (!MIN_QUEUE_SIZE_LOG(msg->criteria)) {
    e182:	782b      	ldrb	r3, [r5, #0]
    e184:	f013 0307 	ands.w	r3, r3, #7
    e188:	f000 80ce 	beq.w	e328 <bt_mesh_friend_req+0x200>
	if (CONFIG_BT_MESH_FRIEND_QUEUE_SIZE < MIN_QUEUE_SIZE(msg->criteria)) {
    e18c:	2201      	movs	r2, #1
    e18e:	fa02 f303 	lsl.w	r3, r2, r3
    e192:	2b10      	cmp	r3, #16
    e194:	f200 80cb 	bhi.w	e32e <bt_mesh_friend_req+0x206>
	frnd = bt_mesh_friend_find(rx->sub->net_idx, rx->ctx.addr, true, false);
    e198:	6800      	ldr	r0, [r0, #0]
    e19a:	2300      	movs	r3, #0
    e19c:	8b80      	ldrh	r0, [r0, #28]
    e19e:	f7ff febd 	bl	df1c <bt_mesh_friend_find>
	if (frnd) {
    e1a2:	4604      	mov	r4, r0
    e1a4:	b968      	cbnz	r0, e1c2 <bt_mesh_friend_req+0x9a>
		if (!bt_mesh.frnd[i].subnet) {
    e1a6:	4b64      	ldr	r3, [pc, #400]	; (e338 <bt_mesh_friend_req+0x210>)
    e1a8:	6b9c      	ldr	r4, [r3, #56]	; 0x38
    e1aa:	2c00      	cmp	r4, #0
    e1ac:	d041      	beq.n	e232 <bt_mesh_friend_req+0x10a>
    e1ae:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    e1b2:	2a00      	cmp	r2, #0
    e1b4:	d03c      	beq.n	e230 <bt_mesh_friend_req+0x108>
		return -ENOMEM;
    e1b6:	f06f 050b 	mvn.w	r5, #11
}
    e1ba:	4628      	mov	r0, r5
    e1bc:	b009      	add	sp, #36	; 0x24
    e1be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		friend_clear(frnd);
    e1c2:	f7ff fbf7 	bl	d9b4 <friend_clear>
	frnd->lpn = rx->ctx.addr;
    e1c6:	f8b6 8008 	ldrh.w	r8, [r6, #8]
    e1ca:	f8a4 8000 	strh.w	r8, [r4]
	frnd->num_elem = msg->num_elem;
    e1ce:	79eb      	ldrb	r3, [r5, #7]
    e1d0:	7223      	strb	r3, [r4, #8]
	frnd->subnet = rx->sub;
    e1d2:	6832      	ldr	r2, [r6, #0]
    e1d4:	6122      	str	r2, [r4, #16]
	frnd->recv_delay = msg->recv_delay;
    e1d6:	786b      	ldrb	r3, [r5, #1]
    e1d8:	70a3      	strb	r3, [r4, #2]
	frnd->poll_to = poll_to * 100U;
    e1da:	2364      	movs	r3, #100	; 0x64
    e1dc:	435f      	muls	r7, r3
	frnd->lpn_counter = sys_be16_to_cpu(msg->lpn_counter);
    e1de:	892b      	ldrh	r3, [r5, #8]
	frnd->poll_to = poll_to * 100U;
    e1e0:	6067      	str	r7, [r4, #4]
	frnd->lpn_counter = sys_be16_to_cpu(msg->lpn_counter);
    e1e2:	ba5b      	rev16	r3, r3
    e1e4:	8163      	strh	r3, [r4, #10]
	frnd->clear.frnd = sys_be16_to_cpu(msg->prev_addr);
    e1e6:	f8b5 3005 	ldrh.w	r3, [r5, #5]
    e1ea:	ba5b      	rev16	r3, r3
    e1ec:	f8a4 30b4 	strh.w	r3, [r4, #180]	; 0xb4
	err = friend_cred_create(frnd, SUBNET_KEY_TX_IDX(frnd->subnet));
    e1f0:	7f97      	ldrb	r7, [r2, #30]
    e1f2:	1ebb      	subs	r3, r7, #2
    e1f4:	425f      	negs	r7, r3
    e1f6:	415f      	adcs	r7, r3
	return bt_mesh_friend_cred_create(&frnd->cred[idx], frnd->lpn,
    e1f8:	f7fe ff76 	bl	d0e8 <bt_mesh_primary_addr>
					  frnd->subnet->keys[idx].net);
    e1fc:	215a      	movs	r1, #90	; 0x5a
	return bt_mesh_friend_cred_create(&frnd->cred[idx], frnd->lpn,
    e1fe:	eb07 1947 	add.w	r9, r7, r7, lsl #5
					  frnd->subnet->keys[idx].net);
    e202:	434f      	muls	r7, r1
    e204:	6921      	ldr	r1, [r4, #16]
	return bt_mesh_friend_cred_create(&frnd->cred[idx], frnd->lpn,
    e206:	8963      	ldrh	r3, [r4, #10]
					  frnd->subnet->keys[idx].net);
    e208:	372d      	adds	r7, #45	; 0x2d
    e20a:	440f      	add	r7, r1
	return bt_mesh_friend_cred_create(&frnd->cred[idx], frnd->lpn,
    e20c:	f109 0914 	add.w	r9, r9, #20
    e210:	9701      	str	r7, [sp, #4]
    e212:	89a1      	ldrh	r1, [r4, #12]
    e214:	9100      	str	r1, [sp, #0]
    e216:	44a1      	add	r9, r4
    e218:	4602      	mov	r2, r0
    e21a:	4641      	mov	r1, r8
    e21c:	4648      	mov	r0, r9
    e21e:	f012 fa0e 	bl	2063e <bt_mesh_friend_cred_create>
	if (err) {
    e222:	b158      	cbz	r0, e23c <bt_mesh_friend_req+0x114>
		friend_clear(frnd);
    e224:	4620      	mov	r0, r4
    e226:	f7ff fbc5 	bl	d9b4 <friend_clear>
		return -EIO;
    e22a:	f06f 0504 	mvn.w	r5, #4
    e22e:	e7c4      	b.n	e1ba <bt_mesh_friend_req+0x92>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
    e230:	2401      	movs	r4, #1
			frnd = &bt_mesh.frnd[i];
    e232:	20e8      	movs	r0, #232	; 0xe8
    e234:	fb00 3404 	mla	r4, r0, r4, r3
    e238:	3428      	adds	r4, #40	; 0x28
	if (!frnd) {
    e23a:	e7c4      	b.n	e1c6 <bt_mesh_friend_req+0x9e>
	if (BT_MESH_ADDR_IS_UNICAST(frnd->clear.frnd) &&
    e23c:	f9b4 30b4 	ldrsh.w	r3, [r4, #180]	; 0xb4
    e240:	f8b4 00b4 	ldrh.w	r0, [r4, #180]	; 0xb4
    e244:	2b00      	cmp	r3, #0
    e246:	dd15      	ble.n	e274 <bt_mesh_friend_req+0x14c>
	    !bt_mesh_has_addr(frnd->clear.frnd)) {
    e248:	f7fe ff68 	bl	d11c <bt_mesh_has_addr>
	if (BT_MESH_ADDR_IS_UNICAST(frnd->clear.frnd) &&
    e24c:	b990      	cbnz	r0, e274 <bt_mesh_friend_req+0x14c>
	return z_impl_k_uptime_ticks();
    e24e:	f017 fead 	bl	25fac <z_impl_k_uptime_ticks>
    e252:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e256:	fba0 3002 	umull	r3, r0, r0, r2
    e25a:	fb02 0001 	mla	r0, r2, r1, r0
    e25e:	0bdb      	lsrs	r3, r3, #15
    e260:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
	return (uint32_t)k_uptime_get();
    e264:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	frnd->clear.repeat_sec = 1U;
    e268:	2301      	movs	r3, #1
    e26a:	f8a4 30b6 	strh.w	r3, [r4, #182]	; 0xb6
	send_friend_clear(frnd);
    e26e:	4620      	mov	r0, r4
    e270:	f7ff fb68 	bl	d944 <send_friend_clear>
	delay = offer_delay(frnd, rx->ctx.recv_rssi, msg->criteria);
    e274:	782b      	ldrb	r3, [r5, #0]
	delay = (int32_t)fact[RECV_WIN_FACT(crit)] * RECV_WIN;
    e276:	4a31      	ldr	r2, [pc, #196]	; (e33c <bt_mesh_friend_req+0x214>)
    e278:	f3c3 01c1 	ubfx	r1, r3, #3, #2
	delay -= (int32_t)fact[RSSI_FACT(crit)] * rssi;
    e27c:	f3c3 1341 	ubfx	r3, r3, #5, #2
	delay = (int32_t)fact[RECV_WIN_FACT(crit)] * RECV_WIN;
    e280:	5c55      	ldrb	r5, [r2, r1]
	delay -= (int32_t)fact[RSSI_FACT(crit)] * rssi;
    e282:	5cd2      	ldrb	r2, [r2, r3]
    e284:	f996 300c 	ldrsb.w	r3, [r6, #12]
	delay = (int32_t)fact[RECV_WIN_FACT(crit)] * RECV_WIN;
    e288:	ebc5 2505 	rsb	r5, r5, r5, lsl #8
	delay -= (int32_t)fact[RSSI_FACT(crit)] * rssi;
    e28c:	fb02 5513 	mls	r5, r2, r3, r5
	delay /= 10;
    e290:	230a      	movs	r3, #10
    e292:	fb95 f5f3 	sdiv	r5, r5, r3
	return MAX(delay, 100);
    e296:	2d64      	cmp	r5, #100	; 0x64
    e298:	bfb8      	it	lt
    e29a:	2564      	movlt	r5, #100	; 0x64
    e29c:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    e2a0:	f240 30e7 	movw	r0, #999	; 0x3e7
    e2a4:	2100      	movs	r1, #0
    e2a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e2aa:	2300      	movs	r3, #0
    e2ac:	fbc5 0107 	smlal	r0, r1, r5, r7
    e2b0:	f7f3 f8e2 	bl	1478 <__aeabi_uldivmod>
    e2b4:	4602      	mov	r2, r0
    e2b6:	460b      	mov	r3, r1
	k_work_reschedule(&frnd->timer, K_MSEC(delay));
    e2b8:	f104 0060 	add.w	r0, r4, #96	; 0x60
    e2bc:	f00d fa2c 	bl	1b718 <k_work_reschedule>
	NET_BUF_SIMPLE_DEFINE(sdu, 1 + sizeof(*off));
    e2c0:	ab03      	add	r3, sp, #12
    e2c2:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
	net_buf_simple_reserve(&sdu, 1);
    e2c6:	2101      	movs	r1, #1
    e2c8:	a805      	add	r0, sp, #20
	NET_BUF_SIMPLE_DEFINE(sdu, 1 + sizeof(*off));
    e2ca:	e9cd 2306 	strd	r2, r3, [sp, #24]
	enqueue_offer(frnd, rx->ctx.recv_rssi);
    e2ce:	f996 500c 	ldrsb.w	r5, [r6, #12]
	NET_BUF_SIMPLE_DEFINE(sdu, 1 + sizeof(*off));
    e2d2:	9305      	str	r3, [sp, #20]
	net_buf_simple_reserve(&sdu, 1);
    e2d4:	f016 fcb9 	bl	24c4a <net_buf_simple_reserve>
	off = net_buf_simple_add(&sdu, sizeof(*off));
    e2d8:	2106      	movs	r1, #6
    e2da:	a805      	add	r0, sp, #20
    e2dc:	f016 fd1b 	bl	24d16 <net_buf_simple_add>
	off->recv_win = CONFIG_BT_MESH_FRIEND_RECV_WIN,
    e2e0:	23ff      	movs	r3, #255	; 0xff
    e2e2:	7003      	strb	r3, [r0, #0]
	off->queue_size = CONFIG_BT_MESH_FRIEND_QUEUE_SIZE,
    e2e4:	2310      	movs	r3, #16
    e2e6:	7043      	strb	r3, [r0, #1]
	off->sub_list_size = ARRAY_SIZE(frnd->sub_list),
    e2e8:	2303      	movs	r3, #3
    e2ea:	7083      	strb	r3, [r0, #2]
	off->rssi = rssi,
    e2ec:	70c5      	strb	r5, [r0, #3]
	off->frnd_counter = sys_cpu_to_be16(frnd->counter);
    e2ee:	89a3      	ldrh	r3, [r4, #12]
    e2f0:	ba5b      	rev16	r3, r3
    e2f2:	8083      	strh	r3, [r0, #4]
	buf = encode_friend_ctl(frnd, TRANS_CTL_OP_FRIEND_OFFER, &sdu);
    e2f4:	aa05      	add	r2, sp, #20
    e2f6:	2104      	movs	r1, #4
    e2f8:	4620      	mov	r0, r4
    e2fa:	f7ff fbe1 	bl	dac0 <encode_friend_ctl>
	if (!buf) {
    e2fe:	4606      	mov	r6, r0
    e300:	b1a8      	cbz	r0, e32e <bt_mesh_friend_req+0x206>
	if (encrypt_friend_pdu(frnd, buf, true)) {
    e302:	4601      	mov	r1, r0
    e304:	2201      	movs	r2, #1
    e306:	4620      	mov	r0, r4
    e308:	f7ff fc7c 	bl	dc04 <encrypt_friend_pdu>
    e30c:	4605      	mov	r5, r0
    e30e:	b970      	cbnz	r0, e32e <bt_mesh_friend_req+0x206>
	if (frnd->last) {
    e310:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    e314:	b108      	cbz	r0, e31a <bt_mesh_friend_req+0x1f2>
		net_buf_unref(frnd->last);
    e316:	f008 feaf 	bl	17078 <net_buf_unref>
	frnd->send_last = 1U;
    e31a:	78e3      	ldrb	r3, [r4, #3]
	frnd->last = buf;
    e31c:	f8c4 609c 	str.w	r6, [r4, #156]	; 0x9c
	frnd->send_last = 1U;
    e320:	f043 0302 	orr.w	r3, r3, #2
    e324:	70e3      	strb	r3, [r4, #3]
    e326:	e748      	b.n	e1ba <bt_mesh_friend_req+0x92>
		return -EINVAL;
    e328:	f06f 0515 	mvn.w	r5, #21
    e32c:	e745      	b.n	e1ba <bt_mesh_friend_req+0x92>
		return 0;
    e32e:	2500      	movs	r5, #0
    e330:	e743      	b.n	e1ba <bt_mesh_friend_req+0x92>
    e332:	bf00      	nop
    e334:	0034bbf5 	.word	0x0034bbf5
    e338:	20001728 	.word	0x20001728
    e33c:	00027759 	.word	0x00027759

0000e340 <bt_mesh_friend_init>:
BT_MESH_SUBNET_CB_DEFINE(friend) = {
	.evt_handler = subnet_evt,
};

int bt_mesh_friend_init(void)
{
    e340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	list->head = NULL;
    e342:	4c11      	ldr	r4, [pc, #68]	; (e388 <bt_mesh_friend_init+0x48>)
		struct bt_mesh_friend *frnd = &bt_mesh.frnd[i];
		int j;

		sys_slist_init(&frnd->queue);

		k_work_init_delayable(&frnd->timer, friend_timeout);
    e344:	4f11      	ldr	r7, [pc, #68]	; (e38c <bt_mesh_friend_init+0x4c>)
		k_work_init_delayable(&frnd->clear.timer, clear_timeout);
    e346:	4e12      	ldr	r6, [pc, #72]	; (e390 <bt_mesh_friend_init+0x50>)
    e348:	2500      	movs	r5, #0
		k_work_init_delayable(&frnd->timer, friend_timeout);
    e34a:	4639      	mov	r1, r7
    e34c:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = NULL;
    e350:	e9c4 5532 	strd	r5, r5, [r4, #200]	; 0xc8
    e354:	f017 fc9c 	bl	25c90 <k_work_init_delayable>
		k_work_init_delayable(&frnd->clear.timer, clear_timeout);
    e358:	4631      	mov	r1, r6
    e35a:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
    e35e:	f017 fc97 	bl	25c90 <k_work_init_delayable>
		k_work_init_delayable(&frnd->timer, friend_timeout);
    e362:	4639      	mov	r1, r7
    e364:	f504 70b8 	add.w	r0, r4, #368	; 0x170
    e368:	e9c4 552e 	strd	r5, r5, [r4, #184]	; 0xb8
    e36c:	e9c4 556c 	strd	r5, r5, [r4, #432]	; 0x1b0
    e370:	f017 fc8e 	bl	25c90 <k_work_init_delayable>
		k_work_init_delayable(&frnd->clear.timer, clear_timeout);
    e374:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
    e378:	4631      	mov	r1, r6
    e37a:	f017 fc89 	bl	25c90 <k_work_init_delayable>
    e37e:	e9c4 5568 	strd	r5, r5, [r4, #416]	; 0x1a0
			sys_slist_init(&frnd->seg[j].queue);
		}
	}

	return 0;
}
    e382:	4628      	mov	r0, r5
    e384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e386:	bf00      	nop
    e388:	20001728 	.word	0x20001728
    e38c:	0000dded 	.word	0x0000dded
    e390:	00022feb 	.word	0x00022feb

0000e394 <bt_mesh_friend_match>:

	return false;
}

bool bt_mesh_friend_match(uint16_t net_idx, uint16_t addr)
{
    e394:	b508      	push	{r3, lr}
    e396:	460a      	mov	r2, r1
	int i;

	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
		struct bt_mesh_friend *frnd = &bt_mesh.frnd[i];

		if (friend_lpn_matches(frnd, net_idx, addr)) {
    e398:	4601      	mov	r1, r0
    e39a:	4805      	ldr	r0, [pc, #20]	; (e3b0 <bt_mesh_friend_match+0x1c>)
    e39c:	f014 fd9c 	bl	22ed8 <friend_lpn_matches>
    e3a0:	b920      	cbnz	r0, e3ac <bt_mesh_friend_match+0x18>
	}

	BT_DBG("No matching LPN for address 0x%04x", addr);

	return false;
}
    e3a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		if (friend_lpn_matches(frnd, net_idx, addr)) {
    e3a6:	4803      	ldr	r0, [pc, #12]	; (e3b4 <bt_mesh_friend_match+0x20>)
    e3a8:	f014 bd96 	b.w	22ed8 <friend_lpn_matches>
}
    e3ac:	bd08      	pop	{r3, pc}
    e3ae:	bf00      	nop
    e3b0:	20001750 	.word	0x20001750
    e3b4:	20001838 	.word	0x20001838

0000e3b8 <bt_mesh_friend_queue_has_space>:
	return (CONFIG_BT_MESH_FRIEND_QUEUE_SIZE - total) > seg_count;
}

bool bt_mesh_friend_queue_has_space(uint16_t net_idx, uint16_t src, uint16_t dst,
				    uint64_t *seq_auth, uint8_t seg_count)
{
    e3b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e3bc:	4681      	mov	r9, r0
    e3be:	460e      	mov	r6, r1
	int i;

	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
		struct bt_mesh_friend *frnd = &bt_mesh.frnd[i];

		if (!friend_lpn_matches(frnd, net_idx, dst)) {
    e3c0:	4601      	mov	r1, r0
    e3c2:	4817      	ldr	r0, [pc, #92]	; (e420 <bt_mesh_friend_queue_has_space+0x68>)
{
    e3c4:	f89d 8020 	ldrb.w	r8, [sp, #32]
    e3c8:	461f      	mov	r7, r3
		if (!friend_lpn_matches(frnd, net_idx, dst)) {
    e3ca:	f014 fd85 	bl	22ed8 <friend_lpn_matches>
{
    e3ce:	4692      	mov	sl, r2
		if (!friend_lpn_matches(frnd, net_idx, dst)) {
    e3d0:	4605      	mov	r5, r0
    e3d2:	b1f0      	cbz	r0, e412 <bt_mesh_friend_queue_has_space+0x5a>
	if (seg_count > CONFIG_BT_MESH_FRIEND_QUEUE_SIZE) {
    e3d4:	f1b8 0f10 	cmp.w	r8, #16
    e3d8:	d81b      	bhi.n	e412 <bt_mesh_friend_queue_has_space+0x5a>
    e3da:	4811      	ldr	r0, [pc, #68]	; (e420 <bt_mesh_friend_queue_has_space+0x68>)
    e3dc:	4643      	mov	r3, r8
    e3de:	463a      	mov	r2, r7
    e3e0:	4631      	mov	r1, r6
    e3e2:	f014 fe54 	bl	2308e <friend_queue_has_space.part.0>
    e3e6:	4604      	mov	r4, r0
		if (!friend_lpn_matches(frnd, net_idx, dst)) {
    e3e8:	480e      	ldr	r0, [pc, #56]	; (e424 <bt_mesh_friend_queue_has_space+0x6c>)
    e3ea:	4652      	mov	r2, sl
    e3ec:	4649      	mov	r1, r9
    e3ee:	f014 fd73 	bl	22ed8 <friend_lpn_matches>
    e3f2:	b180      	cbz	r0, e416 <bt_mesh_friend_queue_has_space+0x5e>
	if (seg_count > CONFIG_BT_MESH_FRIEND_QUEUE_SIZE) {
    e3f4:	f1b8 0f10 	cmp.w	r8, #16
    e3f8:	d808      	bhi.n	e40c <bt_mesh_friend_queue_has_space+0x54>
    e3fa:	480a      	ldr	r0, [pc, #40]	; (e424 <bt_mesh_friend_queue_has_space+0x6c>)
    e3fc:	4643      	mov	r3, r8
    e3fe:	463a      	mov	r2, r7
    e400:	4631      	mov	r1, r6
    e402:	f014 fe44 	bl	2308e <friend_queue_has_space.part.0>
		}

		friend_match = true;

		if (friend_queue_has_space(frnd, src, seq_auth, seg_count)) {
			someone_has_space = true;
    e406:	2800      	cmp	r0, #0
    e408:	bf18      	it	ne
    e40a:	4604      	movne	r4, r0
	 * least one Friend Queue has space. If there were multiple Friend
	 * matches then the destination must be a group address, in which
	 * case e.g. segment acks are not sent.
	 */
	return someone_has_space;
}
    e40c:	4620      	mov	r0, r4
    e40e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	bool someone_has_space = false, friend_match = false;
    e412:	2400      	movs	r4, #0
    e414:	e7e8      	b.n	e3e8 <bt_mesh_friend_queue_has_space+0x30>
		return true;
    e416:	2d00      	cmp	r5, #0
    e418:	bf08      	it	eq
    e41a:	2401      	moveq	r4, #1
    e41c:	e7f6      	b.n	e40c <bt_mesh_friend_queue_has_space+0x54>
    e41e:	bf00      	nop
    e420:	20001750 	.word	0x20001750
    e424:	20001838 	.word	0x20001838

0000e428 <bt_mesh_friend_enqueue_rx>:

void bt_mesh_friend_enqueue_rx(struct bt_mesh_net_rx *rx,
			       enum bt_mesh_friend_pdu_type type,
			       const uint64_t *seq_auth, uint8_t seg_count,
			       struct net_buf_simple *sbuf)
{
    e428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e42c:	4615      	mov	r5, r2
	int i;

	if (!rx->friend_match ||
    e42e:	f990 2014 	ldrsb.w	r2, [r0, #20]
    e432:	2a00      	cmp	r2, #0
{
    e434:	4699      	mov	r9, r3
    e436:	b087      	sub	sp, #28
	if (!rx->friend_match ||
    e438:	7d03      	ldrb	r3, [r0, #20]
{
    e43a:	4604      	mov	r4, r0
    e43c:	4688      	mov	r8, r1
	if (!rx->friend_match ||
    e43e:	da69      	bge.n	e514 <bt_mesh_friend_enqueue_rx+0xec>
    e440:	7b42      	ldrb	r2, [r0, #13]
    e442:	2a01      	cmp	r2, #1
    e444:	d803      	bhi.n	e44e <bt_mesh_friend_enqueue_rx+0x26>
	    (rx->ctx.recv_ttl <= 1U && rx->net_if != BT_MESH_NET_IF_LOCAL) ||
    e446:	f003 0330 	and.w	r3, r3, #48	; 0x30
    e44a:	2b10      	cmp	r3, #16
    e44c:	d162      	bne.n	e514 <bt_mesh_friend_enqueue_rx+0xec>
	    bt_mesh_friend_get() != BT_MESH_FRIEND_ENABLED) {
    e44e:	f7fb fec3 	bl	a1d8 <bt_mesh_friend_get>
	    (rx->ctx.recv_ttl <= 1U && rx->net_if != BT_MESH_NET_IF_LOCAL) ||
    e452:	2801      	cmp	r0, #1
    e454:	d15e      	bne.n	e514 <bt_mesh_friend_enqueue_rx+0xec>
	info.iv_index = BT_MESH_NET_IVI_RX(rx);
    e456:	4b31      	ldr	r3, [pc, #196]	; (e51c <bt_mesh_friend_enqueue_rx+0xf4>)
    e458:	2700      	movs	r7, #0
    e45a:	f1a3 0b28 	sub.w	fp, r3, #40	; 0x28
	BT_DBG("recv_ttl %u net_idx 0x%04x src 0x%04x dst 0x%04x",
	       rx->ctx.recv_ttl, rx->sub->net_idx, rx->ctx.addr,
	       rx->ctx.recv_dst);

	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
		struct bt_mesh_friend *frnd = &bt_mesh.frnd[i];
    e45e:	4b2f      	ldr	r3, [pc, #188]	; (e51c <bt_mesh_friend_enqueue_rx+0xf4>)

		if (!friend_lpn_matches(frnd, rx->sub->net_idx,
    e460:	8962      	ldrh	r2, [r4, #10]
    e462:	19de      	adds	r6, r3, r7
    e464:	6823      	ldr	r3, [r4, #0]
    e466:	4630      	mov	r0, r6
    e468:	8b99      	ldrh	r1, [r3, #28]
    e46a:	f014 fd35 	bl	22ed8 <friend_lpn_matches>
    e46e:	2800      	cmp	r0, #0
    e470:	d04c      	beq.n	e50c <bt_mesh_friend_enqueue_rx+0xe4>
					rx->ctx.recv_dst)) {
			continue;
		}

		if (friend_lpn_matches(frnd, rx->sub->net_idx,
    e472:	f8b4 a008 	ldrh.w	sl, [r4, #8]
    e476:	4630      	mov	r0, r6
    e478:	4652      	mov	r2, sl
    e47a:	f014 fd2d 	bl	22ed8 <friend_lpn_matches>
    e47e:	2800      	cmp	r0, #0
    e480:	d144      	bne.n	e50c <bt_mesh_friend_enqueue_rx+0xe4>
					rx->ctx.addr)) {
			continue;
		}

		if (!friend_queue_prepare_space(frnd, rx->ctx.addr, seq_auth,
    e482:	464b      	mov	r3, r9
    e484:	462a      	mov	r2, r5
    e486:	4651      	mov	r1, sl
    e488:	4630      	mov	r0, r6
    e48a:	f014 fe63 	bl	23154 <friend_queue_prepare_space>
    e48e:	2800      	cmp	r0, #0
    e490:	d03c      	beq.n	e50c <bt_mesh_friend_enqueue_rx+0xe4>
	if (bt_mesh_has_addr(rx->ctx.addr)) {
    e492:	8920      	ldrh	r0, [r4, #8]
    e494:	f7fe fe42 	bl	d11c <bt_mesh_has_addr>
    e498:	2800      	cmp	r0, #0
    e49a:	d137      	bne.n	e50c <bt_mesh_friend_enqueue_rx+0xe4>
	if (type == BT_MESH_FRIEND_PDU_SINGLE && seq_auth) {
    e49c:	f1b8 0f00 	cmp.w	r8, #0
    e4a0:	d105      	bne.n	e4ae <bt_mesh_friend_enqueue_rx+0x86>
    e4a2:	b125      	cbz	r5, e4ae <bt_mesh_friend_enqueue_rx+0x86>
		friend_purge_old_ack(frnd, seq_auth, rx->ctx.addr);
    e4a4:	8922      	ldrh	r2, [r4, #8]
    e4a6:	4629      	mov	r1, r5
    e4a8:	4630      	mov	r0, r6
    e4aa:	f014 feba 	bl	23222 <friend_purge_old_ack>
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
    e4ae:	7d22      	ldrb	r2, [r4, #20]
	info.src = rx->ctx.addr;
    e4b0:	68a3      	ldr	r3, [r4, #8]
    e4b2:	9303      	str	r3, [sp, #12]
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
    e4b4:	f002 0130 	and.w	r1, r2, #48	; 0x30
		info.ttl = rx->ctx.recv_ttl;
    e4b8:	7b63      	ldrb	r3, [r4, #13]
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
    e4ba:	2910      	cmp	r1, #16
		info.ttl = rx->ctx.recv_ttl - 1U;
    e4bc:	bf18      	it	ne
    e4be:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
	info.ctl = rx->ctl;
    e4c2:	f3c2 01c0 	ubfx	r1, r2, #3, #1
		info.ttl = rx->ctx.recv_ttl - 1U;
    e4c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	info.ctl = rx->ctl;
    e4ca:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
    e4ce:	f88d 3013 	strb.w	r3, [sp, #19]
	sys_put_be24(rx->seq, info.seq);
    e4d2:	6923      	ldr	r3, [r4, #16]
	dst[1] = val;
    e4d4:	f88d 3012 	strb.w	r3, [sp, #18]
	dst[0] = val >> 16;
    e4d8:	0c19      	lsrs	r1, r3, #16
    e4da:	f88d 1010 	strb.w	r1, [sp, #16]
	dst[0] = val >> 8;
    e4de:	f3c3 2107 	ubfx	r1, r3, #8, #8
	info.iv_index = BT_MESH_NET_IVI_RX(rx);
    e4e2:	f8db 3000 	ldr.w	r3, [fp]
    e4e6:	f88d 1011 	strb.w	r1, [sp, #17]
    e4ea:	f002 0201 	and.w	r2, r2, #1
    e4ee:	1a9a      	subs	r2, r3, r2
	buf = create_friend_pdu(frnd, &info, sbuf);
    e4f0:	9910      	ldr	r1, [sp, #64]	; 0x40
	info.iv_index = BT_MESH_NET_IVI_RX(rx);
    e4f2:	9205      	str	r2, [sp, #20]
	buf = create_friend_pdu(frnd, &info, sbuf);
    e4f4:	a803      	add	r0, sp, #12
    e4f6:	f7ff faa1 	bl	da3c <create_friend_pdu.constprop.0>
	if (!buf) {
    e4fa:	b138      	cbz	r0, e50c <bt_mesh_friend_enqueue_rx+0xe4>
	enqueue_friend_pdu(frnd, type, info.src, seg_count, buf);
    e4fc:	9000      	str	r0, [sp, #0]
    e4fe:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    e502:	464b      	mov	r3, r9
    e504:	4641      	mov	r1, r8
    e506:	4630      	mov	r0, r6
    e508:	f014 fdd7 	bl	230ba <enqueue_friend_pdu>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
    e50c:	37e8      	adds	r7, #232	; 0xe8
    e50e:	f5b7 7fe8 	cmp.w	r7, #464	; 0x1d0
    e512:	d1a4      	bne.n	e45e <bt_mesh_friend_enqueue_rx+0x36>
		}

		friend_lpn_enqueue_rx(frnd, rx, type, seq_auth, seg_count,
				      sbuf);
	}
}
    e514:	b007      	add	sp, #28
    e516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e51a:	bf00      	nop
    e51c:	20001750 	.word	0x20001750

0000e520 <bt_mesh_friend_enqueue_tx>:

bool bt_mesh_friend_enqueue_tx(struct bt_mesh_net_tx *tx,
			       enum bt_mesh_friend_pdu_type type,
			       const uint64_t *seq_auth, uint8_t seg_count,
			       struct net_buf_simple *sbuf)
{
    e520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e524:	4617      	mov	r7, r2
    e526:	469a      	mov	sl, r3
	bool matched = false;
	int i;

	if (!bt_mesh_friend_match(tx->sub->net_idx, tx->ctx->addr) ||
    e528:	e9d0 3200 	ldrd	r3, r2, [r0]
{
    e52c:	b089      	sub	sp, #36	; 0x24
    e52e:	4604      	mov	r4, r0
    e530:	460e      	mov	r6, r1
	if (!bt_mesh_friend_match(tx->sub->net_idx, tx->ctx->addr) ||
    e532:	8b98      	ldrh	r0, [r3, #28]
    e534:	8891      	ldrh	r1, [r2, #4]
    e536:	f7ff ff2d 	bl	e394 <bt_mesh_friend_match>
    e53a:	b928      	cbnz	r0, e548 <bt_mesh_friend_enqueue_tx+0x28>
	    bt_mesh_friend_get() != BT_MESH_FRIEND_ENABLED) {
		return matched;
    e53c:	f04f 0900 	mov.w	r9, #0
				      sbuf);
		matched = true;
	}

	return matched;
}
    e540:	4648      	mov	r0, r9
    e542:	b009      	add	sp, #36	; 0x24
    e544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	    bt_mesh_friend_get() != BT_MESH_FRIEND_ENABLED) {
    e548:	f7fb fe46 	bl	a1d8 <bt_mesh_friend_get>
	if (!bt_mesh_friend_match(tx->sub->net_idx, tx->ctx->addr) ||
    e54c:	2801      	cmp	r0, #1
    e54e:	d1f5      	bne.n	e53c <bt_mesh_friend_enqueue_tx+0x1c>
	sys_put_be24(bt_mesh.seq, info.seq);
    e550:	4b34      	ldr	r3, [pc, #208]	; (e624 <bt_mesh_friend_enqueue_tx+0x104>)
    e552:	2500      	movs	r5, #0
	bool matched = false;
    e554:	46a9      	mov	r9, r5
	sys_put_be24(bt_mesh.seq, info.seq);
    e556:	f1a3 0828 	sub.w	r8, r3, #40	; 0x28
		struct bt_mesh_friend *frnd = &bt_mesh.frnd[i];
    e55a:	4b32      	ldr	r3, [pc, #200]	; (e624 <bt_mesh_friend_enqueue_tx+0x104>)
    e55c:	eb03 0b05 	add.w	fp, r3, r5
		if (!friend_lpn_matches(frnd, tx->sub->net_idx,
    e560:	e9d4 3200 	ldrd	r3, r2, [r4]
    e564:	4658      	mov	r0, fp
    e566:	8892      	ldrh	r2, [r2, #4]
    e568:	8b99      	ldrh	r1, [r3, #28]
    e56a:	f014 fcb5 	bl	22ed8 <friend_lpn_matches>
    e56e:	2800      	cmp	r0, #0
    e570:	d041      	beq.n	e5f6 <bt_mesh_friend_enqueue_tx+0xd6>
		if (!friend_queue_prepare_space(frnd, tx->src, seq_auth,
    e572:	8921      	ldrh	r1, [r4, #8]
    e574:	4653      	mov	r3, sl
    e576:	463a      	mov	r2, r7
    e578:	4658      	mov	r0, fp
    e57a:	f014 fdeb 	bl	23154 <friend_queue_prepare_space>
    e57e:	9003      	str	r0, [sp, #12]
    e580:	2800      	cmp	r0, #0
    e582:	d038      	beq.n	e5f6 <bt_mesh_friend_enqueue_tx+0xd6>
	if (type == BT_MESH_FRIEND_PDU_SINGLE && seq_auth) {
    e584:	b92e      	cbnz	r6, e592 <bt_mesh_friend_enqueue_tx+0x72>
    e586:	b127      	cbz	r7, e592 <bt_mesh_friend_enqueue_tx+0x72>
		friend_purge_old_ack(frnd, seq_auth, tx->src);
    e588:	8922      	ldrh	r2, [r4, #8]
    e58a:	4639      	mov	r1, r7
    e58c:	4658      	mov	r0, fp
    e58e:	f014 fe48 	bl	23222 <friend_purge_old_ack>
	info.dst = tx->ctx->addr;
    e592:	6861      	ldr	r1, [r4, #4]
	info.src = tx->src;
    e594:	8923      	ldrh	r3, [r4, #8]
    e596:	f8ad 3014 	strh.w	r3, [sp, #20]
	info.dst = tx->ctx->addr;
    e59a:	888b      	ldrh	r3, [r1, #4]
    e59c:	f8ad 3016 	strh.w	r3, [sp, #22]
	info.ctl = (tx->ctx->app_idx == BT_MESH_KEY_UNUSED);
    e5a0:	884b      	ldrh	r3, [r1, #2]
    e5a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e5a6:	1a9b      	subs	r3, r3, r2
    e5a8:	425a      	negs	r2, r3
    e5aa:	415a      	adcs	r2, r3
	info.ttl = tx->ctx->send_ttl;
    e5ac:	7acb      	ldrb	r3, [r1, #11]
    e5ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    e5b2:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
    e5b6:	f88d 301b 	strb.w	r3, [sp, #27]
	sys_put_be24(bt_mesh.seq, info.seq);
    e5ba:	f8d8 3004 	ldr.w	r3, [r8, #4]
	dst[1] = val;
    e5be:	f88d 301a 	strb.w	r3, [sp, #26]
	dst[0] = val >> 16;
    e5c2:	0c1a      	lsrs	r2, r3, #16
    e5c4:	f88d 2018 	strb.w	r2, [sp, #24]
	dst[0] = val >> 8;
    e5c8:	f3c3 2207 	ubfx	r2, r3, #8, #8
    e5cc:	f88d 2019 	strb.w	r2, [sp, #25]
    e5d0:	4a15      	ldr	r2, [pc, #84]	; (e628 <bt_mesh_friend_enqueue_tx+0x108>)
	info.iv_index = BT_MESH_NET_IVI_TX;
    e5d2:	f8d8 3000 	ldr.w	r3, [r8]
    e5d6:	f3bf 8f5b 	dmb	ish
    e5da:	6812      	ldr	r2, [r2, #0]
    e5dc:	f3bf 8f5b 	dmb	ish
    e5e0:	f3c2 0280 	ubfx	r2, r2, #2, #1
    e5e4:	1a9b      	subs	r3, r3, r2
	buf = create_friend_pdu(frnd, &info, sbuf);
    e5e6:	9912      	ldr	r1, [sp, #72]	; 0x48
	info.iv_index = BT_MESH_NET_IVI_TX;
    e5e8:	9307      	str	r3, [sp, #28]
	buf = create_friend_pdu(frnd, &info, sbuf);
    e5ea:	a805      	add	r0, sp, #20
    e5ec:	f7ff fa26 	bl	da3c <create_friend_pdu.constprop.0>
	if (!buf) {
    e5f0:	b930      	cbnz	r0, e600 <bt_mesh_friend_enqueue_tx+0xe0>
		matched = true;
    e5f2:	f8dd 900c 	ldr.w	r9, [sp, #12]
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
    e5f6:	35e8      	adds	r5, #232	; 0xe8
    e5f8:	f5b5 7fe8 	cmp.w	r5, #464	; 0x1d0
    e5fc:	d1ad      	bne.n	e55a <bt_mesh_friend_enqueue_tx+0x3a>
    e5fe:	e79f      	b.n	e540 <bt_mesh_friend_enqueue_tx+0x20>
	if (type == BT_MESH_FRIEND_PDU_SINGLE && !info.ctl) {
    e600:	b93e      	cbnz	r6, e612 <bt_mesh_friend_enqueue_tx+0xf2>
    e602:	f99d 301b 	ldrsb.w	r3, [sp, #27]
    e606:	2b00      	cmp	r3, #0
		FRIEND_ADV(buf)->app_idx = tx->ctx->app_idx;
    e608:	bfa1      	itttt	ge
    e60a:	6862      	ldrge	r2, [r4, #4]
    e60c:	6943      	ldrge	r3, [r0, #20]
    e60e:	8852      	ldrhge	r2, [r2, #2]
    e610:	801a      	strhge	r2, [r3, #0]
	enqueue_friend_pdu(frnd, type, info.src, seg_count, buf);
    e612:	9000      	str	r0, [sp, #0]
    e614:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    e618:	4653      	mov	r3, sl
    e61a:	4631      	mov	r1, r6
    e61c:	4658      	mov	r0, fp
    e61e:	f014 fd4c 	bl	230ba <enqueue_friend_pdu>
    e622:	e7e6      	b.n	e5f2 <bt_mesh_friend_enqueue_tx+0xd2>
    e624:	20001750 	.word	0x20001750
    e628:	20001730 	.word	0x20001730

0000e62c <bt_mesh_friend_clear_incomplete>:
	return 0;
}

void bt_mesh_friend_clear_incomplete(struct bt_mesh_subnet *sub, uint16_t src,
				     uint16_t dst, uint64_t *seq_auth)
{
    e62c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e62e:	4606      	mov	r6, r0
    e630:	460c      	mov	r4, r1

	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
		struct bt_mesh_friend *frnd = &bt_mesh.frnd[i];
		int j;

		if (!friend_lpn_matches(frnd, sub->net_idx, dst)) {
    e632:	8b81      	ldrh	r1, [r0, #28]
    e634:	4815      	ldr	r0, [pc, #84]	; (e68c <bt_mesh_friend_clear_incomplete+0x60>)
{
    e636:	4617      	mov	r7, r2
    e638:	461d      	mov	r5, r3
		if (!friend_lpn_matches(frnd, sub->net_idx, dst)) {
    e63a:	f014 fc4d 	bl	22ed8 <friend_lpn_matches>
    e63e:	b170      	cbz	r0, e65e <bt_mesh_friend_clear_incomplete+0x32>
		}

		for (j = 0; j < ARRAY_SIZE(frnd->seg); j++) {
			struct bt_mesh_friend_seg *seg = &frnd->seg[j];

			if (!is_seg(seg, src, *seq_auth & TRANS_SEQ_ZERO_MASK)) {
    e640:	882a      	ldrh	r2, [r5, #0]
    e642:	4813      	ldr	r0, [pc, #76]	; (e690 <bt_mesh_friend_clear_incomplete+0x64>)
    e644:	f3c2 020c 	ubfx	r2, r2, #0, #13
    e648:	4621      	mov	r1, r4
    e64a:	f014 fcf0 	bl	2302e <is_seg>
    e64e:	b130      	cbz	r0, e65e <bt_mesh_friend_clear_incomplete+0x32>
				continue;
			}

			BT_WARN("Clearing incomplete segments for 0x%04x", src);

			purge_buffers(&seg->queue);
    e650:	480f      	ldr	r0, [pc, #60]	; (e690 <bt_mesh_friend_clear_incomplete+0x64>)
    e652:	f014 fcb6 	bl	22fc2 <purge_buffers>
			seg->seg_count = 0U;
    e656:	4b0f      	ldr	r3, [pc, #60]	; (e694 <bt_mesh_friend_clear_incomplete+0x68>)
    e658:	2200      	movs	r2, #0
    e65a:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
		if (!friend_lpn_matches(frnd, sub->net_idx, dst)) {
    e65e:	8bb1      	ldrh	r1, [r6, #28]
    e660:	480d      	ldr	r0, [pc, #52]	; (e698 <bt_mesh_friend_clear_incomplete+0x6c>)
    e662:	463a      	mov	r2, r7
    e664:	f014 fc38 	bl	22ed8 <friend_lpn_matches>
    e668:	b170      	cbz	r0, e688 <bt_mesh_friend_clear_incomplete+0x5c>
			if (!is_seg(seg, src, *seq_auth & TRANS_SEQ_ZERO_MASK)) {
    e66a:	882a      	ldrh	r2, [r5, #0]
    e66c:	480b      	ldr	r0, [pc, #44]	; (e69c <bt_mesh_friend_clear_incomplete+0x70>)
    e66e:	f3c2 020c 	ubfx	r2, r2, #0, #13
    e672:	4621      	mov	r1, r4
    e674:	f014 fcdb 	bl	2302e <is_seg>
    e678:	b130      	cbz	r0, e688 <bt_mesh_friend_clear_incomplete+0x5c>
			purge_buffers(&seg->queue);
    e67a:	4808      	ldr	r0, [pc, #32]	; (e69c <bt_mesh_friend_clear_incomplete+0x70>)
    e67c:	f014 fca1 	bl	22fc2 <purge_buffers>
			seg->seg_count = 0U;
    e680:	4b04      	ldr	r3, [pc, #16]	; (e694 <bt_mesh_friend_clear_incomplete+0x68>)
    e682:	2200      	movs	r2, #0
    e684:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
			break;
		}
	}
}
    e688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e68a:	bf00      	nop
    e68c:	20001750 	.word	0x20001750
    e690:	200017e0 	.word	0x200017e0
    e694:	20001728 	.word	0x20001728
    e698:	20001838 	.word	0x20001838
    e69c:	200018c8 	.word	0x200018c8

0000e6a0 <bt_mesh_prov_reset_state>:
{
	int err;
	static struct bt_pub_key_cb pub_key_cb;
	const size_t offset = offsetof(struct bt_mesh_prov_link, auth);

	pub_key_cb.func = func ? func : pub_key_ready;
    e6a0:	4b11      	ldr	r3, [pc, #68]	; (e6e8 <bt_mesh_prov_reset_state+0x48>)
    e6a2:	4a12      	ldr	r2, [pc, #72]	; (e6ec <bt_mesh_prov_reset_state+0x4c>)
{
    e6a4:	b510      	push	{r4, lr}

	/* Disable Attention Timer if it was set */
	if (bt_mesh_prov_link.conf_inputs.invite[0]) {
    e6a6:	4c12      	ldr	r4, [pc, #72]	; (e6f0 <bt_mesh_prov_reset_state+0x50>)
	pub_key_cb.func = func ? func : pub_key_ready;
    e6a8:	2800      	cmp	r0, #0
    e6aa:	bf18      	it	ne
    e6ac:	4603      	movne	r3, r0
    e6ae:	6013      	str	r3, [r2, #0]
	if (bt_mesh_prov_link.conf_inputs.invite[0]) {
    e6b0:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
    e6b4:	b11b      	cbz	r3, e6be <bt_mesh_prov_reset_state+0x1e>
		bt_mesh_attention(NULL, 0);
    e6b6:	2100      	movs	r1, #0
    e6b8:	4608      	mov	r0, r1
    e6ba:	f7ff f835 	bl	d728 <bt_mesh_attention>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    e6be:	f3bf 8f5b 	dmb	ish
    e6c2:	2100      	movs	r1, #0
    e6c4:	e854 3f00 	ldrex	r3, [r4]
    e6c8:	e844 1200 	strex	r2, r1, [r4]
    e6cc:	2a00      	cmp	r2, #0
    e6ce:	d1f9      	bne.n	e6c4 <bt_mesh_prov_reset_state+0x24>
    e6d0:	f3bf 8f5b 	dmb	ish
	}

	atomic_clear(bt_mesh_prov_link.flags);
	(void)memset((uint8_t *)&bt_mesh_prov_link + offset, 0,
    e6d4:	4807      	ldr	r0, [pc, #28]	; (e6f4 <bt_mesh_prov_reset_state+0x54>)
    e6d6:	f240 1215 	movw	r2, #277	; 0x115
    e6da:	f00f fcb5 	bl	1e048 <memset>
	if (err) {
		BT_ERR("Failed to generate public key (%d)", err);
		return err;
	}
	return 0;
}
    e6de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	err = bt_pub_key_gen(&pub_key_cb);
    e6e2:	4802      	ldr	r0, [pc, #8]	; (e6ec <bt_mesh_prov_reset_state+0x4c>)
    e6e4:	f7f9 bab2 	b.w	7c4c <bt_pub_key_gen>
    e6e8:	00023467 	.word	0x00023467
    e6ec:	200025b0 	.word	0x200025b0
    e6f0:	2000248c 	.word	0x2000248c
    e6f4:	2000249b 	.word	0x2000249b

0000e6f8 <bt_mesh_prov_get>:
}

const struct bt_mesh_prov *bt_mesh_prov_get(void)
{
	return bt_mesh_prov;
}
    e6f8:	4b01      	ldr	r3, [pc, #4]	; (e700 <bt_mesh_prov_get+0x8>)
    e6fa:	6818      	ldr	r0, [r3, #0]
    e6fc:	4770      	bx	lr
    e6fe:	bf00      	nop
    e700:	20002488 	.word	0x20002488

0000e704 <bt_mesh_prov_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    e704:	4b04      	ldr	r3, [pc, #16]	; (e718 <bt_mesh_prov_active+0x14>)
    e706:	f3bf 8f5b 	dmb	ish
    e70a:	6818      	ldr	r0, [r3, #0]
    e70c:	f3bf 8f5b 	dmb	ish

bool bt_mesh_prov_active(void)
{
	return atomic_test_bit(bt_mesh_prov_link.flags, LINK_ACTIVE);
}
    e710:	f3c0 0040 	ubfx	r0, r0, #1, #1
    e714:	4770      	bx	lr
    e716:	bf00      	nop
    e718:	2000248c 	.word	0x2000248c

0000e71c <bt_mesh_prov_complete>:
	return &prov_bearer_cb;
}

void bt_mesh_prov_complete(uint16_t net_idx, uint16_t addr)
{
	if (bt_mesh_prov->complete) {
    e71c:	4b02      	ldr	r3, [pc, #8]	; (e728 <bt_mesh_prov_complete+0xc>)
    e71e:	681b      	ldr	r3, [r3, #0]
    e720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    e722:	b103      	cbz	r3, e726 <bt_mesh_prov_complete+0xa>
		bt_mesh_prov->complete(net_idx, addr);
    e724:	4718      	bx	r3
	}
}
    e726:	4770      	bx	lr
    e728:	20002488 	.word	0x20002488

0000e72c <bt_mesh_prov_reset>:

void bt_mesh_prov_reset(void)
{
    e72c:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_BT_MESH_PB_ADV)) {
		pb_adv_reset();
    e72e:	f014 fec2 	bl	234b6 <pb_adv_reset>
	}

	if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT)) {
		pb_gatt_reset();
    e732:	f014 fec3 	bl	234bc <pb_gatt_reset>
	}

	bt_mesh_prov_reset_state(NULL);
    e736:	2000      	movs	r0, #0
    e738:	f7ff ffb2 	bl	e6a0 <bt_mesh_prov_reset_state>

	if (bt_mesh_prov->reset) {
    e73c:	4b03      	ldr	r3, [pc, #12]	; (e74c <bt_mesh_prov_reset+0x20>)
    e73e:	681b      	ldr	r3, [r3, #0]
    e740:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    e742:	b113      	cbz	r3, e74a <bt_mesh_prov_reset+0x1e>
		bt_mesh_prov->reset();
	}
}
    e744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_mesh_prov->reset();
    e748:	4718      	bx	r3
}
    e74a:	bd10      	pop	{r4, pc}
    e74c:	20002488 	.word	0x20002488

0000e750 <bt_mesh_prov_init>:

int bt_mesh_prov_init(const struct bt_mesh_prov *prov_info)
{
    e750:	b508      	push	{r3, lr}
	if (!prov_info) {
    e752:	b150      	cbz	r0, e76a <bt_mesh_prov_init+0x1a>
		BT_ERR("No provisioning context provided");
		return -EINVAL;
	}

	bt_mesh_prov = prov_info;
    e754:	4b06      	ldr	r3, [pc, #24]	; (e770 <bt_mesh_prov_init+0x20>)
    e756:	6018      	str	r0, [r3, #0]

	if (IS_ENABLED(CONFIG_BT_MESH_PB_ADV)) {
		pb_adv_init();
    e758:	f000 fc90 	bl	f07c <pb_adv_init>
	}

	if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT)) {
		pb_gatt_init();
    e75c:	f000 fd5c 	bl	f218 <pb_gatt_init>
	}

	return bt_mesh_prov_reset_state(NULL);
}
    e760:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_mesh_prov_reset_state(NULL);
    e764:	2000      	movs	r0, #0
    e766:	f7ff bf9b 	b.w	e6a0 <bt_mesh_prov_reset_state>
}
    e76a:	f06f 0015 	mvn.w	r0, #21
    e76e:	bd08      	pop	{r3, pc}
    e770:	20002488 	.word	0x20002488

0000e774 <prov_failed>:
{
	return atomic_test_bit(link.flags, ADV_ACK_PENDING);
}

static void prov_failed(uint8_t err)
{
    e774:	b510      	push	{r4, lr}
	BT_DBG("%u", err);
	link.cb->error(&pb_adv, link.cb_data, err);
    e776:	4c06      	ldr	r4, [pc, #24]	; (e790 <prov_failed+0x1c>)
    e778:	68a3      	ldr	r3, [r4, #8]
    e77a:	68e1      	ldr	r1, [r4, #12]
    e77c:	689b      	ldr	r3, [r3, #8]
{
    e77e:	4602      	mov	r2, r0
	link.cb->error(&pb_adv, link.cb_data, err);
    e780:	4804      	ldr	r0, [pc, #16]	; (e794 <prov_failed+0x20>)
    e782:	4798      	blx	r3
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    e784:	1d20      	adds	r0, r4, #4
    e786:	2108      	movs	r1, #8
	atomic_set_bit(link.flags, ADV_LINK_INVALID);
}
    e788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e78c:	f014 be6c 	b.w	23468 <atomic_or>
    e790:	200001d0 	.word	0x200001d0
    e794:	00026f7c 	.word	0x00026f7c

0000e798 <send_reliable>:
/*******************************************************************************
 * TX
 ******************************************************************************/

static void send_reliable(void)
{
    e798:	b570      	push	{r4, r5, r6, lr}
    e79a:	4d0c      	ldr	r5, [pc, #48]	; (e7cc <send_reliable+0x34>)
	int i;

	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
    e79c:	2400      	movs	r4, #0
		struct net_buf *buf = link.tx.buf[i];
    e79e:	f855 0b04 	ldr.w	r0, [r5], #4

		if (!buf) {
    e7a2:	b150      	cbz	r0, e7ba <send_reliable+0x22>
			break;
		}

		if (BT_MESH_ADV(buf)->busy) {
    e7a4:	6943      	ldr	r3, [r0, #20]
    e7a6:	7a1a      	ldrb	r2, [r3, #8]
    e7a8:	f012 0208 	ands.w	r2, r2, #8
    e7ac:	d102      	bne.n	e7b4 <send_reliable+0x1c>
			continue;
		}

		BT_DBG("%u bytes: %s", buf->len, bt_hex(buf->data, buf->len));

		bt_mesh_adv_send(buf, NULL, NULL);
    e7ae:	4611      	mov	r1, r2
    e7b0:	f7fb fdbe 	bl	a330 <bt_mesh_adv_send>
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
    e7b4:	3401      	adds	r4, #1
    e7b6:	2c03      	cmp	r4, #3
    e7b8:	d1f1      	bne.n	e79e <send_reliable+0x6>
	}

	k_work_reschedule(&link.tx.retransmit, RETRANSMIT_TIMEOUT);
}
    e7ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&link.tx.retransmit, RETRANSMIT_TIMEOUT);
    e7be:	4804      	ldr	r0, [pc, #16]	; (e7d0 <send_reliable+0x38>)
    e7c0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    e7c4:	2300      	movs	r3, #0
    e7c6:	f00c bfa7 	b.w	1b718 <k_work_reschedule>
    e7ca:	bf00      	nop
    e7cc:	200001f4 	.word	0x200001f4
    e7d0:	20000208 	.word	0x20000208

0000e7d4 <free_segments>:
{
    e7d4:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
    e7d6:	2400      	movs	r4, #0
    e7d8:	4d08      	ldr	r5, [pc, #32]	; (e7fc <free_segments+0x28>)
		link.tx.buf[i] = NULL;
    e7da:	4626      	mov	r6, r4
		struct net_buf *buf = link.tx.buf[i];
    e7dc:	f855 0b04 	ldr.w	r0, [r5], #4
		if (!buf) {
    e7e0:	b158      	cbz	r0, e7fa <free_segments+0x26>
		BT_MESH_ADV(buf)->busy = 0U;
    e7e2:	6943      	ldr	r3, [r0, #20]
		link.tx.buf[i] = NULL;
    e7e4:	f845 6c04 	str.w	r6, [r5, #-4]
		BT_MESH_ADV(buf)->busy = 0U;
    e7e8:	7a1a      	ldrb	r2, [r3, #8]
    e7ea:	f366 02c3 	bfi	r2, r6, #3, #1
    e7ee:	721a      	strb	r2, [r3, #8]
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
    e7f0:	3401      	adds	r4, #1
		net_buf_unref(buf);
    e7f2:	f008 fc41 	bl	17078 <net_buf_unref>
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
    e7f6:	2c03      	cmp	r4, #3
    e7f8:	d1f0      	bne.n	e7dc <free_segments+0x8>
}
    e7fa:	bd70      	pop	{r4, r5, r6, pc}
    e7fc:	200001f4 	.word	0x200001f4

0000e800 <prov_clear_tx>:
{
    e800:	b508      	push	{r3, lr}
	(void)k_work_cancel_delayable(&link.tx.retransmit);
    e802:	4803      	ldr	r0, [pc, #12]	; (e810 <prov_clear_tx+0x10>)
    e804:	f017 fa52 	bl	25cac <k_work_cancel_delayable>
}
    e808:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	free_segments();
    e80c:	f7ff bfe2 	b.w	e7d4 <free_segments>
    e810:	20000208 	.word	0x20000208

0000e814 <bearer_ctl_send_unacked>:

	return 0;
}

static int bearer_ctl_send_unacked(struct net_buf *buf)
{
    e814:	b510      	push	{r4, lr}
	if (!buf) {
    e816:	4604      	mov	r4, r0
    e818:	b188      	cbz	r0, e83e <bearer_ctl_send_unacked+0x2a>
		return -ENOMEM;
	}

	prov_clear_tx();
    e81a:	f7ff fff1 	bl	e800 <prov_clear_tx>
	k_work_reschedule(&link.prot_timer, PROTOCOL_TIMEOUT);
    e81e:	2300      	movs	r3, #0
    e820:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
    e824:	4807      	ldr	r0, [pc, #28]	; (e844 <bearer_ctl_send_unacked+0x30>)
    e826:	f00c ff77 	bl	1b718 <k_work_reschedule>

	bt_mesh_adv_send(buf, &buf_sent_cb, NULL);
    e82a:	4907      	ldr	r1, [pc, #28]	; (e848 <bearer_ctl_send_unacked+0x34>)
    e82c:	2200      	movs	r2, #0
    e82e:	4620      	mov	r0, r4
    e830:	f7fb fd7e 	bl	a330 <bt_mesh_adv_send>
	net_buf_unref(buf);
    e834:	4620      	mov	r0, r4
    e836:	f008 fc1f 	bl	17078 <net_buf_unref>

	return 0;
    e83a:	2000      	movs	r0, #0
}
    e83c:	bd10      	pop	{r4, pc}
		return -ENOMEM;
    e83e:	f06f 000b 	mvn.w	r0, #11
    e842:	e7fb      	b.n	e83c <bearer_ctl_send_unacked+0x28>
    e844:	20000238 	.word	0x20000238
    e848:	20000698 	.word	0x20000698

0000e84c <atomic_get.constprop.0>:
    e84c:	4b03      	ldr	r3, [pc, #12]	; (e85c <atomic_get.constprop.0+0x10>)
    e84e:	f3bf 8f5b 	dmb	ish
    e852:	6858      	ldr	r0, [r3, #4]
    e854:	f3bf 8f5b 	dmb	ish
}
    e858:	4770      	bx	lr
    e85a:	bf00      	nop
    e85c:	200001d0 	.word	0x200001d0

0000e860 <prov_link_accept>:

	return bearer_ctl_send(ctl_buf_create(LINK_OPEN, uuid, 16, RETRANSMITS_RELIABLE));
}

static int prov_link_accept(const struct prov_bearer_cb *cb, void *cb_data)
{
    e860:	b570      	push	{r4, r5, r6, lr}
    e862:	4606      	mov	r6, r0
    e864:	460d      	mov	r5, r1
	int err;

	err = bt_mesh_adv_enable();
    e866:	f7ff f857 	bl	d918 <bt_mesh_adv_enable>
	if (err) {
    e86a:	4604      	mov	r4, r0
    e86c:	b978      	cbnz	r0, e88e <prov_link_accept+0x2e>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    e86e:	f7ff ffed 	bl	e84c <atomic_get.constprop.0>
		BT_ERR("Failed enabling advertiser");
		return err;
	}

	if (atomic_test_bit(link.flags, ADV_LINK_ACTIVE)) {
    e872:	07c3      	lsls	r3, r0, #31
    e874:	d40d      	bmi.n	e892 <prov_link_accept+0x32>
		return -EBUSY;
	}

	link.rx.id = XACT_ID_MAX;
    e876:	4b08      	ldr	r3, [pc, #32]	; (e898 <prov_link_accept+0x38>)
    e878:	227f      	movs	r2, #127	; 0x7f
    e87a:	741a      	strb	r2, [r3, #16]
	link.tx.id = XACT_ID_NVAL;
    e87c:	22ff      	movs	r2, #255	; 0xff
	link.cb = cb;
	link.cb_data = cb_data;
    e87e:	e9c3 6502 	strd	r6, r5, [r3, #8]
	link.tx.id = XACT_ID_NVAL;
    e882:	f883 2020 	strb.w	r2, [r3, #32]

	/* Make sure we're scanning for provisioning inviations */
	bt_mesh_scan_enable();
    e886:	f7fb fd69 	bl	a35c <bt_mesh_scan_enable>
	/* Enable unprovisioned beacon sending */
	bt_mesh_beacon_enable();
    e88a:	f7fb ff71 	bl	a770 <bt_mesh_beacon_enable>

	return 0;
}
    e88e:	4620      	mov	r0, r4
    e890:	bd70      	pop	{r4, r5, r6, pc}
		return -EBUSY;
    e892:	f06f 040f 	mvn.w	r4, #15
    e896:	e7fa      	b.n	e88e <prov_link_accept+0x2e>
    e898:	200001d0 	.word	0x200001d0

0000e89c <gen_prov_ack>:
{
    e89c:	b510      	push	{r4, lr}
	if (!link.tx.buf[0]) {
    e89e:	4c0b      	ldr	r4, [pc, #44]	; (e8cc <gen_prov_ack+0x30>)
    e8a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e8a2:	b18b      	cbz	r3, e8c8 <gen_prov_ack+0x2c>
	if (rx->xact_id == link.tx.id) {
    e8a4:	7902      	ldrb	r2, [r0, #4]
    e8a6:	f894 3020 	ldrb.w	r3, [r4, #32]
    e8aa:	429a      	cmp	r2, r3
    e8ac:	d10c      	bne.n	e8c8 <gen_prov_ack+0x2c>
    e8ae:	f7ff ffcd 	bl	e84c <atomic_get.constprop.0>
		if (!atomic_test_bit(link.flags, ADV_LINK_CLOSING)) {
    e8b2:	0743      	lsls	r3, r0, #29
    e8b4:	d401      	bmi.n	e8ba <gen_prov_ack+0x1e>
			prov_clear_tx();
    e8b6:	f7ff ffa3 	bl	e800 <prov_clear_tx>
		if (link.tx.cb) {
    e8ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e8bc:	b123      	cbz	r3, e8c8 <gen_prov_ack+0x2c>
			link.tx.cb(0, link.tx.cb_data);
    e8be:	6b61      	ldr	r1, [r4, #52]	; 0x34
    e8c0:	2000      	movs	r0, #0
}
    e8c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			link.tx.cb(0, link.tx.cb_data);
    e8c6:	4718      	bx	r3
}
    e8c8:	bd10      	pop	{r4, pc}
    e8ca:	bf00      	nop
    e8cc:	200001d0 	.word	0x200001d0

0000e8d0 <reset_adv_link>:
{
    e8d0:	b510      	push	{r4, lr}
	(void)k_work_cancel_delayable(&link.prot_timer);
    e8d2:	4c18      	ldr	r4, [pc, #96]	; (e934 <reset_adv_link+0x64>)
	prov_clear_tx();
    e8d4:	f7ff ff94 	bl	e800 <prov_clear_tx>
	(void)k_work_cancel_delayable(&link.prot_timer);
    e8d8:	f104 0068 	add.w	r0, r4, #104	; 0x68
    e8dc:	f017 f9e6 	bl	25cac <k_work_cancel_delayable>
    e8e0:	f7ff ffb4 	bl	e84c <atomic_get.constprop.0>
	if (atomic_test_bit(link.flags, ADV_PROVISIONER)) {
    e8e4:	0683      	lsls	r3, r0, #26
    e8e6:	f3c0 1240 	ubfx	r2, r0, #5, #1
    e8ea:	d510      	bpl.n	e90e <reset_adv_link+0x3e>
		(void)memset(&link, 0, offsetof(struct pb_adv, tx.retransmit));
    e8ec:	2238      	movs	r2, #56	; 0x38
    e8ee:	2100      	movs	r1, #0
    e8f0:	4620      	mov	r0, r4
    e8f2:	f00f fba9 	bl	1e048 <memset>
		link.rx.id = XACT_ID_NVAL;
    e8f6:	23ff      	movs	r3, #255	; 0xff
    e8f8:	7423      	strb	r3, [r4, #16]
	link.tx.pending_ack = XACT_ID_NVAL;
    e8fa:	23ff      	movs	r3, #255	; 0xff
    e8fc:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	link.rx.buf = &rx_buf;
    e900:	4b0d      	ldr	r3, [pc, #52]	; (e938 <reset_adv_link+0x68>)
    e902:	6163      	str	r3, [r4, #20]
	buf->len  = 0U;
    e904:	2200      	movs	r2, #0
    e906:	809a      	strh	r2, [r3, #4]
	buf->data = buf->__buf;
    e908:	689a      	ldr	r2, [r3, #8]
    e90a:	601a      	str	r2, [r3, #0]
}
    e90c:	bd10      	pop	{r4, pc}
		link.id = 0;
    e90e:	4623      	mov	r3, r4
    e910:	f843 2b04 	str.w	r2, [r3], #4
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    e914:	f3bf 8f5b 	dmb	ish
    e918:	e853 1f00 	ldrex	r1, [r3]
    e91c:	e843 2000 	strex	r0, r2, [r3]
    e920:	2800      	cmp	r0, #0
    e922:	d1f9      	bne.n	e918 <reset_adv_link+0x48>
    e924:	f3bf 8f5b 	dmb	ish
		link.rx.id = XACT_ID_MAX;
    e928:	237f      	movs	r3, #127	; 0x7f
    e92a:	7423      	strb	r3, [r4, #16]
		link.tx.id = XACT_ID_NVAL;
    e92c:	23ff      	movs	r3, #255	; 0xff
    e92e:	f884 3020 	strb.w	r3, [r4, #32]
    e932:	e7e2      	b.n	e8fa <reset_adv_link+0x2a>
    e934:	200001d0 	.word	0x200001d0
    e938:	200006a0 	.word	0x200006a0

0000e93c <close_link>:
{
    e93c:	b570      	push	{r4, r5, r6, lr}
	const struct prov_bearer_cb *cb = link.cb;
    e93e:	4b06      	ldr	r3, [pc, #24]	; (e958 <close_link+0x1c>)
	void *cb_data = link.cb_data;
    e940:	e9d3 6502 	ldrd	r6, r5, [r3, #8]
{
    e944:	4604      	mov	r4, r0
	reset_adv_link();
    e946:	f7ff ffc3 	bl	e8d0 <reset_adv_link>
	cb->link_closed(&pb_adv, cb_data, reason);
    e94a:	6873      	ldr	r3, [r6, #4]
    e94c:	4803      	ldr	r0, [pc, #12]	; (e95c <close_link+0x20>)
    e94e:	4622      	mov	r2, r4
    e950:	4629      	mov	r1, r5
}
    e952:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb->link_closed(&pb_adv, cb_data, reason);
    e956:	4718      	bx	r3
    e958:	200001d0 	.word	0x200001d0
    e95c:	00026f7c 	.word	0x00026f7c

0000e960 <ctl_buf_create>:
{
    e960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e964:	4605      	mov	r5, r0
	buf = adv_buf_create(retransmits);
    e966:	4618      	mov	r0, r3
{
    e968:	460f      	mov	r7, r1
    e96a:	4690      	mov	r8, r2
	buf = adv_buf_create(retransmits);
    e96c:	f014 fd8b 	bl	23486 <adv_buf_create>
	if (!buf) {
    e970:	4604      	mov	r4, r0
    e972:	b1b0      	cbz	r0, e9a2 <ctl_buf_create+0x42>
	net_buf_add_be32(buf, link.id);
    e974:	4b0c      	ldr	r3, [pc, #48]	; (e9a8 <ctl_buf_create+0x48>)
	net_buf_simple_add_be32(&buf->b, val);
    e976:	f100 0608 	add.w	r6, r0, #8
    e97a:	6819      	ldr	r1, [r3, #0]
    e97c:	4630      	mov	r0, r6
	net_buf_add_u8(buf, GPC_CTL(op));
    e97e:	00ad      	lsls	r5, r5, #2
    e980:	f016 fa0c 	bl	24d9c <net_buf_simple_add_be32>
    e984:	f045 0503 	orr.w	r5, r5, #3
	net_buf_add_u8(buf, 0x00);
    e988:	2100      	movs	r1, #0
    e98a:	4620      	mov	r0, r4
    e98c:	f014 fd8a 	bl	234a4 <net_buf_add_u8.isra.0>
	net_buf_add_u8(buf, GPC_CTL(op));
    e990:	b2e9      	uxtb	r1, r5
    e992:	4620      	mov	r0, r4
    e994:	f014 fd86 	bl	234a4 <net_buf_add_u8.isra.0>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    e998:	4642      	mov	r2, r8
    e99a:	4639      	mov	r1, r7
    e99c:	4630      	mov	r0, r6
    e99e:	f016 f9c0 	bl	24d22 <net_buf_simple_add_mem>
}
    e9a2:	4620      	mov	r0, r4
    e9a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e9a8:	200001d0 	.word	0x200001d0

0000e9ac <gen_prov_ctl>:
{
    e9ac:	b570      	push	{r4, r5, r6, lr}
	switch (BEARER_CTL(rx->gpc)) {
    e9ae:	7942      	ldrb	r2, [r0, #5]
    e9b0:	0892      	lsrs	r2, r2, #2
    e9b2:	2a01      	cmp	r2, #1
{
    e9b4:	4605      	mov	r5, r0
	switch (BEARER_CTL(rx->gpc)) {
    e9b6:	d043      	beq.n	ea40 <gen_prov_ctl+0x94>
    e9b8:	2a02      	cmp	r2, #2
    e9ba:	d056      	beq.n	ea6a <gen_prov_ctl+0xbe>
    e9bc:	2a00      	cmp	r2, #0
    e9be:	d162      	bne.n	ea86 <gen_prov_ctl+0xda>
	if (buf->len < 16) {
    e9c0:	888b      	ldrh	r3, [r1, #4]
    e9c2:	2b0f      	cmp	r3, #15
    e9c4:	d95f      	bls.n	ea86 <gen_prov_ctl+0xda>
    e9c6:	f7ff ff41 	bl	e84c <atomic_get.constprop.0>
	if (atomic_test_bit(link.flags, ADV_LINK_ACTIVE)) {
    e9ca:	07c4      	lsls	r4, r0, #31
    e9cc:	d50d      	bpl.n	e9ea <gen_prov_ctl+0x3e>
		if (link.id != rx->link_id) {
    e9ce:	4b2e      	ldr	r3, [pc, #184]	; (ea88 <gen_prov_ctl+0xdc>)
    e9d0:	6819      	ldr	r1, [r3, #0]
    e9d2:	682b      	ldr	r3, [r5, #0]
    e9d4:	4299      	cmp	r1, r3
    e9d6:	d156      	bne.n	ea86 <gen_prov_ctl+0xda>
		(void)bearer_ctl_send_unacked(ctl_buf_create(LINK_ACK, NULL, 0, RETRANSMITS_ACK));
    e9d8:	2302      	movs	r3, #2
    e9da:	4611      	mov	r1, r2
    e9dc:	2001      	movs	r0, #1
    e9de:	f7ff ffbf 	bl	e960 <ctl_buf_create>
}
    e9e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		(void)bearer_ctl_send_unacked(ctl_buf_create(LINK_ACK, NULL, 0, RETRANSMITS_ACK));
    e9e6:	f7ff bf15 	b.w	e814 <bearer_ctl_send_unacked>
	if (memcmp(buf->data, bt_mesh_prov_get()->uuid, 16)) {
    e9ea:	680c      	ldr	r4, [r1, #0]
    e9ec:	f7ff fe84 	bl	e6f8 <bt_mesh_prov_get>
    e9f0:	2210      	movs	r2, #16
    e9f2:	6801      	ldr	r1, [r0, #0]
    e9f4:	4620      	mov	r0, r4
    e9f6:	f00f fb0b 	bl	1e010 <memcmp>
    e9fa:	4604      	mov	r4, r0
    e9fc:	2800      	cmp	r0, #0
    e9fe:	d142      	bne.n	ea86 <gen_prov_ctl+0xda>
	link.id = rx->link_id;
    ea00:	4e21      	ldr	r6, [pc, #132]	; (ea88 <gen_prov_ctl+0xdc>)
    ea02:	682b      	ldr	r3, [r5, #0]
    ea04:	4630      	mov	r0, r6
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    ea06:	2101      	movs	r1, #1
    ea08:	f840 3b04 	str.w	r3, [r0], #4
    ea0c:	f014 fd2c 	bl	23468 <atomic_or>
	net_buf_simple_reset(link.rx.buf);
    ea10:	6973      	ldr	r3, [r6, #20]
	buf->data = buf->__buf;
    ea12:	689a      	ldr	r2, [r3, #8]
    ea14:	601a      	str	r2, [r3, #0]
	buf->len  = 0U;
    ea16:	809c      	strh	r4, [r3, #4]
	err = bearer_ctl_send_unacked(ctl_buf_create(LINK_ACK, NULL, 0, RETRANSMITS_ACK));
    ea18:	4622      	mov	r2, r4
    ea1a:	2302      	movs	r3, #2
    ea1c:	4621      	mov	r1, r4
    ea1e:	2001      	movs	r0, #1
    ea20:	f7ff ff9e 	bl	e960 <ctl_buf_create>
    ea24:	f7ff fef6 	bl	e814 <bearer_ctl_send_unacked>
	if (err) {
    ea28:	b118      	cbz	r0, ea32 <gen_prov_ctl+0x86>
}
    ea2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		reset_adv_link();
    ea2e:	f7ff bf4f 	b.w	e8d0 <reset_adv_link>
	link.cb->link_opened(&pb_adv, link.cb_data);
    ea32:	68b3      	ldr	r3, [r6, #8]
    ea34:	68f1      	ldr	r1, [r6, #12]
    ea36:	681b      	ldr	r3, [r3, #0]
		link.cb->link_opened(&pb_adv, link.cb_data);
    ea38:	4814      	ldr	r0, [pc, #80]	; (ea8c <gen_prov_ctl+0xe0>)
}
    ea3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		link.cb->link_opened(&pb_adv, link.cb_data);
    ea3e:	4718      	bx	r3
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    ea40:	f7ff ff04 	bl	e84c <atomic_get.constprop.0>
		if (!atomic_test_bit(link.flags, ADV_LINK_ACTIVE)) {
    ea44:	07c0      	lsls	r0, r0, #31
    ea46:	d51e      	bpl.n	ea86 <gen_prov_ctl+0xda>
    ea48:	f7ff ff00 	bl	e84c <atomic_get.constprop.0>
	if (atomic_test_bit(link.flags, ADV_PROVISIONER)) {
    ea4c:	0681      	lsls	r1, r0, #26
    ea4e:	d51a      	bpl.n	ea86 <gen_prov_ctl+0xda>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    ea50:	4c0d      	ldr	r4, [pc, #52]	; (ea88 <gen_prov_ctl+0xdc>)
    ea52:	2102      	movs	r1, #2
    ea54:	1d20      	adds	r0, r4, #4
    ea56:	f014 fd07 	bl	23468 <atomic_or>
		if (atomic_test_and_set_bit(link.flags, ADV_LINK_ACK_RECVD)) {
    ea5a:	0782      	lsls	r2, r0, #30
    ea5c:	d413      	bmi.n	ea86 <gen_prov_ctl+0xda>
		prov_clear_tx();
    ea5e:	f7ff fecf 	bl	e800 <prov_clear_tx>
		link.cb->link_opened(&pb_adv, link.cb_data);
    ea62:	68a3      	ldr	r3, [r4, #8]
    ea64:	68e1      	ldr	r1, [r4, #12]
    ea66:	681b      	ldr	r3, [r3, #0]
    ea68:	e7e6      	b.n	ea38 <gen_prov_ctl+0x8c>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    ea6a:	f7ff feef 	bl	e84c <atomic_get.constprop.0>
		if (!atomic_test_bit(link.flags, ADV_LINK_ACTIVE)) {
    ea6e:	07c3      	lsls	r3, r0, #31
    ea70:	d509      	bpl.n	ea86 <gen_prov_ctl+0xda>
	if (buf->len != 1) {
    ea72:	888b      	ldrh	r3, [r1, #4]
    ea74:	2b01      	cmp	r3, #1
    ea76:	d106      	bne.n	ea86 <gen_prov_ctl+0xda>
	close_link(net_buf_simple_pull_u8(buf));
    ea78:	4608      	mov	r0, r1
    ea7a:	f016 f9d7 	bl	24e2c <net_buf_simple_pull_u8>
}
    ea7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	close_link(net_buf_simple_pull_u8(buf));
    ea82:	f7ff bf5b 	b.w	e93c <close_link>
}
    ea86:	bd70      	pop	{r4, r5, r6, pc}
    ea88:	200001d0 	.word	0x200001d0
    ea8c:	00026f7c 	.word	0x00026f7c

0000ea90 <prov_link_close>:

static void prov_link_close(enum prov_bearer_link_status status)
{
    ea90:	b507      	push	{r0, r1, r2, lr}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    ea92:	2104      	movs	r1, #4
    ea94:	f88d 0007 	strb.w	r0, [sp, #7]
    ea98:	4808      	ldr	r0, [pc, #32]	; (eabc <prov_link_close+0x2c>)
    ea9a:	f014 fce5 	bl	23468 <atomic_or>
	if (atomic_test_and_set_bit(link.flags, ADV_LINK_CLOSING)) {
    ea9e:	0743      	lsls	r3, r0, #29
    eaa0:	d408      	bmi.n	eab4 <prov_link_close+0x24>
		return;
	}

	/* Ignore errors, the link will time out eventually if this doesn't get sent */
	bearer_ctl_send_unacked(ctl_buf_create(LINK_CLOSE, &status, 1, RETRANSMITS_LINK_CLOSE));
    eaa2:	2302      	movs	r3, #2
    eaa4:	2201      	movs	r2, #1
    eaa6:	f10d 0107 	add.w	r1, sp, #7
    eaaa:	4618      	mov	r0, r3
    eaac:	f7ff ff58 	bl	e960 <ctl_buf_create>
    eab0:	f7ff feb0 	bl	e814 <bearer_ctl_send_unacked>
}
    eab4:	b003      	add	sp, #12
    eab6:	f85d fb04 	ldr.w	pc, [sp], #4
    eaba:	bf00      	nop
    eabc:	200001d4 	.word	0x200001d4

0000eac0 <protocol_timeout>:
{
    eac0:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    eac2:	f7ff fec3 	bl	e84c <atomic_get.constprop.0>
	if (!atomic_test_bit(link.flags, ADV_LINK_ACTIVE)) {
    eac6:	07c3      	lsls	r3, r0, #31
    eac8:	d507      	bpl.n	eada <protocol_timeout+0x1a>
	link.rx.seg = 0U;
    eaca:	4b04      	ldr	r3, [pc, #16]	; (eadc <protocol_timeout+0x1c>)
    eacc:	2200      	movs	r2, #0
    eace:	745a      	strb	r2, [r3, #17]
}
    ead0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	prov_link_close(PROV_BEARER_LINK_STATUS_TIMEOUT);
    ead4:	2001      	movs	r0, #1
    ead6:	f7ff bfdb 	b.w	ea90 <prov_link_close>
}
    eada:	bd08      	pop	{r3, pc}
    eadc:	200001d0 	.word	0x200001d0

0000eae0 <prov_retransmit>:
{
    eae0:	b508      	push	{r3, lr}
    eae2:	f7ff feb3 	bl	e84c <atomic_get.constprop.0>
	if (!atomic_test_bit(link.flags, ADV_LINK_ACTIVE)) {
    eae6:	07c3      	lsls	r3, r0, #31
    eae8:	d521      	bpl.n	eb2e <prov_retransmit+0x4e>
    eaea:	f017 fa5f 	bl	25fac <z_impl_k_uptime_ticks>
    eaee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    eaf2:	fba0 0302 	umull	r0, r3, r0, r2
    eaf6:	fb02 3101 	mla	r1, r2, r1, r3
	if (k_uptime_get() - link.tx.start > TRANSACTION_TIMEOUT) {
    eafa:	4a0d      	ldr	r2, [pc, #52]	; (eb30 <prov_retransmit+0x50>)
    eafc:	e9d2 3206 	ldrd	r3, r2, [r2, #24]
    eb00:	0bc0      	lsrs	r0, r0, #15
    eb02:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
    eb06:	1ac0      	subs	r0, r0, r3
    eb08:	ea4f 31d1 	mov.w	r1, r1, lsr #15
    eb0c:	f247 5331 	movw	r3, #30001	; 0x7531
    eb10:	eb61 0102 	sbc.w	r1, r1, r2
    eb14:	4298      	cmp	r0, r3
    eb16:	f171 0300 	sbcs.w	r3, r1, #0
    eb1a:	db04      	blt.n	eb26 <prov_retransmit+0x46>
}
    eb1c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		prov_link_close(PROV_BEARER_LINK_STATUS_FAIL);
    eb20:	2002      	movs	r0, #2
    eb22:	f7ff bfb5 	b.w	ea90 <prov_link_close>
}
    eb26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	send_reliable();
    eb2a:	f7ff be35 	b.w	e798 <send_reliable>
}
    eb2e:	bd08      	pop	{r3, pc}
    eb30:	200001d0 	.word	0x200001d0

0000eb34 <gen_prov_ack_send>:
{
    eb34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    eb36:	4e1e      	ldr	r6, [pc, #120]	; (ebb0 <gen_prov_ack_send+0x7c>)
    eb38:	2110      	movs	r1, #16
    eb3a:	4605      	mov	r5, r0
    eb3c:	1d30      	adds	r0, r6, #4
    eb3e:	f014 fc93 	bl	23468 <atomic_or>
	if (pending && link.tx.pending_ack == xact_id) {
    eb42:	ea10 0701 	ands.w	r7, r0, r1
    eb46:	d003      	beq.n	eb50 <gen_prov_ack_send+0x1c>
    eb48:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
    eb4c:	42ab      	cmp	r3, r5
    eb4e:	d011      	beq.n	eb74 <gen_prov_ack_send+0x40>
	buf = adv_buf_create(RETRANSMITS_ACK);
    eb50:	2002      	movs	r0, #2
    eb52:	f014 fc98 	bl	23486 <adv_buf_create>
	if (!buf) {
    eb56:	4604      	mov	r4, r0
    eb58:	b968      	cbnz	r0, eb76 <gen_prov_ack_send+0x42>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    eb5a:	4b16      	ldr	r3, [pc, #88]	; (ebb4 <gen_prov_ack_send+0x80>)
    eb5c:	f3bf 8f5b 	dmb	ish
    eb60:	e853 2f00 	ldrex	r2, [r3]
    eb64:	f022 0210 	bic.w	r2, r2, #16
    eb68:	e843 2100 	strex	r1, r2, [r3]
    eb6c:	2900      	cmp	r1, #0
    eb6e:	d1f7      	bne.n	eb60 <gen_prov_ack_send+0x2c>
    eb70:	f3bf 8f5b 	dmb	ish
}
    eb74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (pending) {
    eb76:	b9cf      	cbnz	r7, ebac <gen_prov_ack_send+0x78>
		complete = &cb;
    eb78:	4f0f      	ldr	r7, [pc, #60]	; (ebb8 <gen_prov_ack_send+0x84>)
		link.tx.pending_ack = xact_id;
    eb7a:	f886 5021 	strb.w	r5, [r6, #33]	; 0x21
	net_buf_simple_add_be32(&buf->b, val);
    eb7e:	6831      	ldr	r1, [r6, #0]
    eb80:	f104 0008 	add.w	r0, r4, #8
    eb84:	f016 f90a 	bl	24d9c <net_buf_simple_add_be32>
	net_buf_add_u8(buf, xact_id);
    eb88:	4629      	mov	r1, r5
    eb8a:	4620      	mov	r0, r4
    eb8c:	f014 fc8a 	bl	234a4 <net_buf_add_u8.isra.0>
	net_buf_add_u8(buf, GPC_ACK);
    eb90:	4620      	mov	r0, r4
    eb92:	2101      	movs	r1, #1
    eb94:	f014 fc86 	bl	234a4 <net_buf_add_u8.isra.0>
	bt_mesh_adv_send(buf, complete, NULL);
    eb98:	4620      	mov	r0, r4
    eb9a:	4639      	mov	r1, r7
    eb9c:	2200      	movs	r2, #0
    eb9e:	f7fb fbc7 	bl	a330 <bt_mesh_adv_send>
	net_buf_unref(buf);
    eba2:	4620      	mov	r0, r4
}
    eba4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	net_buf_unref(buf);
    eba8:	f008 ba66 	b.w	17078 <net_buf_unref>
		complete = NULL;
    ebac:	2700      	movs	r7, #0
    ebae:	e7e6      	b.n	eb7e <gen_prov_ack_send+0x4a>
    ebb0:	200001d0 	.word	0x200001d0
    ebb4:	200001d4 	.word	0x200001d4
    ebb8:	00026f54 	.word	0x00026f54

0000ebbc <prov_msg_recv>:
{
    ebbc:	b510      	push	{r4, lr}
	k_work_reschedule(&link.prot_timer, PROTOCOL_TIMEOUT);
    ebbe:	4c11      	ldr	r4, [pc, #68]	; (ec04 <prov_msg_recv+0x48>)
    ebc0:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
    ebc4:	2300      	movs	r3, #0
    ebc6:	f104 0068 	add.w	r0, r4, #104	; 0x68
    ebca:	f00c fda5 	bl	1b718 <k_work_reschedule>
	if (!bt_mesh_fcs_check(link.rx.buf, link.rx.fcs)) {
    ebce:	7ce1      	ldrb	r1, [r4, #19]
    ebd0:	6960      	ldr	r0, [r4, #20]
    ebd2:	f7fe f8dd 	bl	cd90 <bt_mesh_fcs_check>
    ebd6:	b198      	cbz	r0, ec00 <prov_msg_recv+0x44>
	gen_prov_ack_send(link.rx.id);
    ebd8:	7c20      	ldrb	r0, [r4, #16]
    ebda:	f7ff ffab 	bl	eb34 <gen_prov_ack_send>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    ebde:	f7ff fe35 	bl	e84c <atomic_get.constprop.0>
	if (atomic_test_bit(link.flags, ADV_LINK_INVALID)) {
    ebe2:	0703      	lsls	r3, r0, #28
    ebe4:	d504      	bpl.n	ebf0 <prov_msg_recv+0x34>
}
    ebe6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		prov_failed(PROV_ERR_UNEXP_PDU);
    ebea:	2003      	movs	r0, #3
    ebec:	f7ff bdc2 	b.w	e774 <prov_failed>
	link.cb->recv(&pb_adv, link.cb_data, link.rx.buf);
    ebf0:	68a3      	ldr	r3, [r4, #8]
    ebf2:	6962      	ldr	r2, [r4, #20]
    ebf4:	68e1      	ldr	r1, [r4, #12]
    ebf6:	68db      	ldr	r3, [r3, #12]
    ebf8:	4803      	ldr	r0, [pc, #12]	; (ec08 <prov_msg_recv+0x4c>)
}
    ebfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	link.cb->recv(&pb_adv, link.cb_data, link.rx.buf);
    ebfe:	4718      	bx	r3
}
    ec00:	bd10      	pop	{r4, pc}
    ec02:	bf00      	nop
    ec04:	200001d0 	.word	0x200001d0
    ec08:	00026f7c 	.word	0x00026f7c

0000ec0c <gen_prov_cont>:
{
    ec0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!link.rx.seg && link.rx.id == rx->xact_id) {
    ec0e:	4c31      	ldr	r4, [pc, #196]	; (ecd4 <gen_prov_cont+0xc8>)
	uint8_t seg = CONT_SEG_INDEX(rx->gpc);
    ec10:	7947      	ldrb	r7, [r0, #5]
	if (!link.rx.seg && link.rx.id == rx->xact_id) {
    ec12:	7c23      	ldrb	r3, [r4, #16]
{
    ec14:	4602      	mov	r2, r0
    ec16:	460d      	mov	r5, r1
	if (!link.rx.seg && link.rx.id == rx->xact_id) {
    ec18:	7901      	ldrb	r1, [r0, #4]
    ec1a:	7c60      	ldrb	r0, [r4, #17]
    ec1c:	bb38      	cbnz	r0, ec6e <gen_prov_cont+0x62>
    ec1e:	428b      	cmp	r3, r1
    ec20:	d108      	bne.n	ec34 <gen_prov_cont+0x28>
    ec22:	f7ff fe13 	bl	e84c <atomic_get.constprop.0>
		if (!ack_pending()) {
    ec26:	06c4      	lsls	r4, r0, #27
    ec28:	d423      	bmi.n	ec72 <gen_prov_cont+0x66>
}
    ec2a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			gen_prov_ack_send(rx->xact_id);
    ec2e:	7910      	ldrb	r0, [r2, #4]
    ec30:	f7ff bf80 	b.w	eb34 <gen_prov_ack_send>
	return (((id + 1) & XACT_ID_MAX) | (id & (XACT_ID_MAX+1)));
    ec34:	1c5a      	adds	r2, r3, #1
    ec36:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    ec3a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
	if (!link.rx.seg &&
    ec3e:	4313      	orrs	r3, r2
    ec40:	428b      	cmp	r3, r1
    ec42:	d116      	bne.n	ec72 <gen_prov_cont+0x66>
		link.rx.id = rx->xact_id;
    ec44:	7423      	strb	r3, [r4, #16]
		net_buf_simple_reset(link.rx.buf);
    ec46:	6963      	ldr	r3, [r4, #20]
	buf->data = buf->__buf;
    ec48:	689a      	ldr	r2, [r3, #8]
	buf->len  = 0U;
    ec4a:	8098      	strh	r0, [r3, #4]
	buf->data = buf->__buf;
    ec4c:	601a      	str	r2, [r3, #0]
		link.rx.seg = SEG_NVAL;
    ec4e:	23ff      	movs	r3, #255	; 0xff
    ec50:	7463      	strb	r3, [r4, #17]
		link.rx.last_seg = SEG_NVAL;
    ec52:	74a3      	strb	r3, [r4, #18]
		prov_clear_tx();
    ec54:	f7ff fdd4 	bl	e800 <prov_clear_tx>
	if (seg > link.rx.last_seg) {
    ec58:	7ca3      	ldrb	r3, [r4, #18]
    ec5a:	ebb3 0f97 	cmp.w	r3, r7, lsr #2
	uint8_t seg = CONT_SEG_INDEX(rx->gpc);
    ec5e:	ea4f 0697 	mov.w	r6, r7, lsr #2
	if (seg > link.rx.last_seg) {
    ec62:	d207      	bcs.n	ec74 <gen_prov_cont+0x68>
}
    ec64:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		prov_failed(PROV_ERR_NVAL_FMT);
    ec68:	2002      	movs	r0, #2
    ec6a:	f7ff bd83 	b.w	e774 <prov_failed>
	} else if (rx->xact_id != link.rx.id) {
    ec6e:	428b      	cmp	r3, r1
    ec70:	d0f2      	beq.n	ec58 <gen_prov_cont+0x4c>
}
    ec72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!(link.rx.seg & BIT(seg))) {
    ec74:	7c63      	ldrb	r3, [r4, #17]
    ec76:	40f3      	lsrs	r3, r6
    ec78:	07d8      	lsls	r0, r3, #31
    ec7a:	d5fa      	bpl.n	ec72 <gen_prov_cont+0x66>
	memcpy(XACT_SEG_DATA(seg), buf->data, buf->len);
    ec7c:	6962      	ldr	r2, [r4, #20]
    ec7e:	6829      	ldr	r1, [r5, #0]
    ec80:	2017      	movs	r0, #23
    ec82:	1e73      	subs	r3, r6, #1
    ec84:	4343      	muls	r3, r0
    ec86:	6810      	ldr	r0, [r2, #0]
    ec88:	88aa      	ldrh	r2, [r5, #4]
    ec8a:	3314      	adds	r3, #20
    ec8c:	4418      	add	r0, r3
    ec8e:	f00f f9d0 	bl	1e032 <memcpy>
	XACT_SEG_RECV(seg);
    ec92:	2201      	movs	r2, #1
    ec94:	fa02 f306 	lsl.w	r3, r2, r6
    ec98:	7c62      	ldrb	r2, [r4, #17]
    ec9a:	ea22 0203 	bic.w	r2, r2, r3
	if (seg == link.rx.last_seg && !(link.rx.seg & BIT(0))) {
    ec9e:	7ca3      	ldrb	r3, [r4, #18]
	XACT_SEG_RECV(seg);
    eca0:	7462      	strb	r2, [r4, #17]
	if (seg == link.rx.last_seg && !(link.rx.seg & BIT(0))) {
    eca2:	42b3      	cmp	r3, r6
    eca4:	d10f      	bne.n	ecc6 <gen_prov_cont+0xba>
    eca6:	07d1      	lsls	r1, r2, #31
    eca8:	d4e3      	bmi.n	ec72 <gen_prov_cont+0x66>
		expect_len = (link.rx.buf->len - 20U -
    ecaa:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
    ecae:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    ecb2:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    ecb6:	6961      	ldr	r1, [r4, #20]
    ecb8:	8889      	ldrh	r1, [r1, #4]
    ecba:	3303      	adds	r3, #3
    ecbc:	440b      	add	r3, r1
		if (expect_len != buf->len) {
    ecbe:	88a9      	ldrh	r1, [r5, #4]
    ecc0:	b2db      	uxtb	r3, r3
    ecc2:	428b      	cmp	r3, r1
    ecc4:	d1ce      	bne.n	ec64 <gen_prov_cont+0x58>
	if (!link.rx.seg) {
    ecc6:	2a00      	cmp	r2, #0
    ecc8:	d1d3      	bne.n	ec72 <gen_prov_cont+0x66>
}
    ecca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		prov_msg_recv();
    ecce:	f7ff bf75 	b.w	ebbc <prov_msg_recv>
    ecd2:	bf00      	nop
    ecd4:	200001d0 	.word	0x200001d0

0000ecd8 <gen_prov_start>:
{
    ecd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (rx->xact_id == link.rx.id) {
    ecda:	4c34      	ldr	r4, [pc, #208]	; (edac <gen_prov_start+0xd4>)
{
    ecdc:	460d      	mov	r5, r1
	if (rx->xact_id == link.rx.id) {
    ecde:	7c22      	ldrb	r2, [r4, #16]
    ece0:	7901      	ldrb	r1, [r0, #4]
    ece2:	4291      	cmp	r1, r2
{
    ece4:	4606      	mov	r6, r0
	if (rx->xact_id == link.rx.id) {
    ece6:	d10d      	bne.n	ed04 <gen_prov_start+0x2c>
		if (!link.rx.seg) {
    ece8:	7c63      	ldrb	r3, [r4, #17]
    ecea:	b943      	cbnz	r3, ecfe <gen_prov_start+0x26>
    ecec:	f7ff fdae 	bl	e84c <atomic_get.constprop.0>
			if (!ack_pending()) {
    ecf0:	06c1      	lsls	r1, r0, #27
    ecf2:	d406      	bmi.n	ed02 <gen_prov_start+0x2a>
				gen_prov_ack_send(rx->xact_id);
    ecf4:	7930      	ldrb	r0, [r6, #4]
}
    ecf6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				gen_prov_ack_send(rx->xact_id);
    ecfa:	f7ff bf1b 	b.w	eb34 <gen_prov_ack_send>
		if (!(link.rx.seg & BIT(0))) {
    ecfe:	07da      	lsls	r2, r3, #31
    ed00:	d408      	bmi.n	ed14 <gen_prov_start+0x3c>
}
    ed02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (((id + 1) & XACT_ID_MAX) | (id & (XACT_ID_MAX+1)));
    ed04:	1c53      	adds	r3, r2, #1
    ed06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    ed0a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
	} else if (rx->xact_id != next_transaction_id(link.rx.id)) {
    ed0e:	4313      	orrs	r3, r2
    ed10:	4299      	cmp	r1, r3
    ed12:	d1f6      	bne.n	ed02 <gen_prov_start+0x2a>
	net_buf_simple_reset(link.rx.buf);
    ed14:	6967      	ldr	r7, [r4, #20]
	buf->len  = 0U;
    ed16:	2300      	movs	r3, #0
    ed18:	80bb      	strh	r3, [r7, #4]
	buf->data = buf->__buf;
    ed1a:	68bb      	ldr	r3, [r7, #8]
    ed1c:	603b      	str	r3, [r7, #0]
	link.rx.buf->len = net_buf_simple_pull_be16(buf);
    ed1e:	4628      	mov	r0, r5
    ed20:	f016 f894 	bl	24e4c <net_buf_simple_pull_be16>
    ed24:	80b8      	strh	r0, [r7, #4]
	link.rx.id = rx->xact_id;
    ed26:	7933      	ldrb	r3, [r6, #4]
    ed28:	7423      	strb	r3, [r4, #16]
	link.rx.fcs = net_buf_simple_pull_u8(buf);
    ed2a:	4628      	mov	r0, r5
    ed2c:	f016 f87e 	bl	24e2c <net_buf_simple_pull_u8>
	if (link.rx.buf->len < 1) {
    ed30:	6962      	ldr	r2, [r4, #20]
	link.rx.fcs = net_buf_simple_pull_u8(buf);
    ed32:	74e0      	strb	r0, [r4, #19]
	if (link.rx.buf->len < 1) {
    ed34:	8893      	ldrh	r3, [r2, #4]
    ed36:	b923      	cbnz	r3, ed42 <gen_prov_start+0x6a>
}
    ed38:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		prov_failed(PROV_ERR_NVAL_FMT);
    ed3c:	2002      	movs	r0, #2
    ed3e:	f7ff bd19 	b.w	e774 <prov_failed>
	if (link.rx.buf->len > link.rx.buf->size) {
    ed42:	88d2      	ldrh	r2, [r2, #6]
    ed44:	429a      	cmp	r2, r3
    ed46:	d3f7      	bcc.n	ed38 <gen_prov_start+0x60>
	if (START_LAST_SEG(rx->gpc) > 0 && link.rx.buf->len <= 20U) {
    ed48:	7972      	ldrb	r2, [r6, #5]
    ed4a:	0892      	lsrs	r2, r2, #2
    ed4c:	d001      	beq.n	ed52 <gen_prov_start+0x7a>
    ed4e:	2b14      	cmp	r3, #20
    ed50:	d9f2      	bls.n	ed38 <gen_prov_start+0x60>
	prov_clear_tx();
    ed52:	f7ff fd55 	bl	e800 <prov_clear_tx>
	link.rx.last_seg = START_LAST_SEG(rx->gpc);
    ed56:	7972      	ldrb	r2, [r6, #5]
	if ((link.rx.seg & BIT(0)) &&
    ed58:	7c61      	ldrb	r1, [r4, #17]
	link.rx.last_seg = START_LAST_SEG(rx->gpc);
    ed5a:	0892      	lsrs	r2, r2, #2
	if ((link.rx.seg & BIT(0)) &&
    ed5c:	07cb      	lsls	r3, r1, #31
	link.rx.last_seg = START_LAST_SEG(rx->gpc);
    ed5e:	74a2      	strb	r2, [r4, #18]
	if ((link.rx.seg & BIT(0)) &&
    ed60:	d51f      	bpl.n	eda2 <gen_prov_start+0xca>
	    (find_msb_set((~link.rx.seg) & SEG_NVAL) - 1 > link.rx.last_seg)) {
    ed62:	43cb      	mvns	r3, r1
	if (op == 0) {
    ed64:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    ed68:	d0e6      	beq.n	ed38 <gen_prov_start+0x60>
	return 32 - __builtin_clz(op);
    ed6a:	fab3 f383 	clz	r3, r3
    ed6e:	f1c3 031f 	rsb	r3, r3, #31
	if ((link.rx.seg & BIT(0)) &&
    ed72:	4293      	cmp	r3, r2
    ed74:	d8e0      	bhi.n	ed38 <gen_prov_start+0x60>
	link.rx.seg = seg & ((1 << (START_LAST_SEG(rx->gpc) + 1)) - 1);
    ed76:	3201      	adds	r2, #1
    ed78:	2301      	movs	r3, #1
    ed7a:	4093      	lsls	r3, r2
    ed7c:	3b01      	subs	r3, #1
    ed7e:	400b      	ands	r3, r1
    ed80:	7463      	strb	r3, [r4, #17]
	memcpy(link.rx.buf->data, buf->data, buf->len);
    ed82:	6963      	ldr	r3, [r4, #20]
    ed84:	88aa      	ldrh	r2, [r5, #4]
    ed86:	6818      	ldr	r0, [r3, #0]
    ed88:	6829      	ldr	r1, [r5, #0]
    ed8a:	f00f f952 	bl	1e032 <memcpy>
	XACT_SEG_RECV(0);
    ed8e:	7c63      	ldrb	r3, [r4, #17]
    ed90:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    ed94:	7463      	strb	r3, [r4, #17]
	if (!link.rx.seg) {
    ed96:	2b00      	cmp	r3, #0
    ed98:	d1b3      	bne.n	ed02 <gen_prov_start+0x2a>
}
    ed9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		prov_msg_recv();
    ed9e:	f7ff bf0d 	b.w	ebbc <prov_msg_recv>
	uint8_t seg = SEG_NVAL;
    eda2:	2900      	cmp	r1, #0
    eda4:	bf08      	it	eq
    eda6:	21ff      	moveq	r1, #255	; 0xff
    eda8:	e7e5      	b.n	ed76 <gen_prov_start+0x9e>
    edaa:	bf00      	nop
    edac:	200001d0 	.word	0x200001d0

0000edb0 <prov_send_adv>:
{
    edb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_work_reschedule(&link.prot_timer, PROTOCOL_TIMEOUT);
    edb4:	4d52      	ldr	r5, [pc, #328]	; (ef00 <prov_send_adv+0x150>)
{
    edb6:	460f      	mov	r7, r1
    edb8:	4604      	mov	r4, r0
    edba:	4616      	mov	r6, r2
	prov_clear_tx();
    edbc:	f7ff fd20 	bl	e800 <prov_clear_tx>
	k_work_reschedule(&link.prot_timer, PROTOCOL_TIMEOUT);
    edc0:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
    edc4:	2300      	movs	r3, #0
    edc6:	f105 0068 	add.w	r0, r5, #104	; 0x68
    edca:	f00c fca5 	bl	1b718 <k_work_reschedule>
	start = adv_buf_create(RETRANSMITS_RELIABLE);
    edce:	2000      	movs	r0, #0
    edd0:	f014 fb59 	bl	23486 <adv_buf_create>
	if (!start) {
    edd4:	4681      	mov	r9, r0
    edd6:	2800      	cmp	r0, #0
    edd8:	d06b      	beq.n	eeb2 <prov_send_adv+0x102>
	link.tx.id = next_transaction_id(link.tx.id);
    edda:	f895 2020 	ldrb.w	r2, [r5, #32]
	net_buf_simple_add_be32(&buf->b, val);
    edde:	6829      	ldr	r1, [r5, #0]
	return (((id + 1) & XACT_ID_MAX) | (id & (XACT_ID_MAX+1)));
    ede0:	1c53      	adds	r3, r2, #1
    ede2:	f100 0808 	add.w	r8, r0, #8
    ede6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    edea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    edee:	4313      	orrs	r3, r2
    edf0:	4640      	mov	r0, r8
	link.tx.id = next_transaction_id(link.tx.id);
    edf2:	f885 3020 	strb.w	r3, [r5, #32]
    edf6:	f015 ffd1 	bl	24d9c <net_buf_simple_add_be32>
	net_buf_add_u8(start, link.tx.id);
    edfa:	f895 1020 	ldrb.w	r1, [r5, #32]
    edfe:	4648      	mov	r0, r9
    ee00:	f014 fb50 	bl	234a4 <net_buf_add_u8.isra.0>
	net_buf_add_u8(start, GPC_START(last_seg(msg->len)));
    ee04:	7923      	ldrb	r3, [r4, #4]
	if (len <= START_PAYLOAD_MAX) {
    ee06:	2b14      	cmp	r3, #20
	len -= START_PAYLOAD_MAX;
    ee08:	bf81      	itttt	hi
    ee0a:	3b14      	subhi	r3, #20
	return 1 + (len / CONT_PAYLOAD_MAX);
    ee0c:	b2db      	uxtbhi	r3, r3
    ee0e:	2117      	movhi	r1, #23
    ee10:	fbb3 f3f1 	udivhi	r3, r3, r1
    ee14:	bf86      	itte	hi
    ee16:	3301      	addhi	r3, #1
    ee18:	b2db      	uxtbhi	r3, r3
		return 0;
    ee1a:	2300      	movls	r3, #0
	net_buf_add_u8(start, GPC_START(last_seg(msg->len)));
    ee1c:	009b      	lsls	r3, r3, #2
    ee1e:	f003 01fc 	and.w	r1, r3, #252	; 0xfc
    ee22:	4648      	mov	r0, r9
    ee24:	f014 fb3e 	bl	234a4 <net_buf_add_u8.isra.0>
	net_buf_simple_add_be16(&buf->b, val);
    ee28:	88a1      	ldrh	r1, [r4, #4]
    ee2a:	4640      	mov	r0, r8
    ee2c:	f015 ff94 	bl	24d58 <net_buf_simple_add_be16>
	net_buf_add_u8(start, bt_mesh_fcs_calc(msg->data, msg->len));
    ee30:	7921      	ldrb	r1, [r4, #4]
    ee32:	6820      	ldr	r0, [r4, #0]
    ee34:	f7fd ff9c 	bl	cd70 <bt_mesh_fcs_calc>
    ee38:	4601      	mov	r1, r0
    ee3a:	4648      	mov	r0, r9
    ee3c:	f014 fb32 	bl	234a4 <net_buf_add_u8.isra.0>
	link.tx.buf[0] = start;
    ee40:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
	link.tx.cb_data = cb_data;
    ee44:	e9c5 760c 	strd	r7, r6, [r5, #48]	; 0x30
    ee48:	f017 f8b0 	bl	25fac <z_impl_k_uptime_ticks>
	seg_len = MIN(msg->len, START_PAYLOAD_MAX);
    ee4c:	88a6      	ldrh	r6, [r4, #4]
    ee4e:	f8df 90b4 	ldr.w	r9, [pc, #180]	; ef04 <prov_send_adv+0x154>
    ee52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ee56:	fba0 0302 	umull	r0, r3, r0, r2
    ee5a:	fb02 3101 	mla	r1, r2, r1, r3
	net_buf_add_mem(start, msg->data, seg_len);
    ee5e:	2e14      	cmp	r6, #20
    ee60:	ea4f 30d0 	mov.w	r0, r0, lsr #15
    ee64:	bf28      	it	cs
    ee66:	2614      	movcs	r6, #20
    ee68:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
    ee6c:	0bc9      	lsrs	r1, r1, #15
	link.tx.start = k_uptime_get();
    ee6e:	e9c5 0106 	strd	r0, r1, [r5, #24]
	return net_buf_simple_add_mem(&buf->b, mem, len);
    ee72:	4632      	mov	r2, r6
    ee74:	6821      	ldr	r1, [r4, #0]
    ee76:	4640      	mov	r0, r8
    ee78:	f015 ff53 	bl	24d22 <net_buf_simple_add_mem>
	net_buf_simple_pull(msg, seg_len);
    ee7c:	4631      	mov	r1, r6
    ee7e:	4620      	mov	r0, r4
    ee80:	f015 ffc4 	bl	24e0c <net_buf_simple_pull>
	for (seg_id = 1U; msg->len > 0; seg_id++) {
    ee84:	2700      	movs	r7, #0
    ee86:	88a6      	ldrh	r6, [r4, #4]
    ee88:	b91e      	cbnz	r6, ee92 <prov_send_adv+0xe2>
	send_reliable();
    ee8a:	f7ff fc85 	bl	e798 <send_reliable>
	return 0;
    ee8e:	4630      	mov	r0, r6
    ee90:	e005      	b.n	ee9e <prov_send_adv+0xee>
		if (seg_id >= ARRAY_SIZE(link.tx.buf)) {
    ee92:	2f08      	cmp	r7, #8
    ee94:	d105      	bne.n	eea2 <prov_send_adv+0xf2>
			free_segments();
    ee96:	f7ff fc9d 	bl	e7d4 <free_segments>
			return -E2BIG;
    ee9a:	f06f 0006 	mvn.w	r0, #6
}
    ee9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		buf = adv_buf_create(RETRANSMITS_RELIABLE);
    eea2:	2000      	movs	r0, #0
    eea4:	f014 faef 	bl	23486 <adv_buf_create>
		if (!buf) {
    eea8:	3704      	adds	r7, #4
    eeaa:	4606      	mov	r6, r0
    eeac:	b920      	cbnz	r0, eeb8 <prov_send_adv+0x108>
			free_segments();
    eeae:	f7ff fc91 	bl	e7d4 <free_segments>
		return -ENOBUFS;
    eeb2:	f06f 0068 	mvn.w	r0, #104	; 0x68
    eeb6:	e7f2      	b.n	ee9e <prov_send_adv+0xee>
		seg_len = MIN(msg->len, CONT_PAYLOAD_MAX);
    eeb8:	f8b4 8004 	ldrh.w	r8, [r4, #4]
		link.tx.buf[seg_id] = buf;
    eebc:	f849 0b04 	str.w	r0, [r9], #4
	net_buf_simple_add_be32(&buf->b, val);
    eec0:	f100 0a08 	add.w	sl, r0, #8
		seg_len = MIN(msg->len, CONT_PAYLOAD_MAX);
    eec4:	f1b8 0f17 	cmp.w	r8, #23
    eec8:	6829      	ldr	r1, [r5, #0]
    eeca:	4650      	mov	r0, sl
    eecc:	bf28      	it	cs
    eece:	f04f 0817 	movcs.w	r8, #23
    eed2:	f015 ff63 	bl	24d9c <net_buf_simple_add_be32>
		net_buf_add_u8(buf, link.tx.id);
    eed6:	f895 1020 	ldrb.w	r1, [r5, #32]
    eeda:	4630      	mov	r0, r6
    eedc:	f014 fae2 	bl	234a4 <net_buf_add_u8.isra.0>
		net_buf_add_u8(buf, GPC_CONT(seg_id));
    eee0:	f047 0102 	orr.w	r1, r7, #2
    eee4:	4630      	mov	r0, r6
    eee6:	b2c9      	uxtb	r1, r1
    eee8:	f014 fadc 	bl	234a4 <net_buf_add_u8.isra.0>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    eeec:	6821      	ldr	r1, [r4, #0]
    eeee:	4642      	mov	r2, r8
    eef0:	4650      	mov	r0, sl
    eef2:	f015 ff16 	bl	24d22 <net_buf_simple_add_mem>
		net_buf_simple_pull(msg, seg_len);
    eef6:	4641      	mov	r1, r8
    eef8:	4620      	mov	r0, r4
    eefa:	f015 ff87 	bl	24e0c <net_buf_simple_pull>
	for (seg_id = 1U; msg->len > 0; seg_id++) {
    eefe:	e7c2      	b.n	ee86 <prov_send_adv+0xd6>
    ef00:	200001d0 	.word	0x200001d0
    ef04:	200001f8 	.word	0x200001f8

0000ef08 <prov_link_open>:
{
    ef08:	b570      	push	{r4, r5, r6, lr}
    ef0a:	4606      	mov	r6, r0
	err = bt_mesh_adv_enable();
    ef0c:	f7fe fd04 	bl	d918 <bt_mesh_adv_enable>
	if (err) {
    ef10:	4604      	mov	r4, r0
    ef12:	2800      	cmp	r0, #0
    ef14:	d13e      	bne.n	ef94 <prov_link_open+0x8c>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    ef16:	4d23      	ldr	r5, [pc, #140]	; (efa4 <prov_link_open+0x9c>)
    ef18:	2101      	movs	r1, #1
    ef1a:	1d28      	adds	r0, r5, #4
    ef1c:	f014 faa4 	bl	23468 <atomic_or>
	if (atomic_test_and_set_bit(link.flags, ADV_LINK_ACTIVE)) {
    ef20:	ea10 0401 	ands.w	r4, r0, r1
    ef24:	d13b      	bne.n	ef9e <prov_link_open+0x96>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    ef26:	2120      	movs	r1, #32
    ef28:	1d28      	adds	r0, r5, #4
    ef2a:	f014 fa9d 	bl	23468 <atomic_or>
	bt_rand(&link.id, sizeof(link.id));
    ef2e:	2104      	movs	r1, #4
    ef30:	4628      	mov	r0, r5
    ef32:	f014 ffce 	bl	23ed2 <bt_rand>
	link.tx.id = XACT_ID_MAX;
    ef36:	237f      	movs	r3, #127	; 0x7f
    ef38:	f885 3020 	strb.w	r3, [r5, #32]
	link.rx.id = XACT_ID_NVAL;
    ef3c:	23ff      	movs	r3, #255	; 0xff
    ef3e:	742b      	strb	r3, [r5, #16]
	link.cb = cb;
    ef40:	9b04      	ldr	r3, [sp, #16]
    ef42:	60ab      	str	r3, [r5, #8]
	link.cb_data = cb_data;
    ef44:	9b05      	ldr	r3, [sp, #20]
    ef46:	60eb      	str	r3, [r5, #12]
	net_buf_simple_reset(link.rx.buf);
    ef48:	696b      	ldr	r3, [r5, #20]
	buf->data = buf->__buf;
    ef4a:	689a      	ldr	r2, [r3, #8]
    ef4c:	601a      	str	r2, [r3, #0]
	buf->len  = 0U;
    ef4e:	809c      	strh	r4, [r3, #4]
	return bearer_ctl_send(ctl_buf_create(LINK_OPEN, uuid, 16, RETRANSMITS_RELIABLE));
    ef50:	4631      	mov	r1, r6
    ef52:	4623      	mov	r3, r4
    ef54:	2210      	movs	r2, #16
    ef56:	4620      	mov	r0, r4
    ef58:	f7ff fd02 	bl	e960 <ctl_buf_create>
	if (!buf) {
    ef5c:	4606      	mov	r6, r0
    ef5e:	b1d8      	cbz	r0, ef98 <prov_link_open+0x90>
	prov_clear_tx();
    ef60:	f7ff fc4e 	bl	e800 <prov_clear_tx>
	k_work_reschedule(&link.prot_timer, PROTOCOL_TIMEOUT);
    ef64:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
    ef68:	2300      	movs	r3, #0
    ef6a:	f105 0068 	add.w	r0, r5, #104	; 0x68
    ef6e:	f00c fbd3 	bl	1b718 <k_work_reschedule>
    ef72:	f017 f81b 	bl	25fac <z_impl_k_uptime_ticks>
    ef76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ef7a:	fba0 3002 	umull	r3, r0, r0, r2
    ef7e:	fb02 0101 	mla	r1, r2, r1, r0
    ef82:	0bdb      	lsrs	r3, r3, #15
    ef84:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
    ef88:	0bc9      	lsrs	r1, r1, #15
	link.tx.start = k_uptime_get();
    ef8a:	e9c5 3106 	strd	r3, r1, [r5, #24]
	link.tx.buf[0] = buf;
    ef8e:	626e      	str	r6, [r5, #36]	; 0x24
	send_reliable();
    ef90:	f7ff fc02 	bl	e798 <send_reliable>
}
    ef94:	4620      	mov	r0, r4
    ef96:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    ef98:	f06f 040b 	mvn.w	r4, #11
    ef9c:	e7fa      	b.n	ef94 <prov_link_open+0x8c>
		return -EBUSY;
    ef9e:	f06f 040f 	mvn.w	r4, #15
    efa2:	e7f7      	b.n	ef94 <prov_link_open+0x8c>
    efa4:	200001d0 	.word	0x200001d0

0000efa8 <buf_sent>:
    efa8:	4b09      	ldr	r3, [pc, #36]	; (efd0 <buf_sent+0x28>)
    efaa:	f3bf 8f5b 	dmb	ish
    efae:	e853 2f00 	ldrex	r2, [r3]
    efb2:	f022 0104 	bic.w	r1, r2, #4
    efb6:	e843 1000 	strex	r0, r1, [r3]
    efba:	2800      	cmp	r0, #0
    efbc:	d1f7      	bne.n	efae <buf_sent+0x6>
    efbe:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(link.flags, ADV_LINK_CLOSING)) {
    efc2:	0753      	lsls	r3, r2, #29
    efc4:	d502      	bpl.n	efcc <buf_sent+0x24>
		close_link(PROV_BEARER_LINK_STATUS_SUCCESS);
    efc6:	2000      	movs	r0, #0
    efc8:	f7ff bcb8 	b.w	e93c <close_link>
}
    efcc:	4770      	bx	lr
    efce:	bf00      	nop
    efd0:	200001d4 	.word	0x200001d4

0000efd4 <ack_complete>:
    efd4:	4b06      	ldr	r3, [pc, #24]	; (eff0 <ack_complete+0x1c>)
    efd6:	f3bf 8f5b 	dmb	ish
    efda:	e853 2f00 	ldrex	r2, [r3]
    efde:	f022 0210 	bic.w	r2, r2, #16
    efe2:	e843 2100 	strex	r1, r2, [r3]
    efe6:	2900      	cmp	r1, #0
    efe8:	d1f7      	bne.n	efda <ack_complete+0x6>
    efea:	f3bf 8f5b 	dmb	ish
}
    efee:	4770      	bx	lr
    eff0:	200001d4 	.word	0x200001d4

0000eff4 <bt_mesh_pb_adv_recv>:
{
    eff4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!link.cb) {
    eff6:	4d1f      	ldr	r5, [pc, #124]	; (f074 <bt_mesh_pb_adv_recv+0x80>)
    eff8:	68ab      	ldr	r3, [r5, #8]
{
    effa:	4604      	mov	r4, r0
	if (!link.cb) {
    effc:	2b00      	cmp	r3, #0
    effe:	d036      	beq.n	f06e <bt_mesh_pb_adv_recv+0x7a>
	if (buf->len < 6) {
    f000:	8883      	ldrh	r3, [r0, #4]
    f002:	2b05      	cmp	r3, #5
    f004:	d933      	bls.n	f06e <bt_mesh_pb_adv_recv+0x7a>
	rx.link_id = net_buf_simple_pull_be32(buf);
    f006:	f015 ff33 	bl	24e70 <net_buf_simple_pull_be32>
    f00a:	9000      	str	r0, [sp, #0]
	rx.xact_id = net_buf_simple_pull_u8(buf);
    f00c:	4620      	mov	r0, r4
    f00e:	f015 ff0d 	bl	24e2c <net_buf_simple_pull_u8>
    f012:	f88d 0004 	strb.w	r0, [sp, #4]
	rx.gpc = net_buf_simple_pull_u8(buf);
    f016:	4620      	mov	r0, r4
    f018:	f015 ff08 	bl	24e2c <net_buf_simple_pull_u8>
    f01c:	f88d 0005 	strb.w	r0, [sp, #5]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    f020:	f7ff fc14 	bl	e84c <atomic_get.constprop.0>
	if (atomic_test_bit(link.flags, ADV_LINK_ACTIVE) && link.id != rx.link_id) {
    f024:	07c3      	lsls	r3, r0, #31
    f026:	d503      	bpl.n	f030 <bt_mesh_pb_adv_recv+0x3c>
    f028:	682a      	ldr	r2, [r5, #0]
    f02a:	9b00      	ldr	r3, [sp, #0]
    f02c:	429a      	cmp	r2, r3
    f02e:	d11e      	bne.n	f06e <bt_mesh_pb_adv_recv+0x7a>
	if (buf->len < gen_prov[GPCF(rx->gpc)].min_len) {
    f030:	f89d 3005 	ldrb.w	r3, [sp, #5]
    f034:	4a10      	ldr	r2, [pc, #64]	; (f078 <bt_mesh_pb_adv_recv+0x84>)
    f036:	88a1      	ldrh	r1, [r4, #4]
    f038:	f003 0303 	and.w	r3, r3, #3
    f03c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    f040:	795b      	ldrb	r3, [r3, #5]
    f042:	4299      	cmp	r1, r3
    f044:	d313      	bcc.n	f06e <bt_mesh_pb_adv_recv+0x7a>
    f046:	f7ff fc01 	bl	e84c <atomic_get.constprop.0>
	if (!atomic_test_bit(link.flags, ADV_LINK_ACTIVE) &&
    f04a:	f010 0f01 	tst.w	r0, #1
    f04e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    f052:	d105      	bne.n	f060 <bt_mesh_pb_adv_recv+0x6c>
	    gen_prov[GPCF(rx->gpc)].require_link) {
    f054:	f003 0103 	and.w	r1, r3, #3
    f058:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
	if (!atomic_test_bit(link.flags, ADV_LINK_ACTIVE) &&
    f05c:	7909      	ldrb	r1, [r1, #4]
    f05e:	b931      	cbnz	r1, f06e <bt_mesh_pb_adv_recv+0x7a>
	gen_prov[GPCF(rx->gpc)].func(rx, buf);
    f060:	f003 0303 	and.w	r3, r3, #3
    f064:	4621      	mov	r1, r4
    f066:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    f06a:	4668      	mov	r0, sp
    f06c:	4798      	blx	r3
}
    f06e:	b003      	add	sp, #12
    f070:	bd30      	pop	{r4, r5, pc}
    f072:	bf00      	nop
    f074:	200001d0 	.word	0x200001d0
    f078:	00026f5c 	.word	0x00026f5c

0000f07c <pb_adv_init>:

void pb_adv_init(void)
{
    f07c:	b510      	push	{r4, lr}
	k_work_init_delayable(&link.prot_timer, protocol_timeout);
    f07e:	4c06      	ldr	r4, [pc, #24]	; (f098 <pb_adv_init+0x1c>)
    f080:	4906      	ldr	r1, [pc, #24]	; (f09c <pb_adv_init+0x20>)
    f082:	f104 0068 	add.w	r0, r4, #104	; 0x68
    f086:	f016 fe03 	bl	25c90 <k_work_init_delayable>
	k_work_init_delayable(&link.tx.retransmit, prov_retransmit);
    f08a:	f104 0038 	add.w	r0, r4, #56	; 0x38
    f08e:	4904      	ldr	r1, [pc, #16]	; (f0a0 <pb_adv_init+0x24>)
}
    f090:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&link.tx.retransmit, prov_retransmit);
    f094:	f016 bdfc 	b.w	25c90 <k_work_init_delayable>
    f098:	200001d0 	.word	0x200001d0
    f09c:	0000eac1 	.word	0x0000eac1
    f0a0:	0000eae1 	.word	0x0000eae1

0000f0a4 <buf_send_end>:
	return 0;
}

static void buf_send_end(struct bt_conn *conn, void *user_data)
{
	if (link.comp.cb) {
    f0a4:	4a03      	ldr	r2, [pc, #12]	; (f0b4 <buf_send_end+0x10>)
    f0a6:	68d3      	ldr	r3, [r2, #12]
    f0a8:	b113      	cbz	r3, f0b0 <buf_send_end+0xc>
		link.comp.cb(0, link.comp.cb_data);
    f0aa:	6911      	ldr	r1, [r2, #16]
    f0ac:	2000      	movs	r0, #0
    f0ae:	4718      	bx	r3
	}
}
    f0b0:	4770      	bx	lr
    f0b2:	bf00      	nop
    f0b4:	20001b58 	.word	0x20001b58

0000f0b8 <reset_state>:
{
    f0b8:	b510      	push	{r4, lr}
	if (link.conn) {
    f0ba:	4c06      	ldr	r4, [pc, #24]	; (f0d4 <reset_state+0x1c>)
    f0bc:	6820      	ldr	r0, [r4, #0]
    f0be:	b118      	cbz	r0, f0c8 <reset_state+0x10>
		bt_conn_unref(link.conn);
    f0c0:	f00f febe 	bl	1ee40 <bt_conn_unref>
		link.conn = NULL;
    f0c4:	2300      	movs	r3, #0
    f0c6:	6023      	str	r3, [r4, #0]
}
    f0c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)k_work_cancel_delayable(&link.prot_timer);
    f0cc:	4802      	ldr	r0, [pc, #8]	; (f0d8 <reset_state+0x20>)
    f0ce:	f016 bded 	b.w	25cac <k_work_cancel_delayable>
    f0d2:	bf00      	nop
    f0d4:	20001b58 	.word	0x20001b58
    f0d8:	20001b70 	.word	0x20001b70

0000f0dc <link_closed>:
{
    f0dc:	b570      	push	{r4, r5, r6, lr}
	const struct prov_bearer_cb *cb = link.cb;
    f0de:	4b06      	ldr	r3, [pc, #24]	; (f0f8 <link_closed+0x1c>)
	void *cb_data = link.cb_data;
    f0e0:	e9d3 6501 	ldrd	r6, r5, [r3, #4]
{
    f0e4:	4604      	mov	r4, r0
	reset_state();
    f0e6:	f7ff ffe7 	bl	f0b8 <reset_state>
	cb->link_closed(&pb_gatt, cb_data, status);
    f0ea:	6873      	ldr	r3, [r6, #4]
    f0ec:	4803      	ldr	r0, [pc, #12]	; (f0fc <link_closed+0x20>)
    f0ee:	4622      	mov	r2, r4
    f0f0:	4629      	mov	r1, r5
}
    f0f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb->link_closed(&pb_gatt, cb_data, status);
    f0f6:	4718      	bx	r3
    f0f8:	20001b58 	.word	0x20001b58
    f0fc:	00026f94 	.word	0x00026f94

0000f100 <protocol_timeout>:
	if (!link.conn) {
    f100:	4b03      	ldr	r3, [pc, #12]	; (f110 <protocol_timeout+0x10>)
    f102:	681b      	ldr	r3, [r3, #0]
    f104:	b113      	cbz	r3, f10c <protocol_timeout+0xc>
	link_closed(PROV_BEARER_LINK_STATUS_TIMEOUT);
    f106:	2001      	movs	r0, #1
    f108:	f7ff bfe8 	b.w	f0dc <link_closed>
}
    f10c:	4770      	bx	lr
    f10e:	bf00      	nop
    f110:	20001b58 	.word	0x20001b58

0000f114 <buf_send>:

static int buf_send(struct net_buf_simple *buf, prov_bearer_send_complete_t cb,
		    void *cb_data)
{
    f114:	b570      	push	{r4, r5, r6, lr}
	if (!link.conn) {
    f116:	4c0c      	ldr	r4, [pc, #48]	; (f148 <buf_send+0x34>)
    f118:	6823      	ldr	r3, [r4, #0]
{
    f11a:	4605      	mov	r5, r0
	if (!link.conn) {
    f11c:	b183      	cbz	r3, f140 <buf_send+0x2c>
		return -ENOTCONN;
	}

	link.comp.cb = cb;
	link.comp.cb_data = cb_data;
    f11e:	e9c4 1203 	strd	r1, r2, [r4, #12]

	k_work_reschedule(&link.prot_timer, PROTOCOL_TIMEOUT);
    f122:	2300      	movs	r3, #0
    f124:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
    f128:	f104 0018 	add.w	r0, r4, #24
    f12c:	f00c faf4 	bl	1b718 <k_work_reschedule>

	return bt_mesh_pb_gatt_send(link.conn, buf, buf_send_end, NULL);
    f130:	6820      	ldr	r0, [r4, #0]
    f132:	4a06      	ldr	r2, [pc, #24]	; (f14c <buf_send+0x38>)
    f134:	4629      	mov	r1, r5
    f136:	2300      	movs	r3, #0
}
    f138:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_mesh_pb_gatt_send(link.conn, buf, buf_send_end, NULL);
    f13c:	f000 b934 	b.w	f3a8 <bt_mesh_pb_gatt_send>
}
    f140:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    f144:	bd70      	pop	{r4, r5, r6, pc}
    f146:	bf00      	nop
    f148:	20001b58 	.word	0x20001b58
    f14c:	0000f0a5 	.word	0x0000f0a5

0000f150 <link_accept>:
{
    f150:	b570      	push	{r4, r5, r6, lr}
    f152:	4606      	mov	r6, r0
    f154:	460d      	mov	r5, r1
	err = bt_mesh_adv_enable();
    f156:	f7fe fbdf 	bl	d918 <bt_mesh_adv_enable>
	if (err) {
    f15a:	4604      	mov	r4, r0
    f15c:	b930      	cbnz	r0, f16c <link_accept+0x1c>
	(void)bt_mesh_pb_gatt_enable();
    f15e:	f000 f8d1 	bl	f304 <bt_mesh_pb_gatt_enable>
	bt_mesh_adv_gatt_update();
    f162:	f013 fe7e 	bl	22e62 <bt_mesh_adv_gatt_update>
	link.cb = cb;
    f166:	4b02      	ldr	r3, [pc, #8]	; (f170 <link_accept+0x20>)
	link.cb_data = cb_data;
    f168:	e9c3 6501 	strd	r6, r5, [r3, #4]
}
    f16c:	4620      	mov	r0, r4
    f16e:	bd70      	pop	{r4, r5, r6, pc}
    f170:	20001b58 	.word	0x20001b58

0000f174 <bt_mesh_pb_gatt_recv>:
{
    f174:	b538      	push	{r3, r4, r5, lr}
	if (link.conn != conn || !link.cb) {
    f176:	4c0f      	ldr	r4, [pc, #60]	; (f1b4 <bt_mesh_pb_gatt_recv+0x40>)
    f178:	6823      	ldr	r3, [r4, #0]
    f17a:	4283      	cmp	r3, r0
{
    f17c:	460d      	mov	r5, r1
	if (link.conn != conn || !link.cb) {
    f17e:	d112      	bne.n	f1a6 <bt_mesh_pb_gatt_recv+0x32>
    f180:	6863      	ldr	r3, [r4, #4]
    f182:	b183      	cbz	r3, f1a6 <bt_mesh_pb_gatt_recv+0x32>
	if (buf->len < 1) {
    f184:	888b      	ldrh	r3, [r1, #4]
    f186:	b18b      	cbz	r3, f1ac <bt_mesh_pb_gatt_recv+0x38>
	k_work_reschedule(&link.prot_timer, PROTOCOL_TIMEOUT);
    f188:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
    f18c:	2300      	movs	r3, #0
    f18e:	f104 0018 	add.w	r0, r4, #24
    f192:	f00c fac1 	bl	1b718 <k_work_reschedule>
	link.cb->recv(&pb_gatt, link.cb_data, buf);
    f196:	6863      	ldr	r3, [r4, #4]
    f198:	4807      	ldr	r0, [pc, #28]	; (f1b8 <bt_mesh_pb_gatt_recv+0x44>)
    f19a:	68db      	ldr	r3, [r3, #12]
    f19c:	68a1      	ldr	r1, [r4, #8]
    f19e:	462a      	mov	r2, r5
    f1a0:	4798      	blx	r3
	return 0;
    f1a2:	2000      	movs	r0, #0
}
    f1a4:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTCONN;
    f1a6:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    f1aa:	e7fb      	b.n	f1a4 <bt_mesh_pb_gatt_recv+0x30>
		return -EINVAL;
    f1ac:	f06f 0015 	mvn.w	r0, #21
    f1b0:	e7f8      	b.n	f1a4 <bt_mesh_pb_gatt_recv+0x30>
    f1b2:	bf00      	nop
    f1b4:	20001b58 	.word	0x20001b58
    f1b8:	00026f94 	.word	0x00026f94

0000f1bc <bt_mesh_pb_gatt_open>:
{
    f1bc:	b538      	push	{r3, r4, r5, lr}
	if (link.conn) {
    f1be:	4d0c      	ldr	r5, [pc, #48]	; (f1f0 <bt_mesh_pb_gatt_open+0x34>)
    f1c0:	682c      	ldr	r4, [r5, #0]
    f1c2:	b98c      	cbnz	r4, f1e8 <bt_mesh_pb_gatt_open+0x2c>
	link.conn = bt_conn_ref(conn);
    f1c4:	f00f fe21 	bl	1ee0a <bt_conn_ref>
    f1c8:	4603      	mov	r3, r0
    f1ca:	4628      	mov	r0, r5
	k_work_reschedule(&link.prot_timer, PROTOCOL_TIMEOUT);
    f1cc:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
	link.conn = bt_conn_ref(conn);
    f1d0:	f840 3b18 	str.w	r3, [r0], #24
	k_work_reschedule(&link.prot_timer, PROTOCOL_TIMEOUT);
    f1d4:	2300      	movs	r3, #0
    f1d6:	f00c fa9f 	bl	1b718 <k_work_reschedule>
	link.cb->link_opened(&pb_gatt, link.cb_data);
    f1da:	686b      	ldr	r3, [r5, #4]
    f1dc:	4805      	ldr	r0, [pc, #20]	; (f1f4 <bt_mesh_pb_gatt_open+0x38>)
    f1de:	681b      	ldr	r3, [r3, #0]
    f1e0:	68a9      	ldr	r1, [r5, #8]
    f1e2:	4798      	blx	r3
	return 0;
    f1e4:	4620      	mov	r0, r4
}
    f1e6:	bd38      	pop	{r3, r4, r5, pc}
		return -EBUSY;
    f1e8:	f06f 000f 	mvn.w	r0, #15
    f1ec:	e7fb      	b.n	f1e6 <bt_mesh_pb_gatt_open+0x2a>
    f1ee:	bf00      	nop
    f1f0:	20001b58 	.word	0x20001b58
    f1f4:	00026f94 	.word	0x00026f94

0000f1f8 <bt_mesh_pb_gatt_close>:
{
    f1f8:	b508      	push	{r3, lr}
	if (link.conn != conn) {
    f1fa:	4b06      	ldr	r3, [pc, #24]	; (f214 <bt_mesh_pb_gatt_close+0x1c>)
    f1fc:	681b      	ldr	r3, [r3, #0]
    f1fe:	4283      	cmp	r3, r0
    f200:	d104      	bne.n	f20c <bt_mesh_pb_gatt_close+0x14>
	link_closed(PROV_BEARER_LINK_STATUS_SUCCESS);
    f202:	2000      	movs	r0, #0
    f204:	f7ff ff6a 	bl	f0dc <link_closed>
	return 0;
    f208:	2000      	movs	r0, #0
}
    f20a:	bd08      	pop	{r3, pc}
		return -ENOTCONN;
    f20c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    f210:	e7fb      	b.n	f20a <bt_mesh_pb_gatt_close+0x12>
    f212:	bf00      	nop
    f214:	20001b58 	.word	0x20001b58

0000f218 <pb_gatt_init>:
	/* No action */
}

void pb_gatt_init(void)
{
	k_work_init_delayable(&link.prot_timer, protocol_timeout);
    f218:	4901      	ldr	r1, [pc, #4]	; (f220 <pb_gatt_init+0x8>)
    f21a:	4802      	ldr	r0, [pc, #8]	; (f224 <pb_gatt_init+0xc>)
    f21c:	f016 bd38 	b.w	25c90 <k_work_init_delayable>
    f220:	0000f101 	.word	0x0000f101
    f224:	20001b70 	.word	0x20001b70

0000f228 <prov_ccc_write>:
	BT_DBG("value 0x%04x", value);
}

static ssize_t prov_ccc_write(struct bt_conn *conn,
			      const struct bt_gatt_attr *attr, uint16_t value)
{
    f228:	b508      	push	{r3, lr}
	if (cli->conn != conn) {
    f22a:	4b08      	ldr	r3, [pc, #32]	; (f24c <prov_ccc_write+0x24>)
    f22c:	681b      	ldr	r3, [r3, #0]
    f22e:	681b      	ldr	r3, [r3, #0]
    f230:	4283      	cmp	r3, r0
    f232:	d105      	bne.n	f240 <prov_ccc_write+0x18>
		return -ENOTCONN;
	}

	BT_DBG("value 0x%04x", value);

	if (value != BT_GATT_CCC_NOTIFY) {
    f234:	2a01      	cmp	r2, #1
    f236:	d106      	bne.n	f246 <prov_ccc_write+0x1e>
		BT_WARN("Client wrote 0x%04x instead enabling notify", value);
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
	}

	bt_mesh_pb_gatt_open(conn);
    f238:	f7ff ffc0 	bl	f1bc <bt_mesh_pb_gatt_open>

	return sizeof(value);
    f23c:	2002      	movs	r0, #2
}
    f23e:	bd08      	pop	{r3, pc}
		return -ENOTCONN;
    f240:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    f244:	e7fb      	b.n	f23e <prov_ccc_write+0x16>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
    f246:	f06f 0012 	mvn.w	r0, #18
    f24a:	e7f8      	b.n	f23e <prov_ccc_write+0x16>
    f24c:	200025b8 	.word	0x200025b8

0000f250 <gatt_recv>:
{
    f250:	4611      	mov	r1, r2
    f252:	461a      	mov	r2, r3
	if (cli->conn != conn) {
    f254:	4b0b      	ldr	r3, [pc, #44]	; (f284 <gatt_recv+0x34>)
{
    f256:	b410      	push	{r4}
    f258:	4604      	mov	r4, r0
	if (cli->conn != conn) {
    f25a:	6818      	ldr	r0, [r3, #0]
    f25c:	6803      	ldr	r3, [r0, #0]
    f25e:	42a3      	cmp	r3, r4
    f260:	d108      	bne.n	f274 <gatt_recv+0x24>
	if (len < 1) {
    f262:	b15a      	cbz	r2, f27c <gatt_recv+0x2c>
	if (PDU_TYPE(data) != BT_MESH_PROXY_PROV) {
    f264:	780b      	ldrb	r3, [r1, #0]
    f266:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    f26a:	2b03      	cmp	r3, #3
    f26c:	d106      	bne.n	f27c <gatt_recv+0x2c>
}
    f26e:	bc10      	pop	{r4}
	return bt_mesh_proxy_msg_recv(cli, buf, len);
    f270:	f014 b9c9 	b.w	23606 <bt_mesh_proxy_msg_recv>
		return -ENOTCONN;
    f274:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
    f278:	bc10      	pop	{r4}
    f27a:	4770      	bx	lr
		return -EINVAL;
    f27c:	f06f 0015 	mvn.w	r0, #21
    f280:	e7fa      	b.n	f278 <gatt_recv+0x28>
    f282:	bf00      	nop
    f284:	200025b8 	.word	0x200025b8

0000f288 <gatt_send>:
}

static int gatt_send(struct bt_conn *conn,
		     const void *data, uint16_t len,
		     bt_gatt_complete_func_t end, void *user_data)
{
    f288:	b5f0      	push	{r4, r5, r6, r7, lr}
    f28a:	b087      	sub	sp, #28
    f28c:	4604      	mov	r4, r0
    f28e:	460f      	mov	r7, r1
    f290:	4616      	mov	r6, r2
	BT_DBG("%u bytes: %s", len, bt_hex(data, len));

	struct bt_gatt_notify_params params = {
    f292:	2100      	movs	r1, #0
    f294:	2210      	movs	r2, #16
    f296:	4668      	mov	r0, sp
{
    f298:	461d      	mov	r5, r3
	struct bt_gatt_notify_params params = {
    f29a:	f00e fed5 	bl	1e048 <memset>
    f29e:	4b07      	ldr	r3, [pc, #28]	; (f2bc <gatt_send+0x34>)
    f2a0:	f8ad 600c 	strh.w	r6, [sp, #12]
    f2a4:	e9cd 3701 	strd	r3, r7, [sp, #4]
		.attr = &prov_attrs[3],
		.user_data = user_data,
		.func = end,
	};

	return bt_gatt_notify_cb(conn, &params);
    f2a8:	4669      	mov	r1, sp
	struct bt_gatt_notify_params params = {
    f2aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f2ac:	9504      	str	r5, [sp, #16]
	return bt_gatt_notify_cb(conn, &params);
    f2ae:	4620      	mov	r0, r4
	struct bt_gatt_notify_params params = {
    f2b0:	9305      	str	r3, [sp, #20]
	return bt_gatt_notify_cb(conn, &params);
    f2b2:	f7fa fc73 	bl	9b9c <bt_gatt_notify_cb>
}
    f2b6:	b007      	add	sp, #28
    f2b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f2ba:	bf00      	nop
    f2bc:	200006f8 	.word	0x200006f8

0000f2c0 <gatt_connected>:
{
    f2c0:	b510      	push	{r4, lr}
    f2c2:	b088      	sub	sp, #32
	bt_conn_get_info(conn, &info);
    f2c4:	a901      	add	r1, sp, #4
{
    f2c6:	4604      	mov	r4, r0
	bt_conn_get_info(conn, &info);
    f2c8:	f7f9 f886 	bl	83d8 <bt_conn_get_info>
	if (info.role != BT_CONN_ROLE_PERIPHERAL ||
    f2cc:	f89d 3005 	ldrb.w	r3, [sp, #5]
    f2d0:	2b01      	cmp	r3, #1
    f2d2:	d10c      	bne.n	f2ee <gatt_connected+0x2e>
	    !service_registered || bt_mesh_is_provisioned()) {
    f2d4:	4b07      	ldr	r3, [pc, #28]	; (f2f4 <gatt_connected+0x34>)
	if (info.role != BT_CONN_ROLE_PERIPHERAL ||
    f2d6:	781b      	ldrb	r3, [r3, #0]
    f2d8:	b14b      	cbz	r3, f2ee <gatt_connected+0x2e>
	    !service_registered || bt_mesh_is_provisioned()) {
    f2da:	f7fa fe5d 	bl	9f98 <bt_mesh_is_provisioned>
    f2de:	b930      	cbnz	r0, f2ee <gatt_connected+0x2e>
	cli = bt_mesh_proxy_role_setup(conn, gatt_send, proxy_msg_recv);
    f2e0:	4a05      	ldr	r2, [pc, #20]	; (f2f8 <gatt_connected+0x38>)
    f2e2:	4906      	ldr	r1, [pc, #24]	; (f2fc <gatt_connected+0x3c>)
    f2e4:	4620      	mov	r0, r4
    f2e6:	f000 fc89 	bl	fbfc <bt_mesh_proxy_role_setup>
    f2ea:	4b05      	ldr	r3, [pc, #20]	; (f300 <gatt_connected+0x40>)
    f2ec:	6018      	str	r0, [r3, #0]
}
    f2ee:	b008      	add	sp, #32
    f2f0:	bd10      	pop	{r4, pc}
    f2f2:	bf00      	nop
    f2f4:	200040b8 	.word	0x200040b8
    f2f8:	000234c3 	.word	0x000234c3
    f2fc:	0000f289 	.word	0x0000f289
    f300:	200025b8 	.word	0x200025b8

0000f304 <bt_mesh_pb_gatt_enable>:
{
    f304:	b538      	push	{r3, r4, r5, lr}
	if (bt_mesh_is_provisioned()) {
    f306:	f7fa fe47 	bl	9f98 <bt_mesh_is_provisioned>
    f30a:	b958      	cbnz	r0, f324 <bt_mesh_pb_gatt_enable+0x20>
	if (service_registered) {
    f30c:	4d08      	ldr	r5, [pc, #32]	; (f330 <bt_mesh_pb_gatt_enable+0x2c>)
    f30e:	782c      	ldrb	r4, [r5, #0]
    f310:	b95c      	cbnz	r4, f32a <bt_mesh_pb_gatt_enable+0x26>
	(void)bt_gatt_service_register(&prov_svc);
    f312:	4808      	ldr	r0, [pc, #32]	; (f334 <bt_mesh_pb_gatt_enable+0x30>)
    f314:	f7fa fa50 	bl	97b8 <bt_gatt_service_register>
	prov_fast_adv = true;
    f318:	4a07      	ldr	r2, [pc, #28]	; (f338 <bt_mesh_pb_gatt_enable+0x34>)
	service_registered = true;
    f31a:	2301      	movs	r3, #1
    f31c:	702b      	strb	r3, [r5, #0]
	prov_fast_adv = true;
    f31e:	7013      	strb	r3, [r2, #0]
	return 0;
    f320:	4620      	mov	r0, r4
}
    f322:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
    f324:	f06f 0085 	mvn.w	r0, #133	; 0x85
    f328:	e7fb      	b.n	f322 <bt_mesh_pb_gatt_enable+0x1e>
		return -EBUSY;
    f32a:	f06f 000f 	mvn.w	r0, #15
    f32e:	e7f8      	b.n	f322 <bt_mesh_pb_gatt_enable+0x1e>
    f330:	200040b8 	.word	0x200040b8
    f334:	2000074c 	.word	0x2000074c
    f338:	200040b7 	.word	0x200040b7

0000f33c <bt_mesh_pb_gatt_disable>:
{
    f33c:	b538      	push	{r3, r4, r5, lr}
	if (!service_registered) {
    f33e:	4d07      	ldr	r5, [pc, #28]	; (f35c <bt_mesh_pb_gatt_disable+0x20>)
    f340:	782b      	ldrb	r3, [r5, #0]
    f342:	b143      	cbz	r3, f356 <bt_mesh_pb_gatt_disable+0x1a>
	service_registered = false;
    f344:	2400      	movs	r4, #0
	bt_gatt_service_unregister(&prov_svc);
    f346:	4806      	ldr	r0, [pc, #24]	; (f360 <bt_mesh_pb_gatt_disable+0x24>)
    f348:	f7fa f920 	bl	958c <bt_gatt_service_unregister>
	service_registered = false;
    f34c:	702c      	strb	r4, [r5, #0]
	bt_mesh_adv_gatt_update();
    f34e:	f013 fd88 	bl	22e62 <bt_mesh_adv_gatt_update>
	return 0;
    f352:	4620      	mov	r0, r4
}
    f354:	bd38      	pop	{r3, r4, r5, pc}
		return -EALREADY;
    f356:	f06f 0077 	mvn.w	r0, #119	; 0x77
    f35a:	e7fb      	b.n	f354 <bt_mesh_pb_gatt_disable+0x18>
    f35c:	200040b8 	.word	0x200040b8
    f360:	2000074c 	.word	0x2000074c

0000f364 <gatt_disconnected>:
{
    f364:	b530      	push	{r4, r5, lr}
    f366:	b089      	sub	sp, #36	; 0x24
	bt_conn_get_info(conn, &info);
    f368:	a901      	add	r1, sp, #4
{
    f36a:	4604      	mov	r4, r0
	bt_conn_get_info(conn, &info);
    f36c:	f7f9 f834 	bl	83d8 <bt_conn_get_info>
	if (info.role != BT_CONN_ROLE_PERIPHERAL ||
    f370:	f89d 3005 	ldrb.w	r3, [sp, #5]
    f374:	2b01      	cmp	r3, #1
    f376:	d111      	bne.n	f39c <gatt_disconnected+0x38>
	    !service_registered) {
    f378:	4b09      	ldr	r3, [pc, #36]	; (f3a0 <gatt_disconnected+0x3c>)
	if (info.role != BT_CONN_ROLE_PERIPHERAL ||
    f37a:	781b      	ldrb	r3, [r3, #0]
    f37c:	b173      	cbz	r3, f39c <gatt_disconnected+0x38>
	if (cli) {
    f37e:	4d09      	ldr	r5, [pc, #36]	; (f3a4 <gatt_disconnected+0x40>)
    f380:	6828      	ldr	r0, [r5, #0]
    f382:	b118      	cbz	r0, f38c <gatt_disconnected+0x28>
		bt_mesh_proxy_role_cleanup(cli);
    f384:	f014 f9f2 	bl	2376c <bt_mesh_proxy_role_cleanup>
		cli = NULL;
    f388:	2300      	movs	r3, #0
    f38a:	602b      	str	r3, [r5, #0]
	bt_mesh_pb_gatt_close(conn);
    f38c:	4620      	mov	r0, r4
    f38e:	f7ff ff33 	bl	f1f8 <bt_mesh_pb_gatt_close>
	if (bt_mesh_is_provisioned()) {
    f392:	f7fa fe01 	bl	9f98 <bt_mesh_is_provisioned>
    f396:	b108      	cbz	r0, f39c <gatt_disconnected+0x38>
		(void)bt_mesh_pb_gatt_disable();
    f398:	f7ff ffd0 	bl	f33c <bt_mesh_pb_gatt_disable>
}
    f39c:	b009      	add	sp, #36	; 0x24
    f39e:	bd30      	pop	{r4, r5, pc}
    f3a0:	200040b8 	.word	0x200040b8
    f3a4:	200025b8 	.word	0x200025b8

0000f3a8 <bt_mesh_pb_gatt_send>:
{
    f3a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    f3aa:	4604      	mov	r4, r0
	if (!cli || cli->conn != conn) {
    f3ac:	4808      	ldr	r0, [pc, #32]	; (f3d0 <bt_mesh_pb_gatt_send+0x28>)
    f3ae:	6800      	ldr	r0, [r0, #0]
    f3b0:	b150      	cbz	r0, f3c8 <bt_mesh_pb_gatt_send+0x20>
    f3b2:	6805      	ldr	r5, [r0, #0]
    f3b4:	42a5      	cmp	r5, r4
    f3b6:	d107      	bne.n	f3c8 <bt_mesh_pb_gatt_send+0x20>
	return bt_mesh_proxy_msg_send(cli, BT_MESH_PROXY_PROV, buf, end, user_data);
    f3b8:	9300      	str	r3, [sp, #0]
    f3ba:	4613      	mov	r3, r2
    f3bc:	460a      	mov	r2, r1
    f3be:	2103      	movs	r1, #3
    f3c0:	f014 f97b 	bl	236ba <bt_mesh_proxy_msg_send>
}
    f3c4:	b003      	add	sp, #12
    f3c6:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
    f3c8:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    f3cc:	e7fa      	b.n	f3c4 <bt_mesh_pb_gatt_send+0x1c>
    f3ce:	bf00      	nop
    f3d0:	200025b8 	.word	0x200025b8

0000f3d4 <bt_mesh_pb_gatt_adv_start>:

int bt_mesh_pb_gatt_adv_start(void)
{
    f3d4:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("");

	if (!service_registered || bt_mesh_is_provisioned()) {
    f3d6:	4b2e      	ldr	r3, [pc, #184]	; (f490 <bt_mesh_pb_gatt_adv_start+0xbc>)
    f3d8:	781b      	ldrb	r3, [r3, #0]
{
    f3da:	b08e      	sub	sp, #56	; 0x38
	if (!service_registered || bt_mesh_is_provisioned()) {
    f3dc:	b91b      	cbnz	r3, f3e6 <bt_mesh_pb_gatt_adv_start+0x12>
		return -ENOTSUP;
    f3de:	f06f 0085 	mvn.w	r0, #133	; 0x85
	if (!err) {
		prov_fast_adv = false;
	}

	return err;
}
    f3e2:	b00e      	add	sp, #56	; 0x38
    f3e4:	bd70      	pop	{r4, r5, r6, pc}
	if (!service_registered || bt_mesh_is_provisioned()) {
    f3e6:	f7fa fdd7 	bl	9f98 <bt_mesh_is_provisioned>
    f3ea:	4601      	mov	r1, r0
    f3ec:	2800      	cmp	r0, #0
    f3ee:	d1f6      	bne.n	f3de <bt_mesh_pb_gatt_adv_start+0xa>
	struct bt_le_adv_param fast_adv_param = {
    f3f0:	2214      	movs	r2, #20
    f3f2:	a804      	add	r0, sp, #16
    f3f4:	f00e fe28 	bl	1e048 <memset>
    f3f8:	f240 210b 	movw	r1, #523	; 0x20b
    f3fc:	23a0      	movs	r3, #160	; 0xa0
    f3fe:	e9cd 1305 	strd	r1, r3, [sp, #20]
    f402:	23f0      	movs	r3, #240	; 0xf0
    f404:	9307      	str	r3, [sp, #28]
	const struct bt_mesh_prov *prov = bt_mesh_prov_get();
    f406:	f7ff f977 	bl	e6f8 <bt_mesh_prov_get>
	memcpy(prov_svc_data + 2, prov->uuid, 16);
    f40a:	4d22      	ldr	r5, [pc, #136]	; (f494 <bt_mesh_pb_gatt_adv_start+0xc0>)
    f40c:	6801      	ldr	r1, [r0, #0]
	const struct bt_mesh_prov *prov = bt_mesh_prov_get();
    f40e:	4604      	mov	r4, r0
	memcpy(prov_svc_data + 2, prov->uuid, 16);
    f410:	2210      	movs	r2, #16
    f412:	1ca8      	adds	r0, r5, #2
    f414:	f00e fe0d 	bl	1e032 <memcpy>
	sys_put_be16(prov->oob_info, prov_svc_data + 18);
    f418:	8923      	ldrh	r3, [r4, #8]
	dst[1] = val;
    f41a:	74eb      	strb	r3, [r5, #19]
	dst[0] = val >> 8;
    f41c:	0a1a      	lsrs	r2, r3, #8
    f41e:	74aa      	strb	r2, [r5, #18]
	if (!prov->uri) {
    f420:	6860      	ldr	r0, [r4, #4]
    f422:	b9d8      	cbnz	r0, f45c <bt_mesh_pb_gatt_adv_start+0x88>
		return 0;
    f424:	2400      	movs	r4, #0
	if (!prov_fast_adv) {
    f426:	4d1c      	ldr	r5, [pc, #112]	; (f498 <bt_mesh_pb_gatt_adv_start+0xc4>)
    f428:	7829      	ldrb	r1, [r5, #0]
    f42a:	ae02      	add	r6, sp, #8
    f42c:	bb19      	cbnz	r1, f476 <bt_mesh_pb_gatt_adv_start+0xa2>
		struct bt_le_adv_param slow_adv_param = {
    f42e:	2214      	movs	r2, #20
    f430:	a809      	add	r0, sp, #36	; 0x24
    f432:	f00e fe09 	bl	1e048 <memset>
    f436:	f240 220b 	movw	r2, #523	; 0x20b
    f43a:	f44f 63c8 	mov.w	r3, #1600	; 0x640
    f43e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    f442:	f44f 63f0 	mov.w	r3, #1920	; 0x780
    f446:	930c      	str	r3, [sp, #48]	; 0x30
		return bt_mesh_adv_gatt_start(&slow_adv_param, SYS_FOREVER_MS, prov_ad,
    f448:	e9cd 6400 	strd	r6, r4, [sp]
    f44c:	4a13      	ldr	r2, [pc, #76]	; (f49c <bt_mesh_pb_gatt_adv_start+0xc8>)
    f44e:	2303      	movs	r3, #3
    f450:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    f454:	a809      	add	r0, sp, #36	; 0x24
    f456:	f7fe fa67 	bl	d928 <bt_mesh_adv_gatt_start>
    f45a:	e7c2      	b.n	f3e2 <bt_mesh_pb_gatt_adv_start+0xe>
	uri_len = strlen(prov->uri);
    f45c:	f00e fdbc 	bl	1dfd8 <strlen>
	if (uri_len > 29) {
    f460:	281d      	cmp	r0, #29
    f462:	d8df      	bhi.n	f424 <bt_mesh_pb_gatt_adv_start+0x50>
	prov_sd[0].type = BT_DATA_URI;
    f464:	2324      	movs	r3, #36	; 0x24
    f466:	f88d 3008 	strb.w	r3, [sp, #8]
	prov_sd[0].data = (const uint8_t *)prov->uri;
    f46a:	6863      	ldr	r3, [r4, #4]
	prov_sd[0].data_len = uri_len;
    f46c:	f88d 0009 	strb.w	r0, [sp, #9]
	prov_sd[0].data = (const uint8_t *)prov->uri;
    f470:	9303      	str	r3, [sp, #12]
	return 1;
    f472:	2401      	movs	r4, #1
    f474:	e7d7      	b.n	f426 <bt_mesh_pb_gatt_adv_start+0x52>
	err = bt_mesh_adv_gatt_start(&fast_adv_param, (60 * MSEC_PER_SEC),
    f476:	e9cd 6400 	strd	r6, r4, [sp]
    f47a:	4a08      	ldr	r2, [pc, #32]	; (f49c <bt_mesh_pb_gatt_adv_start+0xc8>)
    f47c:	2303      	movs	r3, #3
    f47e:	f64e 2160 	movw	r1, #60000	; 0xea60
    f482:	a804      	add	r0, sp, #16
    f484:	f7fe fa50 	bl	d928 <bt_mesh_adv_gatt_start>
	if (!err) {
    f488:	2800      	cmp	r0, #0
    f48a:	d1aa      	bne.n	f3e2 <bt_mesh_pb_gatt_adv_start+0xe>
		prov_fast_adv = false;
    f48c:	7028      	strb	r0, [r5, #0]
    f48e:	e7a8      	b.n	f3e2 <bt_mesh_pb_gatt_adv_start+0xe>
    f490:	200040b8 	.word	0x200040b8
    f494:	20000dfb 	.word	0x20000dfb
    f498:	200040b7 	.word	0x200040b7
    f49c:	00026fac 	.word	0x00026fac

0000f4a0 <proxy_send_beacons>:
{
	struct bt_mesh_proxy_client *client;

	client = CONTAINER_OF(work, struct bt_mesh_proxy_client, send_beacons);

	(void)bt_mesh_subnet_find(send_beacon_cb, client);
    f4a0:	f1a0 010c 	sub.w	r1, r0, #12
    f4a4:	4801      	ldr	r0, [pc, #4]	; (f4ac <proxy_send_beacons+0xc>)
    f4a6:	f7fb bf4b 	b.w	b340 <bt_mesh_subnet_find>
    f4aa:	bf00      	nop
    f4ac:	0002350d 	.word	0x0002350d

0000f4b0 <proxy_ccc_write>:
{
	struct bt_mesh_proxy_client *client;

	BT_DBG("value: 0x%04x", value);

	if (value != BT_GATT_CCC_NOTIFY) {
    f4b0:	2a01      	cmp	r2, #1
{
    f4b2:	b538      	push	{r3, r4, r5, lr}
    f4b4:	4614      	mov	r4, r2
	if (value != BT_GATT_CCC_NOTIFY) {
    f4b6:	d110      	bne.n	f4da <proxy_ccc_write+0x2a>
	return &clients[bt_conn_index(conn)];
    f4b8:	f7f8 fe90 	bl	81dc <bt_conn_index>
		BT_WARN("Client wrote 0x%04x instead enabling notify", value);
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
	}

	client = find_client(conn);
	if (client->filter_type == NONE) {
    f4bc:	4a08      	ldr	r2, [pc, #32]	; (f4e0 <proxy_ccc_write+0x30>)
    f4be:	231c      	movs	r3, #28
    f4c0:	fb03 2100 	mla	r1, r3, r0, r2
    f4c4:	7a8d      	ldrb	r5, [r1, #10]
    f4c6:	b935      	cbnz	r5, f4d6 <proxy_ccc_write+0x26>
		client->filter_type = ACCEPT;
    f4c8:	728c      	strb	r4, [r1, #10]
		k_work_submit(&client->send_beacons);
    f4ca:	210c      	movs	r1, #12
    f4cc:	fb13 1000 	smlabb	r0, r3, r0, r1
    f4d0:	4410      	add	r0, r2
    f4d2:	f00c f885 	bl	1b5e0 <k_work_submit>
	}

	return sizeof(value);
    f4d6:	2002      	movs	r0, #2
    f4d8:	e001      	b.n	f4de <proxy_ccc_write+0x2e>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
    f4da:	f06f 0012 	mvn.w	r0, #18
}
    f4de:	bd38      	pop	{r3, r4, r5, pc}
    f4e0:	20000768 	.word	0x20000768

0000f4e4 <gatt_recv>:
{
    f4e4:	b538      	push	{r3, r4, r5, lr}
    f4e6:	461d      	mov	r5, r3
    f4e8:	4614      	mov	r4, r2
	return &clients[bt_conn_index(conn)];
    f4ea:	f7f8 fe77 	bl	81dc <bt_conn_index>
	if (len < 1) {
    f4ee:	b175      	cbz	r5, f50e <gatt_recv+0x2a>
	if (PDU_TYPE(data) == BT_MESH_PROXY_PROV) {
    f4f0:	7823      	ldrb	r3, [r4, #0]
    f4f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    f4f6:	2b03      	cmp	r3, #3
    f4f8:	d009      	beq.n	f50e <gatt_recv+0x2a>
	return bt_mesh_proxy_msg_recv(client->cli, buf, len);
    f4fa:	231c      	movs	r3, #28
    f4fc:	4358      	muls	r0, r3
    f4fe:	4b05      	ldr	r3, [pc, #20]	; (f514 <gatt_recv+0x30>)
    f500:	462a      	mov	r2, r5
    f502:	5818      	ldr	r0, [r3, r0]
    f504:	4621      	mov	r1, r4
}
    f506:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_mesh_proxy_msg_recv(client->cli, buf, len);
    f50a:	f014 b87c 	b.w	23606 <bt_mesh_proxy_msg_recv>
}
    f50e:	f06f 0015 	mvn.w	r0, #21
    f512:	bd38      	pop	{r3, r4, r5, pc}
    f514:	20000768 	.word	0x20000768

0000f518 <proxy_send>:
}

static int proxy_send(struct bt_conn *conn,
		      const void *data, uint16_t len,
		      bt_gatt_complete_func_t end, void *user_data)
{
    f518:	b5f0      	push	{r4, r5, r6, r7, lr}
    f51a:	b087      	sub	sp, #28
    f51c:	4604      	mov	r4, r0
    f51e:	460f      	mov	r7, r1
    f520:	4616      	mov	r6, r2
	BT_DBG("%u bytes: %s", len, bt_hex(data, len));

	struct bt_gatt_notify_params params = {
    f522:	2100      	movs	r1, #0
    f524:	2210      	movs	r2, #16
    f526:	4668      	mov	r0, sp
{
    f528:	461d      	mov	r5, r3
	struct bt_gatt_notify_params params = {
    f52a:	f00e fd8d 	bl	1e048 <memset>
    f52e:	4b07      	ldr	r3, [pc, #28]	; (f54c <proxy_send+0x34>)
    f530:	f8ad 600c 	strh.w	r6, [sp, #12]
    f534:	e9cd 3701 	strd	r3, r7, [sp, #4]
		.attr = &proxy_attrs[3],
		.user_data = user_data,
		.func = end,
	};

	return bt_gatt_notify_cb(conn, &params);
    f538:	4669      	mov	r1, sp
	struct bt_gatt_notify_params params = {
    f53a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f53c:	9504      	str	r5, [sp, #16]
	return bt_gatt_notify_cb(conn, &params);
    f53e:	4620      	mov	r0, r4
	struct bt_gatt_notify_params params = {
    f540:	9305      	str	r3, [sp, #20]
	return bt_gatt_notify_cb(conn, &params);
    f542:	f7fa fb2b 	bl	9b9c <bt_gatt_notify_cb>
}
    f546:	b007      	add	sp, #28
    f548:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f54a:	bf00      	nop
    f54c:	200007c0 	.word	0x200007c0

0000f550 <bt_mesh_proxy_beacon_send>:
	if (!sub) {
    f550:	4601      	mov	r1, r0
    f552:	b920      	cbnz	r0, f55e <bt_mesh_proxy_beacon_send+0xe>
		bt_mesh_subnet_foreach(bt_mesh_proxy_beacon_send);
    f554:	4804      	ldr	r0, [pc, #16]	; (f568 <bt_mesh_proxy_beacon_send+0x18>)
    f556:	f7fb bf17 	b.w	b388 <bt_mesh_subnet_foreach>
			beacon_send(&clients[i], sub);
    f55a:	f013 bfbc 	b.w	234d6 <beacon_send>
		if (clients[i].cli) {
    f55e:	4803      	ldr	r0, [pc, #12]	; (f56c <bt_mesh_proxy_beacon_send+0x1c>)
    f560:	6803      	ldr	r3, [r0, #0]
    f562:	2b00      	cmp	r3, #0
    f564:	d1f9      	bne.n	f55a <bt_mesh_proxy_beacon_send+0xa>
}
    f566:	4770      	bx	lr
    f568:	0000f551 	.word	0x0000f551
    f56c:	20000768 	.word	0x20000768

0000f570 <subnet_evt>:
	if (evt == BT_MESH_KEY_DELETED) {
    f570:	2901      	cmp	r1, #1
    f572:	d106      	bne.n	f582 <subnet_evt+0x12>
		if (sub == beacon_sub) {
    f574:	4a04      	ldr	r2, [pc, #16]	; (f588 <subnet_evt+0x18>)
    f576:	6811      	ldr	r1, [r2, #0]
    f578:	4288      	cmp	r0, r1
    f57a:	d104      	bne.n	f586 <subnet_evt+0x16>
			beacon_sub = NULL;
    f57c:	2300      	movs	r3, #0
    f57e:	6013      	str	r3, [r2, #0]
    f580:	4770      	bx	lr
		bt_mesh_proxy_beacon_send(sub);
    f582:	f7ff bfe5 	b.w	f550 <bt_mesh_proxy_beacon_send>
}
    f586:	4770      	bx	lr
    f588:	200025bc 	.word	0x200025bc

0000f58c <gatt_connected>:
{
    f58c:	b5f0      	push	{r4, r5, r6, r7, lr}
    f58e:	b089      	sub	sp, #36	; 0x24
	bt_conn_get_info(conn, &info);
    f590:	a901      	add	r1, sp, #4
{
    f592:	4604      	mov	r4, r0
	bt_conn_get_info(conn, &info);
    f594:	f7f8 ff20 	bl	83d8 <bt_conn_get_info>
	if (info.role != BT_CONN_ROLE_PERIPHERAL ||
    f598:	f89d 3005 	ldrb.w	r3, [sp, #5]
    f59c:	2b01      	cmp	r3, #1
    f59e:	d122      	bne.n	f5e6 <gatt_connected+0x5a>
	    !service_registered) {
    f5a0:	4b12      	ldr	r3, [pc, #72]	; (f5ec <gatt_connected+0x60>)
	if (info.role != BT_CONN_ROLE_PERIPHERAL ||
    f5a2:	781b      	ldrb	r3, [r3, #0]
    f5a4:	b1fb      	cbz	r3, f5e6 <gatt_connected+0x5a>
	conn_count++;
    f5a6:	4d12      	ldr	r5, [pc, #72]	; (f5f0 <gatt_connected+0x64>)
	client->filter_type = NONE;
    f5a8:	4e12      	ldr	r6, [pc, #72]	; (f5f4 <gatt_connected+0x68>)
	conn_count++;
    f5aa:	682b      	ldr	r3, [r5, #0]
	return &clients[bt_conn_index(conn)];
    f5ac:	4620      	mov	r0, r4
	conn_count++;
    f5ae:	3301      	adds	r3, #1
    f5b0:	602b      	str	r3, [r5, #0]
	return &clients[bt_conn_index(conn)];
    f5b2:	f7f8 fe13 	bl	81dc <bt_conn_index>
	client->filter_type = NONE;
    f5b6:	231c      	movs	r3, #28
    f5b8:	fb03 f700 	mul.w	r7, r3, r0
    f5bc:	19f2      	adds	r2, r6, r7
    f5be:	2100      	movs	r1, #0
    f5c0:	7291      	strb	r1, [r2, #10]
	(void)memset(client->filter, 0, sizeof(client->filter));
    f5c2:	2204      	movs	r2, #4
    f5c4:	fb13 2000 	smlabb	r0, r3, r0, r2
    f5c8:	4430      	add	r0, r6
    f5ca:	2206      	movs	r2, #6
    f5cc:	f00e fd3c 	bl	1e048 <memset>
	client->cli = bt_mesh_proxy_role_setup(conn, proxy_send,
    f5d0:	4a09      	ldr	r2, [pc, #36]	; (f5f8 <gatt_connected+0x6c>)
    f5d2:	490a      	ldr	r1, [pc, #40]	; (f5fc <gatt_connected+0x70>)
    f5d4:	4620      	mov	r0, r4
    f5d6:	f000 fb11 	bl	fbfc <bt_mesh_proxy_role_setup>
	if (conn_count < CONFIG_BT_MAX_CONN) {
    f5da:	682b      	ldr	r3, [r5, #0]
	client->cli = bt_mesh_proxy_role_setup(conn, proxy_send,
    f5dc:	51f0      	str	r0, [r6, r7]
	if (conn_count < CONFIG_BT_MAX_CONN) {
    f5de:	2b00      	cmp	r3, #0
    f5e0:	dc01      	bgt.n	f5e6 <gatt_connected+0x5a>
		bt_mesh_adv_gatt_update();
    f5e2:	f013 fc3e 	bl	22e62 <bt_mesh_adv_gatt_update>
}
    f5e6:	b009      	add	sp, #36	; 0x24
    f5e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f5ea:	bf00      	nop
    f5ec:	200040b9 	.word	0x200040b9
    f5f0:	200025c0 	.word	0x200025c0
    f5f4:	20000768 	.word	0x20000768
    f5f8:	0000f641 	.word	0x0000f641
    f5fc:	0000f519 	.word	0x0000f519

0000f600 <node_id_start>:
	sub->node_id = BT_MESH_NODE_IDENTITY_RUNNING;
    f600:	2301      	movs	r3, #1
{
    f602:	b570      	push	{r4, r5, r6, lr}
    f604:	4604      	mov	r4, r0
	sub->node_id = BT_MESH_NODE_IDENTITY_RUNNING;
    f606:	77c3      	strb	r3, [r0, #31]
    f608:	f016 fcd0 	bl	25fac <z_impl_k_uptime_ticks>
    f60c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f610:	fba0 3002 	umull	r3, r0, r0, r2
    f614:	fb02 0001 	mla	r0, r2, r1, r0
    f618:	0bdb      	lsrs	r3, r3, #15
    f61a:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
	STRUCT_SECTION_FOREACH(bt_mesh_proxy_cb, cb) {
    f61e:	4d06      	ldr	r5, [pc, #24]	; (f638 <node_id_start+0x38>)
    f620:	4e06      	ldr	r6, [pc, #24]	; (f63c <node_id_start+0x3c>)
    f622:	6223      	str	r3, [r4, #32]
    f624:	42b5      	cmp	r5, r6
    f626:	d300      	bcc.n	f62a <node_id_start+0x2a>
}
    f628:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->identity_enabled) {
    f62a:	682b      	ldr	r3, [r5, #0]
    f62c:	b10b      	cbz	r3, f632 <node_id_start+0x32>
			cb->identity_enabled(sub->net_idx);
    f62e:	8ba0      	ldrh	r0, [r4, #28]
    f630:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_mesh_proxy_cb, cb) {
    f632:	3508      	adds	r5, #8
    f634:	e7f6      	b.n	f624 <node_id_start+0x24>
    f636:	bf00      	nop
    f638:	000265e8 	.word	0x000265e8
    f63c:	000265e8 	.word	0x000265e8

0000f640 <proxy_msg_recv>:
{
    f640:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (role->msg_type) {
    f642:	7901      	ldrb	r1, [r0, #4]
    f644:	2901      	cmp	r1, #1
{
    f646:	b093      	sub	sp, #76	; 0x4c
    f648:	4604      	mov	r4, r0
	switch (role->msg_type) {
    f64a:	d00a      	beq.n	f662 <proxy_msg_recv+0x22>
    f64c:	2902      	cmp	r1, #2
    f64e:	d00e      	beq.n	f66e <proxy_msg_recv+0x2e>
    f650:	2900      	cmp	r1, #0
    f652:	d16e      	bne.n	f732 <proxy_msg_recv+0xf2>
		bt_mesh_net_recv(&role->buf, 0, BT_MESH_NET_IF_PROXY);
    f654:	2202      	movs	r2, #2
    f656:	3040      	adds	r0, #64	; 0x40
}
    f658:	b013      	add	sp, #76	; 0x4c
    f65a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_mesh_net_recv(&role->buf, 0, BT_MESH_NET_IF_PROXY);
    f65e:	f7fb bc87 	b.w	af70 <bt_mesh_net_recv>
		bt_mesh_beacon_recv(&role->buf);
    f662:	3040      	adds	r0, #64	; 0x40
}
    f664:	b013      	add	sp, #76	; 0x4c
    f666:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_mesh_beacon_recv(&role->buf);
    f66a:	f7fa bfe5 	b.w	a638 <bt_mesh_beacon_recv>
	NET_BUF_SIMPLE_DEFINE(buf, BT_MESH_NET_MAX_PDU_LEN);
    f66e:	ab0a      	add	r3, sp, #40	; 0x28
    f670:	f44f 12e8 	mov.w	r2, #1900544	; 0x1d0000
    f674:	e9cd 2302 	strd	r2, r3, [sp, #8]
    f678:	9301      	str	r3, [sp, #4]
	err = bt_mesh_net_decode(&role->buf, BT_MESH_NET_IF_PROXY_CFG,
    f67a:	2103      	movs	r1, #3
    f67c:	ab01      	add	r3, sp, #4
    f67e:	aa04      	add	r2, sp, #16
    f680:	3040      	adds	r0, #64	; 0x40
    f682:	f7fb fbe1 	bl	ae48 <bt_mesh_net_decode>
	if (err) {
    f686:	4601      	mov	r1, r0
    f688:	2800      	cmp	r0, #0
    f68a:	d152      	bne.n	f732 <proxy_msg_recv+0xf2>
	rx.local_match = 1U;
    f68c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
	if (bt_mesh_rpl_check(&rx, NULL)) {
    f690:	a804      	add	r0, sp, #16
	rx.local_match = 1U;
    f692:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f696:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	if (bt_mesh_rpl_check(&rx, NULL)) {
    f69a:	f7fd f82b 	bl	c6f4 <bt_mesh_rpl_check>
    f69e:	2800      	cmp	r0, #0
    f6a0:	d147      	bne.n	f732 <proxy_msg_recv+0xf2>
	net_buf_simple_pull(&buf, BT_MESH_NET_HDR_LEN);
    f6a2:	2109      	movs	r1, #9
    f6a4:	a801      	add	r0, sp, #4
    f6a6:	f015 fbb1 	bl	24e0c <net_buf_simple_pull>
	if (buf.len < 1) {
    f6aa:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    f6ae:	2b00      	cmp	r3, #0
    f6b0:	d03f      	beq.n	f732 <proxy_msg_recv+0xf2>
	return &clients[bt_conn_index(conn)];
    f6b2:	6820      	ldr	r0, [r4, #0]
    f6b4:	4e33      	ldr	r6, [pc, #204]	; (f784 <proxy_msg_recv+0x144>)
    f6b6:	f7f8 fd91 	bl	81dc <bt_conn_index>
    f6ba:	b204      	sxth	r4, r0
    f6bc:	4605      	mov	r5, r0
	opcode = net_buf_simple_pull_u8(buf);
    f6be:	a801      	add	r0, sp, #4
    f6c0:	f015 fbb4 	bl	24e2c <net_buf_simple_pull_u8>
    f6c4:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
	switch (opcode) {
    f6c8:	2801      	cmp	r0, #1
    f6ca:	ea4f 0784 	mov.w	r7, r4, lsl #2
	return &clients[bt_conn_index(conn)];
    f6ce:	eb06 0484 	add.w	r4, r6, r4, lsl #2
	switch (opcode) {
    f6d2:	d04e      	beq.n	f772 <proxy_msg_recv+0x132>
    f6d4:	2802      	cmp	r0, #2
    f6d6:	d11d      	bne.n	f714 <proxy_msg_recv+0xd4>
		if (client->filter[i] == addr) {
    f6d8:	271c      	movs	r7, #28
    f6da:	fb07 6705 	mla	r7, r7, r5, r6
		while (buf->len >= 2) {
    f6de:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    f6e2:	2b01      	cmp	r3, #1
    f6e4:	d920      	bls.n	f728 <proxy_msg_recv+0xe8>
			addr = net_buf_simple_pull_be16(buf);
    f6e6:	a801      	add	r0, sp, #4
    f6e8:	f015 fbb0 	bl	24e4c <net_buf_simple_pull_be16>
	if (addr == BT_MESH_ADDR_UNASSIGNED) {
    f6ec:	2800      	cmp	r0, #0
    f6ee:	d0f6      	beq.n	f6de <proxy_msg_recv+0x9e>
		if (client->filter[i] == addr) {
    f6f0:	88bb      	ldrh	r3, [r7, #4]
    f6f2:	4283      	cmp	r3, r0
    f6f4:	d042      	beq.n	f77c <proxy_msg_recv+0x13c>
    f6f6:	88fb      	ldrh	r3, [r7, #6]
    f6f8:	4283      	cmp	r3, r0
    f6fa:	d041      	beq.n	f780 <proxy_msg_recv+0x140>
    f6fc:	893b      	ldrh	r3, [r7, #8]
    f6fe:	4283      	cmp	r3, r0
    f700:	d1ed      	bne.n	f6de <proxy_msg_recv+0x9e>
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
    f702:	2302      	movs	r3, #2
			client->filter[i] = BT_MESH_ADDR_UNASSIGNED;
    f704:	220e      	movs	r2, #14
    f706:	fb02 3305 	mla	r3, r2, r5, r3
    f70a:	eb06 0343 	add.w	r3, r6, r3, lsl #1
    f70e:	2200      	movs	r2, #0
    f710:	809a      	strh	r2, [r3, #4]
			return;
    f712:	e7e4      	b.n	f6de <proxy_msg_recv+0x9e>
	switch (opcode) {
    f714:	b968      	cbnz	r0, f732 <proxy_msg_recv+0xf2>
	if (buf->len < 1) {
    f716:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    f71a:	b12b      	cbz	r3, f728 <proxy_msg_recv+0xe8>
	type = net_buf_simple_pull_u8(buf);
    f71c:	a801      	add	r0, sp, #4
    f71e:	f015 fb85 	bl	24e2c <net_buf_simple_pull_u8>
	switch (type) {
    f722:	b140      	cbz	r0, f736 <proxy_msg_recv+0xf6>
    f724:	2801      	cmp	r0, #1
    f726:	d012      	beq.n	f74e <proxy_msg_recv+0x10e>
		send_filter_status(client, rx, buf);
    f728:	aa01      	add	r2, sp, #4
    f72a:	a904      	add	r1, sp, #16
    f72c:	4620      	mov	r0, r4
    f72e:	f013 fefa 	bl	23526 <send_filter_status>
}
    f732:	b013      	add	sp, #76	; 0x4c
    f734:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(void)memset(client->filter, 0, sizeof(client->filter));
    f736:	1d38      	adds	r0, r7, #4
    f738:	2206      	movs	r2, #6
    f73a:	2100      	movs	r1, #0
    f73c:	4430      	add	r0, r6
    f73e:	f00e fc83 	bl	1e048 <memset>
		client->filter_type = ACCEPT;
    f742:	201c      	movs	r0, #28
    f744:	fb00 6505 	mla	r5, r0, r5, r6
    f748:	2301      	movs	r3, #1
		client->filter_type = REJECT;
    f74a:	72ab      	strb	r3, [r5, #10]
		break;
    f74c:	e7ec      	b.n	f728 <proxy_msg_recv+0xe8>
		(void)memset(client->filter, 0, sizeof(client->filter));
    f74e:	1d38      	adds	r0, r7, #4
    f750:	2206      	movs	r2, #6
    f752:	2100      	movs	r1, #0
    f754:	4430      	add	r0, r6
    f756:	f00e fc77 	bl	1e048 <memset>
		client->filter_type = REJECT;
    f75a:	201c      	movs	r0, #28
    f75c:	fb00 6505 	mla	r5, r0, r5, r6
    f760:	2302      	movs	r3, #2
    f762:	e7f2      	b.n	f74a <proxy_msg_recv+0x10a>
			addr = net_buf_simple_pull_be16(buf);
    f764:	a801      	add	r0, sp, #4
    f766:	f015 fb71 	bl	24e4c <net_buf_simple_pull_be16>
    f76a:	4601      	mov	r1, r0
			filter_add(client, addr);
    f76c:	4620      	mov	r0, r4
    f76e:	f013 ff1a 	bl	235a6 <filter_add>
		while (buf->len >= 2) {
    f772:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    f776:	2b01      	cmp	r3, #1
    f778:	d8f4      	bhi.n	f764 <proxy_msg_recv+0x124>
    f77a:	e7d5      	b.n	f728 <proxy_msg_recv+0xe8>
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
    f77c:	2300      	movs	r3, #0
    f77e:	e7c1      	b.n	f704 <proxy_msg_recv+0xc4>
    f780:	2301      	movs	r3, #1
    f782:	e7bf      	b.n	f704 <proxy_msg_recv+0xc4>
    f784:	20000768 	.word	0x20000768

0000f788 <bt_mesh_proxy_identity_start>:
{
    f788:	b510      	push	{r4, lr}
    f78a:	4604      	mov	r4, r0
	node_id_start(sub);
    f78c:	f7ff ff38 	bl	f600 <node_id_start>
	beacon_sub = sub;
    f790:	4b01      	ldr	r3, [pc, #4]	; (f798 <bt_mesh_proxy_identity_start+0x10>)
    f792:	601c      	str	r4, [r3, #0]
}
    f794:	bd10      	pop	{r4, pc}
    f796:	bf00      	nop
    f798:	200025bc 	.word	0x200025bc

0000f79c <bt_mesh_proxy_identity_stop>:
{
    f79c:	b570      	push	{r4, r5, r6, lr}
	sub->node_id = BT_MESH_NODE_IDENTITY_STOPPED;
    f79e:	2300      	movs	r3, #0
	STRUCT_SECTION_FOREACH(bt_mesh_proxy_cb, cb) {
    f7a0:	4d06      	ldr	r5, [pc, #24]	; (f7bc <bt_mesh_proxy_identity_stop+0x20>)
    f7a2:	4e07      	ldr	r6, [pc, #28]	; (f7c0 <bt_mesh_proxy_identity_stop+0x24>)
	sub->node_id = BT_MESH_NODE_IDENTITY_STOPPED;
    f7a4:	77c3      	strb	r3, [r0, #31]
{
    f7a6:	4604      	mov	r4, r0
	sub->node_id_start = 0U;
    f7a8:	6203      	str	r3, [r0, #32]
	STRUCT_SECTION_FOREACH(bt_mesh_proxy_cb, cb) {
    f7aa:	42b5      	cmp	r5, r6
    f7ac:	d300      	bcc.n	f7b0 <bt_mesh_proxy_identity_stop+0x14>
}
    f7ae:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->identity_disabled) {
    f7b0:	686b      	ldr	r3, [r5, #4]
    f7b2:	b10b      	cbz	r3, f7b8 <bt_mesh_proxy_identity_stop+0x1c>
			cb->identity_disabled(sub->net_idx);
    f7b4:	8ba0      	ldrh	r0, [r4, #28]
    f7b6:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_mesh_proxy_cb, cb) {
    f7b8:	3508      	adds	r5, #8
    f7ba:	e7f6      	b.n	f7aa <bt_mesh_proxy_identity_stop+0xe>
    f7bc:	000265e8 	.word	0x000265e8
    f7c0:	000265e8 	.word	0x000265e8

0000f7c4 <bt_mesh_proxy_gatt_enable>:
{
    f7c4:	b538      	push	{r3, r4, r5, lr}
	if (!bt_mesh_is_provisioned()) {
    f7c6:	f7fa fbe7 	bl	9f98 <bt_mesh_is_provisioned>
    f7ca:	b168      	cbz	r0, f7e8 <bt_mesh_proxy_gatt_enable+0x24>
	if (service_registered) {
    f7cc:	4d09      	ldr	r5, [pc, #36]	; (f7f4 <bt_mesh_proxy_gatt_enable+0x30>)
    f7ce:	782c      	ldrb	r4, [r5, #0]
    f7d0:	b96c      	cbnz	r4, f7ee <bt_mesh_proxy_gatt_enable+0x2a>
	(void)bt_gatt_service_register(&proxy_svc);
    f7d2:	4809      	ldr	r0, [pc, #36]	; (f7f8 <bt_mesh_proxy_gatt_enable+0x34>)
    f7d4:	f7f9 fff0 	bl	97b8 <bt_gatt_service_register>
		if (clients[i].cli) {
    f7d8:	4b08      	ldr	r3, [pc, #32]	; (f7fc <bt_mesh_proxy_gatt_enable+0x38>)
    f7da:	6818      	ldr	r0, [r3, #0]
	service_registered = true;
    f7dc:	2201      	movs	r2, #1
    f7de:	702a      	strb	r2, [r5, #0]
		if (clients[i].cli) {
    f7e0:	b108      	cbz	r0, f7e6 <bt_mesh_proxy_gatt_enable+0x22>
			clients[i].filter_type = ACCEPT;
    f7e2:	729a      	strb	r2, [r3, #10]
	for (i = 0; i < ARRAY_SIZE(clients); i++) {
    f7e4:	4620      	mov	r0, r4
}
    f7e6:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
    f7e8:	f06f 0085 	mvn.w	r0, #133	; 0x85
    f7ec:	e7fb      	b.n	f7e6 <bt_mesh_proxy_gatt_enable+0x22>
		return -EBUSY;
    f7ee:	f06f 000f 	mvn.w	r0, #15
    f7f2:	e7f8      	b.n	f7e6 <bt_mesh_proxy_gatt_enable+0x22>
    f7f4:	200040b9 	.word	0x200040b9
    f7f8:	20000814 	.word	0x20000814
    f7fc:	20000768 	.word	0x20000768

0000f800 <gatt_disconnected>:
{
    f800:	b530      	push	{r4, r5, lr}
    f802:	b089      	sub	sp, #36	; 0x24
	bt_conn_get_info(conn, &info);
    f804:	a901      	add	r1, sp, #4
{
    f806:	4604      	mov	r4, r0
	bt_conn_get_info(conn, &info);
    f808:	f7f8 fde6 	bl	83d8 <bt_conn_get_info>
	if (info.role != BT_CONN_ROLE_PERIPHERAL) {
    f80c:	f89d 3005 	ldrb.w	r3, [sp, #5]
    f810:	2b01      	cmp	r3, #1
    f812:	d107      	bne.n	f824 <gatt_disconnected+0x24>
	if (!service_registered && bt_mesh_is_provisioned()) {
    f814:	4b0d      	ldr	r3, [pc, #52]	; (f84c <gatt_disconnected+0x4c>)
    f816:	781b      	ldrb	r3, [r3, #0]
    f818:	b933      	cbnz	r3, f828 <gatt_disconnected+0x28>
    f81a:	f7fa fbbd 	bl	9f98 <bt_mesh_is_provisioned>
    f81e:	b118      	cbz	r0, f828 <gatt_disconnected+0x28>
		(void)bt_mesh_proxy_gatt_enable();
    f820:	f7ff ffd0 	bl	f7c4 <bt_mesh_proxy_gatt_enable>
}
    f824:	b009      	add	sp, #36	; 0x24
    f826:	bd30      	pop	{r4, r5, pc}
	return &clients[bt_conn_index(conn)];
    f828:	4620      	mov	r0, r4
    f82a:	f7f8 fcd7 	bl	81dc <bt_conn_index>
	if (client->cli) {
    f82e:	241c      	movs	r4, #28
    f830:	4d07      	ldr	r5, [pc, #28]	; (f850 <gatt_disconnected+0x50>)
    f832:	4344      	muls	r4, r0
    f834:	5928      	ldr	r0, [r5, r4]
    f836:	2800      	cmp	r0, #0
    f838:	d0f4      	beq.n	f824 <gatt_disconnected+0x24>
		conn_count--;
    f83a:	4a06      	ldr	r2, [pc, #24]	; (f854 <gatt_disconnected+0x54>)
    f83c:	6813      	ldr	r3, [r2, #0]
    f83e:	3b01      	subs	r3, #1
    f840:	6013      	str	r3, [r2, #0]
		bt_mesh_proxy_role_cleanup(client->cli);
    f842:	f013 ff93 	bl	2376c <bt_mesh_proxy_role_cleanup>
		client->cli = NULL;
    f846:	2300      	movs	r3, #0
    f848:	512b      	str	r3, [r5, r4]
    f84a:	e7eb      	b.n	f824 <gatt_disconnected+0x24>
    f84c:	200040b9 	.word	0x200040b9
    f850:	20000768 	.word	0x20000768
    f854:	200025c0 	.word	0x200025c0

0000f858 <bt_mesh_proxy_gatt_disconnect>:
		if (client->cli && (client->filter_type == ACCEPT ||
    f858:	4b06      	ldr	r3, [pc, #24]	; (f874 <bt_mesh_proxy_gatt_disconnect+0x1c>)
    f85a:	6818      	ldr	r0, [r3, #0]
    f85c:	b148      	cbz	r0, f872 <bt_mesh_proxy_gatt_disconnect+0x1a>
    f85e:	7a9a      	ldrb	r2, [r3, #10]
    f860:	3a01      	subs	r2, #1
    f862:	2a01      	cmp	r2, #1
    f864:	d805      	bhi.n	f872 <bt_mesh_proxy_gatt_disconnect+0x1a>
			client->filter_type = NONE;
    f866:	2200      	movs	r2, #0
			bt_conn_disconnect(client->cli->conn,
    f868:	6800      	ldr	r0, [r0, #0]
			client->filter_type = NONE;
    f86a:	729a      	strb	r2, [r3, #10]
			bt_conn_disconnect(client->cli->conn,
    f86c:	2113      	movs	r1, #19
    f86e:	f00f bb2c 	b.w	1eeca <bt_conn_disconnect>
}
    f872:	4770      	bx	lr
    f874:	20000768 	.word	0x20000768

0000f878 <bt_mesh_proxy_gatt_disable>:
{
    f878:	b510      	push	{r4, lr}
	if (!service_registered) {
    f87a:	4c07      	ldr	r4, [pc, #28]	; (f898 <bt_mesh_proxy_gatt_disable+0x20>)
    f87c:	7823      	ldrb	r3, [r4, #0]
    f87e:	b13b      	cbz	r3, f890 <bt_mesh_proxy_gatt_disable+0x18>
	bt_mesh_proxy_gatt_disconnect();
    f880:	f7ff ffea 	bl	f858 <bt_mesh_proxy_gatt_disconnect>
	bt_gatt_service_unregister(&proxy_svc);
    f884:	4805      	ldr	r0, [pc, #20]	; (f89c <bt_mesh_proxy_gatt_disable+0x24>)
    f886:	f7f9 fe81 	bl	958c <bt_gatt_service_unregister>
	service_registered = false;
    f88a:	2000      	movs	r0, #0
    f88c:	7020      	strb	r0, [r4, #0]
}
    f88e:	bd10      	pop	{r4, pc}
		return -EALREADY;
    f890:	f06f 0077 	mvn.w	r0, #119	; 0x77
    f894:	e7fb      	b.n	f88e <bt_mesh_proxy_gatt_disable+0x16>
    f896:	bf00      	nop
    f898:	200040b9 	.word	0x200040b9
    f89c:	20000814 	.word	0x20000814

0000f8a0 <bt_mesh_proxy_addr_add>:
{
    f8a0:	b538      	push	{r3, r4, r5, lr}
	return &clients[bt_conn_index(conn)];
    f8a2:	f850 0c40 	ldr.w	r0, [r0, #-64]
	if (client->filter_type == ACCEPT) {
    f8a6:	4d16      	ldr	r5, [pc, #88]	; (f900 <bt_mesh_proxy_addr_add+0x60>)
{
    f8a8:	460c      	mov	r4, r1
	return &clients[bt_conn_index(conn)];
    f8aa:	f7f8 fc97 	bl	81dc <bt_conn_index>
	if (client->filter_type == ACCEPT) {
    f8ae:	221c      	movs	r2, #28
    f8b0:	fb02 5200 	mla	r2, r2, r0, r5
    f8b4:	7a93      	ldrb	r3, [r2, #10]
    f8b6:	2b01      	cmp	r3, #1
    f8b8:	d109      	bne.n	f8ce <bt_mesh_proxy_addr_add+0x2e>
	return &clients[bt_conn_index(conn)];
    f8ba:	b200      	sxth	r0, r0
    f8bc:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
		filter_add(client, addr);
    f8c0:	4621      	mov	r1, r4
    f8c2:	eb05 0080 	add.w	r0, r5, r0, lsl #2
}
    f8c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		filter_add(client, addr);
    f8ca:	f013 be6c 	b.w	235a6 <filter_add>
	} else if (client->filter_type == REJECT) {
    f8ce:	2b02      	cmp	r3, #2
    f8d0:	d110      	bne.n	f8f4 <bt_mesh_proxy_addr_add+0x54>
	if (addr == BT_MESH_ADDR_UNASSIGNED) {
    f8d2:	b17c      	cbz	r4, f8f4 <bt_mesh_proxy_addr_add+0x54>
		if (client->filter[i] == addr) {
    f8d4:	8891      	ldrh	r1, [r2, #4]
    f8d6:	42a1      	cmp	r1, r4
    f8d8:	d00d      	beq.n	f8f6 <bt_mesh_proxy_addr_add+0x56>
    f8da:	88d1      	ldrh	r1, [r2, #6]
    f8dc:	42a1      	cmp	r1, r4
    f8de:	d00c      	beq.n	f8fa <bt_mesh_proxy_addr_add+0x5a>
    f8e0:	8912      	ldrh	r2, [r2, #8]
    f8e2:	42a2      	cmp	r2, r4
    f8e4:	d106      	bne.n	f8f4 <bt_mesh_proxy_addr_add+0x54>
			client->filter[i] = BT_MESH_ADDR_UNASSIGNED;
    f8e6:	220e      	movs	r2, #14
    f8e8:	fb02 3300 	mla	r3, r2, r0, r3
    f8ec:	eb05 0343 	add.w	r3, r5, r3, lsl #1
    f8f0:	2200      	movs	r2, #0
    f8f2:	809a      	strh	r2, [r3, #4]
}
    f8f4:	bd38      	pop	{r3, r4, r5, pc}
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
    f8f6:	2300      	movs	r3, #0
    f8f8:	e7f5      	b.n	f8e6 <bt_mesh_proxy_addr_add+0x46>
    f8fa:	2301      	movs	r3, #1
    f8fc:	e7f3      	b.n	f8e6 <bt_mesh_proxy_addr_add+0x46>
    f8fe:	bf00      	nop
    f900:	20000768 	.word	0x20000768

0000f904 <bt_mesh_proxy_relay>:
{
    f904:	b570      	push	{r4, r5, r6, lr}
		if (!client->cli) {
    f906:	4c2c      	ldr	r4, [pc, #176]	; (f9b8 <bt_mesh_proxy_relay+0xb4>)
{
    f908:	b08e      	sub	sp, #56	; 0x38
		NET_BUF_SIMPLE_DEFINE(msg, 32);
    f90a:	ab06      	add	r3, sp, #24
    f90c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    f910:	e9cd 2304 	strd	r2, r3, [sp, #16]
    f914:	9303      	str	r3, [sp, #12]
		if (!client->cli) {
    f916:	6823      	ldr	r3, [r4, #0]
{
    f918:	4605      	mov	r5, r0
		if (!client->cli) {
    f91a:	b15b      	cbz	r3, f934 <bt_mesh_proxy_relay+0x30>
	if (client->filter_type == REJECT) {
    f91c:	7aa3      	ldrb	r3, [r4, #10]
    f91e:	2b02      	cmp	r3, #2
    f920:	d10a      	bne.n	f938 <bt_mesh_proxy_relay+0x34>
			if (client->filter[i] == addr) {
    f922:	88a3      	ldrh	r3, [r4, #4]
    f924:	428b      	cmp	r3, r1
    f926:	d005      	beq.n	f934 <bt_mesh_proxy_relay+0x30>
    f928:	88e3      	ldrh	r3, [r4, #6]
    f92a:	428b      	cmp	r3, r1
    f92c:	d002      	beq.n	f934 <bt_mesh_proxy_relay+0x30>
    f92e:	8923      	ldrh	r3, [r4, #8]
    f930:	428b      	cmp	r3, r1
    f932:	d110      	bne.n	f956 <bt_mesh_proxy_relay+0x52>
	bool relayed = false;
    f934:	2000      	movs	r0, #0
    f936:	e03c      	b.n	f9b2 <bt_mesh_proxy_relay+0xae>
	if (addr == BT_MESH_ADDR_ALL_NODES) {
    f938:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f93c:	4291      	cmp	r1, r2
    f93e:	d00a      	beq.n	f956 <bt_mesh_proxy_relay+0x52>
	if (client->filter_type == ACCEPT) {
    f940:	2b01      	cmp	r3, #1
    f942:	d1f7      	bne.n	f934 <bt_mesh_proxy_relay+0x30>
			if (client->filter[i] == addr) {
    f944:	88a3      	ldrh	r3, [r4, #4]
    f946:	428b      	cmp	r3, r1
    f948:	d005      	beq.n	f956 <bt_mesh_proxy_relay+0x52>
    f94a:	88e3      	ldrh	r3, [r4, #6]
    f94c:	428b      	cmp	r3, r1
    f94e:	d002      	beq.n	f956 <bt_mesh_proxy_relay+0x52>
    f950:	8923      	ldrh	r3, [r4, #8]
    f952:	428b      	cmp	r3, r1
    f954:	d1ee      	bne.n	f934 <bt_mesh_proxy_relay+0x30>
		net_buf_simple_reserve(&msg, 1);
    f956:	2101      	movs	r1, #1
    f958:	a803      	add	r0, sp, #12
    f95a:	f015 f976 	bl	24c4a <net_buf_simple_reserve>
		net_buf_simple_add_mem(&msg, buf->data, buf->len);
    f95e:	89aa      	ldrh	r2, [r5, #12]
    f960:	68a9      	ldr	r1, [r5, #8]
    f962:	a803      	add	r0, sp, #12
    f964:	f015 f9dd 	bl	24d22 <net_buf_simple_add_mem>
					     &msg, buf_send_end, net_buf_ref(buf));
    f968:	4628      	mov	r0, r5
		err = bt_mesh_proxy_msg_send(client->cli, BT_MESH_PROXY_NET_PDU,
    f96a:	6824      	ldr	r4, [r4, #0]
					     &msg, buf_send_end, net_buf_ref(buf));
    f96c:	f015 f99b 	bl	24ca6 <net_buf_ref>
		err = bt_mesh_proxy_msg_send(client->cli, BT_MESH_PROXY_NET_PDU,
    f970:	4b12      	ldr	r3, [pc, #72]	; (f9bc <bt_mesh_proxy_relay+0xb8>)
    f972:	9000      	str	r0, [sp, #0]
    f974:	aa03      	add	r2, sp, #12
    f976:	4620      	mov	r0, r4
    f978:	2100      	movs	r1, #0
    f97a:	f013 fe9e 	bl	236ba <bt_mesh_proxy_msg_send>
		bt_mesh_adv_send_start(0, err, BT_MESH_ADV(buf));
    f97e:	696e      	ldr	r6, [r5, #20]
	if (!adv->started) {
    f980:	7a33      	ldrb	r3, [r6, #8]
		err = bt_mesh_proxy_msg_send(client->cli, BT_MESH_PROXY_NET_PDU,
    f982:	4604      	mov	r4, r0
    f984:	f013 0004 	ands.w	r0, r3, #4
    f988:	d110      	bne.n	f9ac <bt_mesh_proxy_relay+0xa8>
		adv->started = 1;
    f98a:	f043 0304 	orr.w	r3, r3, #4
    f98e:	7233      	strb	r3, [r6, #8]
		if (adv->cb && adv->cb->start) {
    f990:	6833      	ldr	r3, [r6, #0]
    f992:	b123      	cbz	r3, f99e <bt_mesh_proxy_relay+0x9a>
    f994:	681b      	ldr	r3, [r3, #0]
    f996:	b113      	cbz	r3, f99e <bt_mesh_proxy_relay+0x9a>
			adv->cb->start(duration, err, adv->cb_data);
    f998:	6872      	ldr	r2, [r6, #4]
    f99a:	4621      	mov	r1, r4
    f99c:	4798      	blx	r3
		if (err) {
    f99e:	b13c      	cbz	r4, f9b0 <bt_mesh_proxy_relay+0xac>
			adv->cb = NULL;
    f9a0:	2300      	movs	r3, #0
    f9a2:	6033      	str	r3, [r6, #0]
			net_buf_unref(buf);
    f9a4:	4628      	mov	r0, r5
    f9a6:	f007 fb67 	bl	17078 <net_buf_unref>
			continue;
    f9aa:	e7c3      	b.n	f934 <bt_mesh_proxy_relay+0x30>
		if (err) {
    f9ac:	2c00      	cmp	r4, #0
    f9ae:	d1f9      	bne.n	f9a4 <bt_mesh_proxy_relay+0xa0>
		relayed = true;
    f9b0:	2001      	movs	r0, #1
}
    f9b2:	b00e      	add	sp, #56	; 0x38
    f9b4:	bd70      	pop	{r4, r5, r6, pc}
    f9b6:	bf00      	nop
    f9b8:	20000768 	.word	0x20000768
    f9bc:	00023521 	.word	0x00023521

0000f9c0 <bt_mesh_proxy_adv_start>:

int bt_mesh_proxy_adv_start(void)
{
    f9c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BT_DBG("");

	if (!service_registered || !bt_mesh_is_provisioned()) {
    f9c4:	4b85      	ldr	r3, [pc, #532]	; (fbdc <bt_mesh_proxy_adv_start+0x21c>)
    f9c6:	781b      	ldrb	r3, [r3, #0]
{
    f9c8:	b091      	sub	sp, #68	; 0x44
	if (!service_registered || !bt_mesh_is_provisioned()) {
    f9ca:	b92b      	cbnz	r3, f9d8 <bt_mesh_proxy_adv_start+0x18>
		return -ENOTSUP;
    f9cc:	f06f 0485 	mvn.w	r4, #133	; 0x85
	}

	return gatt_proxy_advertise(next_sub());
}
    f9d0:	4620      	mov	r0, r4
    f9d2:	b011      	add	sp, #68	; 0x44
    f9d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!service_registered || !bt_mesh_is_provisioned()) {
    f9d8:	f7fa fade 	bl	9f98 <bt_mesh_is_provisioned>
    f9dc:	9003      	str	r0, [sp, #12]
    f9de:	2800      	cmp	r0, #0
    f9e0:	d0f4      	beq.n	f9cc <bt_mesh_proxy_adv_start+0xc>
	if (!beacon_sub) {
    f9e2:	4f7f      	ldr	r7, [pc, #508]	; (fbe0 <bt_mesh_proxy_adv_start+0x220>)
    f9e4:	6838      	ldr	r0, [r7, #0]
    f9e6:	b150      	cbz	r0, f9fe <bt_mesh_proxy_adv_start+0x3e>
	sub = beacon_sub;
    f9e8:	683c      	ldr	r4, [r7, #0]
	if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    f9ea:	f64f 75ff 	movw	r5, #65535	; 0xffff
    f9ee:	8ba3      	ldrh	r3, [r4, #28]
    f9f0:	42ab      	cmp	r3, r5
    f9f2:	d03b      	beq.n	fa6c <bt_mesh_proxy_adv_start+0xac>
	return (sub->node_id == BT_MESH_NODE_IDENTITY_RUNNING ||
    f9f4:	7fe3      	ldrb	r3, [r4, #31]
    f9f6:	2b01      	cmp	r3, #1
    f9f8:	d134      	bne.n	fa64 <bt_mesh_proxy_adv_start+0xa4>
			beacon_sub = sub;
    f9fa:	603c      	str	r4, [r7, #0]
			return sub;
    f9fc:	e004      	b.n	fa08 <bt_mesh_proxy_adv_start+0x48>
		beacon_sub = bt_mesh_subnet_next(NULL);
    f9fe:	f7fb fcdf 	bl	b3c0 <bt_mesh_subnet_next>
    fa02:	6038      	str	r0, [r7, #0]
		if (!beacon_sub) {
    fa04:	2800      	cmp	r0, #0
    fa06:	d1ef      	bne.n	f9e8 <bt_mesh_proxy_adv_start+0x28>
	if (conn_count == CONFIG_BT_MAX_CONN) {
    fa08:	4b76      	ldr	r3, [pc, #472]	; (fbe4 <bt_mesh_proxy_adv_start+0x224>)
    fa0a:	681b      	ldr	r3, [r3, #0]
    fa0c:	2b01      	cmp	r3, #1
    fa0e:	f000 80df 	beq.w	fbd0 <bt_mesh_proxy_adv_start+0x210>
	sub = beacon_sub ? beacon_sub : bt_mesh_subnet_next(beacon_sub);
    fa12:	683d      	ldr	r5, [r7, #0]
    fa14:	b935      	cbnz	r5, fa24 <bt_mesh_proxy_adv_start+0x64>
    fa16:	4628      	mov	r0, r5
    fa18:	f7fb fcd2 	bl	b3c0 <bt_mesh_subnet_next>
	if (!sub) {
    fa1c:	4605      	mov	r5, r0
    fa1e:	2800      	cmp	r0, #0
    fa20:	f000 80d9 	beq.w	fbd6 <bt_mesh_proxy_adv_start+0x216>
	int count = 0;
    fa24:	2300      	movs	r3, #0
	(void)bt_mesh_subnet_find(sub_count_cb, &count);
    fa26:	4870      	ldr	r0, [pc, #448]	; (fbe8 <bt_mesh_proxy_adv_start+0x228>)
	int count = 0;
    fa28:	930b      	str	r3, [sp, #44]	; 0x2c
	(void)bt_mesh_subnet_find(sub_count_cb, &count);
    fa2a:	a90b      	add	r1, sp, #44	; 0x2c
    fa2c:	f7fb fc88 	bl	b340 <bt_mesh_subnet_find>
	return count;
    fa30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fa32:	9304      	str	r3, [sp, #16]
	if (subnet_count > 1) {
    fa34:	2b01      	cmp	r3, #1
    fa36:	f340 80c8 	ble.w	fbca <bt_mesh_proxy_adv_start+0x20a>
		max_timeout = NODE_ID_TIMEOUT / MAX(subnet_count, 6);
    fa3a:	2b06      	cmp	r3, #6
    fa3c:	bfb8      	it	lt
    fa3e:	2306      	movlt	r3, #6
    fa40:	f64e 2660 	movw	r6, #60000	; 0xea60
    fa44:	fbb6 f6f3 	udiv	r6, r6, r3
		max_timeout = MAX(max_timeout, 1 * MSEC_PER_SEC);
    fa48:	f5b6 7f7a 	cmp.w	r6, #1000	; 0x3e8
    fa4c:	bf38      	it	cc
    fa4e:	f44f 767a 	movcc.w	r6, #1000	; 0x3e8
	proxy_svc_data[2] = ID_TYPE_NODE;
    fa52:	f8df a198 	ldr.w	sl, [pc, #408]	; fbec <bt_mesh_proxy_adv_start+0x22c>
	int32_t remaining = SYS_FOREVER_MS;
    fa56:	f04f 0900 	mov.w	r9, #0
    fa5a:	f06f 040f 	mvn.w	r4, #15
	err = bt_rand(proxy_svc_data + 11, 8);
    fa5e:	f10a 0b0b 	add.w	fp, sl, #11
    fa62:	e0a7      	b.n	fbb4 <bt_mesh_proxy_adv_start+0x1f4>
		bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED);
    fa64:	f7fa fb94 	bl	a190 <bt_mesh_gatt_proxy_get>
		if (advertise_subnet(sub)) {
    fa68:	2801      	cmp	r0, #1
    fa6a:	d0c6      	beq.n	f9fa <bt_mesh_proxy_adv_start+0x3a>
		sub = bt_mesh_subnet_next(sub);
    fa6c:	4620      	mov	r0, r4
    fa6e:	f7fb fca7 	bl	b3c0 <bt_mesh_subnet_next>
	} while (sub != beacon_sub);
    fa72:	683b      	ldr	r3, [r7, #0]
    fa74:	4298      	cmp	r0, r3
		sub = bt_mesh_subnet_next(sub);
    fa76:	4604      	mov	r4, r0
	} while (sub != beacon_sub);
    fa78:	d1b9      	bne.n	f9ee <bt_mesh_proxy_adv_start+0x2e>
    fa7a:	e7c5      	b.n	fa08 <bt_mesh_proxy_adv_start+0x48>
		if (sub->node_id == BT_MESH_NODE_IDENTITY_RUNNING) {
    fa7c:	f895 801f 	ldrb.w	r8, [r5, #31]
    fa80:	f1b8 0f01 	cmp.w	r8, #1
    fa84:	f040 809f 	bne.w	fbc6 <bt_mesh_proxy_adv_start+0x206>
    fa88:	f016 fa90 	bl	25fac <z_impl_k_uptime_ticks>
    fa8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    fa90:	fba0 0302 	umull	r0, r3, r0, r2
    fa94:	fb02 3301 	mla	r3, r2, r1, r3
    fa98:	0bc0      	lsrs	r0, r0, #15
    fa9a:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
			uint32_t active = k_uptime_get_32() - sub->node_id_start;
    fa9e:	6a2b      	ldr	r3, [r5, #32]
			if (active < NODE_ID_TIMEOUT) {
    faa0:	f64e 225f 	movw	r2, #59999	; 0xea5f
			uint32_t active = k_uptime_get_32() - sub->node_id_start;
    faa4:	1ac1      	subs	r1, r0, r3
			if (active < NODE_ID_TIMEOUT) {
    faa6:	4291      	cmp	r1, r2
    faa8:	f200 808a 	bhi.w	fbc0 <bt_mesh_proxy_adv_start+0x200>
				remaining = NODE_ID_TIMEOUT - active;
    faac:	f503 466a 	add.w	r6, r3, #59904	; 0xea00
    fab0:	3660      	adds	r6, #96	; 0x60
	struct bt_le_adv_param fast_adv_param = {
    fab2:	2214      	movs	r2, #20
    fab4:	2100      	movs	r1, #0
				remaining = NODE_ID_TIMEOUT - active;
    fab6:	1a36      	subs	r6, r6, r0
	struct bt_le_adv_param fast_adv_param = {
    fab8:	a80b      	add	r0, sp, #44	; 0x2c
    faba:	f00e fac5 	bl	1e048 <memset>
    fabe:	f240 2003 	movw	r0, #515	; 0x203
    fac2:	23a0      	movs	r3, #160	; 0xa0
    fac4:	e9cd 030c 	strd	r0, r3, [sp, #48]	; 0x30
	err = bt_rand(proxy_svc_data + 11, 8);
    fac8:	2108      	movs	r1, #8
	struct bt_le_adv_param fast_adv_param = {
    faca:	23f0      	movs	r3, #240	; 0xf0
	err = bt_rand(proxy_svc_data + 11, 8);
    facc:	4658      	mov	r0, fp
	struct bt_le_adv_param fast_adv_param = {
    face:	930e      	str	r3, [sp, #56]	; 0x38
	proxy_svc_data[2] = ID_TYPE_NODE;
    fad0:	f88a 8002 	strb.w	r8, [sl, #2]
	err = bt_rand(proxy_svc_data + 11, 8);
    fad4:	f014 f9fd 	bl	23ed2 <bt_rand>
	if (err) {
    fad8:	4604      	mov	r4, r0
    fada:	bb68      	cbnz	r0, fb38 <bt_mesh_proxy_adv_start+0x178>
	(void)memset(tmp, 0, 6);
    fadc:	4601      	mov	r1, r0
    fade:	2206      	movs	r2, #6
    fae0:	a807      	add	r0, sp, #28
    fae2:	f00e fab1 	bl	1e048 <memset>
	memcpy(tmp + 6, proxy_svc_data + 11, 8);
    fae6:	2208      	movs	r2, #8
    fae8:	4659      	mov	r1, fp
    faea:	f10d 0022 	add.w	r0, sp, #34	; 0x22
    faee:	f00e faa0 	bl	1e032 <memcpy>
	sys_put_be16(bt_mesh_primary_addr(), tmp + 14);
    faf2:	f7fd faf9 	bl	d0e8 <bt_mesh_primary_addr>
    faf6:	0a03      	lsrs	r3, r0, #8
	dst[1] = val;
    faf8:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
	err = bt_encrypt_be(sub->keys[SUBNET_KEY_TX_IDX(sub)].identity, tmp,
    fafc:	7fa8      	ldrb	r0, [r5, #30]
	dst[0] = val >> 8;
    fafe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    fb02:	1e81      	subs	r1, r0, #2
    fb04:	4248      	negs	r0, r1
    fb06:	4148      	adcs	r0, r1
    fb08:	235a      	movs	r3, #90	; 0x5a
    fb0a:	fb03 5000 	mla	r0, r3, r0, r5
    fb0e:	aa07      	add	r2, sp, #28
    fb10:	4611      	mov	r1, r2
    fb12:	3066      	adds	r0, #102	; 0x66
    fb14:	f014 f9df 	bl	23ed6 <bt_encrypt_be>
	if (err) {
    fb18:	4604      	mov	r4, r0
    fb1a:	b968      	cbnz	r0, fb38 <bt_mesh_proxy_adv_start+0x178>
	memcpy(proxy_svc_data + 3, tmp + 8, 8);
    fb1c:	2208      	movs	r2, #8
    fb1e:	a909      	add	r1, sp, #36	; 0x24
    fb20:	4833      	ldr	r0, [pc, #204]	; (fbf0 <bt_mesh_proxy_adv_start+0x230>)
    fb22:	f00e fa86 	bl	1e032 <memcpy>
	err = bt_mesh_adv_gatt_start(&fast_adv_param, duration, node_id_ad,
    fb26:	e9cd 4400 	strd	r4, r4, [sp]
    fb2a:	4a32      	ldr	r2, [pc, #200]	; (fbf4 <bt_mesh_proxy_adv_start+0x234>)
    fb2c:	2303      	movs	r3, #3
    fb2e:	4631      	mov	r1, r6
    fb30:	a80b      	add	r0, sp, #44	; 0x2c
    fb32:	f7fd fef9 	bl	d928 <bt_mesh_adv_gatt_start>
    fb36:	4604      	mov	r4, r0
				planned = true;
    fb38:	9a03      	ldr	r2, [sp, #12]
		if (sub->node_id == BT_MESH_NODE_IDENTITY_STOPPED &&
    fb3a:	f895 801f 	ldrb.w	r8, [r5, #31]
    fb3e:	f1b8 0f00 	cmp.w	r8, #0
    fb42:	d12b      	bne.n	fb9c <bt_mesh_proxy_adv_start+0x1dc>
    fb44:	9205      	str	r2, [sp, #20]
		    bt_mesh_gatt_proxy_get() == BT_MESH_FEATURE_ENABLED) {
    fb46:	f7fa fb23 	bl	a190 <bt_mesh_gatt_proxy_get>
		if (sub->node_id == BT_MESH_NODE_IDENTITY_STOPPED &&
    fb4a:	2801      	cmp	r0, #1
    fb4c:	9a05      	ldr	r2, [sp, #20]
    fb4e:	d125      	bne.n	fb9c <bt_mesh_proxy_adv_start+0x1dc>
	struct bt_le_adv_param slow_adv_param = {
    fb50:	2214      	movs	r2, #20
    fb52:	4641      	mov	r1, r8
    fb54:	a80b      	add	r0, sp, #44	; 0x2c
    fb56:	f00e fa77 	bl	1e048 <memset>
    fb5a:	f240 2303 	movw	r3, #515	; 0x203
    fb5e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
    fb62:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
    fb66:	f44f 62f0 	mov.w	r2, #1920	; 0x780
    fb6a:	920e      	str	r2, [sp, #56]	; 0x38
	memcpy(proxy_svc_data + 3, sub->keys[SUBNET_KEY_TX_IDX(sub)].net_id, 8);
    fb6c:	7fa9      	ldrb	r1, [r5, #30]
    fb6e:	4820      	ldr	r0, [pc, #128]	; (fbf0 <bt_mesh_proxy_adv_start+0x230>)
	proxy_svc_data[2] = ID_TYPE_NET;
    fb70:	f88a 8002 	strb.w	r8, [sl, #2]
	memcpy(proxy_svc_data + 3, sub->keys[SUBNET_KEY_TX_IDX(sub)].net_id, 8);
    fb74:	1e8a      	subs	r2, r1, #2
    fb76:	4251      	negs	r1, r2
    fb78:	4151      	adcs	r1, r2
    fb7a:	225a      	movs	r2, #90	; 0x5a
    fb7c:	fb02 5101 	mla	r1, r2, r1, r5
    fb80:	315e      	adds	r1, #94	; 0x5e
    fb82:	2208      	movs	r2, #8
    fb84:	f00e fa55 	bl	1e032 <memcpy>
	err = bt_mesh_adv_gatt_start(&slow_adv_param, duration, net_id_ad,
    fb88:	4a1b      	ldr	r2, [pc, #108]	; (fbf8 <bt_mesh_proxy_adv_start+0x238>)
    fb8a:	e9cd 8800 	strd	r8, r8, [sp]
    fb8e:	2303      	movs	r3, #3
    fb90:	4631      	mov	r1, r6
    fb92:	a80b      	add	r0, sp, #44	; 0x2c
    fb94:	f7fd fec8 	bl	d928 <bt_mesh_adv_gatt_start>
			planned = true;
    fb98:	9a03      	ldr	r2, [sp, #12]
	err = bt_mesh_adv_gatt_start(&slow_adv_param, duration, net_id_ad,
    fb9a:	4604      	mov	r4, r0
		beacon_sub = bt_mesh_subnet_next(sub);
    fb9c:	4628      	mov	r0, r5
    fb9e:	9205      	str	r2, [sp, #20]
    fba0:	f7fb fc0e 	bl	b3c0 <bt_mesh_subnet_next>
		if (planned) {
    fba4:	9a05      	ldr	r2, [sp, #20]
		beacon_sub = bt_mesh_subnet_next(sub);
    fba6:	6038      	str	r0, [r7, #0]
    fba8:	4605      	mov	r5, r0
		if (planned) {
    fbaa:	2a00      	cmp	r2, #0
    fbac:	f47f af10 	bne.w	f9d0 <bt_mesh_proxy_adv_start+0x10>
	for (int i = 0; i < subnet_count; i++) {
    fbb0:	f109 0901 	add.w	r9, r9, #1
    fbb4:	9b04      	ldr	r3, [sp, #16]
    fbb6:	4599      	cmp	r9, r3
    fbb8:	f6ff af60 	blt.w	fa7c <bt_mesh_proxy_adv_start+0xbc>
	return 0;
    fbbc:	2400      	movs	r4, #0
    fbbe:	e707      	b.n	f9d0 <bt_mesh_proxy_adv_start+0x10>
				bt_mesh_proxy_identity_stop(sub);
    fbc0:	4628      	mov	r0, r5
    fbc2:	f7ff fdeb 	bl	f79c <bt_mesh_proxy_identity_stop>
		if (sub->node_id == BT_MESH_NODE_IDENTITY_RUNNING) {
    fbc6:	2200      	movs	r2, #0
    fbc8:	e7b7      	b.n	fb3a <bt_mesh_proxy_adv_start+0x17a>
	int32_t remaining = SYS_FOREVER_MS;
    fbca:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    fbce:	e740      	b.n	fa52 <bt_mesh_proxy_adv_start+0x92>
		return -ENOMEM;
    fbd0:	f06f 040b 	mvn.w	r4, #11
    fbd4:	e6fc      	b.n	f9d0 <bt_mesh_proxy_adv_start+0x10>
		return -ENOENT;
    fbd6:	f06f 0401 	mvn.w	r4, #1
    fbda:	e6f9      	b.n	f9d0 <bt_mesh_proxy_adv_start+0x10>
    fbdc:	200040b9 	.word	0x200040b9
    fbe0:	200025bc 	.word	0x200025bc
    fbe4:	200025c0 	.word	0x200025c0
    fbe8:	000235d1 	.word	0x000235d1
    fbec:	20000e15 	.word	0x20000e15
    fbf0:	20000e18 	.word	0x20000e18
    fbf4:	00026fdc 	.word	0x00026fdc
    fbf8:	00026fc4 	.word	0x00026fc4

0000fbfc <bt_mesh_proxy_role_setup>:
}

struct bt_mesh_proxy_role *bt_mesh_proxy_role_setup(struct bt_conn *conn,
						    proxy_send_cb_t send,
						    proxy_recv_cb_t recv)
{
    fbfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fc00:	4682      	mov	sl, r0
    fc02:	4690      	mov	r8, r2
    fc04:	460f      	mov	r7, r1
	struct bt_mesh_proxy_role *role;

	role = &roles[bt_conn_index(conn)];
    fc06:	f7f8 fae9 	bl	81dc <bt_conn_index>
    fc0a:	4606      	mov	r6, r0
    fc0c:	b204      	sxth	r4, r0

	role->conn = bt_conn_ref(conn);
    fc0e:	4650      	mov	r0, sl
    fc10:	f00f f8fb 	bl	1ee0a <bt_conn_ref>
	role = &roles[bt_conn_index(conn)];
    fc14:	4d1a      	ldr	r5, [pc, #104]	; (fc80 <bt_mesh_proxy_role_setup+0x84>)
	role->conn = bt_conn_ref(conn);
    fc16:	2350      	movs	r3, #80	; 0x50
    fc18:	4373      	muls	r3, r6
    fc1a:	18ea      	adds	r2, r5, r3
    fc1c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
	if (role->buf.__buf) {
    fc20:	f8d2 a048 	ldr.w	sl, [r2, #72]	; 0x48
	role->conn = bt_conn_ref(conn);
    fc24:	50e8      	str	r0, [r5, r3]
    fc26:	ea4f 1904 	mov.w	r9, r4, lsl #4
	role = &roles[bt_conn_index(conn)];
    fc2a:	eb05 1404 	add.w	r4, r5, r4, lsl #4
	if (role->buf.__buf) {
    fc2e:	f1ba 0f00 	cmp.w	sl, #0
    fc32:	d00c      	beq.n	fc4e <bt_mesh_proxy_role_setup+0x52>
    fc34:	2300      	movs	r3, #0
    fc36:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	buf->data = buf->__buf;
    fc3a:	f8c4 a040 	str.w	sl, [r4, #64]	; 0x40
	proxy_msg_init(role);

	role->cb.recv = recv;
    fc3e:	2050      	movs	r0, #80	; 0x50
    fc40:	fb00 5506 	mla	r5, r0, r6, r5
	role->cb.send = send;
    fc44:	e9c5 7802 	strd	r7, r8, [r5, #8]

	return role;
}
    fc48:	4620      	mov	r0, r4
    fc4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				      &bufs[bt_conn_index(role->conn) *
    fc4e:	f7f8 fac5 	bl	81dc <bt_conn_index>
	net_buf_simple_init_with_data(&role->buf,
    fc52:	490c      	ldr	r1, [pc, #48]	; (fc84 <bt_mesh_proxy_role_setup+0x88>)
				      &bufs[bt_conn_index(role->conn) *
    fc54:	b203      	sxth	r3, r0
    fc56:	eb03 1343 	add.w	r3, r3, r3, lsl #5
	net_buf_simple_init_with_data(&role->buf,
    fc5a:	f109 0040 	add.w	r0, r9, #64	; 0x40
    fc5e:	eb01 0143 	add.w	r1, r1, r3, lsl #1
    fc62:	4428      	add	r0, r5
    fc64:	2242      	movs	r2, #66	; 0x42
    fc66:	f014 ffea 	bl	24c3e <net_buf_simple_init_with_data>
    fc6a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
	k_work_init_delayable(&role->sar_timer, proxy_sar_timeout);
    fc6c:	4906      	ldr	r1, [pc, #24]	; (fc88 <bt_mesh_proxy_role_setup+0x8c>)
	buf->len  = 0U;
    fc6e:	f8a4 a044 	strh.w	sl, [r4, #68]	; 0x44
    fc72:	f109 0010 	add.w	r0, r9, #16
	buf->data = buf->__buf;
    fc76:	6423      	str	r3, [r4, #64]	; 0x40
    fc78:	4428      	add	r0, r5
    fc7a:	f016 f809 	bl	25c90 <k_work_init_delayable>
    fc7e:	e7de      	b.n	fc3e <bt_mesh_proxy_role_setup+0x42>
    fc80:	20001ba0 	.word	0x20001ba0
    fc84:	200096d9 	.word	0x200096d9
    fc88:	000235f9 	.word	0x000235f9

0000fc8c <mayfly_init>:
#if defined(MAYFLY_UT)
static uint8_t _state;
#endif /* MAYFLY_UT */

void mayfly_init(void)
{
    fc8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (callee_id--) {
		uint8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(&mfl[callee_id][caller_id],
    fc90:	4f11      	ldr	r7, [pc, #68]	; (fcd8 <mayfly_init+0x4c>)
    fc92:	f8df a048 	ldr.w	sl, [pc, #72]	; fcdc <mayfly_init+0x50>
	callee_id = MAYFLY_CALLEE_COUNT;
    fc96:	2404      	movs	r4, #4
	while (callee_id--) {
    fc98:	3c01      	subs	r4, #1
    fc9a:	b2e4      	uxtb	r4, r4
    fc9c:	2cff      	cmp	r4, #255	; 0xff
    fc9e:	d018      	beq.n	fcd2 <mayfly_init+0x46>
    fca0:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    fca4:	ea4f 0984 	mov.w	r9, r4, lsl #2
    fca8:	0136      	lsls	r6, r6, #4
		caller_id = MAYFLY_CALLER_COUNT;
    fcaa:	2504      	movs	r5, #4
    fcac:	f04f 080c 	mov.w	r8, #12
    fcb0:	e00a      	b.n	fcc8 <mayfly_init+0x3c>
			memq_init(&mfl[callee_id][caller_id],
    fcb2:	fb18 6105 	smlabb	r1, r8, r5, r6
    fcb6:	1d0a      	adds	r2, r1, #4
    fcb8:	eb05 0009 	add.w	r0, r5, r9
    fcbc:	443a      	add	r2, r7
    fcbe:	4439      	add	r1, r7
    fcc0:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
    fcc4:	f013 fdd8 	bl	23878 <memq_init>
		while (caller_id--) {
    fcc8:	3d01      	subs	r5, #1
    fcca:	b2ed      	uxtb	r5, r5
    fccc:	2dff      	cmp	r5, #255	; 0xff
    fcce:	d1f0      	bne.n	fcb2 <mayfly_init+0x26>
    fcd0:	e7e2      	b.n	fc98 <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
    fcd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    fcd6:	bf00      	nop
    fcd8:	20002644 	.word	0x20002644
    fcdc:	200025c4 	.word	0x200025c4

0000fce0 <mayfly_enable>:

void mayfly_enable(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
    fce0:	b4f0      	push	{r4, r5, r6, r7}
    fce2:	4b14      	ldr	r3, [pc, #80]	; (fd34 <mayfly_enable+0x54>)
    fce4:	4607      	mov	r7, r0
    fce6:	460e      	mov	r6, r1
    fce8:	f04f 0c0c 	mov.w	ip, #12
    fcec:	2430      	movs	r4, #48	; 0x30
	if (enable) {
    fcee:	b17a      	cbz	r2, fd10 <mayfly_enable+0x30>
		if (mft[callee_id][caller_id].enable_req ==
    fcf0:	fb04 f501 	mul.w	r5, r4, r1
    fcf4:	fb0c 5500 	mla	r5, ip, r0, r5
    fcf8:	442b      	add	r3, r5
    fcfa:	7a59      	ldrb	r1, [r3, #9]
    fcfc:	7a18      	ldrb	r0, [r3, #8]
    fcfe:	4281      	cmp	r1, r0
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    fd00:	bf04      	itt	eq
    fd02:	3101      	addeq	r1, #1
    fd04:	7219      	strbeq	r1, [r3, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    fd06:	4638      	mov	r0, r7
    fd08:	4631      	mov	r1, r6

			/* pend the callee for execution */
			mayfly_pend(caller_id, callee_id);
		}
	}
}
    fd0a:	bcf0      	pop	{r4, r5, r6, r7}
		mayfly_enable_cb(caller_id, callee_id, enable);
    fd0c:	f006 bffe 	b.w	16d0c <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    fd10:	434c      	muls	r4, r1
    fd12:	fb0c 4400 	mla	r4, ip, r0, r4
    fd16:	4423      	add	r3, r4
    fd18:	7a9c      	ldrb	r4, [r3, #10]
    fd1a:	7ada      	ldrb	r2, [r3, #11]
    fd1c:	42a2      	cmp	r2, r4
    fd1e:	d107      	bne.n	fd30 <mayfly_enable+0x50>
			mft[callee_id][caller_id].disable_req++;
    fd20:	3201      	adds	r2, #1
    fd22:	729a      	strb	r2, [r3, #10]
			mfp[callee_id] = 1U;
    fd24:	4b04      	ldr	r3, [pc, #16]	; (fd38 <mayfly_enable+0x58>)
    fd26:	2201      	movs	r2, #1
    fd28:	545a      	strb	r2, [r3, r1]
}
    fd2a:	bcf0      	pop	{r4, r5, r6, r7}
			mayfly_pend(caller_id, callee_id);
    fd2c:	f007 b82e 	b.w	16d8c <mayfly_pend>
}
    fd30:	bcf0      	pop	{r4, r5, r6, r7}
    fd32:	4770      	bx	lr
    fd34:	20002644 	.word	0x20002644
    fd38:	200040ba 	.word	0x200040ba

0000fd3c <mayfly_enqueue>:

uint32_t mayfly_enqueue(uint8_t caller_id, uint8_t callee_id, uint8_t chain,
			struct mayfly *m)
{
    fd3c:	b570      	push	{r4, r5, r6, lr}
    fd3e:	4606      	mov	r6, r0
    fd40:	460d      	mov	r5, r1
    fd42:	461c      	mov	r4, r3
	uint8_t state;
	uint8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    fd44:	b1a2      	cbz	r2, fd70 <mayfly_enqueue+0x34>
    fd46:	2301      	movs	r3, #1
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
    fd48:	7862      	ldrb	r2, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    fd4a:	7820      	ldrb	r0, [r4, #0]
    fd4c:	1a80      	subs	r0, r0, r2
	if (state != 0U) {
    fd4e:	f010 0003 	ands.w	r0, r0, #3
    fd52:	d02c      	beq.n	fdae <mayfly_enqueue+0x72>
		if (chain) {
    fd54:	b31b      	cbz	r3, fd9e <mayfly_enqueue+0x62>
			if (state != 1U) {
    fd56:	2801      	cmp	r0, #1
    fd58:	d028      	beq.n	fdac <mayfly_enqueue+0x70>
				/* mark as ready in queue */
				m->_req = ack + 1;
    fd5a:	3201      	adds	r2, #1
    fd5c:	b2d2      	uxtb	r2, r2
    fd5e:	7022      	strb	r2, [r4, #0]
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);

mayfly_enqueue_pend:
	/* set mayfly callee pending */
	mfp[callee_id] = 1U;
    fd60:	4b1c      	ldr	r3, [pc, #112]	; (fdd4 <mayfly_enqueue+0x98>)
    fd62:	2201      	movs	r2, #1
    fd64:	555a      	strb	r2, [r3, r5]

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    fd66:	4629      	mov	r1, r5
    fd68:	4630      	mov	r0, r6
    fd6a:	f007 f80f 	bl	16d8c <mayfly_pend>
    fd6e:	e01c      	b.n	fdaa <mayfly_enqueue+0x6e>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    fd70:	f014 fe88 	bl	24a84 <mayfly_prio_is_equal>
    fd74:	2800      	cmp	r0, #0
    fd76:	d0e6      	beq.n	fd46 <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
    fd78:	4629      	mov	r1, r5
    fd7a:	4630      	mov	r0, r6
    fd7c:	f006 ffe6 	bl	16d4c <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    fd80:	2800      	cmp	r0, #0
    fd82:	d0e0      	beq.n	fd46 <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
    fd84:	2330      	movs	r3, #48	; 0x30
    fd86:	220c      	movs	r2, #12
    fd88:	436b      	muls	r3, r5
    fd8a:	fb02 3306 	mla	r3, r2, r6, r3
    fd8e:	4a12      	ldr	r2, [pc, #72]	; (fdd8 <mayfly_enqueue+0x9c>)
    fd90:	441a      	add	r2, r3
		!mayfly_is_enabled(caller_id, callee_id) ||
    fd92:	7a93      	ldrb	r3, [r2, #10]
    fd94:	7ad2      	ldrb	r2, [r2, #11]
    fd96:	1a9b      	subs	r3, r3, r2
    fd98:	bf18      	it	ne
    fd9a:	2301      	movne	r3, #1
    fd9c:	e7d4      	b.n	fd48 <mayfly_enqueue+0xc>
		m->_req = ack + 2;
    fd9e:	3202      	adds	r2, #2
    fda0:	b2d2      	uxtb	r2, r2
    fda2:	7022      	strb	r2, [r4, #0]
		m->fp(m->param);
    fda4:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
    fda8:	4798      	blx	r3

	return 0;
    fdaa:	2000      	movs	r0, #0
}
    fdac:	bd70      	pop	{r4, r5, r6, pc}
	if (!chain) {
    fdae:	2b00      	cmp	r3, #0
    fdb0:	d0f8      	beq.n	fda4 <mayfly_enqueue+0x68>
	m->_req = ack + 1;
    fdb2:	3201      	adds	r2, #1
    fdb4:	b2d2      	uxtb	r2, r2
    fdb6:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    fdb8:	2304      	movs	r3, #4
    fdba:	2230      	movs	r2, #48	; 0x30
    fdbc:	fb12 3205 	smlabb	r2, r2, r5, r3
    fdc0:	230c      	movs	r3, #12
    fdc2:	fb13 2306 	smlabb	r3, r3, r6, r2
    fdc6:	4a04      	ldr	r2, [pc, #16]	; (fdd8 <mayfly_enqueue+0x9c>)
    fdc8:	6860      	ldr	r0, [r4, #4]
    fdca:	441a      	add	r2, r3
    fdcc:	4621      	mov	r1, r4
    fdce:	f013 fd61 	bl	23894 <memq_enqueue>
    fdd2:	e7c5      	b.n	fd60 <mayfly_enqueue+0x24>
    fdd4:	200040ba 	.word	0x200040ba
    fdd8:	20002644 	.word	0x20002644

0000fddc <mayfly_run>:
		}
	}
}

void mayfly_run(uint8_t callee_id)
{
    fddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t disable = 0U;
	uint8_t enable = 0U;
	uint8_t caller_id;

	if (!mfp[callee_id]) {
    fde0:	4b55      	ldr	r3, [pc, #340]	; (ff38 <mayfly_run+0x15c>)
    fde2:	5c1a      	ldrb	r2, [r3, r0]
{
    fde4:	b089      	sub	sp, #36	; 0x24
    fde6:	4604      	mov	r4, r0
	if (!mfp[callee_id]) {
    fde8:	2a00      	cmp	r2, #0
    fdea:	f000 809e 	beq.w	ff2a <mayfly_run+0x14e>
		return;
	}
	mfp[callee_id] = 0U;
    fdee:	f04f 0800 	mov.w	r8, #0
    fdf2:	f803 8000 	strb.w	r8, [r3, r0]

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
    fdf6:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    fdfa:	011b      	lsls	r3, r3, #4
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    fdfc:	4e4f      	ldr	r6, [pc, #316]	; (ff3c <mayfly_run+0x160>)
    fdfe:	9304      	str	r3, [sp, #16]
    fe00:	2504      	movs	r5, #4
    fe02:	233c      	movs	r3, #60	; 0x3c
    fe04:	fb13 5300 	smlabb	r3, r3, r0, r5
    fe08:	18f3      	adds	r3, r6, r3
    fe0a:	9303      	str	r3, [sp, #12]
	uint8_t disable = 0U;
    fe0c:	46c3      	mov	fp, r8
	while (caller_id--) {
    fe0e:	3d01      	subs	r5, #1
    fe10:	b2ed      	uxtb	r5, r5
    fe12:	2dff      	cmp	r5, #255	; 0xff
    fe14:	d10f      	bne.n	fe36 <mayfly_run+0x5a>
			mft[callee_id][caller_id].enable_ack =
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    fe16:	f1bb 0f00 	cmp.w	fp, #0
    fe1a:	f000 8086 	beq.w	ff2a <mayfly_run+0x14e>
    fe1e:	f1b8 0f00 	cmp.w	r8, #0
    fe22:	f040 8082 	bne.w	ff2a <mayfly_run+0x14e>
		mayfly_enable_cb(callee_id, callee_id, 0);
    fe26:	4642      	mov	r2, r8
    fe28:	4621      	mov	r1, r4
    fe2a:	4620      	mov	r0, r4
	}
}
    fe2c:	b009      	add	sp, #36	; 0x24
    fe2e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		mayfly_enable_cb(callee_id, callee_id, 0);
    fe32:	f006 bf6b 	b.w	16d0c <mayfly_enable_cb>
		struct mayfly *m = 0;
    fe36:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
    fe38:	f04f 090c 	mov.w	r9, #12
		struct mayfly *m = 0;
    fe3c:	9307      	str	r3, [sp, #28]
		link = memq_peek(mft[callee_id][caller_id].head,
    fe3e:	fb09 fa05 	mul.w	sl, r9, r5
    fe42:	2330      	movs	r3, #48	; 0x30
    fe44:	fb03 a304 	mla	r3, r3, r4, sl
    fe48:	18f1      	adds	r1, r6, r3
    fe4a:	58f0      	ldr	r0, [r6, r3]
    fe4c:	6849      	ldr	r1, [r1, #4]
    fe4e:	aa07      	add	r2, sp, #28
    fe50:	f013 fd27 	bl	238a2 <memq_peek>
		memq_dequeue(mft[callee_id][caller_id].tail,
    fe54:	9b04      	ldr	r3, [sp, #16]
    fe56:	fb19 3905 	smlabb	r9, r9, r5, r3
    fe5a:	eb06 0309 	add.w	r3, r6, r9
		link = memq_peek(mft[callee_id][caller_id].head,
    fe5e:	4607      	mov	r7, r0
		memq_dequeue(mft[callee_id][caller_id].tail,
    fe60:	9302      	str	r3, [sp, #8]
		while (link) {
    fe62:	2f00      	cmp	r7, #0
    fe64:	d043      	beq.n	feee <mayfly_run+0x112>
			state = (m->_req - m->_ack) & 0x03;
    fe66:	9b07      	ldr	r3, [sp, #28]
    fe68:	f893 9000 	ldrb.w	r9, [r3]
    fe6c:	785a      	ldrb	r2, [r3, #1]
    fe6e:	eba9 0902 	sub.w	r9, r9, r2
    fe72:	f009 0903 	and.w	r9, r9, #3
			if (state == 1U) {
    fe76:	f1b9 0f01 	cmp.w	r9, #1
    fe7a:	d104      	bne.n	fe86 <mayfly_run+0xaa>
				m->_ack--;
    fe7c:	3a01      	subs	r2, #1
    fe7e:	705a      	strb	r2, [r3, #1]
				m->fp(m->param);
    fe80:	e9d3 0202 	ldrd	r0, r2, [r3, #8]
    fe84:	4790      	blx	r2
			dequeue(callee_id, caller_id, link, m);
    fe86:	9b07      	ldr	r3, [sp, #28]
	if (((req - m->_ack) & 0x03) != 1U) {
    fe88:	9305      	str	r3, [sp, #20]
	req = m->_req;
    fe8a:	781a      	ldrb	r2, [r3, #0]
    fe8c:	b2d1      	uxtb	r1, r2
    fe8e:	9101      	str	r1, [sp, #4]
	if (((req - m->_ack) & 0x03) != 1U) {
    fe90:	7859      	ldrb	r1, [r3, #1]
    fe92:	1a52      	subs	r2, r2, r1
    fe94:	f002 0203 	and.w	r2, r2, #3
    fe98:	2a01      	cmp	r2, #1
    fe9a:	d019      	beq.n	fed0 <mayfly_run+0xf4>
		memq_dequeue(mft[callee_id][caller_id].tail,
    fe9c:	2030      	movs	r0, #48	; 0x30
    fe9e:	fb00 a004 	mla	r0, r0, r4, sl
    fea2:	4430      	add	r0, r6
    fea4:	9902      	ldr	r1, [sp, #8]
    fea6:	6840      	ldr	r0, [r0, #4]
    fea8:	2200      	movs	r2, #0
    feaa:	f013 fd02 	bl	238b2 <memq_dequeue>
		m->_link = link;
    feae:	9b05      	ldr	r3, [sp, #20]
		m->_ack = req;
    feb0:	9a01      	ldr	r2, [sp, #4]
		ack = m->_ack;
    feb2:	7859      	ldrb	r1, [r3, #1]
		m->_ack = req;
    feb4:	705a      	strb	r2, [r3, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
    feb6:	781a      	ldrb	r2, [r3, #0]
		m->_link = link;
    feb8:	605f      	str	r7, [r3, #4]
		if (((m->_req - ack) & 0x03) == 1U) {
    feba:	1a52      	subs	r2, r2, r1
    febc:	f002 0203 	and.w	r2, r2, #3
    fec0:	2a01      	cmp	r2, #1
    fec2:	d105      	bne.n	fed0 <mayfly_run+0xf4>
			m->_ack = ack;
    fec4:	7059      	strb	r1, [r3, #1]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    fec6:	9a03      	ldr	r2, [sp, #12]
    fec8:	4619      	mov	r1, r3
    feca:	4638      	mov	r0, r7
    fecc:	f013 fce2 	bl	23894 <memq_enqueue>
			link = memq_peek(mft[callee_id][caller_id].head,
    fed0:	2330      	movs	r3, #48	; 0x30
    fed2:	fb03 a304 	mla	r3, r3, r4, sl
    fed6:	18f1      	adds	r1, r6, r3
    fed8:	58f0      	ldr	r0, [r6, r3]
    feda:	6849      	ldr	r1, [r1, #4]
    fedc:	aa07      	add	r2, sp, #28
    fede:	f013 fce0 	bl	238a2 <memq_peek>
			if (state == 1U) {
    fee2:	f1b9 0f01 	cmp.w	r9, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    fee6:	4607      	mov	r7, r0
			if (state == 1U) {
    fee8:	d1bb      	bne.n	fe62 <mayfly_run+0x86>
				if (caller_id || link) {
    feea:	b9bd      	cbnz	r5, ff1c <mayfly_run+0x140>
    feec:	b9b0      	cbnz	r0, ff1c <mayfly_run+0x140>
		if (mft[callee_id][caller_id].disable_req !=
    feee:	2230      	movs	r2, #48	; 0x30
    fef0:	210c      	movs	r1, #12
    fef2:	4362      	muls	r2, r4
    fef4:	fb01 2205 	mla	r2, r1, r5, r2
    fef8:	4432      	add	r2, r6
    fefa:	7a93      	ldrb	r3, [r2, #10]
    fefc:	7ad0      	ldrb	r0, [r2, #11]
    fefe:	4298      	cmp	r0, r3
    ff00:	d116      	bne.n	ff30 <mayfly_run+0x154>
		if (mft[callee_id][caller_id].enable_req !=
    ff02:	2330      	movs	r3, #48	; 0x30
    ff04:	4363      	muls	r3, r4
    ff06:	fb01 3305 	mla	r3, r1, r5, r3
    ff0a:	4433      	add	r3, r6
    ff0c:	7a1a      	ldrb	r2, [r3, #8]
    ff0e:	7a59      	ldrb	r1, [r3, #9]
    ff10:	4291      	cmp	r1, r2
			mft[callee_id][caller_id].enable_ack =
    ff12:	bf1c      	itt	ne
    ff14:	725a      	strbne	r2, [r3, #9]
			enable = 1U;
    ff16:	f04f 0801 	movne.w	r8, #1
    ff1a:	e778      	b.n	fe0e <mayfly_run+0x32>
					mfp[callee_id] = 1U;
    ff1c:	4b06      	ldr	r3, [pc, #24]	; (ff38 <mayfly_run+0x15c>)
    ff1e:	2201      	movs	r2, #1
    ff20:	551a      	strb	r2, [r3, r4]
					mayfly_pend(callee_id, callee_id);
    ff22:	4621      	mov	r1, r4
    ff24:	4620      	mov	r0, r4
    ff26:	f006 ff31 	bl	16d8c <mayfly_pend>
}
    ff2a:	b009      	add	sp, #36	; 0x24
    ff2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mft[callee_id][caller_id].disable_ack =
    ff30:	72d3      	strb	r3, [r2, #11]
			disable = 1U;
    ff32:	f04f 0b01 	mov.w	fp, #1
    ff36:	e7e4      	b.n	ff02 <mayfly_run+0x126>
    ff38:	200040ba 	.word	0x200040ba
    ff3c:	20002644 	.word	0x20002644

0000ff40 <ticker_job>:
 * @param param Pointer to ticker instance
 *
 * @internal
 */
void ticker_job(void *param)
{
    ff40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t flag_compare_update;

	DEBUG_TICKER_JOB(1);

	/* Defer job, as worker is running */
	if (instance->worker_trigger) {
    ff44:	7fc3      	ldrb	r3, [r0, #31]
{
    ff46:	b08b      	sub	sp, #44	; 0x2c
    ff48:	4604      	mov	r4, r0
	if (instance->worker_trigger) {
    ff4a:	2b00      	cmp	r3, #0
    ff4c:	f040 83bd 	bne.w	106ca <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x6cb>
		DEBUG_TICKER_JOB(0);
		return;
	}

	/* Defer job, as job is already running */
	if (instance->job_guard) {
    ff50:	7f82      	ldrb	r2, [r0, #30]
    ff52:	b14a      	cbz	r2, ff68 <ticker_job+0x28>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_JOB, 1,
    ff54:	6a45      	ldr	r5, [r0, #36]	; 0x24
    ff56:	4603      	mov	r3, r0
    ff58:	2201      	movs	r2, #1
    ff5a:	2104      	movs	r1, #4
	/* Permit worker to run */
	instance->job_guard = 0U;

	/* trigger worker if deferred */
	if (instance->worker_trigger) {
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    ff5c:	2004      	movs	r0, #4
    ff5e:	46ac      	mov	ip, r5
				   instance);
	}

	DEBUG_TICKER_JOB(0);
}
    ff60:	b00b      	add	sp, #44	; 0x2c
    ff62:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    ff66:	4760      	bx	ip
	ticks_previous = instance->ticks_current;
    ff68:	6943      	ldr	r3, [r0, #20]
    ff6a:	9304      	str	r3, [sp, #16]
	instance->job_guard = 1U;
    ff6c:	2101      	movs	r1, #1
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    ff6e:	7a83      	ldrb	r3, [r0, #10]
	instance->job_guard = 1U;
    ff70:	7781      	strb	r1, [r0, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    ff72:	7ac0      	ldrb	r0, [r0, #11]
    ff74:	4298      	cmp	r0, r3
    ff76:	d057      	beq.n	10028 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x29>
	uint8_t idx = *ticks_elapsed_index + 1;
    ff78:	440b      	add	r3, r1
    ff7a:	b2db      	uxtb	r3, r3
		idx = 0U;
    ff7c:	2b02      	cmp	r3, #2
    ff7e:	bf08      	it	eq
    ff80:	2300      	moveq	r3, #0
	*ticks_elapsed_index = idx;
    ff82:	72a3      	strb	r3, [r4, #10]
		ticks_elapsed =
    ff84:	eb04 0383 	add.w	r3, r4, r3, lsl #2
		flag_elapsed = 1U;
    ff88:	9101      	str	r1, [sp, #4]
		ticks_elapsed =
    ff8a:	68db      	ldr	r3, [r3, #12]
    ff8c:	9300      	str	r3, [sp, #0]
		instance->ticks_current += ticks_elapsed;
    ff8e:	9a00      	ldr	r2, [sp, #0]
    ff90:	9b04      	ldr	r3, [sp, #16]
    ff92:	4413      	add	r3, r2
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
    ff94:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    ff98:	6163      	str	r3, [r4, #20]
	ticker_id_old_head = instance->ticker_id_head;
    ff9a:	7f63      	ldrb	r3, [r4, #29]
    ff9c:	9303      	str	r3, [sp, #12]
	node = &instance->nodes[0];
    ff9e:	6823      	ldr	r3, [r4, #0]
    ffa0:	9302      	str	r3, [sp, #8]
	users = &instance->users[0];
    ffa2:	6863      	ldr	r3, [r4, #4]
    ffa4:	9308      	str	r3, [sp, #32]
	while (count_user--) {
    ffa6:	7a63      	ldrb	r3, [r4, #9]
    ffa8:	3b01      	subs	r3, #1
    ffaa:	fa5f fb83 	uxtb.w	fp, r3
	pending = 0U;
    ffae:	2300      	movs	r3, #0
    ffb0:	9305      	str	r3, [sp, #20]
	insert_head = TICKER_NULL;
    ffb2:	f04f 09ff 	mov.w	r9, #255	; 0xff
	while (count_user--) {
    ffb6:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
    ffba:	d138      	bne.n	1002e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2f>
	if (instance->ticker_id_head != ticker_id_old_head) {
    ffbc:	7f63      	ldrb	r3, [r4, #29]
		flag_compare_update = 1U;
    ffbe:	9a03      	ldr	r2, [sp, #12]
    ffc0:	1a9b      	subs	r3, r3, r2
    ffc2:	bf18      	it	ne
    ffc4:	2301      	movne	r3, #1
    ffc6:	9302      	str	r3, [sp, #8]
	if (flag_elapsed) {
    ffc8:	9b01      	ldr	r3, [sp, #4]
    ffca:	2b00      	cmp	r3, #0
    ffcc:	f000 8223 	beq.w	10416 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x417>
	ticks_now = cntr_cnt_get();
    ffd0:	f006 faf4 	bl	165bc <cntr_cnt_get>
 * @param ticks_now Highest tick count (now)
 * @param ticks_old Tick count to subtract from ticks_now
 */
uint32_t ticker_ticks_diff_get(uint32_t ticks_now, uint32_t ticks_old)
{
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    ffd4:	9b04      	ldr	r3, [sp, #16]
	while (instance->ticker_id_head != TICKER_NULL) {
    ffd6:	9f00      	ldr	r7, [sp, #0]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    ffd8:	eba0 0b03 	sub.w	fp, r0, r3
	node = &instance->nodes[0];
    ffdc:	6823      	ldr	r3, [r4, #0]
    ffde:	9306      	str	r3, [sp, #24]
	ticks_expired = 0U;
    ffe0:	2300      	movs	r3, #0
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    ffe2:	f02b 4b7f 	bic.w	fp, fp, #4278190080	; 0xff000000
	ticks_expired = 0U;
    ffe6:	9307      	str	r3, [sp, #28]
	while (instance->ticker_id_head != TICKER_NULL) {
    ffe8:	7f66      	ldrb	r6, [r4, #29]
    ffea:	2eff      	cmp	r6, #255	; 0xff
    ffec:	d00d      	beq.n	1000a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb>
		ticker = &node[id_expired];
    ffee:	b235      	sxth	r5, r6
    fff0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    fff4:	012b      	lsls	r3, r5, #4
    fff6:	9308      	str	r3, [sp, #32]
    fff8:	9b06      	ldr	r3, [sp, #24]
    fffa:	eb03 1505 	add.w	r5, r3, r5, lsl #4
		ticks_to_expire = ticker->ticks_to_expire;
    fffe:	68ab      	ldr	r3, [r5, #8]
		if (ticks_elapsed < ticks_to_expire) {
   10000:	42bb      	cmp	r3, r7
   10002:	f240 80c8 	bls.w	10196 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x197>
			ticker->ticks_to_expire -= ticks_elapsed;
   10006:	1bdb      	subs	r3, r3, r7
   10008:	60ab      	str	r3, [r5, #8]
			flag_compare_update = 1U;
   1000a:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
   1000e:	9903      	ldr	r1, [sp, #12]
		ticker_job_list_insert(instance, insert_head);
   10010:	4620      	mov	r0, r4
			flag_compare_update = 1U;
   10012:	42b1      	cmp	r1, r6
   10014:	bf18      	it	ne
   10016:	4613      	movne	r3, r2
		ticker_job_list_insert(instance, insert_head);
   10018:	4649      	mov	r1, r9
			flag_compare_update = 1U;
   1001a:	9302      	str	r3, [sp, #8]
		ticker_job_list_insert(instance, insert_head);
   1001c:	f013 fcbc 	bl	23998 <ticker_job_list_insert>
	nodes = &instance->nodes[0];
   10020:	6825      	ldr	r5, [r4, #0]
	uint8_t  rescheduled = 0U;
   10022:	2300      	movs	r3, #0
		ticker_id_head = instance->ticker_id_head;
   10024:	7f67      	ldrb	r7, [r4, #29]
		while (ticker_id_head != TICKER_NULL) {
   10026:	e16b      	b.n	10300 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x301>
		flag_elapsed = 0U;
   10028:	9201      	str	r2, [sp, #4]
		ticks_elapsed = 0U;
   1002a:	9200      	str	r2, [sp, #0]
   1002c:	e7b5      	b.n	ff9a <ticker_job+0x5a>
		user = &users[count_user];
   1002e:	9b08      	ldr	r3, [sp, #32]
   10030:	eb03 08cb 	add.w	r8, r3, fp, lsl #3
		user_ops = &user->user_op[0];
   10034:	f8d8 3004 	ldr.w	r3, [r8, #4]
   10038:	9306      	str	r3, [sp, #24]
		while (user->middle != user->last) {
   1003a:	f898 1003 	ldrb.w	r1, [r8, #3]
			user_op = &user_ops[user->middle];
   1003e:	2034      	movs	r0, #52	; 0x34
		while (user->middle != user->last) {
   10040:	f898 7002 	ldrb.w	r7, [r8, #2]
   10044:	428f      	cmp	r7, r1
   10046:	f000 82da 	beq.w	105fe <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x5ff>
			user_op = &user_ops[user->middle];
   1004a:	9b06      	ldr	r3, [sp, #24]
			if (middle == user->count_user_op) {
   1004c:	f898 5000 	ldrb.w	r5, [r8]
			user_op = &user_ops[user->middle];
   10050:	fb17 f200 	smulbb	r2, r7, r0
   10054:	189e      	adds	r6, r3, r2
			middle = user->middle + 1;
   10056:	1c7b      	adds	r3, r7, #1
   10058:	b2db      	uxtb	r3, r3
				middle = 0U;
   1005a:	429d      	cmp	r5, r3
   1005c:	bf08      	it	eq
   1005e:	2300      	moveq	r3, #0
			user->middle = middle;
   10060:	f888 3002 	strb.w	r3, [r8, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   10064:	9b06      	ldr	r3, [sp, #24]
   10066:	5c9a      	ldrb	r2, [r3, r2]
   10068:	2a04      	cmp	r2, #4
   1006a:	d9e9      	bls.n	10040 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x41>
			ticker = &node[user_op->id];
   1006c:	7871      	ldrb	r1, [r6, #1]
   1006e:	eb01 0541 	add.w	r5, r1, r1, lsl #1
   10072:	012b      	lsls	r3, r5, #4
   10074:	9309      	str	r3, [sp, #36]	; 0x24
   10076:	9b02      	ldr	r3, [sp, #8]
   10078:	eb03 1505 	add.w	r5, r3, r5, lsl #4
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   1007c:	2a08      	cmp	r2, #8
			state = (ticker->req - ticker->ack) & 0xff;
   1007e:	786b      	ldrb	r3, [r5, #1]
   10080:	78a8      	ldrb	r0, [r5, #2]
   10082:	eba3 0300 	sub.w	r3, r3, r0
   10086:	b2db      	uxtb	r3, r3
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   10088:	d818      	bhi.n	100bc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xbd>
   1008a:	b1bb      	cbz	r3, 100bc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xbd>
			    (state == 0U) ||
   1008c:	2a05      	cmp	r2, #5
   1008e:	f040 82a9 	bne.w	105e4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x5e5>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
   10092:	6872      	ldr	r2, [r6, #4]
   10094:	2a00      	cmp	r2, #0
   10096:	f040 82b7 	bne.w	10608 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x609>
			     (user_op->params.update.ticks_drift_plus == 0U) &&
   1009a:	68b2      	ldr	r2, [r6, #8]
   1009c:	2a00      	cmp	r2, #0
   1009e:	f040 82b3 	bne.w	10608 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x609>
			     (user_op->params.update.ticks_drift_minus == 0U) &&
   100a2:	68f2      	ldr	r2, [r6, #12]
   100a4:	2a00      	cmp	r2, #0
   100a6:	f040 82af 	bne.w	10608 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x609>
			     (user_op->params.update.ticks_slot_plus == 0U) &&
   100aa:	6932      	ldr	r2, [r6, #16]
   100ac:	2a00      	cmp	r2, #0
   100ae:	f040 82ab 	bne.w	10608 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x609>
			     (user_op->params.update.lazy == 0U) &&
   100b2:	6972      	ldr	r2, [r6, #20]
   100b4:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   100b8:	f040 82a6 	bne.w	10608 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x609>
				ticker_job_op_cb(user_op,
   100bc:	2101      	movs	r1, #1
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
   100be:	4630      	mov	r0, r6
   100c0:	f013 fc60 	bl	23984 <ticker_job_op_cb>
}
   100c4:	e7b9      	b.n	1003a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x3b>
	if ((ticker->remainder_current >= BIT(31)) ||
   100c6:	6a69      	ldr	r1, [r5, #36]	; 0x24
   100c8:	4f91      	ldr	r7, [pc, #580]	; (10310 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x311>)
   100ca:	f8df a248 	ldr.w	sl, [pc, #584]	; 10314 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x315>
   100ce:	19cf      	adds	r7, r1, r7
   100d0:	4557      	cmp	r7, sl
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
   100d2:	bf81      	itttt	hi
   100d4:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
   100d8:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
   100dc:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
   100e0:	6269      	strhi	r1, [r5, #36]	; 0x24
	ticker->remainder_current -= ticker->remainder_periodic;
   100e2:	e9d5 1708 	ldrd	r1, r7, [r5, #32]
		decrement++;
   100e6:	bf8c      	ite	hi
   100e8:	f04f 0a01 	movhi.w	sl, #1
	uint8_t decrement = 0U;
   100ec:	f04f 0a00 	movls.w	sl, #0
	ticker->remainder_current -= ticker->remainder_periodic;
   100f0:	1a79      	subs	r1, r7, r1
			ticks_to_expire -= ticker->ticks_periodic +
   100f2:	4482      	add	sl, r0
			ticker->lazy_current--;
   100f4:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
	ticker->remainder_current -= ticker->remainder_periodic;
   100f8:	6269      	str	r1, [r5, #36]	; 0x24
			ticks_to_expire -= ticker->ticks_periodic +
   100fa:	eba3 030a 	sub.w	r3, r3, sl
			ticker->lazy_current--;
   100fe:	f8a5 e01e 	strh.w	lr, [r5, #30]
   10102:	e2a7      	b.n	10654 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x655>
	ticker->remainder_current += ticker->remainder_periodic;
   10104:	e9d5 1708 	ldrd	r1, r7, [r5, #32]
   10108:	4439      	add	r1, r7
	if ((ticker->remainder_current < BIT(31)) &&
   1010a:	4f81      	ldr	r7, [pc, #516]	; (10310 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x311>)
   1010c:	f8df a204 	ldr.w	sl, [pc, #516]	; 10314 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x315>
   10110:	19cf      	adds	r7, r1, r7
   10112:	4557      	cmp	r7, sl
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   10114:	bf9d      	ittte	ls
   10116:	f1a1 71e8 	subls.w	r1, r1, #30408704	; 0x1d00000
   1011a:	f5a1 31d4 	subls.w	r1, r1, #108544	; 0x1a800
   1011e:	f5a1 71a5 	subls.w	r1, r1, #330	; 0x14a
	ticker->remainder_current += ticker->remainder_periodic;
   10122:	6269      	strhi	r1, [r5, #36]	; 0x24
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   10124:	bf96      	itet	ls
   10126:	6269      	strls	r1, [r5, #36]	; 0x24
	return 0;
   10128:	2100      	movhi	r1, #0
		return 1;
   1012a:	2101      	movls	r1, #1
			ticks_to_expire += ticker->ticks_periodic +
   1012c:	4401      	add	r1, r0
			ticker->lazy_current++;
   1012e:	f10e 0e01 	add.w	lr, lr, #1
			ticks_to_expire += ticker->ticks_periodic +
   10132:	440b      	add	r3, r1
			ticker->lazy_current++;
   10134:	f8a5 e01e 	strh.w	lr, [r5, #30]
   10138:	e293      	b.n	10662 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x663>
		if (user_op->op != TICKER_USER_OP_TYPE_YIELD_ABS) {
   1013a:	2a06      	cmp	r2, #6
   1013c:	d005      	beq.n	1014a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x14b>
			ticker->ticks_to_expire = ticker_dequeue(instance,
   1013e:	4620      	mov	r0, r4
   10140:	f013 fbd7 	bl	238f2 <ticker_dequeue>
			ticker->req = ticker->ack;
   10144:	78ab      	ldrb	r3, [r5, #2]
			ticker->ticks_to_expire = ticker_dequeue(instance,
   10146:	60a8      	str	r0, [r5, #8]
			ticker->req = ticker->ack;
   10148:	706b      	strb	r3, [r5, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
   1014a:	7f22      	ldrb	r2, [r4, #28]
   1014c:	7873      	ldrb	r3, [r6, #1]
   1014e:	429a      	cmp	r2, r3
   10150:	f040 82b9 	bne.w	106c6 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x6c7>
			instance->ticker_id_slot_previous = TICKER_NULL;
   10154:	23ff      	movs	r3, #255	; 0xff
   10156:	7723      	strb	r3, [r4, #28]
			if ((user_op->op == TICKER_USER_OP_TYPE_YIELD_ABS) ||
   10158:	7833      	ldrb	r3, [r6, #0]
   1015a:	2b06      	cmp	r3, #6
   1015c:	d001      	beq.n	10162 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x163>
   1015e:	2b08      	cmp	r3, #8
   10160:	d10d      	bne.n	1017e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x17f>
				ticks_at_yield =
   10162:	6870      	ldr	r0, [r6, #4]
			ticks_current = instance->ticks_current;
   10164:	6963      	ldr	r3, [r4, #20]
			if (!((ticks_at_yield - ticks_current) &
   10166:	1ac2      	subs	r2, r0, r3
   10168:	0211      	lsls	r1, r2, #8
   1016a:	d40b      	bmi.n	10184 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x185>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1016c:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
				ticks_used = ticks_elapsed +
   10170:	9a00      	ldr	r2, [sp, #0]
   10172:	4413      	add	r3, r2
			if (instance->ticks_slot_previous > ticks_used) {
   10174:	69a2      	ldr	r2, [r4, #24]
   10176:	429a      	cmp	r2, r3
				instance->ticks_slot_previous = ticks_used;
   10178:	bf88      	it	hi
   1017a:	61a3      	strhi	r3, [r4, #24]
   1017c:	e2a3      	b.n	106c6 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x6c7>
				ticks_at_yield = cntr_cnt_get();
   1017e:	f006 fa1d 	bl	165bc <cntr_cnt_get>
   10182:	e7ef      	b.n	10164 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x165>
				if (ticks_elapsed > ticks_used) {
   10184:	9a00      	ldr	r2, [sp, #0]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10186:	1a1b      	subs	r3, r3, r0
   10188:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				if (ticks_elapsed > ticks_used) {
   1018c:	429a      	cmp	r2, r3
					ticks_used = ticks_elapsed -
   1018e:	bf8c      	ite	hi
   10190:	1ad3      	subhi	r3, r2, r3
					ticks_used = 0;
   10192:	2300      	movls	r3, #0
   10194:	e7ee      	b.n	10174 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x175>
		ticks_expired += ticks_to_expire;
   10196:	9a07      	ldr	r2, [sp, #28]
		skip_collision = (ticker->lazy_current != 0U);
   10198:	f8b5 c01e 	ldrh.w	ip, [r5, #30]
		ticks_expired += ticks_to_expire;
   1019c:	441a      	add	r2, r3
   1019e:	9207      	str	r2, [sp, #28]
		if (instance->ticks_slot_previous > ticks_to_expire) {
   101a0:	69a2      	ldr	r2, [r4, #24]
   101a2:	4293      	cmp	r3, r2
		ticks_elapsed -= ticks_to_expire;
   101a4:	eba7 0703 	sub.w	r7, r7, r3
		ticks_latency -= ticks_to_expire;
   101a8:	ebab 0b03 	sub.w	fp, fp, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
   101ac:	bf25      	ittet	cs
   101ae:	23ff      	movcs	r3, #255	; 0xff
   101b0:	7723      	strbcs	r3, [r4, #28]
			instance->ticks_slot_previous -= ticks_to_expire;
   101b2:	1ad3      	subcc	r3, r2, r3
			instance->ticks_slot_previous = 0U;
   101b4:	2300      	movcs	r3, #0
   101b6:	61a3      	str	r3, [r4, #24]
		state = (ticker->req - ticker->ack) & 0xff;
   101b8:	78a9      	ldrb	r1, [r5, #2]
   101ba:	786b      	ldrb	r3, [r5, #1]
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   101bc:	69a8      	ldr	r0, [r5, #24]
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
   101be:	6aaa      	ldr	r2, [r5, #40]	; 0x28
		state = (ticker->req - ticker->ack) & 0xff;
   101c0:	1a5b      	subs	r3, r3, r1
   101c2:	b2db      	uxtb	r3, r3
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   101c4:	b160      	cbz	r0, 101e0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1e1>
   101c6:	2b02      	cmp	r3, #2
   101c8:	d10a      	bne.n	101e0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1e1>
   101ca:	f1bc 0f00 	cmp.w	ip, #0
   101ce:	d107      	bne.n	101e0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1e1>
   101d0:	b122      	cbz	r2, 101dc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1dd>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
   101d2:	f892 e008 	ldrb.w	lr, [r2, #8]
   101d6:	f1be 0f01 	cmp.w	lr, #1
   101da:	d001      	beq.n	101e0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1e1>
			instance->ticker_id_slot_previous = id_expired;
   101dc:	7726      	strb	r6, [r4, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
   101de:	61a0      	str	r0, [r4, #24]
		ticker->ticks_to_expire = 0U;
   101e0:	2000      	movs	r0, #0
   101e2:	60a8      	str	r0, [r5, #8]
		instance->ticker_id_head = ticker->next;
   101e4:	f8dd e020 	ldr.w	lr, [sp, #32]
   101e8:	9806      	ldr	r0, [sp, #24]
   101ea:	f810 000e 	ldrb.w	r0, [r0, lr]
   101ee:	7760      	strb	r0, [r4, #29]
		if ((ticker->ticks_periodic != 0U) ||
   101f0:	f8d5 e004 	ldr.w	lr, [r5, #4]
   101f4:	f1be 0f00 	cmp.w	lr, #0
   101f8:	d119      	bne.n	1022e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x22f>
   101fa:	2a00      	cmp	r2, #0
   101fc:	d063      	beq.n	102c6 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2c7>
		    TICKER_RESCHEDULE_PENDING(ticker)) {
   101fe:	7a10      	ldrb	r0, [r2, #8]
   10200:	2801      	cmp	r0, #1
   10202:	d160      	bne.n	102c6 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2c7>
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
   10204:	7a13      	ldrb	r3, [r2, #8]
   10206:	2b01      	cmp	r3, #1
   10208:	d113      	bne.n	10232 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x233>
				ticker->ticks_to_expire = ticks_elapsed;
   1020a:	60af      	str	r7, [r5, #8]
				ticker->req = ticker->ack;
   1020c:	7069      	strb	r1, [r5, #1]
			ticks_to_expire_prep(ticker, instance->ticks_current,
   1020e:	9b04      	ldr	r3, [sp, #16]
   10210:	9a07      	ldr	r2, [sp, #28]
   10212:	6961      	ldr	r1, [r4, #20]
   10214:	189a      	adds	r2, r3, r2
   10216:	4628      	mov	r0, r5
   10218:	f013 fb96 	bl	23948 <ticks_to_expire_prep>
			ticker->next = *insert_head;
   1021c:	9b06      	ldr	r3, [sp, #24]
   1021e:	9a08      	ldr	r2, [sp, #32]
   10220:	f803 9002 	strb.w	r9, [r3, r2]
			ticker->req++;
   10224:	786b      	ldrb	r3, [r5, #1]
   10226:	3301      	adds	r3, #1
   10228:	706b      	strb	r3, [r5, #1]
			ticker->req = ticker->ack;
   1022a:	46b1      	mov	r9, r6
   1022c:	e6dc      	b.n	ffe8 <ticker_job+0xa8>
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
   1022e:	2a00      	cmp	r2, #0
   10230:	d1e8      	bne.n	10204 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x205>
				if (!ticker->lazy_current) {
   10232:	f1bc 0f00 	cmp.w	ip, #0
   10236:	d124      	bne.n	10282 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x283>
					lazy_periodic = ticker->lazy_periodic;
   10238:	8ba8      	ldrh	r0, [r5, #28]
				while (count--) {
   1023a:	4680      	mov	r8, r0
				ticks_to_expire = 0U;
   1023c:	2200      	movs	r2, #0
	ticker->remainder_current += ticker->remainder_periodic;
   1023e:	e9d5 1308 	ldrd	r1, r3, [r5, #32]
   10242:	440b      	add	r3, r1
	if ((ticker->remainder_current < BIT(31)) &&
   10244:	4932      	ldr	r1, [pc, #200]	; (10310 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x311>)
   10246:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 10314 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x315>
   1024a:	1859      	adds	r1, r3, r1
   1024c:	4551      	cmp	r1, sl
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   1024e:	bf9f      	itttt	ls
   10250:	f1a3 73e8 	subls.w	r3, r3, #30408704	; 0x1d00000
   10254:	f5a3 33d4 	subls.w	r3, r3, #108544	; 0x1a800
   10258:	f5a3 73a5 	subls.w	r3, r3, #330	; 0x14a
   1025c:	626b      	strls	r3, [r5, #36]	; 0x24
		return 1;
   1025e:	bf92      	itee	ls
   10260:	9b01      	ldrls	r3, [sp, #4]
	ticker->remainder_current += ticker->remainder_periodic;
   10262:	626b      	strhi	r3, [r5, #36]	; 0x24
	return 0;
   10264:	2300      	movhi	r3, #0
					ticks_to_expire +=
   10266:	4473      	add	r3, lr
				while (count--) {
   10268:	f1b8 0801 	subs.w	r8, r8, #1
					ticks_to_expire +=
   1026c:	441a      	add	r2, r3
				while (count--) {
   1026e:	d2e6      	bcs.n	1023e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x23f>
				} else if (!ticker->must_expire) {
   10270:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
   10274:	b32b      	cbz	r3, 102c2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2c3>
				lazy = 0U;
   10276:	2300      	movs	r3, #0
				ticker->lazy_current += (lazy_periodic + lazy);
   10278:	4460      	add	r0, ip
   1027a:	4418      	add	r0, r3
				ticker->ticks_to_expire = ticks_to_expire;
   1027c:	60aa      	str	r2, [r5, #8]
				ticker->lazy_current += (lazy_periodic + lazy);
   1027e:	83e8      	strh	r0, [r5, #30]
   10280:	e7c5      	b.n	1020e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x20f>
					ticker->req = ticker->ack;
   10282:	7069      	strb	r1, [r5, #1]
					lazy_periodic = 0U;
   10284:	2000      	movs	r0, #0
   10286:	e7d8      	b.n	1023a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x23b>
	ticker->remainder_current += ticker->remainder_periodic;
   10288:	e9d5 1308 	ldrd	r1, r3, [r5, #32]
   1028c:	440b      	add	r3, r1
	if ((ticker->remainder_current < BIT(31)) &&
   1028e:	4920      	ldr	r1, [pc, #128]	; (10310 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x311>)
   10290:	f8df a080 	ldr.w	sl, [pc, #128]	; 10314 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x315>
   10294:	1859      	adds	r1, r3, r1
   10296:	4551      	cmp	r1, sl
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   10298:	bf9f      	itttt	ls
   1029a:	f1a3 73e8 	subls.w	r3, r3, #30408704	; 0x1d00000
   1029e:	f5a3 33d4 	subls.w	r3, r3, #108544	; 0x1a800
   102a2:	f5a3 73a5 	subls.w	r3, r3, #330	; 0x14a
   102a6:	626b      	strls	r3, [r5, #36]	; 0x24
		return 1;
   102a8:	bf92      	itee	ls
   102aa:	9b01      	ldrls	r3, [sp, #4]
	ticker->remainder_current += ticker->remainder_periodic;
   102ac:	626b      	strhi	r3, [r5, #36]	; 0x24
	return 0;
   102ae:	2300      	movhi	r3, #0
						ticks_to_expire +=
   102b0:	4473      	add	r3, lr
   102b2:	441a      	add	r2, r3
						lazy++;
   102b4:	f108 0801 	add.w	r8, r8, #1
					while (ticks_to_expire <
   102b8:	4593      	cmp	fp, r2
   102ba:	fa1f f388 	uxth.w	r3, r8
   102be:	d8e3      	bhi.n	10288 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x289>
   102c0:	e7da      	b.n	10278 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x279>
   102c2:	4698      	mov	r8, r3
   102c4:	e7f8      	b.n	102b8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2b9>
			if (state && ((state == 1U) || skip_collision) &&
   102c6:	b14b      	cbz	r3, 102dc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2dd>
   102c8:	2b01      	cmp	r3, #1
   102ca:	d002      	beq.n	102d2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2d3>
   102cc:	f1bc 0f00 	cmp.w	ip, #0
   102d0:	d004      	beq.n	102dc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2dd>
			    ticker->fp_op_func) {
   102d2:	6a2b      	ldr	r3, [r5, #32]
			if (state && ((state == 1U) || skip_collision) &&
   102d4:	b113      	cbz	r3, 102dc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2dd>
				ticker->fp_op_func(TICKER_STATUS_FAILURE,
   102d6:	6a69      	ldr	r1, [r5, #36]	; 0x24
   102d8:	2001      	movs	r0, #1
   102da:	4798      	blx	r3
			ticker->req = ticker->ack;
   102dc:	78ab      	ldrb	r3, [r5, #2]
   102de:	706b      	strb	r3, [r5, #1]
   102e0:	464e      	mov	r6, r9
   102e2:	e7a2      	b.n	1022a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x22b>
			ticker = &nodes[ticker_id_head];
   102e4:	eb07 0247 	add.w	r2, r7, r7, lsl #1
   102e8:	0111      	lsls	r1, r2, #4
   102ea:	eb05 1202 	add.w	r2, r5, r2, lsl #4
			ext_data = ticker->ext_data;
   102ee:	f815 e001 	ldrb.w	lr, [r5, r1]
   102f2:	6a96      	ldr	r6, [r2, #40]	; 0x28
			if (ext_data && ext_data->reschedule_state ==
   102f4:	b11e      	cbz	r6, 102fe <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2ff>
   102f6:	7a31      	ldrb	r1, [r6, #8]
   102f8:	2901      	cmp	r1, #1
   102fa:	f000 816d 	beq.w	105d8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x5d9>
			ticker_id_head = ticker->next;
   102fe:	4677      	mov	r7, lr
		while (ticker_id_head != TICKER_NULL) {
   10300:	2fff      	cmp	r7, #255	; 0xff
   10302:	d1ef      	bne.n	102e4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2e5>
			flag_compare_update = 1U;
   10304:	2b00      	cmp	r3, #0
   10306:	9a02      	ldr	r2, [sp, #8]
   10308:	bf18      	it	ne
   1030a:	461a      	movne	r2, r3
   1030c:	9202      	str	r2, [sp, #8]
   1030e:	e086      	b.n	1041e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x41f>
   10310:	ff172b5a 	.word	0xff172b5a
   10314:	7f172b59 	.word	0x7f172b59
			instance->ticks_slot_previous > ticks_elapsed) {
   10318:	69a0      	ldr	r0, [r4, #24]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   1031a:	9b00      	ldr	r3, [sp, #0]
   1031c:	4283      	cmp	r3, r0
   1031e:	f080 815f 	bcs.w	105e0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x5e1>
			window_start_ticks = instance->ticks_slot_previous -
   10322:	1ac3      	subs	r3, r0, r3
		window_start_ticks = 0U;
   10324:	9301      	str	r3, [sp, #4]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   10326:	e9d6 3a00 	ldrd	r3, sl, [r6]
   1032a:	459a      	cmp	sl, r3
   1032c:	d25b      	bcs.n	103e6 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x3e7>
			ticks_slot_window = ext_data->ticks_slot_window -
   1032e:	f04f 0c00 	mov.w	ip, #0
   10332:	eba3 0b0a 	sub.w	fp, r3, sl
		ticker_id_iter = nodes[ticker_id_head].next;
   10336:	4671      	mov	r1, lr
			ticks_slot_window = ext_data->ticks_slot_window -
   10338:	4663      	mov	r3, ip
		while (ticker_id_iter != TICKER_NULL &&
   1033a:	29ff      	cmp	r1, #255	; 0xff
   1033c:	d006      	beq.n	1034c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x34d>
		       ticks_start_offset + ticker->ticks_slot <=
   1033e:	f8d2 8018 	ldr.w	r8, [r2, #24]
   10342:	eb0c 0008 	add.w	r0, ip, r8
		while (ticker_id_iter != TICKER_NULL &&
   10346:	4583      	cmp	fp, r0
		       ticks_start_offset + ticker->ticks_slot <=
   10348:	9006      	str	r0, [sp, #24]
		while (ticker_id_iter != TICKER_NULL &&
   1034a:	d21c      	bcs.n	10386 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x387>
		ticker->ext_data->ticks_drift += ticks_to_expire -
   1034c:	6891      	ldr	r1, [r2, #8]
   1034e:	ebaa 0101 	sub.w	r1, sl, r1
   10352:	4419      	add	r1, r3
   10354:	6071      	str	r1, [r6, #4]
		ticker->ticks_to_expire = ticks_to_expire;
   10356:	6093      	str	r3, [r2, #8]
		ticker_id_iter = nodes[ticker_id_head].next;
   10358:	4671      	mov	r1, lr
		ticker_id_prev = TICKER_NULL;
   1035a:	23ff      	movs	r3, #255	; 0xff
		while (ticker_id_iter != TICKER_NULL) {
   1035c:	29ff      	cmp	r1, #255	; 0xff
   1035e:	d047      	beq.n	103f0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x3f1>
			node = &nodes[ticker_id_iter];
   10360:	eb01 0041 	add.w	r0, r1, r1, lsl #1
   10364:	ea4f 1900 	mov.w	r9, r0, lsl #4
   10368:	eb05 1000 	add.w	r0, r5, r0, lsl #4
			if (ticker->ticks_to_expire > node->ticks_to_expire) {
   1036c:	f8d2 8008 	ldr.w	r8, [r2, #8]
   10370:	f8d0 c008 	ldr.w	ip, [r0, #8]
   10374:	45e0      	cmp	r8, ip
   10376:	d938      	bls.n	103ea <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x3eb>
				ticker->ticks_to_expire -=
   10378:	eba8 030c 	sub.w	r3, r8, ip
   1037c:	6093      	str	r3, [r2, #8]
			ticker_id_iter = node->next;
   1037e:	460b      	mov	r3, r1
   10380:	f815 1009 	ldrb.w	r1, [r5, r9]
   10384:	e7ea      	b.n	1035c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x35d>
			node = &nodes[ticker_id_iter];
   10386:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   1038a:	0108      	lsls	r0, r1, #4
   1038c:	eb05 1101 	add.w	r1, r5, r1, lsl #4
   10390:	9004      	str	r0, [sp, #16]
			if (node->ext_data &&
   10392:	f8d1 9028 	ldr.w	r9, [r1, #40]	; 0x28
   10396:	f1b9 0f00 	cmp.w	r9, #0
   1039a:	d007      	beq.n	103ac <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x3ad>
   1039c:	f899 9008 	ldrb.w	r9, [r9, #8]
   103a0:	f1b9 0f01 	cmp.w	r9, #1
   103a4:	d102      	bne.n	103ac <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x3ad>
				ticker_id_iter = node->next;
   103a6:	4601      	mov	r1, r0
			ticker_id_iter = node->next;
   103a8:	5c69      	ldrb	r1, [r5, r1]
   103aa:	e7c6      	b.n	1033a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x33b>
			if (node->ticks_to_expire >
   103ac:	f8d1 9008 	ldr.w	r9, [r1, #8]
   103b0:	f1b9 0f04 	cmp.w	r9, #4
   103b4:	d90e      	bls.n	103d4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x3d5>
					MIN(ticks_slot_window,
   103b6:	f1ac 0304 	sub.w	r3, ip, #4
   103ba:	444b      	add	r3, r9
				window_end_ticks =
   103bc:	455b      	cmp	r3, fp
			if (window_end_ticks > ticks_start_offset +
   103be:	9806      	ldr	r0, [sp, #24]
				window_end_ticks =
   103c0:	bf28      	it	cs
   103c2:	465b      	movcs	r3, fp
			if (window_end_ticks > ticks_start_offset +
   103c4:	4283      	cmp	r3, r0
   103c6:	d905      	bls.n	103d4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x3d5>
			if (ticks_to_expire != 0U &&
   103c8:	ebb3 0308 	subs.w	r3, r3, r8
   103cc:	d002      	beq.n	103d4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x3d5>
   103ce:	9801      	ldr	r0, [sp, #4]
   103d0:	4283      	cmp	r3, r0
   103d2:	d2bb      	bcs.n	1034c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x34d>
			window_start_ticks  = node->ticks_to_expire +
   103d4:	6988      	ldr	r0, [r1, #24]
			ticker_id_iter = node->next;
   103d6:	9904      	ldr	r1, [sp, #16]
			window_start_ticks  = node->ticks_to_expire +
   103d8:	eb00 0309 	add.w	r3, r0, r9
   103dc:	9301      	str	r3, [sp, #4]
			ticks_start_offset += node->ticks_to_expire;
   103de:	44cc      	add	ip, r9
			ticks_to_expire     = ticks_slot_window -
   103e0:	ebab 0308 	sub.w	r3, fp, r8
			ticker_id_iter = node->next;
   103e4:	e7e0      	b.n	103a8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x3a9>
   103e6:	2300      	movs	r3, #0
   103e8:	e7b0      	b.n	1034c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x34d>
				node->ticks_to_expire -=
   103ea:	ebac 0108 	sub.w	r1, ip, r8
   103ee:	6081      	str	r1, [r0, #8]
		if (ticker_id_prev != TICKER_NULL) {
   103f0:	2bff      	cmp	r3, #255	; 0xff
   103f2:	d008      	beq.n	10406 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x407>
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
   103f4:	b21b      	sxth	r3, r3
   103f6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   103fa:	011b      	lsls	r3, r3, #4
			instance->ticker_id_head = nodes[ticker_id_head].next;
   103fc:	f884 e01d 	strb.w	lr, [r4, #29]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
   10400:	5ce9      	ldrb	r1, [r5, r3]
   10402:	7011      	strb	r1, [r2, #0]
			nodes[ticker_id_prev].next = ticker_id_head;
   10404:	54ef      	strb	r7, [r5, r3]
		ticker->lazy_current--;
   10406:	8bd3      	ldrh	r3, [r2, #30]
   10408:	3b01      	subs	r3, #1
   1040a:	83d3      	strh	r3, [r2, #30]
		ext_data->reschedule_state =
   1040c:	f04f 0302 	mov.w	r3, #2
   10410:	7233      	strb	r3, [r6, #8]
		rescheduled  = 1U;
   10412:	2301      	movs	r3, #1
   10414:	e606      	b.n	10024 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x25>
		ticker_job_list_insert(instance, insert_head);
   10416:	4649      	mov	r1, r9
   10418:	4620      	mov	r0, r4
   1041a:	f013 fabd 	bl	23998 <ticker_job_list_insert>
	if (instance->ticker_id_head != ticker_id_old_head) {
   1041e:	7f63      	ldrb	r3, [r4, #29]
   10420:	9a03      	ldr	r2, [sp, #12]
   10422:	4293      	cmp	r3, r2
	if (!pending) {
   10424:	9b05      	ldr	r3, [sp, #20]
	if (instance->ticker_id_head != ticker_id_old_head) {
   10426:	f040 80d1 	bne.w	105cc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x5cd>
	if (!pending) {
   1042a:	b93b      	cbnz	r3, 1043c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x43d>
	users = &instance->users[0];
   1042c:	7a65      	ldrb	r5, [r4, #9]
   1042e:	6863      	ldr	r3, [r4, #4]
   10430:	9300      	str	r3, [sp, #0]
	while (count_user--) {
   10432:	3d01      	subs	r5, #1
   10434:	b2ed      	uxtb	r5, r5
		uop->status = TICKER_STATUS_SUCCESS;
   10436:	2700      	movs	r7, #0
	while (count_user--) {
   10438:	2dff      	cmp	r5, #255	; 0xff
   1043a:	d116      	bne.n	1046a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x46b>
	if (flag_compare_update) {
   1043c:	9b02      	ldr	r3, [sp, #8]
   1043e:	b14b      	cbz	r3, 10454 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x455>
	if (instance->ticker_id_head == TICKER_NULL) {
   10440:	7f63      	ldrb	r3, [r4, #29]
   10442:	2bff      	cmp	r3, #255	; 0xff
   10444:	d179      	bne.n	1053a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x53b>
		if (cntr_stop() == 0) {
   10446:	f006 f893 	bl	16570 <cntr_stop>
   1044a:	b918      	cbnz	r0, 10454 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x455>
			instance->ticks_slot_previous = 0U;
   1044c:	61a0      	str	r0, [r4, #24]
			instance->ticks_current = cntr_cnt_get();
   1044e:	f006 f8b5 	bl	165bc <cntr_cnt_get>
   10452:	6160      	str	r0, [r4, #20]
	instance->job_guard = 0U;
   10454:	2300      	movs	r3, #0
   10456:	77a3      	strb	r3, [r4, #30]
	if (instance->worker_trigger) {
   10458:	7fe3      	ldrb	r3, [r4, #31]
   1045a:	2b00      	cmp	r3, #0
   1045c:	f000 8135 	beq.w	106ca <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x6cb>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   10460:	6a65      	ldr	r5, [r4, #36]	; 0x24
   10462:	4623      	mov	r3, r4
   10464:	2201      	movs	r2, #1
   10466:	2103      	movs	r1, #3
   10468:	e578      	b.n	ff5c <ticker_job+0x1c>
		user = &users[count_user];
   1046a:	9b00      	ldr	r3, [sp, #0]
   1046c:	eb03 06c5 	add.w	r6, r3, r5, lsl #3
		user_op = &user->user_op[0];
   10470:	f8d6 8004 	ldr.w	r8, [r6, #4]
		while (user->first != user->last) {
   10474:	7873      	ldrb	r3, [r6, #1]
   10476:	78f2      	ldrb	r2, [r6, #3]
   10478:	429a      	cmp	r2, r3
   1047a:	d102      	bne.n	10482 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x483>
   1047c:	3d01      	subs	r5, #1
   1047e:	b2ed      	uxtb	r5, r5
   10480:	e7da      	b.n	10438 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x439>
			ticker_job_op_inquire(instance, &user_op[user->first]);
   10482:	2234      	movs	r2, #52	; 0x34
   10484:	fb13 f202 	smulbb	r2, r3, r2
   10488:	eb08 0302 	add.w	r3, r8, r2
	switch (uop->op) {
   1048c:	f818 2002 	ldrb.w	r2, [r8, r2]
   10490:	2a02      	cmp	r2, #2
   10492:	d012      	beq.n	104ba <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x4bb>
   10494:	2a03      	cmp	r2, #3
   10496:	d040      	beq.n	1051a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x51b>
   10498:	2a01      	cmp	r2, #1
   1049a:	d105      	bne.n	104a8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x4a9>
			uop->status = TICKER_STATUS_SUCCESS;
   1049c:	629f      	str	r7, [r3, #40]	; 0x28
		fp_op_func = uop->fp_op_func;
   1049e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	if (fp_op_func) {
   104a0:	b112      	cbz	r2, 104a8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x4a9>
		fp_op_func(uop->status, uop->op_context);
   104a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
   104a4:	6a98      	ldr	r0, [r3, #40]	; 0x28
   104a6:	4790      	blx	r2
			first = user->first + 1;
   104a8:	7873      	ldrb	r3, [r6, #1]
			if (first == user->count_user_op) {
   104aa:	7832      	ldrb	r2, [r6, #0]
			first = user->first + 1;
   104ac:	3301      	adds	r3, #1
   104ae:	b2db      	uxtb	r3, r3
				first = 0U;
   104b0:	429a      	cmp	r2, r3
   104b2:	bf08      	it	eq
   104b4:	2300      	moveq	r3, #0
			user->first = first;
   104b6:	7073      	strb	r3, [r6, #1]
   104b8:	e7dc      	b.n	10474 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x475>
		ticker_by_next_slot_get(instance,
   104ba:	e9d3 9001 	ldrd	r9, r0, [r3, #4]
	_ticker_id_head = *ticker_id_head;
   104be:	f899 2000 	ldrb.w	r2, [r9]
		ticker_by_next_slot_get(instance,
   104c2:	f8d3 e00c 	ldr.w	lr, [r3, #12]
	node = instance->nodes;
   104c6:	f8d4 c000 	ldr.w	ip, [r4]
	    (*ticks_current != instance->ticks_current)) {
   104ca:	6961      	ldr	r1, [r4, #20]
	if ((_ticker_id_head == TICKER_NULL) ||
   104cc:	2aff      	cmp	r2, #255	; 0xff
   104ce:	d003      	beq.n	104d8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x4d9>
   104d0:	f8d0 a000 	ldr.w	sl, [r0]
   104d4:	4551      	cmp	r1, sl
   104d6:	d009      	beq.n	104ec <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x4ed>
		_ticker_id_head = instance->ticker_id_head;
   104d8:	7f62      	ldrb	r2, [r4, #29]
		*ticks_current = instance->ticks_current;
   104da:	6001      	str	r1, [r0, #0]
		_ticks_to_expire = 0U;
   104dc:	2000      	movs	r0, #0
	while (_ticker_id_head != TICKER_NULL) {
   104de:	2aff      	cmp	r2, #255	; 0xff
   104e0:	d10c      	bne.n	104fc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x4fd>
	*ticker_id_head = _ticker_id_head;
   104e2:	f889 2000 	strb.w	r2, [r9]
	*ticks_to_expire = _ticks_to_expire;
   104e6:	f8ce 0000 	str.w	r0, [lr]
}
   104ea:	e7d7      	b.n	1049c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x49d>
		ticker = &node[_ticker_id_head];
   104ec:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   104f0:	0112      	lsls	r2, r2, #4
	_ticks_to_expire = *ticks_to_expire;
   104f2:	f8de 0000 	ldr.w	r0, [lr]
		_ticker_id_head = ticker->next;
   104f6:	f81c 2002 	ldrb.w	r2, [ip, r2]
   104fa:	e7f0      	b.n	104de <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x4df>
		ticker = &node[_ticker_id_head];
   104fc:	eb02 0142 	add.w	r1, r2, r2, lsl #1
   10500:	ea4f 1b01 	mov.w	fp, r1, lsl #4
   10504:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
		_ticks_to_expire += ticker->ticks_to_expire;
   10508:	f8d1 a008 	ldr.w	sl, [r1, #8]
			if (ticker->ticks_slot) {
   1050c:	6989      	ldr	r1, [r1, #24]
		_ticks_to_expire += ticker->ticks_to_expire;
   1050e:	4450      	add	r0, sl
			if (ticker->ticks_slot) {
   10510:	2900      	cmp	r1, #0
   10512:	d1e6      	bne.n	104e2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x4e3>
		_ticker_id_head = ticker->next;
   10514:	f81c 200b 	ldrb.w	r2, [ip, fp]
   10518:	e7e1      	b.n	104de <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x4df>
		if (uop->id < instance->count_node) {
   1051a:	785a      	ldrb	r2, [r3, #1]
   1051c:	7a21      	ldrb	r1, [r4, #8]
   1051e:	4291      	cmp	r1, r2
   10520:	d908      	bls.n	10534 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x535>
			node[uop->id].priority =
   10522:	6821      	ldr	r1, [r4, #0]
   10524:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   10528:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   1052c:	7919      	ldrb	r1, [r3, #4]
   1052e:	f882 102d 	strb.w	r1, [r2, #45]	; 0x2d
   10532:	e7b3      	b.n	1049c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x49d>
			uop->status = TICKER_STATUS_FAILURE;
   10534:	2201      	movs	r2, #1
   10536:	629a      	str	r2, [r3, #40]	; 0x28
   10538:	e7b1      	b.n	1049e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x49f>
	if (ticker_id_old_head == TICKER_NULL) {
   1053a:	9b03      	ldr	r3, [sp, #12]
   1053c:	2bff      	cmp	r3, #255	; 0xff
   1053e:	d106      	bne.n	1054e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x54f>
		ticks_current = cntr_cnt_get();
   10540:	f006 f83c 	bl	165bc <cntr_cnt_get>
   10544:	4605      	mov	r5, r0
		if (cntr_start() == 0) {
   10546:	f006 f805 	bl	16554 <cntr_start>
   1054a:	b900      	cbnz	r0, 1054e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x54f>
			instance->ticks_current = ticks_current;
   1054c:	6165      	str	r5, [r4, #20]
	ticker = &instance->nodes[instance->ticker_id_head];
   1054e:	7f63      	ldrb	r3, [r4, #29]
	ticks_to_expire = ticker->ticks_to_expire;
   10550:	6822      	ldr	r2, [r4, #0]
		LL_ASSERT(i);
   10552:	f8df 817c 	ldr.w	r8, [pc, #380]	; 106d0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x6d1>
   10556:	f8df 917c 	ldr.w	r9, [pc, #380]	; 106d4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x6d5>
   1055a:	f8df a17c 	ldr.w	sl, [pc, #380]	; 106d8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x6d9>
	ticker = &instance->nodes[instance->ticker_id_head];
   1055e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	ticks_to_expire = ticker->ticks_to_expire;
   10562:	eb02 1303 	add.w	r3, r2, r3, lsl #4
	i = 10U;
   10566:	260a      	movs	r6, #10
	ticks_to_expire = ticker->ticks_to_expire;
   10568:	689f      	ldr	r7, [r3, #8]
		ctr = cntr_cnt_get();
   1056a:	f006 f827 	bl	165bc <cntr_cnt_get>
		cc = instance->ticks_current;
   1056e:	6965      	ldr	r5, [r4, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10570:	1b43      	subs	r3, r0, r5
   10572:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
   10576:	3303      	adds	r3, #3
		cc += MAX(ticks_elapsed, ticks_to_expire);
   10578:	42bb      	cmp	r3, r7
   1057a:	bf2c      	ite	cs
   1057c:	18ed      	addcs	r5, r5, r3
   1057e:	19ed      	addcc	r5, r5, r7
		cc &= HAL_TICKER_CNTR_MASK;
   10580:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
		instance->trigger_set_cb(cc);
   10584:	6aa3      	ldr	r3, [r4, #40]	; 0x28
		ctr = cntr_cnt_get();
   10586:	4683      	mov	fp, r0
		instance->trigger_set_cb(cc);
   10588:	4628      	mov	r0, r5
   1058a:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
   1058c:	f006 f816 	bl	165bc <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10590:	eba0 030b 	sub.w	r3, r0, fp
   10594:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   10598:	eba5 050b 	sub.w	r5, r5, fp
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
   1059c:	3303      	adds	r3, #3
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1059e:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
		  ticker_ticks_diff_get(cc, ctr));
   105a2:	42ab      	cmp	r3, r5
		i--;
   105a4:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
		  ticker_ticks_diff_get(cc, ctr));
   105a8:	f67f af54 	bls.w	10454 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x455>
		LL_ASSERT(i);
   105ac:	2e00      	cmp	r6, #0
   105ae:	d1dc      	bne.n	1056a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x56b>
   105b0:	f640 133e 	movw	r3, #2366	; 0x93e
   105b4:	4642      	mov	r2, r8
   105b6:	4649      	mov	r1, r9
   105b8:	4650      	mov	r0, sl
   105ba:	f00b fe85 	bl	1c2c8 <printk>
   105be:	4040      	eors	r0, r0
   105c0:	f380 8811 	msr	BASEPRI, r0
   105c4:	f04f 0003 	mov.w	r0, #3
   105c8:	df02      	svc	2
   105ca:	e7ce      	b.n	1056a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x56b>
	if (!pending) {
   105cc:	2b00      	cmp	r3, #0
   105ce:	f47f af37 	bne.w	10440 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x441>
		flag_compare_update = 1U;
   105d2:	2301      	movs	r3, #1
   105d4:	9302      	str	r3, [sp, #8]
   105d6:	e729      	b.n	1042c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x42d>
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   105d8:	7f23      	ldrb	r3, [r4, #28]
   105da:	2bff      	cmp	r3, #255	; 0xff
   105dc:	f47f ae9c 	bne.w	10318 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x319>
		window_start_ticks = 0U;
   105e0:	2300      	movs	r3, #0
   105e2:	e69f      	b.n	10324 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x325>
			if (state == 1U) {
   105e4:	2b01      	cmp	r3, #1
   105e6:	f43f ada8 	beq.w	1013a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x13b>
				instance->sched_cb(TICKER_CALL_ID_JOB,
   105ea:	2104      	movs	r1, #4
   105ec:	4623      	mov	r3, r4
   105ee:	6a65      	ldr	r5, [r4, #36]	; 0x24
   105f0:	2201      	movs	r2, #1
   105f2:	4608      	mov	r0, r1
   105f4:	47a8      	blx	r5
				pending = 1U;
   105f6:	2301      	movs	r3, #1
				user->middle = prev;
   105f8:	f888 7002 	strb.w	r7, [r8, #2]
				pending = 1U;
   105fc:	9305      	str	r3, [sp, #20]
   105fe:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
   10602:	fa5f fb83 	uxtb.w	fp, r3
   10606:	e4d6      	b.n	ffb6 <ticker_job+0x76>
			if (state == 1U) {
   10608:	2b01      	cmp	r3, #1
   1060a:	d1ee      	bne.n	105ea <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x5eb>
		ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   1060c:	4620      	mov	r0, r4
   1060e:	f013 f970 	bl	238f2 <ticker_dequeue>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   10612:	6963      	ldr	r3, [r4, #20]
		ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   10614:	60a8      	str	r0, [r5, #8]
   10616:	4607      	mov	r7, r0
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   10618:	9307      	str	r3, [sp, #28]
	ticks_now = cntr_cnt_get();
   1061a:	f005 ffcf 	bl	165bc <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1061e:	9b07      	ldr	r3, [sp, #28]
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   10620:	9900      	ldr	r1, [sp, #0]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10622:	1ac3      	subs	r3, r0, r3
   10624:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   10628:	440b      	add	r3, r1
	if (ticks_to_expire > ticks_elapsed) {
   1062a:	429f      	cmp	r7, r3
		ticker->ticks_to_expire_minus += ticks_elapsed -
   1062c:	bf98      	it	ls
   1062e:	6969      	ldrls	r1, [r5, #20]
	ticks_now = cntr_cnt_get();
   10630:	4602      	mov	r2, r0
		ticker->ticks_to_expire_minus += ticks_elapsed -
   10632:	bf98      	it	ls
   10634:	1bc9      	subls	r1, r1, r7
	if ((ticker->ticks_periodic != 0U) &&
   10636:	6868      	ldr	r0, [r5, #4]
		ticker->ticks_to_expire_minus += ticks_elapsed -
   10638:	bf9b      	ittet	ls
   1063a:	185b      	addls	r3, r3, r1
   1063c:	616b      	strls	r3, [r5, #20]
		ticks_to_expire -= ticks_elapsed;
   1063e:	1afb      	subhi	r3, r7, r3
		ticks_to_expire = 0U;
   10640:	2300      	movls	r3, #0
	if ((ticker->ticks_periodic != 0U) &&
   10642:	b1a8      	cbz	r0, 10670 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x671>
	    (user_op->params.update.lazy != 0U)) {
   10644:	8ab1      	ldrh	r1, [r6, #20]
	if ((ticker->ticks_periodic != 0U) &&
   10646:	b199      	cbz	r1, 10670 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x671>
		user_op->params.update.lazy--;
   10648:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
   1064c:	fa1f fc8c 	uxth.w	ip, ip
   10650:	f8a6 c014 	strh.w	ip, [r6, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   10654:	4298      	cmp	r0, r3
		       (ticker->lazy_current > user_op->params.update.lazy)) {
   10656:	f8b5 e01e 	ldrh.w	lr, [r5, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   1065a:	d202      	bcs.n	10662 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x663>
   1065c:	45e6      	cmp	lr, ip
   1065e:	f63f ad32 	bhi.w	100c6 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc7>
		while (ticker->lazy_current < user_op->params.update.lazy) {
   10662:	f8b5 e01e 	ldrh.w	lr, [r5, #30]
   10666:	45f4      	cmp	ip, lr
   10668:	f63f ad4c 	bhi.w	10104 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x105>
		ticker->lazy_periodic = user_op->params.update.lazy;
   1066c:	f8a5 c01c 	strh.w	ip, [r5, #28]
				  user_op->params.update.ticks_drift_plus;
   10670:	6871      	ldr	r1, [r6, #4]
				user_op->params.update.ticks_drift_minus;
   10672:	68b0      	ldr	r0, [r6, #8]
	struct ticker_ext *ext_data = ticker->ext_data;
   10674:	6aaf      	ldr	r7, [r5, #40]	; 0x28
	ticker->ticks_to_expire = ticks_to_expire +
   10676:	440b      	add	r3, r1
   10678:	60ab      	str	r3, [r5, #8]
	ticker->ticks_to_expire_minus +=
   1067a:	696b      	ldr	r3, [r5, #20]
   1067c:	4403      	add	r3, r0
   1067e:	616b      	str	r3, [r5, #20]
	if (ext_data && ext_data->ticks_slot_window != 0U) {
   10680:	b11f      	cbz	r7, 1068a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x68b>
   10682:	683b      	ldr	r3, [r7, #0]
   10684:	b10b      	cbz	r3, 1068a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x68b>
			user_op->params.update.ticks_drift_plus -
   10686:	1a09      	subs	r1, r1, r0
		ext_data->ticks_drift =
   10688:	6079      	str	r1, [r7, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
   1068a:	9907      	ldr	r1, [sp, #28]
   1068c:	4628      	mov	r0, r5
   1068e:	f013 f95b 	bl	23948 <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
   10692:	68f2      	ldr	r2, [r6, #12]
   10694:	69ab      	ldr	r3, [r5, #24]
   10696:	4413      	add	r3, r2
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
   10698:	6932      	ldr	r2, [r6, #16]
   1069a:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
   1069c:	bf8c      	ite	hi
   1069e:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0U;
   106a0:	2300      	movls	r3, #0
   106a2:	61ab      	str	r3, [r5, #24]
	if (user_op->params.update.force != 0U) {
   106a4:	7db3      	ldrb	r3, [r6, #22]
   106a6:	b103      	cbz	r3, 106aa <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x6ab>
		ticker->force = user_op->params.update.force;
   106a8:	70eb      	strb	r3, [r5, #3]
	if (user_op->params.update.must_expire) {
   106aa:	7df3      	ldrb	r3, [r6, #23]
   106ac:	b113      	cbz	r3, 106b4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x6b5>
		ticker->must_expire = (user_op->params.update.must_expire - 1);
   106ae:	3b01      	subs	r3, #1
   106b0:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
	ticker->next = *insert_head;
   106b4:	9b02      	ldr	r3, [sp, #8]
   106b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   106b8:	f803 9002 	strb.w	r9, [r3, r2]
		ticker->req++;
   106bc:	786b      	ldrb	r3, [r5, #1]
	*insert_head = user_op->id;
   106be:	f896 9001 	ldrb.w	r9, [r6, #1]
		ticker->req++;
   106c2:	3301      	adds	r3, #1
   106c4:	706b      	strb	r3, [r5, #1]
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
   106c6:	2100      	movs	r1, #0
   106c8:	e4f9      	b.n	100be <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xbf>
}
   106ca:	b00b      	add	sp, #44	; 0x2c
   106cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   106d0:	0002775d 	.word	0x0002775d
   106d4:	000277e4 	.word	0x000277e4
   106d8:	00027514 	.word	0x00027514

000106dc <ticker_init>:
{
   106dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   106de:	9f05      	ldr	r7, [sp, #20]
   106e0:	f89d 5018 	ldrb.w	r5, [sp, #24]
   106e4:	f8dd c01c 	ldr.w	ip, [sp, #28]
	if (instance_index >= TICKER_INSTANCE_MAX) {
   106e8:	b108      	cbz	r0, 106ee <ticker_init+0x12>
		return TICKER_STATUS_FAILURE;
   106ea:	2001      	movs	r0, #1
}
   106ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	instance->count_node = count_node;
   106ee:	4c18      	ldr	r4, [pc, #96]	; (10750 <ticker_init+0x74>)
   106f0:	7221      	strb	r1, [r4, #8]
	instance->nodes = node;
   106f2:	6022      	str	r2, [r4, #0]
	while (count_node--) {
   106f4:	3901      	subs	r1, #1
   106f6:	b2c9      	uxtb	r1, r1
   106f8:	29ff      	cmp	r1, #255	; 0xff
   106fa:	d116      	bne.n	1072a <ticker_init+0x4e>
	instance->count_user = count_user;
   106fc:	7263      	strb	r3, [r4, #9]
	instance->users = user;
   106fe:	6067      	str	r7, [r4, #4]
		user_op_ += users[count_user].count_user_op;
   10700:	2234      	movs	r2, #52	; 0x34
	while (count_user--) {
   10702:	3b01      	subs	r3, #1
   10704:	b2db      	uxtb	r3, r3
   10706:	2bff      	cmp	r3, #255	; 0xff
   10708:	d116      	bne.n	10738 <ticker_init+0x5c>
	if (count_op) {
   1070a:	2d00      	cmp	r5, #0
   1070c:	d1ed      	bne.n	106ea <ticker_init+0xe>
	instance->caller_id_get_cb = caller_id_get_cb;
   1070e:	9b08      	ldr	r3, [sp, #32]
   10710:	6223      	str	r3, [r4, #32]
	instance->sched_cb = sched_cb;
   10712:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10714:	6263      	str	r3, [r4, #36]	; 0x24
	instance->trigger_set_cb = trigger_set_cb;
   10716:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10718:	62a3      	str	r3, [r4, #40]	; 0x28
	instance->ticker_id_slot_previous = TICKER_NULL;
   1071a:	f64f 73ff 	movw	r3, #65535	; 0xffff
	instance->ticks_slot_previous = 0U;
   1071e:	e9c4 5505 	strd	r5, r5, [r4, #20]
	instance->ticker_id_slot_previous = TICKER_NULL;
   10722:	83a3      	strh	r3, [r4, #28]
	instance->ticks_elapsed_first = 0U;
   10724:	8165      	strh	r5, [r4, #10]
	return TICKER_STATUS_SUCCESS;
   10726:	4628      	mov	r0, r5
   10728:	e7e0      	b.n	106ec <ticker_init+0x10>
		instance->nodes[count_node].priority = 0;
   1072a:	eb01 0641 	add.w	r6, r1, r1, lsl #1
   1072e:	eb02 1606 	add.w	r6, r2, r6, lsl #4
   10732:	f886 002d 	strb.w	r0, [r6, #45]	; 0x2d
   10736:	e7dd      	b.n	106f4 <ticker_init+0x18>
		users[count_user].user_op = user_op_;
   10738:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
   1073c:	f8c1 c004 	str.w	ip, [r1, #4]
		user_op_ += users[count_user].count_user_op;
   10740:	f817 0033 	ldrb.w	r0, [r7, r3, lsl #3]
		count_op -= users[count_user].count_user_op;
   10744:	1a2d      	subs	r5, r5, r0
		user_op_ += users[count_user].count_user_op;
   10746:	fb00 cc02 	mla	ip, r0, r2, ip
		count_op -= users[count_user].count_user_op;
   1074a:	b2ed      	uxtb	r5, r5
   1074c:	e7d9      	b.n	10702 <ticker_init+0x26>
   1074e:	bf00      	nop
   10750:	20002704 	.word	0x20002704

00010754 <ticker_is_initialized>:
	return !!(_instance[instance_index].count_node);
   10754:	4b04      	ldr	r3, [pc, #16]	; (10768 <ticker_is_initialized+0x14>)
   10756:	222c      	movs	r2, #44	; 0x2c
   10758:	fb02 3300 	mla	r3, r2, r0, r3
   1075c:	7a18      	ldrb	r0, [r3, #8]
}
   1075e:	3800      	subs	r0, #0
   10760:	bf18      	it	ne
   10762:	2001      	movne	r0, #1
   10764:	4770      	bx	lr
   10766:	bf00      	nop
   10768:	20002704 	.word	0x20002704

0001076c <ticker_trigger>:
	if (instance->sched_cb) {
   1076c:	4b07      	ldr	r3, [pc, #28]	; (1078c <ticker_trigger+0x20>)
   1076e:	222c      	movs	r2, #44	; 0x2c
   10770:	fb02 3100 	mla	r1, r2, r0, r3
{
   10774:	b410      	push	{r4}
	if (instance->sched_cb) {
   10776:	6a4c      	ldr	r4, [r1, #36]	; 0x24
   10778:	b134      	cbz	r4, 10788 <ticker_trigger+0x1c>
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   1077a:	460b      	mov	r3, r1
   1077c:	46a4      	mov	ip, r4
   1077e:	2201      	movs	r2, #1
}
   10780:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   10782:	2103      	movs	r1, #3
   10784:	2002      	movs	r0, #2
   10786:	4760      	bx	ip
}
   10788:	bc10      	pop	{r4}
   1078a:	4770      	bx	lr
   1078c:	20002704 	.word	0x20002704

00010790 <ticker_start_ext>:
{
   10790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10794:	4606      	mov	r6, r0
   10796:	4608      	mov	r0, r1
   10798:	4611      	mov	r1, r2
   1079a:	461a      	mov	r2, r3
	struct ticker_instance *instance = &_instance[instance_index];
   1079c:	4b22      	ldr	r3, [pc, #136]	; (10828 <ticker_start_ext+0x98>)
   1079e:	242c      	movs	r4, #44	; 0x2c
   107a0:	fb06 3904 	mla	r9, r6, r4, r3
	user = &instance->users[user_id];
   107a4:	f8d9 3004 	ldr.w	r3, [r9, #4]
   107a8:	eb03 0cc0 	add.w	ip, r3, r0, lsl #3
	if (last >= user->count_user_op) {
   107ac:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
	last = user->last + 1;
   107b0:	f89c 7003 	ldrb.w	r7, [ip, #3]
   107b4:	1c7d      	adds	r5, r7, #1
   107b6:	b2ed      	uxtb	r5, r5
		last = 0U;
   107b8:	42ab      	cmp	r3, r5
   107ba:	bf98      	it	ls
   107bc:	2500      	movls	r5, #0
	if (last == user->first) {
   107be:	f89c 3001 	ldrb.w	r3, [ip, #1]
   107c2:	42ab      	cmp	r3, r5
   107c4:	d02e      	beq.n	10824 <ticker_start_ext+0x94>
	user_op = &user->user_op[user->last];
   107c6:	2334      	movs	r3, #52	; 0x34
   107c8:	fb17 f703 	smulbb	r7, r7, r3
   107cc:	f8dc 3004 	ldr.w	r3, [ip, #4]
	user_op->op = TICKER_USER_OP_TYPE_START;
   107d0:	f04f 0804 	mov.w	r8, #4
	user_op = &user->user_op[user->last];
   107d4:	19dc      	adds	r4, r3, r7
	user_op->op = TICKER_USER_OP_TYPE_START;
   107d6:	f803 8007 	strb.w	r8, [r3, r7]
	user_op->params.start.ticks_first = ticks_first;
   107da:	9b08      	ldr	r3, [sp, #32]
   107dc:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
   107de:	9b09      	ldr	r3, [sp, #36]	; 0x24
   107e0:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
   107e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   107e4:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
   107e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   107e8:	61a3      	str	r3, [r4, #24]
	user_op->params.start.lazy = lazy;
   107ea:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   107ee:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.ext_data = ext_data;
   107f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   107f2:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->params.start.fp_timeout_func = fp_timeout_func;
   107f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   107f6:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
   107f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   107fa:	6223      	str	r3, [r4, #32]
	user_op->status = TICKER_STATUS_BUSY;
   107fc:	2302      	movs	r3, #2
   107fe:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->fp_op_func = fp_op_func;
   10800:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   10802:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
   10804:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
   10806:	7061      	strb	r1, [r4, #1]
	user_op->params.start.ticks_at_start = ticks_anchor;
   10808:	6062      	str	r2, [r4, #4]
	user_op->op_context = op_context;
   1080a:	6323      	str	r3, [r4, #48]	; 0x30
	user->last = last;
   1080c:	f88c 5003 	strb.w	r5, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   10810:	e9d9 3508 	ldrd	r3, r5, [r9, #32]
   10814:	4798      	blx	r3
   10816:	464b      	mov	r3, r9
   10818:	2200      	movs	r2, #0
   1081a:	4641      	mov	r1, r8
   1081c:	47a8      	blx	r5
	return user_op->status;
   1081e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   10820:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
   10824:	2001      	movs	r0, #1
   10826:	e7fb      	b.n	10820 <ticker_start_ext+0x90>
   10828:	20002704 	.word	0x20002704

0001082c <ticker_update_ext>:
{
   1082c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   10830:	4c23      	ldr	r4, [pc, #140]	; (108c0 <ticker_update_ext+0x94>)
{
   10832:	4606      	mov	r6, r0
   10834:	4608      	mov	r0, r1
   10836:	4611      	mov	r1, r2
	struct ticker_instance *instance = &_instance[instance_index];
   10838:	222c      	movs	r2, #44	; 0x2c
   1083a:	fb06 4802 	mla	r8, r6, r2, r4
	user = &instance->users[user_id];
   1083e:	f8d8 4004 	ldr.w	r4, [r8, #4]
   10842:	eb04 0cc0 	add.w	ip, r4, r0, lsl #3
	if (last >= user->count_user_op) {
   10846:	f814 2030 	ldrb.w	r2, [r4, r0, lsl #3]
	last = user->last + 1;
   1084a:	f89c 7003 	ldrb.w	r7, [ip, #3]
   1084e:	1c7d      	adds	r5, r7, #1
   10850:	b2ed      	uxtb	r5, r5
		last = 0U;
   10852:	42aa      	cmp	r2, r5
   10854:	bf98      	it	ls
   10856:	2500      	movls	r5, #0
	if (last == user->first) {
   10858:	f89c 2001 	ldrb.w	r2, [ip, #1]
   1085c:	42aa      	cmp	r2, r5
   1085e:	d02c      	beq.n	108ba <ticker_update_ext+0x8e>
	user_op = &user->user_op[user->last];
   10860:	2234      	movs	r2, #52	; 0x34
   10862:	fb17 f702 	smulbb	r7, r7, r2
   10866:	f8dc 2004 	ldr.w	r2, [ip, #4]
   1086a:	19d4      	adds	r4, r2, r7
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
   1086c:	f04f 0e05 	mov.w	lr, #5
   10870:	f802 e007 	strb.w	lr, [r2, r7]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
   10874:	6063      	str	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
   10876:	9b06      	ldr	r3, [sp, #24]
   10878:	60a3      	str	r3, [r4, #8]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
   1087a:	9b07      	ldr	r3, [sp, #28]
   1087c:	60e3      	str	r3, [r4, #12]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
   1087e:	9b08      	ldr	r3, [sp, #32]
   10880:	6123      	str	r3, [r4, #16]
	user_op->params.update.lazy = lazy;
   10882:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   10886:	82a3      	strh	r3, [r4, #20]
	user_op->params.update.force = force;
   10888:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   1088c:	75a3      	strb	r3, [r4, #22]
	user_op->params.update.must_expire = must_expire;
   1088e:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
   10892:	75e3      	strb	r3, [r4, #23]
	user_op->status = TICKER_STATUS_BUSY;
   10894:	2302      	movs	r3, #2
   10896:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->fp_op_func = fp_op_func;
   10898:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1089a:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
   1089c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	user_op->id = ticker_id;
   1089e:	7061      	strb	r1, [r4, #1]
	user_op->op_context = op_context;
   108a0:	6323      	str	r3, [r4, #48]	; 0x30
	user->last = last;
   108a2:	f88c 5003 	strb.w	r5, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   108a6:	e9d8 3508 	ldrd	r3, r5, [r8, #32]
   108aa:	4798      	blx	r3
   108ac:	4643      	mov	r3, r8
   108ae:	2200      	movs	r2, #0
   108b0:	2104      	movs	r1, #4
   108b2:	47a8      	blx	r5
	return user_op->status;
   108b4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   108b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   108ba:	2001      	movs	r0, #1
   108bc:	e7fb      	b.n	108b6 <ticker_update_ext+0x8a>
   108be:	bf00      	nop
   108c0:	20002704 	.word	0x20002704

000108c4 <ticker_stop>:
{
   108c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   108c8:	4c1a      	ldr	r4, [pc, #104]	; (10934 <ticker_stop+0x70>)
{
   108ca:	4605      	mov	r5, r0
   108cc:	4608      	mov	r0, r1
   108ce:	4611      	mov	r1, r2
	struct ticker_instance *instance = &_instance[instance_index];
   108d0:	222c      	movs	r2, #44	; 0x2c
   108d2:	fb05 4902 	mla	r9, r5, r2, r4
	user = &instance->users[user_id];
   108d6:	f8d9 2004 	ldr.w	r2, [r9, #4]
   108da:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
	if (last >= user->count_user_op) {
   108de:	f812 2030 	ldrb.w	r2, [r2, r0, lsl #3]
	last = user->last + 1;
   108e2:	78fe      	ldrb	r6, [r7, #3]
   108e4:	1c74      	adds	r4, r6, #1
   108e6:	b2e4      	uxtb	r4, r4
		last = 0U;
   108e8:	42a2      	cmp	r2, r4
   108ea:	bf98      	it	ls
   108ec:	2400      	movls	r4, #0
	if (last == user->first) {
   108ee:	787a      	ldrb	r2, [r7, #1]
   108f0:	42a2      	cmp	r2, r4
   108f2:	d01d      	beq.n	10930 <ticker_stop+0x6c>
	user_op = &user->user_op[user->last];
   108f4:	2234      	movs	r2, #52	; 0x34
   108f6:	fb16 f602 	smulbb	r6, r6, r2
   108fa:	687a      	ldr	r2, [r7, #4]
	user_op->op = TICKER_USER_OP_TYPE_STOP;
   108fc:	f04f 0c07 	mov.w	ip, #7
   10900:	f802 c006 	strb.w	ip, [r2, r6]
	user_op = &user->user_op[user->last];
   10904:	eb02 0806 	add.w	r8, r2, r6
	user_op->status = TICKER_STATUS_BUSY;
   10908:	2202      	movs	r2, #2
	user_op->fp_op_func = fp_op_func;
   1090a:	e9c8 230a 	strd	r2, r3, [r8, #40]	; 0x28
	user_op->op_context = op_context;
   1090e:	9b08      	ldr	r3, [sp, #32]
	user_op->id = ticker_id;
   10910:	f888 1001 	strb.w	r1, [r8, #1]
	user_op->op_context = op_context;
   10914:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
	user->last = last;
   10918:	70fc      	strb	r4, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   1091a:	e9d9 3408 	ldrd	r3, r4, [r9, #32]
   1091e:	4798      	blx	r3
   10920:	464b      	mov	r3, r9
   10922:	2200      	movs	r2, #0
   10924:	2104      	movs	r1, #4
   10926:	47a0      	blx	r4
	return user_op->status;
   10928:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
}
   1092c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
   10930:	2001      	movs	r0, #1
   10932:	e7fb      	b.n	1092c <ticker_stop+0x68>
   10934:	20002704 	.word	0x20002704

00010938 <ll_addr_set>:

static uint8_t pub_addr[BDADDR_SIZE];
static uint8_t rnd_addr[BDADDR_SIZE];

uint8_t ll_addr_set(uint8_t addr_type, uint8_t const *const bdaddr)
{
   10938:	b570      	push	{r4, r5, r6, lr}
   1093a:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_BROADCASTER)) {
#if defined(CONFIG_BT_CTLR_ADV_EXT)
		if (ull_adv_is_enabled(0) && !ll_adv_cmds_is_ext()) {
#else /* !CONFIG_BT_CTLR_ADV_EXT */
		if (ull_adv_is_enabled(0)) {
   1093c:	2000      	movs	r0, #0
{
   1093e:	460d      	mov	r5, r1
		if (ull_adv_is_enabled(0)) {
   10940:	f013 fb88 	bl	24054 <ull_adv_is_enabled>
   10944:	b110      	cbz	r0, 1094c <ll_addr_set+0x14>
#endif /* !CONFIG_BT_CTLR_ADV_EXT */
			return BT_HCI_ERR_CMD_DISALLOWED;
   10946:	240c      	movs	r4, #12
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
}
   10948:	4620      	mov	r0, r4
   1094a:	bd70      	pop	{r4, r5, r6, pc}
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
   1094c:	f013 fc77 	bl	2423e <ull_scan_is_enabled>
	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
   10950:	f010 0606 	ands.w	r6, r0, #6
   10954:	d1f7      	bne.n	10946 <ll_addr_set+0xe>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
   10956:	2206      	movs	r2, #6
   10958:	4629      	mov	r1, r5
	if (addr_type) {
   1095a:	b124      	cbz	r4, 10966 <ll_addr_set+0x2e>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
   1095c:	4804      	ldr	r0, [pc, #16]	; (10970 <ll_addr_set+0x38>)
   1095e:	f00d fb68 	bl	1e032 <memcpy>
	return 0;
   10962:	4634      	mov	r4, r6
   10964:	e7f0      	b.n	10948 <ll_addr_set+0x10>
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
   10966:	4803      	ldr	r0, [pc, #12]	; (10974 <ll_addr_set+0x3c>)
   10968:	f00d fb63 	bl	1e032 <memcpy>
   1096c:	e7ec      	b.n	10948 <ll_addr_set+0x10>
   1096e:	bf00      	nop
   10970:	200040c4 	.word	0x200040c4
   10974:	200040be 	.word	0x200040be

00010978 <ll_addr_get>:

uint8_t *ll_addr_get(uint8_t addr_type)
{
	if (addr_type > BT_ADDR_LE_RANDOM) {
   10978:	2801      	cmp	r0, #1
{
   1097a:	4602      	mov	r2, r0
	if (addr_type > BT_ADDR_LE_RANDOM) {
   1097c:	d805      	bhi.n	1098a <ll_addr_get+0x12>
		return NULL;
	}

	if (addr_type) {
		return rnd_addr;
   1097e:	4b04      	ldr	r3, [pc, #16]	; (10990 <ll_addr_get+0x18>)
   10980:	4804      	ldr	r0, [pc, #16]	; (10994 <ll_addr_get+0x1c>)
   10982:	2a00      	cmp	r2, #0
   10984:	bf08      	it	eq
   10986:	4618      	moveq	r0, r3
   10988:	4770      	bx	lr
		return NULL;
   1098a:	2000      	movs	r0, #0
	}

	return pub_addr;
}
   1098c:	4770      	bx	lr
   1098e:	bf00      	nop
   10990:	200040be 	.word	0x200040be
   10994:	200040c4 	.word	0x200040c4

00010998 <hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int hci_driver_init(const struct device *unused)
{
   10998:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
   1099a:	4802      	ldr	r0, [pc, #8]	; (109a4 <hci_driver_init+0xc>)
   1099c:	f7f6 f890 	bl	6ac0 <bt_hci_driver_register>

	return 0;
}
   109a0:	2000      	movs	r0, #0
   109a2:	bd08      	pop	{r3, pc}
   109a4:	00026ff4 	.word	0x00026ff4

000109a8 <hci_driver_send>:
	if (!buf->len) {
   109a8:	8983      	ldrh	r3, [r0, #12]
{
   109aa:	b537      	push	{r0, r1, r2, r4, r5, lr}
   109ac:	4605      	mov	r5, r0
	if (!buf->len) {
   109ae:	b33b      	cbz	r3, 10a00 <hci_driver_send+0x58>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   109b0:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   109b2:	b18b      	cbz	r3, 109d8 <hci_driver_send+0x30>
   109b4:	2b02      	cmp	r3, #2
   109b6:	d123      	bne.n	10a00 <hci_driver_send+0x58>
	err = hci_acl_handle(buf, &evt);
   109b8:	a901      	add	r1, sp, #4
   109ba:	f000 fc77 	bl	112ac <hci_acl_handle>
   109be:	4604      	mov	r4, r0
	if (evt) {
   109c0:	9801      	ldr	r0, [sp, #4]
   109c2:	b108      	cbz	r0, 109c8 <hci_driver_send+0x20>
		bt_recv_prio(evt);
   109c4:	f7f6 f85e 	bl	6a84 <bt_recv_prio>
	if (!err) {
   109c8:	b91c      	cbnz	r4, 109d2 <hci_driver_send+0x2a>
		net_buf_unref(buf);
   109ca:	4628      	mov	r0, r5
   109cc:	f006 fb54 	bl	17078 <net_buf_unref>
   109d0:	2400      	movs	r4, #0
}
   109d2:	4620      	mov	r0, r4
   109d4:	b003      	add	sp, #12
   109d6:	bd30      	pop	{r4, r5, pc}
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   109d8:	a901      	add	r1, sp, #4
	struct node_rx_pdu *node_rx = NULL;
   109da:	9301      	str	r3, [sp, #4]
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   109dc:	f000 f9fc 	bl	10dd8 <hci_cmd_handle>
	if (evt) {
   109e0:	2800      	cmp	r0, #0
   109e2:	d0f2      	beq.n	109ca <hci_driver_send+0x22>
		bt_recv_prio(evt);
   109e4:	f7f6 f84e 	bl	6a84 <bt_recv_prio>
		if (node_rx) {
   109e8:	9c01      	ldr	r4, [sp, #4]
   109ea:	2c00      	cmp	r4, #0
   109ec:	d0ed      	beq.n	109ca <hci_driver_send+0x22>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   109ee:	4620      	mov	r0, r4
   109f0:	f000 feb2 	bl	11758 <hci_get_class>
   109f4:	7160      	strb	r0, [r4, #5]
			k_fifo_put(&recv_fifo, node_rx);
   109f6:	9901      	ldr	r1, [sp, #4]
   109f8:	4803      	ldr	r0, [pc, #12]	; (10a08 <hci_driver_send+0x60>)
   109fa:	f015 f842 	bl	25a82 <k_queue_append>
	if (!err) {
   109fe:	e7e4      	b.n	109ca <hci_driver_send+0x22>
	switch (type) {
   10a00:	f06f 0415 	mvn.w	r4, #21
   10a04:	e7e5      	b.n	109d2 <hci_driver_send+0x2a>
   10a06:	bf00      	nop
   10a08:	20000f60 	.word	0x20000f60

00010a0c <recv_thread>:
{
   10a0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return z_impl_k_queue_get(queue, timeout);
   10a0e:	4e2f      	ldr	r6, [pc, #188]	; (10acc <recv_thread+0xc0>)
	struct net_buf *buf = NULL;
   10a10:	2700      	movs	r7, #0
   10a12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   10a16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10a1a:	4630      	mov	r0, r6
   10a1c:	f00a fc40 	bl	1b2a0 <z_impl_k_queue_get>
		if (node_rx && !buf) {
   10a20:	2800      	cmp	r0, #0
   10a22:	d0f6      	beq.n	10a12 <recv_thread+0x6>
	uint8_t class = node_rx->hdr.user_meta;
   10a24:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
   10a26:	9001      	str	r0, [sp, #4]
	switch (class) {
   10a28:	2b04      	cmp	r3, #4
   10a2a:	d826      	bhi.n	10a7a <recv_thread+0x6e>
   10a2c:	b33b      	cbz	r3, 10a7e <recv_thread+0x72>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
   10a2e:	2b02      	cmp	r3, #2
   10a30:	d134      	bne.n	10a9c <recv_thread+0x90>
			buf = bt_buf_get_evt(BT_HCI_EVT_UNKNOWN, true,
   10a32:	2200      	movs	r2, #0
   10a34:	2300      	movs	r3, #0
   10a36:	2101      	movs	r1, #1
   10a38:	2000      	movs	r0, #0
   10a3a:	f7f5 fbcd 	bl	61d8 <bt_buf_get_evt>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   10a3e:	4604      	mov	r4, r0
		if (buf) {
   10a40:	b118      	cbz	r0, 10a4a <recv_thread+0x3e>
			hci_evt_encode(node_rx, buf);
   10a42:	4601      	mov	r1, r0
   10a44:	9801      	ldr	r0, [sp, #4]
   10a46:	f000 fcf3 	bl	11430 <hci_evt_encode>
	node_rx->hdr.next = NULL;
   10a4a:	9b01      	ldr	r3, [sp, #4]
	ll_rx_mem_release((void **)&node_rx);
   10a4c:	a801      	add	r0, sp, #4
	node_rx->hdr.next = NULL;
   10a4e:	601f      	str	r7, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   10a50:	f001 f8f6 	bl	11c40 <ll_rx_mem_release>
		while (buf) {
   10a54:	2c00      	cmp	r4, #0
   10a56:	d0dc      	beq.n	10a12 <recv_thread+0x6>
			frag = net_buf_ref(buf);
   10a58:	4620      	mov	r0, r4
   10a5a:	f014 f924 	bl	24ca6 <net_buf_ref>
			buf = net_buf_frag_del(NULL, buf);
   10a5e:	4621      	mov	r1, r4
			frag = net_buf_ref(buf);
   10a60:	4605      	mov	r5, r0
			buf = net_buf_frag_del(NULL, buf);
   10a62:	2000      	movs	r0, #0
   10a64:	f014 f945 	bl	24cf2 <net_buf_frag_del>
			if (frag->len) {
   10a68:	89ab      	ldrh	r3, [r5, #12]
			buf = net_buf_frag_del(NULL, buf);
   10a6a:	4604      	mov	r4, r0
				bt_recv(frag);
   10a6c:	4628      	mov	r0, r5
			if (frag->len) {
   10a6e:	b353      	cbz	r3, 10ac6 <recv_thread+0xba>
				bt_recv(frag);
   10a70:	f7f5 ff84 	bl	697c <bt_recv>
	z_impl_k_yield();
   10a74:	f00b f8a4 	bl	1bbc0 <z_impl_k_yield>
}
   10a78:	e7ec      	b.n	10a54 <recv_thread+0x48>
	switch (class) {
   10a7a:	2b05      	cmp	r3, #5
   10a7c:	d016      	beq.n	10aac <recv_thread+0xa0>
		LL_ASSERT(0);
   10a7e:	4a14      	ldr	r2, [pc, #80]	; (10ad0 <recv_thread+0xc4>)
   10a80:	4914      	ldr	r1, [pc, #80]	; (10ad4 <recv_thread+0xc8>)
   10a82:	4815      	ldr	r0, [pc, #84]	; (10ad8 <recv_thread+0xcc>)
   10a84:	f44f 73cd 	mov.w	r3, #410	; 0x19a
   10a88:	f00b fc1e 	bl	1c2c8 <printk>
   10a8c:	4040      	eors	r0, r0
   10a8e:	f380 8811 	msr	BASEPRI, r0
   10a92:	f04f 0003 	mov.w	r0, #3
   10a96:	df02      	svc	2
	struct net_buf *buf = NULL;
   10a98:	2400      	movs	r4, #0
		break;
   10a9a:	e7d6      	b.n	10a4a <recv_thread+0x3e>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   10a9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   10aa0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10aa4:	2001      	movs	r0, #1
   10aa6:	f7f5 fb6d 	bl	6184 <bt_buf_get_rx>
   10aaa:	e7c8      	b.n	10a3e <recv_thread+0x32>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   10aac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   10ab0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10ab4:	2003      	movs	r0, #3
   10ab6:	f7f5 fb65 	bl	6184 <bt_buf_get_rx>
   10aba:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
   10abc:	4601      	mov	r1, r0
   10abe:	9801      	ldr	r0, [sp, #4]
   10ac0:	f000 fc7c 	bl	113bc <hci_acl_encode>
		break;
   10ac4:	e7c1      	b.n	10a4a <recv_thread+0x3e>
				net_buf_unref(frag);
   10ac6:	f006 fad7 	bl	17078 <net_buf_unref>
   10aca:	e7d3      	b.n	10a74 <recv_thread+0x68>
   10acc:	20000f60 	.word	0x20000f60
   10ad0:	0002779c 	.word	0x0002779c
   10ad4:	0002826c 	.word	0x0002826c
   10ad8:	00027514 	.word	0x00027514

00010adc <prio_recv_thread>:
{
   10adc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
   10ae0:	4e2b      	ldr	r6, [pc, #172]	; (10b90 <prio_recv_thread+0xb4>)
				k_fifo_put(&recv_fifo, node_rx);
   10ae2:	4f2c      	ldr	r7, [pc, #176]	; (10b94 <prio_recv_thread+0xb8>)
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   10ae4:	f10d 0102 	add.w	r1, sp, #2
   10ae8:	a801      	add	r0, sp, #4
   10aea:	f000 ffa7 	bl	11a3c <ll_rx_get>
   10aee:	4604      	mov	r4, r0
   10af0:	2800      	cmp	r0, #0
   10af2:	d139      	bne.n	10b68 <prio_recv_thread+0x8c>
		if (node_rx) {
   10af4:	9b01      	ldr	r3, [sp, #4]
   10af6:	b37b      	cbz	r3, 10b58 <prio_recv_thread+0x7c>
			ll_rx_dequeue();
   10af8:	f000 fffa 	bl	11af0 <ll_rx_dequeue>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   10afc:	9d01      	ldr	r5, [sp, #4]
   10afe:	4628      	mov	r0, r5
   10b00:	f000 fe2a 	bl	11758 <hci_get_class>
   10b04:	7168      	strb	r0, [r5, #5]
			buf = process_prio_evt(node_rx, &evt_flags);
   10b06:	9d01      	ldr	r5, [sp, #4]
	if (node_rx->hdr.user_meta == HCI_CLASS_EVT_CONNECTION) {
   10b08:	796b      	ldrb	r3, [r5, #5]
   10b0a:	2b03      	cmp	r3, #3
   10b0c:	d11d      	bne.n	10b4a <prio_recv_thread+0x6e>
		if (node_rx->hdr.type == NODE_RX_TYPE_TERMINATE) {
   10b0e:	792b      	ldrb	r3, [r5, #4]
   10b10:	2b17      	cmp	r3, #23
   10b12:	d11a      	bne.n	10b4a <prio_recv_thread+0x6e>
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   10b14:	4621      	mov	r1, r4
   10b16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   10b1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10b1e:	2005      	movs	r0, #5
		handle = node_rx->hdr.handle;
   10b20:	f8b5 8006 	ldrh.w	r8, [r5, #6]
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   10b24:	f7f5 fb58 	bl	61d8 <bt_buf_get_evt>
			hci_disconn_complete_encode(pdu_data, handle, buf);
   10b28:	4641      	mov	r1, r8
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   10b2a:	4604      	mov	r4, r0
			hci_disconn_complete_encode(pdu_data, handle, buf);
   10b2c:	4602      	mov	r2, r0
   10b2e:	f105 001c 	add.w	r0, r5, #28
   10b32:	f000 fc1d 	bl	11370 <hci_disconn_complete_encode>
			hci_disconn_complete_process(handle);
   10b36:	4640      	mov	r0, r8
   10b38:	f000 fc38 	bl	113ac <hci_disconn_complete_process>
			if (buf) {
   10b3c:	b12c      	cbz	r4, 10b4a <prio_recv_thread+0x6e>
				bt_recv_prio(buf);
   10b3e:	4620      	mov	r0, r4
   10b40:	f7f5 ffa0 	bl	6a84 <bt_recv_prio>
					net_buf_unref(buf);
   10b44:	4620      	mov	r0, r4
   10b46:	f006 fa97 	bl	17078 <net_buf_unref>
				k_fifo_put(&recv_fifo, node_rx);
   10b4a:	9901      	ldr	r1, [sp, #4]
   10b4c:	4638      	mov	r0, r7
   10b4e:	f014 ff98 	bl	25a82 <k_queue_append>
		if (iso_received || node_rx) {
   10b52:	9b01      	ldr	r3, [sp, #4]
   10b54:	2b00      	cmp	r3, #0
   10b56:	d1c5      	bne.n	10ae4 <prio_recv_thread+0x8>
   10b58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   10b5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10b60:	4630      	mov	r0, r6
   10b62:	f00a fbf7 	bl	1b354 <z_impl_k_sem_take>
		BT_DBG("sem taken");
   10b66:	e7bd      	b.n	10ae4 <prio_recv_thread+0x8>
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   10b68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10b6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   10b70:	2100      	movs	r1, #0
   10b72:	2013      	movs	r0, #19
   10b74:	f7f5 fb30 	bl	61d8 <bt_buf_get_evt>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   10b78:	f8bd 1002 	ldrh.w	r1, [sp, #2]
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   10b7c:	4605      	mov	r5, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   10b7e:	4622      	mov	r2, r4
   10b80:	f013 f990 	bl	23ea4 <hci_num_cmplt_encode>
			bt_recv_prio(buf);
   10b84:	4628      	mov	r0, r5
   10b86:	f7f5 ff7d 	bl	6a84 <bt_recv_prio>
	z_impl_k_yield();
   10b8a:	f00b f819 	bl	1bbc0 <z_impl_k_yield>
   10b8e:	e7a9      	b.n	10ae4 <prio_recv_thread+0x8>
   10b90:	20000f18 	.word	0x20000f18
   10b94:	20000f60 	.word	0x20000f60

00010b98 <hci_driver_open>:
{
   10b98:	b5d0      	push	{r4, r6, r7, lr}
	err = ll_init(&sem_prio_recv);
   10b9a:	481a      	ldr	r0, [pc, #104]	; (10c04 <hci_driver_open+0x6c>)
{
   10b9c:	b088      	sub	sp, #32
	err = ll_init(&sem_prio_recv);
   10b9e:	f001 fcaf 	bl	12500 <ll_init>
	if (err) {
   10ba2:	4604      	mov	r4, r0
   10ba4:	bb58      	cbnz	r0, 10bfe <hci_driver_open+0x66>
	hci_init(NULL);
   10ba6:	f000 fded 	bl	11784 <hci_init>
	k_thread_create(&prio_recv_thread_data, prio_recv_thread_stack,
   10baa:	2600      	movs	r6, #0
   10bac:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   10bae:	f06f 0309 	mvn.w	r3, #9
   10bb2:	e9cd 4302 	strd	r4, r3, [sp, #8]
   10bb6:	e9cd 6706 	strd	r6, r7, [sp, #24]
   10bba:	e9cd 4400 	strd	r4, r4, [sp]
   10bbe:	4b12      	ldr	r3, [pc, #72]	; (10c08 <hci_driver_open+0x70>)
   10bc0:	4912      	ldr	r1, [pc, #72]	; (10c0c <hci_driver_open+0x74>)
   10bc2:	9404      	str	r4, [sp, #16]
   10bc4:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
   10bc8:	4811      	ldr	r0, [pc, #68]	; (10c10 <hci_driver_open+0x78>)
   10bca:	f00a fa0b 	bl	1afe4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   10bce:	4911      	ldr	r1, [pc, #68]	; (10c14 <hci_driver_open+0x7c>)
   10bd0:	480f      	ldr	r0, [pc, #60]	; (10c10 <hci_driver_open+0x78>)
   10bd2:	f014 fe9f 	bl	25914 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   10bd6:	f06f 0307 	mvn.w	r3, #7
   10bda:	e9cd 4302 	strd	r4, r3, [sp, #8]
   10bde:	e9cd 6706 	strd	r6, r7, [sp, #24]
   10be2:	e9cd 4400 	strd	r4, r4, [sp]
   10be6:	4b0c      	ldr	r3, [pc, #48]	; (10c18 <hci_driver_open+0x80>)
   10be8:	490c      	ldr	r1, [pc, #48]	; (10c1c <hci_driver_open+0x84>)
   10bea:	9404      	str	r4, [sp, #16]
   10bec:	f44f 6200 	mov.w	r2, #2048	; 0x800
   10bf0:	480b      	ldr	r0, [pc, #44]	; (10c20 <hci_driver_open+0x88>)
   10bf2:	f00a f9f7 	bl	1afe4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   10bf6:	490b      	ldr	r1, [pc, #44]	; (10c24 <hci_driver_open+0x8c>)
   10bf8:	4809      	ldr	r0, [pc, #36]	; (10c20 <hci_driver_open+0x88>)
   10bfa:	f014 fe8b 	bl	25914 <z_impl_k_thread_name_set>
}
   10bfe:	4620      	mov	r0, r4
   10c00:	b008      	add	sp, #32
   10c02:	bdd0      	pop	{r4, r6, r7, pc}
   10c04:	20000f18 	.word	0x20000f18
   10c08:	00010add 	.word	0x00010add
   10c0c:	20004fc0 	.word	0x20004fc0
   10c10:	20001bf0 	.word	0x20001bf0
   10c14:	000277dc 	.word	0x000277dc
   10c18:	00010a0d 	.word	0x00010a0d
   10c1c:	200051a0 	.word	0x200051a0
   10c20:	20001c70 	.word	0x20001c70
   10c24:	000277e6 	.word	0x000277e6

00010c28 <cmd_complete_status>:
{
	return bt_hci_cmd_status_create(_opcode, status);
}

static struct net_buf *cmd_complete_status(uint8_t status)
{
   10c28:	b538      	push	{r3, r4, r5, lr}
	struct net_buf *buf;
	struct bt_hci_evt_cc_status *ccst;

	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   10c2a:	4b07      	ldr	r3, [pc, #28]	; (10c48 <cmd_complete_status+0x20>)
{
   10c2c:	4605      	mov	r5, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   10c2e:	2101      	movs	r1, #1
   10c30:	8818      	ldrh	r0, [r3, #0]
   10c32:	f00d fe8f 	bl	1e954 <bt_hci_cmd_complete_create>
	return net_buf_simple_add(&buf->b, len);
   10c36:	2101      	movs	r1, #1
   10c38:	4604      	mov	r4, r0
   10c3a:	3008      	adds	r0, #8
   10c3c:	f014 f86b 	bl	24d16 <net_buf_simple_add>
	ccst = net_buf_add(buf, sizeof(*ccst));
	ccst->status = status;
   10c40:	7005      	strb	r5, [r0, #0]

	return buf;
}
   10c42:	4620      	mov	r0, r4
   10c44:	bd38      	pop	{r3, r4, r5, pc}
   10c46:	bf00      	nop
   10c48:	20003fec 	.word	0x20003fec

00010c4c <cmd_status>:
	return bt_hci_cmd_status_create(_opcode, status);
   10c4c:	4b02      	ldr	r3, [pc, #8]	; (10c58 <cmd_status+0xc>)
{
   10c4e:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   10c50:	8818      	ldrh	r0, [r3, #0]
   10c52:	f00d be91 	b.w	1e978 <bt_hci_cmd_status_create>
   10c56:	bf00      	nop
   10c58:	20003fec 	.word	0x20003fec

00010c5c <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(uint8_t status, struct pdu_data *pdu_data,
				    uint16_t handle, struct net_buf *buf)
{
   10c5c:	b570      	push	{r4, r5, r6, lr}
   10c5e:	4604      	mov	r4, r0
   10c60:	4618      	mov	r0, r3
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   10c62:	4b0f      	ldr	r3, [pc, #60]	; (10ca0 <le_remote_feat_complete+0x44>)
   10c64:	685b      	ldr	r3, [r3, #4]
{
   10c66:	4616      	mov	r6, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   10c68:	009a      	lsls	r2, r3, #2
{
   10c6a:	460d      	mov	r5, r1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   10c6c:	d517      	bpl.n	10c9e <le_remote_feat_complete+0x42>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
   10c6e:	4b0d      	ldr	r3, [pc, #52]	; (10ca4 <le_remote_feat_complete+0x48>)
   10c70:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   10c72:	071b      	lsls	r3, r3, #28
   10c74:	d513      	bpl.n	10c9e <le_remote_feat_complete+0x42>
		return;
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
   10c76:	220b      	movs	r2, #11
   10c78:	2104      	movs	r1, #4
   10c7a:	f013 f8f7 	bl	23e6c <meta_evt>

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
	if (!status) {
		memcpy(&sep->features[0],
   10c7e:	2208      	movs	r2, #8
	sep->status = status;
   10c80:	7004      	strb	r4, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   10c82:	f8a0 6001 	strh.w	r6, [r0, #1]
	if (!status) {
   10c86:	3003      	adds	r0, #3
   10c88:	b924      	cbnz	r4, 10c94 <le_remote_feat_complete+0x38>
		memcpy(&sep->features[0],
   10c8a:	1d29      	adds	r1, r5, #4
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
   10c8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(&sep->features[0],
   10c90:	f00d b9cf 	b.w	1e032 <memcpy>
}
   10c94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
   10c98:	2100      	movs	r1, #0
   10c9a:	f00d b9d5 	b.w	1e048 <memset>
}
   10c9e:	bd70      	pop	{r4, r5, r6, pc}
   10ca0:	20000268 	.word	0x20000268
   10ca4:	20000270 	.word	0x20000270

00010ca8 <hci_cmd_complete>:
{
   10ca8:	b538      	push	{r3, r4, r5, lr}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   10caa:	4b06      	ldr	r3, [pc, #24]	; (10cc4 <hci_cmd_complete+0x1c>)
{
   10cac:	4605      	mov	r5, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   10cae:	8818      	ldrh	r0, [r3, #0]
{
   10cb0:	460c      	mov	r4, r1
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   10cb2:	f00d fe4f 	bl	1e954 <bt_hci_cmd_complete_create>
   10cb6:	4621      	mov	r1, r4
   10cb8:	6028      	str	r0, [r5, #0]
}
   10cba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   10cbe:	3008      	adds	r0, #8
   10cc0:	f014 b829 	b.w	24d16 <net_buf_simple_add>
   10cc4:	20003fec 	.word	0x20003fec

00010cc8 <hci_vendor_cmd_handle_common>:
{
   10cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (ocf) {
   10cca:	3801      	subs	r0, #1
{
   10ccc:	b087      	sub	sp, #28
   10cce:	4614      	mov	r4, r2
	switch (ocf) {
   10cd0:	2809      	cmp	r0, #9
   10cd2:	d87c      	bhi.n	10dce <hci_vendor_cmd_handle_common+0x106>
   10cd4:	e8df f000 	tbb	[pc, r0]
   10cd8:	7b321b05 	.word	0x7b321b05
   10cdc:	3e7b597b 	.word	0x3e7b597b
   10ce0:	6f62      	.short	0x6f62
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10ce2:	210d      	movs	r1, #13
   10ce4:	4610      	mov	r0, r2
   10ce6:	f7ff ffdf 	bl	10ca8 <hci_cmd_complete>
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   10cea:	2302      	movs	r3, #2
	rp->status = 0x00;
   10cec:	2100      	movs	r1, #0
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   10cee:	7043      	strb	r3, [r0, #1]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
   10cf0:	70c3      	strb	r3, [r0, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
   10cf2:	2303      	movs	r3, #3
	rp->status = 0x00;
   10cf4:	7001      	strb	r1, [r0, #0]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   10cf6:	7081      	strb	r1, [r0, #2]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
   10cf8:	7101      	strb	r1, [r0, #4]
	rp->fw_variant = 0U;
   10cfa:	7141      	strb	r1, [r0, #5]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
   10cfc:	7183      	strb	r3, [r0, #6]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   10cfe:	71c1      	strb	r1, [r0, #7]
   10d00:	7201      	strb	r1, [r0, #8]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
   10d02:	7241      	strb	r1, [r0, #9]
   10d04:	7281      	strb	r1, [r0, #10]
   10d06:	72c1      	strb	r1, [r0, #11]
   10d08:	7301      	strb	r1, [r0, #12]
	return 0;
   10d0a:	2400      	movs	r4, #0
}
   10d0c:	e013      	b.n	10d36 <hci_vendor_cmd_handle_common+0x6e>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10d0e:	2141      	movs	r1, #65	; 0x41
   10d10:	4610      	mov	r0, r2
   10d12:	f7ff ffc9 	bl	10ca8 <hci_cmd_complete>
	rp->status = 0x00;
   10d16:	2400      	movs	r4, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10d18:	4605      	mov	r5, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   10d1a:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   10d1c:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   10d20:	4621      	mov	r1, r4
   10d22:	f00d f991 	bl	1e048 <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
   10d26:	786b      	ldrb	r3, [r5, #1]
   10d28:	f063 0358 	orn	r3, r3, #88	; 0x58
   10d2c:	706b      	strb	r3, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   10d2e:	78ab      	ldrb	r3, [r5, #2]
   10d30:	f043 0303 	orr.w	r3, r3, #3
   10d34:	70ab      	strb	r3, [r5, #2]
}
   10d36:	4620      	mov	r0, r4
   10d38:	b007      	add	sp, #28
   10d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10d3c:	2109      	movs	r1, #9
   10d3e:	4610      	mov	r0, r2
   10d40:	f7ff ffb2 	bl	10ca8 <hci_cmd_complete>
	rp->status = 0x00;
   10d44:	2400      	movs	r4, #0
   10d46:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   10d4a:	2208      	movs	r2, #8
   10d4c:	4621      	mov	r1, r4
   10d4e:	f00d f97b 	bl	1e048 <memset>
}
   10d52:	e7f0      	b.n	10d36 <hci_vendor_cmd_handle_common+0x6e>
	const char build_info[] = HCI_VS_BUILD_INFO;
   10d54:	4b1f      	ldr	r3, [pc, #124]	; (10dd4 <hci_vendor_cmd_handle_common+0x10c>)
   10d56:	aa01      	add	r2, sp, #4
   10d58:	f103 0710 	add.w	r7, r3, #16
   10d5c:	4616      	mov	r6, r2
   10d5e:	6818      	ldr	r0, [r3, #0]
   10d60:	6859      	ldr	r1, [r3, #4]
   10d62:	4615      	mov	r5, r2
   10d64:	c503      	stmia	r5!, {r0, r1}
   10d66:	3308      	adds	r3, #8
   10d68:	42bb      	cmp	r3, r7
   10d6a:	462a      	mov	r2, r5
   10d6c:	d1f7      	bne.n	10d5e <hci_vendor_cmd_handle_common+0x96>
   10d6e:	781b      	ldrb	r3, [r3, #0]
   10d70:	702b      	strb	r3, [r5, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
   10d72:	2112      	movs	r1, #18
   10d74:	4620      	mov	r0, r4
   10d76:	f7ff ff97 	bl	10ca8 <hci_cmd_complete>
	rp->status = 0x00;
   10d7a:	2400      	movs	r4, #0
   10d7c:	f800 4b01 	strb.w	r4, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
   10d80:	2211      	movs	r2, #17
   10d82:	4631      	mov	r1, r6
   10d84:	f00d f955 	bl	1e032 <memcpy>
}
   10d88:	e7d5      	b.n	10d36 <hci_vendor_cmd_handle_common+0x6e>
	ll_addr_set(0, &cmd->bdaddr.val[0]);
   10d8a:	6889      	ldr	r1, [r1, #8]
   10d8c:	2000      	movs	r0, #0
   10d8e:	f7ff fdd3 	bl	10938 <ll_addr_set>
	*evt = cmd_complete_status(0x00);
   10d92:	2000      	movs	r0, #0
   10d94:	f7ff ff48 	bl	10c28 <cmd_complete_status>
   10d98:	6020      	str	r0, [r4, #0]
   10d9a:	e7b6      	b.n	10d0a <hci_vendor_cmd_handle_common+0x42>
	rp = hci_cmd_complete(evt, sizeof(*rp) +
   10d9c:	2118      	movs	r1, #24
   10d9e:	4610      	mov	r0, r2
   10da0:	f7ff ff82 	bl	10ca8 <hci_cmd_complete>
	rp->status = 0x00;
   10da4:	2400      	movs	r4, #0
	rp = hci_cmd_complete(evt, sizeof(*rp) +
   10da6:	4605      	mov	r5, r0
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   10da8:	2101      	movs	r1, #1
	rp->status = 0x00;
   10daa:	f800 4b02 	strb.w	r4, [r0], #2
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   10dae:	f013 fe87 	bl	24ac0 <hci_vendor_read_static_addr>
   10db2:	7068      	strb	r0, [r5, #1]
}
   10db4:	e7bf      	b.n	10d36 <hci_vendor_cmd_handle_common+0x6e>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10db6:	2121      	movs	r1, #33	; 0x21
   10db8:	4610      	mov	r0, r2
   10dba:	f7ff ff75 	bl	10ca8 <hci_cmd_complete>
	rp->status = 0x00;
   10dbe:	4601      	mov	r1, r0
   10dc0:	2400      	movs	r4, #0
   10dc2:	f801 4b11 	strb.w	r4, [r1], #17
	hci_vendor_read_key_hierarchy_roots(rp->ir, rp->er);
   10dc6:	3001      	adds	r0, #1
   10dc8:	f013 fed0 	bl	24b6c <hci_vendor_read_key_hierarchy_roots>
}
   10dcc:	e7b3      	b.n	10d36 <hci_vendor_cmd_handle_common+0x6e>
	switch (ocf) {
   10dce:	f06f 0415 	mvn.w	r4, #21
   10dd2:	e7b0      	b.n	10d36 <hci_vendor_cmd_handle_common+0x6e>
   10dd4:	000277f7 	.word	0x000277f7

00010dd8 <hci_cmd_handle>:
{
   10dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
   10dda:	b08b      	sub	sp, #44	; 0x2c
	struct net_buf *evt = NULL;
   10ddc:	2300      	movs	r3, #0
   10dde:	9305      	str	r3, [sp, #20]
	if (cmd->len < sizeof(*chdr)) {
   10de0:	8983      	ldrh	r3, [r0, #12]
   10de2:	2b02      	cmp	r3, #2
{
   10de4:	4604      	mov	r4, r0
	if (cmd->len < sizeof(*chdr)) {
   10de6:	d802      	bhi.n	10dee <hci_cmd_handle+0x16>
		return NULL;
   10de8:	2000      	movs	r0, #0
}
   10dea:	b00b      	add	sp, #44	; 0x2c
   10dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   10dee:	2103      	movs	r1, #3
   10df0:	3008      	adds	r0, #8
   10df2:	f014 f813 	bl	24e1c <net_buf_simple_pull_mem>
	if (cmd->len < chdr->param_len) {
   10df6:	89a2      	ldrh	r2, [r4, #12]
   10df8:	7883      	ldrb	r3, [r0, #2]
   10dfa:	429a      	cmp	r2, r3
   10dfc:	d3f4      	bcc.n	10de8 <hci_cmd_handle+0x10>
	_opcode = sys_le16_to_cpu(chdr->opcode);
   10dfe:	8803      	ldrh	r3, [r0, #0]
   10e00:	4ac8      	ldr	r2, [pc, #800]	; (11124 <hci_cmd_handle+0x34c>)
	ocf = BT_OCF(_opcode);
   10e02:	f3c3 0009 	ubfx	r0, r3, #0, #10
	_opcode = sys_le16_to_cpu(chdr->opcode);
   10e06:	8013      	strh	r3, [r2, #0]
	switch (BT_OGF(_opcode)) {
   10e08:	f3c3 2385 	ubfx	r3, r3, #10, #6
   10e0c:	2b08      	cmp	r3, #8
   10e0e:	d80d      	bhi.n	10e2c <hci_cmd_handle+0x54>
   10e10:	b17b      	cbz	r3, 10e32 <hci_cmd_handle+0x5a>
   10e12:	3b01      	subs	r3, #1
   10e14:	2b07      	cmp	r3, #7
   10e16:	d80c      	bhi.n	10e32 <hci_cmd_handle+0x5a>
   10e18:	e8df f013 	tbh	[pc, r3, lsl #1]
   10e1c:	000b000d 	.word	0x000b000d
   10e20:	005d001e 	.word	0x005d001e
   10e24:	000b000b 	.word	0x000b000b
   10e28:	00e4000b 	.word	0x00e4000b
   10e2c:	2b3f      	cmp	r3, #63	; 0x3f
   10e2e:	f000 8234 	beq.w	1129a <hci_cmd_handle+0x4c2>
		evt = cmd_status(BT_HCI_ERR_UNKNOWN_CMD);
   10e32:	2001      	movs	r0, #1
   10e34:	e00d      	b.n	10e52 <hci_cmd_handle+0x7a>
	switch (ocf) {
   10e36:	2806      	cmp	r0, #6
   10e38:	d006      	beq.n	10e48 <hci_cmd_handle+0x70>
   10e3a:	281d      	cmp	r0, #29
   10e3c:	d1f9      	bne.n	10e32 <hci_cmd_handle+0x5a>
	handle = sys_le16_to_cpu(cmd->handle);
   10e3e:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
   10e40:	8818      	ldrh	r0, [r3, #0]
   10e42:	f013 fb27 	bl	24494 <ll_version_ind_send>
	*evt = cmd_status(status);
   10e46:	e004      	b.n	10e52 <hci_cmd_handle+0x7a>
	struct bt_hci_cp_disconnect *cmd = (void *)buf->data;
   10e48:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
   10e4a:	7899      	ldrb	r1, [r3, #2]
   10e4c:	8818      	ldrh	r0, [r3, #0]
   10e4e:	f002 fb5d 	bl	1350c <ll_terminate_ind_send>
		evt = cmd_status(BT_HCI_ERR_UNKNOWN_CMD);
   10e52:	f7ff fefb 	bl	10c4c <cmd_status>
   10e56:	e022      	b.n	10e9e <hci_cmd_handle+0xc6>
	switch (ocf) {
   10e58:	282d      	cmp	r0, #45	; 0x2d
   10e5a:	d029      	beq.n	10eb0 <hci_cmd_handle+0xd8>
   10e5c:	d81a      	bhi.n	10e94 <hci_cmd_handle+0xbc>
   10e5e:	2801      	cmp	r0, #1
   10e60:	d01f      	beq.n	10ea2 <hci_cmd_handle+0xca>
   10e62:	2803      	cmp	r0, #3
   10e64:	d1e5      	bne.n	10e32 <hci_cmd_handle+0x5a>
	event_mask = DEFAULT_EVENT_MASK;
   10e66:	4bb0      	ldr	r3, [pc, #704]	; (11128 <hci_cmd_handle+0x350>)
   10e68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10e6c:	f641 71ff 	movw	r1, #8191	; 0x1fff
   10e70:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   10e74:	4bad      	ldr	r3, [pc, #692]	; (1112c <hci_cmd_handle+0x354>)
   10e76:	201f      	movs	r0, #31
   10e78:	2100      	movs	r1, #0
   10e7a:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
   10e7e:	f001 fbaf 	bl	125e0 <ll_reset>
		*evt = cmd_complete_status(0x00);
   10e82:	2000      	movs	r0, #0
   10e84:	f7ff fed0 	bl	10c28 <cmd_complete_status>
	conn_count = 0U;
   10e88:	4ba9      	ldr	r3, [pc, #676]	; (11130 <hci_cmd_handle+0x358>)
		*evt = cmd_complete_status(0x00);
   10e8a:	9005      	str	r0, [sp, #20]
	conn_count = 0U;
   10e8c:	2200      	movs	r2, #0
   10e8e:	601a      	str	r2, [r3, #0]
	return evt;
   10e90:	9805      	ldr	r0, [sp, #20]
   10e92:	e7aa      	b.n	10dea <hci_cmd_handle+0x12>
	switch (ocf) {
   10e94:	2863      	cmp	r0, #99	; 0x63
   10e96:	d1cc      	bne.n	10e32 <hci_cmd_handle+0x5a>
	*evt = cmd_complete_status(0x00);
   10e98:	2000      	movs	r0, #0
	*evt = cmd_complete_status(status);
   10e9a:	f7ff fec5 	bl	10c28 <cmd_complete_status>
		evt = cmd_status(BT_HCI_ERR_UNKNOWN_CMD);
   10e9e:	9005      	str	r0, [sp, #20]
   10ea0:	e7f6      	b.n	10e90 <hci_cmd_handle+0xb8>
	event_mask = sys_get_le64(cmd->events);
   10ea2:	68a0      	ldr	r0, [r4, #8]
   10ea4:	f012 fffa 	bl	23e9c <sys_get_le64>
   10ea8:	4b9f      	ldr	r3, [pc, #636]	; (11128 <hci_cmd_handle+0x350>)
	le_event_mask = sys_get_le64(cmd->events);
   10eaa:	e9c3 0100 	strd	r0, r1, [r3]
   10eae:	e7f3      	b.n	10e98 <hci_cmd_handle+0xc0>
	struct bt_hci_cp_read_tx_power_level *cmd = (void *)buf->data;
   10eb0:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10eb2:	2104      	movs	r1, #4
   10eb4:	a805      	add	r0, sp, #20
	handle = sys_le16_to_cpu(cmd->handle);
   10eb6:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
   10eb8:	789f      	ldrb	r7, [r3, #2]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10eba:	f7ff fef5 	bl	10ca8 <hci_cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
   10ebe:	b2ae      	uxth	r6, r5
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10ec0:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(BT_HCI_VS_LL_HANDLE_TYPE_CONN,
   10ec2:	1cc3      	adds	r3, r0, #3
   10ec4:	463a      	mov	r2, r7
   10ec6:	4631      	mov	r1, r6
   10ec8:	2002      	movs	r0, #2
   10eca:	f012 ffbc 	bl	23e46 <ll_tx_pwr_lvl_get>
	rp->status = status;
   10ece:	7020      	strb	r0, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
   10ed0:	f8a4 5001 	strh.w	r5, [r4, #1]
	if (err == -EINVAL) {
   10ed4:	e7dc      	b.n	10e90 <hci_cmd_handle+0xb8>
	switch (ocf) {
   10ed6:	3801      	subs	r0, #1
   10ed8:	2808      	cmp	r0, #8
   10eda:	d8aa      	bhi.n	10e32 <hci_cmd_handle+0x5a>
   10edc:	a301      	add	r3, pc, #4	; (adr r3, 10ee4 <hci_cmd_handle+0x10c>)
   10ede:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
   10ee2:	bf00      	nop
   10ee4:	00010f09 	.word	0x00010f09
   10ee8:	00010f33 	.word	0x00010f33
   10eec:	00010fb3 	.word	0x00010fb3
   10ef0:	00010e33 	.word	0x00010e33
   10ef4:	00010e33 	.word	0x00010e33
   10ef8:	00010e33 	.word	0x00010e33
   10efc:	00010e33 	.word	0x00010e33
   10f00:	00010e33 	.word	0x00010e33
   10f04:	00010fcf 	.word	0x00010fcf
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10f08:	2109      	movs	r1, #9
   10f0a:	a805      	add	r0, sp, #20
   10f0c:	f7ff fecc 	bl	10ca8 <hci_cmd_complete>
	rp->status = 0x00;
   10f10:	2300      	movs	r3, #0
   10f12:	7003      	strb	r3, [r0, #0]
	rp->hci_revision = sys_cpu_to_le16(0);
   10f14:	7083      	strb	r3, [r0, #2]
   10f16:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   10f18:	f06f 030e 	mvn.w	r3, #14
	rp->hci_version = LL_VERSION_NUMBER;
   10f1c:	220c      	movs	r2, #12
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   10f1e:	7143      	strb	r3, [r0, #5]
   10f20:	2305      	movs	r3, #5
   10f22:	7183      	strb	r3, [r0, #6]
	rp->hci_version = LL_VERSION_NUMBER;
   10f24:	7042      	strb	r2, [r0, #1]
	rp->lmp_version = LL_VERSION_NUMBER;
   10f26:	7102      	strb	r2, [r0, #4]
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
   10f28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	dst[0] = val;
   10f2c:	71c3      	strb	r3, [r0, #7]
	dst[1] = val >> 8;
   10f2e:	7203      	strb	r3, [r0, #8]
	if (err == -EINVAL) {
   10f30:	e7ae      	b.n	10e90 <hci_cmd_handle+0xb8>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10f32:	2141      	movs	r1, #65	; 0x41
   10f34:	a805      	add	r0, sp, #20
   10f36:	f7ff feb7 	bl	10ca8 <hci_cmd_complete>
	rp->status = 0x00;
   10f3a:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10f3c:	4604      	mov	r4, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   10f3e:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   10f40:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   10f44:	f00d f880 	bl	1e048 <memset>
	rp->commands[5] |= BIT(6) | BIT(7);
   10f48:	79a3      	ldrb	r3, [r4, #6]
	rp->commands[26] |= BIT(6) | BIT(7);
   10f4a:	7ee2      	ldrb	r2, [r4, #27]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
   10f4c:	7ea1      	ldrb	r1, [r4, #26]
	rp->commands[28] |= BIT(3);
   10f4e:	7f60      	ldrb	r0, [r4, #29]
	rp->commands[5] |= BIT(6) | BIT(7);
   10f50:	f063 033f 	orn	r3, r3, #63	; 0x3f
   10f54:	71a3      	strb	r3, [r4, #6]
	rp->commands[10] |= BIT(2);
   10f56:	7ae3      	ldrb	r3, [r4, #11]
   10f58:	f043 0304 	orr.w	r3, r3, #4
   10f5c:	72e3      	strb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
   10f5e:	7be3      	ldrb	r3, [r4, #15]
   10f60:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   10f64:	73e3      	strb	r3, [r4, #15]
	rp->commands[15] |= BIT(1);
   10f66:	7c23      	ldrb	r3, [r4, #16]
   10f68:	f043 0302 	orr.w	r3, r3, #2
   10f6c:	7423      	strb	r3, [r4, #16]
	rp->commands[22] |= BIT(2);
   10f6e:	7de3      	ldrb	r3, [r4, #23]
   10f70:	f043 0304 	orr.w	r3, r3, #4
   10f74:	75e3      	strb	r3, [r4, #23]
	rp->commands[27] |= BIT(0) | BIT(1);
   10f76:	7f23      	ldrb	r3, [r4, #28]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
   10f78:	f063 0308 	orn	r3, r3, #8
   10f7c:	7723      	strb	r3, [r4, #28]
	rp->commands[33] |= BIT(4) | BIT(5);
   10f7e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
	rp->commands[26] |= BIT(2) | BIT(3);
   10f82:	f062 0230 	orn	r2, r2, #48	; 0x30
	rp->commands[33] |= BIT(4) | BIT(5);
   10f86:	f043 0330 	orr.w	r3, r3, #48	; 0x30
	rp->commands[26] |= BIT(2) | BIT(3);
   10f8a:	76e2      	strb	r2, [r4, #27]
	rp->commands[33] |= BIT(4) | BIT(5);
   10f8c:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	rp->commands[0] |= BIT(5);
   10f90:	7862      	ldrb	r2, [r4, #1]
	rp->commands[38] |= BIT(7);
   10f92:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[28] |= BIT(3);
   10f96:	f040 0008 	orr.w	r0, r0, #8
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   10f9a:	f061 0108 	orn	r1, r1, #8
	rp->commands[0] |= BIT(5);
   10f9e:	f042 0220 	orr.w	r2, r2, #32
	rp->commands[38] |= BIT(7);
   10fa2:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[28] |= BIT(3);
   10fa6:	7760      	strb	r0, [r4, #29]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   10fa8:	76a1      	strb	r1, [r4, #26]
	rp->commands[0] |= BIT(5);
   10faa:	7062      	strb	r2, [r4, #1]
	rp->commands[38] |= BIT(7);
   10fac:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	if (err == -EINVAL) {
   10fb0:	e76e      	b.n	10e90 <hci_cmd_handle+0xb8>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10fb2:	2109      	movs	r1, #9
   10fb4:	a805      	add	r0, sp, #20
   10fb6:	f7ff fe77 	bl	10ca8 <hci_cmd_complete>
	rp->status = 0x00;
   10fba:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10fbc:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   10fbe:	2208      	movs	r2, #8
	rp->status = 0x00;
   10fc0:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   10fc4:	f00d f840 	bl	1e048 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
   10fc8:	2360      	movs	r3, #96	; 0x60
   10fca:	7163      	strb	r3, [r4, #5]
	if (err == -EINVAL) {
   10fcc:	e760      	b.n	10e90 <hci_cmd_handle+0xb8>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10fce:	2107      	movs	r1, #7
   10fd0:	a805      	add	r0, sp, #20
   10fd2:	f7ff fe69 	bl	10ca8 <hci_cmd_complete>
   10fd6:	4601      	mov	r1, r0
	rp->status = 0x00;
   10fd8:	2000      	movs	r0, #0
   10fda:	f801 0b01 	strb.w	r0, [r1], #1
	(void)ll_addr_read(0, &rp->bdaddr.val[0]);
   10fde:	f012 ff25 	bl	23e2c <ll_addr_read>
	if (err == -EINVAL) {
   10fe2:	e755      	b.n	10e90 <hci_cmd_handle+0xb8>
	switch (ocf) {
   10fe4:	2821      	cmp	r0, #33	; 0x21
   10fe6:	d84b      	bhi.n	11080 <hci_cmd_handle+0x2a8>
   10fe8:	2800      	cmp	r0, #0
   10fea:	f43f af22 	beq.w	10e32 <hci_cmd_handle+0x5a>
   10fee:	3801      	subs	r0, #1
   10ff0:	2820      	cmp	r0, #32
   10ff2:	f63f af1e 	bhi.w	10e32 <hci_cmd_handle+0x5a>
   10ff6:	a301      	add	r3, pc, #4	; (adr r3, 10ffc <hci_cmd_handle+0x224>)
   10ff8:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
   10ffc:	0001109f 	.word	0x0001109f
   11000:	000110a9 	.word	0x000110a9
   11004:	000110c1 	.word	0x000110c1
   11008:	00010e33 	.word	0x00010e33
   1100c:	000110fd 	.word	0x000110fd
   11010:	000111a7 	.word	0x000111a7
   11014:	000111c3 	.word	0x000111c3
   11018:	000111d3 	.word	0x000111d3
   1101c:	000111df 	.word	0x000111df
   11020:	000111eb 	.word	0x000111eb
   11024:	000111f5 	.word	0x000111f5
   11028:	0001120d 	.word	0x0001120d
   1102c:	00010e33 	.word	0x00010e33
   11030:	00010e33 	.word	0x00010e33
   11034:	00011107 	.word	0x00011107
   11038:	0001111d 	.word	0x0001111d
   1103c:	00011135 	.word	0x00011135
   11040:	0001113d 	.word	0x0001113d
   11044:	00011241 	.word	0x00011241
   11048:	00010e33 	.word	0x00010e33
   1104c:	0001121d 	.word	0x0001121d
   11050:	00011237 	.word	0x00011237
   11054:	00011145 	.word	0x00011145
   11058:	0001116b 	.word	0x0001116b
   1105c:	00010e33 	.word	0x00010e33
   11060:	00010e33 	.word	0x00010e33
   11064:	00010e33 	.word	0x00010e33
   11068:	00011181 	.word	0x00011181
   1106c:	00010e33 	.word	0x00010e33
   11070:	00010e33 	.word	0x00010e33
   11074:	00010e33 	.word	0x00010e33
   11078:	0001125d 	.word	0x0001125d
   1107c:	0001128b 	.word	0x0001128b
   11080:	284b      	cmp	r0, #75	; 0x4b
   11082:	f47f aed6 	bne.w	10e32 <hci_cmd_handle+0x5a>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11086:	2103      	movs	r1, #3
   11088:	a805      	add	r0, sp, #20
   1108a:	f7ff fe0d 	bl	10ca8 <hci_cmd_complete>
	rp->status = 0x00;
   1108e:	4601      	mov	r1, r0
   11090:	2300      	movs	r3, #0
   11092:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
   11096:	3001      	adds	r0, #1
   11098:	f012 fee4 	bl	23e64 <ll_tx_pwr_get>
	if (err == -EINVAL) {
   1109c:	e6f8      	b.n	10e90 <hci_cmd_handle+0xb8>
	le_event_mask = sys_get_le64(cmd->events);
   1109e:	68a0      	ldr	r0, [r4, #8]
   110a0:	f012 fefc 	bl	23e9c <sys_get_le64>
   110a4:	4b21      	ldr	r3, [pc, #132]	; (1112c <hci_cmd_handle+0x354>)
   110a6:	e700      	b.n	10eaa <hci_cmd_handle+0xd2>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   110a8:	2104      	movs	r1, #4
   110aa:	a805      	add	r0, sp, #20
   110ac:	f7ff fdfc 	bl	10ca8 <hci_cmd_complete>
	rp->status = 0x00;
   110b0:	2300      	movs	r3, #0
   110b2:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(LL_LENGTH_OCTETS_TX_MAX);
   110b4:	221b      	movs	r2, #27
   110b6:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = CONFIG_BT_BUF_ACL_TX_COUNT;
   110b8:	2303      	movs	r3, #3
	rp->le_max_len = sys_cpu_to_le16(LL_LENGTH_OCTETS_TX_MAX);
   110ba:	7042      	strb	r2, [r0, #1]
	rp->le_max_num = CONFIG_BT_BUF_ACL_TX_COUNT;
   110bc:	70c3      	strb	r3, [r0, #3]
	if (err == -EINVAL) {
   110be:	e6e7      	b.n	10e90 <hci_cmd_handle+0xb8>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   110c0:	2109      	movs	r1, #9
   110c2:	a805      	add	r0, sp, #20
   110c4:	f7ff fdf0 	bl	10ca8 <hci_cmd_complete>
	rp->status = 0x00;
   110c8:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   110ca:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   110cc:	2208      	movs	r2, #8
	rp->status = 0x00;
   110ce:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   110d2:	f00c ffb9 	bl	1e048 <memset>
	sys_put_le64(ll_feat_get(), rp->features);
   110d6:	f012 ff03 	bl	23ee0 <ll_feat_get>
   110da:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   110de:	7060      	strb	r0, [r4, #1]
	dst[1] = val >> 8;
   110e0:	70a3      	strb	r3, [r4, #2]
	sys_put_le16(val >> 16, &dst[2]);
   110e2:	0c00      	lsrs	r0, r0, #16
	dst[1] = val >> 8;
   110e4:	f3c1 2307 	ubfx	r3, r1, #8, #8
	dst[0] = val;
   110e8:	7161      	strb	r1, [r4, #5]
	sys_put_le16(val >> 16, &dst[2]);
   110ea:	0c09      	lsrs	r1, r1, #16
	dst[0] = val;
   110ec:	70e0      	strb	r0, [r4, #3]
   110ee:	71e1      	strb	r1, [r4, #7]
	dst[1] = val >> 8;
   110f0:	0a00      	lsrs	r0, r0, #8
   110f2:	0a09      	lsrs	r1, r1, #8
   110f4:	7120      	strb	r0, [r4, #4]
   110f6:	71a3      	strb	r3, [r4, #6]
   110f8:	7221      	strb	r1, [r4, #8]
	if (err == -EINVAL) {
   110fa:	e6c9      	b.n	10e90 <hci_cmd_handle+0xb8>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
   110fc:	68a1      	ldr	r1, [r4, #8]
   110fe:	2001      	movs	r0, #1
   11100:	f7ff fc1a 	bl	10938 <ll_addr_set>
	*evt = cmd_complete_status(status);
   11104:	e6c9      	b.n	10e9a <hci_cmd_handle+0xc2>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11106:	2102      	movs	r1, #2
   11108:	a805      	add	r0, sp, #20
   1110a:	f7ff fdcd 	bl	10ca8 <hci_cmd_complete>
	rp->status = 0x00;
   1110e:	2300      	movs	r3, #0
   11110:	7003      	strb	r3, [r0, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11112:	4604      	mov	r4, r0
	rp->fal_size = ll_fal_size_get();
   11114:	f013 fa40 	bl	24598 <ll_fal_size_get>
   11118:	7060      	strb	r0, [r4, #1]
	if (err == -EINVAL) {
   1111a:	e6b9      	b.n	10e90 <hci_cmd_handle+0xb8>
	status = ll_fal_clear();
   1111c:	f003 fa88 	bl	14630 <ll_fal_clear>
	*evt = cmd_complete_status(status);
   11120:	e6bb      	b.n	10e9a <hci_cmd_handle+0xc2>
   11122:	bf00      	nop
   11124:	20003fec 	.word	0x20003fec
   11128:	20000268 	.word	0x20000268
   1112c:	20000270 	.word	0x20000270
   11130:	20002730 	.word	0x20002730
	status = ll_fal_add(&cmd->addr);
   11134:	68a0      	ldr	r0, [r4, #8]
   11136:	f003 fa8d 	bl	14654 <ll_fal_add>
	*evt = cmd_complete_status(status);
   1113a:	e6ae      	b.n	10e9a <hci_cmd_handle+0xc2>
	status = ll_fal_remove(&cmd->addr);
   1113c:	68a0      	ldr	r0, [r4, #8]
   1113e:	f003 fabb 	bl	146b8 <ll_fal_remove>
	*evt = cmd_complete_status(status);
   11142:	e6aa      	b.n	10e9a <hci_cmd_handle+0xc2>
	struct bt_hci_cp_le_encrypt *cmd = (void *)buf->data;
   11144:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
   11146:	aa06      	add	r2, sp, #24
   11148:	2300      	movs	r3, #0
   1114a:	f100 0110 	add.w	r1, r0, #16
   1114e:	f013 fc4b 	bl	249e8 <ecb_encrypt>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11152:	2111      	movs	r1, #17
   11154:	a805      	add	r0, sp, #20
   11156:	f7ff fda7 	bl	10ca8 <hci_cmd_complete>
	rp->status = 0x00;
   1115a:	2300      	movs	r3, #0
   1115c:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
   11160:	2210      	movs	r2, #16
   11162:	a906      	add	r1, sp, #24
   11164:	f00c ff65 	bl	1e032 <memcpy>
	if (err == -EINVAL) {
   11168:	e692      	b.n	10e90 <hci_cmd_handle+0xb8>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1116a:	2109      	movs	r1, #9
   1116c:	a805      	add	r0, sp, #20
   1116e:	f7ff fd9b 	bl	10ca8 <hci_cmd_complete>
	rp->status = 0x00;
   11172:	2300      	movs	r3, #0
   11174:	f800 3b01 	strb.w	r3, [r0], #1
	lll_csrand_get(rp->rand, count);
   11178:	2108      	movs	r1, #8
   1117a:	f003 fd13 	bl	14ba4 <lll_csrand_get>
	if (err == -EINVAL) {
   1117e:	e687      	b.n	10e90 <hci_cmd_handle+0xb8>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11180:	2109      	movs	r1, #9
   11182:	a805      	add	r0, sp, #20
   11184:	f7ff fd90 	bl	10ca8 <hci_cmd_complete>
	dst[0] = val;
   11188:	22bf      	movs	r2, #191	; 0xbf
   1118a:	7042      	strb	r2, [r0, #1]
	dst[1] = val >> 8;
   1118c:	22ff      	movs	r2, #255	; 0xff
   1118e:	7082      	strb	r2, [r0, #2]
	dst[0] = val;
   11190:	2230      	movs	r2, #48	; 0x30
   11192:	70c2      	strb	r2, [r0, #3]
	dst[1] = val >> 8;
   11194:	22ec      	movs	r2, #236	; 0xec
   11196:	7102      	strb	r2, [r0, #4]
	dst[0] = val;
   11198:	22c0      	movs	r2, #192	; 0xc0
	rp->status = 0x00;
   1119a:	2300      	movs	r3, #0
   1119c:	7142      	strb	r2, [r0, #5]
	dst[1] = val >> 8;
   1119e:	2201      	movs	r2, #1
   111a0:	7003      	strb	r3, [r0, #0]
   111a2:	7182      	strb	r2, [r0, #6]
   111a4:	e6c2      	b.n	10f2c <hci_cmd_handle+0x154>
	struct bt_hci_cp_le_set_adv_param *cmd = (void *)buf->data;
   111a6:	68a4      	ldr	r4, [r4, #8]
	status = ll_adv_params_set(min_interval, cmd->type,
   111a8:	7ba5      	ldrb	r5, [r4, #14]
   111aa:	79a3      	ldrb	r3, [r4, #6]
   111ac:	7962      	ldrb	r2, [r4, #5]
   111ae:	7921      	ldrb	r1, [r4, #4]
   111b0:	8820      	ldrh	r0, [r4, #0]
   111b2:	9502      	str	r5, [sp, #8]
   111b4:	7b65      	ldrb	r5, [r4, #13]
   111b6:	9501      	str	r5, [sp, #4]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
   111b8:	3407      	adds	r4, #7
	status = ll_adv_params_set(min_interval, cmd->type,
   111ba:	9400      	str	r4, [sp, #0]
   111bc:	f001 fd2e 	bl	12c1c <ll_adv_params_set>
	*evt = cmd_complete_status(status);
   111c0:	e66b      	b.n	10e9a <hci_cmd_handle+0xc2>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   111c2:	2102      	movs	r1, #2
   111c4:	a805      	add	r0, sp, #20
   111c6:	f7ff fd6f 	bl	10ca8 <hci_cmd_complete>
	rp->status = 0x00;
   111ca:	2300      	movs	r3, #0
   111cc:	7003      	strb	r3, [r0, #0]
	rp->tx_power_level = 0;
   111ce:	7043      	strb	r3, [r0, #1]
	if (err == -EINVAL) {
   111d0:	e65e      	b.n	10e90 <hci_cmd_handle+0xb8>
	status = ll_adv_data_set(cmd->len, &cmd->data[0]);
   111d2:	68a1      	ldr	r1, [r4, #8]
   111d4:	f811 0b01 	ldrb.w	r0, [r1], #1
   111d8:	f001 feb2 	bl	12f40 <ll_adv_data_set>
	*evt = cmd_complete_status(status);
   111dc:	e65d      	b.n	10e9a <hci_cmd_handle+0xc2>
	status = ll_adv_scan_rsp_set(cmd->len, &cmd->data[0]);
   111de:	68a1      	ldr	r1, [r4, #8]
   111e0:	f811 0b01 	ldrb.w	r0, [r1], #1
   111e4:	f001 feb4 	bl	12f50 <ll_adv_scan_rsp_set>
	*evt = cmd_complete_status(status);
   111e8:	e657      	b.n	10e9a <hci_cmd_handle+0xc2>
	status = ll_adv_enable(cmd->enable);
   111ea:	68a3      	ldr	r3, [r4, #8]
   111ec:	7818      	ldrb	r0, [r3, #0]
   111ee:	f7f0 faff 	bl	17f0 <ll_adv_enable>
	*evt = cmd_complete_status(status);
   111f2:	e652      	b.n	10e9a <hci_cmd_handle+0xc2>
	struct bt_hci_cp_le_set_scan_param *cmd = (void *)buf->data;
   111f4:	68a4      	ldr	r4, [r4, #8]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
   111f6:	7963      	ldrb	r3, [r4, #5]
   111f8:	f8b4 2003 	ldrh.w	r2, [r4, #3]
   111fc:	f8b4 1001 	ldrh.w	r1, [r4, #1]
   11200:	7820      	ldrb	r0, [r4, #0]
   11202:	79a4      	ldrb	r4, [r4, #6]
   11204:	9400      	str	r4, [sp, #0]
   11206:	f7f0 fd6b 	bl	1ce0 <ll_scan_params_set>
	*evt = cmd_complete_status(status);
   1120a:	e646      	b.n	10e9a <hci_cmd_handle+0xc2>
	status = ll_scan_enable(cmd->enable);
   1120c:	68a3      	ldr	r3, [r4, #8]
   1120e:	7818      	ldrb	r0, [r3, #0]
   11210:	f012 fff5 	bl	241fe <ll_scan_enable>
		status = BT_HCI_ERR_SUCCESS;
   11214:	280c      	cmp	r0, #12
	*evt = cmd_complete_status(status);
   11216:	bf08      	it	eq
   11218:	2000      	moveq	r0, #0
   1121a:	e63e      	b.n	10e9a <hci_cmd_handle+0xc2>
	handle = sys_le16_to_cpu(cmd->handle);
   1121c:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1121e:	2108      	movs	r1, #8
   11220:	a805      	add	r0, sp, #20
	handle = sys_le16_to_cpu(cmd->handle);
   11222:	881d      	ldrh	r5, [r3, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11224:	f7ff fd40 	bl	10ca8 <hci_cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
   11228:	b2ae      	uxth	r6, r5
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1122a:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
   1122c:	1cc1      	adds	r1, r0, #3
   1122e:	4630      	mov	r0, r6
   11230:	f013 f8fe 	bl	24430 <ll_chm_get>
   11234:	e64b      	b.n	10ece <hci_cmd_handle+0xf6>
	handle = sys_le16_to_cpu(cmd->handle);
   11236:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
   11238:	8818      	ldrh	r0, [r3, #0]
   1123a:	f013 f910 	bl	2445e <ll_feature_req_send>
	*evt = cmd_status(status);
   1123e:	e608      	b.n	10e52 <hci_cmd_handle+0x7a>
	struct hci_cp_le_conn_update *cmd = (void *)buf->data;
   11240:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_min,
   11242:	8911      	ldrh	r1, [r2, #8]
   11244:	8853      	ldrh	r3, [r2, #2]
   11246:	8810      	ldrh	r0, [r2, #0]
   11248:	9102      	str	r1, [sp, #8]
   1124a:	88d1      	ldrh	r1, [r2, #6]
   1124c:	9101      	str	r1, [sp, #4]
   1124e:	8892      	ldrh	r2, [r2, #4]
   11250:	9200      	str	r2, [sp, #0]
   11252:	2200      	movs	r2, #0
   11254:	4611      	mov	r1, r2
   11256:	f013 f866 	bl	24326 <ll_conn_update>
	*evt = cmd_status(status);
   1125a:	e5fa      	b.n	10e52 <hci_cmd_handle+0x7a>
	struct bt_hci_cp_le_conn_param_req_reply *cmd = (void *)buf->data;
   1125c:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   1125e:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   11260:	8815      	ldrh	r5, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   11262:	8853      	ldrh	r3, [r2, #2]
   11264:	9102      	str	r1, [sp, #8]
   11266:	88d1      	ldrh	r1, [r2, #6]
   11268:	9101      	str	r1, [sp, #4]
   1126a:	8892      	ldrh	r2, [r2, #4]
   1126c:	9200      	str	r2, [sp, #0]
   1126e:	2200      	movs	r2, #0
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   11270:	2102      	movs	r1, #2
   11272:	b2a8      	uxth	r0, r5
   11274:	f013 f857 	bl	24326 <ll_conn_update>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11278:	2103      	movs	r1, #3
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   1127a:	4604      	mov	r4, r0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1127c:	a805      	add	r0, sp, #20
   1127e:	f7ff fd13 	bl	10ca8 <hci_cmd_complete>
	rp->status = status;
   11282:	7004      	strb	r4, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
   11284:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (err == -EINVAL) {
   11288:	e602      	b.n	10e90 <hci_cmd_handle+0xb8>
	struct bt_hci_cp_le_conn_param_req_neg_reply *cmd = (void *)buf->data;
   1128a:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   1128c:	881d      	ldrh	r5, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   1128e:	789a      	ldrb	r2, [r3, #2]
   11290:	2300      	movs	r3, #0
   11292:	e9cd 3301 	strd	r3, r3, [sp, #4]
   11296:	9300      	str	r3, [sp, #0]
   11298:	e7ea      	b.n	11270 <hci_cmd_handle+0x498>

/* Map vendor command handler directly to common implementation */
inline int hci_vendor_cmd_handle(uint16_t ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	return hci_vendor_cmd_handle_common(ocf, cmd, evt);
   1129a:	aa05      	add	r2, sp, #20
   1129c:	4621      	mov	r1, r4
   1129e:	f7ff fd13 	bl	10cc8 <hci_vendor_cmd_handle_common>
	if (err == -EINVAL) {
   112a2:	3016      	adds	r0, #22
   112a4:	f43f adc5 	beq.w	10e32 <hci_cmd_handle+0x5a>
   112a8:	e5f2      	b.n	10e90 <hci_cmd_handle+0xb8>
   112aa:	bf00      	nop

000112ac <hci_acl_handle>:
{
   112ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	*evt = NULL;
   112b0:	2300      	movs	r3, #0
   112b2:	600b      	str	r3, [r1, #0]
	if (buf->len < sizeof(*acl)) {
   112b4:	8983      	ldrh	r3, [r0, #12]
   112b6:	2b03      	cmp	r3, #3
{
   112b8:	4605      	mov	r5, r0
   112ba:	460e      	mov	r6, r1
	if (buf->len < sizeof(*acl)) {
   112bc:	d802      	bhi.n	112c4 <hci_acl_handle+0x18>
		return -EINVAL;
   112be:	f06f 0015 	mvn.w	r0, #21
   112c2:	e017      	b.n	112f4 <hci_acl_handle+0x48>
   112c4:	2104      	movs	r1, #4
   112c6:	3008      	adds	r0, #8
   112c8:	f013 fda8 	bl	24e1c <net_buf_simple_pull_mem>
	if (buf->len < len) {
   112cc:	89ab      	ldrh	r3, [r5, #12]
	len = sys_le16_to_cpu(acl->len);
   112ce:	8847      	ldrh	r7, [r0, #2]
	handle = sys_le16_to_cpu(acl->handle);
   112d0:	f8b0 9000 	ldrh.w	r9, [r0]
	if (buf->len < len) {
   112d4:	42bb      	cmp	r3, r7
   112d6:	d3f2      	bcc.n	112be <hci_acl_handle+0x12>
	if (len > LL_LENGTH_OCTETS_TX_MAX) {
   112d8:	2f1b      	cmp	r7, #27
   112da:	d8f0      	bhi.n	112be <hci_acl_handle+0x12>
	node_tx = ll_tx_mem_acquire();
   112dc:	f002 f8d2 	bl	13484 <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
   112e0:	ea4f 3819 	mov.w	r8, r9, lsr #12
	if (!node_tx) {
   112e4:	4604      	mov	r4, r0
   112e6:	b9f0      	cbnz	r0, 11326 <hci_acl_handle+0x7a>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
   112e8:	4b20      	ldr	r3, [pc, #128]	; (1136c <hci_acl_handle+0xc0>)
   112ea:	681b      	ldr	r3, [r3, #0]
   112ec:	019b      	lsls	r3, r3, #6
   112ee:	d403      	bmi.n	112f8 <hci_acl_handle+0x4c>
		return -ENOBUFS;
   112f0:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   112f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   112f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   112fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11300:	2001      	movs	r0, #1
   11302:	f7f4 ff3f 	bl	6184 <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
   11306:	2102      	movs	r1, #2
   11308:	6030      	str	r0, [r6, #0]
   1130a:	3008      	adds	r0, #8
   1130c:	f013 fd03 	bl	24d16 <net_buf_simple_add>
	hdr->len = len;
   11310:	2401      	movs	r4, #1
	hdr->evt = evt;
   11312:	231a      	movs	r3, #26
   11314:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   11316:	7044      	strb	r4, [r0, #1]
   11318:	6830      	ldr	r0, [r6, #0]
   1131a:	4621      	mov	r1, r4
   1131c:	3008      	adds	r0, #8
   1131e:	f013 fcfa 	bl	24d16 <net_buf_simple_add>
	ep->link_type = BT_OVERFLOW_LINK_ACL;
   11322:	7004      	strb	r4, [r0, #0]
   11324:	e7e4      	b.n	112f0 <hci_acl_handle+0x44>
	if (bt_acl_flags_bc(flags) != BT_ACL_POINT_TO_POINT) {
   11326:	ea5f 0398 	movs.w	r3, r8, lsr #2
   1132a:	d1c8      	bne.n	112be <hci_acl_handle+0x12>
	switch (bt_acl_flags_pb(flags)) {
   1132c:	f1b8 0f00 	cmp.w	r8, #0
   11330:	d006      	beq.n	11340 <hci_acl_handle+0x94>
   11332:	f1b8 0f01 	cmp.w	r8, #1
   11336:	d1c2      	bne.n	112be <hci_acl_handle+0x12>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   11338:	7903      	ldrb	r3, [r0, #4]
   1133a:	f368 0301 	bfi	r3, r8, #0, #2
   1133e:	e003      	b.n	11348 <hci_acl_handle+0x9c>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
   11340:	7903      	ldrb	r3, [r0, #4]
   11342:	2202      	movs	r2, #2
   11344:	f362 0301 	bfi	r3, r2, #0, #2
	pdu_data->len = len;
   11348:	7167      	strb	r7, [r4, #5]
	memcpy(&pdu_data->lldata[0], buf->data, len);
   1134a:	68a9      	ldr	r1, [r5, #8]
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1134c:	7123      	strb	r3, [r4, #4]
	memcpy(&pdu_data->lldata[0], buf->data, len);
   1134e:	463a      	mov	r2, r7
   11350:	1de0      	adds	r0, r4, #7
   11352:	f00c fe6e 	bl	1e032 <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
   11356:	4621      	mov	r1, r4
   11358:	f3c9 000b 	ubfx	r0, r9, #0, #12
   1135c:	f002 f89e 	bl	1349c <ll_tx_mem_enqueue>
   11360:	2800      	cmp	r0, #0
   11362:	d0c7      	beq.n	112f4 <hci_acl_handle+0x48>
		ll_tx_mem_release(node_tx);
   11364:	4620      	mov	r0, r4
   11366:	f002 f893 	bl	13490 <ll_tx_mem_release>
   1136a:	e7a8      	b.n	112be <hci_acl_handle+0x12>
   1136c:	20000268 	.word	0x20000268

00011370 <hci_disconn_complete_encode>:
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
   11370:	4b0d      	ldr	r3, [pc, #52]	; (113a8 <hci_disconn_complete_encode+0x38>)
   11372:	681b      	ldr	r3, [r3, #0]
   11374:	06db      	lsls	r3, r3, #27
{
   11376:	b570      	push	{r4, r5, r6, lr}
   11378:	4605      	mov	r5, r0
   1137a:	460e      	mov	r6, r1
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
   1137c:	d512      	bpl.n	113a4 <hci_disconn_complete_encode+0x34>
   1137e:	f102 0408 	add.w	r4, r2, #8
   11382:	2102      	movs	r1, #2
   11384:	4620      	mov	r0, r4
   11386:	f013 fcc6 	bl	24d16 <net_buf_simple_add>
	hdr->evt = evt;
   1138a:	2305      	movs	r3, #5
	hdr->len = len;
   1138c:	2104      	movs	r1, #4
	hdr->evt = evt;
   1138e:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   11390:	7041      	strb	r1, [r0, #1]
   11392:	4620      	mov	r0, r4
   11394:	f013 fcbf 	bl	24d16 <net_buf_simple_add>
	ep->status = 0x00;
   11398:	2300      	movs	r3, #0
   1139a:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   1139c:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((uint8_t *)pdu_data);
   113a0:	782b      	ldrb	r3, [r5, #0]
   113a2:	70c3      	strb	r3, [r0, #3]
}
   113a4:	bd70      	pop	{r4, r5, r6, pc}
   113a6:	bf00      	nop
   113a8:	20000268 	.word	0x20000268

000113ac <hci_disconn_complete_process>:
	conn_count--;
   113ac:	4a02      	ldr	r2, [pc, #8]	; (113b8 <hci_disconn_complete_process+0xc>)
   113ae:	6813      	ldr	r3, [r2, #0]
   113b0:	3b01      	subs	r3, #1
   113b2:	6013      	str	r3, [r2, #0]
}
   113b4:	4770      	bx	lr
   113b6:	bf00      	nop
   113b8:	20002730 	.word	0x20002730

000113bc <hci_acl_encode>:
	uint16_t handle;
	uint8_t *data;

	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
   113bc:	7f03      	ldrb	r3, [r0, #28]
   113be:	f003 0303 	and.w	r3, r3, #3
   113c2:	3b01      	subs	r3, #1
   113c4:	2b01      	cmp	r3, #1
{
   113c6:	b570      	push	{r4, r5, r6, lr}
   113c8:	4604      	mov	r4, r0
	switch (pdu_data->ll_id) {
   113ca:	d81c      	bhi.n	11406 <hci_acl_encode+0x4a>
   113cc:	f101 0508 	add.w	r5, r1, #8
	handle = node_rx->hdr.handle;
   113d0:	88c6      	ldrh	r6, [r0, #6]
   113d2:	2104      	movs	r1, #4
   113d4:	4628      	mov	r0, r5
   113d6:	f013 fc9e 	bl	24d16 <net_buf_simple_add>
	case PDU_DATA_LLID_DATA_CONTINUE:
	case PDU_DATA_LLID_DATA_START:
		acl = (void *)net_buf_add(buf, sizeof(*acl));
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
   113da:	7f23      	ldrb	r3, [r4, #28]
   113dc:	f003 0303 	and.w	r3, r3, #3
   113e0:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
   113e2:	bf0c      	ite	eq
   113e4:	f446 5600 	orreq.w	r6, r6, #8192	; 0x2000
		} else {
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
   113e8:	f446 5680 	orrne.w	r6, r6, #4096	; 0x1000
		}
		acl->handle = sys_cpu_to_le16(handle_flags);
   113ec:	8006      	strh	r6, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
   113ee:	7f61      	ldrb	r1, [r4, #29]
   113f0:	8041      	strh	r1, [r0, #2]
   113f2:	4628      	mov	r0, r5
   113f4:	f013 fc8f 	bl	24d16 <net_buf_simple_add>
		data = (void *)net_buf_add(buf, pdu_data->len);
		memcpy(data, pdu_data->lldata, pdu_data->len);
   113f8:	7f62      	ldrb	r2, [r4, #29]
   113fa:	f104 011f 	add.w	r1, r4, #31

	default:
		LL_ASSERT(0);
		break;
	}
}
   113fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
   11402:	f00c be16 	b.w	1e032 <memcpy>
		LL_ASSERT(0);
   11406:	4a07      	ldr	r2, [pc, #28]	; (11424 <hci_acl_encode+0x68>)
   11408:	4907      	ldr	r1, [pc, #28]	; (11428 <hci_acl_encode+0x6c>)
   1140a:	4808      	ldr	r0, [pc, #32]	; (1142c <hci_acl_encode+0x70>)
   1140c:	f641 53bb 	movw	r3, #7611	; 0x1dbb
   11410:	f00a ff5a 	bl	1c2c8 <printk>
   11414:	4040      	eors	r0, r0
   11416:	f380 8811 	msr	BASEPRI, r0
   1141a:	f04f 0003 	mov.w	r0, #3
   1141e:	df02      	svc	2
}
   11420:	bd70      	pop	{r4, r5, r6, pc}
   11422:	bf00      	nop
   11424:	00027808 	.word	0x00027808
   11428:	0002826c 	.word	0x0002826c
   1142c:	00027514 	.word	0x00027514

00011430 <hci_evt_encode>:
#endif /* CONFIG_BT_CONN */

void hci_evt_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
   11430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct pdu_data *pdu_data = (void *)node_rx->pdu;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   11434:	7903      	ldrb	r3, [r0, #4]
	handle = node_rx->hdr.handle;
   11436:	88c7      	ldrh	r7, [r0, #6]
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   11438:	2b03      	cmp	r3, #3
{
   1143a:	b086      	sub	sp, #24
   1143c:	4604      	mov	r4, r0
   1143e:	460e      	mov	r6, r1
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
   11440:	f100 081c 	add.w	r8, r0, #28
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   11444:	f000 811e 	beq.w	11684 <hci_evt_encode+0x254>
	switch (node_rx->hdr.type) {
   11448:	2b17      	cmp	r3, #23
   1144a:	f000 8113 	beq.w	11674 <hci_evt_encode+0x244>
   1144e:	d812      	bhi.n	11476 <hci_evt_encode+0x46>
   11450:	2b05      	cmp	r3, #5
   11452:	d03e      	beq.n	114d2 <hci_evt_encode+0xa2>
   11454:	2b16      	cmp	r3, #22
   11456:	f000 80bf 	beq.w	115d8 <hci_evt_encode+0x1a8>
		LL_ASSERT(0);
   1145a:	f641 43af 	movw	r3, #7343	; 0x1caf
		LL_ASSERT(0);
   1145e:	4ab4      	ldr	r2, [pc, #720]	; (11730 <hci_evt_encode+0x300>)
   11460:	49b4      	ldr	r1, [pc, #720]	; (11734 <hci_evt_encode+0x304>)
   11462:	48b5      	ldr	r0, [pc, #724]	; (11738 <hci_evt_encode+0x308>)
   11464:	f00a ff30 	bl	1c2c8 <printk>
   11468:	4040      	eors	r0, r0
   1146a:	f380 8811 	msr	BASEPRI, r0
   1146e:	f04f 0003 	mov.w	r0, #3
   11472:	df02      	svc	2
		encode_control(node_rx, pdu_data, buf);
	} else if (IS_ENABLED(CONFIG_BT_CONN)) {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
   11474:	e078      	b.n	11568 <hci_evt_encode+0x138>
	switch (node_rx->hdr.type) {
   11476:	2b18      	cmp	r3, #24
   11478:	d1ef      	bne.n	1145a <hci_evt_encode+0x2a>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1147a:	4bb0      	ldr	r3, [pc, #704]	; (1173c <hci_evt_encode+0x30c>)
   1147c:	685b      	ldr	r3, [r3, #4]
   1147e:	0098      	lsls	r0, r3, #2
   11480:	d572      	bpl.n	11568 <hci_evt_encode+0x138>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
   11482:	4baf      	ldr	r3, [pc, #700]	; (11740 <hci_evt_encode+0x310>)
   11484:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   11486:	0759      	lsls	r1, r3, #29
   11488:	d56e      	bpl.n	11568 <hci_evt_encode+0x138>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
   1148a:	2209      	movs	r2, #9
   1148c:	2103      	movs	r1, #3
   1148e:	4630      	mov	r0, r6
   11490:	f012 fcec 	bl	23e6c <meta_evt>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   11494:	f018 0f01 	tst.w	r8, #1
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
   11498:	4605      	mov	r5, r0
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   1149a:	d00c      	beq.n	114b6 <hci_evt_encode+0x86>
   1149c:	4aa4      	ldr	r2, [pc, #656]	; (11730 <hci_evt_encode+0x300>)
   1149e:	49a9      	ldr	r1, [pc, #676]	; (11744 <hci_evt_encode+0x314>)
   114a0:	48a5      	ldr	r0, [pc, #660]	; (11738 <hci_evt_encode+0x308>)
   114a2:	f641 337a 	movw	r3, #7034	; 0x1b7a
   114a6:	f00a ff0f 	bl	1c2c8 <printk>
   114aa:	4040      	eors	r0, r0
   114ac:	f380 8811 	msr	BASEPRI, r0
   114b0:	f04f 0003 	mov.w	r0, #3
   114b4:	df02      	svc	2
	sep->status = cu->status;
   114b6:	7f23      	ldrb	r3, [r4, #28]
   114b8:	702b      	strb	r3, [r5, #0]
	sep->interval = sys_cpu_to_le16(cu->interval);
   114ba:	8be3      	ldrh	r3, [r4, #30]
   114bc:	f8a5 3003 	strh.w	r3, [r5, #3]
	sep->latency = sys_cpu_to_le16(cu->latency);
   114c0:	8c23      	ldrh	r3, [r4, #32]
   114c2:	f8a5 3005 	strh.w	r3, [r5, #5]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   114c6:	8c63      	ldrh	r3, [r4, #34]	; 0x22
	sep->handle = sys_cpu_to_le16(handle);
   114c8:	f8a5 7001 	strh.w	r7, [r5, #1]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   114cc:	f8a5 3007 	strh.w	r3, [r5, #7]
   114d0:	e04a      	b.n	11568 <hci_evt_encode+0x138>
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   114d2:	4b9d      	ldr	r3, [pc, #628]	; (11748 <hci_evt_encode+0x318>)
	rssi = -(node_rx->hdr.rx_ftr.rssi);
   114d4:	7e27      	ldrb	r7, [r4, #24]
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   114d6:	6818      	ldr	r0, [r3, #0]
   114d8:	889a      	ldrh	r2, [r3, #4]
   114da:	799b      	ldrb	r3, [r3, #6]
   114dc:	f88d 3016 	strb.w	r3, [sp, #22]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   114e0:	4b96      	ldr	r3, [pc, #600]	; (1173c <hci_evt_encode+0x30c>)
	direct_report = node_rx->hdr.rx_ftr.direct;
   114e2:	7e65      	ldrb	r5, [r4, #25]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   114e4:	685b      	ldr	r3, [r3, #4]
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   114e6:	9004      	str	r0, [sp, #16]
	rssi = -(node_rx->hdr.rx_ftr.rssi);
   114e8:	427f      	negs	r7, r7
	if (direct_report) {
   114ea:	f015 0501 	ands.w	r5, r5, #1
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   114ee:	f8ad 2014 	strh.w	r2, [sp, #20]
	rssi = -(node_rx->hdr.rx_ftr.rssi);
   114f2:	b27f      	sxtb	r7, r7
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   114f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
	if (direct_report) {
   114f8:	d039      	beq.n	1156e <hci_evt_encode+0x13e>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   114fa:	2b00      	cmp	r3, #0
   114fc:	d034      	beq.n	11568 <hci_evt_encode+0x138>
	    !(le_event_mask & BT_EVT_MASK_LE_DIRECT_ADV_REPORT)) {
   114fe:	4b90      	ldr	r3, [pc, #576]	; (11740 <hci_evt_encode+0x310>)
   11500:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   11502:	0559      	lsls	r1, r3, #21
   11504:	d530      	bpl.n	11568 <hci_evt_encode+0x138>
	LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
   11506:	7f23      	ldrb	r3, [r4, #28]
   11508:	f003 030f 	and.w	r3, r3, #15
   1150c:	2b01      	cmp	r3, #1
   1150e:	d00c      	beq.n	1152a <hci_evt_encode+0xfa>
   11510:	4a87      	ldr	r2, [pc, #540]	; (11730 <hci_evt_encode+0x300>)
   11512:	498e      	ldr	r1, [pc, #568]	; (1174c <hci_evt_encode+0x31c>)
   11514:	4888      	ldr	r0, [pc, #544]	; (11738 <hci_evt_encode+0x308>)
   11516:	f241 435a 	movw	r3, #5210	; 0x145a
   1151a:	f00a fed5 	bl	1c2c8 <printk>
   1151e:	4040      	eors	r0, r0
   11520:	f380 8811 	msr	BASEPRI, r0
   11524:	f04f 0003 	mov.w	r0, #3
   11528:	df02      	svc	2
	drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
   1152a:	2211      	movs	r2, #17
   1152c:	210b      	movs	r1, #11
   1152e:	4630      	mov	r0, r6
   11530:	f012 fc9c 	bl	23e6c <meta_evt>
	drp->num_reports = 1U;
   11534:	2301      	movs	r3, #1
   11536:	7003      	strb	r3, [r0, #0]
	dir_info->evt_type = BT_HCI_ADV_DIRECT_IND;
   11538:	7043      	strb	r3, [r0, #1]
		dir_info->addr.type = adv->tx_addr;
   1153a:	7f23      	ldrb	r3, [r4, #28]
   1153c:	f3c3 1380 	ubfx	r3, r3, #6, #1
	drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
   11540:	4605      	mov	r5, r0
		dir_info->addr.type = adv->tx_addr;
   11542:	7083      	strb	r3, [r0, #2]
		memcpy(&dir_info->addr.a.val[0], &adv->direct_ind.adv_addr[0],
   11544:	2206      	movs	r2, #6
   11546:	f104 011e 	add.w	r1, r4, #30
   1154a:	3003      	adds	r0, #3
   1154c:	f00c fd71 	bl	1e032 <memcpy>
	dir_info->dir_addr.type = adv->rx_addr;
   11550:	7f23      	ldrb	r3, [r4, #28]
   11552:	f3c3 13c0 	ubfx	r3, r3, #7, #1
   11556:	726b      	strb	r3, [r5, #9]
	memcpy(&dir_info->dir_addr.a.val[0],
   11558:	2206      	movs	r2, #6
   1155a:	f104 0124 	add.w	r1, r4, #36	; 0x24
   1155e:	f105 000a 	add.w	r0, r5, #10
   11562:	f00c fd66 	bl	1e032 <memcpy>
	dir_info->rssi = rssi;
   11566:	742f      	strb	r7, [r5, #16]
}
   11568:	b006      	add	sp, #24
   1156a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1156e:	2b00      	cmp	r3, #0
   11570:	d0fa      	beq.n	11568 <hci_evt_encode+0x138>
	    !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) {
   11572:	4b73      	ldr	r3, [pc, #460]	; (11740 <hci_evt_encode+0x310>)
   11574:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   11576:	079a      	lsls	r2, r3, #30
   11578:	d5f6      	bpl.n	11568 <hci_evt_encode+0x138>
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
   1157a:	7f23      	ldrb	r3, [r4, #28]
   1157c:	f003 030f 	and.w	r3, r3, #15
   11580:	2b01      	cmp	r3, #1
		data_len = (adv->len - BDADDR_SIZE);
   11582:	bf1e      	ittt	ne
   11584:	7f65      	ldrbne	r5, [r4, #29]
   11586:	3d06      	subne	r5, #6
   11588:	b2ed      	uxtbne	r5, r5
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
   1158a:	f105 020b 	add.w	r2, r5, #11
   1158e:	b2d2      	uxtb	r2, r2
   11590:	2102      	movs	r1, #2
   11592:	4630      	mov	r0, r6
   11594:	f012 fc6a 	bl	23e6c <meta_evt>
	sep->num_reports = 1U;
   11598:	2301      	movs	r3, #1
   1159a:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
   1159c:	7f23      	ldrb	r3, [r4, #28]
   1159e:	aa06      	add	r2, sp, #24
   115a0:	f003 030f 	and.w	r3, r3, #15
   115a4:	4413      	add	r3, r2
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
   115a6:	4606      	mov	r6, r0
	adv_info->evt_type = c_adv_type[adv->type];
   115a8:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   115ac:	7043      	strb	r3, [r0, #1]
		adv_info->addr.type = adv->tx_addr;
   115ae:	7f23      	ldrb	r3, [r4, #28]
   115b0:	f3c3 1380 	ubfx	r3, r3, #6, #1
   115b4:	7083      	strb	r3, [r0, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
   115b6:	2206      	movs	r2, #6
   115b8:	f104 011e 	add.w	r1, r4, #30
   115bc:	3003      	adds	r0, #3
   115be:	f00c fd38 	bl	1e032 <memcpy>
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
   115c2:	360a      	adds	r6, #10
	adv_info->length = data_len;
   115c4:	f806 5c01 	strb.w	r5, [r6, #-1]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
   115c8:	462a      	mov	r2, r5
   115ca:	f104 0124 	add.w	r1, r4, #36	; 0x24
   115ce:	4630      	mov	r0, r6
   115d0:	f00c fd2f 	bl	1e032 <memcpy>
	*prssi = rssi;
   115d4:	5577      	strb	r7, [r6, r5]
   115d6:	e7c7      	b.n	11568 <hci_evt_encode+0x138>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   115d8:	f018 0f01 	tst.w	r8, #1
   115dc:	d00c      	beq.n	115f8 <hci_evt_encode+0x1c8>
   115de:	4a54      	ldr	r2, [pc, #336]	; (11730 <hci_evt_encode+0x300>)
   115e0:	495b      	ldr	r1, [pc, #364]	; (11750 <hci_evt_encode+0x320>)
   115e2:	4855      	ldr	r0, [pc, #340]	; (11738 <hci_evt_encode+0x308>)
   115e4:	f641 23f5 	movw	r3, #6901	; 0x1af5
   115e8:	f00a fe6e 	bl	1c2c8 <printk>
   115ec:	4040      	eors	r0, r0
   115ee:	f380 8811 	msr	BASEPRI, r0
   115f2:	f04f 0003 	mov.w	r0, #3
   115f6:	df02      	svc	2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   115f8:	4b50      	ldr	r3, [pc, #320]	; (1173c <hci_evt_encode+0x30c>)
   115fa:	685b      	ldr	r3, [r3, #4]
   115fc:	009b      	lsls	r3, r3, #2
   115fe:	d5b3      	bpl.n	11568 <hci_evt_encode+0x138>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   11600:	4b4f      	ldr	r3, [pc, #316]	; (11740 <hci_evt_encode+0x310>)
   11602:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   11604:	07dd      	lsls	r5, r3, #31
   11606:	d5af      	bpl.n	11568 <hci_evt_encode+0x138>
	status = cc->status;
   11608:	f894 801c 	ldrb.w	r8, [r4, #28]
	if (!status) {
   1160c:	f1b8 0f00 	cmp.w	r8, #0
   11610:	d103      	bne.n	1161a <hci_evt_encode+0x1ea>
		conn_count++;
   11612:	4a50      	ldr	r2, [pc, #320]	; (11754 <hci_evt_encode+0x324>)
   11614:	6813      	ldr	r3, [r2, #0]
   11616:	3301      	adds	r3, #1
   11618:	6013      	str	r3, [r2, #0]
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
   1161a:	2212      	movs	r2, #18
   1161c:	2101      	movs	r1, #1
   1161e:	4630      	mov	r0, r6
   11620:	f012 fc24 	bl	23e6c <meta_evt>
   11624:	4605      	mov	r5, r0
	if (status) {
   11626:	f1b8 0f00 	cmp.w	r8, #0
   1162a:	d006      	beq.n	1163a <hci_evt_encode+0x20a>
		(void)memset(lecc, 0x00, sizeof(*lecc));
   1162c:	2212      	movs	r2, #18
   1162e:	2100      	movs	r1, #0
   11630:	f00c fd0a 	bl	1e048 <memset>
		lecc->status = status;
   11634:	f885 8000 	strb.w	r8, [r5]
		return;
   11638:	e796      	b.n	11568 <hci_evt_encode+0x138>
	lecc->status = 0x00;
   1163a:	f880 8000 	strb.w	r8, [r0]
	lecc->handle = sys_cpu_to_le16(handle);
   1163e:	f8a0 7001 	strh.w	r7, [r0, #1]
	lecc->role = cc->role;
   11642:	7f63      	ldrb	r3, [r4, #29]
   11644:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = cc->peer_addr_type & 0x1;
   11646:	7fa3      	ldrb	r3, [r4, #30]
   11648:	f003 0301 	and.w	r3, r3, #1
   1164c:	7103      	strb	r3, [r0, #4]
	memcpy(&lecc->peer_addr.a.val[0], &cc->peer_addr[0], BDADDR_SIZE);
   1164e:	2206      	movs	r2, #6
   11650:	f104 011f 	add.w	r1, r4, #31
   11654:	3005      	adds	r0, #5
   11656:	f00c fcec 	bl	1e032 <memcpy>
	lecc->interval = sys_cpu_to_le16(cc->interval);
   1165a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   1165c:	f8a5 300b 	strh.w	r3, [r5, #11]
	lecc->latency = sys_cpu_to_le16(cc->latency);
   11660:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   11662:	f8a5 300d 	strh.w	r3, [r5, #13]
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   11666:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
   11668:	f8a5 300f 	strh.w	r3, [r5, #15]
	lecc->clock_accuracy = cc->sca;
   1166c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   11670:	746b      	strb	r3, [r5, #17]
   11672:	e779      	b.n	11568 <hci_evt_encode+0x138>
		hci_disconn_complete_encode(pdu_data, handle, buf);
   11674:	460a      	mov	r2, r1
   11676:	4640      	mov	r0, r8
   11678:	4639      	mov	r1, r7
}
   1167a:	b006      	add	sp, #24
   1167c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		hci_disconn_complete_encode(pdu_data, handle, buf);
   11680:	f7ff be76 	b.w	11370 <hci_disconn_complete_encode>
	switch (pdu_data->llctrl.opcode) {
   11684:	7fc3      	ldrb	r3, [r0, #31]
   11686:	3b07      	subs	r3, #7
   11688:	2b0a      	cmp	r3, #10
   1168a:	d84d      	bhi.n	11728 <hci_evt_encode+0x2f8>
   1168c:	a201      	add	r2, pc, #4	; (adr r2, 11694 <hci_evt_encode+0x264>)
   1168e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   11692:	bf00      	nop
   11694:	00011715 	.word	0x00011715
   11698:	00011729 	.word	0x00011729
   1169c:	000116c1 	.word	0x000116c1
   116a0:	00011729 	.word	0x00011729
   116a4:	00011729 	.word	0x00011729
   116a8:	00011729 	.word	0x00011729
   116ac:	00011729 	.word	0x00011729
   116b0:	00011729 	.word	0x00011729
   116b4:	000116d3 	.word	0x000116d3
   116b8:	00011729 	.word	0x00011729
   116bc:	00011569 	.word	0x00011569
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
   116c0:	460b      	mov	r3, r1
   116c2:	463a      	mov	r2, r7
   116c4:	4641      	mov	r1, r8
   116c6:	2000      	movs	r0, #0
}
   116c8:	b006      	add	sp, #24
   116ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   116ce:	f7ff bac5 	b.w	10c5c <le_remote_feat_complete>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   116d2:	4b1a      	ldr	r3, [pc, #104]	; (1173c <hci_evt_encode+0x30c>)
   116d4:	685b      	ldr	r3, [r3, #4]
   116d6:	009a      	lsls	r2, r3, #2
   116d8:	d503      	bpl.n	116e2 <hci_evt_encode+0x2b2>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
   116da:	4b19      	ldr	r3, [pc, #100]	; (11740 <hci_evt_encode+0x310>)
   116dc:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   116de:	069b      	lsls	r3, r3, #26
   116e0:	d409      	bmi.n	116f6 <hci_evt_encode+0x2c6>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE, 0,
   116e2:	2300      	movs	r3, #0
   116e4:	e9cd 3301 	strd	r3, r3, [sp, #4]
   116e8:	9300      	str	r3, [sp, #0]
   116ea:	221a      	movs	r2, #26
   116ec:	2102      	movs	r1, #2
   116ee:	4638      	mov	r0, r7
   116f0:	f012 fe19 	bl	24326 <ll_conn_update>
		return;
   116f4:	e738      	b.n	11568 <hci_evt_encode+0x138>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
   116f6:	220a      	movs	r2, #10
   116f8:	2106      	movs	r1, #6
   116fa:	4630      	mov	r0, r6
   116fc:	f012 fbb6 	bl	23e6c <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
   11700:	8007      	strh	r7, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
   11702:	8c23      	ldrh	r3, [r4, #32]
   11704:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
   11706:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   11708:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
   1170a:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   1170c:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
   1170e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   11710:	8103      	strh	r3, [r0, #8]
   11712:	e729      	b.n	11568 <hci_evt_encode+0x138>
	switch (pdu_data->llctrl.unknown_rsp.type) {
   11714:	f890 3020 	ldrb.w	r3, [r0, #32]
   11718:	2b0e      	cmp	r3, #14
   1171a:	f47f af25 	bne.w	11568 <hci_evt_encode+0x138>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   1171e:	460b      	mov	r3, r1
   11720:	463a      	mov	r2, r7
   11722:	2100      	movs	r1, #0
   11724:	201a      	movs	r0, #26
   11726:	e7cf      	b.n	116c8 <hci_evt_encode+0x298>
		LL_ASSERT(0);
   11728:	f641 538f 	movw	r3, #7567	; 0x1d8f
   1172c:	e697      	b.n	1145e <hci_evt_encode+0x2e>
   1172e:	bf00      	nop
   11730:	00027808 	.word	0x00027808
   11734:	0002826c 	.word	0x0002826c
   11738:	00027514 	.word	0x00027514
   1173c:	20000268 	.word	0x20000268
   11740:	20000270 	.word	0x20000270
   11744:	000278a0 	.word	0x000278a0
   11748:	0002667f 	.word	0x0002667f
   1174c:	00027841 	.word	0x00027841
   11750:	00027866 	.word	0x00027866
   11754:	20002730 	.word	0x20002730

00011758 <hci_get_class>:
{
#if defined(CONFIG_BT_CONN)
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
#endif

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   11758:	7903      	ldrb	r3, [r0, #4]
   1175a:	2b03      	cmp	r3, #3
   1175c:	d006      	beq.n	1176c <hci_get_class+0x14>

		switch (node_rx->hdr.type) {
   1175e:	3b05      	subs	r3, #5
   11760:	b2db      	uxtb	r3, r3
   11762:	2b13      	cmp	r3, #19
   11764:	d80a      	bhi.n	1177c <hci_get_class+0x24>
   11766:	4a06      	ldr	r2, [pc, #24]	; (11780 <hci_get_class+0x28>)
   11768:	5cd0      	ldrb	r0, [r2, r3]
   1176a:	4770      	bx	lr
		default:
			return HCI_CLASS_NONE;
		}

#if defined(CONFIG_BT_CONN)
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
   1176c:	7f03      	ldrb	r3, [r0, #28]
   1176e:	f003 0303 	and.w	r3, r3, #3
		return HCI_CLASS_EVT_LLCP;
	} else {
		return HCI_CLASS_ACL_DATA;
   11772:	2b03      	cmp	r3, #3
   11774:	bf0c      	ite	eq
   11776:	2004      	moveq	r0, #4
   11778:	2005      	movne	r0, #5
   1177a:	4770      	bx	lr
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   1177c:	2000      	movs	r0, #0
#else
	} else {
		return HCI_CLASS_NONE;
	}
#endif
}
   1177e:	4770      	bx	lr
   11780:	000278da 	.word	0x000278da

00011784 <hci_init>:
	event_mask = DEFAULT_EVENT_MASK;
   11784:	4b07      	ldr	r3, [pc, #28]	; (117a4 <hci_init+0x20>)
   11786:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1178a:	f641 71ff 	movw	r1, #8191	; 0x1fff
   1178e:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   11792:	4b05      	ldr	r3, [pc, #20]	; (117a8 <hci_init+0x24>)
   11794:	201f      	movs	r0, #31
   11796:	2100      	movs	r1, #0
   11798:	e9c3 0100 	strd	r0, r1, [r3]
	conn_count = 0U;
   1179c:	4b03      	ldr	r3, [pc, #12]	; (117ac <hci_init+0x28>)
   1179e:	2200      	movs	r2, #0
   117a0:	601a      	str	r2, [r3, #0]
{
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
   117a2:	4770      	bx	lr
   117a4:	20000268 	.word	0x20000268
   117a8:	20000270 	.word	0x20000270
   117ac:	20002730 	.word	0x20002730

000117b0 <ll_rx_link_inc_quota>:
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   117b0:	2801      	cmp	r0, #1
{
   117b2:	b538      	push	{r3, r4, r5, lr}
   117b4:	4d0b      	ldr	r5, [pc, #44]	; (117e4 <ll_rx_link_inc_quota+0x34>)
   117b6:	4604      	mov	r4, r0
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   117b8:	d10f      	bne.n	117da <ll_rx_link_inc_quota+0x2a>
   117ba:	782b      	ldrb	r3, [r5, #0]
   117bc:	2b04      	cmp	r3, #4
   117be:	d90c      	bls.n	117da <ll_rx_link_inc_quota+0x2a>
   117c0:	4a09      	ldr	r2, [pc, #36]	; (117e8 <ll_rx_link_inc_quota+0x38>)
   117c2:	490a      	ldr	r1, [pc, #40]	; (117ec <ll_rx_link_inc_quota+0x3c>)
   117c4:	480a      	ldr	r0, [pc, #40]	; (117f0 <ll_rx_link_inc_quota+0x40>)
   117c6:	f240 6306 	movw	r3, #1542	; 0x606
   117ca:	f00a fd7d 	bl	1c2c8 <printk>
   117ce:	4040      	eors	r0, r0
   117d0:	f380 8811 	msr	BASEPRI, r0
   117d4:	f04f 0003 	mov.w	r0, #3
   117d8:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
   117da:	7828      	ldrb	r0, [r5, #0]
   117dc:	4404      	add	r4, r0
   117de:	702c      	strb	r4, [r5, #0]
}
   117e0:	bd38      	pop	{r3, r4, r5, pc}
   117e2:	bf00      	nop
   117e4:	20002798 	.word	0x20002798
   117e8:	000278ee 	.word	0x000278ee
   117ec:	00027929 	.word	0x00027929
   117f0:	00027514 	.word	0x00027514

000117f4 <perform_lll_reset>:

	return 0;
}

static void perform_lll_reset(void *param)
{
   117f4:	b510      	push	{r4, lr}
   117f6:	4604      	mov	r4, r0
	int err;

	/* Reset LLL */
	err = lll_reset();
   117f8:	f012 fee6 	bl	245c8 <lll_reset>
	LL_ASSERT(!err);
   117fc:	b160      	cbz	r0, 11818 <perform_lll_reset+0x24>
   117fe:	4a21      	ldr	r2, [pc, #132]	; (11884 <perform_lll_reset+0x90>)
   11800:	4921      	ldr	r1, [pc, #132]	; (11888 <perform_lll_reset+0x94>)
   11802:	4822      	ldr	r0, [pc, #136]	; (1188c <perform_lll_reset+0x98>)
   11804:	f640 0324 	movw	r3, #2084	; 0x824
   11808:	f00a fd5e 	bl	1c2c8 <printk>
   1180c:	4040      	eors	r0, r0
   1180e:	f380 8811 	msr	BASEPRI, r0
   11812:	f04f 0003 	mov.w	r0, #3
   11816:	df02      	svc	2

#if defined(CONFIG_BT_BROADCASTER)
	/* Reset adv state */
	err = lll_adv_reset();
   11818:	f012 ff33 	bl	24682 <lll_adv_reset>
	LL_ASSERT(!err);
   1181c:	b160      	cbz	r0, 11838 <perform_lll_reset+0x44>
   1181e:	4a19      	ldr	r2, [pc, #100]	; (11884 <perform_lll_reset+0x90>)
   11820:	4919      	ldr	r1, [pc, #100]	; (11888 <perform_lll_reset+0x94>)
   11822:	481a      	ldr	r0, [pc, #104]	; (1188c <perform_lll_reset+0x98>)
   11824:	f640 0329 	movw	r3, #2089	; 0x829
   11828:	f00a fd4e 	bl	1c2c8 <printk>
   1182c:	4040      	eors	r0, r0
   1182e:	f380 8811 	msr	BASEPRI, r0
   11832:	f04f 0003 	mov.w	r0, #3
   11836:	df02      	svc	2
#endif /* CONFIG_BT_BROADCASTER */

#if defined(CONFIG_BT_OBSERVER)
	/* Reset scan state */
	err = lll_scan_reset();
   11838:	f013 f847 	bl	248ca <lll_scan_reset>
	LL_ASSERT(!err);
   1183c:	b160      	cbz	r0, 11858 <perform_lll_reset+0x64>
   1183e:	4a11      	ldr	r2, [pc, #68]	; (11884 <perform_lll_reset+0x90>)
   11840:	4911      	ldr	r1, [pc, #68]	; (11888 <perform_lll_reset+0x94>)
   11842:	4812      	ldr	r0, [pc, #72]	; (1188c <perform_lll_reset+0x98>)
   11844:	f640 032f 	movw	r3, #2095	; 0x82f
   11848:	f00a fd3e 	bl	1c2c8 <printk>
   1184c:	4040      	eors	r0, r0
   1184e:	f380 8811 	msr	BASEPRI, r0
   11852:	f04f 0003 	mov.w	r0, #3
   11856:	df02      	svc	2
#endif /* CONFIG_BT_OBSERVER */

#if defined(CONFIG_BT_CONN)
	/* Reset conn role */
	err = lll_conn_reset();
   11858:	f013 f843 	bl	248e2 <lll_conn_reset>
	LL_ASSERT(!err);
   1185c:	b160      	cbz	r0, 11878 <perform_lll_reset+0x84>
   1185e:	4a09      	ldr	r2, [pc, #36]	; (11884 <perform_lll_reset+0x90>)
   11860:	4909      	ldr	r1, [pc, #36]	; (11888 <perform_lll_reset+0x94>)
   11862:	480a      	ldr	r0, [pc, #40]	; (1188c <perform_lll_reset+0x98>)
   11864:	f640 0335 	movw	r3, #2101	; 0x835
   11868:	f00a fd2e 	bl	1c2c8 <printk>
   1186c:	4040      	eors	r0, r0
   1186e:	f380 8811 	msr	BASEPRI, r0
   11872:	f04f 0003 	mov.w	r0, #3
   11876:	df02      	svc	2
	z_impl_k_sem_give(sem);
   11878:	4620      	mov	r0, r4
#endif /* CONFIG_BT_CTLR_DF */

#if !defined(CONFIG_BT_CTLR_ZLI)
	k_sem_give(param);
#endif /* !CONFIG_BT_CTLR_ZLI */
}
   1187a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1187e:	f009 bd43 	b.w	1b308 <z_impl_k_sem_give>
   11882:	bf00      	nop
   11884:	000278ee 	.word	0x000278ee
   11888:	00027963 	.word	0x00027963
   1188c:	00027514 	.word	0x00027514

00011890 <rx_alloc>:
{
	return m;
}

static inline void rx_alloc(uint8_t max)
{
   11890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint8_t idx;

	if (max > mem_link_rx.quota_pdu) {
   11894:	4e34      	ldr	r6, [pc, #208]	; (11968 <rx_alloc+0xd8>)
		max = mem_link_rx.quota_pdu;
	}

	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   11896:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 1196c <rx_alloc+0xdc>
   1189a:	46b0      	mov	r8, r6
   1189c:	f818 7b04 	ldrb.w	r7, [r8], #4
   118a0:	4287      	cmp	r7, r0
   118a2:	bf28      	it	cs
   118a4:	4607      	movcs	r7, r0
   118a6:	2f00      	cmp	r7, #0
   118a8:	d05b      	beq.n	11962 <rx_alloc+0xd2>
 */
static inline bool mfifo_enqueue_idx_get(uint8_t count, uint8_t first, uint8_t last,
					 uint8_t *idx)
{
	/* Non-destructive: Advance write-index modulo 'count' */
	last = last + 1;
   118aa:	f899 4003 	ldrb.w	r4, [r9, #3]
	if (last == count) {
   118ae:	f899 2001 	ldrb.w	r2, [r9, #1]
   118b2:	f899 3002 	ldrb.w	r3, [r9, #2]
	last = last + 1;
   118b6:	3401      	adds	r4, #1
   118b8:	b2e4      	uxtb	r4, r4
		last = 0U;
   118ba:	42a2      	cmp	r2, r4
   118bc:	bf08      	it	eq
   118be:	2400      	moveq	r4, #0
	 * We want to maintain the invariant of emptiness defined by
	 * first == last, but we just advanced a copy of the write-index before
	 * and may have wrapped. So if first == last the queue is full and we
	 * can not continue
	 */
	if (last == first) {
   118c0:	42a3      	cmp	r3, r4
   118c2:	d148      	bne.n	11956 <rx_alloc+0xc6>

	/* Replenish the ULL to LL/HCI free Rx PDU queue after LLL to ULL free
	 * Rx PDU queue has been filled.
	 */
	while (mem_link_rx.quota_pdu &&
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   118c4:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 11970 <rx_alloc+0xe0>
		memq_link_t *link;
		struct node_rx_hdr *rx;

		link = mem_acquire(&mem_link_rx.free);
   118c8:	4f2a      	ldr	r7, [pc, #168]	; (11974 <rx_alloc+0xe4>)
	while (mem_link_rx.quota_pdu &&
   118ca:	7833      	ldrb	r3, [r6, #0]
   118cc:	2b00      	cmp	r3, #0
   118ce:	d048      	beq.n	11962 <rx_alloc+0xd2>
	last = last + 1;
   118d0:	f898 4003 	ldrb.w	r4, [r8, #3]
	if (last == count) {
   118d4:	f898 2001 	ldrb.w	r2, [r8, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   118d8:	f898 3002 	ldrb.w	r3, [r8, #2]
	last = last + 1;
   118dc:	3401      	adds	r4, #1
   118de:	b2e4      	uxtb	r4, r4
		last = 0U;
   118e0:	42a2      	cmp	r2, r4
   118e2:	bf08      	it	eq
   118e4:	2400      	moveq	r4, #0
	if (last == first) {
   118e6:	429c      	cmp	r4, r3
   118e8:	d03b      	beq.n	11962 <rx_alloc+0xd2>
		link = mem_acquire(&mem_link_rx.free);
   118ea:	4638      	mov	r0, r7
   118ec:	f011 ff74 	bl	237d8 <mem_acquire>
		if (!link) {
   118f0:	4605      	mov	r5, r0
   118f2:	2800      	cmp	r0, #0
   118f4:	d035      	beq.n	11962 <rx_alloc+0xd2>
			return;
		}

		rx = mem_acquire(&mem_pdu_rx.free);
   118f6:	4820      	ldr	r0, [pc, #128]	; (11978 <rx_alloc+0xe8>)
   118f8:	f011 ff6e 	bl	237d8 <mem_acquire>
		if (!rx) {
   118fc:	b1a0      	cbz	r0, 11928 <rx_alloc+0x98>
			mem_release(link, &mem_link_rx.free);
			return;
		}

		link->mem = NULL;
   118fe:	2300      	movs	r3, #0
   11900:	606b      	str	r3, [r5, #4]
		rx->link = link;
   11902:	6005      	str	r5, [r0, #0]
 */
static inline void mfifo_by_idx_enqueue(uint8_t *fifo, uint8_t size, uint8_t idx,
					void *mem, uint8_t *last)
{
	/* API 2: fifo is array of void-ptrs */
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   11904:	f898 2003 	ldrb.w	r2, [r8, #3]
   11908:	f898 3000 	ldrb.w	r3, [r8]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1190c:	fb02 8303 	mla	r3, r2, r3, r8
   11910:	6058      	str	r0, [r3, #4]

		MFIFO_BY_IDX_ENQUEUE(ll_pdu_rx_free, idx, rx);

		ll_rx_link_inc_quota(-1);
   11912:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

	cpu_dmb(); /* Ensure data accesses are synchronized */
	*last = idx; /* Commit: Update write index */
   11916:	f888 4003 	strb.w	r4, [r8, #3]
   1191a:	f7ff ff49 	bl	117b0 <ll_rx_link_inc_quota>
   1191e:	e7d4      	b.n	118ca <rx_alloc+0x3a>
		rx = mem_acquire(&mem_pdu_rx.free);
   11920:	4815      	ldr	r0, [pc, #84]	; (11978 <rx_alloc+0xe8>)
   11922:	f011 ff59 	bl	237d8 <mem_acquire>
		if (!rx) {
   11926:	b928      	cbnz	r0, 11934 <rx_alloc+0xa4>
			mem_release(link, &mem_link_rx.free);
   11928:	4628      	mov	r0, r5
   1192a:	4912      	ldr	r1, [pc, #72]	; (11974 <rx_alloc+0xe4>)
	}
#endif /* CONFIG_BT_CONN */
}
   1192c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			mem_release(link, &mem_link_rx.free);
   11930:	f011 bf6b 	b.w	2380a <mem_release>
		rx->link = link;
   11934:	6005      	str	r5, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   11936:	f899 2003 	ldrb.w	r2, [r9, #3]
   1193a:	f899 3000 	ldrb.w	r3, [r9]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1193e:	fb02 9303 	mla	r3, r2, r3, r9
   11942:	6058      	str	r0, [r3, #4]
		ll_rx_link_inc_quota(-1);
   11944:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		max--;
   11948:	3f01      	subs	r7, #1
	*last = idx; /* Commit: Update write index */
   1194a:	f889 4003 	strb.w	r4, [r9, #3]
   1194e:	b2ff      	uxtb	r7, r7
		ll_rx_link_inc_quota(-1);
   11950:	f7ff ff2e 	bl	117b0 <ll_rx_link_inc_quota>
		max--;
   11954:	e7a7      	b.n	118a6 <rx_alloc+0x16>
		link = mem_acquire(&mem_link_rx.free);
   11956:	4640      	mov	r0, r8
   11958:	f011 ff3e 	bl	237d8 <mem_acquire>
		if (!link) {
   1195c:	4605      	mov	r5, r0
   1195e:	2800      	cmp	r0, #0
   11960:	d1de      	bne.n	11920 <rx_alloc+0x90>
}
   11962:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11966:	bf00      	nop
   11968:	20002798 	.word	0x20002798
   1196c:	2000091c 	.word	0x2000091c
   11970:	20000910 	.word	0x20000910
   11974:	2000279c 	.word	0x2000279c
   11978:	200027e8 	.word	0x200027e8

0001197c <tx_cmplt_get>:
}
#endif /* CONFIG_BT_CTLR_LOW_LAT_ULL */

#if defined(CONFIG_BT_CONN)
static uint8_t tx_cmplt_get(uint16_t *handle, uint8_t *first, uint8_t last)
{
   1197c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11980:	460c      	mov	r4, r1
	struct lll_tx *tx;
	uint8_t cmplt;

	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   11982:	4e29      	ldr	r6, [pc, #164]	; (11a28 <tx_cmplt_get+0xac>)
					   uint8_t first, uint8_t last, uint8_t *idx)
{
	void *p;
	uint8_t i;

	if (*idx >= count) {
   11984:	7823      	ldrb	r3, [r4, #0]
   11986:	7871      	ldrb	r1, [r6, #1]
   11988:	428b      	cmp	r3, r1
   1198a:	bf28      	it	cs
   1198c:	78b3      	ldrbcs	r3, [r6, #2]
{
   1198e:	4607      	mov	r7, r0
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   11990:	7830      	ldrb	r0, [r6, #0]
		*idx = first;
   11992:	bf28      	it	cs
   11994:	7023      	strbcs	r3, [r4, #0]
	}

	if (*idx == last) {
   11996:	7823      	ldrb	r3, [r4, #0]
   11998:	429a      	cmp	r2, r3
{
   1199a:	4691      	mov	r9, r2
   1199c:	d042      	beq.n	11a24 <tx_cmplt_get+0xa8>
		return NULL;
	}

	i = *idx + 1;
   1199e:	1c5a      	adds	r2, r3, #1
   119a0:	b2d2      	uxtb	r2, r2
	if (i == count) {
		i = 0U;
	}

	p = (void *)(fifo + (*idx) * size);
   119a2:	f8df 8088 	ldr.w	r8, [pc, #136]	; 11a2c <tx_cmplt_get+0xb0>
   119a6:	fb13 f300 	smulbb	r3, r3, r0
		i = 0U;
   119aa:	4291      	cmp	r1, r2
   119ac:	bf08      	it	eq
   119ae:	2200      	moveq	r2, #0

	*idx = i;
   119b0:	7022      	strb	r2, [r4, #0]
	p = (void *)(fifo + (*idx) * size);
   119b2:	eb08 0c03 	add.w	ip, r8, r3
				    first);
	if (!tx) {
		return 0;
	}

	*handle = tx->handle;
   119b6:	f838 3003 	ldrh.w	r3, [r8, r3]
   119ba:	803b      	strh	r3, [r7, #0]
	cmplt = 0U;
   119bc:	2500      	movs	r5, #0
	do {
		struct node_tx *node_tx;
		struct pdu_data *p;

		node_tx = tx->node;
   119be:	f8dc 0004 	ldr.w	r0, [ip, #4]
		p = (void *)node_tx->pdu;
		if (!node_tx || (node_tx == (void *)1) ||
   119c2:	2801      	cmp	r0, #1
		    (((uint32_t)node_tx & ~3) &&
   119c4:	f020 0203 	bic.w	r2, r0, #3
		if (!node_tx || (node_tx == (void *)1) ||
   119c8:	d906      	bls.n	119d8 <tx_cmplt_get+0x5c>
   119ca:	b34a      	cbz	r2, 11a20 <tx_cmplt_get+0xa4>
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
   119cc:	7903      	ldrb	r3, [r0, #4]
   119ce:	f003 0303 	and.w	r3, r3, #3
		    (((uint32_t)node_tx & ~3) &&
   119d2:	3b01      	subs	r3, #1
   119d4:	2b01      	cmp	r3, #1
   119d6:	d823      	bhi.n	11a20 <tx_cmplt_get+0xa4>
		      p->ll_id == PDU_DATA_LLID_DATA_CONTINUE))) {
			/* data packet, hence count num cmplt */
			tx->node = (void *)1;
			cmplt++;
   119d8:	3501      	adds	r5, #1
   119da:	b2ed      	uxtb	r5, r5
			tx->node = (void *)1;
   119dc:	2301      	movs	r3, #1
   119de:	f8cc 3004 	str.w	r3, [ip, #4]
		} else {
			/* ctrl packet or flushed, hence dont count num cmplt */
			tx->node = (void *)2;
		}

		if (((uint32_t)node_tx & ~3)) {
   119e2:	b10a      	cbz	r2, 119e8 <tx_cmplt_get+0x6c>
			ll_tx_mem_release(node_tx);
   119e4:	f001 fd54 	bl	13490 <ll_tx_mem_release>
	if (*idx >= count) {
   119e8:	7823      	ldrb	r3, [r4, #0]
		}

		tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   119ea:	7872      	ldrb	r2, [r6, #1]
   119ec:	7830      	ldrb	r0, [r6, #0]
   119ee:	4293      	cmp	r3, r2
   119f0:	bf24      	itt	cs
   119f2:	78b3      	ldrbcs	r3, [r6, #2]
		*idx = first;
   119f4:	7023      	strbcs	r3, [r4, #0]
	if (*idx == last) {
   119f6:	7823      	ldrb	r3, [r4, #0]
   119f8:	4599      	cmp	r9, r3
   119fa:	d00e      	beq.n	11a1a <tx_cmplt_get+0x9e>
	i = *idx + 1;
   119fc:	1c59      	adds	r1, r3, #1
   119fe:	b2c9      	uxtb	r1, r1
		i = 0U;
   11a00:	428a      	cmp	r2, r1
   11a02:	bf08      	it	eq
   11a04:	2100      	moveq	r1, #0
	p = (void *)(fifo + (*idx) * size);
   11a06:	fb13 f300 	smulbb	r3, r3, r0
	*idx = i;
   11a0a:	7021      	strb	r1, [r4, #0]
					    mfifo_tx_ack.n, mfifo_tx_ack.f,
					    last, first);
	} while (tx && tx->handle == *handle);
   11a0c:	f838 2003 	ldrh.w	r2, [r8, r3]
	p = (void *)(fifo + (*idx) * size);
   11a10:	eb08 0c03 	add.w	ip, r8, r3
   11a14:	883b      	ldrh	r3, [r7, #0]
   11a16:	429a      	cmp	r2, r3
   11a18:	d0d1      	beq.n	119be <tx_cmplt_get+0x42>

	return cmplt;
}
   11a1a:	4628      	mov	r0, r5
   11a1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			tx->node = (void *)2;
   11a20:	2302      	movs	r3, #2
   11a22:	e7dc      	b.n	119de <tx_cmplt_get+0x62>
		return 0;
   11a24:	2500      	movs	r5, #0
   11a26:	e7f8      	b.n	11a1a <tx_cmplt_get+0x9e>
   11a28:	20000a38 	.word	0x20000a38
   11a2c:	20000a3c 	.word	0x20000a3c

00011a30 <ull_ticker_status_give>:
	*((uint32_t volatile *)param) = status;
   11a30:	6008      	str	r0, [r1, #0]
   11a32:	4801      	ldr	r0, [pc, #4]	; (11a38 <ull_ticker_status_give+0x8>)
   11a34:	f009 bc68 	b.w	1b308 <z_impl_k_sem_give>
   11a38:	200029e4 	.word	0x200029e4

00011a3c <ll_rx_get>:
{
   11a3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
   11a40:	4f26      	ldr	r7, [pc, #152]	; (11adc <ll_rx_get+0xa0>)
   11a42:	f8df 809c 	ldr.w	r8, [pc, #156]	; 11ae0 <ll_rx_get+0xa4>
{
   11a46:	4605      	mov	r5, r0
   11a48:	460c      	mov	r4, r1
	*node_rx = NULL;
   11a4a:	2300      	movs	r3, #0
   11a4c:	602b      	str	r3, [r5, #0]
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
   11a4e:	e9d7 0100 	ldrd	r0, r1, [r7]
   11a52:	aa01      	add	r2, sp, #4
   11a54:	f011 ff25 	bl	238a2 <memq_peek>
	if (link) {
   11a58:	4606      	mov	r6, r0
   11a5a:	2800      	cmp	r0, #0
   11a5c:	d036      	beq.n	11acc <ll_rx_get+0x90>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   11a5e:	9b01      	ldr	r3, [sp, #4]
   11a60:	4920      	ldr	r1, [pc, #128]	; (11ae4 <ll_rx_get+0xa8>)
   11a62:	781a      	ldrb	r2, [r3, #0]
   11a64:	4620      	mov	r0, r4
   11a66:	f7ff ff89 	bl	1197c <tx_cmplt_get>
		if (!cmplt) {
   11a6a:	bb60      	cbnz	r0, 11ac6 <ll_rx_get+0x8a>
			f = mfifo_tx_ack.f;
   11a6c:	f898 3002 	ldrb.w	r3, [r8, #2]
   11a70:	f88d 3001 	strb.w	r3, [sp, #1]
				cmplt_curr = tx_cmplt_get(&h, &f,
   11a74:	f898 2003 	ldrb.w	r2, [r8, #3]
   11a78:	4681      	mov	r9, r0
   11a7a:	f10d 0101 	add.w	r1, sp, #1
   11a7e:	f10d 0002 	add.w	r0, sp, #2
   11a82:	f7ff ff7b 	bl	1197c <tx_cmplt_get>
			} while ((cmplt_prev != 0U) ||
   11a86:	ea49 0200 	orr.w	r2, r9, r0
   11a8a:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   11a8e:	d1f1      	bne.n	11a74 <ll_rx_get+0x38>
			} else if (rx->type == NODE_RX_TYPE_RELEASE) {
   11a90:	9b01      	ldr	r3, [sp, #4]
   11a92:	f893 9004 	ldrb.w	r9, [r3, #4]
   11a96:	f1b9 0f01 	cmp.w	r9, #1
   11a9a:	d112      	bne.n	11ac2 <ll_rx_get+0x86>
				(void)memq_dequeue(memq_ll_rx.tail,
   11a9c:	4639      	mov	r1, r7
   11a9e:	6878      	ldr	r0, [r7, #4]
   11aa0:	f011 ff07 	bl	238b2 <memq_dequeue>
				mem_release(link, &mem_link_rx.free);
   11aa4:	4910      	ldr	r1, [pc, #64]	; (11ae8 <ll_rx_get+0xac>)
   11aa6:	4630      	mov	r0, r6
   11aa8:	f011 feaf 	bl	2380a <mem_release>
				ll_rx_link_inc_quota(1);
   11aac:	4648      	mov	r0, r9
   11aae:	f7ff fe7f 	bl	117b0 <ll_rx_link_inc_quota>
				mem_release(rx, &mem_pdu_rx.free);
   11ab2:	9801      	ldr	r0, [sp, #4]
   11ab4:	490d      	ldr	r1, [pc, #52]	; (11aec <ll_rx_get+0xb0>)
   11ab6:	f011 fea8 	bl	2380a <mem_release>
				rx_alloc(1);
   11aba:	4648      	mov	r0, r9
   11abc:	f7ff fee8 	bl	11890 <rx_alloc>
				goto ll_rx_get_again;
   11ac0:	e7c3      	b.n	11a4a <ll_rx_get+0xe>
			*node_rx = rx;
   11ac2:	602b      	str	r3, [r5, #0]
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   11ac4:	4610      	mov	r0, r2
}
   11ac6:	b003      	add	sp, #12
   11ac8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, mfifo_tx_ack.l);
   11acc:	f898 2003 	ldrb.w	r2, [r8, #3]
   11ad0:	4904      	ldr	r1, [pc, #16]	; (11ae4 <ll_rx_get+0xa8>)
   11ad2:	4620      	mov	r0, r4
   11ad4:	f7ff ff52 	bl	1197c <tx_cmplt_get>
   11ad8:	e7f5      	b.n	11ac6 <ll_rx_get+0x8a>
   11ada:	bf00      	nop
   11adc:	200029c8 	.word	0x200029c8
   11ae0:	20000a38 	.word	0x20000a38
   11ae4:	20000a3a 	.word	0x20000a3a
   11ae8:	2000279c 	.word	0x2000279c
   11aec:	200027e8 	.word	0x200027e8

00011af0 <ll_rx_dequeue>:
{
   11af0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   11af2:	4948      	ldr	r1, [pc, #288]	; (11c14 <ll_rx_dequeue+0x124>)
	struct node_rx_hdr *rx = NULL;
   11af4:	2300      	movs	r3, #0
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   11af6:	6848      	ldr	r0, [r1, #4]
	struct node_rx_hdr *rx = NULL;
   11af8:	9301      	str	r3, [sp, #4]
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   11afa:	aa01      	add	r2, sp, #4
   11afc:	f011 fed9 	bl	238b2 <memq_dequeue>
	LL_ASSERT(link);
   11b00:	4604      	mov	r4, r0
   11b02:	b960      	cbnz	r0, 11b1e <ll_rx_dequeue+0x2e>
   11b04:	4a44      	ldr	r2, [pc, #272]	; (11c18 <ll_rx_dequeue+0x128>)
   11b06:	4945      	ldr	r1, [pc, #276]	; (11c1c <ll_rx_dequeue+0x12c>)
   11b08:	4845      	ldr	r0, [pc, #276]	; (11c20 <ll_rx_dequeue+0x130>)
   11b0a:	f240 33a1 	movw	r3, #929	; 0x3a1
   11b0e:	f00a fbdb 	bl	1c2c8 <printk>
   11b12:	4040      	eors	r0, r0
   11b14:	f380 8811 	msr	BASEPRI, r0
   11b18:	f04f 0003 	mov.w	r0, #3
   11b1c:	df02      	svc	2
	mem_release(link, &mem_link_rx.free);
   11b1e:	4941      	ldr	r1, [pc, #260]	; (11c24 <ll_rx_dequeue+0x134>)
   11b20:	4620      	mov	r0, r4
   11b22:	f011 fe72 	bl	2380a <mem_release>
	switch (rx->type) {
   11b26:	9b01      	ldr	r3, [sp, #4]
   11b28:	7919      	ldrb	r1, [r3, #4]
   11b2a:	291b      	cmp	r1, #27
   11b2c:	d86f      	bhi.n	11c0e <ll_rx_dequeue+0x11e>
   11b2e:	483e      	ldr	r0, [pc, #248]	; (11c28 <ll_rx_dequeue+0x138>)
   11b30:	2201      	movs	r2, #1
   11b32:	408a      	lsls	r2, r1
   11b34:	4202      	tst	r2, r0
   11b36:	d15a      	bne.n	11bee <ll_rx_dequeue+0xfe>
   11b38:	0252      	lsls	r2, r2, #9
   11b3a:	d568      	bpl.n	11c0e <ll_rx_dequeue+0x11e>
		} else if ((cc->status == BT_HCI_ERR_ADV_TIMEOUT) || cc->role) {
   11b3c:	7f1a      	ldrb	r2, [r3, #28]
   11b3e:	2a3c      	cmp	r2, #60	; 0x3c
   11b40:	d002      	beq.n	11b48 <ll_rx_dequeue+0x58>
   11b42:	7f59      	ldrb	r1, [r3, #29]
   11b44:	2900      	cmp	r1, #0
   11b46:	d04d      	beq.n	11be4 <ll_rx_dequeue+0xf4>
			lll = ftr->param;
   11b48:	689e      	ldr	r6, [r3, #8]
			if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
   11b4a:	2a3c      	cmp	r2, #60	; 0x3c
			adv = HDR_LLL2ULL(lll);
   11b4c:	6835      	ldr	r5, [r6, #0]
			if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
   11b4e:	d140      	bne.n	11bd2 <ll_rx_dequeue+0xe2>
				conn_lll = lll->conn;
   11b50:	6874      	ldr	r4, [r6, #4]
				LL_ASSERT(conn_lll);
   11b52:	b964      	cbnz	r4, 11b6e <ll_rx_dequeue+0x7e>
   11b54:	4a30      	ldr	r2, [pc, #192]	; (11c18 <ll_rx_dequeue+0x128>)
   11b56:	4935      	ldr	r1, [pc, #212]	; (11c2c <ll_rx_dequeue+0x13c>)
   11b58:	4831      	ldr	r0, [pc, #196]	; (11c20 <ll_rx_dequeue+0x130>)
   11b5a:	f240 4317 	movw	r3, #1047	; 0x417
   11b5e:	f00a fbb3 	bl	1c2c8 <printk>
   11b62:	4040      	eors	r0, r0
   11b64:	f380 8811 	msr	BASEPRI, r0
   11b68:	f04f 0003 	mov.w	r0, #3
   11b6c:	df02      	svc	2
				lll->conn = NULL;
   11b6e:	2300      	movs	r3, #0
   11b70:	6073      	str	r3, [r6, #4]
				LL_ASSERT(!conn_lll->link_tx_free);
   11b72:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   11b74:	b163      	cbz	r3, 11b90 <ll_rx_dequeue+0xa0>
   11b76:	4a28      	ldr	r2, [pc, #160]	; (11c18 <ll_rx_dequeue+0x128>)
   11b78:	492d      	ldr	r1, [pc, #180]	; (11c30 <ll_rx_dequeue+0x140>)
   11b7a:	4829      	ldr	r0, [pc, #164]	; (11c20 <ll_rx_dequeue+0x130>)
   11b7c:	f240 431a 	movw	r3, #1050	; 0x41a
   11b80:	f00a fba2 	bl	1c2c8 <printk>
   11b84:	4040      	eors	r0, r0
   11b86:	f380 8811 	msr	BASEPRI, r0
   11b8a:	f04f 0003 	mov.w	r0, #3
   11b8e:	df02      	svc	2
				link = memq_deinit(&conn_lll->memq_tx.head,
   11b90:	f104 0140 	add.w	r1, r4, #64	; 0x40
   11b94:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   11b98:	f011 fe71 	bl	2387e <memq_deinit>
				LL_ASSERT(link);
   11b9c:	4606      	mov	r6, r0
   11b9e:	b960      	cbnz	r0, 11bba <ll_rx_dequeue+0xca>
   11ba0:	4a1d      	ldr	r2, [pc, #116]	; (11c18 <ll_rx_dequeue+0x128>)
   11ba2:	491e      	ldr	r1, [pc, #120]	; (11c1c <ll_rx_dequeue+0x12c>)
   11ba4:	481e      	ldr	r0, [pc, #120]	; (11c20 <ll_rx_dequeue+0x130>)
   11ba6:	f240 431d 	movw	r3, #1053	; 0x41d
   11baa:	f00a fb8d 	bl	1c2c8 <printk>
   11bae:	4040      	eors	r0, r0
   11bb0:	f380 8811 	msr	BASEPRI, r0
   11bb4:	f04f 0003 	mov.w	r0, #3
   11bb8:	df02      	svc	2
				ll_conn_release(conn);
   11bba:	6820      	ldr	r0, [r4, #0]
				conn_lll->link_tx_free = link;
   11bbc:	64e6      	str	r6, [r4, #76]	; 0x4c
				ll_conn_release(conn);
   11bbe:	f001 fbdd 	bl	1337c <ll_conn_release>
			adv->is_enabled = 0U;
   11bc2:	f895 306a 	ldrb.w	r3, [r5, #106]	; 0x6a
   11bc6:	f36f 0300 	bfc	r3, #0, #1
   11bca:	f885 306a 	strb.w	r3, [r5, #106]	; 0x6a
}
   11bce:	b002      	add	sp, #8
   11bd0:	bd70      	pop	{r4, r5, r6, pc}
				if (adv->node_rx_cc_free) {
   11bd2:	6e68      	ldr	r0, [r5, #100]	; 0x64
   11bd4:	2800      	cmp	r0, #0
   11bd6:	d0f4      	beq.n	11bc2 <ll_rx_dequeue+0xd2>
					adv->node_rx_cc_free = NULL;
   11bd8:	2300      	movs	r3, #0
					mem_release(rx_free, &mem_pdu_rx.free);
   11bda:	4916      	ldr	r1, [pc, #88]	; (11c34 <ll_rx_dequeue+0x144>)
					adv->node_rx_cc_free = NULL;
   11bdc:	666b      	str	r3, [r5, #100]	; 0x64
					mem_release(rx_free, &mem_pdu_rx.free);
   11bde:	f011 fe14 	bl	2380a <mem_release>
   11be2:	e7ee      	b.n	11bc2 <ll_rx_dequeue+0xd2>
			LL_ASSERT(0);
   11be4:	f240 4354 	movw	r3, #1108	; 0x454
		LL_ASSERT(0);
   11be8:	4a0b      	ldr	r2, [pc, #44]	; (11c18 <ll_rx_dequeue+0x128>)
   11bea:	4913      	ldr	r1, [pc, #76]	; (11c38 <ll_rx_dequeue+0x148>)
   11bec:	e005      	b.n	11bfa <ll_rx_dequeue+0x10a>
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
   11bee:	2900      	cmp	r1, #0
   11bf0:	d1ed      	bne.n	11bce <ll_rx_dequeue+0xde>
   11bf2:	4a09      	ldr	r2, [pc, #36]	; (11c18 <ll_rx_dequeue+0x128>)
   11bf4:	4911      	ldr	r1, [pc, #68]	; (11c3c <ll_rx_dequeue+0x14c>)
   11bf6:	f240 43c3 	movw	r3, #1219	; 0x4c3
		LL_ASSERT(0);
   11bfa:	4809      	ldr	r0, [pc, #36]	; (11c20 <ll_rx_dequeue+0x130>)
   11bfc:	f00a fb64 	bl	1c2c8 <printk>
   11c00:	4040      	eors	r0, r0
   11c02:	f380 8811 	msr	BASEPRI, r0
   11c06:	f04f 0003 	mov.w	r0, #3
   11c0a:	df02      	svc	2
}
   11c0c:	e7df      	b.n	11bce <ll_rx_dequeue+0xde>
		LL_ASSERT(0);
   11c0e:	f240 43c7 	movw	r3, #1223	; 0x4c7
   11c12:	e7e9      	b.n	11be8 <ll_rx_dequeue+0xf8>
   11c14:	200029c8 	.word	0x200029c8
   11c18:	000278ee 	.word	0x000278ee
   11c1c:	00027d05 	.word	0x00027d05
   11c20:	00027514 	.word	0x00027514
   11c24:	2000279c 	.word	0x2000279c
   11c28:	0b800029 	.word	0x0b800029
   11c2c:	00027968 	.word	0x00027968
   11c30:	00027971 	.word	0x00027971
   11c34:	200027e8 	.word	0x200027e8
   11c38:	0002826c 	.word	0x0002826c
   11c3c:	00027989 	.word	0x00027989

00011c40 <ll_rx_mem_release>:
{
   11c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx = *node_rx;
   11c44:	6804      	ldr	r4, [r0, #0]
			LL_ASSERT(0);
   11c46:	4d4a      	ldr	r5, [pc, #296]	; (11d70 <ll_rx_mem_release+0x130>)
   11c48:	f8df 8128 	ldr.w	r8, [pc, #296]	; 11d74 <ll_rx_mem_release+0x134>
   11c4c:	4e4a      	ldr	r6, [pc, #296]	; (11d78 <ll_rx_mem_release+0x138>)
{
   11c4e:	4607      	mov	r7, r0
	while (rx) {
   11c50:	b92c      	cbnz	r4, 11c5e <ll_rx_mem_release+0x1e>
	*node_rx = rx;
   11c52:	603c      	str	r4, [r7, #0]
	rx_alloc(UINT8_MAX);
   11c54:	20ff      	movs	r0, #255	; 0xff
}
   11c56:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx_alloc(UINT8_MAX);
   11c5a:	f7ff be19 	b.w	11890 <rx_alloc>
		switch (rx_free->type) {
   11c5e:	7923      	ldrb	r3, [r4, #4]
		rx = rx->next;
   11c60:	f8d4 9000 	ldr.w	r9, [r4]
		switch (rx_free->type) {
   11c64:	2b05      	cmp	r3, #5
   11c66:	d813      	bhi.n	11c90 <ll_rx_mem_release+0x50>
   11c68:	2201      	movs	r2, #1
   11c6a:	fa02 f303 	lsl.w	r3, r2, r3
   11c6e:	f013 0f29 	tst.w	r3, #41	; 0x29
   11c72:	d13a      	bne.n	11cea <ll_rx_mem_release+0xaa>
			LL_ASSERT(0);
   11c74:	f240 53fa 	movw	r3, #1530	; 0x5fa
   11c78:	462a      	mov	r2, r5
   11c7a:	4641      	mov	r1, r8
   11c7c:	4630      	mov	r0, r6
   11c7e:	f00a fb23 	bl	1c2c8 <printk>
   11c82:	4040      	eors	r0, r0
   11c84:	f380 8811 	msr	BASEPRI, r0
   11c88:	f04f 0003 	mov.w	r0, #3
   11c8c:	df02      	svc	2
			break;
   11c8e:	e01c      	b.n	11cca <ll_rx_mem_release+0x8a>
		switch (rx_free->type) {
   11c90:	3b16      	subs	r3, #22
   11c92:	b2da      	uxtb	r2, r3
   11c94:	2a05      	cmp	r2, #5
   11c96:	d8ed      	bhi.n	11c74 <ll_rx_mem_release+0x34>
   11c98:	2b05      	cmp	r3, #5
   11c9a:	d8eb      	bhi.n	11c74 <ll_rx_mem_release+0x34>
   11c9c:	a201      	add	r2, pc, #4	; (adr r2, 11ca4 <ll_rx_mem_release+0x64>)
   11c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   11ca2:	bf00      	nop
   11ca4:	00011cbd 	.word	0x00011cbd
   11ca8:	00011d11 	.word	0x00011d11
   11cac:	00011ceb 	.word	0x00011ceb
   11cb0:	00011ceb 	.word	0x00011ceb
   11cb4:	00011c75 	.word	0x00011c75
   11cb8:	00011ceb 	.word	0x00011ceb
			} else if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
   11cbc:	7f23      	ldrb	r3, [r4, #28]
   11cbe:	2b3c      	cmp	r3, #60	; 0x3c
   11cc0:	d105      	bne.n	11cce <ll_rx_mem_release+0x8e>
			mem_release(rx_free, &mem_pdu_rx.free);
   11cc2:	492e      	ldr	r1, [pc, #184]	; (11d7c <ll_rx_mem_release+0x13c>)
   11cc4:	4620      	mov	r0, r4
   11cc6:	f011 fda0 	bl	2380a <mem_release>
{
   11cca:	464c      	mov	r4, r9
   11ccc:	e7c0      	b.n	11c50 <ll_rx_mem_release+0x10>
				LL_ASSERT(!cc->status);
   11cce:	b163      	cbz	r3, 11cea <ll_rx_mem_release+0xaa>
   11cd0:	492b      	ldr	r1, [pc, #172]	; (11d80 <ll_rx_mem_release+0x140>)
   11cd2:	f240 532b 	movw	r3, #1323	; 0x52b
   11cd6:	462a      	mov	r2, r5
   11cd8:	4630      	mov	r0, r6
   11cda:	f00a faf5 	bl	1c2c8 <printk>
   11cde:	4040      	eors	r0, r0
   11ce0:	f380 8811 	msr	BASEPRI, r0
   11ce4:	f04f 0003 	mov.w	r0, #3
   11ce8:	df02      	svc	2
			LL_ASSERT(rx_free->type != NODE_RX_TYPE_NONE);
   11cea:	7923      	ldrb	r3, [r4, #4]
   11cec:	b963      	cbnz	r3, 11d08 <ll_rx_mem_release+0xc8>
   11cee:	4925      	ldr	r1, [pc, #148]	; (11d84 <ll_rx_mem_release+0x144>)
   11cf0:	f240 537d 	movw	r3, #1405	; 0x57d
   11cf4:	462a      	mov	r2, r5
   11cf6:	4630      	mov	r0, r6
   11cf8:	f00a fae6 	bl	1c2c8 <printk>
   11cfc:	4040      	eors	r0, r0
   11cfe:	f380 8811 	msr	BASEPRI, r0
   11d02:	f04f 0003 	mov.w	r0, #3
   11d06:	df02      	svc	2
			ll_rx_link_inc_quota(1);
   11d08:	2001      	movs	r0, #1
   11d0a:	f7ff fd51 	bl	117b0 <ll_rx_link_inc_quota>
   11d0e:	e7d8      	b.n	11cc2 <ll_rx_mem_release+0x82>
			if (IS_ACL_HANDLE(rx_free->handle)) {
   11d10:	88e0      	ldrh	r0, [r4, #6]
   11d12:	2800      	cmp	r0, #0
   11d14:	d1d9      	bne.n	11cca <ll_rx_mem_release+0x8a>
				conn = ll_conn_get(rx_free->handle);
   11d16:	f001 fbad 	bl	13474 <ll_conn_get>
				LL_ASSERT(!conn->lll.link_tx_free);
   11d1a:	6e83      	ldr	r3, [r0, #104]	; 0x68
				conn = ll_conn_get(rx_free->handle);
   11d1c:	4604      	mov	r4, r0
				LL_ASSERT(!conn->lll.link_tx_free);
   11d1e:	b163      	cbz	r3, 11d3a <ll_rx_mem_release+0xfa>
   11d20:	4919      	ldr	r1, [pc, #100]	; (11d88 <ll_rx_mem_release+0x148>)
   11d22:	f240 53ec 	movw	r3, #1516	; 0x5ec
   11d26:	462a      	mov	r2, r5
   11d28:	4630      	mov	r0, r6
   11d2a:	f00a facd 	bl	1c2c8 <printk>
   11d2e:	4040      	eors	r0, r0
   11d30:	f380 8811 	msr	BASEPRI, r0
   11d34:	f04f 0003 	mov.w	r0, #3
   11d38:	df02      	svc	2
				link = memq_deinit(&conn->lll.memq_tx.head,
   11d3a:	f104 015c 	add.w	r1, r4, #92	; 0x5c
   11d3e:	f104 0058 	add.w	r0, r4, #88	; 0x58
   11d42:	f011 fd9c 	bl	2387e <memq_deinit>
				LL_ASSERT(link);
   11d46:	4682      	mov	sl, r0
   11d48:	b960      	cbnz	r0, 11d64 <ll_rx_mem_release+0x124>
   11d4a:	4910      	ldr	r1, [pc, #64]	; (11d8c <ll_rx_mem_release+0x14c>)
   11d4c:	f240 53ef 	movw	r3, #1519	; 0x5ef
   11d50:	462a      	mov	r2, r5
   11d52:	4630      	mov	r0, r6
   11d54:	f00a fab8 	bl	1c2c8 <printk>
   11d58:	4040      	eors	r0, r0
   11d5a:	f380 8811 	msr	BASEPRI, r0
   11d5e:	f04f 0003 	mov.w	r0, #3
   11d62:	df02      	svc	2
				conn->lll.link_tx_free = link;
   11d64:	f8c4 a068 	str.w	sl, [r4, #104]	; 0x68
				ll_conn_release(conn);
   11d68:	4620      	mov	r0, r4
   11d6a:	f001 fb07 	bl	1337c <ll_conn_release>
   11d6e:	e7ac      	b.n	11cca <ll_rx_mem_release+0x8a>
   11d70:	000278ee 	.word	0x000278ee
   11d74:	0002826c 	.word	0x0002826c
   11d78:	00027514 	.word	0x00027514
   11d7c:	200027e8 	.word	0x200027e8
   11d80:	000279a7 	.word	0x000279a7
   11d84:	000279b3 	.word	0x000279b3
   11d88:	000279d6 	.word	0x000279d6
   11d8c:	00027d05 	.word	0x00027d05

00011d90 <ll_rx_link_alloc>:
	return mem_acquire(&mem_link_rx.free);
   11d90:	4801      	ldr	r0, [pc, #4]	; (11d98 <ll_rx_link_alloc+0x8>)
   11d92:	f011 bd21 	b.w	237d8 <mem_acquire>
   11d96:	bf00      	nop
   11d98:	2000279c 	.word	0x2000279c

00011d9c <ll_rx_link_release>:
	mem_release(link, &mem_link_rx.free);
   11d9c:	4901      	ldr	r1, [pc, #4]	; (11da4 <ll_rx_link_release+0x8>)
   11d9e:	f011 bd34 	b.w	2380a <mem_release>
   11da2:	bf00      	nop
   11da4:	2000279c 	.word	0x2000279c

00011da8 <ll_rx_alloc>:
	return mem_acquire(&mem_pdu_rx.free);
   11da8:	4801      	ldr	r0, [pc, #4]	; (11db0 <ll_rx_alloc+0x8>)
   11daa:	f011 bd15 	b.w	237d8 <mem_acquire>
   11dae:	bf00      	nop
   11db0:	200027e8 	.word	0x200027e8

00011db4 <ll_rx_release>:
	mem_release(node_rx, &mem_pdu_rx.free);
   11db4:	4901      	ldr	r1, [pc, #4]	; (11dbc <ll_rx_release+0x8>)
   11db6:	f011 bd28 	b.w	2380a <mem_release>
   11dba:	bf00      	nop
   11dbc:	200027e8 	.word	0x200027e8

00011dc0 <ll_rx_put>:
	rx_hdr->ack_last = mfifo_tx_ack.l;
   11dc0:	4b02      	ldr	r3, [pc, #8]	; (11dcc <ll_rx_put+0xc>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   11dc2:	4a03      	ldr	r2, [pc, #12]	; (11dd0 <ll_rx_put+0x10>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   11dc4:	78db      	ldrb	r3, [r3, #3]
   11dc6:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   11dc8:	f011 bd64 	b.w	23894 <memq_enqueue>
   11dcc:	20000a38 	.word	0x20000a38
   11dd0:	200029cc 	.word	0x200029cc

00011dd4 <ll_rx_sched>:
	k_sem_give(sem_recv);
   11dd4:	4b01      	ldr	r3, [pc, #4]	; (11ddc <ll_rx_sched+0x8>)
   11dd6:	6818      	ldr	r0, [r3, #0]
   11dd8:	f009 ba96 	b.w	1b308 <z_impl_k_sem_give>
   11ddc:	200029e0 	.word	0x200029e0

00011de0 <rx_demux>:
{
   11de0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   11de2:	4c3c      	ldr	r4, [pc, #240]	; (11ed4 <rx_demux+0xf4>)
#if defined(CONFIG_BT_CTLR_USER_EXT)
		/* Try proprietary demuxing */
		rx_demux_rx_proprietary(link, rx, memq_ull_rx.tail,
					&memq_ull_rx.head);
#else
		LL_ASSERT(0);
   11de4:	4e3c      	ldr	r6, [pc, #240]	; (11ed8 <rx_demux+0xf8>)
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   11de6:	e9d4 0100 	ldrd	r0, r1, [r4]
   11dea:	aa01      	add	r2, sp, #4
   11dec:	f011 fd59 	bl	238a2 <memq_peek>
		if (link) {
   11df0:	4605      	mov	r5, r0
   11df2:	2800      	cmp	r0, #0
   11df4:	d05d      	beq.n	11eb2 <rx_demux+0xd2>
			LL_ASSERT(rx);
   11df6:	9b01      	ldr	r3, [sp, #4]
   11df8:	b963      	cbnz	r3, 11e14 <rx_demux+0x34>
   11dfa:	4938      	ldr	r1, [pc, #224]	; (11edc <rx_demux+0xfc>)
   11dfc:	4838      	ldr	r0, [pc, #224]	; (11ee0 <rx_demux+0x100>)
   11dfe:	f44f 630b 	mov.w	r3, #2224	; 0x8b0
   11e02:	4632      	mov	r2, r6
   11e04:	f00a fa60 	bl	1c2c8 <printk>
   11e08:	4040      	eors	r0, r0
   11e0a:	f380 8811 	msr	BASEPRI, r0
   11e0e:	f04f 0003 	mov.w	r0, #3
   11e12:	df02      	svc	2
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
   11e14:	9b01      	ldr	r3, [sp, #4]
   11e16:	aa02      	add	r2, sp, #8
   11e18:	7818      	ldrb	r0, [r3, #0]
   11e1a:	f10d 0102 	add.w	r1, sp, #2
   11e1e:	f002 fa61 	bl	142e4 <ull_conn_ack_by_last_peek>
			if (link_tx) {
   11e22:	4602      	mov	r2, r0
   11e24:	9801      	ldr	r0, [sp, #4]
   11e26:	b132      	cbz	r2, 11e36 <rx_demux+0x56>
				rx_demux_conn_tx_ack(rx->ack_last, handle,
   11e28:	9b02      	ldr	r3, [sp, #8]
   11e2a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   11e2e:	7800      	ldrb	r0, [r0, #0]
				rx_demux_conn_tx_ack(ack_last, handle,
   11e30:	f012 f85b 	bl	23eea <rx_demux_conn_tx_ack>
	} while (link);
   11e34:	e7d7      	b.n	11de6 <rx_demux+0x6>
				nack = rx_demux_rx(link, rx);
   11e36:	9003      	str	r0, [sp, #12]
	switch (rx->type) {
   11e38:	7903      	ldrb	r3, [r0, #4]
   11e3a:	2b05      	cmp	r3, #5
   11e3c:	d016      	beq.n	11e6c <rx_demux+0x8c>
   11e3e:	d811      	bhi.n	11e64 <rx_demux+0x84>
   11e40:	2b01      	cmp	r3, #1
   11e42:	d013      	beq.n	11e6c <rx_demux+0x8c>
   11e44:	2b03      	cmp	r3, #3
   11e46:	d021      	beq.n	11e8c <rx_demux+0xac>
		LL_ASSERT(0);
   11e48:	4926      	ldr	r1, [pc, #152]	; (11ee4 <rx_demux+0x104>)
   11e4a:	4825      	ldr	r0, [pc, #148]	; (11ee0 <rx_demux+0x100>)
   11e4c:	f640 13ff 	movw	r3, #2559	; 0x9ff
   11e50:	4632      	mov	r2, r6
   11e52:	f00a fa39 	bl	1c2c8 <printk>
   11e56:	4040      	eors	r0, r0
   11e58:	f380 8811 	msr	BASEPRI, r0
   11e5c:	f04f 0003 	mov.w	r0, #3
   11e60:	df02      	svc	2
			if (nack) {
   11e62:	e7c0      	b.n	11de6 <rx_demux+0x6>
	switch (rx->type) {
   11e64:	2b16      	cmp	r3, #22
   11e66:	d008      	beq.n	11e7a <rx_demux+0x9a>
   11e68:	2b17      	cmp	r3, #23
   11e6a:	d1ed      	bne.n	11e48 <rx_demux+0x68>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   11e6c:	4621      	mov	r1, r4
   11e6e:	6860      	ldr	r0, [r4, #4]
   11e70:	2200      	movs	r2, #0
   11e72:	f011 fd1e 	bl	238b2 <memq_dequeue>
		ll_rx_put(link, rx);
   11e76:	9903      	ldr	r1, [sp, #12]
   11e78:	e015      	b.n	11ea6 <rx_demux+0xc6>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   11e7a:	4621      	mov	r1, r4
   11e7c:	6860      	ldr	r0, [r4, #4]
   11e7e:	f011 fd18 	bl	238b2 <memq_dequeue>
		ull_conn_setup(link, rx);
   11e82:	9903      	ldr	r1, [sp, #12]
   11e84:	4628      	mov	r0, r5
   11e86:	f001 fba7 	bl	135d8 <ull_conn_setup>
			if (nack) {
   11e8a:	e7ac      	b.n	11de6 <rx_demux+0x6>
		nack = ull_conn_rx(link, (void *)&rx);
   11e8c:	a903      	add	r1, sp, #12
   11e8e:	4628      	mov	r0, r5
   11e90:	f001 fbca 	bl	13628 <ull_conn_rx>
		if (nack) {
   11e94:	4602      	mov	r2, r0
   11e96:	b9d0      	cbnz	r0, 11ece <rx_demux+0xee>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   11e98:	4621      	mov	r1, r4
   11e9a:	6860      	ldr	r0, [r4, #4]
   11e9c:	f011 fd09 	bl	238b2 <memq_dequeue>
		if (rx) {
   11ea0:	9903      	ldr	r1, [sp, #12]
   11ea2:	2900      	cmp	r1, #0
   11ea4:	d09f      	beq.n	11de6 <rx_demux+0x6>
		ll_rx_put(link, rx);
   11ea6:	4628      	mov	r0, r5
   11ea8:	f7ff ff8a 	bl	11dc0 <ll_rx_put>
		ll_rx_sched();
   11eac:	f7ff ff92 	bl	11dd4 <ll_rx_sched>
			if (nack) {
   11eb0:	e799      	b.n	11de6 <rx_demux+0x6>
			link = ull_conn_ack_peek(&ack_last, &handle, &node_tx);
   11eb2:	aa03      	add	r2, sp, #12
   11eb4:	a902      	add	r1, sp, #8
   11eb6:	f10d 0002 	add.w	r0, sp, #2
   11eba:	f002 f9fd 	bl	142b8 <ull_conn_ack_peek>
			if (link) {
   11ebe:	4602      	mov	r2, r0
   11ec0:	b128      	cbz	r0, 11ece <rx_demux+0xee>
				rx_demux_conn_tx_ack(ack_last, handle,
   11ec2:	9b03      	ldr	r3, [sp, #12]
   11ec4:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   11ec8:	f89d 0002 	ldrb.w	r0, [sp, #2]
   11ecc:	e7b0      	b.n	11e30 <rx_demux+0x50>
}
   11ece:	b004      	add	sp, #16
   11ed0:	bd70      	pop	{r4, r5, r6, pc}
   11ed2:	bf00      	nop
   11ed4:	200029d8 	.word	0x200029d8
   11ed8:	000278ee 	.word	0x000278ee
   11edc:	00028008 	.word	0x00028008
   11ee0:	00027514 	.word	0x00027514
   11ee4:	0002826c 	.word	0x0002826c

00011ee8 <ll_pdu_rx_alloc_peek>:
{
   11ee8:	b510      	push	{r4, lr}
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   11eea:	4a0a      	ldr	r2, [pc, #40]	; (11f14 <ll_pdu_rx_alloc_peek+0x2c>)
   11eec:	7891      	ldrb	r1, [r2, #2]
   11eee:	78d4      	ldrb	r4, [r2, #3]
   11ef0:	7853      	ldrb	r3, [r2, #1]
	if (last >= first) {
   11ef2:	42a1      	cmp	r1, r4
		return count - first + last;
   11ef4:	bf8a      	itet	hi
   11ef6:	191b      	addhi	r3, r3, r4
		return last - first;
   11ef8:	1a63      	subls	r3, r4, r1
		return count - first + last;
   11efa:	1a5b      	subhi	r3, r3, r1
   11efc:	b2db      	uxtb	r3, r3
   11efe:	4298      	cmp	r0, r3
   11f00:	d806      	bhi.n	11f10 <ll_pdu_rx_alloc_peek+0x28>
	if (first == last) {
   11f02:	42a1      	cmp	r1, r4
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   11f04:	7813      	ldrb	r3, [r2, #0]
   11f06:	d003      	beq.n	11f10 <ll_pdu_rx_alloc_peek+0x28>
	return *((void **)(fifo + first * size));
   11f08:	fb01 2203 	mla	r2, r1, r3, r2
   11f0c:	6850      	ldr	r0, [r2, #4]
}
   11f0e:	bd10      	pop	{r4, pc}
		return NULL;
   11f10:	2000      	movs	r0, #0
   11f12:	e7fc      	b.n	11f0e <ll_pdu_rx_alloc_peek+0x26>
   11f14:	20000910 	.word	0x20000910

00011f18 <ll_pdu_rx_alloc>:
{
   11f18:	b510      	push	{r4, lr}
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
   11f1a:	4a09      	ldr	r2, [pc, #36]	; (11f40 <ll_pdu_rx_alloc+0x28>)
 * @return              Head buffer; or NULL if queue was empty
 */
static inline void *mfifo_dequeue(uint8_t *fifo, uint8_t size, uint8_t count,
				  uint8_t last, uint8_t *first)
{
	uint8_t _first = *first; /* Copy read-index */
   11f1c:	7893      	ldrb	r3, [r2, #2]
	void *mem;

	/* Queue is empty if first == last */
	if (_first == last) {
   11f1e:	78d0      	ldrb	r0, [r2, #3]
   11f20:	7811      	ldrb	r1, [r2, #0]
   11f22:	7854      	ldrb	r4, [r2, #1]
   11f24:	4298      	cmp	r0, r3
   11f26:	d009      	beq.n	11f3c <ll_pdu_rx_alloc+0x24>
	}

	/* Obtain address of head buffer.
	 * API 2: fifo is array of void-ptrs
	 */
	mem = *((void **)(fifo + _first * size));
   11f28:	fb03 2101 	mla	r1, r3, r1, r2

	/* Circular buffer increment read-index modulo 'count' */
	_first += 1U;
   11f2c:	3301      	adds	r3, #1
   11f2e:	b2db      	uxtb	r3, r3
	if (_first == count) {
		_first = 0U;
   11f30:	429c      	cmp	r4, r3
   11f32:	bf08      	it	eq
   11f34:	2300      	moveq	r3, #0
	mem = *((void **)(fifo + _first * size));
   11f36:	6848      	ldr	r0, [r1, #4]
	}

	*first = _first; /* Write back read-index */
   11f38:	7093      	strb	r3, [r2, #2]
}
   11f3a:	bd10      	pop	{r4, pc}
		return NULL;
   11f3c:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
   11f3e:	e7fc      	b.n	11f3a <ll_pdu_rx_alloc+0x22>
   11f40:	20000910 	.word	0x20000910

00011f44 <ll_tx_ack_put>:
{
   11f44:	b570      	push	{r4, r5, r6, lr}
	idx = MFIFO_ENQUEUE_GET(tx_ack, (void **)&tx);
   11f46:	4a12      	ldr	r2, [pc, #72]	; (11f90 <ll_tx_ack_put+0x4c>)
   11f48:	78d6      	ldrb	r6, [r2, #3]
	if (last == count) {
   11f4a:	7855      	ldrb	r5, [r2, #1]
   11f4c:	7894      	ldrb	r4, [r2, #2]
	last = last + 1;
   11f4e:	1c73      	adds	r3, r6, #1
   11f50:	b2db      	uxtb	r3, r3
		last = 0U;
   11f52:	429d      	cmp	r5, r3
   11f54:	bf08      	it	eq
   11f56:	2300      	moveq	r3, #0
	if (last == first) {
   11f58:	429c      	cmp	r4, r3
   11f5a:	d10f      	bne.n	11f7c <ll_tx_ack_put+0x38>
	LL_ASSERT(tx);
   11f5c:	4a0d      	ldr	r2, [pc, #52]	; (11f94 <ll_tx_ack_put+0x50>)
   11f5e:	490e      	ldr	r1, [pc, #56]	; (11f98 <ll_tx_ack_put+0x54>)
   11f60:	480e      	ldr	r0, [pc, #56]	; (11f9c <ll_tx_ack_put+0x58>)
   11f62:	f240 634e 	movw	r3, #1614	; 0x64e
   11f66:	f00a f9af 	bl	1c2c8 <printk>
   11f6a:	4040      	eors	r0, r0
   11f6c:	f380 8811 	msr	BASEPRI, r0
   11f70:	f04f 0003 	mov.w	r0, #3
   11f74:	df02      	svc	2
	tx->handle = handle;
   11f76:	2300      	movs	r3, #0
   11f78:	801b      	strh	r3, [r3, #0]
   11f7a:	deff      	udf	#255	; 0xff
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   11f7c:	4615      	mov	r5, r2
   11f7e:	f815 4b04 	ldrb.w	r4, [r5], #4
   11f82:	fb14 f406 	smulbb	r4, r4, r6
   11f86:	192e      	adds	r6, r5, r4
   11f88:	5328      	strh	r0, [r5, r4]
	tx->node = node_tx;
   11f8a:	6071      	str	r1, [r6, #4]
	*last = idx; /* Commit: Update write index */
   11f8c:	70d3      	strb	r3, [r2, #3]
}
   11f8e:	bd70      	pop	{r4, r5, r6, pc}
   11f90:	20000a38 	.word	0x20000a38
   11f94:	000278ee 	.word	0x000278ee
   11f98:	00027ccd 	.word	0x00027ccd
   11f9c:	00027514 	.word	0x00027514

00011fa0 <ll_radio_state_abort>:
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   11fa0:	2200      	movs	r2, #0
{
   11fa2:	b508      	push	{r3, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   11fa4:	4611      	mov	r1, r2
   11fa6:	4b09      	ldr	r3, [pc, #36]	; (11fcc <ll_radio_state_abort+0x2c>)
   11fa8:	2001      	movs	r0, #1
   11faa:	f7fd fec7 	bl	fd3c <mayfly_enqueue>
	LL_ASSERT(!ret);
   11fae:	b160      	cbz	r0, 11fca <ll_radio_state_abort+0x2a>
   11fb0:	4a07      	ldr	r2, [pc, #28]	; (11fd0 <ll_radio_state_abort+0x30>)
   11fb2:	4908      	ldr	r1, [pc, #32]	; (11fd4 <ll_radio_state_abort+0x34>)
   11fb4:	4808      	ldr	r0, [pc, #32]	; (11fd8 <ll_radio_state_abort+0x38>)
   11fb6:	f240 6366 	movw	r3, #1638	; 0x666
   11fba:	f00a f985 	bl	1c2c8 <printk>
   11fbe:	4040      	eors	r0, r0
   11fc0:	f380 8811 	msr	BASEPRI, r0
   11fc4:	f04f 0003 	mov.w	r0, #3
   11fc8:	df02      	svc	2
}
   11fca:	bd08      	pop	{r3, pc}
   11fcc:	20000aac 	.word	0x20000aac
   11fd0:	000278ee 	.word	0x000278ee
   11fd4:	000279ee 	.word	0x000279ee
   11fd8:	00027514 	.word	0x00027514

00011fdc <ull_ticker_status_take>:
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   11fdc:	f030 0302 	bics.w	r3, r0, #2
{
   11fe0:	b510      	push	{r4, lr}
   11fe2:	460c      	mov	r4, r1
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   11fe4:	d00f      	beq.n	12006 <ull_ticker_status_take+0x2a>
   11fe6:	680b      	ldr	r3, [r1, #0]
   11fe8:	2b02      	cmp	r3, #2
   11fea:	d10c      	bne.n	12006 <ull_ticker_status_take+0x2a>
   11fec:	4a0a      	ldr	r2, [pc, #40]	; (12018 <ull_ticker_status_take+0x3c>)
   11fee:	490b      	ldr	r1, [pc, #44]	; (1201c <ull_ticker_status_take+0x40>)
   11ff0:	480b      	ldr	r0, [pc, #44]	; (12020 <ull_ticker_status_take+0x44>)
   11ff2:	f240 6382 	movw	r3, #1666	; 0x682
   11ff6:	f00a f967 	bl	1c2c8 <printk>
   11ffa:	4040      	eors	r0, r0
   11ffc:	f380 8811 	msr	BASEPRI, r0
   12000:	f04f 0003 	mov.w	r0, #3
   12004:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   12006:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1200a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1200e:	4805      	ldr	r0, [pc, #20]	; (12024 <ull_ticker_status_take+0x48>)
   12010:	f009 f9a0 	bl	1b354 <z_impl_k_sem_take>
	return *ret_cb;
   12014:	6820      	ldr	r0, [r4, #0]
}
   12016:	bd10      	pop	{r4, pc}
   12018:	000278ee 	.word	0x000278ee
   1201c:	000279f3 	.word	0x000279f3
   12020:	00027514 	.word	0x00027514
   12024:	200029e4 	.word	0x200029e4

00012028 <ull_disable_mark>:
	if (!*m) {
   12028:	4b02      	ldr	r3, [pc, #8]	; (12034 <ull_disable_mark+0xc>)
   1202a:	681a      	ldr	r2, [r3, #0]
   1202c:	b902      	cbnz	r2, 12030 <ull_disable_mark+0x8>
		*m = param;
   1202e:	6018      	str	r0, [r3, #0]
}
   12030:	6818      	ldr	r0, [r3, #0]
   12032:	4770      	bx	lr
   12034:	20002764 	.word	0x20002764

00012038 <ull_disable_unmark>:
	if (*m && *m == param) {
   12038:	4a05      	ldr	r2, [pc, #20]	; (12050 <ull_disable_unmark+0x18>)
{
   1203a:	4603      	mov	r3, r0
	if (*m && *m == param) {
   1203c:	6810      	ldr	r0, [r2, #0]
   1203e:	b130      	cbz	r0, 1204e <ull_disable_unmark+0x16>
   12040:	4283      	cmp	r3, r0
   12042:	f04f 0300 	mov.w	r3, #0
   12046:	d101      	bne.n	1204c <ull_disable_unmark+0x14>
		*m = NULL;
   12048:	6013      	str	r3, [r2, #0]
		return param;
   1204a:	4770      	bx	lr
	return NULL;
   1204c:	4618      	mov	r0, r3
}
   1204e:	4770      	bx	lr
   12050:	20002764 	.word	0x20002764

00012054 <ull_disable_mark_get>:
}
   12054:	4b01      	ldr	r3, [pc, #4]	; (1205c <ull_disable_mark_get+0x8>)
   12056:	6818      	ldr	r0, [r3, #0]
   12058:	4770      	bx	lr
   1205a:	bf00      	nop
   1205c:	20002764 	.word	0x20002764

00012060 <ull_update_mark>:
	if (!*m) {
   12060:	4b02      	ldr	r3, [pc, #8]	; (1206c <ull_update_mark+0xc>)
   12062:	681a      	ldr	r2, [r3, #0]
   12064:	b902      	cbnz	r2, 12068 <ull_update_mark+0x8>
		*m = param;
   12066:	6018      	str	r0, [r3, #0]
}
   12068:	6818      	ldr	r0, [r3, #0]
   1206a:	4770      	bx	lr
   1206c:	20002768 	.word	0x20002768

00012070 <ull_update_unmark>:
	if (*m && *m == param) {
   12070:	4a05      	ldr	r2, [pc, #20]	; (12088 <ull_update_unmark+0x18>)
{
   12072:	4603      	mov	r3, r0
	if (*m && *m == param) {
   12074:	6810      	ldr	r0, [r2, #0]
   12076:	b130      	cbz	r0, 12086 <ull_update_unmark+0x16>
   12078:	4283      	cmp	r3, r0
   1207a:	f04f 0300 	mov.w	r3, #0
   1207e:	d101      	bne.n	12084 <ull_update_unmark+0x14>
		*m = NULL;
   12080:	6013      	str	r3, [r2, #0]
		return param;
   12082:	4770      	bx	lr
	return NULL;
   12084:	4618      	mov	r0, r3
}
   12086:	4770      	bx	lr
   12088:	20002768 	.word	0x20002768

0001208c <ull_update_mark_get>:
}
   1208c:	4b01      	ldr	r3, [pc, #4]	; (12094 <ull_update_mark_get+0x8>)
   1208e:	6818      	ldr	r0, [r3, #0]
   12090:	4770      	bx	lr
   12092:	bf00      	nop
   12094:	20002768 	.word	0x20002768

00012098 <ull_disable>:
{
   12098:	b530      	push	{r4, r5, lr}
	hdr = HDR_LLL2ULL(lll);
   1209a:	6805      	ldr	r5, [r0, #0]
	return hdr->ref;
   1209c:	782b      	ldrb	r3, [r5, #0]
{
   1209e:	b087      	sub	sp, #28
   120a0:	4604      	mov	r4, r0
	if (!ull_ref_get(hdr)) {
   120a2:	b91b      	cbnz	r3, 120ac <ull_disable+0x14>
		return -EALREADY;
   120a4:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
   120a8:	b007      	add	sp, #28
   120aa:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_sem_init(sem, initial_count, limit);
   120ac:	2201      	movs	r2, #1
   120ae:	2100      	movs	r1, #0
   120b0:	4668      	mov	r0, sp
   120b2:	f013 fd37 	bl	25b24 <z_impl_k_sem_init>
	hdr->disabled_cb = disabled_cb;
   120b6:	4b12      	ldr	r3, [pc, #72]	; (12100 <ull_disable+0x68>)
   120b8:	616b      	str	r3, [r5, #20]
   120ba:	782b      	ldrb	r3, [r5, #0]
	hdr->disabled_param = &sem;
   120bc:	f8c5 d018 	str.w	sp, [r5, #24]
	if (!ull_ref_get(hdr)) {
   120c0:	2b00      	cmp	r3, #0
   120c2:	d0ef      	beq.n	120a4 <ull_disable+0xc>
	mfy.param = lll;
   120c4:	4b0f      	ldr	r3, [pc, #60]	; (12104 <ull_disable+0x6c>)
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   120c6:	2200      	movs	r2, #0
   120c8:	4611      	mov	r1, r2
   120ca:	2003      	movs	r0, #3
	mfy.param = lll;
   120cc:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   120ce:	f7fd fe35 	bl	fd3c <mayfly_enqueue>
	LL_ASSERT(!ret);
   120d2:	b160      	cbz	r0, 120ee <ull_disable+0x56>
   120d4:	4a0c      	ldr	r2, [pc, #48]	; (12108 <ull_disable+0x70>)
   120d6:	490d      	ldr	r1, [pc, #52]	; (1210c <ull_disable+0x74>)
   120d8:	480d      	ldr	r0, [pc, #52]	; (12110 <ull_disable+0x78>)
   120da:	f240 63ff 	movw	r3, #1791	; 0x6ff
   120de:	f00a f8f3 	bl	1c2c8 <printk>
   120e2:	4040      	eors	r0, r0
   120e4:	f380 8811 	msr	BASEPRI, r0
   120e8:	f04f 0003 	mov.w	r0, #3
   120ec:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   120ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   120f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   120f6:	4668      	mov	r0, sp
   120f8:	f009 f92c 	bl	1b354 <z_impl_k_sem_take>
	return k_sem_take(&sem, K_FOREVER);
   120fc:	e7d4      	b.n	120a8 <ull_disable+0x10>
   120fe:	bf00      	nop
   12100:	00023ee7 	.word	0x00023ee7
   12104:	20000a9c 	.word	0x20000a9c
   12108:	000278ee 	.word	0x000278ee
   1210c:	000279ee 	.word	0x000279ee
   12110:	00027514 	.word	0x00027514

00012114 <ull_ticker_stop_with_mark>:
{
   12114:	b5f0      	push	{r4, r5, r6, r7, lr}
   12116:	4606      	mov	r6, r0
   12118:	b085      	sub	sp, #20
	mark = ull_disable_mark(param);
   1211a:	4608      	mov	r0, r1
{
   1211c:	4614      	mov	r4, r2
	mark = ull_disable_mark(param);
   1211e:	f7ff ff83 	bl	12028 <ull_disable_mark>
	if (mark != param) {
   12122:	4281      	cmp	r1, r0
{
   12124:	460d      	mov	r5, r1
	if (mark != param) {
   12126:	d004      	beq.n	12132 <ull_ticker_stop_with_mark+0x1e>
		return -ENOLCK;
   12128:	f06f 042d 	mvn.w	r4, #45	; 0x2d
}
   1212c:	4620      	mov	r0, r4
   1212e:	b005      	add	sp, #20
   12130:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret_cb = TICKER_STATUS_BUSY;
   12132:	2302      	movs	r3, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   12134:	af03      	add	r7, sp, #12
	ret_cb = TICKER_STATUS_BUSY;
   12136:	9303      	str	r3, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   12138:	2103      	movs	r1, #3
   1213a:	4b11      	ldr	r3, [pc, #68]	; (12180 <ull_ticker_stop_with_mark+0x6c>)
   1213c:	9700      	str	r7, [sp, #0]
   1213e:	4632      	mov	r2, r6
   12140:	2000      	movs	r0, #0
   12142:	f7fe fbbf 	bl	108c4 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   12146:	4639      	mov	r1, r7
   12148:	f7ff ff48 	bl	11fdc <ull_ticker_status_take>
	if (ret) {
   1214c:	b138      	cbz	r0, 1215e <ull_ticker_stop_with_mark+0x4a>
		mark = ull_disable_unmark(param);
   1214e:	4628      	mov	r0, r5
   12150:	f7ff ff72 	bl	12038 <ull_disable_unmark>
		if (mark != param) {
   12154:	4285      	cmp	r5, r0
   12156:	d1e7      	bne.n	12128 <ull_ticker_stop_with_mark+0x14>
		return -EALREADY;
   12158:	f06f 0477 	mvn.w	r4, #119	; 0x77
   1215c:	e7e6      	b.n	1212c <ull_ticker_stop_with_mark+0x18>
	err = ull_disable(lll_disable);
   1215e:	4620      	mov	r0, r4
   12160:	f7ff ff9a 	bl	12098 <ull_disable>
   12164:	4604      	mov	r4, r0
	mark = ull_disable_unmark(param);
   12166:	4628      	mov	r0, r5
   12168:	f7ff ff66 	bl	12038 <ull_disable_unmark>
	if (mark != param) {
   1216c:	4285      	cmp	r5, r0
   1216e:	d1db      	bne.n	12128 <ull_ticker_stop_with_mark+0x14>
	if (err && (err != -EALREADY)) {
   12170:	2c00      	cmp	r4, #0
   12172:	d0db      	beq.n	1212c <ull_ticker_stop_with_mark+0x18>
	return 0;
   12174:	f114 0f78 	cmn.w	r4, #120	; 0x78
   12178:	bf08      	it	eq
   1217a:	2400      	moveq	r4, #0
   1217c:	e7d6      	b.n	1212c <ull_ticker_stop_with_mark+0x18>
   1217e:	bf00      	nop
   12180:	00011a31 	.word	0x00011a31

00012184 <ull_pdu_rx_alloc_peek>:
{
   12184:	b510      	push	{r4, lr}
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   12186:	4a0a      	ldr	r2, [pc, #40]	; (121b0 <ull_pdu_rx_alloc_peek+0x2c>)
   12188:	7891      	ldrb	r1, [r2, #2]
   1218a:	78d4      	ldrb	r4, [r2, #3]
   1218c:	7853      	ldrb	r3, [r2, #1]
	if (last >= first) {
   1218e:	42a1      	cmp	r1, r4
		return count - first + last;
   12190:	bf8a      	itet	hi
   12192:	191b      	addhi	r3, r3, r4
		return last - first;
   12194:	1a63      	subls	r3, r4, r1
		return count - first + last;
   12196:	1a5b      	subhi	r3, r3, r1
   12198:	b2db      	uxtb	r3, r3
   1219a:	4298      	cmp	r0, r3
   1219c:	d806      	bhi.n	121ac <ull_pdu_rx_alloc_peek+0x28>
	if (first == last) {
   1219e:	42a1      	cmp	r1, r4
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   121a0:	7813      	ldrb	r3, [r2, #0]
   121a2:	d003      	beq.n	121ac <ull_pdu_rx_alloc_peek+0x28>
	return *((void **)(fifo + first * size));
   121a4:	fb01 2203 	mla	r2, r1, r3, r2
   121a8:	6850      	ldr	r0, [r2, #4]
}
   121aa:	bd10      	pop	{r4, pc}
		return NULL;
   121ac:	2000      	movs	r0, #0
   121ae:	e7fc      	b.n	121aa <ull_pdu_rx_alloc_peek+0x26>
   121b0:	2000091c 	.word	0x2000091c

000121b4 <ull_pdu_rx_alloc>:
{
   121b4:	b510      	push	{r4, lr}
	return MFIFO_DEQUEUE(pdu_rx_free);
   121b6:	4a09      	ldr	r2, [pc, #36]	; (121dc <ull_pdu_rx_alloc+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   121b8:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
   121ba:	78d0      	ldrb	r0, [r2, #3]
   121bc:	7811      	ldrb	r1, [r2, #0]
   121be:	7854      	ldrb	r4, [r2, #1]
   121c0:	4298      	cmp	r0, r3
   121c2:	d009      	beq.n	121d8 <ull_pdu_rx_alloc+0x24>
	mem = *((void **)(fifo + _first * size));
   121c4:	fb03 2101 	mla	r1, r3, r1, r2
	_first += 1U;
   121c8:	3301      	adds	r3, #1
   121ca:	b2db      	uxtb	r3, r3
		_first = 0U;
   121cc:	429c      	cmp	r4, r3
   121ce:	bf08      	it	eq
   121d0:	2300      	moveq	r3, #0
	mem = *((void **)(fifo + _first * size));
   121d2:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   121d4:	7093      	strb	r3, [r2, #2]
}
   121d6:	bd10      	pop	{r4, pc}
		return NULL;
   121d8:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(pdu_rx_free);
   121da:	e7fc      	b.n	121d6 <ull_pdu_rx_alloc+0x22>
   121dc:	2000091c 	.word	0x2000091c

000121e0 <ull_rx_put>:
{
   121e0:	b538      	push	{r3, r4, r5, lr}
   121e2:	460c      	mov	r4, r1
   121e4:	4605      	mov	r5, r0
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   121e6:	f002 f861 	bl	142ac <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   121ea:	4621      	mov	r1, r4
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   121ec:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   121ee:	4a03      	ldr	r2, [pc, #12]	; (121fc <ull_rx_put+0x1c>)
   121f0:	4628      	mov	r0, r5
}
   121f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   121f6:	f011 bb4d 	b.w	23894 <memq_enqueue>
   121fa:	bf00      	nop
   121fc:	200029dc 	.word	0x200029dc

00012200 <ull_rx_sched>:
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   12200:	2201      	movs	r2, #1
   12202:	4b02      	ldr	r3, [pc, #8]	; (1220c <ull_rx_sched+0xc>)
   12204:	4611      	mov	r1, r2
   12206:	2000      	movs	r0, #0
   12208:	f7fd bd98 	b.w	fd3c <mayfly_enqueue>
   1220c:	20000a8c 	.word	0x20000a8c

00012210 <ull_rx_put_done>:
	memq_enqueue(link, done, &memq_ull_done.tail);
   12210:	4a01      	ldr	r2, [pc, #4]	; (12218 <ull_rx_put_done+0x8>)
   12212:	f011 bb3f 	b.w	23894 <memq_enqueue>
   12216:	bf00      	nop
   12218:	200029d4 	.word	0x200029d4

0001221c <ull_rx_sched_done>:
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   1221c:	2201      	movs	r2, #1
   1221e:	4b02      	ldr	r3, [pc, #8]	; (12228 <ull_rx_sched_done+0xc>)
   12220:	4611      	mov	r1, r2
   12222:	2000      	movs	r0, #0
   12224:	f7fd bd8a 	b.w	fd3c <mayfly_enqueue>
   12228:	20000a7c 	.word	0x20000a7c

0001222c <ull_prepare_enqueue>:
{
   1222c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   12230:	4e14      	ldr	r6, [pc, #80]	; (12284 <ull_prepare_enqueue+0x58>)
{
   12232:	4699      	mov	r9, r3
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   12234:	78f3      	ldrb	r3, [r6, #3]
	if (last == count) {
   12236:	7874      	ldrb	r4, [r6, #1]
	last = last + 1;
   12238:	1c5d      	adds	r5, r3, #1
{
   1223a:	4680      	mov	r8, r0
   1223c:	b2ed      	uxtb	r5, r5
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   1223e:	78b0      	ldrb	r0, [r6, #2]
		last = 0U;
   12240:	42ac      	cmp	r4, r5
   12242:	bf08      	it	eq
   12244:	2500      	moveq	r5, #0
	if (last == first) {
   12246:	42a8      	cmp	r0, r5
{
   12248:	460f      	mov	r7, r1
   1224a:	4611      	mov	r1, r2
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   1224c:	7832      	ldrb	r2, [r6, #0]
   1224e:	d016      	beq.n	1227e <ull_prepare_enqueue+0x52>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   12250:	1d34      	adds	r4, r6, #4
   12252:	fb03 4402 	mla	r4, r3, r2, r4
	memcpy(&e->prepare_param, prepare_param, sizeof(e->prepare_param));
   12256:	4620      	mov	r0, r4
   12258:	2210      	movs	r2, #16
   1225a:	f00b feea 	bl	1e032 <memcpy>
	e->is_resume = is_resume;
   1225e:	7f23      	ldrb	r3, [r4, #28]
   12260:	f89d 2020 	ldrb.w	r2, [sp, #32]
	e->abort_cb = abort_cb;
   12264:	61a7      	str	r7, [r4, #24]
	e->is_resume = is_resume;
   12266:	f002 0201 	and.w	r2, r2, #1
   1226a:	f023 0303 	bic.w	r3, r3, #3
   1226e:	4313      	orrs	r3, r2
	e->is_abort_cb = is_abort_cb;
   12270:	e9c4 9804 	strd	r9, r8, [r4, #16]
	e->is_resume = is_resume;
   12274:	7723      	strb	r3, [r4, #28]
	*last = idx; /* Commit: Update write index */
   12276:	70f5      	strb	r5, [r6, #3]
}
   12278:	4620      	mov	r0, r4
   1227a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return NULL;
   1227e:	2400      	movs	r4, #0
   12280:	e7fa      	b.n	12278 <ull_prepare_enqueue+0x4c>
   12282:	bf00      	nop
   12284:	20000934 	.word	0x20000934

00012288 <ull_prepare_dequeue_get>:
	return MFIFO_DEQUEUE_GET(prep);
   12288:	4b05      	ldr	r3, [pc, #20]	; (122a0 <ull_prepare_dequeue_get+0x18>)
   1228a:	7898      	ldrb	r0, [r3, #2]
	if (first == last) {
   1228c:	78d9      	ldrb	r1, [r3, #3]
   1228e:	781a      	ldrb	r2, [r3, #0]
   12290:	4281      	cmp	r1, r0
	return (void *)(fifo + first * size);
   12292:	bf1a      	itte	ne
   12294:	3304      	addne	r3, #4
   12296:	fb00 3002 	mlane	r0, r0, r2, r3
		return NULL;
   1229a:	2000      	moveq	r0, #0
}
   1229c:	4770      	bx	lr
   1229e:	bf00      	nop
   122a0:	20000934 	.word	0x20000934

000122a4 <ull_prepare_dequeue_iter>:
{
   122a4:	b530      	push	{r4, r5, lr}
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   122a6:	4a0c      	ldr	r2, [pc, #48]	; (122d8 <ull_prepare_dequeue_iter+0x34>)
{
   122a8:	4603      	mov	r3, r0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   122aa:	7854      	ldrb	r4, [r2, #1]
	if (*idx >= count) {
   122ac:	7819      	ldrb	r1, [r3, #0]
   122ae:	78d0      	ldrb	r0, [r2, #3]
   122b0:	7815      	ldrb	r5, [r2, #0]
   122b2:	42a1      	cmp	r1, r4
   122b4:	bf24      	itt	cs
   122b6:	7892      	ldrbcs	r2, [r2, #2]
		*idx = first;
   122b8:	701a      	strbcs	r2, [r3, #0]
	if (*idx == last) {
   122ba:	7819      	ldrb	r1, [r3, #0]
   122bc:	4288      	cmp	r0, r1
   122be:	d009      	beq.n	122d4 <ull_prepare_dequeue_iter+0x30>
	i = *idx + 1;
   122c0:	1c4a      	adds	r2, r1, #1
	p = (void *)(fifo + (*idx) * size);
   122c2:	4806      	ldr	r0, [pc, #24]	; (122dc <ull_prepare_dequeue_iter+0x38>)
	i = *idx + 1;
   122c4:	b2d2      	uxtb	r2, r2
		i = 0U;
   122c6:	4294      	cmp	r4, r2
   122c8:	bf08      	it	eq
   122ca:	2200      	moveq	r2, #0
	p = (void *)(fifo + (*idx) * size);
   122cc:	fb01 0005 	mla	r0, r1, r5, r0
	*idx = i;
   122d0:	701a      	strb	r2, [r3, #0]
}
   122d2:	bd30      	pop	{r4, r5, pc}
		return NULL;
   122d4:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   122d6:	e7fc      	b.n	122d2 <ull_prepare_dequeue_iter+0x2e>
   122d8:	20000934 	.word	0x20000934
   122dc:	20000938 	.word	0x20000938

000122e0 <ull_prepare_dequeue>:
{
   122e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   122e4:	4605      	mov	r5, r0
	next = ull_prepare_dequeue_get();
   122e6:	f7ff ffcf 	bl	12288 <ull_prepare_dequeue_get>
			mfy.param = next;
   122ea:	4f1c      	ldr	r7, [pc, #112]	; (1235c <ull_prepare_dequeue+0x7c>)
		MFIFO_DEQUEUE(prep);
   122ec:	4c1c      	ldr	r4, [pc, #112]	; (12360 <ull_prepare_dequeue+0x80>)
	while (next) {
   122ee:	2800      	cmp	r0, #0
   122f0:	d031      	beq.n	12356 <ull_prepare_dequeue+0x76>
		uint8_t is_aborted = next->is_aborted;
   122f2:	7f03      	ldrb	r3, [r0, #28]
		if (!is_aborted) {
   122f4:	079a      	lsls	r2, r3, #30
		uint8_t is_aborted = next->is_aborted;
   122f6:	f3c3 0640 	ubfx	r6, r3, #1, #1
		uint8_t is_resume = next->is_resume;
   122fa:	f003 0801 	and.w	r8, r3, #1
		if (!is_aborted) {
   122fe:	d414      	bmi.n	1232a <ull_prepare_dequeue+0x4a>
			mfy.param = next;
   12300:	60b8      	str	r0, [r7, #8]
			ret = mayfly_enqueue(caller_id, TICKER_USER_ID_LLL, 0,
   12302:	4b16      	ldr	r3, [pc, #88]	; (1235c <ull_prepare_dequeue+0x7c>)
   12304:	4632      	mov	r2, r6
   12306:	4631      	mov	r1, r6
   12308:	4628      	mov	r0, r5
   1230a:	f7fd fd17 	bl	fd3c <mayfly_enqueue>
			LL_ASSERT(!ret);
   1230e:	b160      	cbz	r0, 1232a <ull_prepare_dequeue+0x4a>
   12310:	4a14      	ldr	r2, [pc, #80]	; (12364 <ull_prepare_dequeue+0x84>)
   12312:	4915      	ldr	r1, [pc, #84]	; (12368 <ull_prepare_dequeue+0x88>)
   12314:	4815      	ldr	r0, [pc, #84]	; (1236c <ull_prepare_dequeue+0x8c>)
   12316:	f240 7376 	movw	r3, #1910	; 0x776
   1231a:	f009 ffd5 	bl	1c2c8 <printk>
   1231e:	4040      	eors	r0, r0
   12320:	f380 8811 	msr	BASEPRI, r0
   12324:	f04f 0003 	mov.w	r0, #3
   12328:	df02      	svc	2
	uint8_t _first = *first; /* Copy read-index */
   1232a:	78a3      	ldrb	r3, [r4, #2]
	if (_first == last) {
   1232c:	78e1      	ldrb	r1, [r4, #3]
		MFIFO_DEQUEUE(prep);
   1232e:	7862      	ldrb	r2, [r4, #1]
   12330:	4299      	cmp	r1, r3
   12332:	d005      	beq.n	12340 <ull_prepare_dequeue+0x60>
	_first += 1U;
   12334:	3301      	adds	r3, #1
   12336:	b2db      	uxtb	r3, r3
		_first = 0U;
   12338:	429a      	cmp	r2, r3
   1233a:	bf08      	it	eq
   1233c:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   1233e:	70a3      	strb	r3, [r4, #2]
		next = ull_prepare_dequeue_get();
   12340:	f7ff ffa2 	bl	12288 <ull_prepare_dequeue_get>
		if (!next || (!is_aborted && (!is_resume || next->is_resume))) {
   12344:	b138      	cbz	r0, 12356 <ull_prepare_dequeue+0x76>
   12346:	2e00      	cmp	r6, #0
   12348:	d1d1      	bne.n	122ee <ull_prepare_dequeue+0xe>
   1234a:	f1b8 0f00 	cmp.w	r8, #0
   1234e:	d002      	beq.n	12356 <ull_prepare_dequeue+0x76>
   12350:	7f03      	ldrb	r3, [r0, #28]
   12352:	07db      	lsls	r3, r3, #31
   12354:	d5cb      	bpl.n	122ee <ull_prepare_dequeue+0xe>
}
   12356:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1235a:	bf00      	nop
   1235c:	20000a5c 	.word	0x20000a5c
   12360:	20000934 	.word	0x20000934
   12364:	000278ee 	.word	0x000278ee
   12368:	000279ee 	.word	0x000279ee
   1236c:	00027514 	.word	0x00027514

00012370 <ull_event_done_extra_get>:
	evdone = MFIFO_DEQUEUE_PEEK(done);
   12370:	4b06      	ldr	r3, [pc, #24]	; (1238c <ull_event_done_extra_get+0x1c>)
   12372:	789a      	ldrb	r2, [r3, #2]
	if (first == last) {
   12374:	78d8      	ldrb	r0, [r3, #3]
   12376:	7819      	ldrb	r1, [r3, #0]
   12378:	4290      	cmp	r0, r2
   1237a:	d005      	beq.n	12388 <ull_event_done_extra_get+0x18>
	return *((void **)(fifo + first * size));
   1237c:	fb02 3301 	mla	r3, r2, r1, r3
   12380:	6858      	ldr	r0, [r3, #4]
	if (!evdone) {
   12382:	b110      	cbz	r0, 1238a <ull_event_done_extra_get+0x1a>
	return &evdone->extra;
   12384:	3020      	adds	r0, #32
   12386:	4770      	bx	lr
		return NULL;
   12388:	2000      	movs	r0, #0
}
   1238a:	4770      	bx	lr
   1238c:	200008f8 	.word	0x200008f8

00012390 <ull_event_done>:
{
   12390:	b538      	push	{r3, r4, r5, lr}
	evdone = MFIFO_DEQUEUE(done);
   12392:	4a10      	ldr	r2, [pc, #64]	; (123d4 <ull_event_done+0x44>)
	uint8_t _first = *first; /* Copy read-index */
   12394:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
   12396:	78d4      	ldrb	r4, [r2, #3]
   12398:	7855      	ldrb	r5, [r2, #1]
   1239a:	429c      	cmp	r4, r3
{
   1239c:	4601      	mov	r1, r0
	evdone = MFIFO_DEQUEUE(done);
   1239e:	7810      	ldrb	r0, [r2, #0]
   123a0:	d016      	beq.n	123d0 <ull_event_done+0x40>
	mem = *((void **)(fifo + _first * size));
   123a2:	fb03 2000 	mla	r0, r3, r0, r2
	_first += 1U;
   123a6:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   123a8:	6844      	ldr	r4, [r0, #4]
	_first += 1U;
   123aa:	b2db      	uxtb	r3, r3
		_first = 0U;
   123ac:	429d      	cmp	r5, r3
   123ae:	bf08      	it	eq
   123b0:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   123b2:	7093      	strb	r3, [r2, #2]
	if (!evdone) {
   123b4:	b154      	cbz	r4, 123cc <ull_event_done+0x3c>
	evdone->hdr.link = NULL;
   123b6:	2300      	movs	r3, #0
	link = evdone->hdr.link;
   123b8:	6820      	ldr	r0, [r4, #0]
	evdone->hdr.link = NULL;
   123ba:	6023      	str	r3, [r4, #0]
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   123bc:	2302      	movs	r3, #2
   123be:	7123      	strb	r3, [r4, #4]
	evdone->param = param;
   123c0:	61e1      	str	r1, [r4, #28]
	ull_rx_put_done(link, evdone);
   123c2:	4621      	mov	r1, r4
   123c4:	f7ff ff24 	bl	12210 <ull_rx_put_done>
	ull_rx_sched_done();
   123c8:	f7ff ff28 	bl	1221c <ull_rx_sched_done>
}
   123cc:	4620      	mov	r0, r4
   123ce:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   123d0:	2400      	movs	r4, #0
   123d2:	e7fb      	b.n	123cc <ull_event_done+0x3c>
   123d4:	200008f8 	.word	0x200008f8

000123d8 <init_reset>:
{
   123d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	RXFIFO_INIT_ALLOC(done);
   123da:	4c3d      	ldr	r4, [pc, #244]	; (124d0 <init_reset+0xf8>)
   123dc:	4d3d      	ldr	r5, [pc, #244]	; (124d4 <init_reset+0xfc>)
   123de:	79a2      	ldrb	r2, [r4, #6]
   123e0:	88a1      	ldrh	r1, [r4, #4]
   123e2:	4e3d      	ldr	r6, [pc, #244]	; (124d8 <init_reset+0x100>)
   123e4:	2300      	movs	r3, #0
   123e6:	f104 0008 	add.w	r0, r4, #8
   123ea:	806b      	strh	r3, [r5, #2]
   123ec:	4623      	mov	r3, r4
   123ee:	f011 f9cb 	bl	23788 <mem_init>
   123f2:	79a1      	ldrb	r1, [r4, #6]
   123f4:	79e2      	ldrb	r2, [r4, #7]
   123f6:	4633      	mov	r3, r6
   123f8:	440a      	add	r2, r1
   123fa:	1d30      	adds	r0, r6, #4
   123fc:	2108      	movs	r1, #8
   123fe:	f011 f9c3 	bl	23788 <mem_init>
   12402:	462a      	mov	r2, r5
   12404:	79a3      	ldrb	r3, [r4, #6]
   12406:	f812 0b04 	ldrb.w	r0, [r2], #4
   1240a:	7869      	ldrb	r1, [r5, #1]
   1240c:	e9cd 2400 	strd	r2, r4, [sp]
   12410:	e9cd 6302 	strd	r6, r3, [sp, #8]
   12414:	78aa      	ldrb	r2, [r5, #2]
   12416:	1ceb      	adds	r3, r5, #3
   12418:	f011 fd8a 	bl	23f30 <ull_rxfifo_alloc>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
   1241c:	4b2f      	ldr	r3, [pc, #188]	; (124dc <init_reset+0x104>)
   1241e:	2207      	movs	r2, #7
   12420:	1d18      	adds	r0, r3, #4
   12422:	2144      	movs	r1, #68	; 0x44
   12424:	f011 f9b0 	bl	23788 <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
   12428:	4b2d      	ldr	r3, [pc, #180]	; (124e0 <init_reset+0x108>)
   1242a:	2209      	movs	r2, #9
   1242c:	1d18      	adds	r0, r3, #4
   1242e:	2108      	movs	r1, #8
   12430:	f011 f9aa 	bl	23788 <mem_init>
	link = mem_acquire(&mem_link_rx.free);
   12434:	482a      	ldr	r0, [pc, #168]	; (124e0 <init_reset+0x108>)
   12436:	f011 f9cf 	bl	237d8 <mem_acquire>
	LL_ASSERT(link);
   1243a:	4604      	mov	r4, r0
   1243c:	b960      	cbnz	r0, 12458 <init_reset+0x80>
   1243e:	4a29      	ldr	r2, [pc, #164]	; (124e4 <init_reset+0x10c>)
   12440:	4929      	ldr	r1, [pc, #164]	; (124e8 <init_reset+0x110>)
   12442:	482a      	ldr	r0, [pc, #168]	; (124ec <init_reset+0x114>)
   12444:	f640 0302 	movw	r3, #2050	; 0x802
   12448:	f009 ff3e 	bl	1c2c8 <printk>
   1244c:	4040      	eors	r0, r0
   1244e:	f380 8811 	msr	BASEPRI, r0
   12452:	f04f 0003 	mov.w	r0, #3
   12456:	df02      	svc	2
	MEMQ_INIT(ull_rx, link);
   12458:	4a25      	ldr	r2, [pc, #148]	; (124f0 <init_reset+0x118>)
   1245a:	4620      	mov	r0, r4
   1245c:	1f11      	subs	r1, r2, #4
   1245e:	f011 fa0b 	bl	23878 <memq_init>
	link = mem_acquire(&mem_link_done.free);
   12462:	481d      	ldr	r0, [pc, #116]	; (124d8 <init_reset+0x100>)
   12464:	f011 f9b8 	bl	237d8 <mem_acquire>
	LL_ASSERT(link);
   12468:	4604      	mov	r4, r0
   1246a:	b960      	cbnz	r0, 12486 <init_reset+0xae>
   1246c:	4a1d      	ldr	r2, [pc, #116]	; (124e4 <init_reset+0x10c>)
   1246e:	491e      	ldr	r1, [pc, #120]	; (124e8 <init_reset+0x110>)
   12470:	481e      	ldr	r0, [pc, #120]	; (124ec <init_reset+0x114>)
   12472:	f640 030a 	movw	r3, #2058	; 0x80a
   12476:	f009 ff27 	bl	1c2c8 <printk>
   1247a:	4040      	eors	r0, r0
   1247c:	f380 8811 	msr	BASEPRI, r0
   12480:	f04f 0003 	mov.w	r0, #3
   12484:	df02      	svc	2
	MEMQ_INIT(ull_done, link);
   12486:	4a1b      	ldr	r2, [pc, #108]	; (124f4 <init_reset+0x11c>)
   12488:	4620      	mov	r0, r4
   1248a:	1f11      	subs	r1, r2, #4
   1248c:	f011 f9f4 	bl	23878 <memq_init>
	link = mem_acquire(&mem_link_rx.free);
   12490:	4813      	ldr	r0, [pc, #76]	; (124e0 <init_reset+0x108>)
   12492:	f011 f9a1 	bl	237d8 <mem_acquire>
	LL_ASSERT(link);
   12496:	4604      	mov	r4, r0
   12498:	b960      	cbnz	r0, 124b4 <init_reset+0xdc>
   1249a:	4a12      	ldr	r2, [pc, #72]	; (124e4 <init_reset+0x10c>)
   1249c:	4912      	ldr	r1, [pc, #72]	; (124e8 <init_reset+0x110>)
   1249e:	4813      	ldr	r0, [pc, #76]	; (124ec <init_reset+0x114>)
   124a0:	f640 0312 	movw	r3, #2066	; 0x812
   124a4:	f009 ff10 	bl	1c2c8 <printk>
   124a8:	4040      	eors	r0, r0
   124aa:	f380 8811 	msr	BASEPRI, r0
   124ae:	f04f 0003 	mov.w	r0, #3
   124b2:	df02      	svc	2
	MEMQ_INIT(ll_rx, link);
   124b4:	4a10      	ldr	r2, [pc, #64]	; (124f8 <init_reset+0x120>)
   124b6:	4620      	mov	r0, r4
   124b8:	1f11      	subs	r1, r2, #4
   124ba:	f011 f9dd 	bl	23878 <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
   124be:	4b0f      	ldr	r3, [pc, #60]	; (124fc <init_reset+0x124>)
   124c0:	2205      	movs	r2, #5
	rx_alloc(UINT8_MAX);
   124c2:	20ff      	movs	r0, #255	; 0xff
	mem_link_rx.quota_pdu = RX_CNT;
   124c4:	701a      	strb	r2, [r3, #0]
	rx_alloc(UINT8_MAX);
   124c6:	f7ff f9e3 	bl	11890 <rx_alloc>
}
   124ca:	2000      	movs	r0, #0
   124cc:	b004      	add	sp, #16
   124ce:	bd70      	pop	{r4, r5, r6, pc}
   124d0:	20000820 	.word	0x20000820
   124d4:	200008f8 	.word	0x200008f8
   124d8:	2000276c 	.word	0x2000276c
   124dc:	200027e8 	.word	0x200027e8
   124e0:	2000279c 	.word	0x2000279c
   124e4:	000278ee 	.word	0x000278ee
   124e8:	00027d05 	.word	0x00027d05
   124ec:	00027514 	.word	0x00027514
   124f0:	200029dc 	.word	0x200029dc
   124f4:	200029d4 	.word	0x200029d4
   124f8:	200029cc 	.word	0x200029cc
   124fc:	20002798 	.word	0x20002798

00012500 <ll_init>:
{
   12500:	b510      	push	{r4, lr}
	sem_recv = sem_rx;
   12502:	4b2c      	ldr	r3, [pc, #176]	; (125b4 <ll_init+0xb4>)
{
   12504:	b086      	sub	sp, #24
	sem_recv = sem_rx;
   12506:	6018      	str	r0, [r3, #0]
	cntr_init();
   12508:	f004 f816 	bl	16538 <cntr_init>
	mayfly_init();
   1250c:	f7fd fbbe 	bl	fc8c <mayfly_init>
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   12510:	4a29      	ldr	r2, [pc, #164]	; (125b8 <ll_init+0xb8>)
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
   12512:	2105      	movs	r1, #5
   12514:	7211      	strb	r1, [r2, #8]
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   12516:	2102      	movs	r1, #2
   12518:	7411      	strb	r1, [r2, #16]
	ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_THREAD_OPS;
   1251a:	7611      	strb	r1, [r2, #24]
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   1251c:	2304      	movs	r3, #4
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   1251e:	4927      	ldr	r1, [pc, #156]	; (125bc <ll_init+0xbc>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   12520:	7013      	strb	r3, [r2, #0]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   12522:	9105      	str	r1, [sp, #20]
   12524:	4926      	ldr	r1, [pc, #152]	; (125c0 <ll_init+0xc0>)
   12526:	9104      	str	r1, [sp, #16]
   12528:	4926      	ldr	r1, [pc, #152]	; (125c4 <ll_init+0xc4>)
   1252a:	9103      	str	r1, [sp, #12]
   1252c:	4926      	ldr	r1, [pc, #152]	; (125c8 <ll_init+0xc8>)
   1252e:	9102      	str	r1, [sp, #8]
   12530:	210d      	movs	r1, #13
   12532:	e9cd 2100 	strd	r2, r1, [sp]
   12536:	2000      	movs	r0, #0
   12538:	4a24      	ldr	r2, [pc, #144]	; (125cc <ll_init+0xcc>)
   1253a:	2108      	movs	r1, #8
   1253c:	f7fe f8ce 	bl	106dc <ticker_init>
	LL_ASSERT(!err);
   12540:	b160      	cbz	r0, 1255c <ll_init+0x5c>
   12542:	4a23      	ldr	r2, [pc, #140]	; (125d0 <ll_init+0xd0>)
   12544:	4923      	ldr	r1, [pc, #140]	; (125d4 <ll_init+0xd4>)
   12546:	4824      	ldr	r0, [pc, #144]	; (125d8 <ll_init+0xd8>)
   12548:	f240 230d 	movw	r3, #525	; 0x20d
   1254c:	f009 febc 	bl	1c2c8 <printk>
   12550:	4040      	eors	r0, r0
   12552:	f380 8811 	msr	BASEPRI, r0
   12556:	f04f 0003 	mov.w	r0, #3
   1255a:	df02      	svc	2
	return z_impl_k_sem_init(sem, initial_count, limit);
   1255c:	2201      	movs	r2, #1
   1255e:	2100      	movs	r1, #0
   12560:	481e      	ldr	r0, [pc, #120]	; (125dc <ll_init+0xdc>)
   12562:	f013 fadf 	bl	25b24 <z_impl_k_sem_init>
	err = lll_init();
   12566:	f002 fae9 	bl	14b3c <lll_init>
	if (err) {
   1256a:	4604      	mov	r4, r0
   1256c:	b9f0      	cbnz	r0, 125ac <ll_init+0xac>
	err = init_reset();
   1256e:	f7ff ff33 	bl	123d8 <init_reset>
	if (err) {
   12572:	4604      	mov	r4, r0
   12574:	b9d0      	cbnz	r0, 125ac <ll_init+0xac>
	err = lll_adv_init();
   12576:	f002 fe37 	bl	151e8 <lll_adv_init>
	if (err) {
   1257a:	4604      	mov	r4, r0
   1257c:	b9b0      	cbnz	r0, 125ac <ll_init+0xac>
	err = ull_adv_init();
   1257e:	f011 fd62 	bl	24046 <ull_adv_init>
	if (err) {
   12582:	4604      	mov	r4, r0
   12584:	b990      	cbnz	r0, 125ac <ll_init+0xac>
	err = lll_scan_init();
   12586:	f012 f99e 	bl	248c6 <lll_scan_init>
	if (err) {
   1258a:	4604      	mov	r4, r0
   1258c:	b970      	cbnz	r0, 125ac <ll_init+0xac>
	err = ull_scan_init();
   1258e:	f011 fe1b 	bl	241c8 <ull_scan_init>
	if (err) {
   12592:	4604      	mov	r4, r0
   12594:	b950      	cbnz	r0, 125ac <ll_init+0xac>
	err = lll_conn_init();
   12596:	f012 f99a 	bl	248ce <lll_conn_init>
	if (err) {
   1259a:	4604      	mov	r4, r0
   1259c:	b930      	cbnz	r0, 125ac <ll_init+0xac>
	err = ull_conn_init();
   1259e:	f011 ff94 	bl	244ca <ull_conn_init>
	if (err) {
   125a2:	4604      	mov	r4, r0
   125a4:	b910      	cbnz	r0, 125ac <ll_init+0xac>
		ull_filter_reset(true);
   125a6:	2001      	movs	r0, #1
   125a8:	f002 f8b2 	bl	14710 <ull_filter_reset>
}
   125ac:	4620      	mov	r0, r4
   125ae:	b006      	add	sp, #24
   125b0:	bd10      	pop	{r4, pc}
   125b2:	bf00      	nop
   125b4:	200029e0 	.word	0x200029e0
   125b8:	20002e20 	.word	0x20002e20
   125bc:	00024aa7 	.word	0x00024aa7
   125c0:	00016e31 	.word	0x00016e31
   125c4:	00016dd9 	.word	0x00016dd9
   125c8:	20002b7c 	.word	0x20002b7c
   125cc:	200029fc 	.word	0x200029fc
   125d0:	000278ee 	.word	0x000278ee
   125d4:	00027963 	.word	0x00027963
   125d8:	00027514 	.word	0x00027514
   125dc:	200029e4 	.word	0x200029e4

000125e0 <ll_reset>:
{
   125e0:	b510      	push	{r4, lr}
   125e2:	b086      	sub	sp, #24
	err = ull_adv_reset();
   125e4:	f011 fd31 	bl	2404a <ull_adv_reset>
	LL_ASSERT(!err);
   125e8:	b160      	cbz	r0, 12604 <ll_reset+0x24>
   125ea:	4a3e      	ldr	r2, [pc, #248]	; (126e4 <ll_reset+0x104>)
   125ec:	493e      	ldr	r1, [pc, #248]	; (126e8 <ll_reset+0x108>)
   125ee:	483f      	ldr	r0, [pc, #252]	; (126ec <ll_reset+0x10c>)
   125f0:	f240 23ad 	movw	r3, #685	; 0x2ad
   125f4:	f009 fe68 	bl	1c2c8 <printk>
   125f8:	4040      	eors	r0, r0
   125fa:	f380 8811 	msr	BASEPRI, r0
   125fe:	f04f 0003 	mov.w	r0, #3
   12602:	df02      	svc	2
	err = ull_scan_reset();
   12604:	f011 fdf6 	bl	241f4 <ull_scan_reset>
	LL_ASSERT(!err);
   12608:	b160      	cbz	r0, 12624 <ll_reset+0x44>
   1260a:	4a36      	ldr	r2, [pc, #216]	; (126e4 <ll_reset+0x104>)
   1260c:	4936      	ldr	r1, [pc, #216]	; (126e8 <ll_reset+0x108>)
   1260e:	4837      	ldr	r0, [pc, #220]	; (126ec <ll_reset+0x10c>)
   12610:	f240 23b3 	movw	r3, #691	; 0x2b3
   12614:	f009 fe58 	bl	1c2c8 <printk>
   12618:	4040      	eors	r0, r0
   1261a:	f380 8811 	msr	BASEPRI, r0
   1261e:	f04f 0003 	mov.w	r0, #3
   12622:	df02      	svc	2
	err = ull_conn_reset();
   12624:	f000 ffa2 	bl	1356c <ull_conn_reset>
	LL_ASSERT(!err);
   12628:	b160      	cbz	r0, 12644 <ll_reset+0x64>
   1262a:	4a2e      	ldr	r2, [pc, #184]	; (126e4 <ll_reset+0x104>)
   1262c:	492e      	ldr	r1, [pc, #184]	; (126e8 <ll_reset+0x108>)
   1262e:	482f      	ldr	r0, [pc, #188]	; (126ec <ll_reset+0x10c>)
   12630:	f240 23de 	movw	r3, #734	; 0x2de
   12634:	f009 fe48 	bl	1c2c8 <printk>
   12638:	4040      	eors	r0, r0
   1263a:	f380 8811 	msr	BASEPRI, r0
   1263e:	f04f 0003 	mov.w	r0, #3
   12642:	df02      	svc	2
	MFIFO_INIT(tx_ack);
   12644:	4b2a      	ldr	r3, [pc, #168]	; (126f0 <ll_reset+0x110>)
   12646:	2400      	movs	r4, #0
   12648:	805c      	strh	r4, [r3, #2]
		ull_filter_reset(false);
   1264a:	4620      	mov	r0, r4
   1264c:	f002 f860 	bl	14710 <ull_filter_reset>
	MFIFO_INIT(prep);
   12650:	4b28      	ldr	r3, [pc, #160]	; (126f4 <ll_reset+0x114>)
   12652:	805c      	strh	r4, [r3, #2]
	MFIFO_INIT(pdu_rx_free);
   12654:	4b28      	ldr	r3, [pc, #160]	; (126f8 <ll_reset+0x118>)
   12656:	805c      	strh	r4, [r3, #2]
	MFIFO_INIT(ll_pdu_rx_free);
   12658:	4b28      	ldr	r3, [pc, #160]	; (126fc <ll_reset+0x11c>)
   1265a:	805c      	strh	r4, [r3, #2]
   1265c:	2201      	movs	r2, #1
   1265e:	4621      	mov	r1, r4
   12660:	4668      	mov	r0, sp
   12662:	f013 fa5f 	bl	25b24 <z_impl_k_sem_init>
		mfy.param = &sem;
   12666:	4b26      	ldr	r3, [pc, #152]	; (12700 <ll_reset+0x120>)
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   12668:	4622      	mov	r2, r4
   1266a:	4621      	mov	r1, r4
   1266c:	2003      	movs	r0, #3
		mfy.param = &sem;
   1266e:	f8c3 d008 	str.w	sp, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   12672:	f7fd fb63 	bl	fd3c <mayfly_enqueue>
		LL_ASSERT(!retval);
   12676:	b160      	cbz	r0, 12692 <ll_reset+0xb2>
   12678:	4a1a      	ldr	r2, [pc, #104]	; (126e4 <ll_reset+0x104>)
   1267a:	4922      	ldr	r1, [pc, #136]	; (12704 <ll_reset+0x124>)
   1267c:	481b      	ldr	r0, [pc, #108]	; (126ec <ll_reset+0x10c>)
   1267e:	f240 330d 	movw	r3, #781	; 0x30d
   12682:	f009 fe21 	bl	1c2c8 <printk>
   12686:	4040      	eors	r0, r0
   12688:	f380 8811 	msr	BASEPRI, r0
   1268c:	f04f 0003 	mov.w	r0, #3
   12690:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   12692:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12696:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1269a:	4668      	mov	r0, sp
   1269c:	f008 fe5a 	bl	1b354 <z_impl_k_sem_take>
	err = ull_adv_reset_finalize();
   126a0:	f000 fb7a 	bl	12d98 <ull_adv_reset_finalize>
	LL_ASSERT(!err);
   126a4:	b160      	cbz	r0, 126c0 <ll_reset+0xe0>
   126a6:	4a0f      	ldr	r2, [pc, #60]	; (126e4 <ll_reset+0x104>)
   126a8:	490f      	ldr	r1, [pc, #60]	; (126e8 <ll_reset+0x108>)
   126aa:	4810      	ldr	r0, [pc, #64]	; (126ec <ll_reset+0x10c>)
   126ac:	f240 331a 	movw	r3, #794	; 0x31a
   126b0:	f009 fe0a 	bl	1c2c8 <printk>
   126b4:	4040      	eors	r0, r0
   126b6:	f380 8811 	msr	BASEPRI, r0
   126ba:	f04f 0003 	mov.w	r0, #3
   126be:	df02      	svc	2
	err = init_reset();
   126c0:	f7ff fe8a 	bl	123d8 <init_reset>
	LL_ASSERT(!err);
   126c4:	b160      	cbz	r0, 126e0 <ll_reset+0x100>
   126c6:	4a07      	ldr	r2, [pc, #28]	; (126e4 <ll_reset+0x104>)
   126c8:	4907      	ldr	r1, [pc, #28]	; (126e8 <ll_reset+0x108>)
   126ca:	4808      	ldr	r0, [pc, #32]	; (126ec <ll_reset+0x10c>)
   126cc:	f240 3327 	movw	r3, #807	; 0x327
   126d0:	f009 fdfa 	bl	1c2c8 <printk>
   126d4:	4040      	eors	r0, r0
   126d6:	f380 8811 	msr	BASEPRI, r0
   126da:	f04f 0003 	mov.w	r0, #3
   126de:	df02      	svc	2
}
   126e0:	b006      	add	sp, #24
   126e2:	bd10      	pop	{r4, pc}
   126e4:	000278ee 	.word	0x000278ee
   126e8:	00027963 	.word	0x00027963
   126ec:	00027514 	.word	0x00027514
   126f0:	20000a38 	.word	0x20000a38
   126f4:	20000934 	.word	0x20000934
   126f8:	2000091c 	.word	0x2000091c
   126fc:	20000910 	.word	0x20000910
   12700:	20000a6c 	.word	0x20000a6c
   12704:	00027a10 	.word	0x00027a10

00012708 <ull_done>:
{
   12708:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
		break;
	}

	/* Release done */
	done->extra.type = 0U;
	release = RXFIFO_RELEASE(done, link, done);
   1270c:	4f33      	ldr	r7, [pc, #204]	; (127dc <ull_done+0xd4>)
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
   1270e:	4e34      	ldr	r6, [pc, #208]	; (127e0 <ull_done+0xd8>)
{
   12710:	b087      	sub	sp, #28
	release = RXFIFO_RELEASE(done, link, done);
   12712:	f107 0904 	add.w	r9, r7, #4
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
   12716:	e9d6 0100 	ldrd	r0, r1, [r6]
   1271a:	aa05      	add	r2, sp, #20
   1271c:	f011 f8c1 	bl	238a2 <memq_peek>
		if (link) {
   12720:	4680      	mov	r8, r0
   12722:	2800      	cmp	r0, #0
   12724:	d057      	beq.n	127d6 <ull_done+0xce>
			(void)memq_dequeue(memq_ull_done.tail,
   12726:	6870      	ldr	r0, [r6, #4]
   12728:	2200      	movs	r2, #0
   1272a:	4631      	mov	r1, r6
   1272c:	f011 f8c1 	bl	238b2 <memq_dequeue>
			rx_demux_event_done(link, done);
   12730:	9d05      	ldr	r5, [sp, #20]
	ull_hdr = done->param;
   12732:	69ec      	ldr	r4, [r5, #28]
	if (ull_hdr) {
   12734:	b194      	cbz	r4, 1275c <ull_done+0x54>
   12736:	7823      	ldrb	r3, [r4, #0]
		LL_ASSERT(ull_ref_get(ull_hdr));
   12738:	b963      	cbnz	r3, 12754 <ull_done+0x4c>
   1273a:	4a2a      	ldr	r2, [pc, #168]	; (127e4 <ull_done+0xdc>)
   1273c:	492a      	ldr	r1, [pc, #168]	; (127e8 <ull_done+0xe0>)
   1273e:	482b      	ldr	r0, [pc, #172]	; (127ec <ull_done+0xe4>)
   12740:	f640 2312 	movw	r3, #2578	; 0xa12
   12744:	f009 fdc0 	bl	1c2c8 <printk>
   12748:	4040      	eors	r0, r0
   1274a:	f380 8811 	msr	BASEPRI, r0
   1274e:	f04f 0003 	mov.w	r0, #3
   12752:	df02      	svc	2
	return hdr->ref--;
   12754:	7823      	ldrb	r3, [r4, #0]
   12756:	3b01      	subs	r3, #1
   12758:	b2db      	uxtb	r3, r3
   1275a:	7023      	strb	r3, [r4, #0]
	switch (done->extra.type) {
   1275c:	f895 3020 	ldrb.w	r3, [r5, #32]
   12760:	b123      	cbz	r3, 1276c <ull_done+0x64>
   12762:	2b01      	cmp	r3, #1
   12764:	d129      	bne.n	127ba <ull_done+0xb2>
		ull_conn_done(done);
   12766:	4628      	mov	r0, r5
   12768:	f001 fc6a 	bl	14040 <ull_conn_done>
	done->extra.type = 0U;
   1276c:	2300      	movs	r3, #0
   1276e:	f885 3020 	strb.w	r3, [r5, #32]
	release = RXFIFO_RELEASE(done, link, done);
   12772:	78ba      	ldrb	r2, [r7, #2]
   12774:	4b1e      	ldr	r3, [pc, #120]	; (127f0 <ull_done+0xe8>)
   12776:	7879      	ldrb	r1, [r7, #1]
   12778:	7838      	ldrb	r0, [r7, #0]
   1277a:	f8cd 9000 	str.w	r9, [sp]
   1277e:	e9cd 8501 	strd	r8, r5, [sp, #4]
   12782:	f011 fc0d 	bl	23fa0 <ull_rxfifo_release>
	LL_ASSERT(release == done);
   12786:	4285      	cmp	r5, r0
   12788:	d00c      	beq.n	127a4 <ull_done+0x9c>
   1278a:	4a16      	ldr	r2, [pc, #88]	; (127e4 <ull_done+0xdc>)
   1278c:	4919      	ldr	r1, [pc, #100]	; (127f4 <ull_done+0xec>)
   1278e:	4817      	ldr	r0, [pc, #92]	; (127ec <ull_done+0xe4>)
   12790:	f44f 6327 	mov.w	r3, #2672	; 0xa70
   12794:	f009 fd98 	bl	1c2c8 <printk>
   12798:	4040      	eors	r0, r0
   1279a:	f380 8811 	msr	BASEPRI, r0
   1279e:	f04f 0003 	mov.w	r0, #3
   127a2:	df02      	svc	2
	/* LLL done synchronize count */
	lll_done_ull_inc();
#endif /* CONFIG_BT_CTLR_LOW_LAT_ULL_DONE */

	/* If disable initiated, signal the semaphore */
	if (ull_hdr && !ull_ref_get(ull_hdr) && ull_hdr->disabled_cb) {
   127a4:	2c00      	cmp	r4, #0
   127a6:	d0b6      	beq.n	12716 <ull_done+0xe>
	return hdr->ref;
   127a8:	7823      	ldrb	r3, [r4, #0]
   127aa:	2b00      	cmp	r3, #0
   127ac:	d1b3      	bne.n	12716 <ull_done+0xe>
   127ae:	6963      	ldr	r3, [r4, #20]
   127b0:	2b00      	cmp	r3, #0
   127b2:	d0b0      	beq.n	12716 <ull_done+0xe>
		ull_hdr->disabled_cb(ull_hdr->disabled_param);
   127b4:	69a0      	ldr	r0, [r4, #24]
   127b6:	4798      	blx	r3
   127b8:	e7ad      	b.n	12716 <ull_done+0xe>
		LL_ASSERT(0);
   127ba:	4a0a      	ldr	r2, [pc, #40]	; (127e4 <ull_done+0xdc>)
   127bc:	490e      	ldr	r1, [pc, #56]	; (127f8 <ull_done+0xf0>)
   127be:	480b      	ldr	r0, [pc, #44]	; (127ec <ull_done+0xe4>)
   127c0:	f640 2369 	movw	r3, #2665	; 0xa69
   127c4:	f009 fd80 	bl	1c2c8 <printk>
   127c8:	4040      	eors	r0, r0
   127ca:	f380 8811 	msr	BASEPRI, r0
   127ce:	f04f 0003 	mov.w	r0, #3
   127d2:	df02      	svc	2
		break;
   127d4:	e7ca      	b.n	1276c <ull_done+0x64>
}
   127d6:	b007      	add	sp, #28
   127d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   127dc:	200008f8 	.word	0x200008f8
   127e0:	200029d0 	.word	0x200029d0
   127e4:	000278ee 	.word	0x000278ee
   127e8:	00027a18 	.word	0x00027a18
   127ec:	00027514 	.word	0x00027514
   127f0:	200008fb 	.word	0x200008fb
   127f4:	00027a2d 	.word	0x00027a2d
   127f8:	0002826c 	.word	0x0002826c

000127fc <lll_resume>:
	return lll_prepare_resolve(is_abort_cb, abort_cb, prepare_cb,
				   prepare_param, 0, 0);
}

void lll_resume(void *param)
{
   127fc:	b507      	push	{r0, r1, r2, lr}
	struct lll_event *next;
	int ret;

	next = param;
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
   127fe:	2201      	movs	r2, #1
   12800:	9201      	str	r2, [sp, #4]
				  next->prepare_cb, &next->prepare_param,
				  next->is_resume, 1);
   12802:	7f02      	ldrb	r2, [r0, #28]
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
   12804:	f002 0201 	and.w	r2, r2, #1
   12808:	9200      	str	r2, [sp, #0]
   1280a:	6902      	ldr	r2, [r0, #16]
{
   1280c:	4603      	mov	r3, r0
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
   1280e:	e9d0 0105 	ldrd	r0, r1, [r0, #20]
   12812:	f002 fb05 	bl	14e20 <lll_prepare_resolve>
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   12816:	b168      	cbz	r0, 12834 <lll_resume+0x38>
   12818:	3077      	adds	r0, #119	; 0x77
   1281a:	d00b      	beq.n	12834 <lll_resume+0x38>
   1281c:	4a07      	ldr	r2, [pc, #28]	; (1283c <lll_resume+0x40>)
   1281e:	4908      	ldr	r1, [pc, #32]	; (12840 <lll_resume+0x44>)
   12820:	4808      	ldr	r0, [pc, #32]	; (12844 <lll_resume+0x48>)
   12822:	234f      	movs	r3, #79	; 0x4f
   12824:	f009 fd50 	bl	1c2c8 <printk>
   12828:	4040      	eors	r0, r0
   1282a:	f380 8811 	msr	BASEPRI, r0
   1282e:	f04f 0003 	mov.w	r0, #3
   12832:	df02      	svc	2
}
   12834:	b003      	add	sp, #12
   12836:	f85d fb04 	ldr.w	pc, [sp], #4
   1283a:	bf00      	nop
   1283c:	00027a3d 	.word	0x00027a3d
   12840:	00027a7f 	.word	0x00027a7f
   12844:	00027514 	.word	0x00027514

00012848 <ticker_stop_cb>:
{
   12848:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1284a:	9d07      	ldr	r5, [sp, #28]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   1284c:	4a17      	ldr	r2, [pc, #92]	; (128ac <ticker_stop_cb+0x64>)
   1284e:	236c      	movs	r3, #108	; 0x6c
   12850:	1aaa      	subs	r2, r5, r2
   12852:	fbb2 f2f3 	udiv	r2, r2, r3
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   12856:	f012 04ff 	ands.w	r4, r2, #255	; 0xff
   1285a:	d00c      	beq.n	12876 <ticker_stop_cb+0x2e>
   1285c:	4a14      	ldr	r2, [pc, #80]	; (128b0 <ticker_stop_cb+0x68>)
   1285e:	4915      	ldr	r1, [pc, #84]	; (128b4 <ticker_stop_cb+0x6c>)
   12860:	4815      	ldr	r0, [pc, #84]	; (128b8 <ticker_stop_cb+0x70>)
   12862:	f640 03cd 	movw	r3, #2253	; 0x8cd
   12866:	f009 fd2f 	bl	1c2c8 <printk>
   1286a:	4040      	eors	r0, r0
   1286c:	f380 8811 	msr	BASEPRI, r0
   12870:	f04f 0003 	mov.w	r0, #3
   12874:	df02      	svc	2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
   12876:	1ca2      	adds	r2, r4, #2
   12878:	4b10      	ldr	r3, [pc, #64]	; (128bc <ticker_stop_cb+0x74>)
   1287a:	9500      	str	r5, [sp, #0]
   1287c:	b2d2      	uxtb	r2, r2
   1287e:	2101      	movs	r1, #1
   12880:	2000      	movs	r0, #0
   12882:	f7fe f81f 	bl	108c4 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   12886:	f030 0302 	bics.w	r3, r0, #2
   1288a:	d00c      	beq.n	128a6 <ticker_stop_cb+0x5e>
   1288c:	4a08      	ldr	r2, [pc, #32]	; (128b0 <ticker_stop_cb+0x68>)
   1288e:	490c      	ldr	r1, [pc, #48]	; (128c0 <ticker_stop_cb+0x78>)
   12890:	4809      	ldr	r0, [pc, #36]	; (128b8 <ticker_stop_cb+0x70>)
   12892:	f640 03d2 	movw	r3, #2258	; 0x8d2
   12896:	f009 fd17 	bl	1c2c8 <printk>
   1289a:	4040      	eors	r0, r0
   1289c:	f380 8811 	msr	BASEPRI, r0
   128a0:	f04f 0003 	mov.w	r0, #3
   128a4:	df02      	svc	2
}
   128a6:	b003      	add	sp, #12
   128a8:	bd30      	pop	{r4, r5, pc}
   128aa:	bf00      	nop
   128ac:	20002e58 	.word	0x20002e58
   128b0:	00027a93 	.word	0x00027a93
   128b4:	00027ad2 	.word	0x00027ad2
   128b8:	00027514 	.word	0x00027514
   128bc:	000129c9 	.word	0x000129c9
   128c0:	00027add 	.word	0x00027add

000128c4 <disabled_cb>:
{
   128c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	adv = ((struct lll_hdr *)param)->parent;
   128c6:	6805      	ldr	r5, [r0, #0]
	LL_ASSERT(adv->link_cc_free);
   128c8:	6e2b      	ldr	r3, [r5, #96]	; 0x60
{
   128ca:	4606      	mov	r6, r0
	LL_ASSERT(adv->link_cc_free);
   128cc:	b963      	cbnz	r3, 128e8 <disabled_cb+0x24>
   128ce:	4a1b      	ldr	r2, [pc, #108]	; (1293c <disabled_cb+0x78>)
   128d0:	491b      	ldr	r1, [pc, #108]	; (12940 <disabled_cb+0x7c>)
   128d2:	481c      	ldr	r0, [pc, #112]	; (12944 <disabled_cb+0x80>)
   128d4:	f640 131a 	movw	r3, #2330	; 0x91a
   128d8:	f009 fcf6 	bl	1c2c8 <printk>
   128dc:	4040      	eors	r0, r0
   128de:	f380 8811 	msr	BASEPRI, r0
   128e2:	f04f 0003 	mov.w	r0, #3
   128e6:	df02      	svc	2
	adv->link_cc_free = NULL;
   128e8:	2300      	movs	r3, #0
	link = adv->link_cc_free;
   128ea:	6e2f      	ldr	r7, [r5, #96]	; 0x60
	adv->link_cc_free = NULL;
   128ec:	662b      	str	r3, [r5, #96]	; 0x60
	LL_ASSERT(adv->node_rx_cc_free);
   128ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   128f0:	b963      	cbnz	r3, 1290c <disabled_cb+0x48>
   128f2:	4a12      	ldr	r2, [pc, #72]	; (1293c <disabled_cb+0x78>)
   128f4:	4914      	ldr	r1, [pc, #80]	; (12948 <disabled_cb+0x84>)
   128f6:	4813      	ldr	r0, [pc, #76]	; (12944 <disabled_cb+0x80>)
   128f8:	f640 131e 	movw	r3, #2334	; 0x91e
   128fc:	f009 fce4 	bl	1c2c8 <printk>
   12900:	4040      	eors	r0, r0
   12902:	f380 8811 	msr	BASEPRI, r0
   12906:	f04f 0003 	mov.w	r0, #3
   1290a:	df02      	svc	2
	rx = adv->node_rx_cc_free;
   1290c:	6e6c      	ldr	r4, [r5, #100]	; 0x64
	adv->node_rx_cc_free = NULL;
   1290e:	2100      	movs	r1, #0
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   12910:	2316      	movs	r3, #22
	adv->node_rx_cc_free = NULL;
   12912:	6669      	str	r1, [r5, #100]	; 0x64
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   12914:	7123      	strb	r3, [r4, #4]
	rx->hdr.handle = 0xffff;
   12916:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1291a:	80e3      	strh	r3, [r4, #6]
	memset(cc, 0x00, sizeof(struct node_rx_cc));
   1291c:	2212      	movs	r2, #18
   1291e:	f104 001c 	add.w	r0, r4, #28
   12922:	f00b fb91 	bl	1e048 <memset>
	cc->status = BT_HCI_ERR_ADV_TIMEOUT;
   12926:	233c      	movs	r3, #60	; 0x3c
   12928:	7723      	strb	r3, [r4, #28]
	rx->hdr.rx_ftr.param = param;
   1292a:	60a6      	str	r6, [r4, #8]
	ll_rx_put(link, rx);
   1292c:	4621      	mov	r1, r4
   1292e:	4638      	mov	r0, r7
   12930:	f7ff fa46 	bl	11dc0 <ll_rx_put>
}
   12934:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ll_rx_sched();
   12938:	f7ff ba4c 	b.w	11dd4 <ll_rx_sched>
   1293c:	00027a93 	.word	0x00027a93
   12940:	00027af6 	.word	0x00027af6
   12944:	00027514 	.word	0x00027514
   12948:	00027b08 	.word	0x00027b08

0001294c <conn_release>:
{
   1294c:	b570      	push	{r4, r5, r6, lr}
	struct lll_conn *lll = adv->lll.conn;
   1294e:	6a05      	ldr	r5, [r0, #32]
	LL_ASSERT(!lll->link_tx_free);
   12950:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
{
   12952:	4604      	mov	r4, r0
	LL_ASSERT(!lll->link_tx_free);
   12954:	b163      	cbz	r3, 12970 <conn_release+0x24>
   12956:	4a18      	ldr	r2, [pc, #96]	; (129b8 <conn_release+0x6c>)
   12958:	4918      	ldr	r1, [pc, #96]	; (129bc <conn_release+0x70>)
   1295a:	4819      	ldr	r0, [pc, #100]	; (129c0 <conn_release+0x74>)
   1295c:	f640 1348 	movw	r3, #2376	; 0x948
   12960:	f009 fcb2 	bl	1c2c8 <printk>
   12964:	4040      	eors	r0, r0
   12966:	f380 8811 	msr	BASEPRI, r0
   1296a:	f04f 0003 	mov.w	r0, #3
   1296e:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
   12970:	f105 0140 	add.w	r1, r5, #64	; 0x40
   12974:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   12978:	f010 ff81 	bl	2387e <memq_deinit>
	LL_ASSERT(link);
   1297c:	4606      	mov	r6, r0
   1297e:	b960      	cbnz	r0, 1299a <conn_release+0x4e>
   12980:	4a0d      	ldr	r2, [pc, #52]	; (129b8 <conn_release+0x6c>)
   12982:	4910      	ldr	r1, [pc, #64]	; (129c4 <conn_release+0x78>)
   12984:	480e      	ldr	r0, [pc, #56]	; (129c0 <conn_release+0x74>)
   12986:	f640 134a 	movw	r3, #2378	; 0x94a
   1298a:	f009 fc9d 	bl	1c2c8 <printk>
   1298e:	4040      	eors	r0, r0
   12990:	f380 8811 	msr	BASEPRI, r0
   12994:	f04f 0003 	mov.w	r0, #3
   12998:	df02      	svc	2
	ll_conn_release(lll->hdr.parent);
   1299a:	6828      	ldr	r0, [r5, #0]
	lll->link_tx_free = link;
   1299c:	64ee      	str	r6, [r5, #76]	; 0x4c
	adv->lll.conn = NULL;
   1299e:	2500      	movs	r5, #0
	ll_conn_release(lll->hdr.parent);
   129a0:	f000 fcec 	bl	1337c <ll_conn_release>
	ll_rx_release(adv->node_rx_cc_free);
   129a4:	6e60      	ldr	r0, [r4, #100]	; 0x64
	adv->lll.conn = NULL;
   129a6:	6225      	str	r5, [r4, #32]
	ll_rx_release(adv->node_rx_cc_free);
   129a8:	f7ff fa04 	bl	11db4 <ll_rx_release>
	ll_rx_link_release(adv->link_cc_free);
   129ac:	6e20      	ldr	r0, [r4, #96]	; 0x60
	adv->node_rx_cc_free = NULL;
   129ae:	6665      	str	r5, [r4, #100]	; 0x64
	ll_rx_link_release(adv->link_cc_free);
   129b0:	f7ff f9f4 	bl	11d9c <ll_rx_link_release>
	adv->link_cc_free = NULL;
   129b4:	6625      	str	r5, [r4, #96]	; 0x60
}
   129b6:	bd70      	pop	{r4, r5, r6, pc}
   129b8:	00027a93 	.word	0x00027a93
   129bc:	00027b1d 	.word	0x00027b1d
   129c0:	00027514 	.word	0x00027514
   129c4:	00027d05 	.word	0x00027d05

000129c8 <ticker_stop_op_cb>:
{
   129c8:	b508      	push	{r3, lr}
	if (status != TICKER_STATUS_SUCCESS) {
   129ca:	4602      	mov	r2, r0
   129cc:	b998      	cbnz	r0, 129f6 <ticker_stop_op_cb+0x2e>
	mfy.param = param;
   129ce:	4b0a      	ldr	r3, [pc, #40]	; (129f8 <ticker_stop_op_cb+0x30>)
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   129d0:	2002      	movs	r0, #2
	mfy.param = param;
   129d2:	6099      	str	r1, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   129d4:	2101      	movs	r1, #1
   129d6:	f7fd f9b1 	bl	fd3c <mayfly_enqueue>
	LL_ASSERT(!ret);
   129da:	b160      	cbz	r0, 129f6 <ticker_stop_op_cb+0x2e>
   129dc:	4a07      	ldr	r2, [pc, #28]	; (129fc <ticker_stop_op_cb+0x34>)
   129de:	4908      	ldr	r1, [pc, #32]	; (12a00 <ticker_stop_op_cb+0x38>)
   129e0:	4808      	ldr	r0, [pc, #32]	; (12a04 <ticker_stop_op_cb+0x3c>)
   129e2:	f640 03ee 	movw	r3, #2286	; 0x8ee
   129e6:	f009 fc6f 	bl	1c2c8 <printk>
   129ea:	4040      	eors	r0, r0
   129ec:	f380 8811 	msr	BASEPRI, r0
   129f0:	f04f 0003 	mov.w	r0, #3
   129f4:	df02      	svc	2
}
   129f6:	bd08      	pop	{r3, pc}
   129f8:	20000adc 	.word	0x20000adc
   129fc:	00027a93 	.word	0x00027a93
   12a00:	000279ee 	.word	0x000279ee
   12a04:	00027514 	.word	0x00027514

00012a08 <adv_disable>:
{
   12a08:	b538      	push	{r3, r4, r5, lr}
   12a0a:	4604      	mov	r4, r0
   12a0c:	f810 3b1c 	ldrb.w	r3, [r0], #28
	if (ull_ref_get(hdr)) {
   12a10:	b34b      	cbz	r3, 12a66 <adv_disable+0x5e>
		mfy.param = &adv->lll;
   12a12:	4d17      	ldr	r5, [pc, #92]	; (12a70 <adv_disable+0x68>)
		LL_ASSERT(!hdr->disabled_cb);
   12a14:	6963      	ldr	r3, [r4, #20]
		mfy.param = &adv->lll;
   12a16:	60a8      	str	r0, [r5, #8]
		LL_ASSERT(!hdr->disabled_cb);
   12a18:	b163      	cbz	r3, 12a34 <adv_disable+0x2c>
   12a1a:	4a16      	ldr	r2, [pc, #88]	; (12a74 <adv_disable+0x6c>)
   12a1c:	4916      	ldr	r1, [pc, #88]	; (12a78 <adv_disable+0x70>)
   12a1e:	4817      	ldr	r0, [pc, #92]	; (12a7c <adv_disable+0x74>)
   12a20:	f640 1303 	movw	r3, #2307	; 0x903
   12a24:	f009 fc50 	bl	1c2c8 <printk>
   12a28:	4040      	eors	r0, r0
   12a2a:	f380 8811 	msr	BASEPRI, r0
   12a2e:	f04f 0003 	mov.w	r0, #3
   12a32:	df02      	svc	2
		hdr->disabled_param = mfy.param;
   12a34:	68ab      	ldr	r3, [r5, #8]
   12a36:	61a3      	str	r3, [r4, #24]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   12a38:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
   12a3a:	4b11      	ldr	r3, [pc, #68]	; (12a80 <adv_disable+0x78>)
   12a3c:	6163      	str	r3, [r4, #20]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   12a3e:	4611      	mov	r1, r2
   12a40:	4b0b      	ldr	r3, [pc, #44]	; (12a70 <adv_disable+0x68>)
   12a42:	2001      	movs	r0, #1
   12a44:	f7fd f97a 	bl	fd3c <mayfly_enqueue>
		LL_ASSERT(!ret);
   12a48:	b160      	cbz	r0, 12a64 <adv_disable+0x5c>
   12a4a:	4a0a      	ldr	r2, [pc, #40]	; (12a74 <adv_disable+0x6c>)
   12a4c:	490d      	ldr	r1, [pc, #52]	; (12a84 <adv_disable+0x7c>)
   12a4e:	480b      	ldr	r0, [pc, #44]	; (12a7c <adv_disable+0x74>)
   12a50:	f640 130a 	movw	r3, #2314	; 0x90a
   12a54:	f009 fc38 	bl	1c2c8 <printk>
   12a58:	4040      	eors	r0, r0
   12a5a:	f380 8811 	msr	BASEPRI, r0
   12a5e:	f04f 0003 	mov.w	r0, #3
   12a62:	df02      	svc	2
}
   12a64:	bd38      	pop	{r3, r4, r5, pc}
   12a66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		disabled_cb(&adv->lll);
   12a6a:	f7ff bf2b 	b.w	128c4 <disabled_cb>
   12a6e:	bf00      	nop
   12a70:	20000acc 	.word	0x20000acc
   12a74:	00027a93 	.word	0x00027a93
   12a78:	00027b30 	.word	0x00027b30
   12a7c:	00027514 	.word	0x00027514
   12a80:	000128c5 	.word	0x000128c5
   12a84:	000279ee 	.word	0x000279ee

00012a88 <ticker_update_op_cb>:
{
   12a88:	b510      	push	{r4, lr}
   12a8a:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   12a8c:	b180      	cbz	r0, 12ab0 <ticker_update_op_cb+0x28>
   12a8e:	f7ff fae1 	bl	12054 <ull_disable_mark_get>
   12a92:	4284      	cmp	r4, r0
   12a94:	d00c      	beq.n	12ab0 <ticker_update_op_cb+0x28>
   12a96:	4a07      	ldr	r2, [pc, #28]	; (12ab4 <ticker_update_op_cb+0x2c>)
   12a98:	4907      	ldr	r1, [pc, #28]	; (12ab8 <ticker_update_op_cb+0x30>)
   12a9a:	4808      	ldr	r0, [pc, #32]	; (12abc <ticker_update_op_cb+0x34>)
   12a9c:	f640 03bf 	movw	r3, #2239	; 0x8bf
   12aa0:	f009 fc12 	bl	1c2c8 <printk>
   12aa4:	4040      	eors	r0, r0
   12aa6:	f380 8811 	msr	BASEPRI, r0
   12aaa:	f04f 0003 	mov.w	r0, #3
   12aae:	df02      	svc	2
}
   12ab0:	bd10      	pop	{r4, pc}
   12ab2:	bf00      	nop
   12ab4:	00027a93 	.word	0x00027a93
   12ab8:	00027b42 	.word	0x00027b42
   12abc:	00027514 	.word	0x00027514

00012ac0 <init_reset>:
{
   12ac0:	b510      	push	{r4, lr}
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
   12ac2:	4c13      	ldr	r4, [pc, #76]	; (12b10 <init_reset+0x50>)
   12ac4:	f104 0028 	add.w	r0, r4, #40	; 0x28
   12ac8:	f002 fba6 	bl	15218 <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
   12acc:	f104 0034 	add.w	r0, r4, #52	; 0x34
   12ad0:	f002 fba2 	bl	15218 <lll_adv_data_init>
	pdu->len = BDADDR_SIZE;
}

static void init_set(struct ll_adv_set *adv)
{
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
   12ad4:	f44f 6300 	mov.w	r3, #2048	; 0x800
   12ad8:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
#if defined(CONFIG_BT_CTLR_PRIVACY)
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
#endif /* CONFIG_BT_CTLR_PRIVACY */
	adv->lll.chan_map = BT_LE_ADV_CHAN_MAP_ALL;
   12adc:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   12ade:	f423 7343 	bic.w	r3, r3, #780	; 0x30c
   12ae2:	f023 0302 	bic.w	r3, r3, #2
   12ae6:	f043 030e 	orr.w	r3, r3, #14
   12aea:	84a3      	strh	r3, [r4, #36]	; 0x24
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   12aec:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   12af0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	pdu->len = BDADDR_SIZE;
   12af4:	2206      	movs	r2, #6
   12af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	pdu->type = pdu_type;
   12af8:	2000      	movs	r0, #0
	pdu->len = BDADDR_SIZE;
   12afa:	705a      	strb	r2, [r3, #1]
	pdu->type = pdu_type;
   12afc:	7018      	strb	r0, [r3, #0]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   12afe:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
   12b02:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   12b06:	2104      	movs	r1, #4
   12b08:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	pdu->len = BDADDR_SIZE;
   12b0a:	705a      	strb	r2, [r3, #1]
	pdu->type = pdu_type;
   12b0c:	7019      	strb	r1, [r3, #0]
}
   12b0e:	bd10      	pop	{r4, pc}
   12b10:	20002e58 	.word	0x20002e58

00012b14 <ticker_cb>:
{
   12b14:	b5f0      	push	{r4, r5, r6, r7, lr}
   12b16:	461c      	mov	r4, r3
   12b18:	b08b      	sub	sp, #44	; 0x2c
	if (IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) ||
   12b1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   12b1e:	429c      	cmp	r4, r3
{
   12b20:	9d11      	ldr	r5, [sp, #68]	; 0x44
   12b22:	4607      	mov	r7, r0
   12b24:	4616      	mov	r6, r2
	if (IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) ||
   12b26:	d030      	beq.n	12b8a <ticker_cb+0x76>
	return ++hdr->ref;
   12b28:	7829      	ldrb	r1, [r5, #0]
   12b2a:	3101      	adds	r1, #1
   12b2c:	b2c9      	uxtb	r1, r1
   12b2e:	7029      	strb	r1, [r5, #0]
		LL_ASSERT(ref);
   12b30:	b961      	cbnz	r1, 12b4c <ticker_cb+0x38>
   12b32:	4a31      	ldr	r2, [pc, #196]	; (12bf8 <ticker_cb+0xe4>)
   12b34:	4931      	ldr	r1, [pc, #196]	; (12bfc <ticker_cb+0xe8>)
   12b36:	4832      	ldr	r0, [pc, #200]	; (12c00 <ticker_cb+0xec>)
   12b38:	f640 0385 	movw	r3, #2181	; 0x885
   12b3c:	f009 fbc4 	bl	1c2c8 <printk>
   12b40:	4040      	eors	r0, r0
   12b42:	f380 8811 	msr	BASEPRI, r0
   12b46:	f04f 0003 	mov.w	r0, #3
   12b4a:	df02      	svc	2
		p.ticks_at_expire = ticks_at_expire;
   12b4c:	492d      	ldr	r1, [pc, #180]	; (12c04 <ticker_cb+0xf0>)
		p.force = force;
   12b4e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   12b52:	728b      	strb	r3, [r1, #10]
	lll = &adv->lll;
   12b54:	f105 031c 	add.w	r3, r5, #28
		p.param = lll;
   12b58:	60cb      	str	r3, [r1, #12]
		mfy.param = &p;
   12b5a:	4b2b      	ldr	r3, [pc, #172]	; (12c08 <ticker_cb+0xf4>)
		p.lazy = lazy;
   12b5c:	810c      	strh	r4, [r1, #8]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   12b5e:	2200      	movs	r2, #0
		p.remainder = remainder;
   12b60:	e9c1 7600 	strd	r7, r6, [r1]
		mfy.param = &p;
   12b64:	6099      	str	r1, [r3, #8]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   12b66:	2001      	movs	r0, #1
   12b68:	4611      	mov	r1, r2
   12b6a:	f7fd f8e7 	bl	fd3c <mayfly_enqueue>
		LL_ASSERT(!ret);
   12b6e:	b160      	cbz	r0, 12b8a <ticker_cb+0x76>
   12b70:	4a21      	ldr	r2, [pc, #132]	; (12bf8 <ticker_cb+0xe4>)
   12b72:	4926      	ldr	r1, [pc, #152]	; (12c0c <ticker_cb+0xf8>)
   12b74:	4822      	ldr	r0, [pc, #136]	; (12c00 <ticker_cb+0xec>)
   12b76:	f640 0392 	movw	r3, #2194	; 0x892
   12b7a:	f009 fba5 	bl	1c2c8 <printk>
   12b7e:	4040      	eors	r0, r0
   12b80:	f380 8811 	msr	BASEPRI, r0
   12b84:	f04f 0003 	mov.w	r0, #3
   12b88:	df02      	svc	2
	if (!lll->is_hdcd)
   12b8a:	f895 4024 	ldrb.w	r4, [r5, #36]	; 0x24
   12b8e:	f014 0401 	ands.w	r4, r4, #1
   12b92:	d12f      	bne.n	12bf4 <ticker_cb+0xe0>
	lll_rand_isr_get(&random_delay, sizeof(random_delay));
   12b94:	2104      	movs	r1, #4
   12b96:	a809      	add	r0, sp, #36	; 0x24
   12b98:	f011 fd14 	bl	245c4 <lll_rand_isr_get>
	random_delay %= ticks_delay_window;
   12b9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   12b9e:	9506      	str	r5, [sp, #24]
	random_delay %= ticks_delay_window;
   12ba0:	f240 1247 	movw	r2, #327	; 0x147
   12ba4:	fbb3 f1f2 	udiv	r1, r3, r2
   12ba8:	fb02 3311 	mls	r3, r2, r1, r3
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   12bac:	4a18      	ldr	r2, [pc, #96]	; (12c10 <ticker_cb+0xfc>)
   12bae:	216c      	movs	r1, #108	; 0x6c
   12bb0:	1aaa      	subs	r2, r5, r2
   12bb2:	fbb2 f2f1 	udiv	r2, r2, r1
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   12bb6:	4917      	ldr	r1, [pc, #92]	; (12c14 <ticker_cb+0x100>)
   12bb8:	3202      	adds	r2, #2
	random_delay += (ticks_delay_window_offset + 1);
   12bba:	3301      	adds	r3, #1
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   12bbc:	e9cd 4104 	strd	r4, r1, [sp, #16]
   12bc0:	e9cd 4402 	strd	r4, r4, [sp, #8]
   12bc4:	e9cd 4400 	strd	r4, r4, [sp]
   12bc8:	b2d2      	uxtb	r2, r2
   12bca:	2101      	movs	r1, #1
   12bcc:	4620      	mov	r0, r4
	random_delay += (ticks_delay_window_offset + 1);
   12bce:	9309      	str	r3, [sp, #36]	; 0x24
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   12bd0:	f011 f90e 	bl	23df0 <ticker_update>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   12bd4:	f030 0302 	bics.w	r3, r0, #2
   12bd8:	d00c      	beq.n	12bf4 <ticker_cb+0xe0>
   12bda:	4a07      	ldr	r2, [pc, #28]	; (12bf8 <ticker_cb+0xe4>)
   12bdc:	490e      	ldr	r1, [pc, #56]	; (12c18 <ticker_cb+0x104>)
   12bde:	4808      	ldr	r0, [pc, #32]	; (12c00 <ticker_cb+0xec>)
   12be0:	f240 732c 	movw	r3, #1836	; 0x72c
   12be4:	f009 fb70 	bl	1c2c8 <printk>
   12be8:	4040      	eors	r0, r0
   12bea:	f380 8811 	msr	BASEPRI, r0
   12bee:	f04f 0003 	mov.w	r0, #3
   12bf2:	df02      	svc	2
}
   12bf4:	b00b      	add	sp, #44	; 0x2c
   12bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12bf8:	00027a93 	.word	0x00027a93
   12bfc:	00027b71 	.word	0x00027b71
   12c00:	00027514 	.word	0x00027514
   12c04:	20002ed0 	.word	0x20002ed0
   12c08:	20000abc 	.word	0x20000abc
   12c0c:	000279ee 	.word	0x000279ee
   12c10:	20002e58 	.word	0x20002e58
   12c14:	00012a89 	.word	0x00012a89
   12c18:	00027add 	.word	0x00027add

00012c1c <ll_adv_params_set>:
{
   12c1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!adv || adv->is_enabled) {
   12c20:	4d57      	ldr	r5, [pc, #348]	; (12d80 <ll_adv_params_set+0x164>)
{
   12c22:	4698      	mov	r8, r3
	if (!adv || adv->is_enabled) {
   12c24:	f895 606a 	ldrb.w	r6, [r5, #106]	; 0x6a
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   12c28:	4b56      	ldr	r3, [pc, #344]	; (12d84 <ll_adv_params_set+0x168>)
{
   12c2a:	4604      	mov	r4, r0
	if (!adv || adv->is_enabled) {
   12c2c:	f016 0601 	ands.w	r6, r6, #1
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   12c30:	6818      	ldr	r0, [r3, #0]
   12c32:	791b      	ldrb	r3, [r3, #4]
   12c34:	9000      	str	r0, [sp, #0]
{
   12c36:	4617      	mov	r7, r2
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   12c38:	f88d 3004 	strb.w	r3, [sp, #4]
	if (!adv || adv->is_enabled) {
   12c3c:	f040 809d 	bne.w	12d7a <ll_adv_params_set+0x15e>
		adv->interval = 0;
   12c40:	2901      	cmp	r1, #1
   12c42:	bf08      	it	eq
   12c44:	2400      	moveq	r4, #0
   12c46:	f8a5 4068 	strh.w	r4, [r5, #104]	; 0x68
	adv->lll.chan_map = chan_map;
   12c4a:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
   12c4e:	f004 0303 	and.w	r3, r4, #3
   12c52:	f89d 4034 	ldrb.w	r4, [sp, #52]	; 0x34
   12c56:	f004 0407 	and.w	r4, r4, #7
   12c5a:	0064      	lsls	r4, r4, #1
   12c5c:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
   12c60:	8cab      	ldrh	r3, [r5, #36]	; 0x24
   12c62:	f423 7343 	bic.w	r3, r3, #780	; 0x30c
   12c66:	f023 0302 	bic.w	r3, r3, #2
   12c6a:	431c      	orrs	r4, r3
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   12c6c:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
   12c70:	84ac      	strh	r4, [r5, #36]	; 0x24
   12c72:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   12c76:	ea4f 1a87 	mov.w	sl, r7, lsl #6
   12c7a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
	pdu->type = pdu_adv_type[adv_type];
   12c7c:	ab02      	add	r3, sp, #8
   12c7e:	4419      	add	r1, r3
	pdu_type_prev = pdu->type;
   12c80:	7822      	ldrb	r2, [r4, #0]
	pdu->type = pdu_adv_type[adv_type];
   12c82:	f811 3c08 	ldrb.w	r3, [r1, #-8]
	pdu_type_prev = pdu->type;
   12c86:	f002 090f 	and.w	r9, r2, #15
	pdu->type = pdu_adv_type[adv_type];
   12c8a:	f003 030f 	and.w	r3, r3, #15
   12c8e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
   12c92:	4313      	orrs	r3, r2
   12c94:	7023      	strb	r3, [r4, #0]
	if (((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
   12c96:	f003 030f 	and.w	r3, r3, #15
   12c9a:	2b01      	cmp	r3, #1
   12c9c:	d137      	bne.n	12d0e <ll_adv_params_set+0xf2>
	    (pdu_type_prev != PDU_ADV_TYPE_DIRECT_IND) &&
   12c9e:	f1b9 0f01 	cmp.w	r9, #1
   12ca2:	f104 0b08 	add.w	fp, r4, #8
   12ca6:	d003      	beq.n	12cb0 <ll_adv_params_set+0x94>
		if (pdu->len == 0U) {
   12ca8:	7863      	ldrb	r3, [r4, #1]
   12caa:	b99b      	cbnz	r3, 12cd4 <ll_adv_params_set+0xb8>
			adv->ad_data_backup.len = 0U;
   12cac:	f885 6040 	strb.w	r6, [r5, #64]	; 0x40
		pdu->tx_addr = own_addr_type & 0x1;
   12cb0:	f00a 0340 	and.w	r3, sl, #64	; 0x40
   12cb4:	ea43 18c8 	orr.w	r8, r3, r8, lsl #7
   12cb8:	7823      	ldrb	r3, [r4, #0]
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
   12cba:	990c      	ldr	r1, [sp, #48]	; 0x30
		pdu->tx_addr = own_addr_type & 0x1;
   12cbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   12cc0:	ea48 0803 	orr.w	r8, r8, r3
   12cc4:	f884 8000 	strb.w	r8, [r4]
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
   12cc8:	2206      	movs	r2, #6
   12cca:	4658      	mov	r0, fp
   12ccc:	f00b f9b1 	bl	1e032 <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
   12cd0:	230c      	movs	r3, #12
   12cd2:	e027      	b.n	12d24 <ll_adv_params_set+0x108>
			LL_ASSERT(pdu->len >=
   12cd4:	2b05      	cmp	r3, #5
   12cd6:	d80c      	bhi.n	12cf2 <ll_adv_params_set+0xd6>
   12cd8:	4a2b      	ldr	r2, [pc, #172]	; (12d88 <ll_adv_params_set+0x16c>)
   12cda:	492c      	ldr	r1, [pc, #176]	; (12d8c <ll_adv_params_set+0x170>)
   12cdc:	482c      	ldr	r0, [pc, #176]	; (12d90 <ll_adv_params_set+0x174>)
   12cde:	f44f 73ce 	mov.w	r3, #412	; 0x19c
   12ce2:	f009 faf1 	bl	1c2c8 <printk>
   12ce6:	4040      	eors	r0, r0
   12ce8:	f380 8811 	msr	BASEPRI, r0
   12cec:	f04f 0003 	mov.w	r0, #3
   12cf0:	df02      	svc	2
			adv->ad_data_backup.len = pdu->len -
   12cf2:	7862      	ldrb	r2, [r4, #1]
			memcpy(adv->ad_data_backup.data, pdu->adv_ind.data,
   12cf4:	4827      	ldr	r0, [pc, #156]	; (12d94 <ll_adv_params_set+0x178>)
			adv->ad_data_backup.len = pdu->len -
   12cf6:	3a06      	subs	r2, #6
   12cf8:	b2d2      	uxtb	r2, r2
   12cfa:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
			memcpy(adv->ad_data_backup.data, pdu->adv_ind.data,
   12cfe:	4659      	mov	r1, fp
   12d00:	f00b f997 	bl	1e032 <memcpy>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   12d04:	7823      	ldrb	r3, [r4, #0]
   12d06:	f003 030f 	and.w	r3, r3, #15
   12d0a:	2b01      	cmp	r3, #1
   12d0c:	d0d0      	beq.n	12cb0 <ll_adv_params_set+0x94>
	} else if (pdu->len == 0) {
   12d0e:	7862      	ldrb	r2, [r4, #1]
		pdu->tx_addr = own_addr_type & 0x1;
   12d10:	f007 0701 	and.w	r7, r7, #1
	} else if (pdu->len == 0) {
   12d14:	b942      	cbnz	r2, 12d28 <ll_adv_params_set+0x10c>
		pdu->tx_addr = own_addr_type & 0x1;
   12d16:	7823      	ldrb	r3, [r4, #0]
   12d18:	f367 1386 	bfi	r3, r7, #6, #1
		pdu->rx_addr = 0;
   12d1c:	f362 13c7 	bfi	r3, r2, #7, #1
   12d20:	7023      	strb	r3, [r4, #0]
		pdu->len = BDADDR_SIZE;
   12d22:	2306      	movs	r3, #6
		pdu->len = sizeof(struct pdu_adv_direct_ind);
   12d24:	7063      	strb	r3, [r4, #1]
   12d26:	e013      	b.n	12d50 <ll_adv_params_set+0x134>
		if (((pdu_type_prev == PDU_ADV_TYPE_DIRECT_IND) ||
   12d28:	f1b9 0f01 	cmp.w	r9, #1
   12d2c:	d10a      	bne.n	12d44 <ll_adv_params_set+0x128>
			memcpy(pdu->adv_ind.data, adv->ad_data_backup.data,
   12d2e:	f895 2040 	ldrb.w	r2, [r5, #64]	; 0x40
   12d32:	4918      	ldr	r1, [pc, #96]	; (12d94 <ll_adv_params_set+0x178>)
   12d34:	f104 0008 	add.w	r0, r4, #8
   12d38:	f00b f97b 	bl	1e032 <memcpy>
			pdu->len = offsetof(struct pdu_adv_adv_ind, data) +
   12d3c:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
   12d40:	3306      	adds	r3, #6
   12d42:	7063      	strb	r3, [r4, #1]
		pdu->tx_addr = own_addr_type & 0x1;
   12d44:	7823      	ldrb	r3, [r4, #0]
   12d46:	f367 1386 	bfi	r3, r7, #6, #1
		pdu->rx_addr = 0;
   12d4a:	f36f 13c7 	bfc	r3, #7, #1
   12d4e:	7023      	strb	r3, [r4, #0]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   12d50:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
   12d54:	61ed      	str	r5, [r5, #28]
   12d56:	eb05 0583 	add.w	r5, r5, r3, lsl #2
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   12d5a:	f00a 0a40 	and.w	sl, sl, #64	; 0x40
   12d5e:	6bab      	ldr	r3, [r5, #56]	; 0x38
		if (pdu->len == 0) {
   12d60:	785a      	ldrb	r2, [r3, #1]
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   12d62:	f04a 0a04 	orr.w	sl, sl, #4
   12d66:	f883 a000 	strb.w	sl, [r3]
		if (pdu->len == 0) {
   12d6a:	b912      	cbnz	r2, 12d72 <ll_adv_params_set+0x156>
			pdu->len = BDADDR_SIZE;
   12d6c:	2106      	movs	r1, #6
   12d6e:	7059      	strb	r1, [r3, #1]
	return 0;
   12d70:	4616      	mov	r6, r2
}
   12d72:	4630      	mov	r0, r6
   12d74:	b003      	add	sp, #12
   12d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   12d7a:	260c      	movs	r6, #12
   12d7c:	e7f9      	b.n	12d72 <ll_adv_params_set+0x156>
   12d7e:	bf00      	nop
   12d80:	20002e58 	.word	0x20002e58
   12d84:	00026686 	.word	0x00026686
   12d88:	00027a93 	.word	0x00027a93
   12d8c:	00027b75 	.word	0x00027b75
   12d90:	00027514 	.word	0x00027514
   12d94:	20002e99 	.word	0x20002e99

00012d98 <ull_adv_reset_finalize>:
{
   12d98:	b510      	push	{r4, lr}
		lll_adv_data_reset(&lll->adv_data);
   12d9a:	4c06      	ldr	r4, [pc, #24]	; (12db4 <ull_adv_reset_finalize+0x1c>)
   12d9c:	f104 0028 	add.w	r0, r4, #40	; 0x28
   12da0:	f011 fc71 	bl	24686 <lll_adv_data_reset>
		lll_adv_data_reset(&lll->scan_rsp);
   12da4:	f104 0034 	add.w	r0, r4, #52	; 0x34
   12da8:	f011 fc6d 	bl	24686 <lll_adv_data_reset>
}
   12dac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	err = init_reset();
   12db0:	f7ff be86 	b.w	12ac0 <init_reset>
   12db4:	20002e58 	.word	0x20002e58

00012db8 <ull_adv_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   12db8:	4b03      	ldr	r3, [pc, #12]	; (12dc8 <ull_adv_handle_get+0x10>)
   12dba:	1ac0      	subs	r0, r0, r3
   12dbc:	236c      	movs	r3, #108	; 0x6c
   12dbe:	fbb0 f0f3 	udiv	r0, r0, r3
}
   12dc2:	b280      	uxth	r0, r0
   12dc4:	4770      	bx	lr
   12dc6:	bf00      	nop
   12dc8:	20002e58 	.word	0x20002e58

00012dcc <ull_adv_lll_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   12dcc:	6800      	ldr	r0, [r0, #0]
   12dce:	4b03      	ldr	r3, [pc, #12]	; (12ddc <ull_adv_lll_handle_get+0x10>)
   12dd0:	1ac0      	subs	r0, r0, r3
   12dd2:	236c      	movs	r3, #108	; 0x6c
   12dd4:	fbb0 f0f3 	udiv	r0, r0, r3
}
   12dd8:	b280      	uxth	r0, r0
   12dda:	4770      	bx	lr
   12ddc:	20002e58 	.word	0x20002e58

00012de0 <ull_adv_is_enabled_get>:
	if (handle >= BT_CTLR_ADV_SET) {
   12de0:	b938      	cbnz	r0, 12df2 <ull_adv_is_enabled_get+0x12>
	if (!adv || !adv->is_enabled) {
   12de2:	4805      	ldr	r0, [pc, #20]	; (12df8 <ull_adv_is_enabled_get+0x18>)
   12de4:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
	return &ll_adv[handle];
   12de8:	f013 0f01 	tst.w	r3, #1
   12dec:	bf08      	it	eq
   12dee:	2000      	moveq	r0, #0
   12df0:	4770      	bx	lr
		return NULL;
   12df2:	2000      	movs	r0, #0
}
   12df4:	4770      	bx	lr
   12df6:	bf00      	nop
   12df8:	20002e58 	.word	0x20002e58

00012dfc <disable.constprop.0>:
static inline uint8_t disable(uint8_t handle)
   12dfc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	adv = ull_adv_is_enabled_get(handle);
   12dfe:	2000      	movs	r0, #0
   12e00:	f7ff ffee 	bl	12de0 <ull_adv_is_enabled_get>
	if (!adv) {
   12e04:	4604      	mov	r4, r0
   12e06:	2800      	cmp	r0, #0
   12e08:	d037      	beq.n	12e7a <disable.constprop.0+0x7e>
	if (adv->lll.conn) {
   12e0a:	6a03      	ldr	r3, [r0, #32]
   12e0c:	bb4b      	cbnz	r3, 12e62 <disable.constprop.0+0x66>
	mark = ull_disable_mark(adv);
   12e0e:	4620      	mov	r0, r4
   12e10:	f7ff f90a 	bl	12028 <ull_disable_mark>
	LL_ASSERT(mark == adv);
   12e14:	4284      	cmp	r4, r0
   12e16:	d132      	bne.n	12e7e <disable.constprop.0+0x82>
	if (adv->lll.is_hdcd) {
   12e18:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   12e1c:	07db      	lsls	r3, r3, #31
   12e1e:	d53c      	bpl.n	12e9a <disable.constprop.0+0x9e>
		ret_cb = TICKER_STATUS_BUSY;
   12e20:	2302      	movs	r3, #2
   12e22:	9303      	str	r3, [sp, #12]
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   12e24:	ab03      	add	r3, sp, #12
   12e26:	9300      	str	r3, [sp, #0]
   12e28:	2103      	movs	r1, #3
   12e2a:	4b40      	ldr	r3, [pc, #256]	; (12f2c <disable.constprop.0+0x130>)
   12e2c:	2201      	movs	r2, #1
   12e2e:	2000      	movs	r0, #0
   12e30:	f7fd fd48 	bl	108c4 <ticker_stop>
		ret = ull_ticker_status_take(ret, &ret_cb);
   12e34:	a903      	add	r1, sp, #12
   12e36:	f7ff f8d1 	bl	11fdc <ull_ticker_status_take>
		if (ret) {
   12e3a:	b370      	cbz	r0, 12e9a <disable.constprop.0+0x9e>
			mark = ull_disable_unmark(adv);
   12e3c:	4620      	mov	r0, r4
   12e3e:	f7ff f8fb 	bl	12038 <ull_disable_unmark>
			LL_ASSERT(mark == adv);
   12e42:	4284      	cmp	r4, r0
   12e44:	d018      	beq.n	12e78 <disable.constprop.0+0x7c>
   12e46:	f640 230a 	movw	r3, #2570	; 0xa0a
		LL_ASSERT(mark == adv);
   12e4a:	4a39      	ldr	r2, [pc, #228]	; (12f30 <disable.constprop.0+0x134>)
   12e4c:	4939      	ldr	r1, [pc, #228]	; (12f34 <disable.constprop.0+0x138>)
   12e4e:	483a      	ldr	r0, [pc, #232]	; (12f38 <disable.constprop.0+0x13c>)
   12e50:	f009 fa3a 	bl	1c2c8 <printk>
   12e54:	4040      	eors	r0, r0
   12e56:	f380 8811 	msr	BASEPRI, r0
   12e5a:	f04f 0003 	mov.w	r0, #3
   12e5e:	df02      	svc	2
   12e60:	e00a      	b.n	12e78 <disable.constprop.0+0x7c>
		adv->lll.conn->periph.cancelled = 1U;
   12e62:	f893 2020 	ldrb.w	r2, [r3, #32]
   12e66:	f042 0202 	orr.w	r2, r2, #2
   12e6a:	f883 2020 	strb.w	r2, [r3, #32]
		if (unlikely(adv->lll.conn->periph.initiated)) {
   12e6e:	6a03      	ldr	r3, [r0, #32]
   12e70:	f893 3020 	ldrb.w	r3, [r3, #32]
   12e74:	07da      	lsls	r2, r3, #31
   12e76:	d5ca      	bpl.n	12e0e <disable.constprop.0+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
   12e78:	200c      	movs	r0, #12
}
   12e7a:	b004      	add	sp, #16
   12e7c:	bd10      	pop	{r4, pc}
	LL_ASSERT(mark == adv);
   12e7e:	4a2c      	ldr	r2, [pc, #176]	; (12f30 <disable.constprop.0+0x134>)
   12e80:	492c      	ldr	r1, [pc, #176]	; (12f34 <disable.constprop.0+0x138>)
   12e82:	482d      	ldr	r0, [pc, #180]	; (12f38 <disable.constprop.0+0x13c>)
   12e84:	f640 13ff 	movw	r3, #2559	; 0x9ff
   12e88:	f009 fa1e 	bl	1c2c8 <printk>
   12e8c:	4040      	eors	r0, r0
   12e8e:	f380 8811 	msr	BASEPRI, r0
   12e92:	f04f 0003 	mov.w	r0, #3
   12e96:	df02      	svc	2
   12e98:	e7be      	b.n	12e18 <disable.constprop.0+0x1c>
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   12e9a:	ab03      	add	r3, sp, #12
	ret_cb = TICKER_STATUS_BUSY;
   12e9c:	2202      	movs	r2, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   12e9e:	9300      	str	r3, [sp, #0]
   12ea0:	2103      	movs	r1, #3
   12ea2:	4b22      	ldr	r3, [pc, #136]	; (12f2c <disable.constprop.0+0x130>)
	ret_cb = TICKER_STATUS_BUSY;
   12ea4:	9203      	str	r2, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   12ea6:	2000      	movs	r0, #0
   12ea8:	f7fd fd0c 	bl	108c4 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   12eac:	a903      	add	r1, sp, #12
   12eae:	f7ff f895 	bl	11fdc <ull_ticker_status_take>
	if (ret) {
   12eb2:	b138      	cbz	r0, 12ec4 <disable.constprop.0+0xc8>
		mark = ull_disable_unmark(adv);
   12eb4:	4620      	mov	r0, r4
   12eb6:	f7ff f8bf 	bl	12038 <ull_disable_unmark>
		LL_ASSERT(mark == adv);
   12eba:	4284      	cmp	r4, r0
   12ebc:	d0dc      	beq.n	12e78 <disable.constprop.0+0x7c>
   12ebe:	f640 2318 	movw	r3, #2584	; 0xa18
   12ec2:	e7c2      	b.n	12e4a <disable.constprop.0+0x4e>
	err = ull_disable(&adv->lll);
   12ec4:	f104 001c 	add.w	r0, r4, #28
   12ec8:	f7ff f8e6 	bl	12098 <ull_disable>
	LL_ASSERT(!err || (err == -EALREADY));
   12ecc:	b170      	cbz	r0, 12eec <disable.constprop.0+0xf0>
   12ece:	3078      	adds	r0, #120	; 0x78
   12ed0:	d00c      	beq.n	12eec <disable.constprop.0+0xf0>
   12ed2:	4a17      	ldr	r2, [pc, #92]	; (12f30 <disable.constprop.0+0x134>)
   12ed4:	4919      	ldr	r1, [pc, #100]	; (12f3c <disable.constprop.0+0x140>)
   12ed6:	4818      	ldr	r0, [pc, #96]	; (12f38 <disable.constprop.0+0x13c>)
   12ed8:	f640 231e 	movw	r3, #2590	; 0xa1e
   12edc:	f009 f9f4 	bl	1c2c8 <printk>
   12ee0:	4040      	eors	r0, r0
   12ee2:	f380 8811 	msr	BASEPRI, r0
   12ee6:	f04f 0003 	mov.w	r0, #3
   12eea:	df02      	svc	2
	mark = ull_disable_unmark(adv);
   12eec:	4620      	mov	r0, r4
   12eee:	f7ff f8a3 	bl	12038 <ull_disable_unmark>
	LL_ASSERT(mark == adv);
   12ef2:	4284      	cmp	r4, r0
   12ef4:	d00c      	beq.n	12f10 <disable.constprop.0+0x114>
   12ef6:	4a0e      	ldr	r2, [pc, #56]	; (12f30 <disable.constprop.0+0x134>)
   12ef8:	490e      	ldr	r1, [pc, #56]	; (12f34 <disable.constprop.0+0x138>)
   12efa:	480f      	ldr	r0, [pc, #60]	; (12f38 <disable.constprop.0+0x13c>)
   12efc:	f640 2321 	movw	r3, #2593	; 0xa21
   12f00:	f009 f9e2 	bl	1c2c8 <printk>
   12f04:	4040      	eors	r0, r0
   12f06:	f380 8811 	msr	BASEPRI, r0
   12f0a:	f04f 0003 	mov.w	r0, #3
   12f0e:	df02      	svc	2
	if (adv->lll.conn) {
   12f10:	6a23      	ldr	r3, [r4, #32]
   12f12:	b113      	cbz	r3, 12f1a <disable.constprop.0+0x11e>
		conn_release(adv);
   12f14:	4620      	mov	r0, r4
   12f16:	f7ff fd19 	bl	1294c <conn_release>
	adv->is_enabled = 0U;
   12f1a:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   12f1e:	f36f 0300 	bfc	r3, #0, #1
   12f22:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
	return 0;
   12f26:	2000      	movs	r0, #0
   12f28:	e7a7      	b.n	12e7a <disable.constprop.0+0x7e>
   12f2a:	bf00      	nop
   12f2c:	00011a31 	.word	0x00011a31
   12f30:	00027a93 	.word	0x00027a93
   12f34:	00027bb3 	.word	0x00027bb3
   12f38:	00027514 	.word	0x00027514
   12f3c:	00027bbf 	.word	0x00027bbf

00012f40 <ll_adv_data_set>:
{
   12f40:	460a      	mov	r2, r1
	return ull_adv_data_set(adv, len, data);
   12f42:	4601      	mov	r1, r0
   12f44:	4801      	ldr	r0, [pc, #4]	; (12f4c <ll_adv_data_set+0xc>)
   12f46:	f011 b8a4 	b.w	24092 <ull_adv_data_set>
   12f4a:	bf00      	nop
   12f4c:	20002e58 	.word	0x20002e58

00012f50 <ll_adv_scan_rsp_set>:
{
   12f50:	460a      	mov	r2, r1
	return ull_scan_rsp_set(adv, len, data);
   12f52:	4601      	mov	r1, r0
   12f54:	4801      	ldr	r0, [pc, #4]	; (12f5c <ll_adv_scan_rsp_set+0xc>)
   12f56:	f011 b8ef 	b.w	24138 <ull_scan_rsp_set>
   12f5a:	bf00      	nop
   12f5c:	20002e58 	.word	0x20002e58

00012f60 <ticker_cb>:
}

static void ticker_cb(uint32_t ticks_at_expire, uint32_t ticks_drift,
		      uint32_t remainder, uint16_t lazy, uint8_t force,
		      void *param)
{
   12f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12f62:	461d      	mov	r5, r3
   12f64:	9b07      	ldr	r3, [sp, #28]
	uint8_t ref;

	DEBUG_RADIO_PREPARE_O(1);

	scan = param;
	lll = &scan->lll;
   12f66:	461c      	mov	r4, r3
{
   12f68:	4607      	mov	r7, r0
   12f6a:	f814 1b1c 	ldrb.w	r1, [r4], #28
   12f6e:	3101      	adds	r1, #1
   12f70:	b2c9      	uxtb	r1, r1
   12f72:	4616      	mov	r6, r2
   12f74:	7019      	strb	r1, [r3, #0]

	/* Increment prepare reference count */
	ref = ull_ref_inc(&scan->ull);
	LL_ASSERT(ref);
   12f76:	b961      	cbnz	r1, 12f92 <ticker_cb+0x32>
   12f78:	4a15      	ldr	r2, [pc, #84]	; (12fd0 <ticker_cb+0x70>)
   12f7a:	4916      	ldr	r1, [pc, #88]	; (12fd4 <ticker_cb+0x74>)
   12f7c:	4816      	ldr	r0, [pc, #88]	; (12fd8 <ticker_cb+0x78>)
   12f7e:	f240 23db 	movw	r3, #731	; 0x2db
   12f82:	f009 f9a1 	bl	1c2c8 <printk>
   12f86:	4040      	eors	r0, r0
   12f88:	f380 8811 	msr	BASEPRI, r0
   12f8c:	f04f 0003 	mov.w	r0, #3
   12f90:	df02      	svc	2

	/* Append timing parameters */
	p.ticks_at_expire = ticks_at_expire;
   12f92:	4912      	ldr	r1, [pc, #72]	; (12fdc <ticker_cb+0x7c>)
	p.remainder = remainder;
	p.lazy = lazy;
	p.param = lll;
	p.force = force;
   12f94:	f89d 3018 	ldrb.w	r3, [sp, #24]
   12f98:	728b      	strb	r3, [r1, #10]
	mfy.param = &p;
   12f9a:	4b11      	ldr	r3, [pc, #68]	; (12fe0 <ticker_cb+0x80>)
	p.lazy = lazy;
   12f9c:	810d      	strh	r5, [r1, #8]

	/* Kick LLL prepare */
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   12f9e:	2200      	movs	r2, #0
	p.remainder = remainder;
   12fa0:	e9c1 7600 	strd	r7, r6, [r1]
	p.param = lll;
   12fa4:	60cc      	str	r4, [r1, #12]
	mfy.param = &p;
   12fa6:	6099      	str	r1, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   12fa8:	2001      	movs	r0, #1
   12faa:	4611      	mov	r1, r2
   12fac:	f7fc fec6 	bl	fd3c <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
   12fb0:	b160      	cbz	r0, 12fcc <ticker_cb+0x6c>
   12fb2:	4a07      	ldr	r2, [pc, #28]	; (12fd0 <ticker_cb+0x70>)
   12fb4:	490b      	ldr	r1, [pc, #44]	; (12fe4 <ticker_cb+0x84>)
   12fb6:	4808      	ldr	r0, [pc, #32]	; (12fd8 <ticker_cb+0x78>)
   12fb8:	f44f 733a 	mov.w	r3, #744	; 0x2e8
   12fbc:	f009 f984 	bl	1c2c8 <printk>
   12fc0:	4040      	eors	r0, r0
   12fc2:	f380 8811 	msr	BASEPRI, r0
   12fc6:	f04f 0003 	mov.w	r0, #3
   12fca:	df02      	svc	2
			  (ret == TICKER_STATUS_BUSY));
	}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	DEBUG_RADIO_PREPARE_O(1);
}
   12fcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12fce:	bf00      	nop
   12fd0:	00027bd5 	.word	0x00027bd5
   12fd4:	00027b71 	.word	0x00027b71
   12fd8:	00027514 	.word	0x00027514
   12fdc:	20002f1c 	.word	0x20002f1c
   12fe0:	20000aec 	.word	0x20000aec
   12fe4:	000279ee 	.word	0x000279ee

00012fe8 <ull_scan_disable>:
	err = ull_ticker_stop_with_mark(TICKER_ID_SCAN_BASE + handle,
   12fe8:	3004      	adds	r0, #4
{
   12fea:	b508      	push	{r3, lr}
	err = ull_ticker_stop_with_mark(TICKER_ID_SCAN_BASE + handle,
   12fec:	f101 021c 	add.w	r2, r1, #28
   12ff0:	b2c0      	uxtb	r0, r0
   12ff2:	f7ff f88f 	bl	12114 <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
   12ff6:	b178      	cbz	r0, 13018 <ull_scan_disable+0x30>
   12ff8:	3078      	adds	r0, #120	; 0x78
   12ffa:	d00c      	beq.n	13016 <ull_scan_disable+0x2e>
   12ffc:	4a07      	ldr	r2, [pc, #28]	; (1301c <ull_scan_disable+0x34>)
   12ffe:	4908      	ldr	r1, [pc, #32]	; (13020 <ull_scan_disable+0x38>)
   13000:	4808      	ldr	r0, [pc, #32]	; (13024 <ull_scan_disable+0x3c>)
   13002:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
   13006:	f009 f95f 	bl	1c2c8 <printk>
   1300a:	4040      	eors	r0, r0
   1300c:	f380 8811 	msr	BASEPRI, r0
   13010:	f04f 0003 	mov.w	r0, #3
   13014:	df02      	svc	2
		return BT_HCI_ERR_CMD_DISALLOWED;
   13016:	200c      	movs	r0, #12
}
   13018:	bd08      	pop	{r3, pc}
   1301a:	bf00      	nop
   1301c:	00027bd5 	.word	0x00027bd5
   13020:	00027c15 	.word	0x00027c15
   13024:	00027514 	.word	0x00027514

00013028 <ull_scan_lll_handle_get>:
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
   13028:	6800      	ldr	r0, [r0, #0]
   1302a:	4b03      	ldr	r3, [pc, #12]	; (13038 <ull_scan_lll_handle_get+0x10>)
   1302c:	1ac0      	subs	r0, r0, r3
   1302e:	2334      	movs	r3, #52	; 0x34
   13030:	fbb0 f0f3 	udiv	r0, r0, r3
}
   13034:	b2c0      	uxtb	r0, r0
   13036:	4770      	bx	lr
   13038:	20002ee8 	.word	0x20002ee8

0001303c <ull_scan_is_enabled_get>:
	if (handle >= BT_CTLR_SCAN_SET) {
   1303c:	b938      	cbnz	r0, 1304e <ull_scan_is_enabled_get+0x12>
	if (!scan || !scan->is_enabled) {
   1303e:	4805      	ldr	r0, [pc, #20]	; (13054 <ull_scan_is_enabled_get+0x18>)
   13040:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
	return &ll_scan[handle];
   13044:	f013 0f01 	tst.w	r3, #1
   13048:	bf08      	it	eq
   1304a:	2000      	moveq	r0, #0
   1304c:	4770      	bx	lr
		return NULL;
   1304e:	2000      	movs	r0, #0
}
   13050:	4770      	bx	lr
   13052:	bf00      	nop
   13054:	20002ee8 	.word	0x20002ee8

00013058 <ull_scan_is_disabled_get>:
	if (!scan || scan->is_enabled) {
   13058:	4a04      	ldr	r2, [pc, #16]	; (1306c <ull_scan_is_disabled_get+0x14>)
   1305a:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
   1305e:	f003 0301 	and.w	r3, r3, #1
		return NULL;
   13062:	4303      	orrs	r3, r0
}
   13064:	bf0c      	ite	eq
   13066:	4610      	moveq	r0, r2
   13068:	2000      	movne	r0, #0
   1306a:	4770      	bx	lr
   1306c:	20002ee8 	.word	0x20002ee8

00013070 <cpr_active_check_and_set>:
	if (!conn_upd_curr) {
   13070:	4b02      	ldr	r3, [pc, #8]	; (1307c <cpr_active_check_and_set+0xc>)
   13072:	681a      	ldr	r2, [r3, #0]
   13074:	b902      	cbnz	r2, 13078 <cpr_active_check_and_set+0x8>
		conn_upd_curr = conn;
   13076:	6018      	str	r0, [r3, #0]
}
   13078:	4770      	bx	lr
   1307a:	bf00      	nop
   1307c:	20002f30 	.word	0x20002f30

00013080 <ctrl_tx_rsp_mem_acquire>:
{
   13080:	b538      	push	{r3, r4, r5, lr}
	if (conn->common.txn_lock) {
   13082:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
   13086:	079b      	lsls	r3, r3, #30
{
   13088:	4604      	mov	r4, r0
   1308a:	4615      	mov	r5, r2
	if (conn->common.txn_lock) {
   1308c:	d504      	bpl.n	13098 <ctrl_tx_rsp_mem_acquire+0x18>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1308e:	2301      	movs	r3, #1
		*err = 0U;
   13090:	2000      	movs	r0, #0
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   13092:	710b      	strb	r3, [r1, #4]
		*err = 0U;
   13094:	6010      	str	r0, [r2, #0]
}
   13096:	bd38      	pop	{r3, r4, r5, pc}
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   13098:	4807      	ldr	r0, [pc, #28]	; (130b8 <ctrl_tx_rsp_mem_acquire+0x38>)
   1309a:	f010 fb9d 	bl	237d8 <mem_acquire>
	if (!tx) {
   1309e:	b918      	cbnz	r0, 130a8 <ctrl_tx_rsp_mem_acquire+0x28>
		*err = -ENOBUFS;
   130a0:	f06f 0368 	mvn.w	r3, #104	; 0x68
   130a4:	602b      	str	r3, [r5, #0]
		return NULL;
   130a6:	e7f6      	b.n	13096 <ctrl_tx_rsp_mem_acquire+0x16>
	conn->common.txn_lock = 1U;
   130a8:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   130ac:	f043 0302 	orr.w	r3, r3, #2
   130b0:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
	return tx;
   130b4:	e7ef      	b.n	13096 <ctrl_tx_rsp_mem_acquire+0x16>
   130b6:	bf00      	nop
   130b8:	20002fc4 	.word	0x20002fc4

000130bc <init_reset>:
{
   130bc:	b508      	push	{r3, lr}
	mem_init(conn_pool, sizeof(struct ll_conn),
   130be:	480d      	ldr	r0, [pc, #52]	; (130f4 <init_reset+0x38>)
   130c0:	4b0d      	ldr	r3, [pc, #52]	; (130f8 <init_reset+0x3c>)
   130c2:	2201      	movs	r2, #1
   130c4:	f44f 719c 	mov.w	r1, #312	; 0x138
   130c8:	f010 fb5e 	bl	23788 <mem_init>
	mem_init(mem_conn_tx.pool, CONN_TX_BUF_SIZE, CONFIG_BT_BUF_ACL_TX_COUNT,
   130cc:	4b0b      	ldr	r3, [pc, #44]	; (130fc <init_reset+0x40>)
   130ce:	2203      	movs	r2, #3
   130d0:	1d18      	adds	r0, r3, #4
   130d2:	2124      	movs	r1, #36	; 0x24
   130d4:	f010 fb58 	bl	23788 <mem_init>
	mem_init(mem_conn_tx_ctrl.pool, CONN_TX_CTRL_BUF_SIZE,
   130d8:	4b09      	ldr	r3, [pc, #36]	; (13100 <init_reset+0x44>)
   130da:	2204      	movs	r2, #4
   130dc:	1898      	adds	r0, r3, r2
   130de:	212c      	movs	r1, #44	; 0x2c
   130e0:	f010 fb52 	bl	23788 <mem_init>
	mem_init(mem_link_tx.pool, sizeof(memq_link_t),
   130e4:	4b07      	ldr	r3, [pc, #28]	; (13104 <init_reset+0x48>)
   130e6:	2207      	movs	r2, #7
   130e8:	1d18      	adds	r0, r3, #4
   130ea:	2108      	movs	r1, #8
   130ec:	f010 fb4c 	bl	23788 <mem_init>
}
   130f0:	2000      	movs	r0, #0
   130f2:	bd08      	pop	{r3, pc}
   130f4:	20001cf0 	.word	0x20001cf0
   130f8:	20002f2c 	.word	0x20002f2c
   130fc:	20002f54 	.word	0x20002f54
   13100:	20002fc4 	.word	0x20002fc4
   13104:	20003078 	.word	0x20003078

00013108 <ticker_stop_op_cb>:
{
   13108:	b510      	push	{r4, lr}
   1310a:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1310c:	b160      	cbz	r0, 13128 <ticker_stop_op_cb+0x20>
   1310e:	4a11      	ldr	r2, [pc, #68]	; (13154 <ticker_stop_op_cb+0x4c>)
   13110:	4911      	ldr	r1, [pc, #68]	; (13158 <ticker_stop_op_cb+0x50>)
   13112:	4812      	ldr	r0, [pc, #72]	; (1315c <ticker_stop_op_cb+0x54>)
   13114:	f640 137a 	movw	r3, #2426	; 0x97a
   13118:	f009 f8d6 	bl	1c2c8 <printk>
   1311c:	4040      	eors	r0, r0
   1311e:	f380 8811 	msr	BASEPRI, r0
   13122:	f04f 0003 	mov.w	r0, #3
   13126:	df02      	svc	2
	mfy.param = param;
   13128:	4b0d      	ldr	r3, [pc, #52]	; (13160 <ticker_stop_op_cb+0x58>)
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   1312a:	2200      	movs	r2, #0
   1312c:	2101      	movs	r1, #1
   1312e:	2002      	movs	r0, #2
	mfy.param = param;
   13130:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   13132:	f7fc fe03 	bl	fd3c <mayfly_enqueue>
	LL_ASSERT(!ret);
   13136:	b160      	cbz	r0, 13152 <ticker_stop_op_cb+0x4a>
   13138:	4a06      	ldr	r2, [pc, #24]	; (13154 <ticker_stop_op_cb+0x4c>)
   1313a:	490a      	ldr	r1, [pc, #40]	; (13164 <ticker_stop_op_cb+0x5c>)
   1313c:	4807      	ldr	r0, [pc, #28]	; (1315c <ticker_stop_op_cb+0x54>)
   1313e:	f44f 6318 	mov.w	r3, #2432	; 0x980
   13142:	f009 f8c1 	bl	1c2c8 <printk>
   13146:	4040      	eors	r0, r0
   13148:	f380 8811 	msr	BASEPRI, r0
   1314c:	f04f 0003 	mov.w	r0, #3
   13150:	df02      	svc	2
}
   13152:	bd10      	pop	{r4, pc}
   13154:	00027c2d 	.word	0x00027c2d
   13158:	00027df5 	.word	0x00027df5
   1315c:	00027514 	.word	0x00027514
   13160:	20000b84 	.word	0x20000b84
   13164:	000279ee 	.word	0x000279ee

00013168 <disabled_cb>:
{
   13168:	b508      	push	{r3, lr}
	mfy.param = param;
   1316a:	4b0b      	ldr	r3, [pc, #44]	; (13198 <disabled_cb+0x30>)
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   1316c:	2200      	movs	r2, #0
	mfy.param = param;
   1316e:	6098      	str	r0, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   13170:	4611      	mov	r1, r2
   13172:	2001      	movs	r0, #1
   13174:	f7fc fde2 	bl	fd3c <mayfly_enqueue>
	LL_ASSERT(!ret);
   13178:	b160      	cbz	r0, 13194 <disabled_cb+0x2c>
   1317a:	4a08      	ldr	r2, [pc, #32]	; (1319c <disabled_cb+0x34>)
   1317c:	4908      	ldr	r1, [pc, #32]	; (131a0 <disabled_cb+0x38>)
   1317e:	4809      	ldr	r0, [pc, #36]	; (131a4 <disabled_cb+0x3c>)
   13180:	f640 13ac 	movw	r3, #2476	; 0x9ac
   13184:	f009 f8a0 	bl	1c2c8 <printk>
   13188:	4040      	eors	r0, r0
   1318a:	f380 8811 	msr	BASEPRI, r0
   1318e:	f04f 0003 	mov.w	r0, #3
   13192:	df02      	svc	2
}
   13194:	bd08      	pop	{r3, pc}
   13196:	bf00      	nop
   13198:	20000b64 	.word	0x20000b64
   1319c:	00027c2d 	.word	0x00027c2d
   131a0:	000279ee 	.word	0x000279ee
   131a4:	00027514 	.word	0x00027514

000131a8 <conn_disable>:
{
   131a8:	b538      	push	{r3, r4, r5, lr}
   131aa:	4604      	mov	r4, r0
	return hdr->ref;
   131ac:	f810 3b1c 	ldrb.w	r3, [r0], #28
	if (ull_ref_get(hdr)) {
   131b0:	b34b      	cbz	r3, 13206 <conn_disable+0x5e>
		mfy.param = &conn->lll;
   131b2:	4d17      	ldr	r5, [pc, #92]	; (13210 <conn_disable+0x68>)
		LL_ASSERT(!hdr->disabled_cb);
   131b4:	6963      	ldr	r3, [r4, #20]
		mfy.param = &conn->lll;
   131b6:	60a8      	str	r0, [r5, #8]
		LL_ASSERT(!hdr->disabled_cb);
   131b8:	b163      	cbz	r3, 131d4 <conn_disable+0x2c>
   131ba:	4a16      	ldr	r2, [pc, #88]	; (13214 <conn_disable+0x6c>)
   131bc:	4916      	ldr	r1, [pc, #88]	; (13218 <conn_disable+0x70>)
   131be:	4817      	ldr	r0, [pc, #92]	; (1321c <conn_disable+0x74>)
   131c0:	f640 1395 	movw	r3, #2453	; 0x995
   131c4:	f009 f880 	bl	1c2c8 <printk>
   131c8:	4040      	eors	r0, r0
   131ca:	f380 8811 	msr	BASEPRI, r0
   131ce:	f04f 0003 	mov.w	r0, #3
   131d2:	df02      	svc	2
		hdr->disabled_param = mfy.param;
   131d4:	68ab      	ldr	r3, [r5, #8]
   131d6:	61a3      	str	r3, [r4, #24]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   131d8:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
   131da:	4b11      	ldr	r3, [pc, #68]	; (13220 <conn_disable+0x78>)
   131dc:	6163      	str	r3, [r4, #20]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   131de:	4611      	mov	r1, r2
   131e0:	4b0b      	ldr	r3, [pc, #44]	; (13210 <conn_disable+0x68>)
   131e2:	2001      	movs	r0, #1
   131e4:	f7fc fdaa 	bl	fd3c <mayfly_enqueue>
		LL_ASSERT(!ret);
   131e8:	b160      	cbz	r0, 13204 <conn_disable+0x5c>
   131ea:	4a0a      	ldr	r2, [pc, #40]	; (13214 <conn_disable+0x6c>)
   131ec:	490d      	ldr	r1, [pc, #52]	; (13224 <conn_disable+0x7c>)
   131ee:	480b      	ldr	r0, [pc, #44]	; (1321c <conn_disable+0x74>)
   131f0:	f640 139c 	movw	r3, #2460	; 0x99c
   131f4:	f009 f868 	bl	1c2c8 <printk>
   131f8:	4040      	eors	r0, r0
   131fa:	f380 8811 	msr	BASEPRI, r0
   131fe:	f04f 0003 	mov.w	r0, #3
   13202:	df02      	svc	2
}
   13204:	bd38      	pop	{r3, r4, r5, pc}
   13206:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		disabled_cb(&conn->lll);
   1320a:	f7ff bfad 	b.w	13168 <disabled_cb>
   1320e:	bf00      	nop
   13210:	20000b74 	.word	0x20000b74
   13214:	00027c2d 	.word	0x00027c2d
   13218:	00027b30 	.word	0x00027b30
   1321c:	00027514 	.word	0x00027514
   13220:	00013169 	.word	0x00013169
   13224:	000279ee 	.word	0x000279ee

00013228 <conn_setup_adv_scan_disabled_cb>:
{
   13228:	b508      	push	{r3, lr}
	lll = *((struct lll_conn **)((uint8_t *)ftr->param +
   1322a:	6883      	ldr	r3, [r0, #8]
   1322c:	685a      	ldr	r2, [r3, #4]
	switch (lll->role) {
   1322e:	7f53      	ldrb	r3, [r2, #29]
   13230:	09db      	lsrs	r3, r3, #7
{
   13232:	4601      	mov	r1, r0
	switch (lll->role) {
   13234:	d004      	beq.n	13240 <conn_setup_adv_scan_disabled_cb+0x18>
}
   13236:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		ull_periph_setup(rx, ftr, lll);
   1323a:	3108      	adds	r1, #8
   1323c:	f7ef ba54 	b.w	26e8 <ull_periph_setup>
		LL_ASSERT(0);
   13240:	4a06      	ldr	r2, [pc, #24]	; (1325c <conn_setup_adv_scan_disabled_cb+0x34>)
   13242:	4907      	ldr	r1, [pc, #28]	; (13260 <conn_setup_adv_scan_disabled_cb+0x38>)
   13244:	4807      	ldr	r0, [pc, #28]	; (13264 <conn_setup_adv_scan_disabled_cb+0x3c>)
   13246:	f640 03d5 	movw	r3, #2261	; 0x8d5
   1324a:	f009 f83d 	bl	1c2c8 <printk>
   1324e:	4040      	eors	r0, r0
   13250:	f380 8811 	msr	BASEPRI, r0
   13254:	f04f 0003 	mov.w	r0, #3
   13258:	df02      	svc	2
}
   1325a:	bd08      	pop	{r3, pc}
   1325c:	00027c2d 	.word	0x00027c2d
   13260:	0002826c 	.word	0x0002826c
   13264:	00027514 	.word	0x00027514

00013268 <ticker_start_conn_op_cb>:
{
   13268:	b510      	push	{r4, lr}
   1326a:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1326c:	b160      	cbz	r0, 13288 <ticker_start_conn_op_cb+0x20>
   1326e:	4a10      	ldr	r2, [pc, #64]	; (132b0 <ticker_start_conn_op_cb+0x48>)
   13270:	4910      	ldr	r1, [pc, #64]	; (132b4 <ticker_start_conn_op_cb+0x4c>)
   13272:	4811      	ldr	r0, [pc, #68]	; (132b8 <ticker_start_conn_op_cb+0x50>)
   13274:	f640 03b4 	movw	r3, #2228	; 0x8b4
   13278:	f009 f826 	bl	1c2c8 <printk>
   1327c:	4040      	eors	r0, r0
   1327e:	f380 8811 	msr	BASEPRI, r0
   13282:	f04f 0003 	mov.w	r0, #3
   13286:	df02      	svc	2
	p = ull_update_unmark(param);
   13288:	4620      	mov	r0, r4
   1328a:	f7fe fef1 	bl	12070 <ull_update_unmark>
	LL_ASSERT(p == param);
   1328e:	4284      	cmp	r4, r0
   13290:	d00c      	beq.n	132ac <ticker_start_conn_op_cb+0x44>
   13292:	4a07      	ldr	r2, [pc, #28]	; (132b0 <ticker_start_conn_op_cb+0x48>)
   13294:	4909      	ldr	r1, [pc, #36]	; (132bc <ticker_start_conn_op_cb+0x54>)
   13296:	4808      	ldr	r0, [pc, #32]	; (132b8 <ticker_start_conn_op_cb+0x50>)
   13298:	f640 03b7 	movw	r3, #2231	; 0x8b7
   1329c:	f009 f814 	bl	1c2c8 <printk>
   132a0:	4040      	eors	r0, r0
   132a2:	f380 8811 	msr	BASEPRI, r0
   132a6:	f04f 0003 	mov.w	r0, #3
   132aa:	df02      	svc	2
}
   132ac:	bd10      	pop	{r4, pc}
   132ae:	bf00      	nop
   132b0:	00027c2d 	.word	0x00027c2d
   132b4:	00027df5 	.word	0x00027df5
   132b8:	00027514 	.word	0x00027514
   132bc:	00027c6d 	.word	0x00027c6d

000132c0 <ticker_stop_conn_op_cb>:
{
   132c0:	b510      	push	{r4, lr}
   132c2:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   132c4:	b160      	cbz	r0, 132e0 <ticker_stop_conn_op_cb+0x20>
   132c6:	4a10      	ldr	r2, [pc, #64]	; (13308 <ticker_stop_conn_op_cb+0x48>)
   132c8:	4910      	ldr	r1, [pc, #64]	; (1330c <ticker_stop_conn_op_cb+0x4c>)
   132ca:	4811      	ldr	r0, [pc, #68]	; (13310 <ticker_stop_conn_op_cb+0x50>)
   132cc:	f640 03aa 	movw	r3, #2218	; 0x8aa
   132d0:	f008 fffa 	bl	1c2c8 <printk>
   132d4:	4040      	eors	r0, r0
   132d6:	f380 8811 	msr	BASEPRI, r0
   132da:	f04f 0003 	mov.w	r0, #3
   132de:	df02      	svc	2
	p = ull_update_mark(param);
   132e0:	4620      	mov	r0, r4
   132e2:	f7fe febd 	bl	12060 <ull_update_mark>
	LL_ASSERT(p == param);
   132e6:	4284      	cmp	r4, r0
   132e8:	d00c      	beq.n	13304 <ticker_stop_conn_op_cb+0x44>
   132ea:	4a07      	ldr	r2, [pc, #28]	; (13308 <ticker_stop_conn_op_cb+0x48>)
   132ec:	4909      	ldr	r1, [pc, #36]	; (13314 <ticker_stop_conn_op_cb+0x54>)
   132ee:	4808      	ldr	r0, [pc, #32]	; (13310 <ticker_stop_conn_op_cb+0x50>)
   132f0:	f640 03ad 	movw	r3, #2221	; 0x8ad
   132f4:	f008 ffe8 	bl	1c2c8 <printk>
   132f8:	4040      	eors	r0, r0
   132fa:	f380 8811 	msr	BASEPRI, r0
   132fe:	f04f 0003 	mov.w	r0, #3
   13302:	df02      	svc	2
}
   13304:	bd10      	pop	{r4, pc}
   13306:	bf00      	nop
   13308:	00027c2d 	.word	0x00027c2d
   1330c:	00027df5 	.word	0x00027df5
   13310:	00027514 	.word	0x00027514
   13314:	00027c6d 	.word	0x00027c6d

00013318 <ticker_update_conn_op_cb>:
{
   13318:	b510      	push	{r4, lr}
   1331a:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   1331c:	b1a0      	cbz	r0, 13348 <ticker_update_conn_op_cb+0x30>
   1331e:	f7fe feb5 	bl	1208c <ull_update_mark_get>
   13322:	4284      	cmp	r4, r0
   13324:	d010      	beq.n	13348 <ticker_update_conn_op_cb+0x30>
   13326:	f7fe fe95 	bl	12054 <ull_disable_mark_get>
   1332a:	4284      	cmp	r4, r0
   1332c:	d00c      	beq.n	13348 <ticker_update_conn_op_cb+0x30>
   1332e:	4a07      	ldr	r2, [pc, #28]	; (1334c <ticker_update_conn_op_cb+0x34>)
   13330:	4907      	ldr	r1, [pc, #28]	; (13350 <ticker_update_conn_op_cb+0x38>)
   13332:	4808      	ldr	r0, [pc, #32]	; (13354 <ticker_update_conn_op_cb+0x3c>)
   13334:	f640 03a1 	movw	r3, #2209	; 0x8a1
   13338:	f008 ffc6 	bl	1c2c8 <printk>
   1333c:	4040      	eors	r0, r0
   1333e:	f380 8811 	msr	BASEPRI, r0
   13342:	f04f 0003 	mov.w	r0, #3
   13346:	df02      	svc	2
}
   13348:	bd10      	pop	{r4, pc}
   1334a:	bf00      	nop
   1334c:	00027c2d 	.word	0x00027c2d
   13350:	00027c78 	.word	0x00027c78
   13354:	00027514 	.word	0x00027514

00013358 <feat_get>:
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   13358:	6841      	ldr	r1, [r0, #4]
   1335a:	6803      	ldr	r3, [r0, #0]

	feat = sys_get_le64(features) | ~LL_FEAT_BIT_MASK_VALID;
	feat &= LL_FEAT_BIT_MASK;

	return feat;
}
   1335c:	4803      	ldr	r0, [pc, #12]	; (1336c <feat_get+0x14>)
	feat &= LL_FEAT_BIT_MASK;
   1335e:	f001 01ff 	and.w	r1, r1, #255	; 0xff
}
   13362:	4318      	orrs	r0, r3
   13364:	f041 0110 	orr.w	r1, r1, #16
   13368:	4770      	bx	lr
   1336a:	bf00      	nop
   1336c:	087830d0 	.word	0x087830d0

00013370 <ll_conn_acquire>:
	return mem_acquire(&conn_free);
   13370:	4801      	ldr	r0, [pc, #4]	; (13378 <ll_conn_acquire+0x8>)
   13372:	f010 ba31 	b.w	237d8 <mem_acquire>
   13376:	bf00      	nop
   13378:	20002f2c 	.word	0x20002f2c

0001337c <ll_conn_release>:
	mem_release(conn, &conn_free);
   1337c:	4901      	ldr	r1, [pc, #4]	; (13384 <ll_conn_release+0x8>)
   1337e:	f010 ba44 	b.w	2380a <mem_release>
   13382:	bf00      	nop
   13384:	20002f2c 	.word	0x20002f2c

00013388 <ll_conn_handle_get>:
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   13388:	4902      	ldr	r1, [pc, #8]	; (13394 <ll_conn_handle_get+0xc>)
   1338a:	f44f 729c 	mov.w	r2, #312	; 0x138
   1338e:	f010 ba54 	b.w	2383a <mem_index_get>
   13392:	bf00      	nop
   13394:	20001cf0 	.word	0x20001cf0

00013398 <tx_lll_flush>:
{
   13398:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	conn = HDR_LLL2ULL(lll);
   1339c:	6806      	ldr	r6, [r0, #0]
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   1339e:	4d30      	ldr	r5, [pc, #192]	; (13460 <tx_lll_flush+0xc8>)
{
   133a0:	4604      	mov	r4, r0
	handle = ll_conn_handle_get(conn);
   133a2:	4630      	mov	r0, r6
   133a4:	f7ff fff0 	bl	13388 <ll_conn_handle_get>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   133a8:	f104 073c 	add.w	r7, r4, #60	; 0x3c
	lll_conn_flush(handle, lll);
   133ac:	4621      	mov	r1, r4
   133ae:	f011 fa9a 	bl	248e6 <lll_conn_flush>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   133b2:	6c20      	ldr	r0, [r4, #64]	; 0x40
   133b4:	aa01      	add	r2, sp, #4
   133b6:	4639      	mov	r1, r7
   133b8:	f010 fa7b 	bl	238b2 <memq_dequeue>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   133bc:	f105 0804 	add.w	r8, r5, #4
	while (link) {
   133c0:	b9f0      	cbnz	r0, 13400 <tx_lll_flush+0x68>
	LL_ASSERT(rx->hdr.link);
   133c2:	f8d6 30d4 	ldr.w	r3, [r6, #212]	; 0xd4
	rx = (void *)&conn->llcp_terminate.node_rx;
   133c6:	f106 04d4 	add.w	r4, r6, #212	; 0xd4
	LL_ASSERT(rx->hdr.link);
   133ca:	b963      	cbnz	r3, 133e6 <tx_lll_flush+0x4e>
   133cc:	4a25      	ldr	r2, [pc, #148]	; (13464 <tx_lll_flush+0xcc>)
   133ce:	4926      	ldr	r1, [pc, #152]	; (13468 <tx_lll_flush+0xd0>)
   133d0:	4826      	ldr	r0, [pc, #152]	; (1346c <tx_lll_flush+0xd4>)
   133d2:	f640 13da 	movw	r3, #2522	; 0x9da
   133d6:	f008 ff77 	bl	1c2c8 <printk>
   133da:	4040      	eors	r0, r0
   133dc:	f380 8811 	msr	BASEPRI, r0
   133e0:	f04f 0003 	mov.w	r0, #3
   133e4:	df02      	svc	2
	rx->hdr.link = NULL;
   133e6:	2300      	movs	r3, #0
	link = rx->hdr.link;
   133e8:	f8d6 00d4 	ldr.w	r0, [r6, #212]	; 0xd4
	rx->hdr.link = NULL;
   133ec:	f8c6 30d4 	str.w	r3, [r6, #212]	; 0xd4
	ull_rx_put(link, rx);
   133f0:	4621      	mov	r1, r4
   133f2:	f7fe fef5 	bl	121e0 <ull_rx_put>
	ull_rx_sched();
   133f6:	f7fe ff03 	bl	12200 <ull_rx_sched>
}
   133fa:	b002      	add	sp, #8
   133fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   13400:	78ea      	ldrb	r2, [r5, #3]
	if (last == count) {
   13402:	f895 c001 	ldrb.w	ip, [r5, #1]
   13406:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   13408:	1c51      	adds	r1, r2, #1
   1340a:	b2c9      	uxtb	r1, r1
		last = 0U;
   1340c:	458c      	cmp	ip, r1
   1340e:	bf08      	it	eq
   13410:	2100      	moveq	r1, #0
	if (last == first) {
   13412:	428b      	cmp	r3, r1
   13414:	d10f      	bne.n	13436 <tx_lll_flush+0x9e>
		LL_ASSERT(lll_tx);
   13416:	4a13      	ldr	r2, [pc, #76]	; (13464 <tx_lll_flush+0xcc>)
   13418:	4915      	ldr	r1, [pc, #84]	; (13470 <tx_lll_flush+0xd8>)
   1341a:	4814      	ldr	r0, [pc, #80]	; (1346c <tx_lll_flush+0xd4>)
   1341c:	f640 13c6 	movw	r3, #2502	; 0x9c6
   13420:	f008 ff52 	bl	1c2c8 <printk>
   13424:	4040      	eors	r0, r0
   13426:	f380 8811 	msr	BASEPRI, r0
   1342a:	f04f 0003 	mov.w	r0, #3
   1342e:	df02      	svc	2
		lll_tx->handle = LLL_HANDLE_INVALID;
   13430:	2300      	movs	r3, #0
   13432:	801b      	strh	r3, [r3, #0]
   13434:	deff      	udf	#255	; 0xff
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   13436:	782b      	ldrb	r3, [r5, #0]
   13438:	fb13 f302 	smulbb	r3, r3, r2
   1343c:	f64f 7cff 	movw	ip, #65535	; 0xffff
   13440:	f828 c003 	strh.w	ip, [r8, r3]
   13444:	eb08 0203 	add.w	r2, r8, r3
		lll_tx->node = tx;
   13448:	9b01      	ldr	r3, [sp, #4]
   1344a:	6053      	str	r3, [r2, #4]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   1344c:	681a      	ldr	r2, [r3, #0]
   1344e:	6002      	str	r2, [r0, #0]
		tx->next = link;
   13450:	6018      	str	r0, [r3, #0]
	*last = idx; /* Commit: Update write index */
   13452:	70e9      	strb	r1, [r5, #3]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   13454:	6c20      	ldr	r0, [r4, #64]	; 0x40
   13456:	aa01      	add	r2, sp, #4
   13458:	4639      	mov	r1, r7
   1345a:	f010 fa2a 	bl	238b2 <memq_dequeue>
   1345e:	e7af      	b.n	133c0 <tx_lll_flush+0x28>
   13460:	20000afc 	.word	0x20000afc
   13464:	00027c2d 	.word	0x00027c2d
   13468:	00027cfd 	.word	0x00027cfd
   1346c:	00027514 	.word	0x00027514
   13470:	00027cc9 	.word	0x00027cc9

00013474 <ll_conn_get>:
{
   13474:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   13476:	f44f 719c 	mov.w	r1, #312	; 0x138
   1347a:	4801      	ldr	r0, [pc, #4]	; (13480 <ll_conn_get+0xc>)
   1347c:	f010 b9da 	b.w	23834 <mem_get>
   13480:	20001cf0 	.word	0x20001cf0

00013484 <ll_tx_mem_acquire>:
	return mem_acquire(&mem_conn_tx.free);
   13484:	4801      	ldr	r0, [pc, #4]	; (1348c <ll_tx_mem_acquire+0x8>)
   13486:	f010 b9a7 	b.w	237d8 <mem_acquire>
   1348a:	bf00      	nop
   1348c:	20002f54 	.word	0x20002f54

00013490 <ll_tx_mem_release>:
	mem_release(tx, &mem_conn_tx.free);
   13490:	4901      	ldr	r1, [pc, #4]	; (13498 <ll_tx_mem_release+0x8>)
   13492:	f010 b9ba 	b.w	2380a <mem_release>
   13496:	bf00      	nop
   13498:	20002f54 	.word	0x20002f54

0001349c <ll_tx_mem_enqueue>:
{
   1349c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1349e:	4606      	mov	r6, r0
   134a0:	460f      	mov	r7, r1
	conn = ll_connected_get(handle);
   134a2:	f010 ff38 	bl	24316 <ll_connected_get>
	if (!conn) {
   134a6:	4604      	mov	r4, r0
   134a8:	b330      	cbz	r0, 134f8 <ll_tx_mem_enqueue+0x5c>
	idx = MFIFO_ENQUEUE_GET(conn_tx, (void **) &lll_tx);
   134aa:	4a16      	ldr	r2, [pc, #88]	; (13504 <ll_tx_mem_enqueue+0x68>)
   134ac:	78d5      	ldrb	r5, [r2, #3]
	if (last == count) {
   134ae:	f892 c001 	ldrb.w	ip, [r2, #1]
   134b2:	7891      	ldrb	r1, [r2, #2]
   134b4:	7810      	ldrb	r0, [r2, #0]
	last = last + 1;
   134b6:	1c6b      	adds	r3, r5, #1
   134b8:	b2db      	uxtb	r3, r3
		last = 0U;
   134ba:	459c      	cmp	ip, r3
   134bc:	bf08      	it	eq
   134be:	2300      	moveq	r3, #0
	if (last == first) {
   134c0:	4299      	cmp	r1, r3
   134c2:	d01c      	beq.n	134fe <ll_tx_mem_enqueue+0x62>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   134c4:	1d11      	adds	r1, r2, #4
   134c6:	fb15 f500 	smulbb	r5, r5, r0
   134ca:	1948      	adds	r0, r1, r5
	lll_tx->handle = handle;
   134cc:	534e      	strh	r6, [r1, r5]
	lll_tx->node = tx;
   134ce:	6047      	str	r7, [r0, #4]
	*last = idx; /* Commit: Update write index */
   134d0:	70d3      	strb	r3, [r2, #3]
   134d2:	7823      	ldrb	r3, [r4, #0]
	if (ull_ref_get(&conn->ull)) {
   134d4:	b133      	cbz	r3, 134e4 <ll_tx_mem_enqueue+0x48>
		mfy.param = conn;
   134d6:	4b0c      	ldr	r3, [pc, #48]	; (13508 <ll_tx_mem_enqueue+0x6c>)
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   134d8:	2200      	movs	r2, #0
   134da:	2101      	movs	r1, #1
   134dc:	2003      	movs	r0, #3
		mfy.param = conn;
   134de:	609c      	str	r4, [r3, #8]
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   134e0:	f7fc fc2c 	bl	fd3c <mayfly_enqueue>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   134e4:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   134e8:	2b00      	cmp	r3, #0
   134ea:	da03      	bge.n	134f4 <ll_tx_mem_enqueue+0x58>
		ull_periph_latency_cancel(conn, handle);
   134ec:	4631      	mov	r1, r6
   134ee:	4620      	mov	r0, r4
   134f0:	f001 f866 	bl	145c0 <ull_periph_latency_cancel>
	return 0;
   134f4:	2000      	movs	r0, #0
   134f6:	e001      	b.n	134fc <ll_tx_mem_enqueue+0x60>
		return -EINVAL;
   134f8:	f06f 0015 	mvn.w	r0, #21
}
   134fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   134fe:	f06f 0068 	mvn.w	r0, #104	; 0x68
   13502:	e7fb      	b.n	134fc <ll_tx_mem_enqueue+0x60>
   13504:	20000b40 	.word	0x20000b40
   13508:	20000b94 	.word	0x20000b94

0001350c <ll_terminate_ind_send>:
{
   1350c:	b538      	push	{r3, r4, r5, lr}
   1350e:	4605      	mov	r5, r0
   13510:	460c      	mov	r4, r1
	conn = ll_connected_get(handle);
   13512:	f010 ff00 	bl	24316 <ll_connected_get>
	if (!conn) {
   13516:	b310      	cbz	r0, 1355e <ll_terminate_ind_send+0x52>
	if (conn->llcp_terminate.req != conn->llcp_terminate.ack) {
   13518:	f890 30d0 	ldrb.w	r3, [r0, #208]	; 0xd0
   1351c:	f890 20d1 	ldrb.w	r2, [r0, #209]	; 0xd1
   13520:	429a      	cmp	r2, r3
   13522:	d11e      	bne.n	13562 <ll_terminate_ind_send+0x56>
	switch (reason) {
   13524:	2c1a      	cmp	r4, #26
   13526:	d808      	bhi.n	1353a <ll_terminate_ind_send+0x2e>
   13528:	2c04      	cmp	r4, #4
   1352a:	d904      	bls.n	13536 <ll_terminate_ind_send+0x2a>
   1352c:	490e      	ldr	r1, [pc, #56]	; (13568 <ll_terminate_ind_send+0x5c>)
   1352e:	2201      	movs	r2, #1
   13530:	40a2      	lsls	r2, r4
   13532:	420a      	tst	r2, r1
   13534:	d105      	bne.n	13542 <ll_terminate_ind_send+0x36>
   13536:	2012      	movs	r0, #18
   13538:	e012      	b.n	13560 <ll_terminate_ind_send+0x54>
   1353a:	2c29      	cmp	r4, #41	; 0x29
   1353c:	d001      	beq.n	13542 <ll_terminate_ind_send+0x36>
   1353e:	2c3b      	cmp	r4, #59	; 0x3b
   13540:	d1f9      	bne.n	13536 <ll_terminate_ind_send+0x2a>
	conn->llcp_terminate.req++; /* (req - ack) == 1, TERM_REQ */
   13542:	3301      	adds	r3, #1
   13544:	f880 30d0 	strb.w	r3, [r0, #208]	; 0xd0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   13548:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
	conn->llcp_terminate.reason_own = reason;
   1354c:	f880 40d2 	strb.w	r4, [r0, #210]	; 0xd2
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   13550:	2b00      	cmp	r3, #0
   13552:	da02      	bge.n	1355a <ll_terminate_ind_send+0x4e>
		ull_periph_latency_cancel(conn, handle);
   13554:	4629      	mov	r1, r5
   13556:	f001 f833 	bl	145c0 <ull_periph_latency_cancel>
	return 0;
   1355a:	2000      	movs	r0, #0
   1355c:	e000      	b.n	13560 <ll_terminate_ind_send+0x54>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1355e:	2002      	movs	r0, #2
}
   13560:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   13562:	200c      	movs	r0, #12
   13564:	e7fc      	b.n	13560 <ll_terminate_ind_send+0x54>
   13566:	bf00      	nop
   13568:	04380020 	.word	0x04380020

0001356c <ull_conn_reset>:
{
   1356c:	b510      	push	{r4, lr}
	conn = ll_conn_get(handle);
   1356e:	2000      	movs	r0, #0
   13570:	f7ff ff80 	bl	13474 <ll_conn_get>
   13574:	4604      	mov	r4, r0
	err = ull_ticker_stop_with_mark(TICKER_ID_CONN_BASE + handle,
   13576:	f100 021c 	add.w	r2, r0, #28
   1357a:	4601      	mov	r1, r0
   1357c:	2005      	movs	r0, #5
   1357e:	f7fe fdc9 	bl	12114 <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
   13582:	b170      	cbz	r0, 135a2 <ull_conn_reset+0x36>
   13584:	3078      	adds	r0, #120	; 0x78
   13586:	d00c      	beq.n	135a2 <ull_conn_reset+0x36>
   13588:	4a0d      	ldr	r2, [pc, #52]	; (135c0 <ull_conn_reset+0x54>)
   1358a:	490e      	ldr	r1, [pc, #56]	; (135c4 <ull_conn_reset+0x58>)
   1358c:	480e      	ldr	r0, [pc, #56]	; (135c8 <ull_conn_reset+0x5c>)
   1358e:	f640 03e3 	movw	r3, #2275	; 0x8e3
   13592:	f008 fe99 	bl	1c2c8 <printk>
   13596:	4040      	eors	r0, r0
   13598:	f380 8811 	msr	BASEPRI, r0
   1359c:	f04f 0003 	mov.w	r0, #3
   135a0:	df02      	svc	2
	MFIFO_INIT(conn_tx);
   135a2:	4a0a      	ldr	r2, [pc, #40]	; (135cc <ull_conn_reset+0x60>)
	conn->lll.handle = LLL_HANDLE_INVALID;
   135a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   135a8:	8523      	strh	r3, [r4, #40]	; 0x28
	conn->lll.link_tx_free = NULL;
   135aa:	2300      	movs	r3, #0
	MFIFO_INIT(conn_tx);
   135ac:	8053      	strh	r3, [r2, #2]
	MFIFO_INIT(conn_ack);
   135ae:	4a08      	ldr	r2, [pc, #32]	; (135d0 <ull_conn_reset+0x64>)
	conn->lll.link_tx_free = NULL;
   135b0:	66a3      	str	r3, [r4, #104]	; 0x68
	MFIFO_INIT(conn_ack);
   135b2:	8053      	strh	r3, [r2, #2]
	conn_upd_curr = NULL;
   135b4:	4a07      	ldr	r2, [pc, #28]	; (135d4 <ull_conn_reset+0x68>)
}
   135b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	conn_upd_curr = NULL;
   135ba:	6013      	str	r3, [r2, #0]
	err = init_reset();
   135bc:	f7ff bd7e 	b.w	130bc <init_reset>
   135c0:	00027c2d 	.word	0x00027c2d
   135c4:	00027c15 	.word	0x00027c15
   135c8:	00027514 	.word	0x00027514
   135cc:	20000b40 	.word	0x20000b40
   135d0:	20000afc 	.word	0x20000afc
   135d4:	20002f30 	.word	0x20002f30

000135d8 <ull_conn_setup>:
{
   135d8:	b538      	push	{r3, r4, r5, lr}
	hdr = HDR_LLL2ULL(ftr->param);
   135da:	688b      	ldr	r3, [r1, #8]
	rx->link = rx_link;
   135dc:	6008      	str	r0, [r1, #0]
	hdr = HDR_LLL2ULL(ftr->param);
   135de:	681d      	ldr	r5, [r3, #0]
   135e0:	782b      	ldrb	r3, [r5, #0]
{
   135e2:	460c      	mov	r4, r1
	if (ull_ref_get(hdr)) {
   135e4:	b193      	cbz	r3, 1360c <ull_conn_setup+0x34>
		LL_ASSERT(!hdr->disabled_cb);
   135e6:	696b      	ldr	r3, [r5, #20]
   135e8:	b163      	cbz	r3, 13604 <ull_conn_setup+0x2c>
   135ea:	4a0b      	ldr	r2, [pc, #44]	; (13618 <ull_conn_setup+0x40>)
   135ec:	490b      	ldr	r1, [pc, #44]	; (1361c <ull_conn_setup+0x44>)
   135ee:	480c      	ldr	r0, [pc, #48]	; (13620 <ull_conn_setup+0x48>)
   135f0:	f240 33ed 	movw	r3, #1005	; 0x3ed
   135f4:	f008 fe68 	bl	1c2c8 <printk>
   135f8:	4040      	eors	r0, r0
   135fa:	f380 8811 	msr	BASEPRI, r0
   135fe:	f04f 0003 	mov.w	r0, #3
   13602:	df02      	svc	2
		hdr->disabled_cb = conn_setup_adv_scan_disabled_cb;
   13604:	4b07      	ldr	r3, [pc, #28]	; (13624 <ull_conn_setup+0x4c>)
		hdr->disabled_param = rx;
   13606:	61ac      	str	r4, [r5, #24]
		hdr->disabled_cb = conn_setup_adv_scan_disabled_cb;
   13608:	616b      	str	r3, [r5, #20]
}
   1360a:	bd38      	pop	{r3, r4, r5, pc}
   1360c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		conn_setup_adv_scan_disabled_cb(rx);
   13610:	4608      	mov	r0, r1
   13612:	f7ff be09 	b.w	13228 <conn_setup_adv_scan_disabled_cb>
   13616:	bf00      	nop
   13618:	00027c2d 	.word	0x00027c2d
   1361c:	00027b30 	.word	0x00027b30
   13620:	00027514 	.word	0x00027514
   13624:	00013229 	.word	0x00013229

00013628 <ull_conn_rx>:
	conn = ll_connected_get((*rx)->hdr.handle);
   13628:	680b      	ldr	r3, [r1, #0]
{
   1362a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1362e:	4607      	mov	r7, r0
	conn = ll_connected_get((*rx)->hdr.handle);
   13630:	88d8      	ldrh	r0, [r3, #6]
{
   13632:	460e      	mov	r6, r1
	conn = ll_connected_get((*rx)->hdr.handle);
   13634:	f010 fe6f 	bl	24316 <ll_connected_get>
	if (!conn) {
   13638:	6835      	ldr	r5, [r6, #0]
   1363a:	4604      	mov	r4, r0
   1363c:	b910      	cbnz	r0, 13644 <ull_conn_rx+0x1c>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1363e:	2301      	movs	r3, #1
   13640:	712b      	strb	r3, [r5, #4]
	return 0;
   13642:	e007      	b.n	13654 <ull_conn_rx+0x2c>
	switch (pdu_rx->ll_id) {
   13644:	7f28      	ldrb	r0, [r5, #28]
   13646:	f000 0003 	and.w	r0, r0, #3
   1364a:	2803      	cmp	r0, #3
   1364c:	d004      	beq.n	13658 <ull_conn_rx+0x30>
   1364e:	2800      	cmp	r0, #0
   13650:	f000 83a9 	beq.w	13da6 <ull_conn_rx+0x77e>
   13654:	2000      	movs	r0, #0
   13656:	e14a      	b.n	138ee <ull_conn_rx+0x2c6>
			  struct pdu_data *pdu_rx, struct ll_conn *conn)
{
	int nack = 0;
	uint8_t opcode;

	opcode = pdu_rx->llctrl.opcode;
   13658:	f895 801f 	ldrb.w	r8, [r5, #31]
	pdu_rx = (void *)(*rx)->pdu;
   1365c:	f105 021c 	add.w	r2, r5, #28

		return 0;
	}
#endif /* CONFIG_BT_CTLR_LE_ENC */

	switch (opcode) {
   13660:	f1b8 0f11 	cmp.w	r8, #17
   13664:	f200 83c4 	bhi.w	13df0 <ull_conn_rx+0x7c8>
   13668:	e8df f018 	tbh	[pc, r8, lsl #1]
   1366c:	00830012 	.word	0x00830012
   13670:	03c200b3 	.word	0x03c200b3
   13674:	03c203c2 	.word	0x03c203c2
   13678:	033a03c2 	.word	0x033a03c2
   1367c:	011400bc 	.word	0x011400bc
   13680:	03c203c2 	.word	0x03c203c2
   13684:	03c20144 	.word	0x03c20144
   13688:	019503c2 	.word	0x019503c2
   1368c:	02e203c2 	.word	0x02e203c2
#if defined(CONFIG_BT_PERIPHERAL)
	case PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND:
	{
		uint8_t err;

		if (!conn->lll.role ||
   13690:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   13694:	2b00      	cmp	r3, #0
   13696:	f280 83ab 	bge.w	13df0 <ull_conn_rx+0x7c8>
   1369a:	7f6b      	ldrb	r3, [r5, #29]
   1369c:	2b0c      	cmp	r3, #12
   1369e:	f040 83a7 	bne.w	13df0 <ull_conn_rx+0x7c8>
	instant = sys_le16_to_cpu(pdu->llctrl.conn_update_ind.instant);
   136a2:	f8b5 1029 	ldrh.w	r1, [r5, #41]	; 0x29
	if (((instant - conn->lll.event_counter) & 0xFFFF) > 0x7FFF) {
   136a6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   136a8:	1acb      	subs	r3, r1, r3
   136aa:	041b      	lsls	r3, r3, #16
   136ac:	d503      	bpl.n	136b6 <ull_conn_rx+0x8e>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   136ae:	2301      	movs	r3, #1
   136b0:	712b      	strb	r3, [r5, #4]
		err = BT_HCI_ERR_INSTANT_PASSED;
   136b2:	2328      	movs	r3, #40	; 0x28
   136b4:	e00b      	b.n	136ce <ull_conn_rx+0xa6>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   136b6:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
   136ba:	f894 2089 	ldrb.w	r2, [r4, #137]	; 0x89
   136be:	1a9b      	subs	r3, r3, r2
   136c0:	f003 0303 	and.w	r3, r3, #3
   136c4:	2b02      	cmp	r3, #2
   136c6:	d105      	bne.n	136d4 <ull_conn_rx+0xac>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   136c8:	2301      	movs	r3, #1
   136ca:	712b      	strb	r3, [r5, #4]
		err = BT_HCI_ERR_DIFF_TRANS_COLLISION;
   136cc:	232a      	movs	r3, #42	; 0x2a
			goto ull_conn_rx_unknown_rsp_send;
		}

		err = chan_map_upd_recv(conn, *rx, pdu_rx);
		if (err) {
			conn->llcp_terminate.reason_final = err;
   136ce:	f884 30d3 	strb.w	r3, [r4, #211]	; 0xd3
   136d2:	e7bf      	b.n	13654 <ull_conn_rx+0x2c>
	cpr_active_check_and_set(conn);
   136d4:	4620      	mov	r0, r4
   136d6:	f7ff fccb 	bl	13070 <cpr_active_check_and_set>
	conn->llcp_cu.win_size = pdu->llctrl.conn_update_ind.win_size;
   136da:	f895 3020 	ldrb.w	r3, [r5, #32]
   136de:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.win_offset) *
   136e2:	f8b5 3021 	ldrh.w	r3, [r5, #33]	; 0x21
   136e6:	f240 42e2 	movw	r2, #1250	; 0x4e2
   136ea:	4353      	muls	r3, r2
	conn->llcp_cu.win_offset_us =
   136ec:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.interval);
   136f0:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
   136f4:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
   136f8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp_cu.interval =
   136fc:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.latency);
   13700:	f895 2026 	ldrb.w	r2, [r5, #38]	; 0x26
   13704:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
   13708:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp_cu.latency =
   1370c:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   13710:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
   13714:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
	conn->llcp.conn_upd.instant = instant;
   13718:	f8a4 108c 	strh.w	r1, [r4, #140]	; 0x8c
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   1371c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp_cu.timeout =
   13720:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   13724:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
   13728:	f023 030f 	bic.w	r3, r3, #15
   1372c:	f043 0308 	orr.w	r3, r3, #8
   13730:	f884 309e 	strb.w	r3, [r4, #158]	; 0x9e
	conn->llcp_cu.ack--;
   13734:	f894 309d 	ldrb.w	r3, [r4, #157]	; 0x9d
   13738:	3b01      	subs	r3, #1
   1373a:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
	link->mem = conn->llcp_rx;
   1373e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   13742:	607b      	str	r3, [r7, #4]
	(*rx)->hdr.link = link;
   13744:	6833      	ldr	r3, [r6, #0]
   13746:	601f      	str	r7, [r3, #0]
	conn->llcp_rx = *rx;
   13748:	6833      	ldr	r3, [r6, #0]
   1374a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*rx = NULL;
   1374e:	2300      	movs	r3, #0
   13750:	6033      	str	r3, [r6, #0]
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   13752:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
   13756:	f894 30f5 	ldrb.w	r3, [r4, #245]	; 0xf5
   1375a:	4293      	cmp	r3, r2
   1375c:	d007      	beq.n	1376e <ull_conn_rx+0x146>
	    ((conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) ||
   1375e:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   13762:	f003 030e 	and.w	r3, r3, #14
   13766:	2b04      	cmp	r3, #4
   13768:	d101      	bne.n	1376e <ull_conn_rx+0x146>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   1376a:	f884 20f5 	strb.w	r2, [r4, #245]	; 0xf5
				break;
			}
		}

		/* Procedure complete */
		conn->procedure_expire = 0U;
   1376e:	2000      	movs	r0, #0
   13770:	e0bb      	b.n	138ea <ull_conn_rx+0x2c2>
		if (!conn->lll.role ||
   13772:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   13776:	2b00      	cmp	r3, #0
   13778:	f280 833a 	bge.w	13df0 <ull_conn_rx+0x7c8>
   1377c:	7f6b      	ldrb	r3, [r5, #29]
   1377e:	2b08      	cmp	r3, #8
   13780:	f040 8336 	bne.w	13df0 <ull_conn_rx+0x7c8>
	instant = sys_le16_to_cpu(pdu->llctrl.chan_map_ind.instant);
   13784:	f8b5 6025 	ldrh.w	r6, [r5, #37]	; 0x25
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   13788:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   1378a:	1af3      	subs	r3, r6, r3
   1378c:	041f      	lsls	r7, r3, #16
   1378e:	d48e      	bmi.n	136ae <ull_conn_rx+0x86>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   13790:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
   13794:	f894 2089 	ldrb.w	r2, [r4, #137]	; 0x89
   13798:	1a9b      	subs	r3, r3, r2
   1379a:	f003 0303 	and.w	r3, r3, #3
   1379e:	2b02      	cmp	r3, #2
   137a0:	d092      	beq.n	136c8 <ull_conn_rx+0xa0>
	memcpy(&conn->llcp.chan_map.chm[0], &pdu->llctrl.chan_map_ind.chm[0],
   137a2:	2205      	movs	r2, #5
   137a4:	f105 0120 	add.w	r1, r5, #32
   137a8:	f104 008d 	add.w	r0, r4, #141	; 0x8d
   137ac:	f00a fc41 	bl	1e032 <memcpy>
	conn->llcp.chan_map.initiate = 0U;
   137b0:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
	conn->llcp.chan_map.instant = instant;
   137b4:	f8a4 6092 	strh.w	r6, [r4, #146]	; 0x92
	conn->llcp.chan_map.initiate = 0U;
   137b8:	f36f 0300 	bfc	r3, #0, #1
   137bc:	f884 308c 	strb.w	r3, [r4, #140]	; 0x8c
	conn->llcp_type = LLCP_CHAN_MAP;
   137c0:	2302      	movs	r3, #2
   137c2:	f884 308a 	strb.w	r3, [r4, #138]	; 0x8a
	conn->llcp_ack -= 2U;
   137c6:	f894 3089 	ldrb.w	r3, [r4, #137]	; 0x89
   137ca:	3b02      	subs	r3, #2
   137cc:	f884 3089 	strb.w	r3, [r4, #137]	; 0x89
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   137d0:	e735      	b.n	1363e <ull_conn_rx+0x16>
		if (PDU_DATA_LLCTRL_LEN(terminate_ind) != pdu_rx->len) {
   137d2:	7f6b      	ldrb	r3, [r5, #29]
   137d4:	2b02      	cmp	r3, #2
   137d6:	f040 830b 	bne.w	13df0 <ull_conn_rx+0x7c8>
	conn->llcp_terminate.reason_final =
   137da:	f895 3020 	ldrb.w	r3, [r5, #32]
   137de:	f884 30d3 	strb.w	r3, [r4, #211]	; 0xd3
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   137e2:	e72c      	b.n	1363e <ull_conn_rx+0x16>
		if (!conn->lll.role ||
   137e4:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   137e8:	2b00      	cmp	r3, #0
   137ea:	f280 8301 	bge.w	13df0 <ull_conn_rx+0x7c8>
   137ee:	f895 901d 	ldrb.w	r9, [r5, #29]
   137f2:	f1b9 0f09 	cmp.w	r9, #9
   137f6:	f040 82fb 	bne.w	13df0 <ull_conn_rx+0x7c8>
	tx = ctrl_tx_rsp_mem_acquire(conn, rx, &err);
   137fa:	aa01      	add	r2, sp, #4
   137fc:	4629      	mov	r1, r5
   137fe:	4620      	mov	r0, r4
   13800:	f7ff fc3e 	bl	13080 <ctrl_tx_rsp_mem_acquire>
	if (!tx) {
   13804:	4606      	mov	r6, r0
   13806:	b908      	cbnz	r0, 1380c <ull_conn_rx+0x1e4>
		return err;
   13808:	9801      	ldr	r0, [sp, #4]
   1380a:	e070      	b.n	138ee <ull_conn_rx+0x2c6>
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   1380c:	f105 0720 	add.w	r7, r5, #32
   13810:	4638      	mov	r0, r7
   13812:	f7ff fda1 	bl	13358 <feat_get>
   13816:	e9d4 232e 	ldrd	r2, r3, [r4, #184]	; 0xb8
   1381a:	4002      	ands	r2, r0
   1381c:	400b      	ands	r3, r1
   1381e:	e9c4 232e 	strd	r2, r3, [r4, #184]	; 0xb8
		feat_land_octet0(feat_get(&req->features[0]), ll_feat_get());
   13822:	4638      	mov	r0, r7
   13824:	f7ff fd98 	bl	13358 <feat_get>
   13828:	4607      	mov	r7, r0
   1382a:	4688      	mov	r8, r1
   1382c:	f010 fb58 	bl	23ee0 <ll_feat_get>
	conn->common.fex_valid = 1U;
   13830:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
	feat_result = feat_to_keep & feat_octet0;
   13834:	4038      	ands	r0, r7
	conn->common.fex_valid = 1U;
   13836:	f043 0301 	orr.w	r3, r3, #1
   1383a:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
	feat_result &= 0xFF;
   1383e:	f000 00ff 	and.w	r0, r0, #255	; 0xff
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   13842:	7933      	ldrb	r3, [r6, #4]
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   13844:	f027 07ff 	bic.w	r7, r7, #255	; 0xff
   13848:	f008 01ff 	and.w	r1, r8, #255	; 0xff
   1384c:	4307      	orrs	r7, r0
	conn->llcp_feature.features_peer =
   1384e:	e9c4 7130 	strd	r7, r1, [r4, #192]	; 0xc0
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   13852:	f043 0303 	orr.w	r3, r3, #3
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   13856:	f106 0708 	add.w	r7, r6, #8
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1385a:	7133      	strb	r3, [r6, #4]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   1385c:	2208      	movs	r2, #8
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   1385e:	f886 9005 	strb.w	r9, [r6, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   13862:	f886 9007 	strb.w	r9, [r6, #7]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   13866:	2100      	movs	r1, #0
   13868:	4638      	mov	r0, r7
   1386a:	f00a fbed 	bl	1e048 <memset>
	feat = feat_land_octet0(ll_feat_get(),
   1386e:	f010 fb37 	bl	23ee0 <ll_feat_get>
	feat_result = feat_to_keep & feat_octet0;
   13872:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   13876:	4003      	ands	r3, r0
	feat_result &= 0xFF;
   13878:	f003 03ff 	and.w	r3, r3, #255	; 0xff
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   1387c:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
	sys_put_le64(feat, pdu_tx->llctrl.feature_rsp.features);
   13880:	4318      	orrs	r0, r3
   13882:	463a      	mov	r2, r7
   13884:	b2c9      	uxtb	r1, r1
   13886:	f010 fcf2 	bl	2426e <sys_put_le64>
	ctrl_tx_sec_enqueue(conn, tx);
   1388a:	4631      	mov	r1, r6
   1388c:	4620      	mov	r0, r4
   1388e:	f010 fcff 	bl	24290 <ctrl_tx_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   13892:	e6d4      	b.n	1363e <ull_conn_rx+0x16>
		if ((!IS_ENABLED(CONFIG_BT_CTLR_PER_INIT_FEAT_XCHG) &&
   13894:	7f6b      	ldrb	r3, [r5, #29]
   13896:	2b09      	cmp	r3, #9
   13898:	f040 82aa 	bne.w	13df0 <ull_conn_rx+0x7c8>
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   1389c:	3520      	adds	r5, #32
   1389e:	4628      	mov	r0, r5
   138a0:	f7ff fd5a 	bl	13358 <feat_get>
   138a4:	e9d4 232e 	ldrd	r2, r3, [r4, #184]	; 0xb8
   138a8:	400b      	ands	r3, r1
   138aa:	4002      	ands	r2, r0
   138ac:	e9c4 232e 	strd	r2, r3, [r4, #184]	; 0xb8
		feat_land_octet0(feat_get(&rsp->features[0]), ll_feat_get());
   138b0:	4628      	mov	r0, r5
   138b2:	f7ff fd51 	bl	13358 <feat_get>
   138b6:	4605      	mov	r5, r0
   138b8:	460e      	mov	r6, r1
   138ba:	f010 fb11 	bl	23ee0 <ll_feat_get>
	feat_result = feat_to_keep & feat_octet0;
   138be:	ea05 0300 	and.w	r3, r5, r0
	feat_result &= 0xFF;
   138c2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   138c6:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
   138ca:	431d      	orrs	r5, r3
	conn->common.fex_valid = 1U;
   138cc:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   138d0:	f006 06ff 	and.w	r6, r6, #255	; 0xff
	conn->common.fex_valid = 1U;
   138d4:	f043 0301 	orr.w	r3, r3, #1
	conn->llcp_feature.features_peer =
   138d8:	e9c4 5630 	strd	r5, r6, [r4, #192]	; 0xc0
	conn->common.fex_valid = 1U;
   138dc:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
	conn->llcp_feature.ack = conn->llcp_feature.req;
   138e0:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
   138e4:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
	feat_result &= 0xFF;
   138e8:	2000      	movs	r0, #0
	conn->procedure_expire = 0U;
   138ea:	f8a4 0078 	strh.w	r0, [r4, #120]	; 0x78
}
   138ee:	b003      	add	sp, #12
   138f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (PDU_DATA_LLCTRL_LEN(version_ind) != pdu_rx->len) {
   138f4:	7f6e      	ldrb	r6, [r5, #29]
   138f6:	2e06      	cmp	r6, #6
   138f8:	f040 827a 	bne.w	13df0 <ull_conn_rx+0x7c8>
	if (!conn->llcp_version.tx) {
   138fc:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
   13900:	07d8      	lsls	r0, r3, #31
   13902:	d43d      	bmi.n	13980 <ull_conn_rx+0x358>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   13904:	48c8      	ldr	r0, [pc, #800]	; (13c28 <ull_conn_rx+0x600>)
   13906:	f00f ff67 	bl	237d8 <mem_acquire>
		if (!tx) {
   1390a:	4601      	mov	r1, r0
   1390c:	2800      	cmp	r0, #0
   1390e:	f000 8286 	beq.w	13e1e <ull_conn_rx+0x7f6>
		conn->llcp_version.tx = 1U;
   13912:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
   13916:	f043 0301 	orr.w	r3, r3, #1
   1391a:	f884 30ca 	strb.w	r3, [r4, #202]	; 0xca
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1391e:	7903      	ldrb	r3, [r0, #4]
		pdu_tx->len =
   13920:	7146      	strb	r6, [r0, #5]
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   13922:	f043 0303 	orr.w	r3, r3, #3
   13926:	7103      	strb	r3, [r0, #4]
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   13928:	230c      	movs	r3, #12
   1392a:	71c3      	strb	r3, [r0, #7]
		v->version_number = LL_VERSION_NUMBER;
   1392c:	7203      	strb	r3, [r0, #8]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   1392e:	f06f 030e 	mvn.w	r3, #14
   13932:	7243      	strb	r3, [r0, #9]
   13934:	2305      	movs	r3, #5
   13936:	7283      	strb	r3, [r0, #10]
		v->sub_version_number =
   13938:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1393c:	72c3      	strb	r3, [r0, #11]
   1393e:	7303      	strb	r3, [r0, #12]
		ctrl_tx_sec_enqueue(conn, tx);
   13940:	4620      	mov	r0, r4
   13942:	f010 fca5 	bl	24290 <ctrl_tx_enqueue>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   13946:	2301      	movs	r3, #1
   13948:	712b      	strb	r3, [r5, #4]
	conn->llcp_version.version_number = v->version_number;
   1394a:	f895 3020 	ldrb.w	r3, [r5, #32]
   1394e:	f884 30cb 	strb.w	r3, [r4, #203]	; 0xcb
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   13952:	f895 2022 	ldrb.w	r2, [r5, #34]	; 0x22
   13956:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   1395a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1395e:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
		sys_le16_to_cpu(v->sub_version_number);
   13962:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
   13966:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
   1396a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp_version.sub_version_number =
   1396e:	f8a4 30ce 	strh.w	r3, [r4, #206]	; 0xce
	conn->llcp_version.rx = 1U;
   13972:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
   13976:	f043 0302 	orr.w	r3, r3, #2
   1397a:	f884 30ca 	strb.w	r3, [r4, #202]	; 0xca
	return 0;
   1397e:	e669      	b.n	13654 <ull_conn_rx+0x2c>
	} else if (!conn->llcp_version.rx) {
   13980:	f013 0302 	ands.w	r3, r3, #2
   13984:	f47f ae5b 	bne.w	1363e <ull_conn_rx+0x16>
		conn->llcp_version.ack = conn->llcp_version.req;
   13988:	f894 20c8 	ldrb.w	r2, [r4, #200]	; 0xc8
   1398c:	f884 20c9 	strb.w	r2, [r4, #201]	; 0xc9
		conn->procedure_expire = 0U;
   13990:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
   13994:	e7d9      	b.n	1394a <ull_conn_rx+0x322>
		if (PDU_DATA_LLCTRL_LEN(conn_param_req) != pdu_rx->len) {
   13996:	7f6b      	ldrb	r3, [r5, #29]
   13998:	2b18      	cmp	r3, #24
   1399a:	f040 8229 	bne.w	13df0 <ull_conn_rx+0x7c8>
	return conn_upd_curr && (conn_upd_curr != conn);
   1399e:	4ba3      	ldr	r3, [pc, #652]	; (13c2c <ull_conn_rx+0x604>)
   139a0:	681b      	ldr	r3, [r3, #0]
   139a2:	b14b      	cbz	r3, 139b8 <ull_conn_rx+0x390>
		if (cpr_active_is_set(conn)) {
   139a4:	429c      	cmp	r4, r3
   139a6:	d007      	beq.n	139b8 <ull_conn_rx+0x390>
			nack = reject_ext_ind_send(conn, *rx,
   139a8:	2220      	movs	r2, #32
				nack = reject_ext_ind_send(conn, *rx,
   139aa:	4629      	mov	r1, r5
   139ac:	4620      	mov	r0, r4
}
   139ae:	b003      	add	sp, #12
   139b0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
				nack = reject_ext_ind_send(conn, *rx,
   139b4:	f010 bc91 	b.w	242da <reject_ext_ind_send.constprop.0>
		if (!conn->lll.role) {
   139b8:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
					conn->llcp_conn_param.ack) &&
   139bc:	f894 10f5 	ldrb.w	r1, [r4, #245]	; 0xf5
			if ((conn->llcp_conn_param.req !=
   139c0:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
		if (!conn->lll.role) {
   139c4:	2a00      	cmp	r2, #0
   139c6:	f2c0 80a9 	blt.w	13b1c <ull_conn_rx+0x4f4>
			if ((conn->llcp_conn_param.req !=
   139ca:	4299      	cmp	r1, r3
   139cc:	d00a      	beq.n	139e4 <ull_conn_rx+0x3bc>
			    ((conn->llcp_conn_param.state ==
   139ce:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
					conn->llcp_conn_param.ack) &&
   139d2:	f013 0f0b 	tst.w	r3, #11
   139d6:	d003      	beq.n	139e0 <ull_conn_rx+0x3b8>
			      LLCP_CPR_STATE_RSP_WAIT) ||
   139d8:	f003 030f 	and.w	r3, r3, #15
   139dc:	2b06      	cmp	r3, #6
   139de:	d101      	bne.n	139e4 <ull_conn_rx+0x3bc>
				nack = reject_ext_ind_send(conn, *rx,
   139e0:	2223      	movs	r2, #35	; 0x23
   139e2:	e7e2      	b.n	139aa <ull_conn_rx+0x382>
			} else if (((conn->llcp_req - conn->llcp_ack) &
   139e4:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
   139e8:	f894 2089 	ldrb.w	r2, [r4, #137]	; 0x89
   139ec:	1a9b      	subs	r3, r3, r2
   139ee:	f003 0303 	and.w	r3, r3, #3
   139f2:	2b02      	cmp	r3, #2
   139f4:	d101      	bne.n	139fa <ull_conn_rx+0x3d2>
				nack = reject_ext_ind_send(conn, *rx,
   139f6:	222a      	movs	r2, #42	; 0x2a
   139f8:	e7d7      	b.n	139aa <ull_conn_rx+0x382>
				uint16_t interval_min =
   139fa:	f8b5 8020 	ldrh.w	r8, [r5, #32]
   139fe:	fa1f f388 	uxth.w	r3, r8
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   13a02:	2b05      	cmp	r3, #5
   13a04:	d922      	bls.n	13a4c <ull_conn_rx+0x424>
				uint16_t interval_max =
   13a06:	f8b5 e022 	ldrh.w	lr, [r5, #34]	; 0x22
   13a0a:	fa1f f08e 	uxth.w	r0, lr
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   13a0e:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
   13a12:	d81b      	bhi.n	13a4c <ull_conn_rx+0x424>
				    (interval_max > 3200) ||
   13a14:	4283      	cmp	r3, r0
   13a16:	d819      	bhi.n	13a4c <ull_conn_rx+0x424>
				uint16_t latency =
   13a18:	f8b5 c024 	ldrh.w	ip, [r5, #36]	; 0x24
   13a1c:	fa1f f68c 	uxth.w	r6, ip
				    (interval_min > interval_max) ||
   13a20:	f5b6 7ffa 	cmp.w	r6, #500	; 0x1f4
   13a24:	d212      	bcs.n	13a4c <ull_conn_rx+0x424>
				uint16_t timeout =
   13a26:	8cef      	ldrh	r7, [r5, #38]	; 0x26
   13a28:	b2bb      	uxth	r3, r7
				    (latency > 499) ||
   13a2a:	f1a3 020a 	sub.w	r2, r3, #10
   13a2e:	b292      	uxth	r2, r2
   13a30:	f640 4976 	movw	r9, #3190	; 0xc76
   13a34:	454a      	cmp	r2, r9
   13a36:	d809      	bhi.n	13a4c <ull_conn_rx+0x424>
				     ((latency + 1) * interval_max)) ||
   13a38:	1c72      	adds	r2, r6, #1
   13a3a:	b292      	uxth	r2, r2
   13a3c:	4342      	muls	r2, r0
				    (timeout > 3200) ||
   13a3e:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
   13a42:	d203      	bcs.n	13a4c <ull_conn_rx+0x424>
					cpr->preferred_periodicity;
   13a44:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
				     ((latency + 1) * interval_max)) ||
   13a48:	4290      	cmp	r0, r2
   13a4a:	d201      	bcs.n	13a50 <ull_conn_rx+0x428>
				nack = reject_ext_ind_send(conn, *rx,
   13a4c:	221e      	movs	r2, #30
   13a4e:	e7ac      	b.n	139aa <ull_conn_rx+0x382>
				conn->llcp_conn_param.interval_min =
   13a50:	f8a4 80f8 	strh.w	r8, [r4, #248]	; 0xf8
				conn->llcp_conn_param.interval_max =
   13a54:	f8a4 e0fa 	strh.w	lr, [r4, #250]	; 0xfa
				conn->llcp_conn_param.latency =	latency;
   13a58:	f8a4 c0fc 	strh.w	ip, [r4, #252]	; 0xfc
				conn->llcp_conn_param.timeout =	timeout;
   13a5c:	f8a4 70fe 	strh.w	r7, [r4, #254]	; 0xfe
				conn->llcp_conn_param.preferred_periodicity =
   13a60:	f884 2100 	strb.w	r2, [r4, #256]	; 0x100
					sys_le16_to_cpu(cpr->reference_conn_event_count);
   13a64:	f895 702a 	ldrb.w	r7, [r5, #42]	; 0x2a
   13a68:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
   13a6c:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
   13a70:	f8a4 2102 	strh.w	r2, [r4, #258]	; 0x102
					sys_le16_to_cpu(cpr->offset0);
   13a74:	f895 702c 	ldrb.w	r7, [r5, #44]	; 0x2c
   13a78:	f895 202b 	ldrb.w	r2, [r5, #43]	; 0x2b
   13a7c:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
				conn->llcp_conn_param.offset0 =
   13a80:	f8a4 2104 	strh.w	r2, [r4, #260]	; 0x104
					sys_le16_to_cpu(cpr->offset1);
   13a84:	f895 702e 	ldrb.w	r7, [r5, #46]	; 0x2e
   13a88:	f895 202d 	ldrb.w	r2, [r5, #45]	; 0x2d
   13a8c:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
				conn->llcp_conn_param.offset1 =
   13a90:	f8a4 2106 	strh.w	r2, [r4, #262]	; 0x106
					sys_le16_to_cpu(cpr->offset2);
   13a94:	f895 7030 	ldrb.w	r7, [r5, #48]	; 0x30
   13a98:	f895 202f 	ldrb.w	r2, [r5, #47]	; 0x2f
   13a9c:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
				conn->llcp_conn_param.offset2 =
   13aa0:	f8a4 2108 	strh.w	r2, [r4, #264]	; 0x108
					sys_le16_to_cpu(cpr->offset3);
   13aa4:	f895 7032 	ldrb.w	r7, [r5, #50]	; 0x32
   13aa8:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
   13aac:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
				conn->llcp_conn_param.offset3 =
   13ab0:	f8a4 210a 	strh.w	r2, [r4, #266]	; 0x10a
					sys_le16_to_cpu(cpr->offset4);
   13ab4:	f895 7034 	ldrb.w	r7, [r5, #52]	; 0x34
   13ab8:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
   13abc:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
				conn->llcp_conn_param.offset4 =
   13ac0:	f8a4 210c 	strh.w	r2, [r4, #268]	; 0x10c
					sys_le16_to_cpu(cpr->offset5);
   13ac4:	f895 2035 	ldrb.w	r2, [r5, #53]	; 0x35
   13ac8:	f895 7036 	ldrb.w	r7, [r5, #54]	; 0x36
   13acc:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
				conn->llcp_conn_param.offset5 =
   13ad0:	f8a4 210e 	strh.w	r2, [r4, #270]	; 0x10e
				     lll->interval) ||
   13ad4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
				if ((conn->llcp_conn_param.interval_max !=
   13ad6:	4290      	cmp	r0, r2
			if ((conn->llcp_conn_param.interval_max !=
   13ad8:	d112      	bne.n	13b00 <ull_conn_rx+0x4d8>
			     lll->interval) ||
   13ada:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
   13adc:	42b0      	cmp	r0, r6
   13ade:	d10f      	bne.n	13b00 <ull_conn_rx+0x4d8>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   13ae0:	f240 40e2 	movw	r0, #1250	; 0x4e2
   13ae4:	4342      	muls	r2, r0
   13ae6:	f242 7010 	movw	r0, #10000	; 0x2710
   13aea:	fb00 2303 	mla	r3, r0, r3, r2
   13aee:	3b01      	subs	r3, #1
   13af0:	fbb3 f3f2 	udiv	r3, r3, r2
			    (conn->llcp_conn_param.latency != lll->latency) ||
   13af4:	f8b4 2072 	ldrh.w	r2, [r4, #114]	; 0x72
   13af8:	b29b      	uxth	r3, r3
   13afa:	429a      	cmp	r2, r3
   13afc:	f000 8088 	beq.w	13c10 <ull_conn_rx+0x5e8>
				conn->llcp_conn_param.state =
   13b00:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   13b04:	2203      	movs	r2, #3
   13b06:	f362 0303 	bfi	r3, r2, #0, #4
   13b0a:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
			conn->llcp_conn_param.ack--;
   13b0e:	3901      	subs	r1, #1
   13b10:	f884 10f5 	strb.w	r1, [r4, #245]	; 0xf5
			cpr_active_check_and_set(conn);
   13b14:	4620      	mov	r0, r4
   13b16:	f7ff faab 	bl	13070 <cpr_active_check_and_set>
   13b1a:	e59b      	b.n	13654 <ull_conn_rx+0x2c>
		} else if ((conn->llcp_conn_param.req ==
   13b1c:	4299      	cmp	r1, r3
   13b1e:	d005      	beq.n	13b2c <ull_conn_rx+0x504>
			    conn->llcp_conn_param.ack) ||
   13b20:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   13b24:	f013 0f0b 	tst.w	r3, #11
   13b28:	f47f ad89 	bne.w	1363e <ull_conn_rx+0x16>
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   13b2c:	f8b5 8020 	ldrh.w	r8, [r5, #32]
   13b30:	fa1f f388 	uxth.w	r3, r8
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   13b34:	2b05      	cmp	r3, #5
   13b36:	d989      	bls.n	13a4c <ull_conn_rx+0x424>
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   13b38:	f8b5 e022 	ldrh.w	lr, [r5, #34]	; 0x22
   13b3c:	fa1f f28e 	uxth.w	r2, lr
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   13b40:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   13b44:	d882      	bhi.n	13a4c <ull_conn_rx+0x424>
			    (interval_max > 3200) ||
   13b46:	4293      	cmp	r3, r2
   13b48:	d880      	bhi.n	13a4c <ull_conn_rx+0x424>
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   13b4a:	f8b5 c024 	ldrh.w	ip, [r5, #36]	; 0x24
   13b4e:	fa1f f68c 	uxth.w	r6, ip
			    (interval_min > interval_max) ||
   13b52:	f5b6 7ffa 	cmp.w	r6, #500	; 0x1f4
   13b56:	f4bf af79 	bcs.w	13a4c <ull_conn_rx+0x424>
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   13b5a:	8cef      	ldrh	r7, [r5, #38]	; 0x26
   13b5c:	b2bb      	uxth	r3, r7
			    (latency > 499) ||
   13b5e:	f1a3 000a 	sub.w	r0, r3, #10
   13b62:	b280      	uxth	r0, r0
   13b64:	f640 4976 	movw	r9, #3190	; 0xc76
   13b68:	4548      	cmp	r0, r9
   13b6a:	f63f af6f 	bhi.w	13a4c <ull_conn_rx+0x424>
			     ((latency + 1) * interval_max)) ||
   13b6e:	1c70      	adds	r0, r6, #1
   13b70:	b280      	uxth	r0, r0
   13b72:	4350      	muls	r0, r2
			    (timeout < 10) || (timeout > 3200) ||
   13b74:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
   13b78:	f4bf af68 	bcs.w	13a4c <ull_conn_rx+0x424>
				cpr->preferred_periodicity;
   13b7c:	f895 0028 	ldrb.w	r0, [r5, #40]	; 0x28
			     ((latency + 1) * interval_max)) ||
   13b80:	4282      	cmp	r2, r0
   13b82:	f4ff af63 	bcc.w	13a4c <ull_conn_rx+0x424>
			conn->llcp_conn_param.interval_min = interval_min;
   13b86:	f8a4 80f8 	strh.w	r8, [r4, #248]	; 0xf8
			conn->llcp_conn_param.interval_max = interval_max;
   13b8a:	f8a4 e0fa 	strh.w	lr, [r4, #250]	; 0xfa
			conn->llcp_conn_param.latency =	latency;
   13b8e:	f8a4 c0fc 	strh.w	ip, [r4, #252]	; 0xfc
			conn->llcp_conn_param.timeout =	timeout;
   13b92:	f8a4 70fe 	strh.w	r7, [r4, #254]	; 0xfe
			conn->llcp_conn_param.preferred_periodicity =
   13b96:	f884 0100 	strb.w	r0, [r4, #256]	; 0x100
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   13b9a:	f895 702a 	ldrb.w	r7, [r5, #42]	; 0x2a
   13b9e:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
   13ba2:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   13ba6:	f8a4 0102 	strh.w	r0, [r4, #258]	; 0x102
				sys_le16_to_cpu(cpr->offset0);
   13baa:	f895 702c 	ldrb.w	r7, [r5, #44]	; 0x2c
   13bae:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
   13bb2:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
			conn->llcp_conn_param.offset0 =
   13bb6:	f8a4 0104 	strh.w	r0, [r4, #260]	; 0x104
				sys_le16_to_cpu(cpr->offset1);
   13bba:	f895 702e 	ldrb.w	r7, [r5, #46]	; 0x2e
   13bbe:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
   13bc2:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
			conn->llcp_conn_param.offset1 =
   13bc6:	f8a4 0106 	strh.w	r0, [r4, #262]	; 0x106
				sys_le16_to_cpu(cpr->offset2);
   13bca:	f895 7030 	ldrb.w	r7, [r5, #48]	; 0x30
   13bce:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
   13bd2:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
			conn->llcp_conn_param.offset2 =
   13bd6:	f8a4 0108 	strh.w	r0, [r4, #264]	; 0x108
				sys_le16_to_cpu(cpr->offset3);
   13bda:	f895 7032 	ldrb.w	r7, [r5, #50]	; 0x32
   13bde:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
   13be2:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
			conn->llcp_conn_param.offset3 =
   13be6:	f8a4 010a 	strh.w	r0, [r4, #266]	; 0x10a
				sys_le16_to_cpu(cpr->offset4);
   13bea:	f895 7034 	ldrb.w	r7, [r5, #52]	; 0x34
   13bee:	f895 0033 	ldrb.w	r0, [r5, #51]	; 0x33
   13bf2:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
			conn->llcp_conn_param.offset4 =
   13bf6:	f8a4 010c 	strh.w	r0, [r4, #268]	; 0x10c
				sys_le16_to_cpu(cpr->offset5);
   13bfa:	f895 0035 	ldrb.w	r0, [r5, #53]	; 0x35
   13bfe:	f895 7036 	ldrb.w	r7, [r5, #54]	; 0x36
   13c02:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
			conn->llcp_conn_param.offset5 =
   13c06:	f8a4 010e 	strh.w	r0, [r4, #270]	; 0x10e
			     lll->interval) ||
   13c0a:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
			if ((conn->llcp_conn_param.interval_max !=
   13c0c:	4282      	cmp	r2, r0
   13c0e:	e763      	b.n	13ad8 <ull_conn_rx+0x4b0>
				conn->llcp_conn_param.state =
   13c10:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
   13c14:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
   13c18:	f043 0301 	orr.w	r3, r3, #1
   13c1c:	f8a4 30f6 	strh.w	r3, [r4, #246]	; 0xf6
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   13c20:	2301      	movs	r3, #1
   13c22:	712b      	strb	r3, [r5, #4]
   13c24:	e773      	b.n	13b0e <ull_conn_rx+0x4e6>
   13c26:	bf00      	nop
   13c28:	20002fc4 	.word	0x20002fc4
   13c2c:	20002f30 	.word	0x20002f30
		if (PDU_DATA_LLCTRL_LEN(reject_ext_ind) != pdu_rx->len) {
   13c30:	7f6b      	ldrb	r3, [r5, #29]
   13c32:	2b03      	cmp	r3, #3
   13c34:	f040 80dc 	bne.w	13df0 <ull_conn_rx+0x7c8>
	switch (rej_ext_ind->reject_opcode) {
   13c38:	f895 3020 	ldrb.w	r3, [r5, #32]
   13c3c:	2b0f      	cmp	r3, #15
   13c3e:	f47f acfe 	bne.w	1363e <ull_conn_rx+0x16>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   13c42:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   13c46:	f894 10f5 	ldrb.w	r1, [r4, #245]	; 0xf5
   13c4a:	4299      	cmp	r1, r3
   13c4c:	f43f acf7 	beq.w	1363e <ull_conn_rx+0x16>
	if (!lll->role && (rej_ext_ind->error_code ==
   13c50:	f994 0039 	ldrsb.w	r0, [r4, #57]	; 0x39
   13c54:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
   13c58:	2800      	cmp	r0, #0
   13c5a:	f2c0 80e3 	blt.w	13e24 <ull_conn_rx+0x7fc>
   13c5e:	291a      	cmp	r1, #26
   13c60:	f040 80e6 	bne.w	13e30 <ull_conn_rx+0x808>
		LL_ASSERT(conn->llcp_cu.req == conn->llcp_cu.ack);
   13c64:	f894 209c 	ldrb.w	r2, [r4, #156]	; 0x9c
   13c68:	f894 309d 	ldrb.w	r3, [r4, #157]	; 0x9d
   13c6c:	429a      	cmp	r2, r3
   13c6e:	d00c      	beq.n	13c8a <ull_conn_rx+0x662>
   13c70:	4a89      	ldr	r2, [pc, #548]	; (13e98 <ull_conn_rx+0x870>)
   13c72:	498a      	ldr	r1, [pc, #552]	; (13e9c <ull_conn_rx+0x874>)
   13c74:	488a      	ldr	r0, [pc, #552]	; (13ea0 <ull_conn_rx+0x878>)
   13c76:	f241 43af 	movw	r3, #5295	; 0x14af
   13c7a:	f008 fb25 	bl	1c2c8 <printk>
   13c7e:	4040      	eors	r0, r0
   13c80:	f380 8811 	msr	BASEPRI, r0
   13c84:	f04f 0003 	mov.w	r0, #3
   13c88:	df02      	svc	2
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   13c8a:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   13c8e:	2206      	movs	r2, #6
   13c90:	f362 0303 	bfi	r3, r2, #0, #4
		conn->llcp_cu.win_size = 1U;
   13c94:	2201      	movs	r2, #1
   13c96:	f884 20ac 	strb.w	r2, [r4, #172]	; 0xac
		conn->llcp_cu.win_offset_us = 0U;
   13c9a:	2200      	movs	r2, #0
   13c9c:	f8c4 20a8 	str.w	r2, [r4, #168]	; 0xa8
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   13ca0:	f8b4 20fa 	ldrh.w	r2, [r4, #250]	; 0xfa
   13ca4:	f8a4 20a0 	strh.w	r2, [r4, #160]	; 0xa0
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   13ca8:	f8b4 20fc 	ldrh.w	r2, [r4, #252]	; 0xfc
   13cac:	f8a4 20a2 	strh.w	r2, [r4, #162]	; 0xa2
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   13cb0:	f8b4 20fe 	ldrh.w	r2, [r4, #254]	; 0xfe
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   13cb4:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   13cb8:	f8a4 20a4 	strh.w	r2, [r4, #164]	; 0xa4
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   13cbc:	f3c3 1300 	ubfx	r3, r3, #4, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   13cc0:	f894 209e 	ldrb.w	r2, [r4, #158]	; 0x9e
   13cc4:	00db      	lsls	r3, r3, #3
   13cc6:	f043 0301 	orr.w	r3, r3, #1
   13cca:	f022 020f 	bic.w	r2, r2, #15
   13cce:	4313      	orrs	r3, r2
   13cd0:	f884 309e 	strb.w	r3, [r4, #158]	; 0x9e
		conn->llcp_cu.ack--;
   13cd4:	f894 309d 	ldrb.w	r3, [r4, #157]	; 0x9d
   13cd8:	3b01      	subs	r3, #1
   13cda:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
	if (err) {
   13cde:	e4ae      	b.n	1363e <ull_conn_rx+0x16>
		if (PDU_DATA_LLCTRL_LEN(unknown_rsp) != pdu_rx->len) {
   13ce0:	7f6b      	ldrb	r3, [r5, #29]
   13ce2:	2b02      	cmp	r3, #2
   13ce4:	f040 8084 	bne.w	13df0 <ull_conn_rx+0x7c8>
			    conn->llcp_conn_param.req) &&
   13ce8:	f894 10f4 	ldrb.w	r1, [r4, #244]	; 0xf4
		} else if ((conn->llcp_conn_param.ack !=
   13cec:	f894 30f5 	ldrb.w	r3, [r4, #245]	; 0xf5
   13cf0:	428b      	cmp	r3, r1
   13cf2:	f43f ad3c 	beq.w	1376e <ull_conn_rx+0x146>
			    conn->llcp_conn_param.req) &&
   13cf6:	f895 3020 	ldrb.w	r3, [r5, #32]
   13cfa:	2b0f      	cmp	r3, #15
   13cfc:	f47f ad37 	bne.w	1376e <ull_conn_rx+0x146>
			conn->llcp_conn_param.disabled = 1U;
   13d00:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   13d04:	f043 0320 	orr.w	r3, r3, #32
   13d08:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
			if (!conn->lll.role) {
   13d0c:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   13d10:	2b00      	cmp	r3, #0
   13d12:	db3e      	blt.n	13d92 <ull_conn_rx+0x76a>
				LL_ASSERT(conn->llcp_cu.req ==
   13d14:	f894 209c 	ldrb.w	r2, [r4, #156]	; 0x9c
   13d18:	f894 309d 	ldrb.w	r3, [r4, #157]	; 0x9d
   13d1c:	429a      	cmp	r2, r3
   13d1e:	d00c      	beq.n	13d3a <ull_conn_rx+0x712>
   13d20:	4a5d      	ldr	r2, [pc, #372]	; (13e98 <ull_conn_rx+0x870>)
   13d22:	495e      	ldr	r1, [pc, #376]	; (13e9c <ull_conn_rx+0x874>)
   13d24:	485e      	ldr	r0, [pc, #376]	; (13ea0 <ull_conn_rx+0x878>)
   13d26:	f641 33f5 	movw	r3, #7157	; 0x1bf5
   13d2a:	f008 facd 	bl	1c2c8 <printk>
   13d2e:	4040      	eors	r0, r0
   13d30:	f380 8811 	msr	BASEPRI, r0
   13d34:	f04f 0003 	mov.w	r0, #3
   13d38:	df02      	svc	2
				conn->llcp_conn_param.state =
   13d3a:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   13d3e:	2206      	movs	r2, #6
   13d40:	f362 0303 	bfi	r3, r2, #0, #4
				conn->llcp_cu.interval =
   13d44:	f8b4 20fa 	ldrh.w	r2, [r4, #250]	; 0xfa
   13d48:	f8a4 20a0 	strh.w	r2, [r4, #160]	; 0xa0
				conn->llcp_cu.latency =
   13d4c:	f8b4 20fc 	ldrh.w	r2, [r4, #252]	; 0xfc
   13d50:	f8a4 20a2 	strh.w	r2, [r4, #162]	; 0xa2
				conn->llcp_cu.timeout =
   13d54:	f8b4 20fe 	ldrh.w	r2, [r4, #254]	; 0xfe
				conn->llcp_conn_param.state =
   13d58:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
				conn->llcp_cu.timeout =
   13d5c:	f8a4 20a4 	strh.w	r2, [r4, #164]	; 0xa4
				conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   13d60:	f3c3 1300 	ubfx	r3, r3, #4, #1
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   13d64:	f894 209e 	ldrb.w	r2, [r4, #158]	; 0x9e
				conn->llcp_cu.win_size = 1U;
   13d68:	2101      	movs	r1, #1
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   13d6a:	00db      	lsls	r3, r3, #3
   13d6c:	430b      	orrs	r3, r1
   13d6e:	f022 020f 	bic.w	r2, r2, #15
   13d72:	4313      	orrs	r3, r2
   13d74:	f884 309e 	strb.w	r3, [r4, #158]	; 0x9e
				conn->llcp_cu.ack--;
   13d78:	f894 309d 	ldrb.w	r3, [r4, #157]	; 0x9d
				conn->llcp_cu.win_size = 1U;
   13d7c:	f884 10ac 	strb.w	r1, [r4, #172]	; 0xac
				conn->llcp_cu.ack--;
   13d80:	3b01      	subs	r3, #1
   13d82:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   13d86:	6833      	ldr	r3, [r6, #0]
				conn->llcp_cu.win_offset_us = 0U;
   13d88:	2000      	movs	r0, #0
   13d8a:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   13d8e:	7119      	strb	r1, [r3, #4]
				break;
   13d90:	e5ad      	b.n	138ee <ull_conn_rx+0x2c6>
	conn_upd_curr = NULL;
   13d92:	4b44      	ldr	r3, [pc, #272]	; (13ea4 <ull_conn_rx+0x87c>)
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   13d94:	f884 10f5 	strb.w	r1, [r4, #245]	; 0xf5
	conn_upd_curr = NULL;
   13d98:	2000      	movs	r0, #0
   13d9a:	6018      	str	r0, [r3, #0]
			if (!conn->llcp_conn_param.cmd) {
   13d9c:	f894 00f6 	ldrb.w	r0, [r4, #246]	; 0xf6
   13da0:	f010 0010 	ands.w	r0, r0, #16
   13da4:	d102      	bne.n	13dac <ull_conn_rx+0x784>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   13da6:	2301      	movs	r3, #1
   13da8:	712b      	strb	r3, [r5, #4]
		break;
   13daa:	e5a0      	b.n	138ee <ull_conn_rx+0x2c6>
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   13dac:	2318      	movs	r3, #24
   13dae:	712b      	strb	r3, [r5, #4]
			LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   13db0:	07d3      	lsls	r3, r2, #31
   13db2:	d50c      	bpl.n	13dce <ull_conn_rx+0x7a6>
   13db4:	4a38      	ldr	r2, [pc, #224]	; (13e98 <ull_conn_rx+0x870>)
   13db6:	493c      	ldr	r1, [pc, #240]	; (13ea8 <ull_conn_rx+0x880>)
   13db8:	4839      	ldr	r0, [pc, #228]	; (13ea0 <ull_conn_rx+0x878>)
   13dba:	f641 4322 	movw	r3, #7202	; 0x1c22
   13dbe:	f008 fa83 	bl	1c2c8 <printk>
   13dc2:	4040      	eors	r0, r0
   13dc4:	f380 8811 	msr	BASEPRI, r0
   13dc8:	f04f 0003 	mov.w	r0, #3
   13dcc:	df02      	svc	2
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   13dce:	231a      	movs	r3, #26
   13dd0:	772b      	strb	r3, [r5, #28]
			cu->latency = lll->latency;
   13dd2:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
			cu->interval = lll->interval;
   13dd4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
			cu->latency = lll->latency;
   13dd6:	842b      	strh	r3, [r5, #32]
			cu->timeout = conn->supervision_reload *
   13dd8:	f8b4 3072 	ldrh.w	r3, [r4, #114]	; 0x72
			cu->interval = lll->interval;
   13ddc:	83ea      	strh	r2, [r5, #30]
			cu->timeout = conn->supervision_reload *
   13dde:	4353      	muls	r3, r2
				      lll->interval * 125U / 1000;
   13de0:	227d      	movs	r2, #125	; 0x7d
   13de2:	4353      	muls	r3, r2
   13de4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   13de8:	fbb3 f3f2 	udiv	r3, r3, r2
			cu->timeout = conn->supervision_reload *
   13dec:	846b      	strh	r3, [r5, #34]	; 0x22
			    PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ)) {
   13dee:	e4be      	b.n	1376e <ull_conn_rx+0x146>
	tx = ctrl_tx_rsp_mem_acquire(conn, rx, &err);
   13df0:	4629      	mov	r1, r5
   13df2:	aa01      	add	r2, sp, #4
   13df4:	4620      	mov	r0, r4
   13df6:	f7ff f943 	bl	13080 <ctrl_tx_rsp_mem_acquire>
	if (!tx) {
   13dfa:	4601      	mov	r1, r0
   13dfc:	2800      	cmp	r0, #0
   13dfe:	f43f ad03 	beq.w	13808 <ull_conn_rx+0x1e0>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   13e02:	7903      	ldrb	r3, [r0, #4]
	pdu->llctrl.unknown_rsp.type = type;
   13e04:	f880 8008 	strb.w	r8, [r0, #8]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   13e08:	f043 0303 	orr.w	r3, r3, #3
   13e0c:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
   13e0e:	2302      	movs	r3, #2
   13e10:	7143      	strb	r3, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   13e12:	2307      	movs	r3, #7
   13e14:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, tx);
   13e16:	4620      	mov	r0, r4
   13e18:	f010 fa3a 	bl	24290 <ctrl_tx_enqueue>
   13e1c:	e40f      	b.n	1363e <ull_conn_rx+0x16>
			return -ENOBUFS;
   13e1e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   13e22:	e564      	b.n	138ee <ull_conn_rx+0x2c6>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   13e24:	2923      	cmp	r1, #35	; 0x23
   13e26:	d003      	beq.n	13e30 <ull_conn_rx+0x808>
			conn->periph.ticks_to_offset =
   13e28:	f8d4 1118 	ldr.w	r1, [r4, #280]	; 0x118
   13e2c:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   13e30:	f894 10f6 	ldrb.w	r1, [r4, #246]	; 0xf6
   13e34:	f001 000f 	and.w	r0, r1, #15
   13e38:	2804      	cmp	r0, #4
   13e3a:	d106      	bne.n	13e4a <ull_conn_rx+0x822>
	conn_upd_curr = NULL;
   13e3c:	4e19      	ldr	r6, [pc, #100]	; (13ea4 <ull_conn_rx+0x87c>)
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   13e3e:	f884 30f5 	strb.w	r3, [r4, #245]	; 0xf5
	conn_upd_curr = NULL;
   13e42:	2000      	movs	r0, #0
   13e44:	6030      	str	r0, [r6, #0]
		conn->procedure_expire = 0U;
   13e46:	f8a4 0078 	strh.w	r0, [r4, #120]	; 0x78
	if (!conn->llcp_conn_param.cmd) {
   13e4a:	06c9      	lsls	r1, r1, #27
   13e4c:	f57f abf7 	bpl.w	1363e <ull_conn_rx+0x16>
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   13e50:	2318      	movs	r3, #24
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   13e52:	07d2      	lsls	r2, r2, #31
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   13e54:	712b      	strb	r3, [r5, #4]
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   13e56:	d50c      	bpl.n	13e72 <ull_conn_rx+0x84a>
   13e58:	4a0f      	ldr	r2, [pc, #60]	; (13e98 <ull_conn_rx+0x870>)
   13e5a:	4913      	ldr	r1, [pc, #76]	; (13ea8 <ull_conn_rx+0x880>)
   13e5c:	4810      	ldr	r0, [pc, #64]	; (13ea0 <ull_conn_rx+0x878>)
   13e5e:	f44f 53a7 	mov.w	r3, #5344	; 0x14e0
   13e62:	f008 fa31 	bl	1c2c8 <printk>
   13e66:	4040      	eors	r0, r0
   13e68:	f380 8811 	msr	BASEPRI, r0
   13e6c:	f04f 0003 	mov.w	r0, #3
   13e70:	df02      	svc	2
	cu->status = rej_ext_ind->error_code;
   13e72:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   13e76:	772b      	strb	r3, [r5, #28]
	cu->latency = lll->latency;
   13e78:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
	cu->interval = lll->interval;
   13e7a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
	cu->latency = lll->latency;
   13e7c:	842b      	strh	r3, [r5, #32]
	cu->timeout = conn->supervision_reload *
   13e7e:	f8b4 3072 	ldrh.w	r3, [r4, #114]	; 0x72
	cu->interval = lll->interval;
   13e82:	83ea      	strh	r2, [r5, #30]
	cu->timeout = conn->supervision_reload *
   13e84:	4353      	muls	r3, r2
		      lll->interval * 125U / 1000;
   13e86:	227d      	movs	r2, #125	; 0x7d
   13e88:	4353      	muls	r3, r2
   13e8a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   13e8e:	fbb3 f3f2 	udiv	r3, r3, r2
	cu->timeout = conn->supervision_reload *
   13e92:	846b      	strh	r3, [r5, #34]	; 0x22
	if (err) {
   13e94:	f7ff bbde 	b.w	13654 <ull_conn_rx+0x2c>
   13e98:	00027c2d 	.word	0x00027c2d
   13e9c:	00027cd0 	.word	0x00027cd0
   13ea0:	00027514 	.word	0x00027514
   13ea4:	20002f30 	.word	0x20002f30
   13ea8:	000278a0 	.word	0x000278a0

00013eac <ull_conn_tx_demux>:
{
   13eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   13eae:	4c1e      	ldr	r4, [pc, #120]	; (13f28 <ull_conn_tx_demux+0x7c>)
{
   13eb0:	4605      	mov	r5, r0
	return (void *)(fifo + first * size);
   13eb2:	1d26      	adds	r6, r4, #4
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   13eb4:	78a3      	ldrb	r3, [r4, #2]
	if (first == last) {
   13eb6:	78e1      	ldrb	r1, [r4, #3]
   13eb8:	7822      	ldrb	r2, [r4, #0]
   13eba:	4299      	cmp	r1, r3
   13ebc:	d02a      	beq.n	13f14 <ull_conn_tx_demux+0x68>
	return (void *)(fifo + first * size);
   13ebe:	fb13 f302 	smulbb	r3, r3, r2
   13ec2:	18f7      	adds	r7, r6, r3
		conn = ll_connected_get(lll_tx->handle);
   13ec4:	5af0      	ldrh	r0, [r6, r3]
   13ec6:	f010 fa26 	bl	24316 <ll_connected_get>
		if (conn) {
   13eca:	6879      	ldr	r1, [r7, #4]
   13ecc:	b318      	cbz	r0, 13f16 <ull_conn_tx_demux+0x6a>
			tx->next = NULL;
   13ece:	2300      	movs	r3, #0
   13ed0:	600b      	str	r3, [r1, #0]
			if (!conn->tx_data) {
   13ed2:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
   13ed6:	b943      	cbnz	r3, 13eea <ull_conn_tx_demux+0x3e>
				if (!conn->tx_head) {
   13ed8:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
				conn->tx_data = tx;
   13edc:	f8c0 1128 	str.w	r1, [r0, #296]	; 0x128
				if (!conn->tx_head) {
   13ee0:	b91b      	cbnz	r3, 13eea <ull_conn_tx_demux+0x3e>
					conn->tx_head = tx;
   13ee2:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
					conn->tx_data_last = NULL;
   13ee6:	f8c0 312c 	str.w	r3, [r0, #300]	; 0x12c
			if (conn->tx_data_last) {
   13eea:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
   13eee:	b103      	cbz	r3, 13ef2 <ull_conn_tx_demux+0x46>
				conn->tx_data_last->next = tx;
   13ef0:	6019      	str	r1, [r3, #0]
			conn->tx_data_last = tx;
   13ef2:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
	uint8_t _first = *first; /* Copy read-index */
   13ef6:	78a3      	ldrb	r3, [r4, #2]
	if (_first == last) {
   13ef8:	78e1      	ldrb	r1, [r4, #3]
		MFIFO_DEQUEUE(conn_tx);
   13efa:	7862      	ldrb	r2, [r4, #1]
   13efc:	4299      	cmp	r1, r3
   13efe:	d005      	beq.n	13f0c <ull_conn_tx_demux+0x60>
	_first += 1U;
   13f00:	3301      	adds	r3, #1
   13f02:	b2db      	uxtb	r3, r3
		_first = 0U;
   13f04:	429a      	cmp	r2, r3
   13f06:	bf08      	it	eq
   13f08:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   13f0a:	70a3      	strb	r3, [r4, #2]
	} while (--count);
   13f0c:	3d01      	subs	r5, #1
   13f0e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   13f12:	d1cf      	bne.n	13eb4 <ull_conn_tx_demux+0x8>
}
   13f14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			p->ll_id = PDU_DATA_LLID_RESV;
   13f16:	790b      	ldrb	r3, [r1, #4]
   13f18:	f360 0301 	bfi	r3, r0, #0, #2
   13f1c:	710b      	strb	r3, [r1, #4]
			ll_tx_ack_put(LLL_HANDLE_INVALID, tx);
   13f1e:	f64f 70ff 	movw	r0, #65535	; 0xffff
   13f22:	f7fe f80f 	bl	11f44 <ll_tx_ack_put>
   13f26:	e7e6      	b.n	13ef6 <ull_conn_tx_demux+0x4a>
   13f28:	20000b40 	.word	0x20000b40

00013f2c <conn_cleanup>:
	if (conn == conn_upd_curr) {
   13f2c:	4b3d      	ldr	r3, [pc, #244]	; (14024 <conn_cleanup+0xf8>)
{
   13f2e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (conn == conn_upd_curr) {
   13f32:	681a      	ldr	r2, [r3, #0]
	*((uint8_t *)rx->pdu) = reason;
   13f34:	f880 10f0 	strb.w	r1, [r0, #240]	; 0xf0
	if (conn == conn_upd_curr) {
   13f38:	4290      	cmp	r0, r2
		conn_upd_curr = NULL;
   13f3a:	bf04      	itt	eq
   13f3c:	2200      	moveq	r2, #0
   13f3e:	601a      	streq	r2, [r3, #0]
	rx->hdr.handle = conn->lll.handle;
   13f40:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   13f42:	f8a0 30da 	strh.w	r3, [r0, #218]	; 0xda
	rx = conn->llcp_rx;
   13f46:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   13f4a:	2317      	movs	r3, #23
{
   13f4c:	4604      	mov	r4, r0
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   13f4e:	f880 30d8 	strb.w	r3, [r0, #216]	; 0xd8
		hdr->type = NODE_RX_TYPE_RELEASE;
   13f52:	2501      	movs	r5, #1
	while (rx) {
   13f54:	bb49      	cbnz	r1, 13faa <conn_cleanup+0x7e>
		link = mem_acquire(&mem_link_tx.free);
   13f56:	4f34      	ldr	r7, [pc, #208]	; (14028 <conn_cleanup+0xfc>)
		LL_ASSERT(link);
   13f58:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 1402c <conn_cleanup+0x100>
   13f5c:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 14030 <conn_cleanup+0x104>
	while (conn->tx_head) {
   13f60:	f8d4 511c 	ldr.w	r5, [r4, #284]	; 0x11c
   13f64:	bb45      	cbnz	r5, 13fb8 <conn_cleanup+0x8c>
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   13f66:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   13f68:	4b32      	ldr	r3, [pc, #200]	; (14034 <conn_cleanup+0x108>)
   13f6a:	9400      	str	r4, [sp, #0]
   13f6c:	3205      	adds	r2, #5
   13f6e:	b2d2      	uxtb	r2, r2
   13f70:	2101      	movs	r1, #1
   13f72:	4628      	mov	r0, r5
   13f74:	f7fc fca6 	bl	108c4 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   13f78:	f030 0302 	bics.w	r3, r0, #2
   13f7c:	d00c      	beq.n	13f98 <conn_cleanup+0x6c>
   13f7e:	4a2b      	ldr	r2, [pc, #172]	; (1402c <conn_cleanup+0x100>)
   13f80:	492d      	ldr	r1, [pc, #180]	; (14038 <conn_cleanup+0x10c>)
   13f82:	482e      	ldr	r0, [pc, #184]	; (1403c <conn_cleanup+0x110>)
   13f84:	f640 1323 	movw	r3, #2339	; 0x923
   13f88:	f008 f99e 	bl	1c2c8 <printk>
   13f8c:	4040      	eors	r0, r0
   13f8e:	f380 8811 	msr	BASEPRI, r0
   13f92:	f04f 0003 	mov.w	r0, #3
   13f96:	df02      	svc	2
	lll->handle = LLL_HANDLE_INVALID;
   13f98:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ull_conn_tx_demux(UINT8_MAX);
   13f9c:	20ff      	movs	r0, #255	; 0xff
	lll->handle = LLL_HANDLE_INVALID;
   13f9e:	8523      	strh	r3, [r4, #40]	; 0x28
}
   13fa0:	b003      	add	sp, #12
   13fa2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	ull_conn_tx_demux(UINT8_MAX);
   13fa6:	f7ff bf81 	b.w	13eac <ull_conn_tx_demux>
		rx = hdr->link->mem;
   13faa:	6808      	ldr	r0, [r1, #0]
   13fac:	6846      	ldr	r6, [r0, #4]
		hdr->type = NODE_RX_TYPE_RELEASE;
   13fae:	710d      	strb	r5, [r1, #4]
		ll_rx_put(hdr->link, hdr);
   13fb0:	f7fd ff06 	bl	11dc0 <ll_rx_put>
		rx = hdr->link->mem;
   13fb4:	4631      	mov	r1, r6
   13fb6:	e7cd      	b.n	13f54 <conn_cleanup+0x28>
	if (conn->tx_head == conn->tx_ctrl) {
   13fb8:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
		conn->tx_head = conn->tx_head->next;
   13fbc:	682b      	ldr	r3, [r5, #0]
	if (conn->tx_head == conn->tx_ctrl) {
   13fbe:	4295      	cmp	r5, r2
   13fc0:	d124      	bne.n	1400c <conn_cleanup+0xe0>
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   13fc2:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
		conn->tx_head = conn->tx_head->next;
   13fc6:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   13fca:	4295      	cmp	r5, r2
			conn->tx_ctrl = NULL;
   13fcc:	bf06      	itte	eq
   13fce:	2300      	moveq	r3, #0
			conn->tx_ctrl_last = NULL;
   13fd0:	e9c4 3348 	strdeq	r3, r3, [r4, #288]	; 0x120
			conn->tx_ctrl = conn->tx_head;
   13fd4:	f8c4 3120 	strne.w	r3, [r4, #288]	; 0x120
		tx->next = tx;
   13fd8:	602d      	str	r5, [r5, #0]
		link = mem_acquire(&mem_link_tx.free);
   13fda:	4638      	mov	r0, r7
   13fdc:	f00f fbfc 	bl	237d8 <mem_acquire>
		LL_ASSERT(link);
   13fe0:	4606      	mov	r6, r0
   13fe2:	b960      	cbnz	r0, 13ffe <conn_cleanup+0xd2>
   13fe4:	4815      	ldr	r0, [pc, #84]	; (1403c <conn_cleanup+0x110>)
   13fe6:	f640 135e 	movw	r3, #2398	; 0x95e
   13fea:	4642      	mov	r2, r8
   13fec:	4649      	mov	r1, r9
   13fee:	f008 f96b 	bl	1c2c8 <printk>
   13ff2:	4040      	eors	r0, r0
   13ff4:	f380 8811 	msr	BASEPRI, r0
   13ff8:	f04f 0003 	mov.w	r0, #3
   13ffc:	df02      	svc	2
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   13ffe:	f104 025c 	add.w	r2, r4, #92	; 0x5c
   14002:	4629      	mov	r1, r5
   14004:	4630      	mov	r0, r6
   14006:	f00f fc45 	bl	23894 <memq_enqueue>
   1400a:	e7a9      	b.n	13f60 <conn_cleanup+0x34>
		if (conn->tx_head == conn->tx_data) {
   1400c:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
		conn->tx_head = conn->tx_head->next;
   14010:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
		if (conn->tx_head == conn->tx_data) {
   14014:	4295      	cmp	r5, r2
			conn->tx_data = conn->tx_data->next;
   14016:	bf08      	it	eq
   14018:	f8c4 3128 	streq.w	r3, [r4, #296]	; 0x128
		tx->next = NULL;
   1401c:	2300      	movs	r3, #0
   1401e:	602b      	str	r3, [r5, #0]
   14020:	e7db      	b.n	13fda <conn_cleanup+0xae>
   14022:	bf00      	nop
   14024:	20002f30 	.word	0x20002f30
   14028:	20003078 	.word	0x20003078
   1402c:	00027c2d 	.word	0x00027c2d
   14030:	00027d05 	.word	0x00027d05
   14034:	00013109 	.word	0x00013109
   14038:	00027d0a 	.word	0x00027d0a
   1403c:	00027514 	.word	0x00027514

00014040 <ull_conn_done>:
{
   14040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	conn = CONTAINER_OF(done->param, struct ll_conn, ull);
   14044:	69c4      	ldr	r4, [r0, #28]
	if (unlikely(lll->handle == LLL_HANDLE_INVALID)) {
   14046:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   14048:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1404c:	429a      	cmp	r2, r3
{
   1404e:	b08a      	sub	sp, #40	; 0x28
   14050:	4680      	mov	r8, r0
	if (unlikely(lll->handle == LLL_HANDLE_INVALID)) {
   14052:	f000 80ba 	beq.w	141ca <ull_conn_done+0x18a>
	reason_final = conn->llcp_terminate.reason_final;
   14056:	f894 50d3 	ldrb.w	r5, [r4, #211]	; 0xd3
	if (reason_final && (
   1405a:	b135      	cbz	r5, 1406a <ull_conn_done+0x2a>
		conn_cleanup(conn, reason_final);
   1405c:	4629      	mov	r1, r5
   1405e:	4620      	mov	r0, r4
}
   14060:	b00a      	add	sp, #40	; 0x28
   14062:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		conn_cleanup(conn, reason_final);
   14066:	f7ff bf61 	b.w	13f2c <conn_cleanup>
	latency_event = lll->latency_event;
   1406a:	8e27      	ldrh	r7, [r4, #48]	; 0x30
	if (done->extra.trx_cnt) {
   1406c:	8c83      	ldrh	r3, [r0, #36]	; 0x24
	elapsed_event = latency_event + 1;
   1406e:	1c7e      	adds	r6, r7, #1
	ticks_drift_minus = 0U;
   14070:	e9cd 5508 	strd	r5, r5, [sp, #32]
	elapsed_event = latency_event + 1;
   14074:	b2b6      	uxth	r6, r6
	if (done->extra.trx_cnt) {
   14076:	b17b      	cbz	r3, 14098 <ull_conn_done+0x58>
		} else if (lll->role) {
   14078:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1407c:	2b00      	cmp	r3, #0
   1407e:	da08      	bge.n	14092 <ull_conn_done+0x52>
			ull_drift_ticks_get(done, &ticks_drift_plus,
   14080:	aa08      	add	r2, sp, #32
   14082:	a909      	add	r1, sp, #36	; 0x24
   14084:	f7ed fb78 	bl	1778 <ull_drift_ticks_get>
			if (!conn->tx_head) {
   14088:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   1408c:	b163      	cbz	r3, 140a8 <ull_conn_done+0x68>
				lll->latency_event = 0;
   1408e:	2300      	movs	r3, #0
				lll->latency_event = lll->latency;
   14090:	8623      	strh	r3, [r4, #48]	; 0x30
		conn->connect_expire = 0U;
   14092:	2300      	movs	r3, #0
   14094:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
	if (done->extra.crc_valid) {
   14098:	f898 3026 	ldrb.w	r3, [r8, #38]	; 0x26
   1409c:	07db      	lsls	r3, r3, #31
   1409e:	d517      	bpl.n	140d0 <ull_conn_done+0x90>
		conn->supervision_expire = 0U;
   140a0:	2300      	movs	r3, #0
			conn->supervision_expire = conn->supervision_reload;
   140a2:	f8a4 3074 	strh.w	r3, [r4, #116]	; 0x74
   140a6:	e01c      	b.n	140e2 <ull_conn_done+0xa2>
				ull_conn_tx_demux(UINT8_MAX);
   140a8:	20ff      	movs	r0, #255	; 0xff
   140aa:	f7ff feff 	bl	13eac <ull_conn_tx_demux>
			if (conn->tx_head || memq_peek(lll->memq_tx.head,
   140ae:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   140b2:	2b00      	cmp	r3, #0
   140b4:	d1eb      	bne.n	1408e <ull_conn_done+0x4e>
   140b6:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
   140ba:	462a      	mov	r2, r5
   140bc:	f00f fbf1 	bl	238a2 <memq_peek>
   140c0:	2800      	cmp	r0, #0
   140c2:	d1e4      	bne.n	1408e <ull_conn_done+0x4e>
			} else if (lll->periph.latency_enabled) {
   140c4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   140c8:	075a      	lsls	r2, r3, #29
   140ca:	d5e2      	bpl.n	14092 <ull_conn_done+0x52>
				lll->latency_event = lll->latency;
   140cc:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   140ce:	e7df      	b.n	14090 <ull_conn_done+0x50>
	else if (conn->connect_expire) {
   140d0:	f8b4 3070 	ldrh.w	r3, [r4, #112]	; 0x70
   140d4:	2b00      	cmp	r3, #0
   140d6:	d07b      	beq.n	141d0 <ull_conn_done+0x190>
		if (conn->connect_expire > elapsed_event) {
   140d8:	42b3      	cmp	r3, r6
   140da:	d972      	bls.n	141c2 <ull_conn_done+0x182>
			conn->connect_expire -= elapsed_event;
   140dc:	1b9b      	subs	r3, r3, r6
   140de:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
	if (conn->supervision_expire) {
   140e2:	f8b4 3074 	ldrh.w	r3, [r4, #116]	; 0x74
   140e6:	b1e3      	cbz	r3, 14122 <ull_conn_done+0xe2>
		if (conn->supervision_expire > elapsed_event) {
   140e8:	42b3      	cmp	r3, r6
   140ea:	d978      	bls.n	141de <ull_conn_done+0x19e>
			conn->supervision_expire -= elapsed_event;
   140ec:	1b9b      	subs	r3, r3, r6
   140ee:	b29b      	uxth	r3, r3
			lll->latency_event = 0U;
   140f0:	2200      	movs	r2, #0
			if (conn->supervision_expire <= 6U) {
   140f2:	2b06      	cmp	r3, #6
			conn->supervision_expire -= elapsed_event;
   140f4:	f8a4 3074 	strh.w	r3, [r4, #116]	; 0x74
			lll->latency_event = 0U;
   140f8:	8622      	strh	r2, [r4, #48]	; 0x30
			if (conn->supervision_expire <= 6U) {
   140fa:	d972      	bls.n	141e2 <ull_conn_done+0x1a2>
			else if (lll->role) {
   140fc:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   14100:	4293      	cmp	r3, r2
   14102:	da0e      	bge.n	14122 <ull_conn_done+0xe2>
				if (latency_event) {
   14104:	2f00      	cmp	r7, #0
   14106:	d16c      	bne.n	141e2 <ull_conn_done+0x1a2>
					force = conn->periph.force & 0x01;
   14108:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
					conn->periph.force >>= 1U;
   1410c:	085a      	lsrs	r2, r3, #1
					if (force) {
   1410e:	f013 0301 	ands.w	r3, r3, #1
						conn->periph.force |= BIT(31);
   14112:	bf17      	itett	ne
   14114:	f042 4200 	orrne.w	r2, r2, #2147483648	; 0x80000000
					conn->periph.force >>= 1U;
   14118:	f8c4 2080 	streq.w	r2, [r4, #128]	; 0x80
						conn->periph.force |= BIT(31);
   1411c:	f8c4 2080 	strne.w	r2, [r4, #128]	; 0x80
					force = conn->periph.force & 0x01;
   14120:	461d      	movne	r5, r3
	if (conn->procedure_expire != 0U) {
   14122:	f8b4 3078 	ldrh.w	r3, [r4, #120]	; 0x78
   14126:	b123      	cbz	r3, 14132 <ull_conn_done+0xf2>
		if (conn->procedure_expire > elapsed_event) {
   14128:	42b3      	cmp	r3, r6
   1412a:	d95c      	bls.n	141e6 <ull_conn_done+0x1a6>
			conn->procedure_expire -= elapsed_event;
   1412c:	1b9b      	subs	r3, r3, r6
   1412e:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   14132:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
   14136:	f894 2089 	ldrb.w	r2, [r4, #137]	; 0x89
   1413a:	1a9b      	subs	r3, r3, r2
   1413c:	f003 0303 	and.w	r3, r3, #3
   14140:	2b02      	cmp	r3, #2
   14142:	d104      	bne.n	1414e <ull_conn_done+0x10e>
	     ((conn->llcp_type == LLCP_CONN_UPD) ||
   14144:	f894 308a 	ldrb.w	r3, [r4, #138]	; 0x8a
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   14148:	3b01      	subs	r3, #1
   1414a:	2b01      	cmp	r3, #1
   1414c:	d905      	bls.n	1415a <ull_conn_done+0x11a>
	      (conn->llcp_type == LLCP_CHAN_MAP))) ||
   1414e:	f894 209c 	ldrb.w	r2, [r4, #156]	; 0x9c
   14152:	f894 309d 	ldrb.w	r3, [r4, #157]	; 0x9d
   14156:	429a      	cmp	r2, r3
   14158:	d001      	beq.n	1415e <ull_conn_done+0x11e>
		lll->latency_event = 0U;
   1415a:	2300      	movs	r3, #0
   1415c:	8623      	strh	r3, [r4, #48]	; 0x30
	if ((force) || (latency_event != lll->latency_event)) {
   1415e:	8e21      	ldrh	r1, [r4, #48]	; 0x30
   14160:	b90d      	cbnz	r5, 14166 <ull_conn_done+0x126>
   14162:	428f      	cmp	r7, r1
   14164:	d041      	beq.n	141ea <ull_conn_done+0x1aa>
		lazy = lll->latency_event + 1U;
   14166:	3101      	adds	r1, #1
   14168:	b289      	uxth	r1, r1
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   1416a:	e9dd 7308 	ldrd	r7, r3, [sp, #32]
   1416e:	ea53 0207 	orrs.w	r2, r3, r7
   14172:	d101      	bne.n	14178 <ull_conn_done+0x138>
   14174:	b901      	cbnz	r1, 14178 <ull_conn_done+0x138>
   14176:	b345      	cbz	r5, 141ca <ull_conn_done+0x18a>
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   14178:	8d22      	ldrh	r2, [r4, #40]	; 0x28
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1417a:	481d      	ldr	r0, [pc, #116]	; (141f0 <ull_conn_done+0x1b0>)
		struct ll_conn *conn = lll->hdr.parent;
   1417c:	69e6      	ldr	r6, [r4, #28]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1417e:	9606      	str	r6, [sp, #24]
   14180:	e9cd 5004 	strd	r5, r0, [sp, #16]
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   14184:	3205      	adds	r2, #5
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   14186:	2000      	movs	r0, #0
   14188:	9103      	str	r1, [sp, #12]
   1418a:	e9cd 0001 	strd	r0, r0, [sp, #4]
   1418e:	9700      	str	r7, [sp, #0]
   14190:	b2d2      	uxtb	r2, r2
   14192:	2101      	movs	r1, #1
   14194:	f00f fe2c 	bl	23df0 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14198:	f030 0302 	bics.w	r3, r0, #2
   1419c:	d015      	beq.n	141ca <ull_conn_done+0x18a>
   1419e:	f7fd ff59 	bl	12054 <ull_disable_mark_get>
   141a2:	4286      	cmp	r6, r0
   141a4:	d011      	beq.n	141ca <ull_conn_done+0x18a>
   141a6:	4a13      	ldr	r2, [pc, #76]	; (141f4 <ull_conn_done+0x1b4>)
   141a8:	4913      	ldr	r1, [pc, #76]	; (141f8 <ull_conn_done+0x1b8>)
   141aa:	4814      	ldr	r0, [pc, #80]	; (141fc <ull_conn_done+0x1bc>)
   141ac:	f240 63cd 	movw	r3, #1741	; 0x6cd
   141b0:	f008 f88a 	bl	1c2c8 <printk>
   141b4:	4040      	eors	r0, r0
   141b6:	f380 8811 	msr	BASEPRI, r0
   141ba:	f04f 0003 	mov.w	r0, #3
   141be:	df02      	svc	2
   141c0:	e003      	b.n	141ca <ull_conn_done+0x18a>
			conn_cleanup(conn, BT_HCI_ERR_CONN_FAIL_TO_ESTAB);
   141c2:	213e      	movs	r1, #62	; 0x3e
			conn_cleanup(conn, BT_HCI_ERR_CONN_TIMEOUT);
   141c4:	4620      	mov	r0, r4
   141c6:	f7ff feb1 	bl	13f2c <conn_cleanup>
}
   141ca:	b00a      	add	sp, #40	; 0x28
   141cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!conn->supervision_expire) {
   141d0:	f8b4 3074 	ldrh.w	r3, [r4, #116]	; 0x74
   141d4:	2b00      	cmp	r3, #0
   141d6:	d184      	bne.n	140e2 <ull_conn_done+0xa2>
			conn->supervision_expire = conn->supervision_reload;
   141d8:	f8b4 3072 	ldrh.w	r3, [r4, #114]	; 0x72
   141dc:	e761      	b.n	140a2 <ull_conn_done+0x62>
			conn_cleanup(conn, BT_HCI_ERR_CONN_TIMEOUT);
   141de:	2108      	movs	r1, #8
   141e0:	e7f0      	b.n	141c4 <ull_conn_done+0x184>
				force = 1U;
   141e2:	2501      	movs	r5, #1
   141e4:	e79d      	b.n	14122 <ull_conn_done+0xe2>
			conn_cleanup(conn, BT_HCI_ERR_LL_RESP_TIMEOUT);
   141e6:	2122      	movs	r1, #34	; 0x22
   141e8:	e7ec      	b.n	141c4 <ull_conn_done+0x184>
	lazy = 0U;
   141ea:	4629      	mov	r1, r5
   141ec:	e7bd      	b.n	1416a <ull_conn_done+0x12a>
   141ee:	bf00      	nop
   141f0:	00013319 	.word	0x00013319
   141f4:	00027c2d 	.word	0x00027c2d
   141f8:	00027d37 	.word	0x00027d37
   141fc:	00027514 	.word	0x00027514

00014200 <ull_conn_tx_lll_enqueue>:
{
   14200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		link = mem_acquire(&mem_link_tx.free);
   14204:	f8df 8088 	ldr.w	r8, [pc, #136]	; 14290 <ull_conn_tx_lll_enqueue+0x90>
		LL_ASSERT(link);
   14208:	f8df 9088 	ldr.w	r9, [pc, #136]	; 14294 <ull_conn_tx_lll_enqueue+0x94>
   1420c:	f8df a088 	ldr.w	sl, [pc, #136]	; 14298 <ull_conn_tx_lll_enqueue+0x98>
{
   14210:	4604      	mov	r4, r0
   14212:	460e      	mov	r6, r1
	while (conn->tx_head &&
   14214:	f8d4 511c 	ldr.w	r5, [r4, #284]	; 0x11c
   14218:	b105      	cbz	r5, 1421c <ull_conn_tx_lll_enqueue+0x1c>
		(!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
   1421a:	b90e      	cbnz	r6, 14220 <ull_conn_tx_lll_enqueue+0x20>
}
   1421c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (conn->tx_head == conn->tx_ctrl) {
   14220:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
		conn->tx_head = conn->tx_head->next;
   14224:	682b      	ldr	r3, [r5, #0]
	if (conn->tx_head == conn->tx_ctrl) {
   14226:	4295      	cmp	r5, r2
   14228:	d126      	bne.n	14278 <ull_conn_tx_lll_enqueue+0x78>
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   1422a:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
		conn->tx_head = conn->tx_head->next;
   1422e:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   14232:	4295      	cmp	r5, r2
			conn->tx_ctrl = NULL;
   14234:	bf06      	itte	eq
   14236:	2300      	moveq	r3, #0
			conn->tx_ctrl_last = NULL;
   14238:	e9c4 3348 	strdeq	r3, r3, [r4, #288]	; 0x120
			conn->tx_ctrl = conn->tx_head;
   1423c:	f8c4 3120 	strne.w	r3, [r4, #288]	; 0x120
		tx->next = tx;
   14240:	602d      	str	r5, [r5, #0]
		link = mem_acquire(&mem_link_tx.free);
   14242:	4640      	mov	r0, r8
   14244:	f00f fac8 	bl	237d8 <mem_acquire>
		LL_ASSERT(link);
   14248:	4607      	mov	r7, r0
   1424a:	b960      	cbnz	r0, 14266 <ull_conn_tx_lll_enqueue+0x66>
   1424c:	4813      	ldr	r0, [pc, #76]	; (1429c <ull_conn_tx_lll_enqueue+0x9c>)
   1424e:	f240 7326 	movw	r3, #1830	; 0x726
   14252:	464a      	mov	r2, r9
   14254:	4651      	mov	r1, sl
   14256:	f008 f837 	bl	1c2c8 <printk>
   1425a:	4040      	eors	r0, r0
   1425c:	f380 8811 	msr	BASEPRI, r0
   14260:	f04f 0003 	mov.w	r0, #3
   14264:	df02      	svc	2
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   14266:	f104 025c 	add.w	r2, r4, #92	; 0x5c
   1426a:	4629      	mov	r1, r5
   1426c:	4638      	mov	r0, r7
   1426e:	3e01      	subs	r6, #1
   14270:	f00f fb10 	bl	23894 <memq_enqueue>
   14274:	b2f6      	uxtb	r6, r6
   14276:	e7cd      	b.n	14214 <ull_conn_tx_lll_enqueue+0x14>
		if (conn->tx_head == conn->tx_data) {
   14278:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
		conn->tx_head = conn->tx_head->next;
   1427c:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
		if (conn->tx_head == conn->tx_data) {
   14280:	4295      	cmp	r5, r2
			conn->tx_data = conn->tx_data->next;
   14282:	bf08      	it	eq
   14284:	f8c4 3128 	streq.w	r3, [r4, #296]	; 0x128
		tx->next = NULL;
   14288:	2300      	movs	r3, #0
   1428a:	602b      	str	r3, [r5, #0]
   1428c:	e7d9      	b.n	14242 <ull_conn_tx_lll_enqueue+0x42>
   1428e:	bf00      	nop
   14290:	20003078 	.word	0x20003078
   14294:	00027c2d 	.word	0x00027c2d
   14298:	00027d05 	.word	0x00027d05
   1429c:	00027514 	.word	0x00027514

000142a0 <ull_conn_link_tx_release>:
	mem_release(link, &mem_link_tx.free);
   142a0:	4901      	ldr	r1, [pc, #4]	; (142a8 <ull_conn_link_tx_release+0x8>)
   142a2:	f00f bab2 	b.w	2380a <mem_release>
   142a6:	bf00      	nop
   142a8:	20003078 	.word	0x20003078

000142ac <ull_conn_ack_last_idx_get>:
}
   142ac:	4b01      	ldr	r3, [pc, #4]	; (142b4 <ull_conn_ack_last_idx_get+0x8>)
   142ae:	78d8      	ldrb	r0, [r3, #3]
   142b0:	4770      	bx	lr
   142b2:	bf00      	nop
   142b4:	20000afc 	.word	0x20000afc

000142b8 <ull_conn_ack_peek>:
{
   142b8:	b570      	push	{r4, r5, r6, lr}
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
   142ba:	4b09      	ldr	r3, [pc, #36]	; (142e0 <ull_conn_ack_peek+0x28>)
   142bc:	789c      	ldrb	r4, [r3, #2]
   142be:	78dd      	ldrb	r5, [r3, #3]
   142c0:	781e      	ldrb	r6, [r3, #0]
	if (first == last) {
   142c2:	42ac      	cmp	r4, r5
   142c4:	d00a      	beq.n	142dc <ull_conn_ack_peek+0x24>
	return (void *)(fifo + first * size);
   142c6:	3304      	adds	r3, #4
   142c8:	fb14 f406 	smulbb	r4, r4, r6
	*ack_last = mfifo_conn_ack.l;
   142cc:	7005      	strb	r5, [r0, #0]
   142ce:	191e      	adds	r6, r3, r4
	*handle = lll_tx->handle;
   142d0:	5b1b      	ldrh	r3, [r3, r4]
   142d2:	800b      	strh	r3, [r1, #0]
	*tx = lll_tx->node;
   142d4:	6873      	ldr	r3, [r6, #4]
   142d6:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   142d8:	6818      	ldr	r0, [r3, #0]
}
   142da:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   142dc:	2000      	movs	r0, #0
   142de:	e7fc      	b.n	142da <ull_conn_ack_peek+0x22>
   142e0:	20000afc 	.word	0x20000afc

000142e4 <ull_conn_ack_by_last_peek>:
{
   142e4:	b530      	push	{r4, r5, lr}
	lll_tx = mfifo_dequeue_get(mfifo_conn_ack.m, mfifo_conn_ack.s,
   142e6:	4b08      	ldr	r3, [pc, #32]	; (14308 <ull_conn_ack_by_last_peek+0x24>)
   142e8:	789c      	ldrb	r4, [r3, #2]
   142ea:	781d      	ldrb	r5, [r3, #0]
	if (first == last) {
   142ec:	4284      	cmp	r4, r0
   142ee:	d009      	beq.n	14304 <ull_conn_ack_by_last_peek+0x20>
	return (void *)(fifo + first * size);
   142f0:	3304      	adds	r3, #4
   142f2:	fb14 f405 	smulbb	r4, r4, r5
   142f6:	1918      	adds	r0, r3, r4
	*handle = lll_tx->handle;
   142f8:	5b1b      	ldrh	r3, [r3, r4]
   142fa:	800b      	strh	r3, [r1, #0]
	*tx = lll_tx->node;
   142fc:	6843      	ldr	r3, [r0, #4]
   142fe:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   14300:	6818      	ldr	r0, [r3, #0]
}
   14302:	bd30      	pop	{r4, r5, pc}
		return NULL;
   14304:	2000      	movs	r0, #0
   14306:	e7fc      	b.n	14302 <ull_conn_ack_by_last_peek+0x1e>
   14308:	20000afc 	.word	0x20000afc

0001430c <ull_conn_ack_dequeue>:
{
   1430c:	b510      	push	{r4, lr}
	return MFIFO_DEQUEUE(conn_ack);
   1430e:	4a09      	ldr	r2, [pc, #36]	; (14334 <ull_conn_ack_dequeue+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   14310:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
   14312:	78d0      	ldrb	r0, [r2, #3]
   14314:	7811      	ldrb	r1, [r2, #0]
   14316:	7854      	ldrb	r4, [r2, #1]
   14318:	4298      	cmp	r0, r3
   1431a:	d009      	beq.n	14330 <ull_conn_ack_dequeue+0x24>
	mem = *((void **)(fifo + _first * size));
   1431c:	fb03 2101 	mla	r1, r3, r1, r2
	_first += 1U;
   14320:	3301      	adds	r3, #1
   14322:	b2db      	uxtb	r3, r3
		_first = 0U;
   14324:	429c      	cmp	r4, r3
   14326:	bf08      	it	eq
   14328:	2300      	moveq	r3, #0
	mem = *((void **)(fifo + _first * size));
   1432a:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   1432c:	7093      	strb	r3, [r2, #2]
}
   1432e:	bd10      	pop	{r4, pc}
		return NULL;
   14330:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(conn_ack);
   14332:	e7fc      	b.n	1432e <ull_conn_ack_dequeue+0x22>
   14334:	20000afc 	.word	0x20000afc

00014338 <ull_conn_lll_ack_enqueue>:
{
   14338:	b570      	push	{r4, r5, r6, lr}
	idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   1433a:	4a12      	ldr	r2, [pc, #72]	; (14384 <ull_conn_lll_ack_enqueue+0x4c>)
   1433c:	78d6      	ldrb	r6, [r2, #3]
	if (last == count) {
   1433e:	7855      	ldrb	r5, [r2, #1]
   14340:	7894      	ldrb	r4, [r2, #2]
	last = last + 1;
   14342:	1c73      	adds	r3, r6, #1
   14344:	b2db      	uxtb	r3, r3
		last = 0U;
   14346:	429d      	cmp	r5, r3
   14348:	bf08      	it	eq
   1434a:	2300      	moveq	r3, #0
	if (last == first) {
   1434c:	429c      	cmp	r4, r3
   1434e:	d10f      	bne.n	14370 <ull_conn_lll_ack_enqueue+0x38>
	LL_ASSERT(lll_tx);
   14350:	4a0d      	ldr	r2, [pc, #52]	; (14388 <ull_conn_lll_ack_enqueue+0x50>)
   14352:	490e      	ldr	r1, [pc, #56]	; (1438c <ull_conn_lll_ack_enqueue+0x54>)
   14354:	480e      	ldr	r0, [pc, #56]	; (14390 <ull_conn_lll_ack_enqueue+0x58>)
   14356:	f240 7376 	movw	r3, #1910	; 0x776
   1435a:	f007 ffb5 	bl	1c2c8 <printk>
   1435e:	4040      	eors	r0, r0
   14360:	f380 8811 	msr	BASEPRI, r0
   14364:	f04f 0003 	mov.w	r0, #3
   14368:	df02      	svc	2
	lll_tx->handle = handle;
   1436a:	2300      	movs	r3, #0
   1436c:	801b      	strh	r3, [r3, #0]
   1436e:	deff      	udf	#255	; 0xff
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   14370:	4615      	mov	r5, r2
   14372:	f815 4b04 	ldrb.w	r4, [r5], #4
   14376:	fb14 f406 	smulbb	r4, r4, r6
   1437a:	192e      	adds	r6, r5, r4
   1437c:	5328      	strh	r0, [r5, r4]
	lll_tx->node = tx;
   1437e:	6071      	str	r1, [r6, #4]
	*last = idx; /* Commit: Update write index */
   14380:	70d3      	strb	r3, [r2, #3]
}
   14382:	bd70      	pop	{r4, r5, r6, pc}
   14384:	20000afc 	.word	0x20000afc
   14388:	00027c2d 	.word	0x00027c2d
   1438c:	00027cc9 	.word	0x00027cc9
   14390:	00027514 	.word	0x00027514

00014394 <ull_conn_tx_ack>:
{
   14394:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(pdu_tx->len);
   14396:	7953      	ldrb	r3, [r2, #5]
{
   14398:	4605      	mov	r5, r0
   1439a:	460e      	mov	r6, r1
   1439c:	4614      	mov	r4, r2
	LL_ASSERT(pdu_tx->len);
   1439e:	b963      	cbnz	r3, 143ba <ull_conn_tx_ack+0x26>
   143a0:	4a2c      	ldr	r2, [pc, #176]	; (14454 <ull_conn_tx_ack+0xc0>)
   143a2:	492d      	ldr	r1, [pc, #180]	; (14458 <ull_conn_tx_ack+0xc4>)
   143a4:	482d      	ldr	r0, [pc, #180]	; (1445c <ull_conn_tx_ack+0xc8>)
   143a6:	f240 7383 	movw	r3, #1923	; 0x783
   143aa:	f007 ff8d 	bl	1c2c8 <printk>
   143ae:	4040      	eors	r0, r0
   143b0:	f380 8811 	msr	BASEPRI, r0
   143b4:	f04f 0003 	mov.w	r0, #3
   143b8:	df02      	svc	2
	if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   143ba:	7923      	ldrb	r3, [r4, #4]
   143bc:	f003 0203 	and.w	r2, r3, #3
   143c0:	2a03      	cmp	r2, #3
   143c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   143c6:	d13e      	bne.n	14446 <ull_conn_tx_ack+0xb2>
		if (handle != LLL_HANDLE_INVALID) {
   143c8:	4295      	cmp	r5, r2
   143ca:	d008      	beq.n	143de <ull_conn_tx_ack+0x4a>
			struct ll_conn *conn = ll_conn_get(handle);
   143cc:	4628      	mov	r0, r5
   143ce:	f7ff f851 	bl	13474 <ll_conn_get>
	switch (pdu_tx->llctrl.opcode) {
   143d2:	79e3      	ldrb	r3, [r4, #7]
   143d4:	2b07      	cmp	r3, #7
   143d6:	d00f      	beq.n	143f8 <ull_conn_tx_ack+0x64>
   143d8:	d80a      	bhi.n	143f0 <ull_conn_tx_ack+0x5c>
   143da:	2b02      	cmp	r3, #2
   143dc:	d013      	beq.n	14406 <ull_conn_tx_ack+0x72>
		if (link->next == (void *)tx) {
   143de:	6833      	ldr	r3, [r6, #0]
   143e0:	42a3      	cmp	r3, r4
   143e2:	d11c      	bne.n	1441e <ull_conn_tx_ack+0x8a>
			mem_release(tx, &mem_conn_tx_ctrl.free);
   143e4:	4620      	mov	r0, r4
   143e6:	491e      	ldr	r1, [pc, #120]	; (14460 <ull_conn_tx_ack+0xcc>)
}
   143e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			mem_release(tx, &mem_conn_tx_ctrl.free);
   143ec:	f00f ba0d 	b.w	2380a <mem_release>
	switch (pdu_tx->llctrl.opcode) {
   143f0:	2b09      	cmp	r3, #9
   143f2:	d001      	beq.n	143f8 <ull_conn_tx_ack+0x64>
   143f4:	2b13      	cmp	r3, #19
   143f6:	d1f2      	bne.n	143de <ull_conn_tx_ack+0x4a>
		conn->common.txn_lock = 0U;
   143f8:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
   143fc:	f36f 0341 	bfc	r3, #1, #1
   14400:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
		break;
   14404:	e7eb      	b.n	143de <ull_conn_tx_ack+0x4a>
		if (pdu_tx->llctrl.terminate_ind.error_code ==
   14406:	7a23      	ldrb	r3, [r4, #8]
			conn->llcp_terminate.reason_final =
   14408:	2b13      	cmp	r3, #19
   1440a:	bf08      	it	eq
   1440c:	2316      	moveq	r3, #22
   1440e:	f880 30d3 	strb.w	r3, [r0, #211]	; 0xd3
		conn->llcp_terminate.ack--;
   14412:	f890 30d1 	ldrb.w	r3, [r0, #209]	; 0xd1
   14416:	3b01      	subs	r3, #1
   14418:	f880 30d1 	strb.w	r3, [r0, #209]	; 0xd1
	break;
   1441c:	e7df      	b.n	143de <ull_conn_tx_ack+0x4a>
		LL_ASSERT(!link->next);
   1441e:	b163      	cbz	r3, 1443a <ull_conn_tx_ack+0xa6>
   14420:	4a0c      	ldr	r2, [pc, #48]	; (14454 <ull_conn_tx_ack+0xc0>)
   14422:	4910      	ldr	r1, [pc, #64]	; (14464 <ull_conn_tx_ack+0xd0>)
   14424:	480d      	ldr	r0, [pc, #52]	; (1445c <ull_conn_tx_ack+0xc8>)
   14426:	f44f 63f4 	mov.w	r3, #1952	; 0x7a0
   1442a:	f007 ff4d 	bl	1c2c8 <printk>
   1442e:	4040      	eors	r0, r0
   14430:	f380 8811 	msr	BASEPRI, r0
   14434:	f04f 0003 	mov.w	r0, #3
   14438:	df02      	svc	2
	ll_tx_ack_put(handle, tx);
   1443a:	4621      	mov	r1, r4
   1443c:	4628      	mov	r0, r5
}
   1443e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ll_tx_ack_put(handle, tx);
   14442:	f7fd bd7f 	b.w	11f44 <ll_tx_ack_put>
	} else if (handle == LLL_HANDLE_INVALID) {
   14446:	4295      	cmp	r5, r2
		pdu_tx->ll_id = PDU_DATA_LLID_RESV;
   14448:	bf04      	itt	eq
   1444a:	f36f 0301 	bfceq	r3, #0, #2
   1444e:	7123      	strbeq	r3, [r4, #4]
   14450:	e7f3      	b.n	1443a <ull_conn_tx_ack+0xa6>
   14452:	bf00      	nop
   14454:	00027c2d 	.word	0x00027c2d
   14458:	00027d90 	.word	0x00027d90
   1445c:	00027514 	.word	0x00027514
   14460:	20002fc4 	.word	0x20002fc4
   14464:	00027d9c 	.word	0x00027d9c

00014468 <ticker_update_latency_cancel_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
}

static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *param)
{
   14468:	b510      	push	{r4, lr}
   1446a:	460c      	mov	r4, r1
	struct ll_conn *conn = param;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   1446c:	b160      	cbz	r0, 14488 <ticker_update_latency_cancel_op_cb+0x20>
   1446e:	4a0a      	ldr	r2, [pc, #40]	; (14498 <ticker_update_latency_cancel_op_cb+0x30>)
   14470:	490a      	ldr	r1, [pc, #40]	; (1449c <ticker_update_latency_cancel_op_cb+0x34>)
   14472:	480b      	ldr	r0, [pc, #44]	; (144a0 <ticker_update_latency_cancel_op_cb+0x38>)
   14474:	f240 23af 	movw	r3, #687	; 0x2af
   14478:	f007 ff26 	bl	1c2c8 <printk>
   1447c:	4040      	eors	r0, r0
   1447e:	f380 8811 	msr	BASEPRI, r0
   14482:	f04f 0003 	mov.w	r0, #3
   14486:	df02      	svc	2

	conn->periph.latency_cancel = 0U;
   14488:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   1448c:	f36f 0382 	bfc	r3, #2, #1
   14490:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
}
   14494:	bd10      	pop	{r4, pc}
   14496:	bf00      	nop
   14498:	00027da8 	.word	0x00027da8
   1449c:	00027dee 	.word	0x00027dee
   144a0:	00027514 	.word	0x00027514

000144a4 <ticker_op_cb>:
{
   144a4:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   144a6:	b160      	cbz	r0, 144c2 <ticker_op_cb+0x1e>
   144a8:	4a06      	ldr	r2, [pc, #24]	; (144c4 <ticker_op_cb+0x20>)
   144aa:	4907      	ldr	r1, [pc, #28]	; (144c8 <ticker_op_cb+0x24>)
   144ac:	4807      	ldr	r0, [pc, #28]	; (144cc <ticker_op_cb+0x28>)
   144ae:	f240 23a7 	movw	r3, #679	; 0x2a7
   144b2:	f007 ff09 	bl	1c2c8 <printk>
   144b6:	4040      	eors	r0, r0
   144b8:	f380 8811 	msr	BASEPRI, r0
   144bc:	f04f 0003 	mov.w	r0, #3
   144c0:	df02      	svc	2
}
   144c2:	bd08      	pop	{r3, pc}
   144c4:	00027da8 	.word	0x00027da8
   144c8:	00027df5 	.word	0x00027df5
   144cc:	00027514 	.word	0x00027514

000144d0 <ticker_op_stop_adv_cb>:
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   144d0:	2801      	cmp	r0, #1
{
   144d2:	b510      	push	{r4, lr}
   144d4:	460c      	mov	r4, r1
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   144d6:	d110      	bne.n	144fa <ticker_op_stop_adv_cb+0x2a>
   144d8:	f7fd fdbc 	bl	12054 <ull_disable_mark_get>
   144dc:	4284      	cmp	r4, r0
   144de:	d00c      	beq.n	144fa <ticker_op_stop_adv_cb+0x2a>
   144e0:	4a06      	ldr	r2, [pc, #24]	; (144fc <ticker_op_stop_adv_cb+0x2c>)
   144e2:	4907      	ldr	r1, [pc, #28]	; (14500 <ticker_op_stop_adv_cb+0x30>)
   144e4:	4807      	ldr	r0, [pc, #28]	; (14504 <ticker_op_stop_adv_cb+0x34>)
   144e6:	f240 239f 	movw	r3, #671	; 0x29f
   144ea:	f007 feed 	bl	1c2c8 <printk>
   144ee:	4040      	eors	r0, r0
   144f0:	f380 8811 	msr	BASEPRI, r0
   144f4:	f04f 0003 	mov.w	r0, #3
   144f8:	df02      	svc	2
}
   144fa:	bd10      	pop	{r4, pc}
   144fc:	00027da8 	.word	0x00027da8
   14500:	00027e01 	.word	0x00027e01
   14504:	00027514 	.word	0x00027514

00014508 <ull_periph_ticker_cb>:
{
   14508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1450c:	9c09      	ldr	r4, [sp, #36]	; 0x24
   1450e:	f89d 9020 	ldrb.w	r9, [sp, #32]
   14512:	4690      	mov	r8, r2
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   14514:	8d22      	ldrh	r2, [r4, #40]	; 0x28
{
   14516:	461e      	mov	r6, r3
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   14518:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1451c:	429a      	cmp	r2, r3
{
   1451e:	4607      	mov	r7, r0
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   14520:	d03f      	beq.n	145a2 <ull_periph_ticker_cb+0x9a>
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   14522:	4601      	mov	r1, r0
   14524:	4632      	mov	r2, r6
   14526:	4620      	mov	r0, r4
   14528:	f7ed fc12 	bl	1d50 <ull_conn_llcp>
		if (ret) {
   1452c:	2800      	cmp	r0, #0
   1452e:	d138      	bne.n	145a2 <ull_periph_ticker_cb+0x9a>
	return ++hdr->ref;
   14530:	7825      	ldrb	r5, [r4, #0]
   14532:	3501      	adds	r5, #1
   14534:	b2ed      	uxtb	r5, r5
   14536:	7025      	strb	r5, [r4, #0]
	LL_ASSERT(ref);
   14538:	b965      	cbnz	r5, 14554 <ull_periph_ticker_cb+0x4c>
   1453a:	4a1b      	ldr	r2, [pc, #108]	; (145a8 <ull_periph_ticker_cb+0xa0>)
   1453c:	491b      	ldr	r1, [pc, #108]	; (145ac <ull_periph_ticker_cb+0xa4>)
   1453e:	481c      	ldr	r0, [pc, #112]	; (145b0 <ull_periph_ticker_cb+0xa8>)
   14540:	f240 231d 	movw	r3, #541	; 0x21d
   14544:	f007 fec0 	bl	1c2c8 <printk>
   14548:	4040      	eors	r0, r0
   1454a:	f380 8811 	msr	BASEPRI, r0
   1454e:	f04f 0003 	mov.w	r0, #3
   14552:	df02      	svc	2
	p.ticks_at_expire = ticks_at_expire;
   14554:	4d17      	ldr	r5, [pc, #92]	; (145b4 <ull_periph_ticker_cb+0xac>)
	p.param = &conn->lll;
   14556:	f104 031c 	add.w	r3, r4, #28
   1455a:	60eb      	str	r3, [r5, #12]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1455c:	2200      	movs	r2, #0
	mfy.param = &p;
   1455e:	4b16      	ldr	r3, [pc, #88]	; (145b8 <ull_periph_ticker_cb+0xb0>)
	p.lazy = lazy;
   14560:	812e      	strh	r6, [r5, #8]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   14562:	4611      	mov	r1, r2
   14564:	2001      	movs	r0, #1
	p.remainder = remainder;
   14566:	e9c5 7800 	strd	r7, r8, [r5]
	p.force = force;
   1456a:	f885 900a 	strb.w	r9, [r5, #10]
	mfy.param = &p;
   1456e:	609d      	str	r5, [r3, #8]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   14570:	f7fb fbe4 	bl	fd3c <mayfly_enqueue>
	LL_ASSERT(!err);
   14574:	b160      	cbz	r0, 14590 <ull_periph_ticker_cb+0x88>
   14576:	4a0c      	ldr	r2, [pc, #48]	; (145a8 <ull_periph_ticker_cb+0xa0>)
   14578:	4910      	ldr	r1, [pc, #64]	; (145bc <ull_periph_ticker_cb+0xb4>)
   1457a:	480d      	ldr	r0, [pc, #52]	; (145b0 <ull_periph_ticker_cb+0xa8>)
   1457c:	f240 232a 	movw	r3, #554	; 0x22a
   14580:	f007 fea2 	bl	1c2c8 <printk>
   14584:	4040      	eors	r0, r0
   14586:	f380 8811 	msr	BASEPRI, r0
   1458a:	f04f 0003 	mov.w	r0, #3
   1458e:	df02      	svc	2
	ull_conn_tx_demux(UINT8_MAX);
   14590:	20ff      	movs	r0, #255	; 0xff
   14592:	f7ff fc8b 	bl	13eac <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   14596:	4620      	mov	r0, r4
   14598:	21ff      	movs	r1, #255	; 0xff
}
   1459a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   1459e:	f7ff be2f 	b.w	14200 <ull_conn_tx_lll_enqueue>
}
   145a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   145a6:	bf00      	nop
   145a8:	00027da8 	.word	0x00027da8
   145ac:	00027b71 	.word	0x00027b71
   145b0:	00027514 	.word	0x00027514
   145b4:	200030bc 	.word	0x200030bc
   145b8:	20000ba4 	.word	0x20000ba4
   145bc:	00027963 	.word	0x00027963

000145c0 <ull_periph_latency_cancel>:
{
   145c0:	b500      	push	{lr}
	if (conn->lll.latency_event && !conn->periph.latency_cancel) {
   145c2:	8e03      	ldrh	r3, [r0, #48]	; 0x30
{
   145c4:	b089      	sub	sp, #36	; 0x24
	if (conn->lll.latency_event && !conn->periph.latency_cancel) {
   145c6:	b33b      	cbz	r3, 14618 <ull_periph_latency_cancel+0x58>
   145c8:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
   145cc:	f012 0304 	ands.w	r3, r2, #4
   145d0:	d122      	bne.n	14618 <ull_periph_latency_cancel+0x58>
		conn->periph.latency_cancel = 1U;
   145d2:	f042 0204 	orr.w	r2, r2, #4
   145d6:	f880 207c 	strb.w	r2, [r0, #124]	; 0x7c
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   145da:	1d4a      	adds	r2, r1, #5
   145dc:	4910      	ldr	r1, [pc, #64]	; (14620 <ull_periph_latency_cancel+0x60>)
   145de:	9006      	str	r0, [sp, #24]
   145e0:	e9cd 3104 	strd	r3, r1, [sp, #16]
   145e4:	2101      	movs	r1, #1
   145e6:	e9cd 3102 	strd	r3, r1, [sp, #8]
   145ea:	e9cd 3300 	strd	r3, r3, [sp]
   145ee:	4618      	mov	r0, r3
   145f0:	b2d2      	uxtb	r2, r2
   145f2:	2103      	movs	r1, #3
   145f4:	f00f fbfc 	bl	23df0 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   145f8:	f030 0302 	bics.w	r3, r0, #2
   145fc:	d00c      	beq.n	14618 <ull_periph_latency_cancel+0x58>
   145fe:	4a09      	ldr	r2, [pc, #36]	; (14624 <ull_periph_latency_cancel+0x64>)
   14600:	4909      	ldr	r1, [pc, #36]	; (14628 <ull_periph_latency_cancel+0x68>)
   14602:	480a      	ldr	r0, [pc, #40]	; (1462c <ull_periph_latency_cancel+0x6c>)
   14604:	f240 13e3 	movw	r3, #483	; 0x1e3
   14608:	f007 fe5e 	bl	1c2c8 <printk>
   1460c:	4040      	eors	r0, r0
   1460e:	f380 8811 	msr	BASEPRI, r0
   14612:	f04f 0003 	mov.w	r0, #3
   14616:	df02      	svc	2
}
   14618:	b009      	add	sp, #36	; 0x24
   1461a:	f85d fb04 	ldr.w	pc, [sp], #4
   1461e:	bf00      	nop
   14620:	00014469 	.word	0x00014469
   14624:	00027da8 	.word	0x00027da8
   14628:	00027d0a 	.word	0x00027d0a
   1462c:	00027514 	.word	0x00027514

00014630 <ll_fal_clear>:
{
	return FAL_SIZE;
}

uint8_t ll_fal_clear(void)
{
   14630:	b508      	push	{r3, lr}
#if defined(CONFIG_BT_BROADCASTER)
	if (ull_adv_filter_pol_get(0)) {
   14632:	2000      	movs	r0, #0
   14634:	f00f fd15 	bl	24062 <ull_adv_filter_pol_get>
   14638:	b108      	cbz	r0, 1463e <ll_fal_clear+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1463a:	200c      	movs	r0, #12
#else
	filter_clear(&fal_filter);
#endif /* CONFIG_BT_CTLR_PRIVACY */

	return 0;
}
   1463c:	bd08      	pop	{r3, pc}
	if (ull_scan_filter_pol_get(0) & 0x1) {
   1463e:	f00f fe0d 	bl	2425c <ull_scan_filter_pol_get>
   14642:	f010 0001 	ands.w	r0, r0, #1
   14646:	d1f8      	bne.n	1463a <ll_fal_clear+0xa>
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
}

static void filter_clear(struct lll_filter *filter)
{
	filter->enable_bitmask = 0;
   14648:	4b01      	ldr	r3, [pc, #4]	; (14650 <ll_fal_clear+0x20>)
   1464a:	7018      	strb	r0, [r3, #0]
	filter->addr_type_bitmask = 0;
   1464c:	7058      	strb	r0, [r3, #1]
	return 0;
   1464e:	e7f5      	b.n	1463c <ll_fal_clear+0xc>
   14650:	200040ca 	.word	0x200040ca

00014654 <ll_fal_add>:
{
   14654:	b570      	push	{r4, r5, r6, lr}
   14656:	4604      	mov	r4, r0
	if (ull_adv_filter_pol_get(0)) {
   14658:	2000      	movs	r0, #0
   1465a:	f00f fd02 	bl	24062 <ull_adv_filter_pol_get>
   1465e:	b108      	cbz	r0, 14664 <ll_fal_add+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
   14660:	200c      	movs	r0, #12
}
   14662:	bd70      	pop	{r4, r5, r6, pc}
	if (ull_scan_filter_pol_get(0) & 0x1) {
   14664:	f00f fdfa 	bl	2425c <ull_scan_filter_pol_get>
   14668:	f010 0001 	ands.w	r0, r0, #1
   1466c:	d1f8      	bne.n	14660 <ll_fal_add+0xc>
	if (addr->type == ADDR_TYPE_ANON) {
   1466e:	7823      	ldrb	r3, [r4, #0]
   14670:	2bff      	cmp	r3, #255	; 0xff
   14672:	d0f6      	beq.n	14662 <ll_fal_add+0xe>
	return filter_add(&fal_filter, addr->type, addr->a.val);
   14674:	1c61      	adds	r1, r4, #1
	if (filter->enable_bitmask == LLL_FILTER_BITMASK_ALL) {
   14676:	4c0f      	ldr	r4, [pc, #60]	; (146b4 <ll_fal_add+0x60>)
   14678:	7822      	ldrb	r2, [r4, #0]
   1467a:	2aff      	cmp	r2, #255	; 0xff
   1467c:	d018      	beq.n	146b0 <ll_fal_add+0x5c>
	     (filter->enable_bitmask & BIT(index));
   1467e:	fa22 f500 	lsr.w	r5, r2, r0
	for (index = 0;
   14682:	f015 0501 	ands.w	r5, r5, #1
   14686:	d111      	bne.n	146ac <ll_fal_add+0x58>
	filter->enable_bitmask |= BIT(index);
   14688:	2601      	movs	r6, #1
   1468a:	4086      	lsls	r6, r0
   1468c:	4332      	orrs	r2, r6
   1468e:	7022      	strb	r2, [r4, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   14690:	f003 0301 	and.w	r3, r3, #1
   14694:	7862      	ldrb	r2, [r4, #1]
   14696:	4083      	lsls	r3, r0
   14698:	4313      	orrs	r3, r2
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1469a:	2206      	movs	r2, #6
   1469c:	fb02 4000 	mla	r0, r2, r0, r4
   146a0:	3002      	adds	r0, #2
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   146a2:	7063      	strb	r3, [r4, #1]
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   146a4:	f009 fcc5 	bl	1e032 <memcpy>
	return filter_add(&fal_filter, addr->type, addr->a.val);
   146a8:	b2e8      	uxtb	r0, r5
   146aa:	e7da      	b.n	14662 <ll_fal_add+0xe>
	     index++) {
   146ac:	3001      	adds	r0, #1
   146ae:	e7e6      	b.n	1467e <ll_fal_add+0x2a>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   146b0:	2507      	movs	r5, #7
   146b2:	e7f9      	b.n	146a8 <ll_fal_add+0x54>
   146b4:	200040ca 	.word	0x200040ca

000146b8 <ll_fal_remove>:
{
   146b8:	b538      	push	{r3, r4, r5, lr}
   146ba:	4605      	mov	r5, r0
	if (ull_adv_filter_pol_get(0)) {
   146bc:	2000      	movs	r0, #0
   146be:	f00f fcd0 	bl	24062 <ull_adv_filter_pol_get>
   146c2:	b108      	cbz	r0, 146c8 <ll_fal_remove+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
   146c4:	200c      	movs	r0, #12
}
   146c6:	bd38      	pop	{r3, r4, r5, pc}
	if (ull_scan_filter_pol_get(0) & 0x1) {
   146c8:	f00f fdc8 	bl	2425c <ull_scan_filter_pol_get>
   146cc:	f010 0401 	ands.w	r4, r0, #1
   146d0:	d1f8      	bne.n	146c4 <ll_fal_remove+0xc>
	if (addr->type == ADDR_TYPE_ANON) {
   146d2:	7829      	ldrb	r1, [r5, #0]
   146d4:	29ff      	cmp	r1, #255	; 0xff
   146d6:	d017      	beq.n	14708 <ll_fal_remove+0x50>
	return filter_remove(&fal_filter, addr->type, addr->a.val);
   146d8:	1c6a      	adds	r2, r5, #1
	if (!filter->enable_bitmask) {
   146da:	4d0c      	ldr	r5, [pc, #48]	; (1470c <ll_fal_remove+0x54>)
   146dc:	782b      	ldrb	r3, [r5, #0]
   146de:	b913      	cbnz	r3, 146e6 <ll_fal_remove+0x2e>
		return BT_HCI_ERR_INVALID_PARAM;
   146e0:	2412      	movs	r4, #18
	return filter_remove(&fal_filter, addr->type, addr->a.val);
   146e2:	b2e0      	uxtb	r0, r4
   146e4:	e7ef      	b.n	146c6 <ll_fal_remove+0xe>
   146e6:	4628      	mov	r0, r5
   146e8:	f00f ff33 	bl	24552 <filter_find.part.0>
	if (index == FILTER_IDX_NONE) {
   146ec:	28ff      	cmp	r0, #255	; 0xff
   146ee:	d0f7      	beq.n	146e0 <ll_fal_remove+0x28>
	filter->enable_bitmask &= ~BIT(index);
   146f0:	2301      	movs	r3, #1
   146f2:	fa03 f000 	lsl.w	r0, r3, r0
   146f6:	782b      	ldrb	r3, [r5, #0]
   146f8:	ea23 0300 	bic.w	r3, r3, r0
   146fc:	702b      	strb	r3, [r5, #0]
	filter->addr_type_bitmask &= ~BIT(index);
   146fe:	786b      	ldrb	r3, [r5, #1]
   14700:	ea23 0000 	bic.w	r0, r3, r0
   14704:	7068      	strb	r0, [r5, #1]
	return 0;
   14706:	e7ec      	b.n	146e2 <ll_fal_remove+0x2a>
		return 0;
   14708:	4620      	mov	r0, r4
   1470a:	e7dc      	b.n	146c6 <ll_fal_remove+0xe>
   1470c:	200040ca 	.word	0x200040ca

00014710 <ull_filter_reset>:
	filter->enable_bitmask = 0;
   14710:	4b02      	ldr	r3, [pc, #8]	; (1471c <ull_filter_reset+0xc>)
   14712:	2200      	movs	r2, #0
   14714:	701a      	strb	r2, [r3, #0]
	filter->addr_type_bitmask = 0;
   14716:	705a      	strb	r2, [r3, #1]
}
   14718:	4770      	bx	lr
   1471a:	bf00      	nop
   1471c:	200040ca 	.word	0x200040ca

00014720 <ull_filter_lll_get>:
{
   14720:	b508      	push	{r3, lr}
	LL_ASSERT(filter);
   14722:	b960      	cbnz	r0, 1473e <ull_filter_lll_get+0x1e>
   14724:	4a07      	ldr	r2, [pc, #28]	; (14744 <ull_filter_lll_get+0x24>)
   14726:	4908      	ldr	r1, [pc, #32]	; (14748 <ull_filter_lll_get+0x28>)
   14728:	4808      	ldr	r0, [pc, #32]	; (1474c <ull_filter_lll_get+0x2c>)
   1472a:	f240 2392 	movw	r3, #658	; 0x292
   1472e:	f007 fdcb 	bl	1c2c8 <printk>
   14732:	4040      	eors	r0, r0
   14734:	f380 8811 	msr	BASEPRI, r0
   14738:	f04f 0003 	mov.w	r0, #3
   1473c:	df02      	svc	2
}
   1473e:	4804      	ldr	r0, [pc, #16]	; (14750 <ull_filter_lll_get+0x30>)
   14740:	bd08      	pop	{r3, pc}
   14742:	bf00      	nop
   14744:	00027e30 	.word	0x00027e30
   14748:	00027e72 	.word	0x00027e72
   1474c:	00027514 	.word	0x00027514
   14750:	200040ca 	.word	0x200040ca

00014754 <rtc0_nrf5_isr>:
	DEBUG_RADIO_ISR(0);
	return 1;
}

static void rtc0_nrf5_isr(const void *arg)
{
   14754:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	lll_prof_enter_ull_high();

	/* On compare0 run ticker worker instance0 */
	if (NRF_RTC0->EVENTS_COMPARE[0]) {
   14756:	4b08      	ldr	r3, [pc, #32]	; (14778 <rtc0_nrf5_isr+0x24>)
   14758:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   1475c:	b122      	cbz	r2, 14768 <rtc0_nrf5_isr+0x14>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   1475e:	2000      	movs	r0, #0
   14760:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140

		ticker_trigger(0);
   14764:	f7fc f802 	bl	1076c <ticker_trigger>
	}

	mayfly_run(TICKER_USER_ID_ULL_HIGH);
   14768:	2001      	movs	r0, #1
   1476a:	f7fb fb37 	bl	fddc <mayfly_run>

	lll_prof_exit_ull_low();
#endif

	DEBUG_TICKER_ISR(0);
}
   1476e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mayfly_run(TICKER_USER_ID_ULL_LOW);
   14772:	2002      	movs	r0, #2
   14774:	f7fb bb32 	b.w	fddc <mayfly_run>
   14778:	4000b000 	.word	0x4000b000

0001477c <ticker_stop_op_cb>:
static uint8_t preempt_stop_ack;
static uint8_t preempt_req;
static uint8_t volatile preempt_ack;

static void ticker_stop_op_cb(uint32_t status, void *param)
{
   1477c:	b510      	push	{r4, lr}
	ARG_UNUSED(param);
	ARG_UNUSED(status);

	LL_ASSERT(preempt_stop_req != preempt_stop_ack);
   1477e:	4b0d      	ldr	r3, [pc, #52]	; (147b4 <ticker_stop_op_cb+0x38>)
   14780:	4c0d      	ldr	r4, [pc, #52]	; (147b8 <ticker_stop_op_cb+0x3c>)
   14782:	781b      	ldrb	r3, [r3, #0]
   14784:	7822      	ldrb	r2, [r4, #0]
   14786:	429a      	cmp	r2, r3
   14788:	d10c      	bne.n	147a4 <ticker_stop_op_cb+0x28>
   1478a:	4a0c      	ldr	r2, [pc, #48]	; (147bc <ticker_stop_op_cb+0x40>)
   1478c:	490c      	ldr	r1, [pc, #48]	; (147c0 <ticker_stop_op_cb+0x44>)
   1478e:	480d      	ldr	r0, [pc, #52]	; (147c4 <ticker_stop_op_cb+0x48>)
   14790:	f240 3301 	movw	r3, #769	; 0x301
   14794:	f007 fd98 	bl	1c2c8 <printk>
   14798:	4040      	eors	r0, r0
   1479a:	f380 8811 	msr	BASEPRI, r0
   1479e:	f04f 0003 	mov.w	r0, #3
   147a2:	df02      	svc	2
	preempt_stop_ack++;
   147a4:	7823      	ldrb	r3, [r4, #0]
   147a6:	3301      	adds	r3, #1
   147a8:	7023      	strb	r3, [r4, #0]

	preempt_req = preempt_ack;
   147aa:	4b07      	ldr	r3, [pc, #28]	; (147c8 <ticker_stop_op_cb+0x4c>)
   147ac:	781a      	ldrb	r2, [r3, #0]
   147ae:	4b07      	ldr	r3, [pc, #28]	; (147cc <ticker_stop_op_cb+0x50>)
   147b0:	701a      	strb	r2, [r3, #0]
}
   147b2:	bd10      	pop	{r4, pc}
   147b4:	20004101 	.word	0x20004101
   147b8:	20004100 	.word	0x20004100
   147bc:	00027e79 	.word	0x00027e79
   147c0:	00027ebf 	.word	0x00027ebf
   147c4:	00027514 	.word	0x00027514
   147c8:	200040fc 	.word	0x200040fc
   147cc:	200040fd 	.word	0x200040fd

000147d0 <ticker_start_op_cb>:

static void ticker_start_op_cb(uint32_t status, void *param)
{
   147d0:	b510      	push	{r4, lr}
	ARG_UNUSED(param);
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   147d2:	b160      	cbz	r0, 147ee <ticker_start_op_cb+0x1e>
   147d4:	4a1c      	ldr	r2, [pc, #112]	; (14848 <ticker_start_op_cb+0x78>)
   147d6:	491d      	ldr	r1, [pc, #116]	; (1484c <ticker_start_op_cb+0x7c>)
   147d8:	481d      	ldr	r0, [pc, #116]	; (14850 <ticker_start_op_cb+0x80>)
   147da:	f240 330a 	movw	r3, #778	; 0x30a
   147de:	f007 fd73 	bl	1c2c8 <printk>
   147e2:	4040      	eors	r0, r0
   147e4:	f380 8811 	msr	BASEPRI, r0
   147e8:	f04f 0003 	mov.w	r0, #3
   147ec:	df02      	svc	2

	LL_ASSERT(preempt_start_req != preempt_start_ack);
   147ee:	4b19      	ldr	r3, [pc, #100]	; (14854 <ticker_start_op_cb+0x84>)
   147f0:	4c19      	ldr	r4, [pc, #100]	; (14858 <ticker_start_op_cb+0x88>)
   147f2:	781b      	ldrb	r3, [r3, #0]
   147f4:	7822      	ldrb	r2, [r4, #0]
   147f6:	429a      	cmp	r2, r3
   147f8:	d10c      	bne.n	14814 <ticker_start_op_cb+0x44>
   147fa:	4a13      	ldr	r2, [pc, #76]	; (14848 <ticker_start_op_cb+0x78>)
   147fc:	4917      	ldr	r1, [pc, #92]	; (1485c <ticker_start_op_cb+0x8c>)
   147fe:	4814      	ldr	r0, [pc, #80]	; (14850 <ticker_start_op_cb+0x80>)
   14800:	f44f 7343 	mov.w	r3, #780	; 0x30c
   14804:	f007 fd60 	bl	1c2c8 <printk>
   14808:	4040      	eors	r0, r0
   1480a:	f380 8811 	msr	BASEPRI, r0
   1480e:	f04f 0003 	mov.w	r0, #3
   14812:	df02      	svc	2
	preempt_start_ack++;
   14814:	7823      	ldrb	r3, [r4, #0]
   14816:	3301      	adds	r3, #1
   14818:	7023      	strb	r3, [r4, #0]

	LL_ASSERT(preempt_req == preempt_ack);
   1481a:	4b11      	ldr	r3, [pc, #68]	; (14860 <ticker_start_op_cb+0x90>)
   1481c:	4c11      	ldr	r4, [pc, #68]	; (14864 <ticker_start_op_cb+0x94>)
   1481e:	781b      	ldrb	r3, [r3, #0]
   14820:	7822      	ldrb	r2, [r4, #0]
   14822:	429a      	cmp	r2, r3
   14824:	d00c      	beq.n	14840 <ticker_start_op_cb+0x70>
   14826:	4a08      	ldr	r2, [pc, #32]	; (14848 <ticker_start_op_cb+0x78>)
   14828:	490f      	ldr	r1, [pc, #60]	; (14868 <ticker_start_op_cb+0x98>)
   1482a:	4809      	ldr	r0, [pc, #36]	; (14850 <ticker_start_op_cb+0x80>)
   1482c:	f240 330f 	movw	r3, #783	; 0x30f
   14830:	f007 fd4a 	bl	1c2c8 <printk>
   14834:	4040      	eors	r0, r0
   14836:	f380 8811 	msr	BASEPRI, r0
   1483a:	f04f 0003 	mov.w	r0, #3
   1483e:	df02      	svc	2
	preempt_req++;
   14840:	7823      	ldrb	r3, [r4, #0]
   14842:	3301      	adds	r3, #1
   14844:	7023      	strb	r3, [r4, #0]
}
   14846:	bd10      	pop	{r4, pc}
   14848:	00027e79 	.word	0x00027e79
   1484c:	00027df5 	.word	0x00027df5
   14850:	00027514 	.word	0x00027514
   14854:	200040ff 	.word	0x200040ff
   14858:	200040fe 	.word	0x200040fe
   1485c:	00027ee4 	.word	0x00027ee4
   14860:	200040fc 	.word	0x200040fc
   14864:	200040fd 	.word	0x200040fd
   14868:	00027f0b 	.word	0x00027f0b

0001486c <preempt_ticker_cb>:
}

static void preempt_ticker_cb(uint32_t ticks_at_expire, uint32_t ticks_drift,
			      uint32_t remainder, uint16_t lazy, uint8_t force,
			      void *param)
{
   1486c:	b510      	push	{r4, lr}
	static memq_link_t link;
	static struct mayfly mfy = {0, 0, &link, NULL, preempt};
	uint32_t ret;

	LL_ASSERT(preempt_ack != preempt_req);
   1486e:	4a17      	ldr	r2, [pc, #92]	; (148cc <preempt_ticker_cb+0x60>)
   14870:	4c17      	ldr	r4, [pc, #92]	; (148d0 <preempt_ticker_cb+0x64>)
   14872:	7812      	ldrb	r2, [r2, #0]
   14874:	7823      	ldrb	r3, [r4, #0]
   14876:	429a      	cmp	r2, r3
   14878:	d10c      	bne.n	14894 <preempt_ticker_cb+0x28>
   1487a:	4a16      	ldr	r2, [pc, #88]	; (148d4 <preempt_ticker_cb+0x68>)
   1487c:	4916      	ldr	r1, [pc, #88]	; (148d8 <preempt_ticker_cb+0x6c>)
   1487e:	4817      	ldr	r0, [pc, #92]	; (148dc <preempt_ticker_cb+0x70>)
   14880:	f44f 735c 	mov.w	r3, #880	; 0x370
   14884:	f007 fd20 	bl	1c2c8 <printk>
   14888:	4040      	eors	r0, r0
   1488a:	f380 8811 	msr	BASEPRI, r0
   1488e:	f04f 0003 	mov.w	r0, #3
   14892:	df02      	svc	2
	preempt_ack++;
   14894:	7823      	ldrb	r3, [r4, #0]

	mfy.param = param;
   14896:	9a03      	ldr	r2, [sp, #12]
	preempt_ack++;
   14898:	3301      	adds	r3, #1
   1489a:	b2db      	uxtb	r3, r3
   1489c:	7023      	strb	r3, [r4, #0]
	mfy.param = param;
   1489e:	4b10      	ldr	r3, [pc, #64]	; (148e0 <preempt_ticker_cb+0x74>)
   148a0:	609a      	str	r2, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   148a2:	2200      	movs	r2, #0
   148a4:	4611      	mov	r1, r2
   148a6:	2001      	movs	r0, #1
   148a8:	f7fb fa48 	bl	fd3c <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
   148ac:	b160      	cbz	r0, 148c8 <preempt_ticker_cb+0x5c>
   148ae:	4a09      	ldr	r2, [pc, #36]	; (148d4 <preempt_ticker_cb+0x68>)
   148b0:	490c      	ldr	r1, [pc, #48]	; (148e4 <preempt_ticker_cb+0x78>)
   148b2:	480a      	ldr	r0, [pc, #40]	; (148dc <preempt_ticker_cb+0x70>)
   148b4:	f240 3376 	movw	r3, #886	; 0x376
   148b8:	f007 fd06 	bl	1c2c8 <printk>
   148bc:	4040      	eors	r0, r0
   148be:	f380 8811 	msr	BASEPRI, r0
   148c2:	f04f 0003 	mov.w	r0, #3
   148c6:	df02      	svc	2
}
   148c8:	bd10      	pop	{r4, pc}
   148ca:	bf00      	nop
   148cc:	200040fd 	.word	0x200040fd
   148d0:	200040fc 	.word	0x200040fc
   148d4:	00027e79 	.word	0x00027e79
   148d8:	00027f26 	.word	0x00027f26
   148dc:	00027514 	.word	0x00027514
   148e0:	20000bb4 	.word	0x20000bb4
   148e4:	000279ee 	.word	0x000279ee

000148e8 <preempt_ticker_stop>:
{
   148e8:	b513      	push	{r0, r1, r4, lr}
	if ((preempt_stop_req != preempt_stop_ack) ||
   148ea:	4a17      	ldr	r2, [pc, #92]	; (14948 <preempt_ticker_stop+0x60>)
   148ec:	4917      	ldr	r1, [pc, #92]	; (1494c <preempt_ticker_stop+0x64>)
   148ee:	7813      	ldrb	r3, [r2, #0]
   148f0:	7809      	ldrb	r1, [r1, #0]
   148f2:	4299      	cmp	r1, r3
   148f4:	d003      	beq.n	148fe <preempt_ticker_stop+0x16>
		return TICKER_STATUS_SUCCESS;
   148f6:	2400      	movs	r4, #0
}
   148f8:	4620      	mov	r0, r4
   148fa:	b002      	add	sp, #8
   148fc:	bd10      	pop	{r4, pc}
	    (preempt_req == preempt_ack)) {
   148fe:	4b14      	ldr	r3, [pc, #80]	; (14950 <preempt_ticker_stop+0x68>)
   14900:	4914      	ldr	r1, [pc, #80]	; (14954 <preempt_ticker_stop+0x6c>)
   14902:	781b      	ldrb	r3, [r3, #0]
	if ((preempt_stop_req != preempt_stop_ack) ||
   14904:	7809      	ldrb	r1, [r1, #0]
   14906:	4299      	cmp	r1, r3
   14908:	d0f5      	beq.n	148f6 <preempt_ticker_stop+0xe>
	preempt_stop_req++;
   1490a:	7813      	ldrb	r3, [r2, #0]
   1490c:	3301      	adds	r3, #1
   1490e:	b2db      	uxtb	r3, r3
   14910:	7013      	strb	r3, [r2, #0]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   14912:	2200      	movs	r2, #0
   14914:	4b10      	ldr	r3, [pc, #64]	; (14958 <preempt_ticker_stop+0x70>)
   14916:	9200      	str	r2, [sp, #0]
   14918:	4611      	mov	r1, r2
   1491a:	4610      	mov	r0, r2
   1491c:	f7fb ffd2 	bl	108c4 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   14920:	4604      	mov	r4, r0
   14922:	2800      	cmp	r0, #0
   14924:	d0e7      	beq.n	148f6 <preempt_ticker_stop+0xe>
   14926:	2802      	cmp	r0, #2
   14928:	d0e6      	beq.n	148f8 <preempt_ticker_stop+0x10>
   1492a:	4a0c      	ldr	r2, [pc, #48]	; (1495c <preempt_ticker_stop+0x74>)
   1492c:	490c      	ldr	r1, [pc, #48]	; (14960 <preempt_ticker_stop+0x78>)
   1492e:	480d      	ldr	r0, [pc, #52]	; (14964 <preempt_ticker_stop+0x7c>)
   14930:	f240 3362 	movw	r3, #866	; 0x362
   14934:	f007 fcc8 	bl	1c2c8 <printk>
   14938:	4040      	eors	r0, r0
   1493a:	f380 8811 	msr	BASEPRI, r0
   1493e:	f04f 0003 	mov.w	r0, #3
   14942:	df02      	svc	2
   14944:	e7d8      	b.n	148f8 <preempt_ticker_stop+0x10>
   14946:	bf00      	nop
   14948:	20004101 	.word	0x20004101
   1494c:	20004100 	.word	0x20004100
   14950:	200040fc 	.word	0x200040fc
   14954:	200040fd 	.word	0x200040fd
   14958:	0001477d 	.word	0x0001477d
   1495c:	00027e79 	.word	0x00027e79
   14960:	00027add 	.word	0x00027add
   14964:	00027514 	.word	0x00027514

00014968 <preempt_ticker_start>:
	ull = HDR_LLL2ULL(p->param);
   14968:	68cb      	ldr	r3, [r1, #12]
   1496a:	681b      	ldr	r3, [r3, #0]
{
   1496c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	preempt_anchor = p->ticks_at_expire;
   14970:	f8d1 8000 	ldr.w	r8, [r1]
	preempt_to = MAX(ull->ticks_active_to_start,
   14974:	68de      	ldr	r6, [r3, #12]
	if ((preempt_start_req != preempt_start_ack) ||
   14976:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 14a1c <preempt_ticker_start+0xb4>
{
   1497a:	460d      	mov	r5, r1
	preempt_to = MAX(ull->ticks_active_to_start,
   1497c:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
   14980:	4291      	cmp	r1, r2
   14982:	bf2c      	ite	cs
   14984:	ebc6 0601 	rsbcs	r6, r6, r1
   14988:	ebc6 0602 	rsbcc	r6, r6, r2
	if ((preempt_start_req != preempt_start_ack) ||
   1498c:	4a24      	ldr	r2, [pc, #144]	; (14a20 <preempt_ticker_start+0xb8>)
   1498e:	f899 3000 	ldrb.w	r3, [r9]
   14992:	7812      	ldrb	r2, [r2, #0]
   14994:	429a      	cmp	r2, r3
{
   14996:	b08a      	sub	sp, #40	; 0x28
   14998:	4604      	mov	r4, r0
	ticks_at_preempt_new = preempt_anchor + preempt_to;
   1499a:	eb08 0706 	add.w	r7, r8, r6
	if ((preempt_start_req != preempt_start_ack) ||
   1499e:	d105      	bne.n	149ac <preempt_ticker_start+0x44>
	    (preempt_req != preempt_ack)) {
   149a0:	4b20      	ldr	r3, [pc, #128]	; (14a24 <preempt_ticker_start+0xbc>)
   149a2:	4a21      	ldr	r2, [pc, #132]	; (14a28 <preempt_ticker_start+0xc0>)
   149a4:	781b      	ldrb	r3, [r3, #0]
	if ((preempt_start_req != preempt_start_ack) ||
   149a6:	7812      	ldrb	r2, [r2, #0]
   149a8:	429a      	cmp	r2, r3
   149aa:	d018      	beq.n	149de <preempt_ticker_start+0x76>
		if (!prev || prev->is_aborted ||
   149ac:	2c00      	cmp	r4, #0
   149ae:	d032      	beq.n	14a16 <preempt_ticker_start+0xae>
   149b0:	7f23      	ldrb	r3, [r4, #28]
   149b2:	079b      	lsls	r3, r3, #30
   149b4:	d42f      	bmi.n	14a16 <preempt_ticker_start+0xae>
		diff = ticks_at_preempt_new - ticks_at_preempt;
   149b6:	f8df a074 	ldr.w	sl, [pc, #116]	; 14a2c <preempt_ticker_start+0xc4>
   149ba:	f8da 2000 	ldr.w	r2, [sl]
   149be:	1aba      	subs	r2, r7, r2
		if (!prev || prev->is_aborted ||
   149c0:	f412 0000 	ands.w	r0, r2, #8388608	; 0x800000
   149c4:	d024      	beq.n	14a10 <preempt_ticker_start+0xa8>
		preempt_ticker_stop();
   149c6:	f7ff ff8f 	bl	148e8 <preempt_ticker_stop>
		prev->is_aborted = 1U;
   149ca:	7f23      	ldrb	r3, [r4, #28]
		prev->abort_cb(&prev->prepare_param, prev->prepare_param.param);
   149cc:	68e1      	ldr	r1, [r4, #12]
		ticks_at_preempt = ticks_at_preempt_new;
   149ce:	f8ca 7000 	str.w	r7, [sl]
		prev->is_aborted = 1U;
   149d2:	f043 0302 	orr.w	r3, r3, #2
   149d6:	7723      	strb	r3, [r4, #28]
		prev->abort_cb(&prev->prepare_param, prev->prepare_param.param);
   149d8:	4620      	mov	r0, r4
   149da:	69a3      	ldr	r3, [r4, #24]
   149dc:	4798      	blx	r3
	preempt_start_req++;
   149de:	f899 2000 	ldrb.w	r2, [r9]
	ticks_at_preempt = ticks_at_preempt_new;
   149e2:	4b12      	ldr	r3, [pc, #72]	; (14a2c <preempt_ticker_start+0xc4>)
	preempt_start_req++;
   149e4:	3201      	adds	r2, #1
	ticks_at_preempt = ticks_at_preempt_new;
   149e6:	601f      	str	r7, [r3, #0]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   149e8:	4b11      	ldr	r3, [pc, #68]	; (14a30 <preempt_ticker_start+0xc8>)
   149ea:	9508      	str	r5, [sp, #32]
	preempt_start_req++;
   149ec:	b2d2      	uxtb	r2, r2
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   149ee:	e9cd 5306 	strd	r5, r3, [sp, #24]
	preempt_start_req++;
   149f2:	f889 2000 	strb.w	r2, [r9]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   149f6:	4b0f      	ldr	r3, [pc, #60]	; (14a34 <preempt_ticker_start+0xcc>)
   149f8:	9305      	str	r3, [sp, #20]
   149fa:	2200      	movs	r2, #0
   149fc:	e9cd 2203 	strd	r2, r2, [sp, #12]
   14a00:	e9cd 2201 	strd	r2, r2, [sp, #4]
   14a04:	9600      	str	r6, [sp, #0]
   14a06:	4643      	mov	r3, r8
   14a08:	4611      	mov	r1, r2
   14a0a:	4610      	mov	r0, r2
   14a0c:	f00f f9d5 	bl	23dba <ticker_start>
}
   14a10:	b00a      	add	sp, #40	; 0x28
   14a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			return TICKER_STATUS_SUCCESS;
   14a16:	2000      	movs	r0, #0
   14a18:	e7fa      	b.n	14a10 <preempt_ticker_start+0xa8>
   14a1a:	bf00      	nop
   14a1c:	200040ff 	.word	0x200040ff
   14a20:	200040fe 	.word	0x200040fe
   14a24:	200040fc 	.word	0x200040fc
   14a28:	200040fd 	.word	0x200040fd
   14a2c:	200030e4 	.word	0x200030e4
   14a30:	000147d1 	.word	0x000147d1
   14a34:	0001486d 	.word	0x0001486d

00014a38 <preempt>:

static void preempt(void *param)
{
   14a38:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct lll_event *next;
	uint8_t idx;
	int err;

	/* No event to abort */
	if (!event.curr.abort_cb || !event.curr.param) {
   14a3a:	4c3a      	ldr	r4, [pc, #232]	; (14b24 <preempt+0xec>)
   14a3c:	68a3      	ldr	r3, [r4, #8]
{
   14a3e:	b089      	sub	sp, #36	; 0x24
   14a40:	4605      	mov	r5, r0
	if (!event.curr.abort_cb || !event.curr.param) {
   14a42:	2b00      	cmp	r3, #0
   14a44:	d034      	beq.n	14ab0 <preempt+0x78>
   14a46:	6823      	ldr	r3, [r4, #0]
   14a48:	2b00      	cmp	r3, #0
   14a4a:	d031      	beq.n	14ab0 <preempt+0x78>
		return;
	}

	/* Check if any prepare in pipeline */
	idx = UINT8_MAX;
   14a4c:	23ff      	movs	r3, #255	; 0xff
   14a4e:	f88d 300a 	strb.w	r3, [sp, #10]
		return;
	}

	/* Find a prepare that is ready and not a resume */
	while (next && (next->is_aborted || next->is_resume)) {
		next = ull_prepare_dequeue_iter(&idx);
   14a52:	f10d 000a 	add.w	r0, sp, #10
   14a56:	f7fd fc25 	bl	122a4 <ull_prepare_dequeue_iter>
	while (next && (next->is_aborted || next->is_resume)) {
   14a5a:	4601      	mov	r1, r0
   14a5c:	b340      	cbz	r0, 14ab0 <preempt+0x78>
   14a5e:	7f06      	ldrb	r6, [r0, #28]
   14a60:	f016 0603 	ands.w	r6, r6, #3
   14a64:	d1f5      	bne.n	14a52 <preempt+0x1a>
	if (!next) {
		return;
	}

	/* Preemptor not in pipeline */
	if (next != param) {
   14a66:	4285      	cmp	r5, r0
   14a68:	d013      	beq.n	14a92 <preempt+0x5a>
		uint32_t ret;

		/* Start the preempt timeout */
		ret = preempt_ticker_start(NULL, next);
   14a6a:	4630      	mov	r0, r6
   14a6c:	f7ff ff7c 	bl	14968 <preempt_ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   14a70:	f030 0302 	bics.w	r3, r0, #2
   14a74:	d01c      	beq.n	14ab0 <preempt+0x78>
   14a76:	4a2c      	ldr	r2, [pc, #176]	; (14b28 <preempt+0xf0>)
   14a78:	492c      	ldr	r1, [pc, #176]	; (14b2c <preempt+0xf4>)
   14a7a:	f44f 7367 	mov.w	r3, #924	; 0x39c

		/* Enqueue as resume event */
		iter = resume_enqueue(resume_cb);
		LL_ASSERT(iter);
	} else {
		LL_ASSERT(err == -ECANCELED);
   14a7e:	482c      	ldr	r0, [pc, #176]	; (14b30 <preempt+0xf8>)
   14a80:	f007 fc22 	bl	1c2c8 <printk>
   14a84:	4040      	eors	r0, r0
   14a86:	f380 8811 	msr	BASEPRI, r0
   14a8a:	f04f 0003 	mov.w	r0, #3
   14a8e:	df02      	svc	2
   14a90:	e00e      	b.n	14ab0 <preempt+0x78>
	err = event.curr.is_abort_cb(next->prepare_param.param,
   14a92:	6863      	ldr	r3, [r4, #4]
   14a94:	6821      	ldr	r1, [r4, #0]
   14a96:	68e8      	ldr	r0, [r5, #12]
   14a98:	aa03      	add	r2, sp, #12
   14a9a:	4798      	blx	r3
	if (!err) {
   14a9c:	4607      	mov	r7, r0
   14a9e:	b948      	cbnz	r0, 14ab4 <preempt+0x7c>
		next->is_aborted = 1;
   14aa0:	7f2b      	ldrb	r3, [r5, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   14aa2:	68e9      	ldr	r1, [r5, #12]
		next->is_aborted = 1;
   14aa4:	f043 0302 	orr.w	r3, r3, #2
   14aa8:	772b      	strb	r3, [r5, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   14aaa:	4628      	mov	r0, r5
   14aac:	69ab      	ldr	r3, [r5, #24]
   14aae:	4798      	blx	r3
	}
}
   14ab0:	b009      	add	sp, #36	; 0x24
   14ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	event.curr.abort_cb(NULL, event.curr.param);
   14ab4:	68a3      	ldr	r3, [r4, #8]
   14ab6:	6821      	ldr	r1, [r4, #0]
   14ab8:	4630      	mov	r0, r6
   14aba:	4798      	blx	r3
	if (err == -EAGAIN) {
   14abc:	f117 0f0b 	cmn.w	r7, #11
   14ac0:	d129      	bne.n	14b16 <preempt+0xde>
		iter_idx = UINT8_MAX;
   14ac2:	25ff      	movs	r5, #255	; 0xff
				iter_idx = UINT8_MAX;
   14ac4:	f88d 500b 	strb.w	r5, [sp, #11]
			iter = ull_prepare_dequeue_iter(&iter_idx);
   14ac8:	f10d 000b 	add.w	r0, sp, #11
   14acc:	f7fd fbea 	bl	122a4 <ull_prepare_dequeue_iter>
		while (iter) {
   14ad0:	b9a0      	cbnz	r0, 14afc <preempt+0xc4>
	prepare_param.param = event.curr.param;
   14ad2:	6823      	ldr	r3, [r4, #0]
   14ad4:	9307      	str	r3, [sp, #28]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   14ad6:	2301      	movs	r3, #1
	struct lll_prepare_param prepare_param = {0};
   14ad8:	e9cd 0004 	strd	r0, r0, [sp, #16]
   14adc:	9006      	str	r0, [sp, #24]
	event.curr.param = NULL;
   14ade:	6020      	str	r0, [r4, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   14ae0:	9300      	str	r3, [sp, #0]
   14ae2:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
   14ae6:	9b03      	ldr	r3, [sp, #12]
   14ae8:	aa04      	add	r2, sp, #16
   14aea:	f7fd fb9f 	bl	1222c <ull_prepare_enqueue>
		LL_ASSERT(iter);
   14aee:	2800      	cmp	r0, #0
   14af0:	d1de      	bne.n	14ab0 <preempt+0x78>
   14af2:	4a0d      	ldr	r2, [pc, #52]	; (14b28 <preempt+0xf0>)
   14af4:	490f      	ldr	r1, [pc, #60]	; (14b34 <preempt+0xfc>)
   14af6:	f240 33ce 	movw	r3, #974	; 0x3ce
   14afa:	e7c0      	b.n	14a7e <preempt+0x46>
			if (!iter->is_aborted &&
   14afc:	7f03      	ldrb	r3, [r0, #28]
   14afe:	079a      	lsls	r2, r3, #30
   14b00:	d4e2      	bmi.n	14ac8 <preempt+0x90>
			    event.curr.param == iter->prepare_param.param) {
   14b02:	68c2      	ldr	r2, [r0, #12]
			if (!iter->is_aborted &&
   14b04:	6821      	ldr	r1, [r4, #0]
   14b06:	4291      	cmp	r1, r2
   14b08:	d1de      	bne.n	14ac8 <preempt+0x90>
				iter->is_aborted = 1;
   14b0a:	f043 0302 	orr.w	r3, r3, #2
   14b0e:	7703      	strb	r3, [r0, #28]
				iter->abort_cb(&iter->prepare_param,
   14b10:	6983      	ldr	r3, [r0, #24]
   14b12:	4798      	blx	r3
   14b14:	e7d6      	b.n	14ac4 <preempt+0x8c>
		LL_ASSERT(err == -ECANCELED);
   14b16:	378c      	adds	r7, #140	; 0x8c
   14b18:	d0ca      	beq.n	14ab0 <preempt+0x78>
   14b1a:	4a03      	ldr	r2, [pc, #12]	; (14b28 <preempt+0xf0>)
   14b1c:	4906      	ldr	r1, [pc, #24]	; (14b38 <preempt+0x100>)
   14b1e:	f44f 7374 	mov.w	r3, #976	; 0x3d0
   14b22:	e7ac      	b.n	14a7e <preempt+0x46>
   14b24:	200030d0 	.word	0x200030d0
   14b28:	00027e79 	.word	0x00027e79
   14b2c:	00027add 	.word	0x00027add
   14b30:	00027514 	.word	0x00027514
   14b34:	00027f41 	.word	0x00027f41
   14b38:	00027f46 	.word	0x00027f46

00014b3c <lll_init>:
{
   14b3c:	b510      	push	{r4, lr}
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   14b3e:	4816      	ldr	r0, [pc, #88]	; (14b98 <lll_init+0x5c>)
   14b40:	f006 f8ce 	bl	1ace0 <z_impl_device_get_binding>
	dev_entropy = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   14b44:	4b15      	ldr	r3, [pc, #84]	; (14b9c <lll_init+0x60>)
   14b46:	6018      	str	r0, [r3, #0]
	if (!dev_entropy) {
   14b48:	b310      	cbz	r0, 14b90 <lll_init+0x54>
	event.curr.abort_cb = NULL;
   14b4a:	4b15      	ldr	r3, [pc, #84]	; (14ba0 <lll_init+0x64>)
   14b4c:	2400      	movs	r4, #0
   14b4e:	609c      	str	r4, [r3, #8]
	err = lll_clock_init();
   14b50:	f000 fa34 	bl	14fbc <lll_clock_init>
	if (err < 0) {
   14b54:	2800      	cmp	r0, #0
   14b56:	db1a      	blt.n	14b8e <lll_init+0x52>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_BT_CTLR_LLL_PRIO,
   14b58:	4622      	mov	r2, r4
   14b5a:	4621      	mov	r1, r4
   14b5c:	2001      	movs	r0, #1
   14b5e:	f7f0 fda1 	bl	56a4 <z_arm_irq_priority_set>
	IRQ_CONNECT(RTC0_IRQn, CONFIG_BT_CTLR_ULL_HIGH_PRIO,
   14b62:	4622      	mov	r2, r4
   14b64:	2101      	movs	r1, #1
   14b66:	200b      	movs	r0, #11
   14b68:	f7f0 fd9c 	bl	56a4 <z_arm_irq_priority_set>
	IRQ_CONNECT(HAL_SWI_RADIO_IRQ, CONFIG_BT_CTLR_LLL_PRIO,
   14b6c:	4622      	mov	r2, r4
   14b6e:	4621      	mov	r1, r4
   14b70:	2018      	movs	r0, #24
   14b72:	f7f0 fd97 	bl	56a4 <z_arm_irq_priority_set>
	irq_enable(RADIO_IRQn);
   14b76:	2001      	movs	r0, #1
   14b78:	f7f0 fd62 	bl	5640 <arch_irq_enable>
	irq_enable(RTC0_IRQn);
   14b7c:	200b      	movs	r0, #11
   14b7e:	f7f0 fd5f 	bl	5640 <arch_irq_enable>
	irq_enable(HAL_SWI_RADIO_IRQ);
   14b82:	2018      	movs	r0, #24
   14b84:	f7f0 fd5c 	bl	5640 <arch_irq_enable>
	radio_setup();
   14b88:	f00f ff4f 	bl	24a2a <radio_setup>
	return 0;
   14b8c:	4620      	mov	r0, r4
}
   14b8e:	bd10      	pop	{r4, pc}
		return -ENODEV;
   14b90:	f06f 0012 	mvn.w	r0, #18
   14b94:	e7fb      	b.n	14b8e <lll_init+0x52>
   14b96:	bf00      	nop
   14b98:	00027f52 	.word	0x00027f52
   14b9c:	200030cc 	.word	0x200030cc
   14ba0:	200030d0 	.word	0x200030d0

00014ba4 <lll_csrand_get>:
	return entropy_get_entropy(dev_entropy, buf, len);
   14ba4:	4a05      	ldr	r2, [pc, #20]	; (14bbc <lll_csrand_get+0x18>)
{
   14ba6:	b410      	push	{r4}
   14ba8:	4603      	mov	r3, r0
	return entropy_get_entropy(dev_entropy, buf, len);
   14baa:	6810      	ldr	r0, [r2, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   14bac:	6882      	ldr	r2, [r0, #8]
   14bae:	6814      	ldr	r4, [r2, #0]
   14bb0:	b28a      	uxth	r2, r1
   14bb2:	4619      	mov	r1, r3
   14bb4:	4623      	mov	r3, r4
}
   14bb6:	bc10      	pop	{r4}
   14bb8:	4718      	bx	r3
   14bba:	bf00      	nop
   14bbc:	200030cc 	.word	0x200030cc

00014bc0 <lll_csrand_isr_get>:
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   14bc0:	4b08      	ldr	r3, [pc, #32]	; (14be4 <lll_csrand_isr_get+0x24>)
{
   14bc2:	b430      	push	{r4, r5}
   14bc4:	4604      	mov	r4, r0
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   14bc6:	6818      	ldr	r0, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   14bc8:	6883      	ldr	r3, [r0, #8]
   14bca:	685d      	ldr	r5, [r3, #4]
   14bcc:	b28a      	uxth	r2, r1
   14bce:	b125      	cbz	r5, 14bda <lll_csrand_isr_get+0x1a>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   14bd0:	4621      	mov	r1, r4
   14bd2:	46ac      	mov	ip, r5
   14bd4:	2300      	movs	r3, #0
}
   14bd6:	bc30      	pop	{r4, r5}
   14bd8:	4760      	bx	ip
   14bda:	f06f 0085 	mvn.w	r0, #133	; 0x85
   14bde:	bc30      	pop	{r4, r5}
   14be0:	4770      	bx	lr
   14be2:	bf00      	nop
   14be4:	200030cc 	.word	0x200030cc

00014be8 <lll_disable>:
{
   14be8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   14bea:	4b19      	ldr	r3, [pc, #100]	; (14c50 <lll_disable+0x68>)
	if (!param || (param == event.curr.param)) {
   14bec:	4604      	mov	r4, r0
   14bee:	b110      	cbz	r0, 14bf6 <lll_disable+0xe>
   14bf0:	681a      	ldr	r2, [r3, #0]
   14bf2:	4282      	cmp	r2, r0
   14bf4:	d105      	bne.n	14c02 <lll_disable+0x1a>
		if (event.curr.abort_cb && event.curr.param) {
   14bf6:	689a      	ldr	r2, [r3, #8]
   14bf8:	b16a      	cbz	r2, 14c16 <lll_disable+0x2e>
   14bfa:	6819      	ldr	r1, [r3, #0]
   14bfc:	b159      	cbz	r1, 14c16 <lll_disable+0x2e>
			event.curr.abort_cb(NULL, event.curr.param);
   14bfe:	2000      	movs	r0, #0
   14c00:	4790      	blx	r2
		idx = UINT8_MAX;
   14c02:	25ff      	movs	r5, #255	; 0xff
				idx = UINT8_MAX;
   14c04:	f88d 5007 	strb.w	r5, [sp, #7]
			next = ull_prepare_dequeue_iter(&idx);
   14c08:	f10d 0007 	add.w	r0, sp, #7
   14c0c:	f7fd fb4a 	bl	122a4 <ull_prepare_dequeue_iter>
		while (next) {
   14c10:	b980      	cbnz	r0, 14c34 <lll_disable+0x4c>
}
   14c12:	b003      	add	sp, #12
   14c14:	bd30      	pop	{r4, r5, pc}
			LL_ASSERT(!param);
   14c16:	2c00      	cmp	r4, #0
   14c18:	d0f3      	beq.n	14c02 <lll_disable+0x1a>
   14c1a:	4a0e      	ldr	r2, [pc, #56]	; (14c54 <lll_disable+0x6c>)
   14c1c:	490e      	ldr	r1, [pc, #56]	; (14c58 <lll_disable+0x70>)
   14c1e:	480f      	ldr	r0, [pc, #60]	; (14c5c <lll_disable+0x74>)
   14c20:	23fd      	movs	r3, #253	; 0xfd
   14c22:	f007 fb51 	bl	1c2c8 <printk>
   14c26:	4040      	eors	r0, r0
   14c28:	f380 8811 	msr	BASEPRI, r0
   14c2c:	f04f 0003 	mov.w	r0, #3
   14c30:	df02      	svc	2
   14c32:	e7e6      	b.n	14c02 <lll_disable+0x1a>
			if (!next->is_aborted &&
   14c34:	7f03      	ldrb	r3, [r0, #28]
   14c36:	079b      	lsls	r3, r3, #30
   14c38:	d4e6      	bmi.n	14c08 <lll_disable+0x20>
			    (!param || (param == next->prepare_param.param))) {
   14c3a:	68c1      	ldr	r1, [r0, #12]
			if (!next->is_aborted &&
   14c3c:	b10c      	cbz	r4, 14c42 <lll_disable+0x5a>
			    (!param || (param == next->prepare_param.param))) {
   14c3e:	428c      	cmp	r4, r1
   14c40:	d1e2      	bne.n	14c08 <lll_disable+0x20>
				next->is_aborted = 1;
   14c42:	7f03      	ldrb	r3, [r0, #28]
   14c44:	f043 0302 	orr.w	r3, r3, #2
   14c48:	7703      	strb	r3, [r0, #28]
				next->abort_cb(&next->prepare_param,
   14c4a:	6983      	ldr	r3, [r0, #24]
   14c4c:	4798      	blx	r3
   14c4e:	e7d9      	b.n	14c04 <lll_disable+0x1c>
   14c50:	200030d0 	.word	0x200030d0
   14c54:	00027e79 	.word	0x00027e79
   14c58:	00027f56 	.word	0x00027f56
   14c5c:	00027514 	.word	0x00027514

00014c60 <lll_done>:
{
   14c60:	b538      	push	{r3, r4, r5, lr}
   14c62:	4604      	mov	r4, r0
	next = ull_prepare_dequeue_get();
   14c64:	f7fd fb10 	bl	12288 <ull_prepare_dequeue_get>
	LL_ASSERT(!param || next);
   14c68:	b17c      	cbz	r4, 14c8a <lll_done+0x2a>
   14c6a:	b960      	cbnz	r0, 14c86 <lll_done+0x26>
   14c6c:	4a1d      	ldr	r2, [pc, #116]	; (14ce4 <lll_done+0x84>)
   14c6e:	491e      	ldr	r1, [pc, #120]	; (14ce8 <lll_done+0x88>)
   14c70:	481e      	ldr	r0, [pc, #120]	; (14cec <lll_done+0x8c>)
   14c72:	f240 1337 	movw	r3, #311	; 0x137
   14c76:	f007 fb27 	bl	1c2c8 <printk>
   14c7a:	4040      	eors	r0, r0
   14c7c:	f380 8811 	msr	BASEPRI, r0
   14c80:	f04f 0003 	mov.w	r0, #3
   14c84:	df02      	svc	2
			ull = HDR_LLL2ULL(param);
   14c86:	6824      	ldr	r4, [r4, #0]
   14c88:	e015      	b.n	14cb6 <lll_done+0x56>
		LL_ASSERT(event.curr.abort_cb);
   14c8a:	4d19      	ldr	r5, [pc, #100]	; (14cf0 <lll_done+0x90>)
   14c8c:	68ab      	ldr	r3, [r5, #8]
   14c8e:	b963      	cbnz	r3, 14caa <lll_done+0x4a>
   14c90:	4a14      	ldr	r2, [pc, #80]	; (14ce4 <lll_done+0x84>)
   14c92:	4918      	ldr	r1, [pc, #96]	; (14cf4 <lll_done+0x94>)
   14c94:	4815      	ldr	r0, [pc, #84]	; (14cec <lll_done+0x8c>)
   14c96:	f240 133d 	movw	r3, #317	; 0x13d
   14c9a:	f007 fb15 	bl	1c2c8 <printk>
   14c9e:	4040      	eors	r0, r0
   14ca0:	f380 8811 	msr	BASEPRI, r0
   14ca4:	f04f 0003 	mov.w	r0, #3
   14ca8:	df02      	svc	2
		param = event.curr.param;
   14caa:	682c      	ldr	r4, [r5, #0]
		event.curr.abort_cb = NULL;
   14cac:	2300      	movs	r3, #0
   14cae:	60ab      	str	r3, [r5, #8]
		event.curr.param = NULL;
   14cb0:	602b      	str	r3, [r5, #0]
		if (param) {
   14cb2:	2c00      	cmp	r4, #0
   14cb4:	d1e7      	bne.n	14c86 <lll_done+0x26>
	ull_prepare_dequeue(TICKER_USER_ID_LLL);
   14cb6:	2000      	movs	r0, #0
   14cb8:	f7fd fb12 	bl	122e0 <ull_prepare_dequeue>
	evdone = ull_event_done(ull);
   14cbc:	4620      	mov	r0, r4
   14cbe:	f7fd fb67 	bl	12390 <ull_event_done>
	LL_ASSERT(evdone);
   14cc2:	b960      	cbnz	r0, 14cde <lll_done+0x7e>
   14cc4:	4a07      	ldr	r2, [pc, #28]	; (14ce4 <lll_done+0x84>)
   14cc6:	490c      	ldr	r1, [pc, #48]	; (14cf8 <lll_done+0x98>)
   14cc8:	4808      	ldr	r0, [pc, #32]	; (14cec <lll_done+0x8c>)
   14cca:	f240 136d 	movw	r3, #365	; 0x16d
   14cce:	f007 fafb 	bl	1c2c8 <printk>
   14cd2:	4040      	eors	r0, r0
   14cd4:	f380 8811 	msr	BASEPRI, r0
   14cd8:	f04f 0003 	mov.w	r0, #3
   14cdc:	df02      	svc	2
}
   14cde:	2000      	movs	r0, #0
   14ce0:	bd38      	pop	{r3, r4, r5, pc}
   14ce2:	bf00      	nop
   14ce4:	00027e79 	.word	0x00027e79
   14ce8:	00027f5d 	.word	0x00027f5d
   14cec:	00027514 	.word	0x00027514
   14cf0:	200030d0 	.word	0x200030d0
   14cf4:	00027f6c 	.word	0x00027f6c
   14cf8:	00027f80 	.word	0x00027f80

00014cfc <lll_is_done>:
	*is_resume = (param != event.curr.param);
   14cfc:	4a05      	ldr	r2, [pc, #20]	; (14d14 <lll_is_done+0x18>)
   14cfe:	6813      	ldr	r3, [r2, #0]
   14d00:	1a1b      	subs	r3, r3, r0
	return !event.curr.abort_cb;
   14d02:	6890      	ldr	r0, [r2, #8]
	*is_resume = (param != event.curr.param);
   14d04:	bf18      	it	ne
   14d06:	2301      	movne	r3, #1
}
   14d08:	fab0 f080 	clz	r0, r0
	*is_resume = (param != event.curr.param);
   14d0c:	700b      	strb	r3, [r1, #0]
}
   14d0e:	0940      	lsrs	r0, r0, #5
   14d10:	4770      	bx	lr
   14d12:	bf00      	nop
   14d14:	200030d0 	.word	0x200030d0

00014d18 <lll_chan_set>:
	switch (chan) {
   14d18:	2826      	cmp	r0, #38	; 0x26
{
   14d1a:	b510      	push	{r4, lr}
   14d1c:	4604      	mov	r4, r0
	switch (chan) {
   14d1e:	d00b      	beq.n	14d38 <lll_chan_set+0x20>
   14d20:	2827      	cmp	r0, #39	; 0x27
   14d22:	d00b      	beq.n	14d3c <lll_chan_set+0x24>
   14d24:	2825      	cmp	r0, #37	; 0x25
   14d26:	d10b      	bne.n	14d40 <lll_chan_set+0x28>
		radio_freq_chan_set(2);
   14d28:	2002      	movs	r0, #2
		radio_freq_chan_set(26);
   14d2a:	f001 fcf7 	bl	1671c <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   14d2e:	4620      	mov	r0, r4
}
   14d30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   14d34:	f001 bcf8 	b.w	16728 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
   14d38:	201a      	movs	r0, #26
   14d3a:	e7f6      	b.n	14d2a <lll_chan_set+0x12>
		radio_freq_chan_set(80);
   14d3c:	2050      	movs	r0, #80	; 0x50
   14d3e:	e7f4      	b.n	14d2a <lll_chan_set+0x12>
		if (chan < 11) {
   14d40:	280a      	cmp	r0, #10
   14d42:	d802      	bhi.n	14d4a <lll_chan_set+0x32>
			radio_freq_chan_set(4 + (chan * 2U));
   14d44:	3002      	adds	r0, #2
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
   14d46:	0040      	lsls	r0, r0, #1
   14d48:	e7ef      	b.n	14d2a <lll_chan_set+0x12>
		} else if (chan < 40) {
   14d4a:	2827      	cmp	r0, #39	; 0x27
   14d4c:	d801      	bhi.n	14d52 <lll_chan_set+0x3a>
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
   14d4e:	3003      	adds	r0, #3
   14d50:	e7f9      	b.n	14d46 <lll_chan_set+0x2e>
			LL_ASSERT(0);
   14d52:	4a07      	ldr	r2, [pc, #28]	; (14d70 <lll_chan_set+0x58>)
   14d54:	4907      	ldr	r1, [pc, #28]	; (14d74 <lll_chan_set+0x5c>)
   14d56:	4808      	ldr	r0, [pc, #32]	; (14d78 <lll_chan_set+0x60>)
   14d58:	f240 13df 	movw	r3, #479	; 0x1df
   14d5c:	f007 fab4 	bl	1c2c8 <printk>
   14d60:	4040      	eors	r0, r0
   14d62:	f380 8811 	msr	BASEPRI, r0
   14d66:	f04f 0003 	mov.w	r0, #3
   14d6a:	df02      	svc	2
   14d6c:	e7df      	b.n	14d2e <lll_chan_set+0x16>
   14d6e:	bf00      	nop
   14d70:	00027e79 	.word	0x00027e79
   14d74:	0002826c 	.word	0x0002826c
   14d78:	00027514 	.word	0x00027514

00014d7c <lll_isr_cleanup>:
{
   14d7c:	b508      	push	{r3, lr}
   14d7e:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   14d80:	480f      	ldr	r0, [pc, #60]	; (14dc0 <lll_isr_cleanup+0x44>)
   14d82:	f001 fc71 	bl	16668 <radio_isr_set>
	if (!radio_is_idle()) {
   14d86:	f001 fd69 	bl	1685c <radio_is_idle>
   14d8a:	b908      	cbnz	r0, 14d90 <lll_isr_cleanup+0x14>
		radio_disable();
   14d8c:	f001 fd34 	bl	167f8 <radio_disable>
	radio_tmr_stop();
   14d90:	f001 ff38 	bl	16c04 <radio_tmr_stop>
	err = lll_hfclock_off();
   14d94:	f000 f954 	bl	15040 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   14d98:	2800      	cmp	r0, #0
   14d9a:	da0c      	bge.n	14db6 <lll_isr_cleanup+0x3a>
   14d9c:	4a09      	ldr	r2, [pc, #36]	; (14dc4 <lll_isr_cleanup+0x48>)
   14d9e:	490a      	ldr	r1, [pc, #40]	; (14dc8 <lll_isr_cleanup+0x4c>)
   14da0:	480a      	ldr	r0, [pc, #40]	; (14dcc <lll_isr_cleanup+0x50>)
   14da2:	f240 2342 	movw	r3, #578	; 0x242
   14da6:	f007 fa8f 	bl	1c2c8 <printk>
   14daa:	4040      	eors	r0, r0
   14dac:	f380 8811 	msr	BASEPRI, r0
   14db0:	f04f 0003 	mov.w	r0, #3
   14db4:	df02      	svc	2
}
   14db6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   14dba:	2000      	movs	r0, #0
   14dbc:	f7ff bf50 	b.w	14c60 <lll_done>
   14dc0:	000245a3 	.word	0x000245a3
   14dc4:	00027e79 	.word	0x00027e79
   14dc8:	00027f87 	.word	0x00027f87
   14dcc:	00027514 	.word	0x00027514

00014dd0 <lll_isr_early_abort>:
{
   14dd0:	b508      	push	{r3, lr}
   14dd2:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   14dd4:	480e      	ldr	r0, [pc, #56]	; (14e10 <lll_isr_early_abort+0x40>)
   14dd6:	f001 fc47 	bl	16668 <radio_isr_set>
	if (!radio_is_idle()) {
   14dda:	f001 fd3f 	bl	1685c <radio_is_idle>
   14dde:	b908      	cbnz	r0, 14de4 <lll_isr_early_abort+0x14>
		radio_disable();
   14de0:	f001 fd0a 	bl	167f8 <radio_disable>
	err = lll_hfclock_off();
   14de4:	f000 f92c 	bl	15040 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   14de8:	2800      	cmp	r0, #0
   14dea:	da0c      	bge.n	14e06 <lll_isr_early_abort+0x36>
   14dec:	4a09      	ldr	r2, [pc, #36]	; (14e14 <lll_isr_early_abort+0x44>)
   14dee:	490a      	ldr	r1, [pc, #40]	; (14e18 <lll_isr_early_abort+0x48>)
   14df0:	480a      	ldr	r0, [pc, #40]	; (14e1c <lll_isr_early_abort+0x4c>)
   14df2:	f240 2351 	movw	r3, #593	; 0x251
   14df6:	f007 fa67 	bl	1c2c8 <printk>
   14dfa:	4040      	eors	r0, r0
   14dfc:	f380 8811 	msr	BASEPRI, r0
   14e00:	f04f 0003 	mov.w	r0, #3
   14e04:	df02      	svc	2
}
   14e06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   14e0a:	2000      	movs	r0, #0
   14e0c:	f7ff bf28 	b.w	14c60 <lll_done>
   14e10:	000245a3 	.word	0x000245a3
   14e14:	00027e79 	.word	0x00027e79
   14e18:	00027f87 	.word	0x00027f87
   14e1c:	00027514 	.word	0x00027514

00014e20 <lll_prepare_resolve>:
{
   14e20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   14e24:	461d      	mov	r5, r3
   14e26:	f89d a030 	ldrb.w	sl, [sp, #48]	; 0x30
	idx = UINT8_MAX;
   14e2a:	23ff      	movs	r3, #255	; 0xff
{
   14e2c:	4681      	mov	r9, r0
   14e2e:	4688      	mov	r8, r1
   14e30:	4616      	mov	r6, r2
	idx = UINT8_MAX;
   14e32:	f88d 300f 	strb.w	r3, [sp, #15]
		p = ull_prepare_dequeue_iter(&idx);
   14e36:	f10d 000f 	add.w	r0, sp, #15
   14e3a:	f7fd fa33 	bl	122a4 <ull_prepare_dequeue_iter>
   14e3e:	4604      	mov	r4, r0
	while (p && (p->is_aborted || p->is_resume)) {
   14e40:	b110      	cbz	r0, 14e48 <lll_prepare_resolve+0x28>
   14e42:	7f03      	ldrb	r3, [r0, #28]
   14e44:	079b      	lsls	r3, r3, #30
   14e46:	d1f6      	bne.n	14e36 <lll_prepare_resolve+0x16>
	    event.curr.abort_cb ||
   14e48:	4f41      	ldr	r7, [pc, #260]	; (14f50 <lll_prepare_resolve+0x130>)
	if ((!is_dequeue && !is_done_sync()) ||
   14e4a:	68bb      	ldr	r3, [r7, #8]
   14e4c:	b923      	cbnz	r3, 14e58 <lll_prepare_resolve+0x38>
	    event.curr.abort_cb ||
   14e4e:	2c00      	cmp	r4, #0
   14e50:	d046      	beq.n	14ee0 <lll_prepare_resolve+0xc0>
	    (p && is_resume)) {
   14e52:	f1ba 0f00 	cmp.w	sl, #0
   14e56:	d034      	beq.n	14ec2 <lll_prepare_resolve+0xa2>
		next = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   14e58:	462a      	mov	r2, r5
   14e5a:	f8cd a000 	str.w	sl, [sp]
   14e5e:	4633      	mov	r3, r6
   14e60:	4641      	mov	r1, r8
   14e62:	4648      	mov	r0, r9
   14e64:	f7fd f9e2 	bl	1222c <ull_prepare_enqueue>
		LL_ASSERT(next);
   14e68:	4605      	mov	r5, r0
   14e6a:	b960      	cbnz	r0, 14e86 <lll_prepare_resolve+0x66>
   14e6c:	4a39      	ldr	r2, [pc, #228]	; (14f54 <lll_prepare_resolve+0x134>)
   14e6e:	493a      	ldr	r1, [pc, #232]	; (14f58 <lll_prepare_resolve+0x138>)
   14e70:	483a      	ldr	r0, [pc, #232]	; (14f5c <lll_prepare_resolve+0x13c>)
   14e72:	f240 238d 	movw	r3, #653	; 0x28d
   14e76:	f007 fa27 	bl	1c2c8 <printk>
   14e7a:	4040      	eors	r0, r0
   14e7c:	f380 8811 	msr	BASEPRI, r0
   14e80:	f04f 0003 	mov.w	r0, #3
   14e84:	df02      	svc	2
		if (is_resume) {
   14e86:	f1ba 0f00 	cmp.w	sl, #0
   14e8a:	d005      	beq.n	14e98 <lll_prepare_resolve+0x78>
		return -EINPROGRESS;
   14e8c:	f06f 0476 	mvn.w	r4, #118	; 0x76
}
   14e90:	4620      	mov	r0, r4
   14e92:	b004      	add	sp, #16
   14e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ret  = preempt_ticker_start(p, next);
   14e98:	4629      	mov	r1, r5
   14e9a:	4620      	mov	r0, r4
   14e9c:	f7ff fd64 	bl	14968 <preempt_ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   14ea0:	f030 0302 	bics.w	r3, r0, #2
   14ea4:	d0f2      	beq.n	14e8c <lll_prepare_resolve+0x6c>
   14ea6:	4a2b      	ldr	r2, [pc, #172]	; (14f54 <lll_prepare_resolve+0x134>)
   14ea8:	492d      	ldr	r1, [pc, #180]	; (14f60 <lll_prepare_resolve+0x140>)
   14eaa:	482c      	ldr	r0, [pc, #176]	; (14f5c <lll_prepare_resolve+0x13c>)
   14eac:	f44f 7326 	mov.w	r3, #664	; 0x298
   14eb0:	f007 fa0a 	bl	1c2c8 <printk>
   14eb4:	4040      	eors	r0, r0
   14eb6:	f380 8811 	msr	BASEPRI, r0
   14eba:	f04f 0003 	mov.w	r0, #3
   14ebe:	df02      	svc	2
   14ec0:	e7e4      	b.n	14e8c <lll_prepare_resolve+0x6c>
	LL_ASSERT(!p || &p->prepare_param == prepare_param);
   14ec2:	42ac      	cmp	r4, r5
   14ec4:	d00c      	beq.n	14ee0 <lll_prepare_resolve+0xc0>
   14ec6:	4a23      	ldr	r2, [pc, #140]	; (14f54 <lll_prepare_resolve+0x134>)
   14ec8:	4926      	ldr	r1, [pc, #152]	; (14f64 <lll_prepare_resolve+0x144>)
   14eca:	4824      	ldr	r0, [pc, #144]	; (14f5c <lll_prepare_resolve+0x13c>)
   14ecc:	f240 23be 	movw	r3, #702	; 0x2be
   14ed0:	f007 f9fa 	bl	1c2c8 <printk>
   14ed4:	4040      	eors	r0, r0
   14ed6:	f380 8811 	msr	BASEPRI, r0
   14eda:	f04f 0003 	mov.w	r0, #3
   14ede:	df02      	svc	2
	event.curr.param = prepare_param->param;
   14ee0:	68eb      	ldr	r3, [r5, #12]
	event.curr.abort_cb = abort_cb;
   14ee2:	f8c7 8008 	str.w	r8, [r7, #8]
	event.curr.is_abort_cb = is_abort_cb;
   14ee6:	e9c7 3900 	strd	r3, r9, [r7]
	err = prepare_cb(prepare_param);
   14eea:	4628      	mov	r0, r5
   14eec:	47b0      	blx	r6
   14eee:	4604      	mov	r4, r0
	ret = preempt_ticker_stop();
   14ef0:	f7ff fcfa 	bl	148e8 <preempt_ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   14ef4:	f030 0302 	bics.w	r3, r0, #2
   14ef8:	d00c      	beq.n	14f14 <lll_prepare_resolve+0xf4>
   14efa:	4a16      	ldr	r2, [pc, #88]	; (14f54 <lll_prepare_resolve+0x134>)
   14efc:	4918      	ldr	r1, [pc, #96]	; (14f60 <lll_prepare_resolve+0x140>)
   14efe:	4817      	ldr	r0, [pc, #92]	; (14f5c <lll_prepare_resolve+0x13c>)
   14f00:	f240 23cb 	movw	r3, #715	; 0x2cb
   14f04:	f007 f9e0 	bl	1c2c8 <printk>
   14f08:	4040      	eors	r0, r0
   14f0a:	f380 8811 	msr	BASEPRI, r0
   14f0e:	f04f 0003 	mov.w	r0, #3
   14f12:	df02      	svc	2
		p = ull_prepare_dequeue_iter(&idx);
   14f14:	f10d 000f 	add.w	r0, sp, #15
   14f18:	f7fd f9c4 	bl	122a4 <ull_prepare_dequeue_iter>
		if (!p) {
   14f1c:	4601      	mov	r1, r0
   14f1e:	2800      	cmp	r0, #0
   14f20:	d0b6      	beq.n	14e90 <lll_prepare_resolve+0x70>
	} while (p->is_aborted || p->is_resume);
   14f22:	7f00      	ldrb	r0, [r0, #28]
   14f24:	f010 0003 	ands.w	r0, r0, #3
   14f28:	d1f4      	bne.n	14f14 <lll_prepare_resolve+0xf4>
	ret = preempt_ticker_start(NULL, p);
   14f2a:	f7ff fd1d 	bl	14968 <preempt_ticker_start>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   14f2e:	f030 0302 	bics.w	r3, r0, #2
   14f32:	d0ad      	beq.n	14e90 <lll_prepare_resolve+0x70>
   14f34:	4a07      	ldr	r2, [pc, #28]	; (14f54 <lll_prepare_resolve+0x134>)
   14f36:	490a      	ldr	r1, [pc, #40]	; (14f60 <lll_prepare_resolve+0x140>)
   14f38:	4808      	ldr	r0, [pc, #32]	; (14f5c <lll_prepare_resolve+0x13c>)
   14f3a:	f44f 7336 	mov.w	r3, #728	; 0x2d8
   14f3e:	f007 f9c3 	bl	1c2c8 <printk>
   14f42:	4040      	eors	r0, r0
   14f44:	f380 8811 	msr	BASEPRI, r0
   14f48:	f04f 0003 	mov.w	r0, #3
   14f4c:	df02      	svc	2
   14f4e:	e79f      	b.n	14e90 <lll_prepare_resolve+0x70>
   14f50:	200030d0 	.word	0x200030d0
   14f54:	00027e79 	.word	0x00027e79
   14f58:	00027f67 	.word	0x00027f67
   14f5c:	00027514 	.word	0x00027514
   14f60:	00027add 	.word	0x00027add
   14f64:	00027f90 	.word	0x00027f90

00014f68 <blocking_on>:

	k_sem_give(&clk_state->sem);
}

static int blocking_on(struct onoff_manager *mgr, uint32_t timeout)
{
   14f68:	b570      	push	{r4, r5, r6, lr}
   14f6a:	4606      	mov	r6, r0
   14f6c:	b08a      	sub	sp, #40	; 0x28
   14f6e:	460d      	mov	r5, r1
	return z_impl_k_sem_init(sem, initial_count, limit);
   14f70:	2201      	movs	r2, #1
   14f72:	2100      	movs	r1, #0
   14f74:	a804      	add	r0, sp, #16
   14f76:	f010 fdd5 	bl	25b24 <z_impl_k_sem_init>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
   14f7a:	4b0f      	ldr	r3, [pc, #60]	; (14fb8 <blocking_on+0x50>)
   14f7c:	9301      	str	r3, [sp, #4]
   14f7e:	2400      	movs	r4, #0
   14f80:	2303      	movs	r3, #3
	struct lll_clock_state state;
	int err;

	k_sem_init(&state.sem, 0, 1);
	sys_notify_init_callback(&state.cli.notify, clock_ready);
	err = onoff_request(mgr, &state.cli);
   14f82:	4669      	mov	r1, sp
   14f84:	4630      	mov	r0, r6
   14f86:	9403      	str	r4, [sp, #12]
   14f88:	9302      	str	r3, [sp, #8]
   14f8a:	f007 fa26 	bl	1c3da <onoff_request>
	if (err < 0) {
   14f8e:	2800      	cmp	r0, #0
   14f90:	db10      	blt.n	14fb4 <blocking_on+0x4c>
   14f92:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   14f96:	4621      	mov	r1, r4
   14f98:	f240 30e7 	movw	r0, #999	; 0x3e7
   14f9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   14fa0:	2300      	movs	r3, #0
   14fa2:	fbe5 0106 	umlal	r0, r1, r5, r6
   14fa6:	f7ec fa67 	bl	1478 <__aeabi_uldivmod>
   14faa:	4602      	mov	r2, r0
   14fac:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   14fae:	a804      	add	r0, sp, #16
   14fb0:	f006 f9d0 	bl	1b354 <z_impl_k_sem_take>
		return err;
	}

	return k_sem_take(&state.sem, K_MSEC(timeout));
}
   14fb4:	b00a      	add	sp, #40	; 0x28
   14fb6:	bd70      	pop	{r4, r5, r6, pc}
   14fb8:	00024661 	.word	0x00024661

00014fbc <lll_clock_init>:

int lll_clock_init(void)
{
   14fbc:	b508      	push	{r3, lr}
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   14fbe:	2001      	movs	r0, #1
   14fc0:	f002 ff30 	bl	17e24 <z_nrf_clock_control_get_onoff>
	*notify = (struct sys_notify){
   14fc4:	4904      	ldr	r1, [pc, #16]	; (14fd8 <lll_clock_init+0x1c>)
   14fc6:	2300      	movs	r3, #0
   14fc8:	604b      	str	r3, [r1, #4]
   14fca:	60cb      	str	r3, [r1, #12]
   14fcc:	2301      	movs	r3, #1
   14fce:	608b      	str	r3, [r1, #8]

	sys_notify_init_spinwait(&lf_cli.notify);

	return onoff_request(mgr, &lf_cli);
}
   14fd0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return onoff_request(mgr, &lf_cli);
   14fd4:	f007 ba01 	b.w	1c3da <onoff_request>
   14fd8:	200030ec 	.word	0x200030ec

00014fdc <lll_clock_wait>:
{
	struct onoff_manager *mgr;
	static bool done;
	int err;

	if (done) {
   14fdc:	4b0c      	ldr	r3, [pc, #48]	; (15010 <lll_clock_wait+0x34>)
   14fde:	781a      	ldrb	r2, [r3, #0]
{
   14fe0:	b510      	push	{r4, lr}
	if (done) {
   14fe2:	b10a      	cbz	r2, 14fe8 <lll_clock_wait+0xc>
		return 0;
   14fe4:	2000      	movs	r0, #0
	if (err != ONOFF_STATE_ON) {
		return -EIO;
	}

	return 0;
}
   14fe6:	bd10      	pop	{r4, pc}
	done = true;
   14fe8:	2001      	movs	r0, #1
   14fea:	7018      	strb	r0, [r3, #0]
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   14fec:	f002 ff1a 	bl	17e24 <z_nrf_clock_control_get_onoff>
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   14ff0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   14ff4:	4604      	mov	r4, r0
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   14ff6:	f7ff ffb7 	bl	14f68 <blocking_on>
	if (err) {
   14ffa:	2800      	cmp	r0, #0
   14ffc:	d1f3      	bne.n	14fe6 <lll_clock_wait+0xa>
	err = onoff_release(mgr);
   14ffe:	4620      	mov	r0, r4
   15000:	f007 fa34 	bl	1c46c <onoff_release>
	if (err != ONOFF_STATE_ON) {
   15004:	2802      	cmp	r0, #2
   15006:	d0ed      	beq.n	14fe4 <lll_clock_wait+0x8>
		return -EIO;
   15008:	f06f 0004 	mvn.w	r0, #4
   1500c:	e7eb      	b.n	14fe6 <lll_clock_wait+0xa>
   1500e:	bf00      	nop
   15010:	20004102 	.word	0x20004102

00015014 <lll_hfclock_on>:

int lll_hfclock_on(void)
{
   15014:	b508      	push	{r3, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   15016:	4b09      	ldr	r3, [pc, #36]	; (1503c <lll_hfclock_on+0x28>)
   15018:	f3bf 8f5b 	dmb	ish
   1501c:	e853 2f00 	ldrex	r2, [r3]
   15020:	1c51      	adds	r1, r2, #1
   15022:	e843 1000 	strex	r0, r1, [r3]
   15026:	2800      	cmp	r0, #0
   15028:	d1f8      	bne.n	1501c <lll_hfclock_on+0x8>
   1502a:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&hf_refcnt) > 0) {
   1502e:	2a00      	cmp	r2, #0
   15030:	dc01      	bgt.n	15036 <lll_hfclock_on+0x22>
		return 0;
	}

	z_nrf_clock_bt_ctlr_hf_request();
   15032:	f002 feff 	bl	17e34 <z_nrf_clock_bt_ctlr_hf_request>
	DEBUG_RADIO_XTAL(1);

	return 0;
}
   15036:	2000      	movs	r0, #0
   15038:	bd08      	pop	{r3, pc}
   1503a:	bf00      	nop
   1503c:	200030e8 	.word	0x200030e8

00015040 <lll_hfclock_off>:

	return err;
}

int lll_hfclock_off(void)
{
   15040:	b508      	push	{r3, lr}
	if (hf_refcnt < 1) {
   15042:	4b0c      	ldr	r3, [pc, #48]	; (15074 <lll_hfclock_off+0x34>)
   15044:	681a      	ldr	r2, [r3, #0]
   15046:	2a00      	cmp	r2, #0
   15048:	dd10      	ble.n	1506c <lll_hfclock_off+0x2c>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1504a:	f3bf 8f5b 	dmb	ish
   1504e:	e853 2f00 	ldrex	r2, [r3]
   15052:	1e51      	subs	r1, r2, #1
   15054:	e843 1000 	strex	r0, r1, [r3]
   15058:	2800      	cmp	r0, #0
   1505a:	d1f8      	bne.n	1504e <lll_hfclock_off+0xe>
   1505c:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
	}

	if (atomic_dec(&hf_refcnt) > 1) {
   15060:	2a01      	cmp	r2, #1
   15062:	dc01      	bgt.n	15068 <lll_hfclock_off+0x28>
		return 0;
	}

	z_nrf_clock_bt_ctlr_hf_release();
   15064:	f002 fefc 	bl	17e60 <z_nrf_clock_bt_ctlr_hf_release>
		return 0;
   15068:	2000      	movs	r0, #0
   1506a:	e001      	b.n	15070 <lll_hfclock_off+0x30>
		return -EALREADY;
   1506c:	f06f 0077 	mvn.w	r0, #119	; 0x77
	DEBUG_RADIO_XTAL(0);

	return 0;
}
   15070:	bd08      	pop	{r3, pc}
   15072:	bf00      	nop
   15074:	200030e8 	.word	0x200030e8

00015078 <lll_clock_ppm_get>:
}

uint32_t lll_clock_ppm_get(uint8_t sca)
{
	return sca_ppm_lut[sca];
}
   15078:	4b01      	ldr	r3, [pc, #4]	; (15080 <lll_clock_ppm_get+0x8>)
   1507a:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   1507e:	4770      	bx	lr
   15080:	000271a4 	.word	0x000271a4

00015084 <isr_tx>:

	lll_done(param);
}

static void isr_tx(void *param)
{
   15084:	b538      	push	{r3, r4, r5, lr}
   15086:	4605      	mov	r5, r0
		lll_prof_latency_capture();
		node_rx_prof = lll_prof_reserve();
	}

	/* Clear radio tx status and events */
	lll_isr_tx_status_reset();
   15088:	f00f fac4 	bl	24614 <lll_isr_tx_status_reset>

	/* setup tIFS switching */
	radio_tmr_tifs_set(EVENT_IFS_US);
   1508c:	2096      	movs	r0, #150	; 0x96
   1508e:	f001 fd23 	bl	16ad8 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(phy_p, 0, phy_p, phy_flags);
   15092:	2300      	movs	r3, #0
   15094:	4618      	mov	r0, r3
   15096:	461a      	mov	r2, r3
   15098:	4619      	mov	r1, r3
   1509a:	f001 fc8b 	bl	169b4 <radio_switch_complete_and_tx>

	/* setup Rx buffer */
	node_rx = ull_pdu_rx_alloc_peek(1);
   1509e:	2001      	movs	r0, #1
   150a0:	f7fd f870 	bl	12184 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   150a4:	4604      	mov	r4, r0
   150a6:	b960      	cbnz	r0, 150c2 <isr_tx+0x3e>
   150a8:	4a1c      	ldr	r2, [pc, #112]	; (1511c <isr_tx+0x98>)
   150aa:	491d      	ldr	r1, [pc, #116]	; (15120 <isr_tx+0x9c>)
   150ac:	481d      	ldr	r0, [pc, #116]	; (15124 <isr_tx+0xa0>)
   150ae:	f240 4341 	movw	r3, #1089	; 0x441
   150b2:	f007 f909 	bl	1c2c8 <printk>
   150b6:	4040      	eors	r0, r0
   150b8:	f380 8811 	msr	BASEPRI, r0
   150bc:	f04f 0003 	mov.w	r0, #3
   150c0:	df02      	svc	2
	radio_pkt_rx_set(node_rx->pdu);
   150c2:	f104 001c 	add.w	r0, r4, #28
   150c6:	f001 fb7f 	bl	167c8 <radio_pkt_rx_set>

	/* assert if radio packet ptr is not set and radio started rx */
	LL_ASSERT(!radio_is_ready());
   150ca:	f001 fbb3 	bl	16834 <radio_is_ready>
   150ce:	b160      	cbz	r0, 150ea <isr_tx+0x66>
   150d0:	4a12      	ldr	r2, [pc, #72]	; (1511c <isr_tx+0x98>)
   150d2:	4915      	ldr	r1, [pc, #84]	; (15128 <isr_tx+0xa4>)
   150d4:	4813      	ldr	r0, [pc, #76]	; (15124 <isr_tx+0xa0>)
   150d6:	f240 4345 	movw	r3, #1093	; 0x445
   150da:	f007 f8f5 	bl	1c2c8 <printk>
   150de:	4040      	eors	r0, r0
   150e0:	f380 8811 	msr	BASEPRI, r0
   150e4:	f04f 0003 	mov.w	r0, #3
   150e8:	df02      	svc	2

	if (IS_ENABLED(CONFIG_BT_CTLR_PROFILE_ISR)) {
		lll_prof_cputime_capture();
	}

	radio_isr_set(isr_rx, param);
   150ea:	4629      	mov	r1, r5
   150ec:	480f      	ldr	r0, [pc, #60]	; (1512c <isr_tx+0xa8>)
   150ee:	f001 fabb 	bl	16668 <radio_isr_set>
		radio_ar_configure(count, irks, 0);
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */

	/* +/- 2us active clock jitter, +1 us hcto compensation */
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   150f2:	f001 fdd9 	bl	16ca8 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   150f6:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   150f8:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   150fa:	4608      	mov	r0, r1
   150fc:	f00f fcbb 	bl	24a76 <radio_rx_chain_delay_get>
	hcto += addr_us_get(phy_p);
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   15100:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   15102:	4605      	mov	r5, r0
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   15104:	4608      	mov	r0, r1
   15106:	f00f fcb2 	bl	24a6e <radio_tx_chain_delay_get>
   1510a:	442c      	add	r4, r5
   1510c:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   1510e:	1a20      	subs	r0, r4, r0
   15110:	f001 fd84 	bl	16c1c <radio_tmr_hcto_configure>
		/* NOTE: as scratch packet is used to receive, it is safe to
		 * generate profile event using rx nodes.
		 */
		lll_prof_reserve_send(node_rx_prof);
	}
}
   15114:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_tmr_end_capture();
   15118:	f001 bdb8 	b.w	16c8c <radio_tmr_end_capture>
   1511c:	00027fb9 	.word	0x00027fb9
   15120:	00028003 	.word	0x00028003
   15124:	00027514 	.word	0x00027514
   15128:	0002800b 	.word	0x0002800b
   1512c:	000155f1 	.word	0x000155f1

00015130 <is_abort_cb>:
	if (next != curr) {
   15130:	4281      	cmp	r1, r0
{
   15132:	b508      	push	{r3, lr}
	if (next != curr) {
   15134:	d018      	beq.n	15168 <is_abort_cb+0x38>
		} else if (lll->is_hdcd) {
   15136:	7a0b      	ldrb	r3, [r1, #8]
   15138:	07db      	lsls	r3, r3, #31
   1513a:	d522      	bpl.n	15182 <is_abort_cb+0x52>
			*resume_cb = resume_prepare_cb;
   1513c:	4b12      	ldr	r3, [pc, #72]	; (15188 <is_abort_cb+0x58>)
   1513e:	6013      	str	r3, [r2, #0]
			err = lll_hfclock_on();
   15140:	f7ff ff68 	bl	15014 <lll_hfclock_on>
			LL_ASSERT(err >= 0);
   15144:	2800      	cmp	r0, #0
   15146:	da0c      	bge.n	15162 <is_abort_cb+0x32>
   15148:	4a10      	ldr	r2, [pc, #64]	; (1518c <is_abort_cb+0x5c>)
   1514a:	4911      	ldr	r1, [pc, #68]	; (15190 <is_abort_cb+0x60>)
   1514c:	4811      	ldr	r0, [pc, #68]	; (15194 <is_abort_cb+0x64>)
   1514e:	f240 33fa 	movw	r3, #1018	; 0x3fa
   15152:	f007 f8b9 	bl	1c2c8 <printk>
   15156:	4040      	eors	r0, r0
   15158:	f380 8811 	msr	BASEPRI, r0
   1515c:	f04f 0003 	mov.w	r0, #3
   15160:	df02      	svc	2
   15162:	f06f 000a 	mvn.w	r0, #10
   15166:	e00b      	b.n	15180 <is_abort_cb+0x50>
	return (void *)lll->adv_data.pdu[lll->adv_data.first];
   15168:	7b0b      	ldrb	r3, [r1, #12]
   1516a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   1516e:	690b      	ldr	r3, [r1, #16]
   15170:	781b      	ldrb	r3, [r3, #0]
   15172:	f003 030f 	and.w	r3, r3, #15
		return 0;
   15176:	2b01      	cmp	r3, #1
   15178:	bf14      	ite	ne
   1517a:	f06f 008b 	mvnne.w	r0, #139	; 0x8b
   1517e:	2000      	moveq	r0, #0
}
   15180:	bd08      	pop	{r3, pc}
			return -ECANCELED;
   15182:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   15186:	e7fb      	b.n	15180 <is_abort_cb+0x50>
   15188:	00024717 	.word	0x00024717
   1518c:	00027fb9 	.word	0x00027fb9
   15190:	00027f87 	.word	0x00027f87
   15194:	00027514 	.word	0x00027514

00015198 <abort_cb>:
{
   15198:	b510      	push	{r4, lr}
   1519a:	460c      	mov	r4, r1
	if (!prepare_param) {
   1519c:	b930      	cbnz	r0, 151ac <abort_cb+0x14>
		radio_isr_set(isr_abort, param);
   1519e:	480e      	ldr	r0, [pc, #56]	; (151d8 <abort_cb+0x40>)
   151a0:	f001 fa62 	bl	16668 <radio_isr_set>
}
   151a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   151a8:	f001 bb26 	b.w	167f8 <radio_disable>
	err = lll_hfclock_off();
   151ac:	f7ff ff48 	bl	15040 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   151b0:	2800      	cmp	r0, #0
   151b2:	da0c      	bge.n	151ce <abort_cb+0x36>
   151b4:	4a09      	ldr	r2, [pc, #36]	; (151dc <abort_cb+0x44>)
   151b6:	490a      	ldr	r1, [pc, #40]	; (151e0 <abort_cb+0x48>)
   151b8:	480a      	ldr	r0, [pc, #40]	; (151e4 <abort_cb+0x4c>)
   151ba:	f44f 6384 	mov.w	r3, #1056	; 0x420
   151be:	f007 f883 	bl	1c2c8 <printk>
   151c2:	4040      	eors	r0, r0
   151c4:	f380 8811 	msr	BASEPRI, r0
   151c8:	f04f 0003 	mov.w	r0, #3
   151cc:	df02      	svc	2
	lll_done(param);
   151ce:	4620      	mov	r0, r4
}
   151d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   151d4:	f7ff bd44 	b.w	14c60 <lll_done>
   151d8:	0002466d 	.word	0x0002466d
   151dc:	00027fb9 	.word	0x00027fb9
   151e0:	00027f87 	.word	0x00027f87
   151e4:	00027514 	.word	0x00027514

000151e8 <lll_adv_init>:
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   151e8:	4b08      	ldr	r3, [pc, #32]	; (1520c <lll_adv_init+0x24>)
   151ea:	2204      	movs	r2, #4
{
   151ec:	b510      	push	{r4, lr}
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   151ee:	1898      	adds	r0, r3, r2
   151f0:	2128      	movs	r1, #40	; 0x28
   151f2:	f00e fac9 	bl	23788 <mem_init>
	MFIFO_INIT(pdu_free);
   151f6:	4b06      	ldr	r3, [pc, #24]	; (15210 <lll_adv_init+0x28>)
   151f8:	2400      	movs	r4, #0
   151fa:	805c      	strh	r4, [r3, #2]
	return z_impl_k_sem_init(sem, initial_count, limit);
   151fc:	2202      	movs	r2, #2
   151fe:	4621      	mov	r1, r4
   15200:	4804      	ldr	r0, [pc, #16]	; (15214 <lll_adv_init+0x2c>)
   15202:	f010 fc8f 	bl	25b24 <z_impl_k_sem_init>
}
   15206:	4620      	mov	r0, r4
   15208:	bd10      	pop	{r4, pc}
   1520a:	bf00      	nop
   1520c:	200030fc 	.word	0x200030fc
   15210:	20000bc4 	.word	0x20000bc4
   15214:	200031a0 	.word	0x200031a0

00015218 <lll_adv_data_init>:
{
   15218:	b510      	push	{r4, lr}
   1521a:	4604      	mov	r4, r0
	p = mem_acquire(&mem_pdu.free);
   1521c:	4805      	ldr	r0, [pc, #20]	; (15234 <lll_adv_data_init+0x1c>)
   1521e:	f00e fadb 	bl	237d8 <mem_acquire>
	if (!p) {
   15222:	4603      	mov	r3, r0
   15224:	b118      	cbz	r0, 1522e <lll_adv_data_init+0x16>
	p->len = 0U;
   15226:	2000      	movs	r0, #0
   15228:	7058      	strb	r0, [r3, #1]
	pdu->pdu[0] = (void *)p;
   1522a:	6063      	str	r3, [r4, #4]
}
   1522c:	bd10      	pop	{r4, pc}
		return -ENOMEM;
   1522e:	f06f 000b 	mvn.w	r0, #11
   15232:	e7fb      	b.n	1522c <lll_adv_data_init+0x14>
   15234:	200030fc 	.word	0x200030fc

00015238 <lll_adv_pdu_alloc_pdu_adv>:
{
   15238:	b538      	push	{r3, r4, r5, lr}
	p = MFIFO_DEQUEUE_PEEK(pdu_free);
   1523a:	4c33      	ldr	r4, [pc, #204]	; (15308 <lll_adv_pdu_alloc_pdu_adv+0xd0>)
   1523c:	78a2      	ldrb	r2, [r4, #2]
	if (first == last) {
   1523e:	78e1      	ldrb	r1, [r4, #3]
   15240:	7823      	ldrb	r3, [r4, #0]
   15242:	4291      	cmp	r1, r2
   15244:	d023      	beq.n	1528e <lll_adv_pdu_alloc_pdu_adv+0x56>
	return *((void **)(fifo + first * size));
   15246:	fb02 4303 	mla	r3, r2, r3, r4
   1524a:	685d      	ldr	r5, [r3, #4]
	if (p) {
   1524c:	b1fd      	cbz	r5, 1528e <lll_adv_pdu_alloc_pdu_adv+0x56>
	return z_impl_k_sem_take(sem, timeout);
   1524e:	482f      	ldr	r0, [pc, #188]	; (1530c <lll_adv_pdu_alloc_pdu_adv+0xd4>)
   15250:	2200      	movs	r2, #0
   15252:	2300      	movs	r3, #0
   15254:	f006 f87e 	bl	1b354 <z_impl_k_sem_take>
		LL_ASSERT(!err);
   15258:	b160      	cbz	r0, 15274 <lll_adv_pdu_alloc_pdu_adv+0x3c>
   1525a:	4a2d      	ldr	r2, [pc, #180]	; (15310 <lll_adv_pdu_alloc_pdu_adv+0xd8>)
   1525c:	492d      	ldr	r1, [pc, #180]	; (15314 <lll_adv_pdu_alloc_pdu_adv+0xdc>)
   1525e:	482e      	ldr	r0, [pc, #184]	; (15318 <lll_adv_pdu_alloc_pdu_adv+0xe0>)
   15260:	f240 1397 	movw	r3, #407	; 0x197
   15264:	f007 f830 	bl	1c2c8 <printk>
   15268:	4040      	eors	r0, r0
   1526a:	f380 8811 	msr	BASEPRI, r0
   1526e:	f04f 0003 	mov.w	r0, #3
   15272:	df02      	svc	2
	uint8_t _first = *first; /* Copy read-index */
   15274:	78a3      	ldrb	r3, [r4, #2]
	if (_first == last) {
   15276:	78e1      	ldrb	r1, [r4, #3]
		MFIFO_DEQUEUE(pdu_free);
   15278:	7862      	ldrb	r2, [r4, #1]
   1527a:	4299      	cmp	r1, r3
   1527c:	d005      	beq.n	1528a <lll_adv_pdu_alloc_pdu_adv+0x52>
	_first += 1U;
   1527e:	3301      	adds	r3, #1
   15280:	b2db      	uxtb	r3, r3
		_first = 0U;
   15282:	429a      	cmp	r2, r3
   15284:	bf08      	it	eq
   15286:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   15288:	70a3      	strb	r3, [r4, #2]
}
   1528a:	4628      	mov	r0, r5
   1528c:	bd38      	pop	{r3, r4, r5, pc}
	p = mem_acquire(&mem_pdu.free);
   1528e:	4823      	ldr	r0, [pc, #140]	; (1531c <lll_adv_pdu_alloc_pdu_adv+0xe4>)
   15290:	f00e faa2 	bl	237d8 <mem_acquire>
	if (p) {
   15294:	4605      	mov	r5, r0
   15296:	2800      	cmp	r0, #0
   15298:	d1f7      	bne.n	1528a <lll_adv_pdu_alloc_pdu_adv+0x52>
   1529a:	481c      	ldr	r0, [pc, #112]	; (1530c <lll_adv_pdu_alloc_pdu_adv+0xd4>)
   1529c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   152a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   152a4:	f006 f856 	bl	1b354 <z_impl_k_sem_take>
	LL_ASSERT(!err);
   152a8:	b160      	cbz	r0, 152c4 <lll_adv_pdu_alloc_pdu_adv+0x8c>
   152aa:	4a19      	ldr	r2, [pc, #100]	; (15310 <lll_adv_pdu_alloc_pdu_adv+0xd8>)
   152ac:	4919      	ldr	r1, [pc, #100]	; (15314 <lll_adv_pdu_alloc_pdu_adv+0xdc>)
   152ae:	481a      	ldr	r0, [pc, #104]	; (15318 <lll_adv_pdu_alloc_pdu_adv+0xe0>)
   152b0:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
   152b4:	f007 f808 	bl	1c2c8 <printk>
   152b8:	4040      	eors	r0, r0
   152ba:	f380 8811 	msr	BASEPRI, r0
   152be:	f04f 0003 	mov.w	r0, #3
   152c2:	df02      	svc	2
	uint8_t _first = *first; /* Copy read-index */
   152c4:	78a3      	ldrb	r3, [r4, #2]
	if (_first == last) {
   152c6:	78e0      	ldrb	r0, [r4, #3]
	p = MFIFO_DEQUEUE(pdu_free);
   152c8:	7822      	ldrb	r2, [r4, #0]
   152ca:	7861      	ldrb	r1, [r4, #1]
   152cc:	4298      	cmp	r0, r3
   152ce:	d10d      	bne.n	152ec <lll_adv_pdu_alloc_pdu_adv+0xb4>
	LL_ASSERT(p);
   152d0:	4a0f      	ldr	r2, [pc, #60]	; (15310 <lll_adv_pdu_alloc_pdu_adv+0xd8>)
   152d2:	4913      	ldr	r1, [pc, #76]	; (15320 <lll_adv_pdu_alloc_pdu_adv+0xe8>)
   152d4:	4810      	ldr	r0, [pc, #64]	; (15318 <lll_adv_pdu_alloc_pdu_adv+0xe0>)
   152d6:	f240 13ad 	movw	r3, #429	; 0x1ad
   152da:	f006 fff5 	bl	1c2c8 <printk>
   152de:	4040      	eors	r0, r0
   152e0:	f380 8811 	msr	BASEPRI, r0
   152e4:	f04f 0003 	mov.w	r0, #3
   152e8:	df02      	svc	2
   152ea:	e7ce      	b.n	1528a <lll_adv_pdu_alloc_pdu_adv+0x52>
	mem = *((void **)(fifo + _first * size));
   152ec:	fb03 4202 	mla	r2, r3, r2, r4
	_first += 1U;
   152f0:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   152f2:	6852      	ldr	r2, [r2, #4]
	_first += 1U;
   152f4:	b2db      	uxtb	r3, r3
		_first = 0U;
   152f6:	4299      	cmp	r1, r3
   152f8:	bf08      	it	eq
   152fa:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   152fc:	70a3      	strb	r3, [r4, #2]
   152fe:	2a00      	cmp	r2, #0
   15300:	d0e6      	beq.n	152d0 <lll_adv_pdu_alloc_pdu_adv+0x98>
   15302:	4615      	mov	r5, r2
   15304:	e7c1      	b.n	1528a <lll_adv_pdu_alloc_pdu_adv+0x52>
   15306:	bf00      	nop
   15308:	20000bc4 	.word	0x20000bc4
   1530c:	200031a0 	.word	0x200031a0
   15310:	00027fb9 	.word	0x00027fb9
   15314:	00027963 	.word	0x00027963
   15318:	00027514 	.word	0x00027514
   1531c:	200030fc 	.word	0x200030fc
   15320:	0002801d 	.word	0x0002801d

00015324 <lll_adv_pdu_latest_get>:
{
   15324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	first = pdu->first;
   15326:	7803      	ldrb	r3, [r0, #0]
	if (first != pdu->last) {
   15328:	7842      	ldrb	r2, [r0, #1]
   1532a:	429a      	cmp	r2, r3
{
   1532c:	4605      	mov	r5, r0
   1532e:	460e      	mov	r6, r1
	first = pdu->first;
   15330:	b2dc      	uxtb	r4, r3
	if (first != pdu->last) {
   15332:	d022      	beq.n	1537a <lll_adv_pdu_latest_get+0x56>
			if (!MFIFO_ENQUEUE_IDX_GET(pdu_free, &free_idx)) {
   15334:	4a13      	ldr	r2, [pc, #76]	; (15384 <lll_adv_pdu_latest_get+0x60>)
   15336:	eb00 0784 	add.w	r7, r0, r4, lsl #2
   1533a:	78d0      	ldrb	r0, [r2, #3]
	if (last == count) {
   1533c:	f892 e001 	ldrb.w	lr, [r2, #1]
   15340:	f892 c002 	ldrb.w	ip, [r2, #2]
		p = pdu->pdu[pdu_idx];
   15344:	6879      	ldr	r1, [r7, #4]
	last = last + 1;
   15346:	1c43      	adds	r3, r0, #1
   15348:	b2db      	uxtb	r3, r3
		last = 0U;
   1534a:	459e      	cmp	lr, r3
   1534c:	bf08      	it	eq
   1534e:	2300      	moveq	r3, #0
	if (last == first) {
   15350:	459c      	cmp	ip, r3
   15352:	d009      	beq.n	15368 <lll_adv_pdu_latest_get+0x44>
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   15354:	f892 c000 	ldrb.w	ip, [r2]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   15358:	fb0c 2000 	mla	r0, ip, r0, r2
   1535c:	6041      	str	r1, [r0, #4]
	*last = idx; /* Commit: Update write index */
   1535e:	70d3      	strb	r3, [r2, #3]
	z_impl_k_sem_give(sem);
   15360:	4809      	ldr	r0, [pc, #36]	; (15388 <lll_adv_pdu_latest_get+0x64>)
   15362:	f005 ffd1 	bl	1b308 <z_impl_k_sem_give>
			p = next;
   15366:	2100      	movs	r1, #0
		first += 1U;
   15368:	3401      	adds	r4, #1
   1536a:	b2e4      	uxtb	r4, r4
			first = 0U;
   1536c:	2c02      	cmp	r4, #2
   1536e:	bf08      	it	eq
   15370:	2400      	moveq	r4, #0
		*is_modified = 1U;
   15372:	2301      	movs	r3, #1
		pdu->pdu[pdu_idx] = p;
   15374:	6079      	str	r1, [r7, #4]
		pdu->first = first;
   15376:	702c      	strb	r4, [r5, #0]
		*is_modified = 1U;
   15378:	7033      	strb	r3, [r6, #0]
	return (void *)pdu->pdu[first];
   1537a:	eb05 0484 	add.w	r4, r5, r4, lsl #2
}
   1537e:	6860      	ldr	r0, [r4, #4]
   15380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15382:	bf00      	nop
   15384:	20000bc4 	.word	0x20000bc4
   15388:	200031a0 	.word	0x200031a0

0001538c <chan_prepare.isra.0>:
{
	struct pdu_adv *pdu;
	uint8_t chan;
	uint8_t upd;

	chan = find_lsb_set(lll->chan_map_curr);
   1538c:	7a03      	ldrb	r3, [r0, #8]
	return __builtin_ffs(op);
   1538e:	f3c3 1302 	ubfx	r3, r3, #4, #3
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   15392:	b537      	push	{r0, r1, r2, r4, r5, lr}
   15394:	2b00      	cmp	r3, #0
   15396:	4604      	mov	r4, r0
   15398:	fa93 f0a3 	rbit	r0, r3
   1539c:	fab0 f080 	clz	r0, r0
   153a0:	bf08      	it	eq
   153a2:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
	LL_ASSERT(chan);
   153a6:	1c45      	adds	r5, r0, #1
   153a8:	d10c      	bne.n	153c4 <chan_prepare.isra.0+0x38>
   153aa:	4a30      	ldr	r2, [pc, #192]	; (1546c <chan_prepare.isra.0+0xe0>)
   153ac:	4930      	ldr	r1, [pc, #192]	; (15470 <chan_prepare.isra.0+0xe4>)
   153ae:	4831      	ldr	r0, [pc, #196]	; (15474 <chan_prepare.isra.0+0xe8>)
   153b0:	f240 5337 	movw	r3, #1335	; 0x537
   153b4:	f006 ff88 	bl	1c2c8 <printk>
   153b8:	4040      	eors	r0, r0
   153ba:	f380 8811 	msr	BASEPRI, r0
   153be:	f04f 0003 	mov.w	r0, #3
   153c2:	df02      	svc	2

	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   153c4:	7a23      	ldrb	r3, [r4, #8]
   153c6:	f3c3 1102 	ubfx	r1, r3, #4, #3
   153ca:	1e4a      	subs	r2, r1, #1
   153cc:	400a      	ands	r2, r1
   153ce:	f362 1306 	bfi	r3, r2, #4, #3

	lll_chan_set(36 + chan);
   153d2:	f105 0024 	add.w	r0, r5, #36	; 0x24
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   153d6:	7223      	strb	r3, [r4, #8]
	lll_chan_set(36 + chan);
   153d8:	f7ff fc9e 	bl	14d18 <lll_chan_set>

	/* FIXME: get latest only when primary PDU without Aux PDUs */
	upd = 0U;
   153dc:	2300      	movs	r3, #0
#endif /* CONFIG_BT_CTLR_ADV_EXT_PDU_EXTRA_DATA_MEMORY */

static inline struct pdu_adv *lll_adv_data_latest_get(struct lll_adv *lll,
						      uint8_t *is_modified)
{
	return lll_adv_pdu_latest_get(&lll->adv_data, is_modified);
   153de:	f10d 0107 	add.w	r1, sp, #7
   153e2:	f104 000c 	add.w	r0, r4, #12
   153e6:	f88d 3007 	strb.w	r3, [sp, #7]
   153ea:	f7ff ff9b 	bl	15324 <lll_adv_pdu_latest_get>
	pdu = lll_adv_data_latest_get(lll, &upd);
	LL_ASSERT(pdu);
   153ee:	4605      	mov	r5, r0
   153f0:	b960      	cbnz	r0, 1540c <chan_prepare.isra.0+0x80>
   153f2:	4a1e      	ldr	r2, [pc, #120]	; (1546c <chan_prepare.isra.0+0xe0>)
   153f4:	4920      	ldr	r1, [pc, #128]	; (15478 <chan_prepare.isra.0+0xec>)
   153f6:	481f      	ldr	r0, [pc, #124]	; (15474 <chan_prepare.isra.0+0xe8>)
   153f8:	f44f 63a8 	mov.w	r3, #1344	; 0x540
   153fc:	f006 ff64 	bl	1c2c8 <printk>
   15400:	4040      	eors	r0, r0
   15402:	f380 8811 	msr	BASEPRI, r0
   15406:	f04f 0003 	mov.w	r0, #3
   1540a:	df02      	svc	2

	radio_pkt_tx_set(pdu);
   1540c:	4628      	mov	r0, r5
   1540e:	f001 f9e1 	bl	167d4 <radio_pkt_tx_set>

	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   15412:	782b      	ldrb	r3, [r5, #0]
   15414:	f003 030f 	and.w	r3, r3, #15
   15418:	2b02      	cmp	r3, #2
   1541a:	d01f      	beq.n	1545c <chan_prepare.isra.0+0xd0>
}

static inline struct pdu_adv *lll_adv_scan_rsp_latest_get(struct lll_adv *lll,
							  uint8_t *is_modified)
{
	return lll_adv_pdu_latest_get(&lll->scan_rsp, is_modified);
   1541c:	f10d 0107 	add.w	r1, sp, #7
   15420:	f104 0018 	add.w	r0, r4, #24
   15424:	f7ff ff7e 	bl	15324 <lll_adv_pdu_latest_get>
	    (!IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) ||
	     (pdu->type != PDU_ADV_TYPE_EXT_IND))) {
		struct pdu_adv *scan_pdu;

		scan_pdu = lll_adv_scan_rsp_latest_get(lll, &upd);
		LL_ASSERT(scan_pdu);
   15428:	b960      	cbnz	r0, 15444 <chan_prepare.isra.0+0xb8>
   1542a:	4a10      	ldr	r2, [pc, #64]	; (1546c <chan_prepare.isra.0+0xe0>)
   1542c:	4913      	ldr	r1, [pc, #76]	; (1547c <chan_prepare.isra.0+0xf0>)
   1542e:	4811      	ldr	r0, [pc, #68]	; (15474 <chan_prepare.isra.0+0xe8>)
   15430:	f240 534a 	movw	r3, #1354	; 0x54a
   15434:	f006 ff48 	bl	1c2c8 <printk>
   15438:	4040      	eors	r0, r0
   1543a:	f380 8811 	msr	BASEPRI, r0
   1543e:	f04f 0003 	mov.w	r0, #3
   15442:	df02      	svc	2
#else
		ARG_UNUSED(scan_pdu);
		ARG_UNUSED(upd);
#endif /* !CONFIG_BT_CTLR_PRIVACY */

		radio_isr_set(isr_tx, lll);
   15444:	480e      	ldr	r0, [pc, #56]	; (15480 <chan_prepare.isra.0+0xf4>)
   15446:	4621      	mov	r1, r4
   15448:	f001 f90e 	bl	16668 <radio_isr_set>
		radio_tmr_tifs_set(EVENT_IFS_US);
   1544c:	2096      	movs	r0, #150	; 0x96
   1544e:	f001 fb43 	bl	16ad8 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   15452:	2000      	movs	r0, #0
   15454:	f001 fa9a 	bl	1698c <radio_switch_complete_and_rx>
		radio_isr_set(isr_done, lll);
		radio_switch_complete_and_disable();
	}

	return pdu;
}
   15458:	b003      	add	sp, #12
   1545a:	bd30      	pop	{r4, r5, pc}
		radio_isr_set(isr_done, lll);
   1545c:	4809      	ldr	r0, [pc, #36]	; (15484 <chan_prepare.isra.0+0xf8>)
   1545e:	4621      	mov	r1, r4
   15460:	f001 f902 	bl	16668 <radio_isr_set>
		radio_switch_complete_and_disable();
   15464:	f001 faba 	bl	169dc <radio_switch_complete_and_disable>
	return pdu;
   15468:	e7f6      	b.n	15458 <chan_prepare.isra.0+0xcc>
   1546a:	bf00      	nop
   1546c:	00027fb9 	.word	0x00027fb9
   15470:	0002801f 	.word	0x0002801f
   15474:	00027514 	.word	0x00027514
   15478:	00028029 	.word	0x00028029
   1547c:	00028024 	.word	0x00028024
   15480:	00015085 	.word	0x00015085
   15484:	000246c7 	.word	0x000246c7

00015488 <prepare_cb>:
{
   15488:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	lll = p->param;
   1548a:	68c4      	ldr	r4, [r0, #12]
	if (unlikely(lll->conn &&
   1548c:	6863      	ldr	r3, [r4, #4]
{
   1548e:	4605      	mov	r5, r0
	if (unlikely(lll->conn &&
   15490:	b163      	cbz	r3, 154ac <prepare_cb+0x24>
   15492:	f893 3020 	ldrb.w	r3, [r3, #32]
   15496:	079a      	lsls	r2, r3, #30
   15498:	d008      	beq.n	154ac <prepare_cb+0x24>
		radio_isr_set(lll_isr_early_abort, lll);
   1549a:	4831      	ldr	r0, [pc, #196]	; (15560 <prepare_cb+0xd8>)
   1549c:	4621      	mov	r1, r4
		radio_isr_set(isr_abort, lll);
   1549e:	f001 f8e3 	bl	16668 <radio_isr_set>
		radio_disable();
   154a2:	f001 f9a9 	bl	167f8 <radio_disable>
}
   154a6:	2000      	movs	r0, #0
   154a8:	b003      	add	sp, #12
   154aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	radio_reset();
   154ac:	f001 f8fc 	bl	166a8 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   154b0:	2000      	movs	r0, #0
   154b2:	f001 f92d 	bl	16710 <radio_tx_power_set>
	radio_phy_set(0, 0);
   154b6:	2100      	movs	r1, #0
   154b8:	4608      	mov	r0, r1
   154ba:	f001 f919 	bl	166f0 <radio_phy_set>
	radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, PDU_AC_LEG_PAYLOAD_SIZE_MAX,
   154be:	2200      	movs	r2, #0
   154c0:	2125      	movs	r1, #37	; 0x25
   154c2:	2008      	movs	r0, #8
   154c4:	f001 f95a 	bl	1677c <radio_pkt_configure>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   154c8:	4b26      	ldr	r3, [pc, #152]	; (15564 <prepare_cb+0xdc>)
   154ca:	9301      	str	r3, [sp, #4]
	radio_aa_set((uint8_t *)&aa);
   154cc:	a801      	add	r0, sp, #4
   154ce:	f001 f93d 	bl	1674c <radio_aa_set>
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   154d2:	4925      	ldr	r1, [pc, #148]	; (15568 <prepare_cb+0xe0>)
   154d4:	f240 605b 	movw	r0, #1627	; 0x65b
   154d8:	f001 f9ca 	bl	16870 <radio_crc_configure>
	lll->chan_map_curr = lll->chan_map;
   154dc:	7a23      	ldrb	r3, [r4, #8]
   154de:	f3c3 0242 	ubfx	r2, r3, #1, #3
   154e2:	f362 1306 	bfi	r3, r2, #4, #3
   154e6:	7223      	strb	r3, [r4, #8]
	pdu = chan_prepare(lll);
   154e8:	4620      	mov	r0, r4
   154ea:	f7ff ff4f 	bl	1538c <chan_prepare.isra.0>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER_ACCEPT_LIST) && lll->filter_policy) {
   154ee:	7a63      	ldrb	r3, [r4, #9]
   154f0:	079b      	lsls	r3, r3, #30
   154f2:	d007      	beq.n	15504 <prepare_cb+0x7c>
		struct lll_filter *fal = ull_filter_lll_get(true);
   154f4:	2001      	movs	r0, #1
   154f6:	f7ff f913 	bl	14720 <ull_filter_lll_get>
		radio_filter_configure(fal->enable_bitmask,
   154fa:	7841      	ldrb	r1, [r0, #1]
   154fc:	1c82      	adds	r2, r0, #2
   154fe:	7800      	ldrb	r0, [r0, #0]
   15500:	f001 fa9c 	bl	16a3c <radio_filter_configure>
	ull = HDR_LLL2ULL(lll);
   15504:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   15506:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   15508:	4638      	mov	r0, r7
   1550a:	f00f f864 	bl	245d6 <lll_event_offset_get>
   1550e:	4406      	add	r6, r0
	start_us = radio_tmr_start(1, ticks_at_start, remainder);
   15510:	686a      	ldr	r2, [r5, #4]
   15512:	f106 0109 	add.w	r1, r6, #9
   15516:	2001      	movs	r0, #1
   15518:	f001 faea 	bl	16af0 <radio_tmr_start>
	radio_tmr_end_capture();
   1551c:	f001 fbb6 	bl	16c8c <radio_tmr_end_capture>
				   ull_adv_lll_handle_get(lll)),
   15520:	4620      	mov	r0, r4
   15522:	f7fd fc53 	bl	12dcc <ull_adv_lll_handle_get>
	if (lll_preempt_calc(ull, (TICKER_ID_ADV_BASE +
   15526:	1c81      	adds	r1, r0, #2
   15528:	4632      	mov	r2, r6
   1552a:	b2c9      	uxtb	r1, r1
   1552c:	4638      	mov	r0, r7
   1552e:	f00f f860 	bl	245f2 <lll_preempt_calc>
   15532:	b110      	cbz	r0, 1553a <prepare_cb+0xb2>
		radio_isr_set(isr_abort, lll);
   15534:	480d      	ldr	r0, [pc, #52]	; (1556c <prepare_cb+0xe4>)
   15536:	4621      	mov	r1, r4
   15538:	e7b1      	b.n	1549e <prepare_cb+0x16>
		ret = lll_prepare_done(lll);
   1553a:	4620      	mov	r0, r4
   1553c:	f00f f846 	bl	245cc <lll_prepare_done>
		LL_ASSERT(!ret);
   15540:	2800      	cmp	r0, #0
   15542:	d0b0      	beq.n	154a6 <prepare_cb+0x1e>
   15544:	4a0a      	ldr	r2, [pc, #40]	; (15570 <prepare_cb+0xe8>)
   15546:	490b      	ldr	r1, [pc, #44]	; (15574 <prepare_cb+0xec>)
   15548:	480b      	ldr	r0, [pc, #44]	; (15578 <prepare_cb+0xf0>)
   1554a:	f240 33d1 	movw	r3, #977	; 0x3d1
   1554e:	f006 febb 	bl	1c2c8 <printk>
   15552:	4040      	eors	r0, r0
   15554:	f380 8811 	msr	BASEPRI, r0
   15558:	f04f 0003 	mov.w	r0, #3
   1555c:	df02      	svc	2
   1555e:	e7a2      	b.n	154a6 <prepare_cb+0x1e>
   15560:	00014dd1 	.word	0x00014dd1
   15564:	8e89bed6 	.word	0x8e89bed6
   15568:	00555555 	.word	0x00555555
   1556c:	0002466d 	.word	0x0002466d
   15570:	00027fb9 	.word	0x00027fb9
   15574:	000279ee 	.word	0x000279ee
   15578:	00027514 	.word	0x00027514

0001557c <lll_adv_prepare>:
{
   1557c:	b513      	push	{r0, r1, r4, lr}
   1557e:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   15580:	f7ff fd48 	bl	15014 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   15584:	2800      	cmp	r0, #0
   15586:	da0c      	bge.n	155a2 <lll_adv_prepare+0x26>
   15588:	4a12      	ldr	r2, [pc, #72]	; (155d4 <lll_adv_prepare+0x58>)
   1558a:	4913      	ldr	r1, [pc, #76]	; (155d8 <lll_adv_prepare+0x5c>)
   1558c:	4813      	ldr	r0, [pc, #76]	; (155dc <lll_adv_prepare+0x60>)
   1558e:	f240 239a 	movw	r3, #666	; 0x29a
   15592:	f006 fe99 	bl	1c2c8 <printk>
   15596:	4040      	eors	r0, r0
   15598:	f380 8811 	msr	BASEPRI, r0
   1559c:	f04f 0003 	mov.w	r0, #3
   155a0:	df02      	svc	2
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   155a2:	4a0f      	ldr	r2, [pc, #60]	; (155e0 <lll_adv_prepare+0x64>)
   155a4:	490f      	ldr	r1, [pc, #60]	; (155e4 <lll_adv_prepare+0x68>)
   155a6:	4810      	ldr	r0, [pc, #64]	; (155e8 <lll_adv_prepare+0x6c>)
   155a8:	9400      	str	r4, [sp, #0]
   155aa:	2300      	movs	r3, #0
   155ac:	f00e fd0e 	bl	23fcc <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   155b0:	b170      	cbz	r0, 155d0 <lll_adv_prepare+0x54>
   155b2:	3077      	adds	r0, #119	; 0x77
   155b4:	d00c      	beq.n	155d0 <lll_adv_prepare+0x54>
   155b6:	4a07      	ldr	r2, [pc, #28]	; (155d4 <lll_adv_prepare+0x58>)
   155b8:	490c      	ldr	r1, [pc, #48]	; (155ec <lll_adv_prepare+0x70>)
   155ba:	4808      	ldr	r0, [pc, #32]	; (155dc <lll_adv_prepare+0x60>)
   155bc:	f240 239d 	movw	r3, #669	; 0x29d
   155c0:	f006 fe82 	bl	1c2c8 <printk>
   155c4:	4040      	eors	r0, r0
   155c6:	f380 8811 	msr	BASEPRI, r0
   155ca:	f04f 0003 	mov.w	r0, #3
   155ce:	df02      	svc	2
}
   155d0:	b002      	add	sp, #8
   155d2:	bd10      	pop	{r4, pc}
   155d4:	00027fb9 	.word	0x00027fb9
   155d8:	00027f87 	.word	0x00027f87
   155dc:	00027514 	.word	0x00027514
   155e0:	00015489 	.word	0x00015489
   155e4:	00015199 	.word	0x00015199
   155e8:	00015131 	.word	0x00015131
   155ec:	0002802d 	.word	0x0002802d

000155f0 <isr_rx>:
{
   155f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   155f4:	b087      	sub	sp, #28
   155f6:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   155f8:	f001 f926 	bl	16848 <radio_is_done>
	if (trx_done) {
   155fc:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
   15600:	d074      	beq.n	156ec <isr_rx+0xfc>
		crc_ok = radio_crc_is_valid();
   15602:	f001 f941 	bl	16888 <radio_crc_is_valid>
   15606:	b2c6      	uxtb	r6, r0
		devmatch_ok = radio_filter_has_match();
   15608:	f001 fa46 	bl	16a98 <radio_filter_has_match>
   1560c:	fa5f f880 	uxtb.w	r8, r0
		devmatch_id = radio_filter_match_get();
   15610:	f001 fa4c 	bl	16aac <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
   15614:	f001 fb66 	bl	16ce4 <radio_ar_has_match>
		irkmatch_id = radio_ar_match_get();
   15618:	f001 fb4c 	bl	16cb4 <radio_ar_match_get>
		rssi_ready = radio_rssi_is_ready();
   1561c:	f001 fa04 	bl	16a28 <radio_rssi_is_ready>
	lll_isr_status_reset();
   15620:	f00f f808 	bl	24634 <lll_isr_status_reset>
	if (!trx_done) {
   15624:	2d00      	cmp	r5, #0
   15626:	f000 80bf 	beq.w	157a8 <isr_rx+0x1b8>
	if (crc_ok) {
   1562a:	2e00      	cmp	r6, #0
   1562c:	f000 80bc 	beq.w	157a8 <isr_rx+0x1b8>
#if defined(CONFIG_BT_CTLR_PRIVACY)
	/* An IRK match implies address resolution enabled */
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
				    FILTER_IDX_NONE;
#else
	uint8_t rl_idx = FILTER_IDX_NONE;
   15630:	23ff      	movs	r3, #255	; 0xff
#endif /* CONFIG_BT_CTLR_PRIVACY */

	node_rx = ull_pdu_rx_alloc_peek(1);
   15632:	2001      	movs	r0, #1
	uint8_t rl_idx = FILTER_IDX_NONE;
   15634:	f88d 3017 	strb.w	r3, [sp, #23]
	node_rx = ull_pdu_rx_alloc_peek(1);
   15638:	f7fc fda4 	bl	12184 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1563c:	4605      	mov	r5, r0
   1563e:	b960      	cbnz	r0, 1565a <isr_rx+0x6a>
   15640:	4a5e      	ldr	r2, [pc, #376]	; (157bc <isr_rx+0x1cc>)
   15642:	495f      	ldr	r1, [pc, #380]	; (157c0 <isr_rx+0x1d0>)
   15644:	485f      	ldr	r0, [pc, #380]	; (157c4 <isr_rx+0x1d4>)
   15646:	f240 537a 	movw	r3, #1402	; 0x57a
   1564a:	f006 fe3d 	bl	1c2c8 <printk>
   1564e:	4040      	eors	r0, r0
   15650:	f380 8811 	msr	BASEPRI, r0
   15654:	f04f 0003 	mov.w	r0, #3
   15658:	df02      	svc	2
   1565a:	7b23      	ldrb	r3, [r4, #12]
   1565c:	eb04 0383 	add.w	r3, r4, r3, lsl #2

	pdu_rx = (void *)node_rx->pdu;
   15660:	f105 0a1c 	add.w	sl, r5, #28
   15664:	691e      	ldr	r6, [r3, #16]
	pdu_adv = lll_adv_data_curr_get(lll);

	addr = pdu_adv->adv_ind.addr;
   15666:	46b1      	mov	r9, r6
	tx_addr = pdu_adv->tx_addr;
   15668:	f819 7b02 	ldrb.w	r7, [r9], #2

	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   1566c:	f007 030f 	and.w	r3, r7, #15
   15670:	2b01      	cmp	r3, #1
	} else {
		tgt_addr = NULL;
	}
	rx_addr = pdu_adv->rx_addr;

	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   15672:	7f2b      	ldrb	r3, [r5, #28]
   15674:	f003 030f 	and.w	r3, r3, #15
		tgt_addr = pdu_adv->direct_ind.tgt_addr;
   15678:	bf0c      	ite	eq
   1567a:	3608      	addeq	r6, #8
		tgt_addr = NULL;
   1567c:	2600      	movne	r6, #0
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   1567e:	2b03      	cmp	r3, #3
	tx_addr = pdu_adv->tx_addr;
   15680:	f3c7 1b80 	ubfx	fp, r7, #6, #1
	rx_addr = pdu_adv->rx_addr;
   15684:	ea4f 17d7 	mov.w	r7, r7, lsr #7
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   15688:	d133      	bne.n	156f2 <isr_rx+0x102>
   1568a:	7f6b      	ldrb	r3, [r5, #29]
   1568c:	2b0c      	cmp	r3, #12
   1568e:	f040 808b 	bne.w	157a8 <isr_rx+0x1b8>
	    (pdu_rx->len == sizeof(struct pdu_adv_scan_req)) &&
   15692:	2e00      	cmp	r6, #0
   15694:	f040 8088 	bne.w	157a8 <isr_rx+0x1b8>
	    (tgt_addr == NULL) &&
	    lll_adv_scan_req_check(lll, pdu_rx, tx_addr, addr, devmatch_ok,
   15698:	f10d 0317 	add.w	r3, sp, #23
   1569c:	e9cd 8300 	strd	r8, r3, [sp]
   156a0:	465a      	mov	r2, fp
   156a2:	464b      	mov	r3, r9
   156a4:	4651      	mov	r1, sl
   156a6:	4620      	mov	r0, r4
   156a8:	f00f f849 	bl	2473e <lll_adv_scan_req_check>
	    (tgt_addr == NULL) &&
   156ac:	b308      	cbz	r0, 156f2 <isr_rx+0x102>
				    &rl_idx)) {
		radio_isr_set(isr_done, lll);
   156ae:	4621      	mov	r1, r4
   156b0:	4845      	ldr	r0, [pc, #276]	; (157c8 <isr_rx+0x1d8>)
   156b2:	f000 ffd9 	bl	16668 <radio_isr_set>
		radio_switch_complete_and_disable();
   156b6:	f001 f991 	bl	169dc <radio_switch_complete_and_disable>
}

static inline struct pdu_adv *lll_adv_scan_rsp_curr_get(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.first];
   156ba:	7e20      	ldrb	r0, [r4, #24]
   156bc:	eb04 0480 	add.w	r4, r4, r0, lsl #2
		radio_pkt_tx_set(lll_adv_scan_rsp_curr_get(lll));
   156c0:	69e0      	ldr	r0, [r4, #28]
   156c2:	f001 f887 	bl	167d4 <radio_pkt_tx_set>

		/* assert if radio packet ptr is not set and radio started tx */
		LL_ASSERT(!radio_is_ready());
   156c6:	f001 f8b5 	bl	16834 <radio_is_ready>
   156ca:	b160      	cbz	r0, 156e6 <isr_rx+0xf6>
   156cc:	4a3b      	ldr	r2, [pc, #236]	; (157bc <isr_rx+0x1cc>)
   156ce:	493f      	ldr	r1, [pc, #252]	; (157cc <isr_rx+0x1dc>)
   156d0:	483c      	ldr	r0, [pc, #240]	; (157c4 <isr_rx+0x1d4>)
   156d2:	f240 5393 	movw	r3, #1427	; 0x593
   156d6:	f006 fdf7 	bl	1c2c8 <printk>
   156da:	4040      	eors	r0, r0
   156dc:	f380 8811 	msr	BASEPRI, r0
   156e0:	f04f 0003 	mov.w	r0, #3
   156e4:	df02      	svc	2
}
   156e6:	b007      	add	sp, #28
   156e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0U;
   156ec:	462e      	mov	r6, r5
   156ee:	46a8      	mov	r8, r5
   156f0:	e796      	b.n	15620 <isr_rx+0x30>
	 *       Under this race, peer central would get failed to establish
	 *       connection as the disconnect reason. This is an acceptable
	 *       outcome to keep the thread mode implementation simple when
	 *       disabling connectable advertising.
	 */
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   156f2:	7f2b      	ldrb	r3, [r5, #28]
   156f4:	f003 030f 	and.w	r3, r3, #15
   156f8:	2b05      	cmp	r3, #5
   156fa:	d155      	bne.n	157a8 <isr_rx+0x1b8>
   156fc:	7f6b      	ldrb	r3, [r5, #29]
   156fe:	2b22      	cmp	r3, #34	; 0x22
   15700:	d152      	bne.n	157a8 <isr_rx+0x1b8>
		   (pdu_rx->len == sizeof(struct pdu_adv_connect_ind)) &&
		   lll->conn && !lll->conn->periph.cancelled &&
   15702:	6863      	ldr	r3, [r4, #4]
		   (pdu_rx->len == sizeof(struct pdu_adv_connect_ind)) &&
   15704:	2b00      	cmp	r3, #0
   15706:	d04f      	beq.n	157a8 <isr_rx+0x1b8>
		   lll->conn && !lll->conn->periph.cancelled &&
   15708:	f893 3020 	ldrb.w	r3, [r3, #32]
   1570c:	079b      	lsls	r3, r3, #30
   1570e:	d44b      	bmi.n	157a8 <isr_rx+0x1b8>
		   lll_adv_connect_ind_check(lll, pdu_rx, tx_addr, addr,
   15710:	f10d 0317 	add.w	r3, sp, #23
   15714:	e9cd 8302 	strd	r8, r3, [sp, #8]
   15718:	e9cd 7600 	strd	r7, r6, [sp]
   1571c:	464b      	mov	r3, r9
   1571e:	465a      	mov	r2, fp
   15720:	4651      	mov	r1, sl
   15722:	4620      	mov	r0, r4
   15724:	f00f f823 	bl	2476e <lll_adv_connect_ind_check>
		   lll->conn && !lll->conn->periph.cancelled &&
   15728:	2800      	cmp	r0, #0
   1572a:	d03d      	beq.n	157a8 <isr_rx+0x1b8>
		struct node_rx_pdu *rx;

		if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2)) {
			rx = ull_pdu_rx_alloc_peek(4);
		} else {
			rx = ull_pdu_rx_alloc_peek(3);
   1572c:	2003      	movs	r0, #3
   1572e:	f7fc fd29 	bl	12184 <ull_pdu_rx_alloc_peek>
		}

		if (!rx) {
   15732:	2800      	cmp	r0, #0
   15734:	d038      	beq.n	157a8 <isr_rx+0x1b8>
			return -ENOBUFS;
		}

		radio_isr_set(isr_abort, lll);
   15736:	4826      	ldr	r0, [pc, #152]	; (157d0 <isr_rx+0x1e0>)
   15738:	4621      	mov	r1, r4
   1573a:	f000 ff95 	bl	16668 <radio_isr_set>
		radio_disable();
   1573e:	f001 f85b 	bl	167f8 <radio_disable>

		/* assert if radio started tx */
		LL_ASSERT(!radio_is_ready());
   15742:	f001 f877 	bl	16834 <radio_is_ready>
   15746:	b160      	cbz	r0, 15762 <isr_rx+0x172>
   15748:	4a1c      	ldr	r2, [pc, #112]	; (157bc <isr_rx+0x1cc>)
   1574a:	4920      	ldr	r1, [pc, #128]	; (157cc <isr_rx+0x1dc>)
   1574c:	481d      	ldr	r0, [pc, #116]	; (157c4 <isr_rx+0x1d4>)
   1574e:	f240 53da 	movw	r3, #1498	; 0x5da
   15752:	f006 fdb9 	bl	1c2c8 <printk>
   15756:	4040      	eors	r0, r0
   15758:	f380 8811 	msr	BASEPRI, r0
   1575c:	f04f 0003 	mov.w	r0, #3
   15760:	df02      	svc	2
			lll->conn->rssi_latest =  radio_rssi_get();
		}
#endif /* CONFIG_BT_CTLR_CONN_RSSI */

		/* Stop further LLL radio events */
		lll->conn->periph.initiated = 1;
   15762:	6862      	ldr	r2, [r4, #4]
   15764:	f892 3020 	ldrb.w	r3, [r2, #32]
   15768:	f043 0301 	orr.w	r3, r3, #1
   1576c:	f882 3020 	strb.w	r3, [r2, #32]

		rx = ull_pdu_rx_alloc();
   15770:	f7fc fd20 	bl	121b4 <ull_pdu_rx_alloc>

		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   15774:	2316      	movs	r3, #22
   15776:	7103      	strb	r3, [r0, #4]
		rx->hdr.handle = 0xffff;
   15778:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1577c:	80c3      	strh	r3, [r0, #6]

		ftr = &(rx->hdr.rx_ftr);
		ftr->param = lll;
   1577e:	6084      	str	r4, [r0, #8]
		rx = ull_pdu_rx_alloc();
   15780:	4605      	mov	r5, r0
		ftr->ticks_anchor = radio_tmr_start_get();
   15782:	f001 fa39 	bl	16bf8 <radio_tmr_start_get>
   15786:	6128      	str	r0, [r5, #16]
		ftr->radio_end_us = radio_tmr_end_get() -
   15788:	f001 fa88 	bl	16c9c <radio_tmr_end_get>
				    radio_rx_chain_delay_get(0, 0);
   1578c:	2100      	movs	r1, #0
		ftr->radio_end_us = radio_tmr_end_get() -
   1578e:	4604      	mov	r4, r0
				    radio_rx_chain_delay_get(0, 0);
   15790:	4608      	mov	r0, r1
   15792:	f00f f970 	bl	24a76 <radio_rx_chain_delay_get>
		ftr->radio_end_us = radio_tmr_end_get() -
   15796:	1a24      	subs	r4, r4, r0

		if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2)) {
			ftr->extra = ull_pdu_rx_alloc();
		}

		ull_rx_put(rx->hdr.link, rx);
   15798:	4629      	mov	r1, r5
   1579a:	6828      	ldr	r0, [r5, #0]
		ftr->radio_end_us = radio_tmr_end_get() -
   1579c:	616c      	str	r4, [r5, #20]
		ull_rx_put(rx->hdr.link, rx);
   1579e:	f7fc fd1f 	bl	121e0 <ull_rx_put>
		ull_rx_sched();
   157a2:	f7fc fd2d 	bl	12200 <ull_rx_sched>
		if (!err) {
   157a6:	e79e      	b.n	156e6 <isr_rx+0xf6>
	radio_isr_set(isr_done, param);
   157a8:	4807      	ldr	r0, [pc, #28]	; (157c8 <isr_rx+0x1d8>)
   157aa:	4621      	mov	r1, r4
   157ac:	f000 ff5c 	bl	16668 <radio_isr_set>
}
   157b0:	b007      	add	sp, #28
   157b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	radio_disable();
   157b6:	f001 b81f 	b.w	167f8 <radio_disable>
   157ba:	bf00      	nop
   157bc:	00027fb9 	.word	0x00027fb9
   157c0:	00028003 	.word	0x00028003
   157c4:	00027514 	.word	0x00027514
   157c8:	000246c7 	.word	0x000246c7
   157cc:	0002800b 	.word	0x0002800b
   157d0:	0002466d 	.word	0x0002466d

000157d4 <common_prepare_cb>:

	return common_prepare_cb(p, true);
}

static int common_prepare_cb(struct lll_prepare_param *p, bool is_resume)
{
   157d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t remainder;
	uint32_t aa;

	DEBUG_RADIO_START_O(1);

	lll = p->param;
   157d8:	68c4      	ldr	r4, [r0, #12]
		return 0;
	}
#endif /* CONFIG_BT_CENTRAL */

	/* Initialize scanning state */
	lll->state = 0U;
   157da:	7923      	ldrb	r3, [r4, #4]
   157dc:	f36f 0300 	bfc	r3, #0, #1
{
   157e0:	b08c      	sub	sp, #48	; 0x30
	lll->state = 0U;
   157e2:	7123      	strb	r3, [r4, #4]
{
   157e4:	460d      	mov	r5, r1
   157e6:	4607      	mov	r7, r0

	radio_reset();
   157e8:	f000 ff5e 	bl	166a8 <radio_reset>

#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	radio_tx_power_set(lll->tx_pwr_lvl);
#else
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   157ec:	2000      	movs	r0, #0
   157ee:	f000 ff8f 	bl	16710 <radio_tx_power_set>
			    RADIO_PKT_CONF_PHY(lll->phy));

	lll->is_adv_ind = 0U;
	lll->is_aux_sched = 0U;
#else /* !CONFIG_BT_CTLR_ADV_EXT */
	radio_phy_set(0, 0);
   157f2:	2100      	movs	r1, #0
   157f4:	4608      	mov	r0, r1
   157f6:	f000 ff7b 	bl	166f0 <radio_phy_set>
	radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, PDU_AC_LEG_PAYLOAD_SIZE_MAX,
   157fa:	2200      	movs	r2, #0
   157fc:	2125      	movs	r1, #37	; 0x25
   157fe:	2008      	movs	r0, #8
   15800:	f000 ffbc 	bl	1677c <radio_pkt_configure>
			    RADIO_PKT_CONF_PHY(RADIO_PKT_CONF_PHY_LEGACY));
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	node_rx = ull_pdu_rx_alloc_peek(1);
   15804:	2001      	movs	r0, #1
   15806:	f7fc fcbd 	bl	12184 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1580a:	4606      	mov	r6, r0
   1580c:	b960      	cbnz	r0, 15828 <common_prepare_cb+0x54>
   1580e:	4a4e      	ldr	r2, [pc, #312]	; (15948 <common_prepare_cb+0x174>)
   15810:	494e      	ldr	r1, [pc, #312]	; (1594c <common_prepare_cb+0x178>)
   15812:	484f      	ldr	r0, [pc, #316]	; (15950 <common_prepare_cb+0x17c>)
   15814:	f240 138d 	movw	r3, #397	; 0x18d
   15818:	f006 fd56 	bl	1c2c8 <printk>
   1581c:	4040      	eors	r0, r0
   1581e:	f380 8811 	msr	BASEPRI, r0
   15822:	f04f 0003 	mov.w	r0, #3
   15826:	df02      	svc	2

	radio_pkt_rx_set(node_rx->pdu);
   15828:	f106 001c 	add.w	r0, r6, #28
   1582c:	f000 ffcc 	bl	167c8 <radio_pkt_rx_set>

	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   15830:	4b48      	ldr	r3, [pc, #288]	; (15954 <common_prepare_cb+0x180>)
   15832:	930b      	str	r3, [sp, #44]	; 0x2c
	radio_aa_set((uint8_t *)&aa);
   15834:	a80b      	add	r0, sp, #44	; 0x2c
   15836:	f000 ff89 	bl	1674c <radio_aa_set>
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   1583a:	4947      	ldr	r1, [pc, #284]	; (15958 <common_prepare_cb+0x184>)
   1583c:	f240 605b 	movw	r0, #1627	; 0x65b
   15840:	f001 f816 	bl	16870 <radio_crc_configure>
					PDU_AC_CRC_IV);

	lll_chan_set(37 + lll->chan);
   15844:	7920      	ldrb	r0, [r4, #4]
   15846:	f3c0 0041 	ubfx	r0, r0, #1, #2
   1584a:	3025      	adds	r0, #37	; 0x25
   1584c:	f7ff fa64 	bl	14d18 <lll_chan_set>

	radio_isr_set(isr_rx, lll);
   15850:	4842      	ldr	r0, [pc, #264]	; (1595c <common_prepare_cb+0x188>)
   15852:	4621      	mov	r1, r4
   15854:	f000 ff08 	bl	16668 <radio_isr_set>

	/* setup tIFS switching */
	if (0) {
	} else if (lll->type ||
   15858:	7923      	ldrb	r3, [r4, #4]
   1585a:	069b      	lsls	r3, r3, #26
   1585c:	d539      	bpl.n	158d2 <common_prepare_cb+0xfe>
#if defined(CONFIG_BT_CENTRAL)
		   lll->conn) {
#else /* !CONFIG_BT_CENTRAL */
		   0) {
#endif /* !CONFIG_BT_CENTRAL */
		radio_tmr_tifs_set(EVENT_IFS_US);
   1585e:	2096      	movs	r0, #150	; 0x96
   15860:	f001 f93a 	bl	16ad8 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
   15864:	2300      	movs	r3, #0
   15866:	461a      	mov	r2, r3
   15868:	4619      	mov	r1, r3
   1586a:	4618      	mov	r0, r3
   1586c:	f001 f8a2 	bl	169b4 <radio_switch_complete_and_tx>
		radio_ar_configure(count, irks, 0);
#endif
	} else
#endif /* CONFIG_BT_CTLR_PRIVACY */

	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER_ACCEPT_LIST) && lll->filter_policy) {
   15870:	7923      	ldrb	r3, [r4, #4]
   15872:	f013 0f18 	tst.w	r3, #24
   15876:	d007      	beq.n	15888 <common_prepare_cb+0xb4>
		/* Setup Radio Filter */
		struct lll_filter *fal = ull_filter_lll_get(true);
   15878:	2001      	movs	r0, #1
   1587a:	f7fe ff51 	bl	14720 <ull_filter_lll_get>

		radio_filter_configure(fal->enable_bitmask,
   1587e:	7841      	ldrb	r1, [r0, #1]
   15880:	1c82      	adds	r2, r0, #2
   15882:	7800      	ldrb	r0, [r0, #0]
   15884:	f001 f8da 	bl	16a3c <radio_filter_configure>
				       fal->addr_type_bitmask,
				       (uint8_t *)fal->bdaddr);
	}

	ticks_at_event = p->ticks_at_expire;
	ull = HDR_LLL2ULL(lll);
   15888:	f8d4 8000 	ldr.w	r8, [r4]
	ticks_at_event = p->ticks_at_expire;
   1588c:	683e      	ldr	r6, [r7, #0]
	ticks_at_event += lll_event_offset_get(ull);
   1588e:	4640      	mov	r0, r8
   15890:	f00e fea1 	bl	245d6 <lll_event_offset_get>
   15894:	4406      	add	r6, r0

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	remainder = p->remainder;
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   15896:	687a      	ldr	r2, [r7, #4]
   15898:	f106 0109 	add.w	r1, r6, #9
   1589c:	2000      	movs	r0, #0
   1589e:	f001 f927 	bl	16af0 <radio_tmr_start>

	/* capture end of Rx-ed PDU, for initiator to calculate first
	 * central event or extended scan to schedule auxiliary channel
	 * reception.
	 */
	radio_tmr_end_capture();
   158a2:	f001 f9f3 	bl	16c8c <radio_tmr_end_capture>

	/* scanner always measures RSSI */
	radio_rssi_measure();
   158a6:	f001 f8a7 	bl	169f8 <radio_rssi_measure>

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(ull, (TICKER_ID_SCAN_BASE +
				   ull_scan_lll_handle_get(lll)),
   158aa:	4620      	mov	r0, r4
   158ac:	f7fd fbbc 	bl	13028 <ull_scan_lll_handle_get>
	if (lll_preempt_calc(ull, (TICKER_ID_SCAN_BASE +
   158b0:	1d01      	adds	r1, r0, #4
   158b2:	4632      	mov	r2, r6
   158b4:	b2c9      	uxtb	r1, r1
   158b6:	4640      	mov	r0, r8
   158b8:	f00e fe9b 	bl	245f2 <lll_preempt_calc>
   158bc:	b160      	cbz	r0, 158d8 <common_prepare_cb+0x104>
			     ticks_at_event)) {
		radio_isr_set(isr_abort, lll);
   158be:	4828      	ldr	r0, [pc, #160]	; (15960 <common_prepare_cb+0x18c>)
   158c0:	4621      	mov	r1, r4
   158c2:	f000 fed1 	bl	16668 <radio_isr_set>
		radio_disable();
   158c6:	f000 ff97 	bl	167f8 <radio_disable>
	}

	DEBUG_RADIO_START_O(1);

	return 0;
}
   158ca:	2000      	movs	r0, #0
   158cc:	b00c      	add	sp, #48	; 0x30
   158ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		radio_switch_complete_and_disable();
   158d2:	f001 f883 	bl	169dc <radio_switch_complete_and_disable>
   158d6:	e7cb      	b.n	15870 <common_prepare_cb+0x9c>
		if (!is_resume && lll->ticks_window) {
   158d8:	bb1d      	cbnz	r5, 15922 <common_prepare_cb+0x14e>
   158da:	6923      	ldr	r3, [r4, #16]
   158dc:	b30b      	cbz	r3, 15922 <common_prepare_cb+0x14e>
			ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   158de:	f44f 72fd 	mov.w	r2, #506	; 0x1fa
   158e2:	9208      	str	r2, [sp, #32]
   158e4:	4a1f      	ldr	r2, [pc, #124]	; (15964 <common_prepare_cb+0x190>)
   158e6:	e9cd 4206 	strd	r4, r2, [sp, #24]
   158ea:	4a1f      	ldr	r2, [pc, #124]	; (15968 <common_prepare_cb+0x194>)
   158ec:	e9cd 3500 	strd	r3, r5, [sp]
   158f0:	e9cd 5204 	strd	r5, r2, [sp, #16]
   158f4:	4633      	mov	r3, r6
   158f6:	e9cd 5502 	strd	r5, r5, [sp, #8]
   158fa:	2203      	movs	r2, #3
   158fc:	4629      	mov	r1, r5
   158fe:	f00e fa5c 	bl	23dba <ticker_start>
			LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   15902:	f030 0302 	bics.w	r3, r0, #2
   15906:	d00c      	beq.n	15922 <common_prepare_cb+0x14e>
   15908:	4a0f      	ldr	r2, [pc, #60]	; (15948 <common_prepare_cb+0x174>)
   1590a:	4918      	ldr	r1, [pc, #96]	; (1596c <common_prepare_cb+0x198>)
   1590c:	4810      	ldr	r0, [pc, #64]	; (15950 <common_prepare_cb+0x17c>)
   1590e:	f240 13fb 	movw	r3, #507	; 0x1fb
   15912:	f006 fcd9 	bl	1c2c8 <printk>
   15916:	4040      	eors	r0, r0
   15918:	f380 8811 	msr	BASEPRI, r0
   1591c:	f04f 0003 	mov.w	r0, #3
   15920:	df02      	svc	2
		ret = lll_prepare_done(lll);
   15922:	4620      	mov	r0, r4
   15924:	f00e fe52 	bl	245cc <lll_prepare_done>
		LL_ASSERT(!ret);
   15928:	2800      	cmp	r0, #0
   1592a:	d0ce      	beq.n	158ca <common_prepare_cb+0xf6>
   1592c:	4a06      	ldr	r2, [pc, #24]	; (15948 <common_prepare_cb+0x174>)
   1592e:	4910      	ldr	r1, [pc, #64]	; (15970 <common_prepare_cb+0x19c>)
   15930:	4807      	ldr	r0, [pc, #28]	; (15950 <common_prepare_cb+0x17c>)
   15932:	f44f 7305 	mov.w	r3, #532	; 0x214
   15936:	f006 fcc7 	bl	1c2c8 <printk>
   1593a:	4040      	eors	r0, r0
   1593c:	f380 8811 	msr	BASEPRI, r0
   15940:	f04f 0003 	mov.w	r0, #3
   15944:	df02      	svc	2
   15946:	e7c0      	b.n	158ca <common_prepare_cb+0xf6>
   15948:	00028041 	.word	0x00028041
   1594c:	00028003 	.word	0x00028003
   15950:	00027514 	.word	0x00027514
   15954:	8e89bed6 	.word	0x8e89bed6
   15958:	00555555 	.word	0x00555555
   1595c:	00015ba9 	.word	0x00015ba9
   15960:	000247eb 	.word	0x000247eb
   15964:	00015a8d 	.word	0x00015a8d
   15968:	00015b19 	.word	0x00015b19
   1596c:	00027add 	.word	0x00027add
   15970:	000279ee 	.word	0x000279ee

00015974 <isr_common_done>:

	radio_isr_set(isr_rx, param);
}

static void isr_common_done(void *param)
{
   15974:	b538      	push	{r3, r4, r5, lr}
   15976:	4604      	mov	r4, r0
	struct node_rx_pdu *node_rx;
	struct lll_scan *lll;

	/* Clear radio status and events */
	lll_isr_status_reset();
   15978:	f00e fe5c 	bl	24634 <lll_isr_status_reset>

	/* Reset scanning state */
	lll = param;
	lll->state = 0U;
   1597c:	7923      	ldrb	r3, [r4, #4]
   1597e:	f36f 0300 	bfc	r3, #0, #1
   15982:	7123      	strb	r3, [r4, #4]
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	/* setup tIFS switching */
	if (0) {
		/* TODO: Add Rx-Rx switch usecase improvement in the future */
	} else if (lll->type ||
   15984:	069b      	lsls	r3, r3, #26
   15986:	d526      	bpl.n	159d6 <isr_common_done+0x62>
#if defined(CONFIG_BT_CENTRAL)
		   lll->conn) {
#else /* !CONFIG_BT_CENTRAL */
		   0) {
#endif /* !CONFIG_BT_CENTRAL */
		radio_tmr_tifs_set(EVENT_IFS_US);
   15988:	2096      	movs	r0, #150	; 0x96
   1598a:	f001 f8a5 	bl	16ad8 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
   1598e:	2300      	movs	r3, #0
   15990:	461a      	mov	r2, r3
   15992:	4619      	mov	r1, r3
   15994:	4618      	mov	r0, r3
   15996:	f001 f80d 	bl	169b4 <radio_switch_complete_and_tx>
	} else {
		radio_switch_complete_and_disable();
	}

	node_rx = ull_pdu_rx_alloc_peek(1);
   1599a:	2001      	movs	r0, #1
   1599c:	f7fc fbf2 	bl	12184 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   159a0:	4605      	mov	r5, r0
   159a2:	b960      	cbnz	r0, 159be <isr_common_done+0x4a>
   159a4:	4a0d      	ldr	r2, [pc, #52]	; (159dc <isr_common_done+0x68>)
   159a6:	490e      	ldr	r1, [pc, #56]	; (159e0 <isr_common_done+0x6c>)
   159a8:	480e      	ldr	r0, [pc, #56]	; (159e4 <isr_common_done+0x70>)
   159aa:	f44f 7352 	mov.w	r3, #840	; 0x348
   159ae:	f006 fc8b 	bl	1c2c8 <printk>
   159b2:	4040      	eors	r0, r0
   159b4:	f380 8811 	msr	BASEPRI, r0
   159b8:	f04f 0003 	mov.w	r0, #3
   159bc:	df02      	svc	2
	radio_pkt_rx_set(node_rx->pdu);
   159be:	f105 001c 	add.w	r0, r5, #28
   159c2:	f000 ff01 	bl	167c8 <radio_pkt_rx_set>
		radio_ar_configure(count, irks, 0);
#endif
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */

	radio_rssi_measure();
   159c6:	f001 f817 	bl	169f8 <radio_rssi_measure>

	radio_isr_set(isr_rx, param);
   159ca:	4621      	mov	r1, r4
   159cc:	4806      	ldr	r0, [pc, #24]	; (159e8 <isr_common_done+0x74>)
}
   159ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_isr_set(isr_rx, param);
   159d2:	f000 be49 	b.w	16668 <radio_isr_set>
		radio_switch_complete_and_disable();
   159d6:	f001 f801 	bl	169dc <radio_switch_complete_and_disable>
   159da:	e7de      	b.n	1599a <isr_common_done+0x26>
   159dc:	00028041 	.word	0x00028041
   159e0:	00028003 	.word	0x00028003
   159e4:	00027514 	.word	0x00027514
   159e8:	00015ba9 	.word	0x00015ba9

000159ec <isr_tx>:
{
   159ec:	b570      	push	{r4, r5, r6, lr}
   159ee:	4605      	mov	r5, r0
	lll_isr_tx_status_reset();
   159f0:	f00e fe10 	bl	24614 <lll_isr_tx_status_reset>
	radio_switch_complete_and_disable();
   159f4:	f000 fff2 	bl	169dc <radio_switch_complete_and_disable>
	node_rx = ull_pdu_rx_alloc_peek(1);
   159f8:	2001      	movs	r0, #1
   159fa:	f7fc fbc3 	bl	12184 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   159fe:	4604      	mov	r4, r0
   15a00:	b960      	cbnz	r0, 15a1c <isr_tx+0x30>
   15a02:	4a1d      	ldr	r2, [pc, #116]	; (15a78 <isr_tx+0x8c>)
   15a04:	491d      	ldr	r1, [pc, #116]	; (15a7c <isr_tx+0x90>)
   15a06:	481e      	ldr	r0, [pc, #120]	; (15a80 <isr_tx+0x94>)
   15a08:	f240 3302 	movw	r3, #770	; 0x302
   15a0c:	f006 fc5c 	bl	1c2c8 <printk>
   15a10:	4040      	eors	r0, r0
   15a12:	f380 8811 	msr	BASEPRI, r0
   15a16:	f04f 0003 	mov.w	r0, #3
   15a1a:	df02      	svc	2
	radio_pkt_rx_set(node_rx->pdu);
   15a1c:	f104 001c 	add.w	r0, r4, #28
   15a20:	f000 fed2 	bl	167c8 <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   15a24:	f000 ff06 	bl	16834 <radio_is_ready>
   15a28:	b160      	cbz	r0, 15a44 <isr_tx+0x58>
   15a2a:	4a13      	ldr	r2, [pc, #76]	; (15a78 <isr_tx+0x8c>)
   15a2c:	4915      	ldr	r1, [pc, #84]	; (15a84 <isr_tx+0x98>)
   15a2e:	4814      	ldr	r0, [pc, #80]	; (15a80 <isr_tx+0x94>)
   15a30:	f240 3306 	movw	r3, #774	; 0x306
   15a34:	f006 fc48 	bl	1c2c8 <printk>
   15a38:	4040      	eors	r0, r0
   15a3a:	f380 8811 	msr	BASEPRI, r0
   15a3e:	f04f 0003 	mov.w	r0, #3
   15a42:	df02      	svc	2
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   15a44:	f001 f930 	bl	16ca8 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(0, 0);
   15a48:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   15a4a:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(0, 0);
   15a4c:	4608      	mov	r0, r1
   15a4e:	f00f f812 	bl	24a76 <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(0, 0);
   15a52:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(0, 0);
   15a54:	4606      	mov	r6, r0
	hcto -= radio_tx_chain_delay_get(0, 0);
   15a56:	4608      	mov	r0, r1
   15a58:	f00f f809 	bl	24a6e <radio_tx_chain_delay_get>
   15a5c:	4434      	add	r4, r6
   15a5e:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   15a60:	1a20      	subs	r0, r4, r0
   15a62:	f001 f8db 	bl	16c1c <radio_tmr_hcto_configure>
	radio_rssi_measure();
   15a66:	f000 ffc7 	bl	169f8 <radio_rssi_measure>
	radio_isr_set(isr_rx, param);
   15a6a:	4629      	mov	r1, r5
   15a6c:	4806      	ldr	r0, [pc, #24]	; (15a88 <isr_tx+0x9c>)
}
   15a6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	radio_isr_set(isr_rx, param);
   15a72:	f000 bdf9 	b.w	16668 <radio_isr_set>
   15a76:	bf00      	nop
   15a78:	00028041 	.word	0x00028041
   15a7c:	00028003 	.word	0x00028003
   15a80:	00027514 	.word	0x00027514
   15a84:	0002800b 	.word	0x0002800b
   15a88:	00015ba9 	.word	0x00015ba9

00015a8c <ticker_op_start_cb>:
{
   15a8c:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   15a8e:	b160      	cbz	r0, 15aaa <ticker_op_start_cb+0x1e>
   15a90:	4a06      	ldr	r2, [pc, #24]	; (15aac <ticker_op_start_cb+0x20>)
   15a92:	4907      	ldr	r1, [pc, #28]	; (15ab0 <ticker_op_start_cb+0x24>)
   15a94:	4807      	ldr	r0, [pc, #28]	; (15ab4 <ticker_op_start_cb+0x28>)
   15a96:	f44f 7324 	mov.w	r3, #656	; 0x290
   15a9a:	f006 fc15 	bl	1c2c8 <printk>
   15a9e:	4040      	eors	r0, r0
   15aa0:	f380 8811 	msr	BASEPRI, r0
   15aa4:	f04f 0003 	mov.w	r0, #3
   15aa8:	df02      	svc	2
}
   15aaa:	bd08      	pop	{r3, pc}
   15aac:	00028041 	.word	0x00028041
   15ab0:	00027df5 	.word	0x00027df5
   15ab4:	00027514 	.word	0x00027514

00015ab8 <is_abort_cb>:
	if (next != curr) {
   15ab8:	4281      	cmp	r1, r0
{
   15aba:	b508      	push	{r3, lr}
	if (next != curr) {
   15abc:	d017      	beq.n	15aee <is_abort_cb+0x36>
			if (!lll->ticks_window) {
   15abe:	690b      	ldr	r3, [r1, #16]
   15ac0:	b9e3      	cbnz	r3, 15afc <is_abort_cb+0x44>
				*resume_cb = resume_prepare_cb;
   15ac2:	4b10      	ldr	r3, [pc, #64]	; (15b04 <is_abort_cb+0x4c>)
   15ac4:	6013      	str	r3, [r2, #0]
				err = lll_hfclock_on();
   15ac6:	f7ff faa5 	bl	15014 <lll_hfclock_on>
				LL_ASSERT(err >= 0);
   15aca:	2800      	cmp	r0, #0
   15acc:	da0c      	bge.n	15ae8 <is_abort_cb+0x30>
   15ace:	4a0e      	ldr	r2, [pc, #56]	; (15b08 <is_abort_cb+0x50>)
   15ad0:	490e      	ldr	r1, [pc, #56]	; (15b0c <is_abort_cb+0x54>)
   15ad2:	480f      	ldr	r0, [pc, #60]	; (15b10 <is_abort_cb+0x58>)
   15ad4:	f240 2332 	movw	r3, #562	; 0x232
   15ad8:	f006 fbf6 	bl	1c2c8 <printk>
   15adc:	4040      	eors	r0, r0
   15ade:	f380 8811 	msr	BASEPRI, r0
   15ae2:	f04f 0003 	mov.w	r0, #3
   15ae6:	df02      	svc	2
				return -EAGAIN;
   15ae8:	f06f 000a 	mvn.w	r0, #10
   15aec:	e005      	b.n	15afa <is_abort_cb+0x42>
		radio_isr_set(isr_window, lll);
   15aee:	4809      	ldr	r0, [pc, #36]	; (15b14 <is_abort_cb+0x5c>)
   15af0:	f000 fdba 	bl	16668 <radio_isr_set>
	radio_disable();
   15af4:	f000 fe80 	bl	167f8 <radio_disable>
   15af8:	2000      	movs	r0, #0
}
   15afa:	bd08      	pop	{r3, pc}
			return -ECANCELED;
   15afc:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   15b00:	e7fb      	b.n	15afa <is_abort_cb+0x42>
   15b02:	bf00      	nop
   15b04:	0002484f 	.word	0x0002484f
   15b08:	00028041 	.word	0x00028041
   15b0c:	00027f87 	.word	0x00027f87
   15b10:	00027514 	.word	0x00027514
   15b14:	00024813 	.word	0x00024813

00015b18 <ticker_stop_cb>:
{
   15b18:	b508      	push	{r3, lr}
	mfy.param = param;
   15b1a:	4b0b      	ldr	r3, [pc, #44]	; (15b48 <ticker_stop_cb+0x30>)
   15b1c:	9a03      	ldr	r2, [sp, #12]
   15b1e:	609a      	str	r2, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   15b20:	2200      	movs	r2, #0
   15b22:	4611      	mov	r1, r2
   15b24:	2001      	movs	r0, #1
   15b26:	f7fa f909 	bl	fd3c <mayfly_enqueue>
	LL_ASSERT(!ret);
   15b2a:	b160      	cbz	r0, 15b46 <ticker_stop_cb+0x2e>
   15b2c:	4a07      	ldr	r2, [pc, #28]	; (15b4c <ticker_stop_cb+0x34>)
   15b2e:	4908      	ldr	r1, [pc, #32]	; (15b50 <ticker_stop_cb+0x38>)
   15b30:	4808      	ldr	r0, [pc, #32]	; (15b54 <ticker_stop_cb+0x3c>)
   15b32:	f240 2389 	movw	r3, #649	; 0x289
   15b36:	f006 fbc7 	bl	1c2c8 <printk>
   15b3a:	4040      	eors	r0, r0
   15b3c:	f380 8811 	msr	BASEPRI, r0
   15b40:	f04f 0003 	mov.w	r0, #3
   15b44:	df02      	svc	2
}
   15b46:	bd08      	pop	{r3, pc}
   15b48:	20000bd4 	.word	0x20000bd4
   15b4c:	00028041 	.word	0x00028041
   15b50:	000279ee 	.word	0x000279ee
   15b54:	00027514 	.word	0x00027514

00015b58 <abort_cb>:
{
   15b58:	b510      	push	{r4, lr}
   15b5a:	460c      	mov	r4, r1
	if (!prepare_param) {
   15b5c:	b930      	cbnz	r0, 15b6c <abort_cb+0x14>
			radio_isr_set(isr_done_cleanup, param);
   15b5e:	480e      	ldr	r0, [pc, #56]	; (15b98 <abort_cb+0x40>)
   15b60:	f000 fd82 	bl	16668 <radio_isr_set>
}
   15b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			radio_disable();
   15b68:	f000 be46 	b.w	167f8 <radio_disable>
	err = lll_hfclock_off();
   15b6c:	f7ff fa68 	bl	15040 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   15b70:	2800      	cmp	r0, #0
   15b72:	da0c      	bge.n	15b8e <abort_cb+0x36>
   15b74:	4a09      	ldr	r2, [pc, #36]	; (15b9c <abort_cb+0x44>)
   15b76:	490a      	ldr	r1, [pc, #40]	; (15ba0 <abort_cb+0x48>)
   15b78:	480a      	ldr	r0, [pc, #40]	; (15ba4 <abort_cb+0x4c>)
   15b7a:	f240 2379 	movw	r3, #633	; 0x279
   15b7e:	f006 fba3 	bl	1c2c8 <printk>
   15b82:	4040      	eors	r0, r0
   15b84:	f380 8811 	msr	BASEPRI, r0
   15b88:	f04f 0003 	mov.w	r0, #3
   15b8c:	df02      	svc	2
	lll_done(param);
   15b8e:	4620      	mov	r0, r4
}
   15b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   15b94:	f7ff b864 	b.w	14c60 <lll_done>
   15b98:	00024879 	.word	0x00024879
   15b9c:	00028041 	.word	0x00028041
   15ba0:	00027f87 	.word	0x00027f87
   15ba4:	00027514 	.word	0x00027514

00015ba8 <isr_rx>:
{
   15ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15bac:	4605      	mov	r5, r0
	trx_done = radio_is_done();
   15bae:	f000 fe4b 	bl	16848 <radio_is_done>
	if (trx_done) {
   15bb2:	f010 04ff 	ands.w	r4, r0, #255	; 0xff
   15bb6:	f000 80a3 	beq.w	15d00 <isr_rx+0x158>
		crc_ok = radio_crc_is_valid();
   15bba:	f000 fe65 	bl	16888 <radio_crc_is_valid>
   15bbe:	fa5f f880 	uxtb.w	r8, r0
		devmatch_ok = radio_filter_has_match();
   15bc2:	f000 ff69 	bl	16a98 <radio_filter_has_match>
   15bc6:	b2c6      	uxtb	r6, r0
		devmatch_id = radio_filter_match_get();
   15bc8:	f000 ff70 	bl	16aac <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
   15bcc:	f001 f88a 	bl	16ce4 <radio_ar_has_match>
		irkmatch_id = radio_ar_match_get();
   15bd0:	f001 f870 	bl	16cb4 <radio_ar_match_get>
		rssi_ready = radio_rssi_is_ready();
   15bd4:	f000 ff28 	bl	16a28 <radio_rssi_is_ready>
   15bd8:	b2c7      	uxtb	r7, r0
		phy_flags_rx = radio_phy_flags_rx_get();
   15bda:	f00e ff51 	bl	24a80 <radio_phy_flags_rx_get>
	lll_isr_status_reset();
   15bde:	f00e fd29 	bl	24634 <lll_isr_status_reset>
	if (!trx_done || !crc_ok) {
   15be2:	2c00      	cmp	r4, #0
   15be4:	f000 80c1 	beq.w	15d6a <isr_rx+0x1c2>
   15be8:	f1b8 0f00 	cmp.w	r8, #0
   15bec:	f000 80bd 	beq.w	15d6a <isr_rx+0x1c2>
	node_rx = ull_pdu_rx_alloc_peek(1);
   15bf0:	2001      	movs	r0, #1
   15bf2:	f7fc fac7 	bl	12184 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   15bf6:	4604      	mov	r4, r0
   15bf8:	b960      	cbnz	r0, 15c14 <isr_rx+0x6c>
   15bfa:	4a7e      	ldr	r2, [pc, #504]	; (15df4 <isr_rx+0x24c>)
   15bfc:	497e      	ldr	r1, [pc, #504]	; (15df8 <isr_rx+0x250>)
   15bfe:	487f      	ldr	r0, [pc, #508]	; (15dfc <isr_rx+0x254>)
   15c00:	f240 23c3 	movw	r3, #707	; 0x2c3
   15c04:	f006 fb60 	bl	1c2c8 <printk>
   15c08:	4040      	eors	r0, r0
   15c0a:	f380 8811 	msr	BASEPRI, r0
   15c0e:	f04f 0003 	mov.w	r0, #3
   15c12:	df02      	svc	2
	return ((lll->filter_policy & SCAN_FP_FILTER) == 0U) ||
   15c14:	792a      	ldrb	r2, [r5, #4]
   15c16:	0713      	lsls	r3, r2, #28
   15c18:	d502      	bpl.n	15c20 <isr_rx+0x78>
	if (has_adva &&
   15c1a:	2e00      	cmp	r6, #0
   15c1c:	f000 80a5 	beq.w	15d6a <isr_rx+0x1c2>

		return 0;
#endif /* CONFIG_BT_CENTRAL */

	/* Active scanner */
	} else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   15c20:	7f23      	ldrb	r3, [r4, #28]
   15c22:	f013 010f 	ands.w	r1, r3, #15
   15c26:	d002      	beq.n	15c2e <isr_rx+0x86>
   15c28:	2906      	cmp	r1, #6
   15c2a:	f040 80e1 	bne.w	15df0 <isr_rx+0x248>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
   15c2e:	7f60      	ldrb	r0, [r4, #29]
   15c30:	2825      	cmp	r0, #37	; 0x25
   15c32:	d86b      	bhi.n	15d0c <isr_rx+0x164>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind)) &&
		   lll->type &&
   15c34:	0690      	lsls	r0, r2, #26
   15c36:	d569      	bpl.n	15d0c <isr_rx+0x164>
		bt_addr_t *lrpa;
#endif /* CONFIG_BT_CTLR_PRIVACY */
		int err;

		/* setup tIFS switching */
		radio_tmr_tifs_set(EVENT_IFS_US);
   15c38:	2096      	movs	r0, #150	; 0x96
   15c3a:	f000 ff4d 	bl	16ad8 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   15c3e:	2000      	movs	r0, #0
   15c40:	f000 fea4 	bl	1698c <radio_switch_complete_and_rx>
			      uint8_t rl_idx, bool dir_report)
{
	struct node_rx_pdu *node_rx;
	int err = 0;

	node_rx = ull_pdu_rx_alloc_peek(3);
   15c44:	2003      	movs	r0, #3
   15c46:	f7fc fa9d 	bl	12184 <ull_pdu_rx_alloc_peek>
	if (!node_rx) {
   15c4a:	4606      	mov	r6, r0
   15c4c:	2800      	cmp	r0, #0
   15c4e:	f000 808c 	beq.w	15d6a <isr_rx+0x1c2>
		return -ENOBUFS;
	}
	ull_pdu_rx_alloc();
   15c52:	f7fc faaf 	bl	121b4 <ull_pdu_rx_alloc>

	/* Prepare the report (adv or scan resp) */
	node_rx->hdr.handle = 0xffff;
   15c56:	f64f 73ff 	movw	r3, #65535	; 0xffff
   15c5a:	80f3      	strh	r3, [r6, #6]
			}
			break;
		}
#endif /* CONFIG_BT_CTLR_ADV_EXT */
	} else {
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
   15c5c:	2305      	movs	r3, #5
   15c5e:	7133      	strb	r3, [r6, #4]
	}

	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
   15c60:	2f00      	cmp	r7, #0
   15c62:	d051      	beq.n	15d08 <isr_rx+0x160>
   15c64:	f000 fed2 	bl	16a0c <radio_rssi_get>
   15c68:	b2c0      	uxtb	r0, r0
#endif /* CONFIG_BT_CTLR_ADV_EXT */
#endif /* CONFIG_BT_CTLR_PRIVACY */

#if defined(CONFIG_BT_CTLR_EXT_SCAN_FP)
	/* save the directed adv report flag */
	node_rx->hdr.rx_ftr.direct = dir_report;
   15c6a:	7e73      	ldrb	r3, [r6, #25]
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
   15c6c:	7630      	strb	r0, [r6, #24]
	node_rx->hdr.rx_ftr.direct = dir_report;
   15c6e:	f36f 0300 	bfc	r3, #0, #1
   15c72:	7673      	strb	r3, [r6, #25]
		node_rx->hdr.rx_ftr.chan = _radio.scanner.chan - 1;
		node_rx->hdr.rx_ftr.ticks_anchor = _radio.ticks_anchor;
	}
#endif /* CONFIG_BT_CTLR_EXT_SCAN_FP */

	ull_rx_put(node_rx->hdr.link, node_rx);
   15c74:	4631      	mov	r1, r6
   15c76:	6830      	ldr	r0, [r6, #0]
   15c78:	f7fc fab2 	bl	121e0 <ull_rx_put>
	ull_rx_sched();
   15c7c:	f7fc fac0 	bl	12200 <ull_rx_sched>
		pdu_tx = (void *)radio_pkt_scratch_get();
   15c80:	f000 fe10 	bl	168a4 <radio_pkt_scratch_get>
			pdu_tx->tx_addr = lll->init_addr_type;
   15c84:	792b      	ldrb	r3, [r5, #4]
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
   15c86:	7f22      	ldrb	r2, [r4, #28]
			pdu_tx->tx_addr = lll->init_addr_type;
   15c88:	f3c3 1380 	ubfx	r3, r3, #6, #1
		pdu_tx->type = PDU_ADV_TYPE_SCAN_REQ;
   15c8c:	019b      	lsls	r3, r3, #6
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
   15c8e:	f3c2 1280 	ubfx	r2, r2, #6, #1
		pdu_tx->type = PDU_ADV_TYPE_SCAN_REQ;
   15c92:	f043 0303 	orr.w	r3, r3, #3
   15c96:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
   15c9a:	7802      	ldrb	r2, [r0, #0]
   15c9c:	f002 0230 	and.w	r2, r2, #48	; 0x30
   15ca0:	4313      	orrs	r3, r2
   15ca2:	7003      	strb	r3, [r0, #0]
		pdu_tx->len = sizeof(struct pdu_adv_scan_req);
   15ca4:	230c      	movs	r3, #12
   15ca6:	7043      	strb	r3, [r0, #1]
		pdu_tx = (void *)radio_pkt_scratch_get();
   15ca8:	4606      	mov	r6, r0
			memcpy(&pdu_tx->scan_req.scan_addr[0],
   15caa:	2206      	movs	r2, #6
   15cac:	1d69      	adds	r1, r5, #5
   15cae:	3002      	adds	r0, #2
   15cb0:	f008 f9bf 	bl	1e032 <memcpy>
		memcpy(&pdu_tx->scan_req.adv_addr[0],
   15cb4:	2206      	movs	r2, #6
   15cb6:	f104 011e 	add.w	r1, r4, #30
   15cba:	f106 0008 	add.w	r0, r6, #8
   15cbe:	f008 f9b8 	bl	1e032 <memcpy>
		radio_pkt_tx_set(pdu_tx);
   15cc2:	4630      	mov	r0, r6
   15cc4:	f000 fd86 	bl	167d4 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   15cc8:	f000 fdb4 	bl	16834 <radio_is_ready>
   15ccc:	b160      	cbz	r0, 15ce8 <isr_rx+0x140>
   15cce:	4a49      	ldr	r2, [pc, #292]	; (15df4 <isr_rx+0x24c>)
   15cd0:	494b      	ldr	r1, [pc, #300]	; (15e00 <isr_rx+0x258>)
   15cd2:	484a      	ldr	r0, [pc, #296]	; (15dfc <isr_rx+0x254>)
   15cd4:	f240 5316 	movw	r3, #1302	; 0x516
   15cd8:	f006 faf6 	bl	1c2c8 <printk>
   15cdc:	4040      	eors	r0, r0
   15cde:	f380 8811 	msr	BASEPRI, r0
   15ce2:	f04f 0003 	mov.w	r0, #3
   15ce6:	df02      	svc	2
		radio_tmr_end_capture();
   15ce8:	f000 ffd0 	bl	16c8c <radio_tmr_end_capture>
		lll->state = 1U;
   15cec:	792b      	ldrb	r3, [r5, #4]
		radio_isr_set(isr_tx, lll);
   15cee:	4845      	ldr	r0, [pc, #276]	; (15e04 <isr_rx+0x25c>)
		lll->state = 1U;
   15cf0:	f043 0301 	orr.w	r3, r3, #1
   15cf4:	712b      	strb	r3, [r5, #4]
		radio_isr_set(isr_tx, lll);
   15cf6:	4629      	mov	r1, r5
}
   15cf8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		radio_isr_set(isr_tx, lll);
   15cfc:	f000 bcb4 	b.w	16668 <radio_isr_set>
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready =
   15d00:	46a0      	mov	r8, r4
   15d02:	4627      	mov	r7, r4
   15d04:	4626      	mov	r6, r4
   15d06:	e76a      	b.n	15bde <isr_rx+0x36>
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
   15d08:	207f      	movs	r0, #127	; 0x7f
   15d0a:	e7ae      	b.n	15c6a <isr_rx+0xc2>
	else if (((((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   15d0c:	f013 0f0d 	tst.w	r3, #13
   15d10:	d001      	beq.n	15d16 <isr_rx+0x16e>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
   15d12:	2906      	cmp	r1, #6
   15d14:	d122      	bne.n	15d5c <isr_rx+0x1b4>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
   15d16:	7f60      	ldrb	r0, [r4, #29]
   15d18:	2825      	cmp	r0, #37	; 0x25
   15d1a:	d81f      	bhi.n	15d5c <isr_rx+0x1b4>
	bool dir_report = false;
   15d1c:	2600      	movs	r6, #0
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
   15d1e:	7f63      	ldrb	r3, [r4, #29]
   15d20:	b31b      	cbz	r3, 15d6a <isr_rx+0x1c2>
	node_rx = ull_pdu_rx_alloc_peek(3);
   15d22:	2003      	movs	r0, #3
   15d24:	f7fc fa2e 	bl	12184 <ull_pdu_rx_alloc_peek>
	if (!node_rx) {
   15d28:	4604      	mov	r4, r0
   15d2a:	b1f0      	cbz	r0, 15d6a <isr_rx+0x1c2>
	ull_pdu_rx_alloc();
   15d2c:	f7fc fa42 	bl	121b4 <ull_pdu_rx_alloc>
	node_rx->hdr.handle = 0xffff;
   15d30:	f64f 73ff 	movw	r3, #65535	; 0xffff
   15d34:	80e3      	strh	r3, [r4, #6]
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
   15d36:	2305      	movs	r3, #5
   15d38:	7123      	strb	r3, [r4, #4]
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
   15d3a:	2f00      	cmp	r7, #0
   15d3c:	d056      	beq.n	15dec <isr_rx+0x244>
   15d3e:	f000 fe65 	bl	16a0c <radio_rssi_get>
   15d42:	b2c0      	uxtb	r0, r0
	node_rx->hdr.rx_ftr.direct = dir_report;
   15d44:	7e63      	ldrb	r3, [r4, #25]
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
   15d46:	7620      	strb	r0, [r4, #24]
	node_rx->hdr.rx_ftr.direct = dir_report;
   15d48:	f366 0300 	bfi	r3, r6, #0, #1
	ull_rx_put(node_rx->hdr.link, node_rx);
   15d4c:	6820      	ldr	r0, [r4, #0]
	node_rx->hdr.rx_ftr.direct = dir_report;
   15d4e:	7663      	strb	r3, [r4, #25]
	ull_rx_put(node_rx->hdr.link, node_rx);
   15d50:	4621      	mov	r1, r4
   15d52:	f7fc fa45 	bl	121e0 <ull_rx_put>
	ull_rx_sched();
   15d56:	f7fc fa53 	bl	12200 <ull_rx_sched>
	if (!err) {
   15d5a:	e006      	b.n	15d6a <isr_rx+0x1c2>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind))) ||
   15d5c:	2901      	cmp	r1, #1
   15d5e:	d00c      	beq.n	15d7a <isr_rx+0x1d2>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
   15d60:	7f23      	ldrb	r3, [r4, #28]
					rl_idx, &dir_report))) ||
   15d62:	f003 030f 	and.w	r3, r3, #15
   15d66:	2b04      	cmp	r3, #4
   15d68:	d028      	beq.n	15dbc <isr_rx+0x214>
	radio_isr_set(isr_done, lll);
   15d6a:	4629      	mov	r1, r5
   15d6c:	4826      	ldr	r0, [pc, #152]	; (15e08 <isr_rx+0x260>)
   15d6e:	f000 fc7b 	bl	16668 <radio_isr_set>
}
   15d72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	radio_disable();
   15d76:	f000 bd3f 	b.w	167f8 <radio_disable>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
   15d7a:	7f61      	ldrb	r1, [r4, #29]
   15d7c:	290c      	cmp	r1, #12
   15d7e:	d1f4      	bne.n	15d6a <isr_rx+0x1c2>
		 !memcmp(lll->init_addr, addr, BDADDR_SIZE))) ||
   15d80:	f3c2 1280 	ubfx	r2, r2, #6, #1
   15d84:	ebb2 1fd3 	cmp.w	r2, r3, lsr #7
		    isr_scan_tgta_check(lll, false, pdu_adv_rx->rx_addr,
   15d88:	ea4f 16d3 	mov.w	r6, r3, lsr #7
		 !memcmp(lll->init_addr, addr, BDADDR_SIZE))) ||
   15d8c:	d00d      	beq.n	15daa <isr_rx+0x202>
	if (((lll->filter_policy & SCAN_FP_EXT) != 0U) && (addr_type != 0U) &&
   15d8e:	792b      	ldrb	r3, [r5, #4]
   15d90:	f3c3 03c1 	ubfx	r3, r3, #3, #2
   15d94:	079a      	lsls	r2, r3, #30
   15d96:	d5e3      	bpl.n	15d60 <isr_rx+0x1b8>
   15d98:	2e00      	cmp	r6, #0
   15d9a:	d0e1      	beq.n	15d60 <isr_rx+0x1b8>
   15d9c:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   15da0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   15da4:	2b40      	cmp	r3, #64	; 0x40
   15da6:	d1db      	bne.n	15d60 <isr_rx+0x1b8>
   15da8:	e7b9      	b.n	15d1e <isr_rx+0x176>
		 !memcmp(lll->init_addr, addr, BDADDR_SIZE))) ||
   15daa:	2206      	movs	r2, #6
   15dac:	f104 0124 	add.w	r1, r4, #36	; 0x24
   15db0:	1d68      	adds	r0, r5, #5
   15db2:	f008 f92d 	bl	1e010 <memcmp>
	return (((lll->init_addr_type == addr_type) &&
   15db6:	2800      	cmp	r0, #0
   15db8:	d0b0      	beq.n	15d1c <isr_rx+0x174>
   15dba:	e7e8      	b.n	15d8e <isr_rx+0x1e6>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
   15dbc:	7f63      	ldrb	r3, [r4, #29]
   15dbe:	2b25      	cmp	r3, #37	; 0x25
   15dc0:	d8d3      	bhi.n	15d6a <isr_rx+0x1c2>
		   (lll->state != 0U) &&
   15dc2:	792b      	ldrb	r3, [r5, #4]
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_scan_rsp)) &&
   15dc4:	07db      	lsls	r3, r3, #31
   15dc6:	d5d0      	bpl.n	15d6a <isr_rx+0x1c2>
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
   15dc8:	f000 fd6c 	bl	168a4 <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
   15dcc:	7f23      	ldrb	r3, [r4, #28]
   15dce:	7802      	ldrb	r2, [r0, #0]
   15dd0:	f3c3 1380 	ubfx	r3, r3, #6, #1
   15dd4:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   15dd8:	d1c7      	bne.n	15d6a <isr_rx+0x1c2>
		(memcmp(&sreq->scan_req.adv_addr[0],
   15dda:	2206      	movs	r2, #6
   15ddc:	f104 011e 	add.w	r1, r4, #30
   15de0:	3008      	adds	r0, #8
   15de2:	f008 f915 	bl	1e010 <memcmp>
		   (lll->state != 0U) &&
   15de6:	2800      	cmp	r0, #0
   15de8:	d098      	beq.n	15d1c <isr_rx+0x174>
   15dea:	e7be      	b.n	15d6a <isr_rx+0x1c2>
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
   15dec:	207f      	movs	r0, #127	; 0x7f
   15dee:	e7a9      	b.n	15d44 <isr_rx+0x19c>
	else if (((((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   15df0:	2902      	cmp	r1, #2
   15df2:	e78f      	b.n	15d14 <isr_rx+0x16c>
   15df4:	00028041 	.word	0x00028041
   15df8:	00028003 	.word	0x00028003
   15dfc:	00027514 	.word	0x00027514
   15e00:	0002800b 	.word	0x0002800b
   15e04:	000159ed 	.word	0x000159ed
   15e08:	00024801 	.word	0x00024801

00015e0c <lll_scan_prepare>:
{
   15e0c:	b513      	push	{r0, r1, r4, lr}
   15e0e:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   15e10:	f7ff f900 	bl	15014 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   15e14:	2800      	cmp	r0, #0
   15e16:	da0b      	bge.n	15e30 <lll_scan_prepare+0x24>
   15e18:	4a11      	ldr	r2, [pc, #68]	; (15e60 <lll_scan_prepare+0x54>)
   15e1a:	4912      	ldr	r1, [pc, #72]	; (15e64 <lll_scan_prepare+0x58>)
   15e1c:	4812      	ldr	r0, [pc, #72]	; (15e68 <lll_scan_prepare+0x5c>)
   15e1e:	2388      	movs	r3, #136	; 0x88
   15e20:	f006 fa52 	bl	1c2c8 <printk>
   15e24:	4040      	eors	r0, r0
   15e26:	f380 8811 	msr	BASEPRI, r0
   15e2a:	f04f 0003 	mov.w	r0, #3
   15e2e:	df02      	svc	2
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   15e30:	4a0e      	ldr	r2, [pc, #56]	; (15e6c <lll_scan_prepare+0x60>)
   15e32:	490f      	ldr	r1, [pc, #60]	; (15e70 <lll_scan_prepare+0x64>)
   15e34:	480f      	ldr	r0, [pc, #60]	; (15e74 <lll_scan_prepare+0x68>)
   15e36:	9400      	str	r4, [sp, #0]
   15e38:	2300      	movs	r3, #0
   15e3a:	f00e f8c7 	bl	23fcc <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   15e3e:	b168      	cbz	r0, 15e5c <lll_scan_prepare+0x50>
   15e40:	3077      	adds	r0, #119	; 0x77
   15e42:	d00b      	beq.n	15e5c <lll_scan_prepare+0x50>
   15e44:	4a06      	ldr	r2, [pc, #24]	; (15e60 <lll_scan_prepare+0x54>)
   15e46:	490c      	ldr	r1, [pc, #48]	; (15e78 <lll_scan_prepare+0x6c>)
   15e48:	4807      	ldr	r0, [pc, #28]	; (15e68 <lll_scan_prepare+0x5c>)
   15e4a:	238b      	movs	r3, #139	; 0x8b
   15e4c:	f006 fa3c 	bl	1c2c8 <printk>
   15e50:	4040      	eors	r0, r0
   15e52:	f380 8811 	msr	BASEPRI, r0
   15e56:	f04f 0003 	mov.w	r0, #3
   15e5a:	df02      	svc	2
}
   15e5c:	b002      	add	sp, #8
   15e5e:	bd10      	pop	{r4, pc}
   15e60:	00028041 	.word	0x00028041
   15e64:	00027f87 	.word	0x00027f87
   15e68:	00027514 	.word	0x00027514
   15e6c:	000247e5 	.word	0x000247e5
   15e70:	00015b59 	.word	0x00015b59
   15e74:	00015ab9 	.word	0x00015ab9
   15e78:	0002802d 	.word	0x0002802d

00015e7c <isr_done>:
{
	return 0;
}

static void isr_done(void *param)
{
   15e7c:	b570      	push	{r4, r5, r6, lr}
   15e7e:	4605      	mov	r5, r0
	struct event_done_extra *e;

	lll_isr_status_reset();
   15e80:	f00e fbd8 	bl	24634 <lll_isr_status_reset>

	e = ull_event_done_extra_get();
   15e84:	f7fc fa74 	bl	12370 <ull_event_done_extra_get>
	LL_ASSERT(e);
   15e88:	4604      	mov	r4, r0
   15e8a:	b960      	cbnz	r0, 15ea6 <isr_done+0x2a>
   15e8c:	4a17      	ldr	r2, [pc, #92]	; (15eec <isr_done+0x70>)
   15e8e:	4918      	ldr	r1, [pc, #96]	; (15ef0 <isr_done+0x74>)
   15e90:	4818      	ldr	r0, [pc, #96]	; (15ef4 <isr_done+0x78>)
   15e92:	f240 3317 	movw	r3, #791	; 0x317
   15e96:	f006 fa17 	bl	1c2c8 <printk>
   15e9a:	4040      	eors	r0, r0
   15e9c:	f380 8811 	msr	BASEPRI, r0
   15ea0:	f04f 0003 	mov.w	r0, #3
   15ea4:	df02      	svc	2

	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   15ea6:	2301      	movs	r3, #1
	e->trx_cnt = trx_cnt;
	e->crc_valid = crc_valid;
   15ea8:	4913      	ldr	r1, [pc, #76]	; (15ef8 <isr_done+0x7c>)
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   15eaa:	7023      	strb	r3, [r4, #0]
	e->trx_cnt = trx_cnt;
   15eac:	4b13      	ldr	r3, [pc, #76]	; (15efc <isr_done+0x80>)
	e->crc_valid = crc_valid;
   15eae:	79a2      	ldrb	r2, [r4, #6]
   15eb0:	7809      	ldrb	r1, [r1, #0]
	e->trx_cnt = trx_cnt;
   15eb2:	881b      	ldrh	r3, [r3, #0]
   15eb4:	80a3      	strh	r3, [r4, #4]
	e->crc_valid = crc_valid;
   15eb6:	f361 0200 	bfi	r2, r1, #0, #1
   15eba:	71a2      	strb	r2, [r4, #6]
#if defined(CONFIG_BT_CTLR_LE_ENC)
	e->mic_state = mic_state;
#endif /* CONFIG_BT_CTLR_LE_ENC */

#if defined(CONFIG_BT_PERIPHERAL)
	if (trx_cnt) {
   15ebc:	b18b      	cbz	r3, 15ee2 <isr_done+0x66>
		struct lll_conn *lll = param;

		if (lll->role) {
   15ebe:	f995 301d 	ldrsb.w	r3, [r5, #29]
   15ec2:	2b00      	cmp	r3, #0
   15ec4:	da0d      	bge.n	15ee2 <isr_done+0x66>
			preamble_to_addr_us =
				addr_us_get(0);
#endif /* !CONFIG_BT_CTLR_PHY */

			e->drift.start_to_address_actual_us =
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   15ec6:	f000 fed5 	bl	16c74 <radio_tmr_aa_restore>
   15eca:	4606      	mov	r6, r0
   15ecc:	f000 fed8 	bl	16c80 <radio_tmr_ready_get>
			e->drift.window_widening_event_us =
   15ed0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   15ed2:	60e3      	str	r3, [r4, #12]
				lll->periph.window_widening_event_us;
			e->drift.preamble_to_addr_us = preamble_to_addr_us;
   15ed4:	2328      	movs	r3, #40	; 0x28
   15ed6:	6123      	str	r3, [r4, #16]
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   15ed8:	1a36      	subs	r6, r6, r0

			/* Reset window widening, as anchor point sync-ed */
			lll->periph.window_widening_event_us = 0;
   15eda:	2300      	movs	r3, #0
			e->drift.start_to_address_actual_us =
   15edc:	60a6      	str	r6, [r4, #8]
			lll->periph.window_widening_event_us = 0;
   15ede:	632b      	str	r3, [r5, #48]	; 0x30
			lll->periph.window_size_event_us = 0;
   15ee0:	63ab      	str	r3, [r5, #56]	; 0x38
		}
	}
#endif /* CONFIG_BT_PERIPHERAL */

	lll_isr_cleanup(param);
   15ee2:	4628      	mov	r0, r5
}
   15ee4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	lll_isr_cleanup(param);
   15ee8:	f7fe bf48 	b.w	14d7c <lll_isr_cleanup>
   15eec:	0002808c 	.word	0x0002808c
   15ef0:	00027b06 	.word	0x00027b06
   15ef4:	00027514 	.word	0x00027514
   15ef8:	20004104 	.word	0x20004104
   15efc:	20003fee 	.word	0x20003fee

00015f00 <lll_conn_prepare_reset>:
	trx_cnt = 0U;
   15f00:	4a03      	ldr	r2, [pc, #12]	; (15f10 <lll_conn_prepare_reset+0x10>)
   15f02:	2300      	movs	r3, #0
   15f04:	8013      	strh	r3, [r2, #0]
	crc_valid = 0U;
   15f06:	4a03      	ldr	r2, [pc, #12]	; (15f14 <lll_conn_prepare_reset+0x14>)
   15f08:	7013      	strb	r3, [r2, #0]
	crc_expire = 0U;
   15f0a:	4a03      	ldr	r2, [pc, #12]	; (15f18 <lll_conn_prepare_reset+0x18>)
   15f0c:	7013      	strb	r3, [r2, #0]
}
   15f0e:	4770      	bx	lr
   15f10:	20003fee 	.word	0x20003fee
   15f14:	20004104 	.word	0x20004104
   15f18:	20004103 	.word	0x20004103

00015f1c <lll_conn_abort_cb>:
{
   15f1c:	b538      	push	{r3, r4, r5, lr}
   15f1e:	460d      	mov	r5, r1
	if (!prepare_param) {
   15f20:	4604      	mov	r4, r0
   15f22:	b930      	cbnz	r0, 15f32 <lll_conn_abort_cb+0x16>
		radio_isr_set(isr_done, param);
   15f24:	4810      	ldr	r0, [pc, #64]	; (15f68 <lll_conn_abort_cb+0x4c>)
   15f26:	f000 fb9f 	bl	16668 <radio_isr_set>
}
   15f2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		radio_disable();
   15f2e:	f000 bc63 	b.w	167f8 <radio_disable>
	err = lll_hfclock_off();
   15f32:	f7ff f885 	bl	15040 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   15f36:	2800      	cmp	r0, #0
   15f38:	da0b      	bge.n	15f52 <lll_conn_abort_cb+0x36>
   15f3a:	4a0c      	ldr	r2, [pc, #48]	; (15f6c <lll_conn_abort_cb+0x50>)
   15f3c:	490c      	ldr	r1, [pc, #48]	; (15f70 <lll_conn_abort_cb+0x54>)
   15f3e:	480d      	ldr	r0, [pc, #52]	; (15f74 <lll_conn_abort_cb+0x58>)
   15f40:	23aa      	movs	r3, #170	; 0xaa
   15f42:	f006 f9c1 	bl	1c2c8 <printk>
   15f46:	4040      	eors	r0, r0
   15f48:	f380 8811 	msr	BASEPRI, r0
   15f4c:	f04f 0003 	mov.w	r0, #3
   15f50:	df02      	svc	2
	lll = prepare_param->param;
   15f52:	68e2      	ldr	r2, [r4, #12]
	lll->latency_prepare += (prepare_param->lazy + 1);
   15f54:	8923      	ldrh	r3, [r4, #8]
   15f56:	8a51      	ldrh	r1, [r2, #18]
   15f58:	3301      	adds	r3, #1
   15f5a:	440b      	add	r3, r1
   15f5c:	8253      	strh	r3, [r2, #18]
	lll_done(param);
   15f5e:	4628      	mov	r0, r5
}
   15f60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lll_done(param);
   15f64:	f7fe be7c 	b.w	14c60 <lll_done>
   15f68:	00015e7d 	.word	0x00015e7d
   15f6c:	0002808c 	.word	0x0002808c
   15f70:	00027f87 	.word	0x00027f87
   15f74:	00027514 	.word	0x00027514

00015f78 <lll_conn_rx_pkt_set>:
{
   15f78:	b510      	push	{r4, lr}
	node_rx = ull_pdu_rx_alloc_peek(1);
   15f7a:	2001      	movs	r0, #1
   15f7c:	f7fc f902 	bl	12184 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   15f80:	4604      	mov	r4, r0
   15f82:	b960      	cbnz	r0, 15f9e <lll_conn_rx_pkt_set+0x26>
   15f84:	4a0d      	ldr	r2, [pc, #52]	; (15fbc <lll_conn_rx_pkt_set+0x44>)
   15f86:	490e      	ldr	r1, [pc, #56]	; (15fc0 <lll_conn_rx_pkt_set+0x48>)
   15f88:	480e      	ldr	r0, [pc, #56]	; (15fc4 <lll_conn_rx_pkt_set+0x4c>)
   15f8a:	f240 235a 	movw	r3, #602	; 0x25a
   15f8e:	f006 f99b 	bl	1c2c8 <printk>
   15f92:	4040      	eors	r0, r0
   15f94:	f380 8811 	msr	BASEPRI, r0
   15f98:	f04f 0003 	mov.w	r0, #3
   15f9c:	df02      	svc	2
	radio_phy_set(phy, 0);
   15f9e:	2100      	movs	r1, #0
   15fa0:	4608      	mov	r0, r1
   15fa2:	f000 fba5 	bl	166f0 <radio_phy_set>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, max_rx_octets,
   15fa6:	2008      	movs	r0, #8
   15fa8:	2201      	movs	r2, #1
   15faa:	211b      	movs	r1, #27
   15fac:	f000 fbe6 	bl	1677c <radio_pkt_configure>
		radio_pkt_rx_set(node_rx->pdu);
   15fb0:	f104 001c 	add.w	r0, r4, #28
}
   15fb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_pkt_rx_set(node_rx->pdu);
   15fb8:	f000 bc06 	b.w	167c8 <radio_pkt_rx_set>
   15fbc:	0002808c 	.word	0x0002808c
   15fc0:	00028003 	.word	0x00028003
   15fc4:	00027514 	.word	0x00027514

00015fc8 <lll_conn_isr_tx>:
{
   15fc8:	b570      	push	{r4, r5, r6, lr}
   15fca:	4605      	mov	r5, r0
	lll_isr_tx_status_reset();
   15fcc:	f00e fb22 	bl	24614 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   15fd0:	2096      	movs	r0, #150	; 0x96
   15fd2:	f000 fd81 	bl	16ad8 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   15fd6:	2300      	movs	r3, #0
   15fd8:	4618      	mov	r0, r3
   15fda:	461a      	mov	r2, r3
   15fdc:	4619      	mov	r1, r3
   15fde:	f000 fce9 	bl	169b4 <radio_switch_complete_and_tx>
	lll_conn_rx_pkt_set(lll);
   15fe2:	4628      	mov	r0, r5
   15fe4:	f7ff ffc8 	bl	15f78 <lll_conn_rx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   15fe8:	f000 fc24 	bl	16834 <radio_is_ready>
   15fec:	b160      	cbz	r0, 16008 <lll_conn_isr_tx+0x40>
   15fee:	4a12      	ldr	r2, [pc, #72]	; (16038 <lll_conn_isr_tx+0x70>)
   15ff0:	4912      	ldr	r1, [pc, #72]	; (1603c <lll_conn_isr_tx+0x74>)
   15ff2:	4813      	ldr	r0, [pc, #76]	; (16040 <lll_conn_isr_tx+0x78>)
   15ff4:	f240 2313 	movw	r3, #531	; 0x213
   15ff8:	f006 f966 	bl	1c2c8 <printk>
   15ffc:	4040      	eors	r0, r0
   15ffe:	f380 8811 	msr	BASEPRI, r0
   16002:	f04f 0003 	mov.w	r0, #3
   16006:	df02      	svc	2
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + (EVENT_CLOCK_JITTER_US << 1) +
   16008:	f000 fe4e 	bl	16ca8 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(0, 0);
   1600c:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + (EVENT_CLOCK_JITTER_US << 1) +
   1600e:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(0, 0);
   16010:	4608      	mov	r0, r1
   16012:	f00e fd30 	bl	24a76 <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(0, 0);
   16016:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(0, 0);
   16018:	4606      	mov	r6, r0
	hcto -= radio_tx_chain_delay_get(0, 0);
   1601a:	4608      	mov	r0, r1
   1601c:	f00e fd27 	bl	24a6e <radio_tx_chain_delay_get>
   16020:	4434      	add	r4, r6
   16022:	34cb      	adds	r4, #203	; 0xcb
	radio_tmr_hcto_configure(hcto);
   16024:	1a20      	subs	r0, r4, r0
   16026:	f000 fdf9 	bl	16c1c <radio_tmr_hcto_configure>
	radio_isr_set(lll_conn_isr_rx, param);
   1602a:	4629      	mov	r1, r5
   1602c:	4805      	ldr	r0, [pc, #20]	; (16044 <lll_conn_isr_tx+0x7c>)
}
   1602e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	radio_isr_set(lll_conn_isr_rx, param);
   16032:	f000 bb19 	b.w	16668 <radio_isr_set>
   16036:	bf00      	nop
   16038:	0002808c 	.word	0x0002808c
   1603c:	0002800b 	.word	0x0002800b
   16040:	00027514 	.word	0x00027514
   16044:	00016049 	.word	0x00016049

00016048 <lll_conn_isr_rx>:
{
   16048:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1604c:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   1604e:	f000 fbfb 	bl	16848 <radio_is_done>
	if (trx_done) {
   16052:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
   16056:	d010      	beq.n	1607a <lll_conn_isr_rx+0x32>
		crc_ok = radio_crc_is_valid();
   16058:	f000 fc16 	bl	16888 <radio_crc_is_valid>
   1605c:	b2c7      	uxtb	r7, r0
		rssi_ready = radio_rssi_is_ready();
   1605e:	f000 fce3 	bl	16a28 <radio_rssi_is_ready>
	lll_isr_rx_status_reset();
   16062:	f00e fade 	bl	24622 <lll_isr_rx_status_reset>
	if (!trx_done) {
   16066:	b955      	cbnz	r5, 1607e <lll_conn_isr_rx+0x36>
		radio_isr_set(isr_done, param);
   16068:	489e      	ldr	r0, [pc, #632]	; (162e4 <lll_conn_isr_rx+0x29c>)
   1606a:	4621      	mov	r1, r4
   1606c:	f000 fafc 	bl	16668 <radio_isr_set>
}
   16070:	b002      	add	sp, #8
   16072:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		radio_disable();
   16076:	f000 bbbf 	b.w	167f8 <radio_disable>
		crc_ok = rssi_ready = 0U;
   1607a:	462f      	mov	r7, r5
   1607c:	e7f1      	b.n	16062 <lll_conn_isr_rx+0x1a>
	trx_cnt++;
   1607e:	4a9a      	ldr	r2, [pc, #616]	; (162e8 <lll_conn_isr_rx+0x2a0>)
   16080:	8813      	ldrh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   16082:	2001      	movs	r0, #1
	trx_cnt++;
   16084:	3301      	adds	r3, #1
   16086:	8013      	strh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   16088:	f7fc f87c 	bl	12184 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1608c:	4606      	mov	r6, r0
   1608e:	b958      	cbnz	r0, 160a8 <lll_conn_isr_rx+0x60>
   16090:	4a96      	ldr	r2, [pc, #600]	; (162ec <lll_conn_isr_rx+0x2a4>)
   16092:	4997      	ldr	r1, [pc, #604]	; (162f0 <lll_conn_isr_rx+0x2a8>)
   16094:	4897      	ldr	r0, [pc, #604]	; (162f4 <lll_conn_isr_rx+0x2ac>)
   16096:	23f2      	movs	r3, #242	; 0xf2
   16098:	f006 f916 	bl	1c2c8 <printk>
   1609c:	4040      	eors	r0, r0
   1609e:	f380 8811 	msr	BASEPRI, r0
   160a2:	f04f 0003 	mov.w	r0, #3
   160a6:	df02      	svc	2
	if (crc_ok) {
   160a8:	f8df 824c 	ldr.w	r8, [pc, #588]	; 162f8 <lll_conn_isr_rx+0x2b0>
   160ac:	2f00      	cmp	r7, #0
   160ae:	f000 80fa 	beq.w	162a6 <lll_conn_isr_rx+0x25e>
#elif !defined(HAL_RADIO_PDU_LEN_MAX)
#error "Undefined HAL_RADIO_PDU_LEN_MAX."
#endif

	/* Ack for tx-ed data */
	if (pdu_data_rx->nesn != lll->sn) {
   160b2:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
   160b6:	7f31      	ldrb	r1, [r6, #28]
   160b8:	f003 0201 	and.w	r2, r3, #1
   160bc:	f3c1 0180 	ubfx	r1, r1, #2, #1
   160c0:	4291      	cmp	r1, r2
   160c2:	f000 80ab 	beq.w	1621c <lll_conn_isr_rx+0x1d4>
		struct pdu_data *pdu_data_tx;
		struct node_tx *tx;
		memq_link_t *link;

		/* Increment sequence number */
		lll->sn++;
   160c6:	f082 0201 	eor.w	r2, r2, #1
   160ca:	f362 0300 	bfi	r3, r2, #0, #1
   160ce:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52

#if defined(CONFIG_BT_PERIPHERAL)
		/* First ack (and redundantly any other ack) enable use of
		 * peripheral latency.
		 */
		if (lll->role) {
   160d2:	f994 301d 	ldrsb.w	r3, [r4, #29]
   160d6:	2b00      	cmp	r3, #0
			lll->periph.latency_enabled = 1;
   160d8:	bfbe      	ittt	lt
   160da:	f894 3020 	ldrblt.w	r3, [r4, #32]
   160de:	f043 0304 	orrlt.w	r3, r3, #4
   160e2:	f884 3020 	strblt.w	r3, [r4, #32]
		}
#endif /* CONFIG_BT_PERIPHERAL */

		FORCE_MD_CNT_DEC();

		if (!lll->empty) {
   160e6:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
   160ea:	f013 0504 	ands.w	r5, r3, #4
   160ee:	f040 808f 	bne.w	16210 <lll_conn_isr_rx+0x1c8>
			link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail,
   160f2:	e9d4 010f 	ldrd	r0, r1, [r4, #60]	; 0x3c
   160f6:	aa01      	add	r2, sp, #4
   160f8:	f00d fbd3 	bl	238a2 <memq_peek>
			}

			link = NULL;
		}

		if (link) {
   160fc:	4681      	mov	r9, r0
   160fe:	2800      	cmp	r0, #0
   16100:	f040 808f 	bne.w	16222 <lll_conn_isr_rx+0x1da>
			}
		}
	}

	/* process received data */
	if ((pdu_data_rx->sn == lll->nesn) &&
   16104:	7f32      	ldrb	r2, [r6, #28]
   16106:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
   1610a:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   1610e:	f3c3 0340 	ubfx	r3, r3, #1, #1
   16112:	429a      	cmp	r2, r3
   16114:	f000 80b3 	beq.w	1627e <lll_conn_isr_rx+0x236>
	is_rx_enqueue = 0U;
   16118:	f04f 0a00 	mov.w	sl, #0
		crc_valid = 1U;
   1611c:	4b77      	ldr	r3, [pc, #476]	; (162fc <lll_conn_isr_rx+0x2b4>)
		crc_expire = 0U;
   1611e:	2500      	movs	r5, #0
		crc_valid = 1U;
   16120:	2201      	movs	r2, #1
		crc_expire = 0U;
   16122:	f888 5000 	strb.w	r5, [r8]
		crc_valid = 1U;
   16126:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   16128:	a901      	add	r1, sp, #4
   1612a:	4620      	mov	r0, r4
   1612c:	f00e fbec 	bl	24908 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   16130:	2d00      	cmp	r5, #0
   16132:	f040 80cb 	bne.w	162cc <lll_conn_isr_rx+0x284>
   16136:	b157      	cbz	r7, 1614e <lll_conn_isr_rx+0x106>
   16138:	7f33      	ldrb	r3, [r6, #28]
   1613a:	06d9      	lsls	r1, r3, #27
   1613c:	d407      	bmi.n	1614e <lll_conn_isr_rx+0x106>
			      (pdu_data_tx->md == 0) &&
   1613e:	9b01      	ldr	r3, [sp, #4]
   16140:	781a      	ldrb	r2, [r3, #0]
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   16142:	06d2      	lsls	r2, r2, #27
   16144:	d403      	bmi.n	1614e <lll_conn_isr_rx+0x106>
			      (pdu_data_tx->md == 0) &&
   16146:	785b      	ldrb	r3, [r3, #1]
   16148:	2b00      	cmp	r3, #0
   1614a:	f000 80bf 	beq.w	162cc <lll_conn_isr_rx+0x284>
		radio_tmr_tifs_set(EVENT_IFS_US);
   1614e:	2096      	movs	r0, #150	; 0x96
   16150:	f000 fcc2 	bl	16ad8 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   16154:	2000      	movs	r0, #0
   16156:	f000 fc19 	bl	1698c <radio_switch_complete_and_rx>
		radio_isr_set(lll_conn_isr_tx, param);
   1615a:	4869      	ldr	r0, [pc, #420]	; (16300 <lll_conn_isr_rx+0x2b8>)
   1615c:	4621      	mov	r1, r4
   1615e:	f000 fa83 	bl	16668 <radio_isr_set>
		radio_tmr_end_capture();
   16162:	f000 fd93 	bl	16c8c <radio_tmr_end_capture>
	pdu_data_tx->sn = lll->sn;
   16166:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
   1616a:	9901      	ldr	r1, [sp, #4]
   1616c:	f3c3 0200 	ubfx	r2, r3, #0, #1
	pdu_data_tx->nesn = lll->nesn;
   16170:	f3c3 0340 	ubfx	r3, r3, #1, #1
   16174:	009b      	lsls	r3, r3, #2
   16176:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   1617a:	780a      	ldrb	r2, [r1, #0]
   1617c:	f022 020c 	bic.w	r2, r2, #12
   16180:	4313      	orrs	r3, r2
   16182:	700b      	strb	r3, [r1, #0]
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   16184:	4620      	mov	r0, r4
   16186:	f00e fbaf 	bl	248e8 <lll_conn_tx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   1618a:	f000 fb53 	bl	16834 <radio_is_ready>
   1618e:	b160      	cbz	r0, 161aa <lll_conn_isr_rx+0x162>
   16190:	4a56      	ldr	r2, [pc, #344]	; (162ec <lll_conn_isr_rx+0x2a4>)
   16192:	495c      	ldr	r1, [pc, #368]	; (16304 <lll_conn_isr_rx+0x2bc>)
   16194:	4857      	ldr	r0, [pc, #348]	; (162f4 <lll_conn_isr_rx+0x2ac>)
   16196:	f240 1369 	movw	r3, #361	; 0x169
   1619a:	f006 f895 	bl	1c2c8 <printk>
   1619e:	4040      	eors	r0, r0
   161a0:	f380 8811 	msr	BASEPRI, r0
   161a4:	f04f 0003 	mov.w	r0, #3
   161a8:	df02      	svc	2
	if (!radio_tmr_aa_restore()) {
   161aa:	f000 fd63 	bl	16c74 <radio_tmr_aa_restore>
   161ae:	b918      	cbnz	r0, 161b8 <lll_conn_isr_rx+0x170>
		radio_tmr_aa_save(radio_tmr_aa_get());
   161b0:	f000 fd54 	bl	16c5c <radio_tmr_aa_get>
   161b4:	f000 fd58 	bl	16c68 <radio_tmr_aa_save>
	if (tx_release) {
   161b8:	f1b9 0f00 	cmp.w	r9, #0
   161bc:	f000 808d 	beq.w	162da <lll_conn_isr_rx+0x292>
		LL_ASSERT(lll->handle != 0xFFFF);
   161c0:	89a2      	ldrh	r2, [r4, #12]
   161c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   161c6:	429a      	cmp	r2, r3
   161c8:	d10c      	bne.n	161e4 <lll_conn_isr_rx+0x19c>
   161ca:	4a48      	ldr	r2, [pc, #288]	; (162ec <lll_conn_isr_rx+0x2a4>)
   161cc:	494e      	ldr	r1, [pc, #312]	; (16308 <lll_conn_isr_rx+0x2c0>)
   161ce:	4849      	ldr	r0, [pc, #292]	; (162f4 <lll_conn_isr_rx+0x2ac>)
   161d0:	f44f 73bc 	mov.w	r3, #376	; 0x178
   161d4:	f006 f878 	bl	1c2c8 <printk>
   161d8:	4040      	eors	r0, r0
   161da:	f380 8811 	msr	BASEPRI, r0
   161de:	f04f 0003 	mov.w	r0, #3
   161e2:	df02      	svc	2
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   161e4:	89a0      	ldrh	r0, [r4, #12]
   161e6:	4649      	mov	r1, r9
   161e8:	f7fe f8a6 	bl	14338 <ull_conn_lll_ack_enqueue>
	if (is_rx_enqueue) {
   161ec:	f1ba 0f00 	cmp.w	sl, #0
   161f0:	d009      	beq.n	16206 <lll_conn_isr_rx+0x1be>
		ull_pdu_rx_alloc();
   161f2:	f7fb ffdf 	bl	121b4 <ull_pdu_rx_alloc>
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   161f6:	2303      	movs	r3, #3
   161f8:	7133      	strb	r3, [r6, #4]
		node_rx->hdr.handle = lll->handle;
   161fa:	89a3      	ldrh	r3, [r4, #12]
		ull_rx_put(node_rx->hdr.link, node_rx);
   161fc:	6830      	ldr	r0, [r6, #0]
		node_rx->hdr.handle = lll->handle;
   161fe:	80f3      	strh	r3, [r6, #6]
		ull_rx_put(node_rx->hdr.link, node_rx);
   16200:	4631      	mov	r1, r6
   16202:	f7fb ffed 	bl	121e0 <ull_rx_put>
		ull_rx_sched();
   16206:	f7fb fffb 	bl	12200 <ull_rx_sched>
}
   1620a:	b002      	add	sp, #8
   1620c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			lll->empty = 0;
   16210:	f36f 0382 	bfc	r3, #2, #1
   16214:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
			pdu_data_tx = (void *)radio_pkt_empty_get();
   16218:	f000 fb40 	bl	1689c <radio_pkt_empty_get>
	tx_release = NULL;
   1621c:	f04f 0900 	mov.w	r9, #0
   16220:	e770      	b.n	16104 <lll_conn_isr_rx+0xbc>
					       lll->packet_tx_head_offset);
   16222:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
			pdu_data_tx_len = pdu_data_tx->len;
   16226:	9a01      	ldr	r2, [sp, #4]
   16228:	441a      	add	r2, r3
			offset = lll->packet_tx_head_offset + pdu_data_tx_len;
   1622a:	7952      	ldrb	r2, [r2, #5]
   1622c:	4413      	add	r3, r2
			if (offset < lll->packet_tx_head_len) {
   1622e:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
			offset = lll->packet_tx_head_offset + pdu_data_tx_len;
   16232:	b2db      	uxtb	r3, r3
			if (offset < lll->packet_tx_head_len) {
   16234:	4293      	cmp	r3, r2
   16236:	d202      	bcs.n	1623e <lll_conn_isr_rx+0x1f6>
				lll->packet_tx_head_offset = offset;
   16238:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
   1623c:	e7ee      	b.n	1621c <lll_conn_isr_rx+0x1d4>
			} else if (offset == lll->packet_tx_head_len) {
   1623e:	d110      	bne.n	16262 <lll_conn_isr_rx+0x21a>
				memq_dequeue(lll->memq_tx.tail,
   16240:	462a      	mov	r2, r5
   16242:	6c20      	ldr	r0, [r4, #64]	; 0x40
				lll->packet_tx_head_len = 0;
   16244:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
				memq_dequeue(lll->memq_tx.tail,
   16248:	f104 013c 	add.w	r1, r4, #60	; 0x3c
   1624c:	f00d fb31 	bl	238b2 <memq_dequeue>
				link->next = tx->next; /* Indicates ctrl or data
   16250:	9b01      	ldr	r3, [sp, #4]
   16252:	681a      	ldr	r2, [r3, #0]
   16254:	f8c9 2000 	str.w	r2, [r9]
				tx->next = link;
   16258:	f8c3 9000 	str.w	r9, [r3]
				*tx_release = tx;
   1625c:	f8dd 9004 	ldr.w	r9, [sp, #4]
				FORCE_MD_CNT_SET();
   16260:	e750      	b.n	16104 <lll_conn_isr_rx+0xbc>
				LL_ASSERT(0);
   16262:	4a22      	ldr	r2, [pc, #136]	; (162ec <lll_conn_isr_rx+0x2a4>)
   16264:	4929      	ldr	r1, [pc, #164]	; (1630c <lll_conn_isr_rx+0x2c4>)
   16266:	4823      	ldr	r0, [pc, #140]	; (162f4 <lll_conn_isr_rx+0x2ac>)
   16268:	f240 33a3 	movw	r3, #931	; 0x3a3
   1626c:	f006 f82c 	bl	1c2c8 <printk>
   16270:	4040      	eors	r0, r0
   16272:	f380 8811 	msr	BASEPRI, r0
   16276:	f04f 0003 	mov.w	r0, #3
   1627a:	df02      	svc	2
   1627c:	e7ce      	b.n	1621c <lll_conn_isr_rx+0x1d4>
	    /* check so that we will NEVER use the rx buffer reserved for empty
	     * packet and internal control enqueue
	     */
	    (ull_pdu_rx_alloc_peek(3) != 0)) {
   1627e:	2003      	movs	r0, #3
   16280:	f7fb ff80 	bl	12184 <ull_pdu_rx_alloc_peek>
	if ((pdu_data_rx->sn == lll->nesn) &&
   16284:	2800      	cmp	r0, #0
   16286:	f43f af47 	beq.w	16118 <lll_conn_isr_rx+0xd0>
		/* Increment next expected serial number */
		lll->nesn++;
   1628a:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
   1628e:	f083 0302 	eor.w	r3, r3, #2
   16292:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52

		if (pdu_data_rx->len != 0) {
   16296:	f896 a01d 	ldrb.w	sl, [r6, #29]
	is_rx_enqueue = 0U;
   1629a:	f1ba 0a00 	subs.w	sl, sl, #0
   1629e:	bf18      	it	ne
   162a0:	f04f 0a01 	movne.w	sl, #1
   162a4:	e73a      	b.n	1611c <lll_conn_isr_rx+0xd4>
		if (crc_expire == 0U) {
   162a6:	f898 3000 	ldrb.w	r3, [r8]
   162aa:	b913      	cbnz	r3, 162b2 <lll_conn_isr_rx+0x26a>
			crc_expire = 2U;
   162ac:	2302      	movs	r3, #2
   162ae:	f888 3000 	strb.w	r3, [r8]
		crc_expire--;
   162b2:	f898 5000 	ldrb.w	r5, [r8]
   162b6:	3d01      	subs	r5, #1
   162b8:	b2ed      	uxtb	r5, r5
   162ba:	f888 5000 	strb.w	r5, [r8]
	is_rx_enqueue = 0U;
   162be:	f04f 0a00 	mov.w	sl, #0
		is_done = (crc_expire == 0U);
   162c2:	fab5 f585 	clz	r5, r5
   162c6:	096d      	lsrs	r5, r5, #5
	tx_release = NULL;
   162c8:	46d1      	mov	r9, sl
   162ca:	e72d      	b.n	16128 <lll_conn_isr_rx+0xe0>
		radio_isr_set(isr_done, param);
   162cc:	4805      	ldr	r0, [pc, #20]	; (162e4 <lll_conn_isr_rx+0x29c>)
   162ce:	4621      	mov	r1, r4
   162d0:	f000 f9ca 	bl	16668 <radio_isr_set>
			radio_switch_complete_and_disable();
   162d4:	f000 fb82 	bl	169dc <radio_switch_complete_and_disable>
   162d8:	e745      	b.n	16166 <lll_conn_isr_rx+0x11e>
	if (is_rx_enqueue) {
   162da:	f1ba 0f00 	cmp.w	sl, #0
   162de:	d094      	beq.n	1620a <lll_conn_isr_rx+0x1c2>
   162e0:	e787      	b.n	161f2 <lll_conn_isr_rx+0x1aa>
   162e2:	bf00      	nop
   162e4:	00015e7d 	.word	0x00015e7d
   162e8:	20003fee 	.word	0x20003fee
   162ec:	0002808c 	.word	0x0002808c
   162f0:	00028003 	.word	0x00028003
   162f4:	00027514 	.word	0x00027514
   162f8:	20004103 	.word	0x20004103
   162fc:	20004104 	.word	0x20004104
   16300:	00015fc9 	.word	0x00015fc9
   16304:	0002800b 	.word	0x0002800b
   16308:	000280d7 	.word	0x000280d7
   1630c:	0002826c 	.word	0x0002826c

00016310 <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *p)
{
   16310:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint32_t remainder;
	uint32_t hcto;

	DEBUG_RADIO_START_S(1);

	lll = p->param;
   16314:	68c4      	ldr	r4, [r0, #12]

	/* Check if stopped (on disconnection between prepare and pre-empt)
	 */
	if (unlikely(lll->handle == 0xFFFF)) {
   16316:	89a2      	ldrh	r2, [r4, #12]
   16318:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1631c:	429a      	cmp	r2, r3
{
   1631e:	4606      	mov	r6, r0
	if (unlikely(lll->handle == 0xFFFF)) {
   16320:	d109      	bne.n	16336 <prepare_cb+0x26>
		radio_isr_set(lll_isr_early_abort, lll);
   16322:	485c      	ldr	r0, [pc, #368]	; (16494 <prepare_cb+0x184>)
   16324:	4621      	mov	r1, r4
#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(ull, (TICKER_ID_CONN_BASE + lll->handle),
			     ticks_at_event)) {
		radio_isr_set(lll_isr_abort, lll);
   16326:	f000 f99f 	bl	16668 <radio_isr_set>
		radio_disable();
   1632a:	f000 fa65 	bl	167f8 <radio_disable>
	}

	DEBUG_RADIO_START_S(1);

	return 0;
}
   1632e:	2000      	movs	r0, #0
   16330:	b002      	add	sp, #8
   16332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	lll_conn_prepare_reset();
   16336:	f7ff fde3 	bl	15f00 <lll_conn_prepare_reset>
	lll->latency_event = lll->latency_prepare + p->lazy;
   1633a:	8933      	ldrh	r3, [r6, #8]
   1633c:	8a62      	ldrh	r2, [r4, #18]
   1633e:	441a      	add	r2, r3
	lll->event_counter = (event_counter + 1);
   16340:	8ae3      	ldrh	r3, [r4, #22]
	lll->latency_event = lll->latency_prepare + p->lazy;
   16342:	b292      	uxth	r2, r2
	lll->event_counter = (event_counter + 1);
   16344:	3301      	adds	r3, #1
   16346:	4413      	add	r3, r2
   16348:	82e3      	strh	r3, [r4, #22]
	if (lll->data_chan_sel) {
   1634a:	7f63      	ldrb	r3, [r4, #29]
	lll->latency_event = lll->latency_prepare + p->lazy;
   1634c:	82a2      	strh	r2, [r4, #20]
	lll->latency_prepare = 0;
   1634e:	2500      	movs	r5, #0
	if (lll->data_chan_sel) {
   16350:	0659      	lsls	r1, r3, #25
	lll->latency_prepare = 0;
   16352:	8265      	strh	r5, [r4, #18]
	if (lll->data_chan_sel) {
   16354:	d57e      	bpl.n	16454 <prepare_cb+0x144>
		LL_ASSERT(0);
   16356:	4a50      	ldr	r2, [pc, #320]	; (16498 <prepare_cb+0x188>)
   16358:	4950      	ldr	r1, [pc, #320]	; (1649c <prepare_cb+0x18c>)
   1635a:	4851      	ldr	r0, [pc, #324]	; (164a0 <prepare_cb+0x190>)
   1635c:	2399      	movs	r3, #153	; 0x99
   1635e:	f005 ffb3 	bl	1c2c8 <printk>
   16362:	4040      	eors	r0, r0
   16364:	f380 8811 	msr	BASEPRI, r0
   16368:	f04f 0003 	mov.w	r0, #3
   1636c:	df02      	svc	2
	lll->periph.window_widening_event_us +=
   1636e:	e9d4 230b 	ldrd	r2, r3, [r4, #44]	; 0x2c
	    lll->periph.window_widening_max_us) {
   16372:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	lll->periph.window_widening_event_us +=
   16374:	4413      	add	r3, r2
		lll->periph.window_widening_event_us =
   16376:	4299      	cmp	r1, r3
   16378:	bf94      	ite	ls
   1637a:	6321      	strls	r1, [r4, #48]	; 0x30
   1637c:	6323      	strhi	r3, [r4, #48]	; 0x30
	lll->periph.window_size_event_us +=
   1637e:	e9d4 130d 	ldrd	r1, r3, [r4, #52]	; 0x34
	lll->periph.window_widening_prepare_us = 0;
   16382:	2200      	movs	r2, #0
	lll->periph.window_size_event_us +=
   16384:	440b      	add	r3, r1
	lll->periph.window_size_prepare_us = 0;
   16386:	e9c4 230d 	strd	r2, r3, [r4, #52]	; 0x34
	lll->periph.window_widening_prepare_us = 0;
   1638a:	62e2      	str	r2, [r4, #44]	; 0x2c
	if (!lll->empty) {
   1638c:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
   16390:	f012 0204 	ands.w	r2, r2, #4
   16394:	d10a      	bne.n	163ac <prepare_cb+0x9c>
		link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, NULL);
   16396:	e9d4 010f 	ldrd	r0, r1, [r4, #60]	; 0x3c
   1639a:	f00d fa82 	bl	238a2 <memq_peek>
		if (!link) {
   1639e:	b928      	cbnz	r0, 163ac <prepare_cb+0x9c>
			lll->empty = 1U;
   163a0:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
   163a4:	f043 0304 	orr.w	r3, r3, #4
   163a8:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
	radio_reset();
   163ac:	f000 f97c 	bl	166a8 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   163b0:	2000      	movs	r0, #0
   163b2:	f000 f9ad 	bl	16710 <radio_tx_power_set>
	lll_conn_rx_pkt_set(lll);
   163b6:	4620      	mov	r0, r4
   163b8:	f7ff fdde 	bl	15f78 <lll_conn_rx_pkt_set>
	radio_aa_set(lll->access_addr);
   163bc:	1d20      	adds	r0, r4, #4
   163be:	f000 f9c5 	bl	1674c <radio_aa_set>
	return ((uint32_t)src[2] << 16) | sys_get_le16(&src[0]);
   163c2:	8923      	ldrh	r3, [r4, #8]
   163c4:	7aa1      	ldrb	r1, [r4, #10]
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   163c6:	f240 605b 	movw	r0, #1627	; 0x65b
   163ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   163ce:	f000 fa4f 	bl	16870 <radio_crc_configure>
	lll_chan_set(data_chan_use);
   163d2:	4628      	mov	r0, r5
   163d4:	f7fe fca0 	bl	14d18 <lll_chan_set>
	radio_isr_set(lll_conn_isr_rx, lll);
   163d8:	4621      	mov	r1, r4
   163da:	4832      	ldr	r0, [pc, #200]	; (164a4 <prepare_cb+0x194>)
   163dc:	f000 f944 	bl	16668 <radio_isr_set>
	radio_tmr_tifs_set(EVENT_IFS_US);
   163e0:	2096      	movs	r0, #150	; 0x96
   163e2:	f000 fb79 	bl	16ad8 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
   163e6:	2300      	movs	r3, #0
   163e8:	461a      	mov	r2, r3
   163ea:	4619      	mov	r1, r3
   163ec:	4618      	mov	r0, r3
   163ee:	f000 fae1 	bl	169b4 <radio_switch_complete_and_tx>
	ull = HDR_LLL2ULL(lll);
   163f2:	f8d4 8000 	ldr.w	r8, [r4]
	ticks_at_event = p->ticks_at_expire;
   163f6:	6837      	ldr	r7, [r6, #0]
	ticks_at_event += lll_event_offset_get(ull);
   163f8:	4640      	mov	r0, r8
   163fa:	f00e f8ec 	bl	245d6 <lll_event_offset_get>
   163fe:	4407      	add	r7, r0
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   16400:	6872      	ldr	r2, [r6, #4]
   16402:	f107 0109 	add.w	r1, r7, #9
   16406:	2000      	movs	r0, #0
   16408:	f000 fb72 	bl	16af0 <radio_tmr_start>
   1640c:	4605      	mov	r5, r0
	radio_tmr_aa_capture();
   1640e:	f000 fc11 	bl	16c34 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   16412:	2000      	movs	r0, #0
   16414:	f000 fc28 	bl	16c68 <radio_tmr_aa_save>
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
   16418:	6b26      	ldr	r6, [r4, #48]	; 0x30
   1641a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	hcto += radio_rx_ready_delay_get(0, 0);
   1641c:	2100      	movs	r1, #0
   1641e:	eb03 0346 	add.w	r3, r3, r6, lsl #1
   16422:	4608      	mov	r0, r1
   16424:	f103 0688 	add.w	r6, r3, #136	; 0x88
   16428:	f00e fb23 	bl	24a72 <radio_rx_ready_delay_get>
	hcto += addr_us_get(0);
   1642c:	4435      	add	r5, r6
	hcto += radio_rx_chain_delay_get(0, 0);
   1642e:	2100      	movs	r1, #0
	hcto += addr_us_get(0);
   16430:	4405      	add	r5, r0
	hcto += radio_rx_chain_delay_get(0, 0);
   16432:	4608      	mov	r0, r1
   16434:	f00e fb1f 	bl	24a76 <radio_rx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   16438:	4428      	add	r0, r5
   1643a:	f000 fbef 	bl	16c1c <radio_tmr_hcto_configure>
	if (lll_preempt_calc(ull, (TICKER_ID_CONN_BASE + lll->handle),
   1643e:	89a1      	ldrh	r1, [r4, #12]
   16440:	3105      	adds	r1, #5
   16442:	463a      	mov	r2, r7
   16444:	b2c9      	uxtb	r1, r1
   16446:	4640      	mov	r0, r8
   16448:	f00e f8d3 	bl	245f2 <lll_preempt_calc>
   1644c:	b170      	cbz	r0, 1646c <prepare_cb+0x15c>
		radio_isr_set(lll_isr_abort, lll);
   1644e:	4816      	ldr	r0, [pc, #88]	; (164a8 <prepare_cb+0x198>)
   16450:	4621      	mov	r1, r4
   16452:	e768      	b.n	16326 <prepare_cb+0x16>
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   16454:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   16458:	7fa1      	ldrb	r1, [r4, #30]
   1645a:	9300      	str	r3, [sp, #0]
   1645c:	f104 001f 	add.w	r0, r4, #31
   16460:	f104 0318 	add.w	r3, r4, #24
   16464:	f00e f840 	bl	244e8 <lll_chan_sel_1>
   16468:	4605      	mov	r5, r0
   1646a:	e780      	b.n	1636e <prepare_cb+0x5e>
		ret = lll_prepare_done(lll);
   1646c:	4620      	mov	r0, r4
   1646e:	f00e f8ad 	bl	245cc <lll_prepare_done>
		LL_ASSERT(!ret);
   16472:	2800      	cmp	r0, #0
   16474:	f43f af5b 	beq.w	1632e <prepare_cb+0x1e>
   16478:	4a07      	ldr	r2, [pc, #28]	; (16498 <prepare_cb+0x188>)
   1647a:	490c      	ldr	r1, [pc, #48]	; (164ac <prepare_cb+0x19c>)
   1647c:	4808      	ldr	r0, [pc, #32]	; (164a0 <prepare_cb+0x190>)
   1647e:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   16482:	f005 ff21 	bl	1c2c8 <printk>
   16486:	4040      	eors	r0, r0
   16488:	f380 8811 	msr	BASEPRI, r0
   1648c:	f04f 0003 	mov.w	r0, #3
   16490:	df02      	svc	2
   16492:	e74c      	b.n	1632e <prepare_cb+0x1e>
   16494:	00014dd1 	.word	0x00014dd1
   16498:	000280ed 	.word	0x000280ed
   1649c:	0002826c 	.word	0x0002826c
   164a0:	00027514 	.word	0x00027514
   164a4:	00016049 	.word	0x00016049
   164a8:	0002464f 	.word	0x0002464f
   164ac:	000279ee 	.word	0x000279ee

000164b0 <lll_periph_prepare>:
{
   164b0:	b513      	push	{r0, r1, r4, lr}
   164b2:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   164b4:	f7fe fdae 	bl	15014 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   164b8:	2800      	cmp	r0, #0
   164ba:	da0b      	bge.n	164d4 <lll_periph_prepare+0x24>
   164bc:	4a17      	ldr	r2, [pc, #92]	; (1651c <lll_periph_prepare+0x6c>)
   164be:	4918      	ldr	r1, [pc, #96]	; (16520 <lll_periph_prepare+0x70>)
   164c0:	4818      	ldr	r0, [pc, #96]	; (16524 <lll_periph_prepare+0x74>)
   164c2:	234d      	movs	r3, #77	; 0x4d
   164c4:	f005 ff00 	bl	1c2c8 <printk>
   164c8:	4040      	eors	r0, r0
   164ca:	f380 8811 	msr	BASEPRI, r0
   164ce:	f04f 0003 	mov.w	r0, #3
   164d2:	df02      	svc	2
	lll = p->param;
   164d4:	68e2      	ldr	r2, [r4, #12]
	    lll->periph.window_widening_periodic_us * (p->lazy + 1);
   164d6:	8921      	ldrh	r1, [r4, #8]
   164d8:	6a53      	ldr	r3, [r2, #36]	; 0x24
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   164da:	4813      	ldr	r0, [pc, #76]	; (16528 <lll_periph_prepare+0x78>)
	    lll->periph.window_widening_periodic_us * (p->lazy + 1);
   164dc:	fb01 3303 	mla	r3, r1, r3, r3
	lll->periph.window_widening_prepare_us +=
   164e0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   164e2:	440b      	add	r3, r1
	    lll->periph.window_widening_max_us) {
   164e4:	6a91      	ldr	r1, [r2, #40]	; 0x28
		lll->periph.window_widening_prepare_us =
   164e6:	4299      	cmp	r1, r3
   164e8:	bf94      	ite	ls
   164ea:	62d1      	strls	r1, [r2, #44]	; 0x2c
   164ec:	62d3      	strhi	r3, [r2, #44]	; 0x2c
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   164ee:	4a0f      	ldr	r2, [pc, #60]	; (1652c <lll_periph_prepare+0x7c>)
   164f0:	490f      	ldr	r1, [pc, #60]	; (16530 <lll_periph_prepare+0x80>)
   164f2:	9400      	str	r4, [sp, #0]
   164f4:	2300      	movs	r3, #0
   164f6:	f00d fd69 	bl	23fcc <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   164fa:	b168      	cbz	r0, 16518 <lll_periph_prepare+0x68>
   164fc:	3077      	adds	r0, #119	; 0x77
   164fe:	d00b      	beq.n	16518 <lll_periph_prepare+0x68>
   16500:	4a06      	ldr	r2, [pc, #24]	; (1651c <lll_periph_prepare+0x6c>)
   16502:	490c      	ldr	r1, [pc, #48]	; (16534 <lll_periph_prepare+0x84>)
   16504:	4807      	ldr	r0, [pc, #28]	; (16524 <lll_periph_prepare+0x74>)
   16506:	235e      	movs	r3, #94	; 0x5e
   16508:	f005 fede 	bl	1c2c8 <printk>
   1650c:	4040      	eors	r0, r0
   1650e:	f380 8811 	msr	BASEPRI, r0
   16512:	f04f 0003 	mov.w	r0, #3
   16516:	df02      	svc	2
}
   16518:	b002      	add	sp, #8
   1651a:	bd10      	pop	{r4, pc}
   1651c:	000280ed 	.word	0x000280ed
   16520:	00027f87 	.word	0x00027f87
   16524:	00027514 	.word	0x00027514
   16528:	000245d1 	.word	0x000245d1
   1652c:	00016311 	.word	0x00016311
   16530:	00015f1d 	.word	0x00015f1d
   16534:	0002802d 	.word	0x0002802d

00016538 <cntr_init>:

static uint8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   16538:	4b05      	ldr	r3, [pc, #20]	; (16550 <cntr_init+0x18>)
   1653a:	2200      	movs	r2, #0
   1653c:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   16540:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   16544:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->INTENSET = mask;
   16548:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk);
}
   1654c:	4770      	bx	lr
   1654e:	bf00      	nop
   16550:	4000b000 	.word	0x4000b000

00016554 <cntr_start>:

uint32_t cntr_start(void)
{
	if (_refcount++) {
   16554:	4a04      	ldr	r2, [pc, #16]	; (16568 <cntr_start+0x14>)
   16556:	7813      	ldrb	r3, [r2, #0]
   16558:	1c59      	adds	r1, r3, #1
   1655a:	7011      	strb	r1, [r2, #0]
   1655c:	2001      	movs	r0, #1
   1655e:	b913      	cbnz	r3, 16566 <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   16560:	4a02      	ldr	r2, [pc, #8]	; (1656c <cntr_start+0x18>)
   16562:	6010      	str	r0, [r2, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
   16564:	4618      	mov	r0, r3
}
   16566:	4770      	bx	lr
   16568:	20004105 	.word	0x20004105
   1656c:	4000b000 	.word	0x4000b000

00016570 <cntr_stop>:

uint32_t cntr_stop(void)
{
   16570:	b510      	push	{r4, lr}
	LL_ASSERT(_refcount);
   16572:	4c0d      	ldr	r4, [pc, #52]	; (165a8 <cntr_stop+0x38>)
   16574:	7823      	ldrb	r3, [r4, #0]
   16576:	b95b      	cbnz	r3, 16590 <cntr_stop+0x20>
   16578:	4a0c      	ldr	r2, [pc, #48]	; (165ac <cntr_stop+0x3c>)
   1657a:	490d      	ldr	r1, [pc, #52]	; (165b0 <cntr_stop+0x40>)
   1657c:	480d      	ldr	r0, [pc, #52]	; (165b4 <cntr_stop+0x44>)
   1657e:	232d      	movs	r3, #45	; 0x2d
   16580:	f005 fea2 	bl	1c2c8 <printk>
   16584:	4040      	eors	r0, r0
   16586:	f380 8811 	msr	BASEPRI, r0
   1658a:	f04f 0003 	mov.w	r0, #3
   1658e:	df02      	svc	2

	if (--_refcount) {
   16590:	7820      	ldrb	r0, [r4, #0]
   16592:	3801      	subs	r0, #1
   16594:	b2c0      	uxtb	r0, r0
   16596:	7020      	strb	r0, [r4, #0]
   16598:	2301      	movs	r3, #1
   1659a:	b910      	cbnz	r0, 165a2 <cntr_stop+0x32>
   1659c:	4a06      	ldr	r2, [pc, #24]	; (165b8 <cntr_stop+0x48>)
   1659e:	6053      	str	r3, [r2, #4]
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
}
   165a0:	bd10      	pop	{r4, pc}
		return 1;
   165a2:	4618      	mov	r0, r3
   165a4:	e7fc      	b.n	165a0 <cntr_stop+0x30>
   165a6:	bf00      	nop
   165a8:	20004105 	.word	0x20004105
   165ac:	0002813e 	.word	0x0002813e
   165b0:	0002818a 	.word	0x0002818a
   165b4:	00027514 	.word	0x00027514
   165b8:	4000b000 	.word	0x4000b000

000165bc <cntr_cnt_get>:
     return p_reg->COUNTER;
   165bc:	4b01      	ldr	r3, [pc, #4]	; (165c4 <cntr_cnt_get+0x8>)
   165be:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

uint32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
   165c2:	4770      	bx	lr
   165c4:	4000b000 	.word	0x4000b000

000165c8 <cntr_cmp_set>:
    p_reg->CC[ch] = cc_val;
   165c8:	4b02      	ldr	r3, [pc, #8]	; (165d4 <cntr_cmp_set+0xc>)
   165ca:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   165ce:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(uint8_t cmp, uint32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
   165d2:	4770      	bx	lr
   165d4:	4000b000 	.word	0x4000b000

000165d8 <do_ecb>:

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   165d8:	4b10      	ldr	r3, [pc, #64]	; (1661c <do_ecb+0x44>)
	uint8_t clear_text[16];
	uint8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
   165da:	b530      	push	{r4, r5, lr}
   165dc:	2201      	movs	r2, #1
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
   165de:	2400      	movs	r4, #0
   165e0:	605a      	str	r2, [r3, #4]
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   165e2:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   165e6:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   165ea:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
   165ee:	601a      	str	r2, [r3, #0]
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   165f0:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
   165f4:	b931      	cbnz	r1, 16604 <do_ecb+0x2c>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   165f6:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   165fa:	b919      	cbnz	r1, 16604 <do_ecb+0x2c>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   165fc:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   16600:	2900      	cmp	r1, #0
   16602:	d1f5      	bne.n	165f0 <do_ecb+0x18>
   16604:	605a      	str	r2, [r3, #4]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   16606:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
   1660a:	2900      	cmp	r1, #0
   1660c:	d1e8      	bne.n	165e0 <do_ecb+0x8>
   1660e:	f8d3 5504 	ldr.w	r5, [r3, #1284]	; 0x504
   16612:	2d00      	cmp	r5, #0
   16614:	d0e4      	beq.n	165e0 <do_ecb+0x8>

	NRF_ECB->ECBDATAPTR = 0;
   16616:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
}
   1661a:	bd30      	pop	{r4, r5, pc}
   1661c:	4000e000 	.word	0x4000e000

00016620 <hal_radio_enable_on_tick_ppi_config_and_enable>:
static inline void hal_radio_enable_on_tick_ppi_config_and_enable(uint8_t trx)
{
	/* No need to configure anything for the pre-programmed channels.
	 * Just enable and disable them accordingly.
	 */
	nrf_ppi_channels_disable(
   16620:	2800      	cmp	r0, #0
    p_reg->CHENSET = mask;
}

NRF_STATIC_INLINE void nrf_ppi_channels_disable(NRF_PPI_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
   16622:	4b08      	ldr	r3, [pc, #32]	; (16644 <hal_radio_enable_on_tick_ppi_config_and_enable+0x24>)
   16624:	bf14      	ite	ne
   16626:	f44f 1200 	movne.w	r2, #2097152	; 0x200000
   1662a:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
   1662e:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
		NRF_PPI,
		trx ? BIT(HAL_RADIO_ENABLE_RX_ON_TICK_PPI)
		    : BIT(HAL_RADIO_ENABLE_TX_ON_TICK_PPI));
	nrf_ppi_channels_enable(
   16632:	bf14      	ite	ne
   16634:	f44f 1280 	movne.w	r2, #1048576	; 0x100000
   16638:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
    p_reg->CHENSET = mask;
   1663c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		NRF_PPI,
		trx ? BIT(HAL_RADIO_ENABLE_TX_ON_TICK_PPI)
		    : BIT(HAL_RADIO_ENABLE_RX_ON_TICK_PPI));
}
   16640:	4770      	bx	lr
   16642:	bf00      	nop
   16644:	4001f000 	.word	0x4001f000

00016648 <isr_radio>:
}
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

uint32_t radio_has_disabled(void)
{
	return (NRF_RADIO->EVENTS_DISABLED != 0);
   16648:	4b04      	ldr	r3, [pc, #16]	; (1665c <isr_radio+0x14>)
   1664a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (radio_has_disabled()) {
   1664e:	b123      	cbz	r3, 1665a <isr_radio+0x12>
		isr_cb(isr_cb_param);
   16650:	4b03      	ldr	r3, [pc, #12]	; (16660 <isr_radio+0x18>)
   16652:	4a04      	ldr	r2, [pc, #16]	; (16664 <isr_radio+0x1c>)
   16654:	681b      	ldr	r3, [r3, #0]
   16656:	6810      	ldr	r0, [r2, #0]
   16658:	4718      	bx	r3
}
   1665a:	4770      	bx	lr
   1665c:	40001000 	.word	0x40001000
   16660:	200032c8 	.word	0x200032c8
   16664:	200032cc 	.word	0x200032cc

00016668 <radio_isr_set>:
{
   16668:	b538      	push	{r3, r4, r5, lr}
   1666a:	4604      	mov	r4, r0
	irq_disable(RADIO_IRQn);
   1666c:	2001      	movs	r0, #1
{
   1666e:	460d      	mov	r5, r1
	irq_disable(RADIO_IRQn);
   16670:	f7ee fff6 	bl	5660 <arch_irq_disable>
	isr_cb_param = param;
   16674:	4b08      	ldr	r3, [pc, #32]	; (16698 <radio_isr_set+0x30>)
   16676:	601d      	str	r5, [r3, #0]
	isr_cb = cb;
   16678:	4b08      	ldr	r3, [pc, #32]	; (1669c <radio_isr_set+0x34>)
   1667a:	601c      	str	r4, [r3, #0]
    return p_reg->SHORTS;
}

NRF_STATIC_INLINE void nrf_radio_int_enable(NRF_RADIO_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1667c:	4b08      	ldr	r3, [pc, #32]	; (166a0 <radio_isr_set+0x38>)
   1667e:	2210      	movs	r2, #16
   16680:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   16684:	4b07      	ldr	r3, [pc, #28]	; (166a4 <radio_isr_set+0x3c>)
   16686:	2202      	movs	r2, #2
   16688:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
   1668c:	2001      	movs	r0, #1
}
   1668e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	irq_enable(RADIO_IRQn);
   16692:	f7ee bfd5 	b.w	5640 <arch_irq_enable>
   16696:	bf00      	nop
   16698:	200032cc 	.word	0x200032cc
   1669c:	200032c8 	.word	0x200032c8
   166a0:	40001000 	.word	0x40001000
   166a4:	e000e100 	.word	0xe000e100

000166a8 <radio_reset>:
{
   166a8:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
   166aa:	2001      	movs	r0, #1
   166ac:	f7ee ffd8 	bl	5660 <arch_irq_disable>
}
#endif

NRF_STATIC_INLINE void nrf_radio_power_set(NRF_RADIO_Type * p_reg, bool radio_power)
{
    p_reg->POWER = (radio_power ? RADIO_POWER_POWER_Enabled : RADIO_POWER_POWER_Disabled)
   166b0:	4a0d      	ldr	r2, [pc, #52]	; (166e8 <radio_reset+0x40>)
   166b2:	2300      	movs	r3, #0
   166b4:	f8c2 3ffc 	str.w	r3, [r2, #4092]	; 0xffc
   166b8:	2301      	movs	r3, #1
   166ba:	f8c2 3ffc 	str.w	r3, [r2, #4092]	; 0xffc
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

static inline void hal_radio_reset(void)
{
	/* Anomalies 102, 106 and 107 */
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   166be:	f8d2 3774 	ldr.w	r3, [r2, #1908]	; 0x774
					 0xfffffffe) | 0x01000000;
   166c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   166c6:	f023 0301 	bic.w	r3, r3, #1
   166ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   166ce:	f8c2 3774 	str.w	r3, [r2, #1908]	; 0x774
static inline void hal_radio_sw_switch_ppi_group_setup(void)
{
	/* Include the appropriate PPI channels in the two PPI Groups. */
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || \
	!defined(CONFIG_HAS_HW_NRF_RADIO_BLE_CODED)
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   166d2:	4b06      	ldr	r3, [pc, #24]	; (166ec <radio_reset+0x44>)
   166d4:	f44f 5290 	mov.w	r2, #4608	; 0x1200
   166d8:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		BIT(HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) |
#if defined(CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE)
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PHYEND_DELAY_COMPENSATION_PPI(0)) |
#endif /* CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE */
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PPI(0));
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   166dc:	f44f 5210 	mov.w	r2, #9216	; 0x2400
   166e0:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
}
   166e4:	bd08      	pop	{r3, pc}
   166e6:	bf00      	nop
   166e8:	40001000 	.word	0x40001000
   166ec:	4001f000 	.word	0x4001f000

000166f0 <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   166f0:	4b06      	ldr	r3, [pc, #24]	; (1670c <radio_phy_set+0x1c>)
#endif /* CONFIG_BT_CTLR_PHY_CODED */

		break;

	case BIT(1):
		mode = RADIO_MODE_MODE_Ble_2Mbit;
   166f2:	2802      	cmp	r0, #2
   166f4:	bf14      	ite	ne
   166f6:	2203      	movne	r2, #3
   166f8:	2204      	moveq	r2, #4
   166fa:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   166fe:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   16702:	f042 0201 	orr.w	r2, r2, #1
   16706:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
   1670a:	4770      	bx	lr
   1670c:	40001000 	.word	0x40001000

00016710 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = (uint32_t)power;
   16710:	4b01      	ldr	r3, [pc, #4]	; (16718 <radio_tx_power_set+0x8>)
   16712:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   16716:	4770      	bx	lr
   16718:	40001000 	.word	0x40001000

0001671c <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   1671c:	4b01      	ldr	r3, [pc, #4]	; (16724 <radio_freq_chan_set+0x8>)
   1671e:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
   16722:	4770      	bx	lr
   16724:	40001000 	.word	0x40001000

00016728 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   16728:	4b07      	ldr	r3, [pc, #28]	; (16748 <radio_whiten_iv_set+0x20>)
   1672a:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   1672e:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   16732:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   16736:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   1673a:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1673e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   16742:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   16746:	4770      	bx	lr
   16748:	40001000 	.word	0x40001000

0001674c <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   1674c:	4a0a      	ldr	r2, [pc, #40]	; (16778 <radio_aa_set+0x2c>)
   1674e:	2300      	movs	r3, #0
   16750:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   16754:	2301      	movs	r3, #1
   16756:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   1675a:	78c3      	ldrb	r3, [r0, #3]
   1675c:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   16760:	7843      	ldrb	r3, [r0, #1]
   16762:	7881      	ldrb	r1, [r0, #2]
   16764:	041b      	lsls	r3, r3, #16
   16766:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   1676a:	7801      	ldrb	r1, [r0, #0]
   1676c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   16770:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
   16774:	4770      	bx	lr
   16776:	bf00      	nop
   16778:	40001000 	.word	0x40001000

0001677c <radio_pkt_configure>:
	switch (phy) {
   1677c:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   16780:	2b02      	cmp	r3, #2
   16782:	bf14      	ite	ne
   16784:	2300      	movne	r3, #0
   16786:	f04f 7380 	moveq.w	r3, #16777216	; 0x1000000
	if (pdu_type == RADIO_PKT_CONF_PDU_TYPE_DC) {
   1678a:	07d2      	lsls	r2, r2, #31
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   1678c:	bf48      	it	mi
   1678e:	f443 1380 	orrmi.w	r3, r3, #1048576	; 0x100000
		((((uint32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) & RADIO_PCNF0_LFLEN_Msk) |
   16792:	f000 000f 	and.w	r0, r0, #15
		((((uint32_t)bits_s1) << RADIO_PCNF0_S1LEN_Pos) & RADIO_PCNF0_S1LEN_Msk) | extra;
   16796:	4318      	orrs	r0, r3
	NRF_RADIO->PCNF0 =
   16798:	4b09      	ldr	r3, [pc, #36]	; (167c0 <radio_pkt_configure+0x44>)
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   1679a:	4a0a      	ldr	r2, [pc, #40]	; (167c4 <radio_pkt_configure+0x48>)
		((((uint32_t)bits_s1) << RADIO_PCNF0_S1LEN_Pos) & RADIO_PCNF0_S1LEN_Msk) | extra;
   1679c:	f440 7080 	orr.w	r0, r0, #256	; 0x100
	NRF_RADIO->PCNF0 =
   167a0:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   167a4:	f8d3 0518 	ldr.w	r0, [r3, #1304]	; 0x518
   167a8:	4002      	ands	r2, r0
   167aa:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |=
   167ae:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   167b2:	4311      	orrs	r1, r2
   167b4:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
   167b8:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
}
   167bc:	4770      	bx	lr
   167be:	bf00      	nop
   167c0:	40001000 	.word	0x40001000
   167c4:	fef80000 	.word	0xfef80000

000167c8 <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (uint32_t)rx_packet;
   167c8:	4b01      	ldr	r3, [pc, #4]	; (167d0 <radio_pkt_rx_set+0x8>)
   167ca:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
   167ce:	4770      	bx	lr
   167d0:	40001000 	.word	0x40001000

000167d4 <radio_pkt_tx_set>:
   167d4:	4b01      	ldr	r3, [pc, #4]	; (167dc <radio_pkt_tx_set+0x8>)
   167d6:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   167da:	4770      	bx	lr
   167dc:	40001000 	.word	0x40001000

000167e0 <radio_rx_enable>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   167e0:	4b01      	ldr	r3, [pc, #4]	; (167e8 <radio_rx_enable+0x8>)
   167e2:	2201      	movs	r2, #1
   167e4:	605a      	str	r2, [r3, #4]
}
   167e6:	4770      	bx	lr
   167e8:	40001000 	.word	0x40001000

000167ec <radio_tx_enable>:
   167ec:	4b01      	ldr	r3, [pc, #4]	; (167f4 <radio_tx_enable+0x8>)
   167ee:	2201      	movs	r2, #1
   167f0:	601a      	str	r2, [r3, #0]
}
   167f2:	4770      	bx	lr
   167f4:	40001000 	.word	0x40001000

000167f8 <radio_disable>:
    p_reg->CHENCLR = mask;
   167f8:	4a07      	ldr	r2, [pc, #28]	; (16818 <radio_disable+0x20>)
   167fa:	f44f 6310 	mov.w	r3, #2304	; 0x900
   167fe:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    p_reg->TASKS_CHG[(uint32_t) group].EN = 1UL;
}

NRF_STATIC_INLINE void nrf_ppi_group_disable(NRF_PPI_Type * p_reg, nrf_ppi_channel_group_t group)
{
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   16802:	2301      	movs	r3, #1
   16804:	6053      	str	r3, [r2, #4]
   16806:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
   16808:	f5a2 32f0 	sub.w	r2, r2, #122880	; 0x1e000
   1680c:	2100      	movs	r1, #0
   1680e:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
   16812:	6113      	str	r3, [r2, #16]
}
   16814:	4770      	bx	lr
   16816:	bf00      	nop
   16818:	4001f000 	.word	0x4001f000

0001681c <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   1681c:	4b04      	ldr	r3, [pc, #16]	; (16830 <radio_status_reset+0x14>)
   1681e:	2200      	movs	r2, #0
   16820:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   16824:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   16828:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   1682c:	4770      	bx	lr
   1682e:	bf00      	nop
   16830:	40001000 	.word	0x40001000

00016834 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   16834:	4b03      	ldr	r3, [pc, #12]	; (16844 <radio_is_ready+0x10>)
   16836:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   1683a:	3800      	subs	r0, #0
   1683c:	bf18      	it	ne
   1683e:	2001      	movne	r0, #1
   16840:	4770      	bx	lr
   16842:	bf00      	nop
   16844:	40001000 	.word	0x40001000

00016848 <radio_is_done>:
	return (NRF_RADIO->NRF_RADIO_TXRX_END_EVENT != 0);
   16848:	4b03      	ldr	r3, [pc, #12]	; (16858 <radio_is_done+0x10>)
   1684a:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   1684e:	3800      	subs	r0, #0
   16850:	bf18      	it	ne
   16852:	2001      	movne	r0, #1
   16854:	4770      	bx	lr
   16856:	bf00      	nop
   16858:	40001000 	.word	0x40001000

0001685c <radio_is_idle>:
}

uint32_t radio_is_idle(void)
{
	return (NRF_RADIO->STATE == 0);
   1685c:	4b03      	ldr	r3, [pc, #12]	; (1686c <radio_is_idle+0x10>)
   1685e:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   16862:	fab0 f080 	clz	r0, r0
   16866:	0940      	lsrs	r0, r0, #5
   16868:	4770      	bx	lr
   1686a:	bf00      	nop
   1686c:	40001000 	.word	0x40001000

00016870 <radio_crc_configure>:

void radio_crc_configure(uint32_t polynomial, uint32_t iv)
{
	NRF_RADIO->CRCCNF =
   16870:	4b04      	ldr	r3, [pc, #16]	; (16884 <radio_crc_configure+0x14>)
   16872:	f240 1203 	movw	r2, #259	; 0x103
   16876:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	    (((RADIO_CRCCNF_SKIPADDR_Skip) << RADIO_CRCCNF_SKIPADDR_Pos) &
	     RADIO_CRCCNF_SKIPADDR_Msk) |
	    (((RADIO_CRCCNF_LEN_Three) << RADIO_CRCCNF_LEN_Pos) &
	       RADIO_CRCCNF_LEN_Msk);
	NRF_RADIO->CRCPOLY = polynomial;
   1687a:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   1687e:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
   16882:	4770      	bx	lr
   16884:	40001000 	.word	0x40001000

00016888 <radio_crc_is_valid>:

uint32_t radio_crc_is_valid(void)
{
	return (NRF_RADIO->CRCSTATUS != 0);
   16888:	4b03      	ldr	r3, [pc, #12]	; (16898 <radio_crc_is_valid+0x10>)
   1688a:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1688e:	3800      	subs	r0, #0
   16890:	bf18      	it	ne
   16892:	2001      	movne	r0, #1
   16894:	4770      	bx	lr
   16896:	bf00      	nop
   16898:	40001000 	.word	0x40001000

0001689c <radio_pkt_empty_get>:
				       PDU_AC_LL_SIZE_MAX)];

void *radio_pkt_empty_get(void)
{
	return _pkt_empty;
}
   1689c:	4800      	ldr	r0, [pc, #0]	; (168a0 <radio_pkt_empty_get+0x4>)
   1689e:	4770      	bx	lr
   168a0:	200031c0 	.word	0x200031c0

000168a4 <radio_pkt_scratch_get>:

void *radio_pkt_scratch_get(void)
{
	return _pkt_scratch;
}
   168a4:	4800      	ldr	r0, [pc, #0]	; (168a8 <radio_pkt_scratch_get+0x4>)
   168a6:	4770      	bx	lr
   168a8:	200031c4 	.word	0x200031c4

000168ac <sw_switch>:
 *                         direction to next direction.
 */
void sw_switch(uint8_t dir_curr, uint8_t dir_next, uint8_t phy_curr, uint8_t flags_curr,
	       uint8_t phy_next, uint8_t flags_next,
	       enum radio_end_evt_delay_state end_evt_delay_en)
{
   168ac:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   168ae:	4d31      	ldr	r5, [pc, #196]	; (16974 <sw_switch+0xc8>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   168b0:	4f31      	ldr	r7, [pc, #196]	; (16978 <sw_switch+0xcc>)
   168b2:	782e      	ldrb	r6, [r5, #0]
   168b4:	f8df e0c4 	ldr.w	lr, [pc, #196]	; 1697c <sw_switch+0xd0>
{
   168b8:	f89d c014 	ldrb.w	ip, [sp, #20]
   168bc:	f8c7 e568 	str.w	lr, [r7, #1384]	; 0x568
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   168c0:	00f3      	lsls	r3, r6, #3
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   168c2:	f106 040c 	add.w	r4, r6, #12
   168c6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   168ca:	b2e4      	uxtb	r4, r4
   168cc:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   168d0:	00e4      	lsls	r4, r4, #3
   168d2:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
	nrf_ppi_event_endpoint_setup(
   168d6:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   168da:	4b29      	ldr	r3, [pc, #164]	; (16980 <sw_switch+0xd4>)
   168dc:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
   168e0:	eb03 0386 	add.w	r3, r3, r6, lsl #2

	/* NOTE: As constants are passed to dir_curr and dir_next, the
	 *       compiler should optimize out the redundant code path
	 *       during the optimization.
	 */
	if (dir_next == SW_SWITCH_TX) {
   168e4:	2901      	cmp	r1, #1
   168e6:	ea4f 0786 	mov.w	r7, r6, lsl #2
    p_reg->CH[(uint32_t) channel].EEP = eep;
   168ea:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
   168ee:	d13b      	bne.n	16968 <sw_switch+0xbc>
		/* TX */

		/* Calculate delay with respect to current and next PHY.
		 */
		if (dir_curr == SW_SWITCH_TX) {
   168f0:	2801      	cmp	r0, #1
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_1M_NS;
	case BIT(1):
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_2M_NS;
   168f2:	f649 73c4 	movw	r3, #40900	; 0x9fc4
   168f6:	d126      	bne.n	16946 <sw_switch+0x9a>
   168f8:	f649 4240 	movw	r2, #40000	; 0x9c40
   168fc:	f1bc 0f02 	cmp.w	ip, #2
   16900:	bf08      	it	eq
   16902:	4613      	moveq	r3, r2
			delay = HAL_RADIO_NS2US_ROUND(
   16904:	f203 434c 	addw	r3, r3, #1100	; 0x44c
			hal_radio_b2b_txen_on_sw_switch(ppi);
		} else {
			/* If RX PHY is LE Coded, calculate for S8 coding.
			 * Assumption being, S8 has higher delay.
			 */
			delay = HAL_RADIO_NS2US_ROUND(
   16908:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1690c:	fbb3 f3f2 	udiv	r3, r3, r2
    p_reg->CH[(uint32_t) channel].TEP = tep;
   16910:	4a1c      	ldr	r2, [pc, #112]	; (16984 <sw_switch+0xd8>)
   16912:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
		}
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay < SW_SWITCH_TIMER->CC[cc]) {
   16916:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
   1691a:	f502 4210 	add.w	r2, r2, #36864	; 0x9000
   1691e:	f8d2 1540 	ldr.w	r1, [r2, #1344]	; 0x540
   16922:	4299      	cmp	r1, r3
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
				 (SW_SWITCH_TIMER->CC[cc] - delay));
   16924:	bf8a      	itet	hi
   16926:	f8d2 1540 	ldrhi.w	r1, [r2, #1344]	; 0x540

NRF_STATIC_INLINE void nrf_timer_cc_set(NRF_TIMER_Type *       p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
   1692a:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   1692c:	1acb      	subhi	r3, r1, r3
   1692e:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    p_reg->CHENSET = mask;
   16932:	4b11      	ldr	r3, [pc, #68]	; (16978 <sw_switch+0xcc>)
   16934:	f44f 6210 	mov.w	r2, #2304	; 0x900
   16938:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	 */
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
#endif /* !CONFIG_SOC_SERIES_NRF53X */
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1U;
   1693c:	1c73      	adds	r3, r6, #1
	sw_tifs_toggle &= 1U;
   1693e:	f003 0301 	and.w	r3, r3, #1
   16942:	702b      	strb	r3, [r5, #0]
}
   16944:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16946:	f649 4140 	movw	r1, #40000	; 0x9c40
   1694a:	f1bc 0f02 	cmp.w	ip, #2
   1694e:	bf08      	it	eq
   16950:	460b      	moveq	r3, r1
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_NS;
	case BIT(1):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_2M_NS;
   16952:	f241 3088 	movw	r0, #5000	; 0x1388
   16956:	f242 41b8 	movw	r1, #9400	; 0x24b8
   1695a:	2a02      	cmp	r2, #2
   1695c:	bf08      	it	eq
   1695e:	4601      	moveq	r1, r0
			delay = HAL_RADIO_NS2US_ROUND(
   16960:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
   16964:	440b      	add	r3, r1
   16966:	e7cf      	b.n	16908 <sw_switch+0x5c>
    p_reg->CH[(uint32_t) channel].TEP = tep;
   16968:	4b07      	ldr	r3, [pc, #28]	; (16988 <sw_switch+0xdc>)
   1696a:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
		delay = HAL_RADIO_NS2US_CEIL(
   1696e:	232d      	movs	r3, #45	; 0x2d
}
   16970:	e7d1      	b.n	16916 <sw_switch+0x6a>
   16972:	bf00      	nop
   16974:	20004106 	.word	0x20004106
   16978:	4001f000 	.word	0x4001f000
   1697c:	4000110c 	.word	0x4000110c
   16980:	40009140 	.word	0x40009140
   16984:	40001000 	.word	0x40001000
   16988:	40001004 	.word	0x40001004

0001698c <radio_switch_complete_and_rx>:
#endif /* CONFIG_BT_CTLR_TIFS_HW */

void radio_switch_complete_and_rx(uint8_t phy_rx)
{
   1698c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   1698e:	4b08      	ldr	r3, [pc, #32]	; (169b0 <radio_switch_complete_and_rx+0x24>)
   16990:	2203      	movs	r2, #3
   16992:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* NOTE: As Tx chain delays are negligible constant values (~1 us)
	 *	 across nRF5x radios, sw_switch assumes the 1M chain delay for
	 *       calculations.
	 */
	sw_switch(SW_SWITCH_TX, SW_SWITCH_RX, SW_SWITCH_PHY_1M, SW_SWITCH_FLAGS_DONTCARE, phy_rx,
   16996:	2300      	movs	r3, #0
   16998:	9000      	str	r0, [sp, #0]
   1699a:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1699e:	461a      	mov	r2, r3
   169a0:	4619      	mov	r1, r3
   169a2:	2001      	movs	r0, #1
   169a4:	f7ff ff82 	bl	168ac <sw_switch>
		  SW_SWITCH_FLAGS_DONTCARE, END_EVT_DELAY_DISABLED);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   169a8:	b005      	add	sp, #20
   169aa:	f85d fb04 	ldr.w	pc, [sp], #4
   169ae:	bf00      	nop
   169b0:	40001000 	.word	0x40001000

000169b4 <radio_switch_complete_and_tx>:

void radio_switch_complete_and_tx(uint8_t phy_rx, uint8_t flags_rx,
				  uint8_t phy_tx, uint8_t flags_tx)
{
   169b4:	b530      	push	{r4, r5, lr}
   169b6:	4604      	mov	r4, r0
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   169b8:	4807      	ldr	r0, [pc, #28]	; (169d8 <radio_switch_complete_and_tx+0x24>)
{
   169ba:	b085      	sub	sp, #20
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   169bc:	2503      	movs	r5, #3
   169be:	f8c0 5200 	str.w	r5, [r0, #512]	; 0x200

	sw_switch(SW_SWITCH_RX, SW_SWITCH_TX, phy_rx, flags_rx, phy_tx, flags_tx,
   169c2:	2000      	movs	r0, #0
   169c4:	e9cd 3001 	strd	r3, r0, [sp, #4]
   169c8:	9200      	str	r2, [sp, #0]
   169ca:	460b      	mov	r3, r1
   169cc:	4622      	mov	r2, r4
   169ce:	2101      	movs	r1, #1
   169d0:	f7ff ff6c 	bl	168ac <sw_switch>
		  END_EVT_DELAY_DISABLED);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   169d4:	b005      	add	sp, #20
   169d6:	bd30      	pop	{r4, r5, pc}
   169d8:	40001000 	.word	0x40001000

000169dc <radio_switch_complete_and_disable>:
void radio_switch_complete_and_disable(void)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);
#else /* CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = (RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE);
   169dc:	4b05      	ldr	r3, [pc, #20]	; (169f4 <radio_switch_complete_and_disable+0x18>)
   169de:	2203      	movs	r2, #3
   169e0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    p_reg->CHENCLR = mask;
   169e4:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
   169e8:	f44f 6210 	mov.w	r2, #2304	; 0x900
   169ec:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	hal_radio_sw_switch_disable();
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   169f0:	4770      	bx	lr
   169f2:	bf00      	nop
   169f4:	40001000 	.word	0x40001000

000169f8 <radio_rssi_measure>:
#endif /* !CONFIG_BT_CTLR_PHY_CODED */
}

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
   169f8:	4a03      	ldr	r2, [pc, #12]	; (16a08 <radio_rssi_measure+0x10>)
   169fa:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   169fe:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   16a02:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	    (RADIO_SHORTS_ADDRESS_RSSISTART_Msk |
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}
   16a06:	4770      	bx	lr
   16a08:	40001000 	.word	0x40001000

00016a0c <radio_rssi_get>:

uint32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
   16a0c:	4b01      	ldr	r3, [pc, #4]	; (16a14 <radio_rssi_get+0x8>)
   16a0e:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
   16a12:	4770      	bx	lr
   16a14:	40001000 	.word	0x40001000

00016a18 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   16a18:	4b02      	ldr	r3, [pc, #8]	; (16a24 <radio_rssi_status_reset+0xc>)
   16a1a:	2200      	movs	r2, #0
   16a1c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
   16a20:	4770      	bx	lr
   16a22:	bf00      	nop
   16a24:	40001000 	.word	0x40001000

00016a28 <radio_rssi_is_ready>:

uint32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   16a28:	4b03      	ldr	r3, [pc, #12]	; (16a38 <radio_rssi_is_ready+0x10>)
   16a2a:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   16a2e:	3800      	subs	r0, #0
   16a30:	bf18      	it	ne
   16a32:	2001      	movne	r0, #1
   16a34:	4770      	bx	lr
   16a36:	bf00      	nop
   16a38:	40001000 	.word	0x40001000

00016a3c <radio_filter_configure>:

void radio_filter_configure(uint8_t bitmask_enable, uint8_t bitmask_addr_type,
			    uint8_t *bdaddr)
{
   16a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
   16a3e:	2400      	movs	r4, #0
   16a40:	2706      	movs	r7, #6
   16a42:	fb07 f304 	mul.w	r3, r7, r4
   16a46:	18d5      	adds	r5, r2, r3
	uint8_t index;

	for (index = 0U; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
			((uint32_t)bdaddr[2] << 16) |
			((uint32_t)bdaddr[1] << 8) |
   16a48:	58d6      	ldr	r6, [r2, r3]
   16a4a:	00a3      	lsls	r3, r4, #2
   16a4c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   16a50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
	for (index = 0U; index < 8; index++) {
   16a54:	3401      	adds	r4, #1
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   16a56:	f8c3 6600 	str.w	r6, [r3, #1536]	; 0x600
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((uint32_t)bdaddr[5] << 8) | bdaddr[4];
   16a5a:	88ad      	ldrh	r5, [r5, #4]
   16a5c:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0U; index < 8; index++) {
   16a60:	2c08      	cmp	r4, #8
   16a62:	d1ee      	bne.n	16a42 <radio_filter_configure+0x6>
		bdaddr += 6;
	}

	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   16a64:	4b02      	ldr	r3, [pc, #8]	; (16a70 <radio_filter_configure+0x34>)
   16a66:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
   16a6a:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
   16a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16a70:	40001000 	.word	0x40001000

00016a74 <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   16a74:	4a03      	ldr	r2, [pc, #12]	; (16a84 <radio_filter_disable+0x10>)
   16a76:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   16a7a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   16a7e:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   16a82:	4770      	bx	lr
   16a84:	40001000 	.word	0x40001000

00016a88 <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   16a88:	4b02      	ldr	r3, [pc, #8]	; (16a94 <radio_filter_status_reset+0xc>)
   16a8a:	2200      	movs	r2, #0
   16a8c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   16a90:	4770      	bx	lr
   16a92:	bf00      	nop
   16a94:	40001000 	.word	0x40001000

00016a98 <radio_filter_has_match>:

uint32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   16a98:	4b03      	ldr	r3, [pc, #12]	; (16aa8 <radio_filter_has_match+0x10>)
   16a9a:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   16a9e:	3800      	subs	r0, #0
   16aa0:	bf18      	it	ne
   16aa2:	2001      	movne	r0, #1
   16aa4:	4770      	bx	lr
   16aa6:	bf00      	nop
   16aa8:	40001000 	.word	0x40001000

00016aac <radio_filter_match_get>:

uint32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   16aac:	4b01      	ldr	r3, [pc, #4]	; (16ab4 <radio_filter_match_get+0x8>)
   16aae:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   16ab2:	4770      	bx	lr
   16ab4:	40001000 	.word	0x40001000

00016ab8 <radio_tmr_status_reset>:
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   16ab8:	4b05      	ldr	r3, [pc, #20]	; (16ad0 <radio_tmr_status_reset+0x18>)
   16aba:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   16abe:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
   16ac2:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
   16ac6:	4a03      	ldr	r2, [pc, #12]	; (16ad4 <radio_tmr_status_reset+0x1c>)
   16ac8:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
#endif /* CONFIG_BT_CTLR_PHY_CODED */
#if defined(CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE)
			BIT(HAL_SW_SWITCH_TIMER_PHYEND_DELAY_COMPENSATION_DISABLE_PPI) |
#endif /* CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE */
			BIT(HAL_TRIGGER_CRYPT_PPI));
}
   16acc:	4770      	bx	lr
   16ace:	bf00      	nop
   16ad0:	4000b000 	.word	0x4000b000
   16ad4:	0e7000c0 	.word	0x0e7000c0

00016ad8 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(uint32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_set(SW_SWITCH_TIMER,
   16ad8:	4b03      	ldr	r3, [pc, #12]	; (16ae8 <radio_tmr_tifs_set+0x10>)
   16ada:	4a04      	ldr	r2, [pc, #16]	; (16aec <radio_tmr_tifs_set+0x14>)
   16adc:	781b      	ldrb	r3, [r3, #0]
   16ade:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   16ae2:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			 SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   16ae6:	4770      	bx	lr
   16ae8:	20004106 	.word	0x20004106
   16aec:	40009000 	.word	0x40009000

00016af0 <radio_tmr_start>:

uint32_t radio_tmr_start(uint8_t trx, uint32_t ticks_start, uint32_t remainder)
{
   16af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   16af2:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   16af6:	4c2f      	ldr	r4, [pc, #188]	; (16bb4 <radio_tmr_start+0xc4>)
   16af8:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   16afc:	42a3      	cmp	r3, r4
		ticks_start--;
		remainder += 30517578UL;
   16afe:	bf88      	it	hi
   16b00:	f102 72e8 	addhi.w	r2, r2, #30408704	; 0x1d00000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16b04:	4b2c      	ldr	r3, [pc, #176]	; (16bb8 <radio_tmr_start+0xc8>)
	}
	remainder /= 1000000UL;
   16b06:	4c2d      	ldr	r4, [pc, #180]	; (16bbc <radio_tmr_start+0xcc>)
		remainder += 30517578UL;
   16b08:	bf84      	itt	hi
   16b0a:	f502 32d4 	addhi.w	r2, r2, #108544	; 0x1a800
   16b0e:	f502 72a5 	addhi.w	r2, r2, #330	; 0x14a
   16b12:	f04f 0501 	mov.w	r5, #1

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
   16b16:	f04f 0600 	mov.w	r6, #0
	remainder /= 1000000UL;
   16b1a:	fbb2 f4f4 	udiv	r4, r2, r4
	EVENT_TIMER->PRESCALER = 4;
   16b1e:	f04f 0704 	mov.w	r7, #4
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   16b22:	f04f 0202 	mov.w	r2, #2
   16b26:	60dd      	str	r5, [r3, #12]
	EVENT_TIMER->MODE = 0;
   16b28:	f8c3 6504 	str.w	r6, [r3, #1284]	; 0x504
	EVENT_TIMER->PRESCALER = 4;
   16b2c:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   16b30:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
   16b34:	4a22      	ldr	r2, [pc, #136]	; (16bc0 <radio_tmr_start+0xd0>)
    p_reg->CC[cc_channel] = cc_value;
   16b36:	f8c3 4540 	str.w	r4, [r3, #1344]	; 0x540
		ticks_start--;
   16b3a:	bf88      	it	hi
   16b3c:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
   16b40:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   16b44:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   16b48:	f8c2 1344 	str.w	r1, [r2, #836]	; 0x344
    p_reg->CH[(uint32_t) channel].EEP = eep;
   16b4c:	491d      	ldr	r1, [pc, #116]	; (16bc4 <radio_tmr_start+0xd4>)
   16b4e:	f502 72a4 	add.w	r2, r2, #328	; 0x148
   16b52:	f8c1 2540 	str.w	r2, [r1, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   16b56:	f8c1 3544 	str.w	r3, [r1, #1348]	; 0x544
    p_reg->CHENSET = mask;
   16b5a:	2340      	movs	r3, #64	; 0x40
   16b5c:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
	nrf_rtc_event_enable(NRF_RTC0, RTC_EVTENSET_COMPARE2_Msk);

	hal_event_timer_start_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_EVENT_TIMER_START_PPI));

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
   16b60:	f7ff fd5e 	bl	16620 <hal_radio_enable_on_tick_ppi_config_and_enable>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16b64:	4b18      	ldr	r3, [pc, #96]	; (16bc8 <radio_tmr_start+0xd8>)
   16b66:	60dd      	str	r5, [r3, #12]
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0U;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
   16b68:	f8c3 6504 	str.w	r6, [r3, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   16b6c:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   16b70:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
   16b74:	601d      	str	r5, [r3, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
   16b76:	f5a3 43fd 	sub.w	r3, r3, #32384	; 0x7e80
   16b7a:	3b74      	subs	r3, #116	; 0x74
   16b7c:	f8c1 3550 	str.w	r3, [r1, #1360]	; 0x550
    p_reg->CH[(uint32_t) channel].TEP = tep;
   16b80:	f503 43fe 	add.w	r3, r3, #32512	; 0x7f00
   16b84:	f8c1 3554 	str.w	r3, [r1, #1364]	; 0x554
    p_reg->CH[(uint32_t) channel].EEP = eep;
   16b88:	f503 739a 	add.w	r3, r3, #308	; 0x134
   16b8c:	f8c1 3558 	str.w	r3, [r1, #1368]	; 0x558
    p_reg->CH[(uint32_t) channel].TEP = tep;
   16b90:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   16b94:	33c4      	adds	r3, #196	; 0xc4
   16b96:	f8c1 355c 	str.w	r3, [r1, #1372]	; 0x55c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   16b9a:	f5a3 33af 	sub.w	r3, r3, #89600	; 0x15e00
   16b9e:	3bc0      	subs	r3, #192	; 0xc0
   16ba0:	f8c1 3560 	str.w	r3, [r1, #1376]	; 0x560
    p_reg->CH[(uint32_t) channel].TEP = tep;
   16ba4:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   16ba8:	33c8      	adds	r3, #200	; 0xc8
   16baa:	f8c1 3564 	str.w	r3, [r1, #1380]	; 0x564
	 */
#endif /* CONFIG_BT_CTLR_PHY_CODED && CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
   16bae:	4620      	mov	r0, r4
   16bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16bb2:	bf00      	nop
   16bb4:	7ff0bdbf 	.word	0x7ff0bdbf
   16bb8:	40008000 	.word	0x40008000
   16bbc:	000f4240 	.word	0x000f4240
   16bc0:	4000b000 	.word	0x4000b000
   16bc4:	4001f000 	.word	0x4001f000
   16bc8:	40009000 	.word	0x40009000

00016bcc <radio_tmr_start_now>:
#endif /* CONFIG_SOC_SERIES_NRF53X */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

uint32_t radio_tmr_start_now(uint8_t trx)
{
   16bcc:	b510      	push	{r4, lr}
	uint32_t now, start;

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
   16bce:	f7ff fd27 	bl	16620 <hal_radio_enable_on_tick_ppi_config_and_enable>
   16bd2:	4b08      	ldr	r3, [pc, #32]	; (16bf4 <radio_tmr_start_now+0x28>)
   16bd4:	2401      	movs	r4, #1
   16bd6:	645c      	str	r4, [r3, #68]	; 0x44
#endif /* CONFIG_SOC_SERIES_NRF53X */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	/* Capture the current time */
	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CAPTURE1);
	now = EVENT_TIMER->CC[1];
   16bd8:	f8d3 2544 	ldr.w	r2, [r3, #1348]	; 0x544
	start = now;
   16bdc:	4611      	mov	r1, r2

	/* Setup PPI while determining the latency in doing so */
	do {
		/* Set start to be, now plus the determined latency */
		start = (now << 1) - start;
   16bde:	ebc1 0142 	rsb	r1, r1, r2, lsl #1

		/* Setup compare event with min. 1 us offset */
		nrf_timer_cc_set(EVENT_TIMER, 0, start + 1);
   16be2:	1c48      	adds	r0, r1, #1
    p_reg->CC[cc_channel] = cc_value;
   16be4:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16be8:	645c      	str	r4, [r3, #68]	; 0x44

		/* Capture the current time */
		nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CAPTURE1);

		now = EVENT_TIMER->CC[1];
   16bea:	f8d3 2544 	ldr.w	r2, [r3, #1348]	; 0x544
	} while (now > start);
   16bee:	4291      	cmp	r1, r2
   16bf0:	d3f5      	bcc.n	16bde <radio_tmr_start_now+0x12>

	return start + 1;
}
   16bf2:	bd10      	pop	{r4, pc}
   16bf4:	40008000 	.word	0x40008000

00016bf8 <radio_tmr_start_get>:
    return p_reg->CC[ch];
   16bf8:	4b01      	ldr	r3, [pc, #4]	; (16c00 <radio_tmr_start_get+0x8>)
   16bfa:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548

uint32_t radio_tmr_start_get(void)
{
	return nrf_rtc_cc_get(NRF_RTC0, 2);
}
   16bfe:	4770      	bx	lr
   16c00:	4000b000 	.word	0x4000b000

00016c04 <radio_tmr_stop>:
   16c04:	4a04      	ldr	r2, [pc, #16]	; (16c18 <radio_tmr_stop+0x14>)
   16c06:	2301      	movs	r3, #1
   16c08:	6053      	str	r3, [r2, #4]
   16c0a:	6113      	str	r3, [r2, #16]
   16c0c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   16c10:	6053      	str	r3, [r2, #4]
   16c12:	6113      	str	r3, [r2, #16]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   16c14:	4770      	bx	lr
   16c16:	bf00      	nop
   16c18:	40008000 	.word	0x40008000

00016c1c <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
   16c1c:	4b04      	ldr	r3, [pc, #16]	; (16c30 <radio_tmr_hcto_configure+0x14>)
   16c1e:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->CHENSET = mask;
   16c22:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
   16c26:	f04f 6288 	mov.w	r2, #71303168	; 0x4400000
   16c2a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_disable_on_hcto_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI) |
		BIT(HAL_RADIO_DISABLE_ON_HCTO_PPI));
}
   16c2e:	4770      	bx	lr
   16c30:	40008000 	.word	0x40008000

00016c34 <radio_tmr_aa_capture>:
    p_reg->CH[(uint32_t) channel].EEP = eep;
   16c34:	4b06      	ldr	r3, [pc, #24]	; (16c50 <radio_tmr_aa_capture+0x1c>)
   16c36:	4a07      	ldr	r2, [pc, #28]	; (16c54 <radio_tmr_aa_capture+0x20>)
   16c38:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    p_reg->CH[(uint32_t) channel].TEP = tep;
   16c3c:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   16c40:	3240      	adds	r2, #64	; 0x40
   16c42:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
    p_reg->CHENSET = mask;
   16c46:	4a04      	ldr	r2, [pc, #16]	; (16c58 <radio_tmr_aa_capture+0x24>)
   16c48:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_ready_time_capture_ppi_config();
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_READY_TIME_CAPTURE_PPI) |
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI));
}
   16c4c:	4770      	bx	lr
   16c4e:	bf00      	nop
   16c50:	4001f000 	.word	0x4001f000
   16c54:	40001100 	.word	0x40001100
   16c58:	04000080 	.word	0x04000080

00016c5c <radio_tmr_aa_get>:

uint32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   16c5c:	4b01      	ldr	r3, [pc, #4]	; (16c64 <radio_tmr_aa_get+0x8>)
   16c5e:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   16c62:	4770      	bx	lr
   16c64:	40008000 	.word	0x40008000

00016c68 <radio_tmr_aa_save>:

static uint32_t radio_tmr_aa;

void radio_tmr_aa_save(uint32_t aa)
{
	radio_tmr_aa = aa;
   16c68:	4b01      	ldr	r3, [pc, #4]	; (16c70 <radio_tmr_aa_save+0x8>)
   16c6a:	6018      	str	r0, [r3, #0]
}
   16c6c:	4770      	bx	lr
   16c6e:	bf00      	nop
   16c70:	200032d0 	.word	0x200032d0

00016c74 <radio_tmr_aa_restore>:

uint32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
}
   16c74:	4b01      	ldr	r3, [pc, #4]	; (16c7c <radio_tmr_aa_restore+0x8>)
   16c76:	6818      	ldr	r0, [r3, #0]
   16c78:	4770      	bx	lr
   16c7a:	bf00      	nop
   16c7c:	200032d0 	.word	0x200032d0

00016c80 <radio_tmr_ready_get>:

uint32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   16c80:	4b01      	ldr	r3, [pc, #4]	; (16c88 <radio_tmr_ready_get+0x8>)
   16c82:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   16c86:	4770      	bx	lr
   16c88:	40008000 	.word	0x40008000

00016c8c <radio_tmr_end_capture>:
   16c8c:	4b02      	ldr	r3, [pc, #8]	; (16c98 <radio_tmr_end_capture+0xc>)
   16c8e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   16c92:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_end_time_capture_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
#endif /* !CONFIG_SOC_SERIES_NRF53X ||
	* (CONFIG_SOC_SERIES_NRF53X && !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	*/
}
   16c96:	4770      	bx	lr
   16c98:	4001f000 	.word	0x4001f000

00016c9c <radio_tmr_end_get>:
uint32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   16c9c:	4b01      	ldr	r3, [pc, #4]	; (16ca4 <radio_tmr_end_get+0x8>)
   16c9e:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
   16ca2:	4770      	bx	lr
   16ca4:	40008000 	.word	0x40008000

00016ca8 <radio_tmr_tifs_base_get>:
   16ca8:	4b01      	ldr	r3, [pc, #4]	; (16cb0 <radio_tmr_tifs_base_get+0x8>)
   16caa:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   16cae:	4770      	bx	lr
   16cb0:	40008000 	.word	0x40008000

00016cb4 <radio_ar_match_get>:
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_AAR_PPI));
}

uint32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   16cb4:	4b01      	ldr	r3, [pc, #4]	; (16cbc <radio_ar_match_get+0x8>)
   16cb6:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   16cba:	4770      	bx	lr
   16cbc:	4000f000 	.word	0x4000f000

00016cc0 <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
   16cc0:	4a06      	ldr	r2, [pc, #24]	; (16cdc <radio_ar_status_reset+0x1c>)
   16cc2:	2300      	movs	r3, #0
   16cc4:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

void radio_ar_status_reset(void)
{
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   16cc8:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
   16ccc:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    p_reg->CHENCLR = mask;
   16cd0:	4b03      	ldr	r3, [pc, #12]	; (16ce0 <radio_ar_status_reset+0x20>)
   16cd2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   16cd6:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
			  AAR_ENABLE_ENABLE_Msk;

	hal_radio_nrf_ppi_channels_disable(BIT(HAL_TRIGGER_AAR_PPI));
}
   16cda:	4770      	bx	lr
   16cdc:	40001000 	.word	0x40001000
   16ce0:	4001f000 	.word	0x4001f000

00016ce4 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   16ce4:	4b08      	ldr	r3, [pc, #32]	; (16d08 <radio_ar_has_match+0x24>)
   16ce6:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

uint32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   16cea:	b160      	cbz	r0, 16d06 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   16cec:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   16cf0:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   16cf4:	b138      	cbz	r0, 16d06 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   16cf6:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   16cfa:	b120      	cbz	r0, 16d06 <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   16cfc:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   16d00:	fab0 f080 	clz	r0, r0
   16d04:	0940      	lsrs	r0, r0, #5
}
   16d06:	4770      	bx	lr
   16d08:	40001000 	.word	0x40001000

00016d0c <mayfly_enable_cb>:

void mayfly_enable_cb(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   16d0c:	2902      	cmp	r1, #2
{
   16d0e:	b510      	push	{r4, lr}
   16d10:	4614      	mov	r4, r2
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   16d12:	d00b      	beq.n	16d2c <mayfly_enable_cb+0x20>
   16d14:	4a0a      	ldr	r2, [pc, #40]	; (16d40 <mayfly_enable_cb+0x34>)
   16d16:	490b      	ldr	r1, [pc, #44]	; (16d44 <mayfly_enable_cb+0x38>)
   16d18:	480b      	ldr	r0, [pc, #44]	; (16d48 <mayfly_enable_cb+0x3c>)
   16d1a:	231e      	movs	r3, #30
   16d1c:	f005 fad4 	bl	1c2c8 <printk>
   16d20:	4040      	eors	r0, r0
   16d22:	f380 8811 	msr	BASEPRI, r0
   16d26:	f04f 0003 	mov.w	r0, #3
   16d2a:	df02      	svc	2

	if (enable) {
		irq_enable(HAL_SWI_JOB_IRQ);
   16d2c:	200b      	movs	r0, #11
	if (enable) {
   16d2e:	b11c      	cbz	r4, 16d38 <mayfly_enable_cb+0x2c>
	} else {
		irq_disable(HAL_SWI_JOB_IRQ);
	}
}
   16d30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_enable(HAL_SWI_JOB_IRQ);
   16d34:	f7ee bc84 	b.w	5640 <arch_irq_enable>
}
   16d38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_disable(HAL_SWI_JOB_IRQ);
   16d3c:	f7ee bc90 	b.w	5660 <arch_irq_disable>
   16d40:	00028194 	.word	0x00028194
   16d44:	000281e2 	.word	0x000281e2
   16d48:	00027514 	.word	0x00027514

00016d4c <mayfly_is_enabled>:

uint32_t mayfly_is_enabled(uint8_t caller_id, uint8_t callee_id)
{
   16d4c:	b508      	push	{r3, lr}
	(void)caller_id;

	switch (callee_id) {
   16d4e:	b181      	cbz	r1, 16d72 <mayfly_is_enabled+0x26>
   16d50:	3901      	subs	r1, #1
   16d52:	2901      	cmp	r1, #1
   16d54:	d912      	bls.n	16d7c <mayfly_is_enabled+0x30>

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(HAL_SWI_JOB_IRQ);

	default:
		LL_ASSERT(0);
   16d56:	4a0a      	ldr	r2, [pc, #40]	; (16d80 <mayfly_is_enabled+0x34>)
   16d58:	490a      	ldr	r1, [pc, #40]	; (16d84 <mayfly_is_enabled+0x38>)
   16d5a:	480b      	ldr	r0, [pc, #44]	; (16d88 <mayfly_is_enabled+0x3c>)
   16d5c:	2336      	movs	r3, #54	; 0x36
   16d5e:	f005 fab3 	bl	1c2c8 <printk>
   16d62:	4040      	eors	r0, r0
   16d64:	f380 8811 	msr	BASEPRI, r0
   16d68:	f04f 0003 	mov.w	r0, #3
   16d6c:	df02      	svc	2
		break;
	}

	return 0;
}
   16d6e:	2000      	movs	r0, #0
   16d70:	bd08      	pop	{r3, pc}
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);
   16d72:	2018      	movs	r0, #24
}
   16d74:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		return irq_is_enabled(HAL_SWI_WORKER_IRQ);
   16d78:	f7ee bc86 	b.w	5688 <arch_irq_is_enabled>
   16d7c:	200b      	movs	r0, #11
   16d7e:	e7f9      	b.n	16d74 <mayfly_is_enabled+0x28>
   16d80:	00028194 	.word	0x00028194
   16d84:	0002826c 	.word	0x0002826c
   16d88:	00027514 	.word	0x00027514

00016d8c <mayfly_pend>:

void mayfly_pend(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   16d8c:	2901      	cmp	r1, #1
{
   16d8e:	b508      	push	{r3, lr}
	switch (callee_id) {
   16d90:	d008      	beq.n	16da4 <mayfly_pend+0x18>
   16d92:	2902      	cmp	r1, #2
   16d94:	d006      	beq.n	16da4 <mayfly_pend+0x18>
   16d96:	b949      	cbnz	r1, 16dac <mayfly_pend+0x20>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   16d98:	4b0b      	ldr	r3, [pc, #44]	; (16dc8 <mayfly_pend+0x3c>)
   16d9a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   16d9e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

	default:
		LL_ASSERT(0);
		break;
	}
}
   16da2:	bd08      	pop	{r3, pc}
   16da4:	4b08      	ldr	r3, [pc, #32]	; (16dc8 <mayfly_pend+0x3c>)
   16da6:	f44f 6200 	mov.w	r2, #2048	; 0x800
   16daa:	e7f8      	b.n	16d9e <mayfly_pend+0x12>
		LL_ASSERT(0);
   16dac:	4a07      	ldr	r2, [pc, #28]	; (16dcc <mayfly_pend+0x40>)
   16dae:	4908      	ldr	r1, [pc, #32]	; (16dd0 <mayfly_pend+0x44>)
   16db0:	4808      	ldr	r0, [pc, #32]	; (16dd4 <mayfly_pend+0x48>)
   16db2:	2367      	movs	r3, #103	; 0x67
   16db4:	f005 fa88 	bl	1c2c8 <printk>
   16db8:	4040      	eors	r0, r0
   16dba:	f380 8811 	msr	BASEPRI, r0
   16dbe:	f04f 0003 	mov.w	r0, #3
   16dc2:	df02      	svc	2
}
   16dc4:	e7ed      	b.n	16da2 <mayfly_pend+0x16>
   16dc6:	bf00      	nop
   16dc8:	e000e100 	.word	0xe000e100
   16dcc:	00028194 	.word	0x00028194
   16dd0:	0002826c 	.word	0x0002826c
   16dd4:	00027514 	.word	0x00027514

00016dd8 <hal_ticker_instance0_caller_id_get>:

uint8_t hal_ticker_instance0_caller_id_get(uint8_t user_id)
{
	uint8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   16dd8:	2803      	cmp	r0, #3
{
   16dda:	b510      	push	{r4, lr}
   16ddc:	4604      	mov	r4, r0
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   16dde:	d90b      	bls.n	16df8 <hal_ticker_instance0_caller_id_get+0x20>
   16de0:	4a0e      	ldr	r2, [pc, #56]	; (16e1c <hal_ticker_instance0_caller_id_get+0x44>)
   16de2:	490f      	ldr	r1, [pc, #60]	; (16e20 <hal_ticker_instance0_caller_id_get+0x48>)
   16de4:	480f      	ldr	r0, [pc, #60]	; (16e24 <hal_ticker_instance0_caller_id_get+0x4c>)
   16de6:	232b      	movs	r3, #43	; 0x2b
   16de8:	f005 fa6e 	bl	1c2c8 <printk>
   16dec:	4040      	eors	r0, r0
   16dee:	f380 8811 	msr	BASEPRI, r0
   16df2:	f04f 0003 	mov.w	r0, #3
   16df6:	df02      	svc	2

	caller_id = caller_id_lut[user_id];
   16df8:	4b0b      	ldr	r3, [pc, #44]	; (16e28 <hal_ticker_instance0_caller_id_get+0x50>)
   16dfa:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   16dfc:	b95c      	cbnz	r4, 16e16 <hal_ticker_instance0_caller_id_get+0x3e>
   16dfe:	4a07      	ldr	r2, [pc, #28]	; (16e1c <hal_ticker_instance0_caller_id_get+0x44>)
   16e00:	490a      	ldr	r1, [pc, #40]	; (16e2c <hal_ticker_instance0_caller_id_get+0x54>)
   16e02:	4808      	ldr	r0, [pc, #32]	; (16e24 <hal_ticker_instance0_caller_id_get+0x4c>)
   16e04:	232e      	movs	r3, #46	; 0x2e
   16e06:	f005 fa5f 	bl	1c2c8 <printk>
   16e0a:	4040      	eors	r0, r0
   16e0c:	f380 8811 	msr	BASEPRI, r0
   16e10:	f04f 0003 	mov.w	r0, #3
   16e14:	df02      	svc	2

	return caller_id;
}
   16e16:	4620      	mov	r0, r4
   16e18:	bd10      	pop	{r4, pc}
   16e1a:	bf00      	nop
   16e1c:	000281f1 	.word	0x000281f1
   16e20:	0002823f 	.word	0x0002823f
   16e24:	00027514 	.word	0x00027514
   16e28:	0002826e 	.word	0x0002826e
   16e2c:	0002825f 	.word	0x0002825f

00016e30 <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   16e30:	3801      	subs	r0, #1
{
   16e32:	b510      	push	{r4, lr}
   16e34:	461c      	mov	r4, r3
	switch (caller_id) {
   16e36:	2804      	cmp	r0, #4
   16e38:	d845      	bhi.n	16ec6 <hal_ticker_instance0_sched+0x96>
   16e3a:	e8df f000 	tbb	[pc, r0]
   16e3e:	1a03      	.short	0x1a03
   16e40:	2c23      	.short	0x2c23
   16e42:	3b          	.byte	0x3b
   16e43:	00          	.byte	0x00
	case TICKER_CALL_ID_ISR:
		switch (callee_id) {
   16e44:	2904      	cmp	r1, #4
   16e46:	d107      	bne.n	16e58 <hal_ticker_instance0_sched+0x28>
		{
			static memq_link_t link;
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_job};

			m.param = instance;
   16e48:	4b20      	ldr	r3, [pc, #128]	; (16ecc <hal_ticker_instance0_sched+0x9c>)

			/* TODO: scheduler lock, if preemptive threads used */
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   16e4a:	2102      	movs	r1, #2
			m.param = instance;
   16e4c:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   16e4e:	2000      	movs	r0, #0

	default:
		LL_ASSERT(0);
		break;
	}
}
   16e50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   16e54:	f7f8 bf72 	b.w	fd3c <mayfly_enqueue>
			LL_ASSERT(0);
   16e58:	234e      	movs	r3, #78	; 0x4e
		LL_ASSERT(0);
   16e5a:	4a1d      	ldr	r2, [pc, #116]	; (16ed0 <hal_ticker_instance0_sched+0xa0>)
   16e5c:	491d      	ldr	r1, [pc, #116]	; (16ed4 <hal_ticker_instance0_sched+0xa4>)
   16e5e:	481e      	ldr	r0, [pc, #120]	; (16ed8 <hal_ticker_instance0_sched+0xa8>)
   16e60:	f005 fa32 	bl	1c2c8 <printk>
   16e64:	4040      	eors	r0, r0
   16e66:	f380 8811 	msr	BASEPRI, r0
   16e6a:	f04f 0003 	mov.w	r0, #3
   16e6e:	df02      	svc	2
}
   16e70:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   16e72:	2903      	cmp	r1, #3
   16e74:	d104      	bne.n	16e80 <hal_ticker_instance0_sched+0x50>
			m.param = instance;
   16e76:	4b19      	ldr	r3, [pc, #100]	; (16edc <hal_ticker_instance0_sched+0xac>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   16e78:	2101      	movs	r1, #1
			m.param = instance;
   16e7a:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   16e7c:	4608      	mov	r0, r1
   16e7e:	e7e7      	b.n	16e50 <hal_ticker_instance0_sched+0x20>
			LL_ASSERT(0);
   16e80:	2365      	movs	r3, #101	; 0x65
   16e82:	e7ea      	b.n	16e5a <hal_ticker_instance0_sched+0x2a>
		switch (callee_id) {
   16e84:	2904      	cmp	r1, #4
   16e86:	d104      	bne.n	16e92 <hal_ticker_instance0_sched+0x62>
			m.param = instance;
   16e88:	4b15      	ldr	r3, [pc, #84]	; (16ee0 <hal_ticker_instance0_sched+0xb0>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   16e8a:	2102      	movs	r1, #2
			m.param = instance;
   16e8c:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   16e8e:	2001      	movs	r0, #1
   16e90:	e7de      	b.n	16e50 <hal_ticker_instance0_sched+0x20>
			LL_ASSERT(0);
   16e92:	237c      	movs	r3, #124	; 0x7c
   16e94:	e7e1      	b.n	16e5a <hal_ticker_instance0_sched+0x2a>
		switch (callee_id) {
   16e96:	2903      	cmp	r1, #3
   16e98:	d003      	beq.n	16ea2 <hal_ticker_instance0_sched+0x72>
   16e9a:	2904      	cmp	r1, #4
   16e9c:	d006      	beq.n	16eac <hal_ticker_instance0_sched+0x7c>
			LL_ASSERT(0);
   16e9e:	23a2      	movs	r3, #162	; 0xa2
   16ea0:	e7db      	b.n	16e5a <hal_ticker_instance0_sched+0x2a>
			m.param = instance;
   16ea2:	4b10      	ldr	r3, [pc, #64]	; (16ee4 <hal_ticker_instance0_sched+0xb4>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   16ea4:	2101      	movs	r1, #1
			m.param = instance;
   16ea6:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   16ea8:	2002      	movs	r0, #2
   16eaa:	e7d1      	b.n	16e50 <hal_ticker_instance0_sched+0x20>
			m.param = instance;
   16eac:	4b0e      	ldr	r3, [pc, #56]	; (16ee8 <hal_ticker_instance0_sched+0xb8>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   16eae:	2102      	movs	r1, #2
			m.param = instance;
   16eb0:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   16eb2:	e7e3      	b.n	16e7c <hal_ticker_instance0_sched+0x4c>
		switch (callee_id) {
   16eb4:	2904      	cmp	r1, #4
   16eb6:	d104      	bne.n	16ec2 <hal_ticker_instance0_sched+0x92>
			m.param = instance;
   16eb8:	4b0c      	ldr	r3, [pc, #48]	; (16eec <hal_ticker_instance0_sched+0xbc>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   16eba:	2102      	movs	r1, #2
			m.param = instance;
   16ebc:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   16ebe:	2003      	movs	r0, #3
   16ec0:	e7c6      	b.n	16e50 <hal_ticker_instance0_sched+0x20>
			LL_ASSERT(0);
   16ec2:	23ba      	movs	r3, #186	; 0xba
   16ec4:	e7c9      	b.n	16e5a <hal_ticker_instance0_sched+0x2a>
		LL_ASSERT(0);
   16ec6:	23c0      	movs	r3, #192	; 0xc0
   16ec8:	e7c7      	b.n	16e5a <hal_ticker_instance0_sched+0x2a>
   16eca:	bf00      	nop
   16ecc:	20000bf4 	.word	0x20000bf4
   16ed0:	000281f1 	.word	0x000281f1
   16ed4:	0002826c 	.word	0x0002826c
   16ed8:	00027514 	.word	0x00027514
   16edc:	20000be4 	.word	0x20000be4
   16ee0:	20000c34 	.word	0x20000c34
   16ee4:	20000c24 	.word	0x20000c24
   16ee8:	20000c14 	.word	0x20000c14
   16eec:	20000c04 	.word	0x20000c04

00016ef0 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   16ef0:	4b02      	ldr	r3, [pc, #8]	; (16efc <net_buf_pool_get+0xc>)
   16ef2:	222c      	movs	r2, #44	; 0x2c
   16ef4:	fb02 3000 	mla	r0, r2, r0, r3
   16ef8:	4770      	bx	lr
   16efa:	bf00      	nop
   16efc:	20000f90 	.word	0x20000f90

00016f00 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   16f00:	7982      	ldrb	r2, [r0, #6]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   16f02:	4b06      	ldr	r3, [pc, #24]	; (16f1c <net_buf_id+0x1c>)
   16f04:	212c      	movs	r1, #44	; 0x2c
   16f06:	fb01 3302 	mla	r3, r1, r2, r3
   16f0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   16f0c:	7f1b      	ldrb	r3, [r3, #28]
   16f0e:	3317      	adds	r3, #23
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   16f10:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   16f12:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   16f16:	fbb0 f0f3 	udiv	r0, r0, r3
   16f1a:	4770      	bx	lr
   16f1c:	20000f90 	.word	0x20000f90

00016f20 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   16f20:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   16f22:	4b0a      	ldr	r3, [pc, #40]	; (16f4c <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   16f24:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   16f26:	242c      	movs	r4, #44	; 0x2c
   16f28:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   16f2c:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   16f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   16f30:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   16f32:	6823      	ldr	r3, [r4, #0]
   16f34:	429a      	cmp	r2, r3
   16f36:	bf94      	ite	ls
   16f38:	600a      	strls	r2, [r1, #0]
   16f3a:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   16f3c:	f7ff ffe0 	bl	16f00 <net_buf_id>
   16f40:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   16f44:	fb02 3000 	mla	r0, r2, r0, r3
   16f48:	bd10      	pop	{r4, pc}
   16f4a:	bf00      	nop
   16f4c:	20000f90 	.word	0x20000f90

00016f50 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   16f50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16f54:	4605      	mov	r5, r0
   16f56:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   16f58:	4610      	mov	r0, r2
   16f5a:	4619      	mov	r1, r3
{
   16f5c:	4691      	mov	r9, r2
   16f5e:	4698      	mov	r8, r3
   16f60:	4617      	mov	r7, r2
   16f62:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   16f64:	f00f f828 	bl	25fb8 <sys_clock_timeout_end_calc>
   16f68:	4682      	mov	sl, r0
   16f6a:	468b      	mov	fp, r1
	__asm__ volatile(
   16f6c:	f04f 0320 	mov.w	r3, #32
   16f70:	f3ef 8111 	mrs	r1, BASEPRI
   16f74:	f383 8812 	msr	BASEPRI_MAX, r3
   16f78:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   16f7c:	8b6b      	ldrh	r3, [r5, #26]
   16f7e:	2b00      	cmp	r3, #0
   16f80:	d05a      	beq.n	17038 <net_buf_alloc_len+0xe8>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   16f82:	8b2a      	ldrh	r2, [r5, #24]
   16f84:	429a      	cmp	r2, r3
   16f86:	d93e      	bls.n	17006 <net_buf_alloc_len+0xb6>
   16f88:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   16f8a:	2200      	movs	r2, #0
   16f8c:	2300      	movs	r3, #0
   16f8e:	4628      	mov	r0, r5
   16f90:	f004 f986 	bl	1b2a0 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   16f94:	9900      	ldr	r1, [sp, #0]
   16f96:	4604      	mov	r4, r0
   16f98:	2800      	cmp	r0, #0
   16f9a:	d034      	beq.n	17006 <net_buf_alloc_len+0xb6>
	__asm__ volatile(
   16f9c:	f381 8811 	msr	BASEPRI, r1
   16fa0:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   16fa4:	9b01      	ldr	r3, [sp, #4]
   16fa6:	2b00      	cmp	r3, #0
   16fa8:	d056      	beq.n	17058 <net_buf_alloc_len+0x108>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   16faa:	ea58 0309 	orrs.w	r3, r8, r9
   16fae:	d00f      	beq.n	16fd0 <net_buf_alloc_len+0x80>
   16fb0:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   16fb4:	bf08      	it	eq
   16fb6:	f1b9 3fff 	cmpeq.w	r9, #4294967295	; 0xffffffff
   16fba:	d009      	beq.n	16fd0 <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   16fbc:	f005 f87c 	bl	1c0b8 <sys_clock_tick_get>
   16fc0:	ebba 0700 	subs.w	r7, sl, r0
   16fc4:	eb6b 0601 	sbc.w	r6, fp, r1
   16fc8:	2e00      	cmp	r6, #0
   16fca:	bfbc      	itt	lt
   16fcc:	2700      	movlt	r7, #0
   16fce:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   16fd0:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   16fd2:	f8df 809c 	ldr.w	r8, [pc, #156]	; 17070 <net_buf_alloc_len+0x120>
   16fd6:	f04f 092c 	mov.w	r9, #44	; 0x2c
   16fda:	fb09 8303 	mla	r3, r9, r3, r8
   16fde:	463a      	mov	r2, r7
   16fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   16fe2:	681b      	ldr	r3, [r3, #0]
   16fe4:	a901      	add	r1, sp, #4
   16fe6:	681d      	ldr	r5, [r3, #0]
   16fe8:	4620      	mov	r0, r4
   16fea:	4633      	mov	r3, r6
   16fec:	47a8      	blx	r5
   16fee:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   16ff0:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   16ff2:	2800      	cmp	r0, #0
   16ff4:	d131      	bne.n	1705a <net_buf_alloc_len+0x10a>
	k_lifo_put(&pool->free, buf);
   16ff6:	79a0      	ldrb	r0, [r4, #6]
   16ff8:	4621      	mov	r1, r4
   16ffa:	fb00 8009 	mla	r0, r0, r9, r8
   16ffe:	f00e fd4b 	bl	25a98 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   17002:	462c      	mov	r4, r5
}
   17004:	e024      	b.n	17050 <net_buf_alloc_len+0x100>
		uninit_count = pool->uninit_count--;
   17006:	8b68      	ldrh	r0, [r5, #26]
   17008:	1e43      	subs	r3, r0, #1
   1700a:	836b      	strh	r3, [r5, #26]
   1700c:	f381 8811 	msr	BASEPRI, r1
   17010:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   17014:	7f2a      	ldrb	r2, [r5, #28]
   17016:	f102 0417 	add.w	r4, r2, #23
   1701a:	f024 0303 	bic.w	r3, r4, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1701e:	8b2c      	ldrh	r4, [r5, #24]
   17020:	1a20      	subs	r0, r4, r0
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   17022:	6aac      	ldr	r4, [r5, #40]	; 0x28
   17024:	fb00 4403 	mla	r4, r0, r3, r4
	return pool - _net_buf_pool_list;
   17028:	4811      	ldr	r0, [pc, #68]	; (17070 <net_buf_alloc_len+0x120>)
   1702a:	4b12      	ldr	r3, [pc, #72]	; (17074 <net_buf_alloc_len+0x124>)
	buf->user_data_size = pool->user_data_size;
   1702c:	71e2      	strb	r2, [r4, #7]
	return pool - _net_buf_pool_list;
   1702e:	1a2d      	subs	r5, r5, r0
   17030:	10ad      	asrs	r5, r5, #2
   17032:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   17034:	71a5      	strb	r5, [r4, #6]
		goto success;
   17036:	e7b5      	b.n	16fa4 <net_buf_alloc_len+0x54>
   17038:	f381 8811 	msr	BASEPRI, r1
   1703c:	f3bf 8f6f 	isb	sy
   17040:	464a      	mov	r2, r9
   17042:	4643      	mov	r3, r8
   17044:	4628      	mov	r0, r5
   17046:	f004 f92b 	bl	1b2a0 <z_impl_k_queue_get>
	if (!buf) {
   1704a:	4604      	mov	r4, r0
   1704c:	2800      	cmp	r0, #0
   1704e:	d1a9      	bne.n	16fa4 <net_buf_alloc_len+0x54>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   17050:	4620      	mov	r0, r4
   17052:	b003      	add	sp, #12
   17054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
   17058:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   1705a:	2300      	movs	r3, #0
	buf->ref   = 1U;
   1705c:	2201      	movs	r2, #1
	buf->frags = NULL;
   1705e:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   17060:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   17062:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   17064:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   17066:	6923      	ldr	r3, [r4, #16]
   17068:	81e2      	strh	r2, [r4, #14]
   1706a:	60a3      	str	r3, [r4, #8]
	return buf;
   1706c:	e7f0      	b.n	17050 <net_buf_alloc_len+0x100>
   1706e:	bf00      	nop
   17070:	20000f90 	.word	0x20000f90
   17074:	ba2e8ba3 	.word	0xba2e8ba3

00017078 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   17078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1707c:	4d16      	ldr	r5, [pc, #88]	; (170d8 <net_buf_unref+0x60>)
   1707e:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   17080:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   17082:	272c      	movs	r7, #44	; 0x2c
	while (buf) {
   17084:	b90c      	cbnz	r4, 1708a <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   17086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   1708a:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   1708c:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   17090:	3b01      	subs	r3, #1
   17092:	b2db      	uxtb	r3, r3
   17094:	7123      	strb	r3, [r4, #4]
   17096:	2b00      	cmp	r3, #0
   17098:	d1f5      	bne.n	17086 <net_buf_unref+0xe>
		if (buf->__buf) {
   1709a:	6921      	ldr	r1, [r4, #16]
   1709c:	b159      	cbz	r1, 170b6 <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1709e:	7963      	ldrb	r3, [r4, #5]
   170a0:	079b      	lsls	r3, r3, #30
   170a2:	d407      	bmi.n	170b4 <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   170a4:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   170a6:	fb07 5303 	mla	r3, r7, r3, r5
   170aa:	4620      	mov	r0, r4
   170ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   170ae:	681b      	ldr	r3, [r3, #0]
   170b0:	689b      	ldr	r3, [r3, #8]
   170b2:	4798      	blx	r3
			buf->__buf = NULL;
   170b4:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   170b6:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   170b8:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   170ba:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   170be:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   170c0:	6a1b      	ldr	r3, [r3, #32]
   170c2:	b11b      	cbz	r3, 170cc <net_buf_unref+0x54>
			pool->destroy(buf);
   170c4:	4620      	mov	r0, r4
   170c6:	4798      	blx	r3
{
   170c8:	4644      	mov	r4, r8
   170ca:	e7db      	b.n	17084 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   170cc:	4621      	mov	r1, r4
   170ce:	fb00 5007 	mla	r0, r0, r7, r5
   170d2:	f00e fce1 	bl	25a98 <k_queue_prepend>
}
   170d6:	e7f7      	b.n	170c8 <net_buf_unref+0x50>
   170d8:	20000f90 	.word	0x20000f90

000170dc <endpoint_ctx>:
	return (uint8_t)ep;
}

static inline bool ep_is_valid(const uint8_t ep)
{
	uint8_t ep_num = USB_EP_GET_IDX(ep);
   170dc:	f000 037f 	and.w	r3, r0, #127	; 0x7f

	if (NRF_USBD_EPIN_CHECK(ep)) {
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
   170e0:	2b08      	cmp	r3, #8
	if (NRF_USBD_EPIN_CHECK(ep)) {
   170e2:	b242      	sxtb	r2, r0
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
   170e4:	d004      	beq.n	170f0 <endpoint_ctx+0x14>
			if (CFG_EP_ISOIN_CNT == 0) {
				return false;
			}
		} else {
			if (ep_num >= CFG_EPIN_CNT) {
   170e6:	f010 0f78 	tst.w	r0, #120	; 0x78
   170ea:	d001      	beq.n	170f0 <endpoint_ctx+0x14>
{
	struct nrf_usbd_ctx *ctx;
	uint8_t ep_num;

	if (!ep_is_valid(ep)) {
		return NULL;
   170ec:	2000      	movs	r0, #0
   170ee:	4770      	bx	lr
	}

	ctx = get_usbd_ctx();
	ep_num = NRF_USBD_EP_NR_GET(ep);

	if (NRF_USBD_EPIN_CHECK(ep)) {
   170f0:	2a00      	cmp	r2, #0
	ep_num = NRF_USBD_EP_NR_GET(ep);
   170f2:	f000 030f 	and.w	r3, r0, #15
	if (NRF_USBD_EPIN_CHECK(ep)) {
   170f6:	f000 0008 	and.w	r0, r0, #8
   170fa:	da05      	bge.n	17108 <endpoint_ctx+0x2c>
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
   170fc:	b958      	cbnz	r0, 17116 <endpoint_ctx+0x3a>
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
		} else {
			return &ctx->ep_ctx[ep_num];
   170fe:	4808      	ldr	r0, [pc, #32]	; (17120 <endpoint_ctx+0x44>)
   17100:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   17104:	304c      	adds	r0, #76	; 0x4c
   17106:	4770      	bx	lr
		}
	} else {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
   17108:	b938      	cbnz	r0, 1711a <endpoint_ctx+0x3e>
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
		} else {
			return &ctx->ep_ctx[CFG_EPIN_CNT +
   1710a:	4805      	ldr	r0, [pc, #20]	; (17120 <endpoint_ctx+0x44>)
   1710c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   17110:	f500 70b6 	add.w	r0, r0, #364	; 0x16c
   17114:	4770      	bx	lr
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
   17116:	4803      	ldr	r0, [pc, #12]	; (17124 <endpoint_ctx+0x48>)
   17118:	4770      	bx	lr
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
   1711a:	4803      	ldr	r0, [pc, #12]	; (17128 <endpoint_ctx+0x4c>)
					    ep_num];
		}
	}

	return NULL;
}
   1711c:	4770      	bx	lr
   1711e:	bf00      	nop
   17120:	20003904 	.word	0x20003904
   17124:	20003a50 	.word	0x20003a50
   17128:	20003b70 	.word	0x20003b70

0001712c <usbd_evt_put>:
 * @brief Enqueue USBD event.
 *
 * @param Pointer to the previously allocated and filled event structure.
 */
static inline void usbd_evt_put(struct usbd_event *ev)
{
   1712c:	4601      	mov	r1, r0
	k_fifo_put(&usbd_evt_fifo, ev);
   1712e:	4801      	ldr	r0, [pc, #4]	; (17134 <usbd_evt_put+0x8>)
   17130:	f00e bca7 	b.w	25a82 <k_queue_append>
   17134:	20000f78 	.word	0x20000f78

00017138 <usbd_work_schedule>:
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   17138:	4901      	ldr	r1, [pc, #4]	; (17140 <usbd_work_schedule+0x8>)
   1713a:	4802      	ldr	r0, [pc, #8]	; (17144 <usbd_work_schedule+0xc>)
   1713c:	f00e bd8b 	b.w	25c56 <k_work_submit_to_queue>
   17140:	2000392c 	.word	0x2000392c
   17144:	20001e28 	.word	0x20001e28

00017148 <usb_init>:
	}
	return 0;
}

static int usb_init(const struct device *arg)
{
   17148:	b513      	push	{r0, r1, r4, lr}
	};

	/* Ignore the return value, as NRFX_ERROR_ALREADY_INITIALIZED is not
	 * a problem here.
	 */
	(void)nrfx_power_init(&power_config);
   1714a:	480b      	ldr	r0, [pc, #44]	; (17178 <usb_init+0x30>)
   1714c:	f002 fd84 	bl	19c58 <nrfx_power_init>
	nrfx_power_usbevt_init(&usbevt_config);

	k_work_queue_start(&usbd_work_queue,
   17150:	2400      	movs	r4, #0
	nrfx_power_usbevt_init(&usbevt_config);
   17152:	480a      	ldr	r0, [pc, #40]	; (1717c <usb_init+0x34>)
   17154:	f002 fdc6 	bl	19ce4 <nrfx_power_usbevt_init>
	k_work_queue_start(&usbd_work_queue,
   17158:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1715c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   17160:	4907      	ldr	r1, [pc, #28]	; (17180 <usb_init+0x38>)
   17162:	4808      	ldr	r0, [pc, #32]	; (17184 <usb_init+0x3c>)
   17164:	9400      	str	r4, [sp, #0]
   17166:	f004 fa41 	bl	1b5ec <k_work_queue_start>
			   usbd_work_queue_stack,
			   K_KERNEL_STACK_SIZEOF(usbd_work_queue_stack),
			   CONFIG_SYSTEM_WORKQUEUE_PRIORITY, NULL);

	k_work_init(&ctx->usb_work, usbd_work_handler);
   1716a:	4907      	ldr	r1, [pc, #28]	; (17188 <usb_init+0x40>)
   1716c:	4807      	ldr	r0, [pc, #28]	; (1718c <usb_init+0x44>)
   1716e:	f00e fd59 	bl	25c24 <k_work_init>

	return 0;
}
   17172:	4620      	mov	r0, r4
   17174:	b002      	add	sp, #8
   17176:	bd10      	pop	{r4, pc}
   17178:	00028275 	.word	0x00028275
   1717c:	00027014 	.word	0x00027014
   17180:	200059c0 	.word	0x200059c0
   17184:	20001e28 	.word	0x20001e28
   17188:	000174a5 	.word	0x000174a5
   1718c:	2000392c 	.word	0x2000392c

00017190 <usbd_evt_get>:
   17190:	4802      	ldr	r0, [pc, #8]	; (1719c <usbd_evt_get+0xc>)
   17192:	2200      	movs	r2, #0
   17194:	2300      	movs	r3, #0
   17196:	f004 b883 	b.w	1b2a0 <z_impl_k_queue_get>
   1719a:	bf00      	nop
   1719c:	20000f78 	.word	0x20000f78

000171a0 <usbd_evt_flush>:
{
   171a0:	b510      	push	{r4, lr}
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   171a2:	4c05      	ldr	r4, [pc, #20]	; (171b8 <usbd_evt_flush+0x18>)
		ev = usbd_evt_get();
   171a4:	f7ff fff4 	bl	17190 <usbd_evt_get>
		if (ev) {
   171a8:	b120      	cbz	r0, 171b4 <usbd_evt_flush+0x14>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   171aa:	1d01      	adds	r1, r0, #4
   171ac:	4620      	mov	r0, r4
   171ae:	f00e fb82 	bl	258b6 <k_mem_slab_free>
	} while (ev != NULL);
   171b2:	e7f7      	b.n	171a4 <usbd_evt_flush+0x4>
}
   171b4:	bd10      	pop	{r4, pc}
   171b6:	bf00      	nop
   171b8:	20000e7c 	.word	0x20000e7c

000171bc <usbd_evt_alloc>:
{
   171bc:	b507      	push	{r0, r1, r2, lr}
	if (k_mem_slab_alloc(&fifo_elem_slab,
   171be:	2300      	movs	r3, #0
   171c0:	480e      	ldr	r0, [pc, #56]	; (171fc <usbd_evt_alloc+0x40>)
   171c2:	2200      	movs	r2, #0
   171c4:	a901      	add	r1, sp, #4
   171c6:	f003 fead 	bl	1af24 <k_mem_slab_alloc>
   171ca:	b190      	cbz	r0, 171f2 <usbd_evt_alloc+0x36>
		usbd_evt_flush();
   171cc:	f7ff ffe8 	bl	171a0 <usbd_evt_flush>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
   171d0:	480a      	ldr	r0, [pc, #40]	; (171fc <usbd_evt_alloc+0x40>)
   171d2:	2200      	movs	r2, #0
   171d4:	2300      	movs	r3, #0
   171d6:	a901      	add	r1, sp, #4
   171d8:	f003 fea4 	bl	1af24 <k_mem_slab_alloc>
   171dc:	b938      	cbnz	r0, 171ee <usbd_evt_alloc+0x32>
		ev = (struct usbd_event *)block.data;
   171de:	9801      	ldr	r0, [sp, #4]
		ev->evt_type = USBD_EVT_REINIT;
   171e0:	2304      	movs	r3, #4
		ev->block = block;
   171e2:	6040      	str	r0, [r0, #4]
		ev->evt_type = USBD_EVT_REINIT;
   171e4:	7403      	strb	r3, [r0, #16]
		usbd_evt_put(ev);
   171e6:	f7ff ffa1 	bl	1712c <usbd_evt_put>
		usbd_work_schedule();
   171ea:	f7ff ffa5 	bl	17138 <usbd_work_schedule>
		return NULL;
   171ee:	2000      	movs	r0, #0
   171f0:	e001      	b.n	171f6 <usbd_evt_alloc+0x3a>
	ev = (struct usbd_event *)block.data;
   171f2:	9801      	ldr	r0, [sp, #4]
	ev->block = block;
   171f4:	6040      	str	r0, [r0, #4]
}
   171f6:	b003      	add	sp, #12
   171f8:	f85d fb04 	ldr.w	pc, [sp], #4
   171fc:	20000e7c 	.word	0x20000e7c

00017200 <usbd_event_transfer_data>:
		endpoint_ctx(p_event->data.eptransfer.ep);
   17200:	7881      	ldrb	r1, [r0, #2]
{
   17202:	b570      	push	{r4, r5, r6, lr}
   17204:	4606      	mov	r6, r0
		endpoint_ctx(p_event->data.eptransfer.ep);
   17206:	4608      	mov	r0, r1
   17208:	f7ff ff68 	bl	170dc <endpoint_ctx>
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   1720c:	060b      	lsls	r3, r1, #24
		switch (p_event->data.eptransfer.status) {
   1720e:	78f5      	ldrb	r5, [r6, #3]
		endpoint_ctx(p_event->data.eptransfer.ep);
   17210:	4604      	mov	r4, r0
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   17212:	d512      	bpl.n	1723a <usbd_event_transfer_data+0x3a>
		switch (p_event->data.eptransfer.status) {
   17214:	2d00      	cmp	r5, #0
   17216:	d143      	bne.n	172a0 <usbd_event_transfer_data+0xa0>
			struct usbd_event *ev = usbd_evt_alloc();
   17218:	f7ff ffd0 	bl	171bc <usbd_evt_alloc>
			if (!ev) {
   1721c:	4603      	mov	r3, r0
   1721e:	2800      	cmp	r0, #0
   17220:	d03e      	beq.n	172a0 <usbd_event_transfer_data+0xa0>
			ev->evt_type = USBD_EVT_EP;
   17222:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
   17224:	77a5      	strb	r5, [r4, #30]
			ev->evt_type = USBD_EVT_EP;
   17226:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
   17228:	2203      	movs	r2, #3
   1722a:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   1722c:	609c      	str	r4, [r3, #8]
			usbd_evt_put(ev);
   1722e:	f7ff ff7d 	bl	1712c <usbd_evt_put>
}
   17232:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			usbd_work_schedule();
   17236:	f7ff bf7f 	b.w	17138 <usbd_work_schedule>
		switch (p_event->data.eptransfer.status) {
   1723a:	b14d      	cbz	r5, 17250 <usbd_event_transfer_data+0x50>
   1723c:	2d01      	cmp	r5, #1
   1723e:	d12f      	bne.n	172a0 <usbd_event_transfer_data+0xa0>
			struct usbd_event *ev = usbd_evt_alloc();
   17240:	f7ff ffbc 	bl	171bc <usbd_evt_alloc>
			if (!ev) {
   17244:	4603      	mov	r3, r0
   17246:	b358      	cbz	r0, 172a0 <usbd_event_transfer_data+0xa0>
			ep_ctx->read_pending = true;
   17248:	7765      	strb	r5, [r4, #29]
			ev->evt_type = USBD_EVT_EP;
   1724a:	7405      	strb	r5, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   1724c:	7305      	strb	r5, [r0, #12]
   1724e:	e7ed      	b.n	1722c <usbd_event_transfer_data+0x2c>
			struct usbd_event *ev = usbd_evt_alloc();
   17250:	f7ff ffb4 	bl	171bc <usbd_evt_alloc>
			if (!ev) {
   17254:	b320      	cbz	r0, 172a0 <usbd_event_transfer_data+0xa0>
				p_event->data.eptransfer.ep);
   17256:	78b2      	ldrb	r2, [r6, #2]

NRF_STATIC_INLINE uint32_t nrf_usbd_ep_amount_get(NRF_USBD_Type const * p_reg, uint8_t ep)
{
    uint32_t ret;

    if (NRF_USBD_EPIN_CHECK(ep))
   17258:	4b12      	ldr	r3, [pc, #72]	; (172a4 <usbd_event_transfer_data+0xa4>)
   1725a:	f012 0f80 	tst.w	r2, #128	; 0x80
   1725e:	f002 0108 	and.w	r1, r2, #8
   17262:	d011      	beq.n	17288 <usbd_event_transfer_data+0x88>
    {
        if (NRF_USBD_EPISO_CHECK(ep))
   17264:	b141      	cbz	r1, 17278 <usbd_event_transfer_data+0x78>
        {
            ret = p_reg->ISOIN.AMOUNT;
   17266:	f8d3 36a8 	ldr.w	r3, [r3, #1704]	; 0x6a8
			ep_ctx->buf.len = nrf_usbd_ep_amount_get(NRF_USBD,
   1726a:	60e3      	str	r3, [r4, #12]
			ev->evt_type = USBD_EVT_EP;
   1726c:	2301      	movs	r3, #1
   1726e:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
   17270:	2302      	movs	r3, #2
   17272:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   17274:	6084      	str	r4, [r0, #8]
   17276:	e7da      	b.n	1722e <usbd_event_transfer_data+0x2e>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPIN[epnr].AMOUNT;
   17278:	f002 020f 	and.w	r2, r2, #15
   1727c:	2114      	movs	r1, #20
   1727e:	fb01 3302 	mla	r3, r1, r2, r3
   17282:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
   17286:	e7f0      	b.n	1726a <usbd_event_transfer_data+0x6a>
        }
    }
    else
    {
        if (NRF_USBD_EPISO_CHECK(ep))
   17288:	b111      	cbz	r1, 17290 <usbd_event_transfer_data+0x90>
        {
            ret = p_reg->ISOOUT.AMOUNT;
   1728a:	f8d3 37a8 	ldr.w	r3, [r3, #1960]	; 0x7a8
   1728e:	e7ec      	b.n	1726a <usbd_event_transfer_data+0x6a>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPOUT[epnr].AMOUNT;
   17290:	f002 020f 	and.w	r2, r2, #15
   17294:	2114      	movs	r1, #20
   17296:	fb01 3302 	mla	r3, r1, r2, r3
   1729a:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
   1729e:	e7e4      	b.n	1726a <usbd_event_transfer_data+0x6a>
}
   172a0:	bd70      	pop	{r4, r5, r6, pc}
   172a2:	bf00      	nop
   172a4:	40027000 	.word	0x40027000

000172a8 <usb_dc_power_event_handler>:
	switch (event) {
   172a8:	2802      	cmp	r0, #2
{
   172aa:	b510      	push	{r4, lr}
   172ac:	d811      	bhi.n	172d2 <usb_dc_power_event_handler+0x2a>
   172ae:	4b09      	ldr	r3, [pc, #36]	; (172d4 <usb_dc_power_event_handler+0x2c>)
   172b0:	5c1c      	ldrb	r4, [r3, r0]
	struct usbd_event *ev = usbd_evt_alloc();
   172b2:	f7ff ff83 	bl	171bc <usbd_evt_alloc>
	if (!ev) {
   172b6:	b160      	cbz	r0, 172d2 <usb_dc_power_event_handler+0x2a>
	ev->evt_type = USBD_EVT_POWER;
   172b8:	2200      	movs	r2, #0
   172ba:	7402      	strb	r2, [r0, #16]
	ev->evt.pwr_evt.state = state;
   172bc:	7204      	strb	r4, [r0, #8]
	usbd_evt_put(ev);
   172be:	f7ff ff35 	bl	1712c <usbd_evt_put>
	if (usbd_ctx.attached) {
   172c2:	4b05      	ldr	r3, [pc, #20]	; (172d8 <usb_dc_power_event_handler+0x30>)
   172c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   172c8:	b11b      	cbz	r3, 172d2 <usb_dc_power_event_handler+0x2a>
}
   172ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usbd_work_schedule();
   172ce:	f7ff bf33 	b.w	17138 <usbd_work_schedule>
}
   172d2:	bd10      	pop	{r4, pc}
   172d4:	00028272 	.word	0x00028272
   172d8:	20003904 	.word	0x20003904

000172dc <hfxo_stop.constprop.0.isra.0>:
static int hfxo_stop(struct nrf_usbd_ctx *ctx)
   172dc:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   172de:	490f      	ldr	r1, [pc, #60]	; (1731c <hfxo_stop.constprop.0.isra.0+0x40>)
   172e0:	f3bf 8f5b 	dmb	ish
   172e4:	f101 0320 	add.w	r3, r1, #32
   172e8:	2200      	movs	r2, #0
   172ea:	e853 0f00 	ldrex	r0, [r3]
   172ee:	2801      	cmp	r0, #1
   172f0:	d103      	bne.n	172fa <hfxo_stop.constprop.0.isra.0+0x1e>
   172f2:	e843 2400 	strex	r4, r2, [r3]
   172f6:	2c00      	cmp	r4, #0
   172f8:	d1f7      	bne.n	172ea <hfxo_stop.constprop.0.isra.0+0xe>
   172fa:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 1, 0)) {
   172fe:	d10b      	bne.n	17318 <hfxo_stop.constprop.0.isra.0+0x3c>
		return onoff_cancel_or_release(ctx->hfxo_mgr, &ctx->hfxo_cli);
   17300:	69cc      	ldr	r4, [r1, #28]
 * @retval negative other errors produced by onoff_release().
 */
static inline int onoff_cancel_or_release(struct onoff_manager *mgr,
					  struct onoff_client *cli)
{
	int rv = onoff_cancel(mgr, cli);
   17302:	310c      	adds	r1, #12
   17304:	4620      	mov	r0, r4
   17306:	f005 f8d6 	bl	1c4b6 <onoff_cancel>

	if (rv == -EALREADY) {
   1730a:	3078      	adds	r0, #120	; 0x78
   1730c:	d104      	bne.n	17318 <hfxo_stop.constprop.0.isra.0+0x3c>
		rv = onoff_release(mgr);
   1730e:	4620      	mov	r0, r4
}
   17310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   17314:	f005 b8aa 	b.w	1c46c <onoff_release>
   17318:	bd10      	pop	{r4, pc}
   1731a:	bf00      	nop
   1731c:	20003904 	.word	0x20003904

00017320 <usbd_event_handler>:
{
   17320:	b5f0      	push	{r4, r5, r6, r7, lr}
   17322:	4606      	mov	r6, r0
   17324:	b089      	sub	sp, #36	; 0x24
	struct usbd_event evt = {0};
   17326:	2214      	movs	r2, #20
   17328:	2100      	movs	r1, #0
   1732a:	a803      	add	r0, sp, #12
   1732c:	f006 fe8c 	bl	1e048 <memset>
	switch (p_event->type) {
   17330:	7833      	ldrb	r3, [r6, #0]
   17332:	3b01      	subs	r3, #1
   17334:	2b05      	cmp	r3, #5
   17336:	d821      	bhi.n	1737c <usbd_event_handler+0x5c>
   17338:	e8df f003 	tbb	[pc, r3]
   1733c:	1414037a 	.word	0x1414037a
   17340:	166a      	.short	0x166a
		evt.evt.pwr_evt.state = USBD_SUSPENDED;
   17342:	2303      	movs	r3, #3
		evt.evt.pwr_evt.state = USBD_RESUMED;
   17344:	f88d 3014 	strb.w	r3, [sp, #20]
		evt.evt_type = USBD_EVT_POWER;
   17348:	2400      	movs	r4, #0
		ev = usbd_evt_alloc();
   1734a:	f7ff ff37 	bl	171bc <usbd_evt_alloc>
		if (!ev) {
   1734e:	4603      	mov	r3, r0
   17350:	b1a0      	cbz	r0, 1737c <usbd_event_handler+0x5c>
		ev->evt_type = evt.evt_type;
   17352:	7404      	strb	r4, [r0, #16]
		ev->evt = evt.evt;
   17354:	f100 0208 	add.w	r2, r0, #8
   17358:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
   1735c:	e882 0003 	stmia.w	r2, {r0, r1}
		usbd_evt_put(ev);
   17360:	4618      	mov	r0, r3
   17362:	e01d      	b.n	173a0 <usbd_event_handler+0x80>
		evt.evt.pwr_evt.state = USBD_RESUMED;
   17364:	2304      	movs	r3, #4
   17366:	e7ed      	b.n	17344 <usbd_event_handler+0x24>
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
   17368:	78b1      	ldrb	r1, [r6, #2]
   1736a:	4608      	mov	r0, r1
   1736c:	f7ff feb6 	bl	170dc <endpoint_ctx>
		switch (ep_ctx->cfg.type) {
   17370:	7a83      	ldrb	r3, [r0, #10]
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
   17372:	4604      	mov	r4, r0
		switch (ep_ctx->cfg.type) {
   17374:	b123      	cbz	r3, 17380 <usbd_event_handler+0x60>
   17376:	3b01      	subs	r3, #1
   17378:	2b02      	cmp	r3, #2
   1737a:	d943      	bls.n	17404 <usbd_event_handler+0xe4>
}
   1737c:	b009      	add	sp, #36	; 0x24
   1737e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   17380:	060b      	lsls	r3, r1, #24
		switch (p_event->data.eptransfer.status) {
   17382:	78f5      	ldrb	r5, [r6, #3]
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   17384:	d513      	bpl.n	173ae <usbd_event_handler+0x8e>
		switch (p_event->data.eptransfer.status) {
   17386:	2d00      	cmp	r5, #0
   17388:	d1f8      	bne.n	1737c <usbd_event_handler+0x5c>
			struct usbd_event *ev = usbd_evt_alloc();
   1738a:	f7ff ff17 	bl	171bc <usbd_evt_alloc>
			if (!ev) {
   1738e:	4603      	mov	r3, r0
   17390:	2800      	cmp	r0, #0
   17392:	d0f3      	beq.n	1737c <usbd_event_handler+0x5c>
			ev->evt_type = USBD_EVT_EP;
   17394:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
   17396:	77a5      	strb	r5, [r4, #30]
			ev->evt_type = USBD_EVT_EP;
   17398:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
   1739a:	2203      	movs	r2, #3
   1739c:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   1739e:	609c      	str	r4, [r3, #8]
		usbd_evt_put(ev);
   173a0:	f7ff fec4 	bl	1712c <usbd_evt_put>
}
   173a4:	b009      	add	sp, #36	; 0x24
   173a6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		usbd_work_schedule();
   173aa:	f7ff bec5 	b.w	17138 <usbd_work_schedule>
		switch (p_event->data.eptransfer.status) {
   173ae:	b155      	cbz	r5, 173c6 <usbd_event_handler+0xa6>
   173b0:	2d01      	cmp	r5, #1
   173b2:	d1e3      	bne.n	1737c <usbd_event_handler+0x5c>
			struct usbd_event *ev = usbd_evt_alloc();
   173b4:	f7ff ff02 	bl	171bc <usbd_evt_alloc>
			if (!ev) {
   173b8:	4603      	mov	r3, r0
   173ba:	2800      	cmp	r0, #0
   173bc:	d0de      	beq.n	1737c <usbd_event_handler+0x5c>
			ep_ctx->read_pending = true;
   173be:	7765      	strb	r5, [r4, #29]
			ev->evt_type = USBD_EVT_EP;
   173c0:	7405      	strb	r5, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   173c2:	7305      	strb	r5, [r0, #12]
   173c4:	e7eb      	b.n	1739e <usbd_event_handler+0x7e>
			struct usbd_event *ev = usbd_evt_alloc();
   173c6:	f7ff fef9 	bl	171bc <usbd_evt_alloc>
			if (!ev) {
   173ca:	4607      	mov	r7, r0
   173cc:	2800      	cmp	r0, #0
   173ce:	d0d5      	beq.n	1737c <usbd_event_handler+0x5c>
			ev->evt_type = USBD_EVT_EP;
   173d0:	2301      	movs	r3, #1
   173d2:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
   173d4:	2302      	movs	r3, #2
   173d6:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   173d8:	6084      	str	r4, [r0, #8]
			err_code = nrfx_usbd_ep_status_get(
   173da:	f104 010c 	add.w	r1, r4, #12
   173de:	78b0      	ldrb	r0, [r6, #2]
   173e0:	f00e f9a3 	bl	2572a <nrfx_usbd_ep_status_get>
			if (ctx->ctrl_read_len > ep_ctx->buf.len) {
   173e4:	4a13      	ldr	r2, [pc, #76]	; (17434 <usbd_event_handler+0x114>)
   173e6:	68e1      	ldr	r1, [r4, #12]
   173e8:	f8b2 328c 	ldrh.w	r3, [r2, #652]	; 0x28c
   173ec:	428b      	cmp	r3, r1
   173ee:	d906      	bls.n	173fe <usbd_event_handler+0xde>
				ctx->ctrl_read_len -= ep_ctx->buf.len;
   173f0:	1a5b      	subs	r3, r3, r1
   173f2:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
				nrfx_usbd_setup_data_clear();
   173f6:	f003 f9d5 	bl	1a7a4 <nrfx_usbd_setup_data_clear>
			usbd_evt_put(ev);
   173fa:	4638      	mov	r0, r7
   173fc:	e7d0      	b.n	173a0 <usbd_event_handler+0x80>
				ctx->ctrl_read_len = 0U;
   173fe:	f8a2 528c 	strh.w	r5, [r2, #652]	; 0x28c
   17402:	e7fa      	b.n	173fa <usbd_event_handler+0xda>
			usbd_event_transfer_data(p_event);
   17404:	4630      	mov	r0, r6
}
   17406:	b009      	add	sp, #36	; 0x24
   17408:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			usbd_event_transfer_data(p_event);
   1740c:	f7ff bef8 	b.w	17200 <usbd_event_transfer_data>
		nrfx_usbd_setup_get(&drv_setup);
   17410:	a801      	add	r0, sp, #4
   17412:	f003 f9a1 	bl	1a758 <nrfx_usbd_setup_get>
		if ((drv_setup.bRequest != USB_SREQ_SET_ADDRESS)
   17416:	f89d 3005 	ldrb.w	r3, [sp, #5]
   1741a:	2b05      	cmp	r3, #5
   1741c:	d104      	bne.n	17428 <usbd_event_handler+0x108>
		    || (USB_REQTYPE_GET_TYPE(drv_setup.bmRequestType)
   1741e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   17422:	f013 0f60 	tst.w	r3, #96	; 0x60
   17426:	d0a9      	beq.n	1737c <usbd_event_handler+0x5c>
			evt.evt.ep_evt.ep = ep_ctx;
   17428:	4b03      	ldr	r3, [pc, #12]	; (17438 <usbd_event_handler+0x118>)
   1742a:	9305      	str	r3, [sp, #20]
			evt.evt_type = USBD_EVT_EP;
   1742c:	2401      	movs	r4, #1
   1742e:	e78c      	b.n	1734a <usbd_event_handler+0x2a>
	switch (p_event->type) {
   17430:	2402      	movs	r4, #2
   17432:	e78a      	b.n	1734a <usbd_event_handler+0x2a>
   17434:	20003904 	.word	0x20003904
   17438:	20003a70 	.word	0x20003a70

0001743c <eps_ctx_init>:
{
   1743c:	b538      	push	{r3, r4, r5, lr}
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
   1743e:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
   17440:	f064 007f 	orn	r0, r4, #127	; 0x7f
   17444:	b2c0      	uxtb	r0, r0
   17446:	f7ff fe49 	bl	170dc <endpoint_ctx>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
   1744a:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
   1744c:	f00d fd25 	bl	24e9a <ep_ctx_reset>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
   17450:	2c08      	cmp	r4, #8
   17452:	d1f5      	bne.n	17440 <eps_ctx_init+0x4>
   17454:	4d0f      	ldr	r5, [pc, #60]	; (17494 <eps_ctx_init+0x58>)
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
   17456:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
   17458:	b2e0      	uxtb	r0, r4
   1745a:	f7ff fe3f 	bl	170dc <endpoint_ctx>
		if (!ep_ctx->buf.block.data) {
   1745e:	6903      	ldr	r3, [r0, #16]
   17460:	b903      	cbnz	r3, 17464 <eps_ctx_init+0x28>
			ep_ctx->buf.block.data = ep_out_bufs[i];
   17462:	6105      	str	r5, [r0, #16]
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
   17464:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
   17466:	f00d fd18 	bl	24e9a <ep_ctx_reset>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
   1746a:	2c08      	cmp	r4, #8
   1746c:	f105 0540 	add.w	r5, r5, #64	; 0x40
   17470:	d1f2      	bne.n	17458 <eps_ctx_init+0x1c>
		ep_ctx_reset(ep_ctx);
   17472:	4c09      	ldr	r4, [pc, #36]	; (17498 <eps_ctx_init+0x5c>)
   17474:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
   17478:	f00d fd0f 	bl	24e9a <ep_ctx_reset>
		if (!ep_ctx->buf.block.data) {
   1747c:	f8d4 327c 	ldr.w	r3, [r4, #636]	; 0x27c
   17480:	b913      	cbnz	r3, 17488 <eps_ctx_init+0x4c>
			ep_ctx->buf.block.data = ep_isoout_bufs[0];
   17482:	4b06      	ldr	r3, [pc, #24]	; (1749c <eps_ctx_init+0x60>)
   17484:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
		ep_ctx_reset(ep_ctx);
   17488:	4805      	ldr	r0, [pc, #20]	; (174a0 <eps_ctx_init+0x64>)
   1748a:	f00d fd06 	bl	24e9a <ep_ctx_reset>
}
   1748e:	2000      	movs	r0, #0
   17490:	bd38      	pop	{r3, r4, r5, pc}
   17492:	bf00      	nop
   17494:	20003704 	.word	0x20003704
   17498:	20003904 	.word	0x20003904
   1749c:	20003304 	.word	0x20003304
   174a0:	20003b70 	.word	0x20003b70

000174a4 <usbd_work_handler>:
{
   174a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return get_usbd_ctx()->ready;
   174a8:	4ca8      	ldr	r4, [pc, #672]	; (1774c <usbd_work_handler+0x2a8>)
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   174aa:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 17750 <usbd_work_handler+0x2ac>
{
   174ae:	b085      	sub	sp, #20
   174b0:	4607      	mov	r7, r0
	while ((ev = usbd_evt_get()) != NULL) {
   174b2:	f7ff fe6d 	bl	17190 <usbd_evt_get>
   174b6:	b910      	cbnz	r0, 174be <usbd_work_handler+0x1a>
}
   174b8:	b005      	add	sp, #20
   174ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return get_usbd_ctx()->ready;
   174be:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
   174c2:	7c02      	ldrb	r2, [r0, #16]
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   174c4:	f100 0904 	add.w	r9, r0, #4
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
   174c8:	b93b      	cbnz	r3, 174da <usbd_work_handler+0x36>
   174ca:	2a00      	cmp	r2, #0
   174cc:	f000 8086 	beq.w	175dc <usbd_work_handler+0x138>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   174d0:	4649      	mov	r1, r9
   174d2:	4640      	mov	r0, r8
   174d4:	f00e f9ef 	bl	258b6 <k_mem_slab_free>
}
   174d8:	e7eb      	b.n	174b2 <usbd_work_handler+0xe>
		switch (ev->evt_type) {
   174da:	2a04      	cmp	r2, #4
   174dc:	d8f8      	bhi.n	174d0 <usbd_work_handler+0x2c>
   174de:	e8df f012 	tbh	[pc, r2, lsl #1]
   174e2:	007d      	.short	0x007d
   174e4:	01030005 	.word	0x01030005
   174e8:	01430119 	.word	0x01430119
	switch (ep_evt->evt_type) {
   174ec:	7b03      	ldrb	r3, [r0, #12]
	struct nrf_usbd_ep_ctx *ep_ctx = ep_evt->ep;
   174ee:	6885      	ldr	r5, [r0, #8]
	switch (ep_evt->evt_type) {
   174f0:	2b03      	cmp	r3, #3
   174f2:	d8ed      	bhi.n	174d0 <usbd_work_handler+0x2c>
   174f4:	e8df f003 	tbb	[pc, r3]
   174f8:	5f5a3d02 	.word	0x5f5a3d02
	usbd_setup = (struct usb_setup_packet *)ep_ctx->buf.data;
   174fc:	696e      	ldr	r6, [r5, #20]
	memset(usbd_setup, 0, sizeof(struct usb_setup_packet));
   174fe:	2208      	movs	r2, #8
   17500:	2100      	movs	r1, #0
   17502:	4630      	mov	r0, r6
   17504:	f006 fda0 	bl	1e048 <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
   17508:	4b92      	ldr	r3, [pc, #584]	; (17754 <usbd_work_handler+0x2b0>)
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
   1750a:	4893      	ldr	r0, [pc, #588]	; (17758 <usbd_work_handler+0x2b4>)
   1750c:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
   17510:	7032      	strb	r2, [r6, #0]
    return (uint8_t)(p_reg->BREQUEST);
   17512:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
   17516:	7072      	strb	r2, [r6, #1]
    const uint16_t val = p_reg->WVALUEL;
   17518:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
   1751c:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
   17520:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wValue = nrf_usbd_setup_wvalue_get(NRF_USBD);
   17524:	8072      	strh	r2, [r6, #2]
    const uint16_t val = p_reg->WINDEXL;
   17526:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
   1752a:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
   1752e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wIndex = nrf_usbd_setup_windex_get(NRF_USBD);
   17532:	80b2      	strh	r2, [r6, #4]
    const uint16_t val = p_reg->WLENGTHL;
   17534:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
   17538:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
   1753c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
   17540:	2208      	movs	r2, #8
	usbd_setup->wLength = nrf_usbd_setup_wlength_get(NRF_USBD);
   17542:	80f3      	strh	r3, [r6, #6]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
   17544:	4631      	mov	r1, r6
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
   17546:	60ea      	str	r2, [r5, #12]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
   17548:	f006 fd73 	bl	1e032 <memcpy>
	ep_ctx->cfg.cb(ep_ctx->cfg.addr, USB_DC_EP_SETUP);
   1754c:	682b      	ldr	r3, [r5, #0]
   1754e:	7a68      	ldrb	r0, [r5, #9]
   17550:	2100      	movs	r1, #0
   17552:	4798      	blx	r3
	if (usb_reqtype_is_to_device(usbd_setup) && usbd_setup->wLength) {
   17554:	f996 3000 	ldrsb.w	r3, [r6]
   17558:	2b00      	cmp	r3, #0
   1755a:	db06      	blt.n	1756a <usbd_work_handler+0xc6>
   1755c:	88f3      	ldrh	r3, [r6, #6]
   1755e:	b123      	cbz	r3, 1756a <usbd_work_handler+0xc6>
		ctx->ctrl_read_len = usbd_setup->wLength;
   17560:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
		nrfx_usbd_setup_data_clear();
   17564:	f003 f91e 	bl	1a7a4 <nrfx_usbd_setup_data_clear>
   17568:	e7b2      	b.n	174d0 <usbd_work_handler+0x2c>
		ctx->ctrl_read_len = 0U;
   1756a:	2300      	movs	r3, #0
   1756c:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
   17570:	e7ae      	b.n	174d0 <usbd_work_handler+0x2c>
	if (!ep_ctx->read_pending) {
   17572:	7f6b      	ldrb	r3, [r5, #29]
   17574:	2b00      	cmp	r3, #0
   17576:	d0ab      	beq.n	174d0 <usbd_work_handler+0x2c>
	if (!ep_ctx->read_complete) {
   17578:	7f2b      	ldrb	r3, [r5, #28]
   1757a:	2b00      	cmp	r3, #0
   1757c:	d0a8      	beq.n	174d0 <usbd_work_handler+0x2c>
	ep_ctx->read_pending = false;
   1757e:	2600      	movs	r6, #0
   17580:	776e      	strb	r6, [r5, #29]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   17582:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   17586:	4875      	ldr	r0, [pc, #468]	; (1775c <usbd_work_handler+0x2b8>)
	ep_ctx->read_complete = false;
   17588:	772e      	strb	r6, [r5, #28]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   1758a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1758e:	f00d fc97 	bl	24ec0 <k_mutex_lock.constprop.0.isra.0>
	NRFX_USBD_TRANSFER_OUT(transfer, ep_ctx->buf.data,
   17592:	696b      	ldr	r3, [r5, #20]
   17594:	9301      	str	r3, [sp, #4]
   17596:	686b      	ldr	r3, [r5, #4]
   17598:	e9cd 3602 	strd	r3, r6, [sp, #8]
	nrfx_err_t err = nrfx_usbd_ep_transfer(
   1759c:	a901      	add	r1, sp, #4
   1759e:	7a68      	ldrb	r0, [r5, #9]
   175a0:	f002 ff0a 	bl	1a3b8 <nrfx_usbd_ep_transfer>
	k_mutex_unlock(&ctx->drv_lock);
   175a4:	486d      	ldr	r0, [pc, #436]	; (1775c <usbd_work_handler+0x2b8>)
   175a6:	f00d fc8d 	bl	24ec4 <k_mutex_unlock.isra.0>
   175aa:	e791      	b.n	174d0 <usbd_work_handler+0x2c>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
   175ac:	682b      	ldr	r3, [r5, #0]
   175ae:	2101      	movs	r1, #1
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
   175b0:	7a68      	ldrb	r0, [r5, #9]
   175b2:	4798      	blx	r3
		break;
   175b4:	e78c      	b.n	174d0 <usbd_work_handler+0x2c>
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
   175b6:	7aab      	ldrb	r3, [r5, #10]
   175b8:	b96b      	cbnz	r3, 175d6 <usbd_work_handler+0x132>
   175ba:	7feb      	ldrb	r3, [r5, #31]
   175bc:	b95b      	cbnz	r3, 175d6 <usbd_work_handler+0x132>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   175be:	4867      	ldr	r0, [pc, #412]	; (1775c <usbd_work_handler+0x2b8>)
   175c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   175c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   175c8:	f00d fc7a 	bl	24ec0 <k_mutex_lock.constprop.0.isra.0>
			nrfx_usbd_setup_clear();
   175cc:	f003 f91a 	bl	1a804 <nrfx_usbd_setup_clear>
			k_mutex_unlock(&ctx->drv_lock);
   175d0:	4862      	ldr	r0, [pc, #392]	; (1775c <usbd_work_handler+0x2b8>)
   175d2:	f00d fc77 	bl	24ec4 <k_mutex_unlock.isra.0>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
   175d6:	682b      	ldr	r3, [r5, #0]
   175d8:	2102      	movs	r1, #2
   175da:	e7e9      	b.n	175b0 <usbd_work_handler+0x10c>
	switch (pwr_evt->state) {
   175dc:	7a02      	ldrb	r2, [r0, #8]
   175de:	2a04      	cmp	r2, #4
   175e0:	f63f af76 	bhi.w	174d0 <usbd_work_handler+0x2c>
   175e4:	e8df f002 	tbb	[pc, r2]
   175e8:	6925035b 	.word	0x6925035b
   175ec:	75          	.byte	0x75
   175ed:	00          	.byte	0x00
		if (!nrfx_usbd_is_enabled()) {
   175ee:	f002 fe93 	bl	1a318 <nrfx_usbd_is_enabled>
   175f2:	4605      	mov	r5, r0
   175f4:	2800      	cmp	r0, #0
   175f6:	f47f af6b 	bne.w	174d0 <usbd_work_handler+0x2c>
			nrfx_usbd_enable();
   175fa:	f002 fdd1 	bl	1a1a0 <nrfx_usbd_enable>
   175fe:	f3bf 8f5b 	dmb	ish
   17602:	4957      	ldr	r1, [pc, #348]	; (17760 <usbd_work_handler+0x2bc>)
   17604:	2301      	movs	r3, #1
   17606:	e851 2f00 	ldrex	r2, [r1]
   1760a:	2a00      	cmp	r2, #0
   1760c:	d103      	bne.n	17616 <usbd_work_handler+0x172>
   1760e:	e841 3000 	strex	r0, r3, [r1]
   17612:	2800      	cmp	r0, #0
   17614:	d1f7      	bne.n	17606 <usbd_work_handler+0x162>
   17616:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 0, 1)) {
   1761a:	f47f af59 	bne.w	174d0 <usbd_work_handler+0x2c>
   1761e:	f841 5c10 	str.w	r5, [r1, #-16]
   17622:	f841 5c08 	str.w	r5, [r1, #-8]
		return onoff_request(ctx->hfxo_mgr, &ctx->hfxo_cli);
   17626:	69e0      	ldr	r0, [r4, #28]
   17628:	6163      	str	r3, [r4, #20]
   1762a:	3914      	subs	r1, #20
   1762c:	f004 fed5 	bl	1c3da <onoff_request>
   17630:	e74e      	b.n	174d0 <usbd_work_handler+0x2c>
	switch (pwr_evt->state) {
   17632:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
   17634:	f065 007f 	orn	r0, r5, #127	; 0x7f
   17638:	b2c0      	uxtb	r0, r0
   1763a:	f7ff fd4f 	bl	170dc <endpoint_ctx>
		if (ep_ctx->cfg.en) {
   1763e:	7a03      	ldrb	r3, [r0, #8]
   17640:	b113      	cbz	r3, 17648 <usbd_work_handler+0x1a4>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   17642:	7a40      	ldrb	r0, [r0, #9]
   17644:	f003 faca 	bl	1abdc <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
   17648:	3501      	adds	r5, #1
   1764a:	2d08      	cmp	r5, #8
   1764c:	d1f2      	bne.n	17634 <usbd_work_handler+0x190>
		if (ep_ctx->cfg.en) {
   1764e:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
   17652:	b11b      	cbz	r3, 1765c <usbd_work_handler+0x1b8>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   17654:	f894 0155 	ldrb.w	r0, [r4, #341]	; 0x155
   17658:	f003 fac0 	bl	1abdc <nrfx_usbd_ep_enable>
	switch (pwr_evt->state) {
   1765c:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
   1765e:	b2e8      	uxtb	r0, r5
   17660:	f7ff fd3c 	bl	170dc <endpoint_ctx>
		if (ep_ctx->cfg.en) {
   17664:	7a03      	ldrb	r3, [r0, #8]
   17666:	b113      	cbz	r3, 1766e <usbd_work_handler+0x1ca>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   17668:	7a40      	ldrb	r0, [r0, #9]
   1766a:	f003 fab7 	bl	1abdc <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPOUT_CNT; i++) {
   1766e:	3501      	adds	r5, #1
   17670:	2d08      	cmp	r5, #8
   17672:	d1f4      	bne.n	1765e <usbd_work_handler+0x1ba>
		if (ep_ctx->cfg.en) {
   17674:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
   17678:	b11b      	cbz	r3, 17682 <usbd_work_handler+0x1de>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   1767a:	f894 0275 	ldrb.w	r0, [r4, #629]	; 0x275
   1767e:	f003 faad 	bl	1abdc <nrfx_usbd_ep_enable>
		nrfx_usbd_start(true);
   17682:	2001      	movs	r0, #1
   17684:	f002 fe2a 	bl	1a2dc <nrfx_usbd_start>
		ctx->ready = true;
   17688:	2301      	movs	r3, #1
   1768a:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
		if (ctx->status_cb) {
   1768e:	6823      	ldr	r3, [r4, #0]
   17690:	2b00      	cmp	r3, #0
   17692:	f43f af1d 	beq.w	174d0 <usbd_work_handler+0x2c>
			ctx->status_cb(USB_DC_CONNECTED, NULL);
   17696:	2100      	movs	r1, #0
   17698:	2002      	movs	r0, #2
				ctx->status_cb(USB_DC_SOF, NULL);
   1769a:	4798      	blx	r3
   1769c:	e718      	b.n	174d0 <usbd_work_handler+0x2c>
		ctx->ready = false;
   1769e:	2500      	movs	r5, #0
   176a0:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
		nrfx_usbd_disable();
   176a4:	f003 fa26 	bl	1aaf4 <nrfx_usbd_disable>
		err = hfxo_stop(ctx);
   176a8:	f7ff fe18 	bl	172dc <hfxo_stop.constprop.0.isra.0>
		if (ctx->status_cb) {
   176ac:	6823      	ldr	r3, [r4, #0]
   176ae:	2b00      	cmp	r3, #0
   176b0:	f43f af0e 	beq.w	174d0 <usbd_work_handler+0x2c>
			ctx->status_cb(USB_DC_DISCONNECTED, NULL);
   176b4:	4629      	mov	r1, r5
   176b6:	2004      	movs	r0, #4
   176b8:	e7ef      	b.n	1769a <usbd_work_handler+0x1f6>
		if (dev_ready()) {
   176ba:	2b00      	cmp	r3, #0
   176bc:	f43f af08 	beq.w	174d0 <usbd_work_handler+0x2c>
			nrfx_usbd_suspend();
   176c0:	f003 fa30 	bl	1ab24 <nrfx_usbd_suspend>
			if (ctx->status_cb) {
   176c4:	6823      	ldr	r3, [r4, #0]
   176c6:	2b00      	cmp	r3, #0
   176c8:	f43f af02 	beq.w	174d0 <usbd_work_handler+0x2c>
				ctx->status_cb(USB_DC_SUSPEND, NULL);
   176cc:	2100      	movs	r1, #0
   176ce:	2005      	movs	r0, #5
   176d0:	e7e3      	b.n	1769a <usbd_work_handler+0x1f6>
		if (ctx->status_cb && dev_ready()) {
   176d2:	6822      	ldr	r2, [r4, #0]
   176d4:	2a00      	cmp	r2, #0
   176d6:	f43f aefb 	beq.w	174d0 <usbd_work_handler+0x2c>
   176da:	2b00      	cmp	r3, #0
   176dc:	f43f aef8 	beq.w	174d0 <usbd_work_handler+0x2c>
			ctx->status_cb(USB_DC_RESUME, NULL);
   176e0:	2100      	movs	r1, #0
   176e2:	2006      	movs	r0, #6
   176e4:	4790      	blx	r2
   176e6:	e6f3      	b.n	174d0 <usbd_work_handler+0x2c>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   176e8:	f107 0510 	add.w	r5, r7, #16
   176ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   176f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   176f4:	4628      	mov	r0, r5
   176f6:	f00d fbe3 	bl	24ec0 <k_mutex_lock.constprop.0.isra.0>
			eps_ctx_init();
   176fa:	f7ff fe9f 	bl	1743c <eps_ctx_init>
			k_mutex_unlock(&ctx->drv_lock);
   176fe:	4628      	mov	r0, r5
   17700:	f00d fbe0 	bl	24ec4 <k_mutex_unlock.isra.0>
			if (ctx->status_cb) {
   17704:	f857 3c28 	ldr.w	r3, [r7, #-40]
   17708:	2b00      	cmp	r3, #0
   1770a:	f43f aee1 	beq.w	174d0 <usbd_work_handler+0x2c>
				ctx->status_cb(USB_DC_RESET, NULL);
   1770e:	2100      	movs	r1, #0
   17710:	2001      	movs	r0, #1
   17712:	e7c2      	b.n	1769a <usbd_work_handler+0x1f6>
	if (ep_ctx->cfg.en) {
   17714:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
   17718:	b17b      	cbz	r3, 1773a <usbd_work_handler+0x296>
		ep_ctx->read_pending = true;
   1771a:	2501      	movs	r5, #1
   1771c:	f884 5289 	strb.w	r5, [r4, #649]	; 0x289
		ep_ctx->read_complete = true;
   17720:	f884 5288 	strb.w	r5, [r4, #648]	; 0x288
		ev = usbd_evt_alloc();
   17724:	f7ff fd4a 	bl	171bc <usbd_evt_alloc>
		if (!ev) {
   17728:	b138      	cbz	r0, 1773a <usbd_work_handler+0x296>
		ev->evt.ep_evt.ep = ep_ctx;
   1772a:	4a0e      	ldr	r2, [pc, #56]	; (17764 <usbd_work_handler+0x2c0>)
		ev->evt_type = USBD_EVT_EP;
   1772c:	7405      	strb	r5, [r0, #16]
		ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   1772e:	7305      	strb	r5, [r0, #12]
		ev->evt.ep_evt.ep = ep_ctx;
   17730:	6082      	str	r2, [r0, #8]
		usbd_evt_put(ev);
   17732:	f7ff fcfb 	bl	1712c <usbd_evt_put>
		usbd_work_schedule();
   17736:	f7ff fcff 	bl	17138 <usbd_work_schedule>
			if (ctx->status_cb) {
   1773a:	f857 3c28 	ldr.w	r3, [r7, #-40]
   1773e:	2b00      	cmp	r3, #0
   17740:	f43f aec6 	beq.w	174d0 <usbd_work_handler+0x2c>
				ctx->status_cb(USB_DC_SOF, NULL);
   17744:	2100      	movs	r1, #0
   17746:	200a      	movs	r0, #10
   17748:	e7a7      	b.n	1769a <usbd_work_handler+0x1f6>
   1774a:	bf00      	nop
   1774c:	20003904 	.word	0x20003904
   17750:	20000e7c 	.word	0x20000e7c
   17754:	40027000 	.word	0x40027000
   17758:	20003908 	.word	0x20003908
   1775c:	2000393c 	.word	0x2000393c
   17760:	20003924 	.word	0x20003924
   17764:	20003b70 	.word	0x20003b70
	nrfx_power_usbevt_disable();
   17768:	f00d ff4c 	bl	25604 <nrfx_power_usbevt_disable>
	nrfx_usbd_disable();
   1776c:	f003 f9c2 	bl	1aaf4 <nrfx_usbd_disable>
	nrfx_usbd_uninit();
   17770:	f002 fd0c 	bl	1a18c <nrfx_usbd_uninit>
	usbd_evt_flush();
   17774:	f7ff fd14 	bl	171a0 <usbd_evt_flush>
	ret = eps_ctx_init();
   17778:	f7ff fe60 	bl	1743c <eps_ctx_init>
	nrfx_power_usbevt_enable();
   1777c:	f00d ff3b 	bl	255f6 <nrfx_power_usbevt_enable>
	err = nrfx_usbd_init(usbd_event_handler);
   17780:	4801      	ldr	r0, [pc, #4]	; (17788 <usbd_work_handler+0x2e4>)
   17782:	f002 fdd3 	bl	1a32c <nrfx_usbd_init>
}
   17786:	e6a3      	b.n	174d0 <usbd_work_handler+0x2c>
   17788:	00017321 	.word	0x00017321

0001778c <usb_dc_attach>:
{
   1778c:	b538      	push	{r3, r4, r5, lr}
	if (ctx->attached) {
   1778e:	4d1a      	ldr	r5, [pc, #104]	; (177f8 <usb_dc_attach+0x6c>)
   17790:	f895 4024 	ldrb.w	r4, [r5, #36]	; 0x24
   17794:	bb5c      	cbnz	r4, 177ee <usb_dc_attach+0x62>
	return z_impl_k_mutex_init(mutex);
   17796:	f105 0038 	add.w	r0, r5, #56	; 0x38
   1779a:	f00e f8cf 	bl	2593c <z_impl_k_mutex_init>
		z_nrf_clock_control_get_onoff(
   1779e:	4620      	mov	r0, r4
   177a0:	f000 fb40 	bl	17e24 <z_nrf_clock_control_get_onoff>
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   177a4:	4622      	mov	r2, r4
	ctx->hfxo_mgr =
   177a6:	61e8      	str	r0, [r5, #28]
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   177a8:	2101      	movs	r1, #1
   177aa:	2027      	movs	r0, #39	; 0x27
   177ac:	f7ed ff7a 	bl	56a4 <z_arm_irq_priority_set>
	err = nrfx_usbd_init(usbd_event_handler);
   177b0:	4812      	ldr	r0, [pc, #72]	; (177fc <usb_dc_attach+0x70>)
   177b2:	f002 fdbb 	bl	1a32c <nrfx_usbd_init>
	if (err != NRFX_SUCCESS) {
   177b6:	4b12      	ldr	r3, [pc, #72]	; (17800 <usb_dc_attach+0x74>)
   177b8:	4298      	cmp	r0, r3
   177ba:	d11a      	bne.n	177f2 <usb_dc_attach+0x66>
	nrfx_power_usbevt_enable();
   177bc:	f00d ff1b 	bl	255f6 <nrfx_power_usbevt_enable>
	ret = eps_ctx_init();
   177c0:	f7ff fe3c 	bl	1743c <eps_ctx_init>
	if (ret == 0) {
   177c4:	4604      	mov	r4, r0
   177c6:	b910      	cbnz	r0, 177ce <usb_dc_attach+0x42>
		ctx->attached = true;
   177c8:	2301      	movs	r3, #1
   177ca:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   177ce:	4b0d      	ldr	r3, [pc, #52]	; (17804 <usb_dc_attach+0x78>)
	if (!k_fifo_is_empty(&usbd_evt_fifo)) {
   177d0:	681b      	ldr	r3, [r3, #0]
   177d2:	b10b      	cbz	r3, 177d8 <usb_dc_attach+0x4c>
		usbd_work_schedule();
   177d4:	f7ff fcb0 	bl	17138 <usbd_work_schedule>
#endif // NRF_POWER_HAS_MAINREGSTATUS

#if NRF_POWER_HAS_USBREG
NRF_STATIC_INLINE uint32_t nrf_power_usbregstatus_get(NRF_POWER_Type const * p_reg)
{
    return p_reg->USBREGSTATUS;
   177d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   177dc:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
#ifndef NRFX_DECLARE_ONLY
#if NRF_POWER_HAS_USBREG
NRFX_STATIC_INLINE nrfx_power_usb_state_t nrfx_power_usbstatus_get(void)
{
    uint32_t status = nrf_power_usbregstatus_get(NRF_POWER);
    if(0 == (status & NRF_POWER_USBREGSTATUS_VBUSDETECT_MASK))
   177e0:	07db      	lsls	r3, r3, #31
   177e2:	d502      	bpl.n	177ea <usb_dc_attach+0x5e>
		usb_dc_power_event_handler(NRFX_POWER_USB_EVT_DETECTED);
   177e4:	2000      	movs	r0, #0
   177e6:	f7ff fd5f 	bl	172a8 <usb_dc_power_event_handler>
}
   177ea:	4620      	mov	r0, r4
   177ec:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   177ee:	2400      	movs	r4, #0
   177f0:	e7fb      	b.n	177ea <usb_dc_attach+0x5e>
		return -EIO;
   177f2:	f06f 0404 	mvn.w	r4, #4
   177f6:	e7f8      	b.n	177ea <usb_dc_attach+0x5e>
   177f8:	20003904 	.word	0x20003904
   177fc:	00017321 	.word	0x00017321
   17800:	0bad0000 	.word	0x0bad0000
   17804:	20000f78 	.word	0x20000f78

00017808 <usb_dc_set_address>:
	return get_usbd_ctx()->attached;
   17808:	4b07      	ldr	r3, [pc, #28]	; (17828 <usb_dc_set_address+0x20>)
	if (!dev_attached() || !dev_ready()) {
   1780a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   1780e:	b13a      	cbz	r2, 17820 <usb_dc_set_address+0x18>
   17810:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	return 0;
   17814:	2b00      	cmp	r3, #0
   17816:	bf0c      	ite	eq
   17818:	f06f 0012 	mvneq.w	r0, #18
   1781c:	2000      	movne	r0, #0
   1781e:	4770      	bx	lr
		return -ENODEV;
   17820:	f06f 0012 	mvn.w	r0, #18
}
   17824:	4770      	bx	lr
   17826:	bf00      	nop
   17828:	20003904 	.word	0x20003904

0001782c <usb_dc_ep_configure>:
	return get_usbd_ctx()->attached;
   1782c:	4b0f      	ldr	r3, [pc, #60]	; (1786c <usb_dc_ep_configure+0x40>)
	if (!dev_attached()) {
   1782e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
{
   17832:	b510      	push	{r4, lr}
   17834:	4601      	mov	r1, r0
	if (!dev_attached()) {
   17836:	b1b3      	cbz	r3, 17866 <usb_dc_ep_configure+0x3a>
	ep_ctx = endpoint_ctx(ep_cfg->ep_addr);
   17838:	7804      	ldrb	r4, [r0, #0]
   1783a:	4620      	mov	r0, r4
   1783c:	f7ff fc4e 	bl	170dc <endpoint_ctx>
	if (!ep_ctx) {
   17840:	b910      	cbnz	r0, 17848 <usb_dc_ep_configure+0x1c>
		return -EINVAL;
   17842:	f06f 0015 	mvn.w	r0, #21
}
   17846:	bd10      	pop	{r4, pc}
	ep_ctx->cfg.addr = ep_cfg->ep_addr;
   17848:	7244      	strb	r4, [r0, #9]
	ep_ctx->cfg.type = ep_cfg->ep_type;
   1784a:	790b      	ldrb	r3, [r1, #4]
   1784c:	7283      	strb	r3, [r0, #10]
	ep_ctx->cfg.max_sz = ep_cfg->ep_mps;
   1784e:	8849      	ldrh	r1, [r1, #2]
   17850:	6041      	str	r1, [r0, #4]
	if (!NRF_USBD_EPISO_CHECK(ep_cfg->ep_addr)) {
   17852:	0723      	lsls	r3, r4, #28
   17854:	d402      	bmi.n	1785c <usb_dc_ep_configure+0x30>
		if ((ep_cfg->ep_mps & (ep_cfg->ep_mps - 1)) != 0U) {
   17856:	1e4b      	subs	r3, r1, #1
   17858:	420b      	tst	r3, r1
   1785a:	d1f2      	bne.n	17842 <usb_dc_ep_configure+0x16>
	nrfx_usbd_ep_max_packet_size_set(ep_addr_to_nrfx(ep_cfg->ep_addr),
   1785c:	4620      	mov	r0, r4
   1785e:	f00d ff5f 	bl	25720 <nrfx_usbd_ep_max_packet_size_set>
	return 0;
   17862:	2000      	movs	r0, #0
   17864:	e7ef      	b.n	17846 <usb_dc_ep_configure+0x1a>
		return -ENODEV;
   17866:	f06f 0012 	mvn.w	r0, #18
   1786a:	e7ec      	b.n	17846 <usb_dc_ep_configure+0x1a>
   1786c:	20003904 	.word	0x20003904

00017870 <usb_dc_ep_set_stall>:
	return get_usbd_ctx()->attached;
   17870:	4b12      	ldr	r3, [pc, #72]	; (178bc <usb_dc_ep_set_stall+0x4c>)
	if (!dev_attached() || !dev_ready()) {
   17872:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   17876:	b510      	push	{r4, lr}
   17878:	4601      	mov	r1, r0
	if (!dev_attached() || !dev_ready()) {
   1787a:	b1ca      	cbz	r2, 178b0 <usb_dc_ep_set_stall+0x40>
   1787c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   17880:	b1b3      	cbz	r3, 178b0 <usb_dc_ep_set_stall+0x40>
	ep_ctx = endpoint_ctx(ep);
   17882:	f7ff fc2b 	bl	170dc <endpoint_ctx>
	if (!ep_ctx) {
   17886:	4604      	mov	r4, r0
   17888:	b1a8      	cbz	r0, 178b6 <usb_dc_ep_set_stall+0x46>
	switch (ep_ctx->cfg.type) {
   1788a:	7a83      	ldrb	r3, [r0, #10]
   1788c:	2b01      	cmp	r3, #1
   1788e:	d012      	beq.n	178b6 <usb_dc_ep_set_stall+0x46>
   17890:	d907      	bls.n	178a2 <usb_dc_ep_set_stall+0x32>
   17892:	3b02      	subs	r3, #2
   17894:	2b01      	cmp	r3, #1
   17896:	d907      	bls.n	178a8 <usb_dc_ep_set_stall+0x38>
	ep_ctx->buf.curr = ep_ctx->buf.data;
   17898:	6963      	ldr	r3, [r4, #20]
   1789a:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len = 0U;
   1789c:	2000      	movs	r0, #0
   1789e:	60e0      	str	r0, [r4, #12]
}
   178a0:	bd10      	pop	{r4, pc}
		nrfx_usbd_setup_stall();
   178a2:	f002 ffb7 	bl	1a814 <nrfx_usbd_setup_stall>
		break;
   178a6:	e7f7      	b.n	17898 <usb_dc_ep_set_stall+0x28>
		nrfx_usbd_ep_stall(ep_addr_to_nrfx(ep));
   178a8:	4608      	mov	r0, r1
   178aa:	f002 ff27 	bl	1a6fc <nrfx_usbd_ep_stall>
		break;
   178ae:	e7f3      	b.n	17898 <usb_dc_ep_set_stall+0x28>
		return -ENODEV;
   178b0:	f06f 0012 	mvn.w	r0, #18
   178b4:	e7f4      	b.n	178a0 <usb_dc_ep_set_stall+0x30>
	switch (ep_ctx->cfg.type) {
   178b6:	f06f 0015 	mvn.w	r0, #21
   178ba:	e7f1      	b.n	178a0 <usb_dc_ep_set_stall+0x30>
   178bc:	20003904 	.word	0x20003904

000178c0 <usb_dc_ep_clear_stall>:
{
   178c0:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   178c2:	4b0e      	ldr	r3, [pc, #56]	; (178fc <usb_dc_ep_clear_stall+0x3c>)
	if (!dev_attached() || !dev_ready()) {
   178c4:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   178c8:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
   178ca:	b182      	cbz	r2, 178ee <usb_dc_ep_clear_stall+0x2e>
   178cc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   178d0:	b16b      	cbz	r3, 178ee <usb_dc_ep_clear_stall+0x2e>
	ep_ctx = endpoint_ctx(ep);
   178d2:	f7ff fc03 	bl	170dc <endpoint_ctx>
	if (!ep_ctx) {
   178d6:	b168      	cbz	r0, 178f4 <usb_dc_ep_clear_stall+0x34>
	if (NRF_USBD_EPISO_CHECK(ep)) {
   178d8:	f015 0408 	ands.w	r4, r5, #8
   178dc:	d10a      	bne.n	178f4 <usb_dc_ep_clear_stall+0x34>
	nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
   178de:	4628      	mov	r0, r5
   178e0:	f002 ff2e 	bl	1a740 <nrfx_usbd_ep_dtoggle_clear>
	nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
   178e4:	4628      	mov	r0, r5
   178e6:	f003 f9cb 	bl	1ac80 <nrfx_usbd_ep_stall_clear>
	return 0;
   178ea:	4620      	mov	r0, r4
}
   178ec:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   178ee:	f06f 0012 	mvn.w	r0, #18
   178f2:	e7fb      	b.n	178ec <usb_dc_ep_clear_stall+0x2c>
		return -EINVAL;
   178f4:	f06f 0015 	mvn.w	r0, #21
   178f8:	e7f8      	b.n	178ec <usb_dc_ep_clear_stall+0x2c>
   178fa:	bf00      	nop
   178fc:	20003904 	.word	0x20003904

00017900 <usb_dc_ep_is_stalled>:
{
   17900:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   17902:	4b0c      	ldr	r3, [pc, #48]	; (17934 <usb_dc_ep_is_stalled+0x34>)
	if (!dev_attached() || !dev_ready()) {
   17904:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   17908:	4605      	mov	r5, r0
   1790a:	460c      	mov	r4, r1
	if (!dev_attached() || !dev_ready()) {
   1790c:	b162      	cbz	r2, 17928 <usb_dc_ep_is_stalled+0x28>
   1790e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   17912:	b14b      	cbz	r3, 17928 <usb_dc_ep_is_stalled+0x28>
	ep_ctx = endpoint_ctx(ep);
   17914:	f7ff fbe2 	bl	170dc <endpoint_ctx>
	if (!ep_ctx) {
   17918:	b148      	cbz	r0, 1792e <usb_dc_ep_is_stalled+0x2e>
	if (!stalled) {
   1791a:	b141      	cbz	r1, 1792e <usb_dc_ep_is_stalled+0x2e>
	*stalled = (uint8_t) nrfx_usbd_ep_stall_check(ep_addr_to_nrfx(ep));
   1791c:	4628      	mov	r0, r5
   1791e:	f002 fef5 	bl	1a70c <nrfx_usbd_ep_stall_check>
   17922:	7020      	strb	r0, [r4, #0]
	return 0;
   17924:	2000      	movs	r0, #0
}
   17926:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   17928:	f06f 0012 	mvn.w	r0, #18
   1792c:	e7fb      	b.n	17926 <usb_dc_ep_is_stalled+0x26>
		return -EINVAL;
   1792e:	f06f 0015 	mvn.w	r0, #21
   17932:	e7f8      	b.n	17926 <usb_dc_ep_is_stalled+0x26>
   17934:	20003904 	.word	0x20003904

00017938 <usb_dc_ep_enable>:
{
   17938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return get_usbd_ctx()->attached;
   1793a:	4f13      	ldr	r7, [pc, #76]	; (17988 <usb_dc_ep_enable+0x50>)
	if (!dev_attached()) {
   1793c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
{
   17940:	4604      	mov	r4, r0
	if (!dev_attached()) {
   17942:	b1bb      	cbz	r3, 17974 <usb_dc_ep_enable+0x3c>
	ep_ctx = endpoint_ctx(ep);
   17944:	f7ff fbca 	bl	170dc <endpoint_ctx>
	if (!ep_ctx) {
   17948:	4605      	mov	r5, r0
   1794a:	b1b0      	cbz	r0, 1797a <usb_dc_ep_enable+0x42>
	if (!NRF_USBD_EPISO_CHECK(ep)) {
   1794c:	0723      	lsls	r3, r4, #28
   1794e:	d405      	bmi.n	1795c <usb_dc_ep_enable+0x24>
		nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
   17950:	4620      	mov	r0, r4
   17952:	f002 fef5 	bl	1a740 <nrfx_usbd_ep_dtoggle_clear>
		nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
   17956:	4620      	mov	r0, r4
   17958:	f003 f992 	bl	1ac80 <nrfx_usbd_ep_stall_clear>
	if (ep_ctx->cfg.en) {
   1795c:	7a2e      	ldrb	r6, [r5, #8]
   1795e:	b97e      	cbnz	r6, 17980 <usb_dc_ep_enable+0x48>
	if (dev_ready()) {
   17960:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
	ep_ctx->cfg.en = true;
   17964:	2301      	movs	r3, #1
   17966:	722b      	strb	r3, [r5, #8]
	if (dev_ready()) {
   17968:	b118      	cbz	r0, 17972 <usb_dc_ep_enable+0x3a>
		nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep));
   1796a:	4620      	mov	r0, r4
   1796c:	f003 f936 	bl	1abdc <nrfx_usbd_ep_enable>
	return 0;
   17970:	4630      	mov	r0, r6
}
   17972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENODEV;
   17974:	f06f 0012 	mvn.w	r0, #18
   17978:	e7fb      	b.n	17972 <usb_dc_ep_enable+0x3a>
		return -EINVAL;
   1797a:	f06f 0015 	mvn.w	r0, #21
   1797e:	e7f8      	b.n	17972 <usb_dc_ep_enable+0x3a>
		return -EALREADY;
   17980:	f06f 0077 	mvn.w	r0, #119	; 0x77
   17984:	e7f5      	b.n	17972 <usb_dc_ep_enable+0x3a>
   17986:	bf00      	nop
   17988:	20003904 	.word	0x20003904

0001798c <usb_dc_ep_disable>:
{
   1798c:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   1798e:	4b11      	ldr	r3, [pc, #68]	; (179d4 <usb_dc_ep_disable+0x48>)
	if (!dev_attached() || !dev_ready()) {
   17990:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   17994:	4601      	mov	r1, r0
	if (!dev_attached() || !dev_ready()) {
   17996:	b19a      	cbz	r2, 179c0 <usb_dc_ep_disable+0x34>
   17998:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   1799c:	b183      	cbz	r3, 179c0 <usb_dc_ep_disable+0x34>
	ep_ctx = endpoint_ctx(ep);
   1799e:	f7ff fb9d 	bl	170dc <endpoint_ctx>
	if (!ep_ctx) {
   179a2:	4605      	mov	r5, r0
   179a4:	b178      	cbz	r0, 179c6 <usb_dc_ep_disable+0x3a>
	if (!ep_ctx->cfg.en) {
   179a6:	7a03      	ldrb	r3, [r0, #8]
   179a8:	b183      	cbz	r3, 179cc <usb_dc_ep_disable+0x40>
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
   179aa:	4608      	mov	r0, r1
	ep_ctx->write_in_progress = false;
   179ac:	2400      	movs	r4, #0
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
   179ae:	f003 f8e9 	bl	1ab84 <nrfx_usbd_ep_disable>
	ep_ctx_reset(ep_ctx);
   179b2:	4628      	mov	r0, r5
	ep_ctx->write_in_progress = false;
   179b4:	77ac      	strb	r4, [r5, #30]
	ep_ctx_reset(ep_ctx);
   179b6:	f00d fa70 	bl	24e9a <ep_ctx_reset>
	ep_ctx->cfg.en = false;
   179ba:	722c      	strb	r4, [r5, #8]
	return 0;
   179bc:	4620      	mov	r0, r4
}
   179be:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   179c0:	f06f 0012 	mvn.w	r0, #18
   179c4:	e7fb      	b.n	179be <usb_dc_ep_disable+0x32>
		return -EINVAL;
   179c6:	f06f 0015 	mvn.w	r0, #21
   179ca:	e7f8      	b.n	179be <usb_dc_ep_disable+0x32>
		return -EALREADY;
   179cc:	f06f 0077 	mvn.w	r0, #119	; 0x77
   179d0:	e7f5      	b.n	179be <usb_dc_ep_disable+0x32>
   179d2:	bf00      	nop
   179d4:	20003904 	.word	0x20003904

000179d8 <usb_dc_ep_write>:
{
   179d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return get_usbd_ctx()->attached;
   179dc:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 17abc <usb_dc_ep_write+0xe4>
{
   179e0:	461c      	mov	r4, r3
	if (!dev_attached() || !dev_ready()) {
   179e2:	f898 3024 	ldrb.w	r3, [r8, #36]	; 0x24
{
   179e6:	b085      	sub	sp, #20
   179e8:	4607      	mov	r7, r0
   179ea:	4689      	mov	r9, r1
   179ec:	4616      	mov	r6, r2
	if (!dev_attached() || !dev_ready()) {
   179ee:	2b00      	cmp	r3, #0
   179f0:	d05d      	beq.n	17aae <usb_dc_ep_write+0xd6>
   179f2:	f898 3025 	ldrb.w	r3, [r8, #37]	; 0x25
   179f6:	2b00      	cmp	r3, #0
   179f8:	d059      	beq.n	17aae <usb_dc_ep_write+0xd6>
	if (NRF_USBD_EPOUT_CHECK(ep)) {
   179fa:	0603      	lsls	r3, r0, #24
   179fc:	d55a      	bpl.n	17ab4 <usb_dc_ep_write+0xdc>
	ep_ctx = endpoint_ctx(ep);
   179fe:	f7ff fb6d 	bl	170dc <endpoint_ctx>
	if (!ep_ctx) {
   17a02:	4605      	mov	r5, r0
   17a04:	2800      	cmp	r0, #0
   17a06:	d055      	beq.n	17ab4 <usb_dc_ep_write+0xdc>
	if (!ep_ctx->cfg.en) {
   17a08:	7a03      	ldrb	r3, [r0, #8]
   17a0a:	2b00      	cmp	r3, #0
   17a0c:	d052      	beq.n	17ab4 <usb_dc_ep_write+0xdc>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   17a0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17a12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   17a16:	f108 0038 	add.w	r0, r8, #56	; 0x38
   17a1a:	f00d fa51 	bl	24ec0 <k_mutex_lock.constprop.0.isra.0>
	if (ep_ctx->write_in_progress) {
   17a1e:	7fab      	ldrb	r3, [r5, #30]
   17a20:	b14b      	cbz	r3, 17a36 <usb_dc_ep_write+0x5e>
		k_mutex_unlock(&ctx->drv_lock);
   17a22:	f108 0038 	add.w	r0, r8, #56	; 0x38
   17a26:	f00d fa4d 	bl	24ec4 <k_mutex_unlock.isra.0>
		return -EAGAIN;
   17a2a:	f06f 040a 	mvn.w	r4, #10
}
   17a2e:	4620      	mov	r0, r4
   17a30:	b005      	add	sp, #20
   17a32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!data_len && ep_ctx->trans_zlp) {
   17a36:	b916      	cbnz	r6, 17a3e <usb_dc_ep_write+0x66>
   17a38:	7feb      	ldrb	r3, [r5, #31]
   17a3a:	b103      	cbz	r3, 17a3e <usb_dc_ep_write+0x66>
		ep_ctx->trans_zlp = false;
   17a3c:	77ee      	strb	r6, [r5, #31]
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
   17a3e:	7aab      	ldrb	r3, [r5, #10]
   17a40:	b9bb      	cbnz	r3, 17a72 <usb_dc_ep_write+0x9a>
		if (data_len && usbd_ctx.setup.wLength > data_len &&
   17a42:	b15e      	cbz	r6, 17a5c <usb_dc_ep_write+0x84>
   17a44:	f8b8 300a 	ldrh.w	r3, [r8, #10]
   17a48:	42b3      	cmp	r3, r6
   17a4a:	d907      	bls.n	17a5c <usb_dc_ep_write+0x84>
		    !(data_len % ep_ctx->cfg.max_sz)) {
   17a4c:	686a      	ldr	r2, [r5, #4]
   17a4e:	fbb6 f3f2 	udiv	r3, r6, r2
   17a52:	fb02 6313 	mls	r3, r2, r3, r6
		if (data_len && usbd_ctx.setup.wLength > data_len &&
   17a56:	b90b      	cbnz	r3, 17a5c <usb_dc_ep_write+0x84>
			ep_ctx->trans_zlp = true;
   17a58:	2301      	movs	r3, #1
   17a5a:	77eb      	strb	r3, [r5, #31]
	    && (nrfx_usbd_last_setup_dir_get() != ep)) {
   17a5c:	f002 fee2 	bl	1a824 <nrfx_usbd_last_setup_dir_get>
   17a60:	42b8      	cmp	r0, r7
   17a62:	d006      	beq.n	17a72 <usb_dc_ep_write+0x9a>
		nrfx_usbd_setup_clear();
   17a64:	f002 fece 	bl	1a804 <nrfx_usbd_setup_clear>
		k_mutex_unlock(&ctx->drv_lock);
   17a68:	4815      	ldr	r0, [pc, #84]	; (17ac0 <usb_dc_ep_write+0xe8>)
   17a6a:	f00d fa2b 	bl	24ec4 <k_mutex_unlock.isra.0>
		return 0;
   17a6e:	2400      	movs	r4, #0
   17a70:	e7dd      	b.n	17a2e <usb_dc_ep_write+0x56>
	ep_ctx->write_in_progress = true;
   17a72:	2301      	movs	r3, #1
   17a74:	77ab      	strb	r3, [r5, #30]
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
   17a76:	f04f 0800 	mov.w	r8, #0
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
   17a7a:	a901      	add	r1, sp, #4
   17a7c:	4638      	mov	r0, r7
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
   17a7e:	e9cd 9601 	strd	r9, r6, [sp, #4]
   17a82:	f8cd 800c 	str.w	r8, [sp, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
   17a86:	f002 fc97 	bl	1a3b8 <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
   17a8a:	4b0e      	ldr	r3, [pc, #56]	; (17ac4 <usb_dc_ep_write+0xec>)
   17a8c:	4298      	cmp	r0, r3
   17a8e:	d007      	beq.n	17aa0 <usb_dc_ep_write+0xc8>
		ep_ctx->write_in_progress = false;
   17a90:	f885 801e 	strb.w	r8, [r5, #30]
		if (ret_bytes) {
   17a94:	b10c      	cbz	r4, 17a9a <usb_dc_ep_write+0xc2>
			*ret_bytes = 0;
   17a96:	f8c4 8000 	str.w	r8, [r4]
		result = -EIO;
   17a9a:	f06f 0404 	mvn.w	r4, #4
   17a9e:	e002      	b.n	17aa6 <usb_dc_ep_write+0xce>
		if (ret_bytes) {
   17aa0:	b10c      	cbz	r4, 17aa6 <usb_dc_ep_write+0xce>
			*ret_bytes = data_len;
   17aa2:	6026      	str	r6, [r4, #0]
	int result = 0;
   17aa4:	4644      	mov	r4, r8
	k_mutex_unlock(&ctx->drv_lock);
   17aa6:	4806      	ldr	r0, [pc, #24]	; (17ac0 <usb_dc_ep_write+0xe8>)
   17aa8:	f00d fa0c 	bl	24ec4 <k_mutex_unlock.isra.0>
	return result;
   17aac:	e7bf      	b.n	17a2e <usb_dc_ep_write+0x56>
		return -ENODEV;
   17aae:	f06f 0412 	mvn.w	r4, #18
   17ab2:	e7bc      	b.n	17a2e <usb_dc_ep_write+0x56>
		return -EINVAL;
   17ab4:	f06f 0415 	mvn.w	r4, #21
   17ab8:	e7b9      	b.n	17a2e <usb_dc_ep_write+0x56>
   17aba:	bf00      	nop
   17abc:	20003904 	.word	0x20003904
   17ac0:	2000393c 	.word	0x2000393c
   17ac4:	0bad0000 	.word	0x0bad0000

00017ac8 <usb_dc_ep_read_wait>:
{
   17ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17acc:	461d      	mov	r5, r3
	return get_usbd_ctx()->attached;
   17ace:	4b20      	ldr	r3, [pc, #128]	; (17b50 <usb_dc_ep_read_wait+0x88>)
{
   17ad0:	4617      	mov	r7, r2
	if (!dev_attached() || !dev_ready()) {
   17ad2:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   17ad6:	460e      	mov	r6, r1
	if (!dev_attached() || !dev_ready()) {
   17ad8:	2a00      	cmp	r2, #0
   17ada:	d033      	beq.n	17b44 <usb_dc_ep_read_wait+0x7c>
   17adc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   17ae0:	b383      	cbz	r3, 17b44 <usb_dc_ep_read_wait+0x7c>
	if (NRF_USBD_EPIN_CHECK(ep)) {
   17ae2:	0603      	lsls	r3, r0, #24
   17ae4:	d431      	bmi.n	17b4a <usb_dc_ep_read_wait+0x82>
	if (!data && max_data_len) {
   17ae6:	b901      	cbnz	r1, 17aea <usb_dc_ep_read_wait+0x22>
   17ae8:	bb7f      	cbnz	r7, 17b4a <usb_dc_ep_read_wait+0x82>
	ep_ctx = endpoint_ctx(ep);
   17aea:	f7ff faf7 	bl	170dc <endpoint_ctx>
	if (!ep_ctx) {
   17aee:	4604      	mov	r4, r0
   17af0:	b358      	cbz	r0, 17b4a <usb_dc_ep_read_wait+0x82>
	if (!ep_ctx->cfg.en) {
   17af2:	7a03      	ldrb	r3, [r0, #8]
   17af4:	b34b      	cbz	r3, 17b4a <usb_dc_ep_read_wait+0x82>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   17af6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17afa:	4816      	ldr	r0, [pc, #88]	; (17b54 <usb_dc_ep_read_wait+0x8c>)
   17afc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   17b00:	f00d f9de 	bl	24ec0 <k_mutex_lock.constprop.0.isra.0>
	bytes_to_copy = MIN(max_data_len, ep_ctx->buf.len);
   17b04:	68e3      	ldr	r3, [r4, #12]
   17b06:	429f      	cmp	r7, r3
   17b08:	46b8      	mov	r8, r7
   17b0a:	bf28      	it	cs
   17b0c:	4698      	movcs	r8, r3
	if (!data && !max_data_len) {
   17b0e:	b946      	cbnz	r6, 17b22 <usb_dc_ep_read_wait+0x5a>
   17b10:	b93f      	cbnz	r7, 17b22 <usb_dc_ep_read_wait+0x5a>
		if (read_bytes) {
   17b12:	b105      	cbz	r5, 17b16 <usb_dc_ep_read_wait+0x4e>
			*read_bytes = ep_ctx->buf.len;
   17b14:	602b      	str	r3, [r5, #0]
		k_mutex_unlock(&ctx->drv_lock);
   17b16:	480f      	ldr	r0, [pc, #60]	; (17b54 <usb_dc_ep_read_wait+0x8c>)
   17b18:	f00d f9d4 	bl	24ec4 <k_mutex_unlock.isra.0>
		return 0;
   17b1c:	2000      	movs	r0, #0
}
   17b1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	memcpy(data, ep_ctx->buf.curr, bytes_to_copy);
   17b22:	69a1      	ldr	r1, [r4, #24]
   17b24:	4642      	mov	r2, r8
   17b26:	4630      	mov	r0, r6
   17b28:	f006 fa83 	bl	1e032 <memcpy>
	ep_ctx->buf.curr += bytes_to_copy;
   17b2c:	69a3      	ldr	r3, [r4, #24]
   17b2e:	4443      	add	r3, r8
   17b30:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len -= bytes_to_copy;
   17b32:	68e3      	ldr	r3, [r4, #12]
   17b34:	eba3 0308 	sub.w	r3, r3, r8
   17b38:	60e3      	str	r3, [r4, #12]
	if (read_bytes) {
   17b3a:	2d00      	cmp	r5, #0
   17b3c:	d0eb      	beq.n	17b16 <usb_dc_ep_read_wait+0x4e>
		*read_bytes = bytes_to_copy;
   17b3e:	f8c5 8000 	str.w	r8, [r5]
   17b42:	e7e8      	b.n	17b16 <usb_dc_ep_read_wait+0x4e>
		return -ENODEV;
   17b44:	f06f 0012 	mvn.w	r0, #18
   17b48:	e7e9      	b.n	17b1e <usb_dc_ep_read_wait+0x56>
		return -EINVAL;
   17b4a:	f06f 0015 	mvn.w	r0, #21
   17b4e:	e7e6      	b.n	17b1e <usb_dc_ep_read_wait+0x56>
   17b50:	20003904 	.word	0x20003904
   17b54:	2000393c 	.word	0x2000393c

00017b58 <usb_dc_ep_read_continue>:
{
   17b58:	b570      	push	{r4, r5, r6, lr}
	return get_usbd_ctx()->attached;
   17b5a:	4d1e      	ldr	r5, [pc, #120]	; (17bd4 <usb_dc_ep_read_continue+0x7c>)
	if (!dev_attached() || !dev_ready()) {
   17b5c:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
{
   17b60:	4603      	mov	r3, r0
	if (!dev_attached() || !dev_ready()) {
   17b62:	b382      	cbz	r2, 17bc6 <usb_dc_ep_read_continue+0x6e>
   17b64:	f895 2025 	ldrb.w	r2, [r5, #37]	; 0x25
   17b68:	b36a      	cbz	r2, 17bc6 <usb_dc_ep_read_continue+0x6e>
	if (NRF_USBD_EPIN_CHECK(ep)) {
   17b6a:	061b      	lsls	r3, r3, #24
   17b6c:	d42e      	bmi.n	17bcc <usb_dc_ep_read_continue+0x74>
	ep_ctx = endpoint_ctx(ep);
   17b6e:	f7ff fab5 	bl	170dc <endpoint_ctx>
	if (!ep_ctx) {
   17b72:	4604      	mov	r4, r0
   17b74:	b350      	cbz	r0, 17bcc <usb_dc_ep_read_continue+0x74>
	if (!ep_ctx->cfg.en) {
   17b76:	7a03      	ldrb	r3, [r0, #8]
   17b78:	b343      	cbz	r3, 17bcc <usb_dc_ep_read_continue+0x74>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   17b7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17b7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   17b82:	f105 0038 	add.w	r0, r5, #56	; 0x38
   17b86:	f00d f99b 	bl	24ec0 <k_mutex_lock.constprop.0.isra.0>
	if (!ep_ctx->buf.len) {
   17b8a:	68e3      	ldr	r3, [r4, #12]
   17b8c:	b9b3      	cbnz	r3, 17bbc <usb_dc_ep_read_continue+0x64>
		ep_ctx->read_complete = true;
   17b8e:	2601      	movs	r6, #1
		ep_ctx->buf.curr = ep_ctx->buf.data;
   17b90:	6963      	ldr	r3, [r4, #20]
		ep_ctx->read_complete = true;
   17b92:	7726      	strb	r6, [r4, #28]
		ep_ctx->buf.curr = ep_ctx->buf.data;
   17b94:	61a3      	str	r3, [r4, #24]
		if (ep_ctx->read_pending) {
   17b96:	7f63      	ldrb	r3, [r4, #29]
   17b98:	b183      	cbz	r3, 17bbc <usb_dc_ep_read_continue+0x64>
			struct usbd_event *ev = usbd_evt_alloc();
   17b9a:	f7ff fb0f 	bl	171bc <usbd_evt_alloc>
			if (!ev) {
   17b9e:	b930      	cbnz	r0, 17bae <usb_dc_ep_read_continue+0x56>
				k_mutex_unlock(&ctx->drv_lock);
   17ba0:	f105 0038 	add.w	r0, r5, #56	; 0x38
   17ba4:	f00d f98e 	bl	24ec4 <k_mutex_unlock.isra.0>
				return -ENOMEM;
   17ba8:	f06f 000b 	mvn.w	r0, #11
}
   17bac:	bd70      	pop	{r4, r5, r6, pc}
			ev->evt_type = USBD_EVT_EP;
   17bae:	7406      	strb	r6, [r0, #16]
			ev->evt.ep_evt.ep = ep_ctx;
   17bb0:	6084      	str	r4, [r0, #8]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   17bb2:	7306      	strb	r6, [r0, #12]
			usbd_evt_put(ev);
   17bb4:	f7ff faba 	bl	1712c <usbd_evt_put>
			usbd_work_schedule();
   17bb8:	f7ff fabe 	bl	17138 <usbd_work_schedule>
	k_mutex_unlock(&ctx->drv_lock);
   17bbc:	4806      	ldr	r0, [pc, #24]	; (17bd8 <usb_dc_ep_read_continue+0x80>)
   17bbe:	f00d f981 	bl	24ec4 <k_mutex_unlock.isra.0>
	return 0;
   17bc2:	2000      	movs	r0, #0
   17bc4:	e7f2      	b.n	17bac <usb_dc_ep_read_continue+0x54>
		return -ENODEV;
   17bc6:	f06f 0012 	mvn.w	r0, #18
   17bca:	e7ef      	b.n	17bac <usb_dc_ep_read_continue+0x54>
		return -EINVAL;
   17bcc:	f06f 0015 	mvn.w	r0, #21
   17bd0:	e7ec      	b.n	17bac <usb_dc_ep_read_continue+0x54>
   17bd2:	bf00      	nop
   17bd4:	20003904 	.word	0x20003904
   17bd8:	2000393c 	.word	0x2000393c

00017bdc <usb_dc_ep_set_callback>:
{
   17bdc:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
   17bde:	4b08      	ldr	r3, [pc, #32]	; (17c00 <usb_dc_ep_set_callback+0x24>)
	if (!dev_attached()) {
   17be0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   17be4:	b12b      	cbz	r3, 17bf2 <usb_dc_ep_set_callback+0x16>
	ep_ctx = endpoint_ctx(ep);
   17be6:	f7ff fa79 	bl	170dc <endpoint_ctx>
	if (!ep_ctx) {
   17bea:	b128      	cbz	r0, 17bf8 <usb_dc_ep_set_callback+0x1c>
	ep_ctx->cfg.cb = cb;
   17bec:	6001      	str	r1, [r0, #0]
	return 0;
   17bee:	2000      	movs	r0, #0
}
   17bf0:	bd08      	pop	{r3, pc}
		return -ENODEV;
   17bf2:	f06f 0012 	mvn.w	r0, #18
   17bf6:	e7fb      	b.n	17bf0 <usb_dc_ep_set_callback+0x14>
		return -EINVAL;
   17bf8:	f06f 0015 	mvn.w	r0, #21
   17bfc:	e7f8      	b.n	17bf0 <usb_dc_ep_set_callback+0x14>
   17bfe:	bf00      	nop
   17c00:	20003904 	.word	0x20003904

00017c04 <usb_dc_set_status_callback>:
	get_usbd_ctx()->status_cb = cb;
   17c04:	4b01      	ldr	r3, [pc, #4]	; (17c0c <usb_dc_set_status_callback+0x8>)
   17c06:	6018      	str	r0, [r3, #0]
}
   17c08:	4770      	bx	lr
   17c0a:	bf00      	nop
   17c0c:	20003904 	.word	0x20003904

00017c10 <usb_dc_ep_mps>:
{
   17c10:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
   17c12:	4b07      	ldr	r3, [pc, #28]	; (17c30 <usb_dc_ep_mps+0x20>)
	if (!dev_attached()) {
   17c14:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   17c18:	b123      	cbz	r3, 17c24 <usb_dc_ep_mps+0x14>
	ep_ctx = endpoint_ctx(ep);
   17c1a:	f7ff fa5f 	bl	170dc <endpoint_ctx>
	if (!ep_ctx) {
   17c1e:	b120      	cbz	r0, 17c2a <usb_dc_ep_mps+0x1a>
	return ep_ctx->cfg.max_sz;
   17c20:	6840      	ldr	r0, [r0, #4]
}
   17c22:	bd08      	pop	{r3, pc}
		return -ENODEV;
   17c24:	f06f 0012 	mvn.w	r0, #18
   17c28:	e7fb      	b.n	17c22 <usb_dc_ep_mps+0x12>
		return -EINVAL;
   17c2a:	f06f 0015 	mvn.w	r0, #21
   17c2e:	e7f8      	b.n	17c22 <usb_dc_ep_mps+0x12>
   17c30:	20003904 	.word	0x20003904

00017c34 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   17c34:	4b08      	ldr	r3, [pc, #32]	; (17c58 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   17c36:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   17c38:	1ac3      	subs	r3, r0, r3
{
   17c3a:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   17c3c:	4907      	ldr	r1, [pc, #28]	; (17c5c <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   17c3e:	109b      	asrs	r3, r3, #2
{
   17c40:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   17c42:	4359      	muls	r1, r3
   17c44:	4806      	ldr	r0, [pc, #24]	; (17c60 <onoff_stop+0x2c>)
   17c46:	2240      	movs	r2, #64	; 0x40
   17c48:	f00d f981 	bl	24f4e <stop>
	notify(mgr, res);
   17c4c:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   17c4e:	4601      	mov	r1, r0
	notify(mgr, res);
   17c50:	4620      	mov	r0, r4
}
   17c52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   17c56:	4718      	bx	r3
   17c58:	20003ba4 	.word	0x20003ba4
   17c5c:	b6db6db7 	.word	0xb6db6db7
   17c60:	00026350 	.word	0x00026350

00017c64 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   17c64:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   17c66:	4c0c      	ldr	r4, [pc, #48]	; (17c98 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   17c68:	4a0c      	ldr	r2, [pc, #48]	; (17c9c <onoff_start+0x38>)
   17c6a:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   17c6c:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   17c6e:	9300      	str	r3, [sp, #0]
{
   17c70:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   17c72:	460b      	mov	r3, r1
   17c74:	490a      	ldr	r1, [pc, #40]	; (17ca0 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
   17c76:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   17c78:	4361      	muls	r1, r4
{
   17c7a:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   17c7c:	4809      	ldr	r0, [pc, #36]	; (17ca4 <onoff_start+0x40>)
   17c7e:	f00d f992 	bl	24fa6 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   17c82:	1e01      	subs	r1, r0, #0
   17c84:	da05      	bge.n	17c92 <onoff_start+0x2e>
		notify(mgr, err);
   17c86:	4630      	mov	r0, r6
   17c88:	462b      	mov	r3, r5
	}
}
   17c8a:	b002      	add	sp, #8
   17c8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   17c90:	4718      	bx	r3
}
   17c92:	b002      	add	sp, #8
   17c94:	bd70      	pop	{r4, r5, r6, pc}
   17c96:	bf00      	nop
   17c98:	20003ba4 	.word	0x20003ba4
   17c9c:	00025017 	.word	0x00025017
   17ca0:	b6db6db7 	.word	0xb6db6db7
   17ca4:	00026350 	.word	0x00026350

00017ca8 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   17ca8:	2200      	movs	r2, #0
{
   17caa:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   17cac:	2101      	movs	r1, #1
{
   17cae:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   17cb0:	4610      	mov	r0, r2
   17cb2:	f7ed fcf7 	bl	56a4 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   17cb6:	2000      	movs	r0, #0
   17cb8:	f7ed fcc2 	bl	5640 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   17cbc:	480f      	ldr	r0, [pc, #60]	; (17cfc <clk_init+0x54>)
   17cbe:	f001 fba3 	bl	19408 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   17cc2:	4b0f      	ldr	r3, [pc, #60]	; (17d00 <clk_init+0x58>)
   17cc4:	4298      	cmp	r0, r3
   17cc6:	d115      	bne.n	17cf4 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   17cc8:	f001 fbae 	bl	19428 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   17ccc:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   17cce:	490d      	ldr	r1, [pc, #52]	; (17d04 <clk_init+0x5c>)
   17cd0:	4630      	mov	r0, r6
   17cd2:	f004 fb6f 	bl	1c3b4 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   17cd6:	2800      	cmp	r0, #0
   17cd8:	db0b      	blt.n	17cf2 <clk_init+0x4a>
	struct nrf_clock_control_data *data = dev->data;
   17cda:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   17cdc:	4909      	ldr	r1, [pc, #36]	; (17d04 <clk_init+0x5c>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   17cde:	2501      	movs	r5, #1
   17ce0:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
   17ce2:	f104 001c 	add.w	r0, r4, #28
   17ce6:	f004 fb65 	bl	1c3b4 <onoff_manager_init>
		if (err < 0) {
   17cea:	2800      	cmp	r0, #0
   17cec:	db01      	blt.n	17cf2 <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   17cee:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   17cf0:	2000      	movs	r0, #0
}
   17cf2:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   17cf4:	f06f 0004 	mvn.w	r0, #4
   17cf8:	e7fb      	b.n	17cf2 <clk_init+0x4a>
   17cfa:	bf00      	nop
   17cfc:	00017d3d 	.word	0x00017d3d
   17d00:	0bad0000 	.word	0x0bad0000
   17d04:	00027040 	.word	0x00027040

00017d08 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   17d08:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   17d0a:	230c      	movs	r3, #12
   17d0c:	4809      	ldr	r0, [pc, #36]	; (17d34 <clkstarted_handle.constprop.0+0x2c>)
   17d0e:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   17d10:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   17d12:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   17d14:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
   17d18:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   17d1a:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   17d1c:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   17d1e:	4418      	add	r0, r3
   17d20:	f00d f902 	bl	24f28 <set_on_state>
	if (callback) {
   17d24:	b12d      	cbz	r5, 17d32 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   17d26:	4632      	mov	r2, r6
   17d28:	462b      	mov	r3, r5
   17d2a:	4803      	ldr	r0, [pc, #12]	; (17d38 <clkstarted_handle.constprop.0+0x30>)
}
   17d2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   17d30:	4718      	bx	r3
}
   17d32:	bd70      	pop	{r4, r5, r6, pc}
   17d34:	20003ba4 	.word	0x20003ba4
   17d38:	00026350 	.word	0x00026350

00017d3c <clock_event_handler>:
	switch (event) {
   17d3c:	b110      	cbz	r0, 17d44 <clock_event_handler+0x8>
   17d3e:	2801      	cmp	r0, #1
   17d40:	d004      	beq.n	17d4c <clock_event_handler+0x10>
   17d42:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   17d44:	4b03      	ldr	r3, [pc, #12]	; (17d54 <clock_event_handler+0x18>)
   17d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   17d48:	075b      	lsls	r3, r3, #29
   17d4a:	d101      	bne.n	17d50 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   17d4c:	f7ff bfdc 	b.w	17d08 <clkstarted_handle.constprop.0>
}
   17d50:	4770      	bx	lr
   17d52:	bf00      	nop
   17d54:	20003ba4 	.word	0x20003ba4

00017d58 <generic_hfclk_start>:
{
   17d58:	b508      	push	{r3, lr}
	__asm__ volatile(
   17d5a:	f04f 0320 	mov.w	r3, #32
   17d5e:	f3ef 8111 	mrs	r1, BASEPRI
   17d62:	f383 8812 	msr	BASEPRI_MAX, r3
   17d66:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   17d6a:	4a12      	ldr	r2, [pc, #72]	; (17db4 <generic_hfclk_start+0x5c>)
   17d6c:	6813      	ldr	r3, [r2, #0]
   17d6e:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   17d72:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   17d76:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   17d78:	d00c      	beq.n	17d94 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   17d7a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   17d7e:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   17d82:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   17d86:	f013 0301 	ands.w	r3, r3, #1
   17d8a:	d003      	beq.n	17d94 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   17d8c:	480a      	ldr	r0, [pc, #40]	; (17db8 <generic_hfclk_start+0x60>)
   17d8e:	f00d f8cb 	bl	24f28 <set_on_state>
			already_started = true;
   17d92:	2301      	movs	r3, #1
	__asm__ volatile(
   17d94:	f381 8811 	msr	BASEPRI, r1
   17d98:	f3bf 8f6f 	isb	sy
	if (already_started) {
   17d9c:	b123      	cbz	r3, 17da8 <generic_hfclk_start+0x50>
}
   17d9e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   17da2:	2000      	movs	r0, #0
   17da4:	f7ff bfb0 	b.w	17d08 <clkstarted_handle.constprop.0>
}
   17da8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   17dac:	2001      	movs	r0, #1
   17dae:	f00d bb86 	b.w	254be <nrfx_clock_start>
   17db2:	bf00      	nop
   17db4:	20003bf4 	.word	0x20003bf4
   17db8:	20003be4 	.word	0x20003be4

00017dbc <api_blocking_start>:
{
   17dbc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   17dbe:	2200      	movs	r2, #0
   17dc0:	2301      	movs	r3, #1
   17dc2:	e9cd 2302 	strd	r2, r3, [sp, #8]
   17dc6:	ab04      	add	r3, sp, #16
   17dc8:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   17dcc:	4a09      	ldr	r2, [pc, #36]	; (17df4 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   17dce:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   17dd2:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   17dd4:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   17dd8:	f00d f916 	bl	25008 <api_start>
	if (err < 0) {
   17ddc:	2800      	cmp	r0, #0
   17dde:	db05      	blt.n	17dec <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   17de0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   17de4:	2300      	movs	r3, #0
   17de6:	4668      	mov	r0, sp
   17de8:	f003 fab4 	bl	1b354 <z_impl_k_sem_take>
}
   17dec:	b007      	add	sp, #28
   17dee:	f85d fb04 	ldr.w	pc, [sp], #4
   17df2:	bf00      	nop
   17df4:	00025035 	.word	0x00025035

00017df8 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17df8:	4b09      	ldr	r3, [pc, #36]	; (17e20 <generic_hfclk_stop+0x28>)
   17dfa:	f3bf 8f5b 	dmb	ish
   17dfe:	e853 2f00 	ldrex	r2, [r3]
   17e02:	f022 0102 	bic.w	r1, r2, #2
   17e06:	e843 1000 	strex	r0, r1, [r3]
   17e0a:	2800      	cmp	r0, #0
   17e0c:	d1f7      	bne.n	17dfe <generic_hfclk_stop+0x6>
   17e0e:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   17e12:	07d3      	lsls	r3, r2, #31
   17e14:	d402      	bmi.n	17e1c <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   17e16:	2001      	movs	r0, #1
   17e18:	f001 bb14 	b.w	19444 <nrfx_clock_stop>
}
   17e1c:	4770      	bx	lr
   17e1e:	bf00      	nop
   17e20:	20003bf4 	.word	0x20003bf4

00017e24 <z_nrf_clock_control_get_onoff>:
}
   17e24:	4a02      	ldr	r2, [pc, #8]	; (17e30 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
   17e26:	b2c3      	uxtb	r3, r0
}
   17e28:	201c      	movs	r0, #28
   17e2a:	fb03 2000 	mla	r0, r3, r0, r2
   17e2e:	4770      	bx	lr
   17e30:	20003ba4 	.word	0x20003ba4

00017e34 <z_nrf_clock_bt_ctlr_hf_request>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17e34:	4b09      	ldr	r3, [pc, #36]	; (17e5c <z_nrf_clock_bt_ctlr_hf_request+0x28>)
   17e36:	f3bf 8f5b 	dmb	ish
   17e3a:	e853 2f00 	ldrex	r2, [r3]
   17e3e:	f042 0101 	orr.w	r1, r2, #1
   17e42:	e843 1000 	strex	r0, r1, [r3]
   17e46:	2800      	cmp	r0, #0
   17e48:	d1f7      	bne.n	17e3a <z_nrf_clock_bt_ctlr_hf_request+0x6>
   17e4a:	f3bf 8f5b 	dmb	ish
	if (atomic_or(&hfclk_users, HF_USER_BT) & HF_USER_GENERIC) {
   17e4e:	0793      	lsls	r3, r2, #30
   17e50:	d402      	bmi.n	17e58 <z_nrf_clock_bt_ctlr_hf_request+0x24>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   17e52:	2001      	movs	r0, #1
   17e54:	f00d bb33 	b.w	254be <nrfx_clock_start>
}
   17e58:	4770      	bx	lr
   17e5a:	bf00      	nop
   17e5c:	20003bf4 	.word	0x20003bf4

00017e60 <z_nrf_clock_bt_ctlr_hf_release>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17e60:	4b09      	ldr	r3, [pc, #36]	; (17e88 <z_nrf_clock_bt_ctlr_hf_release+0x28>)
   17e62:	f3bf 8f5b 	dmb	ish
   17e66:	e853 2f00 	ldrex	r2, [r3]
   17e6a:	f022 0101 	bic.w	r1, r2, #1
   17e6e:	e843 1000 	strex	r0, r1, [r3]
   17e72:	2800      	cmp	r0, #0
   17e74:	d1f7      	bne.n	17e66 <z_nrf_clock_bt_ctlr_hf_release+0x6>
   17e76:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_BT) & HF_USER_GENERIC) {
   17e7a:	0793      	lsls	r3, r2, #30
   17e7c:	d402      	bmi.n	17e84 <z_nrf_clock_bt_ctlr_hf_release+0x24>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   17e7e:	2001      	movs	r0, #1
   17e80:	f001 bae0 	b.w	19444 <nrfx_clock_stop>
}
   17e84:	4770      	bx	lr
   17e86:	bf00      	nop
   17e88:	20003bf4 	.word	0x20003bf4

00017e8c <z_nrf_clock_control_lf_on>:
{
   17e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   17e90:	4939      	ldr	r1, [pc, #228]	; (17f78 <z_nrf_clock_control_lf_on+0xec>)
   17e92:	f3bf 8f5b 	dmb	ish
   17e96:	4607      	mov	r7, r0
   17e98:	2201      	movs	r2, #1
   17e9a:	e851 3f00 	ldrex	r3, [r1]
   17e9e:	e841 2000 	strex	r0, r2, [r1]
   17ea2:	2800      	cmp	r0, #0
   17ea4:	d1f9      	bne.n	17e9a <z_nrf_clock_control_lf_on+0xe>
   17ea6:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   17eaa:	b933      	cbnz	r3, 17eba <z_nrf_clock_control_lf_on+0x2e>
   17eac:	4933      	ldr	r1, [pc, #204]	; (17f7c <z_nrf_clock_control_lf_on+0xf0>)
		err = onoff_request(mgr, &cli);
   17eae:	4834      	ldr	r0, [pc, #208]	; (17f80 <z_nrf_clock_control_lf_on+0xf4>)
   17eb0:	604b      	str	r3, [r1, #4]
   17eb2:	60cb      	str	r3, [r1, #12]
   17eb4:	608a      	str	r2, [r1, #8]
   17eb6:	f004 fa90 	bl	1c3da <onoff_request>
	switch (start_mode) {
   17eba:	1e7b      	subs	r3, r7, #1
   17ebc:	2b01      	cmp	r3, #1
   17ebe:	d82f      	bhi.n	17f20 <z_nrf_clock_control_lf_on+0x94>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   17ec0:	2f01      	cmp	r7, #1
   17ec2:	d107      	bne.n	17ed4 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   17ec4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   17ec8:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   17ecc:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   17ed0:	2b01      	cmp	r3, #1
   17ed2:	d025      	beq.n	17f20 <z_nrf_clock_control_lf_on+0x94>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   17ed4:	f00d fd18 	bl	25908 <k_is_in_isr>
   17ed8:	4604      	mov	r4, r0
   17eda:	b918      	cbnz	r0, 17ee4 <z_nrf_clock_control_lf_on+0x58>
	return !z_sys_post_kernel;
   17edc:	4b29      	ldr	r3, [pc, #164]	; (17f84 <z_nrf_clock_control_lf_on+0xf8>)
	int key = isr_mode ? irq_lock() : 0;
   17ede:	781b      	ldrb	r3, [r3, #0]
   17ee0:	2b00      	cmp	r3, #0
   17ee2:	d141      	bne.n	17f68 <z_nrf_clock_control_lf_on+0xdc>
	__asm__ volatile(
   17ee4:	f04f 0320 	mov.w	r3, #32
   17ee8:	f3ef 8611 	mrs	r6, BASEPRI
   17eec:	f383 8812 	msr	BASEPRI_MAX, r3
   17ef0:	f3bf 8f6f 	isb	sy
   17ef4:	2401      	movs	r4, #1
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   17ef6:	f8df 8090 	ldr.w	r8, [pc, #144]	; 17f88 <z_nrf_clock_control_lf_on+0xfc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   17efa:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   17efe:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   17f02:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
   17f06:	03d2      	lsls	r2, r2, #15
   17f08:	d50c      	bpl.n	17f24 <z_nrf_clock_control_lf_on+0x98>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   17f0a:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   17f0e:	2b01      	cmp	r3, #1
   17f10:	d001      	beq.n	17f16 <z_nrf_clock_control_lf_on+0x8a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   17f12:	2f01      	cmp	r7, #1
   17f14:	d106      	bne.n	17f24 <z_nrf_clock_control_lf_on+0x98>
	if (isr_mode) {
   17f16:	b30c      	cbz	r4, 17f5c <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
   17f18:	f386 8811 	msr	BASEPRI, r6
   17f1c:	f3bf 8f6f 	isb	sy
}
   17f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   17f24:	b1ac      	cbz	r4, 17f52 <z_nrf_clock_control_lf_on+0xc6>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   17f26:	4630      	mov	r0, r6
   17f28:	f7ed fb80 	bl	562c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   17f2c:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   17f30:	2b00      	cmp	r3, #0
   17f32:	d1e4      	bne.n	17efe <z_nrf_clock_control_lf_on+0x72>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   17f34:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   17f38:	2a00      	cmp	r2, #0
   17f3a:	d0e0      	beq.n	17efe <z_nrf_clock_control_lf_on+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   17f3c:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   17f40:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   17f44:	2301      	movs	r3, #1
   17f46:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
   17f4a:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   17f4e:	60ab      	str	r3, [r5, #8]
}
   17f50:	e7d5      	b.n	17efe <z_nrf_clock_control_lf_on+0x72>
	return z_impl_k_sleep(timeout);
   17f52:	2100      	movs	r1, #0
   17f54:	2021      	movs	r0, #33	; 0x21
   17f56:	f003 febb 	bl	1bcd0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   17f5a:	e7e7      	b.n	17f2c <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENSET = mask;
   17f5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   17f60:	2202      	movs	r2, #2
   17f62:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   17f66:	e7db      	b.n	17f20 <z_nrf_clock_control_lf_on+0x94>
    p_reg->INTENCLR = mask;
   17f68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   17f6c:	2202      	movs	r2, #2
   17f6e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   17f72:	4606      	mov	r6, r0
}
   17f74:	e7bf      	b.n	17ef6 <z_nrf_clock_control_lf_on+0x6a>
   17f76:	bf00      	nop
   17f78:	20003bf8 	.word	0x20003bf8
   17f7c:	20003b94 	.word	0x20003b94
   17f80:	20003bc0 	.word	0x20003bc0
   17f84:	2000412e 	.word	0x2000412e
   17f88:	e000e100 	.word	0xe000e100

00017f8c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   17f8c:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
   17f8e:	4b08      	ldr	r3, [pc, #32]	; (17fb0 <uart_console_init+0x24>)
   17f90:	4808      	ldr	r0, [pc, #32]	; (17fb4 <uart_console_init+0x28>)
   17f92:	6018      	str	r0, [r3, #0]
   17f94:	f00d fbf8 	bl	25788 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
   17f98:	b138      	cbz	r0, 17faa <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
   17f9a:	4807      	ldr	r0, [pc, #28]	; (17fb8 <uart_console_init+0x2c>)
   17f9c:	f7ed fe90 	bl	5cc0 <__stdout_hook_install>
	__printk_hook_install(console_out);
   17fa0:	4805      	ldr	r0, [pc, #20]	; (17fb8 <uart_console_init+0x2c>)
   17fa2:	f7eb f873 	bl	308c <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   17fa6:	2000      	movs	r0, #0
}
   17fa8:	bd08      	pop	{r3, pc}
		return -ENODEV;
   17faa:	f06f 0012 	mvn.w	r0, #18
   17fae:	e7fb      	b.n	17fa8 <uart_console_init+0x1c>
   17fb0:	20003bfc 	.word	0x20003bfc
   17fb4:	000263b0 	.word	0x000263b0
   17fb8:	00017fbd 	.word	0x00017fbd

00017fbc <console_out>:
	if ('\n' == c) {
   17fbc:	280a      	cmp	r0, #10
{
   17fbe:	b538      	push	{r3, r4, r5, lr}
   17fc0:	4d07      	ldr	r5, [pc, #28]	; (17fe0 <console_out+0x24>)
   17fc2:	4604      	mov	r4, r0
	if ('\n' == c) {
   17fc4:	d104      	bne.n	17fd0 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
   17fc6:	6828      	ldr	r0, [r5, #0]
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   17fc8:	6883      	ldr	r3, [r0, #8]
   17fca:	210d      	movs	r1, #13
   17fcc:	685b      	ldr	r3, [r3, #4]
   17fce:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
   17fd0:	6828      	ldr	r0, [r5, #0]
   17fd2:	6883      	ldr	r3, [r0, #8]
   17fd4:	b2e1      	uxtb	r1, r4
   17fd6:	685b      	ldr	r3, [r3, #4]
   17fd8:	4798      	blx	r3
}
   17fda:	4620      	mov	r0, r4
   17fdc:	bd38      	pop	{r3, r4, r5, pc}
   17fde:	bf00      	nop
   17fe0:	20003bfc 	.word	0x20003bfc

00017fe4 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   17fe4:	b530      	push	{r4, r5, lr}
	return port->config;
   17fe6:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   17fe8:	7b04      	ldrb	r4, [r0, #12]
   17fea:	f001 051f 	and.w	r5, r1, #31
	nrfx_err_t err;

	if (mode == GPIO_INT_MODE_DISABLED) {
   17fee:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   17ff2:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
   17ff6:	b085      	sub	sp, #20
   17ff8:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
   17ffc:	d104      	bne.n	18008 <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
   17ffe:	4628      	mov	r0, r5
   18000:	f001 fcce 	bl	199a0 <nrfx_gpiote_trigger_disable>
		return -EIO;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
   18004:	2000      	movs	r0, #0
   18006:	e032      	b.n	1806e <gpio_nrfx_pin_interrupt_configure+0x8a>
	if (mode == GPIO_INT_MODE_LEVEL) {
   18008:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1800c:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   18010:	d12f      	bne.n	18072 <gpio_nrfx_pin_interrupt_configure+0x8e>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   18012:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   18016:	bf0c      	ite	eq
   18018:	2304      	moveq	r3, #4
   1801a:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
   1801c:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   18020:	6883      	ldr	r3, [r0, #8]
   18022:	fa23 f101 	lsr.w	r1, r3, r1
   18026:	07c9      	lsls	r1, r1, #31
   18028:	d42f      	bmi.n	1808a <gpio_nrfx_pin_interrupt_configure+0xa6>
   1802a:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   1802e:	d12c      	bne.n	1808a <gpio_nrfx_pin_interrupt_configure+0xa6>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   18030:	096a      	lsrs	r2, r5, #5
        case 1: return NRF_P1;
   18032:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   18034:	f005 031f 	and.w	r3, r5, #31
        case 1: return NRF_P1;
   18038:	4a1c      	ldr	r2, [pc, #112]	; (180ac <gpio_nrfx_pin_interrupt_configure+0xc8>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1803a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
   1803e:	bf18      	it	ne
   18040:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   18044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   18048:	07db      	lsls	r3, r3, #31
   1804a:	d41e      	bmi.n	1808a <gpio_nrfx_pin_interrupt_configure+0xa6>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1804c:	f10d 0407 	add.w	r4, sp, #7
   18050:	4621      	mov	r1, r4
   18052:	4628      	mov	r0, r5
   18054:	f001 fc08 	bl	19868 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   18058:	4b15      	ldr	r3, [pc, #84]	; (180b0 <gpio_nrfx_pin_interrupt_configure+0xcc>)
   1805a:	4298      	cmp	r0, r3
   1805c:	d114      	bne.n	18088 <gpio_nrfx_pin_interrupt_configure+0xa4>
			err = nrfx_gpiote_channel_alloc(&ch);
   1805e:	4620      	mov	r0, r4
   18060:	f001 fc50 	bl	19904 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   18064:	4b13      	ldr	r3, [pc, #76]	; (180b4 <gpio_nrfx_pin_interrupt_configure+0xd0>)
   18066:	4298      	cmp	r0, r3
   18068:	d00e      	beq.n	18088 <gpio_nrfx_pin_interrupt_configure+0xa4>
				return -ENOMEM;
   1806a:	f06f 000b 	mvn.w	r0, #11
}
   1806e:	b005      	add	sp, #20
   18070:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   18072:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   18076:	d005      	beq.n	18084 <gpio_nrfx_pin_interrupt_configure+0xa0>
   18078:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   1807c:	bf0c      	ite	eq
   1807e:	2302      	moveq	r3, #2
   18080:	2301      	movne	r3, #1
   18082:	e7cb      	b.n	1801c <gpio_nrfx_pin_interrupt_configure+0x38>
   18084:	2303      	movs	r3, #3
   18086:	e7c9      	b.n	1801c <gpio_nrfx_pin_interrupt_configure+0x38>
		trigger_config.p_in_channel = &ch;
   18088:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1808a:	2300      	movs	r3, #0
   1808c:	4619      	mov	r1, r3
   1808e:	aa02      	add	r2, sp, #8
   18090:	4628      	mov	r0, r5
   18092:	f001 fac3 	bl	1961c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   18096:	4b07      	ldr	r3, [pc, #28]	; (180b4 <gpio_nrfx_pin_interrupt_configure+0xd0>)
   18098:	4298      	cmp	r0, r3
   1809a:	d104      	bne.n	180a6 <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   1809c:	2101      	movs	r1, #1
   1809e:	4628      	mov	r0, r5
   180a0:	f001 fc36 	bl	19910 <nrfx_gpiote_trigger_enable>
   180a4:	e7ae      	b.n	18004 <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
   180a6:	f06f 0004 	mvn.w	r0, #4
   180aa:	e7e0      	b.n	1806e <gpio_nrfx_pin_interrupt_configure+0x8a>
   180ac:	50000300 	.word	0x50000300
   180b0:	0bad0004 	.word	0x0bad0004
   180b4:	0bad0000 	.word	0x0bad0000

000180b8 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   180b8:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   180ba:	f001 fc13 	bl	198e4 <nrfx_gpiote_is_init>
   180be:	4604      	mov	r4, r0
   180c0:	b968      	cbnz	r0, 180de <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   180c2:	f001 fbe7 	bl	19894 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   180c6:	4b08      	ldr	r3, [pc, #32]	; (180e8 <gpio_nrfx_init+0x30>)
   180c8:	4298      	cmp	r0, r3
   180ca:	d10a      	bne.n	180e2 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   180cc:	4807      	ldr	r0, [pc, #28]	; (180ec <gpio_nrfx_init+0x34>)
   180ce:	4621      	mov	r1, r4
   180d0:	f001 fbc4 	bl	1985c <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   180d4:	4622      	mov	r2, r4
   180d6:	2105      	movs	r1, #5
   180d8:	2006      	movs	r0, #6
   180da:	f7ed fae3 	bl	56a4 <z_arm_irq_priority_set>
		return 0;
   180de:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   180e0:	bd10      	pop	{r4, pc}
		return -EIO;
   180e2:	f06f 0004 	mvn.w	r0, #4
   180e6:	e7fb      	b.n	180e0 <gpio_nrfx_init+0x28>
   180e8:	0bad0000 	.word	0x0bad0000
   180ec:	000180f1 	.word	0x000180f1

000180f0 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   180f0:	0942      	lsrs	r2, r0, #5
{
   180f2:	b570      	push	{r4, r5, r6, lr}
   180f4:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   180f6:	d002      	beq.n	180fe <nrfx_gpio_handler+0xe>
   180f8:	2a01      	cmp	r2, #1
   180fa:	d015      	beq.n	18128 <nrfx_gpio_handler+0x38>
}
   180fc:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   180fe:	4e0b      	ldr	r6, [pc, #44]	; (1812c <nrfx_gpio_handler+0x3c>)
	gpio_fire_callbacks(list, port, BIT(pin));
   18100:	6932      	ldr	r2, [r6, #16]
   18102:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   18104:	2900      	cmp	r1, #0
   18106:	d0f9      	beq.n	180fc <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
   18108:	f003 031f 	and.w	r3, r3, #31
   1810c:	2501      	movs	r5, #1
	return node->next;
   1810e:	680c      	ldr	r4, [r1, #0]
   18110:	409d      	lsls	r5, r3
		if (cb->pin_mask & pins) {
   18112:	688a      	ldr	r2, [r1, #8]
   18114:	402a      	ands	r2, r5
   18116:	d002      	beq.n	1811e <nrfx_gpio_handler+0x2e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   18118:	684b      	ldr	r3, [r1, #4]
   1811a:	4630      	mov	r0, r6
   1811c:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1811e:	2c00      	cmp	r4, #0
   18120:	d0ec      	beq.n	180fc <nrfx_gpio_handler+0xc>
   18122:	4621      	mov	r1, r4
   18124:	6824      	ldr	r4, [r4, #0]
   18126:	e7f4      	b.n	18112 <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   18128:	4e01      	ldr	r6, [pc, #4]	; (18130 <nrfx_gpio_handler+0x40>)
   1812a:	e7e9      	b.n	18100 <nrfx_gpio_handler+0x10>
   1812c:	00026368 	.word	0x00026368
   18130:	00026380 	.word	0x00026380

00018134 <gpio_nrfx_pin_configure>:
{
   18134:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
   18138:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1813a:	7b3b      	ldrb	r3, [r7, #12]
   1813c:	f001 051f 	and.w	r5, r1, #31
{
   18140:	b085      	sub	sp, #20
   18142:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   18144:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
   18148:	4614      	mov	r4, r2
   1814a:	b9ca      	cbnz	r2, 18180 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
   1814c:	a902      	add	r1, sp, #8
   1814e:	4628      	mov	r0, r5
   18150:	f001 fb8a 	bl	19868 <nrfx_gpiote_channel_get>
   18154:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
   18156:	4628      	mov	r0, r5
   18158:	f001 fc4a 	bl	199f0 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
   1815c:	4b48      	ldr	r3, [pc, #288]	; (18280 <gpio_nrfx_pin_configure+0x14c>)
   1815e:	4298      	cmp	r0, r3
   18160:	d004      	beq.n	1816c <gpio_nrfx_pin_configure+0x38>
		return -EIO;
   18162:	f06f 0004 	mvn.w	r0, #4
}
   18166:	b005      	add	sp, #20
   18168:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
   1816c:	4284      	cmp	r4, r0
   1816e:	d105      	bne.n	1817c <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
   18170:	f89d 0008 	ldrb.w	r0, [sp, #8]
   18174:	f001 fbc0 	bl	198f8 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   18178:	42a0      	cmp	r0, r4
   1817a:	d1f2      	bne.n	18162 <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1817c:	2000      	movs	r0, #0
   1817e:	e7f2      	b.n	18166 <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
   18180:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
   18184:	f10d 0103 	add.w	r1, sp, #3
   18188:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
   1818a:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
   1818e:	f001 fb6b 	bl	19868 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   18192:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
   18194:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   18196:	aa02      	add	r2, sp, #8
   18198:	4649      	mov	r1, r9
   1819a:	4628      	mov	r0, r5
   1819c:	f001 fa3e 	bl	1961c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   181a0:	4b37      	ldr	r3, [pc, #220]	; (18280 <gpio_nrfx_pin_configure+0x14c>)
   181a2:	4298      	cmp	r0, r3
   181a4:	d002      	beq.n	181ac <gpio_nrfx_pin_configure+0x78>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   181a6:	f06f 0015 	mvn.w	r0, #21
   181aa:	e7dc      	b.n	18166 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
   181ac:	4580      	cmp	r8, r0
   181ae:	d103      	bne.n	181b8 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
   181b0:	f89d 0003 	ldrb.w	r0, [sp, #3]
   181b4:	f001 fba0 	bl	198f8 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   181b8:	05a3      	lsls	r3, r4, #22
   181ba:	d54e      	bpl.n	1825a <gpio_nrfx_pin_configure+0x126>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   181bc:	4b31      	ldr	r3, [pc, #196]	; (18284 <gpio_nrfx_pin_configure+0x150>)
   181be:	4a32      	ldr	r2, [pc, #200]	; (18288 <gpio_nrfx_pin_configure+0x154>)
   181c0:	4023      	ands	r3, r4
   181c2:	4293      	cmp	r3, r2
   181c4:	d03a      	beq.n	1823c <gpio_nrfx_pin_configure+0x108>
   181c6:	d80c      	bhi.n	181e2 <gpio_nrfx_pin_configure+0xae>
   181c8:	2b06      	cmp	r3, #6
   181ca:	d014      	beq.n	181f6 <gpio_nrfx_pin_configure+0xc2>
   181cc:	d804      	bhi.n	181d8 <gpio_nrfx_pin_configure+0xa4>
   181ce:	b193      	cbz	r3, 181f6 <gpio_nrfx_pin_configure+0xc2>
   181d0:	2b02      	cmp	r3, #2
   181d2:	d1e8      	bne.n	181a6 <gpio_nrfx_pin_configure+0x72>
   181d4:	2304      	movs	r3, #4
   181d6:	e00e      	b.n	181f6 <gpio_nrfx_pin_configure+0xc2>
   181d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   181dc:	d1e3      	bne.n	181a6 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
   181de:	2301      	movs	r3, #1
   181e0:	e009      	b.n	181f6 <gpio_nrfx_pin_configure+0xc2>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   181e2:	4a2a      	ldr	r2, [pc, #168]	; (1828c <gpio_nrfx_pin_configure+0x158>)
   181e4:	4293      	cmp	r3, r2
   181e6:	d02b      	beq.n	18240 <gpio_nrfx_pin_configure+0x10c>
   181e8:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   181ec:	d02a      	beq.n	18244 <gpio_nrfx_pin_configure+0x110>
   181ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   181f2:	d1d8      	bne.n	181a6 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
   181f4:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
   181f6:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   181fa:	f484 7380 	eor.w	r3, r4, #256	; 0x100
   181fe:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
   18202:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   18204:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
   18208:	bf54      	ite	pl
   1820a:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   1820e:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   18210:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
   18212:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   18216:	d517      	bpl.n	18248 <gpio_nrfx_pin_configure+0x114>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   18218:	687b      	ldr	r3, [r7, #4]
   1821a:	2101      	movs	r1, #1
   1821c:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
   18220:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   18224:	2200      	movs	r2, #0
   18226:	a901      	add	r1, sp, #4
   18228:	4628      	mov	r0, r5
   1822a:	f001 faa5 	bl	19778 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1822e:	4b14      	ldr	r3, [pc, #80]	; (18280 <gpio_nrfx_pin_configure+0x14c>)
   18230:	4298      	cmp	r0, r3
   18232:	bf14      	ite	ne
   18234:	f06f 0015 	mvnne.w	r0, #21
   18238:	2000      	moveq	r0, #0
   1823a:	e794      	b.n	18166 <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
   1823c:	2307      	movs	r3, #7
   1823e:	e7da      	b.n	181f6 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_D0H1;
   18240:	2305      	movs	r3, #5
   18242:	e7d8      	b.n	181f6 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_H0H1;
   18244:	2303      	movs	r3, #3
   18246:	e7d6      	b.n	181f6 <gpio_nrfx_pin_configure+0xc2>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   18248:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   1824a:	bf41      	itttt	mi
   1824c:	687b      	ldrmi	r3, [r7, #4]
   1824e:	2101      	movmi	r1, #1
   18250:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
   18254:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
   18258:	e7e4      	b.n	18224 <gpio_nrfx_pin_configure+0xf0>
	if (flags & GPIO_PULL_UP) {
   1825a:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1825c:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   18260:	bf54      	ite	pl
   18262:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
   18266:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   18268:	461a      	mov	r2, r3
   1826a:	a901      	add	r1, sp, #4
   1826c:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
   1826e:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   18272:	f001 f9d3 	bl	1961c <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   18276:	4b02      	ldr	r3, [pc, #8]	; (18280 <gpio_nrfx_pin_configure+0x14c>)
   18278:	4298      	cmp	r0, r3
   1827a:	f43f af7f 	beq.w	1817c <gpio_nrfx_pin_configure+0x48>
   1827e:	e792      	b.n	181a6 <gpio_nrfx_pin_configure+0x72>
   18280:	0bad0000 	.word	0x0bad0000
   18284:	00f00006 	.word	0x00f00006
   18288:	00100006 	.word	0x00100006
   1828c:	00400002 	.word	0x00400002

00018290 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   18290:	4b02      	ldr	r3, [pc, #8]	; (1829c <flash_nrf_pages_layout+0xc>)
   18292:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   18294:	2301      	movs	r3, #1
   18296:	6013      	str	r3, [r2, #0]
}
   18298:	4770      	bx	lr
   1829a:	bf00      	nop
   1829c:	20003c18 	.word	0x20003c18

000182a0 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   182a0:	4800      	ldr	r0, [pc, #0]	; (182a4 <flash_nrf_get_parameters+0x4>)
   182a2:	4770      	bx	lr
   182a4:	000270a4 	.word	0x000270a4

000182a8 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
   182a8:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   182aa:	2201      	movs	r2, #1
   182ac:	4611      	mov	r1, r2
   182ae:	4807      	ldr	r0, [pc, #28]	; (182cc <nrf_flash_init+0x24>)
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   182b0:	4c07      	ldr	r4, [pc, #28]	; (182d0 <nrf_flash_init+0x28>)
   182b2:	f00d fc37 	bl	25b24 <z_impl_k_sem_init>
	nrf_flash_sync_init();
   182b6:	f000 f9c3 	bl	18640 <nrf_flash_sync_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   182ba:	f00d f98c 	bl	255d6 <nrfx_nvmc_flash_page_count_get>
   182be:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   182c0:	f00d f985 	bl	255ce <nrfx_nvmc_flash_page_size_get>
   182c4:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
   182c6:	2000      	movs	r0, #0
   182c8:	bd10      	pop	{r4, pc}
   182ca:	bf00      	nop
   182cc:	20003c20 	.word	0x20003c20
   182d0:	20003c18 	.word	0x20003c18

000182d4 <restore_pofwarn.part.0>:
    uint32_t pofcon = p_reg->POFCON;
   182d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   182d8:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
    uint32_t pofcon = p_reg->POFCON;
   182dc:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
   182e0:	f001 011e 	and.w	r1, r1, #30
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   182e4:	f023 031f 	bic.w	r3, r3, #31
   182e8:	430b      	orrs	r3, r1
    pofcon |=
   182ea:	f043 0301 	orr.w	r3, r3, #1
    p_reg->POFCON = pofcon;
   182ee:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

	if (pofcon_enabled) {
		pof_thr = nrf_power_pofcon_get(NRF_POWER, NULL);

		nrf_power_pofcon_set(NRF_POWER, true, pof_thr);
		pofcon_enabled = false;
   182f2:	4b02      	ldr	r3, [pc, #8]	; (182fc <restore_pofwarn.part.0+0x28>)
   182f4:	2200      	movs	r2, #0
   182f6:	701a      	strb	r2, [r3, #0]
	}
}
   182f8:	4770      	bx	lr
   182fa:	bf00      	nop
   182fc:	20004107 	.word	0x20004107

00018300 <suspend_pofwarn>:
    #else
        #if defined (NRF52805_XXAA) || defined (DEVELOP_IN_NRF52805)\
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   18300:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   18304:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   18308:	2b08      	cmp	r3, #8
   1830a:	d122      	bne.n	18352 <suspend_pofwarn+0x52>
    uint32_t pofcon = p_reg->POFCON;
   1830c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   18310:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
	if (enabled) {
   18314:	f011 0001 	ands.w	r0, r1, #1
   18318:	d01c      	beq.n	18354 <suspend_pofwarn+0x54>
    uint32_t pofcon = p_reg->POFCON;
   1831a:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
   1831e:	f001 011e 	and.w	r1, r1, #30
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   18322:	f020 001f 	bic.w	r0, r0, #31
    pofcon |=
   18326:	4308      	orrs	r0, r1
    p_reg->POFCON = pofcon;
   18328:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1832c:	f8d2 0108 	ldr.w	r0, [r2, #264]	; 0x108
		if (nrf_power_event_check(NRF_POWER, NRF_POWER_EVENT_POFWARN)) {
   18330:	b158      	cbz	r0, 1834a <suspend_pofwarn+0x4a>
    uint32_t pofcon = p_reg->POFCON;
   18332:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   18336:	f023 031f 	bic.w	r3, r3, #31
   1833a:	430b      	orrs	r3, r1
    pofcon |=
   1833c:	f043 0301 	orr.w	r3, r3, #1
    p_reg->POFCON = pofcon;
   18340:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			return -ECANCELED;
   18344:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   18348:	4770      	bx	lr
		pofcon_enabled = enabled;
   1834a:	4b03      	ldr	r3, [pc, #12]	; (18358 <suspend_pofwarn+0x58>)
   1834c:	2201      	movs	r2, #1
   1834e:	701a      	strb	r2, [r3, #0]
   18350:	4770      	bx	lr
		return 0;
   18352:	2000      	movs	r0, #0
}
   18354:	4770      	bx	lr
   18356:	bf00      	nop
   18358:	20004107 	.word	0x20004107

0001835c <erase_op>:
{
   1835c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1835e:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   18360:	f00d f935 	bl	255ce <nrfx_nvmc_flash_page_size_get>
	if (e_ctx->enable_time_limit) {
   18364:	7b23      	ldrb	r3, [r4, #12]
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   18366:	4605      	mov	r5, r0
	if (e_ctx->enable_time_limit) {
   18368:	b10b      	cbz	r3, 1836e <erase_op+0x12>
		nrf_flash_sync_get_timestamp_begin();
   1836a:	f000 f97b 	bl	18664 <nrf_flash_sync_get_timestamp_begin>
	if (pofcon_enabled) {
   1836e:	4f13      	ldr	r7, [pc, #76]	; (183bc <erase_op+0x60>)
{
   18370:	2600      	movs	r6, #0
		if (SUSPEND_POFWARN()) {
   18372:	f7ff ffc5 	bl	18300 <suspend_pofwarn>
   18376:	b9e8      	cbnz	r0, 183b4 <erase_op+0x58>
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   18378:	6860      	ldr	r0, [r4, #4]
   1837a:	f001 fc3f 	bl	19bfc <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
   1837e:	68a3      	ldr	r3, [r4, #8]
   18380:	1b5b      	subs	r3, r3, r5
   18382:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
   18384:	6863      	ldr	r3, [r4, #4]
   18386:	442b      	add	r3, r5
   18388:	6063      	str	r3, [r4, #4]
	if (pofcon_enabled) {
   1838a:	783b      	ldrb	r3, [r7, #0]
   1838c:	b10b      	cbz	r3, 18392 <erase_op+0x36>
   1838e:	f7ff ffa1 	bl	182d4 <restore_pofwarn.part.0>
		if (e_ctx->enable_time_limit) {
   18392:	7b23      	ldrb	r3, [r4, #12]
		i++;
   18394:	3601      	adds	r6, #1
		if (e_ctx->enable_time_limit) {
   18396:	b93b      	cbnz	r3, 183a8 <erase_op+0x4c>
	} while (e_ctx->len > 0);
   18398:	68a3      	ldr	r3, [r4, #8]
   1839a:	2b00      	cmp	r3, #0
   1839c:	d1e9      	bne.n	18372 <erase_op+0x16>
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
   1839e:	68a0      	ldr	r0, [r4, #8]
   183a0:	3800      	subs	r0, #0
   183a2:	bf18      	it	ne
   183a4:	2001      	movne	r0, #1
}
   183a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (nrf_flash_sync_check_time_limit(i)) {
   183a8:	4630      	mov	r0, r6
   183aa:	f7ea fbbd 	bl	2b28 <nrf_flash_sync_check_time_limit>
   183ae:	2800      	cmp	r0, #0
   183b0:	d0f2      	beq.n	18398 <erase_op+0x3c>
   183b2:	e7f4      	b.n	1839e <erase_op+0x42>
			return -ECANCELED;
   183b4:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   183b8:	e7f5      	b.n	183a6 <erase_op+0x4a>
   183ba:	bf00      	nop
   183bc:	20004107 	.word	0x20004107

000183c0 <flash_nrf_erase>:
{
   183c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   183c2:	b087      	sub	sp, #28
   183c4:	460e      	mov	r6, r1
   183c6:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   183c8:	f00d f901 	bl	255ce <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   183cc:	4629      	mov	r1, r5
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   183ce:	4607      	mov	r7, r0
	if (is_regular_addr_valid(addr, size)) {
   183d0:	4630      	mov	r0, r6
   183d2:	f00c feba 	bl	2514a <is_regular_addr_valid>
   183d6:	b3c8      	cbz	r0, 1844c <flash_nrf_erase+0x8c>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   183d8:	fbb6 f3f7 	udiv	r3, r6, r7
   183dc:	fb07 6313 	mls	r3, r7, r3, r6
   183e0:	bba3      	cbnz	r3, 1844c <flash_nrf_erase+0x8c>
   183e2:	fbb5 f4f7 	udiv	r4, r5, r7
   183e6:	fb07 5414 	mls	r4, r7, r4, r5
   183ea:	bb7c      	cbnz	r4, 1844c <flash_nrf_erase+0x8c>
		if (!n_pages) {
   183ec:	42bd      	cmp	r5, r7
   183ee:	d322      	bcc.n	18436 <flash_nrf_erase+0x76>
	return z_impl_k_sem_take(sem, timeout);
   183f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   183f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   183f8:	4816      	ldr	r0, [pc, #88]	; (18454 <flash_nrf_erase+0x94>)
   183fa:	f002 ffab 	bl	1b354 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   183fe:	f00c fecb 	bl	25198 <nrf_flash_sync_is_required>
   18402:	ab02      	add	r3, sp, #8
   18404:	4601      	mov	r1, r0
	struct flash_context context = {
   18406:	2210      	movs	r2, #16
	if (nrf_flash_sync_is_required()) {
   18408:	b1c0      	cbz	r0, 1843c <flash_nrf_erase+0x7c>
	struct flash_context context = {
   1840a:	4621      	mov	r1, r4
   1840c:	4618      	mov	r0, r3
   1840e:	f005 fe1b 	bl	1e048 <memset>
   18412:	2201      	movs	r2, #1
   18414:	f88d 2014 	strb.w	r2, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   18418:	4a0f      	ldr	r2, [pc, #60]	; (18458 <flash_nrf_erase+0x98>)
   1841a:	e9cd 2000 	strd	r2, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   1841e:	480f      	ldr	r0, [pc, #60]	; (1845c <flash_nrf_erase+0x9c>)
	struct flash_context context = {
   18420:	e9cd 6503 	strd	r6, r5, [sp, #12]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   18424:	f000 f916 	bl	18654 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   18428:	4668      	mov	r0, sp
   1842a:	f7ea fb01 	bl	2a30 <nrf_flash_sync_exe>
	return	erase_op(&context);
   1842e:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   18430:	4808      	ldr	r0, [pc, #32]	; (18454 <flash_nrf_erase+0x94>)
   18432:	f002 ff69 	bl	1b308 <z_impl_k_sem_give>
}
   18436:	4620      	mov	r0, r4
   18438:	b007      	add	sp, #28
   1843a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct flash_context context = {
   1843c:	4618      	mov	r0, r3
   1843e:	f005 fe03 	bl	1e048 <memset>
   18442:	e9cd 6503 	strd	r6, r5, [sp, #12]
	return	erase_op(&context);
   18446:	f7ff ff89 	bl	1835c <erase_op>
   1844a:	e7f0      	b.n	1842e <flash_nrf_erase+0x6e>
		return -EINVAL;
   1844c:	f06f 0415 	mvn.w	r4, #21
   18450:	e7f1      	b.n	18436 <flash_nrf_erase+0x76>
   18452:	bf00      	nop
   18454:	20003c20 	.word	0x20003c20
   18458:	0001835d 	.word	0x0001835d
   1845c:	00015e64 	.word	0x00015e64

00018460 <write_op>:
{
   18460:	b570      	push	{r4, r5, r6, lr}
	if (w_ctx->enable_time_limit) {
   18462:	7b03      	ldrb	r3, [r0, #12]
{
   18464:	4604      	mov	r4, r0
	if (w_ctx->enable_time_limit) {
   18466:	b10b      	cbz	r3, 1846c <write_op+0xc>
		nrf_flash_sync_get_timestamp_begin();
   18468:	f000 f8fc 	bl	18664 <nrf_flash_sync_get_timestamp_begin>
	if (pofcon_enabled) {
   1846c:	4e19      	ldr	r6, [pc, #100]	; (184d4 <write_op+0x74>)
{
   1846e:	2501      	movs	r5, #1
	while (w_ctx->len >= sizeof(uint32_t)) {
   18470:	68a3      	ldr	r3, [r4, #8]
   18472:	2b03      	cmp	r3, #3
   18474:	d806      	bhi.n	18484 <write_op+0x24>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   18476:	4a18      	ldr	r2, [pc, #96]	; (184d8 <write_op+0x78>)
   18478:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   1847c:	07db      	lsls	r3, r3, #31
   1847e:	d5fb      	bpl.n	18478 <write_op+0x18>
	return FLASH_OP_DONE;
   18480:	2000      	movs	r0, #0
}
   18482:	bd70      	pop	{r4, r5, r6, pc}
		if (SUSPEND_POFWARN()) {
   18484:	f7ff ff3c 	bl	18300 <suspend_pofwarn>
   18488:	bb08      	cbnz	r0, 184ce <write_op+0x6e>
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
   1848a:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   1848c:	6860      	ldr	r0, [r4, #4]
   1848e:	6819      	ldr	r1, [r3, #0]
   18490:	f001 fbd4 	bl	19c3c <nrfx_nvmc_word_write>
	if (pofcon_enabled) {
   18494:	7833      	ldrb	r3, [r6, #0]
   18496:	b10b      	cbz	r3, 1849c <write_op+0x3c>
   18498:	f7ff ff1c 	bl	182d4 <restore_pofwarn.part.0>
	w_ctx->flash_addr += shift;
   1849c:	6863      	ldr	r3, [r4, #4]
   1849e:	3304      	adds	r3, #4
   184a0:	6063      	str	r3, [r4, #4]
	w_ctx->data_addr += shift;
   184a2:	6823      	ldr	r3, [r4, #0]
   184a4:	3304      	adds	r3, #4
   184a6:	6023      	str	r3, [r4, #0]
	w_ctx->len -= shift;
   184a8:	68a3      	ldr	r3, [r4, #8]
   184aa:	3b04      	subs	r3, #4
   184ac:	60a3      	str	r3, [r4, #8]
		if (w_ctx->enable_time_limit) {
   184ae:	7b23      	ldrb	r3, [r4, #12]
		i++;
   184b0:	3501      	adds	r5, #1
		if (w_ctx->enable_time_limit) {
   184b2:	2b00      	cmp	r3, #0
   184b4:	d0dc      	beq.n	18470 <write_op+0x10>
			if (nrf_flash_sync_check_time_limit(i)) {
   184b6:	4628      	mov	r0, r5
   184b8:	f7ea fb36 	bl	2b28 <nrf_flash_sync_check_time_limit>
   184bc:	2800      	cmp	r0, #0
   184be:	d0d7      	beq.n	18470 <write_op+0x10>
   184c0:	4a05      	ldr	r2, [pc, #20]	; (184d8 <write_op+0x78>)
   184c2:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   184c6:	07d9      	lsls	r1, r3, #31
   184c8:	d5fb      	bpl.n	184c2 <write_op+0x62>
				return FLASH_OP_ONGOING;
   184ca:	2001      	movs	r0, #1
   184cc:	e7d9      	b.n	18482 <write_op+0x22>
			return -ECANCELED;
   184ce:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   184d2:	e7d6      	b.n	18482 <write_op+0x22>
   184d4:	20004107 	.word	0x20004107
   184d8:	4001e000 	.word	0x4001e000

000184dc <flash_nrf_write>:
{
   184dc:	b570      	push	{r4, r5, r6, lr}
   184de:	460d      	mov	r5, r1
   184e0:	b086      	sub	sp, #24
	if (is_regular_addr_valid(addr, len)) {
   184e2:	4619      	mov	r1, r3
   184e4:	4628      	mov	r0, r5
{
   184e6:	4616      	mov	r6, r2
   184e8:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   184ea:	f00c fe2e 	bl	2514a <is_regular_addr_valid>
   184ee:	b360      	cbz	r0, 1854a <flash_nrf_write+0x6e>
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   184f0:	ea45 0304 	orr.w	r3, r5, r4
   184f4:	079b      	lsls	r3, r3, #30
   184f6:	d128      	bne.n	1854a <flash_nrf_write+0x6e>
	if (!len) {
   184f8:	b1fc      	cbz	r4, 1853a <flash_nrf_write+0x5e>
	return z_impl_k_sem_take(sem, timeout);
   184fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   184fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   18502:	4813      	ldr	r0, [pc, #76]	; (18550 <flash_nrf_write+0x74>)
   18504:	f002 ff26 	bl	1b354 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   18508:	f00c fe46 	bl	25198 <nrf_flash_sync_is_required>
   1850c:	4603      	mov	r3, r0
	struct flash_context context = {
   1850e:	e9cd 6502 	strd	r6, r5, [sp, #8]
   18512:	a802      	add	r0, sp, #8
   18514:	9404      	str	r4, [sp, #16]
	if (nrf_flash_sync_is_required()) {
   18516:	b19b      	cbz	r3, 18540 <flash_nrf_write+0x64>
	struct flash_context context = {
   18518:	2301      	movs	r3, #1
   1851a:	f88d 3014 	strb.w	r3, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   1851e:	4b0d      	ldr	r3, [pc, #52]	; (18554 <flash_nrf_write+0x78>)
   18520:	e9cd 3000 	strd	r3, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_WRITE);
   18524:	f641 504c 	movw	r0, #7500	; 0x1d4c
   18528:	f000 f894 	bl	18654 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   1852c:	4668      	mov	r0, sp
   1852e:	f7ea fa7f 	bl	2a30 <nrf_flash_sync_exe>
	return write_op(&context);
   18532:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   18534:	4806      	ldr	r0, [pc, #24]	; (18550 <flash_nrf_write+0x74>)
   18536:	f002 fee7 	bl	1b308 <z_impl_k_sem_give>
}
   1853a:	4620      	mov	r0, r4
   1853c:	b006      	add	sp, #24
   1853e:	bd70      	pop	{r4, r5, r6, pc}
	struct flash_context context = {
   18540:	f88d 3014 	strb.w	r3, [sp, #20]
	return write_op(&context);
   18544:	f7ff ff8c 	bl	18460 <write_op>
   18548:	e7f3      	b.n	18532 <flash_nrf_write+0x56>
		return -EINVAL;
   1854a:	f06f 0415 	mvn.w	r4, #21
   1854e:	e7f4      	b.n	1853a <flash_nrf_write+0x5e>
   18550:	20003c20 	.word	0x20003c20
   18554:	00018461 	.word	0x00018461

00018558 <time_slot_callback_work>:
{
   18558:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1855a:	9b07      	ldr	r3, [sp, #28]
	rc = op_desc->handler(op_desc->context);
   1855c:	e9d3 2000 	ldrd	r2, r0, [r3]
   18560:	4790      	blx	r2
	if (rc != FLASH_OP_ONGOING) {
   18562:	2801      	cmp	r0, #1
	rc = op_desc->handler(op_desc->context);
   18564:	4604      	mov	r4, r0
	if (rc != FLASH_OP_ONGOING) {
   18566:	d013      	beq.n	18590 <time_slot_callback_work+0x38>
		ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   18568:	f10d 010f 	add.w	r1, sp, #15
   1856c:	f10d 000e 	add.w	r0, sp, #14
   18570:	f00b fcd9 	bl	23f26 <ll_timeslice_ticker_id_get>
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   18574:	2300      	movs	r3, #0
   18576:	9300      	str	r3, [sp, #0]
   18578:	4619      	mov	r1, r3
   1857a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   1857e:	f89d 000e 	ldrb.w	r0, [sp, #14]
   18582:	f7f8 f99f 	bl	108c4 <ticker_stop>
		_ticker_sync_context.result = (rc == FLASH_OP_DONE) ? 0 : rc;
   18586:	4b03      	ldr	r3, [pc, #12]	; (18594 <time_slot_callback_work+0x3c>)
   18588:	60dc      	str	r4, [r3, #12]
   1858a:	4803      	ldr	r0, [pc, #12]	; (18598 <time_slot_callback_work+0x40>)
   1858c:	f002 febc 	bl	1b308 <z_impl_k_sem_give>
}
   18590:	b004      	add	sp, #16
   18592:	bd10      	pop	{r4, pc}
   18594:	20003c38 	.word	0x20003c38
   18598:	20003c48 	.word	0x20003c48

0001859c <time_slot_delay>:
{
   1859c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   185a0:	b08d      	sub	sp, #52	; 0x34
   185a2:	4606      	mov	r6, r0
   185a4:	460f      	mov	r7, r1
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   185a6:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   185aa:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
{
   185ae:	4690      	mov	r8, r2
   185b0:	4699      	mov	r9, r3
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   185b2:	f00b fcb8 	bl	23f26 <ll_timeslice_ticker_id_get>
	err = ticker_start(instance_index, /* Radio instance ticker */
   185b6:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   185ba:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   185be:	9700      	str	r7, [sp, #0]
   185c0:	2400      	movs	r4, #0
   185c2:	3501      	adds	r5, #1
   185c4:	4633      	mov	r3, r6
   185c6:	e9cd 4407 	strd	r4, r4, [sp, #28]
   185ca:	e9cd 8905 	strd	r8, r9, [sp, #20]
   185ce:	e9cd 4403 	strd	r4, r4, [sp, #12]
   185d2:	e9cd 4401 	strd	r4, r4, [sp, #4]
   185d6:	b2ea      	uxtb	r2, r5
   185d8:	2101      	movs	r1, #1
   185da:	f00b fbee 	bl	23dba <ticker_start>
	if (err != TICKER_STATUS_SUCCESS && err != TICKER_STATUS_BUSY) {
   185de:	f030 0302 	bics.w	r3, r0, #2
   185e2:	d00d      	beq.n	18600 <time_slot_delay+0x64>
		_ticker_sync_context.result = 0;
   185e4:	4b08      	ldr	r3, [pc, #32]	; (18608 <time_slot_delay+0x6c>)
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   185e6:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
		_ticker_sync_context.result = 0;
   185ea:	60dc      	str	r4, [r3, #12]
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   185ec:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   185f0:	9400      	str	r4, [sp, #0]
   185f2:	4623      	mov	r3, r4
   185f4:	4621      	mov	r1, r4
   185f6:	f7f8 f965 	bl	108c4 <ticker_stop>
   185fa:	4804      	ldr	r0, [pc, #16]	; (1860c <time_slot_delay+0x70>)
   185fc:	f002 fe84 	bl	1b308 <z_impl_k_sem_give>
}
   18600:	b00d      	add	sp, #52	; 0x34
   18602:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   18606:	bf00      	nop
   18608:	20003c38 	.word	0x20003c38
   1860c:	20003c48 	.word	0x20003c48

00018610 <time_slot_callback_prepare>:
	time_slot_delay(ticks_at_expire,
   18610:	9b01      	ldr	r3, [sp, #4]
   18612:	4a02      	ldr	r2, [pc, #8]	; (1861c <time_slot_callback_prepare+0xc>)
   18614:	2131      	movs	r1, #49	; 0x31
   18616:	f7ff bfc1 	b.w	1859c <time_slot_delay>
   1861a:	bf00      	nop
   1861c:	00018621 	.word	0x00018621

00018620 <time_slot_callback_abort>:
{
   18620:	b570      	push	{r4, r5, r6, lr}
   18622:	9d05      	ldr	r5, [sp, #20]
   18624:	4604      	mov	r4, r0
	ll_radio_state_abort();
   18626:	f7f9 fcbb 	bl	11fa0 <ll_radio_state_abort>
	time_slot_delay(ticks_at_expire,
   1862a:	462b      	mov	r3, r5
   1862c:	4620      	mov	r0, r4
   1862e:	4a03      	ldr	r2, [pc, #12]	; (1863c <time_slot_callback_abort+0x1c>)
}
   18630:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	time_slot_delay(ticks_at_expire,
   18634:	2106      	movs	r1, #6
   18636:	f7ff bfb1 	b.w	1859c <time_slot_delay>
   1863a:	bf00      	nop
   1863c:	00018559 	.word	0x00018559

00018640 <nrf_flash_sync_init>:
{
   18640:	b508      	push	{r3, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   18642:	2201      	movs	r2, #1
   18644:	2100      	movs	r1, #0
   18646:	4802      	ldr	r0, [pc, #8]	; (18650 <nrf_flash_sync_init+0x10>)
   18648:	f00d fa6c 	bl	25b24 <z_impl_k_sem_init>
}
   1864c:	2000      	movs	r0, #0
   1864e:	bd08      	pop	{r3, pc}
   18650:	20003c48 	.word	0x20003c48

00018654 <nrf_flash_sync_set_context>:
	_ticker_sync_context.interval = duration - FLASH_SYNC_SWITCHING_TIME;
   18654:	4b02      	ldr	r3, [pc, #8]	; (18660 <nrf_flash_sync_set_context+0xc>)
   18656:	f2a0 62a4 	subw	r2, r0, #1700	; 0x6a4
	_ticker_sync_context.slot = duration;
   1865a:	e9c3 2000 	strd	r2, r0, [r3]
}
   1865e:	4770      	bx	lr
   18660:	20003c38 	.word	0x20003c38

00018664 <nrf_flash_sync_get_timestamp_begin>:
{
   18664:	b508      	push	{r3, lr}
	_ticker_sync_context.ticks_begin = ticker_ticks_now_get();
   18666:	f00b fbdb 	bl	23e20 <ticker_ticks_now_get>
   1866a:	4b01      	ldr	r3, [pc, #4]	; (18670 <nrf_flash_sync_get_timestamp_begin+0xc>)
   1866c:	6098      	str	r0, [r3, #8]
}
   1866e:	bd08      	pop	{r3, pc}
   18670:	20003c38 	.word	0x20003c38

00018674 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   18674:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   18676:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   1867a:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
   1867c:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   1867e:	6002      	str	r2, [r0, #0]
}
   18680:	4802      	ldr	r0, [pc, #8]	; (1868c <nrf_gpio_pin_port_decode+0x18>)
   18682:	bf18      	it	ne
   18684:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   18688:	4770      	bx	lr
   1868a:	bf00      	nop
   1868c:	50000300 	.word	0x50000300

00018690 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   18690:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   18692:	794b      	ldrb	r3, [r1, #5]
   18694:	2b01      	cmp	r3, #1
   18696:	d026      	beq.n	186e6 <uarte_nrfx_configure+0x56>
   18698:	2b03      	cmp	r3, #3
   1869a:	d121      	bne.n	186e0 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   1869c:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1869e:	798b      	ldrb	r3, [r1, #6]
   186a0:	2b03      	cmp	r3, #3
   186a2:	d11d      	bne.n	186e0 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   186a4:	79cc      	ldrb	r4, [r1, #7]
   186a6:	b10c      	cbz	r4, 186ac <uarte_nrfx_configure+0x1c>
   186a8:	2c01      	cmp	r4, #1
   186aa:	d119      	bne.n	186e0 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   186ac:	790a      	ldrb	r2, [r1, #4]
   186ae:	b112      	cbz	r2, 186b6 <uarte_nrfx_configure+0x26>
   186b0:	2a02      	cmp	r2, #2
   186b2:	d115      	bne.n	186e0 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   186b4:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   186b6:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   186b8:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   186ba:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   186be:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   186c0:	d065      	beq.n	1878e <uarte_nrfx_configure+0xfe>
   186c2:	d82d      	bhi.n	18720 <uarte_nrfx_configure+0x90>
   186c4:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   186c8:	d064      	beq.n	18794 <uarte_nrfx_configure+0x104>
   186ca:	d816      	bhi.n	186fa <uarte_nrfx_configure+0x6a>
   186cc:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   186d0:	d062      	beq.n	18798 <uarte_nrfx_configure+0x108>
   186d2:	d80a      	bhi.n	186ea <uarte_nrfx_configure+0x5a>
   186d4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   186d8:	d061      	beq.n	1879e <uarte_nrfx_configure+0x10e>
   186da:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   186de:	d061      	beq.n	187a4 <uarte_nrfx_configure+0x114>
   186e0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   186e4:	e052      	b.n	1878c <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
   186e6:	2600      	movs	r6, #0
   186e8:	e7d9      	b.n	1869e <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   186ea:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   186ee:	d05c      	beq.n	187aa <uarte_nrfx_configure+0x11a>
   186f0:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   186f4:	d1f4      	bne.n	186e0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   186f6:	4b37      	ldr	r3, [pc, #220]	; (187d4 <uarte_nrfx_configure+0x144>)
   186f8:	e03c      	b.n	18774 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   186fa:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   186fe:	d057      	beq.n	187b0 <uarte_nrfx_configure+0x120>
   18700:	d807      	bhi.n	18712 <uarte_nrfx_configure+0x82>
   18702:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   18706:	d055      	beq.n	187b4 <uarte_nrfx_configure+0x124>
   18708:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1870c:	d1e8      	bne.n	186e0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1870e:	4b32      	ldr	r3, [pc, #200]	; (187d8 <uarte_nrfx_configure+0x148>)
   18710:	e030      	b.n	18774 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   18712:	f647 2712 	movw	r7, #31250	; 0x7a12
   18716:	42bb      	cmp	r3, r7
   18718:	d1e2      	bne.n	186e0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1871a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1871e:	e029      	b.n	18774 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   18720:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   18724:	d048      	beq.n	187b8 <uarte_nrfx_configure+0x128>
   18726:	d813      	bhi.n	18750 <uarte_nrfx_configure+0xc0>
   18728:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1872c:	d047      	beq.n	187be <uarte_nrfx_configure+0x12e>
   1872e:	d809      	bhi.n	18744 <uarte_nrfx_configure+0xb4>
   18730:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   18734:	42bb      	cmp	r3, r7
   18736:	d044      	beq.n	187c2 <uarte_nrfx_configure+0x132>
   18738:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1873c:	d1d0      	bne.n	186e0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1873e:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   18742:	e017      	b.n	18774 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   18744:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   18748:	d1ca      	bne.n	186e0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1874a:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1874e:	e011      	b.n	18774 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   18750:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   18754:	d038      	beq.n	187c8 <uarte_nrfx_configure+0x138>
   18756:	d808      	bhi.n	1876a <uarte_nrfx_configure+0xda>
   18758:	4f20      	ldr	r7, [pc, #128]	; (187dc <uarte_nrfx_configure+0x14c>)
   1875a:	42bb      	cmp	r3, r7
   1875c:	d037      	beq.n	187ce <uarte_nrfx_configure+0x13e>
   1875e:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   18762:	d1bd      	bne.n	186e0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   18764:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   18768:	e004      	b.n	18774 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1876a:	4f1d      	ldr	r7, [pc, #116]	; (187e0 <uarte_nrfx_configure+0x150>)
   1876c:	42bb      	cmp	r3, r7
   1876e:	d1b7      	bne.n	186e0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   18770:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   18774:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   18776:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
   1877a:	1d03      	adds	r3, r0, #4
   1877c:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
   1877e:	4334      	orrs	r4, r6
   18780:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   18782:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   18786:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   1878a:	2000      	movs	r0, #0
}
   1878c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1878e:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   18792:	e7ef      	b.n	18774 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   18794:	4b13      	ldr	r3, [pc, #76]	; (187e4 <uarte_nrfx_configure+0x154>)
   18796:	e7ed      	b.n	18774 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   18798:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1879c:	e7ea      	b.n	18774 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
   1879e:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   187a2:	e7e7      	b.n	18774 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   187a4:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   187a8:	e7e4      	b.n	18774 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   187aa:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   187ae:	e7e1      	b.n	18774 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   187b0:	4b0d      	ldr	r3, [pc, #52]	; (187e8 <uarte_nrfx_configure+0x158>)
   187b2:	e7df      	b.n	18774 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   187b4:	4b0d      	ldr	r3, [pc, #52]	; (187ec <uarte_nrfx_configure+0x15c>)
   187b6:	e7dd      	b.n	18774 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   187b8:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   187bc:	e7da      	b.n	18774 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   187be:	4b0c      	ldr	r3, [pc, #48]	; (187f0 <uarte_nrfx_configure+0x160>)
   187c0:	e7d8      	b.n	18774 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   187c2:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   187c6:	e7d5      	b.n	18774 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   187c8:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   187cc:	e7d2      	b.n	18774 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   187ce:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   187d2:	e7cf      	b.n	18774 <uarte_nrfx_configure+0xe4>
   187d4:	0013b000 	.word	0x0013b000
   187d8:	004ea000 	.word	0x004ea000
   187dc:	0003d090 	.word	0x0003d090
   187e0:	000f4240 	.word	0x000f4240
   187e4:	00275000 	.word	0x00275000
   187e8:	0075c000 	.word	0x0075c000
   187ec:	003af000 	.word	0x003af000
   187f0:	013a9000 	.word	0x013a9000

000187f4 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   187f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
   187f6:	6906      	ldr	r6, [r0, #16]
{
   187f8:	4605      	mov	r5, r0
   187fa:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   187fc:	f00d f884 	bl	25908 <k_is_in_isr>
   18800:	b910      	cbnz	r0, 18808 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
   18802:	4b20      	ldr	r3, [pc, #128]	; (18884 <uarte_nrfx_poll_out+0x90>)
	int key;

	if (isr_mode) {
   18804:	781b      	ldrb	r3, [r3, #0]
   18806:	b983      	cbnz	r3, 1882a <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   18808:	f04f 0320 	mov.w	r3, #32
   1880c:	f3ef 8411 	mrs	r4, BASEPRI
   18810:	f383 8812 	msr	BASEPRI_MAX, r3
   18814:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   18818:	6868      	ldr	r0, [r5, #4]
   1881a:	f00c fd96 	bl	2534a <is_tx_ready.isra.0>
   1881e:	bb28      	cbnz	r0, 1886c <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
   18820:	f384 8811 	msr	BASEPRI, r4
   18824:	f3bf 8f6f 	isb	sy
}
   18828:	e7ee      	b.n	18808 <uarte_nrfx_poll_out+0x14>
{
   1882a:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1882c:	6868      	ldr	r0, [r5, #4]
   1882e:	f00c fd8c 	bl	2534a <is_tx_ready.isra.0>
   18832:	b970      	cbnz	r0, 18852 <uarte_nrfx_poll_out+0x5e>
   18834:	2001      	movs	r0, #1
   18836:	f00c fe40 	bl	254ba <nrfx_busy_wait>
   1883a:	3c01      	subs	r4, #1
   1883c:	d1f6      	bne.n	1882c <uarte_nrfx_poll_out+0x38>
	return z_impl_k_sleep(timeout);
   1883e:	2100      	movs	r1, #0
   18840:	2021      	movs	r0, #33	; 0x21
   18842:	f003 fa45 	bl	1bcd0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   18846:	e7f0      	b.n	1882a <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   18848:	f384 8811 	msr	BASEPRI, r4
   1884c:	f3bf 8f6f 	isb	sy
}
   18850:	e7f5      	b.n	1883e <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
   18852:	f04f 0320 	mov.w	r3, #32
   18856:	f3ef 8411 	mrs	r4, BASEPRI
   1885a:	f383 8812 	msr	BASEPRI_MAX, r3
   1885e:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   18862:	6868      	ldr	r0, [r5, #4]
   18864:	f00c fd71 	bl	2534a <is_tx_ready.isra.0>
   18868:	2800      	cmp	r0, #0
   1886a:	d0ed      	beq.n	18848 <uarte_nrfx_poll_out+0x54>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
   1886c:	4631      	mov	r1, r6
	tx_start(dev, &data->char_out, 1);
   1886e:	2201      	movs	r2, #1
	data->char_out = c;
   18870:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
   18874:	6868      	ldr	r0, [r5, #4]
   18876:	f00c fd4d 	bl	25314 <tx_start.isra.0>
	__asm__ volatile(
   1887a:	f384 8811 	msr	BASEPRI, r4
   1887e:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   18882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18884:	2000412e 	.word	0x2000412e

00018888 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   18888:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1888c:	2200      	movs	r2, #0
   1888e:	4607      	mov	r7, r0
   18890:	2101      	movs	r1, #1
   18892:	2002      	movs	r0, #2
   18894:	f7ec ff06 	bl	56a4 <z_arm_irq_priority_set>
   18898:	2002      	movs	r0, #2
   1889a:	f7ec fed1 	bl	5640 <arch_irq_enable>
	const struct uarte_nrfx_config *config = dev->config;
   1889e:	f8d7 8004 	ldr.w	r8, [r7, #4]
	struct uarte_nrfx_data *data = dev->data;
   188a2:	693e      	ldr	r6, [r7, #16]
	return config->uarte_regs;
   188a4:	f8d8 4000 	ldr.w	r4, [r8]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   188a8:	2300      	movs	r3, #0
   188aa:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	data->dev = dev;
   188ae:	6037      	str	r7, [r6, #0]
	uarte_nrfx_pins_configure(dev, false);
   188b0:	687d      	ldr	r5, [r7, #4]
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   188b2:	68eb      	ldr	r3, [r5, #12]
   188b4:	1c5a      	adds	r2, r3, #1
   188b6:	d013      	beq.n	188e0 <uarte_0_init+0x58>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   188b8:	a801      	add	r0, sp, #4
   188ba:	9301      	str	r3, [sp, #4]
   188bc:	f7ff feda 	bl	18674 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   188c0:	9a01      	ldr	r2, [sp, #4]
   188c2:	2301      	movs	r3, #1
   188c4:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   188c6:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
   188ca:	68eb      	ldr	r3, [r5, #12]
   188cc:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   188ce:	a801      	add	r0, sp, #4
   188d0:	f7ff fed0 	bl	18674 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   188d4:	9b01      	ldr	r3, [sp, #4]
   188d6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   188da:	2203      	movs	r2, #3
   188dc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   188e0:	6928      	ldr	r0, [r5, #16]
   188e2:	1c43      	adds	r3, r0, #1
   188e4:	d006      	beq.n	188f4 <uarte_0_init+0x6c>
			nrf_gpio_cfg_input(cfg->rx_pin,
   188e6:	7f2b      	ldrb	r3, [r5, #28]
   188e8:	2b00      	cmp	r3, #0
   188ea:	bf14      	ite	ne
   188ec:	2103      	movne	r1, #3
   188ee:	2100      	moveq	r1, #0
   188f0:	f00c fd02 	bl	252f8 <nrf_gpio_cfg_input>
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   188f4:	696b      	ldr	r3, [r5, #20]
   188f6:	1c5a      	adds	r2, r3, #1
   188f8:	d013      	beq.n	18922 <uarte_0_init+0x9a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   188fa:	a801      	add	r0, sp, #4
   188fc:	9301      	str	r3, [sp, #4]
   188fe:	f7ff feb9 	bl	18674 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   18902:	9a01      	ldr	r2, [sp, #4]
   18904:	2301      	movs	r3, #1
   18906:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   18908:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
   1890c:	696b      	ldr	r3, [r5, #20]
   1890e:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   18910:	a801      	add	r0, sp, #4
   18912:	f7ff feaf 	bl	18674 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   18916:	9b01      	ldr	r3, [sp, #4]
   18918:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1891c:	2203      	movs	r2, #3
   1891e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   18922:	69a8      	ldr	r0, [r5, #24]
   18924:	1c43      	adds	r3, r0, #1
   18926:	d006      	beq.n	18936 <uarte_0_init+0xae>
			nrf_gpio_cfg_input(cfg->cts_pin,
   18928:	7f6b      	ldrb	r3, [r5, #29]
   1892a:	2b00      	cmp	r3, #0
   1892c:	bf14      	ite	ne
   1892e:	2103      	movne	r1, #3
   18930:	2100      	moveq	r1, #0
   18932:	f00c fce1 	bl	252f8 <nrf_gpio_cfg_input>
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
   18936:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
   1893a:	682b      	ldr	r3, [r5, #0]
    p_reg->PSEL.TXD = pseltxd;
   1893c:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   18940:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
   18944:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
	err = uarte_nrfx_configure(dev, &data->uart_config);
   18948:	4638      	mov	r0, r7
    p_reg->PSEL.RTS = pselrts;
   1894a:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   1894e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
   18952:	1d31      	adds	r1, r6, #4
   18954:	f7ff fe9c 	bl	18690 <uarte_nrfx_configure>
	if (err) {
   18958:	4605      	mov	r5, r0
   1895a:	2800      	cmp	r0, #0
   1895c:	d146      	bne.n	189ec <uarte_0_init+0x164>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   1895e:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   18962:	0799      	lsls	r1, r3, #30
   18964:	d519      	bpl.n	1899a <uarte_0_init+0x112>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   18966:	f106 0016 	add.w	r0, r6, #22
   1896a:	f001 fa15 	bl	19d98 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   1896e:	4b23      	ldr	r3, [pc, #140]	; (189fc <uarte_0_init+0x174>)
   18970:	4298      	cmp	r0, r3
   18972:	d13f      	bne.n	189f4 <uarte_0_init+0x16c>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   18974:	7db0      	ldrb	r0, [r6, #22]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   18976:	00c3      	lsls	r3, r0, #3
   18978:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1897c:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   18980:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   18984:	f504 7190 	add.w	r1, r4, #288	; 0x120
    p_reg->CH[(uint32_t) channel].EEP = eep;
   18988:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1898c:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
   18990:	4a1b      	ldr	r2, [pc, #108]	; (18a00 <uarte_0_init+0x178>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   18992:	2301      	movs	r3, #1
   18994:	4083      	lsls	r3, r0
   18996:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1899a:	2308      	movs	r3, #8
   1899c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   189a0:	f898 3008 	ldrb.w	r3, [r8, #8]
   189a4:	b95b      	cbnz	r3, 189be <uarte_0_init+0x136>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   189a6:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   189aa:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   189ae:	f106 0315 	add.w	r3, r6, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   189b2:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   189b6:	2301      	movs	r3, #1
   189b8:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   189bc:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   189be:	f8d8 3004 	ldr.w	r3, [r8, #4]
   189c2:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   189c4:	bf5c      	itt	pl
   189c6:	f44f 7280 	movpl.w	r2, #256	; 0x100
   189ca:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   189ce:	06db      	lsls	r3, r3, #27
   189d0:	bf44      	itt	mi
   189d2:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   189d6:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   189da:	3614      	adds	r6, #20
    p_reg->TXD.MAXCNT = length;
   189dc:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   189de:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   189e2:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   189e6:	2301      	movs	r3, #1
   189e8:	60a3      	str	r3, [r4, #8]
   189ea:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   189ec:	4628      	mov	r0, r5
   189ee:	b002      	add	sp, #8
   189f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EIO;
   189f4:	f06f 0504 	mvn.w	r5, #4
UART_NRF_UARTE_DEVICE(0);
   189f8:	e7f8      	b.n	189ec <uarte_0_init+0x164>
   189fa:	bf00      	nop
   189fc:	0bad0000 	.word	0x0bad0000
   18a00:	4001f000 	.word	0x4001f000

00018a04 <random_byte_get>:
	__asm__ volatile(
   18a04:	f04f 0320 	mov.w	r3, #32
   18a08:	f3ef 8211 	mrs	r2, BASEPRI
   18a0c:	f383 8812 	msr	BASEPRI_MAX, r3
   18a10:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   18a14:	4b09      	ldr	r3, [pc, #36]	; (18a3c <random_byte_get+0x38>)
   18a16:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   18a1a:	b161      	cbz	r1, 18a36 <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   18a1c:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   18a1e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   18a22:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   18a26:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   18a2a:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   18a2c:	f382 8811 	msr	BASEPRI, r2
   18a30:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   18a34:	4770      	bx	lr
	int retval = -EAGAIN;
   18a36:	f06f 000a 	mvn.w	r0, #10
   18a3a:	e7f7      	b.n	18a2c <random_byte_get+0x28>
   18a3c:	4000d000 	.word	0x4000d000

00018a40 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   18a40:	b5f0      	push	{r4, r5, r6, r7, lr}
   18a42:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   18a44:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   18a46:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   18a48:	f04f 0020 	mov.w	r0, #32
   18a4c:	f3ef 8e11 	mrs	lr, BASEPRI
   18a50:	f380 8812 	msr	BASEPRI_MAX, r0
   18a54:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   18a58:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   18a5a:	f893 c001 	ldrb.w	ip, [r3, #1]

	available = (last - first) & mask;
   18a5e:	1ba4      	subs	r4, r4, r6
   18a60:	403c      	ands	r4, r7
	if (available < len) {
   18a62:	42a2      	cmp	r2, r4
		len = available;
   18a64:	bf88      	it	hi
   18a66:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   18a68:	18b0      	adds	r0, r6, r2
   18a6a:	4038      	ands	r0, r7
	first = rngp->first_alloc;
   18a6c:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   18a6e:	7018      	strb	r0, [r3, #0]
	__asm__ volatile(
   18a70:	f38e 8811 	msr	BASEPRI, lr
   18a74:	f3bf 8f6f 	isb	sy
   18a78:	1888      	adds	r0, r1, r2
	uint8_t *dst   = buf;
   18a7a:	460a      	mov	r2, r1
	irq_unlock(key);

	while (likely(len--)) {
   18a7c:	4290      	cmp	r0, r2
   18a7e:	d119      	bne.n	18ab4 <rng_pool_get+0x74>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   18a80:	4566      	cmp	r6, ip
   18a82:	d10d      	bne.n	18aa0 <rng_pool_get+0x60>
	__asm__ volatile(
   18a84:	f04f 0520 	mov.w	r5, #32
   18a88:	f3ef 8011 	mrs	r0, BASEPRI
   18a8c:	f385 8812 	msr	BASEPRI_MAX, r5
   18a90:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   18a94:	781d      	ldrb	r5, [r3, #0]
   18a96:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   18a98:	f380 8811 	msr	BASEPRI, r0
   18a9c:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   18aa0:	1a52      	subs	r2, r2, r1
	available = available - len;
	if (available <= rngp->threshold) {
   18aa2:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   18aa4:	b290      	uxth	r0, r2
	available = available - len;
   18aa6:	1a22      	subs	r2, r4, r0
	if (available <= rngp->threshold) {
   18aa8:	4293      	cmp	r3, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   18aaa:	bf22      	ittt	cs
   18aac:	4b06      	ldrcs	r3, [pc, #24]	; (18ac8 <rng_pool_get+0x88>)
   18aae:	2201      	movcs	r2, #1
   18ab0:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   18ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   18ab4:	eb03 0e05 	add.w	lr, r3, r5
		first = (first + 1) & mask;
   18ab8:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   18aba:	f89e e005 	ldrb.w	lr, [lr, #5]
   18abe:	f802 eb01 	strb.w	lr, [r2], #1
		first = (first + 1) & mask;
   18ac2:	403d      	ands	r5, r7
   18ac4:	e7da      	b.n	18a7c <rng_pool_get+0x3c>
   18ac6:	bf00      	nop
   18ac8:	4000d000 	.word	0x4000d000

00018acc <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   18acc:	43db      	mvns	r3, r3
{
   18ace:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   18ad2:	f013 0501 	ands.w	r5, r3, #1
{
   18ad6:	460e      	mov	r6, r1
   18ad8:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   18ada:	d004      	beq.n	18ae6 <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   18adc:	4821      	ldr	r0, [pc, #132]	; (18b64 <entropy_nrf5_get_entropy_isr+0x98>)
   18ade:	f7ff ffaf 	bl	18a40 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   18ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   18ae6:	b3a2      	cbz	r2, 18b52 <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   18ae8:	f04f 0320 	mov.w	r3, #32
   18aec:	f3ef 8811 	mrs	r8, BASEPRI
   18af0:	f383 8812 	msr	BASEPRI_MAX, r3
   18af4:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   18af8:	200d      	movs	r0, #13
   18afa:	f7ec fdc5 	bl	5688 <arch_irq_is_enabled>
   18afe:	4607      	mov	r7, r0
		irq_disable(IRQN);
   18b00:	200d      	movs	r0, #13
   18b02:	f7ec fdad 	bl	5660 <arch_irq_disable>
	__asm__ volatile(
   18b06:	f388 8811 	msr	BASEPRI, r8
   18b0a:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   18b0e:	f8df 8058 	ldr.w	r8, [pc, #88]	; 18b68 <entropy_nrf5_get_entropy_isr+0x9c>
   18b12:	f8df 9058 	ldr.w	r9, [pc, #88]	; 18b6c <entropy_nrf5_get_entropy_isr+0xa0>
   18b16:	f8c8 5100 	str.w	r5, [r8, #256]	; 0x100
   18b1a:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
   18b1e:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   18b22:	2301      	movs	r3, #1
   18b24:	f8c8 3000 	str.w	r3, [r8]
   18b28:	4625      	mov	r5, r4
   18b2a:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   18b2e:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   18b32:	b183      	cbz	r3, 18b56 <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   18b34:	f7ff ff66 	bl	18a04 <random_byte_get>
			if (byte < 0) {
   18b38:	1e03      	subs	r3, r0, #0
   18b3a:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
   18b3e:	dbf6      	blt.n	18b2e <entropy_nrf5_get_entropy_isr+0x62>
			buf[--len] = byte;
   18b40:	3d01      	subs	r5, #1
   18b42:	b2ad      	uxth	r5, r5
   18b44:	5573      	strb	r3, [r6, r5]
		} while (len);
   18b46:	2d00      	cmp	r5, #0
   18b48:	d1f1      	bne.n	18b2e <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   18b4a:	b117      	cbz	r7, 18b52 <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   18b4c:	200d      	movs	r0, #13
   18b4e:	f7ec fd77 	bl	5640 <arch_irq_enable>
	return cnt;
   18b52:	4620      	mov	r0, r4
   18b54:	e7c5      	b.n	18ae2 <entropy_nrf5_get_entropy_isr+0x16>
   18b56:	f3bf 8f4f 	dsb	sy
				__WFE();
   18b5a:	bf20      	wfe
				__SEV();
   18b5c:	bf40      	sev
				__WFE();
   18b5e:	bf20      	wfe
   18b60:	e7e5      	b.n	18b2e <entropy_nrf5_get_entropy_isr+0x62>
   18b62:	bf00      	nop
   18b64:	20003c90 	.word	0x20003c90
   18b68:	4000d000 	.word	0x4000d000
   18b6c:	e000e100 	.word	0xe000e100

00018b70 <entropy_nrf5_get_entropy>:
{
   18b70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
   18b74:	4f13      	ldr	r7, [pc, #76]	; (18bc4 <entropy_nrf5_get_entropy+0x54>)
   18b76:	460d      	mov	r5, r1
   18b78:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   18b7a:	f107 0845 	add.w	r8, r7, #69	; 0x45
   18b7e:	f107 0918 	add.w	r9, r7, #24
	while (len) {
   18b82:	b914      	cbnz	r4, 18b8a <entropy_nrf5_get_entropy+0x1a>
}
   18b84:	4620      	mov	r0, r4
   18b86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   18b8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18b8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   18b92:	4638      	mov	r0, r7
   18b94:	f002 fbde 	bl	1b354 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   18b98:	4622      	mov	r2, r4
   18b9a:	4629      	mov	r1, r5
   18b9c:	4640      	mov	r0, r8
   18b9e:	f7ff ff4f 	bl	18a40 <rng_pool_get>
   18ba2:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   18ba4:	4638      	mov	r0, r7
   18ba6:	f002 fbaf 	bl	1b308 <z_impl_k_sem_give>
		if (bytes == 0U) {
   18baa:	b93e      	cbnz	r6, 18bbc <entropy_nrf5_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   18bac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   18bb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18bb4:	4648      	mov	r0, r9
   18bb6:	f002 fbcd 	bl	1b354 <z_impl_k_sem_take>
			continue;
   18bba:	e7e2      	b.n	18b82 <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   18bbc:	1ba4      	subs	r4, r4, r6
   18bbe:	b2a4      	uxth	r4, r4
		buf += bytes;
   18bc0:	4435      	add	r5, r6
   18bc2:	e7de      	b.n	18b82 <entropy_nrf5_get_entropy+0x12>
   18bc4:	20003c60 	.word	0x20003c60

00018bc8 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   18bc8:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   18bca:	4c19      	ldr	r4, [pc, #100]	; (18c30 <entropy_nrf5_init+0x68>)
   18bcc:	2201      	movs	r2, #1
   18bce:	4611      	mov	r1, r2
   18bd0:	4620      	mov	r0, r4
   18bd2:	f00c ffa7 	bl	25b24 <z_impl_k_sem_init>
   18bd6:	2201      	movs	r2, #1
   18bd8:	2100      	movs	r1, #0
   18bda:	f104 0018 	add.w	r0, r4, #24
   18bde:	f00c ffa1 	bl	25b24 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   18be2:	f240 4307 	movw	r3, #1031	; 0x407
   18be6:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   18bea:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   18bee:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   18bf0:	230c      	movs	r3, #12
   18bf2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   18bf6:	2500      	movs	r5, #0
}

NRF_STATIC_INLINE void nrf_rng_error_correction_enable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   18bf8:	4b0e      	ldr	r3, [pc, #56]	; (18c34 <entropy_nrf5_init+0x6c>)
   18bfa:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   18bfe:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   18c02:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   18c06:	f042 0201 	orr.w	r2, r2, #1
   18c0a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   18c0e:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   18c10:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   18c14:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   18c18:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   18c1c:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   18c1e:	6019      	str	r1, [r3, #0]
   18c20:	200d      	movs	r0, #13
   18c22:	f7ec fd3f 	bl	56a4 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   18c26:	200d      	movs	r0, #13
   18c28:	f7ec fd0a 	bl	5640 <arch_irq_enable>

	return 0;
}
   18c2c:	4628      	mov	r0, r5
   18c2e:	bd38      	pop	{r3, r4, r5, pc}
   18c30:	20003c60 	.word	0x20003c60
   18c34:	4000d000 	.word	0x4000d000

00018c38 <isr>:
{
   18c38:	b510      	push	{r4, lr}
	byte = random_byte_get();
   18c3a:	f7ff fee3 	bl	18a04 <random_byte_get>
	if (byte < 0) {
   18c3e:	2800      	cmp	r0, #0
   18c40:	db20      	blt.n	18c84 <isr+0x4c>
	uint8_t last  = rngp->last;
   18c42:	4b17      	ldr	r3, [pc, #92]	; (18ca0 <isr+0x68>)
   18c44:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   18c48:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   18c4c:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   18c50:	1a51      	subs	r1, r2, r1
   18c52:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   18c56:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   18c58:	d10d      	bne.n	18c76 <isr+0x3e>
	uint8_t last  = rngp->last;
   18c5a:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   18c5e:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   18c62:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   18c66:	1a51      	subs	r1, r2, r1
   18c68:	ea34 0101 	bics.w	r1, r4, r1
   18c6c:	d10b      	bne.n	18c86 <isr+0x4e>
   18c6e:	4b0d      	ldr	r3, [pc, #52]	; (18ca4 <isr+0x6c>)
   18c70:	2201      	movs	r2, #1
   18c72:	605a      	str	r2, [r3, #4]
}
   18c74:	e00e      	b.n	18c94 <isr+0x5c>
	rngp->buffer[last] = byte;
   18c76:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   18c78:	3201      	adds	r2, #1
   18c7a:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   18c7c:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   18c80:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   18c84:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   18c86:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   18c88:	3201      	adds	r2, #1
   18c8a:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   18c8c:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   18c90:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   18c94:	4804      	ldr	r0, [pc, #16]	; (18ca8 <isr+0x70>)
}
   18c96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   18c9a:	f002 bb35 	b.w	1b308 <z_impl_k_sem_give>
   18c9e:	bf00      	nop
   18ca0:	20003c60 	.word	0x20003c60
   18ca4:	4000d000 	.word	0x4000d000
   18ca8:	20003c78 	.word	0x20003c78

00018cac <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
   18cac:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   18cae:	2301      	movs	r3, #1
   18cb0:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   18cb2:	4a11      	ldr	r2, [pc, #68]	; (18cf8 <compare_int_lock+0x4c>)
   18cb4:	f3bf 8f5b 	dmb	ish
   18cb8:	43dc      	mvns	r4, r3
   18cba:	e852 1f00 	ldrex	r1, [r2]
   18cbe:	ea01 0c04 	and.w	ip, r1, r4
   18cc2:	e842 ce00 	strex	lr, ip, [r2]
   18cc6:	f1be 0f00 	cmp.w	lr, #0
   18cca:	d1f6      	bne.n	18cba <compare_int_lock+0xe>
   18ccc:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   18cd0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   18cd4:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
   18cd8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   18cdc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   18ce0:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   18ce4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   18ce8:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   18cec:	420b      	tst	r3, r1
}
   18cee:	bf14      	ite	ne
   18cf0:	2001      	movne	r0, #1
   18cf2:	2000      	moveq	r0, #0
   18cf4:	bd10      	pop	{r4, pc}
   18cf6:	bf00      	nop
   18cf8:	20003cb8 	.word	0x20003cb8

00018cfc <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   18cfc:	4919      	ldr	r1, [pc, #100]	; (18d64 <sys_clock_timeout_handler+0x68>)
{
   18cfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18d00:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   18d02:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   18d06:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   18d08:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   18d0c:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   18d10:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   18d12:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   18d16:	d222      	bcs.n	18d5e <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   18d18:	4b13      	ldr	r3, [pc, #76]	; (18d68 <sys_clock_timeout_handler+0x6c>)
   18d1a:	681b      	ldr	r3, [r3, #0]
   18d1c:	0a1a      	lsrs	r2, r3, #8
   18d1e:	061b      	lsls	r3, r3, #24
   18d20:	195e      	adds	r6, r3, r5
   18d22:	4b12      	ldr	r3, [pc, #72]	; (18d6c <sys_clock_timeout_handler+0x70>)
   18d24:	f142 0700 	adc.w	r7, r2, #0
   18d28:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
   18d2c:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   18d2e:	f003 f967 	bl	1c000 <sys_clock_announce>
    return p_reg->CC[ch];
   18d32:	00a3      	lsls	r3, r4, #2
   18d34:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   18d38:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   18d3c:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   18d40:	42aa      	cmp	r2, r5
   18d42:	d10b      	bne.n	18d5c <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
   18d44:	b91e      	cbnz	r6, 18d4e <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
   18d46:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   18d4a:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    p_reg->EVTENSET = mask;
   18d4e:	4b08      	ldr	r3, [pc, #32]	; (18d70 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   18d50:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   18d54:	fa00 f404 	lsl.w	r4, r0, r4
   18d58:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   18d5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
   18d5e:	2600      	movs	r6, #0
   18d60:	e7e5      	b.n	18d2e <sys_clock_timeout_handler+0x32>
   18d62:	bf00      	nop
   18d64:	20001ee0 	.word	0x20001ee0
   18d68:	20003cbc 	.word	0x20003cbc
   18d6c:	20001ec8 	.word	0x20001ec8
   18d70:	40011000 	.word	0x40011000

00018d74 <compare_int_unlock>:
	if (key) {
   18d74:	b319      	cbz	r1, 18dbe <compare_int_unlock+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18d76:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
   18d7a:	2301      	movs	r3, #1
   18d7c:	4a10      	ldr	r2, [pc, #64]	; (18dc0 <compare_int_unlock+0x4c>)
   18d7e:	4083      	lsls	r3, r0
   18d80:	e852 1f00 	ldrex	r1, [r2]
   18d84:	4319      	orrs	r1, r3
   18d86:	e842 1c00 	strex	ip, r1, [r2]
   18d8a:	f1bc 0f00 	cmp.w	ip, #0
   18d8e:	d1f7      	bne.n	18d80 <compare_int_unlock+0xc>
   18d90:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   18d94:	4a0b      	ldr	r2, [pc, #44]	; (18dc4 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   18d96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   18d9a:	4083      	lsls	r3, r0
   18d9c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18da0:	4b09      	ldr	r3, [pc, #36]	; (18dc8 <compare_int_unlock+0x54>)
   18da2:	f3bf 8f5b 	dmb	ish
   18da6:	681b      	ldr	r3, [r3, #0]
   18da8:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   18dac:	fa23 f000 	lsr.w	r0, r3, r0
   18db0:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   18db2:	bf42      	ittt	mi
   18db4:	4b05      	ldrmi	r3, [pc, #20]	; (18dcc <compare_int_unlock+0x58>)
   18db6:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   18dba:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   18dbe:	4770      	bx	lr
   18dc0:	20003cb8 	.word	0x20003cb8
   18dc4:	40011000 	.word	0x40011000
   18dc8:	20003cb4 	.word	0x20003cb4
   18dcc:	e000e100 	.word	0xe000e100

00018dd0 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   18dd0:	4b0d      	ldr	r3, [pc, #52]	; (18e08 <z_nrf_rtc_timer_read+0x38>)
   18dd2:	6818      	ldr	r0, [r3, #0]
   18dd4:	0a01      	lsrs	r1, r0, #8
   18dd6:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   18dd8:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   18ddc:	4b0b      	ldr	r3, [pc, #44]	; (18e0c <z_nrf_rtc_timer_read+0x3c>)
   18dde:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   18de2:	1818      	adds	r0, r3, r0
   18de4:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   18de8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   18dec:	d20a      	bcs.n	18e04 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   18dee:	4b08      	ldr	r3, [pc, #32]	; (18e10 <z_nrf_rtc_timer_read+0x40>)
   18df0:	e9d3 2300 	ldrd	r2, r3, [r3]
   18df4:	4290      	cmp	r0, r2
   18df6:	eb71 0303 	sbcs.w	r3, r1, r3
   18dfa:	d203      	bcs.n	18e04 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   18dfc:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   18e00:	f141 0100 	adc.w	r1, r1, #0
}
   18e04:	4770      	bx	lr
   18e06:	bf00      	nop
   18e08:	20003cbc 	.word	0x20003cbc
   18e0c:	40011000 	.word	0x40011000
   18e10:	20001ec8 	.word	0x20001ec8

00018e14 <compare_set>:
{
   18e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18e18:	b085      	sub	sp, #20
   18e1a:	4616      	mov	r6, r2
   18e1c:	4698      	mov	r8, r3
   18e1e:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
   18e20:	f7ff ff44 	bl	18cac <compare_int_lock>
   18e24:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   18e26:	f7ff ffd3 	bl	18dd0 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   18e2a:	42b0      	cmp	r0, r6
   18e2c:	eb71 0308 	sbcs.w	r3, r1, r8
   18e30:	d278      	bcs.n	18f24 <compare_set+0x110>
		if (target_time - curr_time > COUNTER_SPAN) {
   18e32:	4b46      	ldr	r3, [pc, #280]	; (18f4c <compare_set+0x138>)
   18e34:	1a30      	subs	r0, r6, r0
   18e36:	eb68 0101 	sbc.w	r1, r8, r1
   18e3a:	4298      	cmp	r0, r3
   18e3c:	f171 0300 	sbcs.w	r3, r1, #0
   18e40:	f080 8081 	bcs.w	18f46 <compare_set+0x132>
		if (target_time != cc_data[chan].target_time) {
   18e44:	4b42      	ldr	r3, [pc, #264]	; (18f50 <compare_set+0x13c>)
   18e46:	eb03 1305 	add.w	r3, r3, r5, lsl #4
   18e4a:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
   18e4e:	45d8      	cmp	r8, fp
   18e50:	bf08      	it	eq
   18e52:	4556      	cmpeq	r6, sl
   18e54:	d051      	beq.n	18efa <compare_set+0xe6>
   18e56:	ea4f 0985 	mov.w	r9, r5, lsl #2
   18e5a:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   18e5e:	f105 0750 	add.w	r7, r5, #80	; 0x50
   18e62:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
   18e66:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   18e68:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   18e6c:	fa01 f305 	lsl.w	r3, r1, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   18e70:	b2bf      	uxth	r7, r7
	return absolute_time & COUNTER_MAX;
   18e72:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
   18e76:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   18e7a:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
   18e7c:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   18e80:	4b34      	ldr	r3, [pc, #208]	; (18f54 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   18e82:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   18e86:	4614      	mov	r4, r2
     return p_reg->COUNTER;
   18e88:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   18e8c:	1a40      	subs	r0, r0, r1
   18e8e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   18e92:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   18e96:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   18e98:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
   18e9c:	d107      	bne.n	18eae <compare_set+0x9a>
   18e9e:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
   18ea2:	2013      	movs	r0, #19
   18ea4:	f00d f884 	bl	25fb0 <z_impl_k_busy_wait>
   18ea8:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   18eac:	4b29      	ldr	r3, [pc, #164]	; (18f54 <compare_set+0x140>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   18eae:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
   18eb2:	eba4 000c 	sub.w	r0, r4, ip
   18eb6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
   18eba:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   18ebe:	bf88      	it	hi
   18ec0:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   18ec2:	2000      	movs	r0, #0
   18ec4:	6038      	str	r0, [r7, #0]
   18ec6:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
   18ec8:	9801      	ldr	r0, [sp, #4]
   18eca:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   18ece:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   18ed2:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   18ed6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   18eda:	4281      	cmp	r1, r0
   18edc:	d006      	beq.n	18eec <compare_set+0xd8>
	return (a - b) & COUNTER_MAX;
   18ede:	1a20      	subs	r0, r4, r0
   18ee0:	3802      	subs	r0, #2
   18ee2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   18ee6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   18eea:	d819      	bhi.n	18f20 <compare_set+0x10c>
	return (a - b) & COUNTER_MAX;
   18eec:	1aa4      	subs	r4, r4, r2
   18eee:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   18ef2:	eb14 0a06 	adds.w	sl, r4, r6
   18ef6:	f148 0b00 	adc.w	fp, r8, #0
	cc_data[chan].target_time = target_time;
   18efa:	4915      	ldr	r1, [pc, #84]	; (18f50 <compare_set+0x13c>)
	cc_data[chan].callback = handler;
   18efc:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
   18efe:	012b      	lsls	r3, r5, #4
   18f00:	eb01 1205 	add.w	r2, r1, r5, lsl #4
   18f04:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].callback = handler;
   18f08:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   18f0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   18f0c:	6053      	str	r3, [r2, #4]
	return ret;
   18f0e:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
   18f10:	4628      	mov	r0, r5
   18f12:	9900      	ldr	r1, [sp, #0]
   18f14:	f7ff ff2e 	bl	18d74 <compare_int_unlock>
}
   18f18:	4620      	mov	r0, r4
   18f1a:	b005      	add	sp, #20
   18f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18f20:	4620      	mov	r0, r4
   18f22:	e7b1      	b.n	18e88 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
   18f24:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18f26:	4a0c      	ldr	r2, [pc, #48]	; (18f58 <compare_set+0x144>)
   18f28:	f3bf 8f5b 	dmb	ish
   18f2c:	40ab      	lsls	r3, r5
   18f2e:	e852 1f00 	ldrex	r1, [r2]
   18f32:	4319      	orrs	r1, r3
   18f34:	e842 1000 	strex	r0, r1, [r2]
   18f38:	2800      	cmp	r0, #0
   18f3a:	d1f8      	bne.n	18f2e <compare_set+0x11a>
   18f3c:	f3bf 8f5b 	dmb	ish
   18f40:	46b2      	mov	sl, r6
   18f42:	46c3      	mov	fp, r8
   18f44:	e7d9      	b.n	18efa <compare_set+0xe6>
			return -EINVAL;
   18f46:	f06f 0415 	mvn.w	r4, #21
   18f4a:	e7e1      	b.n	18f10 <compare_set+0xfc>
   18f4c:	01000001 	.word	0x01000001
   18f50:	20001ed0 	.word	0x20001ed0
   18f54:	40011000 	.word	0x40011000
   18f58:	20003cb4 	.word	0x20003cb4

00018f5c <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   18f5c:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   18f5e:	4b19      	ldr	r3, [pc, #100]	; (18fc4 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
   18f60:	4d19      	ldr	r5, [pc, #100]	; (18fc8 <sys_clock_driver_init+0x6c>)
   18f62:	2400      	movs	r4, #0
   18f64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18f68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   18f6c:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   18f70:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   18f74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   18f78:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   18f7c:	4b13      	ldr	r3, [pc, #76]	; (18fcc <sys_clock_driver_init+0x70>)
   18f7e:	2602      	movs	r6, #2
   18f80:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   18f84:	2101      	movs	r1, #1
   18f86:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   18f8a:	2011      	movs	r0, #17
   18f8c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   18f90:	4622      	mov	r2, r4
   18f92:	f7ec fb87 	bl	56a4 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   18f96:	2011      	movs	r0, #17
   18f98:	f7ec fb52 	bl	5640 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   18f9c:	4a0c      	ldr	r2, [pc, #48]	; (18fd0 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   18f9e:	2301      	movs	r3, #1
   18fa0:	60ab      	str	r3, [r5, #8]
   18fa2:	602b      	str	r3, [r5, #0]
   18fa4:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   18fa6:	4b0b      	ldr	r3, [pc, #44]	; (18fd4 <sys_clock_driver_init+0x78>)
   18fa8:	4a0b      	ldr	r2, [pc, #44]	; (18fd8 <sys_clock_driver_init+0x7c>)
   18faa:	9300      	str	r3, [sp, #0]
   18fac:	9401      	str	r4, [sp, #4]
   18fae:	2300      	movs	r3, #0
   18fb0:	4620      	mov	r0, r4
   18fb2:	f7ff ff2f 	bl	18e14 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   18fb6:	4630      	mov	r0, r6
   18fb8:	f7fe ff68 	bl	17e8c <z_nrf_clock_control_lf_on>

	return 0;
}
   18fbc:	4620      	mov	r0, r4
   18fbe:	b002      	add	sp, #8
   18fc0:	bd70      	pop	{r4, r5, r6, pc}
   18fc2:	bf00      	nop
   18fc4:	20001ed0 	.word	0x20001ed0
   18fc8:	40011000 	.word	0x40011000
   18fcc:	e000e100 	.word	0xe000e100
   18fd0:	20003cb8 	.word	0x20003cb8
   18fd4:	00018cfd 	.word	0x00018cfd
   18fd8:	007fffff 	.word	0x007fffff

00018fdc <rtc_nrf_isr>:
{
   18fdc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
   18fe0:	4c35      	ldr	r4, [pc, #212]	; (190b8 <rtc_nrf_isr+0xdc>)
   18fe2:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   18fe6:	079a      	lsls	r2, r3, #30
   18fe8:	d50b      	bpl.n	19002 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   18fea:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   18fee:	b143      	cbz	r3, 19002 <rtc_nrf_isr+0x26>
		overflow_cnt++;
   18ff0:	4a32      	ldr	r2, [pc, #200]	; (190bc <rtc_nrf_isr+0xe0>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   18ff2:	2300      	movs	r3, #0
   18ff4:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   18ff8:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   18ffc:	6813      	ldr	r3, [r2, #0]
   18ffe:	3301      	adds	r3, #1
   19000:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   19002:	f04f 0320 	mov.w	r3, #32
   19006:	f3ef 8211 	mrs	r2, BASEPRI
   1900a:	f383 8812 	msr	BASEPRI_MAX, r3
   1900e:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
   19012:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   19016:	03db      	lsls	r3, r3, #15
   19018:	d512      	bpl.n	19040 <rtc_nrf_isr+0x64>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1901a:	f3bf 8f5b 	dmb	ish
   1901e:	4b28      	ldr	r3, [pc, #160]	; (190c0 <rtc_nrf_isr+0xe4>)
   19020:	e853 1f00 	ldrex	r1, [r3]
   19024:	f021 0001 	bic.w	r0, r1, #1
   19028:	e843 0600 	strex	r6, r0, [r3]
   1902c:	2e00      	cmp	r6, #0
   1902e:	d1f7      	bne.n	19020 <rtc_nrf_isr+0x44>
   19030:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   19034:	2900      	cmp	r1, #0
   19036:	d136      	bne.n	190a6 <rtc_nrf_isr+0xca>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19038:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		if (result) {
   1903c:	2b00      	cmp	r3, #0
   1903e:	d132      	bne.n	190a6 <rtc_nrf_isr+0xca>
{
   19040:	2300      	movs	r3, #0
	__asm__ volatile(
   19042:	f382 8811 	msr	BASEPRI, r2
   19046:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
   1904a:	b34b      	cbz	r3, 190a0 <rtc_nrf_isr+0xc4>
		curr_time = z_nrf_rtc_timer_read();
   1904c:	f7ff fec0 	bl	18dd0 <z_nrf_rtc_timer_read>
	__asm__ volatile(
   19050:	f04f 0320 	mov.w	r3, #32
   19054:	f3ef 8c11 	mrs	ip, BASEPRI
   19058:	f383 8812 	msr	BASEPRI_MAX, r3
   1905c:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   19060:	4b18      	ldr	r3, [pc, #96]	; (190c4 <rtc_nrf_isr+0xe8>)
   19062:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   19066:	42b0      	cmp	r0, r6
   19068:	eb71 0207 	sbcs.w	r2, r1, r7
   1906c:	f04f 0200 	mov.w	r2, #0
   19070:	d320      	bcc.n	190b4 <rtc_nrf_isr+0xd8>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   19072:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   19076:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
   1907a:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1907e:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
   19082:	601a      	str	r2, [r3, #0]
    p_reg->EVTENCLR = mask;
   19084:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   19088:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
   1908c:	f38c 8811 	msr	BASEPRI, ip
   19090:	f3bf 8f6f 	isb	sy
		if (handler) {
   19094:	b121      	cbz	r1, 190a0 <rtc_nrf_isr+0xc4>
			handler(chan, expire_time, user_context);
   19096:	9500      	str	r5, [sp, #0]
   19098:	4632      	mov	r2, r6
   1909a:	463b      	mov	r3, r7
   1909c:	2000      	movs	r0, #0
   1909e:	4788      	blx	r1
}
   190a0:	b003      	add	sp, #12
   190a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   190a6:	2300      	movs	r3, #0
   190a8:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
   190ac:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   190b0:	2301      	movs	r3, #1
}
   190b2:	e7c6      	b.n	19042 <rtc_nrf_isr+0x66>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   190b4:	4611      	mov	r1, r2
   190b6:	e7e9      	b.n	1908c <rtc_nrf_isr+0xb0>
   190b8:	40011000 	.word	0x40011000
   190bc:	20003cbc 	.word	0x20003cbc
   190c0:	20003cb4 	.word	0x20003cb4
   190c4:	20001ed0 	.word	0x20001ed0

000190c8 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   190c8:	1c43      	adds	r3, r0, #1
{
   190ca:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   190cc:	d021      	beq.n	19112 <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   190ce:	2801      	cmp	r0, #1
   190d0:	dd21      	ble.n	19116 <sys_clock_set_timeout+0x4e>
   190d2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   190d6:	da20      	bge.n	1911a <sys_clock_set_timeout+0x52>
   190d8:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   190da:	f7ff fe79 	bl	18dd0 <z_nrf_rtc_timer_read>
   190de:	4b10      	ldr	r3, [pc, #64]	; (19120 <sys_clock_set_timeout+0x58>)
   190e0:	e9d3 1300 	ldrd	r1, r3, [r3]
   190e4:	1a40      	subs	r0, r0, r1
		ticks = 0;
   190e6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   190ea:	bf28      	it	cs
   190ec:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   190ee:	3001      	adds	r0, #1
   190f0:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
   190f2:	480c      	ldr	r0, [pc, #48]	; (19124 <sys_clock_set_timeout+0x5c>)
   190f4:	4282      	cmp	r2, r0
   190f6:	bf28      	it	cs
   190f8:	4602      	movcs	r2, r0
   190fa:	1852      	adds	r2, r2, r1
   190fc:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   19100:	4909      	ldr	r1, [pc, #36]	; (19128 <sys_clock_set_timeout+0x60>)
   19102:	9001      	str	r0, [sp, #4]
   19104:	9100      	str	r1, [sp, #0]
   19106:	f143 0300 	adc.w	r3, r3, #0
   1910a:	f7ff fe83 	bl	18e14 <compare_set>
}
   1910e:	b002      	add	sp, #8
   19110:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   19112:	4804      	ldr	r0, [pc, #16]	; (19124 <sys_clock_set_timeout+0x5c>)
   19114:	e7e0      	b.n	190d8 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   19116:	2400      	movs	r4, #0
   19118:	e7df      	b.n	190da <sys_clock_set_timeout+0x12>
   1911a:	4c02      	ldr	r4, [pc, #8]	; (19124 <sys_clock_set_timeout+0x5c>)
   1911c:	e7dd      	b.n	190da <sys_clock_set_timeout+0x12>
   1911e:	bf00      	nop
   19120:	20001ee0 	.word	0x20001ee0
   19124:	007fffff 	.word	0x007fffff
   19128:	00018cfd 	.word	0x00018cfd

0001912c <sys_clock_elapsed>:
{
   1912c:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   1912e:	f7ff fe4f 	bl	18dd0 <z_nrf_rtc_timer_read>
   19132:	4b02      	ldr	r3, [pc, #8]	; (1913c <sys_clock_elapsed+0x10>)
   19134:	681b      	ldr	r3, [r3, #0]
}
   19136:	1ac0      	subs	r0, r0, r3
   19138:	bd08      	pop	{r3, pc}
   1913a:	bf00      	nop
   1913c:	20001ee0 	.word	0x20001ee0

00019140 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
   19140:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   19144:	4905      	ldr	r1, [pc, #20]	; (1915c <__NVIC_SystemReset+0x1c>)
   19146:	4b06      	ldr	r3, [pc, #24]	; (19160 <__NVIC_SystemReset+0x20>)
   19148:	68ca      	ldr	r2, [r1, #12]
   1914a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1914e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   19150:	60cb      	str	r3, [r1, #12]
   19152:	f3bf 8f4f 	dsb	sy
    __NOP();
   19156:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   19158:	e7fd      	b.n	19156 <__NVIC_SystemReset+0x16>
   1915a:	bf00      	nop
   1915c:	e000ed00 	.word	0xe000ed00
   19160:	05fa0004 	.word	0x05fa0004

00019164 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   19164:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   19168:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1916c:	2a08      	cmp	r2, #8
   1916e:	d106      	bne.n	1917e <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   19170:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   19174:	2b05      	cmp	r3, #5
   19176:	d802      	bhi.n	1917e <nrf52_errata_103+0x1a>
   19178:	4a02      	ldr	r2, [pc, #8]	; (19184 <nrf52_errata_103+0x20>)
   1917a:	5cd0      	ldrb	r0, [r2, r3]
   1917c:	4770      	bx	lr
        return false;
   1917e:	2000      	movs	r0, #0
}
   19180:	4770      	bx	lr
   19182:	bf00      	nop
   19184:	000282aa 	.word	0x000282aa

00019188 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   19188:	4a02      	ldr	r2, [pc, #8]	; (19194 <nvmc_wait+0xc>)
   1918a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   1918e:	2b00      	cmp	r3, #0
   19190:	d0fb      	beq.n	1918a <nvmc_wait+0x2>
}
   19192:	4770      	bx	lr
   19194:	4001e000 	.word	0x4001e000

00019198 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   19198:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   1919a:	f00c f984 	bl	254a6 <nrf52_errata_136>
   1919e:	b140      	cbz	r0, 191b2 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   191a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   191a4:	2200      	movs	r2, #0
   191a6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   191aa:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   191ae:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   191b2:	f00c f978 	bl	254a6 <nrf52_errata_136>
   191b6:	2800      	cmp	r0, #0
   191b8:	d046      	beq.n	19248 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   191ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   191be:	4b65      	ldr	r3, [pc, #404]	; (19354 <SystemInit+0x1bc>)
   191c0:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   191c4:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   191c8:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   191cc:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   191d0:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   191d4:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   191d8:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   191dc:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   191e0:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   191e4:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   191e8:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   191ec:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   191f0:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   191f4:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   191f8:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   191fc:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   19200:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   19204:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   19208:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   1920c:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   19210:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   19214:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   19218:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   1921c:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   19220:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   19224:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   19228:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   1922c:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   19230:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   19234:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   19238:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   1923c:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   19240:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   19244:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   19248:	f7ff ff8c 	bl	19164 <nrf52_errata_103>
   1924c:	b118      	cbz	r0, 19256 <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   1924e:	4b42      	ldr	r3, [pc, #264]	; (19358 <SystemInit+0x1c0>)
   19250:	4a42      	ldr	r2, [pc, #264]	; (1935c <SystemInit+0x1c4>)
   19252:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   19256:	f7ff ff85 	bl	19164 <nrf52_errata_103>
   1925a:	b118      	cbz	r0, 19264 <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   1925c:	4b40      	ldr	r3, [pc, #256]	; (19360 <SystemInit+0x1c8>)
   1925e:	22fb      	movs	r2, #251	; 0xfb
   19260:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   19264:	f7ff ff7e 	bl	19164 <nrf52_errata_103>
   19268:	b170      	cbz	r0, 19288 <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   1926a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   1926e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   19272:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
   19276:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   1927a:	f022 020f 	bic.w	r2, r2, #15
   1927e:	f003 030f 	and.w	r3, r3, #15
   19282:	4313      	orrs	r3, r2
   19284:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   19288:	f7ff ff6c 	bl	19164 <nrf52_errata_103>
   1928c:	b120      	cbz	r0, 19298 <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   1928e:	4b35      	ldr	r3, [pc, #212]	; (19364 <SystemInit+0x1cc>)
   19290:	f44f 7200 	mov.w	r2, #512	; 0x200
   19294:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   19298:	f00c f905 	bl	254a6 <nrf52_errata_136>
   1929c:	b148      	cbz	r0, 192b2 <SystemInit+0x11a>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   1929e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   192a2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   192a6:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   192a8:	bf44      	itt	mi
   192aa:	f06f 0201 	mvnmi.w	r2, #1
   192ae:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   192b2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   192b6:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   192ba:	2a08      	cmp	r2, #8
   192bc:	d10e      	bne.n	192dc <SystemInit+0x144>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   192be:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
   192c2:	2b05      	cmp	r3, #5
   192c4:	d802      	bhi.n	192cc <SystemInit+0x134>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   192c6:	4a28      	ldr	r2, [pc, #160]	; (19368 <SystemInit+0x1d0>)
   192c8:	5cd3      	ldrb	r3, [r2, r3]
   192ca:	b13b      	cbz	r3, 192dc <SystemInit+0x144>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   192cc:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   192d0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   192d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   192d8:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure NFCT pins as GPIOs if NFCT is not to be used in your code. If CONFIG_NFCT_PINS_AS_GPIOS is not defined,
       two GPIOs (see Product Specification to see which ones) will be reserved for NFC and will not be available as
       normal GPIOs. */
    #if defined (CONFIG_NFCT_PINS_AS_GPIOS) && defined(NFCT_PRESENT)
        if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
   192dc:	f04f 2110 	mov.w	r1, #268439552	; 0x10001000
   192e0:	f8d1 320c 	ldr.w	r3, [r1, #524]	; 0x20c
   192e4:	07db      	lsls	r3, r3, #31
   192e6:	d514      	bpl.n	19312 <SystemInit+0x17a>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   192e8:	4820      	ldr	r0, [pc, #128]	; (1936c <SystemInit+0x1d4>)
   192ea:	2301      	movs	r3, #1
   192ec:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
    nvmc_wait();
   192f0:	f7ff ff4a 	bl	19188 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
   192f4:	f8d1 320c 	ldr.w	r3, [r1, #524]	; 0x20c
   192f8:	f023 0301 	bic.w	r3, r3, #1
   192fc:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c
            nvmc_wait();
   19300:	f7ff ff42 	bl	19188 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   19304:	2300      	movs	r3, #0
   19306:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
    nvmc_wait();
   1930a:	f7ff ff3d 	bl	19188 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
            nvmc_wait();
            NRF_UICR->PSELRESET[1] = RESET_PIN;
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
   1930e:	f7ff ff17 	bl	19140 <__NVIC_SystemReset>
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   19312:	f8d1 3200 	ldr.w	r3, [r1, #512]	; 0x200
   19316:	2b00      	cmp	r3, #0
   19318:	db03      	blt.n	19322 <SystemInit+0x18a>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   1931a:	f8d1 3204 	ldr.w	r3, [r1, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1931e:	2b00      	cmp	r3, #0
   19320:	da14      	bge.n	1934c <SystemInit+0x1b4>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   19322:	4912      	ldr	r1, [pc, #72]	; (1936c <SystemInit+0x1d4>)
   19324:	2301      	movs	r3, #1
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   19326:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1932a:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1932e:	2412      	movs	r4, #18
    nvmc_wait();
   19330:	f7ff ff2a 	bl	19188 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   19334:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   19338:	f7ff ff26 	bl	19188 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   1933c:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   19340:	f7ff ff22 	bl	19188 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   19344:	2300      	movs	r3, #0
   19346:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
   1934a:	e7de      	b.n	1930a <SystemInit+0x172>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   1934c:	4b08      	ldr	r3, [pc, #32]	; (19370 <SystemInit+0x1d8>)
   1934e:	4a09      	ldr	r2, [pc, #36]	; (19374 <SystemInit+0x1dc>)
   19350:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   19352:	bd10      	pop	{r4, pc}
   19354:	4000c000 	.word	0x4000c000
   19358:	40005000 	.word	0x40005000
   1935c:	00038148 	.word	0x00038148
   19360:	4000f000 	.word	0x4000f000
   19364:	40029000 	.word	0x40029000
   19368:	000282a4 	.word	0x000282a4
   1936c:	4001e000 	.word	0x4001e000
   19370:	20000c70 	.word	0x20000c70
   19374:	03d09000 	.word	0x03d09000

00019378 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   19378:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   1937a:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   1937c:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   1937e:	fab2 f382 	clz	r3, r2
   19382:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
   19386:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
   19388:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
   1938a:	d014      	beq.n	193b6 <nrfx_flag32_alloc+0x3e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1938c:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
   19390:	fa05 f303 	lsl.w	r3, r5, r3
   19394:	ea22 0303 	bic.w	r3, r2, r3
   19398:	e850 6f00 	ldrex	r6, [r0]
   1939c:	4296      	cmp	r6, r2
   1939e:	d104      	bne.n	193aa <nrfx_flag32_alloc+0x32>
   193a0:	e840 3c00 	strex	ip, r3, [r0]
   193a4:	f1bc 0f00 	cmp.w	ip, #0
   193a8:	d1f6      	bne.n	19398 <nrfx_flag32_alloc+0x20>
   193aa:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   193ae:	d1e5      	bne.n	1937c <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
   193b0:	4802      	ldr	r0, [pc, #8]	; (193bc <nrfx_flag32_alloc+0x44>)
    *p_flag = idx;
   193b2:	700c      	strb	r4, [r1, #0]
}
   193b4:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
   193b6:	4802      	ldr	r0, [pc, #8]	; (193c0 <nrfx_flag32_alloc+0x48>)
   193b8:	e7fc      	b.n	193b4 <nrfx_flag32_alloc+0x3c>
   193ba:	bf00      	nop
   193bc:	0bad0000 	.word	0x0bad0000
   193c0:	0bad0002 	.word	0x0bad0002

000193c4 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   193c4:	6803      	ldr	r3, [r0, #0]
   193c6:	40cb      	lsrs	r3, r1
   193c8:	07db      	lsls	r3, r3, #31
{
   193ca:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
   193cc:	d415      	bmi.n	193fa <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   193ce:	2301      	movs	r3, #1
   193d0:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
   193d4:	6803      	ldr	r3, [r0, #0]
   193d6:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   193da:	ea41 0203 	orr.w	r2, r1, r3
   193de:	e850 4f00 	ldrex	r4, [r0]
   193e2:	429c      	cmp	r4, r3
   193e4:	d104      	bne.n	193f0 <nrfx_flag32_free+0x2c>
   193e6:	e840 2c00 	strex	ip, r2, [r0]
   193ea:	f1bc 0f00 	cmp.w	ip, #0
   193ee:	d1f6      	bne.n	193de <nrfx_flag32_free+0x1a>
   193f0:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   193f4:	d1ee      	bne.n	193d4 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
   193f6:	4802      	ldr	r0, [pc, #8]	; (19400 <nrfx_flag32_free+0x3c>)
}
   193f8:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   193fa:	4802      	ldr	r0, [pc, #8]	; (19404 <nrfx_flag32_free+0x40>)
   193fc:	e7fc      	b.n	193f8 <nrfx_flag32_free+0x34>
   193fe:	bf00      	nop
   19400:	0bad0000 	.word	0x0bad0000
   19404:	0bad0004 	.word	0x0bad0004

00019408 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   19408:	4b04      	ldr	r3, [pc, #16]	; (1941c <nrfx_clock_init+0x14>)
   1940a:	791a      	ldrb	r2, [r3, #4]
   1940c:	b922      	cbnz	r2, 19418 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   1940e:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   19410:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   19412:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   19414:	4802      	ldr	r0, [pc, #8]	; (19420 <nrfx_clock_init+0x18>)
   19416:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   19418:	4802      	ldr	r0, [pc, #8]	; (19424 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1941a:	4770      	bx	lr
   1941c:	20003cc0 	.word	0x20003cc0
   19420:	0bad0000 	.word	0x0bad0000
   19424:	0bad000c 	.word	0x0bad000c

00019428 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   19428:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   1942a:	2000      	movs	r0, #0
   1942c:	f7ec f92c 	bl	5688 <arch_irq_is_enabled>
   19430:	b908      	cbnz	r0, 19436 <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   19432:	f7ec f905 	bl	5640 <arch_irq_enable>
#endif
#if NRF_CLOCK_HAS_HFCLK192M
    nrf_clock_hfclk192m_src_set(NRF_CLOCK, (nrf_clock_hfclk_t)NRFX_CLOCK_CONFIG_HFCLK192M_SRC);
#endif
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
   19436:	4b02      	ldr	r3, [pc, #8]	; (19440 <nrfx_clock_enable+0x18>)
   19438:	2201      	movs	r2, #1
   1943a:	701a      	strb	r2, [r3, #0]
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   1943c:	bd08      	pop	{r3, pc}
   1943e:	bf00      	nop
   19440:	20004128 	.word	0x20004128

00019444 <nrfx_clock_stop>:
            break;
    }
}

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   19444:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   19446:	b110      	cbz	r0, 1944e <nrfx_clock_stop+0xa>
   19448:	2801      	cmp	r0, #1
   1944a:	d017      	beq.n	1947c <nrfx_clock_stop+0x38>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   1944c:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
   1944e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   19452:	2302      	movs	r3, #2
   19454:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19458:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
   1945c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19460:	2301      	movs	r3, #1
   19462:	60e3      	str	r3, [r4, #12]
   19464:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   19468:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
   1946c:	03db      	lsls	r3, r3, #15
   1946e:	d5ed      	bpl.n	1944c <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   19470:	2001      	movs	r0, #1
   19472:	f00c f822 	bl	254ba <nrfx_busy_wait>
   19476:	3d01      	subs	r5, #1
   19478:	d1f6      	bne.n	19468 <nrfx_clock_stop+0x24>
   1947a:	e7e7      	b.n	1944c <nrfx_clock_stop+0x8>
    p_reg->INTENCLR = mask;
   1947c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19480:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
   19482:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19486:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1948a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1948e:	6060      	str	r0, [r4, #4]
   19490:	f242 7510 	movw	r5, #10000	; 0x2710
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   19494:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   19498:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
   1949c:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1949e:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   194a2:	d505      	bpl.n	194b0 <nrfx_clock_stop+0x6c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   194a4:	b123      	cbz	r3, 194b0 <nrfx_clock_stop+0x6c>
   194a6:	2001      	movs	r0, #1
   194a8:	f00c f807 	bl	254ba <nrfx_busy_wait>
   194ac:	3d01      	subs	r5, #1
   194ae:	d1f1      	bne.n	19494 <nrfx_clock_stop+0x50>
            m_clock_cb.hfclk_started = false;
   194b0:	4b01      	ldr	r3, [pc, #4]	; (194b8 <nrfx_clock_stop+0x74>)
   194b2:	2200      	movs	r2, #0
   194b4:	715a      	strb	r2, [r3, #5]
   194b6:	e7c9      	b.n	1944c <nrfx_clock_stop+0x8>
   194b8:	20003cc0 	.word	0x20003cc0

000194bc <nrfx_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   194bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   194c0:	b510      	push	{r4, lr}
   194c2:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   194c6:	b16a      	cbz	r2, 194e4 <nrfx_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   194c8:	2200      	movs	r2, #0
   194ca:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   194ce:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   194d2:	2201      	movs	r2, #1
   194d4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
   194d8:	4b11      	ldr	r3, [pc, #68]	; (19520 <nrfx_clock_irq_handler+0x64>)
   194da:	7958      	ldrb	r0, [r3, #5]
   194dc:	b910      	cbnz	r0, 194e4 <nrfx_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
   194de:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   194e0:	681b      	ldr	r3, [r3, #0]
   194e2:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   194e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   194e8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   194ec:	b172      	cbz	r2, 1950c <nrfx_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   194ee:	2200      	movs	r2, #0
   194f0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   194f4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   194f8:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   194fc:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   19500:	0792      	lsls	r2, r2, #30
   19502:	d104      	bne.n	1950e <nrfx_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
   19504:	2201      	movs	r2, #1
   19506:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1950a:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   1950c:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   1950e:	2202      	movs	r2, #2
   19510:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   19514:	4b02      	ldr	r3, [pc, #8]	; (19520 <nrfx_clock_irq_handler+0x64>)
}
   19516:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1951a:	681b      	ldr	r3, [r3, #0]
   1951c:	2001      	movs	r0, #1
   1951e:	4718      	bx	r3
   19520:	20003cc0 	.word	0x20003cc0

00019524 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   19524:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   19526:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   1952a:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
   1952c:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   1952e:	6002      	str	r2, [r0, #0]
}
   19530:	4802      	ldr	r0, [pc, #8]	; (1953c <nrf_gpio_pin_port_decode+0x18>)
   19532:	bf18      	it	ne
   19534:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   19538:	4770      	bx	lr
   1953a:	bf00      	nop
   1953c:	50000300 	.word	0x50000300

00019540 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   19540:	4b03      	ldr	r3, [pc, #12]	; (19550 <pin_in_use_by_te+0x10>)
   19542:	3008      	adds	r0, #8
   19544:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   19548:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1954c:	4770      	bx	lr
   1954e:	bf00      	nop
   19550:	20000c74 	.word	0x20000c74

00019554 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   19554:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   19556:	f100 0308 	add.w	r3, r0, #8
   1955a:	4c0c      	ldr	r4, [pc, #48]	; (1958c <call_handler+0x38>)
   1955c:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   19560:	05da      	lsls	r2, r3, #23
{
   19562:	4605      	mov	r5, r0
   19564:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   19566:	d507      	bpl.n	19578 <call_handler+0x24>
   19568:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   1956c:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   19570:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   19574:	6852      	ldr	r2, [r2, #4]
   19576:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   19578:	68a3      	ldr	r3, [r4, #8]
   1957a:	b12b      	cbz	r3, 19588 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1957c:	68e2      	ldr	r2, [r4, #12]
   1957e:	4631      	mov	r1, r6
   19580:	4628      	mov	r0, r5
    }
}
   19582:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   19586:	4718      	bx	r3
}
   19588:	bd70      	pop	{r4, r5, r6, pc}
   1958a:	bf00      	nop
   1958c:	20000c74 	.word	0x20000c74

00019590 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   19590:	4a12      	ldr	r2, [pc, #72]	; (195dc <release_handler+0x4c>)
   19592:	3008      	adds	r0, #8
{
   19594:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   19596:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   1959a:	05d9      	lsls	r1, r3, #23
   1959c:	d51b      	bpl.n	195d6 <release_handler+0x46>
   1959e:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   195a2:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   195a6:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   195aa:	f102 0410 	add.w	r4, r2, #16
   195ae:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   195b0:	f834 3b02 	ldrh.w	r3, [r4], #2
   195b4:	f413 7f80 	tst.w	r3, #256	; 0x100
   195b8:	d003      	beq.n	195c2 <release_handler+0x32>
   195ba:	f3c3 2343 	ubfx	r3, r3, #9, #4
   195be:	4299      	cmp	r1, r3
   195c0:	d009      	beq.n	195d6 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   195c2:	3001      	adds	r0, #1
   195c4:	2830      	cmp	r0, #48	; 0x30
   195c6:	d1f3      	bne.n	195b0 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   195c8:	2300      	movs	r3, #0
   195ca:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   195ce:	4804      	ldr	r0, [pc, #16]	; (195e0 <release_handler+0x50>)
}
   195d0:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   195d2:	f7ff bef7 	b.w	193c4 <nrfx_flag32_free>
}
   195d6:	bc10      	pop	{r4}
   195d8:	4770      	bx	lr
   195da:	bf00      	nop
   195dc:	20000c74 	.word	0x20000c74
   195e0:	20000ce8 	.word	0x20000ce8

000195e4 <pin_handler_trigger_uninit>:
{
   195e4:	b538      	push	{r3, r4, r5, lr}
   195e6:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   195e8:	f7ff ffaa 	bl	19540 <pin_in_use_by_te>
   195ec:	4c09      	ldr	r4, [pc, #36]	; (19614 <pin_handler_trigger_uninit+0x30>)
   195ee:	f102 0508 	add.w	r5, r2, #8
   195f2:	b140      	cbz	r0, 19606 <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   195f4:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   195f8:	4907      	ldr	r1, [pc, #28]	; (19618 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   195fa:	0b5b      	lsrs	r3, r3, #13
   195fc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   19600:	2000      	movs	r0, #0
   19602:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
   19606:	4610      	mov	r0, r2
   19608:	f7ff ffc2 	bl	19590 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   1960c:	2300      	movs	r3, #0
   1960e:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   19612:	bd38      	pop	{r3, r4, r5, pc}
   19614:	20000c74 	.word	0x20000c74
   19618:	40006000 	.word	0x40006000

0001961c <nrfx_gpiote_input_configure>:
{
   1961c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   19620:	4604      	mov	r4, r0
   19622:	4617      	mov	r7, r2
   19624:	461d      	mov	r5, r3
    if (p_input_config)
   19626:	b321      	cbz	r1, 19672 <nrfx_gpiote_input_configure+0x56>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   19628:	4e4e      	ldr	r6, [pc, #312]	; (19764 <nrfx_gpiote_input_configure+0x148>)
   1962a:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   1962e:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
   19632:	079b      	lsls	r3, r3, #30
   19634:	d506      	bpl.n	19644 <nrfx_gpiote_input_configure+0x28>
   19636:	f7ff ff83 	bl	19540 <pin_in_use_by_te>
        if (pin_is_task_output(pin))
   1963a:	b118      	cbz	r0, 19644 <nrfx_gpiote_input_configure+0x28>
                return NRFX_ERROR_INVALID_PARAM;
   1963c:	484a      	ldr	r0, [pc, #296]	; (19768 <nrfx_gpiote_input_configure+0x14c>)
}
   1963e:	b004      	add	sp, #16
   19640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   19644:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   19646:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   1964a:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   1964e:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   19652:	f10d 020f 	add.w	r2, sp, #15
   19656:	460b      	mov	r3, r1
   19658:	4620      	mov	r0, r4
   1965a:	f10d 010e 	add.w	r1, sp, #14
   1965e:	f00b ff5a 	bl	25516 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   19662:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
   19666:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   1966a:	f043 0301 	orr.w	r3, r3, #1
   1966e:	f826 3018 	strh.w	r3, [r6, r8, lsl #1]
    if (p_trigger_config)
   19672:	b197      	cbz	r7, 1969a <nrfx_gpiote_input_configure+0x7e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   19674:	4b3b      	ldr	r3, [pc, #236]	; (19764 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   19676:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   19678:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1967a:	f104 0008 	add.w	r0, r4, #8
   1967e:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
   19682:	078f      	lsls	r7, r1, #30
   19684:	d50c      	bpl.n	196a0 <nrfx_gpiote_input_configure+0x84>
            if (use_evt)
   19686:	2a00      	cmp	r2, #0
   19688:	d1d8      	bne.n	1963c <nrfx_gpiote_input_configure+0x20>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   1968a:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
   1968e:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   19692:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
   19696:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
   1969a:	bbcd      	cbnz	r5, 19710 <nrfx_gpiote_input_configure+0xf4>
    return NRFX_SUCCESS;
   1969c:	4833      	ldr	r0, [pc, #204]	; (1976c <nrfx_gpiote_input_configure+0x150>)
   1969e:	e7ce      	b.n	1963e <nrfx_gpiote_input_configure+0x22>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   196a0:	f021 0120 	bic.w	r1, r1, #32
   196a4:	04c9      	lsls	r1, r1, #19
   196a6:	0cc9      	lsrs	r1, r1, #19
   196a8:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
   196ac:	2a00      	cmp	r2, #0
   196ae:	d0ec      	beq.n	1968a <nrfx_gpiote_input_configure+0x6e>
                if (!edge)
   196b0:	2e03      	cmp	r6, #3
   196b2:	d8c3      	bhi.n	1963c <nrfx_gpiote_input_configure+0x20>
                uint8_t ch = *p_trigger_config->p_in_channel;
   196b4:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   196b6:	b92e      	cbnz	r6, 196c4 <nrfx_gpiote_input_configure+0xa8>
   196b8:	4a2d      	ldr	r2, [pc, #180]	; (19770 <nrfx_gpiote_input_configure+0x154>)
   196ba:	f507 71a2 	add.w	r1, r7, #324	; 0x144
   196be:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
   196c2:	e7e2      	b.n	1968a <nrfx_gpiote_input_configure+0x6e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   196c4:	00ba      	lsls	r2, r7, #2
   196c6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   196ca:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   196ce:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
   196d2:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   196d6:	f02c 0c03 	bic.w	ip, ip, #3
   196da:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   196de:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   196e2:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
   196e6:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
   196ea:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   196ee:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   196f2:	ea4f 2c04 	mov.w	ip, r4, lsl #8
   196f6:	f40c 5c7c 	and.w	ip, ip, #16128	; 0x3f00
   196fa:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
   196fe:	ea4c 0c0e 	orr.w	ip, ip, lr
   19702:	f041 0120 	orr.w	r1, r1, #32
   19706:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
   1970a:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
   1970e:	e7bc      	b.n	1968a <nrfx_gpiote_input_configure+0x6e>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   19710:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   19714:	4620      	mov	r0, r4
   19716:	f7ff ff3b 	bl	19590 <release_handler>
    if (!handler)
   1971a:	2e00      	cmp	r6, #0
   1971c:	d0be      	beq.n	1969c <nrfx_gpiote_input_configure+0x80>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1971e:	4d11      	ldr	r5, [pc, #68]	; (19764 <nrfx_gpiote_input_configure+0x148>)
   19720:	682b      	ldr	r3, [r5, #0]
   19722:	429e      	cmp	r6, r3
   19724:	d104      	bne.n	19730 <nrfx_gpiote_input_configure+0x114>
   19726:	686b      	ldr	r3, [r5, #4]
   19728:	429f      	cmp	r7, r3
   1972a:	d101      	bne.n	19730 <nrfx_gpiote_input_configure+0x114>
   1972c:	2200      	movs	r2, #0
   1972e:	e00a      	b.n	19746 <nrfx_gpiote_input_configure+0x12a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   19730:	4810      	ldr	r0, [pc, #64]	; (19774 <nrfx_gpiote_input_configure+0x158>)
   19732:	f10d 010f 	add.w	r1, sp, #15
   19736:	f7ff fe1f 	bl	19378 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   1973a:	4b0c      	ldr	r3, [pc, #48]	; (1976c <nrfx_gpiote_input_configure+0x150>)
   1973c:	4298      	cmp	r0, r3
   1973e:	f47f af7e 	bne.w	1963e <nrfx_gpiote_input_configure+0x22>
        handler_id = (int32_t)id;
   19742:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
   19746:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   1974a:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1974e:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   19750:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   19752:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   19756:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   1975a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1975e:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
   19762:	e79b      	b.n	1969c <nrfx_gpiote_input_configure+0x80>
   19764:	20000c74 	.word	0x20000c74
   19768:	0bad0004 	.word	0x0bad0004
   1976c:	0bad0000 	.word	0x0bad0000
   19770:	40006000 	.word	0x40006000
   19774:	20000ce8 	.word	0x20000ce8

00019778 <nrfx_gpiote_output_configure>:
{
   19778:	b5f0      	push	{r4, r5, r6, r7, lr}
   1977a:	4604      	mov	r4, r0
   1977c:	b085      	sub	sp, #20
   1977e:	4615      	mov	r5, r2
    if (p_config)
   19780:	b319      	cbz	r1, 197ca <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   19782:	4e33      	ldr	r6, [pc, #204]	; (19850 <nrfx_gpiote_output_configure+0xd8>)
   19784:	f100 0708 	add.w	r7, r0, #8
   19788:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   1978c:	0793      	lsls	r3, r2, #30
   1978e:	d403      	bmi.n	19798 <nrfx_gpiote_output_configure+0x20>
   19790:	f7ff fed6 	bl	19540 <pin_in_use_by_te>
   19794:	2800      	cmp	r0, #0
   19796:	d158      	bne.n	1984a <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   19798:	f012 0f1c 	tst.w	r2, #28
   1979c:	d002      	beq.n	197a4 <nrfx_gpiote_output_configure+0x2c>
   1979e:	784b      	ldrb	r3, [r1, #1]
   197a0:	2b01      	cmp	r3, #1
   197a2:	d052      	beq.n	1984a <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   197a4:	2301      	movs	r3, #1
   197a6:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   197aa:	2300      	movs	r3, #0
   197ac:	e9cd 1300 	strd	r1, r3, [sp]
   197b0:	1c4a      	adds	r2, r1, #1
   197b2:	1c8b      	adds	r3, r1, #2
   197b4:	4620      	mov	r0, r4
   197b6:	f10d 010f 	add.w	r1, sp, #15
   197ba:	f00b feac 	bl	25516 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   197be:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   197c2:	f043 0303 	orr.w	r3, r3, #3
   197c6:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
   197ca:	b915      	cbnz	r5, 197d2 <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
   197cc:	4821      	ldr	r0, [pc, #132]	; (19854 <nrfx_gpiote_output_configure+0xdc>)
}
   197ce:	b005      	add	sp, #20
   197d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   197d2:	4e1f      	ldr	r6, [pc, #124]	; (19850 <nrfx_gpiote_output_configure+0xd8>)
   197d4:	f104 0708 	add.w	r7, r4, #8
   197d8:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   197dc:	0783      	lsls	r3, r0, #30
   197de:	d534      	bpl.n	1984a <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
   197e0:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   197e4:	4661      	mov	r1, ip
   197e6:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   197e8:	f020 0020 	bic.w	r0, r0, #32
   197ec:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   197f0:	04c0      	lsls	r0, r0, #19
   197f2:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   197f6:	0cc0      	lsrs	r0, r0, #19
   197f8:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   197fc:	2300      	movs	r3, #0
   197fe:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   19802:	786a      	ldrb	r2, [r5, #1]
   19804:	2a00      	cmp	r2, #0
   19806:	d0e1      	beq.n	197cc <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   19808:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   1980c:	78ad      	ldrb	r5, [r5, #2]
   1980e:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   19812:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   19816:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1981a:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   1981e:	0223      	lsls	r3, r4, #8
   19820:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   19824:	0412      	lsls	r2, r2, #16
   19826:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1982a:	ea43 030e 	orr.w	r3, r3, lr
   1982e:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   19830:	052a      	lsls	r2, r5, #20
   19832:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   19836:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1983a:	4313      	orrs	r3, r2
   1983c:	f040 0020 	orr.w	r0, r0, #32
   19840:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   19844:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   19848:	e7c0      	b.n	197cc <nrfx_gpiote_output_configure+0x54>
            return NRFX_ERROR_INVALID_PARAM;
   1984a:	4803      	ldr	r0, [pc, #12]	; (19858 <nrfx_gpiote_output_configure+0xe0>)
   1984c:	e7bf      	b.n	197ce <nrfx_gpiote_output_configure+0x56>
   1984e:	bf00      	nop
   19850:	20000c74 	.word	0x20000c74
   19854:	0bad0000 	.word	0x0bad0000
   19858:	0bad0004 	.word	0x0bad0004

0001985c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   1985c:	4b01      	ldr	r3, [pc, #4]	; (19864 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   1985e:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   19862:	4770      	bx	lr
   19864:	20000c74 	.word	0x20000c74

00019868 <nrfx_gpiote_channel_get>:
{
   19868:	b508      	push	{r3, lr}
   1986a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   1986c:	f7ff fe68 	bl	19540 <pin_in_use_by_te>
   19870:	b138      	cbz	r0, 19882 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   19872:	4b05      	ldr	r3, [pc, #20]	; (19888 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
   19874:	4805      	ldr	r0, [pc, #20]	; (1988c <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   19876:	3208      	adds	r2, #8
   19878:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   1987c:	0b5b      	lsrs	r3, r3, #13
   1987e:	700b      	strb	r3, [r1, #0]
}
   19880:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   19882:	4803      	ldr	r0, [pc, #12]	; (19890 <nrfx_gpiote_channel_get+0x28>)
   19884:	e7fc      	b.n	19880 <nrfx_gpiote_channel_get+0x18>
   19886:	bf00      	nop
   19888:	20000c74 	.word	0x20000c74
   1988c:	0bad0000 	.word	0x0bad0000
   19890:	0bad0004 	.word	0x0bad0004

00019894 <nrfx_gpiote_init>:
{
   19894:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   19896:	4c0f      	ldr	r4, [pc, #60]	; (198d4 <nrfx_gpiote_init+0x40>)
   19898:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   1989c:	b9bd      	cbnz	r5, 198ce <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   1989e:	2260      	movs	r2, #96	; 0x60
   198a0:	4629      	mov	r1, r5
   198a2:	f104 0010 	add.w	r0, r4, #16
   198a6:	f004 fbcf 	bl	1e048 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   198aa:	2006      	movs	r0, #6
   198ac:	f7eb fec8 	bl	5640 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   198b0:	4b09      	ldr	r3, [pc, #36]	; (198d8 <nrfx_gpiote_init+0x44>)
    return err_code;
   198b2:	480a      	ldr	r0, [pc, #40]	; (198dc <nrfx_gpiote_init+0x48>)
   198b4:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   198b8:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   198bc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   198c0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   198c4:	2301      	movs	r3, #1
   198c6:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   198ca:	6763      	str	r3, [r4, #116]	; 0x74
}
   198cc:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   198ce:	4804      	ldr	r0, [pc, #16]	; (198e0 <nrfx_gpiote_init+0x4c>)
   198d0:	e7fc      	b.n	198cc <nrfx_gpiote_init+0x38>
   198d2:	bf00      	nop
   198d4:	20000c74 	.word	0x20000c74
   198d8:	40006000 	.word	0x40006000
   198dc:	0bad0000 	.word	0x0bad0000
   198e0:	0bad0005 	.word	0x0bad0005

000198e4 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   198e4:	4b03      	ldr	r3, [pc, #12]	; (198f4 <nrfx_gpiote_is_init+0x10>)
   198e6:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   198ea:	3800      	subs	r0, #0
   198ec:	bf18      	it	ne
   198ee:	2001      	movne	r0, #1
   198f0:	4770      	bx	lr
   198f2:	bf00      	nop
   198f4:	20000c74 	.word	0x20000c74

000198f8 <nrfx_gpiote_channel_free>:
{
   198f8:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   198fa:	4801      	ldr	r0, [pc, #4]	; (19900 <nrfx_gpiote_channel_free+0x8>)
   198fc:	f7ff bd62 	b.w	193c4 <nrfx_flag32_free>
   19900:	20000ce4 	.word	0x20000ce4

00019904 <nrfx_gpiote_channel_alloc>:
{
   19904:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   19906:	4801      	ldr	r0, [pc, #4]	; (1990c <nrfx_gpiote_channel_alloc+0x8>)
   19908:	f7ff bd36 	b.w	19378 <nrfx_flag32_alloc>
   1990c:	20000ce4 	.word	0x20000ce4

00019910 <nrfx_gpiote_trigger_enable>:
{
   19910:	b537      	push	{r0, r1, r2, r4, r5, lr}
   19912:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   19914:	f7ff fe14 	bl	19540 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   19918:	f104 0208 	add.w	r2, r4, #8
   1991c:	4b1e      	ldr	r3, [pc, #120]	; (19998 <nrfx_gpiote_trigger_enable+0x88>)
   1991e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   19922:	b1e8      	cbz	r0, 19960 <nrfx_gpiote_trigger_enable+0x50>
   19924:	f013 0502 	ands.w	r5, r3, #2
   19928:	d11a      	bne.n	19960 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1992a:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   1992c:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
   1992e:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
   19932:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
   19936:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1993a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1993e:	6005      	str	r5, [r0, #0]
   19940:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   19942:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   19946:	f040 0001 	orr.w	r0, r0, #1
   1994a:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   1994e:	b129      	cbz	r1, 1995c <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   19950:	2201      	movs	r2, #1
   19952:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   19956:	4a11      	ldr	r2, [pc, #68]	; (1999c <nrfx_gpiote_trigger_enable+0x8c>)
   19958:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1995c:	b003      	add	sp, #12
   1995e:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   19960:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   19964:	2b04      	cmp	r3, #4
   19966:	d012      	beq.n	1998e <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   19968:	2b05      	cmp	r3, #5
   1996a:	d012      	beq.n	19992 <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1996c:	a801      	add	r0, sp, #4
   1996e:	9401      	str	r4, [sp, #4]
   19970:	f7ff fdd8 	bl	19524 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   19974:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   19976:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1997a:	40d9      	lsrs	r1, r3
   1997c:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   19980:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   19982:	4620      	mov	r0, r4
}
   19984:	b003      	add	sp, #12
   19986:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1998a:	f00b be0b 	b.w	255a4 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   1998e:	2103      	movs	r1, #3
   19990:	e7f7      	b.n	19982 <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   19992:	2102      	movs	r1, #2
   19994:	e7f5      	b.n	19982 <nrfx_gpiote_trigger_enable+0x72>
   19996:	bf00      	nop
   19998:	20000c74 	.word	0x20000c74
   1999c:	40006000 	.word	0x40006000

000199a0 <nrfx_gpiote_trigger_disable>:
{
   199a0:	b508      	push	{r3, lr}
   199a2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   199a4:	f7ff fdcc 	bl	19540 <pin_in_use_by_te>
   199a8:	b1c0      	cbz	r0, 199dc <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   199aa:	f102 0108 	add.w	r1, r2, #8
   199ae:	4b0e      	ldr	r3, [pc, #56]	; (199e8 <nrfx_gpiote_trigger_disable+0x48>)
   199b0:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   199b4:	0799      	lsls	r1, r3, #30
   199b6:	d411      	bmi.n	199dc <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   199b8:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   199ba:	2201      	movs	r2, #1
   199bc:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   199be:	009b      	lsls	r3, r3, #2
   199c0:	490a      	ldr	r1, [pc, #40]	; (199ec <nrfx_gpiote_trigger_disable+0x4c>)
   199c2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   199c6:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   199ca:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   199ce:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   199d2:	f022 0203 	bic.w	r2, r2, #3
   199d6:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   199da:	bd08      	pop	{r3, pc}
   199dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   199e0:	2100      	movs	r1, #0
   199e2:	4610      	mov	r0, r2
   199e4:	f00b bdde 	b.w	255a4 <nrf_gpio_cfg_sense_set>
   199e8:	20000c74 	.word	0x20000c74
   199ec:	40006000 	.word	0x40006000

000199f0 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   199f0:	4b0e      	ldr	r3, [pc, #56]	; (19a2c <nrfx_gpiote_pin_uninit+0x3c>)
   199f2:	f100 0208 	add.w	r2, r0, #8
{
   199f6:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   199f8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   199fc:	07db      	lsls	r3, r3, #31
{
   199fe:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   19a00:	d511      	bpl.n	19a26 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
   19a02:	f7ff ffcd 	bl	199a0 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   19a06:	4620      	mov	r0, r4
   19a08:	f7ff fdec 	bl	195e4 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   19a0c:	a801      	add	r0, sp, #4
   19a0e:	9401      	str	r4, [sp, #4]
   19a10:	f7ff fd88 	bl	19524 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   19a14:	9b01      	ldr	r3, [sp, #4]
   19a16:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   19a1a:	2202      	movs	r2, #2
   19a1c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   19a20:	4803      	ldr	r0, [pc, #12]	; (19a30 <nrfx_gpiote_pin_uninit+0x40>)
}
   19a22:	b002      	add	sp, #8
   19a24:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   19a26:	4803      	ldr	r0, [pc, #12]	; (19a34 <nrfx_gpiote_pin_uninit+0x44>)
   19a28:	e7fb      	b.n	19a22 <nrfx_gpiote_pin_uninit+0x32>
   19a2a:	bf00      	nop
   19a2c:	20000c74 	.word	0x20000c74
   19a30:	0bad0000 	.word	0x0bad0000
   19a34:	0bad0004 	.word	0x0bad0004

00019a38 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   19a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19a3c:	4b64      	ldr	r3, [pc, #400]	; (19bd0 <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
   19a3e:	4865      	ldr	r0, [pc, #404]	; (19bd4 <nrfx_gpiote_irq_handler+0x19c>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   19a40:	4965      	ldr	r1, [pc, #404]	; (19bd8 <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t status = 0;
   19a42:	2600      	movs	r6, #0
{
   19a44:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   19a46:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   19a48:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19a4a:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   19a4c:	b135      	cbz	r5, 19a5c <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   19a4e:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   19a52:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   19a54:	bf1e      	ittt	ne
   19a56:	601c      	strne	r4, [r3, #0]
   19a58:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   19a5a:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   19a5c:	3304      	adds	r3, #4
   19a5e:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   19a60:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   19a64:	d1f1      	bne.n	19a4a <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19a66:	f8df 816c 	ldr.w	r8, [pc, #364]	; 19bd4 <nrfx_gpiote_irq_handler+0x19c>
   19a6a:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   19a6e:	2b00      	cmp	r3, #0
   19a70:	f000 8091 	beq.w	19b96 <nrfx_gpiote_irq_handler+0x15e>
        *p_masks = gpio_regs[i]->LATCH;
   19a74:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   19a78:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   19a7c:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   19a7e:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   19a82:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
   19a86:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   19a88:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   19a8c:	2700      	movs	r7, #0
            while (latch[i])
   19a8e:	f10d 0910 	add.w	r9, sp, #16
   19a92:	017b      	lsls	r3, r7, #5
   19a94:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   19a96:	f04f 0a01 	mov.w	sl, #1
   19a9a:	e049      	b.n	19b30 <nrfx_gpiote_irq_handler+0xf8>
                pin += 32 * i;
   19a9c:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   19a9e:	4a4f      	ldr	r2, [pc, #316]	; (19bdc <nrfx_gpiote_irq_handler+0x1a4>)
                uint32_t pin = NRF_CTZ(latch[i]);
   19aa0:	fa94 f4a4 	rbit	r4, r4
   19aa4:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   19aa8:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   19aaa:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   19aae:	08e0      	lsrs	r0, r4, #3
   19ab0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   19ab4:	9403      	str	r4, [sp, #12]
    bit = BITMASK_RELBIT_GET(bit);
   19ab6:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   19aba:	fa0a fc02 	lsl.w	ip, sl, r2
   19abe:	f819 2000 	ldrb.w	r2, [r9, r0]
   19ac2:	ea22 020c 	bic.w	r2, r2, ip
   19ac6:	f809 2000 	strb.w	r2, [r9, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   19aca:	a803      	add	r0, sp, #12
   19acc:	f3c3 0582 	ubfx	r5, r3, #2, #3
   19ad0:	0899      	lsrs	r1, r3, #2
   19ad2:	f7ff fd27 	bl	19524 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   19ad6:	9a03      	ldr	r2, [sp, #12]
   19ad8:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    if (is_level(trigger))
   19adc:	074b      	lsls	r3, r1, #29
   19ade:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   19ae2:	46ab      	mov	fp, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   19ae4:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
   19ae8:	d529      	bpl.n	19b3e <nrfx_gpiote_irq_handler+0x106>
        call_handler(pin, trigger);
   19aea:	4620      	mov	r0, r4
   19aec:	4659      	mov	r1, fp
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   19aee:	b2d5      	uxtb	r5, r2
   19af0:	f7ff fd30 	bl	19554 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   19af4:	a803      	add	r0, sp, #12
   19af6:	9403      	str	r4, [sp, #12]
   19af8:	f7ff fd14 	bl	19524 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   19afc:	9b03      	ldr	r3, [sp, #12]
   19afe:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   19b02:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   19b06:	f3c3 4301 	ubfx	r3, r3, #16, #2
   19b0a:	429d      	cmp	r5, r3
   19b0c:	d107      	bne.n	19b1e <nrfx_gpiote_irq_handler+0xe6>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   19b0e:	2100      	movs	r1, #0
   19b10:	4620      	mov	r0, r4
   19b12:	f00b fd47 	bl	255a4 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   19b16:	4629      	mov	r1, r5
   19b18:	4620      	mov	r0, r4
   19b1a:	f00b fd43 	bl	255a4 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   19b1e:	a803      	add	r0, sp, #12
   19b20:	9403      	str	r4, [sp, #12]
   19b22:	f7ff fcff 	bl	19524 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   19b26:	9b03      	ldr	r3, [sp, #12]
   19b28:	fa0a f303 	lsl.w	r3, sl, r3
   19b2c:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
   19b30:	f859 4027 	ldr.w	r4, [r9, r7, lsl #2]
   19b34:	2c00      	cmp	r4, #0
   19b36:	d1b1      	bne.n	19a9c <nrfx_gpiote_irq_handler+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   19b38:	b9cf      	cbnz	r7, 19b6e <nrfx_gpiote_irq_handler+0x136>
   19b3a:	2701      	movs	r7, #1
   19b3c:	e7a9      	b.n	19a92 <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   19b3e:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
   19b40:	bf0c      	ite	eq
   19b42:	2103      	moveq	r1, #3
   19b44:	2102      	movne	r1, #2
   19b46:	4620      	mov	r0, r4
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   19b48:	9201      	str	r2, [sp, #4]
        nrf_gpio_cfg_sense_set(pin, next_sense);
   19b4a:	f00b fd2b 	bl	255a4 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   19b4e:	2d03      	cmp	r5, #3
   19b50:	d004      	beq.n	19b5c <nrfx_gpiote_irq_handler+0x124>
   19b52:	9a01      	ldr	r2, [sp, #4]
   19b54:	2a02      	cmp	r2, #2
   19b56:	d106      	bne.n	19b66 <nrfx_gpiote_irq_handler+0x12e>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   19b58:	2d01      	cmp	r5, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   19b5a:	d1e0      	bne.n	19b1e <nrfx_gpiote_irq_handler+0xe6>
            call_handler(pin, trigger);
   19b5c:	4659      	mov	r1, fp
   19b5e:	4620      	mov	r0, r4
   19b60:	f7ff fcf8 	bl	19554 <call_handler>
   19b64:	e7db      	b.n	19b1e <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   19b66:	2a03      	cmp	r2, #3
   19b68:	d1d9      	bne.n	19b1e <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   19b6a:	2d02      	cmp	r5, #2
   19b6c:	e7f5      	b.n	19b5a <nrfx_gpiote_irq_handler+0x122>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   19b6e:	f8c8 417c 	str.w	r4, [r8, #380]	; 0x17c
   19b72:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   19b76:	491a      	ldr	r1, [pc, #104]	; (19be0 <nrfx_gpiote_irq_handler+0x1a8>)
   19b78:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   19b7c:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   19b80:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   19b82:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   19b86:	f8d1 3520 	ldr.w	r3, [r1, #1312]	; 0x520
   19b8a:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   19b8c:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
   19b90:	4313      	orrs	r3, r2
   19b92:	f47f af7b 	bne.w	19a8c <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
   19b96:	2401      	movs	r4, #1
    while (mask)
   19b98:	b916      	cbnz	r6, 19ba0 <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   19b9a:	b007      	add	sp, #28
   19b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   19ba0:	fa96 f3a6 	rbit	r3, r6
   19ba4:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   19ba8:	fa04 f203 	lsl.w	r2, r4, r3
   19bac:	009b      	lsls	r3, r3, #2
   19bae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   19bb2:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   19bb6:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   19bba:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   19bbe:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   19bc2:	f3c0 2005 	ubfx	r0, r0, #8, #6
   19bc6:	f3c1 4101 	ubfx	r1, r1, #16, #2
   19bca:	f7ff fcc3 	bl	19554 <call_handler>
   19bce:	e7e3      	b.n	19b98 <nrfx_gpiote_irq_handler+0x160>
   19bd0:	40006100 	.word	0x40006100
   19bd4:	40006000 	.word	0x40006000
   19bd8:	40006120 	.word	0x40006120
   19bdc:	20000c74 	.word	0x20000c74
   19be0:	50000300 	.word	0x50000300

00019be4 <nvmc_word_write>:
   19be4:	4a04      	ldr	r2, [pc, #16]	; (19bf8 <nvmc_word_write+0x14>)
   19be6:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   19bea:	07db      	lsls	r3, r3, #31
   19bec:	d5fb      	bpl.n	19be6 <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
   19bee:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   19bf0:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   19bf4:	4770      	bx	lr
   19bf6:	bf00      	nop
   19bf8:	4001e000 	.word	0x4001e000

00019bfc <nrfx_nvmc_page_erase>:
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
   19bfc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   19c00:	691a      	ldr	r2, [r3, #16]
    return !(addr % flash_page_size_get());
   19c02:	fbb0 f3f2 	udiv	r3, r0, r2
   19c06:	fb02 0313 	mls	r3, r2, r3, r0

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
   19c0a:	b973      	cbnz	r3, 19c2a <nrfx_nvmc_page_erase+0x2e>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
   19c0c:	4b08      	ldr	r3, [pc, #32]	; (19c30 <nrfx_nvmc_page_erase+0x34>)
   19c0e:	2202      	movs	r2, #2
   19c10:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
   19c14:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   19c18:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   19c1c:	07d2      	lsls	r2, r2, #31
   19c1e:	d5fb      	bpl.n	19c18 <nrfx_nvmc_page_erase+0x1c>
    p_reg->CONFIG = (uint32_t)mode;
   19c20:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   19c22:	4804      	ldr	r0, [pc, #16]	; (19c34 <nrfx_nvmc_page_erase+0x38>)
   19c24:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   19c28:	4770      	bx	lr
        return NRFX_ERROR_INVALID_ADDR;
   19c2a:	4803      	ldr	r0, [pc, #12]	; (19c38 <nrfx_nvmc_page_erase+0x3c>)
}
   19c2c:	4770      	bx	lr
   19c2e:	bf00      	nop
   19c30:	4001e000 	.word	0x4001e000
   19c34:	0bad0000 	.word	0x0bad0000
   19c38:	0bad000a 	.word	0x0bad000a

00019c3c <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   19c3c:	b510      	push	{r4, lr}
   19c3e:	4c05      	ldr	r4, [pc, #20]	; (19c54 <nrfx_nvmc_word_write+0x18>)
   19c40:	2301      	movs	r3, #1
   19c42:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   19c46:	f7ff ffcd 	bl	19be4 <nvmc_word_write>
   19c4a:	2300      	movs	r3, #0
   19c4c:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504

    nvmc_readonly_mode_set();
}
   19c50:	bd10      	pop	{r4, pc}
   19c52:	bf00      	nop
   19c54:	4001e000 	.word	0x4001e000

00019c58 <nrfx_power_init>:
    return m_usbevt_handler;
}
#endif

nrfx_err_t nrfx_power_init(nrfx_power_config_t const * p_config)
{
   19c58:	b510      	push	{r4, lr}
    NRFX_ASSERT(p_config);
    if (m_initialized)
   19c5a:	4c18      	ldr	r4, [pc, #96]	; (19cbc <nrfx_power_init+0x64>)
   19c5c:	7823      	ldrb	r3, [r4, #0]
   19c5e:	bb53      	cbnz	r3, 19cb6 <nrfx_power_init+0x5e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

#if NRF_POWER_HAS_DCDCEN_VDDH
    nrf_power_dcdcen_vddh_set(NRF_POWER, p_config->dcdcenhv);
   19c60:	7802      	ldrb	r2, [r0, #0]
    if (enable && nrf52_errata_197())
   19c62:	0791      	lsls	r1, r2, #30
   19c64:	f3c2 0340 	ubfx	r3, r2, #1, #1
   19c68:	d511      	bpl.n	19c8e <nrfx_power_init+0x36>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   19c6a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   19c6e:	f8d3 1130 	ldr.w	r1, [r3, #304]	; 0x130
   19c72:	2908      	cmp	r1, #8
   19c74:	d11d      	bne.n	19cb2 <nrfx_power_init+0x5a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   19c76:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   19c7a:	2b05      	cmp	r3, #5
   19c7c:	d819      	bhi.n	19cb2 <nrfx_power_init+0x5a>
   19c7e:	4910      	ldr	r1, [pc, #64]	; (19cc0 <nrfx_power_init+0x68>)
   19c80:	5cc9      	ldrb	r1, [r1, r3]
   19c82:	2301      	movs	r3, #1
   19c84:	b119      	cbz	r1, 19c8e <nrfx_power_init+0x36>
        *(volatile uint32_t *)0x40000638ul = 1ul;
   19c86:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   19c8a:	f8c1 3638 	str.w	r3, [r1, #1592]	; 0x638
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   19c8e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   19c92:	f002 0201 	and.w	r2, r2, #1
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   19c96:	f8c1 3580 	str.w	r3, [r1, #1408]	; 0x580
    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   19c9a:	2000      	movs	r0, #0
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   19c9c:	f8c1 2578 	str.w	r2, [r1, #1400]	; 0x578
   19ca0:	f7eb fcf2 	bl	5688 <arch_irq_is_enabled>
   19ca4:	b908      	cbnz	r0, 19caa <nrfx_power_init+0x52>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   19ca6:	f7eb fccb 	bl	5640 <arch_irq_enable>
#endif
#endif // defined(REGULATORS_PRESENT)

    nrfx_power_clock_irq_init();

    m_initialized = true;
   19caa:	2301      	movs	r3, #1
    return NRFX_SUCCESS;
   19cac:	4805      	ldr	r0, [pc, #20]	; (19cc4 <nrfx_power_init+0x6c>)
    m_initialized = true;
   19cae:	7023      	strb	r3, [r4, #0]
}
   19cb0:	bd10      	pop	{r4, pc}
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   19cb2:	2301      	movs	r3, #1
   19cb4:	e7eb      	b.n	19c8e <nrfx_power_init+0x36>
        return NRFX_ERROR_ALREADY_INITIALIZED;
   19cb6:	4804      	ldr	r0, [pc, #16]	; (19cc8 <nrfx_power_init+0x70>)
   19cb8:	e7fa      	b.n	19cb0 <nrfx_power_init+0x58>
   19cba:	bf00      	nop
   19cbc:	20004129 	.word	0x20004129
   19cc0:	000282b0 	.word	0x000282b0
   19cc4:	0bad0000 	.word	0x0bad0000
   19cc8:	0bad000c 	.word	0x0bad000c

00019ccc <nrfx_power_usbevt_uninit>:
    p_reg->INTENCLR = mask;
   19ccc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   19cd0:	f44f 7260 	mov.w	r2, #896	; 0x380
   19cd4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}

void nrfx_power_usbevt_uninit(void)
{
    nrfx_power_usbevt_disable();
    m_usbevt_handler = NULL;
   19cd8:	4b01      	ldr	r3, [pc, #4]	; (19ce0 <nrfx_power_usbevt_uninit+0x14>)
   19cda:	2200      	movs	r2, #0
   19cdc:	601a      	str	r2, [r3, #0]
}
   19cde:	4770      	bx	lr
   19ce0:	20003cd0 	.word	0x20003cd0

00019ce4 <nrfx_power_usbevt_init>:
{
   19ce4:	b508      	push	{r3, lr}
    nrfx_power_usbevt_uninit();
   19ce6:	f7ff fff1 	bl	19ccc <nrfx_power_usbevt_uninit>
    if (p_config->handler != NULL)
   19cea:	6803      	ldr	r3, [r0, #0]
   19cec:	b10b      	cbz	r3, 19cf2 <nrfx_power_usbevt_init+0xe>
        m_usbevt_handler = p_config->handler;
   19cee:	4a01      	ldr	r2, [pc, #4]	; (19cf4 <nrfx_power_usbevt_init+0x10>)
   19cf0:	6013      	str	r3, [r2, #0]
}
   19cf2:	bd08      	pop	{r3, pc}
   19cf4:	20003cd0 	.word	0x20003cd0

00019cf8 <nrfx_power_irq_handler>:
    return p_reg->INTENSET;
   19cf8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000

#endif /* NRF_POWER_HAS_USBREG */


void nrfx_power_irq_handler(void)
{
   19cfc:	b510      	push	{r4, lr}
   19cfe:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    uint32_t enabled = nrf_power_int_enable_get(NRF_POWER);
    /* Prevent "unused variable" warning when all below blocks are disabled. */
    (void)enabled;

#if NRFX_POWER_SUPPORTS_POFCON
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
   19d02:	0762      	lsls	r2, r4, #29
   19d04:	d507      	bpl.n	19d16 <nrfx_power_irq_handler+0x1e>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_POFWARN))
   19d06:	f44f 7084 	mov.w	r0, #264	; 0x108
   19d0a:	f00b fc68 	bl	255de <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
   19d0e:	b110      	cbz	r0, 19d16 <nrfx_power_irq_handler+0x1e>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_pofwarn_handler != NULL);
        m_pofwarn_handler();
   19d10:	4b1e      	ldr	r3, [pc, #120]	; (19d8c <nrfx_power_irq_handler+0x94>)
   19d12:	681b      	ldr	r3, [r3, #0]
   19d14:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_SLEEPEVT
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
   19d16:	06a3      	lsls	r3, r4, #26
   19d18:	d508      	bpl.n	19d2c <nrfx_power_irq_handler+0x34>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER))
   19d1a:	f44f 708a 	mov.w	r0, #276	; 0x114
   19d1e:	f00b fc5e 	bl	255de <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
   19d22:	b118      	cbz	r0, 19d2c <nrfx_power_irq_handler+0x34>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_ENTER);
   19d24:	4b1a      	ldr	r3, [pc, #104]	; (19d90 <nrfx_power_irq_handler+0x98>)
   19d26:	2000      	movs	r0, #0
   19d28:	681b      	ldr	r3, [r3, #0]
   19d2a:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
   19d2c:	0660      	lsls	r0, r4, #25
   19d2e:	d508      	bpl.n	19d42 <nrfx_power_irq_handler+0x4a>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPEXIT))
   19d30:	f44f 708c 	mov.w	r0, #280	; 0x118
   19d34:	f00b fc53 	bl	255de <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
   19d38:	b118      	cbz	r0, 19d42 <nrfx_power_irq_handler+0x4a>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_EXIT);
   19d3a:	4b15      	ldr	r3, [pc, #84]	; (19d90 <nrfx_power_irq_handler+0x98>)
   19d3c:	2001      	movs	r0, #1
   19d3e:	681b      	ldr	r3, [r3, #0]
   19d40:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_USBREG
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
   19d42:	0621      	lsls	r1, r4, #24
   19d44:	d508      	bpl.n	19d58 <nrfx_power_irq_handler+0x60>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBDETECTED))
   19d46:	f44f 708e 	mov.w	r0, #284	; 0x11c
   19d4a:	f00b fc48 	bl	255de <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
   19d4e:	b118      	cbz	r0, 19d58 <nrfx_power_irq_handler+0x60>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_DETECTED);
   19d50:	4b10      	ldr	r3, [pc, #64]	; (19d94 <nrfx_power_irq_handler+0x9c>)
   19d52:	2000      	movs	r0, #0
   19d54:	681b      	ldr	r3, [r3, #0]
   19d56:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
   19d58:	05e2      	lsls	r2, r4, #23
   19d5a:	d508      	bpl.n	19d6e <nrfx_power_irq_handler+0x76>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBREMOVED))
   19d5c:	f44f 7090 	mov.w	r0, #288	; 0x120
   19d60:	f00b fc3d 	bl	255de <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
   19d64:	b118      	cbz	r0, 19d6e <nrfx_power_irq_handler+0x76>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_REMOVED);
   19d66:	4b0b      	ldr	r3, [pc, #44]	; (19d94 <nrfx_power_irq_handler+0x9c>)
   19d68:	2001      	movs	r0, #1
   19d6a:	681b      	ldr	r3, [r3, #0]
   19d6c:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
   19d6e:	05a3      	lsls	r3, r4, #22
   19d70:	d50a      	bpl.n	19d88 <nrfx_power_irq_handler+0x90>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBPWRRDY))
   19d72:	f44f 7092 	mov.w	r0, #292	; 0x124
   19d76:	f00b fc32 	bl	255de <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
   19d7a:	b128      	cbz	r0, 19d88 <nrfx_power_irq_handler+0x90>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
   19d7c:	4b05      	ldr	r3, [pc, #20]	; (19d94 <nrfx_power_irq_handler+0x9c>)
    }
#endif
}
   19d7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
   19d82:	681b      	ldr	r3, [r3, #0]
   19d84:	2002      	movs	r0, #2
   19d86:	4718      	bx	r3
}
   19d88:	bd10      	pop	{r4, pc}
   19d8a:	bf00      	nop
   19d8c:	20003cc8 	.word	0x20003cc8
   19d90:	20003ccc 	.word	0x20003ccc
   19d94:	20003cd0 	.word	0x20003cd0

00019d98 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   19d98:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   19d9a:	4801      	ldr	r0, [pc, #4]	; (19da0 <nrfx_ppi_channel_alloc+0x8>)
   19d9c:	f7ff baec 	b.w	19378 <nrfx_flag32_alloc>
   19da0:	20000cf0 	.word	0x20000cf0

00019da4 <nrf52_errata_187>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   19da4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   19da8:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   19dac:	2a08      	cmp	r2, #8
   19dae:	d106      	bne.n	19dbe <nrf52_errata_187+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   19db0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   19db4:	2b05      	cmp	r3, #5
   19db6:	d804      	bhi.n	19dc2 <nrf52_errata_187+0x1e>
   19db8:	4a03      	ldr	r2, [pc, #12]	; (19dc8 <nrf52_errata_187+0x24>)
   19dba:	5cd0      	ldrb	r0, [r2, r3]
   19dbc:	4770      	bx	lr
        return false;
   19dbe:	2000      	movs	r0, #0
   19dc0:	4770      	bx	lr
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   19dc2:	2001      	movs	r0, #1
}
   19dc4:	4770      	bx	lr
   19dc6:	bf00      	nop
   19dc8:	000282b6 	.word	0x000282b6

00019dcc <ep_state_access>:
 * @param ep Endpoint number.
 */
static inline usbd_ep_state_t* ep_state_access(nrfx_usbd_ep_t ep)
{
    NRFX_USBD_ASSERT_EP_VALID(ep);
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   19dcc:	4b05      	ldr	r3, [pc, #20]	; (19de4 <ep_state_access+0x18>)
   19dce:	f010 0f80 	tst.w	r0, #128	; 0x80
   19dd2:	f1a3 0290 	sub.w	r2, r3, #144	; 0x90
   19dd6:	bf08      	it	eq
   19dd8:	4613      	moveq	r3, r2
        NRF_USBD_EP_NR_GET(ep));
   19dda:	f000 000f 	and.w	r0, r0, #15
}
   19dde:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   19de2:	4770      	bx	lr
   19de4:	20003e44 	.word	0x20003e44

00019de8 <usbd_dma_pending_clear>:
 *
 * Internal function to clear the flag informing about EasyDMA transfer pending.
 * This function is called always just after the finished EasyDMA transfer is detected.
 */
static inline void usbd_dma_pending_clear(void)
{
   19de8:	b508      	push	{r3, lr}
}

/* Errata: USBD cannot receive tasks during DMA. **/
static inline bool nrfx_usbd_errata_199(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_199();
   19dea:	f00b fc19 	bl	25620 <nrf52_errata_166>
    if (nrfx_usbd_errata_199())
   19dee:	b118      	cbz	r0, 19df8 <usbd_dma_pending_clear+0x10>
    {
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
   19df0:	4b03      	ldr	r3, [pc, #12]	; (19e00 <usbd_dma_pending_clear+0x18>)
   19df2:	2200      	movs	r2, #0
   19df4:	f8c3 2c1c 	str.w	r2, [r3, #3100]	; 0xc1c
    }
    m_dma_pending = false;
   19df8:	4b02      	ldr	r3, [pc, #8]	; (19e04 <usbd_dma_pending_clear+0x1c>)
   19dfa:	2200      	movs	r2, #0
   19dfc:	701a      	strb	r2, [r3, #0]
}
   19dfe:	bd08      	pop	{r3, pc}
   19e00:	40027000 	.word	0x40027000
   19e04:	2000412b 	.word	0x2000412b

00019e08 <ev_usbreset_handler>:
 * Interrupt runtimes that would be vectorized using @ref m_isr.
 * @{
 */

static void ev_usbreset_handler(void)
{
   19e08:	b507      	push	{r0, r1, r2, lr}
    m_bus_suspend = false;
   19e0a:	4a09      	ldr	r2, [pc, #36]	; (19e30 <ev_usbreset_handler+0x28>)
   19e0c:	2300      	movs	r3, #0
   19e0e:	7013      	strb	r3, [r2, #0]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
   19e10:	4a08      	ldr	r2, [pc, #32]	; (19e34 <ev_usbreset_handler+0x2c>)

    const nrfx_usbd_evt_t evt = {
   19e12:	f8ad 3005 	strh.w	r3, [sp, #5]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
   19e16:	7013      	strb	r3, [r2, #0]
    const nrfx_usbd_evt_t evt = {
   19e18:	f88d 3007 	strb.w	r3, [sp, #7]
   19e1c:	2301      	movs	r3, #1
   19e1e:	f88d 3004 	strb.w	r3, [sp, #4]
            .type = NRFX_USBD_EVT_RESET
    };

    m_event_handler(&evt);
   19e22:	4b05      	ldr	r3, [pc, #20]	; (19e38 <ev_usbreset_handler+0x30>)
   19e24:	a801      	add	r0, sp, #4
   19e26:	681b      	ldr	r3, [r3, #0]
   19e28:	4798      	blx	r3
}
   19e2a:	b003      	add	sp, #12
   19e2c:	f85d fb04 	ldr.w	pc, [sp], #4
   19e30:	2000412a 	.word	0x2000412a
   19e34:	2000412d 	.word	0x2000412d
   19e38:	20003ed4 	.word	0x20003ed4

00019e3c <ev_usbevent_handler>:
    return p_reg->EVENTCAUSE;
   19e3c:	4b21      	ldr	r3, [pc, #132]	; (19ec4 <ev_usbevent_handler+0x88>)
    };
    m_event_handler(&evt);
}

static void ev_usbevent_handler(void)
{
   19e3e:	b513      	push	{r0, r1, r4, lr}
   19e40:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
    p_reg->EVENTCAUSE = flags;
   19e44:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    if (event & NRF_USBD_EVENTCAUSE_ISOOUTCRC_MASK)
    {
        NRFX_LOG_DEBUG("USBD event: ISOOUTCRC");
        /* Currently no support */
    }
    if (event & NRF_USBD_EVENTCAUSE_SUSPEND_MASK)
   19e48:	05e1      	lsls	r1, r4, #23
    (void) p_reg->EVENTCAUSE;
   19e4a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   19e4e:	d50e      	bpl.n	19e6e <ev_usbevent_handler+0x32>
    {
        NRFX_LOG_DEBUG("USBD event: SUSPEND");
        m_bus_suspend = true;
   19e50:	4b1d      	ldr	r3, [pc, #116]	; (19ec8 <ev_usbevent_handler+0x8c>)
   19e52:	2201      	movs	r2, #1
   19e54:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
   19e56:	2300      	movs	r3, #0
   19e58:	f8ad 3005 	strh.w	r3, [sp, #5]
   19e5c:	f88d 3007 	strb.w	r3, [sp, #7]
   19e60:	2302      	movs	r3, #2
   19e62:	f88d 3004 	strb.w	r3, [sp, #4]
                .type = NRFX_USBD_EVT_SUSPEND
        };
        m_event_handler(&evt);
   19e66:	4b19      	ldr	r3, [pc, #100]	; (19ecc <ev_usbevent_handler+0x90>)
   19e68:	a801      	add	r0, sp, #4
   19e6a:	681b      	ldr	r3, [r3, #0]
   19e6c:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_RESUME_MASK)
   19e6e:	05a2      	lsls	r2, r4, #22
   19e70:	d50d      	bpl.n	19e8e <ev_usbevent_handler+0x52>
    {
        NRFX_LOG_DEBUG("USBD event: RESUME");
        m_bus_suspend = false;
   19e72:	4a15      	ldr	r2, [pc, #84]	; (19ec8 <ev_usbevent_handler+0x8c>)
   19e74:	2300      	movs	r3, #0
   19e76:	7013      	strb	r3, [r2, #0]
        const nrfx_usbd_evt_t evt = {
   19e78:	f8ad 3005 	strh.w	r3, [sp, #5]
   19e7c:	f88d 3007 	strb.w	r3, [sp, #7]
   19e80:	2303      	movs	r3, #3
   19e82:	f88d 3004 	strb.w	r3, [sp, #4]
                .type = NRFX_USBD_EVT_RESUME
        };
        m_event_handler(&evt);
   19e86:	4b11      	ldr	r3, [pc, #68]	; (19ecc <ev_usbevent_handler+0x90>)
   19e88:	a801      	add	r0, sp, #4
   19e8a:	681b      	ldr	r3, [r3, #0]
   19e8c:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_WUREQ_MASK)
   19e8e:	0563      	lsls	r3, r4, #21
   19e90:	d515      	bpl.n	19ebe <ev_usbevent_handler+0x82>
    {
        NRFX_LOG_DEBUG("USBD event: WUREQ (%s)", m_bus_suspend ? "In Suspend" : "Active");
        if (m_bus_suspend)
   19e92:	4a0d      	ldr	r2, [pc, #52]	; (19ec8 <ev_usbevent_handler+0x8c>)
   19e94:	7813      	ldrb	r3, [r2, #0]
   19e96:	b193      	cbz	r3, 19ebe <ev_usbevent_handler+0x82>
        {
            NRFX_ASSERT(!nrf_usbd_lowpower_check(NRF_USBD));
            m_bus_suspend = false;
   19e98:	2300      	movs	r3, #0
   19e9a:	7013      	strb	r3, [r2, #0]
    p_reg->DPDMVALUE = ((uint32_t)val) << USBD_DPDMVALUE_STATE_Pos;
   19e9c:	4a09      	ldr	r2, [pc, #36]	; (19ec4 <ev_usbevent_handler+0x88>)
   19e9e:	2101      	movs	r1, #1
   19ea0:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   19ea4:	6591      	str	r1, [r2, #88]	; 0x58
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   19ea6:	6d92      	ldr	r2, [r2, #88]	; 0x58

            nrf_usbd_dpdmvalue_set(NRF_USBD, NRF_USBD_DPDMVALUE_RESUME);
            nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_DRIVEDPDM);

            const nrfx_usbd_evt_t evt = {
   19ea8:	f8ad 3005 	strh.w	r3, [sp, #5]
   19eac:	f88d 3007 	strb.w	r3, [sp, #7]
   19eb0:	2304      	movs	r3, #4
   19eb2:	f88d 3004 	strb.w	r3, [sp, #4]
                    .type = NRFX_USBD_EVT_WUREQ
            };
            m_event_handler(&evt);
   19eb6:	4b05      	ldr	r3, [pc, #20]	; (19ecc <ev_usbevent_handler+0x90>)
   19eb8:	a801      	add	r0, sp, #4
   19eba:	681b      	ldr	r3, [r3, #0]
   19ebc:	4798      	blx	r3
        }
    }
}
   19ebe:	b002      	add	sp, #8
   19ec0:	bd10      	pop	{r4, pc}
   19ec2:	bf00      	nop
   19ec4:	40027000 	.word	0x40027000
   19ec8:	2000412a 	.word	0x2000412a
   19ecc:	20003ed4 	.word	0x20003ed4

00019ed0 <usbd_errata_187_211_begin>:
	__asm__ volatile(
   19ed0:	f04f 0320 	mov.w	r3, #32
   19ed4:	f3ef 8011 	mrs	r0, BASEPRI
   19ed8:	f383 8812 	msr	BASEPRI_MAX, r3
   19edc:	f3bf 8f6f 	isb	sy
 * @brief Begin erratas 187 and 211.
 */
static inline void usbd_errata_187_211_begin(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   19ee0:	4b0a      	ldr	r3, [pc, #40]	; (19f0c <usbd_errata_187_211_begin+0x3c>)
   19ee2:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   19ee6:	2203      	movs	r2, #3
   19ee8:	b961      	cbnz	r1, 19f04 <usbd_errata_187_211_begin+0x34>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   19eea:	f249 3175 	movw	r1, #37749	; 0x9375
   19eee:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
   19ef2:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   19ef6:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
   19efa:	f380 8811 	msr	BASEPRI, r0
   19efe:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   19f02:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
   19f04:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
   19f08:	e7f7      	b.n	19efa <usbd_errata_187_211_begin+0x2a>
   19f0a:	bf00      	nop
   19f0c:	4006e000 	.word	0x4006e000

00019f10 <usbd_errata_187_211_end>:
	__asm__ volatile(
   19f10:	f04f 0320 	mov.w	r3, #32
   19f14:	f3ef 8011 	mrs	r0, BASEPRI
   19f18:	f383 8812 	msr	BASEPRI_MAX, r3
   19f1c:	f3bf 8f6f 	isb	sy
 * @brief End erratas 187 and 211.
 */
static inline void usbd_errata_187_211_end(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   19f20:	4b0a      	ldr	r3, [pc, #40]	; (19f4c <usbd_errata_187_211_end+0x3c>)
   19f22:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   19f26:	b961      	cbnz	r1, 19f42 <usbd_errata_187_211_end+0x32>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   19f28:	f249 3275 	movw	r2, #37749	; 0x9375
   19f2c:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
   19f30:	f8c3 1d14 	str.w	r1, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   19f34:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	__asm__ volatile(
   19f38:	f380 8811 	msr	BASEPRI, r0
   19f3c:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   19f40:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
   19f42:	2200      	movs	r2, #0
   19f44:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
   19f48:	e7f6      	b.n	19f38 <usbd_errata_187_211_end+0x28>
   19f4a:	bf00      	nop
   19f4c:	4006e000 	.word	0x4006e000

00019f50 <nrfx_usbd_feeder_flash>:
{
   19f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    size_t tx_size  = p_transfer->size;
   19f52:	684d      	ldr	r5, [r1, #4]
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   19f54:	4f0b      	ldr	r7, [pc, #44]	; (19f84 <nrfx_usbd_feeder_flash+0x34>)
   19f56:	4295      	cmp	r5, r2
   19f58:	bf28      	it	cs
   19f5a:	4615      	movcs	r5, r2
{
   19f5c:	460c      	mov	r4, r1
   19f5e:	4606      	mov	r6, r0
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   19f60:	462a      	mov	r2, r5
   19f62:	6809      	ldr	r1, [r1, #0]
   19f64:	4638      	mov	r0, r7
   19f66:	f004 f864 	bl	1e032 <memcpy>
    p_transfer->size -= tx_size;
   19f6a:	6860      	ldr	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
   19f6c:	6822      	ldr	r2, [r4, #0]
    p_transfer->size -= tx_size;
   19f6e:	1b40      	subs	r0, r0, r5
    p_next->size = tx_size;
   19f70:	e9c6 7500 	strd	r7, r5, [r6]
    p_transfer->p_data.addr += tx_size;
   19f74:	442a      	add	r2, r5
    p_transfer->size -= tx_size;
   19f76:	6060      	str	r0, [r4, #4]
}
   19f78:	3800      	subs	r0, #0
    p_transfer->p_data.addr += tx_size;
   19f7a:	6022      	str	r2, [r4, #0]
}
   19f7c:	bf18      	it	ne
   19f7e:	2001      	movne	r0, #1
   19f80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19f82:	bf00      	nop
   19f84:	20003ed8 	.word	0x20003ed8

00019f88 <nrfx_usbd_feeder_flash_zlp>:
{
   19f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    size_t tx_size  = p_transfer->size;
   19f8a:	684c      	ldr	r4, [r1, #4]
    if (tx_size > ep_size)
   19f8c:	4294      	cmp	r4, r2
   19f8e:	bf28      	it	cs
   19f90:	4614      	movcs	r4, r2
{
   19f92:	4606      	mov	r6, r0
   19f94:	460d      	mov	r5, r1
    if (tx_size != 0)
   19f96:	b18c      	cbz	r4, 19fbc <nrfx_usbd_feeder_flash_zlp+0x34>
        memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   19f98:	4f09      	ldr	r7, [pc, #36]	; (19fc0 <nrfx_usbd_feeder_flash_zlp+0x38>)
   19f9a:	6809      	ldr	r1, [r1, #0]
   19f9c:	4622      	mov	r2, r4
   19f9e:	4638      	mov	r0, r7
   19fa0:	f004 f847 	bl	1e032 <memcpy>
        p_next->p_data.tx = p_buffer;
   19fa4:	6037      	str	r7, [r6, #0]
    p_transfer->size -= tx_size;
   19fa6:	686b      	ldr	r3, [r5, #4]
    p_next->size = tx_size;
   19fa8:	6074      	str	r4, [r6, #4]
    p_transfer->size -= tx_size;
   19faa:	1b1b      	subs	r3, r3, r4
   19fac:	606b      	str	r3, [r5, #4]
    p_transfer->p_data.addr += tx_size;
   19fae:	682b      	ldr	r3, [r5, #0]
}
   19fb0:	1e20      	subs	r0, r4, #0
    p_transfer->p_data.addr += tx_size;
   19fb2:	4423      	add	r3, r4
   19fb4:	602b      	str	r3, [r5, #0]
}
   19fb6:	bf18      	it	ne
   19fb8:	2001      	movne	r0, #1
   19fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        p_next->p_data.tx = NULL;
   19fbc:	6004      	str	r4, [r0, #0]
   19fbe:	e7f2      	b.n	19fa6 <nrfx_usbd_feeder_flash_zlp+0x1e>
   19fc0:	20003ed8 	.word	0x20003ed8

00019fc4 <ev_sof_handler>:
{
   19fc4:	b507      	push	{r0, r1, r2, lr}
    nrfx_usbd_evt_t evt =  {
   19fc6:	2300      	movs	r3, #0
   19fc8:	f88d 3004 	strb.w	r3, [sp, #4]
    return p_reg->FRAMECNTR;
   19fcc:	4b0b      	ldr	r3, [pc, #44]	; (19ffc <ev_sof_handler+0x38>)
   19fce:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
            .data = { .sof = { .framecnt = (uint16_t)nrf_usbd_framecntr_get(NRF_USBD) }}
   19fd2:	f8ad 2006 	strh.w	r2, [sp, #6]
    size_t size_isoout = p_reg->SIZE.ISOOUT;
   19fd6:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
    m_ep_ready |= iso_ready_mask;
   19fda:	4a09      	ldr	r2, [pc, #36]	; (1a000 <ev_sof_handler+0x3c>)
        iso_ready_mask |= (1U << ep2bit(NRFX_USBD_EPOUT8));
   19fdc:	2b00      	cmp	r3, #0
    m_ep_ready |= iso_ready_mask;
   19fde:	6813      	ldr	r3, [r2, #0]
        iso_ready_mask |= (1U << ep2bit(NRFX_USBD_EPOUT8));
   19fe0:	bf0c      	ite	eq
   19fe2:	f44f 7180 	moveq.w	r1, #256	; 0x100
   19fe6:	f04f 2101 	movne.w	r1, #16777472	; 0x1000100
    m_ep_ready |= iso_ready_mask;
   19fea:	430b      	orrs	r3, r1
   19fec:	6013      	str	r3, [r2, #0]
    m_event_handler(&evt);
   19fee:	4b05      	ldr	r3, [pc, #20]	; (1a004 <ev_sof_handler+0x40>)
   19ff0:	a801      	add	r0, sp, #4
   19ff2:	681b      	ldr	r3, [r3, #0]
   19ff4:	4798      	blx	r3
}
   19ff6:	b003      	add	sp, #12
   19ff8:	f85d fb04 	ldr.w	pc, [sp], #4
   19ffc:	40027000 	.word	0x40027000
   1a000:	20003db0 	.word	0x20003db0
   1a004:	20003ed4 	.word	0x20003ed4

0001a008 <atomic_and.constprop.0.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1a008:	4b06      	ldr	r3, [pc, #24]	; (1a024 <atomic_and.constprop.0.isra.0+0x1c>)
   1a00a:	f3bf 8f5b 	dmb	ish
   1a00e:	e853 2f00 	ldrex	r2, [r3]
   1a012:	4002      	ands	r2, r0
   1a014:	e843 2100 	strex	r1, r2, [r3]
   1a018:	2900      	cmp	r1, #0
   1a01a:	d1f8      	bne.n	1a00e <atomic_and.constprop.0.isra.0+0x6>
   1a01c:	f3bf 8f5b 	dmb	ish
}
   1a020:	4770      	bx	lr
   1a022:	bf00      	nop
   1a024:	20003d40 	.word	0x20003d40

0001a028 <nrf_usbd_ep0in_dma_handler>:
{
   1a028:	b508      	push	{r3, lr}
    usbd_dma_pending_clear();
   1a02a:	f7ff fedd 	bl	19de8 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   1a02e:	4b08      	ldr	r3, [pc, #32]	; (1a050 <nrf_usbd_ep0in_dma_handler+0x28>)
   1a030:	f893 209e 	ldrb.w	r2, [r3, #158]	; 0x9e
   1a034:	2a03      	cmp	r2, #3
   1a036:	d105      	bne.n	1a044 <nrf_usbd_ep0in_dma_handler+0x1c>
}
   1a038:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   1a03c:	f06f 0001 	mvn.w	r0, #1
   1a040:	f7ff bfe2 	b.w	1a008 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
   1a044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   1a048:	2b00      	cmp	r3, #0
   1a04a:	d0f5      	beq.n	1a038 <nrf_usbd_ep0in_dma_handler+0x10>
}
   1a04c:	bd08      	pop	{r3, pc}
   1a04e:	bf00      	nop
   1a050:	20003db4 	.word	0x20003db4

0001a054 <usbd_ep_data_handler>:
    m_ep_ready |= (1U << bitpos);
   1a054:	2201      	movs	r2, #1
{
   1a056:	b573      	push	{r0, r1, r4, r5, r6, lr}
    m_ep_ready |= (1U << bitpos);
   1a058:	fa02 f501 	lsl.w	r5, r2, r1
   1a05c:	491c      	ldr	r1, [pc, #112]	; (1a0d0 <usbd_ep_data_handler+0x7c>)
   1a05e:	4e1d      	ldr	r6, [pc, #116]	; (1a0d4 <usbd_ep_data_handler+0x80>)
   1a060:	680b      	ldr	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
   1a062:	f010 0f80 	tst.w	r0, #128	; 0x80
    m_ep_ready |= (1U << bitpos);
   1a066:	ea43 0305 	orr.w	r3, r3, r5
{
   1a06a:	4604      	mov	r4, r0
    m_ep_ready |= (1U << bitpos);
   1a06c:	600b      	str	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
   1a06e:	d024      	beq.n	1a0ba <usbd_ep_data_handler+0x66>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
   1a070:	f000 020f 	and.w	r2, r0, #15
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   1a074:	4b18      	ldr	r3, [pc, #96]	; (1a0d8 <usbd_ep_data_handler+0x84>)
   1a076:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   1a07a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1a07e:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   1a082:	681a      	ldr	r2, [r3, #0]
    if (ret)
   1a084:	b132      	cbz	r2, 1a094 <usbd_ep_data_handler+0x40>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
   1a086:	2200      	movs	r2, #0
   1a088:	601a      	str	r2, [r3, #0]
            if (ep != NRFX_USBD_EPIN0)
   1a08a:	2880      	cmp	r0, #128	; 0x80
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
   1a08c:	681b      	ldr	r3, [r3, #0]
   1a08e:	d011      	beq.n	1a0b4 <usbd_ep_data_handler+0x60>
                nrf_usbd_epin_dma_handler(ep);
   1a090:	f00b fb16 	bl	256c0 <nrf_usbd_epin_dma_handler>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
   1a094:	6831      	ldr	r1, [r6, #0]
   1a096:	4029      	ands	r1, r5
   1a098:	d10a      	bne.n	1a0b0 <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   1a09a:	2306      	movs	r3, #6
   1a09c:	f88d 3004 	strb.w	r3, [sp, #4]
   1a0a0:	f88d 4006 	strb.w	r4, [sp, #6]
   1a0a4:	f88d 1007 	strb.w	r1, [sp, #7]
            m_event_handler(&evt);
   1a0a8:	4b0c      	ldr	r3, [pc, #48]	; (1a0dc <usbd_ep_data_handler+0x88>)
   1a0aa:	a801      	add	r0, sp, #4
   1a0ac:	681b      	ldr	r3, [r3, #0]
   1a0ae:	4798      	blx	r3
}
   1a0b0:	b002      	add	sp, #8
   1a0b2:	bd70      	pop	{r4, r5, r6, pc}
                nrf_usbd_ep0in_dma_handler();
   1a0b4:	f7ff ffb8 	bl	1a028 <nrf_usbd_ep0in_dma_handler>
   1a0b8:	e7ec      	b.n	1a094 <usbd_ep_data_handler+0x40>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
   1a0ba:	6833      	ldr	r3, [r6, #0]
   1a0bc:	421d      	tst	r5, r3
   1a0be:	d1f7      	bne.n	1a0b0 <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_WAITING);
   1a0c0:	2306      	movs	r3, #6
   1a0c2:	f88d 3004 	strb.w	r3, [sp, #4]
   1a0c6:	f88d 0006 	strb.w	r0, [sp, #6]
   1a0ca:	f88d 2007 	strb.w	r2, [sp, #7]
   1a0ce:	e7eb      	b.n	1a0a8 <usbd_ep_data_handler+0x54>
   1a0d0:	20003db0 	.word	0x20003db0
   1a0d4:	20003d40 	.word	0x20003d40
   1a0d8:	000271b4 	.word	0x000271b4
   1a0dc:	20003ed4 	.word	0x20003ed4

0001a0e0 <ev_setup_data_handler>:
{
   1a0e0:	b508      	push	{r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
   1a0e2:	4b05      	ldr	r3, [pc, #20]	; (1a0f8 <ev_setup_data_handler+0x18>)
   1a0e4:	781a      	ldrb	r2, [r3, #0]
   1a0e6:	4610      	mov	r0, r2
   1a0e8:	f00b fae0 	bl	256ac <ep2bit>
}
   1a0ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
   1a0f0:	4601      	mov	r1, r0
   1a0f2:	4610      	mov	r0, r2
   1a0f4:	f7ff bfae 	b.w	1a054 <usbd_ep_data_handler>
   1a0f8:	2000412d 	.word	0x2000412d

0001a0fc <ev_dma_epout8_handler>:
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
   1a0fc:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
   1a0fe:	f7ff fe73 	bl	19de8 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   1a102:	4b0c      	ldr	r3, [pc, #48]	; (1a134 <ev_dma_epout8_handler+0x38>)
   1a104:	f893 208e 	ldrb.w	r2, [r3, #142]	; 0x8e
   1a108:	2a03      	cmp	r2, #3
   1a10a:	d010      	beq.n	1a12e <ev_dma_epout8_handler+0x32>
    else if (p_state->handler.consumer == NULL)
   1a10c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1a110:	b96b      	cbnz	r3, 1a12e <ev_dma_epout8_handler+0x32>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   1a112:	f06f 7080 	mvn.w	r0, #16777216	; 0x1000000
   1a116:	f7ff ff77 	bl	1a008 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   1a11a:	2306      	movs	r3, #6
   1a11c:	f88d 3004 	strb.w	r3, [sp, #4]
   1a120:	2308      	movs	r3, #8
   1a122:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
   1a126:	4b04      	ldr	r3, [pc, #16]	; (1a138 <ev_dma_epout8_handler+0x3c>)
   1a128:	a801      	add	r0, sp, #4
   1a12a:	681b      	ldr	r3, [r3, #0]
   1a12c:	4798      	blx	r3
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
   1a12e:	b003      	add	sp, #12
   1a130:	f85d fb04 	ldr.w	pc, [sp], #4
   1a134:	20003db4 	.word	0x20003db4
   1a138:	20003ed4 	.word	0x20003ed4

0001a13c <ev_dma_epin8_handler>:
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
   1a13c:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
   1a13e:	f7ff fe53 	bl	19de8 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   1a142:	4b10      	ldr	r3, [pc, #64]	; (1a184 <ev_dma_epin8_handler+0x48>)
   1a144:	f893 211e 	ldrb.w	r2, [r3, #286]	; 0x11e
   1a148:	2a03      	cmp	r2, #3
   1a14a:	d106      	bne.n	1a15a <ev_dma_epin8_handler+0x1e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   1a14c:	f46f 7080 	mvn.w	r0, #256	; 0x100
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
   1a150:	b003      	add	sp, #12
   1a152:	f85d eb04 	ldr.w	lr, [sp], #4
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   1a156:	f7ff bf57 	b.w	1a008 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
   1a15a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   1a15e:	b96b      	cbnz	r3, 1a17c <ev_dma_epin8_handler+0x40>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   1a160:	f46f 7080 	mvn.w	r0, #256	; 0x100
   1a164:	f7ff ff50 	bl	1a008 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   1a168:	2306      	movs	r3, #6
   1a16a:	f88d 3004 	strb.w	r3, [sp, #4]
   1a16e:	2388      	movs	r3, #136	; 0x88
   1a170:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
   1a174:	4b04      	ldr	r3, [pc, #16]	; (1a188 <ev_dma_epin8_handler+0x4c>)
   1a176:	a801      	add	r0, sp, #4
   1a178:	681b      	ldr	r3, [r3, #0]
   1a17a:	4798      	blx	r3
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
   1a17c:	b003      	add	sp, #12
   1a17e:	f85d fb04 	ldr.w	pc, [sp], #4
   1a182:	bf00      	nop
   1a184:	20003db4 	.word	0x20003db4
   1a188:	20003ed4 	.word	0x20003ed4

0001a18c <nrfx_usbd_uninit>:

void nrfx_usbd_uninit(void)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    m_event_handler = NULL;
   1a18c:	4a02      	ldr	r2, [pc, #8]	; (1a198 <nrfx_usbd_uninit+0xc>)
   1a18e:	2300      	movs	r3, #0
   1a190:	6013      	str	r3, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_UNINITIALIZED;
   1a192:	4a02      	ldr	r2, [pc, #8]	; (1a19c <nrfx_usbd_uninit+0x10>)
   1a194:	7013      	strb	r3, [r2, #0]
    return;
}
   1a196:	4770      	bx	lr
   1a198:	20003ed4 	.word	0x20003ed4
   1a19c:	2000412c 	.word	0x2000412c

0001a1a0 <nrfx_usbd_enable>:


void nrfx_usbd_enable(void)
{
   1a1a0:	b508      	push	{r3, lr}
    p_reg->EVENTCAUSE = flags;
   1a1a2:	4b48      	ldr	r3, [pc, #288]	; (1a2c4 <nrfx_usbd_enable+0x124>)
   1a1a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1a1a8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
   1a1ac:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
   1a1b0:	f7ff fdf8 	bl	19da4 <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
   1a1b4:	b108      	cbz	r0, 1a1ba <nrfx_usbd_enable+0x1a>
        usbd_errata_187_211_begin();
   1a1b6:	f7ff fe8b 	bl	19ed0 <usbd_errata_187_211_begin>
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_171();
   1a1ba:	f00b fa31 	bl	25620 <nrf52_errata_166>
    if (nrfx_usbd_errata_171())
   1a1be:	b1c8      	cbz	r0, 1a1f4 <nrfx_usbd_enable+0x54>
	__asm__ volatile(
   1a1c0:	f04f 0320 	mov.w	r3, #32
   1a1c4:	f3ef 8011 	mrs	r0, BASEPRI
   1a1c8:	f383 8812 	msr	BASEPRI_MAX, r3
   1a1cc:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   1a1d0:	4b3d      	ldr	r3, [pc, #244]	; (1a2c8 <nrfx_usbd_enable+0x128>)
   1a1d2:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   1a1d6:	22c0      	movs	r2, #192	; 0xc0
   1a1d8:	2900      	cmp	r1, #0
   1a1da:	d16a      	bne.n	1a2b2 <nrfx_usbd_enable+0x112>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   1a1dc:	f249 3175 	movw	r1, #37749	; 0x9375
   1a1e0:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
   1a1e4:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   1a1e8:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
   1a1ec:	f380 8811 	msr	BASEPRI, r0
   1a1f0:	f3bf 8f6f 	isb	sy
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Enabled << USBD_ENABLE_ENABLE_Pos;
   1a1f4:	4b33      	ldr	r3, [pc, #204]	; (1a2c4 <nrfx_usbd_enable+0x124>)
   1a1f6:	2201      	movs	r2, #1
   1a1f8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
   1a1fc:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
    return p_reg->EVENTCAUSE;
   1a200:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    while (0 == (eventcause & nrf_usbd_eventcause_get(NRF_USBD)))
   1a204:	0512      	lsls	r2, r2, #20
   1a206:	d5fb      	bpl.n	1a200 <nrfx_usbd_enable+0x60>
    p_reg->EVENTCAUSE = flags;
   1a208:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1a20c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
   1a210:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   1a214:	f00b fa04 	bl	25620 <nrf52_errata_166>
    if (nrfx_usbd_errata_171())
   1a218:	b1c0      	cbz	r0, 1a24c <nrfx_usbd_enable+0xac>
	__asm__ volatile(
   1a21a:	f04f 0320 	mov.w	r3, #32
   1a21e:	f3ef 8011 	mrs	r0, BASEPRI
   1a222:	f383 8812 	msr	BASEPRI_MAX, r3
   1a226:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   1a22a:	4b27      	ldr	r3, [pc, #156]	; (1a2c8 <nrfx_usbd_enable+0x128>)
   1a22c:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   1a230:	2900      	cmp	r1, #0
   1a232:	d141      	bne.n	1a2b8 <nrfx_usbd_enable+0x118>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   1a234:	f249 3275 	movw	r2, #37749	; 0x9375
   1a238:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
   1a23c:	f8c3 1c14 	str.w	r1, [r3, #3092]	; 0xc14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   1a240:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	__asm__ volatile(
   1a244:	f380 8811 	msr	BASEPRI, r0
   1a248:	f3bf 8f6f 	isb	sy
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
   1a24c:	f7ff fdaa 	bl	19da4 <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
   1a250:	b130      	cbz	r0, 1a260 <nrfx_usbd_enable+0xc0>
        usbd_errata_187_211_end();
   1a252:	f7ff fe5d 	bl	19f10 <usbd_errata_187_211_end>
   1a256:	f7ff fda5 	bl	19da4 <nrf52_errata_187>
    }

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() || nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
   1a25a:	b108      	cbz	r0, 1a260 <nrfx_usbd_enable+0xc0>
#endif
    {
        usbd_errata_187_211_begin();
   1a25c:	f7ff fe38 	bl	19ed0 <usbd_errata_187_211_begin>
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_166();
   1a260:	f00b f9de 	bl	25620 <nrf52_errata_166>
   1a264:	4b17      	ldr	r3, [pc, #92]	; (1a2c4 <nrfx_usbd_enable+0x124>)
    }

    if (nrfx_usbd_errata_166())
   1a266:	b150      	cbz	r0, 1a27e <nrfx_usbd_enable+0xde>
    {
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7E3;
   1a268:	f240 72e3 	movw	r2, #2019	; 0x7e3
   1a26c:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) = 0x40;
   1a270:	2240      	movs	r2, #64	; 0x40
   1a272:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
  __ASM volatile ("isb 0xF":::"memory");
   1a276:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
   1a27a:	f3bf 8f4f 	dsb	sy
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
   1a27e:	2100      	movs	r1, #0
    p_reg->ISOSPLIT = split << USBD_ISOSPLIT_SPLIT_Pos;
   1a280:	2280      	movs	r2, #128	; 0x80
   1a282:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
   1a286:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
    else
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_NORESP);
    }

    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
   1a28a:	4b10      	ldr	r3, [pc, #64]	; (1a2cc <nrfx_usbd_enable+0x12c>)
   1a28c:	f240 12ff 	movw	r2, #511	; 0x1ff
   1a290:	601a      	str	r2, [r3, #0]
    m_ep_dma_waiting = 0;
   1a292:	4b0f      	ldr	r3, [pc, #60]	; (1a2d0 <nrfx_usbd_enable+0x130>)
   1a294:	6019      	str	r1, [r3, #0]
    usbd_dma_pending_clear();
   1a296:	f7ff fda7 	bl	19de8 <usbd_dma_pending_clear>
    m_last_setup_dir = NRFX_USBD_EPOUT0;
   1a29a:	4b0e      	ldr	r3, [pc, #56]	; (1a2d4 <nrfx_usbd_enable+0x134>)
   1a29c:	7019      	strb	r1, [r3, #0]

    m_drv_state = NRFX_DRV_STATE_POWERED_ON;
   1a29e:	4b0e      	ldr	r3, [pc, #56]	; (1a2d8 <nrfx_usbd_enable+0x138>)
   1a2a0:	2202      	movs	r2, #2
   1a2a2:	701a      	strb	r2, [r3, #0]
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
   1a2a4:	f7ff fd7e 	bl	19da4 <nrf52_errata_187>

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() && !nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
   1a2a8:	b150      	cbz	r0, 1a2c0 <nrfx_usbd_enable+0x120>
#endif
    {
        usbd_errata_187_211_end();
    }
}
   1a2aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        usbd_errata_187_211_end();
   1a2ae:	f7ff be2f 	b.w	19f10 <usbd_errata_187_211_end>
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
   1a2b2:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
   1a2b6:	e799      	b.n	1a1ec <nrfx_usbd_enable+0x4c>
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
   1a2b8:	2200      	movs	r2, #0
   1a2ba:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
   1a2be:	e7c1      	b.n	1a244 <nrfx_usbd_enable+0xa4>
}
   1a2c0:	bd08      	pop	{r3, pc}
   1a2c2:	bf00      	nop
   1a2c4:	40027000 	.word	0x40027000
   1a2c8:	4006e000 	.word	0x4006e000
   1a2cc:	20003db0 	.word	0x20003db0
   1a2d0:	20003d40 	.word	0x20003d40
   1a2d4:	2000412d 	.word	0x2000412d
   1a2d8:	2000412c 	.word	0x2000412c

0001a2dc <nrfx_usbd_start>:
}

void nrfx_usbd_start(bool enable_sof)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_POWERED_ON);
    m_bus_suspend = false;
   1a2dc:	4b0a      	ldr	r3, [pc, #40]	; (1a308 <nrfx_usbd_start+0x2c>)
   1a2de:	2200      	movs	r2, #0
{
   1a2e0:	b510      	push	{r4, lr}
    m_bus_suspend = false;
   1a2e2:	701a      	strb	r2, [r3, #0]
       NRF_USBD_INT_EP0SETUP_MASK     |
       NRF_USBD_INT_DATAEP_MASK;

   if (enable_sof)
   {
       ints_to_enable |= NRF_USBD_INT_SOF_MASK;
   1a2e4:	4a09      	ldr	r2, [pc, #36]	; (1a30c <nrfx_usbd_start+0x30>)
   1a2e6:	4b0a      	ldr	r3, [pc, #40]	; (1a310 <nrfx_usbd_start+0x34>)
    p_reg->INTENSET = mask;
   1a2e8:	4c0a      	ldr	r4, [pc, #40]	; (1a314 <nrfx_usbd_start+0x38>)
   1a2ea:	2800      	cmp	r0, #0
   1a2ec:	bf18      	it	ne
   1a2ee:	4613      	movne	r3, r2
   1a2f0:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   /* Enable all required interrupts */
   nrf_usbd_int_enable(NRF_USBD, ints_to_enable);

   /* Enable interrupt globally */
   NRFX_IRQ_PRIORITY_SET(USBD_IRQn, NRFX_USBD_DEFAULT_CONFIG_IRQ_PRIORITY);
   NRFX_IRQ_ENABLE(USBD_IRQn);
   1a2f4:	2027      	movs	r0, #39	; 0x27
   1a2f6:	f7eb f9a3 	bl	5640 <arch_irq_enable>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Enabled << USBD_USBPULLUP_CONNECT_Pos;
   1a2fa:	2301      	movs	r3, #1
   1a2fc:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
   1a300:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504

   /* Enable pullups */
   nrf_usbd_pullup_enable(NRF_USBD);
}
   1a304:	bd10      	pop	{r4, pc}
   1a306:	bf00      	nop
   1a308:	2000412a 	.word	0x2000412a
   1a30c:	01e01407 	.word	0x01e01407
   1a310:	01c01407 	.word	0x01c01407
   1a314:	40027000 	.word	0x40027000

0001a318 <nrfx_usbd_is_enabled>:
    return (m_drv_state >= NRFX_DRV_STATE_INITIALIZED);
}

bool nrfx_usbd_is_enabled(void)
{
    return (m_drv_state >= NRFX_DRV_STATE_POWERED_ON);
   1a318:	4b03      	ldr	r3, [pc, #12]	; (1a328 <nrfx_usbd_is_enabled+0x10>)
   1a31a:	7818      	ldrb	r0, [r3, #0]
}
   1a31c:	2801      	cmp	r0, #1
   1a31e:	bf94      	ite	ls
   1a320:	2000      	movls	r0, #0
   1a322:	2001      	movhi	r0, #1
   1a324:	4770      	bx	lr
   1a326:	bf00      	nop
   1a328:	2000412c 	.word	0x2000412c

0001a32c <nrfx_usbd_init>:
{
   1a32c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (m_drv_state != NRFX_DRV_STATE_UNINITIALIZED)
   1a330:	4b1d      	ldr	r3, [pc, #116]	; (1a3a8 <nrfx_usbd_init+0x7c>)
   1a332:	781c      	ldrb	r4, [r3, #0]
   1a334:	2c00      	cmp	r4, #0
   1a336:	d135      	bne.n	1a3a4 <nrfx_usbd_init+0x78>
    m_event_handler = event_handler;
   1a338:	4a1c      	ldr	r2, [pc, #112]	; (1a3ac <nrfx_usbd_init+0x80>)
   1a33a:	6010      	str	r0, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
   1a33c:	2201      	movs	r2, #1
   1a33e:	701a      	strb	r2, [r3, #0]
   1a340:	4625      	mov	r5, r4
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   1a342:	f240 18ff 	movw	r8, #511	; 0x1ff
        p_state->status = NRFX_USBD_EP_OK;
   1a346:	4627      	mov	r7, r4
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
   1a348:	f065 067f 	orn	r6, r5, #127	; 0x7f
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   1a34c:	f015 0f08 	tst.w	r5, #8
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
   1a350:	b2f6      	uxtb	r6, r6
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   1a352:	bf14      	ite	ne
   1a354:	4641      	movne	r1, r8
   1a356:	2140      	moveq	r1, #64	; 0x40
   1a358:	4630      	mov	r0, r6
   1a35a:	f00b f9e1 	bl	25720 <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
   1a35e:	4630      	mov	r0, r6
   1a360:	f7ff fd34 	bl	19dcc <ep_state_access>
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
   1a364:	3501      	adds	r5, #1
   1a366:	2d09      	cmp	r5, #9
        p_state->status = NRFX_USBD_EP_OK;
   1a368:	7387      	strb	r7, [r0, #14]
        p_state->handler.feeder = NULL;
   1a36a:	6007      	str	r7, [r0, #0]
        p_state->transfer_cnt = 0;
   1a36c:	6087      	str	r7, [r0, #8]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
   1a36e:	d1eb      	bne.n	1a348 <nrfx_usbd_init+0x1c>
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   1a370:	2140      	movs	r1, #64	; 0x40
        p_state->status = NRFX_USBD_EP_OK;
   1a372:	2500      	movs	r5, #0
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   1a374:	f240 16ff 	movw	r6, #511	; 0x1ff
   1a378:	4620      	mov	r0, r4
   1a37a:	f00b f9d1 	bl	25720 <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
   1a37e:	4620      	mov	r0, r4
   1a380:	f7ff fd24 	bl	19dcc <ep_state_access>
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
   1a384:	3401      	adds	r4, #1
   1a386:	b2e4      	uxtb	r4, r4
   1a388:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
   1a38a:	7385      	strb	r5, [r0, #14]
        p_state->handler.consumer = NULL;
   1a38c:	6005      	str	r5, [r0, #0]
        p_state->transfer_cnt = 0;
   1a38e:	6085      	str	r5, [r0, #8]
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
   1a390:	d102      	bne.n	1a398 <nrfx_usbd_init+0x6c>
    return NRFX_SUCCESS;
   1a392:	4807      	ldr	r0, [pc, #28]	; (1a3b0 <nrfx_usbd_init+0x84>)
}
   1a394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   1a398:	f014 0f08 	tst.w	r4, #8
   1a39c:	bf14      	ite	ne
   1a39e:	4631      	movne	r1, r6
   1a3a0:	2140      	moveq	r1, #64	; 0x40
   1a3a2:	e7e9      	b.n	1a378 <nrfx_usbd_init+0x4c>
        return NRFX_ERROR_INVALID_STATE;
   1a3a4:	4803      	ldr	r0, [pc, #12]	; (1a3b4 <nrfx_usbd_init+0x88>)
   1a3a6:	e7f5      	b.n	1a394 <nrfx_usbd_init+0x68>
   1a3a8:	2000412c 	.word	0x2000412c
   1a3ac:	20003ed4 	.word	0x20003ed4
   1a3b0:	0bad0000 	.word	0x0bad0000
   1a3b4:	0bad0005 	.word	0x0bad0005

0001a3b8 <nrfx_usbd_ep_transfer>:
}

nrfx_err_t nrfx_usbd_ep_transfer(
    nrfx_usbd_ep_t               ep,
    nrfx_usbd_transfer_t const * p_transfer)
{
   1a3b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a3bc:	4605      	mov	r5, r0
	__asm__ volatile(
   1a3be:	f04f 0320 	mov.w	r3, #32
   1a3c2:	f3ef 8811 	mrs	r8, BASEPRI
   1a3c6:	f383 8812 	msr	BASEPRI_MAX, r3
   1a3ca:	f3bf 8f6f 	isb	sy
    const uint8_t ep_bitpos = ep2bit(ep);
    NRFX_ASSERT(NULL != p_transfer);

    NRFX_CRITICAL_SECTION_ENTER();
    /* Setup data transaction can go only in one direction at a time */
    if ((NRF_USBD_EP_NR_GET(ep) == 0) && (ep != m_last_setup_dir))
   1a3ce:	f010 040f 	ands.w	r4, r0, #15
   1a3d2:	d103      	bne.n	1a3dc <nrfx_usbd_ep_transfer+0x24>
   1a3d4:	4b27      	ldr	r3, [pc, #156]	; (1a474 <nrfx_usbd_ep_transfer+0xbc>)
   1a3d6:	781b      	ldrb	r3, [r3, #0]
   1a3d8:	4283      	cmp	r3, r0
   1a3da:	d146      	bne.n	1a46a <nrfx_usbd_ep_transfer+0xb2>
            (NRFX_USBD_ISO_DEBUG || (!NRF_USBD_EPISO_CHECK(ep))))
        {
            NRFX_LOG_DEBUG("Transfer failed: Invalid EPr\n");
        }
    }
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
   1a3dc:	4b26      	ldr	r3, [pc, #152]	; (1a478 <nrfx_usbd_ep_transfer+0xc0>)
   1a3de:	4f27      	ldr	r7, [pc, #156]	; (1a47c <nrfx_usbd_ep_transfer+0xc4>)
   1a3e0:	681a      	ldr	r2, [r3, #0]
   1a3e2:	683e      	ldr	r6, [r7, #0]
    const uint8_t ep_bitpos = ep2bit(ep);
   1a3e4:	4628      	mov	r0, r5
   1a3e6:	f00b f961 	bl	256ac <ep2bit>
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
   1a3ea:	43d2      	mvns	r2, r2
   1a3ec:	b292      	uxth	r2, r2
   1a3ee:	f04f 0901 	mov.w	r9, #1
   1a3f2:	4332      	orrs	r2, r6
   1a3f4:	fa09 f900 	lsl.w	r9, r9, r0
   1a3f8:	ea12 0f09 	tst.w	r2, r9
   1a3fc:	d137      	bne.n	1a46e <nrfx_usbd_ep_transfer+0xb6>
            NRFX_LOG_DEBUG("Transfer failed: EP is busy");
        }
    }
    else
    {
        usbd_ep_state_t * p_state =  ep_state_access(ep);
   1a3fe:	4628      	mov	r0, r5
   1a400:	f7ff fce4 	bl	19dcc <ep_state_access>
        /* Prepare transfer context and handler description */
        nrfx_usbd_transfer_t * p_context;
        if (NRF_USBD_EPIN_CHECK(ep))
        {
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
   1a404:	220c      	movs	r2, #12
   1a406:	4354      	muls	r4, r2
        if (NRF_USBD_EPIN_CHECK(ep))
   1a408:	062a      	lsls	r2, r5, #24
        usbd_ep_state_t * p_state =  ep_state_access(ep);
   1a40a:	4603      	mov	r3, r0
        if (NRF_USBD_EPIN_CHECK(ep))
   1a40c:	d529      	bpl.n	1a462 <nrfx_usbd_ep_transfer+0xaa>
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
   1a40e:	4a1c      	ldr	r2, [pc, #112]	; (1a480 <nrfx_usbd_ep_transfer+0xc8>)

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   1a410:	6808      	ldr	r0, [r1, #0]
   1a412:	4414      	add	r4, r2
   1a414:	f000 4060 	and.w	r0, r0, #3758096384	; 0xe0000000
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
            {
                /* RAM */
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   1a418:	688a      	ldr	r2, [r1, #8]
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
   1a41a:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   1a41e:	f002 0201 	and.w	r2, r2, #1
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
   1a422:	d119      	bne.n	1a458 <nrfx_usbd_ep_transfer+0xa0>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   1a424:	b9b2      	cbnz	r2, 1a454 <nrfx_usbd_ep_transfer+0x9c>
                {
                    p_state->handler.feeder = nrfx_usbd_feeder_ram;
   1a426:	4a17      	ldr	r2, [pc, #92]	; (1a484 <nrfx_usbd_ep_transfer+0xcc>)
        }
        else
        {
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
            NRFX_ASSERT((p_transfer->p_data.rx == NULL) || (nrfx_is_in_ram(p_transfer->p_data.rx)));
            p_state->handler.consumer = nrfx_usbd_consumer;
   1a428:	601a      	str	r2, [r3, #0]
        }
        *p_context = *p_transfer;
   1a42a:	c907      	ldmia	r1, {r0, r1, r2}
   1a42c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        p_state->p_context = p_context;

        p_state->transfer_cnt = 0;
   1a430:	2200      	movs	r2, #0
   1a432:	609a      	str	r2, [r3, #8]
        p_state->status    =  NRFX_USBD_EP_OK;
   1a434:	739a      	strb	r2, [r3, #14]
        p_state->p_context = p_context;
   1a436:	605c      	str	r4, [r3, #4]
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a438:	4b13      	ldr	r3, [pc, #76]	; (1a488 <nrfx_usbd_ep_transfer+0xd0>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
        ret = NRFX_SUCCESS;
   1a43a:	4814      	ldr	r0, [pc, #80]	; (1a48c <nrfx_usbd_ep_transfer+0xd4>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
   1a43c:	ea46 0609 	orr.w	r6, r6, r9
   1a440:	2280      	movs	r2, #128	; 0x80
   1a442:	603e      	str	r6, [r7, #0]
   1a444:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	__asm__ volatile(
   1a448:	f388 8811 	msr	BASEPRI, r8
   1a44c:	f3bf 8f6f 	isb	sy
        usbd_int_rise();
    }
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
   1a450:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                    p_state->handler.feeder = nrfx_usbd_feeder_ram_zlp;
   1a454:	4a0e      	ldr	r2, [pc, #56]	; (1a490 <nrfx_usbd_ep_transfer+0xd8>)
   1a456:	e7e7      	b.n	1a428 <nrfx_usbd_ep_transfer+0x70>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   1a458:	b90a      	cbnz	r2, 1a45e <nrfx_usbd_ep_transfer+0xa6>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash;
   1a45a:	4a0e      	ldr	r2, [pc, #56]	; (1a494 <nrfx_usbd_ep_transfer+0xdc>)
   1a45c:	e7e4      	b.n	1a428 <nrfx_usbd_ep_transfer+0x70>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash_zlp;
   1a45e:	4a0e      	ldr	r2, [pc, #56]	; (1a498 <nrfx_usbd_ep_transfer+0xe0>)
   1a460:	e7e2      	b.n	1a428 <nrfx_usbd_ep_transfer+0x70>
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
   1a462:	4a0e      	ldr	r2, [pc, #56]	; (1a49c <nrfx_usbd_ep_transfer+0xe4>)
   1a464:	4414      	add	r4, r2
            p_state->handler.consumer = nrfx_usbd_consumer;
   1a466:	4a0e      	ldr	r2, [pc, #56]	; (1a4a0 <nrfx_usbd_ep_transfer+0xe8>)
   1a468:	e7de      	b.n	1a428 <nrfx_usbd_ep_transfer+0x70>
        ret = NRFX_ERROR_INVALID_ADDR;
   1a46a:	480e      	ldr	r0, [pc, #56]	; (1a4a4 <nrfx_usbd_ep_transfer+0xec>)
   1a46c:	e7ec      	b.n	1a448 <nrfx_usbd_ep_transfer+0x90>
        ret = NRFX_ERROR_BUSY;
   1a46e:	480e      	ldr	r0, [pc, #56]	; (1a4a8 <nrfx_usbd_ep_transfer+0xf0>)
   1a470:	e7ea      	b.n	1a448 <nrfx_usbd_ep_transfer+0x90>
   1a472:	bf00      	nop
   1a474:	2000412d 	.word	0x2000412d
   1a478:	20003db0 	.word	0x20003db0
   1a47c:	20003d40 	.word	0x20003d40
   1a480:	20003d44 	.word	0x20003d44
   1a484:	00025661 	.word	0x00025661
   1a488:	e000e100 	.word	0xe000e100
   1a48c:	0bad0000 	.word	0x0bad0000
   1a490:	00025683 	.word	0x00025683
   1a494:	00019f51 	.word	0x00019f51
   1a498:	00019f89 	.word	0x00019f89
   1a49c:	20003cd4 	.word	0x20003cd4
   1a4a0:	00025633 	.word	0x00025633
   1a4a4:	0bad000a 	.word	0x0bad000a
   1a4a8:	0bad000b 	.word	0x0bad000b

0001a4ac <nrfx_usbd_epout_size_get>:
    if (NRF_USBD_EPISO_CHECK(ep))
   1a4ac:	f010 0f08 	tst.w	r0, #8
   1a4b0:	4b07      	ldr	r3, [pc, #28]	; (1a4d0 <nrfx_usbd_epout_size_get+0x24>)
   1a4b2:	d006      	beq.n	1a4c2 <nrfx_usbd_epout_size_get+0x16>
        size_t size_isoout = p_reg->SIZE.ISOOUT;
   1a4b4:	f8d3 04c0 	ldr.w	r0, [r3, #1216]	; 0x4c0
            size_isoout = 0;
   1a4b8:	f410 3f80 	tst.w	r0, #65536	; 0x10000
   1a4bc:	bf18      	it	ne
   1a4be:	2000      	movne	r0, #0
   1a4c0:	4770      	bx	lr
    return p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
   1a4c2:	f000 000f 	and.w	r0, r0, #15
   1a4c6:	f500 7094 	add.w	r0, r0, #296	; 0x128
   1a4ca:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}

size_t nrfx_usbd_epout_size_get(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_epout_size_get(NRF_USBD, ep_to_hal(ep));
}
   1a4ce:	4770      	bx	lr
   1a4d0:	40027000 	.word	0x40027000

0001a4d4 <usbd_dmareq_process>:
{
   1a4d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!m_dma_pending)
   1a4d8:	f8df 815c 	ldr.w	r8, [pc, #348]	; 1a638 <usbd_dmareq_process+0x164>
   1a4dc:	f898 3000 	ldrb.w	r3, [r8]
{
   1a4e0:	b085      	sub	sp, #20
    if (!m_dma_pending)
   1a4e2:	2b00      	cmp	r3, #0
   1a4e4:	d16b      	bne.n	1a5be <usbd_dmareq_process+0xea>
        while (0 != (req = m_ep_dma_waiting & m_ep_ready))
   1a4e6:	f8df 9154 	ldr.w	r9, [pc, #340]	; 1a63c <usbd_dmareq_process+0x168>
   1a4ea:	4e55      	ldr	r6, [pc, #340]	; (1a640 <usbd_dmareq_process+0x16c>)
   1a4ec:	f8d9 1000 	ldr.w	r1, [r9]
   1a4f0:	6833      	ldr	r3, [r6, #0]
   1a4f2:	4019      	ands	r1, r3
   1a4f4:	d063      	beq.n	1a5be <usbd_dmareq_process+0xea>
            if (NRFX_USBD_CONFIG_DMASCHEDULER_ISO_BOOST && ((req & USBD_EPISO_BIT_MASK) != 0))
   1a4f6:	f011 2301 	ands.w	r3, r1, #16777472	; 0x1000100
    return NRF_CTZ(req);
   1a4fa:	bf14      	ite	ne
   1a4fc:	fa93 f1a3 	rbitne	r1, r3
   1a500:	fa91 f1a1 	rbiteq	r1, r1
   1a504:	fab1 f181 	clz	r1, r1
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   1a508:	290f      	cmp	r1, #15
   1a50a:	bf8a      	itet	hi
   1a50c:	f1a1 0410 	subhi.w	r4, r1, #16
   1a510:	f041 0480 	orrls.w	r4, r1, #128	; 0x80
   1a514:	b2e4      	uxtbhi	r4, r4
            usbd_ep_state_t * p_state = ep_state_access(ep);
   1a516:	4620      	mov	r0, r4
   1a518:	f7ff fc58 	bl	19dcc <ep_state_access>
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   1a51c:	f04f 0b01 	mov.w	fp, #1
            if (NRF_USBD_EPIN_CHECK(ep))
   1a520:	fa4f fa84 	sxtb.w	sl, r4
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   1a524:	fa0b f101 	lsl.w	r1, fp, r1
            if (NRF_USBD_EPIN_CHECK(ep))
   1a528:	f1ba 0f00 	cmp.w	sl, #0
            usbd_ep_state_t * p_state = ep_state_access(ep);
   1a52c:	4605      	mov	r5, r0
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   1a52e:	ea6f 0b01 	mvn.w	fp, r1
            if (NRF_USBD_EPIN_CHECK(ep))
   1a532:	da47      	bge.n	1a5c4 <usbd_dmareq_process+0xf0>
                continue_transfer = p_state->handler.feeder(
   1a534:	6803      	ldr	r3, [r0, #0]
   1a536:	8982      	ldrh	r2, [r0, #12]
   1a538:	6841      	ldr	r1, [r0, #4]
   1a53a:	a802      	add	r0, sp, #8
   1a53c:	4798      	blx	r3
                if (!continue_transfer)
   1a53e:	b900      	cbnz	r0, 1a542 <usbd_dmareq_process+0x6e>
                    p_state->handler.consumer = NULL;
   1a540:	6028      	str	r0, [r5, #0]
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_199();
   1a542:	f00b f86d 	bl	25620 <nrf52_errata_166>
    if (nrfx_usbd_errata_199())
   1a546:	b118      	cbz	r0, 1a550 <usbd_dmareq_process+0x7c>
        *((volatile uint32_t *)0x40027C1C) = 0x00000082;
   1a548:	4b3e      	ldr	r3, [pc, #248]	; (1a644 <usbd_dmareq_process+0x170>)
   1a54a:	2282      	movs	r2, #130	; 0x82
   1a54c:	f8c3 2c1c 	str.w	r2, [r3, #3100]	; 0xc1c
    m_dma_pending = true;
   1a550:	2301      	movs	r3, #1
            m_ep_ready &= ~(1U << pos);
   1a552:	6831      	ldr	r1, [r6, #0]
            p_state->transfer_cnt += transfer.size;
   1a554:	9a03      	ldr	r2, [sp, #12]
    m_dma_pending = true;
   1a556:	f888 3000 	strb.w	r3, [r8]
            p_state->transfer_cnt += transfer.size;
   1a55a:	68ab      	ldr	r3, [r5, #8]
            m_ep_ready &= ~(1U << pos);
   1a55c:	ea01 010b 	and.w	r1, r1, fp
            p_state->transfer_cnt += transfer.size;
   1a560:	4413      	add	r3, r2
    if (NRF_USBD_EPIN_CHECK(ep))
   1a562:	f1ba 0f00 	cmp.w	sl, #0
            m_ep_ready &= ~(1U << pos);
   1a566:	6031      	str	r1, [r6, #0]
            p_state->transfer_cnt += transfer.size;
   1a568:	60ab      	str	r3, [r5, #8]
            nrf_usbd_ep_easydma_set(NRF_USBD, ep, transfer.p_data.addr, (uint32_t)transfer.size);
   1a56a:	f004 0008 	and.w	r0, r4, #8
   1a56e:	9902      	ldr	r1, [sp, #8]
   1a570:	4b34      	ldr	r3, [pc, #208]	; (1a644 <usbd_dmareq_process+0x170>)
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   1a572:	f004 040f 	and.w	r4, r4, #15
    if (NRF_USBD_EPIN_CHECK(ep))
   1a576:	da4f      	bge.n	1a618 <usbd_dmareq_process+0x144>
        if (NRF_USBD_EPISO_CHECK(ep))
   1a578:	2800      	cmp	r0, #0
   1a57a:	d045      	beq.n	1a608 <usbd_dmareq_process+0x134>
            p_reg->ISOIN.PTR    = ptr;
   1a57c:	f8c3 16a0 	str.w	r1, [r3, #1696]	; 0x6a0
            p_reg->ISOIN.MAXCNT = maxcnt;
   1a580:	f8c3 26a4 	str.w	r2, [r3, #1700]	; 0x6a4
    return (nrf_usbd_task_t)(
   1a584:	2304      	movs	r3, #4
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   1a586:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    return (volatile uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   1a58a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1a58e:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   1a592:	2201      	movs	r2, #1
   1a594:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   1a596:	681b      	ldr	r3, [r3, #0]
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
   1a598:	4a2b      	ldr	r2, [pc, #172]	; (1a648 <usbd_dmareq_process+0x174>)
   1a59a:	4b2c      	ldr	r3, [pc, #176]	; (1a64c <usbd_dmareq_process+0x178>)
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   1a59c:	4929      	ldr	r1, [pc, #164]	; (1a644 <usbd_dmareq_process+0x170>)
   1a59e:	ea13 032a 	ands.w	r3, r3, sl, asr #32
   1a5a2:	bf38      	it	cc
   1a5a4:	4613      	movcc	r3, r2
   1a5a6:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   1a5aa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1a5ae:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   1a5b2:	681a      	ldr	r2, [r3, #0]
            while (!nrf_usbd_event_check(NRF_USBD, nrfx_usbd_ep_to_endevent(ep)) &&
   1a5b4:	b91a      	cbnz	r2, 1a5be <usbd_dmareq_process+0xea>
   1a5b6:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
   1a5ba:	2a00      	cmp	r2, #0
   1a5bc:	d0f9      	beq.n	1a5b2 <usbd_dmareq_process+0xde>
}
   1a5be:	b005      	add	sp, #20
   1a5c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
   1a5c4:	4620      	mov	r0, r4
   1a5c6:	f7ff ff71 	bl	1a4ac <nrfx_usbd_epout_size_get>
                continue_transfer = p_state->handler.consumer(
   1a5ca:	89aa      	ldrh	r2, [r5, #12]
   1a5cc:	6869      	ldr	r1, [r5, #4]
   1a5ce:	f8d5 c000 	ldr.w	ip, [r5]
   1a5d2:	4603      	mov	r3, r0
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
   1a5d4:	4607      	mov	r7, r0
                continue_transfer = p_state->handler.consumer(
   1a5d6:	a802      	add	r0, sp, #8
   1a5d8:	47e0      	blx	ip
                if (transfer.p_data.rx == NULL)
   1a5da:	9a02      	ldr	r2, [sp, #8]
   1a5dc:	2a00      	cmp	r2, #0
   1a5de:	d0ae      	beq.n	1a53e <usbd_dmareq_process+0x6a>
                else if (transfer.size < rx_size)
   1a5e0:	9a03      	ldr	r2, [sp, #12]
   1a5e2:	4297      	cmp	r7, r2
   1a5e4:	d9ab      	bls.n	1a53e <usbd_dmareq_process+0x6a>
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
   1a5e6:	2702      	movs	r7, #2
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   1a5e8:	4658      	mov	r0, fp
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
   1a5ea:	73af      	strb	r7, [r5, #14]
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   1a5ec:	f7ff fd0c 	bl	1a008 <atomic_and.constprop.0.isra.0>
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
   1a5f0:	2306      	movs	r3, #6
   1a5f2:	f88d 3004 	strb.w	r3, [sp, #4]
                    m_event_handler(&evt);
   1a5f6:	4b16      	ldr	r3, [pc, #88]	; (1a650 <usbd_dmareq_process+0x17c>)
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
   1a5f8:	f88d 4006 	strb.w	r4, [sp, #6]
                    m_event_handler(&evt);
   1a5fc:	681b      	ldr	r3, [r3, #0]
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
   1a5fe:	f88d 7007 	strb.w	r7, [sp, #7]
                    m_event_handler(&evt);
   1a602:	a801      	add	r0, sp, #4
   1a604:	4798      	blx	r3
                    continue;
   1a606:	e771      	b.n	1a4ec <usbd_dmareq_process+0x18>
            p_reg->EPIN[epnr].PTR    = ptr;
   1a608:	2014      	movs	r0, #20
   1a60a:	fb00 3304 	mla	r3, r0, r4, r3
   1a60e:	f8c3 1600 	str.w	r1, [r3, #1536]	; 0x600
            p_reg->EPIN[epnr].MAXCNT = maxcnt;
   1a612:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
   1a616:	e7b5      	b.n	1a584 <usbd_dmareq_process+0xb0>
        if (NRF_USBD_EPISO_CHECK(ep))
   1a618:	b128      	cbz	r0, 1a626 <usbd_dmareq_process+0x152>
            p_reg->ISOOUT.PTR    = ptr;
   1a61a:	f8c3 17a0 	str.w	r1, [r3, #1952]	; 0x7a0
            p_reg->ISOOUT.MAXCNT = maxcnt;
   1a61e:	f8c3 27a4 	str.w	r2, [r3, #1956]	; 0x7a4
    return (nrf_usbd_task_t)(
   1a622:	2328      	movs	r3, #40	; 0x28
   1a624:	e7af      	b.n	1a586 <usbd_dmareq_process+0xb2>
            p_reg->EPOUT[epnr].PTR    = ptr;
   1a626:	2014      	movs	r0, #20
   1a628:	fb00 3304 	mla	r3, r0, r4, r3
   1a62c:	f8c3 1700 	str.w	r1, [r3, #1792]	; 0x700
            p_reg->EPOUT[epnr].MAXCNT = maxcnt;
   1a630:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
   1a634:	e7f5      	b.n	1a622 <usbd_dmareq_process+0x14e>
   1a636:	bf00      	nop
   1a638:	2000412b 	.word	0x2000412b
   1a63c:	20003d40 	.word	0x20003d40
   1a640:	20003db0 	.word	0x20003db0
   1a644:	40027000 	.word	0x40027000
   1a648:	000271c6 	.word	0x000271c6
   1a64c:	000271b4 	.word	0x000271b4
   1a650:	20003ed4 	.word	0x20003ed4

0001a654 <ev_epdata_handler>:
{
   1a654:	b538      	push	{r3, r4, r5, lr}
    return p_reg->EPDATASTATUS;
   1a656:	4b0f      	ldr	r3, [pc, #60]	; (1a694 <ev_epdata_handler+0x40>)
   1a658:	f8d3 446c 	ldr.w	r4, [r3, #1132]	; 0x46c
    p_reg->EPDATASTATUS = flags;
   1a65c:	f8c3 446c 	str.w	r4, [r3, #1132]	; 0x46c
        dataepstatus &= ~(1UL << bitpos);
   1a660:	2501      	movs	r5, #1
    while (dataepstatus)
   1a662:	b91c      	cbnz	r4, 1a66c <ev_epdata_handler+0x18>
}
   1a664:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        usbd_dmareq_process();
   1a668:	f7ff bf34 	b.w	1a4d4 <usbd_dmareq_process>
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
   1a66c:	fa94 f3a4 	rbit	r3, r4
   1a670:	fab3 f383 	clz	r3, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   1a674:	2b0f      	cmp	r3, #15
   1a676:	bfc8      	it	gt
   1a678:	f1a3 0010 	subgt.w	r0, r3, #16
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
   1a67c:	4619      	mov	r1, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   1a67e:	bfd4      	ite	le
   1a680:	f043 0080 	orrle.w	r0, r3, #128	; 0x80
   1a684:	b2c0      	uxtbgt	r0, r0
        dataepstatus &= ~(1UL << bitpos);
   1a686:	fa05 f303 	lsl.w	r3, r5, r3
   1a68a:	ea24 0403 	bic.w	r4, r4, r3
        (void)(usbd_ep_data_handler(ep, bitpos));
   1a68e:	f7ff fce1 	bl	1a054 <usbd_ep_data_handler>
   1a692:	e7e6      	b.n	1a662 <ev_epdata_handler+0xe>
   1a694:	40027000 	.word	0x40027000

0001a698 <nrf_usbd_epout_dma_handler>:
{
   1a698:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1a69a:	4604      	mov	r4, r0
    usbd_dma_pending_clear();
   1a69c:	f7ff fba4 	bl	19de8 <usbd_dma_pending_clear>
    usbd_ep_state_t * p_state = ep_state_access(ep);
   1a6a0:	4620      	mov	r0, r4
   1a6a2:	f7ff fb93 	bl	19dcc <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   1a6a6:	7b83      	ldrb	r3, [r0, #14]
   1a6a8:	2b03      	cmp	r3, #3
   1a6aa:	d10d      	bne.n	1a6c8 <nrf_usbd_epout_dma_handler+0x30>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   1a6ac:	4620      	mov	r0, r4
   1a6ae:	f00a fffd 	bl	256ac <ep2bit>
   1a6b2:	2301      	movs	r3, #1
   1a6b4:	fa03 f000 	lsl.w	r0, r3, r0
   1a6b8:	43c0      	mvns	r0, r0
   1a6ba:	f7ff fca5 	bl	1a008 <atomic_and.constprop.0.isra.0>
}
   1a6be:	b003      	add	sp, #12
   1a6c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    usbd_dmareq_process();
   1a6c4:	f7ff bf06 	b.w	1a4d4 <usbd_dmareq_process>
    else if (p_state->handler.consumer == NULL)
   1a6c8:	6805      	ldr	r5, [r0, #0]
   1a6ca:	2d00      	cmp	r5, #0
   1a6cc:	d1f7      	bne.n	1a6be <nrf_usbd_epout_dma_handler+0x26>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   1a6ce:	4620      	mov	r0, r4
   1a6d0:	f00a ffec 	bl	256ac <ep2bit>
   1a6d4:	2301      	movs	r3, #1
   1a6d6:	fa03 f000 	lsl.w	r0, r3, r0
   1a6da:	43c0      	mvns	r0, r0
   1a6dc:	f7ff fc94 	bl	1a008 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   1a6e0:	2306      	movs	r3, #6
   1a6e2:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
   1a6e6:	4b04      	ldr	r3, [pc, #16]	; (1a6f8 <nrf_usbd_epout_dma_handler+0x60>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   1a6e8:	f88d 4006 	strb.w	r4, [sp, #6]
        m_event_handler(&evt);
   1a6ec:	681b      	ldr	r3, [r3, #0]
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   1a6ee:	f88d 5007 	strb.w	r5, [sp, #7]
        m_event_handler(&evt);
   1a6f2:	a801      	add	r0, sp, #4
   1a6f4:	4798      	blx	r3
   1a6f6:	e7e2      	b.n	1a6be <nrf_usbd_epout_dma_handler+0x26>
   1a6f8:	20003ed4 	.word	0x20003ed4

0001a6fc <nrfx_usbd_ep_stall>:
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_Stall << USBD_EPSTALL_STALL_Pos) | ep;
   1a6fc:	4b02      	ldr	r3, [pc, #8]	; (1a708 <nrfx_usbd_ep_stall+0xc>)
   1a6fe:	f440 7080 	orr.w	r0, r0, #256	; 0x100
   1a702:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518

void nrfx_usbd_ep_stall(nrfx_usbd_ep_t ep)
{
    NRFX_LOG_DEBUG("USB: EP %x stalled.", ep);
    nrf_usbd_ep_stall(NRF_USBD, ep_to_hal(ep));
}
   1a706:	4770      	bx	lr
   1a708:	40027000 	.word	0x40027000

0001a70c <nrfx_usbd_ep_stall_check>:
    if (NRF_USBD_EPISO_CHECK(ep))
   1a70c:	0702      	lsls	r2, r0, #28
   1a70e:	d413      	bmi.n	1a738 <nrfx_usbd_ep_stall_check+0x2c>
        return p_reg->HALTED.EPIN[epnr];
   1a710:	f000 030f 	and.w	r3, r0, #15
    if (NRF_USBD_EPIN_CHECK(ep))
   1a714:	f010 0f80 	tst.w	r0, #128	; 0x80
   1a718:	4a08      	ldr	r2, [pc, #32]	; (1a73c <nrfx_usbd_ep_stall_check+0x30>)
        return p_reg->HALTED.EPOUT[epnr];
   1a71a:	bf0b      	itete	eq
   1a71c:	f503 7388 	addeq.w	r3, r3, #272	; 0x110
        return p_reg->HALTED.EPIN[epnr];
   1a720:	f503 7384 	addne.w	r3, r3, #264	; 0x108
        return p_reg->HALTED.EPOUT[epnr];
   1a724:	eb02 0383 	addeq.w	r3, r2, r3, lsl #2
        return p_reg->HALTED.EPIN[epnr];
   1a728:	f852 0023 	ldrne.w	r0, [r2, r3, lsl #2]
        return p_reg->HALTED.EPOUT[epnr];
   1a72c:	bf08      	it	eq
   1a72e:	6858      	ldreq	r0, [r3, #4]
    return USBD_HALTED_EPOUT_GETSTATUS_Halted == nrf_usbd_halted_get(p_reg, ep);
   1a730:	1e43      	subs	r3, r0, #1
   1a732:	4258      	negs	r0, r3
   1a734:	4158      	adcs	r0, r3
   1a736:	4770      	bx	lr
        return false;
   1a738:	2000      	movs	r0, #0
}

bool nrfx_usbd_ep_stall_check(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_ep_is_stall(NRF_USBD, ep_to_hal(ep));
}
   1a73a:	4770      	bx	lr
   1a73c:	40027000 	.word	0x40027000

0001a740 <nrfx_usbd_ep_dtoggle_clear>:
    p_reg->DTOGGLE = ep | (NRF_USBD_DTOGGLE_NOP << USBD_DTOGGLE_VALUE_Pos);
   1a740:	4b04      	ldr	r3, [pc, #16]	; (1a754 <nrfx_usbd_ep_dtoggle_clear+0x14>)
   1a742:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->DTOGGLE = ep | (op << USBD_DTOGGLE_VALUE_Pos);
   1a746:	f440 7080 	orr.w	r0, r0, #256	; 0x100
   1a74a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    (void) p_reg->DTOGGLE;
   1a74e:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c

void nrfx_usbd_ep_dtoggle_clear(nrfx_usbd_ep_t ep)
{
    nrf_usbd_dtoggle_set(NRF_USBD, ep, NRF_USBD_DTOGGLE_DATA0);
}
   1a752:	4770      	bx	lr
   1a754:	40027000 	.word	0x40027000

0001a758 <nrfx_usbd_setup_get>:

void nrfx_usbd_setup_get(nrfx_usbd_setup_t * p_setup)
{
   1a758:	b510      	push	{r4, lr}
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
   1a75a:	2208      	movs	r2, #8
   1a75c:	2100      	movs	r1, #0
{
   1a75e:	4604      	mov	r4, r0
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
   1a760:	f003 fc72 	bl	1e048 <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
   1a764:	4b0e      	ldr	r3, [pc, #56]	; (1a7a0 <nrfx_usbd_setup_get+0x48>)
   1a766:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
   1a76a:	7022      	strb	r2, [r4, #0]
    return (uint8_t)(p_reg->BREQUEST);
   1a76c:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
   1a770:	7062      	strb	r2, [r4, #1]
    const uint16_t val = p_reg->WVALUEL;
   1a772:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
   1a776:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
   1a77a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
    p_setup->bRequest      = nrf_usbd_setup_brequest_get(NRF_USBD);
    p_setup->wValue        = nrf_usbd_setup_wvalue_get(NRF_USBD);
   1a77e:	8062      	strh	r2, [r4, #2]
    const uint16_t val = p_reg->WINDEXL;
   1a780:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
   1a784:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
   1a788:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->wIndex        = nrf_usbd_setup_windex_get(NRF_USBD);
   1a78c:	80a2      	strh	r2, [r4, #4]
    const uint16_t val = p_reg->WLENGTHL;
   1a78e:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
   1a792:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
   1a796:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    p_setup->wLength       = nrf_usbd_setup_wlength_get(NRF_USBD);
   1a79a:	80e3      	strh	r3, [r4, #6]
}
   1a79c:	bd10      	pop	{r4, pc}
   1a79e:	bf00      	nop
   1a7a0:	40027000 	.word	0x40027000

0001a7a4 <nrfx_usbd_setup_data_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   1a7a4:	4b02      	ldr	r3, [pc, #8]	; (1a7b0 <nrfx_usbd_setup_data_clear+0xc>)
   1a7a6:	2201      	movs	r2, #1
   1a7a8:	64da      	str	r2, [r3, #76]	; 0x4c
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   1a7aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c

void nrfx_usbd_setup_data_clear(void)
{
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0RCVOUT);
}
   1a7ac:	4770      	bx	lr
   1a7ae:	bf00      	nop
   1a7b0:	40027000 	.word	0x40027000

0001a7b4 <ev_dma_epout0_handler>:
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
   1a7b4:	b513      	push	{r0, r1, r4, lr}
    usbd_dma_pending_clear();
   1a7b6:	f7ff fb17 	bl	19de8 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   1a7ba:	4b10      	ldr	r3, [pc, #64]	; (1a7fc <ev_dma_epout0_handler+0x48>)
   1a7bc:	7b9a      	ldrb	r2, [r3, #14]
   1a7be:	2a03      	cmp	r2, #3
   1a7c0:	d106      	bne.n	1a7d0 <ev_dma_epout0_handler+0x1c>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   1a7c2:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
   1a7c6:	b002      	add	sp, #8
   1a7c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   1a7cc:	f7ff bc1c 	b.w	1a008 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.consumer == NULL)
   1a7d0:	681c      	ldr	r4, [r3, #0]
   1a7d2:	b974      	cbnz	r4, 1a7f2 <ev_dma_epout0_handler+0x3e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   1a7d4:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
   1a7d8:	f7ff fc16 	bl	1a008 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   1a7dc:	2306      	movs	r3, #6
   1a7de:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
   1a7e2:	4b07      	ldr	r3, [pc, #28]	; (1a800 <ev_dma_epout0_handler+0x4c>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   1a7e4:	f8ad 4006 	strh.w	r4, [sp, #6]
        m_event_handler(&evt);
   1a7e8:	681b      	ldr	r3, [r3, #0]
   1a7ea:	a801      	add	r0, sp, #4
   1a7ec:	4798      	blx	r3
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
   1a7ee:	b002      	add	sp, #8
   1a7f0:	bd10      	pop	{r4, pc}
   1a7f2:	b002      	add	sp, #8
   1a7f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrfx_usbd_setup_data_clear();
   1a7f8:	f7ff bfd4 	b.w	1a7a4 <nrfx_usbd_setup_data_clear>
   1a7fc:	20003db4 	.word	0x20003db4
   1a800:	20003ed4 	.word	0x20003ed4

0001a804 <nrfx_usbd_setup_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   1a804:	4b02      	ldr	r3, [pc, #8]	; (1a810 <nrfx_usbd_setup_clear+0xc>)
   1a806:	2201      	movs	r2, #1
   1a808:	651a      	str	r2, [r3, #80]	; 0x50
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   1a80a:	6d1b      	ldr	r3, [r3, #80]	; 0x50

void nrfx_usbd_setup_clear(void)
{
    NRFX_LOG_DEBUG(">> ep0status >>");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STATUS);
}
   1a80c:	4770      	bx	lr
   1a80e:	bf00      	nop
   1a810:	40027000 	.word	0x40027000

0001a814 <nrfx_usbd_setup_stall>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   1a814:	4b02      	ldr	r3, [pc, #8]	; (1a820 <nrfx_usbd_setup_stall+0xc>)
   1a816:	2201      	movs	r2, #1
   1a818:	655a      	str	r2, [r3, #84]	; 0x54
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   1a81a:	6d5b      	ldr	r3, [r3, #84]	; 0x54

void nrfx_usbd_setup_stall(void)
{
    NRFX_LOG_DEBUG("Setup stalled.");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STALL);
}
   1a81c:	4770      	bx	lr
   1a81e:	bf00      	nop
   1a820:	40027000 	.word	0x40027000

0001a824 <nrfx_usbd_last_setup_dir_get>:

nrfx_usbd_ep_t nrfx_usbd_last_setup_dir_get(void)
{
    return m_last_setup_dir;
}
   1a824:	4b01      	ldr	r3, [pc, #4]	; (1a82c <nrfx_usbd_last_setup_dir_get+0x8>)
   1a826:	7818      	ldrb	r0, [r3, #0]
   1a828:	4770      	bx	lr
   1a82a:	bf00      	nop
   1a82c:	2000412d 	.word	0x2000412d

0001a830 <nrfx_usbd_transfer_out_drop>:

void nrfx_usbd_transfer_out_drop(nrfx_usbd_ep_t ep)
{
   1a830:	b510      	push	{r4, lr}
   1a832:	4602      	mov	r2, r0
	__asm__ volatile(
   1a834:	f04f 0320 	mov.w	r3, #32
   1a838:	f3ef 8411 	mrs	r4, BASEPRI
   1a83c:	f383 8812 	msr	BASEPRI_MAX, r3
   1a840:	f3bf 8f6f 	isb	sy
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep));

    NRFX_CRITICAL_SECTION_ENTER();
    m_ep_ready &= ~(1U << ep2bit(ep));
   1a844:	f00a ff32 	bl	256ac <ep2bit>
   1a848:	490d      	ldr	r1, [pc, #52]	; (1a880 <nrfx_usbd_transfer_out_drop+0x50>)
   1a84a:	2301      	movs	r3, #1
   1a84c:	fa03 f000 	lsl.w	r0, r3, r0
   1a850:	680b      	ldr	r3, [r1, #0]
   1a852:	ea23 0300 	bic.w	r3, r3, r0
   1a856:	600b      	str	r3, [r1, #0]
    if (!NRF_USBD_EPISO_CHECK(ep))
   1a858:	f012 0108 	ands.w	r1, r2, #8
   1a85c:	d10a      	bne.n	1a874 <nrfx_usbd_transfer_out_drop+0x44>
    p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)] = 0;
   1a85e:	f002 030f 	and.w	r3, r2, #15
   1a862:	009b      	lsls	r3, r3, #2
   1a864:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1a868:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
   1a86c:	f8c3 14a0 	str.w	r1, [r3, #1184]	; 0x4a0
    (void) p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
   1a870:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
	__asm__ volatile(
   1a874:	f384 8811 	msr	BASEPRI, r4
   1a878:	f3bf 8f6f 	isb	sy
    {
        nrf_usbd_epout_clear(NRF_USBD, ep);
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   1a87c:	bd10      	pop	{r4, pc}
   1a87e:	bf00      	nop
   1a880:	20003db0 	.word	0x20003db0

0001a884 <usbd_ep_abort>:
{
   1a884:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1a886:	4601      	mov	r1, r0
	__asm__ volatile(
   1a888:	f04f 0320 	mov.w	r3, #32
   1a88c:	f3ef 8511 	mrs	r5, BASEPRI
   1a890:	f383 8812 	msr	BASEPRI_MAX, r3
   1a894:	f3bf 8f6f 	isb	sy
    usbd_ep_state_t * p_state = ep_state_access(ep);
   1a898:	f7ff fa98 	bl	19dcc <ep_state_access>
   1a89c:	4606      	mov	r6, r0
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   1a89e:	4608      	mov	r0, r1
   1a8a0:	f00a ff04 	bl	256ac <ep2bit>
   1a8a4:	2201      	movs	r2, #1
    if (NRF_USBD_EPOUT_CHECK(ep))
   1a8a6:	f011 0f80 	tst.w	r1, #128	; 0x80
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   1a8aa:	fa02 f200 	lsl.w	r2, r2, r0
   1a8ae:	482e      	ldr	r0, [pc, #184]	; (1a968 <usbd_ep_abort+0xe4>)
    if (NRF_USBD_EPOUT_CHECK(ep))
   1a8b0:	d118      	bne.n	1a8e4 <usbd_ep_abort+0x60>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   1a8b2:	6803      	ldr	r3, [r0, #0]
   1a8b4:	ea32 0403 	bics.w	r4, r2, r3
   1a8b8:	d00a      	beq.n	1a8d0 <usbd_ep_abort+0x4c>
            nrfx_usbd_transfer_out_drop(ep);
   1a8ba:	4608      	mov	r0, r1
   1a8bc:	f7ff ffb8 	bl	1a830 <nrfx_usbd_transfer_out_drop>
        p_state->status = NRFX_USBD_EP_ABORTED;
   1a8c0:	2303      	movs	r3, #3
   1a8c2:	73b3      	strb	r3, [r6, #14]
	__asm__ volatile(
   1a8c4:	f385 8811 	msr	BASEPRI, r5
   1a8c8:	f3bf 8f6f 	isb	sy
}
   1a8cc:	b003      	add	sp, #12
   1a8ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   1a8d0:	ea23 0302 	bic.w	r3, r3, r2
            p_state->handler.consumer = NULL;
   1a8d4:	6034      	str	r4, [r6, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   1a8d6:	6003      	str	r3, [r0, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
   1a8d8:	4b24      	ldr	r3, [pc, #144]	; (1a96c <usbd_ep_abort+0xe8>)
   1a8da:	6818      	ldr	r0, [r3, #0]
   1a8dc:	ea20 0002 	bic.w	r0, r0, r2
   1a8e0:	6018      	str	r0, [r3, #0]
   1a8e2:	e7ed      	b.n	1a8c0 <usbd_ep_abort+0x3c>
        if(!NRF_USBD_EPISO_CHECK(ep))
   1a8e4:	070b      	lsls	r3, r1, #28
   1a8e6:	d415      	bmi.n	1a914 <usbd_ep_abort+0x90>
            if(ep != NRFX_USBD_EPIN0)
   1a8e8:	2980      	cmp	r1, #128	; 0x80
   1a8ea:	4b21      	ldr	r3, [pc, #132]	; (1a970 <usbd_ep_abort+0xec>)
   1a8ec:	d02f      	beq.n	1a94e <usbd_ep_abort+0xca>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
   1a8ee:	f001 040f 	and.w	r4, r1, #15
   1a8f2:	f204 34da 	addw	r4, r4, #986	; 0x3da
   1a8f6:	0064      	lsls	r4, r4, #1
   1a8f8:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   1a8fc:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   1a900:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   1a904:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   1a906:	f044 0402 	orr.w	r4, r4, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   1a90a:	433c      	orrs	r4, r7
   1a90c:	f8c3 4804 	str.w	r4, [r3, #2052]	; 0x804
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
   1a910:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
   1a914:	4f15      	ldr	r7, [pc, #84]	; (1a96c <usbd_ep_abort+0xe8>)
   1a916:	6804      	ldr	r4, [r0, #0]
   1a918:	683b      	ldr	r3, [r7, #0]
   1a91a:	ea64 0c03 	orn	ip, r4, r3
   1a91e:	ea1c 0f02 	tst.w	ip, r2
   1a922:	d0cf      	beq.n	1a8c4 <usbd_ep_abort+0x40>
            m_ep_ready       |=   1U << ep2bit(ep) ;
   1a924:	4313      	orrs	r3, r2
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   1a926:	ea24 0402 	bic.w	r4, r4, r2
            m_ep_ready       |=   1U << ep2bit(ep) ;
   1a92a:	603b      	str	r3, [r7, #0]
            p_state->handler.feeder = NULL;
   1a92c:	2300      	movs	r3, #0
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   1a92e:	6004      	str	r4, [r0, #0]
            p_state->handler.feeder = NULL;
   1a930:	6033      	str	r3, [r6, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
   1a932:	2303      	movs	r3, #3
   1a934:	73b3      	strb	r3, [r6, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
   1a936:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
   1a93a:	4b0e      	ldr	r3, [pc, #56]	; (1a974 <usbd_ep_abort+0xf0>)
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
   1a93c:	f88d 1006 	strb.w	r1, [sp, #6]
   1a940:	2206      	movs	r2, #6
            m_event_handler(&evt);
   1a942:	681b      	ldr	r3, [r3, #0]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
   1a944:	f88d 2004 	strb.w	r2, [sp, #4]
            m_event_handler(&evt);
   1a948:	a801      	add	r0, sp, #4
   1a94a:	4798      	blx	r3
   1a94c:	e7ba      	b.n	1a8c4 <usbd_ep_abort+0x40>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
   1a94e:	f240 74b4 	movw	r4, #1972	; 0x7b4
   1a952:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   1a956:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   1a95a:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   1a95e:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   1a960:	f044 0404 	orr.w	r4, r4, #4
   1a964:	e7d1      	b.n	1a90a <usbd_ep_abort+0x86>
   1a966:	bf00      	nop
   1a968:	20003d40 	.word	0x20003d40
   1a96c:	20003db0 	.word	0x20003db0
   1a970:	40027000 	.word	0x40027000
   1a974:	20003ed4 	.word	0x20003ed4

0001a978 <ev_setup_handler>:
{
   1a978:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return (uint8_t)(p_reg->BMREQUESTTYPE);
   1a97a:	4b17      	ldr	r3, [pc, #92]	; (1a9d8 <ev_setup_handler+0x60>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   1a97c:	4c17      	ldr	r4, [pc, #92]	; (1a9dc <ev_setup_handler+0x64>)
   1a97e:	f8d3 5480 	ldr.w	r5, [r3, #1152]	; 0x480
   1a982:	6823      	ldr	r3, [r4, #0]
        & (1U <<ep2bit(m_last_setup_dir)))
   1a984:	4e16      	ldr	r6, [pc, #88]	; (1a9e0 <ev_setup_handler+0x68>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   1a986:	43da      	mvns	r2, r3
   1a988:	4b16      	ldr	r3, [pc, #88]	; (1a9e4 <ev_setup_handler+0x6c>)
        & (1U <<ep2bit(m_last_setup_dir)))
   1a98a:	7831      	ldrb	r1, [r6, #0]
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   1a98c:	681b      	ldr	r3, [r3, #0]
   1a98e:	b292      	uxth	r2, r2
        & (1U <<ep2bit(m_last_setup_dir)))
   1a990:	4608      	mov	r0, r1
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   1a992:	431a      	orrs	r2, r3
        & (1U <<ep2bit(m_last_setup_dir)))
   1a994:	f00a fe8a 	bl	256ac <ep2bit>
   1a998:	2301      	movs	r3, #1
   1a99a:	4083      	lsls	r3, r0
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   1a99c:	4213      	tst	r3, r2
   1a99e:	d002      	beq.n	1a9a6 <ev_setup_handler+0x2e>
        usbd_ep_abort(m_last_setup_dir);
   1a9a0:	4608      	mov	r0, r1
   1a9a2:	f7ff ff6f 	bl	1a884 <usbd_ep_abort>
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
   1a9a6:	f005 0580 	and.w	r5, r5, #128	; 0x80
    (void)(NRFX_ATOMIC_FETCH_AND(
   1a9aa:	f06f 1001 	mvn.w	r0, #65537	; 0x10001
    m_last_setup_dir =
   1a9ae:	7035      	strb	r5, [r6, #0]
    (void)(NRFX_ATOMIC_FETCH_AND(
   1a9b0:	f7ff fb2a 	bl	1a008 <atomic_and.constprop.0.isra.0>
    m_ep_ready |= 1U << ep2bit(NRFX_USBD_EPIN0);
   1a9b4:	6823      	ldr	r3, [r4, #0]
   1a9b6:	f043 0301 	orr.w	r3, r3, #1
   1a9ba:	6023      	str	r3, [r4, #0]
    const nrfx_usbd_evt_t evt = {
   1a9bc:	2300      	movs	r3, #0
   1a9be:	f8ad 3005 	strh.w	r3, [sp, #5]
   1a9c2:	f88d 3007 	strb.w	r3, [sp, #7]
   1a9c6:	2305      	movs	r3, #5
   1a9c8:	f88d 3004 	strb.w	r3, [sp, #4]
    m_event_handler(&evt);
   1a9cc:	4b06      	ldr	r3, [pc, #24]	; (1a9e8 <ev_setup_handler+0x70>)
   1a9ce:	a801      	add	r0, sp, #4
   1a9d0:	681b      	ldr	r3, [r3, #0]
   1a9d2:	4798      	blx	r3
}
   1a9d4:	b002      	add	sp, #8
   1a9d6:	bd70      	pop	{r4, r5, r6, pc}
   1a9d8:	40027000 	.word	0x40027000
   1a9dc:	20003db0 	.word	0x20003db0
   1a9e0:	2000412d 	.word	0x2000412d
   1a9e4:	20003d40 	.word	0x20003d40
   1a9e8:	20003ed4 	.word	0x20003ed4

0001a9ec <nrfx_usbd_irq_handler>:
    return p_reg->INTENSET;
   1a9ec:	4b1b      	ldr	r3, [pc, #108]	; (1aa5c <nrfx_usbd_irq_handler+0x70>)
   1a9ee:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
    uint32_t active = 0;
   1a9f2:	2300      	movs	r3, #0
{
   1a9f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
            active |= 1UL << event_nr;
   1a9f8:	2401      	movs	r4, #1
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
   1a9fa:	461d      	mov	r5, r3
    while (to_process)
   1a9fc:	b970      	cbnz	r0, 1aa1c <nrfx_usbd_irq_handler+0x30>
        m_isr[event_nr]();
   1a9fe:	4f18      	ldr	r7, [pc, #96]	; (1aa60 <nrfx_usbd_irq_handler+0x74>)
    bool setup_active = 0 != (active & NRF_USBD_INT_EP0SETUP_MASK);
   1aa00:	f403 0600 	and.w	r6, r3, #8388608	; 0x800000
    active &= ~NRF_USBD_INT_EP0SETUP_MASK;
   1aa04:	f423 0400 	bic.w	r4, r3, #8388608	; 0x800000
        active &= ~(1UL << event_nr);
   1aa08:	f04f 0801 	mov.w	r8, #1
    while (active)
   1aa0c:	b9bc      	cbnz	r4, 1aa3e <nrfx_usbd_irq_handler+0x52>
    usbd_dmareq_process();
   1aa0e:	f7ff fd61 	bl	1a4d4 <usbd_dmareq_process>
    if (setup_active)
   1aa12:	b306      	cbz	r6, 1aa56 <nrfx_usbd_irq_handler+0x6a>
}
   1aa14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        m_isr[USBD_INTEN_EP0SETUP_Pos]();
   1aa18:	f7ff bfae 	b.w	1a978 <ev_setup_handler>
        uint8_t event_nr = NRF_CTZ(to_process);
   1aa1c:	fa90 f2a0 	rbit	r2, r0
   1aa20:	fab2 f282 	clz	r2, r2
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   1aa24:	490f      	ldr	r1, [pc, #60]	; (1aa64 <nrfx_usbd_irq_handler+0x78>)
}

NRF_STATIC_INLINE uint32_t nrfx_bitpos_to_event(uint32_t bit)
{
    static const uint32_t event_reg_offset = 0x100u;
    return event_reg_offset + (bit * sizeof(uint32_t));
   1aa26:	0096      	lsls	r6, r2, #2
   1aa28:	4431      	add	r1, r6
            active |= 1UL << event_nr;
   1aa2a:	fa04 f202 	lsl.w	r2, r4, r2
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   1aa2e:	680e      	ldr	r6, [r1, #0]
    if (ret)
   1aa30:	b116      	cbz	r6, 1aa38 <nrfx_usbd_irq_handler+0x4c>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
   1aa32:	600d      	str	r5, [r1, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
   1aa34:	6809      	ldr	r1, [r1, #0]
   1aa36:	4313      	orrs	r3, r2
        to_process &= ~(1UL << event_nr);
   1aa38:	ea20 0002 	bic.w	r0, r0, r2
   1aa3c:	e7de      	b.n	1a9fc <nrfx_usbd_irq_handler+0x10>
        uint8_t event_nr = NRF_CTZ(active);
   1aa3e:	fa94 f5a4 	rbit	r5, r4
   1aa42:	fab5 f585 	clz	r5, r5
        m_isr[event_nr]();
   1aa46:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
        active &= ~(1UL << event_nr);
   1aa4a:	fa08 f505 	lsl.w	r5, r8, r5
        m_isr[event_nr]();
   1aa4e:	4798      	blx	r3
        active &= ~(1UL << event_nr);
   1aa50:	ea24 0405 	bic.w	r4, r4, r5
   1aa54:	e7da      	b.n	1aa0c <nrfx_usbd_irq_handler+0x20>
}
   1aa56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1aa5a:	bf00      	nop
   1aa5c:	40027000 	.word	0x40027000
   1aa60:	00027128 	.word	0x00027128
   1aa64:	40027100 	.word	0x40027100

0001aa68 <usbd_ep_abort_all>:
{
   1aa68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t ep_waiting = m_ep_dma_waiting | (m_ep_ready & NRFX_USBD_EPOUT_BIT_MASK);
   1aa6a:	4e11      	ldr	r6, [pc, #68]	; (1aab0 <usbd_ep_abort_all+0x48>)
   1aa6c:	4b11      	ldr	r3, [pc, #68]	; (1aab4 <usbd_ep_abort_all+0x4c>)
   1aa6e:	6834      	ldr	r4, [r6, #0]
   1aa70:	681b      	ldr	r3, [r3, #0]
   1aa72:	0c24      	lsrs	r4, r4, #16
   1aa74:	0424      	lsls	r4, r4, #16
   1aa76:	431c      	orrs	r4, r3
        ep_waiting &= ~(1U << bitpos);
   1aa78:	2701      	movs	r7, #1
    while (0 != ep_waiting)
   1aa7a:	b91c      	cbnz	r4, 1aa84 <usbd_ep_abort_all+0x1c>
    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
   1aa7c:	f240 13ff 	movw	r3, #511	; 0x1ff
   1aa80:	6033      	str	r3, [r6, #0]
}
   1aa82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t bitpos = NRF_CTZ(ep_waiting);
   1aa84:	fa94 f5a4 	rbit	r5, r4
   1aa88:	fab5 f585 	clz	r5, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   1aa8c:	2d0f      	cmp	r5, #15
        uint8_t bitpos = NRF_CTZ(ep_waiting);
   1aa8e:	4628      	mov	r0, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   1aa90:	bfc6      	itte	gt
   1aa92:	f1a5 0010 	subgt.w	r0, r5, #16
   1aa96:	b2c0      	uxtbgt	r0, r0
   1aa98:	f040 0080 	orrle.w	r0, r0, #128	; 0x80
        if (!NRF_USBD_EPISO_CHECK(bit2ep(bitpos)))
   1aa9c:	0703      	lsls	r3, r0, #28
   1aa9e:	d401      	bmi.n	1aaa4 <usbd_ep_abort_all+0x3c>
            usbd_ep_abort(bit2ep(bitpos));
   1aaa0:	f7ff fef0 	bl	1a884 <usbd_ep_abort>
        ep_waiting &= ~(1U << bitpos);
   1aaa4:	fa07 f505 	lsl.w	r5, r7, r5
   1aaa8:	ea24 0405 	bic.w	r4, r4, r5
   1aaac:	e7e5      	b.n	1aa7a <usbd_ep_abort_all+0x12>
   1aaae:	bf00      	nop
   1aab0:	20003db0 	.word	0x20003db0
   1aab4:	20003d40 	.word	0x20003d40

0001aab8 <nrfx_usbd_stop>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1aab8:	4b0c      	ldr	r3, [pc, #48]	; (1aaec <nrfx_usbd_stop+0x34>)
   1aaba:	2280      	movs	r2, #128	; 0x80
{
   1aabc:	b510      	push	{r4, lr}
    if (NRFX_IRQ_IS_ENABLED(USBD_IRQn))
   1aabe:	2027      	movs	r0, #39	; 0x27
   1aac0:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   1aac4:	f7ea fde0 	bl	5688 <arch_irq_is_enabled>
   1aac8:	b170      	cbz	r0, 1aae8 <nrfx_usbd_stop+0x30>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Disabled << USBD_USBPULLUP_CONNECT_Pos;
   1aaca:	4c09      	ldr	r4, [pc, #36]	; (1aaf0 <nrfx_usbd_stop+0x38>)
        usbd_ep_abort_all();
   1aacc:	f7ff ffcc 	bl	1aa68 <usbd_ep_abort_all>
   1aad0:	2300      	movs	r3, #0
   1aad2:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
        NRFX_IRQ_DISABLE(USBD_IRQn);
   1aad6:	2027      	movs	r0, #39	; 0x27
    (void) p_reg->USBPULLUP;
   1aad8:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
   1aadc:	f7ea fdc0 	bl	5660 <arch_irq_disable>
    p_reg->INTENCLR = mask;
   1aae0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1aae4:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
}
   1aae8:	bd10      	pop	{r4, pc}
   1aaea:	bf00      	nop
   1aaec:	e000e100 	.word	0xe000e100
   1aaf0:	40027000 	.word	0x40027000

0001aaf4 <nrfx_usbd_disable>:
{
   1aaf4:	b508      	push	{r3, lr}
    nrfx_usbd_stop();
   1aaf6:	f7ff ffdf 	bl	1aab8 <nrfx_usbd_stop>
    return p_reg->INTENSET;
   1aafa:	4b08      	ldr	r3, [pc, #32]	; (1ab1c <nrfx_usbd_disable+0x28>)
   1aafc:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    p_reg->INTENCLR = mask;
   1ab00:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
   1ab04:	2200      	movs	r2, #0
   1ab06:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
   1ab0a:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    usbd_dma_pending_clear();
   1ab0e:	f7ff f96b 	bl	19de8 <usbd_dma_pending_clear>
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
   1ab12:	4b03      	ldr	r3, [pc, #12]	; (1ab20 <nrfx_usbd_disable+0x2c>)
   1ab14:	2201      	movs	r2, #1
   1ab16:	701a      	strb	r2, [r3, #0]
}
   1ab18:	bd08      	pop	{r3, pc}
   1ab1a:	bf00      	nop
   1ab1c:	40027000 	.word	0x40027000
   1ab20:	2000412c 	.word	0x2000412c

0001ab24 <nrfx_usbd_suspend>:
{
   1ab24:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1ab26:	f04f 0320 	mov.w	r3, #32
   1ab2a:	f3ef 8511 	mrs	r5, BASEPRI
   1ab2e:	f383 8812 	msr	BASEPRI_MAX, r3
   1ab32:	f3bf 8f6f 	isb	sy
    if (m_bus_suspend)
   1ab36:	4b11      	ldr	r3, [pc, #68]	; (1ab7c <nrfx_usbd_suspend+0x58>)
   1ab38:	781b      	ldrb	r3, [r3, #0]
   1ab3a:	f003 04ff 	and.w	r4, r3, #255	; 0xff
   1ab3e:	b933      	cbnz	r3, 1ab4e <nrfx_usbd_suspend+0x2a>
    bool suspended = false;
   1ab40:	2400      	movs	r4, #0
	__asm__ volatile(
   1ab42:	f385 8811 	msr	BASEPRI, r5
   1ab46:	f3bf 8f6f 	isb	sy
}
   1ab4a:	4620      	mov	r0, r4
   1ab4c:	bd38      	pop	{r3, r4, r5, pc}
        usbd_ep_abort_all();
   1ab4e:	f7ff ff8b 	bl	1aa68 <usbd_ep_abort_all>
    return p_reg->EVENTCAUSE;
   1ab52:	4b0b      	ldr	r3, [pc, #44]	; (1ab80 <nrfx_usbd_suspend+0x5c>)
   1ab54:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        if (!(nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK))
   1ab58:	f412 7200 	ands.w	r2, r2, #512	; 0x200
   1ab5c:	d1f0      	bne.n	1ab40 <nrfx_usbd_suspend+0x1c>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_LowPower << USBD_LOWPOWER_LOWPOWER_Pos;
   1ab5e:	2101      	movs	r1, #1
   1ab60:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
   1ab64:	f8d3 152c 	ldr.w	r1, [r3, #1324]	; 0x52c
    return p_reg->EVENTCAUSE;
   1ab68:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
            if (nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK)
   1ab6c:	0589      	lsls	r1, r1, #22
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos;
   1ab6e:	bf42      	ittt	mi
   1ab70:	f8c3 252c 	strmi.w	r2, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
   1ab74:	f8d3 352c 	ldrmi.w	r3, [r3, #1324]	; 0x52c
    bool suspended = false;
   1ab78:	4614      	movmi	r4, r2
}
   1ab7a:	e7e2      	b.n	1ab42 <nrfx_usbd_suspend+0x1e>
   1ab7c:	2000412a 	.word	0x2000412a
   1ab80:	40027000 	.word	0x40027000

0001ab84 <nrfx_usbd_ep_disable>:
{
   1ab84:	b510      	push	{r4, lr}
   1ab86:	4604      	mov	r4, r0
    usbd_ep_abort(ep);
   1ab88:	f7ff fe7c 	bl	1a884 <usbd_ep_abort>
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   1ab8c:	4a10      	ldr	r2, [pc, #64]	; (1abd0 <nrfx_usbd_ep_disable+0x4c>)
    if (NRF_USBD_EPIN_CHECK(ep))
   1ab8e:	f014 0f80 	tst.w	r4, #128	; 0x80
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   1ab92:	f004 000f 	and.w	r0, r4, #15
        p_reg->EPINEN &= ~(1UL << epnr);
   1ab96:	f04f 0301 	mov.w	r3, #1
   1ab9a:	bf14      	ite	ne
   1ab9c:	f8d2 1510 	ldrne.w	r1, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
   1aba0:	f8d2 1514 	ldreq.w	r1, [r2, #1300]	; 0x514
        p_reg->EPINEN &= ~(1UL << epnr);
   1aba4:	fa03 f300 	lsl.w	r3, r3, r0
   1aba8:	ea6f 0303 	mvn.w	r3, r3
   1abac:	bf15      	itete	ne
   1abae:	400b      	andne	r3, r1
        p_reg->EPOUTEN &= ~(1UL << epnr);
   1abb0:	400b      	andeq	r3, r1
        p_reg->EPINEN &= ~(1UL << epnr);
   1abb2:	f8c2 3510 	strne.w	r3, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
   1abb6:	f8c2 3514 	streq.w	r3, [r2, #1300]	; 0x514
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
   1abba:	bf14      	ite	ne
   1abbc:	4b05      	ldrne	r3, [pc, #20]	; (1abd4 <nrfx_usbd_ep_disable+0x50>)
   1abbe:	4b06      	ldreq	r3, [pc, #24]	; (1abd8 <nrfx_usbd_ep_disable+0x54>)
   1abc0:	5c1a      	ldrb	r2, [r3, r0]
   1abc2:	2301      	movs	r3, #1
   1abc4:	4093      	lsls	r3, r2
    p_reg->INTENCLR = mask;
   1abc6:	4a02      	ldr	r2, [pc, #8]	; (1abd0 <nrfx_usbd_ep_disable+0x4c>)
   1abc8:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
   1abcc:	bd10      	pop	{r4, pc}
   1abce:	bf00      	nop
   1abd0:	40027000 	.word	0x40027000
   1abd4:	000282bc 	.word	0x000282bc
   1abd8:	000282c5 	.word	0x000282c5

0001abdc <nrfx_usbd_ep_enable>:
{
   1abdc:	b570      	push	{r4, r5, r6, lr}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
   1abde:	b243      	sxtb	r3, r0
   1abe0:	2b00      	cmp	r3, #0
   1abe2:	4b23      	ldr	r3, [pc, #140]	; (1ac70 <nrfx_usbd_ep_enable+0x94>)
   1abe4:	4a23      	ldr	r2, [pc, #140]	; (1ac74 <nrfx_usbd_ep_enable+0x98>)
   1abe6:	bfa8      	it	ge
   1abe8:	461a      	movge	r2, r3
   1abea:	f000 030f 	and.w	r3, r0, #15
   1abee:	f04f 0401 	mov.w	r4, #1
   1abf2:	5cd1      	ldrb	r1, [r2, r3]
    p_reg->INTENSET = mask;
   1abf4:	4a20      	ldr	r2, [pc, #128]	; (1ac78 <nrfx_usbd_ep_enable+0x9c>)
   1abf6:	fa04 f101 	lsl.w	r1, r4, r1
{
   1abfa:	4605      	mov	r5, r0
   1abfc:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
    if (NRF_USBD_EPIN_CHECK(ep))
   1ac00:	da0c      	bge.n	1ac1c <nrfx_usbd_ep_enable+0x40>
        return 0 != (p_reg->EPINEN & (1UL << epnr));
   1ac02:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
   1ac06:	40d9      	lsrs	r1, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
   1ac08:	07c8      	lsls	r0, r1, #31
   1ac0a:	d406      	bmi.n	1ac1a <nrfx_usbd_ep_enable+0x3e>
        p_reg->EPINEN |= 1UL << epnr;
   1ac0c:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   1ac10:	fa04 f303 	lsl.w	r3, r4, r3
   1ac14:	4303      	orrs	r3, r0
   1ac16:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
}
   1ac1a:	bd70      	pop	{r4, r5, r6, pc}
        return 0 != (p_reg->EPOUTEN & (1UL << epnr));
   1ac1c:	f8d2 1514 	ldr.w	r1, [r2, #1300]	; 0x514
   1ac20:	40d9      	lsrs	r1, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
   1ac22:	07c9      	lsls	r1, r1, #31
   1ac24:	d4f9      	bmi.n	1ac1a <nrfx_usbd_ep_enable+0x3e>
        p_reg->EPOUTEN |= 1UL << epnr;
   1ac26:	f8d2 6514 	ldr.w	r6, [r2, #1300]	; 0x514
   1ac2a:	fa04 f103 	lsl.w	r1, r4, r3
   1ac2e:	4331      	orrs	r1, r6
   1ac30:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
    if ((NRF_USBD_EP_NR_GET(ep) != 0) &&
   1ac34:	2b00      	cmp	r3, #0
   1ac36:	d0f0      	beq.n	1ac1a <nrfx_usbd_ep_enable+0x3e>
        NRF_USBD_EPOUT_CHECK(ep) &&
   1ac38:	0703      	lsls	r3, r0, #28
   1ac3a:	d4ee      	bmi.n	1ac1a <nrfx_usbd_ep_enable+0x3e>
	__asm__ volatile(
   1ac3c:	f04f 0320 	mov.w	r3, #32
   1ac40:	f3ef 8611 	mrs	r6, BASEPRI
   1ac44:	f383 8812 	msr	BASEPRI_MAX, r3
   1ac48:	f3bf 8f6f 	isb	sy
        nrfx_usbd_transfer_out_drop(ep);
   1ac4c:	f7ff fdf0 	bl	1a830 <nrfx_usbd_transfer_out_drop>
        m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   1ac50:	4628      	mov	r0, r5
   1ac52:	f00a fd2b 	bl	256ac <ep2bit>
   1ac56:	4a09      	ldr	r2, [pc, #36]	; (1ac7c <nrfx_usbd_ep_enable+0xa0>)
   1ac58:	6813      	ldr	r3, [r2, #0]
   1ac5a:	fa04 f000 	lsl.w	r0, r4, r0
   1ac5e:	ea23 0000 	bic.w	r0, r3, r0
   1ac62:	6010      	str	r0, [r2, #0]
	__asm__ volatile(
   1ac64:	f386 8811 	msr	BASEPRI, r6
   1ac68:	f3bf 8f6f 	isb	sy
}
   1ac6c:	e7d5      	b.n	1ac1a <nrfx_usbd_ep_enable+0x3e>
   1ac6e:	bf00      	nop
   1ac70:	000282c5 	.word	0x000282c5
   1ac74:	000282bc 	.word	0x000282bc
   1ac78:	40027000 	.word	0x40027000
   1ac7c:	20003d40 	.word	0x20003d40

0001ac80 <nrfx_usbd_ep_stall_clear>:
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
   1ac80:	0603      	lsls	r3, r0, #24
{
   1ac82:	b510      	push	{r4, lr}
   1ac84:	4604      	mov	r4, r0
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
   1ac86:	d405      	bmi.n	1ac94 <nrfx_usbd_ep_stall_clear+0x14>
   1ac88:	f7ff fd40 	bl	1a70c <nrfx_usbd_ep_stall_check>
   1ac8c:	b110      	cbz	r0, 1ac94 <nrfx_usbd_ep_stall_clear+0x14>
        nrfx_usbd_transfer_out_drop(ep);
   1ac8e:	4620      	mov	r0, r4
   1ac90:	f7ff fdce 	bl	1a830 <nrfx_usbd_transfer_out_drop>
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_UnStall << USBD_EPSTALL_STALL_Pos) | ep;
   1ac94:	4b01      	ldr	r3, [pc, #4]	; (1ac9c <nrfx_usbd_ep_stall_clear+0x1c>)
   1ac96:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
}
   1ac9a:	bd10      	pop	{r4, pc}
   1ac9c:	40027000 	.word	0x40027000

0001aca0 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1aca0:	4b0e      	ldr	r3, [pc, #56]	; (1acdc <z_sys_init_run_level+0x3c>)
{
   1aca2:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1aca4:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1aca8:	3001      	adds	r0, #1
   1acaa:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1acae:	42a6      	cmp	r6, r4
   1acb0:	d800      	bhi.n	1acb4 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   1acb2:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   1acb4:	e9d4 3500 	ldrd	r3, r5, [r4]
   1acb8:	4628      	mov	r0, r5
   1acba:	4798      	blx	r3
		if (dev != NULL) {
   1acbc:	b165      	cbz	r5, 1acd8 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
   1acbe:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
   1acc0:	b130      	cbz	r0, 1acd0 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   1acc2:	2800      	cmp	r0, #0
   1acc4:	bfb8      	it	lt
   1acc6:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   1acc8:	28ff      	cmp	r0, #255	; 0xff
   1acca:	bfa8      	it	ge
   1accc:	20ff      	movge	r0, #255	; 0xff
   1acce:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   1acd0:	785a      	ldrb	r2, [r3, #1]
   1acd2:	f042 0201 	orr.w	r2, r2, #1
   1acd6:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1acd8:	3408      	adds	r4, #8
   1acda:	e7e8      	b.n	1acae <z_sys_init_run_level+0xe>
   1acdc:	0002718c 	.word	0x0002718c

0001ace0 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   1ace0:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   1ace2:	4605      	mov	r5, r0
   1ace4:	b910      	cbnz	r0, 1acec <z_impl_device_get_binding+0xc>
		return NULL;
   1ace6:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   1ace8:	4620      	mov	r0, r4
   1acea:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   1acec:	7803      	ldrb	r3, [r0, #0]
   1acee:	2b00      	cmp	r3, #0
   1acf0:	d0f9      	beq.n	1ace6 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   1acf2:	4c0e      	ldr	r4, [pc, #56]	; (1ad2c <z_impl_device_get_binding+0x4c>)
   1acf4:	4e0e      	ldr	r6, [pc, #56]	; (1ad30 <z_impl_device_get_binding+0x50>)
   1acf6:	42b4      	cmp	r4, r6
   1acf8:	d108      	bne.n	1ad0c <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
   1acfa:	4c0c      	ldr	r4, [pc, #48]	; (1ad2c <z_impl_device_get_binding+0x4c>)
   1acfc:	42b4      	cmp	r4, r6
   1acfe:	d0f2      	beq.n	1ace6 <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1ad00:	4620      	mov	r0, r4
   1ad02:	f00a fd41 	bl	25788 <z_device_is_ready>
   1ad06:	b950      	cbnz	r0, 1ad1e <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
   1ad08:	3418      	adds	r4, #24
   1ad0a:	e7f7      	b.n	1acfc <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
   1ad0c:	4620      	mov	r0, r4
   1ad0e:	f00a fd3b 	bl	25788 <z_device_is_ready>
   1ad12:	b110      	cbz	r0, 1ad1a <z_impl_device_get_binding+0x3a>
   1ad14:	6823      	ldr	r3, [r4, #0]
   1ad16:	42ab      	cmp	r3, r5
   1ad18:	d0e6      	beq.n	1ace8 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   1ad1a:	3418      	adds	r4, #24
   1ad1c:	e7eb      	b.n	1acf6 <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1ad1e:	6821      	ldr	r1, [r4, #0]
   1ad20:	4628      	mov	r0, r5
   1ad22:	f003 f969 	bl	1dff8 <strcmp>
   1ad26:	2800      	cmp	r0, #0
   1ad28:	d1ee      	bne.n	1ad08 <z_impl_device_get_binding+0x28>
   1ad2a:	e7dd      	b.n	1ace8 <z_impl_device_get_binding+0x8>
   1ad2c:	00026350 	.word	0x00026350
   1ad30:	000263f8 	.word	0x000263f8

0001ad34 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   1ad34:	b530      	push	{r4, r5, lr}
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
   1ad36:	2300      	movs	r3, #0
{
   1ad38:	b087      	sub	sp, #28
	z_setup_new_thread(thread, stack,
   1ad3a:	2201      	movs	r2, #1
   1ad3c:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1ad40:	220f      	movs	r2, #15
   1ad42:	e9cd 3202 	strd	r3, r2, [sp, #8]
   1ad46:	9301      	str	r3, [sp, #4]
	struct k_thread *thread = &z_idle_threads[i];
   1ad48:	4c0c      	ldr	r4, [pc, #48]	; (1ad7c <init_idle_thread+0x48>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1ad4a:	4b0d      	ldr	r3, [pc, #52]	; (1ad80 <init_idle_thread+0x4c>)
	z_setup_new_thread(thread, stack,
   1ad4c:	490d      	ldr	r1, [pc, #52]	; (1ad84 <init_idle_thread+0x50>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1ad4e:	2218      	movs	r2, #24
	struct k_thread *thread = &z_idle_threads[i];
   1ad50:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1ad54:	fb02 3300 	mla	r3, r2, r0, r3
	z_setup_new_thread(thread, stack,
   1ad58:	f44f 75b0 	mov.w	r5, #352	; 0x160
   1ad5c:	9300      	str	r3, [sp, #0]
   1ad5e:	fb05 1100 	mla	r1, r5, r0, r1
   1ad62:	4b09      	ldr	r3, [pc, #36]	; (1ad88 <init_idle_thread+0x54>)
   1ad64:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1ad68:	4620      	mov	r0, r4
   1ad6a:	f000 f909 	bl	1af80 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1ad6e:	7b63      	ldrb	r3, [r4, #13]
   1ad70:	f023 0304 	bic.w	r3, r3, #4
   1ad74:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   1ad76:	b007      	add	sp, #28
   1ad78:	bd30      	pop	{r4, r5, pc}
   1ad7a:	bf00      	nop
   1ad7c:	20001ee8 	.word	0x20001ee8
   1ad80:	20003f18 	.word	0x20003f18
   1ad84:	20006200 	.word	0x20006200
   1ad88:	0001b0f5 	.word	0x0001b0f5

0001ad8c <bg_thread_main>:
{
   1ad8c:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   1ad8e:	4b0a      	ldr	r3, [pc, #40]	; (1adb8 <bg_thread_main+0x2c>)
   1ad90:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1ad92:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   1ad94:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1ad96:	f7ff ff83 	bl	1aca0 <z_sys_init_run_level>
	boot_banner();
   1ad9a:	f001 fa49 	bl	1c230 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   1ad9e:	2003      	movs	r0, #3
   1ada0:	f7ff ff7e 	bl	1aca0 <z_sys_init_run_level>
	z_init_static_threads();
   1ada4:	f000 f94a 	bl	1b03c <z_init_static_threads>
	main();
   1ada8:	f7e8 f8ac 	bl	2f04 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1adac:	4a03      	ldr	r2, [pc, #12]	; (1adbc <bg_thread_main+0x30>)
   1adae:	7b13      	ldrb	r3, [r2, #12]
   1adb0:	f023 0301 	bic.w	r3, r3, #1
   1adb4:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1adb6:	bd08      	pop	{r3, pc}
   1adb8:	2000412e 	.word	0x2000412e
   1adbc:	20001f68 	.word	0x20001f68

0001adc0 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   1adc0:	4802      	ldr	r0, [pc, #8]	; (1adcc <z_bss_zero+0xc>)
   1adc2:	4a03      	ldr	r2, [pc, #12]	; (1add0 <z_bss_zero+0x10>)
   1adc4:	2100      	movs	r1, #0
   1adc6:	1a12      	subs	r2, r2, r0
   1adc8:	f003 b93e 	b.w	1e048 <memset>
   1adcc:	200011d0 	.word	0x200011d0
   1add0:	20004130 	.word	0x20004130

0001add4 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   1add4:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   1add6:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 1ae9c <z_cstart+0xc8>
   1adda:	b0a6      	sub	sp, #152	; 0x98
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1addc:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   1ade0:	4d2f      	ldr	r5, [pc, #188]	; (1aea0 <z_cstart+0xcc>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
   1ade2:	4e30      	ldr	r6, [pc, #192]	; (1aea4 <z_cstart+0xd0>)
   1ade4:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1ade6:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 1aea8 <z_cstart+0xd4>
   1adea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1adee:	2400      	movs	r4, #0
   1adf0:	616b      	str	r3, [r5, #20]
   1adf2:	23e0      	movs	r3, #224	; 0xe0
   1adf4:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1adf8:	77ec      	strb	r4, [r5, #31]
   1adfa:	762c      	strb	r4, [r5, #24]
   1adfc:	766c      	strb	r4, [r5, #25]
   1adfe:	76ac      	strb	r4, [r5, #26]
   1ae00:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1ae04:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1ae06:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1ae0a:	626b      	str	r3, [r5, #36]	; 0x24
   1ae0c:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1ae10:	f7ea fe48 	bl	5aa4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1ae14:	f7ea fbf6 	bl	5604 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1ae18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ae1c:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1ae1e:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   1ae20:	f7ea ff1e 	bl	5c60 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   1ae24:	f7ea fe86 	bl	5b34 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   1ae28:	f240 1301 	movw	r3, #257	; 0x101
   1ae2c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   1ae30:	ab06      	add	r3, sp, #24
   1ae32:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   1ae34:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	dummy_thread->resource_pool = NULL;
   1ae38:	9423      	str	r4, [sp, #140]	; 0x8c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   1ae3a:	f00a fca4 	bl	25786 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1ae3e:	4620      	mov	r0, r4
   1ae40:	f7ff ff2e 	bl	1aca0 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1ae44:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
   1ae46:	4d19      	ldr	r5, [pc, #100]	; (1aeac <z_cstart+0xd8>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1ae48:	f7ff ff2a 	bl	1aca0 <z_sys_init_run_level>
	z_sched_init();
   1ae4c:	f000 feac 	bl	1bba8 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1ae50:	4b17      	ldr	r3, [pc, #92]	; (1aeb0 <z_cstart+0xdc>)
   1ae52:	9305      	str	r3, [sp, #20]
   1ae54:	2301      	movs	r3, #1
   1ae56:	4917      	ldr	r1, [pc, #92]	; (1aeb4 <z_cstart+0xe0>)
   1ae58:	9400      	str	r4, [sp, #0]
   1ae5a:	e9cd 4303 	strd	r4, r3, [sp, #12]
   1ae5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1ae62:	464b      	mov	r3, r9
   1ae64:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1ae68:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
   1ae6a:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1ae6c:	f000 f888 	bl	1af80 <z_setup_new_thread>
   1ae70:	7b6a      	ldrb	r2, [r5, #13]
   1ae72:	4607      	mov	r7, r0
   1ae74:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   1ae78:	4628      	mov	r0, r5
   1ae7a:	736a      	strb	r2, [r5, #13]
   1ae7c:	f00a ffa1 	bl	25dc2 <z_ready_thread>
		init_idle_thread(i);
   1ae80:	4620      	mov	r0, r4
   1ae82:	f7ff ff57 	bl	1ad34 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   1ae86:	4b0c      	ldr	r3, [pc, #48]	; (1aeb8 <z_cstart+0xe4>)
   1ae88:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1ae8a:	464a      	mov	r2, r9
   1ae8c:	4639      	mov	r1, r7
   1ae8e:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
   1ae90:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
   1ae92:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1ae96:	f7ea fcd9 	bl	584c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1ae9a:	bf00      	nop
   1ae9c:	20006b80 	.word	0x20006b80
   1aea0:	e000ed00 	.word	0xe000ed00
   1aea4:	20003f18 	.word	0x20003f18
   1aea8:	0001ad8d 	.word	0x0001ad8d
   1aeac:	20001f68 	.word	0x20001f68
   1aeb0:	000282ce 	.word	0x000282ce
   1aeb4:	20005de0 	.word	0x20005de0
   1aeb8:	20001ee8 	.word	0x20001ee8

0001aebc <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   1aebc:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1aebe:	4c06      	ldr	r4, [pc, #24]	; (1aed8 <statics_init+0x1c>)
   1aec0:	4d06      	ldr	r5, [pc, #24]	; (1aedc <statics_init+0x20>)
   1aec2:	42ac      	cmp	r4, r5
   1aec4:	d301      	bcc.n	1aeca <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   1aec6:	2000      	movs	r0, #0
   1aec8:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1aeca:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   1aece:	4620      	mov	r0, r4
   1aed0:	f00a fc8b 	bl	257ea <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1aed4:	3414      	adds	r4, #20
   1aed6:	e7f4      	b.n	1aec2 <statics_init+0x6>
   1aed8:	20000eec 	.word	0x20000eec
   1aedc:	20000eec 	.word	0x20000eec

0001aee0 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   1aee0:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1aee2:	4b0e      	ldr	r3, [pc, #56]	; (1af1c <init_mem_slab_module+0x3c>)
   1aee4:	4c0e      	ldr	r4, [pc, #56]	; (1af20 <init_mem_slab_module+0x40>)
   1aee6:	42a3      	cmp	r3, r4
   1aee8:	d301      	bcc.n	1aeee <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
   1aeea:	2000      	movs	r0, #0
	return rc;
}
   1aeec:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1aeee:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   1aef2:	ea41 0200 	orr.w	r2, r1, r0
   1aef6:	f012 0203 	ands.w	r2, r2, #3
   1aefa:	d10b      	bne.n	1af14 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   1aefc:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   1aefe:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1af00:	42aa      	cmp	r2, r5
   1af02:	d101      	bne.n	1af08 <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1af04:	331c      	adds	r3, #28
   1af06:	e7ee      	b.n	1aee6 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   1af08:	695e      	ldr	r6, [r3, #20]
   1af0a:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   1af0c:	3201      	adds	r2, #1
		slab->free_list = p;
   1af0e:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   1af10:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   1af12:	e7f5      	b.n	1af00 <init_mem_slab_module+0x20>
	return rc;
   1af14:	f06f 0015 	mvn.w	r0, #21
   1af18:	e7e8      	b.n	1aeec <init_mem_slab_module+0xc>
   1af1a:	bf00      	nop
   1af1c:	20000e44 	.word	0x20000e44
   1af20:	20000eec 	.word	0x20000eec

0001af24 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1af24:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1af26:	460c      	mov	r4, r1
	__asm__ volatile(
   1af28:	f04f 0520 	mov.w	r5, #32
   1af2c:	f3ef 8111 	mrs	r1, BASEPRI
   1af30:	f385 8812 	msr	BASEPRI_MAX, r5
   1af34:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   1af38:	6945      	ldr	r5, [r0, #20]
   1af3a:	b15d      	cbz	r5, 1af54 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   1af3c:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1af3e:	682b      	ldr	r3, [r5, #0]
   1af40:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1af42:	6983      	ldr	r3, [r0, #24]
   1af44:	3301      	adds	r3, #1
   1af46:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   1af48:	2000      	movs	r0, #0
	__asm__ volatile(
   1af4a:	f381 8811 	msr	BASEPRI, r1
   1af4e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   1af52:	e011      	b.n	1af78 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   1af54:	ea52 0c03 	orrs.w	ip, r2, r3
   1af58:	d103      	bne.n	1af62 <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   1af5a:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   1af5c:	f06f 000b 	mvn.w	r0, #11
   1af60:	e7f3      	b.n	1af4a <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   1af62:	e9cd 2300 	strd	r2, r3, [sp]
   1af66:	4602      	mov	r2, r0
   1af68:	3008      	adds	r0, #8
   1af6a:	f000 fd73 	bl	1ba54 <z_pend_curr>
		if (result == 0) {
   1af6e:	b918      	cbnz	r0, 1af78 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   1af70:	4b02      	ldr	r3, [pc, #8]	; (1af7c <k_mem_slab_alloc+0x58>)
   1af72:	689b      	ldr	r3, [r3, #8]
   1af74:	695b      	ldr	r3, [r3, #20]
   1af76:	6023      	str	r3, [r4, #0]
}
   1af78:	b003      	add	sp, #12
   1af7a:	bd30      	pop	{r4, r5, pc}
   1af7c:	20003f18 	.word	0x20003f18

0001af80 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   1af80:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   1af84:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   1af86:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   1af88:	2604      	movs	r6, #4
   1af8a:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   1af8c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   1af8e:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   1af90:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
   1af94:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1af96:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   1af98:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1af9c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   1af9e:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1afa0:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   1afa4:	3720      	adds	r7, #32
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   1afa6:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   1afaa:	e9c0 761a 	strd	r7, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   1afae:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   1afb0:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   1afb2:	6705      	str	r5, [r0, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1afb4:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1afb8:	9202      	str	r2, [sp, #8]
   1afba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1afbc:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   1afbe:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1afc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1afc2:	9200      	str	r2, [sp, #0]
   1afc4:	4642      	mov	r2, r8
{
   1afc6:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1afc8:	f7ea fc0e 	bl	57e8 <arch_new_thread>
	if (!_current) {
   1afcc:	4b04      	ldr	r3, [pc, #16]	; (1afe0 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
   1afce:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   1afd0:	689b      	ldr	r3, [r3, #8]
   1afd2:	b103      	cbz	r3, 1afd6 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
   1afd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   1afd6:	6763      	str	r3, [r4, #116]	; 0x74
}
   1afd8:	4640      	mov	r0, r8
   1afda:	b004      	add	sp, #16
   1afdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1afe0:	20003f18 	.word	0x20003f18

0001afe4 <z_impl_k_thread_create>:
{
   1afe4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1afe6:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1afe8:	2700      	movs	r7, #0
   1afea:	9705      	str	r7, [sp, #20]
   1afec:	9f10      	ldr	r7, [sp, #64]	; 0x40
   1afee:	9704      	str	r7, [sp, #16]
   1aff0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   1aff2:	9703      	str	r7, [sp, #12]
   1aff4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   1aff6:	9702      	str	r7, [sp, #8]
{
   1aff8:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1affc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   1affe:	9701      	str	r7, [sp, #4]
   1b000:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   1b002:	9700      	str	r7, [sp, #0]
{
   1b004:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1b006:	f7ff ffbb 	bl	1af80 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1b00a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   1b00e:	bf08      	it	eq
   1b010:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   1b014:	d005      	beq.n	1b022 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1b016:	ea55 0306 	orrs.w	r3, r5, r6
   1b01a:	d105      	bne.n	1b028 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   1b01c:	4620      	mov	r0, r4
   1b01e:	f000 fcbd 	bl	1b99c <z_sched_start>
}
   1b022:	4620      	mov	r0, r4
   1b024:	b007      	add	sp, #28
   1b026:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1b028:	4903      	ldr	r1, [pc, #12]	; (1b038 <z_impl_k_thread_create+0x54>)
   1b02a:	4632      	mov	r2, r6
   1b02c:	462b      	mov	r3, r5
   1b02e:	f104 0018 	add.w	r0, r4, #24
   1b032:	f000 ff6b 	bl	1bf0c <z_add_timeout>
   1b036:	e7f4      	b.n	1b022 <z_impl_k_thread_create+0x3e>
   1b038:	00025de3 	.word	0x00025de3

0001b03c <z_init_static_threads>:
{
   1b03c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b040:	4c29      	ldr	r4, [pc, #164]	; (1b0e8 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   1b042:	4d2a      	ldr	r5, [pc, #168]	; (1b0ec <z_init_static_threads+0xb0>)
{
   1b044:	b087      	sub	sp, #28
   1b046:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   1b048:	42ae      	cmp	r6, r5
   1b04a:	f104 0430 	add.w	r4, r4, #48	; 0x30
   1b04e:	d30f      	bcc.n	1b070 <z_init_static_threads+0x34>
	k_sched_lock();
   1b050:	f000 fbc0 	bl	1b7d4 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   1b054:	4c24      	ldr	r4, [pc, #144]	; (1b0e8 <z_init_static_threads+0xac>)
   1b056:	f8df 9098 	ldr.w	r9, [pc, #152]	; 1b0f0 <z_init_static_threads+0xb4>
   1b05a:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1b05e:	f240 37e7 	movw	r7, #999	; 0x3e7
   1b062:	42ac      	cmp	r4, r5
   1b064:	d320      	bcc.n	1b0a8 <z_init_static_threads+0x6c>
}
   1b066:	b007      	add	sp, #28
   1b068:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   1b06c:	f000 bd80 	b.w	1bb70 <k_sched_unlock>
		z_setup_new_thread(
   1b070:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1b074:	9305      	str	r3, [sp, #20]
   1b076:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1b07a:	9304      	str	r3, [sp, #16]
   1b07c:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1b080:	9303      	str	r3, [sp, #12]
   1b082:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1b086:	9302      	str	r3, [sp, #8]
   1b088:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1b08c:	9301      	str	r3, [sp, #4]
   1b08e:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1b092:	9300      	str	r3, [sp, #0]
   1b094:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1b098:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1b09c:	f7ff ff70 	bl	1af80 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1b0a0:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1b0a4:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   1b0a6:	e7ce      	b.n	1b046 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1b0a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b0aa:	1c5a      	adds	r2, r3, #1
   1b0ac:	d00d      	beq.n	1b0ca <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
   1b0ae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1b0b2:	2100      	movs	r1, #0
   1b0b4:	4638      	mov	r0, r7
   1b0b6:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1b0ba:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   1b0be:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1b0c2:	d104      	bne.n	1b0ce <z_init_static_threads+0x92>
	z_sched_start(thread);
   1b0c4:	4640      	mov	r0, r8
   1b0c6:	f000 fc69 	bl	1b99c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1b0ca:	3430      	adds	r4, #48	; 0x30
   1b0cc:	e7c9      	b.n	1b062 <z_init_static_threads+0x26>
   1b0ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b0d2:	2300      	movs	r3, #0
   1b0d4:	f7e6 f9d0 	bl	1478 <__aeabi_uldivmod>
   1b0d8:	4602      	mov	r2, r0
   1b0da:	460b      	mov	r3, r1
   1b0dc:	f108 0018 	add.w	r0, r8, #24
   1b0e0:	4649      	mov	r1, r9
   1b0e2:	f000 ff13 	bl	1bf0c <z_add_timeout>
   1b0e6:	e7f0      	b.n	1b0ca <z_init_static_threads+0x8e>
   1b0e8:	20000e44 	.word	0x20000e44
   1b0ec:	20000e44 	.word	0x20000e44
   1b0f0:	00025de3 	.word	0x00025de3

0001b0f4 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   1b0f4:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   1b0f6:	4c0b      	ldr	r4, [pc, #44]	; (1b124 <idle+0x30>)
	return !z_sys_post_kernel;
   1b0f8:	4d0b      	ldr	r5, [pc, #44]	; (1b128 <idle+0x34>)
	__asm__ volatile(
   1b0fa:	f04f 0220 	mov.w	r2, #32
   1b0fe:	f3ef 8311 	mrs	r3, BASEPRI
   1b102:	f382 8812 	msr	BASEPRI_MAX, r2
   1b106:	f3bf 8f6f 	isb	sy
   1b10a:	f00a ff21 	bl	25f50 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   1b10e:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   1b110:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   1b112:	b913      	cbnz	r3, 1b11a <idle+0x26>
	arch_cpu_idle();
   1b114:	f7ea fa7c 	bl	5610 <arch_cpu_idle>
}
   1b118:	e7ef      	b.n	1b0fa <idle+0x6>
   1b11a:	f7ea f873 	bl	5204 <pm_system_suspend>
   1b11e:	2800      	cmp	r0, #0
   1b120:	d1eb      	bne.n	1b0fa <idle+0x6>
   1b122:	e7f7      	b.n	1b114 <idle+0x20>
   1b124:	20003f18 	.word	0x20003f18
   1b128:	2000412e 	.word	0x2000412e

0001b12c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1b12c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1b130:	4604      	mov	r4, r0
   1b132:	4617      	mov	r7, r2
   1b134:	461e      	mov	r6, r3
   1b136:	f04f 0320 	mov.w	r3, #32
   1b13a:	f3ef 8811 	mrs	r8, BASEPRI
   1b13e:	f383 8812 	msr	BASEPRI_MAX, r3
   1b142:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1b146:	68c3      	ldr	r3, [r0, #12]
   1b148:	4a32      	ldr	r2, [pc, #200]	; (1b214 <z_impl_k_mutex_lock+0xe8>)
   1b14a:	b16b      	cbz	r3, 1b168 <z_impl_k_mutex_lock+0x3c>
   1b14c:	6880      	ldr	r0, [r0, #8]
   1b14e:	6891      	ldr	r1, [r2, #8]
   1b150:	4288      	cmp	r0, r1
   1b152:	d019      	beq.n	1b188 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1b154:	ea57 0306 	orrs.w	r3, r7, r6
   1b158:	d118      	bne.n	1b18c <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   1b15a:	f388 8811 	msr	BASEPRI, r8
   1b15e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   1b162:	f06f 000f 	mvn.w	r0, #15
   1b166:	e00c      	b.n	1b182 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   1b168:	6891      	ldr	r1, [r2, #8]
   1b16a:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1b16e:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   1b170:	3301      	adds	r3, #1
   1b172:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1b174:	6893      	ldr	r3, [r2, #8]
   1b176:	60a3      	str	r3, [r4, #8]
   1b178:	f388 8811 	msr	BASEPRI, r8
   1b17c:	f3bf 8f6f 	isb	sy
		return 0;
   1b180:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   1b182:	b002      	add	sp, #8
   1b184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   1b188:	6921      	ldr	r1, [r4, #16]
   1b18a:	e7f0      	b.n	1b16e <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1b18c:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1b190:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
   1b194:	4299      	cmp	r1, r3
   1b196:	bfa8      	it	ge
   1b198:	4619      	movge	r1, r3
   1b19a:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   1b19e:	4291      	cmp	r1, r2
   1b1a0:	bfb8      	it	lt
   1b1a2:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1b1a4:	428b      	cmp	r3, r1
   1b1a6:	dd2e      	ble.n	1b206 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   1b1a8:	f00a fbc0 	bl	2592c <adjust_owner_prio.isra.0>
   1b1ac:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1b1ae:	e9cd 7600 	strd	r7, r6, [sp]
   1b1b2:	4819      	ldr	r0, [pc, #100]	; (1b218 <z_impl_k_mutex_lock+0xec>)
   1b1b4:	4622      	mov	r2, r4
   1b1b6:	4641      	mov	r1, r8
   1b1b8:	f000 fc4c 	bl	1ba54 <z_pend_curr>
	if (got_mutex == 0) {
   1b1bc:	2800      	cmp	r0, #0
   1b1be:	d0e0      	beq.n	1b182 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   1b1c0:	f04f 0320 	mov.w	r3, #32
   1b1c4:	f3ef 8611 	mrs	r6, BASEPRI
   1b1c8:	f383 8812 	msr	BASEPRI_MAX, r3
   1b1cc:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1b1d0:	6823      	ldr	r3, [r4, #0]
   1b1d2:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b1d4:	429c      	cmp	r4, r3
   1b1d6:	d00a      	beq.n	1b1ee <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1b1d8:	b14b      	cbz	r3, 1b1ee <z_impl_k_mutex_lock+0xc2>
   1b1da:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1b1de:	4299      	cmp	r1, r3
   1b1e0:	bfa8      	it	ge
   1b1e2:	4619      	movge	r1, r3
   1b1e4:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   1b1e8:	4299      	cmp	r1, r3
   1b1ea:	bfb8      	it	lt
   1b1ec:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1b1ee:	68a0      	ldr	r0, [r4, #8]
   1b1f0:	f00a fb9c 	bl	2592c <adjust_owner_prio.isra.0>
   1b1f4:	b900      	cbnz	r0, 1b1f8 <z_impl_k_mutex_lock+0xcc>
	if (resched) {
   1b1f6:	b145      	cbz	r5, 1b20a <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   1b1f8:	4807      	ldr	r0, [pc, #28]	; (1b218 <z_impl_k_mutex_lock+0xec>)
   1b1fa:	4631      	mov	r1, r6
   1b1fc:	f000 fad8 	bl	1b7b0 <z_reschedule>
	return -EAGAIN;
   1b200:	f06f 000a 	mvn.w	r0, #10
   1b204:	e7bd      	b.n	1b182 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   1b206:	2500      	movs	r5, #0
   1b208:	e7d1      	b.n	1b1ae <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
   1b20a:	f386 8811 	msr	BASEPRI, r6
   1b20e:	f3bf 8f6f 	isb	sy
   1b212:	e7f5      	b.n	1b200 <z_impl_k_mutex_lock+0xd4>
   1b214:	20003f18 	.word	0x20003f18
   1b218:	2000412f 	.word	0x2000412f

0001b21c <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1b21c:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   1b21e:	6883      	ldr	r3, [r0, #8]
{
   1b220:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   1b222:	2b00      	cmp	r3, #0
   1b224:	d032      	beq.n	1b28c <z_impl_k_mutex_unlock+0x70>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1b226:	4a1c      	ldr	r2, [pc, #112]	; (1b298 <z_impl_k_mutex_unlock+0x7c>)
   1b228:	6892      	ldr	r2, [r2, #8]
   1b22a:	4293      	cmp	r3, r2
   1b22c:	d131      	bne.n	1b292 <z_impl_k_mutex_unlock+0x76>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
   1b22e:	7bda      	ldrb	r2, [r3, #15]
   1b230:	3a01      	subs	r2, #1
   1b232:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   1b234:	68c3      	ldr	r3, [r0, #12]
   1b236:	2b01      	cmp	r3, #1
   1b238:	d905      	bls.n	1b246 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   1b23a:	3b01      	subs	r3, #1
   1b23c:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   1b23e:	f000 fc97 	bl	1bb70 <k_sched_unlock>

	return 0;
   1b242:	2000      	movs	r0, #0
}
   1b244:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1b246:	f04f 0320 	mov.w	r3, #32
   1b24a:	f3ef 8511 	mrs	r5, BASEPRI
   1b24e:	f383 8812 	msr	BASEPRI_MAX, r3
   1b252:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1b256:	6901      	ldr	r1, [r0, #16]
   1b258:	6880      	ldr	r0, [r0, #8]
   1b25a:	f00a fb67 	bl	2592c <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1b25e:	4620      	mov	r0, r4
   1b260:	f00a fe0b 	bl	25e7a <z_unpend_first_thread>
	mutex->owner = new_owner;
   1b264:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1b266:	b158      	cbz	r0, 1b280 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
   1b268:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1b26c:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1b26e:	2200      	movs	r2, #0
   1b270:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   1b272:	f00a fda6 	bl	25dc2 <z_ready_thread>
		z_reschedule(&lock, key);
   1b276:	4809      	ldr	r0, [pc, #36]	; (1b29c <z_impl_k_mutex_unlock+0x80>)
   1b278:	4629      	mov	r1, r5
   1b27a:	f000 fa99 	bl	1b7b0 <z_reschedule>
   1b27e:	e7de      	b.n	1b23e <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   1b280:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1b282:	f385 8811 	msr	BASEPRI, r5
   1b286:	f3bf 8f6f 	isb	sy
   1b28a:	e7d8      	b.n	1b23e <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   1b28c:	f06f 0015 	mvn.w	r0, #21
   1b290:	e7d8      	b.n	1b244 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   1b292:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b296:	e7d5      	b.n	1b244 <z_impl_k_mutex_unlock+0x28>
   1b298:	20003f18 	.word	0x20003f18
   1b29c:	2000412f 	.word	0x2000412f

0001b2a0 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1b2a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1b2a2:	4611      	mov	r1, r2
	__asm__ volatile(
   1b2a4:	f04f 0220 	mov.w	r2, #32
   1b2a8:	f3ef 8511 	mrs	r5, BASEPRI
   1b2ac:	f382 8812 	msr	BASEPRI_MAX, r2
   1b2b0:	f3bf 8f6f 	isb	sy
   1b2b4:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1b2b6:	b19c      	cbz	r4, 1b2e0 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1b2b8:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1b2ba:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1b2bc:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1b2c0:	4294      	cmp	r4, r2
	list->head = node;
   1b2c2:	6003      	str	r3, [r0, #0]
	list->tail = node;
   1b2c4:	bf08      	it	eq
   1b2c6:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1b2c8:	2101      	movs	r1, #1
   1b2ca:	4620      	mov	r0, r4
   1b2cc:	f00a fba1 	bl	25a12 <z_queue_node_peek>
   1b2d0:	4604      	mov	r4, r0
	__asm__ volatile(
   1b2d2:	f385 8811 	msr	BASEPRI, r5
   1b2d6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   1b2da:	4620      	mov	r0, r4
   1b2dc:	b003      	add	sp, #12
   1b2de:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1b2e0:	ea51 0203 	orrs.w	r2, r1, r3
   1b2e4:	d0f5      	beq.n	1b2d2 <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1b2e6:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1b2ea:	e9cd 1300 	strd	r1, r3, [sp]
   1b2ee:	4610      	mov	r0, r2
   1b2f0:	4629      	mov	r1, r5
   1b2f2:	f000 fbaf 	bl	1ba54 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1b2f6:	2800      	cmp	r0, #0
   1b2f8:	d1ef      	bne.n	1b2da <z_impl_k_queue_get+0x3a>
   1b2fa:	4b02      	ldr	r3, [pc, #8]	; (1b304 <z_impl_k_queue_get+0x64>)
   1b2fc:	689b      	ldr	r3, [r3, #8]
   1b2fe:	695c      	ldr	r4, [r3, #20]
   1b300:	e7eb      	b.n	1b2da <z_impl_k_queue_get+0x3a>
   1b302:	bf00      	nop
   1b304:	20003f18 	.word	0x20003f18

0001b308 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1b308:	b538      	push	{r3, r4, r5, lr}
   1b30a:	4604      	mov	r4, r0
	__asm__ volatile(
   1b30c:	f04f 0320 	mov.w	r3, #32
   1b310:	f3ef 8511 	mrs	r5, BASEPRI
   1b314:	f383 8812 	msr	BASEPRI_MAX, r3
   1b318:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   1b31c:	f00a fdad 	bl	25e7a <z_unpend_first_thread>

	if (thread != NULL) {
   1b320:	b148      	cbz	r0, 1b336 <z_impl_k_sem_give+0x2e>
   1b322:	2200      	movs	r2, #0
   1b324:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1b326:	f00a fd4c 	bl	25dc2 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1b32a:	4629      	mov	r1, r5
   1b32c:	4808      	ldr	r0, [pc, #32]	; (1b350 <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   1b32e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1b332:	f000 ba3d 	b.w	1b7b0 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1b336:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1b33a:	429a      	cmp	r2, r3
   1b33c:	bf18      	it	ne
   1b33e:	3301      	addne	r3, #1
   1b340:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1b342:	2102      	movs	r1, #2
   1b344:	f104 0010 	add.w	r0, r4, #16
   1b348:	f00a ff9f 	bl	2628a <z_handle_obj_poll_events>
}
   1b34c:	e7ed      	b.n	1b32a <z_impl_k_sem_give+0x22>
   1b34e:	bf00      	nop
   1b350:	2000412f 	.word	0x2000412f

0001b354 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1b354:	b513      	push	{r0, r1, r4, lr}
   1b356:	f04f 0420 	mov.w	r4, #32
   1b35a:	f3ef 8111 	mrs	r1, BASEPRI
   1b35e:	f384 8812 	msr	BASEPRI_MAX, r4
   1b362:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   1b366:	6884      	ldr	r4, [r0, #8]
   1b368:	b144      	cbz	r4, 1b37c <z_impl_k_sem_take+0x28>
		sem->count--;
   1b36a:	3c01      	subs	r4, #1
   1b36c:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   1b36e:	f381 8811 	msr	BASEPRI, r1
   1b372:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1b376:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   1b378:	b002      	add	sp, #8
   1b37a:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1b37c:	ea52 0403 	orrs.w	r4, r2, r3
   1b380:	d106      	bne.n	1b390 <z_impl_k_sem_take+0x3c>
   1b382:	f381 8811 	msr	BASEPRI, r1
   1b386:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1b38a:	f06f 000f 	mvn.w	r0, #15
   1b38e:	e7f3      	b.n	1b378 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1b390:	e9cd 2300 	strd	r2, r3, [sp]
   1b394:	4602      	mov	r2, r0
   1b396:	4802      	ldr	r0, [pc, #8]	; (1b3a0 <z_impl_k_sem_take+0x4c>)
   1b398:	f000 fb5c 	bl	1ba54 <z_pend_curr>
	return ret;
   1b39c:	e7ec      	b.n	1b378 <z_impl_k_sem_take+0x24>
   1b39e:	bf00      	nop
   1b3a0:	2000412f 	.word	0x2000412f

0001b3a4 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   1b3a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   1b3a6:	4b09      	ldr	r3, [pc, #36]	; (1b3cc <k_sys_work_q_init+0x28>)
   1b3a8:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   1b3aa:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   1b3ac:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   1b3ae:	9300      	str	r3, [sp, #0]
   1b3b0:	4907      	ldr	r1, [pc, #28]	; (1b3d0 <k_sys_work_q_init+0x2c>)
   1b3b2:	4808      	ldr	r0, [pc, #32]	; (1b3d4 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   1b3b4:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   1b3b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b3bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1b3c0:	f000 f914 	bl	1b5ec <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   1b3c4:	4620      	mov	r0, r4
   1b3c6:	b004      	add	sp, #16
   1b3c8:	bd10      	pop	{r4, pc}
   1b3ca:	bf00      	nop
   1b3cc:	000282d3 	.word	0x000282d3
   1b3d0:	20006b80 	.word	0x20006b80
   1b3d4:	20001fe8 	.word	0x20001fe8

0001b3d8 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   1b3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
   1b3dc:	4e47      	ldr	r6, [pc, #284]	; (1b4fc <work_queue_main+0x124>)
   1b3de:	b085      	sub	sp, #20
   1b3e0:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   1b3e2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1b3e6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	__asm__ volatile(
   1b3ea:	f04f 0320 	mov.w	r3, #32
   1b3ee:	f3ef 8711 	mrs	r7, BASEPRI
   1b3f2:	f383 8812 	msr	BASEPRI_MAX, r3
   1b3f6:	f3bf 8f6f 	isb	sy
   1b3fa:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
   1b3fe:	b98d      	cbnz	r5, 1b424 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   1b400:	2102      	movs	r1, #2
   1b402:	f104 0098 	add.w	r0, r4, #152	; 0x98
   1b406:	f00a fb9d 	bl	25b44 <flag_test_and_clear>
   1b40a:	2800      	cmp	r0, #0
   1b40c:	d135      	bne.n	1b47a <work_queue_main+0xa2>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   1b40e:	2300      	movs	r3, #0
   1b410:	e9cd 8900 	strd	r8, r9, [sp]
   1b414:	9302      	str	r3, [sp, #8]
   1b416:	f104 0288 	add.w	r2, r4, #136	; 0x88
   1b41a:	4639      	mov	r1, r7
   1b41c:	4838      	ldr	r0, [pc, #224]	; (1b500 <work_queue_main+0x128>)
   1b41e:	f000 fcd9 	bl	1bdd4 <z_sched_wait>
			continue;
   1b422:	e7e2      	b.n	1b3ea <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1b424:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
   1b428:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   1b42a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1b42e:	4295      	cmp	r5, r2
   1b430:	d101      	bne.n	1b436 <work_queue_main+0x5e>
	list->tail = node;
   1b432:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   1b436:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   1b43a:	f043 0302 	orr.w	r3, r3, #2
   1b43e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   1b442:	68eb      	ldr	r3, [r5, #12]
   1b444:	f023 0304 	bic.w	r3, r3, #4
   1b448:	f043 0301 	orr.w	r3, r3, #1
   1b44c:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   1b44e:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   1b450:	f387 8811 	msr	BASEPRI, r7
   1b454:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   1b458:	4628      	mov	r0, r5
   1b45a:	4798      	blx	r3
	__asm__ volatile(
   1b45c:	f04f 0320 	mov.w	r3, #32
   1b460:	f3ef 8b11 	mrs	fp, BASEPRI
   1b464:	f383 8812 	msr	BASEPRI_MAX, r3
   1b468:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   1b46c:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1b46e:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   1b470:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1b474:	d40b      	bmi.n	1b48e <work_queue_main+0xb6>
	*flagp &= ~BIT(bit);
   1b476:	60ea      	str	r2, [r5, #12]
   1b478:	e00e      	b.n	1b498 <work_queue_main+0xc0>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   1b47a:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   1b47e:	2200      	movs	r2, #0
   1b480:	2101      	movs	r1, #1
   1b482:	4628      	mov	r0, r5
   1b484:	f00a fd21 	bl	25eca <z_sched_wake>
   1b488:	2800      	cmp	r0, #0
   1b48a:	d1f8      	bne.n	1b47e <work_queue_main+0xa6>
   1b48c:	e7bf      	b.n	1b40e <work_queue_main+0x36>
	return list->head;
   1b48e:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   1b490:	f023 0303 	bic.w	r3, r3, #3
   1b494:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1b496:	b970      	cbnz	r0, 1b4b6 <work_queue_main+0xde>
	*flagp &= ~BIT(bit);
   1b498:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   1b49c:	f023 0302 	bic.w	r3, r3, #2
   1b4a0:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   1b4a4:	f38b 8811 	msr	BASEPRI, fp
   1b4a8:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   1b4ac:	05d8      	lsls	r0, r3, #23
   1b4ae:	d49c      	bmi.n	1b3ea <work_queue_main+0x12>
	z_impl_k_yield();
   1b4b0:	f000 fb86 	bl	1bbc0 <z_impl_k_yield>
}
   1b4b4:	e799      	b.n	1b3ea <work_queue_main+0x12>
	return node->next;
   1b4b6:	2700      	movs	r7, #0
   1b4b8:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
   1b4bc:	463b      	mov	r3, r7
		if (wc->work == work) {
   1b4be:	6842      	ldr	r2, [r0, #4]
   1b4c0:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   1b4c2:	4601      	mov	r1, r0
		if (wc->work == work) {
   1b4c4:	d10c      	bne.n	1b4e0 <work_queue_main+0x108>
	return node->next;
   1b4c6:	6801      	ldr	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   1b4c8:	b997      	cbnz	r7, 1b4f0 <work_queue_main+0x118>
   1b4ca:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   1b4cc:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   1b4ce:	4282      	cmp	r2, r0
   1b4d0:	d100      	bne.n	1b4d4 <work_queue_main+0xfc>
	list->tail = node;
   1b4d2:	6071      	str	r1, [r6, #4]
	parent->next = child;
   1b4d4:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   1b4d8:	f7ff ff16 	bl	1b308 <z_impl_k_sem_give>
}
   1b4dc:	4639      	mov	r1, r7
   1b4de:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1b4e0:	f1ba 0f00 	cmp.w	sl, #0
   1b4e4:	d0d8      	beq.n	1b498 <work_queue_main+0xc0>
	return node->next;
   1b4e6:	4650      	mov	r0, sl
   1b4e8:	460f      	mov	r7, r1
   1b4ea:	f8da a000 	ldr.w	sl, [sl]
   1b4ee:	e7e6      	b.n	1b4be <work_queue_main+0xe6>
	return list->tail;
   1b4f0:	6872      	ldr	r2, [r6, #4]
	parent->next = child;
   1b4f2:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   1b4f4:	4290      	cmp	r0, r2
	list->tail = node;
   1b4f6:	bf08      	it	eq
   1b4f8:	6077      	streq	r7, [r6, #4]
}
   1b4fa:	e7eb      	b.n	1b4d4 <work_queue_main+0xfc>
   1b4fc:	20003f40 	.word	0x20003f40
   1b500:	2000412f 	.word	0x2000412f

0001b504 <cancel_sync_locked>:
	return (*flagp & BIT(bit)) != 0U;
   1b504:	68c3      	ldr	r3, [r0, #12]
{
   1b506:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   1b508:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   1b50c:	079b      	lsls	r3, r3, #30
{
   1b50e:	4605      	mov	r5, r0
   1b510:	460c      	mov	r4, r1
	if (ret) {
   1b512:	d50d      	bpl.n	1b530 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1b514:	2201      	movs	r2, #1
   1b516:	2100      	movs	r1, #0
   1b518:	f104 0008 	add.w	r0, r4, #8
   1b51c:	f00a fb02 	bl	25b24 <z_impl_k_sem_init>
	parent->next = child;
   1b520:	2300      	movs	r3, #0
   1b522:	6023      	str	r3, [r4, #0]
	return list->tail;
   1b524:	4b05      	ldr	r3, [pc, #20]	; (1b53c <cancel_sync_locked+0x38>)
	canceler->work = work;
   1b526:	6065      	str	r5, [r4, #4]
   1b528:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   1b52a:	b91a      	cbnz	r2, 1b534 <cancel_sync_locked+0x30>
	list->head = node;
   1b52c:	e9c3 4400 	strd	r4, r4, [r3]
}
   1b530:	4630      	mov	r0, r6
   1b532:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   1b534:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1b536:	605c      	str	r4, [r3, #4]
}
   1b538:	e7fa      	b.n	1b530 <cancel_sync_locked+0x2c>
   1b53a:	bf00      	nop
   1b53c:	20003f40 	.word	0x20003f40

0001b540 <submit_to_queue_locked>:
{
   1b540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   1b542:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1b544:	079a      	lsls	r2, r3, #30
{
   1b546:	4604      	mov	r4, r0
   1b548:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1b54a:	f3c3 0540 	ubfx	r5, r3, #1, #1
   1b54e:	d41f      	bmi.n	1b590 <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   1b550:	075f      	lsls	r7, r3, #29
   1b552:	d41f      	bmi.n	1b594 <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
   1b554:	680a      	ldr	r2, [r1, #0]
   1b556:	b90a      	cbnz	r2, 1b55c <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   1b558:	6882      	ldr	r2, [r0, #8]
   1b55a:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   1b55c:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
   1b55e:	bf44      	itt	mi
   1b560:	68a3      	ldrmi	r3, [r4, #8]
   1b562:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
   1b564:	6837      	ldr	r7, [r6, #0]
			ret = 2;
   1b566:	bf4c      	ite	mi
   1b568:	2502      	movmi	r5, #2
		ret = 1;
   1b56a:	2501      	movpl	r5, #1
	if (queue == NULL) {
   1b56c:	b37f      	cbz	r7, 1b5ce <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1b56e:	4b1b      	ldr	r3, [pc, #108]	; (1b5dc <submit_to_queue_locked+0x9c>)
   1b570:	689b      	ldr	r3, [r3, #8]
   1b572:	42bb      	cmp	r3, r7
   1b574:	d111      	bne.n	1b59a <submit_to_queue_locked+0x5a>
   1b576:	f00a f9c7 	bl	25908 <k_is_in_isr>
   1b57a:	f080 0001 	eor.w	r0, r0, #1
   1b57e:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
   1b580:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1b584:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   1b586:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1b58a:	d523      	bpl.n	1b5d4 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
   1b58c:	b13a      	cbz	r2, 1b59e <submit_to_queue_locked+0x5e>
   1b58e:	b940      	cbnz	r0, 1b5a2 <submit_to_queue_locked+0x62>
		ret = -EBUSY;
   1b590:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   1b594:	2300      	movs	r3, #0
   1b596:	6033      	str	r3, [r6, #0]
	return ret;
   1b598:	e013      	b.n	1b5c2 <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1b59a:	2000      	movs	r0, #0
   1b59c:	e7f0      	b.n	1b580 <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
   1b59e:	071b      	lsls	r3, r3, #28
   1b5a0:	d4f6      	bmi.n	1b590 <submit_to_queue_locked+0x50>
	parent->next = child;
   1b5a2:	2300      	movs	r3, #0
   1b5a4:	6023      	str	r3, [r4, #0]
	return list->tail;
   1b5a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   1b5aa:	b963      	cbnz	r3, 1b5c6 <submit_to_queue_locked+0x86>
	list->head = node;
   1b5ac:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
   1b5b0:	4638      	mov	r0, r7
   1b5b2:	f00a fae0 	bl	25b76 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   1b5b6:	68e3      	ldr	r3, [r4, #12]
   1b5b8:	f043 0304 	orr.w	r3, r3, #4
   1b5bc:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   1b5be:	6833      	ldr	r3, [r6, #0]
   1b5c0:	60a3      	str	r3, [r4, #8]
}
   1b5c2:	4628      	mov	r0, r5
   1b5c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   1b5c6:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1b5c8:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
   1b5cc:	e7f0      	b.n	1b5b0 <submit_to_queue_locked+0x70>
		return -EINVAL;
   1b5ce:	f06f 0515 	mvn.w	r5, #21
   1b5d2:	e7df      	b.n	1b594 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
   1b5d4:	f06f 0512 	mvn.w	r5, #18
   1b5d8:	e7dc      	b.n	1b594 <submit_to_queue_locked+0x54>
   1b5da:	bf00      	nop
   1b5dc:	20003f18 	.word	0x20003f18

0001b5e0 <k_work_submit>:
{
   1b5e0:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   1b5e2:	4801      	ldr	r0, [pc, #4]	; (1b5e8 <k_work_submit+0x8>)
   1b5e4:	f00a bb37 	b.w	25c56 <k_work_submit_to_queue>
   1b5e8:	20001fe8 	.word	0x20001fe8

0001b5ec <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   1b5ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b5ee:	b089      	sub	sp, #36	; 0x24
   1b5f0:	4604      	mov	r4, r0
	list->head = NULL;
   1b5f2:	2000      	movs	r0, #0
	list->tail = NULL;
   1b5f4:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   1b5f8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1b5fa:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   1b5fe:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   1b602:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1b606:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   1b60a:	b31d      	cbz	r5, 1b654 <k_work_queue_start+0x68>
   1b60c:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   1b60e:	2800      	cmp	r0, #0
   1b610:	f240 1001 	movw	r0, #257	; 0x101
   1b614:	bf08      	it	eq
   1b616:	2001      	moveq	r0, #1
	*flagp = flags;
   1b618:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1b61c:	2000      	movs	r0, #0
   1b61e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1b622:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1b626:	e9cd 3003 	strd	r3, r0, [sp, #12]
   1b62a:	e9cd 0001 	strd	r0, r0, [sp, #4]
   1b62e:	e9cd 6706 	strd	r6, r7, [sp, #24]
   1b632:	4b09      	ldr	r3, [pc, #36]	; (1b658 <k_work_queue_start+0x6c>)
   1b634:	9400      	str	r4, [sp, #0]
   1b636:	4620      	mov	r0, r4
   1b638:	f7ff fcd4 	bl	1afe4 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   1b63c:	b125      	cbz	r5, 1b648 <k_work_queue_start+0x5c>
   1b63e:	6829      	ldr	r1, [r5, #0]
   1b640:	b111      	cbz	r1, 1b648 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   1b642:	4620      	mov	r0, r4
   1b644:	f00a f966 	bl	25914 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   1b648:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   1b64a:	b009      	add	sp, #36	; 0x24
   1b64c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1b650:	f00a b963 	b.w	2591a <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   1b654:	2001      	movs	r0, #1
   1b656:	e7df      	b.n	1b618 <k_work_queue_start+0x2c>
   1b658:	0001b3d9 	.word	0x0001b3d9

0001b65c <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   1b65c:	b513      	push	{r0, r1, r4, lr}
   1b65e:	9001      	str	r0, [sp, #4]
   1b660:	4608      	mov	r0, r1
	__asm__ volatile(
   1b662:	f04f 0120 	mov.w	r1, #32
   1b666:	f3ef 8411 	mrs	r4, BASEPRI
   1b66a:	f381 8812 	msr	BASEPRI_MAX, r1
   1b66e:	f3bf 8f6f 	isb	sy
	return *flagp;
   1b672:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   1b674:	f011 0f0e 	tst.w	r1, #14
   1b678:	d116      	bne.n	1b6a8 <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1b67a:	ea53 0c02 	orrs.w	ip, r3, r2
   1b67e:	d108      	bne.n	1b692 <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
   1b680:	a901      	add	r1, sp, #4
   1b682:	f7ff ff5d 	bl	1b540 <submit_to_queue_locked>
	__asm__ volatile(
   1b686:	f384 8811 	msr	BASEPRI, r4
   1b68a:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   1b68e:	b002      	add	sp, #8
   1b690:	bd10      	pop	{r4, pc}
	*flagp |= BIT(bit);
   1b692:	f041 0108 	orr.w	r1, r1, #8
   1b696:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   1b698:	9901      	ldr	r1, [sp, #4]
   1b69a:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1b69c:	3010      	adds	r0, #16
   1b69e:	4903      	ldr	r1, [pc, #12]	; (1b6ac <k_work_schedule_for_queue+0x50>)
   1b6a0:	f000 fc34 	bl	1bf0c <z_add_timeout>
	return ret;
   1b6a4:	2001      	movs	r0, #1
   1b6a6:	e7ee      	b.n	1b686 <k_work_schedule_for_queue+0x2a>
	int ret = 0;
   1b6a8:	2000      	movs	r0, #0
   1b6aa:	e7ec      	b.n	1b686 <k_work_schedule_for_queue+0x2a>
   1b6ac:	00025be7 	.word	0x00025be7

0001b6b0 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   1b6b0:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   1b6b2:	4801      	ldr	r0, [pc, #4]	; (1b6b8 <k_work_schedule+0x8>)
   1b6b4:	f7ff bfd2 	b.w	1b65c <k_work_schedule_for_queue>
   1b6b8:	20001fe8 	.word	0x20001fe8

0001b6bc <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   1b6bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1b6be:	460c      	mov	r4, r1
   1b6c0:	9001      	str	r0, [sp, #4]
   1b6c2:	4616      	mov	r6, r2
   1b6c4:	461d      	mov	r5, r3
	__asm__ volatile(
   1b6c6:	f04f 0320 	mov.w	r3, #32
   1b6ca:	f3ef 8711 	mrs	r7, BASEPRI
   1b6ce:	f383 8812 	msr	BASEPRI_MAX, r3
   1b6d2:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   1b6d6:	4608      	mov	r0, r1
   1b6d8:	f00a fa3f 	bl	25b5a <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1b6dc:	ea55 0306 	orrs.w	r3, r5, r6
   1b6e0:	d109      	bne.n	1b6f6 <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   1b6e2:	a901      	add	r1, sp, #4
   1b6e4:	4620      	mov	r0, r4
   1b6e6:	f7ff ff2b 	bl	1b540 <submit_to_queue_locked>
	__asm__ volatile(
   1b6ea:	f387 8811 	msr	BASEPRI, r7
   1b6ee:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   1b6f2:	b003      	add	sp, #12
   1b6f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   1b6f6:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1b6f8:	4906      	ldr	r1, [pc, #24]	; (1b714 <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   1b6fa:	f043 0308 	orr.w	r3, r3, #8
   1b6fe:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   1b700:	9b01      	ldr	r3, [sp, #4]
   1b702:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1b704:	f104 0010 	add.w	r0, r4, #16
   1b708:	4632      	mov	r2, r6
   1b70a:	462b      	mov	r3, r5
   1b70c:	f000 fbfe 	bl	1bf0c <z_add_timeout>
	return ret;
   1b710:	2001      	movs	r0, #1
   1b712:	e7ea      	b.n	1b6ea <k_work_reschedule_for_queue+0x2e>
   1b714:	00025be7 	.word	0x00025be7

0001b718 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   1b718:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   1b71a:	4801      	ldr	r0, [pc, #4]	; (1b720 <k_work_reschedule+0x8>)
   1b71c:	f7ff bfce 	b.w	1b6bc <k_work_reschedule_for_queue>
   1b720:	20001fe8 	.word	0x20001fe8

0001b724 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   1b724:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   1b726:	4c08      	ldr	r4, [pc, #32]	; (1b748 <z_reset_time_slice+0x24>)
   1b728:	6823      	ldr	r3, [r4, #0]
   1b72a:	b15b      	cbz	r3, 1b744 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   1b72c:	f7fd fcfe 	bl	1912c <sys_clock_elapsed>
   1b730:	4603      	mov	r3, r0
   1b732:	6820      	ldr	r0, [r4, #0]
   1b734:	4a05      	ldr	r2, [pc, #20]	; (1b74c <z_reset_time_slice+0x28>)
   1b736:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   1b738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   1b73c:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   1b73e:	2100      	movs	r1, #0
   1b740:	f00a bc16 	b.w	25f70 <z_set_timeout_expiry>
}
   1b744:	bd10      	pop	{r4, pc}
   1b746:	bf00      	nop
   1b748:	20003f50 	.word	0x20003f50
   1b74c:	20003f18 	.word	0x20003f18

0001b750 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   1b750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b752:	4604      	mov	r4, r0
   1b754:	460d      	mov	r5, r1
	__asm__ volatile(
   1b756:	f04f 0320 	mov.w	r3, #32
   1b75a:	f3ef 8611 	mrs	r6, BASEPRI
   1b75e:	f383 8812 	msr	BASEPRI_MAX, r3
   1b762:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   1b766:	4b0f      	ldr	r3, [pc, #60]	; (1b7a4 <k_sched_time_slice_set+0x54>)
   1b768:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   1b76a:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   1b76e:	f240 30e7 	movw	r0, #999	; 0x3e7
   1b772:	6119      	str	r1, [r3, #16]
   1b774:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b778:	2300      	movs	r3, #0
   1b77a:	fbe4 0107 	umlal	r0, r1, r4, r7
   1b77e:	f7e5 fe7b 	bl	1478 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   1b782:	2c00      	cmp	r4, #0
   1b784:	4b08      	ldr	r3, [pc, #32]	; (1b7a8 <k_sched_time_slice_set+0x58>)
   1b786:	dc09      	bgt.n	1b79c <k_sched_time_slice_set+0x4c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
   1b788:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   1b78a:	4b08      	ldr	r3, [pc, #32]	; (1b7ac <k_sched_time_slice_set+0x5c>)
   1b78c:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   1b78e:	f7ff ffc9 	bl	1b724 <z_reset_time_slice>
	__asm__ volatile(
   1b792:	f386 8811 	msr	BASEPRI, r6
   1b796:	f3bf 8f6f 	isb	sy
	}
}
   1b79a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
   1b79c:	2802      	cmp	r0, #2
   1b79e:	bfb8      	it	lt
   1b7a0:	2002      	movlt	r0, #2
   1b7a2:	e7f1      	b.n	1b788 <k_sched_time_slice_set+0x38>
   1b7a4:	20003f18 	.word	0x20003f18
   1b7a8:	20003f50 	.word	0x20003f50
   1b7ac:	20003f4c 	.word	0x20003f4c

0001b7b0 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1b7b0:	b949      	cbnz	r1, 1b7c6 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1b7b2:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   1b7b6:	b930      	cbnz	r0, 1b7c6 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   1b7b8:	4b05      	ldr	r3, [pc, #20]	; (1b7d0 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   1b7ba:	69da      	ldr	r2, [r3, #28]
   1b7bc:	689b      	ldr	r3, [r3, #8]
   1b7be:	429a      	cmp	r2, r3
   1b7c0:	d001      	beq.n	1b7c6 <z_reschedule+0x16>
	ret = arch_swap(key);
   1b7c2:	f7e9 bfbd 	b.w	5740 <arch_swap>
   1b7c6:	f381 8811 	msr	BASEPRI, r1
   1b7ca:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   1b7ce:	4770      	bx	lr
   1b7d0:	20003f18 	.word	0x20003f18

0001b7d4 <k_sched_lock>:
	__asm__ volatile(
   1b7d4:	f04f 0320 	mov.w	r3, #32
   1b7d8:	f3ef 8111 	mrs	r1, BASEPRI
   1b7dc:	f383 8812 	msr	BASEPRI_MAX, r3
   1b7e0:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   1b7e4:	4b04      	ldr	r3, [pc, #16]	; (1b7f8 <k_sched_lock+0x24>)
   1b7e6:	689a      	ldr	r2, [r3, #8]
   1b7e8:	7bd3      	ldrb	r3, [r2, #15]
   1b7ea:	3b01      	subs	r3, #1
   1b7ec:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1b7ee:	f381 8811 	msr	BASEPRI, r1
   1b7f2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   1b7f6:	4770      	bx	lr
   1b7f8:	20003f18 	.word	0x20003f18

0001b7fc <update_cache>:
{
   1b7fc:	b538      	push	{r3, r4, r5, lr}
   1b7fe:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
   1b800:	480c      	ldr	r0, [pc, #48]	; (1b834 <update_cache+0x38>)
   1b802:	4d0d      	ldr	r5, [pc, #52]	; (1b838 <update_cache+0x3c>)
   1b804:	f00a fad7 	bl	25db6 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   1b808:	4604      	mov	r4, r0
   1b80a:	b900      	cbnz	r0, 1b80e <update_cache+0x12>
   1b80c:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   1b80e:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   1b810:	b94a      	cbnz	r2, 1b826 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
   1b812:	7b5a      	ldrb	r2, [r3, #13]
   1b814:	06d2      	lsls	r2, r2, #27
   1b816:	d106      	bne.n	1b826 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1b818:	69a2      	ldr	r2, [r4, #24]
   1b81a:	b922      	cbnz	r2, 1b826 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
   1b81c:	89da      	ldrh	r2, [r3, #14]
   1b81e:	2a7f      	cmp	r2, #127	; 0x7f
   1b820:	d901      	bls.n	1b826 <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
   1b822:	61eb      	str	r3, [r5, #28]
}
   1b824:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   1b826:	429c      	cmp	r4, r3
   1b828:	d001      	beq.n	1b82e <update_cache+0x32>
			z_reset_time_slice();
   1b82a:	f7ff ff7b 	bl	1b724 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1b82e:	61ec      	str	r4, [r5, #28]
}
   1b830:	e7f8      	b.n	1b824 <update_cache+0x28>
   1b832:	bf00      	nop
   1b834:	20003f38 	.word	0x20003f38
   1b838:	20003f18 	.word	0x20003f18

0001b83c <move_thread_to_end_of_prio_q>:
{
   1b83c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   1b83e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   1b842:	7b43      	ldrb	r3, [r0, #13]
   1b844:	2a00      	cmp	r2, #0
{
   1b846:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1b848:	da04      	bge.n	1b854 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1b84a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1b84e:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   1b850:	f00a fa6c 	bl	25d2c <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1b854:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   1b856:	4a15      	ldr	r2, [pc, #84]	; (1b8ac <move_thread_to_end_of_prio_q+0x70>)
   1b858:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1b85c:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   1b85e:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b862:	f102 0520 	add.w	r5, r2, #32
   1b866:	42ab      	cmp	r3, r5
   1b868:	d01b      	beq.n	1b8a2 <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b86a:	b1d3      	cbz	r3, 1b8a2 <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
   1b86c:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   1b870:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   1b874:	4286      	cmp	r6, r0
   1b876:	d00f      	beq.n	1b898 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
   1b878:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   1b87a:	2800      	cmp	r0, #0
   1b87c:	dd0c      	ble.n	1b898 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   1b87e:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   1b880:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   1b884:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   1b886:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   1b888:	6890      	ldr	r0, [r2, #8]
   1b88a:	1a43      	subs	r3, r0, r1
   1b88c:	4258      	negs	r0, r3
}
   1b88e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   1b892:	4158      	adcs	r0, r3
   1b894:	f7ff bfb2 	b.w	1b7fc <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1b898:	42a3      	cmp	r3, r4
   1b89a:	d002      	beq.n	1b8a2 <move_thread_to_end_of_prio_q+0x66>
   1b89c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b89e:	2b00      	cmp	r3, #0
   1b8a0:	d1e6      	bne.n	1b870 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
   1b8a2:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
   1b8a6:	6021      	str	r1, [r4, #0]
	list->tail = node;
   1b8a8:	6251      	str	r1, [r2, #36]	; 0x24
}
   1b8aa:	e7ed      	b.n	1b888 <move_thread_to_end_of_prio_q+0x4c>
   1b8ac:	20003f18 	.word	0x20003f18

0001b8b0 <z_time_slice>:
{
   1b8b0:	b538      	push	{r3, r4, r5, lr}
   1b8b2:	4601      	mov	r1, r0
	__asm__ volatile(
   1b8b4:	f04f 0320 	mov.w	r3, #32
   1b8b8:	f3ef 8411 	mrs	r4, BASEPRI
   1b8bc:	f383 8812 	msr	BASEPRI_MAX, r3
   1b8c0:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   1b8c4:	4b15      	ldr	r3, [pc, #84]	; (1b91c <z_time_slice+0x6c>)
   1b8c6:	4a16      	ldr	r2, [pc, #88]	; (1b920 <z_time_slice+0x70>)
   1b8c8:	6898      	ldr	r0, [r3, #8]
   1b8ca:	6815      	ldr	r5, [r2, #0]
   1b8cc:	42a8      	cmp	r0, r5
   1b8ce:	d106      	bne.n	1b8de <z_time_slice+0x2e>
			z_reset_time_slice();
   1b8d0:	f7ff ff28 	bl	1b724 <z_reset_time_slice>
	__asm__ volatile(
   1b8d4:	f384 8811 	msr	BASEPRI, r4
   1b8d8:	f3bf 8f6f 	isb	sy
}
   1b8dc:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   1b8de:	2500      	movs	r5, #0
   1b8e0:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
   1b8e2:	4a10      	ldr	r2, [pc, #64]	; (1b924 <z_time_slice+0x74>)
   1b8e4:	6812      	ldr	r2, [r2, #0]
   1b8e6:	b1ba      	cbz	r2, 1b918 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
   1b8e8:	89c2      	ldrh	r2, [r0, #14]
   1b8ea:	2a7f      	cmp	r2, #127	; 0x7f
   1b8ec:	d814      	bhi.n	1b918 <z_time_slice+0x68>
		&& !z_is_thread_prevented_from_running(thread)
   1b8ee:	7b42      	ldrb	r2, [r0, #13]
   1b8f0:	06d2      	lsls	r2, r2, #27
   1b8f2:	d111      	bne.n	1b918 <z_time_slice+0x68>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1b8f4:	4a0c      	ldr	r2, [pc, #48]	; (1b928 <z_time_slice+0x78>)
   1b8f6:	f990 500e 	ldrsb.w	r5, [r0, #14]
   1b8fa:	6812      	ldr	r2, [r2, #0]
   1b8fc:	4295      	cmp	r5, r2
   1b8fe:	db0b      	blt.n	1b918 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
   1b900:	4a0a      	ldr	r2, [pc, #40]	; (1b92c <z_time_slice+0x7c>)
   1b902:	4290      	cmp	r0, r2
   1b904:	d008      	beq.n	1b918 <z_time_slice+0x68>
		if (ticks >= _current_cpu->slice_ticks) {
   1b906:	691a      	ldr	r2, [r3, #16]
   1b908:	428a      	cmp	r2, r1
   1b90a:	dc02      	bgt.n	1b912 <z_time_slice+0x62>
			move_thread_to_end_of_prio_q(_current);
   1b90c:	f7ff ff96 	bl	1b83c <move_thread_to_end_of_prio_q>
   1b910:	e7de      	b.n	1b8d0 <z_time_slice+0x20>
			_current_cpu->slice_ticks -= ticks;
   1b912:	1a52      	subs	r2, r2, r1
		_current_cpu->slice_ticks = 0;
   1b914:	611a      	str	r2, [r3, #16]
   1b916:	e7dd      	b.n	1b8d4 <z_time_slice+0x24>
   1b918:	2200      	movs	r2, #0
   1b91a:	e7fb      	b.n	1b914 <z_time_slice+0x64>
   1b91c:	20003f18 	.word	0x20003f18
   1b920:	20003f48 	.word	0x20003f48
   1b924:	20003f50 	.word	0x20003f50
   1b928:	20003f4c 	.word	0x20003f4c
   1b92c:	20001ee8 	.word	0x20001ee8

0001b930 <ready_thread>:
{
   1b930:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1b932:	f990 200d 	ldrsb.w	r2, [r0, #13]
   1b936:	7b43      	ldrb	r3, [r0, #13]
   1b938:	2a00      	cmp	r2, #0
   1b93a:	db2a      	blt.n	1b992 <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1b93c:	06da      	lsls	r2, r3, #27
   1b93e:	d128      	bne.n	1b992 <ready_thread+0x62>
   1b940:	6982      	ldr	r2, [r0, #24]
   1b942:	bb32      	cbnz	r2, 1b992 <ready_thread+0x62>
	return list->head == list;
   1b944:	4a14      	ldr	r2, [pc, #80]	; (1b998 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
   1b946:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1b94a:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
   1b94c:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b950:	f102 0520 	add.w	r5, r2, #32
   1b954:	42ab      	cmp	r3, r5
   1b956:	d017      	beq.n	1b988 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b958:	b1b3      	cbz	r3, 1b988 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
   1b95a:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   1b95e:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   1b962:	428e      	cmp	r6, r1
   1b964:	d00b      	beq.n	1b97e <ready_thread+0x4e>
		return b2 - b1;
   1b966:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   1b968:	2900      	cmp	r1, #0
   1b96a:	dd08      	ble.n	1b97e <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
   1b96c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1b96e:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   1b972:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   1b974:	6058      	str	r0, [r3, #4]
}
   1b976:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   1b978:	2000      	movs	r0, #0
   1b97a:	f7ff bf3f 	b.w	1b7fc <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1b97e:	42a3      	cmp	r3, r4
   1b980:	d002      	beq.n	1b988 <ready_thread+0x58>
   1b982:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b984:	2b00      	cmp	r3, #0
   1b986:	d1ea      	bne.n	1b95e <ready_thread+0x2e>
	node->prev = tail;
   1b988:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
   1b98c:	6020      	str	r0, [r4, #0]
	list->tail = node;
   1b98e:	6250      	str	r0, [r2, #36]	; 0x24
}
   1b990:	e7f1      	b.n	1b976 <ready_thread+0x46>
}
   1b992:	bc70      	pop	{r4, r5, r6}
   1b994:	4770      	bx	lr
   1b996:	bf00      	nop
   1b998:	20003f18 	.word	0x20003f18

0001b99c <z_sched_start>:
{
   1b99c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1b99e:	f04f 0220 	mov.w	r2, #32
   1b9a2:	f3ef 8411 	mrs	r4, BASEPRI
   1b9a6:	f382 8812 	msr	BASEPRI_MAX, r2
   1b9aa:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   1b9ae:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   1b9b0:	0751      	lsls	r1, r2, #29
   1b9b2:	d404      	bmi.n	1b9be <z_sched_start+0x22>
	__asm__ volatile(
   1b9b4:	f384 8811 	msr	BASEPRI, r4
   1b9b8:	f3bf 8f6f 	isb	sy
}
   1b9bc:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1b9be:	f022 0204 	bic.w	r2, r2, #4
   1b9c2:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   1b9c4:	f7ff ffb4 	bl	1b930 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1b9c8:	4621      	mov	r1, r4
   1b9ca:	4802      	ldr	r0, [pc, #8]	; (1b9d4 <z_sched_start+0x38>)
}
   1b9cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   1b9d0:	f7ff beee 	b.w	1b7b0 <z_reschedule>
   1b9d4:	2000412f 	.word	0x2000412f

0001b9d8 <unready_thread>:
{
   1b9d8:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   1b9da:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   1b9de:	7b43      	ldrb	r3, [r0, #13]
   1b9e0:	2a00      	cmp	r2, #0
{
   1b9e2:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1b9e4:	da04      	bge.n	1b9f0 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1b9e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1b9ea:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1b9ec:	f00a f99e 	bl	25d2c <sys_dlist_remove>
	update_cache(thread == _current);
   1b9f0:	4b04      	ldr	r3, [pc, #16]	; (1ba04 <unready_thread+0x2c>)
   1b9f2:	6898      	ldr	r0, [r3, #8]
   1b9f4:	1a43      	subs	r3, r0, r1
   1b9f6:	4258      	negs	r0, r3
   1b9f8:	4158      	adcs	r0, r3
}
   1b9fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   1b9fe:	f7ff befd 	b.w	1b7fc <update_cache>
   1ba02:	bf00      	nop
   1ba04:	20003f18 	.word	0x20003f18

0001ba08 <pend>:
{
   1ba08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ba0c:	4606      	mov	r6, r0
   1ba0e:	4615      	mov	r5, r2
   1ba10:	461c      	mov	r4, r3
	__asm__ volatile(
   1ba12:	f04f 0320 	mov.w	r3, #32
   1ba16:	f3ef 8711 	mrs	r7, BASEPRI
   1ba1a:	f383 8812 	msr	BASEPRI_MAX, r3
   1ba1e:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   1ba22:	f00a fa00 	bl	25e26 <add_to_waitq_locked>
	__asm__ volatile(
   1ba26:	f387 8811 	msr	BASEPRI, r7
   1ba2a:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1ba2e:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   1ba32:	bf08      	it	eq
   1ba34:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
   1ba38:	d008      	beq.n	1ba4c <pend+0x44>
   1ba3a:	462a      	mov	r2, r5
   1ba3c:	4623      	mov	r3, r4
   1ba3e:	f106 0018 	add.w	r0, r6, #24
   1ba42:	4903      	ldr	r1, [pc, #12]	; (1ba50 <pend+0x48>)
}
   1ba44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1ba48:	f000 ba60 	b.w	1bf0c <z_add_timeout>
   1ba4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ba50:	00025de3 	.word	0x00025de3

0001ba54 <z_pend_curr>:
{
   1ba54:	b510      	push	{r4, lr}
	pending_current = _current;
   1ba56:	4b07      	ldr	r3, [pc, #28]	; (1ba74 <z_pend_curr+0x20>)
   1ba58:	6898      	ldr	r0, [r3, #8]
   1ba5a:	4b07      	ldr	r3, [pc, #28]	; (1ba78 <z_pend_curr+0x24>)
{
   1ba5c:	460c      	mov	r4, r1
	pending_current = _current;
   1ba5e:	6018      	str	r0, [r3, #0]
{
   1ba60:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   1ba62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1ba66:	f7ff ffcf 	bl	1ba08 <pend>
   1ba6a:	4620      	mov	r0, r4
}
   1ba6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1ba70:	f7e9 be66 	b.w	5740 <arch_swap>
   1ba74:	20003f18 	.word	0x20003f18
   1ba78:	20003f48 	.word	0x20003f48

0001ba7c <z_set_prio>:
{
   1ba7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ba7e:	4604      	mov	r4, r0
	__asm__ volatile(
   1ba80:	f04f 0320 	mov.w	r3, #32
   1ba84:	f3ef 8611 	mrs	r6, BASEPRI
   1ba88:	f383 8812 	msr	BASEPRI_MAX, r3
   1ba8c:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   1ba90:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1ba92:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   1ba94:	b249      	sxtb	r1, r1
   1ba96:	d133      	bne.n	1bb00 <z_set_prio+0x84>
		if (need_sched) {
   1ba98:	6982      	ldr	r2, [r0, #24]
   1ba9a:	bb8a      	cbnz	r2, 1bb00 <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1ba9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1baa0:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1baa2:	f00a f943 	bl	25d2c <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1baa6:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   1baa8:	4a17      	ldr	r2, [pc, #92]	; (1bb08 <z_set_prio+0x8c>)
				thread->base.prio = prio;
   1baaa:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   1baac:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1bab0:	7343      	strb	r3, [r0, #13]
   1bab2:	4610      	mov	r0, r2
   1bab4:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bab8:	4283      	cmp	r3, r0
   1baba:	d01b      	beq.n	1baf4 <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1babc:	b1d3      	cbz	r3, 1baf4 <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
   1babe:	6a57      	ldr	r7, [r2, #36]	; 0x24
	int32_t b2 = thread_2->base.prio;
   1bac0:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
   1bac4:	42a9      	cmp	r1, r5
   1bac6:	d010      	beq.n	1baea <z_set_prio+0x6e>
		return b2 - b1;
   1bac8:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   1baca:	2d00      	cmp	r5, #0
   1bacc:	dd0d      	ble.n	1baea <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
   1bace:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1bad0:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1bad4:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1bad6:	605c      	str	r4, [r3, #4]
			update_cache(1);
   1bad8:	2001      	movs	r0, #1
   1bada:	f7ff fe8f 	bl	1b7fc <update_cache>
   1bade:	2001      	movs	r0, #1
	__asm__ volatile(
   1bae0:	f386 8811 	msr	BASEPRI, r6
   1bae4:	f3bf 8f6f 	isb	sy
}
   1bae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1baea:	42bb      	cmp	r3, r7
   1baec:	d002      	beq.n	1baf4 <z_set_prio+0x78>
   1baee:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1baf0:	2b00      	cmp	r3, #0
   1baf2:	d1e5      	bne.n	1bac0 <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
   1baf4:	6a53      	ldr	r3, [r2, #36]	; 0x24
	node->prev = tail;
   1baf6:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
   1bafa:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1bafc:	6254      	str	r4, [r2, #36]	; 0x24
}
   1bafe:	e7eb      	b.n	1bad8 <z_set_prio+0x5c>
			thread->base.prio = prio;
   1bb00:	73a1      	strb	r1, [r4, #14]
   1bb02:	2000      	movs	r0, #0
   1bb04:	e7ec      	b.n	1bae0 <z_set_prio+0x64>
   1bb06:	bf00      	nop
   1bb08:	20003f18 	.word	0x20003f18

0001bb0c <z_impl_k_thread_suspend>:
{
   1bb0c:	b570      	push	{r4, r5, r6, lr}
   1bb0e:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1bb10:	3018      	adds	r0, #24
   1bb12:	f00a f9f7 	bl	25f04 <z_abort_timeout>
	__asm__ volatile(
   1bb16:	f04f 0320 	mov.w	r3, #32
   1bb1a:	f3ef 8611 	mrs	r6, BASEPRI
   1bb1e:	f383 8812 	msr	BASEPRI_MAX, r3
   1bb22:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1bb26:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   1bb2a:	7b63      	ldrb	r3, [r4, #13]
   1bb2c:	2a00      	cmp	r2, #0
   1bb2e:	da05      	bge.n	1bb3c <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1bb30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1bb34:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1bb36:	4620      	mov	r0, r4
   1bb38:	f00a f8f8 	bl	25d2c <sys_dlist_remove>
		update_cache(thread == _current);
   1bb3c:	4d0b      	ldr	r5, [pc, #44]	; (1bb6c <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1bb3e:	7b63      	ldrb	r3, [r4, #13]
   1bb40:	68a8      	ldr	r0, [r5, #8]
   1bb42:	f043 0310 	orr.w	r3, r3, #16
   1bb46:	7363      	strb	r3, [r4, #13]
   1bb48:	1b03      	subs	r3, r0, r4
   1bb4a:	4258      	negs	r0, r3
   1bb4c:	4158      	adcs	r0, r3
   1bb4e:	f7ff fe55 	bl	1b7fc <update_cache>
	__asm__ volatile(
   1bb52:	f386 8811 	msr	BASEPRI, r6
   1bb56:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1bb5a:	68ab      	ldr	r3, [r5, #8]
   1bb5c:	42a3      	cmp	r3, r4
   1bb5e:	d103      	bne.n	1bb68 <z_impl_k_thread_suspend+0x5c>
}
   1bb60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1bb64:	f00a b91d 	b.w	25da2 <z_reschedule_unlocked>
}
   1bb68:	bd70      	pop	{r4, r5, r6, pc}
   1bb6a:	bf00      	nop
   1bb6c:	20003f18 	.word	0x20003f18

0001bb70 <k_sched_unlock>:
{
   1bb70:	b510      	push	{r4, lr}
	__asm__ volatile(
   1bb72:	f04f 0320 	mov.w	r3, #32
   1bb76:	f3ef 8411 	mrs	r4, BASEPRI
   1bb7a:	f383 8812 	msr	BASEPRI_MAX, r3
   1bb7e:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   1bb82:	4b08      	ldr	r3, [pc, #32]	; (1bba4 <k_sched_unlock+0x34>)
   1bb84:	689a      	ldr	r2, [r3, #8]
   1bb86:	7bd3      	ldrb	r3, [r2, #15]
   1bb88:	3301      	adds	r3, #1
   1bb8a:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1bb8c:	2000      	movs	r0, #0
   1bb8e:	f7ff fe35 	bl	1b7fc <update_cache>
	__asm__ volatile(
   1bb92:	f384 8811 	msr	BASEPRI, r4
   1bb96:	f3bf 8f6f 	isb	sy
}
   1bb9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   1bb9e:	f00a b900 	b.w	25da2 <z_reschedule_unlocked>
   1bba2:	bf00      	nop
   1bba4:	20003f18 	.word	0x20003f18

0001bba8 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   1bba8:	4b04      	ldr	r3, [pc, #16]	; (1bbbc <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1bbaa:	2100      	movs	r1, #0
   1bbac:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   1bbb0:	e9c3 2208 	strd	r2, r2, [r3, #32]
   1bbb4:	4608      	mov	r0, r1
   1bbb6:	f7ff bdcb 	b.w	1b750 <k_sched_time_slice_set>
   1bbba:	bf00      	nop
   1bbbc:	20003f18 	.word	0x20003f18

0001bbc0 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   1bbc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   1bbc2:	f04f 0320 	mov.w	r3, #32
   1bbc6:	f3ef 8511 	mrs	r5, BASEPRI
   1bbca:	f383 8812 	msr	BASEPRI_MAX, r3
   1bbce:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   1bbd2:	491a      	ldr	r1, [pc, #104]	; (1bc3c <z_impl_k_yield+0x7c>)
   1bbd4:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1bbd6:	7b43      	ldrb	r3, [r0, #13]
   1bbd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1bbdc:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1bbde:	f00a f8a5 	bl	25d2c <sys_dlist_remove>
	}
	queue_thread(_current);
   1bbe2:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   1bbe4:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
   1bbe6:	4608      	mov	r0, r1
   1bbe8:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1bbec:	735a      	strb	r2, [r3, #13]
   1bbee:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bbf2:	4282      	cmp	r2, r0
   1bbf4:	d01c      	beq.n	1bc30 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1bbf6:	b1da      	cbz	r2, 1bc30 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
   1bbf8:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	int32_t b1 = thread_1->base.prio;
   1bbfa:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   1bbfe:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
   1bc02:	42a6      	cmp	r6, r4
   1bc04:	d00f      	beq.n	1bc26 <z_impl_k_yield+0x66>
		return b2 - b1;
   1bc06:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   1bc08:	2c00      	cmp	r4, #0
   1bc0a:	dd0c      	ble.n	1bc26 <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
   1bc0c:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   1bc0e:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   1bc12:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   1bc14:	6053      	str	r3, [r2, #4]
	update_cache(1);
   1bc16:	2001      	movs	r0, #1
   1bc18:	f7ff fdf0 	bl	1b7fc <update_cache>
   1bc1c:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   1bc1e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1bc22:	f7e9 bd8d 	b.w	5740 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   1bc26:	42ba      	cmp	r2, r7
   1bc28:	d002      	beq.n	1bc30 <z_impl_k_yield+0x70>
   1bc2a:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1bc2c:	2a00      	cmp	r2, #0
   1bc2e:	d1e6      	bne.n	1bbfe <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
   1bc30:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	node->prev = tail;
   1bc32:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
   1bc36:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1bc38:	624b      	str	r3, [r1, #36]	; 0x24
}
   1bc3a:	e7ec      	b.n	1bc16 <z_impl_k_yield+0x56>
   1bc3c:	20003f18 	.word	0x20003f18

0001bc40 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   1bc40:	ea50 0301 	orrs.w	r3, r0, r1
{
   1bc44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bc48:	4605      	mov	r5, r0
   1bc4a:	460e      	mov	r6, r1
	if (ticks == 0) {
   1bc4c:	d103      	bne.n	1bc56 <z_tick_sleep+0x16>
	z_impl_k_yield();
   1bc4e:	f7ff ffb7 	bl	1bbc0 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
   1bc52:	2000      	movs	r0, #0
   1bc54:	e033      	b.n	1bcbe <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
   1bc56:	f06f 0401 	mvn.w	r4, #1
   1bc5a:	1a24      	subs	r4, r4, r0
   1bc5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1bc60:	eb63 0301 	sbc.w	r3, r3, r1
   1bc64:	2c01      	cmp	r4, #1
   1bc66:	f173 0300 	sbcs.w	r3, r3, #0
   1bc6a:	da02      	bge.n	1bc72 <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   1bc6c:	f00a f99a 	bl	25fa4 <sys_clock_tick_get_32>
   1bc70:	1944      	adds	r4, r0, r5
   1bc72:	f04f 0320 	mov.w	r3, #32
   1bc76:	f3ef 8811 	mrs	r8, BASEPRI
   1bc7a:	f383 8812 	msr	BASEPRI_MAX, r3
   1bc7e:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   1bc82:	4f10      	ldr	r7, [pc, #64]	; (1bcc4 <z_tick_sleep+0x84>)
   1bc84:	4b10      	ldr	r3, [pc, #64]	; (1bcc8 <z_tick_sleep+0x88>)
   1bc86:	68b8      	ldr	r0, [r7, #8]
   1bc88:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   1bc8a:	f7ff fea5 	bl	1b9d8 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1bc8e:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1bc90:	490e      	ldr	r1, [pc, #56]	; (1bccc <z_tick_sleep+0x8c>)
   1bc92:	462a      	mov	r2, r5
   1bc94:	4633      	mov	r3, r6
   1bc96:	3018      	adds	r0, #24
   1bc98:	f000 f938 	bl	1bf0c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1bc9c:	68ba      	ldr	r2, [r7, #8]
   1bc9e:	7b53      	ldrb	r3, [r2, #13]
   1bca0:	f043 0310 	orr.w	r3, r3, #16
   1bca4:	7353      	strb	r3, [r2, #13]
   1bca6:	4640      	mov	r0, r8
   1bca8:	f7e9 fd4a 	bl	5740 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   1bcac:	f00a f97a 	bl	25fa4 <sys_clock_tick_get_32>
   1bcb0:	1a20      	subs	r0, r4, r0
   1bcb2:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   1bcb6:	2801      	cmp	r0, #1
   1bcb8:	f173 0300 	sbcs.w	r3, r3, #0
   1bcbc:	dbc9      	blt.n	1bc52 <z_tick_sleep+0x12>
}
   1bcbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1bcc2:	bf00      	nop
   1bcc4:	20003f18 	.word	0x20003f18
   1bcc8:	20003f48 	.word	0x20003f48
   1bccc:	00025de3 	.word	0x00025de3

0001bcd0 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1bcd0:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   1bcd4:	bf08      	it	eq
   1bcd6:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   1bcda:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1bcdc:	d106      	bne.n	1bcec <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   1bcde:	4b08      	ldr	r3, [pc, #32]	; (1bd00 <z_impl_k_sleep+0x30>)
   1bce0:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1bce2:	f7ff ff13 	bl	1bb0c <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   1bce6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   1bcea:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   1bcec:	f7ff ffa8 	bl	1bc40 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   1bcf0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1bcf4:	fb80 0303 	smull	r0, r3, r0, r3
   1bcf8:	0bc0      	lsrs	r0, r0, #15
   1bcfa:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   1bcfe:	e7f4      	b.n	1bcea <z_impl_k_sleep+0x1a>
   1bd00:	20003f18 	.word	0x20003f18

0001bd04 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   1bd04:	4b01      	ldr	r3, [pc, #4]	; (1bd0c <z_impl_z_current_get+0x8>)
   1bd06:	6898      	ldr	r0, [r3, #8]
   1bd08:	4770      	bx	lr
   1bd0a:	bf00      	nop
   1bd0c:	20003f18 	.word	0x20003f18

0001bd10 <z_impl_k_is_preempt_thread>:
   1bd10:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
   1bd14:	b93b      	cbnz	r3, 1bd26 <z_impl_k_is_preempt_thread+0x16>
   1bd16:	4b05      	ldr	r3, [pc, #20]	; (1bd2c <z_impl_k_is_preempt_thread+0x1c>)
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   1bd18:	689b      	ldr	r3, [r3, #8]
	return !arch_is_in_isr() && is_preempt(_current);
   1bd1a:	89d8      	ldrh	r0, [r3, #14]
   1bd1c:	287f      	cmp	r0, #127	; 0x7f
   1bd1e:	bf8c      	ite	hi
   1bd20:	2000      	movhi	r0, #0
   1bd22:	2001      	movls	r0, #1
   1bd24:	4770      	bx	lr
   1bd26:	2000      	movs	r0, #0
}
   1bd28:	4770      	bx	lr
   1bd2a:	bf00      	nop
   1bd2c:	20003f18 	.word	0x20003f18

0001bd30 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   1bd30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bd34:	4604      	mov	r4, r0
   1bd36:	f04f 0320 	mov.w	r3, #32
   1bd3a:	f3ef 8611 	mrs	r6, BASEPRI
   1bd3e:	f383 8812 	msr	BASEPRI_MAX, r3
   1bd42:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   1bd46:	7b43      	ldrb	r3, [r0, #13]
   1bd48:	071a      	lsls	r2, r3, #28
   1bd4a:	d505      	bpl.n	1bd58 <z_thread_abort+0x28>
	__asm__ volatile(
   1bd4c:	f386 8811 	msr	BASEPRI, r6
   1bd50:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   1bd54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1bd58:	f023 0220 	bic.w	r2, r3, #32
   1bd5c:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   1bd60:	09d2      	lsrs	r2, r2, #7
   1bd62:	d120      	bne.n	1bda6 <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1bd64:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   1bd66:	68a3      	ldr	r3, [r4, #8]
   1bd68:	b113      	cbz	r3, 1bd70 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
   1bd6a:	4620      	mov	r0, r4
   1bd6c:	f009 ffe6 	bl	25d3c <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   1bd70:	f104 0018 	add.w	r0, r4, #24
   1bd74:	f00a f8c6 	bl	25f04 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1bd78:	f104 0758 	add.w	r7, r4, #88	; 0x58
   1bd7c:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   1bd80:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bd82:	42bd      	cmp	r5, r7
   1bd84:	d000      	beq.n	1bd88 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1bd86:	b9b5      	cbnz	r5, 1bdb6 <z_thread_abort+0x86>
		update_cache(1);
   1bd88:	2001      	movs	r0, #1
   1bd8a:	f7ff fd37 	bl	1b7fc <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   1bd8e:	4b10      	ldr	r3, [pc, #64]	; (1bdd0 <z_thread_abort+0xa0>)
   1bd90:	689b      	ldr	r3, [r3, #8]
   1bd92:	42a3      	cmp	r3, r4
   1bd94:	d1da      	bne.n	1bd4c <z_thread_abort+0x1c>
   1bd96:	f3ef 8305 	mrs	r3, IPSR
   1bd9a:	2b00      	cmp	r3, #0
   1bd9c:	d1d6      	bne.n	1bd4c <z_thread_abort+0x1c>
   1bd9e:	4630      	mov	r0, r6
   1bda0:	f7e9 fcce 	bl	5740 <arch_swap>
	return ret;
   1bda4:	e7d2      	b.n	1bd4c <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1bda6:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   1bdaa:	f043 0308 	orr.w	r3, r3, #8
   1bdae:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1bdb0:	f009 ffbc 	bl	25d2c <sys_dlist_remove>
}
   1bdb4:	e7d7      	b.n	1bd66 <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
   1bdb6:	4628      	mov	r0, r5
   1bdb8:	f009 ffc0 	bl	25d3c <unpend_thread_no_timeout>
   1bdbc:	f105 0018 	add.w	r0, r5, #24
   1bdc0:	f00a f8a0 	bl	25f04 <z_abort_timeout>
   1bdc4:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   1bdc8:	4628      	mov	r0, r5
   1bdca:	f7ff fdb1 	bl	1b930 <ready_thread>
   1bdce:	e7d7      	b.n	1bd80 <z_thread_abort+0x50>
   1bdd0:	20003f18 	.word	0x20003f18

0001bdd4 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   1bdd4:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1bdd6:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   1bdda:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1bddc:	e9cd 6700 	strd	r6, r7, [sp]
   1bde0:	f7ff fe38 	bl	1ba54 <z_pend_curr>

	if (data != NULL) {
   1bde4:	b11c      	cbz	r4, 1bdee <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   1bde6:	4b03      	ldr	r3, [pc, #12]	; (1bdf4 <z_sched_wait+0x20>)
   1bde8:	689b      	ldr	r3, [r3, #8]
   1bdea:	695b      	ldr	r3, [r3, #20]
   1bdec:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   1bdee:	b002      	add	sp, #8
   1bdf0:	bdd0      	pop	{r4, r6, r7, pc}
   1bdf2:	bf00      	nop
   1bdf4:	20003f18 	.word	0x20003f18

0001bdf8 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   1bdf8:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
   1bdfa:	4806      	ldr	r0, [pc, #24]	; (1be14 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
   1bdfc:	4a06      	ldr	r2, [pc, #24]	; (1be18 <z_data_copy+0x20>)
   1bdfe:	4907      	ldr	r1, [pc, #28]	; (1be1c <z_data_copy+0x24>)
   1be00:	1a12      	subs	r2, r2, r0
   1be02:	f002 f916 	bl	1e032 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1be06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
   1be0a:	4a05      	ldr	r2, [pc, #20]	; (1be20 <z_data_copy+0x28>)
   1be0c:	4905      	ldr	r1, [pc, #20]	; (1be24 <z_data_copy+0x2c>)
   1be0e:	4806      	ldr	r0, [pc, #24]	; (1be28 <z_data_copy+0x30>)
   1be10:	f002 b90f 	b.w	1e032 <memcpy>
   1be14:	20000000 	.word	0x20000000
   1be18:	200011cc 	.word	0x200011cc
   1be1c:	00028314 	.word	0x00028314
   1be20:	00000000 	.word	0x00000000
   1be24:	00028314 	.word	0x00028314
   1be28:	20000000 	.word	0x20000000

0001be2c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   1be2c:	4b03      	ldr	r3, [pc, #12]	; (1be3c <elapsed+0x10>)
   1be2e:	681b      	ldr	r3, [r3, #0]
   1be30:	b90b      	cbnz	r3, 1be36 <elapsed+0xa>
   1be32:	f7fd b97b 	b.w	1912c <sys_clock_elapsed>
}
   1be36:	2000      	movs	r0, #0
   1be38:	4770      	bx	lr
   1be3a:	bf00      	nop
   1be3c:	20003f54 	.word	0x20003f54

0001be40 <next_timeout>:
	return list->head == list;
   1be40:	4b10      	ldr	r3, [pc, #64]	; (1be84 <next_timeout+0x44>)

static int32_t next_timeout(void)
{
   1be42:	b510      	push	{r4, lr}
   1be44:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1be46:	429c      	cmp	r4, r3
   1be48:	bf08      	it	eq
   1be4a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   1be4c:	f7ff ffee 	bl	1be2c <elapsed>
	int32_t ret;

	if ((to == NULL) ||
   1be50:	b1a4      	cbz	r4, 1be7c <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   1be52:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   1be56:	1a1b      	subs	r3, r3, r0
   1be58:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
   1be5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   1be60:	f170 0200 	sbcs.w	r2, r0, #0
   1be64:	da0a      	bge.n	1be7c <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
   1be66:	2800      	cmp	r0, #0
   1be68:	bfac      	ite	ge
   1be6a:	4618      	movge	r0, r3
   1be6c:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1be6e:	4b06      	ldr	r3, [pc, #24]	; (1be88 <next_timeout+0x48>)
   1be70:	691b      	ldr	r3, [r3, #16]
   1be72:	b113      	cbz	r3, 1be7a <next_timeout+0x3a>
   1be74:	4298      	cmp	r0, r3
   1be76:	bfa8      	it	ge
   1be78:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1be7a:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
   1be7c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1be80:	e7f5      	b.n	1be6e <next_timeout+0x2e>
   1be82:	bf00      	nop
   1be84:	20000cf4 	.word	0x20000cf4
   1be88:	20003f18 	.word	0x20003f18

0001be8c <remove_timeout>:
{
   1be8c:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
   1be8e:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1be90:	b168      	cbz	r0, 1beae <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   1be92:	4a0a      	ldr	r2, [pc, #40]	; (1bebc <remove_timeout+0x30>)
   1be94:	6852      	ldr	r2, [r2, #4]
   1be96:	4290      	cmp	r0, r2
   1be98:	d009      	beq.n	1beae <remove_timeout+0x22>
	if (next(t) != NULL) {
   1be9a:	b143      	cbz	r3, 1beae <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   1be9c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   1bea0:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1bea4:	1912      	adds	r2, r2, r4
   1bea6:	eb41 0105 	adc.w	r1, r1, r5
   1beaa:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   1beae:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   1beb0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1beb2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1beb4:	2300      	movs	r3, #0
	node->prev = NULL;
   1beb6:	e9c0 3300 	strd	r3, r3, [r0]
}
   1beba:	bd30      	pop	{r4, r5, pc}
   1bebc:	20000cf4 	.word	0x20000cf4

0001bec0 <timeout_rem>:
	return ret;
}

/* must be locked */
static k_ticks_t timeout_rem(const struct _timeout *timeout)
{
   1bec0:	b570      	push	{r4, r5, r6, lr}
	k_ticks_t ticks = 0;

	if (z_is_inactive_timeout(timeout)) {
   1bec2:	6804      	ldr	r4, [r0, #0]
   1bec4:	b1e4      	cbz	r4, 1bf00 <timeout_rem+0x40>
	return list->head == list;
   1bec6:	4a10      	ldr	r2, [pc, #64]	; (1bf08 <timeout_rem+0x48>)
   1bec8:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1beca:	4293      	cmp	r3, r2
   1becc:	d015      	beq.n	1befa <timeout_rem+0x3a>
	return (node == list->tail) ? NULL : node->next;
   1bece:	2400      	movs	r4, #0
   1bed0:	6851      	ldr	r1, [r2, #4]
   1bed2:	4625      	mov	r5, r4
		return 0;
	}

	for (struct _timeout *t = first(); t != NULL; t = next(t)) {
   1bed4:	b933      	cbnz	r3, 1bee4 <timeout_rem+0x24>
		if (timeout == t) {
			break;
		}
	}

	return ticks - elapsed();
   1bed6:	f7ff ffa9 	bl	1be2c <elapsed>
   1beda:	4601      	mov	r1, r0
   1bedc:	1a20      	subs	r0, r4, r0
   1bede:	eb65 71e1 	sbc.w	r1, r5, r1, asr #31
}
   1bee2:	bd70      	pop	{r4, r5, r6, pc}
		ticks += t->dticks;
   1bee4:	e9d3 2604 	ldrd	r2, r6, [r3, #16]
   1bee8:	18a4      	adds	r4, r4, r2
   1beea:	eb45 0506 	adc.w	r5, r5, r6
		if (timeout == t) {
   1beee:	4283      	cmp	r3, r0
   1bef0:	d0f1      	beq.n	1bed6 <timeout_rem+0x16>
   1bef2:	428b      	cmp	r3, r1
   1bef4:	d0ef      	beq.n	1bed6 <timeout_rem+0x16>
   1bef6:	681b      	ldr	r3, [r3, #0]
   1bef8:	e7ec      	b.n	1bed4 <timeout_rem+0x14>
   1befa:	2400      	movs	r4, #0
   1befc:	4625      	mov	r5, r4
   1befe:	e7ea      	b.n	1bed6 <timeout_rem+0x16>
		return 0;
   1bf00:	4620      	mov	r0, r4
   1bf02:	4621      	mov	r1, r4
   1bf04:	e7ed      	b.n	1bee2 <timeout_rem+0x22>
   1bf06:	bf00      	nop
   1bf08:	20000cf4 	.word	0x20000cf4

0001bf0c <z_add_timeout>:
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1bf0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1bf10:	bf08      	it	eq
   1bf12:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   1bf16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bf18:	4604      	mov	r4, r0
   1bf1a:	461f      	mov	r7, r3
   1bf1c:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1bf1e:	d067      	beq.n	1bff0 <z_add_timeout+0xe4>
	to->fn = fn;
   1bf20:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   1bf22:	f04f 0320 	mov.w	r3, #32
   1bf26:	f3ef 8611 	mrs	r6, BASEPRI
   1bf2a:	f383 8812 	msr	BASEPRI_MAX, r3
   1bf2e:	f3bf 8f6f 	isb	sy
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   1bf32:	f06f 0201 	mvn.w	r2, #1
   1bf36:	1b53      	subs	r3, r2, r5
   1bf38:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   1bf3c:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   1bf40:	2b00      	cmp	r3, #0
   1bf42:	db1b      	blt.n	1bf7c <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   1bf44:	4b2b      	ldr	r3, [pc, #172]	; (1bff4 <z_add_timeout+0xe8>)
   1bf46:	e9d3 1300 	ldrd	r1, r3, [r3]
   1bf4a:	1a52      	subs	r2, r2, r1
   1bf4c:	eb6c 0303 	sbc.w	r3, ip, r3
   1bf50:	1b55      	subs	r5, r2, r5
			to->dticks = MAX(1, ticks);
   1bf52:	eb63 0307 	sbc.w	r3, r3, r7
   1bf56:	2d01      	cmp	r5, #1
   1bf58:	f173 0200 	sbcs.w	r2, r3, #0
   1bf5c:	bfbc      	itt	lt
   1bf5e:	2501      	movlt	r5, #1
   1bf60:	2300      	movlt	r3, #0
   1bf62:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
   1bf66:	4824      	ldr	r0, [pc, #144]	; (1bff8 <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
   1bf68:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bf6c:	4283      	cmp	r3, r0
   1bf6e:	d118      	bne.n	1bfa2 <z_add_timeout+0x96>
	node->prev = tail;
   1bf70:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
   1bf74:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   1bf78:	6044      	str	r4, [r0, #4]
}
   1bf7a:	e026      	b.n	1bfca <z_add_timeout+0xbe>
			to->dticks = timeout.ticks + 1 + elapsed();
   1bf7c:	f7ff ff56 	bl	1be2c <elapsed>
   1bf80:	3501      	adds	r5, #1
   1bf82:	f147 0700 	adc.w	r7, r7, #0
   1bf86:	182d      	adds	r5, r5, r0
   1bf88:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
   1bf8c:	e9c4 5704 	strd	r5, r7, [r4, #16]
   1bf90:	e7e9      	b.n	1bf66 <z_add_timeout+0x5a>
			to->dticks -= t->dticks;
   1bf92:	1a52      	subs	r2, r2, r1
   1bf94:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
   1bf98:	459c      	cmp	ip, r3
   1bf9a:	e9c4 2504 	strd	r2, r5, [r4, #16]
   1bf9e:	d0e7      	beq.n	1bf70 <z_add_timeout+0x64>
   1bfa0:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   1bfa2:	2b00      	cmp	r3, #0
   1bfa4:	d0e4      	beq.n	1bf70 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
   1bfa6:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
   1bfaa:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
   1bfae:	428a      	cmp	r2, r1
   1bfb0:	eb75 0e07 	sbcs.w	lr, r5, r7
   1bfb4:	daed      	bge.n	1bf92 <z_add_timeout+0x86>
				t->dticks -= to->dticks;
   1bfb6:	1a8a      	subs	r2, r1, r2
   1bfb8:	eb67 0505 	sbc.w	r5, r7, r5
   1bfbc:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   1bfc0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1bfc2:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1bfc6:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1bfc8:	605c      	str	r4, [r3, #4]
	return list->head == list;
   1bfca:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bfcc:	4283      	cmp	r3, r0
   1bfce:	d00b      	beq.n	1bfe8 <z_add_timeout+0xdc>
		if (to == first()) {
   1bfd0:	429c      	cmp	r4, r3
   1bfd2:	d109      	bne.n	1bfe8 <z_add_timeout+0xdc>
			int32_t next_time = next_timeout();
   1bfd4:	f7ff ff34 	bl	1be40 <next_timeout>
			if (next_time == 0 ||
   1bfd8:	b118      	cbz	r0, 1bfe2 <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
   1bfda:	4b08      	ldr	r3, [pc, #32]	; (1bffc <z_add_timeout+0xf0>)
			if (next_time == 0 ||
   1bfdc:	691b      	ldr	r3, [r3, #16]
   1bfde:	4283      	cmp	r3, r0
   1bfe0:	d002      	beq.n	1bfe8 <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
   1bfe2:	2100      	movs	r1, #0
   1bfe4:	f7fd f870 	bl	190c8 <sys_clock_set_timeout>
	__asm__ volatile(
   1bfe8:	f386 8811 	msr	BASEPRI, r6
   1bfec:	f3bf 8f6f 	isb	sy
}
   1bff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bff2:	bf00      	nop
   1bff4:	20002088 	.word	0x20002088
   1bff8:	20000cf4 	.word	0x20000cf4
   1bffc:	20003f18 	.word	0x20003f18

0001c000 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   1c000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c004:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1c006:	f7ff fc53 	bl	1b8b0 <z_time_slice>
	__asm__ volatile(
   1c00a:	f04f 0320 	mov.w	r3, #32
   1c00e:	f3ef 8411 	mrs	r4, BASEPRI
   1c012:	f383 8812 	msr	BASEPRI_MAX, r3
   1c016:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1c01a:	4e24      	ldr	r6, [pc, #144]	; (1c0ac <sys_clock_announce+0xac>)
	return list->head == list;
   1c01c:	f8df 8090 	ldr.w	r8, [pc, #144]	; 1c0b0 <sys_clock_announce+0xb0>
   1c020:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   1c022:	4d24      	ldr	r5, [pc, #144]	; (1c0b4 <sys_clock_announce+0xb4>)
   1c024:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   1c028:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c02a:	4540      	cmp	r0, r8
		curr_tick += dt;
   1c02c:	e9d5 1e00 	ldrd	r1, lr, [r5]
   1c030:	ea4f 77e2 	mov.w	r7, r2, asr #31
   1c034:	d00b      	beq.n	1c04e <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   1c036:	b150      	cbz	r0, 1c04e <sys_clock_announce+0x4e>
   1c038:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
   1c03c:	429a      	cmp	r2, r3
   1c03e:	eb77 090c 	sbcs.w	r9, r7, ip
   1c042:	da16      	bge.n	1c072 <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1c044:	1a9b      	subs	r3, r3, r2
   1c046:	eb6c 0c07 	sbc.w	ip, ip, r7
   1c04a:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
   1c04e:	1852      	adds	r2, r2, r1
   1c050:	eb4e 0707 	adc.w	r7, lr, r7
   1c054:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
   1c058:	2500      	movs	r5, #0
   1c05a:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
   1c05c:	f7ff fef0 	bl	1be40 <next_timeout>
   1c060:	4629      	mov	r1, r5
   1c062:	f7fd f831 	bl	190c8 <sys_clock_set_timeout>
	__asm__ volatile(
   1c066:	f384 8811 	msr	BASEPRI, r4
   1c06a:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1c06e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   1c072:	1859      	adds	r1, r3, r1
   1c074:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
   1c078:	1ad3      	subs	r3, r2, r3
   1c07a:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   1c07c:	2200      	movs	r2, #0
   1c07e:	2300      	movs	r3, #0
   1c080:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
   1c084:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
   1c088:	f7ff ff00 	bl	1be8c <remove_timeout>
   1c08c:	f384 8811 	msr	BASEPRI, r4
   1c090:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1c094:	6883      	ldr	r3, [r0, #8]
   1c096:	4798      	blx	r3
	__asm__ volatile(
   1c098:	f04f 0320 	mov.w	r3, #32
   1c09c:	f3ef 8411 	mrs	r4, BASEPRI
   1c0a0:	f383 8812 	msr	BASEPRI_MAX, r3
   1c0a4:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   1c0a8:	e7bc      	b.n	1c024 <sys_clock_announce+0x24>
   1c0aa:	bf00      	nop
   1c0ac:	20003f54 	.word	0x20003f54
   1c0b0:	20000cf4 	.word	0x20000cf4
   1c0b4:	20002088 	.word	0x20002088

0001c0b8 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   1c0b8:	b510      	push	{r4, lr}
   1c0ba:	f04f 0320 	mov.w	r3, #32
   1c0be:	f3ef 8411 	mrs	r4, BASEPRI
   1c0c2:	f383 8812 	msr	BASEPRI_MAX, r3
   1c0c6:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   1c0ca:	f7fd f82f 	bl	1912c <sys_clock_elapsed>
   1c0ce:	4a05      	ldr	r2, [pc, #20]	; (1c0e4 <sys_clock_tick_get+0x2c>)
   1c0d0:	e9d2 3100 	ldrd	r3, r1, [r2]
   1c0d4:	18c0      	adds	r0, r0, r3
   1c0d6:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
   1c0da:	f384 8811 	msr	BASEPRI, r4
   1c0de:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1c0e2:	bd10      	pop	{r4, pc}
   1c0e4:	20002088 	.word	0x20002088

0001c0e8 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   1c0e8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1c0ec:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   1c0ee:	4b29      	ldr	r3, [pc, #164]	; (1c194 <z_impl_k_poll+0xac>)
   1c0f0:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   1c0f2:	2301      	movs	r3, #1
   1c0f4:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   1c0f8:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   1c0fc:	ea52 0305 	orrs.w	r3, r2, r5
{
   1c100:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   1c102:	bf0c      	ite	eq
   1c104:	2301      	moveq	r3, #1
   1c106:	2300      	movne	r3, #0
   1c108:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   1c10c:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   1c10e:	f009 ffad 	bl	2606c <register_events>
   1c112:	4681      	mov	r9, r0
	__asm__ volatile(
   1c114:	f04f 0320 	mov.w	r3, #32
   1c118:	f3ef 8a11 	mrs	sl, BASEPRI
   1c11c:	f383 8812 	msr	BASEPRI_MAX, r3
   1c120:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   1c124:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   1c128:	b964      	cbnz	r4, 1c144 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   1c12a:	4601      	mov	r1, r0
   1c12c:	4652      	mov	r2, sl
   1c12e:	4640      	mov	r0, r8
   1c130:	f00a f86d 	bl	2620e <clear_event_registrations>
	__asm__ volatile(
   1c134:	f38a 8811 	msr	BASEPRI, sl
   1c138:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   1c13c:	4620      	mov	r0, r4
   1c13e:	b002      	add	sp, #8
   1c140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   1c144:	2300      	movs	r3, #0
   1c146:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1c14a:	ea56 0305 	orrs.w	r3, r6, r5
   1c14e:	d106      	bne.n	1c15e <z_impl_k_poll+0x76>
   1c150:	f38a 8811 	msr	BASEPRI, sl
   1c154:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1c158:	f06f 040a 	mvn.w	r4, #10
   1c15c:	e7ee      	b.n	1c13c <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1c15e:	e9cd 6500 	strd	r6, r5, [sp]
   1c162:	4a0d      	ldr	r2, [pc, #52]	; (1c198 <z_impl_k_poll+0xb0>)
   1c164:	480d      	ldr	r0, [pc, #52]	; (1c19c <z_impl_k_poll+0xb4>)
   1c166:	4651      	mov	r1, sl
   1c168:	f7ff fc74 	bl	1ba54 <z_pend_curr>
   1c16c:	4604      	mov	r4, r0
	__asm__ volatile(
   1c16e:	f04f 0320 	mov.w	r3, #32
   1c172:	f3ef 8511 	mrs	r5, BASEPRI
   1c176:	f383 8812 	msr	BASEPRI_MAX, r3
   1c17a:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   1c17e:	462a      	mov	r2, r5
   1c180:	4649      	mov	r1, r9
   1c182:	4640      	mov	r0, r8
   1c184:	f00a f843 	bl	2620e <clear_event_registrations>
	__asm__ volatile(
   1c188:	f385 8811 	msr	BASEPRI, r5
   1c18c:	f3bf 8f6f 	isb	sy
	return swap_rc;
   1c190:	e7d4      	b.n	1c13c <z_impl_k_poll+0x54>
   1c192:	bf00      	nop
   1c194:	20003f18 	.word	0x20003f18
   1c198:	20000cfc 	.word	0x20000cfc
   1c19c:	2000412f 	.word	0x2000412f

0001c1a0 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   1c1a0:	b538      	push	{r3, r4, r5, lr}
   1c1a2:	4603      	mov	r3, r0
	__asm__ volatile(
   1c1a4:	f04f 0220 	mov.w	r2, #32
   1c1a8:	f3ef 8511 	mrs	r5, BASEPRI
   1c1ac:	f382 8812 	msr	BASEPRI_MAX, r2
   1c1b0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   1c1b4:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   1c1b6:	2101      	movs	r1, #1
   1c1b8:	6081      	str	r1, [r0, #8]
	return list->head == list;
   1c1ba:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1c1bc:	4283      	cmp	r3, r0
   1c1be:	d106      	bne.n	1c1ce <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   1c1c0:	f385 8811 	msr	BASEPRI, r5
   1c1c4:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   1c1c8:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   1c1ca:	4620      	mov	r0, r4
   1c1cc:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   1c1ce:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1c1d2:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1c1d4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1c1d6:	2300      	movs	r3, #0
	node->prev = NULL;
   1c1d8:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1c1dc:	f009 ffbd 	bl	2615a <signal_poll_event>
	z_reschedule(&lock, key);
   1c1e0:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1c1e2:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   1c1e4:	4801      	ldr	r0, [pc, #4]	; (1c1ec <z_impl_k_poll_signal_raise+0x4c>)
   1c1e6:	f7ff fae3 	bl	1b7b0 <z_reschedule>
	return rc;
   1c1ea:	e7ee      	b.n	1c1ca <z_impl_k_poll_signal_raise+0x2a>
   1c1ec:	2000412f 	.word	0x2000412f

0001c1f0 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   1c1f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1c1f2:	4606      	mov	r6, r0
   1c1f4:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   1c1f6:	f009 fb87 	bl	25908 <k_is_in_isr>
   1c1fa:	b978      	cbnz	r0, 1c21c <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   1c1fc:	4b0b      	ldr	r3, [pc, #44]	; (1c22c <z_thread_aligned_alloc+0x3c>)
   1c1fe:	689b      	ldr	r3, [r3, #8]
   1c200:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   1c202:	b17c      	cbz	r4, 1c224 <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   1c204:	1d2a      	adds	r2, r5, #4
   1c206:	d209      	bcs.n	1c21c <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   1c208:	2000      	movs	r0, #0
   1c20a:	2100      	movs	r1, #0
   1c20c:	e9cd 0100 	strd	r0, r1, [sp]
   1c210:	f046 0104 	orr.w	r1, r6, #4
   1c214:	4620      	mov	r0, r4
   1c216:	f009 faf0 	bl	257fa <k_heap_aligned_alloc>
	if (mem == NULL) {
   1c21a:	b908      	cbnz	r0, 1c220 <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   1c21c:	2400      	movs	r4, #0
	}

	return ret;
   1c21e:	e001      	b.n	1c224 <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
   1c220:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   1c222:	1d04      	adds	r4, r0, #4
}
   1c224:	4620      	mov	r0, r4
   1c226:	b002      	add	sp, #8
   1c228:	bd70      	pop	{r4, r5, r6, pc}
   1c22a:	bf00      	nop
   1c22c:	20003f18 	.word	0x20003f18

0001c230 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   1c230:	4a02      	ldr	r2, [pc, #8]	; (1c23c <boot_banner+0xc>)
   1c232:	4903      	ldr	r1, [pc, #12]	; (1c240 <boot_banner+0x10>)
   1c234:	4803      	ldr	r0, [pc, #12]	; (1c244 <boot_banner+0x14>)
   1c236:	f000 b847 	b.w	1c2c8 <printk>
   1c23a:	bf00      	nop
   1c23c:	0002763b 	.word	0x0002763b
   1c240:	000282dc 	.word	0x000282dc
   1c244:	000282ea 	.word	0x000282ea

0001c248 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   1c248:	4770      	bx	lr

0001c24a <attention_off>:
	board_led_set(false);
   1c24a:	2000      	movs	r0, #0
   1c24c:	f7e6 bf04 	b.w	3058 <board_led_set>

0001c250 <attention_on>:
	board_led_set(true);
   1c250:	2001      	movs	r0, #1
   1c252:	f7e6 bf01 	b.w	3058 <board_led_set>

0001c256 <button_pressed>:
{
   1c256:	b508      	push	{r3, lr}
	if (bt_mesh_is_provisioned()) {
   1c258:	f7ed fe9e 	bl	9f98 <bt_mesh_is_provisioned>
   1c25c:	b120      	cbz	r0, 1c268 <button_pressed+0x12>
}
   1c25e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		(void)gen_onoff_send(2);
   1c262:	2002      	movs	r0, #2
   1c264:	f7e6 bde8 	b.w	2e38 <gen_onoff_send.isra.0>
}
   1c268:	bd08      	pop	{r3, pc}

0001c26a <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   1c26a:	4603      	mov	r3, r0
   1c26c:	b140      	cbz	r0, 1c280 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1c26e:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1c270:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   1c274:	2a02      	cmp	r2, #2
   1c276:	d006      	beq.n	1c286 <sys_notify_validate+0x1c>
   1c278:	2a03      	cmp	r2, #3
   1c27a:	d004      	beq.n	1c286 <sys_notify_validate+0x1c>
   1c27c:	2a01      	cmp	r2, #1
   1c27e:	d005      	beq.n	1c28c <sys_notify_validate+0x22>
		return -EINVAL;
   1c280:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   1c284:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   1c286:	681a      	ldr	r2, [r3, #0]
   1c288:	2a00      	cmp	r2, #0
   1c28a:	d0f9      	beq.n	1c280 <sys_notify_validate+0x16>
		notify->result = 0;
   1c28c:	2000      	movs	r0, #0
   1c28e:	6098      	str	r0, [r3, #8]
   1c290:	4770      	bx	lr

0001c292 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1c292:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1c294:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   1c298:	2a02      	cmp	r2, #2
{
   1c29a:	b510      	push	{r4, lr}
   1c29c:	4603      	mov	r3, r0
	notify->result = res;
   1c29e:	6081      	str	r1, [r0, #8]
	switch (method) {
   1c2a0:	d00a      	beq.n	1c2b8 <sys_notify_finalize+0x26>
   1c2a2:	2a03      	cmp	r2, #3
   1c2a4:	d10b      	bne.n	1c2be <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   1c2a6:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   1c2a8:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1c2aa:	2200      	movs	r2, #0
   1c2ac:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   1c2ae:	b108      	cbz	r0, 1c2b4 <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(sig, result);
   1c2b0:	f7ff ff76 	bl	1c1a0 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   1c2b4:	4620      	mov	r0, r4
   1c2b6:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   1c2b8:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   1c2ba:	2400      	movs	r4, #0
		break;
   1c2bc:	e7f5      	b.n	1c2aa <sys_notify_finalize+0x18>
	switch (method) {
   1c2be:	2400      	movs	r4, #0
   1c2c0:	4620      	mov	r0, r4
   1c2c2:	e7f2      	b.n	1c2aa <sys_notify_finalize+0x18>

0001c2c4 <arch_printk_char_out>:
}
   1c2c4:	2000      	movs	r0, #0
   1c2c6:	4770      	bx	lr

0001c2c8 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
   1c2c8:	b40f      	push	{r0, r1, r2, r3}
   1c2ca:	b507      	push	{r0, r1, r2, lr}
   1c2cc:	a904      	add	r1, sp, #16
   1c2ce:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   1c2d2:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   1c2d4:	f7e6 fee0 	bl	3098 <vprintk>

	va_end(ap);
}
   1c2d8:	b003      	add	sp, #12
   1c2da:	f85d eb04 	ldr.w	lr, [sp], #4
   1c2de:	b004      	add	sp, #16
   1c2e0:	4770      	bx	lr

0001c2e2 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c2e2:	b510      	push	{r4, lr}
   1c2e4:	4603      	mov	r3, r0
	return list->head;
   1c2e6:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c2e8:	2200      	movs	r2, #0
   1c2ea:	b158      	cbz	r0, 1c304 <sys_slist_find_and_remove+0x22>
   1c2ec:	4288      	cmp	r0, r1
   1c2ee:	d10f      	bne.n	1c310 <sys_slist_find_and_remove+0x2e>
	return node->next;
   1c2f0:	6808      	ldr	r0, [r1, #0]
	return list->tail;
   1c2f2:	685c      	ldr	r4, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1c2f4:	b93a      	cbnz	r2, 1c306 <sys_slist_find_and_remove+0x24>
   1c2f6:	42a1      	cmp	r1, r4
	list->head = node;
   1c2f8:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   1c2fa:	d100      	bne.n	1c2fe <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   1c2fc:	6058      	str	r0, [r3, #4]
	parent->next = child;
   1c2fe:	2300      	movs	r3, #0
   1c300:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c302:	2001      	movs	r0, #1
   1c304:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   1c306:	42a1      	cmp	r1, r4
	parent->next = child;
   1c308:	6010      	str	r0, [r2, #0]
	list->tail = node;
   1c30a:	bf08      	it	eq
   1c30c:	605a      	streq	r2, [r3, #4]
}
   1c30e:	e7f6      	b.n	1c2fe <sys_slist_find_and_remove+0x1c>
	return node->next;
   1c310:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c312:	6800      	ldr	r0, [r0, #0]
   1c314:	e7e9      	b.n	1c2ea <sys_slist_find_and_remove+0x8>

0001c316 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1c316:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   1c318:	f013 0307 	ands.w	r3, r3, #7
   1c31c:	d105      	bne.n	1c32a <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   1c31e:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   1c320:	2b00      	cmp	r3, #0
   1c322:	bf0c      	ite	eq
   1c324:	2000      	moveq	r0, #0
   1c326:	2003      	movne	r0, #3
   1c328:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1c32a:	2b02      	cmp	r3, #2
   1c32c:	d105      	bne.n	1c33a <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   1c32e:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
   1c330:	2b00      	cmp	r3, #0
   1c332:	bf14      	ite	ne
   1c334:	2000      	movne	r0, #0
   1c336:	2004      	moveq	r0, #4
   1c338:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   1c33a:	2b01      	cmp	r3, #1
   1c33c:	d105      	bne.n	1c34a <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   1c33e:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   1c340:	2b00      	cmp	r3, #0
   1c342:	bf0c      	ite	eq
   1c344:	2000      	moveq	r0, #0
   1c346:	2005      	movne	r0, #5
   1c348:	4770      	bx	lr
	int evt = EVT_NOP;
   1c34a:	2000      	movs	r0, #0
}
   1c34c:	4770      	bx	lr

0001c34e <notify_one>:
{
   1c34e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c352:	460d      	mov	r5, r1
   1c354:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1c356:	4619      	mov	r1, r3
   1c358:	1d28      	adds	r0, r5, #4
{
   1c35a:	4690      	mov	r8, r2
   1c35c:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1c35e:	f7ff ff98 	bl	1c292 <sys_notify_finalize>
	if (cb) {
   1c362:	4604      	mov	r4, r0
   1c364:	b138      	cbz	r0, 1c376 <notify_one+0x28>
		cb(mgr, cli, state, res);
   1c366:	4633      	mov	r3, r6
   1c368:	4642      	mov	r2, r8
   1c36a:	4629      	mov	r1, r5
   1c36c:	4638      	mov	r0, r7
   1c36e:	46a4      	mov	ip, r4
}
   1c370:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   1c374:	4760      	bx	ip
}
   1c376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001c37a <transition_complete>:
{
   1c37a:	b410      	push	{r4}
	__asm__ volatile(
   1c37c:	f04f 0420 	mov.w	r4, #32
   1c380:	f3ef 8211 	mrs	r2, BASEPRI
   1c384:	f384 8812 	msr	BASEPRI_MAX, r4
   1c388:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   1c38c:	6141      	str	r1, [r0, #20]
}
   1c38e:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   1c390:	2101      	movs	r1, #1
   1c392:	f7e6 be8f 	b.w	30b4 <process_event>

0001c396 <validate_args>:
{
   1c396:	b510      	push	{r4, lr}
   1c398:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1c39a:	b140      	cbz	r0, 1c3ae <validate_args+0x18>
   1c39c:	b139      	cbz	r1, 1c3ae <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   1c39e:	1d08      	adds	r0, r1, #4
   1c3a0:	f7ff ff63 	bl	1c26a <sys_notify_validate>
	if ((rv == 0)
   1c3a4:	b928      	cbnz	r0, 1c3b2 <validate_args+0x1c>
	    && ((cli->notify.flags
   1c3a6:	68a3      	ldr	r3, [r4, #8]
   1c3a8:	f033 0303 	bics.w	r3, r3, #3
   1c3ac:	d001      	beq.n	1c3b2 <validate_args+0x1c>
		rv = -EINVAL;
   1c3ae:	f06f 0015 	mvn.w	r0, #21
}
   1c3b2:	bd10      	pop	{r4, pc}

0001c3b4 <onoff_manager_init>:
{
   1c3b4:	b538      	push	{r3, r4, r5, lr}
   1c3b6:	460c      	mov	r4, r1
	if ((mgr == NULL)
   1c3b8:	4605      	mov	r5, r0
   1c3ba:	b158      	cbz	r0, 1c3d4 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   1c3bc:	b151      	cbz	r1, 1c3d4 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   1c3be:	680b      	ldr	r3, [r1, #0]
   1c3c0:	b143      	cbz	r3, 1c3d4 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   1c3c2:	684b      	ldr	r3, [r1, #4]
   1c3c4:	b133      	cbz	r3, 1c3d4 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1c3c6:	221c      	movs	r2, #28
   1c3c8:	2100      	movs	r1, #0
   1c3ca:	f001 fe3d 	bl	1e048 <memset>
   1c3ce:	612c      	str	r4, [r5, #16]
	return 0;
   1c3d0:	2000      	movs	r0, #0
}
   1c3d2:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1c3d4:	f06f 0015 	mvn.w	r0, #21
   1c3d8:	e7fb      	b.n	1c3d2 <onoff_manager_init+0x1e>

0001c3da <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   1c3da:	b570      	push	{r4, r5, r6, lr}
   1c3dc:	4604      	mov	r4, r0
   1c3de:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   1c3e0:	f7ff ffd9 	bl	1c396 <validate_args>

	if (rv < 0) {
   1c3e4:	1e05      	subs	r5, r0, #0
   1c3e6:	db31      	blt.n	1c44c <onoff_request+0x72>
   1c3e8:	f04f 0320 	mov.w	r3, #32
   1c3ec:	f3ef 8111 	mrs	r1, BASEPRI
   1c3f0:	f383 8812 	msr	BASEPRI_MAX, r3
   1c3f4:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   1c3f8:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1c3fa:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   1c3fc:	f64f 75ff 	movw	r5, #65535	; 0xffff
   1c400:	42ab      	cmp	r3, r5
   1c402:	f000 0207 	and.w	r2, r0, #7
   1c406:	d02e      	beq.n	1c466 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   1c408:	2a02      	cmp	r2, #2
   1c40a:	d10e      	bne.n	1c42a <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   1c40c:	3301      	adds	r3, #1
   1c40e:	8363      	strh	r3, [r4, #26]
	rv = state;
   1c410:	4615      	mov	r5, r2
		notify = true;
   1c412:	2301      	movs	r3, #1
	__asm__ volatile(
   1c414:	f381 8811 	msr	BASEPRI, r1
   1c418:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   1c41c:	b1b3      	cbz	r3, 1c44c <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   1c41e:	2300      	movs	r3, #0
   1c420:	4631      	mov	r1, r6
   1c422:	4620      	mov	r0, r4
   1c424:	f7ff ff93 	bl	1c34e <notify_one>
   1c428:	e010      	b.n	1c44c <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   1c42a:	0783      	lsls	r3, r0, #30
   1c42c:	d001      	beq.n	1c432 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   1c42e:	2a06      	cmp	r2, #6
   1c430:	d10e      	bne.n	1c450 <onoff_request+0x76>
	parent->next = child;
   1c432:	2300      	movs	r3, #0
   1c434:	6033      	str	r3, [r6, #0]
	return list->tail;
   1c436:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   1c438:	b993      	cbnz	r3, 1c460 <onoff_request+0x86>
	list->head = node;
   1c43a:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   1c43e:	4615      	mov	r5, r2
   1c440:	b962      	cbnz	r2, 1c45c <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   1c442:	460a      	mov	r2, r1
   1c444:	4620      	mov	r0, r4
   1c446:	2102      	movs	r1, #2
   1c448:	f7e6 fe34 	bl	30b4 <process_event>
		}
	}

	return rv;
}
   1c44c:	4628      	mov	r0, r5
   1c44e:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   1c450:	2a05      	cmp	r2, #5
   1c452:	bf0c      	ite	eq
   1c454:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   1c458:	f06f 0504 	mvnne.w	r5, #4
   1c45c:	2300      	movs	r3, #0
   1c45e:	e7d9      	b.n	1c414 <onoff_request+0x3a>
	parent->next = child;
   1c460:	601e      	str	r6, [r3, #0]
	list->tail = node;
   1c462:	6066      	str	r6, [r4, #4]
}
   1c464:	e7eb      	b.n	1c43e <onoff_request+0x64>
		rv = -EAGAIN;
   1c466:	f06f 050a 	mvn.w	r5, #10
   1c46a:	e7f7      	b.n	1c45c <onoff_request+0x82>

0001c46c <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
   1c46c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1c46e:	f04f 0320 	mov.w	r3, #32
   1c472:	f3ef 8211 	mrs	r2, BASEPRI
   1c476:	f383 8812 	msr	BASEPRI_MAX, r3
   1c47a:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1c47e:	8b04      	ldrh	r4, [r0, #24]
   1c480:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
   1c484:	2c02      	cmp	r4, #2
   1c486:	d00a      	beq.n	1c49e <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
   1c488:	2c01      	cmp	r4, #1
   1c48a:	bf0c      	ite	eq
   1c48c:	f06f 0004 	mvneq.w	r0, #4
   1c490:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
   1c494:	f382 8811 	msr	BASEPRI, r2
   1c498:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
   1c49c:	e008      	b.n	1c4b0 <onoff_release+0x44>
	mgr->refs -= 1U;
   1c49e:	8b43      	ldrh	r3, [r0, #26]
   1c4a0:	3b01      	subs	r3, #1
   1c4a2:	b29b      	uxth	r3, r3
   1c4a4:	8343      	strh	r3, [r0, #26]
	if (stop) {
   1c4a6:	b923      	cbnz	r3, 1c4b2 <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
   1c4a8:	4621      	mov	r1, r4
   1c4aa:	f7e6 fe03 	bl	30b4 <process_event>
	int rv = state;
   1c4ae:	4620      	mov	r0, r4
}
   1c4b0:	bd10      	pop	{r4, pc}
	int rv = state;
   1c4b2:	4620      	mov	r0, r4
   1c4b4:	e7ee      	b.n	1c494 <onoff_release+0x28>

0001c4b6 <onoff_cancel>:
	return rv;
}

int onoff_cancel(struct onoff_manager *mgr,
		 struct onoff_client *cli)
{
   1c4b6:	b538      	push	{r3, r4, r5, lr}
	if ((mgr == NULL) || (cli == NULL)) {
   1c4b8:	b1b0      	cbz	r0, 1c4e8 <onoff_cancel+0x32>
   1c4ba:	b1a9      	cbz	r1, 1c4e8 <onoff_cancel+0x32>
	__asm__ volatile(
   1c4bc:	f04f 0220 	mov.w	r2, #32
   1c4c0:	f3ef 8511 	mrs	r5, BASEPRI
   1c4c4:	f382 8812 	msr	BASEPRI_MAX, r2
   1c4c8:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	int rv = -EALREADY;
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1c4cc:	8b04      	ldrh	r4, [r0, #24]

	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
   1c4ce:	f7ff ff08 	bl	1c2e2 <sys_slist_find_and_remove>
   1c4d2:	b130      	cbz	r0, 1c4e2 <onoff_cancel+0x2c>
		__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)
				|| (state == ONOFF_STATE_TO_OFF)
				|| (state == ONOFF_STATE_RESETTING));
		rv = state;
   1c4d4:	f004 0007 	and.w	r0, r4, #7
	__asm__ volatile(
   1c4d8:	f385 8811 	msr	BASEPRI, r5
   1c4dc:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&mgr->lock, key);

	return rv;
}
   1c4e0:	bd38      	pop	{r3, r4, r5, pc}
	int rv = -EALREADY;
   1c4e2:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1c4e6:	e7f7      	b.n	1c4d8 <onoff_cancel+0x22>
		return -EINVAL;
   1c4e8:	f06f 0015 	mvn.w	r0, #21
   1c4ec:	e7f8      	b.n	1c4e0 <onoff_cancel+0x2a>

0001c4ee <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1c4ee:	4604      	mov	r4, r0
   1c4f0:	b508      	push	{r3, lr}
   1c4f2:	4608      	mov	r0, r1
   1c4f4:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   1c4f6:	461a      	mov	r2, r3
   1c4f8:	47a0      	blx	r4
	return z_impl_z_current_get();
   1c4fa:	f7ff fc03 	bl	1bd04 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   1c4fe:	f7e9 fb07 	bl	5b10 <z_impl_k_thread_abort>

0001c502 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   1c502:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   1c506:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   1c508:	0840      	lsrs	r0, r0, #1
   1c50a:	4770      	bx	lr

0001c50c <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   1c50c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c50e:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   1c510:	f7ff fff7 	bl	1c502 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   1c514:	fab0 f080 	clz	r0, r0
   1c518:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   1c51c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   1c520:	00ca      	lsls	r2, r1, #3
   1c522:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   1c526:	1d17      	adds	r7, r2, #4
{
   1c528:	460c      	mov	r4, r1
   1c52a:	3206      	adds	r2, #6
   1c52c:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   1c52e:	b956      	cbnz	r6, 1c546 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   1c530:	2101      	movs	r1, #1
   1c532:	fa01 f000 	lsl.w	r0, r1, r0
   1c536:	68d9      	ldr	r1, [r3, #12]
   1c538:	4301      	orrs	r1, r0
   1c53a:	60d9      	str	r1, [r3, #12]
		b->next = c;
   1c53c:	f8cc 4010 	str.w	r4, [ip, #16]
   1c540:	53dd      	strh	r5, [r3, r7]
   1c542:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   1c544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   1c546:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   1c548:	3104      	adds	r1, #4
   1c54a:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   1c54c:	53d8      	strh	r0, [r3, r7]
   1c54e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1c552:	529e      	strh	r6, [r3, r2]
   1c554:	80c5      	strh	r5, [r0, #6]
   1c556:	525d      	strh	r5, [r3, r1]
   1c558:	e7f4      	b.n	1c544 <free_list_add+0x38>

0001c55a <free_list_remove_bidx>:
{
   1c55a:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   1c55c:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   1c560:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   1c562:	4299      	cmp	r1, r3
   1c564:	f102 0104 	add.w	r1, r2, #4
   1c568:	d10a      	bne.n	1c580 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   1c56a:	2301      	movs	r3, #1
   1c56c:	fa03 f202 	lsl.w	r2, r3, r2
   1c570:	68c3      	ldr	r3, [r0, #12]
   1c572:	ea23 0302 	bic.w	r3, r3, r2
   1c576:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   1c578:	2300      	movs	r3, #0
   1c57a:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   1c57e:	bd10      	pop	{r4, pc}
   1c580:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   1c582:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   1c586:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   1c58a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   1c58e:	80cb      	strh	r3, [r1, #6]
   1c590:	8082      	strh	r2, [r0, #4]
}
   1c592:	e7f4      	b.n	1c57e <free_list_remove_bidx+0x24>

0001c594 <free_list_remove>:
{
   1c594:	b508      	push	{r3, lr}
   1c596:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   1c598:	f7ff ffb3 	bl	1c502 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   1c59c:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   1c5a0:	f1c2 021f 	rsb	r2, r2, #31
   1c5a4:	4618      	mov	r0, r3
}
   1c5a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   1c5aa:	f7ff bfd6 	b.w	1c55a <free_list_remove_bidx>

0001c5ae <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   1c5ae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c5b2:	fab1 f581 	clz	r5, r1
   1c5b6:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   1c5ba:	eb00 0789 	add.w	r7, r0, r9, lsl #2
{
   1c5be:	4603      	mov	r3, r0
	if (b->next) {
   1c5c0:	693a      	ldr	r2, [r7, #16]
{
   1c5c2:	460e      	mov	r6, r1
	if (b->next) {
   1c5c4:	b1c2      	cbz	r2, 1c5f8 <alloc_chunk+0x4a>
   1c5c6:	f04f 0803 	mov.w	r8, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   1c5ca:	693c      	ldr	r4, [r7, #16]
			if (chunk_size(h, c) >= sz) {
   1c5cc:	4618      	mov	r0, r3
   1c5ce:	4621      	mov	r1, r4
   1c5d0:	f7ff ff97 	bl	1c502 <chunk_size>
   1c5d4:	42b0      	cmp	r0, r6
   1c5d6:	d306      	bcc.n	1c5e6 <alloc_chunk+0x38>
				free_list_remove_bidx(h, c, bi);
   1c5d8:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   1c5da:	4618      	mov	r0, r3
   1c5dc:	f7ff ffbd 	bl	1c55a <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   1c5e0:	4620      	mov	r0, r4
   1c5e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   1c5e6:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
		} while (--i && b->next != first);
   1c5ea:	f1b8 0801 	subs.w	r8, r8, #1
   1c5ee:	88c0      	ldrh	r0, [r0, #6]
			b->next = next_free_chunk(h, c);
   1c5f0:	6138      	str	r0, [r7, #16]
		} while (--i && b->next != first);
   1c5f2:	d001      	beq.n	1c5f8 <alloc_chunk+0x4a>
   1c5f4:	4282      	cmp	r2, r0
   1c5f6:	d1e8      	bne.n	1c5ca <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   1c5f8:	f1c5 0220 	rsb	r2, r5, #32
   1c5fc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1c600:	4094      	lsls	r4, r2
   1c602:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   1c604:	4014      	ands	r4, r2
   1c606:	d0eb      	beq.n	1c5e0 <alloc_chunk+0x32>
		int minbucket = __builtin_ctz(bmask);
   1c608:	fa94 f2a4 	rbit	r2, r4
   1c60c:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1c610:	1d11      	adds	r1, r2, #4
   1c612:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   1c616:	4621      	mov	r1, r4
   1c618:	e7df      	b.n	1c5da <alloc_chunk+0x2c>

0001c61a <merge_chunks>:
{
   1c61a:	b538      	push	{r3, r4, r5, lr}
   1c61c:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1c61e:	f7ff ff70 	bl	1c502 <chunk_size>
{
   1c622:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1c624:	4604      	mov	r4, r0
   1c626:	4611      	mov	r1, r2
   1c628:	4618      	mov	r0, r3
   1c62a:	f7ff ff6a 	bl	1c502 <chunk_size>
		((uint16_t *)cmem)[f] = val;
   1c62e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   1c632:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1c634:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   1c636:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   1c638:	4618      	mov	r0, r3
   1c63a:	f7ff ff62 	bl	1c502 <chunk_size>
	void *cmem = &buf[c];
   1c63e:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   1c640:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   1c644:	bd38      	pop	{r3, r4, r5, pc}

0001c646 <split_chunks>:
{
   1c646:	b538      	push	{r3, r4, r5, lr}
   1c648:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   1c64a:	f7ff ff5a 	bl	1c502 <chunk_size>
{
   1c64e:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   1c650:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   1c652:	1a51      	subs	r1, r2, r1
   1c654:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   1c658:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1c65a:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   1c65c:	8060      	strh	r0, [r4, #2]
   1c65e:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1c662:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   1c664:	8044      	strh	r4, [r0, #2]
   1c666:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   1c66a:	4618      	mov	r0, r3
   1c66c:	4611      	mov	r1, r2
   1c66e:	f7ff ff48 	bl	1c502 <chunk_size>
	void *cmem = &buf[c];
   1c672:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   1c674:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   1c678:	bd38      	pop	{r3, r4, r5, pc}

0001c67a <free_chunk>:
{
   1c67a:	b538      	push	{r3, r4, r5, lr}
   1c67c:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   1c67e:	f7ff ff40 	bl	1c502 <chunk_size>
   1c682:	460c      	mov	r4, r1
   1c684:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   1c686:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1c68a:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   1c68c:	07da      	lsls	r2, r3, #31
   1c68e:	d40a      	bmi.n	1c6a6 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   1c690:	4628      	mov	r0, r5
   1c692:	f7ff ff7f 	bl	1c594 <free_list_remove>
	return c + chunk_size(h, c);
   1c696:	4621      	mov	r1, r4
   1c698:	4628      	mov	r0, r5
   1c69a:	f7ff ff32 	bl	1c502 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   1c69e:	1822      	adds	r2, r4, r0
   1c6a0:	4628      	mov	r0, r5
   1c6a2:	f7ff ffba 	bl	1c61a <merge_chunks>
		return ((uint16_t *)cmem)[f];
   1c6a6:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   1c6aa:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   1c6ac:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1c6b0:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   1c6b2:	07db      	lsls	r3, r3, #31
   1c6b4:	d40c      	bmi.n	1c6d0 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   1c6b6:	4628      	mov	r0, r5
   1c6b8:	f7ff ff6c 	bl	1c594 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   1c6bc:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   1c6c0:	4622      	mov	r2, r4
   1c6c2:	1a61      	subs	r1, r4, r1
   1c6c4:	4628      	mov	r0, r5
   1c6c6:	f7ff ffa8 	bl	1c61a <merge_chunks>
   1c6ca:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   1c6ce:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   1c6d0:	4621      	mov	r1, r4
   1c6d2:	4628      	mov	r0, r5
}
   1c6d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   1c6d8:	f7ff bf18 	b.w	1c50c <free_list_add>

0001c6dc <sys_heap_free>:
	if (mem == NULL) {
   1c6dc:	b161      	cbz	r1, 1c6f8 <sys_heap_free+0x1c>
   1c6de:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1c6e0:	3904      	subs	r1, #4
   1c6e2:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   1c6e4:	f021 0307 	bic.w	r3, r1, #7
   1c6e8:	4403      	add	r3, r0
	free_chunk(h, c);
   1c6ea:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1c6ec:	885a      	ldrh	r2, [r3, #2]
   1c6ee:	f022 0201 	bic.w	r2, r2, #1
   1c6f2:	805a      	strh	r2, [r3, #2]
   1c6f4:	f7ff bfc1 	b.w	1c67a <free_chunk>
}
   1c6f8:	4770      	bx	lr

0001c6fa <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   1c6fa:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   1c6fc:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   1c6fe:	b909      	cbnz	r1, 1c704 <sys_heap_alloc+0xa>
		return NULL;
   1c700:	2000      	movs	r0, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   1c702:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   1c704:	68ab      	ldr	r3, [r5, #8]
   1c706:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   1c70a:	d9f9      	bls.n	1c700 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1c70c:	310b      	adds	r1, #11
   1c70e:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1c710:	4621      	mov	r1, r4
   1c712:	4628      	mov	r0, r5
   1c714:	f7ff ff4b 	bl	1c5ae <alloc_chunk>
	if (c == 0U) {
   1c718:	4606      	mov	r6, r0
   1c71a:	2800      	cmp	r0, #0
   1c71c:	d0f0      	beq.n	1c700 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   1c71e:	4601      	mov	r1, r0
   1c720:	4628      	mov	r0, r5
   1c722:	f7ff feee 	bl	1c502 <chunk_size>
   1c726:	42a0      	cmp	r0, r4
   1c728:	d907      	bls.n	1c73a <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   1c72a:	1932      	adds	r2, r6, r4
   1c72c:	4628      	mov	r0, r5
   1c72e:	f7ff ff8a 	bl	1c646 <split_chunks>
		free_list_add(h, c + chunk_sz);
   1c732:	4611      	mov	r1, r2
   1c734:	4628      	mov	r0, r5
   1c736:	f7ff fee9 	bl	1c50c <free_list_add>
	void *cmem = &buf[c];
   1c73a:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1c73e:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1c740:	8853      	ldrh	r3, [r2, #2]
   1c742:	f043 0301 	orr.w	r3, r3, #1
   1c746:	8053      	strh	r3, [r2, #2]
   1c748:	3004      	adds	r0, #4
	return mem;
   1c74a:	e7da      	b.n	1c702 <sys_heap_alloc+0x8>

0001c74c <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   1c74c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c750:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   1c752:	424a      	negs	r2, r1
   1c754:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
   1c758:	ea31 0202 	bics.w	r2, r1, r2
{
   1c75c:	4603      	mov	r3, r0
	if (align != rew) {
   1c75e:	d00a      	beq.n	1c776 <sys_heap_aligned_alloc+0x2a>
		return false;
   1c760:	2f04      	cmp	r7, #4
   1c762:	463a      	mov	r2, r7
   1c764:	46b9      	mov	r9, r7
   1c766:	bf28      	it	cs
   1c768:	2204      	movcs	r2, #4
		align -= rew;
   1c76a:	1bcf      	subs	r7, r1, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   1c76c:	b974      	cbnz	r4, 1c78c <sys_heap_aligned_alloc+0x40>
		return NULL;
   1c76e:	2500      	movs	r5, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   1c770:	4628      	mov	r0, r5
   1c772:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   1c776:	2904      	cmp	r1, #4
   1c778:	d804      	bhi.n	1c784 <sys_heap_aligned_alloc+0x38>
			return sys_heap_alloc(heap, bytes);
   1c77a:	4621      	mov	r1, r4
}
   1c77c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   1c780:	f7ff bfbb 	b.w	1c6fa <sys_heap_alloc>
		rew = 0;
   1c784:	f04f 0900 	mov.w	r9, #0
		gap = chunk_header_bytes(h);
   1c788:	2204      	movs	r2, #4
   1c78a:	e7ef      	b.n	1c76c <sys_heap_aligned_alloc+0x20>
	struct z_heap *h = heap->heap;
   1c78c:	681e      	ldr	r6, [r3, #0]
	if (bytes == 0 || size_too_big(h, bytes)) {
   1c78e:	68b3      	ldr	r3, [r6, #8]
   1c790:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   1c794:	d9eb      	bls.n	1c76e <sys_heap_aligned_alloc+0x22>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1c796:	f104 010b 	add.w	r1, r4, #11
   1c79a:	4439      	add	r1, r7
   1c79c:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   1c79e:	08c9      	lsrs	r1, r1, #3
   1c7a0:	4630      	mov	r0, r6
   1c7a2:	f7ff ff04 	bl	1c5ae <alloc_chunk>
	if (c0 == 0) {
   1c7a6:	4680      	mov	r8, r0
   1c7a8:	2800      	cmp	r0, #0
   1c7aa:	d0e0      	beq.n	1c76e <sys_heap_aligned_alloc+0x22>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   1c7ac:	f109 0504 	add.w	r5, r9, #4
   1c7b0:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   1c7b4:	1e7b      	subs	r3, r7, #1
   1c7b6:	4435      	add	r5, r6
   1c7b8:	441d      	add	r5, r3
   1c7ba:	427f      	negs	r7, r7
   1c7bc:	403d      	ands	r5, r7
   1c7be:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1c7c2:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1c7c4:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1c7c6:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1c7c8:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1c7ca:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   1c7ce:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   1c7d0:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1c7d4:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   1c7d8:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   1c7dc:	d208      	bcs.n	1c7f0 <sys_heap_aligned_alloc+0xa4>
		split_chunks(h, c0, c);
   1c7de:	4601      	mov	r1, r0
   1c7e0:	463a      	mov	r2, r7
   1c7e2:	4630      	mov	r0, r6
   1c7e4:	f7ff ff2f 	bl	1c646 <split_chunks>
		free_list_add(h, c0);
   1c7e8:	4641      	mov	r1, r8
   1c7ea:	4630      	mov	r0, r6
   1c7ec:	f7ff fe8e 	bl	1c50c <free_list_add>
	return c + chunk_size(h, c);
   1c7f0:	4639      	mov	r1, r7
   1c7f2:	4630      	mov	r0, r6
   1c7f4:	f7ff fe85 	bl	1c502 <chunk_size>
   1c7f8:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   1c7fa:	4284      	cmp	r4, r0
   1c7fc:	d207      	bcs.n	1c80e <sys_heap_aligned_alloc+0xc2>
		split_chunks(h, c, c_end);
   1c7fe:	4630      	mov	r0, r6
   1c800:	4622      	mov	r2, r4
   1c802:	f7ff ff20 	bl	1c646 <split_chunks>
		free_list_add(h, c_end);
   1c806:	4621      	mov	r1, r4
   1c808:	4630      	mov	r0, r6
   1c80a:	f7ff fe7f 	bl	1c50c <free_list_add>
	void *cmem = &buf[c];
   1c80e:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1c812:	8873      	ldrh	r3, [r6, #2]
   1c814:	f043 0301 	orr.w	r3, r3, #1
   1c818:	8073      	strh	r3, [r6, #2]
   1c81a:	e7a9      	b.n	1c770 <sys_heap_aligned_alloc+0x24>

0001c81c <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   1c81c:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1c81e:	1dcb      	adds	r3, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1c820:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1c822:	f023 0307 	bic.w	r3, r3, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1c826:	f021 0107 	bic.w	r1, r1, #7
{
   1c82a:	b4f0      	push	{r4, r5, r6, r7}
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   1c82c:	1acd      	subs	r5, r1, r3
   1c82e:	08ea      	lsrs	r2, r5, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   1c830:	6003      	str	r3, [r0, #0]
	return 31 - __builtin_clz(usable_sz);
   1c832:	fab2 f082 	clz	r0, r2
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   1c836:	f1c0 0424 	rsb	r4, r0, #36	; 0x24
   1c83a:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1c83c:	3407      	adds	r4, #7
	h->avail_buckets = 0;
   1c83e:	2600      	movs	r6, #0
   1c840:	08e1      	lsrs	r1, r4, #3
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1c842:	f1c0 0020 	rsb	r0, r0, #32
   1c846:	f103 0410 	add.w	r4, r3, #16
	h->end_chunk = heap_sz;
   1c84a:	609a      	str	r2, [r3, #8]
	h->avail_buckets = 0;
   1c84c:	60de      	str	r6, [r3, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   1c84e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   1c852:	4284      	cmp	r4, r0
   1c854:	d118      	bne.n	1c888 <sys_heap_init+0x6c>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1c856:	0048      	lsls	r0, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1c858:	f040 0001 	orr.w	r0, r0, #1
   1c85c:	8058      	strh	r0, [r3, #2]
		((uint16_t *)cmem)[f] = val;
   1c85e:	eb03 04c1 	add.w	r4, r3, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1c862:	1a50      	subs	r0, r2, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1c864:	0047      	lsls	r7, r0, #1
		((uint16_t *)cmem)[f] = val;
   1c866:	801e      	strh	r6, [r3, #0]
   1c868:	8067      	strh	r7, [r4, #2]
   1c86a:	195c      	adds	r4, r3, r5
   1c86c:	f823 1031 	strh.w	r1, [r3, r1, lsl #3]
	void *cmem = &buf[c];
   1c870:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
		((uint16_t *)cmem)[f] = val;
   1c874:	8066      	strh	r6, [r4, #2]
   1c876:	5358      	strh	r0, [r3, r5]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1c878:	8850      	ldrh	r0, [r2, #2]
   1c87a:	f040 0001 	orr.w	r0, r0, #1
   1c87e:	8050      	strh	r0, [r2, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   1c880:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   1c882:	4618      	mov	r0, r3
   1c884:	f7ff be42 	b.w	1c50c <free_list_add>
		h->buckets[i].next = 0;
   1c888:	f844 6b04 	str.w	r6, [r4], #4
	for (int i = 0; i < nb_buckets; i++) {
   1c88c:	e7e1      	b.n	1c852 <sys_heap_init+0x36>

0001c88e <_ldiv5>:
	uint32_t v_lo = *v;
   1c88e:	e9d0 2100 	ldrd	r2, r1, [r0]
{
   1c892:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
   1c894:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
   1c898:	fba2 2403 	umull	r2, r4, r2, r3
   1c89c:	18d5      	adds	r5, r2, r3
   1c89e:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
   1c8a2:	fba1 1303 	umull	r1, r3, r1, r3
   1c8a6:	1852      	adds	r2, r2, r1
   1c8a8:	eb44 0403 	adc.w	r4, r4, r3
   1c8ac:	1952      	adds	r2, r2, r5
   1c8ae:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
   1c8b2:	1889      	adds	r1, r1, r2
   1c8b4:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
   1c8b8:	e9c0 1300 	strd	r1, r3, [r0]
}
   1c8bc:	bd30      	pop	{r4, r5, pc}

0001c8be <_get_digit>:
	if (*digit_count > 0) {
   1c8be:	680a      	ldr	r2, [r1, #0]
   1c8c0:	2a00      	cmp	r2, #0
{
   1c8c2:	b510      	push	{r4, lr}
   1c8c4:	4603      	mov	r3, r0
	if (*digit_count > 0) {
   1c8c6:	dd0f      	ble.n	1c8e8 <_get_digit+0x2a>
		--*digit_count;
   1c8c8:	3a01      	subs	r2, #1
   1c8ca:	600a      	str	r2, [r1, #0]
		*fr *= 10U;
   1c8cc:	681a      	ldr	r2, [r3, #0]
   1c8ce:	6844      	ldr	r4, [r0, #4]
   1c8d0:	200a      	movs	r0, #10
   1c8d2:	fba2 1200 	umull	r1, r2, r2, r0
   1c8d6:	fb00 2204 	mla	r2, r0, r4, r2
		rval = ((*fr >> 60) & 0xF) + '0';
   1c8da:	0f10      	lsrs	r0, r2, #28
		*fr &= (BIT64(60) - 1U);
   1c8dc:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
   1c8e0:	e9c3 1200 	strd	r1, r2, [r3]
		rval = ((*fr >> 60) & 0xF) + '0';
   1c8e4:	3030      	adds	r0, #48	; 0x30
}
   1c8e6:	bd10      	pop	{r4, pc}
		rval = '0';
   1c8e8:	2030      	movs	r0, #48	; 0x30
   1c8ea:	e7fc      	b.n	1c8e6 <_get_digit+0x28>

0001c8ec <encode_uint>:
{
   1c8ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c8f0:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   1c8f2:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
   1c8f4:	2b6f      	cmp	r3, #111	; 0x6f
{
   1c8f6:	4680      	mov	r8, r0
   1c8f8:	460f      	mov	r7, r1
   1c8fa:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1c8fc:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   1c900:	d029      	beq.n	1c956 <encode_uint+0x6a>
   1c902:	d824      	bhi.n	1c94e <encode_uint+0x62>
		return 16;
   1c904:	2b58      	cmp	r3, #88	; 0x58
   1c906:	bf14      	ite	ne
   1c908:	260a      	movne	r6, #10
   1c90a:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
   1c90c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   1c910:	4632      	mov	r2, r6
   1c912:	2300      	movs	r3, #0
   1c914:	4640      	mov	r0, r8
   1c916:	4639      	mov	r1, r7
   1c918:	f7e4 fdae 	bl	1478 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1c91c:	2a09      	cmp	r2, #9
   1c91e:	b2d4      	uxtb	r4, r2
   1c920:	d81e      	bhi.n	1c960 <encode_uint+0x74>
   1c922:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   1c924:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1c926:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   1c928:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1c92c:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   1c930:	d301      	bcc.n	1c936 <encode_uint+0x4a>
   1c932:	45d1      	cmp	r9, sl
   1c934:	d811      	bhi.n	1c95a <encode_uint+0x6e>
	if (conv->flag_hash) {
   1c936:	782b      	ldrb	r3, [r5, #0]
   1c938:	069b      	lsls	r3, r3, #26
   1c93a:	d505      	bpl.n	1c948 <encode_uint+0x5c>
		if (radix == 8) {
   1c93c:	2e08      	cmp	r6, #8
   1c93e:	d115      	bne.n	1c96c <encode_uint+0x80>
			conv->altform_0 = true;
   1c940:	78ab      	ldrb	r3, [r5, #2]
   1c942:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   1c946:	70ab      	strb	r3, [r5, #2]
}
   1c948:	4648      	mov	r0, r9
   1c94a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   1c94e:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   1c952:	2b70      	cmp	r3, #112	; 0x70
   1c954:	e7d7      	b.n	1c906 <encode_uint+0x1a>
	switch (specifier) {
   1c956:	2608      	movs	r6, #8
   1c958:	e7d8      	b.n	1c90c <encode_uint+0x20>
		value /= radix;
   1c95a:	4680      	mov	r8, r0
   1c95c:	460f      	mov	r7, r1
   1c95e:	e7d7      	b.n	1c910 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1c960:	f1bb 0f19 	cmp.w	fp, #25
   1c964:	bf94      	ite	ls
   1c966:	3437      	addls	r4, #55	; 0x37
   1c968:	3457      	addhi	r4, #87	; 0x57
   1c96a:	e7db      	b.n	1c924 <encode_uint+0x38>
		} else if (radix == 16) {
   1c96c:	2e10      	cmp	r6, #16
   1c96e:	d1eb      	bne.n	1c948 <encode_uint+0x5c>
			conv->altform_0c = true;
   1c970:	78ab      	ldrb	r3, [r5, #2]
   1c972:	f043 0310 	orr.w	r3, r3, #16
   1c976:	e7e6      	b.n	1c946 <encode_uint+0x5a>

0001c978 <outs>:
{
   1c978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c97c:	4607      	mov	r7, r0
   1c97e:	4688      	mov	r8, r1
   1c980:	4615      	mov	r5, r2
   1c982:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1c984:	4614      	mov	r4, r2
   1c986:	42b4      	cmp	r4, r6
   1c988:	eba4 0005 	sub.w	r0, r4, r5
   1c98c:	d302      	bcc.n	1c994 <outs+0x1c>
   1c98e:	b93e      	cbnz	r6, 1c9a0 <outs+0x28>
   1c990:	7823      	ldrb	r3, [r4, #0]
   1c992:	b12b      	cbz	r3, 1c9a0 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   1c994:	f814 0b01 	ldrb.w	r0, [r4], #1
   1c998:	4641      	mov	r1, r8
   1c99a:	47b8      	blx	r7
		if (rc < 0) {
   1c99c:	2800      	cmp	r0, #0
   1c99e:	daf2      	bge.n	1c986 <outs+0xe>
}
   1c9a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001c9a4 <ring_buf_get_rewind_threshold>:
 * rewinding earlier.
 */
uint32_t __weak ring_buf_get_rewind_threshold(void)
{
	return RING_BUFFER_MAX_SIZE;
}
   1c9a4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   1c9a8:	4770      	bx	lr

0001c9aa <ring_buf_is_empty>:
	 */
	return buf_size * (threshold / buf_size - 1);
}

int ring_buf_is_empty(struct ring_buf *buf)
{
   1c9aa:	b570      	push	{r4, r5, r6, lr}
	uint32_t tail = buf->tail;
	uint32_t head = buf->head;
   1c9ac:	e9d0 5400 	ldrd	r5, r4, [r0]

	if (tail < head) {
   1c9b0:	42ac      	cmp	r4, r5
   1c9b2:	d207      	bcs.n	1c9c4 <ring_buf_is_empty+0x1a>
		tail += get_rewind_value(buf->size,
   1c9b4:	6906      	ldr	r6, [r0, #16]
   1c9b6:	f7ff fff5 	bl	1c9a4 <ring_buf_get_rewind_threshold>
	return buf_size * (threshold / buf_size - 1);
   1c9ba:	fbb0 f0f6 	udiv	r0, r0, r6
   1c9be:	3801      	subs	r0, #1
		tail += get_rewind_value(buf->size,
   1c9c0:	fb06 4400 	mla	r4, r6, r0, r4
					 ring_buf_get_rewind_threshold());
	}

	return (head == tail);
}
   1c9c4:	1b63      	subs	r3, r4, r5
   1c9c6:	4258      	negs	r0, r3
   1c9c8:	4158      	adcs	r0, r3
   1c9ca:	bd70      	pop	{r4, r5, r6, pc}

0001c9cc <ring_buf_put_claim>:

	return 0;
}

uint32_t ring_buf_put_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
   1c9cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t space, trail_size, allocated, tmp_trail_mod;
	uint32_t head = buf->head;
   1c9d0:	6804      	ldr	r4, [r0, #0]
	uint32_t tmp_tail = buf->misc.byte_mode.tmp_tail;
   1c9d2:	f8d0 9008 	ldr.w	r9, [r0, #8]

	if (buf->misc.byte_mode.tmp_tail < head) {
   1c9d6:	454c      	cmp	r4, r9
{
   1c9d8:	4605      	mov	r5, r0
   1c9da:	460e      	mov	r6, r1
   1c9dc:	4690      	mov	r8, r2
	if (buf->misc.byte_mode.tmp_tail < head) {
   1c9de:	d907      	bls.n	1c9f0 <ring_buf_put_claim+0x24>
		/* Head is already rewinded but tail is not */
		tmp_tail += get_rewind_value(buf->size, ring_buf_get_rewind_threshold());
   1c9e0:	6907      	ldr	r7, [r0, #16]
   1c9e2:	f7ff ffdf 	bl	1c9a4 <ring_buf_get_rewind_threshold>
	return buf_size * (threshold / buf_size - 1);
   1c9e6:	fbb0 f0f7 	udiv	r0, r0, r7
   1c9ea:	3801      	subs	r0, #1
		tmp_tail += get_rewind_value(buf->size, ring_buf_get_rewind_threshold());
   1c9ec:	fb07 9900 	mla	r9, r7, r0, r9
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   1c9f0:	69ab      	ldr	r3, [r5, #24]
	}

	tmp_trail_mod = mod(buf, buf->misc.byte_mode.tmp_tail);
   1c9f2:	68a9      	ldr	r1, [r5, #8]
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   1c9f4:	692f      	ldr	r7, [r5, #16]
   1c9f6:	b18b      	cbz	r3, 1ca1c <ring_buf_put_claim+0x50>
   1c9f8:	400b      	ands	r3, r1
	space = (head + buf->size) - tmp_tail;
   1c9fa:	443c      	add	r4, r7
   1c9fc:	eba4 0009 	sub.w	r0, r4, r9
	trail_size = buf->size - tmp_trail_mod;

	/* Limit requested size to available size. */
	size = MIN(size, space);
   1ca00:	4540      	cmp	r0, r8
   1ca02:	bf28      	it	cs
   1ca04:	4640      	movcs	r0, r8
	trail_size = buf->size - tmp_trail_mod;
   1ca06:	1aff      	subs	r7, r7, r3

	trail_size = buf->size - (tmp_trail_mod);

	/* Limit allocated size to trail size. */
	allocated = MIN(trail_size, size);
	*data = &buf->buf.buf8[tmp_trail_mod];
   1ca08:	696a      	ldr	r2, [r5, #20]
	allocated = MIN(trail_size, size);
   1ca0a:	42b8      	cmp	r0, r7
   1ca0c:	bf28      	it	cs
   1ca0e:	4638      	movcs	r0, r7
	*data = &buf->buf.buf8[tmp_trail_mod];
   1ca10:	4413      	add	r3, r2

	buf->misc.byte_mode.tmp_tail =
		buf->misc.byte_mode.tmp_tail + allocated;
   1ca12:	4401      	add	r1, r0
	*data = &buf->buf.buf8[tmp_trail_mod];
   1ca14:	6033      	str	r3, [r6, #0]
	buf->misc.byte_mode.tmp_tail =
   1ca16:	60a9      	str	r1, [r5, #8]

	return allocated;
}
   1ca18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   1ca1c:	fbb1 f3f7 	udiv	r3, r1, r7
   1ca20:	fb07 1313 	mls	r3, r7, r3, r1
   1ca24:	e7e9      	b.n	1c9fa <ring_buf_put_claim+0x2e>

0001ca26 <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, uint32_t size)
{
   1ca26:	b570      	push	{r4, r5, r6, lr}
   1ca28:	4605      	mov	r5, r0
   1ca2a:	460c      	mov	r4, r1
	uint32_t rew;
	uint32_t threshold = ring_buf_get_rewind_threshold();
   1ca2c:	f7ff ffba 	bl	1c9a4 <ring_buf_get_rewind_threshold>

	if ((buf->tail + size) > (buf->head + buf->size)) {
   1ca30:	686e      	ldr	r6, [r5, #4]
   1ca32:	692a      	ldr	r2, [r5, #16]
   1ca34:	682b      	ldr	r3, [r5, #0]
   1ca36:	1931      	adds	r1, r6, r4
   1ca38:	4413      	add	r3, r2
   1ca3a:	4299      	cmp	r1, r3
   1ca3c:	d80c      	bhi.n	1ca58 <ring_buf_put_finish+0x32>
		return -EINVAL;
	}

	/* Check if indexes shall be rewind. */
	if (buf->tail > threshold) {
   1ca3e:	4286      	cmp	r6, r0
	return buf_size * (threshold / buf_size - 1);
   1ca40:	bf83      	ittte	hi
   1ca42:	fbb0 f3f2 	udivhi	r3, r0, r2
   1ca46:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   1ca4a:	4353      	mulhi	r3, r2
		rew = get_rewind_value(buf->size, threshold);
	} else {
		rew = 0;
   1ca4c:	2300      	movls	r3, #0
	}

	buf->tail += (size - rew);
   1ca4e:	1acb      	subs	r3, r1, r3
	buf->misc.byte_mode.tmp_tail = buf->tail;
   1ca50:	e9c5 3301 	strd	r3, r3, [r5, #4]

	return 0;
   1ca54:	2000      	movs	r0, #0
}
   1ca56:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   1ca58:	f06f 0015 	mvn.w	r0, #21
   1ca5c:	e7fb      	b.n	1ca56 <ring_buf_put_finish+0x30>

0001ca5e <ring_buf_put>:

uint32_t ring_buf_put(struct ring_buf *buf, const uint8_t *data, uint32_t size)
{
   1ca5e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1ca62:	4680      	mov	r8, r0
   1ca64:	460e      	mov	r6, r1
   1ca66:	4615      	mov	r5, r2
	uint8_t *dst;
	uint32_t partial_size;
	uint32_t total_size = 0U;
   1ca68:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
   1ca6a:	462a      	mov	r2, r5
   1ca6c:	a901      	add	r1, sp, #4
   1ca6e:	4640      	mov	r0, r8
   1ca70:	f7ff ffac 	bl	1c9cc <ring_buf_put_claim>
		memcpy(dst, data, partial_size);
   1ca74:	4631      	mov	r1, r6
		partial_size = ring_buf_put_claim(buf, &dst, size);
   1ca76:	4604      	mov	r4, r0
		memcpy(dst, data, partial_size);
   1ca78:	4602      	mov	r2, r0
   1ca7a:	9801      	ldr	r0, [sp, #4]
   1ca7c:	f001 fad9 	bl	1e032 <memcpy>
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
   1ca80:	1b2d      	subs	r5, r5, r4
		total_size += partial_size;
   1ca82:	4427      	add	r7, r4
		data += partial_size;
   1ca84:	4426      	add	r6, r4
	} while (size && partial_size);
   1ca86:	d001      	beq.n	1ca8c <ring_buf_put+0x2e>
   1ca88:	2c00      	cmp	r4, #0
   1ca8a:	d1ee      	bne.n	1ca6a <ring_buf_put+0xc>

	err = ring_buf_put_finish(buf, total_size);
   1ca8c:	4639      	mov	r1, r7
   1ca8e:	4640      	mov	r0, r8
   1ca90:	f7ff ffc9 	bl	1ca26 <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
   1ca94:	4638      	mov	r0, r7
   1ca96:	b002      	add	sp, #8
   1ca98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001ca9c <ring_buf_get_claim>:

uint32_t ring_buf_get_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
   1ca9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t space, granted_size, trail_size, tmp_head_mod;
	uint32_t tail = buf->tail;

	/* Tail is always ahead, if it is not, it's only because it got rewinded. */
	if (tail < buf->misc.byte_mode.tmp_head) {
   1caa0:	68c3      	ldr	r3, [r0, #12]
	uint32_t tail = buf->tail;
   1caa2:	6846      	ldr	r6, [r0, #4]
	if (tail < buf->misc.byte_mode.tmp_head) {
   1caa4:	42b3      	cmp	r3, r6
{
   1caa6:	4604      	mov	r4, r0
   1caa8:	460f      	mov	r7, r1
   1caaa:	4690      	mov	r8, r2
	if (tail < buf->misc.byte_mode.tmp_head) {
   1caac:	d907      	bls.n	1cabe <ring_buf_get_claim+0x22>
		/* Locally, increment it to pre-rewind value */
		tail += get_rewind_value(buf->size,
   1caae:	6905      	ldr	r5, [r0, #16]
   1cab0:	f7ff ff78 	bl	1c9a4 <ring_buf_get_rewind_threshold>
	return buf_size * (threshold / buf_size - 1);
   1cab4:	fbb0 f1f5 	udiv	r1, r0, r5
   1cab8:	3901      	subs	r1, #1
		tail += get_rewind_value(buf->size,
   1caba:	fb05 6601 	mla	r6, r5, r1, r6
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   1cabe:	69a5      	ldr	r5, [r4, #24]
					 ring_buf_get_rewind_threshold());
	}

	tmp_head_mod = mod(buf, buf->misc.byte_mode.tmp_head);
   1cac0:	68e1      	ldr	r1, [r4, #12]
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   1cac2:	6923      	ldr	r3, [r4, #16]
   1cac4:	b185      	cbz	r5, 1cae8 <ring_buf_get_claim+0x4c>
   1cac6:	400d      	ands	r5, r1
	space = tail - buf->misc.byte_mode.tmp_head;
   1cac8:	1a70      	subs	r0, r6, r1
	trail_size = buf->size - tmp_head_mod;

	/* Limit requested size to available size. */
	granted_size = MIN(size, space);
   1caca:	4540      	cmp	r0, r8
   1cacc:	bf28      	it	cs
   1cace:	4640      	movcs	r0, r8
   1cad0:	4606      	mov	r6, r0
	trail_size = buf->size - tmp_head_mod;
   1cad2:	1b58      	subs	r0, r3, r5

	/* Limit allocated size to trail size. */
	granted_size = MIN(trail_size, granted_size);
   1cad4:	42b0      	cmp	r0, r6

	*data = &buf->buf.buf8[tmp_head_mod];
   1cad6:	6963      	ldr	r3, [r4, #20]
	granted_size = MIN(trail_size, granted_size);
   1cad8:	bf28      	it	cs
   1cada:	4630      	movcs	r0, r6
	*data = &buf->buf.buf8[tmp_head_mod];
   1cadc:	442b      	add	r3, r5
	buf->misc.byte_mode.tmp_head += granted_size;
   1cade:	4401      	add	r1, r0
	*data = &buf->buf.buf8[tmp_head_mod];
   1cae0:	603b      	str	r3, [r7, #0]
	buf->misc.byte_mode.tmp_head += granted_size;
   1cae2:	60e1      	str	r1, [r4, #12]

	return granted_size;
}
   1cae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   1cae8:	fbb1 f5f3 	udiv	r5, r1, r3
   1caec:	fb03 1515 	mls	r5, r3, r5, r1
   1caf0:	e7ea      	b.n	1cac8 <ring_buf_get_claim+0x2c>

0001caf2 <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, uint32_t size)
{
   1caf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t tail = buf->tail;
   1caf4:	6846      	ldr	r6, [r0, #4]
	uint32_t rew;

	/* Tail is always ahead, if it is not, it's only because it got rewinded. */
	if (tail < buf->misc.byte_mode.tmp_head) {
   1caf6:	68c3      	ldr	r3, [r0, #12]
   1caf8:	42b3      	cmp	r3, r6
{
   1cafa:	4605      	mov	r5, r0
   1cafc:	460c      	mov	r4, r1
	if (tail < buf->misc.byte_mode.tmp_head) {
   1cafe:	d914      	bls.n	1cb2a <ring_buf_get_finish+0x38>
		/* tail was rewinded. Locally, increment it to pre-rewind value */
		rew = get_rewind_value(buf->size,
   1cb00:	6907      	ldr	r7, [r0, #16]
   1cb02:	f7ff ff4f 	bl	1c9a4 <ring_buf_get_rewind_threshold>
	return buf_size * (threshold / buf_size - 1);
   1cb06:	fbb0 f1f7 	udiv	r1, r0, r7
   1cb0a:	3901      	subs	r1, #1
   1cb0c:	fb07 f301 	mul.w	r3, r7, r1
				       ring_buf_get_rewind_threshold());
		tail += rew;
   1cb10:	441e      	add	r6, r3
	} else {
		rew = 0;
	}

	if ((buf->head + size) > tail) {
   1cb12:	6829      	ldr	r1, [r5, #0]
   1cb14:	4421      	add	r1, r4
   1cb16:	42b1      	cmp	r1, r6
		return -EINVAL;
	}

	/* Include potential rewinding. */
	buf->head += (size - rew);
   1cb18:	bf9f      	itttt	ls
   1cb1a:	1ac9      	subls	r1, r1, r3
   1cb1c:	6029      	strls	r1, [r5, #0]
	buf->misc.byte_mode.tmp_head = buf->head;
   1cb1e:	60e9      	strls	r1, [r5, #12]

	return 0;
   1cb20:	2000      	movls	r0, #0
		return -EINVAL;
   1cb22:	bf88      	it	hi
   1cb24:	f06f 0015 	mvnhi.w	r0, #21
}
   1cb28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rew = 0;
   1cb2a:	2300      	movs	r3, #0
   1cb2c:	e7f1      	b.n	1cb12 <ring_buf_get_finish+0x20>

0001cb2e <ring_buf_get>:

uint32_t ring_buf_get(struct ring_buf *buf, uint8_t *data, uint32_t size)
{
   1cb2e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1cb32:	4680      	mov	r8, r0
   1cb34:	460d      	mov	r5, r1
   1cb36:	4616      	mov	r6, r2
	uint8_t *src;
	uint32_t partial_size;
	uint32_t total_size = 0U;
   1cb38:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
   1cb3a:	4632      	mov	r2, r6
   1cb3c:	a901      	add	r1, sp, #4
   1cb3e:	4640      	mov	r0, r8
   1cb40:	f7ff ffac 	bl	1ca9c <ring_buf_get_claim>
   1cb44:	4604      	mov	r4, r0
		if (data) {
   1cb46:	b12d      	cbz	r5, 1cb54 <ring_buf_get+0x26>
			memcpy(data, src, partial_size);
   1cb48:	4602      	mov	r2, r0
   1cb4a:	9901      	ldr	r1, [sp, #4]
   1cb4c:	4628      	mov	r0, r5
   1cb4e:	f001 fa70 	bl	1e032 <memcpy>
			data += partial_size;
   1cb52:	4425      	add	r5, r4
		}
		total_size += partial_size;
		size -= partial_size;
	} while (size && partial_size);
   1cb54:	1b36      	subs	r6, r6, r4
		total_size += partial_size;
   1cb56:	4427      	add	r7, r4
	} while (size && partial_size);
   1cb58:	d001      	beq.n	1cb5e <ring_buf_get+0x30>
   1cb5a:	2c00      	cmp	r4, #0
   1cb5c:	d1ed      	bne.n	1cb3a <ring_buf_get+0xc>

	err = ring_buf_get_finish(buf, total_size);
   1cb5e:	4639      	mov	r1, r7
   1cb60:	4640      	mov	r0, r8
   1cb62:	f7ff ffc6 	bl	1caf2 <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
   1cb66:	4638      	mov	r0, r7
   1cb68:	b002      	add	sp, #8
   1cb6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001cb6e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1cb6e:	4770      	bx	lr

0001cb70 <usb_write>:
{
   1cb70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1cb74:	4606      	mov	r6, r0
   1cb76:	460f      	mov	r7, r1
   1cb78:	4690      	mov	r8, r2
   1cb7a:	4699      	mov	r9, r3
   1cb7c:	2504      	movs	r5, #4
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
   1cb7e:	464b      	mov	r3, r9
   1cb80:	4642      	mov	r2, r8
   1cb82:	4639      	mov	r1, r7
   1cb84:	4630      	mov	r0, r6
   1cb86:	f7fa ff27 	bl	179d8 <usb_dc_ep_write>
		if (ret == -EAGAIN) {
   1cb8a:	f110 0f0b 	cmn.w	r0, #11
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
   1cb8e:	4604      	mov	r4, r0
		if (ret == -EAGAIN) {
   1cb90:	d103      	bne.n	1cb9a <usb_write+0x2a>
	z_impl_k_yield();
   1cb92:	f7ff f815 	bl	1bbc0 <z_impl_k_yield>
	} while (ret == -EAGAIN && tries--);
   1cb96:	3d01      	subs	r5, #1
   1cb98:	d1f1      	bne.n	1cb7e <usb_write+0xe>
}
   1cb9a:	4620      	mov	r0, r4
   1cb9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001cba0 <usb_get_dev_data_by_cfg>:
	return list->head;
   1cba0:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_cfg(sys_slist_t *list,
					     struct usb_cfg_data *cfg)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   1cba2:	b140      	cbz	r0, 1cbb6 <usb_get_dev_data_by_cfg+0x16>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg_cur = dev->config;
   1cba4:	f850 3c04 	ldr.w	r3, [r0, #-4]

		if (cfg_cur == cfg) {
   1cba8:	685b      	ldr	r3, [r3, #4]
   1cbaa:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   1cbac:	f1a0 0004 	sub.w	r0, r0, #4
		if (cfg_cur == cfg) {
   1cbb0:	d001      	beq.n	1cbb6 <usb_get_dev_data_by_cfg+0x16>
	return node->next;
   1cbb2:	6840      	ldr	r0, [r0, #4]
   1cbb4:	e7f5      	b.n	1cba2 <usb_get_dev_data_by_cfg+0x2>
	}

	LOG_DBG("Device data not found for cfg %p", cfg);

	return NULL;
}
   1cbb6:	4770      	bx	lr

0001cbb8 <usb_get_dev_data_by_iface>:
	return list->head;
   1cbb8:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_iface(sys_slist_t *list,
					       uint8_t iface_num)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   1cbba:	b150      	cbz	r0, 1cbd2 <usb_get_dev_data_by_iface+0x1a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
   1cbbc:	f850 3c04 	ldr.w	r3, [r0, #-4]
		const struct usb_if_descriptor *if_desc =
   1cbc0:	685b      	ldr	r3, [r3, #4]
						cfg->interface_descriptor;

		if (if_desc->bInterfaceNumber == iface_num) {
   1cbc2:	685b      	ldr	r3, [r3, #4]
   1cbc4:	789b      	ldrb	r3, [r3, #2]
   1cbc6:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   1cbc8:	f1a0 0004 	sub.w	r0, r0, #4
		if (if_desc->bInterfaceNumber == iface_num) {
   1cbcc:	d001      	beq.n	1cbd2 <usb_get_dev_data_by_iface+0x1a>
	return node->next;
   1cbce:	6840      	ldr	r0, [r0, #4]
   1cbd0:	e7f3      	b.n	1cbba <usb_get_dev_data_by_iface+0x2>
	}

	LOG_DBG("Device data not found for iface number %u", iface_num);

	return NULL;
}
   1cbd2:	4770      	bx	lr

0001cbd4 <usb_get_dev_data_by_ep>:

struct usb_dev_data *usb_get_dev_data_by_ep(sys_slist_t *list, uint8_t ep)
{
   1cbd4:	b530      	push	{r4, r5, lr}
	return list->head;
   1cbd6:	6800      	ldr	r0, [r0, #0]
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   1cbd8:	b188      	cbz	r0, 1cbfe <usb_get_dev_data_by_ep+0x2a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
   1cbda:	f850 3c04 	ldr.w	r3, [r0, #-4]
   1cbde:	685b      	ldr	r3, [r3, #4]
		const struct usb_ep_cfg_data *ep_data = cfg->endpoint;
   1cbe0:	6a1a      	ldr	r2, [r3, #32]

		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
   1cbe2:	7f1d      	ldrb	r5, [r3, #28]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   1cbe4:	3804      	subs	r0, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
   1cbe6:	2300      	movs	r3, #0
			if (ep_data[i].ep_addr == ep) {
   1cbe8:	3a04      	subs	r2, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
   1cbea:	b2dc      	uxtb	r4, r3
   1cbec:	42a5      	cmp	r5, r4
   1cbee:	d801      	bhi.n	1cbf4 <usb_get_dev_data_by_ep+0x20>
	return node->next;
   1cbf0:	6840      	ldr	r0, [r0, #4]
   1cbf2:	e7f1      	b.n	1cbd8 <usb_get_dev_data_by_ep+0x4>
			if (ep_data[i].ep_addr == ep) {
   1cbf4:	3301      	adds	r3, #1
   1cbf6:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
   1cbfa:	428c      	cmp	r4, r1
   1cbfc:	d1f5      	bne.n	1cbea <usb_get_dev_data_by_ep+0x16>
	}

	LOG_DBG("Device data not found for ep %u", ep);

	return NULL;
}
   1cbfe:	bd30      	pop	{r4, r5, pc}

0001cc00 <usb_transfer_is_busy>:
{
   1cc00:	b508      	push	{r3, lr}
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
   1cc02:	f7e7 fef5 	bl	49f0 <usb_ep_get_transfer>
	if (trans && trans->status == -EBUSY) {
   1cc06:	b128      	cbz	r0, 1cc14 <usb_transfer_is_busy+0x14>
   1cc08:	6840      	ldr	r0, [r0, #4]
   1cc0a:	f110 0f10 	cmn.w	r0, #16
   1cc0e:	bf14      	ite	ne
   1cc10:	2000      	movne	r0, #0
   1cc12:	2001      	moveq	r0, #1
}
   1cc14:	bd08      	pop	{r3, pc}

0001cc16 <cdc_interface_config>:
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
   1cc16:	1c4b      	adds	r3, r1, #1
   1cc18:	b2db      	uxtb	r3, r3
	desc->if0.bInterfaceNumber = bInterfaceNumber;
   1cc1a:	7081      	strb	r1, [r0, #2]
	desc->if0_union.bControlInterface = bInterfaceNumber;
   1cc1c:	7681      	strb	r1, [r0, #26]
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
   1cc1e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	desc->if0_union.bSubordinateInterface0 = bInterfaceNumber + 1;
   1cc22:	76c3      	strb	r3, [r0, #27]
	desc->iad_cdc.bFirstInterface = bInterfaceNumber;
   1cc24:	f800 1c06 	strb.w	r1, [r0, #-6]
}
   1cc28:	4770      	bx	lr

0001cc2a <cdc_acm_irq_callback_work_handler>:
	dev_data->cb(dev_data->common.dev, dev_data->cb_data);
   1cc2a:	e950 3102 	ldrd	r3, r1, [r0, #-8]
   1cc2e:	6f80      	ldr	r0, [r0, #120]	; 0x78
   1cc30:	4718      	bx	r3

0001cc32 <cdc_acm_irq_tx_disable>:
	dev_data->tx_irq_ena = false;
   1cc32:	6903      	ldr	r3, [r0, #16]
   1cc34:	2200      	movs	r2, #0
   1cc36:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
}
   1cc3a:	4770      	bx	lr

0001cc3c <cdc_acm_irq_tx_ready>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   1cc3c:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_irq_ena && dev_data->tx_ready) {
   1cc3e:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
   1cc42:	b108      	cbz	r0, 1cc48 <cdc_acm_irq_tx_ready+0xc>
		return 1;
   1cc44:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
}
   1cc48:	4770      	bx	lr

0001cc4a <cdc_acm_irq_rx_disable>:
	dev_data->rx_irq_ena = false;
   1cc4a:	6903      	ldr	r3, [r0, #16]
   1cc4c:	2200      	movs	r2, #0
   1cc4e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
}
   1cc52:	4770      	bx	lr

0001cc54 <cdc_acm_irq_rx_ready>:
	if (dev_data->rx_ready) {
   1cc54:	6903      	ldr	r3, [r0, #16]
}
   1cc56:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
   1cc5a:	4770      	bx	lr

0001cc5c <cdc_acm_irq_is_pending>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   1cc5c:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_ready && dev_data->tx_irq_ena) {
   1cc5e:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   1cc62:	b112      	cbz	r2, 1cc6a <cdc_acm_irq_is_pending+0xe>
   1cc64:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
   1cc68:	b92a      	cbnz	r2, 1cc76 <cdc_acm_irq_is_pending+0x1a>
	} else if (dev_data->rx_ready && dev_data->rx_irq_ena) {
   1cc6a:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
   1cc6e:	b118      	cbz	r0, 1cc78 <cdc_acm_irq_is_pending+0x1c>
		return 0;
   1cc70:	f893 002b 	ldrb.w	r0, [r3, #43]	; 0x2b
   1cc74:	4770      	bx	lr
		return 1;
   1cc76:	2001      	movs	r0, #1
}
   1cc78:	4770      	bx	lr

0001cc7a <cdc_acm_irq_update>:
}
   1cc7a:	2001      	movs	r0, #1
   1cc7c:	4770      	bx	lr

0001cc7e <cdc_acm_irq_callback_set>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   1cc7e:	6903      	ldr	r3, [r0, #16]
	dev_data->cb_data = cb_data;
   1cc80:	e9c3 1200 	strd	r1, r2, [r3]
}
   1cc84:	4770      	bx	lr

0001cc86 <cdc_acm_line_ctrl_get>:
	switch (ctrl) {
   1cc86:	2902      	cmp	r1, #2
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   1cc88:	6903      	ldr	r3, [r0, #16]
	switch (ctrl) {
   1cc8a:	d007      	beq.n	1cc9c <cdc_acm_line_ctrl_get+0x16>
   1cc8c:	2904      	cmp	r1, #4
   1cc8e:	d00a      	beq.n	1cca6 <cdc_acm_line_ctrl_get+0x20>
   1cc90:	2901      	cmp	r1, #1
   1cc92:	d10d      	bne.n	1ccb0 <cdc_acm_line_ctrl_get+0x2a>
		*val = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
   1cc94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
		*val = (dev_data->line_state &
   1cc96:	6013      	str	r3, [r2, #0]
		return 0;
   1cc98:	2000      	movs	r0, #0
   1cc9a:	4770      	bx	lr
			SET_CONTROL_LINE_STATE_RTS) ? 1 : 0;
   1cc9c:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
   1cca0:	f3c3 0340 	ubfx	r3, r3, #1, #1
   1cca4:	e7f7      	b.n	1cc96 <cdc_acm_line_ctrl_get+0x10>
			SET_CONTROL_LINE_STATE_DTR) ? 1 : 0;
   1cca6:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
   1ccaa:	f003 0301 	and.w	r3, r3, #1
   1ccae:	e7f2      	b.n	1cc96 <cdc_acm_line_ctrl_get+0x10>
	switch (ctrl) {
   1ccb0:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   1ccb4:	4770      	bx	lr

0001ccb6 <cdc_acm_fifo_read>:
{
   1ccb6:	b538      	push	{r3, r4, r5, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   1ccb8:	6905      	ldr	r5, [r0, #16]
	len = ring_buf_get(dev_data->rx_ringbuf, rx_data, size);
   1ccba:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
   1ccbc:	f7ff ff37 	bl	1cb2e <ring_buf_get>
   1ccc0:	4604      	mov	r4, r0
	if (ring_buf_is_empty(dev_data->rx_ringbuf)) {
   1ccc2:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
   1ccc4:	f7ff fe71 	bl	1c9aa <ring_buf_is_empty>
   1ccc8:	b110      	cbz	r0, 1ccd0 <cdc_acm_fifo_read+0x1a>
		dev_data->rx_ready = false;
   1ccca:	2300      	movs	r3, #0
   1cccc:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
}
   1ccd0:	4620      	mov	r0, r4
   1ccd2:	bd38      	pop	{r3, r4, r5, pc}

0001ccd4 <cdc_acm_poll_in>:
{
   1ccd4:	b508      	push	{r3, lr}
	int ret = cdc_acm_fifo_read(dev, c, 1);
   1ccd6:	2201      	movs	r2, #1
   1ccd8:	f7ff ffed 	bl	1ccb6 <cdc_acm_fifo_read>
}
   1ccdc:	3801      	subs	r0, #1
   1ccde:	bf18      	it	ne
   1cce0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   1cce4:	bd08      	pop	{r3, pc}

0001cce6 <cdc_acm_line_ctrl_set>:
	switch (ctrl) {
   1cce6:	2940      	cmp	r1, #64	; 0x40
{
   1cce8:	b508      	push	{r3, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   1ccea:	6903      	ldr	r3, [r0, #16]
	switch (ctrl) {
   1ccec:	d042      	beq.n	1cd74 <cdc_acm_line_ctrl_set+0x8e>
   1ccee:	d813      	bhi.n	1cd18 <cdc_acm_line_ctrl_set+0x32>
   1ccf0:	2910      	cmp	r1, #16
   1ccf2:	d032      	beq.n	1cd5a <cdc_acm_line_ctrl_set+0x74>
   1ccf4:	d806      	bhi.n	1cd04 <cdc_acm_line_ctrl_set+0x1e>
   1ccf6:	2901      	cmp	r1, #1
   1ccf8:	d01e      	beq.n	1cd38 <cdc_acm_line_ctrl_set+0x52>
   1ccfa:	2908      	cmp	r1, #8
   1ccfc:	d01f      	beq.n	1cd3e <cdc_acm_line_ctrl_set+0x58>
   1ccfe:	f06f 0012 	mvn.w	r0, #18
}
   1cd02:	bd08      	pop	{r3, pc}
	switch (ctrl) {
   1cd04:	2920      	cmp	r1, #32
   1cd06:	d1fa      	bne.n	1ccfe <cdc_acm_line_ctrl_set+0x18>
		dev_data->serial_state &= ~SERIAL_STATE_BREAK;
   1cd08:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
   1cd0c:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
		if (val) {
   1cd10:	b342      	cbz	r2, 1cd64 <cdc_acm_line_ctrl_set+0x7e>
			dev_data->serial_state |= SERIAL_STATE_BREAK;
   1cd12:	f041 0104 	orr.w	r1, r1, #4
   1cd16:	e025      	b.n	1cd64 <cdc_acm_line_ctrl_set+0x7e>
	switch (ctrl) {
   1cd18:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   1cd1c:	d033      	beq.n	1cd86 <cdc_acm_line_ctrl_set+0xa0>
   1cd1e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   1cd22:	d039      	beq.n	1cd98 <cdc_acm_line_ctrl_set+0xb2>
   1cd24:	2980      	cmp	r1, #128	; 0x80
   1cd26:	d1ea      	bne.n	1ccfe <cdc_acm_line_ctrl_set+0x18>
		dev_data->serial_state &= ~SERIAL_STATE_FRAMING;
   1cd28:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
   1cd2c:	f001 01ef 	and.w	r1, r1, #239	; 0xef
		if (val) {
   1cd30:	b1c2      	cbz	r2, 1cd64 <cdc_acm_line_ctrl_set+0x7e>
			dev_data->serial_state |= SERIAL_STATE_FRAMING;
   1cd32:	f041 0110 	orr.w	r1, r1, #16
   1cd36:	e015      	b.n	1cd64 <cdc_acm_line_ctrl_set+0x7e>
	dev_data->line_coding.dwDTERate = sys_cpu_to_le32(baudrate);
   1cd38:	675a      	str	r2, [r3, #116]	; 0x74
		return 0;
   1cd3a:	2000      	movs	r0, #0
   1cd3c:	e7e1      	b.n	1cd02 <cdc_acm_line_ctrl_set+0x1c>
		dev_data->serial_state &= ~SERIAL_STATE_RX_CARRIER;
   1cd3e:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
   1cd42:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
		if (val) {
   1cd46:	b92a      	cbnz	r2, 1cd54 <cdc_acm_line_ctrl_set+0x6e>
			dev_data->serial_state |= SERIAL_STATE_RX_CARRIER;
   1cd48:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
		cdc_acm_send_notification(dev, SERIAL_STATE_RX_CARRIER);
   1cd4c:	2101      	movs	r1, #1
		cdc_acm_send_notification(dev, dev_data->serial_state);
   1cd4e:	f7e8 f98b 	bl	5068 <cdc_acm_send_notification.isra.0>
   1cd52:	e7f2      	b.n	1cd3a <cdc_acm_line_ctrl_set+0x54>
			dev_data->serial_state |= SERIAL_STATE_RX_CARRIER;
   1cd54:	f041 0101 	orr.w	r1, r1, #1
   1cd58:	e7f6      	b.n	1cd48 <cdc_acm_line_ctrl_set+0x62>
		dev_data->serial_state &= ~SERIAL_STATE_TX_CARRIER;
   1cd5a:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
   1cd5e:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
		if (val) {
   1cd62:	b922      	cbnz	r2, 1cd6e <cdc_acm_line_ctrl_set+0x88>
			dev_data->serial_state |= SERIAL_STATE_OVER_RUN;
   1cd64:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
   1cd68:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
   1cd6c:	e7ef      	b.n	1cd4e <cdc_acm_line_ctrl_set+0x68>
			dev_data->serial_state |= SERIAL_STATE_TX_CARRIER;
   1cd6e:	f041 0102 	orr.w	r1, r1, #2
   1cd72:	e7f7      	b.n	1cd64 <cdc_acm_line_ctrl_set+0x7e>
		dev_data->serial_state &= ~SERIAL_STATE_RING_SIGNAL;
   1cd74:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
   1cd78:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
		if (val) {
   1cd7c:	2a00      	cmp	r2, #0
   1cd7e:	d0f1      	beq.n	1cd64 <cdc_acm_line_ctrl_set+0x7e>
			dev_data->serial_state |= SERIAL_STATE_RING_SIGNAL;
   1cd80:	f041 0108 	orr.w	r1, r1, #8
   1cd84:	e7ee      	b.n	1cd64 <cdc_acm_line_ctrl_set+0x7e>
		dev_data->serial_state &= ~SERIAL_STATE_PARITY;
   1cd86:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
   1cd8a:	f001 01df 	and.w	r1, r1, #223	; 0xdf
		if (val) {
   1cd8e:	2a00      	cmp	r2, #0
   1cd90:	d0e8      	beq.n	1cd64 <cdc_acm_line_ctrl_set+0x7e>
			dev_data->serial_state |= SERIAL_STATE_PARITY;
   1cd92:	f041 0120 	orr.w	r1, r1, #32
   1cd96:	e7e5      	b.n	1cd64 <cdc_acm_line_ctrl_set+0x7e>
		dev_data->serial_state &= ~SERIAL_STATE_OVER_RUN;
   1cd98:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
   1cd9c:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
		if (val) {
   1cda0:	2a00      	cmp	r2, #0
   1cda2:	d0df      	beq.n	1cd64 <cdc_acm_line_ctrl_set+0x7e>
			dev_data->serial_state |= SERIAL_STATE_OVER_RUN;
   1cda4:	f041 0140 	orr.w	r1, r1, #64	; 0x40
   1cda8:	e7dc      	b.n	1cd64 <cdc_acm_line_ctrl_set+0x7e>

0001cdaa <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   1cdaa:	b538      	push	{r3, r4, r5, lr}
   1cdac:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   1cdae:	42ab      	cmp	r3, r5
{
   1cdb0:	4611      	mov	r1, r2
   1cdb2:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   1cdb4:	d804      	bhi.n	1cdc0 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   1cdb6:	461a      	mov	r2, r3
   1cdb8:	f001 f93b 	bl	1e032 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   1cdbc:	4620      	mov	r0, r4
   1cdbe:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   1cdc0:	2400      	movs	r4, #0
   1cdc2:	e7fb      	b.n	1cdbc <_copy+0x12>

0001cdc4 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   1cdc4:	f001 b940 	b.w	1e048 <memset>

0001cdc8 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   1cdc8:	09c3      	lsrs	r3, r0, #7
   1cdca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1cdce:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   1cdd2:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   1cdd6:	b2c0      	uxtb	r0, r0
   1cdd8:	4770      	bx	lr

0001cdda <uECC_make_key>:
	}
	return 0;
}

int uECC_make_key(uint8_t *public_key, uint8_t *private_key, uECC_Curve curve)
{
   1cdda:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1cdde:	4606      	mov	r6, r0
   1cde0:	b0a9      	sub	sp, #164	; 0xa4
   1cde2:	4688      	mov	r8, r1
   1cde4:	4614      	mov	r4, r2
   1cde6:	2740      	movs	r7, #64	; 0x40
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
        		return 0;
		}

		/* computing modular reduction of _random (see FIPS 186.4 B.4.1): */
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   1cde8:	f102 0924 	add.w	r9, r2, #36	; 0x24
		uECC_RNG_Function rng_function = uECC_get_rng();
   1cdec:	f7e8 fae2 	bl	53b4 <uECC_get_rng>
		if (!rng_function ||
   1cdf0:	4603      	mov	r3, r0
   1cdf2:	2800      	cmp	r0, #0
   1cdf4:	d03e      	beq.n	1ce74 <uECC_make_key+0x9a>
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
   1cdf6:	2140      	movs	r1, #64	; 0x40
   1cdf8:	a808      	add	r0, sp, #32
   1cdfa:	4798      	blx	r3
		if (!rng_function ||
   1cdfc:	b3d0      	cbz	r0, 1ce74 <uECC_make_key+0x9a>
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   1cdfe:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
   1ce02:	f112 031f 	adds.w	r3, r2, #31
   1ce06:	bf48      	it	mi
   1ce08:	f102 033e 	addmi.w	r3, r2, #62	; 0x3e
   1ce0c:	466d      	mov	r5, sp
   1ce0e:	464a      	mov	r2, r9
   1ce10:	a908      	add	r1, sp, #32
   1ce12:	4628      	mov	r0, r5
   1ce14:	f343 1347 	sbfx	r3, r3, #5, #8
   1ce18:	f000 f9ee 	bl	1d1f8 <uECC_vli_mmod>

		/* Computing public-key from private: */
		if (EccPoint_compute_public_key(_public, _private, curve)) {
   1ce1c:	4622      	mov	r2, r4
   1ce1e:	4629      	mov	r1, r5
   1ce20:	a818      	add	r0, sp, #96	; 0x60
   1ce22:	f000 fe03 	bl	1da2c <EccPoint_compute_public_key>
   1ce26:	b318      	cbz	r0, 1ce70 <uECC_make_key+0x96>

			/* Converting buffers to correct bit order: */
			uECC_vli_nativeToBytes(private_key,
					       BITS_TO_BYTES(curve->num_n_bits),
   1ce28:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
			uECC_vli_nativeToBytes(private_key,
   1ce2c:	1dd9      	adds	r1, r3, #7
   1ce2e:	bf48      	it	mi
   1ce30:	f103 010e 	addmi.w	r1, r3, #14
   1ce34:	462a      	mov	r2, r5
   1ce36:	4640      	mov	r0, r8
   1ce38:	10c9      	asrs	r1, r1, #3
   1ce3a:	f000 fe1f 	bl	1da7c <uECC_vli_nativeToBytes>
					       _private);
			uECC_vli_nativeToBytes(public_key,
   1ce3e:	f994 1001 	ldrsb.w	r1, [r4, #1]
   1ce42:	aa18      	add	r2, sp, #96	; 0x60
   1ce44:	4630      	mov	r0, r6
   1ce46:	f000 fe19 	bl	1da7c <uECC_vli_nativeToBytes>
					       curve->num_bytes,
					       _public);
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   1ce4a:	f994 1001 	ldrsb.w	r1, [r4, #1]
 					       curve->num_bytes,
					       _public + curve->num_words);
   1ce4e:	f994 2000 	ldrsb.w	r2, [r4]
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   1ce52:	ab18      	add	r3, sp, #96	; 0x60
   1ce54:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   1ce58:	1870      	adds	r0, r6, r1
   1ce5a:	f000 fe0f 	bl	1da7c <uECC_vli_nativeToBytes>
#ifdef TINYCRYPT_ARCH_HAS_SET_SECURE
extern void _set_secure(void *to, uint8_t val, unsigned int len);
#else /* ! TINYCRYPT_ARCH_HAS_SET_SECURE */
static inline void _set_secure(void *to, uint8_t val, unsigned int len)
{
  (void) memset(to, val, len);
   1ce5e:	2220      	movs	r2, #32
   1ce60:	2100      	movs	r1, #0
   1ce62:	4628      	mov	r0, r5
   1ce64:	f001 f8f0 	bl	1e048 <memset>

			/* erasing temporary buffer that stored secret: */
			_set_secure(_private, 0, NUM_ECC_BYTES);

      			return 1;
   1ce68:	2001      	movs	r0, #1
    		}
  	}
	return 0;
}
   1ce6a:	b029      	add	sp, #164	; 0xa4
   1ce6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   1ce70:	3f01      	subs	r7, #1
   1ce72:	d1bb      	bne.n	1cdec <uECC_make_key+0x12>
        		return 0;
   1ce74:	2000      	movs	r0, #0
   1ce76:	e7f8      	b.n	1ce6a <uECC_make_key+0x90>

0001ce78 <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key, const uint8_t *private_key,
		       uint8_t *secret, uECC_Curve curve)
{
   1ce78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ce7c:	461c      	mov	r4, r3
	uECC_word_t tmp[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {_private, tmp};
	uECC_word_t *initial_Z = 0;
	uECC_word_t carry;
	wordcount_t num_words = curve->num_words;
	wordcount_t num_bytes = curve->num_bytes;
   1ce7e:	f993 7001 	ldrsb.w	r7, [r3, #1]
	wordcount_t num_words = curve->num_words;
   1ce82:	f993 a000 	ldrsb.w	sl, [r3]
	int r;

	/* Converting buffers to correct bit order: */
	uECC_vli_bytesToNative(_private,
      			       private_key,
			       BITS_TO_BYTES(curve->num_n_bits));
   1ce86:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
{
   1ce8a:	b0a4      	sub	sp, #144	; 0x90
   1ce8c:	4690      	mov	r8, r2
	uECC_vli_bytesToNative(_private,
   1ce8e:	1dda      	adds	r2, r3, #7
   1ce90:	bf48      	it	mi
   1ce92:	f103 020e 	addmi.w	r2, r3, #14
	uECC_word_t *p2[2] = {_private, tmp};
   1ce96:	ad04      	add	r5, sp, #16
{
   1ce98:	4681      	mov	r9, r0
	uECC_word_t *p2[2] = {_private, tmp};
   1ce9a:	ae0c      	add	r6, sp, #48	; 0x30
	uECC_vli_bytesToNative(_private,
   1ce9c:	4628      	mov	r0, r5
   1ce9e:	10d2      	asrs	r2, r2, #3
	uECC_word_t *p2[2] = {_private, tmp};
   1cea0:	9502      	str	r5, [sp, #8]
   1cea2:	9603      	str	r6, [sp, #12]
	uECC_vli_bytesToNative(_private,
   1cea4:	f000 fdfe 	bl	1daa4 <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public,
   1cea8:	463a      	mov	r2, r7
   1ceaa:	4649      	mov	r1, r9
   1ceac:	a814      	add	r0, sp, #80	; 0x50
   1ceae:	f000 fdf9 	bl	1daa4 <uECC_vli_bytesToNative>
      			       public_key,
			       num_bytes);
	uECC_vli_bytesToNative(_public + num_words,
   1ceb2:	ab14      	add	r3, sp, #80	; 0x50
   1ceb4:	eb09 0107 	add.w	r1, r9, r7
   1ceb8:	eb03 008a 	add.w	r0, r3, sl, lsl #2
   1cebc:	463a      	mov	r2, r7
   1cebe:	f000 fdf1 	bl	1daa4 <uECC_vli_bytesToNative>
			       public_key + num_bytes,
			       num_bytes);

	/* Regularize the bitcount for the private key so that attackers cannot use a
	 * side channel attack to learn the number of leading zeros. */
	carry = regularize_k(_private, _private, tmp, curve);
   1cec2:	4623      	mov	r3, r4
   1cec4:	4632      	mov	r2, r6
   1cec6:	4629      	mov	r1, r5
   1cec8:	4628      	mov	r0, r5
   1ceca:	f000 fd83 	bl	1d9d4 <regularize_k>
			goto clear_and_out;
    		}
    		initial_Z = p2[carry];
  	}

	EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1,
   1cece:	fab0 f380 	clz	r3, r0
   1ced2:	9401      	str	r4, [sp, #4]
   1ced4:	aa24      	add	r2, sp, #144	; 0x90
   1ced6:	095b      	lsrs	r3, r3, #5
   1ced8:	eb02 0183 	add.w	r1, r2, r3, lsl #2
   1cedc:	8863      	ldrh	r3, [r4, #2]
   1cede:	3301      	adds	r3, #1
   1cee0:	b21b      	sxth	r3, r3
   1cee2:	9300      	str	r3, [sp, #0]
   1cee4:	f851 2c88 	ldr.w	r2, [r1, #-136]
   1cee8:	a914      	add	r1, sp, #80	; 0x50
   1ceea:	2300      	movs	r3, #0
   1ceec:	4608      	mov	r0, r1
   1ceee:	f000 fca4 	bl	1d83a <EccPoint_mult>
		      curve);

	uECC_vli_nativeToBytes(secret, num_bytes, _public);
   1cef2:	aa14      	add	r2, sp, #80	; 0x50
   1cef4:	4639      	mov	r1, r7
   1cef6:	4640      	mov	r0, r8
   1cef8:	f000 fdc0 	bl	1da7c <uECC_vli_nativeToBytes>
	r = !EccPoint_isZero(_public, curve);
   1cefc:	4621      	mov	r1, r4
   1cefe:	a814      	add	r0, sp, #80	; 0x50
   1cf00:	f000 fc10 	bl	1d724 <EccPoint_isZero>
   1cf04:	af02      	add	r7, sp, #8
   1cf06:	4604      	mov	r4, r0
   1cf08:	2208      	movs	r2, #8
   1cf0a:	2100      	movs	r1, #0
   1cf0c:	4638      	mov	r0, r7
   1cf0e:	f001 f89b 	bl	1e048 <memset>
   1cf12:	2220      	movs	r2, #32
   1cf14:	2100      	movs	r1, #0
   1cf16:	4630      	mov	r0, r6
   1cf18:	f001 f896 	bl	1e048 <memset>
   1cf1c:	2220      	movs	r2, #32
   1cf1e:	2100      	movs	r1, #0
   1cf20:	4628      	mov	r0, r5
   1cf22:	f001 f891 	bl	1e048 <memset>
	_set_secure(p2, 0, sizeof(p2));
	_set_secure(tmp, 0, sizeof(tmp));
	_set_secure(_private, 0, sizeof(_private));

	return r;
}
   1cf26:	fab4 f084 	clz	r0, r4
   1cf2a:	0940      	lsrs	r0, r0, #5
   1cf2c:	b024      	add	sp, #144	; 0x90
   1cf2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001cf32 <uECC_vli_add>:
{
   1cf32:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   1cf34:	2400      	movs	r4, #0
{
   1cf36:	4606      	mov	r6, r0
	uECC_word_t carry = 0;
   1cf38:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   1cf3a:	b265      	sxtb	r5, r4
   1cf3c:	42ab      	cmp	r3, r5
   1cf3e:	dc00      	bgt.n	1cf42 <uECC_vli_add+0x10>
}
   1cf40:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t sum = left[i] + right[i] + carry;
   1cf42:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   1cf46:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
   1cf4a:	443d      	add	r5, r7
   1cf4c:	4405      	add	r5, r0
	return (p_true*(cond)) | (p_false*(!cond));
   1cf4e:	42af      	cmp	r7, r5
   1cf50:	f000 0001 	and.w	r0, r0, #1
   1cf54:	bf18      	it	ne
   1cf56:	2000      	movne	r0, #0
		result[i] = sum;
   1cf58:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   1cf5c:	bf88      	it	hi
   1cf5e:	f040 0001 	orrhi.w	r0, r0, #1
	for (i = 0; i < num_words; ++i) {
   1cf62:	3401      	adds	r4, #1
   1cf64:	e7e9      	b.n	1cf3a <uECC_vli_add+0x8>

0001cf66 <uECC_vli_rshift1>:
	vli += num_words;
   1cf66:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	uECC_word_t carry = 0;
   1cf6a:	2300      	movs	r3, #0
	while (vli-- > end) {
   1cf6c:	4288      	cmp	r0, r1
   1cf6e:	d300      	bcc.n	1cf72 <uECC_vli_rshift1+0xc>
}
   1cf70:	4770      	bx	lr
		uECC_word_t temp = *vli;
   1cf72:	f851 2d04 	ldr.w	r2, [r1, #-4]!
		*vli = (temp >> 1) | carry;
   1cf76:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   1cf7a:	600b      	str	r3, [r1, #0]
		carry = temp << (uECC_WORD_BITS - 1);
   1cf7c:	07d3      	lsls	r3, r2, #31
   1cf7e:	e7f5      	b.n	1cf6c <uECC_vli_rshift1+0x6>

0001cf80 <vli_modInv_update>:
	if (!EVEN(uv)) {
   1cf80:	6803      	ldr	r3, [r0, #0]
{
   1cf82:	b570      	push	{r4, r5, r6, lr}
	if (!EVEN(uv)) {
   1cf84:	f013 0601 	ands.w	r6, r3, #1
{
   1cf88:	4605      	mov	r5, r0
   1cf8a:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
   1cf8c:	d005      	beq.n	1cf9a <vli_modInv_update+0x1a>
		carry = uECC_vli_add(uv, uv, mod, num_words);
   1cf8e:	4613      	mov	r3, r2
   1cf90:	460a      	mov	r2, r1
   1cf92:	4601      	mov	r1, r0
   1cf94:	f7ff ffcd 	bl	1cf32 <uECC_vli_add>
   1cf98:	4606      	mov	r6, r0
	uECC_vli_rshift1(uv, num_words);
   1cf9a:	4621      	mov	r1, r4
   1cf9c:	4628      	mov	r0, r5
   1cf9e:	f7ff ffe2 	bl	1cf66 <uECC_vli_rshift1>
	if (carry) {
   1cfa2:	b146      	cbz	r6, 1cfb6 <vli_modInv_update+0x36>
		uv[num_words - 1] |= HIGH_BIT_SET;
   1cfa4:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   1cfa8:	3a01      	subs	r2, #1
   1cfaa:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   1cfae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1cfb2:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
}
   1cfb6:	bd70      	pop	{r4, r5, r6, pc}

0001cfb8 <uECC_vli_mult>:
	for (k = 0; k < num_words; ++k) {
   1cfb8:	f04f 0c00 	mov.w	ip, #0
{
   1cfbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uECC_word_t r1 = 0;
   1cfc0:	4665      	mov	r5, ip
	uECC_word_t r0 = 0;
   1cfc2:	4664      	mov	r4, ip
	for (k = 0; k < num_words; ++k) {
   1cfc4:	fa4f f98c 	sxtb.w	r9, ip
   1cfc8:	454b      	cmp	r3, r9
   1cfca:	dc16      	bgt.n	1cffa <uECC_vli_mult+0x42>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   1cfcc:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1cfd0:	eb06 0643 	add.w	r6, r6, r3, lsl #1
   1cfd4:	9601      	str	r6, [sp, #4]
   1cfd6:	f04f 0800 	mov.w	r8, #0
   1cfda:	9f01      	ldr	r7, [sp, #4]
   1cfdc:	fa53 fe88 	uxtab	lr, r3, r8
   1cfe0:	fa4f fe8e 	sxtb.w	lr, lr
   1cfe4:	45be      	cmp	lr, r7
   1cfe6:	fa5f f688 	uxtb.w	r6, r8
   1cfea:	db26      	blt.n	1d03a <uECC_vli_mult+0x82>
	result[num_words * 2 - 1] = r0;
   1cfec:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   1cff0:	f840 4c04 	str.w	r4, [r0, #-4]
}
   1cff4:	b003      	add	sp, #12
   1cff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (k = 0; k < num_words; ++k) {
   1cffa:	f04f 0e00 	mov.w	lr, #0
   1cffe:	eb02 0a8c 	add.w	sl, r2, ip, lsl #2
   1d002:	46f0      	mov	r8, lr
	uECC_dword_t p = (uECC_dword_t)a * b;
   1d004:	f851 702e 	ldr.w	r7, [r1, lr, lsl #2]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   1d008:	f85a 6904 	ldr.w	r6, [sl], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
   1d00c:	fba6 6707 	umull	r6, r7, r6, r7
   1d010:	1934      	adds	r4, r6, r4
		for (i = 0; i <= k; ++i) {
   1d012:	f10e 0e01 	add.w	lr, lr, #1
   1d016:	417d      	adcs	r5, r7
   1d018:	fa4f f68e 	sxtb.w	r6, lr
   1d01c:	f04f 0b00 	mov.w	fp, #0
   1d020:	bf28      	it	cs
   1d022:	f04f 0b01 	movcs.w	fp, #1
   1d026:	454e      	cmp	r6, r9
	*r2 += (r01 < p);
   1d028:	44d8      	add	r8, fp
		for (i = 0; i <= k; ++i) {
   1d02a:	ddeb      	ble.n	1d004 <uECC_vli_mult+0x4c>
		result[k] = r0;
   1d02c:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
	*r1 = r01 >> uECC_WORD_BITS;
   1d030:	462c      	mov	r4, r5
   1d032:	f10c 0c01 	add.w	ip, ip, #1
	*r2 += (r01 < p);
   1d036:	4645      	mov	r5, r8
   1d038:	e7c4      	b.n	1cfc4 <uECC_vli_mult+0xc>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   1d03a:	3601      	adds	r6, #1
   1d03c:	46a9      	mov	r9, r5
   1d03e:	b276      	sxtb	r6, r6
   1d040:	eb02 0a8e 	add.w	sl, r2, lr, lsl #2
   1d044:	2500      	movs	r5, #0
   1d046:	b277      	sxtb	r7, r6
   1d048:	42bb      	cmp	r3, r7
   1d04a:	dc05      	bgt.n	1d058 <uECC_vli_mult+0xa0>
		result[k] = r0;
   1d04c:	f840 402e 	str.w	r4, [r0, lr, lsl #2]
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   1d050:	f108 0801 	add.w	r8, r8, #1
		result[k] = r0;
   1d054:	464c      	mov	r4, r9
   1d056:	e7c0      	b.n	1cfda <uECC_vli_mult+0x22>
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   1d058:	f06f 0703 	mvn.w	r7, #3
   1d05c:	4377      	muls	r7, r6
	uECC_dword_t p = (uECC_dword_t)a * b;
   1d05e:	f851 c026 	ldr.w	ip, [r1, r6, lsl #2]
   1d062:	f85a 7007 	ldr.w	r7, [sl, r7]
   1d066:	fba7 7c0c 	umull	r7, ip, r7, ip
   1d06a:	193c      	adds	r4, r7, r4
   1d06c:	eb5c 0909 	adcs.w	r9, ip, r9
   1d070:	f04f 0b00 	mov.w	fp, #0
   1d074:	bf28      	it	cs
   1d076:	f04f 0b01 	movcs.w	fp, #1
	*r2 += (r01 < p);
   1d07a:	445d      	add	r5, fp
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   1d07c:	3601      	adds	r6, #1
   1d07e:	e7e2      	b.n	1d046 <uECC_vli_mult+0x8e>

0001d080 <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
   1d080:	2300      	movs	r3, #0
{
   1d082:	b510      	push	{r4, lr}
		 vli[i] = 0;
   1d084:	461c      	mov	r4, r3
	for (i = 0; i < num_words; ++i) {
   1d086:	b25a      	sxtb	r2, r3
   1d088:	4291      	cmp	r1, r2
   1d08a:	dc00      	bgt.n	1d08e <uECC_vli_clear+0xe>
}
   1d08c:	bd10      	pop	{r4, pc}
		 vli[i] = 0;
   1d08e:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   1d092:	3301      	adds	r3, #1
   1d094:	e7f7      	b.n	1d086 <uECC_vli_clear+0x6>

0001d096 <uECC_vli_isZero>:
{
   1d096:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   1d098:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
   1d09a:	461a      	mov	r2, r3
	for (i = 0; i < num_words; ++i) {
   1d09c:	b25c      	sxtb	r4, r3
   1d09e:	42a1      	cmp	r1, r4
   1d0a0:	dc03      	bgt.n	1d0aa <uECC_vli_isZero+0x14>
}
   1d0a2:	fab2 f082 	clz	r0, r2
   1d0a6:	0940      	lsrs	r0, r0, #5
   1d0a8:	bd10      	pop	{r4, pc}
		bits |= vli[i];
   1d0aa:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   1d0ae:	3301      	adds	r3, #1
   1d0b0:	4322      	orrs	r2, r4
	for (i = 0; i < num_words; ++i) {
   1d0b2:	e7f3      	b.n	1d09c <uECC_vli_isZero+0x6>

0001d0b4 <uECC_vli_testBit>:
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1d0b4:	114a      	asrs	r2, r1, #5
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   1d0b6:	2301      	movs	r3, #1
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1d0b8:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   1d0bc:	f001 011f 	and.w	r1, r1, #31
   1d0c0:	fa03 f101 	lsl.w	r1, r3, r1
}
   1d0c4:	4008      	ands	r0, r1
   1d0c6:	4770      	bx	lr

0001d0c8 <uECC_vli_numBits>:
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   1d0c8:	3901      	subs	r1, #1
{
   1d0ca:	b510      	push	{r4, lr}
   1d0cc:	4602      	mov	r2, r0
   1d0ce:	b249      	sxtb	r1, r1
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   1d0d0:	1d04      	adds	r4, r0, #4
   1d0d2:	0608      	lsls	r0, r1, #24
   1d0d4:	b2cb      	uxtb	r3, r1
   1d0d6:	d404      	bmi.n	1d0e2 <uECC_vli_numBits+0x1a>
   1d0d8:	3901      	subs	r1, #1
   1d0da:	f854 0021 	ldr.w	r0, [r4, r1, lsl #2]
   1d0de:	2800      	cmp	r0, #0
   1d0e0:	d0f7      	beq.n	1d0d2 <uECC_vli_numBits+0xa>
	return (i + 1);
   1d0e2:	3301      	adds	r3, #1
   1d0e4:	b258      	sxtb	r0, r3
	if (num_digits == 0) {
   1d0e6:	b150      	cbz	r0, 1d0fe <uECC_vli_numBits+0x36>
	digit = vli[num_digits - 1];
   1d0e8:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   1d0ec:	3b01      	subs	r3, #1
   1d0ee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
	for (i = 0; digit; ++i) {
   1d0f2:	2300      	movs	r3, #0
   1d0f4:	b922      	cbnz	r2, 1d100 <uECC_vli_numBits+0x38>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
   1d0f6:	3801      	subs	r0, #1
   1d0f8:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   1d0fc:	b200      	sxth	r0, r0
}
   1d0fe:	bd10      	pop	{r4, pc}
		digit >>= 1;
   1d100:	0852      	lsrs	r2, r2, #1
	for (i = 0; digit; ++i) {
   1d102:	3301      	adds	r3, #1
   1d104:	e7f6      	b.n	1d0f4 <uECC_vli_numBits+0x2c>

0001d106 <uECC_vli_set>:
{
   1d106:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   1d108:	2300      	movs	r3, #0
   1d10a:	b25c      	sxtb	r4, r3
   1d10c:	42a2      	cmp	r2, r4
   1d10e:	dc00      	bgt.n	1d112 <uECC_vli_set+0xc>
}
   1d110:	bd10      	pop	{r4, pc}
		dest[i] = src[i];
   1d112:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
   1d116:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   1d11a:	3301      	adds	r3, #1
   1d11c:	e7f5      	b.n	1d10a <uECC_vli_set+0x4>

0001d11e <uECC_vli_cmp_unsafe>:
{
   1d11e:	b510      	push	{r4, lr}
	for (i = num_words - 1; i >= 0; --i) {
   1d120:	3a01      	subs	r2, #1
   1d122:	b252      	sxtb	r2, r2
   1d124:	0613      	lsls	r3, r2, #24
   1d126:	d501      	bpl.n	1d12c <uECC_vli_cmp_unsafe+0xe>
	return 0;
   1d128:	2000      	movs	r0, #0
}
   1d12a:	bd10      	pop	{r4, pc}
		if (left[i] > right[i]) {
   1d12c:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
   1d130:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
   1d134:	429c      	cmp	r4, r3
   1d136:	d805      	bhi.n	1d144 <uECC_vli_cmp_unsafe+0x26>
		} else if (left[i] < right[i]) {
   1d138:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
   1d13c:	d2f2      	bcs.n	1d124 <uECC_vli_cmp_unsafe+0x6>
			return -1;
   1d13e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d142:	e7f2      	b.n	1d12a <uECC_vli_cmp_unsafe+0xc>
			return 1;
   1d144:	2001      	movs	r0, #1
   1d146:	e7f0      	b.n	1d12a <uECC_vli_cmp_unsafe+0xc>

0001d148 <uECC_vli_equal>:
{
   1d148:	b530      	push	{r4, r5, lr}
	for (i = num_words - 1; i >= 0; --i) {
   1d14a:	3a01      	subs	r2, #1
   1d14c:	b252      	sxtb	r2, r2
	uECC_word_t diff = 0;
   1d14e:	2300      	movs	r3, #0
	for (i = num_words - 1; i >= 0; --i) {
   1d150:	0614      	lsls	r4, r2, #24
   1d152:	d503      	bpl.n	1d15c <uECC_vli_equal+0x14>
}
   1d154:	1e18      	subs	r0, r3, #0
   1d156:	bf18      	it	ne
   1d158:	2001      	movne	r0, #1
   1d15a:	bd30      	pop	{r4, r5, pc}
		diff |= (left[i] ^ right[i]);
   1d15c:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
   1d160:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   1d164:	406c      	eors	r4, r5
   1d166:	4323      	orrs	r3, r4
	for (i = num_words - 1; i >= 0; --i) {
   1d168:	3a01      	subs	r2, #1
   1d16a:	e7f1      	b.n	1d150 <uECC_vli_equal+0x8>

0001d16c <uECC_vli_sub>:
{
   1d16c:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   1d16e:	2400      	movs	r4, #0
{
   1d170:	4606      	mov	r6, r0
   1d172:	469c      	mov	ip, r3
	uECC_word_t borrow = 0;
   1d174:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   1d176:	b265      	sxtb	r5, r4
   1d178:	4565      	cmp	r5, ip
   1d17a:	db00      	blt.n	1d17e <uECC_vli_sub+0x12>
}
   1d17c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t diff = left[i] - right[i] - borrow;
   1d17e:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   1d182:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
   1d186:	1a3d      	subs	r5, r7, r0
   1d188:	1aed      	subs	r5, r5, r3
	return (p_true*(cond)) | (p_false*(!cond));
   1d18a:	42af      	cmp	r7, r5
   1d18c:	f000 0001 	and.w	r0, r0, #1
   1d190:	bf18      	it	ne
   1d192:	2000      	movne	r0, #0
		result[i] = diff;
   1d194:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   1d198:	bf38      	it	cc
   1d19a:	f040 0001 	orrcc.w	r0, r0, #1
	for (i = 0; i < num_words; ++i) {
   1d19e:	3401      	adds	r4, #1
   1d1a0:	e7e9      	b.n	1d176 <uECC_vli_sub+0xa>

0001d1a2 <uECC_vli_modAdd>:
{
   1d1a2:	b570      	push	{r4, r5, r6, lr}
   1d1a4:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   1d1a8:	461d      	mov	r5, r3
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   1d1aa:	4633      	mov	r3, r6
{
   1d1ac:	4604      	mov	r4, r0
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   1d1ae:	f7ff fec0 	bl	1cf32 <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
   1d1b2:	b930      	cbnz	r0, 1d1c2 <uECC_vli_modAdd+0x20>
   1d1b4:	4632      	mov	r2, r6
   1d1b6:	4621      	mov	r1, r4
   1d1b8:	4628      	mov	r0, r5
   1d1ba:	f7ff ffb0 	bl	1d11e <uECC_vli_cmp_unsafe>
   1d1be:	2801      	cmp	r0, #1
   1d1c0:	d007      	beq.n	1d1d2 <uECC_vli_modAdd+0x30>
		uECC_vli_sub(result, result, mod, num_words);
   1d1c2:	4633      	mov	r3, r6
   1d1c4:	462a      	mov	r2, r5
   1d1c6:	4621      	mov	r1, r4
   1d1c8:	4620      	mov	r0, r4
}
   1d1ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_sub(result, result, mod, num_words);
   1d1ce:	f7ff bfcd 	b.w	1d16c <uECC_vli_sub>
}
   1d1d2:	bd70      	pop	{r4, r5, r6, pc}

0001d1d4 <uECC_vli_modSub>:
{
   1d1d4:	b570      	push	{r4, r5, r6, lr}
   1d1d6:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   1d1da:	461d      	mov	r5, r3
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   1d1dc:	4633      	mov	r3, r6
{
   1d1de:	4604      	mov	r4, r0
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   1d1e0:	f7ff ffc4 	bl	1d16c <uECC_vli_sub>
	if (l_borrow) {
   1d1e4:	b138      	cbz	r0, 1d1f6 <uECC_vli_modSub+0x22>
		uECC_vli_add(result, result, mod, num_words);
   1d1e6:	4633      	mov	r3, r6
   1d1e8:	462a      	mov	r2, r5
   1d1ea:	4621      	mov	r1, r4
   1d1ec:	4620      	mov	r0, r4
}
   1d1ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_add(result, result, mod, num_words);
   1d1f2:	f7ff be9e 	b.w	1cf32 <uECC_vli_add>
}
   1d1f6:	bd70      	pop	{r4, r5, r6, pc}

0001d1f8 <uECC_vli_mmod>:
{
   1d1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d1fc:	b0a5      	sub	sp, #148	; 0x94
   1d1fe:	461d      	mov	r5, r3
	uECC_word_t *v[2] = {tmp, product};
   1d200:	ab14      	add	r3, sp, #80	; 0x50
   1d202:	e9cd 3102 	strd	r3, r1, [sp, #8]
{
   1d206:	4680      	mov	r8, r0
			   uECC_vli_numBits(mod, num_words);
   1d208:	4629      	mov	r1, r5
   1d20a:	4610      	mov	r0, r2
{
   1d20c:	4617      	mov	r7, r2
			   uECC_vli_numBits(mod, num_words);
   1d20e:	f7ff ff5b 	bl	1d0c8 <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   1d212:	ebc0 1485 	rsb	r4, r0, r5, lsl #6
   1d216:	b224      	sxth	r4, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   1d218:	2c00      	cmp	r4, #0
   1d21a:	4621      	mov	r1, r4
   1d21c:	bfb8      	it	lt
   1d21e:	f104 011f 	addlt.w	r1, r4, #31
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   1d222:	4263      	negs	r3, r4
   1d224:	f003 031f 	and.w	r3, r3, #31
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   1d228:	f341 1147 	sbfx	r1, r1, #5, #8
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   1d22c:	f004 061f 	and.w	r6, r4, #31
	uECC_vli_clear(mod_multiple, word_shift);
   1d230:	a804      	add	r0, sp, #16
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   1d232:	bf58      	it	pl
   1d234:	425e      	negpl	r6, r3
	uECC_vli_clear(mod_multiple, word_shift);
   1d236:	f7ff ff23 	bl	1d080 <uECC_vli_clear>
	if (bit_shift > 0) {
   1d23a:	2e00      	cmp	r6, #0
   1d23c:	b208      	sxth	r0, r1
   1d23e:	dd2b      	ble.n	1d298 <uECC_vli_mmod+0xa0>
   1d240:	ab04      	add	r3, sp, #16
	uECC_word_t carry = 0;
   1d242:	2200      	movs	r2, #0
   1d244:	eb03 0080 	add.w	r0, r3, r0, lsl #2
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   1d248:	f1c6 0e20 	rsb	lr, r6, #32
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   1d24c:	4613      	mov	r3, r2
   1d24e:	429d      	cmp	r5, r3
   1d250:	d817      	bhi.n	1d282 <uECC_vli_mmod+0x8a>
		for (i = 0; i < num_words * 2; ++i) {
   1d252:	006b      	lsls	r3, r5, #1
   1d254:	9301      	str	r3, [sp, #4]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1d256:	ab04      	add	r3, sp, #16
   1d258:	eb03 0985 	add.w	r9, r3, r5, lsl #2
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1d25c:	1e6f      	subs	r7, r5, #1
   1d25e:	ab24      	add	r3, sp, #144	; 0x90
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1d260:	2601      	movs	r6, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1d262:	eb03 0787 	add.w	r7, r3, r7, lsl #2
	for (index = 1; shift >= 0; --shift) {
   1d266:	2c00      	cmp	r4, #0
   1d268:	da54      	bge.n	1d314 <uECC_vli_mmod+0x11c>
	uECC_vli_set(result, v[index], num_words);
   1d26a:	ab24      	add	r3, sp, #144	; 0x90
   1d26c:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   1d270:	462a      	mov	r2, r5
   1d272:	f856 1c88 	ldr.w	r1, [r6, #-136]
   1d276:	4640      	mov	r0, r8
   1d278:	f7ff ff45 	bl	1d106 <uECC_vli_set>
}
   1d27c:	b025      	add	sp, #148	; 0x94
   1d27e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   1d282:	f857 c023 	ldr.w	ip, [r7, r3, lsl #2]
   1d286:	fa0c f106 	lsl.w	r1, ip, r6
   1d28a:	430a      	orrs	r2, r1
   1d28c:	f840 2b04 	str.w	r2, [r0], #4
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   1d290:	3301      	adds	r3, #1
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   1d292:	fa2c f20e 	lsr.w	r2, ip, lr
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   1d296:	e7da      	b.n	1d24e <uECC_vli_mmod+0x56>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
   1d298:	ab04      	add	r3, sp, #16
   1d29a:	462a      	mov	r2, r5
   1d29c:	4639      	mov	r1, r7
   1d29e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1d2a2:	f7ff ff30 	bl	1d106 <uECC_vli_set>
   1d2a6:	e7d4      	b.n	1d252 <uECC_vli_mmod+0x5a>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   1d2a8:	fa0f fe82 	sxth.w	lr, r2
   1d2ac:	f85a 3c88 	ldr.w	r3, [sl, #-136]
   1d2b0:	f853 b02e 	ldr.w	fp, [r3, lr, lsl #2]
   1d2b4:	ab24      	add	r3, sp, #144	; 0x90
   1d2b6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   1d2ba:	3001      	adds	r0, #1
   1d2bc:	f852 3c80 	ldr.w	r3, [r2, #-128]
   1d2c0:	440b      	add	r3, r1
   1d2c2:	ebbb 0303 	subs.w	r3, fp, r3
   1d2c6:	bf34      	ite	cc
   1d2c8:	2201      	movcc	r2, #1
   1d2ca:	2200      	movcs	r2, #0
			if (diff != v[index][i]) {
   1d2cc:	459b      	cmp	fp, r3
				borrow = (diff > v[index][i]);
   1d2ce:	bf18      	it	ne
   1d2d0:	4611      	movne	r1, r2
			v[1 - index][i] = diff;
   1d2d2:	f85c 2c88 	ldr.w	r2, [ip, #-136]
   1d2d6:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
		for (i = 0; i < num_words * 2; ++i) {
   1d2da:	9b01      	ldr	r3, [sp, #4]
   1d2dc:	b242      	sxtb	r2, r0
   1d2de:	429a      	cmp	r2, r3
   1d2e0:	dbe2      	blt.n	1d2a8 <uECC_vli_mmod+0xb0>
		index = !(index ^ borrow);
   1d2e2:	1a73      	subs	r3, r6, r1
   1d2e4:	425e      	negs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   1d2e6:	4629      	mov	r1, r5
   1d2e8:	a804      	add	r0, sp, #16
		index = !(index ^ borrow);
   1d2ea:	415e      	adcs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   1d2ec:	f7ff fe3b 	bl	1cf66 <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1d2f0:	ab24      	add	r3, sp, #144	; 0x90
   1d2f2:	eb03 0385 	add.w	r3, r3, r5, lsl #2
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1d2f6:	4629      	mov	r1, r5
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1d2f8:	f853 2c80 	ldr.w	r2, [r3, #-128]
   1d2fc:	f857 3c80 	ldr.w	r3, [r7, #-128]
   1d300:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
   1d304:	f847 3c80 	str.w	r3, [r7, #-128]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1d308:	4648      	mov	r0, r9
   1d30a:	3c01      	subs	r4, #1
   1d30c:	f7ff fe2b 	bl	1cf66 <uECC_vli_rshift1>
	for (index = 1; shift >= 0; --shift) {
   1d310:	b224      	sxth	r4, r4
   1d312:	e7a8      	b.n	1d266 <uECC_vli_mmod+0x6e>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   1d314:	ab24      	add	r3, sp, #144	; 0x90
   1d316:	2000      	movs	r0, #0
			v[1 - index][i] = diff;
   1d318:	f1c6 0c01 	rsb	ip, r6, #1
		uECC_word_t borrow = 0;
   1d31c:	4601      	mov	r1, r0
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   1d31e:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
			v[1 - index][i] = diff;
   1d322:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
   1d326:	e7d8      	b.n	1d2da <uECC_vli_mmod+0xe2>

0001d328 <uECC_vli_modMult_fast>:
{
   1d328:	b530      	push	{r4, r5, lr}
   1d32a:	461c      	mov	r4, r3
   1d32c:	b091      	sub	sp, #68	; 0x44
   1d32e:	4605      	mov	r5, r0
	uECC_vli_mult(product, left, right, curve->num_words);
   1d330:	f993 3000 	ldrsb.w	r3, [r3]
   1d334:	4668      	mov	r0, sp
   1d336:	f7ff fe3f 	bl	1cfb8 <uECC_vli_mult>
	curve->mmod_fast(result, product);
   1d33a:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   1d33e:	4669      	mov	r1, sp
   1d340:	4628      	mov	r0, r5
   1d342:	4798      	blx	r3
}
   1d344:	b011      	add	sp, #68	; 0x44
   1d346:	bd30      	pop	{r4, r5, pc}

0001d348 <uECC_vli_modSquare_fast>:
{
   1d348:	4613      	mov	r3, r2
	uECC_vli_modMult_fast(result, left, left, curve);
   1d34a:	460a      	mov	r2, r1
   1d34c:	f7ff bfec 	b.w	1d328 <uECC_vli_modMult_fast>

0001d350 <double_jacobian_default>:
{
   1d350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wordcount_t num_words = curve->num_words;
   1d354:	f993 6000 	ldrsb.w	r6, [r3]
{
   1d358:	b092      	sub	sp, #72	; 0x48
   1d35a:	4604      	mov	r4, r0
   1d35c:	4689      	mov	r9, r1
	if (uECC_vli_isZero(Z1, num_words)) {
   1d35e:	4610      	mov	r0, r2
   1d360:	4631      	mov	r1, r6
{
   1d362:	4615      	mov	r5, r2
   1d364:	461f      	mov	r7, r3
	if (uECC_vli_isZero(Z1, num_words)) {
   1d366:	f7ff fe96 	bl	1d096 <uECC_vli_isZero>
   1d36a:	2800      	cmp	r0, #0
   1d36c:	f040 8091 	bne.w	1d492 <double_jacobian_default+0x142>
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
   1d370:	463a      	mov	r2, r7
   1d372:	4649      	mov	r1, r9
   1d374:	a802      	add	r0, sp, #8
   1d376:	f7ff ffe7 	bl	1d348 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
   1d37a:	463b      	mov	r3, r7
   1d37c:	aa02      	add	r2, sp, #8
   1d37e:	4621      	mov	r1, r4
   1d380:	a80a      	add	r0, sp, #40	; 0x28
   1d382:	f7ff ffd1 	bl	1d328 <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
   1d386:	a902      	add	r1, sp, #8
   1d388:	4608      	mov	r0, r1
   1d38a:	463a      	mov	r2, r7
   1d38c:	f7ff ffdc 	bl	1d348 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
   1d390:	463b      	mov	r3, r7
   1d392:	462a      	mov	r2, r5
   1d394:	4649      	mov	r1, r9
   1d396:	4648      	mov	r0, r9
   1d398:	f7ff ffc6 	bl	1d328 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   1d39c:	f107 0804 	add.w	r8, r7, #4
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
   1d3a0:	463a      	mov	r2, r7
   1d3a2:	4629      	mov	r1, r5
   1d3a4:	4628      	mov	r0, r5
   1d3a6:	f7ff ffcf 	bl	1d348 <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   1d3aa:	4643      	mov	r3, r8
   1d3ac:	462a      	mov	r2, r5
   1d3ae:	4621      	mov	r1, r4
   1d3b0:	4620      	mov	r0, r4
   1d3b2:	9600      	str	r6, [sp, #0]
   1d3b4:	f7ff fef5 	bl	1d1a2 <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
   1d3b8:	4643      	mov	r3, r8
   1d3ba:	462a      	mov	r2, r5
   1d3bc:	4629      	mov	r1, r5
   1d3be:	4628      	mov	r0, r5
   1d3c0:	9600      	str	r6, [sp, #0]
   1d3c2:	f7ff feee 	bl	1d1a2 <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
   1d3c6:	4643      	mov	r3, r8
   1d3c8:	462a      	mov	r2, r5
   1d3ca:	4621      	mov	r1, r4
   1d3cc:	4628      	mov	r0, r5
   1d3ce:	9600      	str	r6, [sp, #0]
   1d3d0:	f7ff ff00 	bl	1d1d4 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
   1d3d4:	463b      	mov	r3, r7
   1d3d6:	462a      	mov	r2, r5
   1d3d8:	4621      	mov	r1, r4
   1d3da:	4620      	mov	r0, r4
   1d3dc:	f7ff ffa4 	bl	1d328 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
   1d3e0:	4643      	mov	r3, r8
   1d3e2:	4622      	mov	r2, r4
   1d3e4:	4621      	mov	r1, r4
   1d3e6:	4628      	mov	r0, r5
   1d3e8:	9600      	str	r6, [sp, #0]
   1d3ea:	f7ff feda 	bl	1d1a2 <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
   1d3ee:	4643      	mov	r3, r8
   1d3f0:	9600      	str	r6, [sp, #0]
   1d3f2:	462a      	mov	r2, r5
   1d3f4:	4621      	mov	r1, r4
   1d3f6:	4620      	mov	r0, r4
   1d3f8:	f7ff fed3 	bl	1d1a2 <uECC_vli_modAdd>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1d3fc:	6823      	ldr	r3, [r4, #0]
	if (uECC_vli_testBit(X1, 0)) {
   1d3fe:	07db      	lsls	r3, r3, #31
   1d400:	d54a      	bpl.n	1d498 <double_jacobian_default+0x148>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   1d402:	4633      	mov	r3, r6
   1d404:	4642      	mov	r2, r8
   1d406:	4621      	mov	r1, r4
   1d408:	4620      	mov	r0, r4
   1d40a:	f7ff fd92 	bl	1cf32 <uECC_vli_add>
		uECC_vli_rshift1(X1, num_words);
   1d40e:	4631      	mov	r1, r6
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   1d410:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
   1d412:	4620      	mov	r0, r4
   1d414:	f7ff fda7 	bl	1cf66 <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
   1d418:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   1d41c:	3b01      	subs	r3, #1
   1d41e:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   1d422:	ea42 72ca 	orr.w	r2, r2, sl, lsl #31
   1d426:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
   1d42a:	463a      	mov	r2, r7
   1d42c:	4621      	mov	r1, r4
   1d42e:	4628      	mov	r0, r5
   1d430:	f7ff ff8a 	bl	1d348 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
   1d434:	4643      	mov	r3, r8
   1d436:	aa0a      	add	r2, sp, #40	; 0x28
   1d438:	4629      	mov	r1, r5
   1d43a:	4628      	mov	r0, r5
   1d43c:	9600      	str	r6, [sp, #0]
   1d43e:	f7ff fec9 	bl	1d1d4 <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
   1d442:	4643      	mov	r3, r8
   1d444:	aa0a      	add	r2, sp, #40	; 0x28
   1d446:	4629      	mov	r1, r5
   1d448:	4628      	mov	r0, r5
   1d44a:	9600      	str	r6, [sp, #0]
   1d44c:	f7ff fec2 	bl	1d1d4 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
   1d450:	a90a      	add	r1, sp, #40	; 0x28
   1d452:	4608      	mov	r0, r1
   1d454:	4643      	mov	r3, r8
   1d456:	462a      	mov	r2, r5
   1d458:	9600      	str	r6, [sp, #0]
   1d45a:	f7ff febb 	bl	1d1d4 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
   1d45e:	463b      	mov	r3, r7
   1d460:	aa0a      	add	r2, sp, #40	; 0x28
   1d462:	4621      	mov	r1, r4
   1d464:	4620      	mov	r0, r4
   1d466:	f7ff ff5f 	bl	1d328 <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
   1d46a:	aa02      	add	r2, sp, #8
   1d46c:	4643      	mov	r3, r8
   1d46e:	4610      	mov	r0, r2
   1d470:	4621      	mov	r1, r4
   1d472:	9600      	str	r6, [sp, #0]
   1d474:	f7ff feae 	bl	1d1d4 <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
   1d478:	4632      	mov	r2, r6
   1d47a:	4629      	mov	r1, r5
   1d47c:	4620      	mov	r0, r4
   1d47e:	f7ff fe42 	bl	1d106 <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
   1d482:	4649      	mov	r1, r9
   1d484:	4628      	mov	r0, r5
   1d486:	f7ff fe3e 	bl	1d106 <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
   1d48a:	a902      	add	r1, sp, #8
   1d48c:	4648      	mov	r0, r9
   1d48e:	f7ff fe3a 	bl	1d106 <uECC_vli_set>
}
   1d492:	b012      	add	sp, #72	; 0x48
   1d494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uECC_vli_rshift1(X1, num_words);
   1d498:	4631      	mov	r1, r6
   1d49a:	4620      	mov	r0, r4
   1d49c:	f7ff fd63 	bl	1cf66 <uECC_vli_rshift1>
   1d4a0:	e7c3      	b.n	1d42a <double_jacobian_default+0xda>

0001d4a2 <x_side_default>:
{
   1d4a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d4a6:	4615      	mov	r5, r2
   1d4a8:	b08a      	sub	sp, #40	; 0x28
   1d4aa:	4604      	mov	r4, r0
   1d4ac:	460e      	mov	r6, r1
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   1d4ae:	221c      	movs	r2, #28
   1d4b0:	2100      	movs	r1, #0
   1d4b2:	a803      	add	r0, sp, #12
   1d4b4:	f000 fdc8 	bl	1e048 <memset>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   1d4b8:	1d2f      	adds	r7, r5, #4
	wordcount_t num_words = curve->num_words;
   1d4ba:	f995 8000 	ldrsb.w	r8, [r5]
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   1d4be:	2303      	movs	r3, #3
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   1d4c0:	462a      	mov	r2, r5
   1d4c2:	4631      	mov	r1, r6
   1d4c4:	4620      	mov	r0, r4
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   1d4c6:	9302      	str	r3, [sp, #8]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   1d4c8:	f7ff ff3e 	bl	1d348 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   1d4cc:	463b      	mov	r3, r7
   1d4ce:	aa02      	add	r2, sp, #8
   1d4d0:	4621      	mov	r1, r4
   1d4d2:	4620      	mov	r0, r4
   1d4d4:	f8cd 8000 	str.w	r8, [sp]
   1d4d8:	f7ff fe7c 	bl	1d1d4 <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
   1d4dc:	462b      	mov	r3, r5
   1d4de:	4632      	mov	r2, r6
   1d4e0:	4621      	mov	r1, r4
   1d4e2:	4620      	mov	r0, r4
   1d4e4:	f7ff ff20 	bl	1d328 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
   1d4e8:	f8cd 8000 	str.w	r8, [sp]
   1d4ec:	463b      	mov	r3, r7
   1d4ee:	f105 0284 	add.w	r2, r5, #132	; 0x84
   1d4f2:	4621      	mov	r1, r4
   1d4f4:	4620      	mov	r0, r4
   1d4f6:	f7ff fe54 	bl	1d1a2 <uECC_vli_modAdd>
}
   1d4fa:	b00a      	add	sp, #40	; 0x28
   1d4fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001d500 <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
   1d500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d504:	b09a      	sub	sp, #104	; 0x68
   1d506:	4616      	mov	r6, r2
   1d508:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   1d50c:	4644      	mov	r4, r8
{
   1d50e:	4699      	mov	r9, r3
	wordcount_t num_words = curve->num_words;
   1d510:	f914 5b04 	ldrsb.w	r5, [r4], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   1d514:	9500      	str	r5, [sp, #0]
{
   1d516:	4607      	mov	r7, r0
   1d518:	468a      	mov	sl, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   1d51a:	4623      	mov	r3, r4
   1d51c:	4602      	mov	r2, r0
   1d51e:	4631      	mov	r1, r6
   1d520:	a802      	add	r0, sp, #8
   1d522:	f7ff fe57 	bl	1d1d4 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   1d526:	a902      	add	r1, sp, #8
   1d528:	4642      	mov	r2, r8
   1d52a:	4608      	mov	r0, r1
   1d52c:	f7ff ff0c 	bl	1d348 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   1d530:	4643      	mov	r3, r8
   1d532:	aa02      	add	r2, sp, #8
   1d534:	4639      	mov	r1, r7
   1d536:	4638      	mov	r0, r7
   1d538:	f7ff fef6 	bl	1d328 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   1d53c:	4643      	mov	r3, r8
   1d53e:	aa02      	add	r2, sp, #8
   1d540:	4631      	mov	r1, r6
   1d542:	4630      	mov	r0, r6
   1d544:	f7ff fef0 	bl	1d328 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
   1d548:	4623      	mov	r3, r4
   1d54a:	4652      	mov	r2, sl
   1d54c:	4649      	mov	r1, r9
   1d54e:	a802      	add	r0, sp, #8
   1d550:	9500      	str	r5, [sp, #0]
   1d552:	f7ff fe26 	bl	1d1a2 <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   1d556:	4623      	mov	r3, r4
   1d558:	4652      	mov	r2, sl
   1d55a:	4649      	mov	r1, r9
   1d55c:	4648      	mov	r0, r9
   1d55e:	9500      	str	r5, [sp, #0]
   1d560:	f7ff fe38 	bl	1d1d4 <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
   1d564:	4623      	mov	r3, r4
   1d566:	463a      	mov	r2, r7
   1d568:	4631      	mov	r1, r6
   1d56a:	a80a      	add	r0, sp, #40	; 0x28
   1d56c:	9500      	str	r5, [sp, #0]
   1d56e:	f7ff fe31 	bl	1d1d4 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
   1d572:	4643      	mov	r3, r8
   1d574:	aa0a      	add	r2, sp, #40	; 0x28
   1d576:	4651      	mov	r1, sl
   1d578:	4650      	mov	r0, sl
   1d57a:	f7ff fed5 	bl	1d328 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
   1d57e:	4623      	mov	r3, r4
   1d580:	4632      	mov	r2, r6
   1d582:	4639      	mov	r1, r7
   1d584:	a80a      	add	r0, sp, #40	; 0x28
   1d586:	9500      	str	r5, [sp, #0]
   1d588:	f7ff fe0b 	bl	1d1a2 <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
   1d58c:	4642      	mov	r2, r8
   1d58e:	4649      	mov	r1, r9
   1d590:	4630      	mov	r0, r6
   1d592:	f7ff fed9 	bl	1d348 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
   1d596:	4623      	mov	r3, r4
   1d598:	aa0a      	add	r2, sp, #40	; 0x28
   1d59a:	4631      	mov	r1, r6
   1d59c:	4630      	mov	r0, r6
   1d59e:	9500      	str	r5, [sp, #0]
   1d5a0:	f7ff fe18 	bl	1d1d4 <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
   1d5a4:	4623      	mov	r3, r4
   1d5a6:	4632      	mov	r2, r6
   1d5a8:	4639      	mov	r1, r7
   1d5aa:	a812      	add	r0, sp, #72	; 0x48
   1d5ac:	9500      	str	r5, [sp, #0]
   1d5ae:	f7ff fe11 	bl	1d1d4 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
   1d5b2:	4643      	mov	r3, r8
   1d5b4:	aa12      	add	r2, sp, #72	; 0x48
   1d5b6:	4649      	mov	r1, r9
   1d5b8:	4648      	mov	r0, r9
   1d5ba:	f7ff feb5 	bl	1d328 <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
   1d5be:	4623      	mov	r3, r4
   1d5c0:	4652      	mov	r2, sl
   1d5c2:	4649      	mov	r1, r9
   1d5c4:	4648      	mov	r0, r9
   1d5c6:	9500      	str	r5, [sp, #0]
   1d5c8:	f7ff fe04 	bl	1d1d4 <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
   1d5cc:	4642      	mov	r2, r8
   1d5ce:	a902      	add	r1, sp, #8
   1d5d0:	a812      	add	r0, sp, #72	; 0x48
   1d5d2:	f7ff feb9 	bl	1d348 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
   1d5d6:	a912      	add	r1, sp, #72	; 0x48
   1d5d8:	4623      	mov	r3, r4
   1d5da:	aa0a      	add	r2, sp, #40	; 0x28
   1d5dc:	4608      	mov	r0, r1
   1d5de:	9500      	str	r5, [sp, #0]
   1d5e0:	f7ff fdf8 	bl	1d1d4 <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
   1d5e4:	4623      	mov	r3, r4
   1d5e6:	463a      	mov	r2, r7
   1d5e8:	a912      	add	r1, sp, #72	; 0x48
   1d5ea:	a80a      	add	r0, sp, #40	; 0x28
   1d5ec:	9500      	str	r5, [sp, #0]
   1d5ee:	f7ff fdf1 	bl	1d1d4 <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
   1d5f2:	a90a      	add	r1, sp, #40	; 0x28
   1d5f4:	4643      	mov	r3, r8
   1d5f6:	aa02      	add	r2, sp, #8
   1d5f8:	4608      	mov	r0, r1
   1d5fa:	f7ff fe95 	bl	1d328 <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
   1d5fe:	4623      	mov	r3, r4
   1d600:	4652      	mov	r2, sl
   1d602:	a90a      	add	r1, sp, #40	; 0x28
   1d604:	4650      	mov	r0, sl
   1d606:	9500      	str	r5, [sp, #0]
   1d608:	f7ff fde4 	bl	1d1d4 <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
   1d60c:	462a      	mov	r2, r5
   1d60e:	a912      	add	r1, sp, #72	; 0x48
   1d610:	4638      	mov	r0, r7
   1d612:	f7ff fd78 	bl	1d106 <uECC_vli_set>
}
   1d616:	b01a      	add	sp, #104	; 0x68
   1d618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001d61c <uECC_vli_modInv>:
{
   1d61c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d61e:	460f      	mov	r7, r1
   1d620:	b0a1      	sub	sp, #132	; 0x84
   1d622:	4606      	mov	r6, r0
	if (uECC_vli_isZero(input, num_words)) {
   1d624:	4619      	mov	r1, r3
   1d626:	4638      	mov	r0, r7
{
   1d628:	4615      	mov	r5, r2
   1d62a:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
   1d62c:	f7ff fd33 	bl	1d096 <uECC_vli_isZero>
   1d630:	b128      	cbz	r0, 1d63e <uECC_vli_modInv+0x22>
		uECC_vli_clear(result, num_words);
   1d632:	4630      	mov	r0, r6
}
   1d634:	b021      	add	sp, #132	; 0x84
   1d636:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		uECC_vli_clear(result, num_words);
   1d63a:	f7ff bd21 	b.w	1d080 <uECC_vli_clear>
	uECC_vli_set(a, input, num_words);
   1d63e:	4622      	mov	r2, r4
   1d640:	4639      	mov	r1, r7
   1d642:	4668      	mov	r0, sp
   1d644:	f7ff fd5f 	bl	1d106 <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
   1d648:	4629      	mov	r1, r5
   1d64a:	a808      	add	r0, sp, #32
   1d64c:	f7ff fd5b 	bl	1d106 <uECC_vli_set>
	uECC_vli_clear(u, num_words);
   1d650:	a810      	add	r0, sp, #64	; 0x40
   1d652:	4621      	mov	r1, r4
   1d654:	f7ff fd14 	bl	1d080 <uECC_vli_clear>
	u[0] = 1;
   1d658:	2301      	movs	r3, #1
	uECC_vli_clear(v, num_words);
   1d65a:	a818      	add	r0, sp, #96	; 0x60
	u[0] = 1;
   1d65c:	9310      	str	r3, [sp, #64]	; 0x40
	uECC_vli_clear(v, num_words);
   1d65e:	f7ff fd0f 	bl	1d080 <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   1d662:	4622      	mov	r2, r4
   1d664:	a908      	add	r1, sp, #32
   1d666:	4668      	mov	r0, sp
   1d668:	f7ff fd59 	bl	1d11e <uECC_vli_cmp_unsafe>
   1d66c:	b930      	cbnz	r0, 1d67c <uECC_vli_modInv+0x60>
  	uECC_vli_set(result, u, num_words);
   1d66e:	4622      	mov	r2, r4
   1d670:	a910      	add	r1, sp, #64	; 0x40
   1d672:	4630      	mov	r0, r6
   1d674:	f7ff fd47 	bl	1d106 <uECC_vli_set>
}
   1d678:	b021      	add	sp, #132	; 0x84
   1d67a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (EVEN(a)) {
   1d67c:	9b00      	ldr	r3, [sp, #0]
   1d67e:	07da      	lsls	r2, r3, #31
   1d680:	d409      	bmi.n	1d696 <uECC_vli_modInv+0x7a>
			uECC_vli_rshift1(a, num_words);
   1d682:	4621      	mov	r1, r4
   1d684:	4668      	mov	r0, sp
   1d686:	f7ff fc6e 	bl	1cf66 <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
   1d68a:	4622      	mov	r2, r4
   1d68c:	4629      	mov	r1, r5
   1d68e:	a810      	add	r0, sp, #64	; 0x40
      			vli_modInv_update(v, mod, num_words);
   1d690:	f7ff fc76 	bl	1cf80 <vli_modInv_update>
   1d694:	e7e5      	b.n	1d662 <uECC_vli_modInv+0x46>
    		} else if (EVEN(b)) {
   1d696:	9b08      	ldr	r3, [sp, #32]
   1d698:	07db      	lsls	r3, r3, #31
   1d69a:	d407      	bmi.n	1d6ac <uECC_vli_modInv+0x90>
			uECC_vli_rshift1(b, num_words);
   1d69c:	4621      	mov	r1, r4
   1d69e:	a808      	add	r0, sp, #32
   1d6a0:	f7ff fc61 	bl	1cf66 <uECC_vli_rshift1>
      			vli_modInv_update(v, mod, num_words);
   1d6a4:	4622      	mov	r2, r4
   1d6a6:	4629      	mov	r1, r5
   1d6a8:	a818      	add	r0, sp, #96	; 0x60
   1d6aa:	e7f1      	b.n	1d690 <uECC_vli_modInv+0x74>
		} else if (cmpResult > 0) {
   1d6ac:	2800      	cmp	r0, #0
			uECC_vli_sub(a, a, b, num_words);
   1d6ae:	4623      	mov	r3, r4
		} else if (cmpResult > 0) {
   1d6b0:	dd1c      	ble.n	1d6ec <uECC_vli_modInv+0xd0>
			uECC_vli_sub(a, a, b, num_words);
   1d6b2:	aa08      	add	r2, sp, #32
   1d6b4:	4669      	mov	r1, sp
   1d6b6:	4668      	mov	r0, sp
   1d6b8:	f7ff fd58 	bl	1d16c <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
   1d6bc:	4621      	mov	r1, r4
   1d6be:	4668      	mov	r0, sp
   1d6c0:	f7ff fc51 	bl	1cf66 <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
   1d6c4:	4622      	mov	r2, r4
   1d6c6:	a918      	add	r1, sp, #96	; 0x60
   1d6c8:	a810      	add	r0, sp, #64	; 0x40
   1d6ca:	f7ff fd28 	bl	1d11e <uECC_vli_cmp_unsafe>
   1d6ce:	2800      	cmp	r0, #0
   1d6d0:	da05      	bge.n	1d6de <uECC_vli_modInv+0xc2>
        			uECC_vli_add(u, u, mod, num_words);
   1d6d2:	a910      	add	r1, sp, #64	; 0x40
   1d6d4:	4623      	mov	r3, r4
   1d6d6:	462a      	mov	r2, r5
   1d6d8:	4608      	mov	r0, r1
   1d6da:	f7ff fc2a 	bl	1cf32 <uECC_vli_add>
      			uECC_vli_sub(u, u, v, num_words);
   1d6de:	a910      	add	r1, sp, #64	; 0x40
   1d6e0:	4623      	mov	r3, r4
   1d6e2:	aa18      	add	r2, sp, #96	; 0x60
   1d6e4:	4608      	mov	r0, r1
   1d6e6:	f7ff fd41 	bl	1d16c <uECC_vli_sub>
   1d6ea:	e7ce      	b.n	1d68a <uECC_vli_modInv+0x6e>
      			uECC_vli_sub(b, b, a, num_words);
   1d6ec:	466a      	mov	r2, sp
   1d6ee:	a808      	add	r0, sp, #32
   1d6f0:	f7ff fd3c 	bl	1d16c <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
   1d6f4:	4621      	mov	r1, r4
   1d6f6:	a808      	add	r0, sp, #32
   1d6f8:	f7ff fc35 	bl	1cf66 <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
   1d6fc:	4622      	mov	r2, r4
   1d6fe:	a910      	add	r1, sp, #64	; 0x40
   1d700:	a818      	add	r0, sp, #96	; 0x60
   1d702:	f7ff fd0c 	bl	1d11e <uECC_vli_cmp_unsafe>
   1d706:	2800      	cmp	r0, #0
   1d708:	da05      	bge.n	1d716 <uECC_vli_modInv+0xfa>
        			uECC_vli_add(v, v, mod, num_words);
   1d70a:	a918      	add	r1, sp, #96	; 0x60
   1d70c:	4623      	mov	r3, r4
   1d70e:	462a      	mov	r2, r5
   1d710:	4608      	mov	r0, r1
   1d712:	f7ff fc0e 	bl	1cf32 <uECC_vli_add>
      			uECC_vli_sub(v, v, u, num_words);
   1d716:	a918      	add	r1, sp, #96	; 0x60
   1d718:	4623      	mov	r3, r4
   1d71a:	aa10      	add	r2, sp, #64	; 0x40
   1d71c:	4608      	mov	r0, r1
   1d71e:	f7ff fd25 	bl	1d16c <uECC_vli_sub>
   1d722:	e7bf      	b.n	1d6a4 <uECC_vli_modInv+0x88>

0001d724 <EccPoint_isZero>:
	return uECC_vli_isZero(point, curve->num_words * 2);
   1d724:	7809      	ldrb	r1, [r1, #0]
   1d726:	0049      	lsls	r1, r1, #1
   1d728:	b249      	sxtb	r1, r1
   1d72a:	f7ff bcb4 	b.w	1d096 <uECC_vli_isZero>

0001d72e <apply_z>:
{
   1d72e:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d730:	4615      	mov	r5, r2
   1d732:	b089      	sub	sp, #36	; 0x24
   1d734:	461c      	mov	r4, r3
   1d736:	4607      	mov	r7, r0
   1d738:	460e      	mov	r6, r1
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
   1d73a:	461a      	mov	r2, r3
   1d73c:	4629      	mov	r1, r5
   1d73e:	4668      	mov	r0, sp
   1d740:	f7ff fe02 	bl	1d348 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
   1d744:	4623      	mov	r3, r4
   1d746:	466a      	mov	r2, sp
   1d748:	4639      	mov	r1, r7
   1d74a:	4638      	mov	r0, r7
   1d74c:	f7ff fdec 	bl	1d328 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
   1d750:	4623      	mov	r3, r4
   1d752:	462a      	mov	r2, r5
   1d754:	4669      	mov	r1, sp
   1d756:	4668      	mov	r0, sp
   1d758:	f7ff fde6 	bl	1d328 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
   1d75c:	4623      	mov	r3, r4
   1d75e:	466a      	mov	r2, sp
   1d760:	4631      	mov	r1, r6
   1d762:	4630      	mov	r0, r6
   1d764:	f7ff fde0 	bl	1d328 <uECC_vli_modMult_fast>
}
   1d768:	b009      	add	sp, #36	; 0x24
   1d76a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001d76c <XYcZ_add>:
{
   1d76c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d770:	b08a      	sub	sp, #40	; 0x28
   1d772:	4614      	mov	r4, r2
   1d774:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
	wordcount_t num_words = curve->num_words;
   1d778:	4655      	mov	r5, sl
{
   1d77a:	461f      	mov	r7, r3
	wordcount_t num_words = curve->num_words;
   1d77c:	f915 6b04 	ldrsb.w	r6, [r5], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   1d780:	9600      	str	r6, [sp, #0]
{
   1d782:	4680      	mov	r8, r0
   1d784:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   1d786:	462b      	mov	r3, r5
   1d788:	4602      	mov	r2, r0
   1d78a:	4621      	mov	r1, r4
   1d78c:	a802      	add	r0, sp, #8
   1d78e:	f7ff fd21 	bl	1d1d4 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   1d792:	a902      	add	r1, sp, #8
   1d794:	4652      	mov	r2, sl
   1d796:	4608      	mov	r0, r1
   1d798:	f7ff fdd6 	bl	1d348 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   1d79c:	4653      	mov	r3, sl
   1d79e:	aa02      	add	r2, sp, #8
   1d7a0:	4641      	mov	r1, r8
   1d7a2:	4640      	mov	r0, r8
   1d7a4:	f7ff fdc0 	bl	1d328 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   1d7a8:	4653      	mov	r3, sl
   1d7aa:	aa02      	add	r2, sp, #8
   1d7ac:	4621      	mov	r1, r4
   1d7ae:	4620      	mov	r0, r4
   1d7b0:	f7ff fdba 	bl	1d328 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   1d7b4:	462b      	mov	r3, r5
   1d7b6:	464a      	mov	r2, r9
   1d7b8:	4639      	mov	r1, r7
   1d7ba:	4638      	mov	r0, r7
   1d7bc:	9600      	str	r6, [sp, #0]
   1d7be:	f7ff fd09 	bl	1d1d4 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
   1d7c2:	4652      	mov	r2, sl
   1d7c4:	4639      	mov	r1, r7
   1d7c6:	a802      	add	r0, sp, #8
   1d7c8:	f7ff fdbe 	bl	1d348 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
   1d7cc:	a902      	add	r1, sp, #8
   1d7ce:	462b      	mov	r3, r5
   1d7d0:	4642      	mov	r2, r8
   1d7d2:	4608      	mov	r0, r1
   1d7d4:	9600      	str	r6, [sp, #0]
   1d7d6:	f7ff fcfd 	bl	1d1d4 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
   1d7da:	a902      	add	r1, sp, #8
   1d7dc:	462b      	mov	r3, r5
   1d7de:	4622      	mov	r2, r4
   1d7e0:	4608      	mov	r0, r1
   1d7e2:	9600      	str	r6, [sp, #0]
   1d7e4:	f7ff fcf6 	bl	1d1d4 <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
   1d7e8:	462b      	mov	r3, r5
   1d7ea:	4642      	mov	r2, r8
   1d7ec:	4621      	mov	r1, r4
   1d7ee:	4620      	mov	r0, r4
   1d7f0:	9600      	str	r6, [sp, #0]
   1d7f2:	f7ff fcef 	bl	1d1d4 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
   1d7f6:	4653      	mov	r3, sl
   1d7f8:	4622      	mov	r2, r4
   1d7fa:	4649      	mov	r1, r9
   1d7fc:	4648      	mov	r0, r9
   1d7fe:	f7ff fd93 	bl	1d328 <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
   1d802:	462b      	mov	r3, r5
   1d804:	aa02      	add	r2, sp, #8
   1d806:	4641      	mov	r1, r8
   1d808:	4620      	mov	r0, r4
   1d80a:	9600      	str	r6, [sp, #0]
   1d80c:	f7ff fce2 	bl	1d1d4 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
   1d810:	4653      	mov	r3, sl
   1d812:	4622      	mov	r2, r4
   1d814:	4639      	mov	r1, r7
   1d816:	4638      	mov	r0, r7
   1d818:	f7ff fd86 	bl	1d328 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
   1d81c:	462b      	mov	r3, r5
   1d81e:	464a      	mov	r2, r9
   1d820:	4639      	mov	r1, r7
   1d822:	4638      	mov	r0, r7
   1d824:	9600      	str	r6, [sp, #0]
   1d826:	f7ff fcd5 	bl	1d1d4 <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
   1d82a:	4632      	mov	r2, r6
   1d82c:	a902      	add	r1, sp, #8
   1d82e:	4620      	mov	r0, r4
   1d830:	f7ff fc69 	bl	1d106 <uECC_vli_set>
}
   1d834:	b00a      	add	sp, #40	; 0x28
   1d836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001d83a <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
   1d83a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d83e:	b0b1      	sub	sp, #196	; 0xc4
   1d840:	e9cd 0103 	strd	r0, r1, [sp, #12]
   1d844:	9c3b      	ldr	r4, [sp, #236]	; 0xec
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
   1d846:	f994 7000 	ldrsb.w	r7, [r4]

	uECC_vli_set(Rx[1], point, num_words);
   1d84a:	a818      	add	r0, sp, #96	; 0x60
{
   1d84c:	4692      	mov	sl, r2
	uECC_vli_set(Rx[1], point, num_words);
   1d84e:	463a      	mov	r2, r7
{
   1d850:	461d      	mov	r5, r3
	uECC_vli_set(Rx[1], point, num_words);
   1d852:	f7ff fc58 	bl	1d106 <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   1d856:	00bb      	lsls	r3, r7, #2
   1d858:	9305      	str	r3, [sp, #20]
   1d85a:	9b04      	ldr	r3, [sp, #16]
   1d85c:	eb03 0387 	add.w	r3, r3, r7, lsl #2
   1d860:	4619      	mov	r1, r3
   1d862:	a828      	add	r0, sp, #160	; 0xa0
   1d864:	9302      	str	r3, [sp, #8]
   1d866:	f7ff fc4e 	bl	1d106 <uECC_vli_set>
	wordcount_t num_words = curve->num_words;
   1d86a:	f994 6000 	ldrsb.w	r6, [r4]
	if (initial_Z) {
   1d86e:	2d00      	cmp	r5, #0
   1d870:	f000 8086 	beq.w	1d980 <EccPoint_mult+0x146>
		uECC_vli_set(z, initial_Z, num_words);
   1d874:	4632      	mov	r2, r6
   1d876:	4629      	mov	r1, r5
   1d878:	a808      	add	r0, sp, #32
   1d87a:	f7ff fc44 	bl	1d106 <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
   1d87e:	f10d 0840 	add.w	r8, sp, #64	; 0x40
   1d882:	4632      	mov	r2, r6
   1d884:	a918      	add	r1, sp, #96	; 0x60
   1d886:	4640      	mov	r0, r8
	uECC_vli_set(Y2, Y1, num_words);
   1d888:	f10d 0980 	add.w	r9, sp, #128	; 0x80
	uECC_vli_set(X2, X1, num_words);
   1d88c:	f7ff fc3b 	bl	1d106 <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
   1d890:	a928      	add	r1, sp, #160	; 0xa0
   1d892:	4648      	mov	r0, r9
   1d894:	f7ff fc37 	bl	1d106 <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
   1d898:	4623      	mov	r3, r4
   1d89a:	aa08      	add	r2, sp, #32
   1d89c:	a818      	add	r0, sp, #96	; 0x60
   1d89e:	f7ff ff46 	bl	1d72e <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
   1d8a2:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
   1d8a6:	4623      	mov	r3, r4
   1d8a8:	aa08      	add	r2, sp, #32
   1d8aa:	a928      	add	r1, sp, #160	; 0xa0
   1d8ac:	a818      	add	r0, sp, #96	; 0x60
   1d8ae:	47a8      	blx	r5
	apply_z(X2, Y2, z, curve);
   1d8b0:	4623      	mov	r3, r4
   1d8b2:	aa08      	add	r2, sp, #32
   1d8b4:	4649      	mov	r1, r9
   1d8b6:	4640      	mov	r0, r8
   1d8b8:	f7ff ff39 	bl	1d72e <apply_z>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);

	for (i = num_bits - 2; i > 0; --i) {
   1d8bc:	f9bd 50e8 	ldrsh.w	r5, [sp, #232]	; 0xe8
   1d8c0:	3d02      	subs	r5, #2
   1d8c2:	b22d      	sxth	r5, r5
   1d8c4:	2d00      	cmp	r5, #0
   1d8c6:	dc62      	bgt.n	1d98e <EccPoint_mult+0x154>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1d8c8:	f8da 5000 	ldr.w	r5, [sl]
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
	}

	nb = !uECC_vli_testBit(scalar, 0);
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   1d8cc:	9400      	str	r4, [sp, #0]
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1d8ce:	f005 0601 	and.w	r6, r5, #1
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   1d8d2:	ab10      	add	r3, sp, #64	; 0x40
   1d8d4:	eb03 1846 	add.w	r8, r3, r6, lsl #5
   1d8d8:	43ed      	mvns	r5, r5
   1d8da:	ab20      	add	r3, sp, #128	; 0x80
   1d8dc:	eb03 1646 	add.w	r6, r3, r6, lsl #5
   1d8e0:	f005 0501 	and.w	r5, r5, #1
   1d8e4:	ab10      	add	r3, sp, #64	; 0x40
   1d8e6:	eb03 1945 	add.w	r9, r3, r5, lsl #5
   1d8ea:	ab20      	add	r3, sp, #128	; 0x80
   1d8ec:	eb03 1545 	add.w	r5, r3, r5, lsl #5
   1d8f0:	462b      	mov	r3, r5
   1d8f2:	464a      	mov	r2, r9
   1d8f4:	4631      	mov	r1, r6
   1d8f6:	4640      	mov	r0, r8

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   1d8f8:	f104 0a04 	add.w	sl, r4, #4
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   1d8fc:	f7ff fe00 	bl	1d500 <XYcZ_addC>
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   1d900:	4653      	mov	r3, sl
   1d902:	aa10      	add	r2, sp, #64	; 0x40
   1d904:	a918      	add	r1, sp, #96	; 0x60
   1d906:	a808      	add	r0, sp, #32
   1d908:	9700      	str	r7, [sp, #0]
   1d90a:	f7ff fc63 	bl	1d1d4 <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
   1d90e:	a908      	add	r1, sp, #32
   1d910:	4623      	mov	r3, r4
   1d912:	4632      	mov	r2, r6
   1d914:	4608      	mov	r0, r1
   1d916:	f7ff fd07 	bl	1d328 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
   1d91a:	a908      	add	r1, sp, #32
   1d91c:	9a04      	ldr	r2, [sp, #16]
   1d91e:	4623      	mov	r3, r4
   1d920:	4608      	mov	r0, r1
   1d922:	f7ff fd01 	bl	1d328 <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
   1d926:	a908      	add	r1, sp, #32
   1d928:	463b      	mov	r3, r7
   1d92a:	4652      	mov	r2, sl
   1d92c:	4608      	mov	r0, r1
   1d92e:	f7ff fe75 	bl	1d61c <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
   1d932:	a908      	add	r1, sp, #32
   1d934:	9a02      	ldr	r2, [sp, #8]
   1d936:	4623      	mov	r3, r4
   1d938:	4608      	mov	r0, r1
   1d93a:	f7ff fcf5 	bl	1d328 <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
   1d93e:	a908      	add	r1, sp, #32
   1d940:	4623      	mov	r3, r4
   1d942:	4642      	mov	r2, r8
   1d944:	4608      	mov	r0, r1
   1d946:	f7ff fcef 	bl	1d328 <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   1d94a:	4633      	mov	r3, r6
   1d94c:	4642      	mov	r2, r8
   1d94e:	4629      	mov	r1, r5
   1d950:	4648      	mov	r0, r9
   1d952:	9400      	str	r4, [sp, #0]
   1d954:	f7ff ff0a 	bl	1d76c <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
   1d958:	4623      	mov	r3, r4
   1d95a:	aa08      	add	r2, sp, #32
   1d95c:	a920      	add	r1, sp, #128	; 0x80
   1d95e:	a810      	add	r0, sp, #64	; 0x40
   1d960:	f7ff fee5 	bl	1d72e <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
   1d964:	9803      	ldr	r0, [sp, #12]
   1d966:	463a      	mov	r2, r7
   1d968:	a910      	add	r1, sp, #64	; 0x40
   1d96a:	f7ff fbcc 	bl	1d106 <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
   1d96e:	9803      	ldr	r0, [sp, #12]
   1d970:	9b05      	ldr	r3, [sp, #20]
   1d972:	a920      	add	r1, sp, #128	; 0x80
   1d974:	4418      	add	r0, r3
   1d976:	f7ff fbc6 	bl	1d106 <uECC_vli_set>
}
   1d97a:	b031      	add	sp, #196	; 0xc4
   1d97c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uECC_vli_clear(z, num_words);
   1d980:	4631      	mov	r1, r6
   1d982:	a808      	add	r0, sp, #32
   1d984:	f7ff fb7c 	bl	1d080 <uECC_vli_clear>
		z[0] = 1;
   1d988:	2301      	movs	r3, #1
   1d98a:	9308      	str	r3, [sp, #32]
   1d98c:	e777      	b.n	1d87e <EccPoint_mult+0x44>
		nb = !uECC_vli_testBit(scalar, i);
   1d98e:	4629      	mov	r1, r5
   1d990:	4650      	mov	r0, sl
   1d992:	f7ff fb8f 	bl	1d0b4 <uECC_vli_testBit>
   1d996:	fab0 f680 	clz	r6, r0
   1d99a:	0976      	lsrs	r6, r6, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   1d99c:	f1c6 0101 	rsb	r1, r6, #1
   1d9a0:	eb08 1b46 	add.w	fp, r8, r6, lsl #5
   1d9a4:	eb09 1646 	add.w	r6, r9, r6, lsl #5
   1d9a8:	eb08 1041 	add.w	r0, r8, r1, lsl #5
   1d9ac:	4633      	mov	r3, r6
   1d9ae:	eb09 1141 	add.w	r1, r9, r1, lsl #5
   1d9b2:	465a      	mov	r2, fp
   1d9b4:	9400      	str	r4, [sp, #0]
   1d9b6:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1d9ba:	f7ff fda1 	bl	1d500 <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   1d9be:	9907      	ldr	r1, [sp, #28]
   1d9c0:	9806      	ldr	r0, [sp, #24]
   1d9c2:	9400      	str	r4, [sp, #0]
   1d9c4:	460b      	mov	r3, r1
   1d9c6:	4602      	mov	r2, r0
   1d9c8:	4631      	mov	r1, r6
   1d9ca:	4658      	mov	r0, fp
   1d9cc:	f7ff fece 	bl	1d76c <XYcZ_add>
	for (i = num_bits - 2; i > 0; --i) {
   1d9d0:	3d01      	subs	r5, #1
   1d9d2:	e776      	b.n	1d8c2 <EccPoint_mult+0x88>

0001d9d4 <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
   1d9d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   1d9d8:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
   1d9dc:	f119 081f 	adds.w	r8, r9, #31
{
   1d9e0:	461d      	mov	r5, r3
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   1d9e2:	bf48      	it	mi
   1d9e4:	f109 083e 	addmi.w	r8, r9, #62	; 0x3e
{
   1d9e8:	460e      	mov	r6, r1
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   1d9ea:	f348 1847 	sbfx	r8, r8, #5, #8

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   1d9ee:	3524      	adds	r5, #36	; 0x24
   1d9f0:	4601      	mov	r1, r0
{
   1d9f2:	4617      	mov	r7, r2
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   1d9f4:	4643      	mov	r3, r8
   1d9f6:	462a      	mov	r2, r5
   1d9f8:	4630      	mov	r0, r6
   1d9fa:	f7ff fa9a 	bl	1cf32 <uECC_vli_add>
   1d9fe:	4604      	mov	r4, r0
   1da00:	b990      	cbnz	r0, 1da28 <regularize_k+0x54>
   1da02:	ebb9 1f48 	cmp.w	r9, r8, lsl #5
   1da06:	da06      	bge.n	1da16 <regularize_k+0x42>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
   1da08:	4649      	mov	r1, r9
   1da0a:	4630      	mov	r0, r6
   1da0c:	f7ff fb52 	bl	1d0b4 <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
   1da10:	1e04      	subs	r4, r0, #0
   1da12:	bf18      	it	ne
   1da14:	2401      	movne	r4, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
   1da16:	4643      	mov	r3, r8
   1da18:	462a      	mov	r2, r5
   1da1a:	4631      	mov	r1, r6
   1da1c:	4638      	mov	r0, r7
   1da1e:	f7ff fa88 	bl	1cf32 <uECC_vli_add>

	return carry;
}
   1da22:	4620      	mov	r0, r4
   1da24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   1da28:	2401      	movs	r4, #1
   1da2a:	e7f4      	b.n	1da16 <regularize_k+0x42>

0001da2c <EccPoint_compute_public_key>:

uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
					uECC_word_t *private_key,
					uECC_Curve curve)
{
   1da2c:	b530      	push	{r4, r5, lr}
   1da2e:	4614      	mov	r4, r2
   1da30:	b095      	sub	sp, #84	; 0x54
   1da32:	4605      	mov	r5, r0

	uECC_word_t tmp1[NUM_ECC_WORDS];
 	uECC_word_t tmp2[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {tmp1, tmp2};
   1da34:	aa0c      	add	r2, sp, #48	; 0x30
	uECC_word_t carry;

	/* Regularize the bitcount for the private key so that attackers cannot
	 * use a side channel attack to learn the number of leading zeros. */
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   1da36:	4623      	mov	r3, r4
{
   1da38:	4608      	mov	r0, r1
	uECC_word_t *p2[2] = {tmp1, tmp2};
   1da3a:	a904      	add	r1, sp, #16
   1da3c:	9102      	str	r1, [sp, #8]
   1da3e:	9203      	str	r2, [sp, #12]
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   1da40:	f7ff ffc8 	bl	1d9d4 <regularize_k>

	EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
   1da44:	fab0 f380 	clz	r3, r0
   1da48:	095b      	lsrs	r3, r3, #5
   1da4a:	aa14      	add	r2, sp, #80	; 0x50
   1da4c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   1da50:	8863      	ldrh	r3, [r4, #2]
   1da52:	9401      	str	r4, [sp, #4]
   1da54:	3301      	adds	r3, #1
   1da56:	b21b      	sxth	r3, r3
   1da58:	9300      	str	r3, [sp, #0]
   1da5a:	f852 2c48 	ldr.w	r2, [r2, #-72]
   1da5e:	2300      	movs	r3, #0
   1da60:	f104 0144 	add.w	r1, r4, #68	; 0x44
   1da64:	4628      	mov	r0, r5
   1da66:	f7ff fee8 	bl	1d83a <EccPoint_mult>

	if (EccPoint_isZero(result, curve)) {
   1da6a:	4621      	mov	r1, r4
   1da6c:	4628      	mov	r0, r5
   1da6e:	f7ff fe59 	bl	1d724 <EccPoint_isZero>
		return 0;
	}
	return 1;
}
   1da72:	fab0 f080 	clz	r0, r0
   1da76:	0940      	lsrs	r0, r0, #5
   1da78:	b015      	add	sp, #84	; 0x54
   1da7a:	bd30      	pop	{r4, r5, pc}

0001da7c <uECC_vli_nativeToBytes>:

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
   1da7c:	b5f0      	push	{r4, r5, r6, r7, lr}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
   1da7e:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   1da80:	1e4f      	subs	r7, r1, #1
   1da82:	b26c      	sxtb	r4, r5
	for (i = 0; i < num_bytes; ++i) {
   1da84:	428c      	cmp	r4, r1
   1da86:	f105 0501 	add.w	r5, r5, #1
   1da8a:	db00      	blt.n	1da8e <uECC_vli_nativeToBytes+0x12>
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
	}
}
   1da8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   1da8e:	1b3b      	subs	r3, r7, r4
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
   1da90:	f023 0603 	bic.w	r6, r3, #3
   1da94:	f003 0303 	and.w	r3, r3, #3
   1da98:	5996      	ldr	r6, [r2, r6]
   1da9a:	00db      	lsls	r3, r3, #3
   1da9c:	fa26 f303 	lsr.w	r3, r6, r3
   1daa0:	5503      	strb	r3, [r0, r4]
	for (i = 0; i < num_bytes; ++i) {
   1daa2:	e7ee      	b.n	1da82 <uECC_vli_nativeToBytes+0x6>

0001daa4 <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
   1daa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1daa6:	460e      	mov	r6, r1
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   1daa8:	1cd1      	adds	r1, r2, #3
   1daaa:	bf48      	it	mi
   1daac:	1d91      	addmi	r1, r2, #6
   1daae:	f341 0187 	sbfx	r1, r1, #2, #8
{
   1dab2:	4614      	mov	r4, r2
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   1dab4:	f7ff fae4 	bl	1d080 <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
   1dab8:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   1daba:	1e67      	subs	r7, r4, #1
   1dabc:	b26a      	sxtb	r2, r5
	for (i = 0; i < num_bytes; ++i) {
   1dabe:	42a2      	cmp	r2, r4
   1dac0:	f105 0501 	add.w	r5, r5, #1
   1dac4:	db00      	blt.n	1dac8 <uECC_vli_bytesToNative+0x24>
		native[b / uECC_WORD_SIZE] |=
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
  	}
}
   1dac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   1dac8:	1abb      	subs	r3, r7, r2
		native[b / uECC_WORD_SIZE] |=
   1daca:	f023 0103 	bic.w	r1, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
   1dace:	5cb2      	ldrb	r2, [r6, r2]
   1dad0:	f003 0303 	and.w	r3, r3, #3
   1dad4:	00db      	lsls	r3, r3, #3
   1dad6:	fa02 f303 	lsl.w	r3, r2, r3
		native[b / uECC_WORD_SIZE] |=
   1dada:	5842      	ldr	r2, [r0, r1]
   1dadc:	431a      	orrs	r2, r3
   1dade:	5042      	str	r2, [r0, r1]
	for (i = 0; i < num_bytes; ++i) {
   1dae0:	e7ec      	b.n	1dabc <uECC_vli_bytesToNative+0x18>

0001dae2 <uECC_valid_point>:
	return 0;
}


int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve)
{
   1dae2:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dae4:	b091      	sub	sp, #68	; 0x44
	uECC_word_t tmp1[NUM_ECC_WORDS];
	uECC_word_t tmp2[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   1dae6:	f991 6000 	ldrsb.w	r6, [r1]
{
   1daea:	4605      	mov	r5, r0
   1daec:	460c      	mov	r4, r1

	/* The point at infinity is invalid. */
	if (EccPoint_isZero(point, curve)) {
   1daee:	f7ff fe19 	bl	1d724 <EccPoint_isZero>
   1daf2:	bb28      	cbnz	r0, 1db40 <uECC_valid_point+0x5e>
		return -1;
	}

	/* x and y must be smaller than p. */
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   1daf4:	1d27      	adds	r7, r4, #4
   1daf6:	4632      	mov	r2, r6
   1daf8:	4629      	mov	r1, r5
   1dafa:	4638      	mov	r0, r7
   1dafc:	f7ff fb0f 	bl	1d11e <uECC_vli_cmp_unsafe>
   1db00:	2801      	cmp	r0, #1
   1db02:	d120      	bne.n	1db46 <uECC_valid_point+0x64>
		uECC_vli_cmp_unsafe(curve->p, point + num_words, num_words) != 1) {
   1db04:	4632      	mov	r2, r6
   1db06:	eb05 0186 	add.w	r1, r5, r6, lsl #2
   1db0a:	4638      	mov	r0, r7
   1db0c:	f7ff fb07 	bl	1d11e <uECC_vli_cmp_unsafe>
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   1db10:	2801      	cmp	r0, #1
   1db12:	d118      	bne.n	1db46 <uECC_valid_point+0x64>
		return -2;
	}

	uECC_vli_modSquare_fast(tmp1, point + num_words, curve);
   1db14:	4622      	mov	r2, r4
   1db16:	4668      	mov	r0, sp
   1db18:	f7ff fc16 	bl	1d348 <uECC_vli_modSquare_fast>
	curve->x_side(tmp2, point, curve); /* tmp2 = x^3 + ax + b */
   1db1c:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   1db20:	4622      	mov	r2, r4
   1db22:	4629      	mov	r1, r5
   1db24:	a808      	add	r0, sp, #32
   1db26:	4798      	blx	r3

	/* Make sure that y^2 == x^3 + ax + b */
	if (uECC_vli_equal(tmp1, tmp2, num_words) != 0)
   1db28:	4632      	mov	r2, r6
   1db2a:	a908      	add	r1, sp, #32
   1db2c:	4668      	mov	r0, sp
   1db2e:	f7ff fb0b 	bl	1d148 <uECC_vli_equal>
		return -3;
   1db32:	2800      	cmp	r0, #0
   1db34:	bf0c      	ite	eq
   1db36:	2000      	moveq	r0, #0
   1db38:	f06f 0002 	mvnne.w	r0, #2

	return 0;
}
   1db3c:	b011      	add	sp, #68	; 0x44
   1db3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
   1db40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1db44:	e7fa      	b.n	1db3c <uECC_valid_point+0x5a>
		return -2;
   1db46:	f06f 0001 	mvn.w	r0, #1
   1db4a:	e7f7      	b.n	1db3c <uECC_valid_point+0x5a>

0001db4c <uECC_valid_public_key>:

int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve)
{
   1db4c:	b570      	push	{r4, r5, r6, lr}
   1db4e:	460c      	mov	r4, r1
   1db50:	b090      	sub	sp, #64	; 0x40

	uECC_word_t _public[NUM_ECC_WORDS * 2];

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
	uECC_vli_bytesToNative(
	_public + curve->num_words,
   1db52:	4626      	mov	r6, r4
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   1db54:	f991 2001 	ldrsb.w	r2, [r1, #1]
{
   1db58:	4605      	mov	r5, r0
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   1db5a:	4601      	mov	r1, r0
   1db5c:	4668      	mov	r0, sp
   1db5e:	f7ff ffa1 	bl	1daa4 <uECC_vli_bytesToNative>
	public_key + curve->num_bytes,
   1db62:	f994 2001 	ldrsb.w	r2, [r4, #1]
	_public + curve->num_words,
   1db66:	f916 0b44 	ldrsb.w	r0, [r6], #68
	uECC_vli_bytesToNative(
   1db6a:	18a9      	adds	r1, r5, r2
   1db6c:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
   1db70:	f7ff ff98 	bl	1daa4 <uECC_vli_bytesToNative>
	curve->num_bytes);

	if (uECC_vli_cmp_unsafe(_public, curve->G, NUM_ECC_WORDS * 2) == 0) {
   1db74:	2210      	movs	r2, #16
   1db76:	4631      	mov	r1, r6
   1db78:	4668      	mov	r0, sp
   1db7a:	f7ff fad0 	bl	1d11e <uECC_vli_cmp_unsafe>
   1db7e:	b128      	cbz	r0, 1db8c <uECC_valid_public_key+0x40>
		return -4;
	}

	return uECC_valid_point(_public, curve);
   1db80:	4621      	mov	r1, r4
   1db82:	4668      	mov	r0, sp
   1db84:	f7ff ffad 	bl	1dae2 <uECC_valid_point>
}
   1db88:	b010      	add	sp, #64	; 0x40
   1db8a:	bd70      	pop	{r4, r5, r6, pc}
		return -4;
   1db8c:	f06f 0003 	mvn.w	r0, #3
   1db90:	e7fa      	b.n	1db88 <uECC_valid_public_key+0x3c>

0001db92 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   1db92:	78cb      	ldrb	r3, [r1, #3]
   1db94:	7802      	ldrb	r2, [r0, #0]
   1db96:	4053      	eors	r3, r2
   1db98:	7003      	strb	r3, [r0, #0]
   1db9a:	884b      	ldrh	r3, [r1, #2]
   1db9c:	7842      	ldrb	r2, [r0, #1]
   1db9e:	4053      	eors	r3, r2
   1dba0:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   1dba2:	680a      	ldr	r2, [r1, #0]
   1dba4:	7883      	ldrb	r3, [r0, #2]
   1dba6:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1dbaa:	7083      	strb	r3, [r0, #2]
   1dbac:	680a      	ldr	r2, [r1, #0]
   1dbae:	78c3      	ldrb	r3, [r0, #3]
   1dbb0:	4053      	eors	r3, r2
   1dbb2:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   1dbb4:	79cb      	ldrb	r3, [r1, #7]
   1dbb6:	7902      	ldrb	r2, [r0, #4]
   1dbb8:	4053      	eors	r3, r2
   1dbba:	7103      	strb	r3, [r0, #4]
   1dbbc:	88cb      	ldrh	r3, [r1, #6]
   1dbbe:	7942      	ldrb	r2, [r0, #5]
   1dbc0:	4053      	eors	r3, r2
   1dbc2:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   1dbc4:	684a      	ldr	r2, [r1, #4]
   1dbc6:	7983      	ldrb	r3, [r0, #6]
   1dbc8:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1dbcc:	7183      	strb	r3, [r0, #6]
   1dbce:	684a      	ldr	r2, [r1, #4]
   1dbd0:	79c3      	ldrb	r3, [r0, #7]
   1dbd2:	4053      	eors	r3, r2
   1dbd4:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   1dbd6:	7acb      	ldrb	r3, [r1, #11]
   1dbd8:	7a02      	ldrb	r2, [r0, #8]
   1dbda:	4053      	eors	r3, r2
   1dbdc:	7203      	strb	r3, [r0, #8]
   1dbde:	7a42      	ldrb	r2, [r0, #9]
   1dbe0:	894b      	ldrh	r3, [r1, #10]
   1dbe2:	4053      	eors	r3, r2
   1dbe4:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   1dbe6:	688a      	ldr	r2, [r1, #8]
   1dbe8:	7a83      	ldrb	r3, [r0, #10]
   1dbea:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1dbee:	7283      	strb	r3, [r0, #10]
   1dbf0:	688a      	ldr	r2, [r1, #8]
   1dbf2:	7ac3      	ldrb	r3, [r0, #11]
   1dbf4:	4053      	eors	r3, r2
   1dbf6:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   1dbf8:	7bcb      	ldrb	r3, [r1, #15]
   1dbfa:	7b02      	ldrb	r2, [r0, #12]
   1dbfc:	4053      	eors	r3, r2
   1dbfe:	7303      	strb	r3, [r0, #12]
   1dc00:	89cb      	ldrh	r3, [r1, #14]
   1dc02:	7b42      	ldrb	r2, [r0, #13]
   1dc04:	4053      	eors	r3, r2
   1dc06:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   1dc08:	68ca      	ldr	r2, [r1, #12]
   1dc0a:	7b83      	ldrb	r3, [r0, #14]
   1dc0c:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1dc10:	7383      	strb	r3, [r0, #14]
   1dc12:	68ca      	ldr	r2, [r1, #12]
   1dc14:	7bc3      	ldrb	r3, [r0, #15]
   1dc16:	4053      	eors	r3, r2
   1dc18:	73c3      	strb	r3, [r0, #15]
}
   1dc1a:	4770      	bx	lr

0001dc1c <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   1dc1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1dc1e:	7802      	ldrb	r2, [r0, #0]
   1dc20:	f88d 2000 	strb.w	r2, [sp]
   1dc24:	7942      	ldrb	r2, [r0, #5]
   1dc26:	f88d 2001 	strb.w	r2, [sp, #1]
   1dc2a:	7a82      	ldrb	r2, [r0, #10]
   1dc2c:	f88d 2002 	strb.w	r2, [sp, #2]
   1dc30:	7bc2      	ldrb	r2, [r0, #15]
   1dc32:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   1dc36:	7902      	ldrb	r2, [r0, #4]
   1dc38:	f88d 2004 	strb.w	r2, [sp, #4]
   1dc3c:	7a42      	ldrb	r2, [r0, #9]
   1dc3e:	f88d 2005 	strb.w	r2, [sp, #5]
   1dc42:	7b82      	ldrb	r2, [r0, #14]
   1dc44:	f88d 2006 	strb.w	r2, [sp, #6]
   1dc48:	78c2      	ldrb	r2, [r0, #3]
   1dc4a:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   1dc4e:	7a02      	ldrb	r2, [r0, #8]
   1dc50:	f88d 2008 	strb.w	r2, [sp, #8]
   1dc54:	7b42      	ldrb	r2, [r0, #13]
   1dc56:	f88d 2009 	strb.w	r2, [sp, #9]
   1dc5a:	7882      	ldrb	r2, [r0, #2]
   1dc5c:	f88d 200a 	strb.w	r2, [sp, #10]
   1dc60:	79c2      	ldrb	r2, [r0, #7]
   1dc62:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1dc66:	7b02      	ldrb	r2, [r0, #12]
   1dc68:	f88d 200c 	strb.w	r2, [sp, #12]
   1dc6c:	7842      	ldrb	r2, [r0, #1]
   1dc6e:	7ac3      	ldrb	r3, [r0, #11]
   1dc70:	f88d 200d 	strb.w	r2, [sp, #13]
   1dc74:	7982      	ldrb	r2, [r0, #6]
   1dc76:	f88d 200e 	strb.w	r2, [sp, #14]
   1dc7a:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1dc7e:	2310      	movs	r3, #16
   1dc80:	466a      	mov	r2, sp
   1dc82:	4619      	mov	r1, r3
   1dc84:	f7ff f891 	bl	1cdaa <_copy>
}
   1dc88:	b005      	add	sp, #20
   1dc8a:	f85d fb04 	ldr.w	pc, [sp], #4

0001dc8e <mult_row_column>:
{
   1dc8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1dc90:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1dc92:	7808      	ldrb	r0, [r1, #0]
{
   1dc94:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1dc96:	f7ff f897 	bl	1cdc8 <_double_byte>
   1dc9a:	4605      	mov	r5, r0
   1dc9c:	7860      	ldrb	r0, [r4, #1]
   1dc9e:	f7ff f893 	bl	1cdc8 <_double_byte>
   1dca2:	78a2      	ldrb	r2, [r4, #2]
   1dca4:	7863      	ldrb	r3, [r4, #1]
   1dca6:	4053      	eors	r3, r2
   1dca8:	78e2      	ldrb	r2, [r4, #3]
   1dcaa:	4053      	eors	r3, r2
   1dcac:	405d      	eors	r5, r3
   1dcae:	4045      	eors	r5, r0
   1dcb0:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   1dcb2:	7860      	ldrb	r0, [r4, #1]
   1dcb4:	7827      	ldrb	r7, [r4, #0]
   1dcb6:	f7ff f887 	bl	1cdc8 <_double_byte>
   1dcba:	4605      	mov	r5, r0
   1dcbc:	78a0      	ldrb	r0, [r4, #2]
   1dcbe:	f7ff f883 	bl	1cdc8 <_double_byte>
   1dcc2:	78a3      	ldrb	r3, [r4, #2]
   1dcc4:	405f      	eors	r7, r3
   1dcc6:	78e3      	ldrb	r3, [r4, #3]
   1dcc8:	405f      	eors	r7, r3
   1dcca:	407d      	eors	r5, r7
   1dccc:	4045      	eors	r5, r0
   1dcce:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   1dcd0:	78a0      	ldrb	r0, [r4, #2]
   1dcd2:	7865      	ldrb	r5, [r4, #1]
   1dcd4:	7827      	ldrb	r7, [r4, #0]
   1dcd6:	f7ff f877 	bl	1cdc8 <_double_byte>
   1dcda:	406f      	eors	r7, r5
   1dcdc:	4605      	mov	r5, r0
   1dcde:	78e0      	ldrb	r0, [r4, #3]
   1dce0:	f7ff f872 	bl	1cdc8 <_double_byte>
   1dce4:	78e3      	ldrb	r3, [r4, #3]
   1dce6:	405f      	eors	r7, r3
   1dce8:	407d      	eors	r5, r7
   1dcea:	4045      	eors	r5, r0
   1dcec:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   1dcee:	7820      	ldrb	r0, [r4, #0]
   1dcf0:	f7ff f86a 	bl	1cdc8 <_double_byte>
   1dcf4:	7863      	ldrb	r3, [r4, #1]
   1dcf6:	7825      	ldrb	r5, [r4, #0]
   1dcf8:	405d      	eors	r5, r3
   1dcfa:	78a3      	ldrb	r3, [r4, #2]
   1dcfc:	405d      	eors	r5, r3
   1dcfe:	4045      	eors	r5, r0
   1dd00:	78e0      	ldrb	r0, [r4, #3]
   1dd02:	f7ff f861 	bl	1cdc8 <_double_byte>
   1dd06:	b2ed      	uxtb	r5, r5
   1dd08:	4045      	eors	r5, r0
   1dd0a:	70f5      	strb	r5, [r6, #3]
}
   1dd0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001dd0e <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   1dd0e:	b570      	push	{r4, r5, r6, lr}
   1dd10:	4614      	mov	r4, r2
   1dd12:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   1dd14:	4605      	mov	r5, r0
   1dd16:	2800      	cmp	r0, #0
   1dd18:	d049      	beq.n	1ddae <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   1dd1a:	2900      	cmp	r1, #0
   1dd1c:	d049      	beq.n	1ddb2 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   1dd1e:	2a00      	cmp	r2, #0
   1dd20:	d049      	beq.n	1ddb6 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   1dd22:	2310      	movs	r3, #16
   1dd24:	460a      	mov	r2, r1
   1dd26:	4668      	mov	r0, sp
   1dd28:	4619      	mov	r1, r3
   1dd2a:	f7ff f83e 	bl	1cdaa <_copy>
	add_round_key(state, s->words);
   1dd2e:	4621      	mov	r1, r4
   1dd30:	4668      	mov	r0, sp
   1dd32:	f7ff ff2e 	bl	1db92 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   1dd36:	3410      	adds	r4, #16
   1dd38:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   1dd3c:	4668      	mov	r0, sp
   1dd3e:	f7e7 fc03 	bl	5548 <sub_bytes>
		shift_rows(state);
   1dd42:	4668      	mov	r0, sp
   1dd44:	f7ff ff6a 	bl	1dc1c <shift_rows>
	mult_row_column(t, s);
   1dd48:	4669      	mov	r1, sp
   1dd4a:	a804      	add	r0, sp, #16
   1dd4c:	f7ff ff9f 	bl	1dc8e <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   1dd50:	a901      	add	r1, sp, #4
   1dd52:	a805      	add	r0, sp, #20
   1dd54:	f7ff ff9b 	bl	1dc8e <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   1dd58:	a902      	add	r1, sp, #8
   1dd5a:	a806      	add	r0, sp, #24
   1dd5c:	f7ff ff97 	bl	1dc8e <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   1dd60:	a903      	add	r1, sp, #12
   1dd62:	a807      	add	r0, sp, #28
   1dd64:	f7ff ff93 	bl	1dc8e <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1dd68:	2310      	movs	r3, #16
   1dd6a:	4619      	mov	r1, r3
   1dd6c:	eb0d 0203 	add.w	r2, sp, r3
   1dd70:	4668      	mov	r0, sp
   1dd72:	f7ff f81a 	bl	1cdaa <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   1dd76:	4621      	mov	r1, r4
   1dd78:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   1dd7a:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   1dd7c:	f7ff ff09 	bl	1db92 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   1dd80:	42a6      	cmp	r6, r4
   1dd82:	d1db      	bne.n	1dd3c <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   1dd84:	f7e7 fbe0 	bl	5548 <sub_bytes>
	shift_rows(state);
   1dd88:	4668      	mov	r0, sp
   1dd8a:	f7ff ff47 	bl	1dc1c <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   1dd8e:	4631      	mov	r1, r6
   1dd90:	4668      	mov	r0, sp
   1dd92:	f7ff fefe 	bl	1db92 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   1dd96:	2310      	movs	r3, #16
   1dd98:	4619      	mov	r1, r3
   1dd9a:	466a      	mov	r2, sp
   1dd9c:	4628      	mov	r0, r5
   1dd9e:	f7ff f804 	bl	1cdaa <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   1dda2:	4668      	mov	r0, sp
   1dda4:	2210      	movs	r2, #16
   1dda6:	2100      	movs	r1, #0
   1dda8:	f7ff f80c 	bl	1cdc4 <_set>

	return TC_CRYPTO_SUCCESS;
   1ddac:	2001      	movs	r0, #1
}
   1ddae:	b008      	add	sp, #32
   1ddb0:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1ddb2:	4608      	mov	r0, r1
   1ddb4:	e7fb      	b.n	1ddae <tc_aes_encrypt+0xa0>
   1ddb6:	4610      	mov	r0, r2
   1ddb8:	e7f9      	b.n	1ddae <tc_aes_encrypt+0xa0>

0001ddba <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   1ddba:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1ddbc:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   1ddbe:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1ddc0:	f912 3b10 	ldrsb.w	r3, [r2], #16
   1ddc4:	2b00      	cmp	r3, #0
   1ddc6:	bfb4      	ite	lt
   1ddc8:	2387      	movlt	r3, #135	; 0x87
   1ddca:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   1ddcc:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   1ddd0:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   1ddd4:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   1ddd6:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   1ddda:	d002      	beq.n	1dde2 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   1dddc:	7813      	ldrb	r3, [r2, #0]
   1ddde:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   1dde0:	e7f4      	b.n	1ddcc <gf_double+0x12>
	}
}
   1dde2:	bd10      	pop	{r4, pc}

0001dde4 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   1dde4:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   1dde6:	b120      	cbz	r0, 1ddf2 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   1dde8:	2258      	movs	r2, #88	; 0x58
   1ddea:	2100      	movs	r1, #0
   1ddec:	f7fe ffea 	bl	1cdc4 <_set>
   1ddf0:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1ddf2:	bd08      	pop	{r3, pc}

0001ddf4 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   1ddf4:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1ddf6:	4604      	mov	r4, r0
   1ddf8:	b188      	cbz	r0, 1de1e <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1ddfa:	2210      	movs	r2, #16
   1ddfc:	2100      	movs	r1, #0
   1ddfe:	f7fe ffe1 	bl	1cdc4 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   1de02:	2210      	movs	r2, #16
   1de04:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1de08:	2100      	movs	r1, #0
   1de0a:	f7fe ffdb 	bl	1cdc4 <_set>
	s->leftover_offset = 0;
   1de0e:	2300      	movs	r3, #0
   1de10:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   1de12:	2200      	movs	r2, #0
   1de14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1de18:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   1de1c:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1de1e:	bd10      	pop	{r4, pc}

0001de20 <tc_cmac_setup>:
{
   1de20:	b570      	push	{r4, r5, r6, lr}
   1de22:	460d      	mov	r5, r1
   1de24:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   1de26:	4604      	mov	r4, r0
   1de28:	b310      	cbz	r0, 1de70 <tc_cmac_setup+0x50>
   1de2a:	b311      	cbz	r1, 1de72 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   1de2c:	2258      	movs	r2, #88	; 0x58
   1de2e:	2100      	movs	r1, #0
   1de30:	f7fe ffc8 	bl	1cdc4 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   1de34:	4629      	mov	r1, r5
	s->sched = sched;
   1de36:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   1de38:	4630      	mov	r0, r6
   1de3a:	f7e7 fb91 	bl	5560 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1de3e:	2210      	movs	r2, #16
   1de40:	2100      	movs	r1, #0
   1de42:	4620      	mov	r0, r4
   1de44:	f7fe ffbe 	bl	1cdc4 <_set>
	gf_double (s->K1, s->iv);
   1de48:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   1de4c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1de4e:	4621      	mov	r1, r4
   1de50:	4620      	mov	r0, r4
   1de52:	f7ff ff5c 	bl	1dd0e <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   1de56:	4621      	mov	r1, r4
   1de58:	4628      	mov	r0, r5
   1de5a:	f7ff ffae 	bl	1ddba <gf_double>
	gf_double (s->K2, s->K1);
   1de5e:	4629      	mov	r1, r5
   1de60:	f104 0020 	add.w	r0, r4, #32
   1de64:	f7ff ffa9 	bl	1ddba <gf_double>
	tc_cmac_init(s);
   1de68:	4620      	mov	r0, r4
   1de6a:	f7ff ffc3 	bl	1ddf4 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   1de6e:	2001      	movs	r0, #1
}
   1de70:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1de72:	4608      	mov	r0, r1
   1de74:	e7fc      	b.n	1de70 <tc_cmac_setup+0x50>

0001de76 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   1de76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1de7a:	460d      	mov	r5, r1
   1de7c:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1de7e:	4604      	mov	r4, r0
   1de80:	2800      	cmp	r0, #0
   1de82:	d061      	beq.n	1df48 <tc_cmac_update+0xd2>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   1de84:	b912      	cbnz	r2, 1de8c <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   1de86:	2001      	movs	r0, #1
}
   1de88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   1de8c:	2900      	cmp	r1, #0
   1de8e:	d05b      	beq.n	1df48 <tc_cmac_update+0xd2>
	if (s->countdown == 0) {
   1de90:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   1de94:	ea53 0102 	orrs.w	r1, r3, r2
   1de98:	d056      	beq.n	1df48 <tc_cmac_update+0xd2>
	s->countdown--;
   1de9a:	3b01      	subs	r3, #1
	if (s->leftover_offset > 0) {
   1de9c:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   1dea0:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
   1dea4:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   1dea8:	f1b8 0f00 	cmp.w	r8, #0
   1deac:	d02a      	beq.n	1df04 <tc_cmac_update+0x8e>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   1deae:	f1c8 0710 	rsb	r7, r8, #16
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1deb2:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   1deb6:	42be      	cmp	r6, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1deb8:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   1deba:	d208      	bcs.n	1dece <tc_cmac_update+0x58>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1debc:	462a      	mov	r2, r5
   1debe:	4633      	mov	r3, r6
   1dec0:	4631      	mov	r1, r6
   1dec2:	f7fe ff72 	bl	1cdaa <_copy>
			s->leftover_offset += data_length;
   1dec6:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1dec8:	4432      	add	r2, r6
   1deca:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   1decc:	e7db      	b.n	1de86 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   1dece:	463b      	mov	r3, r7
   1ded0:	462a      	mov	r2, r5
   1ded2:	4639      	mov	r1, r7
   1ded4:	f7fe ff69 	bl	1cdaa <_copy>
		data_length -= remaining_space;
   1ded8:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   1deda:	2300      	movs	r3, #0
   1dedc:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   1dede:	4446      	add	r6, r8
		data += remaining_space;
   1dee0:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1dee2:	1e63      	subs	r3, r4, #1
   1dee4:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   1dee8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1deec:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1def0:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   1def2:	ea82 0200 	eor.w	r2, r2, r0
   1def6:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1def8:	d1f6      	bne.n	1dee8 <tc_cmac_update+0x72>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1defa:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1defc:	4621      	mov	r1, r4
   1defe:	4620      	mov	r0, r4
   1df00:	f7ff ff05 	bl	1dd0e <tc_aes_encrypt>
   1df04:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   1df08:	2e10      	cmp	r6, #16
   1df0a:	d80a      	bhi.n	1df22 <tc_cmac_update+0xac>
	if (data_length > 0) {
   1df0c:	2e00      	cmp	r6, #0
   1df0e:	d0ba      	beq.n	1de86 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   1df10:	4633      	mov	r3, r6
   1df12:	462a      	mov	r2, r5
   1df14:	4631      	mov	r1, r6
   1df16:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1df1a:	f7fe ff46 	bl	1cdaa <_copy>
		s->leftover_offset = data_length;
   1df1e:	6466      	str	r6, [r4, #68]	; 0x44
   1df20:	e7b1      	b.n	1de86 <tc_cmac_update+0x10>
   1df22:	1e63      	subs	r3, r4, #1
   1df24:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   1df26:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1df2a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1df2e:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   1df30:	ea82 0200 	eor.w	r2, r2, r0
   1df34:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1df36:	d1f6      	bne.n	1df26 <tc_cmac_update+0xb0>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1df38:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1df3a:	4621      	mov	r1, r4
   1df3c:	4620      	mov	r0, r4
   1df3e:	f7ff fee6 	bl	1dd0e <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   1df42:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   1df44:	3e10      	subs	r6, #16
   1df46:	e7df      	b.n	1df08 <tc_cmac_update+0x92>
		return TC_CRYPTO_FAIL;
   1df48:	2000      	movs	r0, #0
   1df4a:	e79d      	b.n	1de88 <tc_cmac_update+0x12>

0001df4c <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   1df4c:	b570      	push	{r4, r5, r6, lr}
   1df4e:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   1df50:	4605      	mov	r5, r0
   1df52:	b1e8      	cbz	r0, 1df90 <tc_cmac_final+0x44>
   1df54:	b369      	cbz	r1, 1dfb2 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   1df56:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   1df58:	2a10      	cmp	r2, #16
   1df5a:	d11a      	bne.n	1df92 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   1df5c:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1df5e:	1e63      	subs	r3, r4, #1
   1df60:	3901      	subs	r1, #1
   1df62:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1df66:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1df6a:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   1df6e:	4072      	eors	r2, r6
   1df70:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1df74:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1df76:	ea82 0206 	eor.w	r2, r2, r6
   1df7a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1df7c:	d1f3      	bne.n	1df66 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   1df7e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1df80:	4621      	mov	r1, r4
   1df82:	4628      	mov	r0, r5
   1df84:	f7ff fec3 	bl	1dd0e <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   1df88:	4620      	mov	r0, r4
   1df8a:	f7ff ff2b 	bl	1dde4 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   1df8e:	2001      	movs	r0, #1
}
   1df90:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   1df92:	f102 0030 	add.w	r0, r2, #48	; 0x30
   1df96:	2100      	movs	r1, #0
   1df98:	f1c2 0210 	rsb	r2, r2, #16
   1df9c:	4420      	add	r0, r4
   1df9e:	f7fe ff11 	bl	1cdc4 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   1dfa2:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1dfa4:	4423      	add	r3, r4
   1dfa6:	2280      	movs	r2, #128	; 0x80
   1dfa8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   1dfac:	f104 0120 	add.w	r1, r4, #32
   1dfb0:	e7d5      	b.n	1df5e <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   1dfb2:	4608      	mov	r0, r1
   1dfb4:	e7ec      	b.n	1df90 <tc_cmac_final+0x44>

0001dfb6 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   1dfb6:	f007 bbfd 	b.w	257b4 <z_fatal_error>

0001dfba <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   1dfba:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   1dfbc:	6800      	ldr	r0, [r0, #0]
   1dfbe:	f007 bbf9 	b.w	257b4 <z_fatal_error>

0001dfc2 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1dfc2:	2100      	movs	r1, #0
   1dfc4:	2001      	movs	r0, #1
   1dfc6:	f7ff bff6 	b.w	1dfb6 <z_arm_fatal_error>

0001dfca <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   1dfca:	b508      	push	{r3, lr}
	handler();
   1dfcc:	f7e7 fb90 	bl	56f0 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   1dfd0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   1dfd4:	f7e7 bc70 	b.w	58b8 <z_arm_exc_exit>

0001dfd8 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   1dfd8:	4603      	mov	r3, r0
	size_t n = 0;
   1dfda:	2000      	movs	r0, #0

	while (*s != '\0') {
   1dfdc:	5c1a      	ldrb	r2, [r3, r0]
   1dfde:	b902      	cbnz	r2, 1dfe2 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   1dfe0:	4770      	bx	lr
		n++;
   1dfe2:	3001      	adds	r0, #1
   1dfe4:	e7fa      	b.n	1dfdc <strlen+0x4>

0001dfe6 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   1dfe6:	4603      	mov	r3, r0
	size_t n = 0;
   1dfe8:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   1dfea:	5c1a      	ldrb	r2, [r3, r0]
   1dfec:	b10a      	cbz	r2, 1dff2 <strnlen+0xc>
   1dfee:	4288      	cmp	r0, r1
   1dff0:	d100      	bne.n	1dff4 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   1dff2:	4770      	bx	lr
		n++;
   1dff4:	3001      	adds	r0, #1
   1dff6:	e7f8      	b.n	1dfea <strnlen+0x4>

0001dff8 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   1dff8:	1e43      	subs	r3, r0, #1
   1dffa:	3901      	subs	r1, #1
   1dffc:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1e000:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   1e004:	4282      	cmp	r2, r0
   1e006:	d101      	bne.n	1e00c <strcmp+0x14>
   1e008:	2a00      	cmp	r2, #0
   1e00a:	d1f7      	bne.n	1dffc <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   1e00c:	1a10      	subs	r0, r2, r0
   1e00e:	4770      	bx	lr

0001e010 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   1e010:	b510      	push	{r4, lr}
   1e012:	4603      	mov	r3, r0
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   1e014:	b15a      	cbz	r2, 1e02e <memcmp+0x1e>
   1e016:	3901      	subs	r1, #1
   1e018:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   1e01a:	f813 0b01 	ldrb.w	r0, [r3], #1
   1e01e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1e022:	42a3      	cmp	r3, r4
   1e024:	d001      	beq.n	1e02a <memcmp+0x1a>
   1e026:	4290      	cmp	r0, r2
   1e028:	d0f7      	beq.n	1e01a <memcmp+0xa>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   1e02a:	1a80      	subs	r0, r0, r2
}
   1e02c:	bd10      	pop	{r4, pc}
		return 0;
   1e02e:	4610      	mov	r0, r2
   1e030:	e7fc      	b.n	1e02c <memcmp+0x1c>

0001e032 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   1e032:	b510      	push	{r4, lr}
   1e034:	1e43      	subs	r3, r0, #1
   1e036:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   1e038:	4291      	cmp	r1, r2
   1e03a:	d100      	bne.n	1e03e <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   1e03c:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   1e03e:	f811 4b01 	ldrb.w	r4, [r1], #1
   1e042:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   1e046:	e7f7      	b.n	1e038 <memcpy+0x6>

0001e048 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   1e048:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   1e04a:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   1e04c:	4603      	mov	r3, r0
	while (n > 0) {
   1e04e:	4293      	cmp	r3, r2
   1e050:	d100      	bne.n	1e054 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   1e052:	4770      	bx	lr
		*(d_byte++) = c_byte;
   1e054:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1e058:	e7f9      	b.n	1e04e <memset+0x6>

0001e05a <_stdout_hook_default>:
}
   1e05a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e05e:	4770      	bx	lr

0001e060 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   1e060:	b084      	sub	sp, #16
   1e062:	ab04      	add	r3, sp, #16
   1e064:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   1e068:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1e06c:	2b06      	cmp	r3, #6
   1e06e:	d108      	bne.n	1e082 <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   1e070:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1e074:	2201      	movs	r2, #1
   1e076:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   1e07a:	f3bf 8f4f 	dsb	sy
        __WFE();
   1e07e:	bf20      	wfe
    while (true)
   1e080:	e7fd      	b.n	1e07e <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   1e082:	b004      	add	sp, #16
   1e084:	4770      	bx	lr

0001e086 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   1e086:	b084      	sub	sp, #16
   1e088:	ab04      	add	r3, sp, #16
   1e08a:	e903 0007 	stmdb	r3, {r0, r1, r2}
   1e08e:	2300      	movs	r3, #0
   1e090:	f383 8811 	msr	BASEPRI, r3
   1e094:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   1e098:	b004      	add	sp, #16
   1e09a:	4770      	bx	lr

0001e09c <send_cmd_status>:
{
   1e09c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   1e0a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   1e0a4:	4606      	mov	r6, r0
   1e0a6:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   1e0a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e0ac:	2100      	movs	r1, #0
   1e0ae:	200f      	movs	r0, #15
   1e0b0:	f7e8 f892 	bl	61d8 <bt_buf_get_evt>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1e0b4:	2701      	movs	r7, #1
	return net_buf_simple_add(&buf->b, len);
   1e0b6:	f100 0808 	add.w	r8, r0, #8
   1e0ba:	4604      	mov	r4, r0
   1e0bc:	7507      	strb	r7, [r0, #20]
   1e0be:	2102      	movs	r1, #2
   1e0c0:	4640      	mov	r0, r8
   1e0c2:	f006 fe28 	bl	24d16 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1e0c6:	230f      	movs	r3, #15
	hdr->len = sizeof(*evt);
   1e0c8:	2104      	movs	r1, #4
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1e0ca:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*evt);
   1e0cc:	7041      	strb	r1, [r0, #1]
   1e0ce:	4640      	mov	r0, r8
   1e0d0:	f006 fe21 	bl	24d16 <net_buf_simple_add>
	evt->ncmd = 1U;
   1e0d4:	7047      	strb	r7, [r0, #1]
	evt->status = status;
   1e0d6:	7005      	strb	r5, [r0, #0]
	evt->opcode = sys_cpu_to_le16(opcode);
   1e0d8:	8046      	strh	r6, [r0, #2]
		bt_recv_prio(buf);
   1e0da:	4620      	mov	r0, r4
}
   1e0dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_recv_prio(buf);
   1e0e0:	f7e8 bcd0 	b.w	6a84 <bt_recv_prio>

0001e0e4 <sys_memcpy_swap.constprop.0>:
	for (; length > 0; length--) {
   1e0e4:	f101 0320 	add.w	r3, r1, #32
   1e0e8:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   1e0ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   1e0ee:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   1e0f2:	428b      	cmp	r3, r1
   1e0f4:	d1f9      	bne.n	1e0ea <sys_memcpy_swap.constprop.0+0x6>
}
   1e0f6:	4770      	bx	lr

0001e0f8 <bt_hci_ecc_supported_commands>:
	supported_commands[34] |= BIT(2);
   1e0f8:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   1e0fc:	f043 0306 	orr.w	r3, r3, #6
   1e100:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
	supported_commands[41] |= BIT(2);
   1e104:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   1e108:	f043 0304 	orr.w	r3, r3, #4
   1e10c:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
}
   1e110:	4770      	bx	lr

0001e112 <default_CSPRNG>:
{
   1e112:	b508      	push	{r3, lr}
	return !bt_rand(dst, len);
   1e114:	f005 fedd 	bl	23ed2 <bt_rand>
}
   1e118:	fab0 f080 	clz	r0, r0
   1e11c:	0940      	lsrs	r0, r0, #5
   1e11e:	bd08      	pop	{r3, pc}

0001e120 <xor16>:
#define BT_DBG_ENABLED IS_ENABLED(CONFIG_BT_DEBUG_HCI_CORE)
#define LOG_MODULE_NAME bt_aes_ccm
#include "common/log.h"

static inline void xor16(uint8_t *dst, const uint8_t *a, const uint8_t *b)
{
   1e120:	b510      	push	{r4, lr}
	dst[0] = a[0] ^ b[0];
   1e122:	780b      	ldrb	r3, [r1, #0]
   1e124:	7814      	ldrb	r4, [r2, #0]
   1e126:	4063      	eors	r3, r4
   1e128:	7003      	strb	r3, [r0, #0]
	dst[1] = a[1] ^ b[1];
   1e12a:	7854      	ldrb	r4, [r2, #1]
   1e12c:	784b      	ldrb	r3, [r1, #1]
   1e12e:	4063      	eors	r3, r4
   1e130:	7043      	strb	r3, [r0, #1]
	dst[2] = a[2] ^ b[2];
   1e132:	7894      	ldrb	r4, [r2, #2]
   1e134:	788b      	ldrb	r3, [r1, #2]
   1e136:	4063      	eors	r3, r4
   1e138:	7083      	strb	r3, [r0, #2]
	dst[3] = a[3] ^ b[3];
   1e13a:	78d4      	ldrb	r4, [r2, #3]
   1e13c:	78cb      	ldrb	r3, [r1, #3]
   1e13e:	4063      	eors	r3, r4
   1e140:	70c3      	strb	r3, [r0, #3]
	dst[4] = a[4] ^ b[4];
   1e142:	7914      	ldrb	r4, [r2, #4]
   1e144:	790b      	ldrb	r3, [r1, #4]
   1e146:	4063      	eors	r3, r4
   1e148:	7103      	strb	r3, [r0, #4]
	dst[5] = a[5] ^ b[5];
   1e14a:	7954      	ldrb	r4, [r2, #5]
   1e14c:	794b      	ldrb	r3, [r1, #5]
   1e14e:	4063      	eors	r3, r4
   1e150:	7143      	strb	r3, [r0, #5]
	dst[6] = a[6] ^ b[6];
   1e152:	7994      	ldrb	r4, [r2, #6]
   1e154:	798b      	ldrb	r3, [r1, #6]
   1e156:	4063      	eors	r3, r4
   1e158:	7183      	strb	r3, [r0, #6]
	dst[7] = a[7] ^ b[7];
   1e15a:	79d4      	ldrb	r4, [r2, #7]
   1e15c:	79cb      	ldrb	r3, [r1, #7]
   1e15e:	4063      	eors	r3, r4
   1e160:	71c3      	strb	r3, [r0, #7]
	dst[8] = a[8] ^ b[8];
   1e162:	7a14      	ldrb	r4, [r2, #8]
   1e164:	7a0b      	ldrb	r3, [r1, #8]
   1e166:	4063      	eors	r3, r4
   1e168:	7203      	strb	r3, [r0, #8]
	dst[9] = a[9] ^ b[9];
   1e16a:	7a54      	ldrb	r4, [r2, #9]
   1e16c:	7a4b      	ldrb	r3, [r1, #9]
   1e16e:	4063      	eors	r3, r4
   1e170:	7243      	strb	r3, [r0, #9]
	dst[10] = a[10] ^ b[10];
   1e172:	7a8b      	ldrb	r3, [r1, #10]
   1e174:	7a94      	ldrb	r4, [r2, #10]
   1e176:	4063      	eors	r3, r4
   1e178:	7283      	strb	r3, [r0, #10]
	dst[11] = a[11] ^ b[11];
   1e17a:	7ad4      	ldrb	r4, [r2, #11]
   1e17c:	7acb      	ldrb	r3, [r1, #11]
   1e17e:	4063      	eors	r3, r4
   1e180:	72c3      	strb	r3, [r0, #11]
	dst[12] = a[12] ^ b[12];
   1e182:	7b14      	ldrb	r4, [r2, #12]
   1e184:	7b0b      	ldrb	r3, [r1, #12]
   1e186:	4063      	eors	r3, r4
   1e188:	7303      	strb	r3, [r0, #12]
	dst[13] = a[13] ^ b[13];
   1e18a:	7b54      	ldrb	r4, [r2, #13]
   1e18c:	7b4b      	ldrb	r3, [r1, #13]
   1e18e:	4063      	eors	r3, r4
   1e190:	7343      	strb	r3, [r0, #13]
	dst[14] = a[14] ^ b[14];
   1e192:	7b94      	ldrb	r4, [r2, #14]
   1e194:	7b8b      	ldrb	r3, [r1, #14]
   1e196:	4063      	eors	r3, r4
   1e198:	7383      	strb	r3, [r0, #14]
	dst[15] = a[15] ^ b[15];
   1e19a:	7bcb      	ldrb	r3, [r1, #15]
   1e19c:	7bd2      	ldrb	r2, [r2, #15]
   1e19e:	4053      	eors	r3, r2
   1e1a0:	73c3      	strb	r3, [r0, #15]
}
   1e1a2:	bd10      	pop	{r4, pc}

0001e1a4 <ccm_crypt.isra.0>:
	}

	return 0;
}

static int ccm_crypt(const uint8_t key[16], const uint8_t nonce[13],
   1e1a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e1a8:	b08b      	sub	sp, #44	; 0x2c
   1e1aa:	4607      	mov	r7, r0
   1e1ac:	9d14      	ldr	r5, [sp, #80]	; 0x50
   1e1ae:	4690      	mov	r8, r2
	uint16_t last_blk, blk_cnt;
	size_t i, j;
	int err;

	last_blk = msg_len % 16;
	blk_cnt = (msg_len + 15) / 16;
   1e1b0:	f105 060f 	add.w	r6, r5, #15
	if (!last_blk) {
		last_blk = 16U;
	}

	a_i[0] = 0x01;
   1e1b4:	2401      	movs	r4, #1
		last_blk = 16U;
   1e1b6:	f015 050f 	ands.w	r5, r5, #15
	memcpy(&a_i[1], nonce, 13);
   1e1ba:	f04f 020d 	mov.w	r2, #13
   1e1be:	f10d 0009 	add.w	r0, sp, #9
static int ccm_crypt(const uint8_t key[16], const uint8_t nonce[13],
   1e1c2:	4699      	mov	r9, r3
	blk_cnt = (msg_len + 15) / 16;
   1e1c4:	ea4f 1616 	mov.w	r6, r6, lsr #4
		last_blk = 16U;
   1e1c8:	bf08      	it	eq
   1e1ca:	2510      	moveq	r5, #16
	a_i[0] = 0x01;
   1e1cc:	f88d 4008 	strb.w	r4, [sp, #8]
	memcpy(&a_i[1], nonce, 13);
   1e1d0:	f7ff ff2f 	bl	1e032 <memcpy>

	for (j = 0; j < blk_cnt; j++) {
   1e1d4:	b2b6      	uxth	r6, r6
   1e1d6:	f04f 0b00 	mov.w	fp, #0
		if (err) {
			return err;
		}

		/* Encrypted = Payload[0-15] ^ C_1 */
		if (j < blk_cnt - 1) {
   1e1da:	f106 3aff 	add.w	sl, r6, #4294967295	; 0xffffffff
	for (j = 0; j < blk_cnt; j++) {
   1e1de:	1e63      	subs	r3, r4, #1
   1e1e0:	429e      	cmp	r6, r3
   1e1e2:	d802      	bhi.n	1e1ea <ccm_crypt.isra.0+0x46>
					in_msg[(j * 16) + i] ^ s_i[i];
			}
		}
	}
	return 0;
}
   1e1e4:	b00b      	add	sp, #44	; 0x2c
   1e1e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	dst[0] = val >> 8;
   1e1ea:	f3c4 2207 	ubfx	r2, r4, #8, #8
   1e1ee:	f88d 2016 	strb.w	r2, [sp, #22]
		err = bt_encrypt_be(key, a_i, s_i);
   1e1f2:	a902      	add	r1, sp, #8
   1e1f4:	aa06      	add	r2, sp, #24
   1e1f6:	4638      	mov	r0, r7
   1e1f8:	9301      	str	r3, [sp, #4]
	dst[1] = val;
   1e1fa:	f88d 4017 	strb.w	r4, [sp, #23]
   1e1fe:	f005 fe6a 	bl	23ed6 <bt_encrypt_be>
		if (err) {
   1e202:	4601      	mov	r1, r0
   1e204:	2800      	cmp	r0, #0
   1e206:	d1ed      	bne.n	1e1e4 <ccm_crypt.isra.0+0x40>
		if (j < blk_cnt - 1) {
   1e208:	9b01      	ldr	r3, [sp, #4]
   1e20a:	459a      	cmp	sl, r3
   1e20c:	eb08 020b 	add.w	r2, r8, fp
   1e210:	eb09 000b 	add.w	r0, r9, fp
   1e214:	d906      	bls.n	1e224 <ccm_crypt.isra.0+0x80>
			xor16(&out_msg[j * 16], s_i, &in_msg[j * 16]);
   1e216:	a906      	add	r1, sp, #24
   1e218:	f7ff ff82 	bl	1e120 <xor16>
	for (j = 0; j < blk_cnt; j++) {
   1e21c:	3401      	adds	r4, #1
   1e21e:	f10b 0b10 	add.w	fp, fp, #16
   1e222:	e7dc      	b.n	1e1de <ccm_crypt.isra.0+0x3a>
   1e224:	f10d 0c18 	add.w	ip, sp, #24
					in_msg[(j * 16) + i] ^ s_i[i];
   1e228:	f812 3b01 	ldrb.w	r3, [r2], #1
   1e22c:	f81c eb01 	ldrb.w	lr, [ip], #1
			for (i = 0; i < last_blk; i++) {
   1e230:	3101      	adds	r1, #1
				out_msg[(j * 16) + i] =
   1e232:	ea83 030e 	eor.w	r3, r3, lr
			for (i = 0; i < last_blk; i++) {
   1e236:	42a9      	cmp	r1, r5
				out_msg[(j * 16) + i] =
   1e238:	f800 3b01 	strb.w	r3, [r0], #1
			for (i = 0; i < last_blk; i++) {
   1e23c:	d3f4      	bcc.n	1e228 <ccm_crypt.isra.0+0x84>
   1e23e:	e7ed      	b.n	1e21c <ccm_crypt.isra.0+0x78>

0001e240 <ccm_auth.isra.0>:
static int ccm_auth(const uint8_t key[16], uint8_t nonce[13],
   1e240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		last_blk = 16U;
   1e244:	f013 080f 	ands.w	r8, r3, #15
static int ccm_auth(const uint8_t key[16], uint8_t nonce[13],
   1e248:	b08d      	sub	sp, #52	; 0x34
   1e24a:	461d      	mov	r5, r3
	b[0] = 0x01;
   1e24c:	f04f 0301 	mov.w	r3, #1
static int ccm_auth(const uint8_t key[16], uint8_t nonce[13],
   1e250:	4607      	mov	r7, r0
   1e252:	4616      	mov	r6, r2
	memcpy(b + 1, nonce, 13);
   1e254:	eb0d 0003 	add.w	r0, sp, r3
   1e258:	f04f 020d 	mov.w	r2, #13
   1e25c:	46e9      	mov	r9, sp
		last_blk = 16U;
   1e25e:	bf08      	it	eq
   1e260:	f04f 0810 	moveq.w	r8, #16
	b[0] = 0x01;
   1e264:	f88d 3000 	strb.w	r3, [sp]
static int ccm_auth(const uint8_t key[16], uint8_t nonce[13],
   1e268:	9c17      	ldr	r4, [sp, #92]	; 0x5c
	memcpy(b + 1, nonce, 13);
   1e26a:	f7ff fee2 	bl	1e032 <memcpy>
	dst[0] = val >> 8;
   1e26e:	2300      	movs	r3, #0
	err = bt_encrypt_be(key, b, s0);
   1e270:	aa08      	add	r2, sp, #32
   1e272:	4649      	mov	r1, r9
   1e274:	4638      	mov	r0, r7
   1e276:	f88d 300e 	strb.w	r3, [sp, #14]
	dst[1] = val;
   1e27a:	f88d 300f 	strb.w	r3, [sp, #15]
   1e27e:	f005 fe2a 	bl	23ed6 <bt_encrypt_be>
	if (err) {
   1e282:	2800      	cmp	r0, #0
   1e284:	f040 809e 	bne.w	1e3c4 <ccm_auth.isra.0+0x184>
	b[0] = (((mic_size - 2) / 2) << 3) | ((!!aad_len) << 6) | 0x01;
   1e288:	9b19      	ldr	r3, [sp, #100]	; 0x64
	dst[0] = val >> 8;
   1e28a:	f88d 000e 	strb.w	r0, [sp, #14]
   1e28e:	3b02      	subs	r3, #2
   1e290:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   1e294:	ea4f 0383 	mov.w	r3, r3, lsl #2
   1e298:	bf14      	ite	ne
   1e29a:	2240      	movne	r2, #64	; 0x40
   1e29c:	2200      	moveq	r2, #0
   1e29e:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
   1e2a2:	4313      	orrs	r3, r2
	err = bt_encrypt_be(key, b, X0);
   1e2a4:	f10d 0b10 	add.w	fp, sp, #16
	b[0] = (((mic_size - 2) / 2) << 3) | ((!!aad_len) << 6) | 0x01;
   1e2a8:	f043 0301 	orr.w	r3, r3, #1
	err = bt_encrypt_be(key, b, X0);
   1e2ac:	465a      	mov	r2, fp
   1e2ae:	4649      	mov	r1, r9
   1e2b0:	4638      	mov	r0, r7
	b[0] = (((mic_size - 2) / 2) << 3) | ((!!aad_len) << 6) | 0x01;
   1e2b2:	f88d 3000 	strb.w	r3, [sp]
	dst[1] = val;
   1e2b6:	f88d 500f 	strb.w	r5, [sp, #15]
	err = bt_encrypt_be(key, b, X0);
   1e2ba:	f005 fe0c 	bl	23ed6 <bt_encrypt_be>
	if (err) {
   1e2be:	4682      	mov	sl, r0
   1e2c0:	bbb8      	cbnz	r0, 1e332 <ccm_auth.isra.0+0xf2>
	if (aad_len) {
   1e2c2:	b3b4      	cbz	r4, 1e332 <ccm_auth.isra.0+0xf2>
			b[i] = X0[i] ^ b[i];
   1e2c4:	f89d 3010 	ldrb.w	r3, [sp, #16]
   1e2c8:	f88d 3000 	strb.w	r3, [sp]
   1e2cc:	f89d 3011 	ldrb.w	r3, [sp, #17]
   1e2d0:	4063      	eors	r3, r4
		aad_len += sizeof(uint16_t);
   1e2d2:	3402      	adds	r4, #2
			b[i] = X0[i] ^ b[i];
   1e2d4:	f88d 3001 	strb.w	r3, [sp, #1]
		aad_len += sizeof(uint16_t);
   1e2d8:	b2e4      	uxtb	r4, r4
		while (aad_len > 16) {
   1e2da:	2302      	movs	r3, #2
				b[i] = X0[i] ^ aad[j];
   1e2dc:	4649      	mov	r1, r9
		while (aad_len > 16) {
   1e2de:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1e2e0:	2c10      	cmp	r4, #16
   1e2e2:	4452      	add	r2, sl
   1e2e4:	d80b      	bhi.n	1e2fe <ccm_auth.isra.0+0xbe>
   1e2e6:	4611      	mov	r1, r2
   1e2e8:	aa04      	add	r2, sp, #16
		for (; i < aad_len; i++, j++) {
   1e2ea:	42a3      	cmp	r3, r4
   1e2ec:	4620      	mov	r0, r4
   1e2ee:	db38      	blt.n	1e362 <ccm_auth.isra.0+0x122>
		for (i = aad_len; i < 16; i++) {
   1e2f0:	280f      	cmp	r0, #15
   1e2f2:	dd40      	ble.n	1e376 <ccm_auth.isra.0+0x136>
		err = bt_encrypt_be(key, b, X0);
   1e2f4:	4669      	mov	r1, sp
   1e2f6:	4638      	mov	r0, r7
   1e2f8:	f005 fded 	bl	23ed6 <bt_encrypt_be>
		if (err) {
   1e2fc:	e019      	b.n	1e332 <ccm_auth.isra.0+0xf2>
		while (aad_len > 16) {
   1e2fe:	4618      	mov	r0, r3
				b[i] = X0[i] ^ aad[j];
   1e300:	f810 e00b 	ldrb.w	lr, [r0, fp]
   1e304:	f812 cb01 	ldrb.w	ip, [r2], #1
   1e308:	ea8c 0c0e 	eor.w	ip, ip, lr
   1e30c:	f800 c001 	strb.w	ip, [r0, r1]
				i++, j++;
   1e310:	3001      	adds	r0, #1
			} while (i < 16);
   1e312:	2810      	cmp	r0, #16
   1e314:	d1f4      	bne.n	1e300 <ccm_auth.isra.0+0xc0>
				i++, j++;
   1e316:	f10a 0a10 	add.w	sl, sl, #16
			err = bt_encrypt_be(key, b, X0);
   1e31a:	465a      	mov	r2, fp
   1e31c:	4638      	mov	r0, r7
				i++, j++;
   1e31e:	ebaa 0a03 	sub.w	sl, sl, r3
			err = bt_encrypt_be(key, b, X0);
   1e322:	f005 fdd8 	bl	23ed6 <bt_encrypt_be>
			aad_len -= 16;
   1e326:	3c10      	subs	r4, #16
   1e328:	b2e4      	uxtb	r4, r4
			if (err) {
   1e32a:	4603      	mov	r3, r0
   1e32c:	4669      	mov	r1, sp
   1e32e:	2800      	cmp	r0, #0
   1e330:	d0d5      	beq.n	1e2de <ccm_auth.isra.0+0x9e>
	blk_cnt = (msg_len + 15) / 16;
   1e332:	350f      	adds	r5, #15
			memcpy(&b[i], &Xn[i], 16 - i);
   1e334:	ab04      	add	r3, sp, #16
	blk_cnt = (msg_len + 15) / 16;
   1e336:	2400      	movs	r4, #0
	for (j = 0; j < blk_cnt; j++) {
   1e338:	f3c5 150f 	ubfx	r5, r5, #4, #16
			memcpy(&b[i], &Xn[i], 16 - i);
   1e33c:	eb03 0a08 	add.w	sl, r3, r8
	for (j = 0; j < blk_cnt; j++) {
   1e340:	42ac      	cmp	r4, r5
   1e342:	db1d      	blt.n	1e380 <ccm_auth.isra.0+0x140>
   1e344:	e9dd 2118 	ldrd	r2, r1, [sp, #96]	; 0x60
   1e348:	ac08      	add	r4, sp, #32
   1e34a:	ab04      	add	r3, sp, #16
   1e34c:	1851      	adds	r1, r2, r1
	for (i = 0; i < mic_size; i++) {
   1e34e:	4291      	cmp	r1, r2
   1e350:	d038      	beq.n	1e3c4 <ccm_auth.isra.0+0x184>
		mic[i] = s0[i] ^ Xn[i];
   1e352:	f814 0b01 	ldrb.w	r0, [r4], #1
   1e356:	f813 5b01 	ldrb.w	r5, [r3], #1
   1e35a:	4068      	eors	r0, r5
   1e35c:	f802 0b01 	strb.w	r0, [r2], #1
	for (i = 0; i < mic_size; i++) {
   1e360:	e7f5      	b.n	1e34e <ccm_auth.isra.0+0x10e>
			b[i] = X0[i] ^ aad[j];
   1e362:	f812 c003 	ldrb.w	ip, [r2, r3]
   1e366:	f811 0b01 	ldrb.w	r0, [r1], #1
   1e36a:	ea80 000c 	eor.w	r0, r0, ip
   1e36e:	f80d 0003 	strb.w	r0, [sp, r3]
		for (; i < aad_len; i++, j++) {
   1e372:	3301      	adds	r3, #1
   1e374:	e7b9      	b.n	1e2ea <ccm_auth.isra.0+0xaa>
			b[i] = X0[i];
   1e376:	5c13      	ldrb	r3, [r2, r0]
   1e378:	f80d 3000 	strb.w	r3, [sp, r0]
		for (i = aad_len; i < 16; i++) {
   1e37c:	3001      	adds	r0, #1
   1e37e:	e7b7      	b.n	1e2f0 <ccm_auth.isra.0+0xb0>
		if (j + 1 == blk_cnt) {
   1e380:	3401      	adds	r4, #1
   1e382:	42ac      	cmp	r4, r5
   1e384:	d121      	bne.n	1e3ca <ccm_auth.isra.0+0x18a>
   1e386:	f10d 0c10 	add.w	ip, sp, #16
   1e38a:	466b      	mov	r3, sp
   1e38c:	4630      	mov	r0, r6
			for (i = 0; i < last_blk; i++) {
   1e38e:	2200      	movs	r2, #0
				b[i] = Xn[i] ^ cleartext_msg[(j * 16) + i];
   1e390:	f81c 1b01 	ldrb.w	r1, [ip], #1
   1e394:	f810 eb01 	ldrb.w	lr, [r0], #1
			for (i = 0; i < last_blk; i++) {
   1e398:	3201      	adds	r2, #1
				b[i] = Xn[i] ^ cleartext_msg[(j * 16) + i];
   1e39a:	ea81 010e 	eor.w	r1, r1, lr
			for (i = 0; i < last_blk; i++) {
   1e39e:	4542      	cmp	r2, r8
				b[i] = Xn[i] ^ cleartext_msg[(j * 16) + i];
   1e3a0:	f803 1b01 	strb.w	r1, [r3], #1
			for (i = 0; i < last_blk; i++) {
   1e3a4:	dbf4      	blt.n	1e390 <ccm_auth.isra.0+0x150>
			memcpy(&b[i], &Xn[i], 16 - i);
   1e3a6:	f1c8 0210 	rsb	r2, r8, #16
   1e3aa:	4651      	mov	r1, sl
   1e3ac:	eb0d 0008 	add.w	r0, sp, r8
   1e3b0:	f7ff fe3f 	bl	1e032 <memcpy>
		err = bt_encrypt_be(key, b, Xn);
   1e3b4:	aa04      	add	r2, sp, #16
   1e3b6:	4649      	mov	r1, r9
   1e3b8:	4638      	mov	r0, r7
   1e3ba:	f005 fd8c 	bl	23ed6 <bt_encrypt_be>
		if (err) {
   1e3be:	3610      	adds	r6, #16
   1e3c0:	2800      	cmp	r0, #0
   1e3c2:	d0bd      	beq.n	1e340 <ccm_auth.isra.0+0x100>
}
   1e3c4:	b00d      	add	sp, #52	; 0x34
   1e3c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			xor16(b, Xn, &cleartext_msg[j * 16]);
   1e3ca:	4632      	mov	r2, r6
   1e3cc:	a904      	add	r1, sp, #16
   1e3ce:	4668      	mov	r0, sp
   1e3d0:	f7ff fea6 	bl	1e120 <xor16>
   1e3d4:	e7ee      	b.n	1e3b4 <ccm_auth.isra.0+0x174>

0001e3d6 <bt_ccm_decrypt>:

int bt_ccm_decrypt(const uint8_t key[16], uint8_t nonce[13],
		   const uint8_t *enc_data, size_t len, const uint8_t *aad,
		   size_t aad_len, uint8_t *plaintext, size_t mic_size)
{
   1e3d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e3da:	b089      	sub	sp, #36	; 0x24
   1e3dc:	e9dd ba13 	ldrd	fp, sl, [sp, #76]	; 0x4c
	uint8_t mic[16];

	if (aad_len >= 0xff00 || mic_size > sizeof(mic)) {
   1e3e0:	f5bb 4f7f 	cmp.w	fp, #65280	; 0xff00
{
   1e3e4:	9e15      	ldr	r6, [sp, #84]	; 0x54
   1e3e6:	4607      	mov	r7, r0
   1e3e8:	4688      	mov	r8, r1
   1e3ea:	4615      	mov	r5, r2
   1e3ec:	461c      	mov	r4, r3
	if (aad_len >= 0xff00 || mic_size > sizeof(mic)) {
   1e3ee:	d21e      	bcs.n	1e42e <bt_ccm_decrypt+0x58>
   1e3f0:	2e10      	cmp	r6, #16
   1e3f2:	d81c      	bhi.n	1e42e <bt_ccm_decrypt+0x58>
		return -EINVAL;
	}

	ccm_crypt(key, nonce, enc_data, plaintext, len);
   1e3f4:	9300      	str	r3, [sp, #0]
   1e3f6:	4653      	mov	r3, sl
   1e3f8:	f7ff fed4 	bl	1e1a4 <ccm_crypt.isra.0>

	ccm_auth(key, nonce, plaintext, len, aad, aad_len, mic, mic_size);
   1e3fc:	f10d 0910 	add.w	r9, sp, #16
   1e400:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1e402:	9300      	str	r3, [sp, #0]
   1e404:	4652      	mov	r2, sl
   1e406:	4623      	mov	r3, r4
   1e408:	4641      	mov	r1, r8
   1e40a:	4638      	mov	r0, r7
   1e40c:	e9cd b901 	strd	fp, r9, [sp, #4]
   1e410:	9603      	str	r6, [sp, #12]
   1e412:	f7ff ff15 	bl	1e240 <ccm_auth.isra.0>

	if (memcmp(mic, enc_data + len, mic_size)) {
   1e416:	4632      	mov	r2, r6
   1e418:	1929      	adds	r1, r5, r4
   1e41a:	4648      	mov	r0, r9
   1e41c:	f7ff fdf8 	bl	1e010 <memcmp>
		return -EBADMSG;
   1e420:	2800      	cmp	r0, #0
   1e422:	bf18      	it	ne
   1e424:	f06f 004c 	mvnne.w	r0, #76	; 0x4c
	}

	return 0;
}
   1e428:	b009      	add	sp, #36	; 0x24
   1e42a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EINVAL;
   1e42e:	f06f 0015 	mvn.w	r0, #21
   1e432:	e7f9      	b.n	1e428 <bt_ccm_decrypt+0x52>

0001e434 <bt_ccm_encrypt>:

int bt_ccm_encrypt(const uint8_t key[16], uint8_t nonce[13],
		   const uint8_t *plaintext, size_t len, const uint8_t *aad,
		   size_t aad_len, uint8_t *enc_data, size_t mic_size)
{
   1e434:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e438:	b085      	sub	sp, #20
   1e43a:	e9dd 790d 	ldrd	r7, r9, [sp, #52]	; 0x34
	BT_DBG("nonce %s", bt_hex(nonce, 13));
	BT_DBG("msg (len %zu) %s", len, bt_hex(plaintext, len));
	BT_DBG("aad_len %zu mic_size %zu", aad_len, mic_size);

	/* Unsupported AAD size */
	if (aad_len >= 0xff00 || mic_size > 16) {
   1e43e:	f5b7 4f7f 	cmp.w	r7, #65280	; 0xff00
{
   1e442:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
   1e446:	4605      	mov	r5, r0
   1e448:	460e      	mov	r6, r1
   1e44a:	4690      	mov	r8, r2
   1e44c:	461c      	mov	r4, r3
	uint8_t *mic = enc_data + len;
   1e44e:	eb09 0e03 	add.w	lr, r9, r3
	if (aad_len >= 0xff00 || mic_size > 16) {
   1e452:	d214      	bcs.n	1e47e <bt_ccm_encrypt+0x4a>
   1e454:	f1bc 0f10 	cmp.w	ip, #16
   1e458:	d811      	bhi.n	1e47e <bt_ccm_encrypt+0x4a>
		return -EINVAL;
	}

	ccm_auth(key, nonce, plaintext, len, aad, aad_len, mic, mic_size);
   1e45a:	9701      	str	r7, [sp, #4]
   1e45c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   1e45e:	9700      	str	r7, [sp, #0]
   1e460:	e9cd ec02 	strd	lr, ip, [sp, #8]
   1e464:	f7ff feec 	bl	1e240 <ccm_auth.isra.0>

	ccm_crypt(key, nonce, plaintext, enc_data, len);
   1e468:	4628      	mov	r0, r5
   1e46a:	9400      	str	r4, [sp, #0]
   1e46c:	464b      	mov	r3, r9
   1e46e:	4642      	mov	r2, r8
   1e470:	4631      	mov	r1, r6
   1e472:	f7ff fe97 	bl	1e1a4 <ccm_crypt.isra.0>

	return 0;
   1e476:	2000      	movs	r0, #0
}
   1e478:	b005      	add	sp, #20
   1e47a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EINVAL;
   1e47e:	f06f 0015 	mvn.w	r0, #21
   1e482:	e7f9      	b.n	1e478 <bt_ccm_encrypt+0x44>

0001e484 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   1e484:	b510      	push	{r4, lr}
   1e486:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   1e488:	7801      	ldrb	r1, [r0, #0]
   1e48a:	7822      	ldrb	r2, [r4, #0]
   1e48c:	428a      	cmp	r2, r1
{
   1e48e:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   1e490:	d00f      	beq.n	1e4b2 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   1e492:	4669      	mov	r1, sp
   1e494:	f7e7 fe40 	bl	6118 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   1e498:	a905      	add	r1, sp, #20
   1e49a:	4620      	mov	r0, r4
   1e49c:	f7e7 fe3c 	bl	6118 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   1e4a0:	2210      	movs	r2, #16
   1e4a2:	f10d 0115 	add.w	r1, sp, #21
   1e4a6:	f10d 0001 	add.w	r0, sp, #1
   1e4aa:	f7ff fdb1 	bl	1e010 <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   1e4ae:	b00a      	add	sp, #40	; 0x28
   1e4b0:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   1e4b2:	2a01      	cmp	r2, #1
   1e4b4:	d006      	beq.n	1e4c4 <bt_uuid_cmp+0x40>
   1e4b6:	2a02      	cmp	r2, #2
   1e4b8:	d007      	beq.n	1e4ca <bt_uuid_cmp+0x46>
   1e4ba:	b972      	cbnz	r2, 1e4da <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   1e4bc:	8840      	ldrh	r0, [r0, #2]
   1e4be:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   1e4c0:	1ac0      	subs	r0, r0, r3
   1e4c2:	e7f4      	b.n	1e4ae <bt_uuid_cmp+0x2a>
   1e4c4:	6840      	ldr	r0, [r0, #4]
   1e4c6:	6863      	ldr	r3, [r4, #4]
   1e4c8:	e7fa      	b.n	1e4c0 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1e4ca:	2210      	movs	r2, #16
   1e4cc:	1c61      	adds	r1, r4, #1
   1e4ce:	3001      	adds	r0, #1
}
   1e4d0:	b00a      	add	sp, #40	; 0x28
   1e4d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1e4d6:	f7ff bd9b 	b.w	1e010 <memcmp>
	switch (u1->type) {
   1e4da:	f06f 0015 	mvn.w	r0, #21
   1e4de:	e7e6      	b.n	1e4ae <bt_uuid_cmp+0x2a>

0001e4e0 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   1e4e0:	2a04      	cmp	r2, #4
{
   1e4e2:	b510      	push	{r4, lr}
	switch (data_len) {
   1e4e4:	d00a      	beq.n	1e4fc <bt_uuid_create+0x1c>
   1e4e6:	2a10      	cmp	r2, #16
   1e4e8:	d00d      	beq.n	1e506 <bt_uuid_create+0x26>
   1e4ea:	2a02      	cmp	r2, #2
   1e4ec:	f04f 0300 	mov.w	r3, #0
   1e4f0:	d10f      	bne.n	1e512 <bt_uuid_create+0x32>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   1e4f2:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   1e4f4:	880b      	ldrh	r3, [r1, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   1e4f6:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   1e4f8:	2001      	movs	r0, #1
}
   1e4fa:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   1e4fc:	2301      	movs	r3, #1
   1e4fe:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1e500:	680a      	ldr	r2, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   1e502:	6042      	str	r2, [r0, #4]
		break;
   1e504:	e7f8      	b.n	1e4f8 <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   1e506:	2302      	movs	r3, #2
   1e508:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   1e50c:	f7ff fd91 	bl	1e032 <memcpy>
		break;
   1e510:	e7f2      	b.n	1e4f8 <bt_uuid_create+0x18>
	switch (data_len) {
   1e512:	4618      	mov	r0, r3
   1e514:	e7f1      	b.n	1e4fa <bt_uuid_create+0x1a>

0001e516 <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   1e516:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   1e518:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   1e51a:	2106      	movs	r1, #6
{
   1e51c:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   1e51e:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   1e522:	f005 fcd6 	bl	23ed2 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   1e526:	b918      	cbnz	r0, 1e530 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   1e528:	79a3      	ldrb	r3, [r4, #6]
   1e52a:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1e52e:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   1e530:	bd10      	pop	{r4, pc}

0001e532 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   1e532:	280f      	cmp	r0, #15
   1e534:	d806      	bhi.n	1e544 <bt_hci_evt_get_flags+0x12>
   1e536:	280d      	cmp	r0, #13
   1e538:	d80b      	bhi.n	1e552 <bt_hci_evt_get_flags+0x20>
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   1e53a:	2805      	cmp	r0, #5
   1e53c:	bf14      	ite	ne
   1e53e:	2002      	movne	r0, #2
   1e540:	2003      	moveq	r0, #3
   1e542:	4770      	bx	lr
	switch (evt) {
   1e544:	2813      	cmp	r0, #19
   1e546:	d004      	beq.n	1e552 <bt_hci_evt_get_flags+0x20>
   1e548:	281a      	cmp	r0, #26
   1e54a:	bf14      	ite	ne
   1e54c:	2002      	movne	r0, #2
   1e54e:	2001      	moveq	r0, #1
   1e550:	4770      	bx	lr
   1e552:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   1e554:	4770      	bx	lr

0001e556 <handle_event>:
{
   1e556:	b410      	push	{r4}
   1e558:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1e55c:	4604      	mov	r4, r0
   1e55e:	4608      	mov	r0, r1
		if (handler->event != event) {
   1e560:	7811      	ldrb	r1, [r2, #0]
   1e562:	42a1      	cmp	r1, r4
   1e564:	d004      	beq.n	1e570 <handle_event+0x1a>
	for (i = 0; i < num_handlers; i++) {
   1e566:	3208      	adds	r2, #8
   1e568:	429a      	cmp	r2, r3
   1e56a:	d1f9      	bne.n	1e560 <handle_event+0xa>
}
   1e56c:	bc10      	pop	{r4}
   1e56e:	4770      	bx	lr
		if (buf->len < handler->min_len) {
   1e570:	8981      	ldrh	r1, [r0, #12]
   1e572:	7853      	ldrb	r3, [r2, #1]
   1e574:	4299      	cmp	r1, r3
   1e576:	d3f9      	bcc.n	1e56c <handle_event+0x16>
		handler->handler(buf);
   1e578:	6853      	ldr	r3, [r2, #4]
}
   1e57a:	bc10      	pop	{r4}
		handler->handler(buf);
   1e57c:	4718      	bx	r3

0001e57e <hci_data_buf_overflow>:
}
   1e57e:	4770      	bx	lr

0001e580 <hci_disconn_complete>:
{
   1e580:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   1e582:	6885      	ldr	r5, [r0, #8]
	if (evt->status) {
   1e584:	782e      	ldrb	r6, [r5, #0]
   1e586:	b97e      	cbnz	r6, 1e5a8 <hci_disconn_complete+0x28>
	conn = bt_conn_lookup_handle(handle);
   1e588:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   1e58c:	f7e9 fd76 	bl	807c <bt_conn_lookup_handle>
	if (!conn) {
   1e590:	4604      	mov	r4, r0
   1e592:	b148      	cbz	r0, 1e5a8 <hci_disconn_complete+0x28>
	conn->err = evt->reason;
   1e594:	78eb      	ldrb	r3, [r5, #3]
   1e596:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1e598:	4631      	mov	r1, r6
   1e59a:	f7e9 fd77 	bl	808c <bt_conn_set_state>
		bt_conn_unref(conn);
   1e59e:	4620      	mov	r0, r4
}
   1e5a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   1e5a4:	f000 bc4c 	b.w	1ee40 <bt_conn_unref>
}
   1e5a8:	bd70      	pop	{r4, r5, r6, pc}

0001e5aa <hci_hardware_error>:
	return net_buf_simple_pull_mem(&buf->b, len);
   1e5aa:	2101      	movs	r1, #1
   1e5ac:	3008      	adds	r0, #8
   1e5ae:	f006 bc35 	b.w	24e1c <net_buf_simple_pull_mem>

0001e5b2 <hci_vendor_event>:
   1e5b2:	4770      	bx	lr

0001e5b4 <hci_num_completed_packets>:
{
   1e5b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	for (i = 0; i < evt->num_handles; i++) {
   1e5b8:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   1e5ba:	6887      	ldr	r7, [r0, #8]
			tx->pending_no_cb = 0U;
   1e5bc:	46a8      	mov	r8, r5
	for (i = 0; i < evt->num_handles; i++) {
   1e5be:	783b      	ldrb	r3, [r7, #0]
   1e5c0:	429d      	cmp	r5, r3
   1e5c2:	db01      	blt.n	1e5c8 <hci_num_completed_packets+0x14>
}
   1e5c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   1e5c8:	eb07 0385 	add.w	r3, r7, r5, lsl #2
		conn = bt_conn_lookup_handle(handle);
   1e5cc:	f8b3 0001 	ldrh.w	r0, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   1e5d0:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   1e5d4:	f7e9 fd52 	bl	807c <bt_conn_lookup_handle>
		if (!conn) {
   1e5d8:	4604      	mov	r4, r0
   1e5da:	b350      	cbz	r0, 1e632 <hci_num_completed_packets+0x7e>
			k_work_submit(&conn->tx_complete_work);
   1e5dc:	f100 0928 	add.w	r9, r0, #40	; 0x28
		while (count--) {
   1e5e0:	b326      	cbz	r6, 1e62c <hci_num_completed_packets+0x78>
	__asm__ volatile(
   1e5e2:	f04f 0320 	mov.w	r3, #32
   1e5e6:	f3ef 8211 	mrs	r2, BASEPRI
   1e5ea:	f383 8812 	msr	BASEPRI_MAX, r3
   1e5ee:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   1e5f2:	69e3      	ldr	r3, [r4, #28]
   1e5f4:	b16b      	cbz	r3, 1e612 <hci_num_completed_packets+0x5e>
				conn->pending_no_cb--;
   1e5f6:	3b01      	subs	r3, #1
   1e5f8:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   1e5fa:	f382 8811 	msr	BASEPRI, r2
   1e5fe:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   1e602:	4620      	mov	r0, r4
   1e604:	f7e9 fc8e 	bl	7f24 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   1e608:	3e01      	subs	r6, #1
   1e60a:	f7fc fe7d 	bl	1b308 <z_impl_k_sem_give>
   1e60e:	b2b6      	uxth	r6, r6
   1e610:	e7e6      	b.n	1e5e0 <hci_num_completed_packets+0x2c>
	return list->head;
   1e612:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_GET(slist, snode)
   1e614:	b12b      	cbz	r3, 1e622 <hci_num_completed_packets+0x6e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1e616:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   1e618:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   1e61a:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1e61c:	428b      	cmp	r3, r1
	list->tail = node;
   1e61e:	bf08      	it	eq
   1e620:	61a0      	streq	r0, [r4, #24]
   1e622:	f382 8811 	msr	BASEPRI, r2
   1e626:	f3bf 8f6f 	isb	sy
			if (!node) {
   1e62a:	b923      	cbnz	r3, 1e636 <hci_num_completed_packets+0x82>
		bt_conn_unref(conn);
   1e62c:	4620      	mov	r0, r4
   1e62e:	f000 fc07 	bl	1ee40 <bt_conn_unref>
	for (i = 0; i < evt->num_handles; i++) {
   1e632:	3501      	adds	r5, #1
   1e634:	e7c3      	b.n	1e5be <hci_num_completed_packets+0xa>
	__asm__ volatile(
   1e636:	f04f 0220 	mov.w	r2, #32
   1e63a:	f3ef 8111 	mrs	r1, BASEPRI
   1e63e:	f382 8812 	msr	BASEPRI_MAX, r2
   1e642:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   1e646:	68da      	ldr	r2, [r3, #12]
   1e648:	61e2      	str	r2, [r4, #28]
	return list->tail;
   1e64a:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
   1e64c:	f8c3 800c 	str.w	r8, [r3, #12]
	parent->next = child;
   1e650:	f8c3 8000 	str.w	r8, [r3]
Z_GENLIST_APPEND(slist, snode)
   1e654:	b94a      	cbnz	r2, 1e66a <hci_num_completed_packets+0xb6>
	list->head = node;
   1e656:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   1e65a:	f381 8811 	msr	BASEPRI, r1
   1e65e:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   1e662:	4648      	mov	r0, r9
   1e664:	f7fc ffbc 	bl	1b5e0 <k_work_submit>
   1e668:	e7cb      	b.n	1e602 <hci_num_completed_packets+0x4e>
	parent->next = child;
   1e66a:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1e66c:	6263      	str	r3, [r4, #36]	; 0x24
}
   1e66e:	e7f4      	b.n	1e65a <hci_num_completed_packets+0xa6>

0001e670 <le_conn_update_complete>:
{
   1e670:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   1e672:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   1e674:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   1e678:	f7e9 fd00 	bl	807c <bt_conn_lookup_handle>
	if (!conn) {
   1e67c:	4604      	mov	r4, r0
   1e67e:	2800      	cmp	r0, #0
   1e680:	d043      	beq.n	1e70a <le_conn_update_complete+0x9a>
	if (!evt->status) {
   1e682:	782b      	ldrb	r3, [r5, #0]
   1e684:	b9cb      	cbnz	r3, 1e6ba <le_conn_update_complete+0x4a>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   1e686:	792a      	ldrb	r2, [r5, #4]
   1e688:	78eb      	ldrb	r3, [r5, #3]
   1e68a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1e68e:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   1e692:	79aa      	ldrb	r2, [r5, #6]
   1e694:	796b      	ldrb	r3, [r5, #5]
   1e696:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1e69a:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   1e69e:	79eb      	ldrb	r3, [r5, #7]
   1e6a0:	7a2a      	ldrb	r2, [r5, #8]
   1e6a2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1e6a6:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
   1e6aa:	f7e9 fdb5 	bl	8218 <notify_le_param_updated>
	bt_conn_unref(conn);
   1e6ae:	4620      	mov	r0, r4
}
   1e6b0:	b003      	add	sp, #12
   1e6b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	bt_conn_unref(conn);
   1e6b6:	f000 bbc3 	b.w	1ee40 <bt_conn_unref>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   1e6ba:	2b1a      	cmp	r3, #26
   1e6bc:	d1f7      	bne.n	1e6ae <le_conn_update_complete+0x3e>
   1e6be:	78c3      	ldrb	r3, [r0, #3]
   1e6c0:	2b01      	cmp	r3, #1
   1e6c2:	d1f4      	bne.n	1e6ae <le_conn_update_complete+0x3e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e6c4:	f3bf 8f5b 	dmb	ish
   1e6c8:	1d03      	adds	r3, r0, #4
   1e6ca:	e853 2f00 	ldrex	r2, [r3]
   1e6ce:	f442 6180 	orr.w	r1, r2, #1024	; 0x400
   1e6d2:	e843 1500 	strex	r5, r1, [r3]
   1e6d6:	2d00      	cmp	r5, #0
   1e6d8:	d1f7      	bne.n	1e6ca <le_conn_update_complete+0x5a>
   1e6da:	f3bf 8f5b 	dmb	ish
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   1e6de:	0553      	lsls	r3, r2, #21
   1e6e0:	d4e5      	bmi.n	1e6ae <le_conn_update_complete+0x3e>
		param.interval_min = conn->le.interval_min;
   1e6e2:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
   1e6e6:	f8ad 3000 	strh.w	r3, [sp]
		param.interval_max = conn->le.interval_max;
   1e6ea:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
   1e6ee:	f8ad 3002 	strh.w	r3, [sp, #2]
		param.latency = conn->le.pending_latency;
   1e6f2:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
   1e6f6:	f8ad 3004 	strh.w	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   1e6fa:	4669      	mov	r1, sp
		param.timeout = conn->le.pending_timeout;
   1e6fc:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
   1e700:	f8ad 3006 	strh.w	r3, [sp, #6]
		bt_l2cap_update_conn_param(conn, &param);
   1e704:	f7ea f85e 	bl	87c4 <bt_l2cap_update_conn_param>
   1e708:	e7d1      	b.n	1e6ae <le_conn_update_complete+0x3e>
}
   1e70a:	b003      	add	sp, #12
   1e70c:	bd30      	pop	{r4, r5, pc}

0001e70e <le_conn_param_neg_reply>:
{
   1e70e:	b570      	push	{r4, r5, r6, lr}
   1e710:	4606      	mov	r6, r0
   1e712:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   1e714:	f242 0021 	movw	r0, #8225	; 0x2021
   1e718:	2103      	movs	r1, #3
   1e71a:	f7e7 ff1b 	bl	6554 <bt_hci_cmd_create>
	if (!buf) {
   1e71e:	4604      	mov	r4, r0
   1e720:	b160      	cbz	r0, 1e73c <le_conn_param_neg_reply+0x2e>
	return net_buf_simple_add(&buf->b, len);
   1e722:	2103      	movs	r1, #3
   1e724:	3008      	adds	r0, #8
   1e726:	f006 faf6 	bl	24d16 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
   1e72a:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
   1e72c:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1e72e:	4621      	mov	r1, r4
   1e730:	f242 0021 	movw	r0, #8225	; 0x2021
}
   1e734:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1e738:	f7e7 bf46 	b.w	65c8 <bt_hci_cmd_send>
}
   1e73c:	bd70      	pop	{r4, r5, r6, pc}

0001e73e <le_conn_param_req>:
{
   1e73e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   1e740:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   1e742:	78d9      	ldrb	r1, [r3, #3]
   1e744:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   1e746:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   1e748:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1e74c:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   1e750:	7959      	ldrb	r1, [r3, #5]
   1e752:	791a      	ldrb	r2, [r3, #4]
   1e754:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1e758:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   1e75c:	799a      	ldrb	r2, [r3, #6]
   1e75e:	79d9      	ldrb	r1, [r3, #7]
   1e760:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1e764:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1e768:	7a1a      	ldrb	r2, [r3, #8]
   1e76a:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   1e76c:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1e76e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   1e772:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1e774:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   1e778:	f7e9 fc80 	bl	807c <bt_conn_lookup_handle>
	if (!conn) {
   1e77c:	4606      	mov	r6, r0
   1e77e:	b928      	cbnz	r0, 1e78c <le_conn_param_req+0x4e>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   1e780:	2102      	movs	r1, #2
   1e782:	4620      	mov	r0, r4
   1e784:	f7ff ffc3 	bl	1e70e <le_conn_param_neg_reply>
}
   1e788:	b003      	add	sp, #12
   1e78a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   1e78c:	4669      	mov	r1, sp
   1e78e:	f7e9 fd8f 	bl	82b0 <le_param_req>
   1e792:	b938      	cbnz	r0, 1e7a4 <le_conn_param_req+0x66>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   1e794:	211e      	movs	r1, #30
   1e796:	4620      	mov	r0, r4
   1e798:	f7ff ffb9 	bl	1e70e <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   1e79c:	4630      	mov	r0, r6
   1e79e:	f000 fb4f 	bl	1ee40 <bt_conn_unref>
   1e7a2:	e7f1      	b.n	1e788 <le_conn_param_req+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   1e7a4:	210e      	movs	r1, #14
   1e7a6:	f242 0020 	movw	r0, #8224	; 0x2020
   1e7aa:	f7e7 fed3 	bl	6554 <bt_hci_cmd_create>
	if (!buf) {
   1e7ae:	4605      	mov	r5, r0
   1e7b0:	2800      	cmp	r0, #0
   1e7b2:	d0f3      	beq.n	1e79c <le_conn_param_req+0x5e>
   1e7b4:	210e      	movs	r1, #14
   1e7b6:	3008      	adds	r0, #8
   1e7b8:	f006 faad 	bl	24d16 <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
   1e7bc:	220e      	movs	r2, #14
   1e7be:	4604      	mov	r4, r0
   1e7c0:	2100      	movs	r1, #0
   1e7c2:	f7ff fc41 	bl	1e048 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   1e7c6:	f8bd 3000 	ldrh.w	r3, [sp]
   1e7ca:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   1e7cc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   1e7d0:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   1e7d2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1e7d6:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   1e7d8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
   1e7dc:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   1e7de:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   1e7e0:	4629      	mov	r1, r5
   1e7e2:	f242 0020 	movw	r0, #8224	; 0x2020
   1e7e6:	f7e7 feef 	bl	65c8 <bt_hci_cmd_send>
   1e7ea:	e7d7      	b.n	1e79c <le_conn_param_req+0x5e>

0001e7ec <le_remote_feat_complete>:
{
   1e7ec:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   1e7ee:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   1e7f0:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   1e7f4:	f7e9 fc42 	bl	807c <bt_conn_lookup_handle>
	if (!conn) {
   1e7f8:	4604      	mov	r4, r0
   1e7fa:	b1d8      	cbz	r0, 1e834 <le_remote_feat_complete+0x48>
	if (!evt->status) {
   1e7fc:	782b      	ldrb	r3, [r5, #0]
   1e7fe:	b923      	cbnz	r3, 1e80a <le_remote_feat_complete+0x1e>
		memcpy(conn->le.features, evt->features,
   1e800:	2208      	movs	r2, #8
   1e802:	1ce9      	adds	r1, r5, #3
   1e804:	30ac      	adds	r0, #172	; 0xac
   1e806:	f7ff fc14 	bl	1e032 <memcpy>
   1e80a:	f3bf 8f5b 	dmb	ish
   1e80e:	1d23      	adds	r3, r4, #4
   1e810:	e853 2f00 	ldrex	r2, [r3]
   1e814:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   1e818:	e843 2100 	strex	r1, r2, [r3]
   1e81c:	2900      	cmp	r1, #0
   1e81e:	d1f7      	bne.n	1e810 <le_remote_feat_complete+0x24>
   1e820:	f3bf 8f5b 	dmb	ish
	conn_auto_initiate(conn);
   1e824:	4620      	mov	r0, r4
   1e826:	f7e7 fef1 	bl	660c <conn_auto_initiate>
	bt_conn_unref(conn);
   1e82a:	4620      	mov	r0, r4
}
   1e82c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   1e830:	f000 bb06 	b.w	1ee40 <bt_conn_unref>
}
   1e834:	bd38      	pop	{r3, r4, r5, pc}

0001e836 <bt_hci_disconnect>:
{
   1e836:	b570      	push	{r4, r5, r6, lr}
   1e838:	4606      	mov	r6, r0
   1e83a:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   1e83c:	f240 4006 	movw	r0, #1030	; 0x406
   1e840:	2103      	movs	r1, #3
   1e842:	f7e7 fe87 	bl	6554 <bt_hci_cmd_create>
	if (!buf) {
   1e846:	4604      	mov	r4, r0
   1e848:	b168      	cbz	r0, 1e866 <bt_hci_disconnect+0x30>
   1e84a:	2103      	movs	r1, #3
   1e84c:	3008      	adds	r0, #8
   1e84e:	f006 fa62 	bl	24d16 <net_buf_simple_add>
	disconn->reason = reason;
   1e852:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   1e854:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1e856:	4621      	mov	r1, r4
   1e858:	2200      	movs	r2, #0
}
   1e85a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1e85e:	f240 4006 	movw	r0, #1030	; 0x406
   1e862:	f7e7 befd 	b.w	6660 <bt_hci_cmd_send_sync>
}
   1e866:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1e86a:	bd70      	pop	{r4, r5, r6, pc}

0001e86c <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   1e86c:	6880      	ldr	r0, [r0, #8]
   1e86e:	f7e7 bf59 	b.w	6724 <bt_hci_le_enh_conn_complete>

0001e872 <le_legacy_conn_complete>:
{
   1e872:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   1e874:	6881      	ldr	r1, [r0, #8]
{
   1e876:	b08a      	sub	sp, #40	; 0x28
	enh.status         = evt->status;
   1e878:	780b      	ldrb	r3, [r1, #0]
   1e87a:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   1e87e:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   1e882:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   1e886:	78cb      	ldrb	r3, [r1, #3]
   1e888:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   1e88c:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   1e890:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   1e894:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   1e898:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   1e89c:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   1e8a0:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   1e8a4:	7c4b      	ldrb	r3, [r1, #17]
   1e8a6:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   1e8aa:	2207      	movs	r2, #7
   1e8ac:	3104      	adds	r1, #4
   1e8ae:	a803      	add	r0, sp, #12
   1e8b0:	f7ff fbbf 	bl	1e032 <memcpy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   1e8b4:	2400      	movs	r4, #0
	memcpy(dst, src, sizeof(*dst));
   1e8b6:	4669      	mov	r1, sp
   1e8b8:	2206      	movs	r2, #6
   1e8ba:	f10d 0013 	add.w	r0, sp, #19
   1e8be:	9400      	str	r4, [sp, #0]
   1e8c0:	f8ad 4004 	strh.w	r4, [sp, #4]
   1e8c4:	f7ff fbb5 	bl	1e032 <memcpy>
   1e8c8:	2206      	movs	r2, #6
   1e8ca:	4669      	mov	r1, sp
   1e8cc:	f10d 0019 	add.w	r0, sp, #25
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   1e8d0:	9400      	str	r4, [sp, #0]
   1e8d2:	f8ad 4004 	strh.w	r4, [sp, #4]
   1e8d6:	f7ff fbac 	bl	1e032 <memcpy>
	bt_hci_le_enh_conn_complete(evt);
   1e8da:	a802      	add	r0, sp, #8
   1e8dc:	f7e7 ff22 	bl	6724 <bt_hci_le_enh_conn_complete>
}
   1e8e0:	b00a      	add	sp, #40	; 0x28
   1e8e2:	bd10      	pop	{r4, pc}

0001e8e4 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   1e8e4:	8803      	ldrh	r3, [r0, #0]
   1e8e6:	8842      	ldrh	r2, [r0, #2]
   1e8e8:	4293      	cmp	r3, r2
{
   1e8ea:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   1e8ec:	d819      	bhi.n	1e922 <bt_le_conn_params_valid+0x3e>
   1e8ee:	2b05      	cmp	r3, #5
   1e8f0:	d917      	bls.n	1e922 <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   1e8f2:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   1e8f6:	d814      	bhi.n	1e922 <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   1e8f8:	8883      	ldrh	r3, [r0, #4]
   1e8fa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   1e8fe:	d210      	bcs.n	1e922 <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   1e900:	88c0      	ldrh	r0, [r0, #6]
   1e902:	f1a0 010a 	sub.w	r1, r0, #10
   1e906:	b289      	uxth	r1, r1
   1e908:	f640 4476 	movw	r4, #3190	; 0xc76
   1e90c:	42a1      	cmp	r1, r4
   1e90e:	d808      	bhi.n	1e922 <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   1e910:	3301      	adds	r3, #1
   1e912:	b29b      	uxth	r3, r3
   1e914:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   1e916:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   1e91a:	bf34      	ite	cc
   1e91c:	2001      	movcc	r0, #1
   1e91e:	2000      	movcs	r0, #0
}
   1e920:	bd10      	pop	{r4, pc}
		return false;
   1e922:	2000      	movs	r0, #0
   1e924:	e7fc      	b.n	1e920 <bt_le_conn_params_valid+0x3c>

0001e926 <bt_send>:
		return bt_hci_ecc_send(buf);
   1e926:	f7e7 bb65 	b.w	5ff4 <bt_hci_ecc_send>

0001e92a <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
   1e92a:	2000      	movs	r0, #0
   1e92c:	4770      	bx	lr

0001e92e <bt_hci_evt_create>:
#include <stdint.h>
#include <sys/byteorder.h>
#include <drivers/bluetooth/hci_driver.h>

struct net_buf *bt_hci_evt_create(uint8_t evt, uint8_t len)
{
   1e92e:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;

	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   1e930:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   1e934:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   1e936:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e93a:	2100      	movs	r1, #0
{
   1e93c:	4606      	mov	r6, r0
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   1e93e:	f7e7 fc4b 	bl	61d8 <bt_buf_get_evt>
   1e942:	2102      	movs	r1, #2
   1e944:	4604      	mov	r4, r0
   1e946:	3008      	adds	r0, #8
   1e948:	f006 f9e5 	bl	24d16 <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = evt;
   1e94c:	7006      	strb	r6, [r0, #0]
	hdr->len = len;
   1e94e:	7045      	strb	r5, [r0, #1]

	return buf;
}
   1e950:	4620      	mov	r0, r4
   1e952:	bd70      	pop	{r4, r5, r6, pc}

0001e954 <bt_hci_cmd_complete_create>:
struct net_buf *bt_hci_cmd_complete_create(uint16_t op, uint8_t plen)
{
	struct net_buf *buf;
	struct bt_hci_evt_cmd_complete *cc;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   1e954:	3103      	adds	r1, #3
{
   1e956:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   1e958:	b2c9      	uxtb	r1, r1
{
   1e95a:	4605      	mov	r5, r0
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   1e95c:	200e      	movs	r0, #14
   1e95e:	f7ff ffe6 	bl	1e92e <bt_hci_evt_create>
   1e962:	2103      	movs	r1, #3
   1e964:	4604      	mov	r4, r0
   1e966:	3008      	adds	r0, #8
   1e968:	f006 f9d5 	bl	24d16 <net_buf_simple_add>

	cc = net_buf_add(buf, sizeof(*cc));
	cc->ncmd = 1U;
   1e96c:	2301      	movs	r3, #1
   1e96e:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(op);
   1e970:	f8a0 5001 	strh.w	r5, [r0, #1]

	return buf;
}
   1e974:	4620      	mov	r0, r4
   1e976:	bd38      	pop	{r3, r4, r5, pc}

0001e978 <bt_hci_cmd_status_create>:

struct net_buf *bt_hci_cmd_status_create(uint16_t op, uint8_t status)
{
   1e978:	b570      	push	{r4, r5, r6, lr}
   1e97a:	4605      	mov	r5, r0
   1e97c:	460e      	mov	r6, r1
	struct net_buf *buf;
	struct bt_hci_evt_cmd_status *cs;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   1e97e:	200f      	movs	r0, #15
   1e980:	2104      	movs	r1, #4
   1e982:	f7ff ffd4 	bl	1e92e <bt_hci_evt_create>
   1e986:	2104      	movs	r1, #4
   1e988:	4604      	mov	r4, r0
   1e98a:	3008      	adds	r0, #8
   1e98c:	f006 f9c3 	bl	24d16 <net_buf_simple_add>

	cs = net_buf_add(buf, sizeof(*cs));
	cs->status = status;
	cs->ncmd = 1U;
   1e990:	2201      	movs	r2, #1
	cs->status = status;
   1e992:	7006      	strb	r6, [r0, #0]
	cs->ncmd = 1U;
   1e994:	7042      	strb	r2, [r0, #1]
	cs->opcode = sys_cpu_to_le16(op);
   1e996:	8045      	strh	r5, [r0, #2]

	return buf;
}
   1e998:	4620      	mov	r0, r4
   1e99a:	bd70      	pop	{r4, r5, r6, pc}

0001e99c <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e99c:	f3bf 8f5b 	dmb	ish
   1e9a0:	6800      	ldr	r0, [r0, #0]
   1e9a2:	f3bf 8f5b 	dmb	ish
}
   1e9a6:	4770      	bx	lr

0001e9a8 <is_adv_using_rand_addr>:
{
   1e9a8:	b508      	push	{r3, lr}
	adv = bt_le_adv_lookup_legacy();
   1e9aa:	f7e8 fd6b 	bl	7484 <bt_le_adv_lookup_legacy>
	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
   1e9ae:	b120      	cbz	r0, 1e9ba <is_adv_using_rand_addr+0x12>
   1e9b0:	3010      	adds	r0, #16
   1e9b2:	f7ff fff3 	bl	1e99c <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1e9b6:	f3c0 1080 	ubfx	r0, r0, #6, #1
}
   1e9ba:	bd08      	pop	{r3, pc}

0001e9bc <bt_lookup_id_addr>:
}
   1e9bc:	4608      	mov	r0, r1
   1e9be:	4770      	bx	lr

0001e9c0 <bt_id_set_private_addr>:
{
   1e9c0:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   1e9c2:	2106      	movs	r1, #6
   1e9c4:	4668      	mov	r0, sp
   1e9c6:	f005 fa84 	bl	23ed2 <bt_rand>
	if (err) {
   1e9ca:	b940      	cbnz	r0, 1e9de <bt_id_set_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   1e9cc:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   1e9d0:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   1e9d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1e9d6:	f88d 3005 	strb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   1e9da:	f7e8 facd 	bl	6f78 <set_random_address>
}
   1e9de:	b003      	add	sp, #12
   1e9e0:	f85d fb04 	ldr.w	pc, [sp], #4

0001e9e4 <bt_id_set_adv_private_addr>:
{
   1e9e4:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   1e9e6:	2106      	movs	r1, #6
   1e9e8:	4668      	mov	r0, sp
   1e9ea:	f005 fa72 	bl	23ed2 <bt_rand>
	if (err) {
   1e9ee:	b940      	cbnz	r0, 1ea02 <bt_id_set_adv_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   1e9f0:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
   1e9f4:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   1e9f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1e9fa:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
   1e9fe:	f7e8 fabb 	bl	6f78 <set_random_address>
}
   1ea02:	b003      	add	sp, #12
   1ea04:	f85d fb04 	ldr.w	pc, [sp], #4

0001ea08 <bt_id_scan_random_addr_check>:
{
   1ea08:	b508      	push	{r3, lr}
	adv = bt_le_adv_lookup_legacy();
   1ea0a:	f7e8 fd3b 	bl	7484 <bt_le_adv_lookup_legacy>
	if (!adv) {
   1ea0e:	b110      	cbz	r0, 1ea16 <bt_id_scan_random_addr_check+0xe>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1ea10:	3010      	adds	r0, #16
   1ea12:	f7ff ffc3 	bl	1e99c <atomic_get>
}
   1ea16:	2001      	movs	r0, #1
   1ea18:	bd08      	pop	{r3, pc}

0001ea1a <get_adv_channel_map>:
{
   1ea1a:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   1ea1c:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   1ea20:	bf0c      	ite	eq
   1ea22:	2007      	moveq	r0, #7
   1ea24:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   1ea26:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   1ea28:	bf48      	it	mi
   1ea2a:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   1ea2e:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   1ea30:	bf48      	it	mi
   1ea32:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   1ea36:	4770      	bx	lr

0001ea38 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ea38:	f3bf 8f5b 	dmb	ish
   1ea3c:	6800      	ldr	r0, [r0, #0]
   1ea3e:	f3bf 8f5b 	dmb	ish
}
   1ea42:	4770      	bx	lr

0001ea44 <atomic_and>:
{
   1ea44:	4603      	mov	r3, r0
}
   1ea46:	f3bf 8f5b 	dmb	ish
   1ea4a:	e853 0f00 	ldrex	r0, [r3]
   1ea4e:	ea00 0201 	and.w	r2, r0, r1
   1ea52:	e843 2c00 	strex	ip, r2, [r3]
   1ea56:	f1bc 0f00 	cmp.w	ip, #0
   1ea5a:	d1f6      	bne.n	1ea4a <atomic_and+0x6>
   1ea5c:	f3bf 8f5b 	dmb	ish
   1ea60:	4770      	bx	lr

0001ea62 <hci_set_ad>:
{
   1ea62:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ea66:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   1ea68:	2120      	movs	r1, #32
{
   1ea6a:	4682      	mov	sl, r0
   1ea6c:	4616      	mov	r6, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   1ea6e:	f7e7 fd71 	bl	6554 <bt_hci_cmd_create>
	if (!buf) {
   1ea72:	4605      	mov	r5, r0
   1ea74:	2800      	cmp	r0, #0
   1ea76:	d04a      	beq.n	1eb0e <hci_set_ad+0xac>
   1ea78:	2120      	movs	r1, #32
   1ea7a:	3008      	adds	r0, #8
   1ea7c:	f006 f94b 	bl	24d16 <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
   1ea80:	2220      	movs	r2, #32
   1ea82:	2100      	movs	r1, #0
   1ea84:	4681      	mov	r9, r0
   1ea86:	f7ff fadf 	bl	1e048 <memset>
	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   1ea8a:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
   1ea8e:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   1ea92:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;
   1ea94:	2600      	movs	r6, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   1ea96:	f8d4 8000 	ldr.w	r8, [r4]
   1ea9a:	2300      	movs	r3, #0
   1ea9c:	6862      	ldr	r2, [r4, #4]
   1ea9e:	4293      	cmp	r3, r2
   1eaa0:	d30d      	bcc.n	1eabe <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
   1eaa2:	9b00      	ldr	r3, [sp, #0]
   1eaa4:	3408      	adds	r4, #8
   1eaa6:	42a3      	cmp	r3, r4
   1eaa8:	d1f5      	bne.n	1ea96 <hci_set_ad+0x34>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   1eaaa:	2200      	movs	r2, #0
   1eaac:	4629      	mov	r1, r5
   1eaae:	4650      	mov	r0, sl
	*data_len = set_data_len;
   1eab0:	f889 6000 	strb.w	r6, [r9]
}
   1eab4:	b003      	add	sp, #12
   1eab6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   1eaba:	f7e7 bdd1 	b.w	6660 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   1eabe:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   1eac2:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   1eac6:	1cb0      	adds	r0, r6, #2
   1eac8:	1811      	adds	r1, r2, r0
   1eaca:	291f      	cmp	r1, #31
   1eacc:	d908      	bls.n	1eae0 <hci_set_ad+0x7e>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   1eace:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   1ead2:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
   1ead6:	d11f      	bne.n	1eb18 <hci_set_ad+0xb6>
   1ead8:	2a00      	cmp	r2, #0
   1eada:	dd1d      	ble.n	1eb18 <hci_set_ad+0xb6>
				type = BT_DATA_NAME_SHORTENED;
   1eadc:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   1eae0:	b2d7      	uxtb	r7, r2
   1eae2:	1c79      	adds	r1, r7, #1
   1eae4:	f80b 1006 	strb.w	r1, [fp, r6]
   1eae8:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
   1eaea:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
   1eaec:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
   1eaf0:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
   1eaf4:	f8d8 1004 	ldr.w	r1, [r8, #4]
   1eaf8:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   1eafa:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
   1eafc:	f7ff fa99 	bl	1e032 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   1eb00:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
   1eb02:	443e      	add	r6, r7
   1eb04:	b2f6      	uxtb	r6, r6
		for (size_t j = 0; j < ad[i].len; j++) {
   1eb06:	3301      	adds	r3, #1
   1eb08:	f108 0808 	add.w	r8, r8, #8
   1eb0c:	e7c6      	b.n	1ea9c <hci_set_ad+0x3a>
		return -ENOBUFS;
   1eb0e:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   1eb12:	b003      	add	sp, #12
   1eb14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		net_buf_unref(buf);
   1eb18:	4628      	mov	r0, r5
   1eb1a:	f7f8 faad 	bl	17078 <net_buf_unref>
		return err;
   1eb1e:	f06f 0015 	mvn.w	r0, #21
   1eb22:	e7f6      	b.n	1eb12 <hci_set_ad+0xb0>

0001eb24 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1eb24:	2301      	movs	r3, #1
{
   1eb26:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   1eb28:	fa03 f101 	lsl.w	r1, r3, r1
{
   1eb2c:	4604      	mov	r4, r0
	if (val) {
   1eb2e:	b162      	cbz	r2, 1eb4a <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1eb30:	f3bf 8f5b 	dmb	ish
   1eb34:	e854 3f00 	ldrex	r3, [r4]
   1eb38:	430b      	orrs	r3, r1
   1eb3a:	e844 3200 	strex	r2, r3, [r4]
   1eb3e:	2a00      	cmp	r2, #0
   1eb40:	d1f8      	bne.n	1eb34 <atomic_set_bit_to+0x10>
   1eb42:	f3bf 8f5b 	dmb	ish
}
   1eb46:	bc10      	pop	{r4}
   1eb48:	4770      	bx	lr
   1eb4a:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1eb4c:	43c9      	mvns	r1, r1
   1eb4e:	f7ff bf79 	b.w	1ea44 <atomic_and>

0001eb52 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   1eb52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eb56:	b087      	sub	sp, #28
   1eb58:	4605      	mov	r5, r0
   1eb5a:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   1eb5e:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   1eb62:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   1eb66:	460c      	mov	r4, r1
   1eb68:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   1eb6a:	2100      	movs	r1, #0
   1eb6c:	2210      	movs	r2, #16
   1eb6e:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   1eb70:	461f      	mov	r7, r3
	struct bt_ad d[2] = {};
   1eb72:	f7ff fa69 	bl	1e048 <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   1eb76:	b186      	cbz	r6, 1eb9a <le_adv_update.constprop.0+0x48>
		const char *name = bt_get_name();
   1eb78:	f7e8 f9e0 	bl	6f3c <bt_get_name>
   1eb7c:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   1eb7e:	2c00      	cmp	r4, #0
   1eb80:	d139      	bne.n	1ebf6 <le_adv_update.constprop.0+0xa4>
   1eb82:	2f00      	cmp	r7, #0
   1eb84:	d142      	bne.n	1ec0c <le_adv_update.constprop.0+0xba>
		data = (struct bt_data)BT_DATA(
   1eb86:	4658      	mov	r0, fp
   1eb88:	f7ff fa26 	bl	1dfd8 <strlen>
   1eb8c:	2309      	movs	r3, #9
   1eb8e:	f88d 3000 	strb.w	r3, [sp]
   1eb92:	f88d 0001 	strb.w	r0, [sp, #1]
   1eb96:	f8cd b004 	str.w	fp, [sp, #4]
		if (name_type == ADV_NAME_TYPE_AD) {
   1eb9a:	2e01      	cmp	r6, #1
			d_len = 2;
   1eb9c:	bf0c      	ite	eq
   1eb9e:	2202      	moveq	r2, #2
		d_len = 1;
   1eba0:	2201      	movne	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   1eba2:	a902      	add	r1, sp, #8
   1eba4:	f242 0008 	movw	r0, #8200	; 0x2008
		d[0].len = ad_len;
   1eba8:	e9cd 4802 	strd	r4, r8, [sp, #8]
			d[1].data = &data;
   1ebac:	bf04      	itt	eq
   1ebae:	f8cd d010 	streq.w	sp, [sp, #16]
			d[1].len = 1;
   1ebb2:	9605      	streq	r6, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   1ebb4:	f7ff ff55 	bl	1ea62 <hci_set_ad>
		if (err) {
   1ebb8:	4604      	mov	r4, r0
   1ebba:	b978      	cbnz	r0, 1ebdc <le_adv_update.constprop.0+0x8a>
	if (scannable) {
   1ebbc:	f1ba 0f00 	cmp.w	sl, #0
   1ebc0:	d126      	bne.n	1ec10 <le_adv_update.constprop.0+0xbe>
   1ebc2:	3510      	adds	r5, #16
   1ebc4:	f3bf 8f5b 	dmb	ish
   1ebc8:	e855 3f00 	ldrex	r3, [r5]
   1ebcc:	f043 0304 	orr.w	r3, r3, #4
   1ebd0:	e845 3200 	strex	r2, r3, [r5]
   1ebd4:	2a00      	cmp	r2, #0
   1ebd6:	d1f7      	bne.n	1ebc8 <le_adv_update.constprop.0+0x76>
   1ebd8:	f3bf 8f5b 	dmb	ish
}
   1ebdc:	4620      	mov	r0, r4
   1ebde:	b007      	add	sp, #28
   1ebe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   1ebe4:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   1ebe8:	3a08      	subs	r2, #8
   1ebea:	2a01      	cmp	r2, #1
   1ebec:	d925      	bls.n	1ec3a <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   1ebee:	3301      	adds	r3, #1
   1ebf0:	4598      	cmp	r8, r3
   1ebf2:	d1f7      	bne.n	1ebe4 <le_adv_update.constprop.0+0x92>
   1ebf4:	e7c5      	b.n	1eb82 <le_adv_update.constprop.0+0x30>
   1ebf6:	2300      	movs	r3, #0
   1ebf8:	e7fa      	b.n	1ebf0 <le_adv_update.constprop.0+0x9e>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   1ebfa:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   1ebfe:	3a08      	subs	r2, #8
   1ec00:	2a01      	cmp	r2, #1
   1ec02:	d91a      	bls.n	1ec3a <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   1ec04:	3301      	adds	r3, #1
   1ec06:	4599      	cmp	r9, r3
   1ec08:	d1f7      	bne.n	1ebfa <le_adv_update.constprop.0+0xa8>
   1ec0a:	e7bc      	b.n	1eb86 <le_adv_update.constprop.0+0x34>
   1ec0c:	2300      	movs	r3, #0
   1ec0e:	e7fa      	b.n	1ec06 <le_adv_update.constprop.0+0xb4>
		if (name_type == ADV_NAME_TYPE_SD) {
   1ec10:	2e02      	cmp	r6, #2
   1ec12:	f04f 0201 	mov.w	r2, #1
			d[1].len = 1;
   1ec16:	bf08      	it	eq
   1ec18:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   1ec1a:	a902      	add	r1, sp, #8
			d_len = 2;
   1ec1c:	bf08      	it	eq
   1ec1e:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   1ec20:	f242 0009 	movw	r0, #8201	; 0x2009
			d[1].data = &data;
   1ec24:	bf08      	it	eq
   1ec26:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   1ec2a:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   1ec2e:	f7ff ff18 	bl	1ea62 <hci_set_ad>
		if (err) {
   1ec32:	2800      	cmp	r0, #0
   1ec34:	d0c5      	beq.n	1ebc2 <le_adv_update.constprop.0+0x70>
   1ec36:	4604      	mov	r4, r0
   1ec38:	e7d0      	b.n	1ebdc <le_adv_update.constprop.0+0x8a>
			return -EINVAL;
   1ec3a:	f06f 0415 	mvn.w	r4, #21
   1ec3e:	e7cd      	b.n	1ebdc <le_adv_update.constprop.0+0x8a>

0001ec40 <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   1ec40:	6843      	ldr	r3, [r0, #4]
   1ec42:	f013 0008 	ands.w	r0, r3, #8
   1ec46:	d00a      	beq.n	1ec5e <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   1ec48:	035a      	lsls	r2, r3, #13
   1ec4a:	d407      	bmi.n	1ec5c <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   1ec4c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
		return ADV_NAME_TYPE_SD;
   1ec50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1ec54:	bf0c      	ite	eq
   1ec56:	2001      	moveq	r0, #1
   1ec58:	2002      	movne	r0, #2
   1ec5a:	4770      	bx	lr
			return ADV_NAME_TYPE_AD;
   1ec5c:	2001      	movs	r0, #1
}
   1ec5e:	4770      	bx	lr

0001ec60 <bt_le_adv_set_enable_legacy>:
{
   1ec60:	b570      	push	{r4, r5, r6, lr}
   1ec62:	4606      	mov	r6, r0
   1ec64:	b086      	sub	sp, #24
   1ec66:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   1ec68:	f242 000a 	movw	r0, #8202	; 0x200a
   1ec6c:	2101      	movs	r1, #1
   1ec6e:	f7e7 fc71 	bl	6554 <bt_hci_cmd_create>
	if (!buf) {
   1ec72:	4604      	mov	r4, r0
   1ec74:	b1b0      	cbz	r0, 1eca4 <bt_le_adv_set_enable_legacy+0x44>
	return net_buf_simple_add_u8(&buf->b, val);
   1ec76:	3008      	adds	r0, #8
	if (enable) {
   1ec78:	b195      	cbz	r5, 1eca0 <bt_le_adv_set_enable_legacy+0x40>
   1ec7a:	2101      	movs	r1, #1
   1ec7c:	f006 f85a 	bl	24d34 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   1ec80:	f106 0210 	add.w	r2, r6, #16
   1ec84:	a903      	add	r1, sp, #12
   1ec86:	4620      	mov	r0, r4
   1ec88:	9500      	str	r5, [sp, #0]
   1ec8a:	2306      	movs	r3, #6
   1ec8c:	f7e7 fc50 	bl	6530 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   1ec90:	2200      	movs	r2, #0
   1ec92:	4621      	mov	r1, r4
   1ec94:	f242 000a 	movw	r0, #8202	; 0x200a
   1ec98:	f7e7 fce2 	bl	6660 <bt_hci_cmd_send_sync>
}
   1ec9c:	b006      	add	sp, #24
   1ec9e:	bd70      	pop	{r4, r5, r6, pc}
   1eca0:	4629      	mov	r1, r5
   1eca2:	e7eb      	b.n	1ec7c <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   1eca4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1eca8:	e7f8      	b.n	1ec9c <bt_le_adv_set_enable_legacy+0x3c>

0001ecaa <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   1ecaa:	3018      	adds	r0, #24
   1ecac:	f006 bffe 	b.w	25cac <k_work_cancel_delayable>

0001ecb0 <adv_timeout>:
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   1ecb0:	f7e8 bd44 	b.w	773c <bt_le_adv_stop>

0001ecb4 <atomic_and>:
{
   1ecb4:	4603      	mov	r3, r0
}
   1ecb6:	f3bf 8f5b 	dmb	ish
   1ecba:	e853 0f00 	ldrex	r0, [r3]
   1ecbe:	ea00 0201 	and.w	r2, r0, r1
   1ecc2:	e843 2c00 	strex	ip, r2, [r3]
   1ecc6:	f1bc 0f00 	cmp.w	ip, #0
   1ecca:	d1f6      	bne.n	1ecba <atomic_and+0x6>
   1eccc:	f3bf 8f5b 	dmb	ish
   1ecd0:	4770      	bx	lr

0001ecd2 <bt_le_scan_set_enable>:
	return bt_le_scan_set_enable_legacy(enable);
   1ecd2:	f7e8 bdd3 	b.w	787c <bt_le_scan_set_enable_legacy>

0001ecd6 <tx_notify>:
{
   1ecd6:	b570      	push	{r4, r5, r6, lr}
   1ecd8:	4604      	mov	r4, r0
	__asm__ volatile(
   1ecda:	f04f 0220 	mov.w	r2, #32
   1ecde:	f3ef 8311 	mrs	r3, BASEPRI
   1ece2:	f382 8812 	msr	BASEPRI_MAX, r2
   1ece6:	f3bf 8f6f 	isb	sy
	return list->head;
   1ecea:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   1ecec:	b920      	cbnz	r0, 1ecf8 <tx_notify+0x22>
	__asm__ volatile(
   1ecee:	f383 8811 	msr	BASEPRI, r3
   1ecf2:	f3bf 8f6f 	isb	sy
}
   1ecf6:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1ecf8:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return node->next;
   1ecfa:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   1ecfc:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1ecfe:	4288      	cmp	r0, r1
	list->tail = node;
   1ed00:	bf08      	it	eq
   1ed02:	6262      	streq	r2, [r4, #36]	; 0x24
   1ed04:	f383 8811 	msr	BASEPRI, r3
   1ed08:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   1ed0c:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   1ed10:	f7e9 f852 	bl	7db8 <tx_free>
		cb(conn, user_data);
   1ed14:	4631      	mov	r1, r6
   1ed16:	4620      	mov	r0, r4
   1ed18:	47a8      	blx	r5
	while (1) {
   1ed1a:	e7de      	b.n	1ecda <tx_notify+0x4>

0001ed1c <tx_complete_work>:
	tx_notify(conn);
   1ed1c:	3828      	subs	r0, #40	; 0x28
   1ed1e:	f7ff bfda 	b.w	1ecd6 <tx_notify>

0001ed22 <bt_conn_reset_rx_state>:
{
   1ed22:	b510      	push	{r4, lr}
   1ed24:	4604      	mov	r4, r0
	if (!conn->rx) {
   1ed26:	6900      	ldr	r0, [r0, #16]
   1ed28:	b118      	cbz	r0, 1ed32 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   1ed2a:	f7f8 f9a5 	bl	17078 <net_buf_unref>
	conn->rx = NULL;
   1ed2e:	2300      	movs	r3, #0
   1ed30:	6123      	str	r3, [r4, #16]
}
   1ed32:	bd10      	pop	{r4, pc}

0001ed34 <conn_cleanup>:
{
   1ed34:	b570      	push	{r4, r5, r6, lr}
   1ed36:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   1ed38:	f100 0638 	add.w	r6, r0, #56	; 0x38
   1ed3c:	2200      	movs	r2, #0
   1ed3e:	2300      	movs	r3, #0
   1ed40:	4630      	mov	r0, r6
   1ed42:	f005 ff62 	bl	24c0a <net_buf_get>
   1ed46:	4605      	mov	r5, r0
   1ed48:	b950      	cbnz	r0, 1ed60 <conn_cleanup+0x2c>
	bt_conn_reset_rx_state(conn);
   1ed4a:	4620      	mov	r0, r4
   1ed4c:	f7ff ffe9 	bl	1ed22 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   1ed50:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1ed54:	2200      	movs	r2, #0
}
   1ed56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   1ed5a:	2300      	movs	r3, #0
   1ed5c:	f7fc bcdc 	b.w	1b718 <k_work_reschedule>
		if (tx_data(buf)->tx) {
   1ed60:	6968      	ldr	r0, [r5, #20]
   1ed62:	b108      	cbz	r0, 1ed68 <conn_cleanup+0x34>
			tx_free(tx_data(buf)->tx);
   1ed64:	f7e9 f828 	bl	7db8 <tx_free>
		net_buf_unref(buf);
   1ed68:	4628      	mov	r0, r5
   1ed6a:	f7f8 f985 	bl	17078 <net_buf_unref>
   1ed6e:	e7e5      	b.n	1ed3c <conn_cleanup+0x8>

0001ed70 <bt_conn_recv>:
{
   1ed70:	b570      	push	{r4, r5, r6, lr}
   1ed72:	4616      	mov	r6, r2
   1ed74:	4604      	mov	r4, r0
   1ed76:	460d      	mov	r5, r1
	tx_notify(conn);
   1ed78:	f7ff ffad 	bl	1ecd6 <tx_notify>
	switch (flags) {
   1ed7c:	2e01      	cmp	r6, #1
   1ed7e:	d017      	beq.n	1edb0 <bt_conn_recv+0x40>
   1ed80:	2e02      	cmp	r6, #2
   1ed82:	d117      	bne.n	1edb4 <bt_conn_recv+0x44>
		if (conn->rx) {
   1ed84:	6923      	ldr	r3, [r4, #16]
   1ed86:	b113      	cbz	r3, 1ed8e <bt_conn_recv+0x1e>
			bt_conn_reset_rx_state(conn);
   1ed88:	4620      	mov	r0, r4
   1ed8a:	f7ff ffca 	bl	1ed22 <bt_conn_reset_rx_state>
		conn->rx = buf;
   1ed8e:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   1ed90:	6921      	ldr	r1, [r4, #16]
   1ed92:	898a      	ldrh	r2, [r1, #12]
   1ed94:	2a01      	cmp	r2, #1
   1ed96:	d937      	bls.n	1ee08 <bt_conn_recv+0x98>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   1ed98:	688b      	ldr	r3, [r1, #8]
   1ed9a:	881b      	ldrh	r3, [r3, #0]
   1ed9c:	3304      	adds	r3, #4
   1ed9e:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   1eda0:	429a      	cmp	r2, r3
   1eda2:	d331      	bcc.n	1ee08 <bt_conn_recv+0x98>
	if (conn->rx->len > acl_total_len) {
   1eda4:	d928      	bls.n	1edf8 <bt_conn_recv+0x88>
		bt_conn_reset_rx_state(conn);
   1eda6:	4620      	mov	r0, r4
}
   1eda8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   1edac:	f7ff bfb9 	b.w	1ed22 <bt_conn_reset_rx_state>
		if (!conn->rx) {
   1edb0:	6920      	ldr	r0, [r4, #16]
   1edb2:	b918      	cbnz	r0, 1edbc <bt_conn_recv+0x4c>
		bt_conn_reset_rx_state(conn);
   1edb4:	4620      	mov	r0, r4
   1edb6:	f7ff ffb4 	bl	1ed22 <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   1edba:	e001      	b.n	1edc0 <bt_conn_recv+0x50>
		if (!buf->len) {
   1edbc:	89ae      	ldrh	r6, [r5, #12]
   1edbe:	b926      	cbnz	r6, 1edca <bt_conn_recv+0x5a>
			net_buf_unref(buf);
   1edc0:	4628      	mov	r0, r5
}
   1edc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   1edc6:	f7f8 b957 	b.w	17078 <net_buf_unref>
	return net_buf_simple_tailroom(&buf->b);
   1edca:	3008      	adds	r0, #8
   1edcc:	f006 f85d 	bl	24e8a <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   1edd0:	4286      	cmp	r6, r0
   1edd2:	d907      	bls.n	1ede4 <bt_conn_recv+0x74>
			bt_l2cap_recv(conn, conn->rx, false);
   1edd4:	6921      	ldr	r1, [r4, #16]
   1edd6:	2200      	movs	r2, #0
   1edd8:	4620      	mov	r0, r4
   1edda:	f000 f9ba 	bl	1f152 <bt_l2cap_recv>
			conn->rx = NULL;
   1edde:	2300      	movs	r3, #0
   1ede0:	6123      	str	r3, [r4, #16]
   1ede2:	e7ed      	b.n	1edc0 <bt_conn_recv+0x50>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1ede4:	6920      	ldr	r0, [r4, #16]
   1ede6:	89aa      	ldrh	r2, [r5, #12]
   1ede8:	68a9      	ldr	r1, [r5, #8]
   1edea:	3008      	adds	r0, #8
   1edec:	f005 ff99 	bl	24d22 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   1edf0:	4628      	mov	r0, r5
   1edf2:	f7f8 f941 	bl	17078 <net_buf_unref>
		break;
   1edf6:	e7cb      	b.n	1ed90 <bt_conn_recv+0x20>
	conn->rx = NULL;
   1edf8:	2300      	movs	r3, #0
   1edfa:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   1edfc:	4620      	mov	r0, r4
   1edfe:	2201      	movs	r2, #1
}
   1ee00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf, true);
   1ee04:	f000 b9a5 	b.w	1f152 <bt_l2cap_recv>
}
   1ee08:	bd70      	pop	{r4, r5, r6, pc}

0001ee0a <bt_conn_ref>:
{
   1ee0a:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   1ee0c:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ee10:	f3bf 8f5b 	dmb	ish
   1ee14:	6813      	ldr	r3, [r2, #0]
   1ee16:	f3bf 8f5b 	dmb	ish
		if (!old) {
   1ee1a:	b17b      	cbz	r3, 1ee3c <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1ee1c:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   1ee20:	1c59      	adds	r1, r3, #1
   1ee22:	e852 4f00 	ldrex	r4, [r2]
   1ee26:	429c      	cmp	r4, r3
   1ee28:	d104      	bne.n	1ee34 <bt_conn_ref+0x2a>
   1ee2a:	e842 1c00 	strex	ip, r1, [r2]
   1ee2e:	f1bc 0f00 	cmp.w	ip, #0
   1ee32:	d1f6      	bne.n	1ee22 <bt_conn_ref+0x18>
   1ee34:	f3bf 8f5b 	dmb	ish
   1ee38:	d1ea      	bne.n	1ee10 <bt_conn_ref+0x6>
}
   1ee3a:	bd10      	pop	{r4, pc}
			return NULL;
   1ee3c:	4618      	mov	r0, r3
   1ee3e:	e7fc      	b.n	1ee3a <bt_conn_ref+0x30>

0001ee40 <bt_conn_unref>:
	old = atomic_dec(&conn->ref);
   1ee40:	f100 03b8 	add.w	r3, r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1ee44:	f3bf 8f5b 	dmb	ish
   1ee48:	e853 2f00 	ldrex	r2, [r3]
   1ee4c:	3a01      	subs	r2, #1
   1ee4e:	e843 2100 	strex	r1, r2, [r3]
   1ee52:	2900      	cmp	r1, #0
   1ee54:	d1f8      	bne.n	1ee48 <bt_conn_unref+0x8>
   1ee56:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   1ee5a:	7883      	ldrb	r3, [r0, #2]
   1ee5c:	2b01      	cmp	r3, #1
   1ee5e:	d108      	bne.n	1ee72 <bt_conn_unref+0x32>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ee60:	f3bf 8f5b 	dmb	ish
   1ee64:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   1ee68:	f3bf 8f5b 	dmb	ish
   1ee6c:	b90b      	cbnz	r3, 1ee72 <bt_conn_unref+0x32>
		bt_le_adv_resume();
   1ee6e:	f7e8 bcc5 	b.w	77fc <bt_le_adv_resume>
}
   1ee72:	4770      	bx	lr

0001ee74 <conn_lookup_handle>:
{
   1ee74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ee78:	4607      	mov	r7, r0
   1ee7a:	460e      	mov	r6, r1
   1ee7c:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   1ee7e:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1ee80:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   1ee84:	42b4      	cmp	r4, r6
   1ee86:	d103      	bne.n	1ee90 <conn_lookup_handle+0x1c>
	return NULL;
   1ee88:	2300      	movs	r3, #0
}
   1ee8a:	4618      	mov	r0, r3
   1ee8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1ee90:	fb09 7004 	mla	r0, r9, r4, r7
   1ee94:	f7ff ffb9 	bl	1ee0a <bt_conn_ref>
   1ee98:	4603      	mov	r3, r0
		if (!conn) {
   1ee9a:	b158      	cbz	r0, 1eeb4 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   1ee9c:	7a85      	ldrb	r5, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   1ee9e:	2d01      	cmp	r5, #1
   1eea0:	d002      	beq.n	1eea8 <conn_lookup_handle+0x34>
   1eea2:	3d07      	subs	r5, #7
   1eea4:	2d01      	cmp	r5, #1
   1eea6:	d803      	bhi.n	1eeb0 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   1eea8:	881a      	ldrh	r2, [r3, #0]
   1eeaa:	4542      	cmp	r2, r8
   1eeac:	d0ed      	beq.n	1ee8a <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   1eeae:	4618      	mov	r0, r3
   1eeb0:	f7ff ffc6 	bl	1ee40 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   1eeb4:	3401      	adds	r4, #1
   1eeb6:	e7e5      	b.n	1ee84 <conn_lookup_handle+0x10>

0001eeb8 <bt_conn_connected>:
{
   1eeb8:	b510      	push	{r4, lr}
   1eeba:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   1eebc:	f7e9 fc26 	bl	870c <bt_l2cap_connected>
	notify_connected(conn);
   1eec0:	4620      	mov	r0, r4
}
   1eec2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   1eec6:	f7e8 bf81 	b.w	7dcc <notify_connected>

0001eeca <bt_conn_disconnect>:
{
   1eeca:	b538      	push	{r3, r4, r5, lr}
	switch (conn->state) {
   1eecc:	7a83      	ldrb	r3, [r0, #10]
   1eece:	3b02      	subs	r3, #2
{
   1eed0:	4604      	mov	r4, r0
	switch (conn->state) {
   1eed2:	2b06      	cmp	r3, #6
   1eed4:	d805      	bhi.n	1eee2 <bt_conn_disconnect+0x18>
   1eed6:	e8df f003 	tbb	[pc, r3]
   1eeda:	0408      	.short	0x0408
   1eedc:	0e0c0404 	.word	0x0e0c0404
   1eee0:	0c          	.byte	0x0c
   1eee1:	00          	.byte	0x00
   1eee2:	f06f 057f 	mvn.w	r5, #127	; 0x7f
}
   1eee6:	4628      	mov	r0, r5
   1eee8:	bd38      	pop	{r3, r4, r5, pc}
		conn->err = reason;
   1eeea:	7241      	strb	r1, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1eeec:	2100      	movs	r1, #0
   1eeee:	f7e9 f8cd 	bl	808c <bt_conn_set_state>
		return 0;
   1eef2:	2500      	movs	r5, #0
   1eef4:	e7f7      	b.n	1eee6 <bt_conn_disconnect+0x1c>
	err = bt_hci_disconnect(conn->handle, reason);
   1eef6:	8800      	ldrh	r0, [r0, #0]
   1eef8:	f7ff fc9d 	bl	1e836 <bt_hci_disconnect>
	if (err) {
   1eefc:	4605      	mov	r5, r0
   1eefe:	2800      	cmp	r0, #0
   1ef00:	d1f1      	bne.n	1eee6 <bt_conn_disconnect+0x1c>
	if (conn->state == BT_CONN_CONNECTED) {
   1ef02:	7aa3      	ldrb	r3, [r4, #10]
   1ef04:	2b07      	cmp	r3, #7
   1ef06:	d1ee      	bne.n	1eee6 <bt_conn_disconnect+0x1c>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT);
   1ef08:	2108      	movs	r1, #8
   1ef0a:	4620      	mov	r0, r4
   1ef0c:	f7e9 f8be 	bl	808c <bt_conn_set_state>
   1ef10:	e7e9      	b.n	1eee6 <bt_conn_disconnect+0x1c>

0001ef12 <bt_conn_get_security>:
}
   1ef12:	2001      	movs	r0, #1
   1ef14:	4770      	bx	lr

0001ef16 <bt_conn_is_peer_addr_le>:
{
   1ef16:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   1ef18:	7a03      	ldrb	r3, [r0, #8]
   1ef1a:	428b      	cmp	r3, r1
{
   1ef1c:	4604      	mov	r4, r0
   1ef1e:	4615      	mov	r5, r2
	if (id != conn->id) {
   1ef20:	d115      	bne.n	1ef4e <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   1ef22:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1ef26:	2207      	movs	r2, #7
   1ef28:	4628      	mov	r0, r5
   1ef2a:	f7ff f871 	bl	1e010 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   1ef2e:	b180      	cbz	r0, 1ef52 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   1ef30:	78e3      	ldrb	r3, [r4, #3]
   1ef32:	2207      	movs	r2, #7
   1ef34:	b943      	cbnz	r3, 1ef48 <bt_conn_is_peer_addr_le+0x32>
   1ef36:	f104 0196 	add.w	r1, r4, #150	; 0x96
   1ef3a:	4628      	mov	r0, r5
   1ef3c:	f7ff f868 	bl	1e010 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   1ef40:	fab0 f080 	clz	r0, r0
   1ef44:	0940      	lsrs	r0, r0, #5
}
   1ef46:	bd38      	pop	{r3, r4, r5, pc}
   1ef48:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   1ef4c:	e7f5      	b.n	1ef3a <bt_conn_is_peer_addr_le+0x24>
		return false;
   1ef4e:	2000      	movs	r0, #0
   1ef50:	e7f9      	b.n	1ef46 <bt_conn_is_peer_addr_le+0x30>
		return true;
   1ef52:	2001      	movs	r0, #1
   1ef54:	e7f7      	b.n	1ef46 <bt_conn_is_peer_addr_le+0x30>

0001ef56 <bt_conn_exists_le>:
{
   1ef56:	b508      	push	{r3, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   1ef58:	f7e9 f9fe 	bl	8358 <bt_conn_lookup_addr_le>
	if (conn) {
   1ef5c:	b110      	cbz	r0, 1ef64 <bt_conn_exists_le+0xe>
		bt_conn_unref(conn);
   1ef5e:	f7ff ff6f 	bl	1ee40 <bt_conn_unref>
		return true;
   1ef62:	2001      	movs	r0, #1
}
   1ef64:	bd08      	pop	{r3, pc}

0001ef66 <bt_conn_le_conn_update>:
{
   1ef66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ef68:	4607      	mov	r7, r0
   1ef6a:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   1ef6c:	f242 0013 	movw	r0, #8211	; 0x2013
   1ef70:	210e      	movs	r1, #14
   1ef72:	f7e7 faef 	bl	6554 <bt_hci_cmd_create>
	if (!buf) {
   1ef76:	4606      	mov	r6, r0
   1ef78:	b1d0      	cbz	r0, 1efb0 <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   1ef7a:	210e      	movs	r1, #14
   1ef7c:	3008      	adds	r0, #8
   1ef7e:	f005 feca 	bl	24d16 <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   1ef82:	220e      	movs	r2, #14
   1ef84:	4604      	mov	r4, r0
   1ef86:	2100      	movs	r1, #0
   1ef88:	f7ff f85e 	bl	1e048 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1ef8c:	883b      	ldrh	r3, [r7, #0]
   1ef8e:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   1ef90:	882b      	ldrh	r3, [r5, #0]
   1ef92:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1ef94:	886b      	ldrh	r3, [r5, #2]
   1ef96:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   1ef98:	88ab      	ldrh	r3, [r5, #4]
   1ef9a:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   1ef9c:	88eb      	ldrh	r3, [r5, #6]
   1ef9e:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1efa0:	4631      	mov	r1, r6
   1efa2:	2200      	movs	r2, #0
}
   1efa4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1efa8:	f242 0013 	movw	r0, #8211	; 0x2013
   1efac:	f7e7 bb58 	b.w	6660 <bt_hci_cmd_send_sync>
}
   1efb0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1efb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001efb6 <l2cap_connected>:
}
   1efb6:	4770      	bx	lr

0001efb8 <l2cap_disconnected>:
	(void)k_work_cancel_delayable(&chan->rtx_work);
   1efb8:	3010      	adds	r0, #16
   1efba:	f006 be77 	b.w	25cac <k_work_cancel_delayable>

0001efbe <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   1efbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1efc0:	4607      	mov	r7, r0
   1efc2:	460e      	mov	r6, r1
   1efc4:	4615      	mov	r5, r2
	return bt_conn_create_pdu_timeout(pool,
   1efc6:	2300      	movs	r3, #0
   1efc8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1efcc:	2104      	movs	r1, #4
   1efce:	2000      	movs	r0, #0
   1efd0:	f7e9 f910 	bl	81f4 <bt_conn_create_pdu_timeout>
	if (!buf) {
   1efd4:	4604      	mov	r4, r0
   1efd6:	b130      	cbz	r0, 1efe6 <l2cap_create_le_sig_pdu.constprop.0+0x28>
   1efd8:	2104      	movs	r1, #4
   1efda:	3008      	adds	r0, #8
   1efdc:	f005 fe9b 	bl	24d16 <net_buf_simple_add>
	hdr->code = code;
   1efe0:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
   1efe2:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   1efe4:	8045      	strh	r5, [r0, #2]
}
   1efe6:	4620      	mov	r0, r4
   1efe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001efea <bt_l2cap_chan_remove>:
	return list->head;
   1efea:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   1efec:	b530      	push	{r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1efee:	b173      	cbz	r3, 1f00e <bt_l2cap_chan_remove+0x24>
   1eff0:	3b08      	subs	r3, #8
   1eff2:	2500      	movs	r5, #0
	return node->next;
   1eff4:	461a      	mov	r2, r3
		if (chan == ch) {
   1eff6:	4299      	cmp	r1, r3
   1eff8:	f852 4f08 	ldr.w	r4, [r2, #8]!
   1effc:	d10d      	bne.n	1f01a <bt_l2cap_chan_remove+0x30>
	return list->tail;
   1effe:	6d41      	ldr	r1, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
   1f000:	b935      	cbnz	r5, 1f010 <bt_l2cap_chan_remove+0x26>
   1f002:	4291      	cmp	r1, r2
	list->head = node;
   1f004:	6504      	str	r4, [r0, #80]	; 0x50
Z_GENLIST_REMOVE(slist, snode)
   1f006:	d100      	bne.n	1f00a <bt_l2cap_chan_remove+0x20>
	list->tail = node;
   1f008:	6544      	str	r4, [r0, #84]	; 0x54
	parent->next = child;
   1f00a:	2200      	movs	r2, #0
   1f00c:	609a      	str	r2, [r3, #8]
}
   1f00e:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_REMOVE(slist, snode)
   1f010:	4291      	cmp	r1, r2
	parent->next = child;
   1f012:	602c      	str	r4, [r5, #0]
	list->tail = node;
   1f014:	bf08      	it	eq
   1f016:	6545      	streq	r5, [r0, #84]	; 0x54
}
   1f018:	e7f7      	b.n	1f00a <bt_l2cap_chan_remove+0x20>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1f01a:	2c00      	cmp	r4, #0
   1f01c:	d0f7      	beq.n	1f00e <bt_l2cap_chan_remove+0x24>
   1f01e:	f1a4 0308 	sub.w	r3, r4, #8
			sys_slist_remove(&conn->channels, prev, &chan->node);
   1f022:	4615      	mov	r5, r2
   1f024:	e7e6      	b.n	1eff4 <bt_l2cap_chan_remove+0xa>

0001f026 <bt_l2cap_chan_del>:
{
   1f026:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   1f028:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   1f02c:	4604      	mov	r4, r0
	if (!chan->conn) {
   1f02e:	b123      	cbz	r3, 1f03a <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   1f030:	686b      	ldr	r3, [r5, #4]
   1f032:	b103      	cbz	r3, 1f036 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   1f034:	4798      	blx	r3
	chan->conn = NULL;
   1f036:	2300      	movs	r3, #0
   1f038:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   1f03a:	68e3      	ldr	r3, [r4, #12]
   1f03c:	b10b      	cbz	r3, 1f042 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   1f03e:	4620      	mov	r0, r4
   1f040:	4798      	blx	r3
	if (ops->released) {
   1f042:	69eb      	ldr	r3, [r5, #28]
   1f044:	b11b      	cbz	r3, 1f04e <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   1f046:	4620      	mov	r0, r4
}
   1f048:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   1f04c:	4718      	bx	r3
}
   1f04e:	bd70      	pop	{r4, r5, r6, pc}

0001f050 <l2cap_rtx_timeout>:
{
   1f050:	b510      	push	{r4, lr}
	bt_l2cap_chan_remove(conn, &chan->chan);
   1f052:	f1a0 0410 	sub.w	r4, r0, #16
   1f056:	4621      	mov	r1, r4
   1f058:	f850 0c10 	ldr.w	r0, [r0, #-16]
   1f05c:	f7ff ffc5 	bl	1efea <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
   1f060:	4620      	mov	r0, r4
}
   1f062:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_l2cap_chan_del(&chan->chan);
   1f066:	f7ff bfde 	b.w	1f026 <bt_l2cap_chan_del>

0001f06a <bt_l2cap_disconnected>:
	return list->head;
   1f06a:	6d00      	ldr	r0, [r0, #80]	; 0x50
{
   1f06c:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1f06e:	b160      	cbz	r0, 1f08a <bt_l2cap_disconnected+0x20>
	return node->next;
   1f070:	f850 4908 	ldr.w	r4, [r0], #-8
   1f074:	b104      	cbz	r4, 1f078 <bt_l2cap_disconnected+0xe>
   1f076:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   1f078:	f7ff ffd5 	bl	1f026 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1f07c:	b12c      	cbz	r4, 1f08a <bt_l2cap_disconnected+0x20>
   1f07e:	68a3      	ldr	r3, [r4, #8]
   1f080:	b103      	cbz	r3, 1f084 <bt_l2cap_disconnected+0x1a>
   1f082:	3b08      	subs	r3, #8
{
   1f084:	4620      	mov	r0, r4
   1f086:	461c      	mov	r4, r3
   1f088:	e7f6      	b.n	1f078 <bt_l2cap_disconnected+0xe>
}
   1f08a:	bd10      	pop	{r4, pc}

0001f08c <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   1f08c:	3104      	adds	r1, #4
   1f08e:	f7e9 b8b1 	b.w	81f4 <bt_conn_create_pdu_timeout>

0001f092 <bt_l2cap_send_cb>:
{
   1f092:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f096:	4614      	mov	r4, r2
   1f098:	4605      	mov	r5, r0
   1f09a:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   1f09c:	f102 0008 	add.w	r0, r2, #8
   1f0a0:	2104      	movs	r1, #4
   1f0a2:	461e      	mov	r6, r3
   1f0a4:	f8dd 8018 	ldr.w	r8, [sp, #24]
   1f0a8:	f005 fe83 	bl	24db2 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1f0ac:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   1f0ae:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1f0b0:	3a04      	subs	r2, #4
   1f0b2:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1f0b4:	4643      	mov	r3, r8
   1f0b6:	4632      	mov	r2, r6
   1f0b8:	4621      	mov	r1, r4
   1f0ba:	4628      	mov	r0, r5
}
   1f0bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1f0c0:	f7e8 bf68 	b.w	7f94 <bt_conn_send_cb>

0001f0c4 <l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
   1f0c4:	898b      	ldrh	r3, [r1, #12]
   1f0c6:	2b03      	cmp	r3, #3
{
   1f0c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1f0ca:	4605      	mov	r5, r0
   1f0cc:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1f0ce:	d927      	bls.n	1f120 <l2cap_recv+0x5c>
	return net_buf_simple_pull_mem(&buf->b, len);
   1f0d0:	2104      	movs	r1, #4
   1f0d2:	f104 0008 	add.w	r0, r4, #8
   1f0d6:	f005 fea1 	bl	24e1c <net_buf_simple_pull_mem>
	if (buf->len != len) {
   1f0da:	89a3      	ldrh	r3, [r4, #12]
   1f0dc:	8842      	ldrh	r2, [r0, #2]
   1f0de:	429a      	cmp	r2, r3
   1f0e0:	d11e      	bne.n	1f120 <l2cap_recv+0x5c>
	if (!hdr->ident) {
   1f0e2:	7841      	ldrb	r1, [r0, #1]
   1f0e4:	b1e1      	cbz	r1, 1f120 <l2cap_recv+0x5c>
	switch (hdr->code) {
   1f0e6:	7803      	ldrb	r3, [r0, #0]
   1f0e8:	2b01      	cmp	r3, #1
   1f0ea:	d019      	beq.n	1f120 <l2cap_recv+0x5c>
   1f0ec:	2b13      	cmp	r3, #19
   1f0ee:	d017      	beq.n	1f120 <l2cap_recv+0x5c>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1f0f0:	2202      	movs	r2, #2
   1f0f2:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
   1f0f4:	682d      	ldr	r5, [r5, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1f0f6:	f7ff ff62 	bl	1efbe <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   1f0fa:	4604      	mov	r4, r0
   1f0fc:	b180      	cbz	r0, 1f120 <l2cap_recv+0x5c>
	return net_buf_simple_add(&buf->b, len);
   1f0fe:	2102      	movs	r1, #2
   1f100:	3008      	adds	r0, #8
   1f102:	f005 fe08 	bl	24d16 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   1f106:	2300      	movs	r3, #0
   1f108:	7003      	strb	r3, [r0, #0]
   1f10a:	7043      	strb	r3, [r0, #1]
   1f10c:	4622      	mov	r2, r4
   1f10e:	9300      	str	r3, [sp, #0]
   1f110:	2105      	movs	r1, #5
   1f112:	4628      	mov	r0, r5
   1f114:	f7ff ffbd 	bl	1f092 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   1f118:	b110      	cbz	r0, 1f120 <l2cap_recv+0x5c>
		net_buf_unref(buf);
   1f11a:	4620      	mov	r0, r4
   1f11c:	f7f7 ffac 	bl	17078 <net_buf_unref>
}
   1f120:	2000      	movs	r0, #0
   1f122:	b003      	add	sp, #12
   1f124:	bd30      	pop	{r4, r5, pc}

0001f126 <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   1f126:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1f128:	b138      	cbz	r0, 1f13a <bt_l2cap_le_lookup_tx_cid+0x14>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   1f12a:	f8b0 3078 	ldrh.w	r3, [r0, #120]	; 0x78
   1f12e:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1f130:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   1f134:	d001      	beq.n	1f13a <bt_l2cap_le_lookup_tx_cid+0x14>
	return node->next;
   1f136:	6880      	ldr	r0, [r0, #8]
   1f138:	e7f6      	b.n	1f128 <bt_l2cap_le_lookup_tx_cid+0x2>
}
   1f13a:	4770      	bx	lr

0001f13c <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   1f13c:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1f13e:	b138      	cbz	r0, 1f150 <bt_l2cap_le_lookup_rx_cid+0x14>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   1f140:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
   1f144:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1f146:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   1f14a:	d001      	beq.n	1f150 <bt_l2cap_le_lookup_rx_cid+0x14>
	return node->next;
   1f14c:	6880      	ldr	r0, [r0, #8]
   1f14e:	e7f6      	b.n	1f13e <bt_l2cap_le_lookup_rx_cid+0x2>
}
   1f150:	4770      	bx	lr

0001f152 <bt_l2cap_recv>:
{
   1f152:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   1f154:	898b      	ldrh	r3, [r1, #12]
   1f156:	2b03      	cmp	r3, #3
{
   1f158:	4605      	mov	r5, r0
   1f15a:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1f15c:	d804      	bhi.n	1f168 <bt_l2cap_recv+0x16>
	net_buf_unref(buf);
   1f15e:	4620      	mov	r0, r4
}
   1f160:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   1f164:	f7f7 bf88 	b.w	17078 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   1f168:	2104      	movs	r1, #4
   1f16a:	f104 0008 	add.w	r0, r4, #8
   1f16e:	f005 fe55 	bl	24e1c <net_buf_simple_pull_mem>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   1f172:	8841      	ldrh	r1, [r0, #2]
   1f174:	4628      	mov	r0, r5
   1f176:	f7ff ffe1 	bl	1f13c <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1f17a:	2800      	cmp	r0, #0
   1f17c:	d0ef      	beq.n	1f15e <bt_l2cap_recv+0xc>
	chan->ops->recv(chan, buf);
   1f17e:	6843      	ldr	r3, [r0, #4]
   1f180:	4621      	mov	r1, r4
   1f182:	691b      	ldr	r3, [r3, #16]
   1f184:	4798      	blx	r3
   1f186:	e7ea      	b.n	1f15e <bt_l2cap_recv+0xc>

0001f188 <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   1f188:	4770      	bx	lr

0001f18a <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   1f18a:	4603      	mov	r3, r0
	return list->head;
   1f18c:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   1f18e:	b128      	cbz	r0, 1f19c <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1f190:	6859      	ldr	r1, [r3, #4]
	return node->next;
   1f192:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   1f194:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1f196:	4288      	cmp	r0, r1
	list->tail = node;
   1f198:	bf08      	it	eq
   1f19a:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   1f19c:	4770      	bx	lr

0001f19e <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   1f19e:	4603      	mov	r3, r0
	size_t bytes = 0;
   1f1a0:	2000      	movs	r0, #0

	while (buf) {
   1f1a2:	b903      	cbnz	r3, 1f1a6 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   1f1a4:	4770      	bx	lr
		bytes += buf->len;
   1f1a6:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   1f1a8:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   1f1aa:	4410      	add	r0, r2
		buf = buf->frags;
   1f1ac:	e7f9      	b.n	1f1a2 <net_buf_frags_len+0x4>

0001f1ae <att_sent>:
	if (chan->ops->sent) {
   1f1ae:	684b      	ldr	r3, [r1, #4]
   1f1b0:	695b      	ldr	r3, [r3, #20]
{
   1f1b2:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   1f1b4:	b103      	cbz	r3, 1f1b8 <att_sent+0xa>
		chan->ops->sent(chan);
   1f1b6:	4718      	bx	r3
}
   1f1b8:	4770      	bx	lr

0001f1ba <attr_read_type_cb>:
{
   1f1ba:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   1f1bc:	68d4      	ldr	r4, [r2, #12]
   1f1be:	7823      	ldrb	r3, [r4, #0]
   1f1c0:	3102      	adds	r1, #2
   1f1c2:	b913      	cbnz	r3, 1f1ca <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   1f1c4:	7021      	strb	r1, [r4, #0]
	return true;
   1f1c6:	2001      	movs	r0, #1
   1f1c8:	e006      	b.n	1f1d8 <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   1f1ca:	428b      	cmp	r3, r1
   1f1cc:	d0fb      	beq.n	1f1c6 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   1f1ce:	8983      	ldrh	r3, [r0, #12]
   1f1d0:	3b02      	subs	r3, #2
   1f1d2:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   1f1d4:	2000      	movs	r0, #0
   1f1d6:	6110      	str	r0, [r2, #16]
}
   1f1d8:	bd10      	pop	{r4, pc}

0001f1da <att_prepare_write_req>:
}
   1f1da:	2006      	movs	r0, #6
   1f1dc:	4770      	bx	lr

0001f1de <att_op_get_type>:
	switch (op) {
   1f1de:	281e      	cmp	r0, #30
   1f1e0:	d816      	bhi.n	1f210 <att_op_get_type+0x32>
   1f1e2:	b308      	cbz	r0, 1f228 <att_op_get_type+0x4a>
   1f1e4:	1e43      	subs	r3, r0, #1
   1f1e6:	2b1d      	cmp	r3, #29
   1f1e8:	d81e      	bhi.n	1f228 <att_op_get_type+0x4a>
   1f1ea:	e8df f003 	tbb	[pc, r3]
   1f1ee:	2317      	.short	0x2317
   1f1f0:	23172317 	.word	0x23172317
   1f1f4:	23172317 	.word	0x23172317
   1f1f8:	23172317 	.word	0x23172317
   1f1fc:	23172317 	.word	0x23172317
   1f200:	231d1d17 	.word	0x231d1d17
   1f204:	1d172317 	.word	0x1d172317
   1f208:	0f1b1d19 	.word	0x0f1b1d19
   1f20c:	2004      	movs	r0, #4
   1f20e:	4770      	bx	lr
   1f210:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   1f214:	2b52      	cmp	r3, #82	; 0x52
   1f216:	d107      	bne.n	1f228 <att_op_get_type+0x4a>
		return ATT_COMMAND;
   1f218:	2000      	movs	r0, #0
}
   1f21a:	4770      	bx	lr
		return ATT_RESPONSE;
   1f21c:	2002      	movs	r0, #2
   1f21e:	4770      	bx	lr
		return ATT_NOTIFICATION;
   1f220:	2003      	movs	r0, #3
   1f222:	4770      	bx	lr
		return ATT_INDICATION;
   1f224:	2005      	movs	r0, #5
   1f226:	4770      	bx	lr
		return ATT_COMMAND;
   1f228:	f010 0f40 	tst.w	r0, #64	; 0x40
   1f22c:	bf0c      	ite	eq
   1f22e:	2006      	moveq	r0, #6
   1f230:	2000      	movne	r0, #0
   1f232:	4770      	bx	lr
		return ATT_REQUEST;
   1f234:	2001      	movs	r0, #1
   1f236:	4770      	bx	lr

0001f238 <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   1f238:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1f23a:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1f23e:	2300      	movs	r3, #0
   1f240:	9300      	str	r3, [sp, #0]
   1f242:	461a      	mov	r2, r3
   1f244:	f7ea fa3e 	bl	96c4 <bt_gatt_foreach_attr_type>
				  user_data);
}
   1f248:	b005      	add	sp, #20
   1f24a:	f85d fb04 	ldr.w	pc, [sp], #4

0001f24e <find_type_cb>:
{
   1f24e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
   1f252:	f8d2 9000 	ldr.w	r9, [r2]
{
   1f256:	b091      	sub	sp, #68	; 0x44
   1f258:	4607      	mov	r7, r0
   1f25a:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1f25c:	2500      	movs	r5, #0
   1f25e:	f642 0301 	movw	r3, #10241	; 0x2801
   1f262:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   1f264:	f8d9 8008 	ldr.w	r8, [r9, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1f268:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   1f26c:	a90b      	add	r1, sp, #44	; 0x2c
{
   1f26e:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1f270:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1f274:	f7ff f906 	bl	1e484 <bt_uuid_cmp>
   1f278:	2800      	cmp	r0, #0
   1f27a:	d079      	beq.n	1f370 <find_type_cb+0x122>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   1f27c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1f280:	6838      	ldr	r0, [r7, #0]
   1f282:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   1f286:	a90b      	add	r1, sp, #44	; 0x2c
   1f288:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1f28c:	f7ff f8fa 	bl	1e484 <bt_uuid_cmp>
   1f290:	b138      	cbz	r0, 1f2a2 <find_type_cb+0x54>
		if (data->group &&
   1f292:	68a3      	ldr	r3, [r4, #8]
   1f294:	b11b      	cbz	r3, 1f29e <find_type_cb+0x50>
   1f296:	885a      	ldrh	r2, [r3, #2]
   1f298:	42b2      	cmp	r2, r6
   1f29a:	d200      	bcs.n	1f29e <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1f29c:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   1f29e:	2001      	movs	r0, #1
   1f2a0:	e009      	b.n	1f2b6 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   1f2a2:	6861      	ldr	r1, [r4, #4]
   1f2a4:	4608      	mov	r0, r1
   1f2a6:	f7ff ff7a 	bl	1f19e <net_buf_frags_len>
   1f2aa:	f8b9 308a 	ldrh.w	r3, [r9, #138]	; 0x8a
   1f2ae:	1a1b      	subs	r3, r3, r0
   1f2b0:	2b03      	cmp	r3, #3
   1f2b2:	d803      	bhi.n	1f2bc <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   1f2b4:	2000      	movs	r0, #0
}
   1f2b6:	b011      	add	sp, #68	; 0x44
   1f2b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   1f2bc:	4608      	mov	r0, r1
   1f2be:	f005 fcf6 	bl	24cae <net_buf_frag_last>
   1f2c2:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   1f2c4:	6860      	ldr	r0, [r4, #4]
   1f2c6:	f7ff ff6a 	bl	1f19e <net_buf_frags_len>
   1f2ca:	f8b9 a08a 	ldrh.w	sl, [r9, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
   1f2ce:	f105 0b08 	add.w	fp, r5, #8
   1f2d2:	ebaa 0a00 	sub.w	sl, sl, r0
   1f2d6:	4658      	mov	r0, fp
   1f2d8:	f005 fdd7 	bl	24e8a <net_buf_simple_tailroom>
   1f2dc:	4582      	cmp	sl, r0
   1f2de:	d23f      	bcs.n	1f360 <find_type_cb+0x112>
   1f2e0:	6860      	ldr	r0, [r4, #4]
   1f2e2:	f7ff ff5c 	bl	1f19e <net_buf_frags_len>
   1f2e6:	f8b9 308a 	ldrh.w	r3, [r9, #138]	; 0x8a
   1f2ea:	1a18      	subs	r0, r3, r0
	if (!len) {
   1f2ec:	b970      	cbnz	r0, 1f30c <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   1f2ee:	6863      	ldr	r3, [r4, #4]
   1f2f0:	7998      	ldrb	r0, [r3, #6]
   1f2f2:	f7f7 fdfd 	bl	16ef0 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1f2f6:	2200      	movs	r2, #0
   1f2f8:	2300      	movs	r3, #0
   1f2fa:	f005 fc81 	bl	24c00 <net_buf_alloc_fixed>
		if (!frag) {
   1f2fe:	4605      	mov	r5, r0
   1f300:	2800      	cmp	r0, #0
   1f302:	d0d7      	beq.n	1f2b4 <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   1f304:	4601      	mov	r1, r0
   1f306:	6860      	ldr	r0, [r4, #4]
   1f308:	f005 fce2 	bl	24cd0 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   1f30c:	2300      	movs	r3, #0
   1f30e:	9300      	str	r3, [sp, #0]
   1f310:	f8d7 9004 	ldr.w	r9, [r7, #4]
   1f314:	4639      	mov	r1, r7
   1f316:	2310      	movs	r3, #16
   1f318:	aa02      	add	r2, sp, #8
   1f31a:	4640      	mov	r0, r8
   1f31c:	47c8      	blx	r9
	if (read < 0) {
   1f31e:	1e07      	subs	r7, r0, #0
   1f320:	db26      	blt.n	1f370 <find_type_cb+0x122>
	if (read != data->value_len) {
   1f322:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1f324:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   1f326:	42ba      	cmp	r2, r7
   1f328:	d01e      	beq.n	1f368 <find_type_cb+0x11a>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1f32a:	4601      	mov	r1, r0
   1f32c:	a80b      	add	r0, sp, #44	; 0x2c
   1f32e:	f7ff f8d7 	bl	1e4e0 <bt_uuid_create>
   1f332:	b1e8      	cbz	r0, 1f370 <find_type_cb+0x122>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   1f334:	b2fa      	uxtb	r2, r7
   1f336:	a902      	add	r1, sp, #8
   1f338:	a806      	add	r0, sp, #24
   1f33a:	f7ff f8d1 	bl	1e4e0 <bt_uuid_create>
   1f33e:	b1b8      	cbz	r0, 1f370 <find_type_cb+0x122>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   1f340:	a906      	add	r1, sp, #24
   1f342:	a80b      	add	r0, sp, #44	; 0x2c
   1f344:	f7ff f89e 	bl	1e484 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   1f348:	b990      	cbnz	r0, 1f370 <find_type_cb+0x122>
	data->err = 0x00;
   1f34a:	2300      	movs	r3, #0
   1f34c:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   1f34e:	2104      	movs	r1, #4
   1f350:	f105 0008 	add.w	r0, r5, #8
   1f354:	f005 fcdf 	bl	24d16 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   1f358:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1f35a:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1f35c:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   1f35e:	e79e      	b.n	1f29e <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   1f360:	4658      	mov	r0, fp
   1f362:	f005 fd92 	bl	24e8a <net_buf_simple_tailroom>
   1f366:	e7c1      	b.n	1f2ec <find_type_cb+0x9e>
	} else if (memcmp(data->value, uuid, read)) {
   1f368:	a902      	add	r1, sp, #8
   1f36a:	f7fe fe51 	bl	1e010 <memcmp>
   1f36e:	e7eb      	b.n	1f348 <find_type_cb+0xfa>
	data->group = NULL;
   1f370:	2300      	movs	r3, #0
   1f372:	60a3      	str	r3, [r4, #8]
   1f374:	e793      	b.n	1f29e <find_type_cb+0x50>

0001f376 <find_info_cb>:
{
   1f376:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   1f378:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   1f37a:	6817      	ldr	r7, [r2, #0]
{
   1f37c:	4605      	mov	r5, r0
   1f37e:	460e      	mov	r6, r1
   1f380:	4614      	mov	r4, r2
	if (!data->rsp) {
   1f382:	b963      	cbnz	r3, 1f39e <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   1f384:	6850      	ldr	r0, [r2, #4]
   1f386:	2101      	movs	r1, #1
   1f388:	3008      	adds	r0, #8
   1f38a:	f005 fcc4 	bl	24d16 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1f38e:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1f390:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1f392:	781b      	ldrb	r3, [r3, #0]
   1f394:	2b00      	cmp	r3, #0
   1f396:	bf0c      	ite	eq
   1f398:	2301      	moveq	r3, #1
   1f39a:	2302      	movne	r3, #2
   1f39c:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   1f39e:	68a3      	ldr	r3, [r4, #8]
   1f3a0:	781b      	ldrb	r3, [r3, #0]
   1f3a2:	2b01      	cmp	r3, #1
   1f3a4:	d003      	beq.n	1f3ae <find_info_cb+0x38>
   1f3a6:	2b02      	cmp	r3, #2
   1f3a8:	d019      	beq.n	1f3de <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   1f3aa:	2000      	movs	r0, #0
   1f3ac:	e016      	b.n	1f3dc <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   1f3ae:	682b      	ldr	r3, [r5, #0]
   1f3b0:	781b      	ldrb	r3, [r3, #0]
   1f3b2:	2b00      	cmp	r3, #0
   1f3b4:	d1f9      	bne.n	1f3aa <find_info_cb+0x34>
   1f3b6:	6860      	ldr	r0, [r4, #4]
   1f3b8:	2104      	movs	r1, #4
   1f3ba:	3008      	adds	r0, #8
   1f3bc:	f005 fcab 	bl	24d16 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1f3c0:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   1f3c2:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1f3c4:	885b      	ldrh	r3, [r3, #2]
   1f3c6:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   1f3c8:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   1f3ca:	8006      	strh	r6, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   1f3cc:	899b      	ldrh	r3, [r3, #12]
   1f3ce:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
   1f3d2:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1f3d4:	2804      	cmp	r0, #4
   1f3d6:	bf94      	ite	ls
   1f3d8:	2000      	movls	r0, #0
   1f3da:	2001      	movhi	r0, #1
}
   1f3dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   1f3de:	682b      	ldr	r3, [r5, #0]
   1f3e0:	781b      	ldrb	r3, [r3, #0]
   1f3e2:	2b02      	cmp	r3, #2
   1f3e4:	d1e1      	bne.n	1f3aa <find_info_cb+0x34>
   1f3e6:	6860      	ldr	r0, [r4, #4]
   1f3e8:	2112      	movs	r1, #18
   1f3ea:	3008      	adds	r0, #8
   1f3ec:	f005 fc93 	bl	24d16 <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1f3f0:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   1f3f2:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1f3f4:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   1f3f6:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1f3fa:	3101      	adds	r1, #1
   1f3fc:	f7fe fe19 	bl	1e032 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   1f400:	6863      	ldr	r3, [r4, #4]
   1f402:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
   1f406:	899b      	ldrh	r3, [r3, #12]
   1f408:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1f40a:	2812      	cmp	r0, #18
   1f40c:	e7e3      	b.n	1f3d6 <find_info_cb+0x60>

0001f40e <att_chan_mtu_updated>:
{
   1f40e:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   1f410:	6806      	ldr	r6, [r0, #0]
	return list->head;
   1f412:	6a73      	ldr	r3, [r6, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1f414:	b1e3      	cbz	r3, 1f450 <att_chan_mtu_updated+0x42>
	return node->next;
   1f416:	681a      	ldr	r2, [r3, #0]
   1f418:	f5a3 75a2 	sub.w	r5, r3, #324	; 0x144
   1f41c:	b10a      	cbz	r2, 1f422 <att_chan_mtu_updated+0x14>
   1f41e:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
{
   1f422:	2300      	movs	r3, #0
   1f424:	4619      	mov	r1, r3
		if (chan == updated_chan) {
   1f426:	42a8      	cmp	r0, r5
   1f428:	d009      	beq.n	1f43e <att_chan_mtu_updated+0x30>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   1f42a:	f8b5 408a 	ldrh.w	r4, [r5, #138]	; 0x8a
   1f42e:	42a1      	cmp	r1, r4
   1f430:	bf38      	it	cc
   1f432:	4621      	movcc	r1, r4
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   1f434:	f8b5 407a 	ldrh.w	r4, [r5, #122]	; 0x7a
   1f438:	42a3      	cmp	r3, r4
   1f43a:	bf38      	it	cc
   1f43c:	4623      	movcc	r3, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1f43e:	b142      	cbz	r2, 1f452 <att_chan_mtu_updated+0x44>
   1f440:	f8d2 4144 	ldr.w	r4, [r2, #324]	; 0x144
   1f444:	b10c      	cbz	r4, 1f44a <att_chan_mtu_updated+0x3c>
   1f446:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
{
   1f44a:	4615      	mov	r5, r2
   1f44c:	4622      	mov	r2, r4
   1f44e:	e7ea      	b.n	1f426 <att_chan_mtu_updated+0x18>
   1f450:	4619      	mov	r1, r3
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   1f452:	f8b0 408a 	ldrh.w	r4, [r0, #138]	; 0x8a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   1f456:	f8b0 207a 	ldrh.w	r2, [r0, #122]	; 0x7a
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   1f45a:	428c      	cmp	r4, r1
   1f45c:	d801      	bhi.n	1f462 <att_chan_mtu_updated+0x54>
   1f45e:	429a      	cmp	r2, r3
   1f460:	d909      	bls.n	1f476 <att_chan_mtu_updated+0x68>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   1f462:	429a      	cmp	r2, r3
   1f464:	bf38      	it	cc
   1f466:	461a      	movcc	r2, r3
   1f468:	42a1      	cmp	r1, r4
   1f46a:	6830      	ldr	r0, [r6, #0]
   1f46c:	bf38      	it	cc
   1f46e:	4621      	movcc	r1, r4
}
   1f470:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   1f472:	f7ea bcd7 	b.w	9e24 <bt_gatt_att_max_mtu_changed>
}
   1f476:	bc70      	pop	{r4, r5, r6}
   1f478:	4770      	bx	lr

0001f47a <attr_read_group_cb>:
	if (!data->rsp->len) {
   1f47a:	68d0      	ldr	r0, [r2, #12]
   1f47c:	7803      	ldrb	r3, [r0, #0]
   1f47e:	3104      	adds	r1, #4
   1f480:	b913      	cbnz	r3, 1f488 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   1f482:	7001      	strb	r1, [r0, #0]
	return true;
   1f484:	2001      	movs	r0, #1
}
   1f486:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   1f488:	428b      	cmp	r3, r1
   1f48a:	d0fb      	beq.n	1f484 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   1f48c:	6891      	ldr	r1, [r2, #8]
   1f48e:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   1f490:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   1f492:	3b04      	subs	r3, #4
   1f494:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   1f496:	6110      	str	r0, [r2, #16]
		return false;
   1f498:	4770      	bx	lr

0001f49a <att_get>:
{
   1f49a:	b508      	push	{r3, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1f49c:	7a83      	ldrb	r3, [r0, #10]
   1f49e:	2b07      	cmp	r3, #7
   1f4a0:	d001      	beq.n	1f4a6 <att_get+0xc>
		return NULL;
   1f4a2:	2000      	movs	r0, #0
}
   1f4a4:	bd08      	pop	{r3, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   1f4a6:	2104      	movs	r1, #4
   1f4a8:	f7ff fe48 	bl	1f13c <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1f4ac:	2800      	cmp	r0, #0
   1f4ae:	d0f8      	beq.n	1f4a2 <att_get+0x8>
   1f4b0:	f3bf 8f5b 	dmb	ish
   1f4b4:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
   1f4b8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   1f4bc:	075b      	lsls	r3, r3, #29
   1f4be:	d4f0      	bmi.n	1f4a2 <att_get+0x8>
	return att_chan->att;
   1f4c0:	f850 0c08 	ldr.w	r0, [r0, #-8]
   1f4c4:	e7ee      	b.n	1f4a4 <att_get+0xa>

0001f4c6 <chan_req_sent>:
	if (chan->req) {
   1f4c6:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   1f4ca:	b133      	cbz	r3, 1f4da <chan_req_sent+0x14>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   1f4cc:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1f4d0:	2300      	movs	r3, #0
   1f4d2:	f500 7088 	add.w	r0, r0, #272	; 0x110
   1f4d6:	f7fc b91f 	b.w	1b718 <k_work_reschedule>
}
   1f4da:	4770      	bx	lr

0001f4dc <write_cb>:
{
   1f4dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1f4de:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   1f4e0:	4601      	mov	r1, r0
{
   1f4e2:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   1f4e4:	222a      	movs	r2, #42	; 0x2a
   1f4e6:	6820      	ldr	r0, [r4, #0]
   1f4e8:	f000 fe5a 	bl	201a0 <bt_gatt_check_perm>
   1f4ec:	4605      	mov	r5, r0
   1f4ee:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1f4f0:	bb20      	cbnz	r0, 1f53c <write_cb+0x60>
	if (!data->req) {
   1f4f2:	7a23      	ldrb	r3, [r4, #8]
   1f4f4:	b1ab      	cbz	r3, 1f522 <write_cb+0x46>
		flags |= BT_GATT_WRITE_FLAG_EXECUTE;
   1f4f6:	2b18      	cmp	r3, #24
   1f4f8:	bf14      	ite	ne
   1f4fa:	2300      	movne	r3, #0
   1f4fc:	2304      	moveq	r3, #4
	write = attr->write(data->conn, attr, data->value, data->len,
   1f4fe:	9301      	str	r3, [sp, #4]
   1f500:	8a63      	ldrh	r3, [r4, #18]
   1f502:	9300      	str	r3, [sp, #0]
   1f504:	68b7      	ldr	r7, [r6, #8]
   1f506:	8a23      	ldrh	r3, [r4, #16]
   1f508:	68e2      	ldr	r2, [r4, #12]
   1f50a:	6820      	ldr	r0, [r4, #0]
   1f50c:	4631      	mov	r1, r6
   1f50e:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   1f510:	1e03      	subs	r3, r0, #0
   1f512:	db08      	blt.n	1f526 <write_cb+0x4a>
   1f514:	8a22      	ldrh	r2, [r4, #16]
   1f516:	4293      	cmp	r3, r2
   1f518:	d10e      	bne.n	1f538 <write_cb+0x5c>
	data->err = 0U;
   1f51a:	2300      	movs	r3, #0
   1f51c:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   1f51e:	2501      	movs	r5, #1
   1f520:	e007      	b.n	1f532 <write_cb+0x56>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   1f522:	2302      	movs	r3, #2
   1f524:	e7eb      	b.n	1f4fe <write_cb+0x22>
	if (err < 0 && err >= -0xff) {
   1f526:	f113 0fff 	cmn.w	r3, #255	; 0xff
   1f52a:	d305      	bcc.n	1f538 <write_cb+0x5c>
		return -err;
   1f52c:	425b      	negs	r3, r3
   1f52e:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   1f530:	7523      	strb	r3, [r4, #20]
}
   1f532:	4628      	mov	r0, r5
   1f534:	b003      	add	sp, #12
   1f536:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   1f538:	230e      	movs	r3, #14
   1f53a:	e7f9      	b.n	1f530 <write_cb+0x54>
		return BT_GATT_ITER_STOP;
   1f53c:	2500      	movs	r5, #0
   1f53e:	e7f8      	b.n	1f532 <write_cb+0x56>

0001f540 <att_chan_read>:
{
   1f540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f544:	4680      	mov	r8, r0
   1f546:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1f548:	4610      	mov	r0, r2
{
   1f54a:	4699      	mov	r9, r3
   1f54c:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1f54e:	f7ff fe26 	bl	1f19e <net_buf_frags_len>
   1f552:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
   1f556:	4283      	cmp	r3, r0
{
   1f558:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1f55a:	d97a      	bls.n	1f652 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   1f55c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1f560:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   1f562:	4630      	mov	r0, r6
   1f564:	f005 fba3 	bl	24cae <net_buf_frag_last>
	size_t len, total = 0;
   1f568:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   1f56c:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1f56e:	4630      	mov	r0, r6
   1f570:	f7ff fe15 	bl	1f19e <net_buf_frags_len>
   1f574:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
   1f578:	f105 0708 	add.w	r7, r5, #8
   1f57c:	1a24      	subs	r4, r4, r0
   1f57e:	4638      	mov	r0, r7
   1f580:	f005 fc83 	bl	24e8a <net_buf_simple_tailroom>
   1f584:	4284      	cmp	r4, r0
   1f586:	d211      	bcs.n	1f5ac <att_chan_read+0x6c>
   1f588:	4630      	mov	r0, r6
   1f58a:	f7ff fe08 	bl	1f19e <net_buf_frags_len>
   1f58e:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   1f592:	1a24      	subs	r4, r4, r0
		if (!len) {
   1f594:	bb34      	cbnz	r4, 1f5e4 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   1f596:	79b0      	ldrb	r0, [r6, #6]
   1f598:	f7f7 fcaa 	bl	16ef0 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1f59c:	2200      	movs	r2, #0
   1f59e:	2300      	movs	r3, #0
   1f5a0:	f005 fb2e 	bl	24c00 <net_buf_alloc_fixed>
			if (!frag) {
   1f5a4:	4605      	mov	r5, r0
   1f5a6:	b930      	cbnz	r0, 1f5b6 <att_chan_read+0x76>
	return total;
   1f5a8:	4657      	mov	r7, sl
   1f5aa:	e02c      	b.n	1f606 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   1f5ac:	4638      	mov	r0, r7
   1f5ae:	f005 fc6c 	bl	24e8a <net_buf_simple_tailroom>
   1f5b2:	4604      	mov	r4, r0
   1f5b4:	e7ee      	b.n	1f594 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   1f5b6:	4601      	mov	r1, r0
   1f5b8:	4630      	mov	r0, r6
   1f5ba:	f005 fb89 	bl	24cd0 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1f5be:	4630      	mov	r0, r6
   1f5c0:	f7ff fded 	bl	1f19e <net_buf_frags_len>
   1f5c4:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   1f5c8:	f105 0708 	add.w	r7, r5, #8
   1f5cc:	1a24      	subs	r4, r4, r0
   1f5ce:	4638      	mov	r0, r7
   1f5d0:	f005 fc5b 	bl	24e8a <net_buf_simple_tailroom>
   1f5d4:	4284      	cmp	r4, r0
   1f5d6:	d21a      	bcs.n	1f60e <att_chan_read+0xce>
   1f5d8:	4630      	mov	r0, r6
   1f5da:	f7ff fde0 	bl	1f19e <net_buf_frags_len>
   1f5de:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   1f5e2:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   1f5e4:	68a9      	ldr	r1, [r5, #8]
   1f5e6:	89aa      	ldrh	r2, [r5, #12]
   1f5e8:	f8db 7004 	ldr.w	r7, [fp, #4]
   1f5ec:	9803      	ldr	r0, [sp, #12]
   1f5ee:	f8cd 9000 	str.w	r9, [sp]
   1f5f2:	440a      	add	r2, r1
   1f5f4:	b2a3      	uxth	r3, r4
   1f5f6:	4659      	mov	r1, fp
   1f5f8:	47b8      	blx	r7
		if (read < 0) {
   1f5fa:	1e07      	subs	r7, r0, #0
   1f5fc:	da0c      	bge.n	1f618 <att_chan_read+0xd8>
				return total;
   1f5fe:	f1ba 0f00 	cmp.w	sl, #0
   1f602:	bf18      	it	ne
   1f604:	4657      	movne	r7, sl
}
   1f606:	4638      	mov	r0, r7
   1f608:	b005      	add	sp, #20
   1f60a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f60e:	4638      	mov	r0, r7
   1f610:	f005 fc3b 	bl	24e8a <net_buf_simple_tailroom>
   1f614:	4604      	mov	r4, r0
   1f616:	e7e5      	b.n	1f5e4 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   1f618:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1f61a:	b993      	cbnz	r3, 1f642 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   1f61c:	4639      	mov	r1, r7
   1f61e:	f105 0008 	add.w	r0, r5, #8
   1f622:	f005 fb78 	bl	24d16 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1f626:	4630      	mov	r0, r6
   1f628:	f7ff fdb9 	bl	1f19e <net_buf_frags_len>
   1f62c:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
		offset += read;
   1f630:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1f632:	4283      	cmp	r3, r0
		total += read;
   1f634:	44ba      	add	sl, r7
		offset += read;
   1f636:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1f63a:	d9b5      	bls.n	1f5a8 <att_chan_read+0x68>
   1f63c:	42a7      	cmp	r7, r4
   1f63e:	d096      	beq.n	1f56e <att_chan_read+0x2e>
   1f640:	e7b2      	b.n	1f5a8 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   1f642:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1f644:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1f646:	4639      	mov	r1, r7
   1f648:	4628      	mov	r0, r5
   1f64a:	4798      	blx	r3
   1f64c:	2800      	cmp	r0, #0
   1f64e:	d1e5      	bne.n	1f61c <att_chan_read+0xdc>
   1f650:	e7aa      	b.n	1f5a8 <att_chan_read+0x68>
		return 0;
   1f652:	2700      	movs	r7, #0
   1f654:	e7d7      	b.n	1f606 <att_chan_read+0xc6>

0001f656 <chan_req_send>:
{
   1f656:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1f658:	688f      	ldr	r7, [r1, #8]
{
   1f65a:	4604      	mov	r4, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1f65c:	4638      	mov	r0, r7
   1f65e:	f7ff fd9e 	bl	1f19e <net_buf_frags_len>
   1f662:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
   1f666:	4283      	cmp	r3, r0
{
   1f668:	460d      	mov	r5, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1f66a:	d30d      	bcc.n	1f688 <chan_req_send+0x32>
	req->buf = NULL;
   1f66c:	2600      	movs	r6, #0
	chan->req = req;
   1f66e:	f8c4 10f4 	str.w	r1, [r4, #244]	; 0xf4
	err = chan_send(chan, buf, NULL);
   1f672:	4632      	mov	r2, r6
	req->buf = NULL;
   1f674:	608e      	str	r6, [r1, #8]
	err = chan_send(chan, buf, NULL);
   1f676:	4620      	mov	r0, r4
   1f678:	4639      	mov	r1, r7
   1f67a:	f7e9 f997 	bl	89ac <chan_send>
	if (err) {
   1f67e:	b110      	cbz	r0, 1f686 <chan_req_send+0x30>
		req->buf = buf;
   1f680:	60af      	str	r7, [r5, #8]
		chan->req = NULL;
   1f682:	f8c4 60f4 	str.w	r6, [r4, #244]	; 0xf4
}
   1f686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   1f688:	f06f 0079 	mvn.w	r0, #121	; 0x79
   1f68c:	e7fb      	b.n	1f686 <chan_req_send+0x30>

0001f68e <process_queue>:
{
   1f68e:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   1f690:	2200      	movs	r2, #0
{
   1f692:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   1f694:	2300      	movs	r3, #0
   1f696:	4608      	mov	r0, r1
{
   1f698:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   1f69a:	f005 fab6 	bl	24c0a <net_buf_get>
	if (buf) {
   1f69e:	4605      	mov	r5, r0
   1f6a0:	b160      	cbz	r0, 1f6bc <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   1f6a2:	4601      	mov	r1, r0
   1f6a4:	2200      	movs	r2, #0
   1f6a6:	4620      	mov	r0, r4
   1f6a8:	f7e9 f980 	bl	89ac <chan_send>
		if (err) {
   1f6ac:	4604      	mov	r4, r0
   1f6ae:	b118      	cbz	r0, 1f6b8 <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   1f6b0:	4629      	mov	r1, r5
   1f6b2:	4630      	mov	r0, r6
   1f6b4:	f006 f9f0 	bl	25a98 <k_queue_prepend>
}
   1f6b8:	4620      	mov	r0, r4
   1f6ba:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   1f6bc:	f06f 0401 	mvn.w	r4, #1
   1f6c0:	e7fa      	b.n	1f6b8 <process_queue+0x2a>

0001f6c2 <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f6c2:	b510      	push	{r4, lr}
	return list->head;
   1f6c4:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f6c6:	2200      	movs	r2, #0
   1f6c8:	b153      	cbz	r3, 1f6e0 <sys_slist_find_and_remove.isra.0+0x1e>
   1f6ca:	428b      	cmp	r3, r1
   1f6cc:	d10e      	bne.n	1f6ec <sys_slist_find_and_remove.isra.0+0x2a>
	return node->next;
   1f6ce:	680b      	ldr	r3, [r1, #0]
	return list->tail;
   1f6d0:	6844      	ldr	r4, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   1f6d2:	b932      	cbnz	r2, 1f6e2 <sys_slist_find_and_remove.isra.0+0x20>
   1f6d4:	42a1      	cmp	r1, r4
	list->head = node;
   1f6d6:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   1f6d8:	d100      	bne.n	1f6dc <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   1f6da:	6043      	str	r3, [r0, #4]
	parent->next = child;
   1f6dc:	2300      	movs	r3, #0
   1f6de:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f6e0:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   1f6e2:	42a1      	cmp	r1, r4
	parent->next = child;
   1f6e4:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1f6e6:	bf08      	it	eq
   1f6e8:	6042      	streq	r2, [r0, #4]
}
   1f6ea:	e7f7      	b.n	1f6dc <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   1f6ec:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f6ee:	681b      	ldr	r3, [r3, #0]
   1f6f0:	e7ea      	b.n	1f6c8 <sys_slist_find_and_remove.isra.0+0x6>

0001f6f2 <att_exec_write_req>:
   1f6f2:	2006      	movs	r0, #6
   1f6f4:	4770      	bx	lr

0001f6f6 <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1f6f6:	30f0      	adds	r0, #240	; 0xf0
   1f6f8:	f3bf 8f5b 	dmb	ish
   1f6fc:	e850 3f00 	ldrex	r3, [r0]
   1f700:	f023 0301 	bic.w	r3, r3, #1
   1f704:	e840 3200 	strex	r2, r3, [r0]
   1f708:	2a00      	cmp	r2, #0
   1f70a:	d1f7      	bne.n	1f6fc <chan_rsp_sent+0x6>
   1f70c:	f3bf 8f5b 	dmb	ish
}
   1f710:	4770      	bx	lr

0001f712 <chan_cfm_sent>:
   1f712:	30f0      	adds	r0, #240	; 0xf0
   1f714:	f3bf 8f5b 	dmb	ish
   1f718:	e850 3f00 	ldrex	r3, [r0]
   1f71c:	f023 0302 	bic.w	r3, r3, #2
   1f720:	e840 3200 	strex	r2, r3, [r0]
   1f724:	2a00      	cmp	r2, #0
   1f726:	d1f7      	bne.n	1f718 <chan_cfm_sent+0x6>
   1f728:	f3bf 8f5b 	dmb	ish
}
   1f72c:	4770      	bx	lr

0001f72e <read_cb>:
{
   1f72e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   1f732:	f8d2 8000 	ldr.w	r8, [r2]
{
   1f736:	4606      	mov	r6, r0
	data->err = 0x00;
   1f738:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   1f73a:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = 0x00;
   1f73e:	7317      	strb	r7, [r2, #12]
{
   1f740:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1f742:	4631      	mov	r1, r6
   1f744:	2215      	movs	r2, #21
   1f746:	f000 fd2b 	bl	201a0 <bt_gatt_check_perm>
   1f74a:	4604      	mov	r4, r0
   1f74c:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   1f74e:	b9a0      	cbnz	r0, 1f77a <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   1f750:	e9cd 0000 	strd	r0, r0, [sp]
   1f754:	88ab      	ldrh	r3, [r5, #4]
   1f756:	68aa      	ldr	r2, [r5, #8]
   1f758:	4631      	mov	r1, r6
   1f75a:	4640      	mov	r0, r8
   1f75c:	f7ff fef0 	bl	1f540 <att_chan_read>
	if (ret < 0) {
   1f760:	1e03      	subs	r3, r0, #0
   1f762:	da0c      	bge.n	1f77e <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   1f764:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   1f768:	bf26      	itte	cs
   1f76a:	425b      	negcs	r3, r3
   1f76c:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   1f76e:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   1f770:	732b      	strb	r3, [r5, #12]
}
   1f772:	4620      	mov	r0, r4
   1f774:	b002      	add	sp, #8
   1f776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   1f77a:	463c      	mov	r4, r7
   1f77c:	e7f9      	b.n	1f772 <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   1f77e:	2401      	movs	r4, #1
   1f780:	e7f7      	b.n	1f772 <read_cb+0x44>

0001f782 <bt_att_sent>:
{
   1f782:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   1f784:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
	struct bt_att *att = chan->att;
   1f788:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   1f78c:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1f78e:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   1f792:	b10b      	cbz	r3, 1f798 <bt_att_sent+0x16>
		chan->sent(chan);
   1f794:	4638      	mov	r0, r7
   1f796:	4798      	blx	r3
   1f798:	f3bf 8f5b 	dmb	ish
   1f79c:	f105 03e8 	add.w	r3, r5, #232	; 0xe8
   1f7a0:	e853 2f00 	ldrex	r2, [r3]
   1f7a4:	f022 0210 	bic.w	r2, r2, #16
   1f7a8:	e843 2100 	strex	r1, r2, [r3]
   1f7ac:	2900      	cmp	r1, #0
   1f7ae:	d1f7      	bne.n	1f7a0 <bt_att_sent+0x1e>
   1f7b0:	f3bf 8f5b 	dmb	ish
	if (!att) {
   1f7b4:	b30c      	cbz	r4, 1f7fa <bt_att_sent+0x78>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   1f7b6:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   1f7ba:	b98b      	cbnz	r3, 1f7e0 <bt_att_sent+0x5e>
   1f7bc:	6863      	ldr	r3, [r4, #4]
   1f7be:	b17b      	cbz	r3, 1f7e0 <bt_att_sent+0x5e>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1f7c0:	1d20      	adds	r0, r4, #4
   1f7c2:	f7ff fce2 	bl	1f18a <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1f7c6:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1f7c8:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1f7ca:	4638      	mov	r0, r7
   1f7cc:	f7ff ff43 	bl	1f656 <chan_req_send>
   1f7d0:	2800      	cmp	r0, #0
   1f7d2:	da12      	bge.n	1f7fa <bt_att_sent+0x78>
	parent->next = child;
   1f7d4:	6863      	ldr	r3, [r4, #4]
   1f7d6:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1f7d8:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   1f7da:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   1f7dc:	b903      	cbnz	r3, 1f7e0 <bt_att_sent+0x5e>
	list->tail = node;
   1f7de:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   1f7e0:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
   1f7e4:	4638      	mov	r0, r7
   1f7e6:	f7ff ff52 	bl	1f68e <process_queue>
	if (!err) {
   1f7ea:	b130      	cbz	r0, 1f7fa <bt_att_sent+0x78>
	(void)process_queue(chan, &att->tx_queue);
   1f7ec:	f104 010c 	add.w	r1, r4, #12
   1f7f0:	4638      	mov	r0, r7
}
   1f7f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   1f7f6:	f7ff bf4a 	b.w	1f68e <process_queue>
}
   1f7fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001f7fc <att_req_send_process>:
{
   1f7fc:	b570      	push	{r4, r5, r6, lr}
   1f7fe:	4604      	mov	r4, r0
	node = sys_slist_get(&att->reqs);
   1f800:	3004      	adds	r0, #4
   1f802:	f7ff fcc2 	bl	1f18a <sys_slist_get>
	if (!node) {
   1f806:	4605      	mov	r5, r0
   1f808:	b1b8      	cbz	r0, 1f83a <att_req_send_process+0x3e>
	return list->head;
   1f80a:	6a63      	ldr	r3, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1f80c:	b14b      	cbz	r3, 1f822 <att_req_send_process+0x26>
	return node->next;
   1f80e:	681e      	ldr	r6, [r3, #0]
   1f810:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
   1f814:	b10e      	cbz	r6, 1f81a <att_req_send_process+0x1e>
   1f816:	f5a6 76a2 	sub.w	r6, r6, #324	; 0x144
		if (!chan->req) {
   1f81a:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   1f81e:	b13b      	cbz	r3, 1f830 <att_req_send_process+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1f820:	b966      	cbnz	r6, 1f83c <att_req_send_process+0x40>
	parent->next = child;
   1f822:	6863      	ldr	r3, [r4, #4]
   1f824:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   1f826:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   1f828:	6065      	str	r5, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   1f82a:	b933      	cbnz	r3, 1f83a <att_req_send_process+0x3e>
	list->tail = node;
   1f82c:	60a5      	str	r5, [r4, #8]
}
   1f82e:	e004      	b.n	1f83a <att_req_send_process+0x3e>
	return chan_req_send(chan, req);
   1f830:	4629      	mov	r1, r5
   1f832:	f7ff ff10 	bl	1f656 <chan_req_send>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1f836:	2800      	cmp	r0, #0
   1f838:	dbf2      	blt.n	1f820 <att_req_send_process+0x24>
}
   1f83a:	bd70      	pop	{r4, r5, r6, pc}
	return node->next;
   1f83c:	f8d6 3144 	ldr.w	r3, [r6, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1f840:	b10b      	cbz	r3, 1f846 <att_req_send_process+0x4a>
   1f842:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   1f846:	4630      	mov	r0, r6
   1f848:	461e      	mov	r6, r3
   1f84a:	e7e6      	b.n	1f81a <att_req_send_process+0x1e>

0001f84c <bt_att_status>:
{
   1f84c:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1f84e:	f3bf 8f5b 	dmb	ish
   1f852:	680b      	ldr	r3, [r1, #0]
   1f854:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1f858:	07db      	lsls	r3, r3, #31
{
   1f85a:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1f85c:	d519      	bpl.n	1f892 <bt_att_status+0x46>
	if (!chan->att) {
   1f85e:	f850 0c08 	ldr.w	r0, [r0, #-8]
   1f862:	b1b0      	cbz	r0, 1f892 <bt_att_status+0x46>
	if (chan->req) {
   1f864:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   1f868:	b99b      	cbnz	r3, 1f892 <bt_att_status+0x46>
	node = sys_slist_get(&chan->att->reqs);
   1f86a:	3004      	adds	r0, #4
   1f86c:	f7ff fc8d 	bl	1f18a <sys_slist_get>
	if (!node) {
   1f870:	4604      	mov	r4, r0
   1f872:	b170      	cbz	r0, 1f892 <bt_att_status+0x46>
	return chan_req_send(chan, req);
   1f874:	4601      	mov	r1, r0
   1f876:	f1a5 0008 	sub.w	r0, r5, #8
   1f87a:	f7ff feec 	bl	1f656 <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1f87e:	2800      	cmp	r0, #0
   1f880:	da07      	bge.n	1f892 <bt_att_status+0x46>
	sys_slist_prepend(&chan->att->reqs, node);
   1f882:	f855 3c08 	ldr.w	r3, [r5, #-8]
	parent->next = child;
   1f886:	685a      	ldr	r2, [r3, #4]
   1f888:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   1f88a:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1f88c:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1f88e:	b902      	cbnz	r2, 1f892 <bt_att_status+0x46>
	list->tail = node;
   1f890:	609c      	str	r4, [r3, #8]
}
   1f892:	bd38      	pop	{r3, r4, r5, pc}

0001f894 <bt_att_chan_create_pdu>:
{
   1f894:	b538      	push	{r3, r4, r5, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1f896:	f8b0 308a 	ldrh.w	r3, [r0, #138]	; 0x8a
   1f89a:	3201      	adds	r2, #1
   1f89c:	429a      	cmp	r2, r3
{
   1f89e:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1f8a0:	d81b      	bhi.n	1f8da <bt_att_chan_create_pdu+0x46>
	switch (att_op_get_type(op)) {
   1f8a2:	4608      	mov	r0, r1
   1f8a4:	f7ff fc9b 	bl	1f1de <att_op_get_type>
   1f8a8:	2802      	cmp	r0, #2
   1f8aa:	d001      	beq.n	1f8b0 <bt_att_chan_create_pdu+0x1c>
   1f8ac:	2804      	cmp	r0, #4
   1f8ae:	d10f      	bne.n	1f8d0 <bt_att_chan_create_pdu+0x3c>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   1f8b0:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1f8b4:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
   1f8b6:	2100      	movs	r1, #0
   1f8b8:	4608      	mov	r0, r1
   1f8ba:	f7ff fbe7 	bl	1f08c <bt_l2cap_create_pdu_timeout>
   1f8be:	4604      	mov	r4, r0
	if (!buf) {
   1f8c0:	b120      	cbz	r0, 1f8cc <bt_att_chan_create_pdu+0x38>
   1f8c2:	2101      	movs	r1, #1
   1f8c4:	3008      	adds	r0, #8
   1f8c6:	f005 fa26 	bl	24d16 <net_buf_simple_add>
	hdr->code = op;
   1f8ca:	7005      	strb	r5, [r0, #0]
}
   1f8cc:	4620      	mov	r0, r4
   1f8ce:	bd38      	pop	{r3, r4, r5, pc}
		buf = bt_l2cap_create_pdu(NULL, 0);
   1f8d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1f8d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f8d8:	e7ed      	b.n	1f8b6 <bt_att_chan_create_pdu+0x22>
		return NULL;
   1f8da:	2400      	movs	r4, #0
   1f8dc:	e7f6      	b.n	1f8cc <bt_att_chan_create_pdu+0x38>

0001f8de <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   1f8de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f8e2:	4688      	mov	r8, r1
   1f8e4:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   1f8e6:	2101      	movs	r1, #1
   1f8e8:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   1f8ea:	4605      	mov	r5, r0
   1f8ec:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   1f8ee:	f7ff ffd1 	bl	1f894 <bt_att_chan_create_pdu>
	if (!buf) {
   1f8f2:	4604      	mov	r4, r0
   1f8f4:	b170      	cbz	r0, 1f914 <send_err_rsp.part.0+0x36>
   1f8f6:	2104      	movs	r1, #4
   1f8f8:	3008      	adds	r0, #8
   1f8fa:	f005 fa0c 	bl	24d16 <net_buf_simple_add>
	rsp->request = req;
   1f8fe:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   1f902:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   1f904:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   1f908:	4621      	mov	r1, r4
   1f90a:	4628      	mov	r0, r5
}
   1f90c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   1f910:	f7e9 b8aa 	b.w	8a68 <bt_att_chan_send_rsp.constprop.0>
}
   1f914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001f918 <att_write_req>:
{
   1f918:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1f91a:	460c      	mov	r4, r1
   1f91c:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   1f91e:	f101 0008 	add.w	r0, r1, #8
   1f922:	f005 fa8b 	bl	24e3c <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   1f926:	89a2      	ldrh	r2, [r4, #12]
   1f928:	9201      	str	r2, [sp, #4]
   1f92a:	68a2      	ldr	r2, [r4, #8]
   1f92c:	9200      	str	r2, [sp, #0]
   1f92e:	4603      	mov	r3, r0
   1f930:	2213      	movs	r2, #19
   1f932:	2112      	movs	r1, #18
   1f934:	4628      	mov	r0, r5
   1f936:	f7e9 f9a3 	bl	8c80 <att_write_rsp.constprop.0>
}
   1f93a:	b003      	add	sp, #12
   1f93c:	bd30      	pop	{r4, r5, pc}

0001f93e <att_write_cmd>:
{
   1f93e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1f940:	460c      	mov	r4, r1
   1f942:	4605      	mov	r5, r0
   1f944:	f101 0008 	add.w	r0, r1, #8
   1f948:	f005 fa78 	bl	24e3c <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   1f94c:	89a2      	ldrh	r2, [r4, #12]
   1f94e:	9201      	str	r2, [sp, #4]
   1f950:	68a2      	ldr	r2, [r4, #8]
   1f952:	9200      	str	r2, [sp, #0]
   1f954:	2200      	movs	r2, #0
   1f956:	4603      	mov	r3, r0
   1f958:	4611      	mov	r1, r2
   1f95a:	4628      	mov	r0, r5
   1f95c:	f7e9 f990 	bl	8c80 <att_write_rsp.constprop.0>
}
   1f960:	b003      	add	sp, #12
   1f962:	bd30      	pop	{r4, r5, pc}

0001f964 <bt_att_create_pdu>:
{
   1f964:	b570      	push	{r4, r5, r6, lr}
   1f966:	460e      	mov	r6, r1
   1f968:	4615      	mov	r5, r2
	att = att_get(conn);
   1f96a:	f7ff fd96 	bl	1f49a <att_get>
	if (!att) {
   1f96e:	b168      	cbz	r0, 1f98c <bt_att_create_pdu+0x28>
	return list->head;
   1f970:	6a43      	ldr	r3, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1f972:	b15b      	cbz	r3, 1f98c <bt_att_create_pdu+0x28>
   1f974:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
	return node->next;
   1f978:	681b      	ldr	r3, [r3, #0]
   1f97a:	b10b      	cbz	r3, 1f980 <bt_att_create_pdu+0x1c>
   1f97c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1f980:	1c6a      	adds	r2, r5, #1
   1f982:	f8b0 108a 	ldrh.w	r1, [r0, #138]	; 0x8a
   1f986:	428a      	cmp	r2, r1
   1f988:	d902      	bls.n	1f990 <bt_att_create_pdu+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1f98a:	b93b      	cbnz	r3, 1f99c <bt_att_create_pdu+0x38>
}
   1f98c:	2000      	movs	r0, #0
   1f98e:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   1f990:	462a      	mov	r2, r5
   1f992:	4631      	mov	r1, r6
}
   1f994:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   1f998:	f7ff bf7c 	b.w	1f894 <bt_att_chan_create_pdu>
   1f99c:	f8d3 4144 	ldr.w	r4, [r3, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1f9a0:	b10c      	cbz	r4, 1f9a6 <bt_att_create_pdu+0x42>
   1f9a2:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
{
   1f9a6:	4618      	mov	r0, r3
   1f9a8:	4623      	mov	r3, r4
   1f9aa:	e7ea      	b.n	1f982 <bt_att_create_pdu+0x1e>

0001f9ac <att_read_blob_req>:
{
   1f9ac:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   1f9ae:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   1f9b0:	8813      	ldrh	r3, [r2, #0]
   1f9b2:	8852      	ldrh	r2, [r2, #2]
   1f9b4:	9200      	str	r2, [sp, #0]
   1f9b6:	210c      	movs	r1, #12
   1f9b8:	220d      	movs	r2, #13
   1f9ba:	f7e9 fa8f 	bl	8edc <att_read_rsp>
}
   1f9be:	b003      	add	sp, #12
   1f9c0:	f85d fb04 	ldr.w	pc, [sp], #4

0001f9c4 <att_read_req>:
{
   1f9c4:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   1f9c6:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1f9c8:	2200      	movs	r2, #0
   1f9ca:	881b      	ldrh	r3, [r3, #0]
   1f9cc:	9200      	str	r2, [sp, #0]
   1f9ce:	210a      	movs	r1, #10
   1f9d0:	220b      	movs	r2, #11
   1f9d2:	f7e9 fa83 	bl	8edc <att_read_rsp>
}
   1f9d6:	b003      	add	sp, #12
   1f9d8:	f85d fb04 	ldr.w	pc, [sp], #4

0001f9dc <att_mtu_req>:
{
   1f9dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   1f9de:	6803      	ldr	r3, [r0, #0]
{
   1f9e0:	4604      	mov	r4, r0
	struct bt_conn *conn = chan->att->conn;
   1f9e2:	6818      	ldr	r0, [r3, #0]
   1f9e4:	f3bf 8f5b 	dmb	ish
   1f9e8:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   1f9ec:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   1f9f0:	f3c3 05c0 	ubfx	r5, r3, #3, #1
   1f9f4:	071b      	lsls	r3, r3, #28
   1f9f6:	d420      	bmi.n	1fa3a <att_mtu_req+0x5e>
	mtu_client = sys_le16_to_cpu(req->mtu);
   1f9f8:	688b      	ldr	r3, [r1, #8]
   1f9fa:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   1f9fc:	2e16      	cmp	r6, #22
   1f9fe:	d91e      	bls.n	1fa3e <att_mtu_req+0x62>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   1fa00:	2202      	movs	r2, #2
   1fa02:	2103      	movs	r1, #3
   1fa04:	f7ff ffae 	bl	1f964 <bt_att_create_pdu>
	if (!pdu) {
   1fa08:	4607      	mov	r7, r0
   1fa0a:	b1d0      	cbz	r0, 1fa42 <att_mtu_req+0x66>
	return net_buf_simple_add(&buf->b, len);
   1fa0c:	2102      	movs	r1, #2
   1fa0e:	3008      	adds	r0, #8
   1fa10:	f005 f981 	bl	24d16 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   1fa14:	2345      	movs	r3, #69	; 0x45
   1fa16:	7003      	strb	r3, [r0, #0]
   1fa18:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   1fa1a:	4639      	mov	r1, r7
   1fa1c:	4620      	mov	r0, r4
   1fa1e:	f7e9 f823 	bl	8a68 <bt_att_chan_send_rsp.constprop.0>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   1fa22:	2e45      	cmp	r6, #69	; 0x45
   1fa24:	bf28      	it	cs
   1fa26:	2645      	movcs	r6, #69	; 0x45
	att_chan_mtu_updated(chan);
   1fa28:	4620      	mov	r0, r4
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   1fa2a:	f8a4 607a 	strh.w	r6, [r4, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   1fa2e:	f8a4 608a 	strh.w	r6, [r4, #138]	; 0x8a
	att_chan_mtu_updated(chan);
   1fa32:	f7ff fcec 	bl	1f40e <att_chan_mtu_updated>
	return 0;
   1fa36:	4628      	mov	r0, r5
}
   1fa38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   1fa3a:	2006      	movs	r0, #6
   1fa3c:	e7fc      	b.n	1fa38 <att_mtu_req+0x5c>
		return BT_ATT_ERR_INVALID_PDU;
   1fa3e:	2004      	movs	r0, #4
   1fa40:	e7fa      	b.n	1fa38 <att_mtu_req+0x5c>
		return BT_ATT_ERR_UNLIKELY;
   1fa42:	200e      	movs	r0, #14
   1fa44:	e7f8      	b.n	1fa38 <att_mtu_req+0x5c>

0001fa46 <bt_att_init>:
	bt_gatt_init();
   1fa46:	f7e9 bd5d 	b.w	9504 <bt_gatt_init>

0001fa4a <bt_att_get_mtu>:
{
   1fa4a:	b508      	push	{r3, lr}
	att = att_get(conn);
   1fa4c:	f7ff fd25 	bl	1f49a <att_get>
	if (!att) {
   1fa50:	b1b0      	cbz	r0, 1fa80 <bt_att_get_mtu+0x36>
	return list->head;
   1fa52:	6a40      	ldr	r0, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1fa54:	b1a0      	cbz	r0, 1fa80 <bt_att_get_mtu+0x36>
	return node->next;
   1fa56:	6803      	ldr	r3, [r0, #0]
   1fa58:	f5a0 71a2 	sub.w	r1, r0, #324	; 0x144
   1fa5c:	b10b      	cbz	r3, 1fa62 <bt_att_get_mtu+0x18>
   1fa5e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   1fa62:	2000      	movs	r0, #0
		if (chan->chan.tx.mtu > mtu) {
   1fa64:	f8b1 208a 	ldrh.w	r2, [r1, #138]	; 0x8a
   1fa68:	4290      	cmp	r0, r2
   1fa6a:	bf38      	it	cc
   1fa6c:	4610      	movcc	r0, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1fa6e:	b13b      	cbz	r3, 1fa80 <bt_att_get_mtu+0x36>
   1fa70:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
   1fa74:	b10a      	cbz	r2, 1fa7a <bt_att_get_mtu+0x30>
   1fa76:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
{
   1fa7a:	4619      	mov	r1, r3
   1fa7c:	4613      	mov	r3, r2
   1fa7e:	e7f1      	b.n	1fa64 <bt_att_get_mtu+0x1a>
}
   1fa80:	bd08      	pop	{r3, pc}

0001fa82 <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   1fa82:	898a      	ldrh	r2, [r1, #12]
   1fa84:	6889      	ldr	r1, [r1, #8]
   1fa86:	2300      	movs	r3, #0
   1fa88:	f7e9 bba6 	b.w	91d8 <att_handle_rsp>

0001fa8c <att_timeout>:
	bt_att_disconnected(&chan->chan.chan);
   1fa8c:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
   1fa90:	f7e9 bbd4 	b.w	923c <bt_att_disconnected>

0001fa94 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   1fa94:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1fa98:	4607      	mov	r7, r0
   1fa9a:	460d      	mov	r5, r1
   1fa9c:	4616      	mov	r6, r2
   1fa9e:	4698      	mov	r8, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   1faa0:	f7ff fcfb 	bl	1f49a <att_get>
	if (!att) {
   1faa4:	4604      	mov	r4, r0
   1faa6:	b938      	cbnz	r0, 1fab8 <bt_att_send+0x24>
		net_buf_unref(buf);
   1faa8:	4628      	mov	r0, r5
   1faaa:	f7f7 fae5 	bl	17078 <net_buf_unref>
		return -ENOTCONN;
   1faae:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   1fab2:	b002      	add	sp, #8
   1fab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   1fab8:	b146      	cbz	r6, 1facc <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   1faba:	f8cd 8000 	str.w	r8, [sp]
   1fabe:	4633      	mov	r3, r6
   1fac0:	462a      	mov	r2, r5
   1fac2:	2104      	movs	r1, #4
   1fac4:	4638      	mov	r0, r7
   1fac6:	f7ff fae4 	bl	1f092 <bt_l2cap_send_cb>
   1faca:	e7f2      	b.n	1fab2 <bt_att_send+0x1e>
	net_buf_put(&att->tx_queue, buf);
   1facc:	f100 060c 	add.w	r6, r0, #12
   1fad0:	4629      	mov	r1, r5
   1fad2:	4630      	mov	r0, r6
   1fad4:	f005 f8da 	bl	24c8c <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   1fad8:	2200      	movs	r2, #0
   1fada:	2300      	movs	r3, #0
   1fadc:	4630      	mov	r0, r6
   1fade:	f005 f894 	bl	24c0a <net_buf_get>
	if (!buf) {
   1fae2:	4605      	mov	r5, r0
   1fae4:	b908      	cbnz	r0, 1faea <bt_att_send+0x56>
	return 0;
   1fae6:	2000      	movs	r0, #0
   1fae8:	e7e3      	b.n	1fab2 <bt_att_send+0x1e>
	return list->head;
   1faea:	6a63      	ldr	r3, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1faec:	b1a3      	cbz	r3, 1fb18 <bt_att_send+0x84>
	return node->next;
   1faee:	681c      	ldr	r4, [r3, #0]
   1faf0:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
   1faf4:	b10c      	cbz	r4, 1fafa <bt_att_send+0x66>
   1faf6:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
	return chan_send(chan, buf, cb);
   1fafa:	2200      	movs	r2, #0
   1fafc:	4629      	mov	r1, r5
   1fafe:	f7e8 ff55 	bl	89ac <chan_send>
		if (err >= 0) {
   1fb02:	2800      	cmp	r0, #0
   1fb04:	daef      	bge.n	1fae6 <bt_att_send+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1fb06:	b13c      	cbz	r4, 1fb18 <bt_att_send+0x84>
   1fb08:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   1fb0c:	b10b      	cbz	r3, 1fb12 <bt_att_send+0x7e>
   1fb0e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   1fb12:	4620      	mov	r0, r4
   1fb14:	461c      	mov	r4, r3
   1fb16:	e7f0      	b.n	1fafa <bt_att_send+0x66>
		k_queue_prepend(&att->tx_queue._queue, buf);
   1fb18:	4629      	mov	r1, r5
   1fb1a:	4630      	mov	r0, r6
   1fb1c:	f005 ffbc 	bl	25a98 <k_queue_prepend>
   1fb20:	e7e1      	b.n	1fae6 <bt_att_send+0x52>

0001fb22 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   1fb22:	b510      	push	{r4, lr}
   1fb24:	460c      	mov	r4, r1
	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   1fb26:	f7ff fcb8 	bl	1f49a <att_get>
	if (!att) {
   1fb2a:	b160      	cbz	r0, 1fb46 <bt_att_req_send+0x24>
	parent->next = child;
   1fb2c:	2300      	movs	r3, #0
   1fb2e:	6023      	str	r3, [r4, #0]
	return list->tail;
   1fb30:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   1fb32:	b92b      	cbnz	r3, 1fb40 <bt_att_req_send+0x1e>
	list->head = node;
   1fb34:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   1fb38:	f7ff fe60 	bl	1f7fc <att_req_send_process>

	return 0;
   1fb3c:	2000      	movs	r0, #0
}
   1fb3e:	bd10      	pop	{r4, pc}
	parent->next = child;
   1fb40:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1fb42:	6084      	str	r4, [r0, #8]
}
   1fb44:	e7f8      	b.n	1fb38 <bt_att_req_send+0x16>
		return -ENOTCONN;
   1fb46:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1fb4a:	e7f8      	b.n	1fb3e <bt_att_req_send+0x1c>

0001fb4c <found_attr>:
	*found = attr;
   1fb4c:	6010      	str	r0, [r2, #0]
}
   1fb4e:	2000      	movs	r0, #0
   1fb50:	4770      	bx	lr

0001fb52 <gatt_ccc_changed>:
{
   1fb52:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   1fb54:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   1fb56:	895a      	ldrh	r2, [r3, #10]
   1fb58:	428a      	cmp	r2, r1
   1fb5a:	d003      	beq.n	1fb64 <gatt_ccc_changed+0x12>
		ccc->value = value;
   1fb5c:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   1fb5e:	68db      	ldr	r3, [r3, #12]
   1fb60:	b103      	cbz	r3, 1fb64 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   1fb62:	4718      	bx	r3
}
   1fb64:	4770      	bx	lr

0001fb66 <gatt_indicate_rsp>:
{
   1fb66:	b510      	push	{r4, lr}
   1fb68:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   1fb6a:	68a3      	ldr	r3, [r4, #8]
{
   1fb6c:	460a      	mov	r2, r1
	if (params->func) {
   1fb6e:	b10b      	cbz	r3, 1fb74 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   1fb70:	4621      	mov	r1, r4
   1fb72:	4798      	blx	r3
	params->_ref--;
   1fb74:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   1fb76:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   1fb78:	3b01      	subs	r3, #1
   1fb7a:	b2db      	uxtb	r3, r3
   1fb7c:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   1fb7e:	b122      	cbz	r2, 1fb8a <gatt_indicate_rsp+0x24>
   1fb80:	b91b      	cbnz	r3, 1fb8a <gatt_indicate_rsp+0x24>
		params->destroy(params);
   1fb82:	4620      	mov	r0, r4
}
   1fb84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   1fb88:	4710      	bx	r2
}
   1fb8a:	bd10      	pop	{r4, pc}

0001fb8c <match_uuid>:
	data->attr = attr;
   1fb8c:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   1fb8e:	8091      	strh	r1, [r2, #4]
}
   1fb90:	2000      	movs	r0, #0
   1fb92:	4770      	bx	lr

0001fb94 <atomic_get>:
   1fb94:	f3bf 8f5b 	dmb	ish
   1fb98:	6800      	ldr	r0, [r0, #0]
   1fb9a:	f3bf 8f5b 	dmb	ish
}
   1fb9e:	4770      	bx	lr

0001fba0 <gen_hash_m>:
{
   1fba0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1fba2:	6807      	ldr	r7, [r0, #0]
   1fba4:	783d      	ldrb	r5, [r7, #0]
{
   1fba6:	b089      	sub	sp, #36	; 0x24
   1fba8:	4606      	mov	r6, r0
   1fbaa:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1fbac:	b10d      	cbz	r5, 1fbb2 <gen_hash_m+0x12>
	switch (u16->val) {
   1fbae:	2501      	movs	r5, #1
   1fbb0:	e014      	b.n	1fbdc <gen_hash_m+0x3c>
   1fbb2:	887b      	ldrh	r3, [r7, #2]
   1fbb4:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   1fbb8:	d004      	beq.n	1fbc4 <gen_hash_m+0x24>
   1fbba:	d812      	bhi.n	1fbe2 <gen_hash_m+0x42>
   1fbbc:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   1fbc0:	2b03      	cmp	r3, #3
   1fbc2:	d8f4      	bhi.n	1fbae <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   1fbc4:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1fbc8:	2202      	movs	r2, #2
   1fbca:	f10d 010a 	add.w	r1, sp, #10
   1fbce:	4620      	mov	r0, r4
   1fbd0:	f7fe f951 	bl	1de76 <tc_cmac_update>
   1fbd4:	b9e0      	cbnz	r0, 1fc10 <gen_hash_m+0x70>
			state->err = -EINVAL;
   1fbd6:	f06f 0315 	mvn.w	r3, #21
   1fbda:	65a3      	str	r3, [r4, #88]	; 0x58
}
   1fbdc:	4628      	mov	r0, r5
   1fbde:	b009      	add	sp, #36	; 0x24
   1fbe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   1fbe2:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   1fbe6:	33ff      	adds	r3, #255	; 0xff
   1fbe8:	b29b      	uxth	r3, r3
   1fbea:	2b04      	cmp	r3, #4
   1fbec:	d8df      	bhi.n	1fbae <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   1fbee:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1fbf2:	2202      	movs	r2, #2
   1fbf4:	f10d 010a 	add.w	r1, sp, #10
   1fbf8:	4620      	mov	r0, r4
   1fbfa:	f7fe f93c 	bl	1de76 <tc_cmac_update>
   1fbfe:	2800      	cmp	r0, #0
   1fc00:	d0e9      	beq.n	1fbd6 <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   1fc02:	887b      	ldrh	r3, [r7, #2]
   1fc04:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1fc08:	2202      	movs	r2, #2
   1fc0a:	f10d 010a 	add.w	r1, sp, #10
   1fc0e:	e016      	b.n	1fc3e <gen_hash_m+0x9e>
		value = sys_cpu_to_le16(u16->val);
   1fc10:	887b      	ldrh	r3, [r7, #2]
   1fc12:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1fc16:	2202      	movs	r2, #2
   1fc18:	f10d 010a 	add.w	r1, sp, #10
   1fc1c:	4620      	mov	r0, r4
   1fc1e:	f7fe f92a 	bl	1de76 <tc_cmac_update>
   1fc22:	2800      	cmp	r0, #0
   1fc24:	d0d7      	beq.n	1fbd6 <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   1fc26:	2000      	movs	r0, #0
   1fc28:	aa03      	add	r2, sp, #12
   1fc2a:	6877      	ldr	r7, [r6, #4]
   1fc2c:	9000      	str	r0, [sp, #0]
   1fc2e:	2313      	movs	r3, #19
   1fc30:	4631      	mov	r1, r6
   1fc32:	47b8      	blx	r7
		if (len < 0) {
   1fc34:	1e02      	subs	r2, r0, #0
   1fc36:	da01      	bge.n	1fc3c <gen_hash_m+0x9c>
			state->err = len;
   1fc38:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   1fc3a:	e7cf      	b.n	1fbdc <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   1fc3c:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1fc3e:	4620      	mov	r0, r4
   1fc40:	f7fe f919 	bl	1de76 <tc_cmac_update>
   1fc44:	2800      	cmp	r0, #0
   1fc46:	d1b2      	bne.n	1fbae <gen_hash_m+0xe>
   1fc48:	e7c5      	b.n	1fbd6 <gen_hash_m+0x36>

0001fc4a <atomic_or>:
{
   1fc4a:	4603      	mov	r3, r0
}
   1fc4c:	f3bf 8f5b 	dmb	ish
   1fc50:	e853 0f00 	ldrex	r0, [r3]
   1fc54:	ea40 0201 	orr.w	r2, r0, r1
   1fc58:	e843 2c00 	strex	ip, r2, [r3]
   1fc5c:	f1bc 0f00 	cmp.w	ip, #0
   1fc60:	d1f6      	bne.n	1fc50 <atomic_or+0x6>
   1fc62:	f3bf 8f5b 	dmb	ish
   1fc66:	4770      	bx	lr

0001fc68 <cf_write>:
{
   1fc68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fc6c:	4698      	mov	r8, r3
   1fc6e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   1fc72:	2b01      	cmp	r3, #1
{
   1fc74:	4606      	mov	r6, r0
   1fc76:	4617      	mov	r7, r2
	if (offset > sizeof(cfg->data)) {
   1fc78:	d831      	bhi.n	1fcde <cf_write+0x76>
	if (offset + len > sizeof(cfg->data)) {
   1fc7a:	4443      	add	r3, r8
   1fc7c:	2b01      	cmp	r3, #1
   1fc7e:	4645      	mov	r5, r8
   1fc80:	dc30      	bgt.n	1fce4 <cf_write+0x7c>
	cfg = find_cf_cfg(conn);
   1fc82:	f7e9 fb35 	bl	92f0 <find_cf_cfg>
	if (!cfg) {
   1fc86:	4604      	mov	r4, r0
   1fc88:	b918      	cbnz	r0, 1fc92 <cf_write+0x2a>
		cfg = find_cf_cfg(NULL);
   1fc8a:	f7e9 fb31 	bl	92f0 <find_cf_cfg>
	if (!cfg) {
   1fc8e:	4604      	mov	r4, r0
   1fc90:	b358      	cbz	r0, 1fcea <cf_write+0x82>
{
   1fc92:	2100      	movs	r1, #0
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1fc94:	f1b8 0f00 	cmp.w	r8, #0
   1fc98:	d10f      	bne.n	1fcba <cf_write+0x52>
	memcpy(dst, src, sizeof(*dst));
   1fc9a:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1fc9e:	2207      	movs	r2, #7
   1fca0:	1c60      	adds	r0, r4, #1
   1fca2:	f7fe f9c6 	bl	1e032 <memcpy>
	cfg->id = conn->id;
   1fca6:	4620      	mov	r0, r4
   1fca8:	7a33      	ldrb	r3, [r6, #8]
   1fcaa:	f800 3b0c 	strb.w	r3, [r0], #12
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1fcae:	2101      	movs	r1, #1
   1fcb0:	f7ff ffcb 	bl	1fc4a <atomic_or>
}
   1fcb4:	4628      	mov	r0, r5
   1fcb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1fcba:	7a20      	ldrb	r0, [r4, #8]
   1fcbc:	fa20 f301 	lsr.w	r3, r0, r1
   1fcc0:	07da      	lsls	r2, r3, #31
   1fcc2:	d503      	bpl.n	1fccc <cf_write+0x64>
		    !(value[i / 8] & BIT(i % 8))) {
   1fcc4:	783b      	ldrb	r3, [r7, #0]
   1fcc6:	40cb      	lsrs	r3, r1
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1fcc8:	07db      	lsls	r3, r3, #31
   1fcca:	d511      	bpl.n	1fcf0 <cf_write+0x88>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1fccc:	3101      	adds	r1, #1
   1fcce:	2903      	cmp	r1, #3
   1fcd0:	d1e0      	bne.n	1fc94 <cf_write+0x2c>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   1fcd2:	783b      	ldrb	r3, [r7, #0]
   1fcd4:	f003 0307 	and.w	r3, r3, #7
   1fcd8:	4318      	orrs	r0, r3
   1fcda:	7220      	strb	r0, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   1fcdc:	e7dd      	b.n	1fc9a <cf_write+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1fcde:	f06f 0506 	mvn.w	r5, #6
   1fce2:	e7e7      	b.n	1fcb4 <cf_write+0x4c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1fce4:	f06f 050c 	mvn.w	r5, #12
   1fce8:	e7e4      	b.n	1fcb4 <cf_write+0x4c>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1fcea:	f06f 0510 	mvn.w	r5, #16
   1fcee:	e7e1      	b.n	1fcb4 <cf_write+0x4c>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1fcf0:	f06f 0512 	mvn.w	r5, #18
   1fcf4:	e7de      	b.n	1fcb4 <cf_write+0x4c>

0001fcf6 <gatt_foreach_iter>:
{
   1fcf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (handle > end_handle) {
   1fcf8:	4299      	cmp	r1, r3
{
   1fcfa:	4604      	mov	r4, r0
   1fcfc:	9e08      	ldr	r6, [sp, #32]
   1fcfe:	e9dd 0706 	ldrd	r0, r7, [sp, #24]
   1fd02:	460d      	mov	r5, r1
	if (handle > end_handle) {
   1fd04:	d810      	bhi.n	1fd28 <gatt_foreach_iter+0x32>
	if (handle < start_handle) {
   1fd06:	4291      	cmp	r1, r2
   1fd08:	d201      	bcs.n	1fd0e <gatt_foreach_iter+0x18>
		return BT_GATT_ITER_CONTINUE;
   1fd0a:	2001      	movs	r0, #1
}
   1fd0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1fd0e:	b968      	cbnz	r0, 1fd2c <gatt_foreach_iter+0x36>
	if (attr_data && attr_data != attr->user_data) {
   1fd10:	b997      	cbnz	r7, 1fd38 <gatt_foreach_iter+0x42>
	*num_matches -= 1;
   1fd12:	8833      	ldrh	r3, [r6, #0]
	result = func(attr, handle, user_data);
   1fd14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	*num_matches -= 1;
   1fd16:	3b01      	subs	r3, #1
   1fd18:	8033      	strh	r3, [r6, #0]
	result = func(attr, handle, user_data);
   1fd1a:	4629      	mov	r1, r5
   1fd1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1fd1e:	4620      	mov	r0, r4
   1fd20:	4798      	blx	r3
	if (!*num_matches) {
   1fd22:	8833      	ldrh	r3, [r6, #0]
   1fd24:	2b00      	cmp	r3, #0
   1fd26:	d1f1      	bne.n	1fd0c <gatt_foreach_iter+0x16>
		return BT_GATT_ITER_STOP;
   1fd28:	2000      	movs	r0, #0
   1fd2a:	e7ef      	b.n	1fd0c <gatt_foreach_iter+0x16>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1fd2c:	6821      	ldr	r1, [r4, #0]
   1fd2e:	f7fe fba9 	bl	1e484 <bt_uuid_cmp>
   1fd32:	2800      	cmp	r0, #0
   1fd34:	d0ec      	beq.n	1fd10 <gatt_foreach_iter+0x1a>
   1fd36:	e7e8      	b.n	1fd0a <gatt_foreach_iter+0x14>
	if (attr_data && attr_data != attr->user_data) {
   1fd38:	68e3      	ldr	r3, [r4, #12]
   1fd3a:	429f      	cmp	r7, r3
   1fd3c:	d1e5      	bne.n	1fd0a <gatt_foreach_iter+0x14>
   1fd3e:	e7e8      	b.n	1fd12 <gatt_foreach_iter+0x1c>

0001fd40 <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1fd40:	f3bf 8f5b 	dmb	ish
   1fd44:	e850 3f00 	ldrex	r3, [r0]
   1fd48:	400b      	ands	r3, r1
   1fd4a:	e840 3200 	strex	r2, r3, [r0]
   1fd4e:	2a00      	cmp	r2, #0
   1fd50:	d1f8      	bne.n	1fd44 <atomic_and.isra.0+0x4>
   1fd52:	f3bf 8f5b 	dmb	ish
}
   1fd56:	4770      	bx	lr

0001fd58 <read_ppcp>:
{
   1fd58:	b513      	push	{r0, r1, r4, lr}
   1fd5a:	4610      	mov	r0, r2
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   1fd5c:	2218      	movs	r2, #24
{
   1fd5e:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   1fd62:	f8ad 2000 	strh.w	r2, [sp]
	ppcp.max_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MAX_INT);
   1fd66:	2228      	movs	r2, #40	; 0x28
   1fd68:	f8ad 2002 	strh.w	r2, [sp, #2]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   1fd6c:	2200      	movs	r2, #0
   1fd6e:	f8ad 2004 	strh.w	r2, [sp, #4]
	if (offset > value_len) {
   1fd72:	2908      	cmp	r1, #8
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   1fd74:	f04f 022a 	mov.w	r2, #42	; 0x2a
   1fd78:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   1fd7c:	d80b      	bhi.n	1fd96 <read_ppcp+0x3e>
	len = MIN(buf_len, value_len - offset);
   1fd7e:	f1c1 0408 	rsb	r4, r1, #8
   1fd82:	429c      	cmp	r4, r3
   1fd84:	bfa8      	it	ge
   1fd86:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1fd88:	4622      	mov	r2, r4
   1fd8a:	4469      	add	r1, sp
   1fd8c:	f7fe f951 	bl	1e032 <memcpy>
}
   1fd90:	4620      	mov	r0, r4
   1fd92:	b002      	add	sp, #8
   1fd94:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1fd96:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   1fd9a:	e7f9      	b.n	1fd90 <read_ppcp+0x38>

0001fd9c <read_appearance>:
{
   1fd9c:	b513      	push	{r0, r1, r4, lr}
   1fd9e:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1fda2:	4610      	mov	r0, r2
	if (offset > value_len) {
   1fda4:	2902      	cmp	r1, #2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   1fda6:	f04f 0200 	mov.w	r2, #0
   1fdaa:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   1fdae:	d80d      	bhi.n	1fdcc <read_appearance+0x30>
	len = MIN(buf_len, value_len - offset);
   1fdb0:	f1c1 0402 	rsb	r4, r1, #2
   1fdb4:	429c      	cmp	r4, r3
   1fdb6:	bfa8      	it	ge
   1fdb8:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1fdba:	f10d 0306 	add.w	r3, sp, #6
   1fdbe:	4622      	mov	r2, r4
   1fdc0:	4419      	add	r1, r3
   1fdc2:	f7fe f936 	bl	1e032 <memcpy>
}
   1fdc6:	4620      	mov	r0, r4
   1fdc8:	b002      	add	sp, #8
   1fdca:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1fdcc:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   1fdd0:	e7f9      	b.n	1fdc6 <read_appearance+0x2a>

0001fdd2 <read_name>:
{
   1fdd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fdd6:	4698      	mov	r8, r3
   1fdd8:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   1fddc:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   1fdde:	f7e7 f8ad 	bl	6f3c <bt_get_name>
   1fde2:	4607      	mov	r7, r0
				 strlen(name));
   1fde4:	f7fe f8f8 	bl	1dfd8 <strlen>
	if (offset > value_len) {
   1fde8:	b283      	uxth	r3, r0
   1fdea:	42b3      	cmp	r3, r6
   1fdec:	d30c      	bcc.n	1fe08 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   1fdee:	1b9c      	subs	r4, r3, r6
   1fdf0:	4544      	cmp	r4, r8
   1fdf2:	bfa8      	it	ge
   1fdf4:	4644      	movge	r4, r8
   1fdf6:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   1fdf8:	4622      	mov	r2, r4
   1fdfa:	19b9      	adds	r1, r7, r6
   1fdfc:	4628      	mov	r0, r5
   1fdfe:	f7fe f918 	bl	1e032 <memcpy>
}
   1fe02:	4620      	mov	r0, r4
   1fe04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1fe08:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   1fe0c:	e7f9      	b.n	1fe02 <read_name+0x30>

0001fe0e <cf_read>:
{
   1fe0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1fe10:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   1fe12:	2300      	movs	r3, #0
{
   1fe14:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   1fe18:	f88d 3004 	strb.w	r3, [sp, #4]
{
   1fe1c:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   1fe1e:	f7e9 fa67 	bl	92f0 <find_cf_cfg>
	if (cfg) {
   1fe22:	b128      	cbz	r0, 1fe30 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   1fe24:	f100 0108 	add.w	r1, r0, #8
   1fe28:	2201      	movs	r2, #1
   1fe2a:	a801      	add	r0, sp, #4
   1fe2c:	f7fe f901 	bl	1e032 <memcpy>
	if (offset > value_len) {
   1fe30:	2e01      	cmp	r6, #1
   1fe32:	d80d      	bhi.n	1fe50 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   1fe34:	f1c6 0401 	rsb	r4, r6, #1
   1fe38:	42bc      	cmp	r4, r7
   1fe3a:	bfa8      	it	ge
   1fe3c:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1fe3e:	ab01      	add	r3, sp, #4
   1fe40:	4622      	mov	r2, r4
   1fe42:	1999      	adds	r1, r3, r6
   1fe44:	4628      	mov	r0, r5
   1fe46:	f7fe f8f4 	bl	1e032 <memcpy>
}
   1fe4a:	4620      	mov	r0, r4
   1fe4c:	b003      	add	sp, #12
   1fe4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1fe50:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   1fe54:	e7f9      	b.n	1fe4a <cf_read+0x3c>

0001fe56 <bt_gatt_attr_read_service>:
{
   1fe56:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   1fe58:	68c9      	ldr	r1, [r1, #12]
{
   1fe5a:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   1fe5e:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   1fe60:	780b      	ldrb	r3, [r1, #0]
{
   1fe62:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   1fe64:	b993      	cbnz	r3, 1fe8c <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   1fe66:	884b      	ldrh	r3, [r1, #2]
   1fe68:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   1fe6c:	2d02      	cmp	r5, #2
   1fe6e:	d819      	bhi.n	1fea4 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   1fe70:	f1c5 0202 	rsb	r2, r5, #2
   1fe74:	4294      	cmp	r4, r2
   1fe76:	bfa8      	it	ge
   1fe78:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1fe7a:	f10d 0306 	add.w	r3, sp, #6
   1fe7e:	4622      	mov	r2, r4
   1fe80:	1959      	adds	r1, r3, r5
   1fe82:	f7fe f8d6 	bl	1e032 <memcpy>
}
   1fe86:	4620      	mov	r0, r4
   1fe88:	b003      	add	sp, #12
   1fe8a:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   1fe8c:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   1fe8e:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   1fe92:	d807      	bhi.n	1fea4 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   1fe94:	f1c5 0210 	rsb	r2, r5, #16
   1fe98:	4294      	cmp	r4, r2
   1fe9a:	bfa8      	it	ge
   1fe9c:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1fe9e:	4622      	mov	r2, r4
   1fea0:	4429      	add	r1, r5
   1fea2:	e7ee      	b.n	1fe82 <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1fea4:	f06f 0406 	mvn.w	r4, #6
   1fea8:	e7ed      	b.n	1fe86 <bt_gatt_attr_read_service+0x30>

0001feaa <clear_cf_cfg>:
{
   1feaa:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1feac:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1feae:	2500      	movs	r5, #0
   1feb0:	2207      	movs	r2, #7
   1feb2:	4669      	mov	r1, sp
   1feb4:	3001      	adds	r0, #1
   1feb6:	9500      	str	r5, [sp, #0]
   1feb8:	f8cd 5003 	str.w	r5, [sp, #3]
   1febc:	f7fe f8b9 	bl	1e032 <memcpy>
	memset(cfg->data, 0, sizeof(cfg->data));
   1fec0:	f104 0008 	add.w	r0, r4, #8
   1fec4:	2201      	movs	r2, #1
   1fec6:	4629      	mov	r1, r5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1fec8:	340c      	adds	r4, #12
   1feca:	f7fe f8bd 	bl	1e048 <memset>
   1fece:	f3bf 8f5b 	dmb	ish
   1fed2:	e854 3f00 	ldrex	r3, [r4]
   1fed6:	e844 5200 	strex	r2, r5, [r4]
   1feda:	2a00      	cmp	r2, #0
   1fedc:	d1f9      	bne.n	1fed2 <clear_cf_cfg+0x28>
   1fede:	f3bf 8f5b 	dmb	ish
}
   1fee2:	b003      	add	sp, #12
   1fee4:	bd30      	pop	{r4, r5, pc}

0001fee6 <clear_ccc_cfg>:
{
   1fee6:	b537      	push	{r0, r1, r2, r4, r5, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1fee8:	2500      	movs	r5, #0
{
   1feea:	4604      	mov	r4, r0
   1feec:	2207      	movs	r2, #7
   1feee:	4669      	mov	r1, sp
   1fef0:	3001      	adds	r0, #1
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1fef2:	9500      	str	r5, [sp, #0]
   1fef4:	f8cd 5003 	str.w	r5, [sp, #3]
   1fef8:	f7fe f89b 	bl	1e032 <memcpy>
	cfg->id = 0U;
   1fefc:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   1fefe:	8125      	strh	r5, [r4, #8]
}
   1ff00:	b003      	add	sp, #12
   1ff02:	bd30      	pop	{r4, r5, pc}

0001ff04 <find_ccc_cfg>:
{
   1ff04:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1ff06:	460c      	mov	r4, r1
						    &cfg->peer)) {
   1ff08:	1c4d      	adds	r5, r1, #1
		if (conn) {
   1ff0a:	b148      	cbz	r0, 1ff20 <find_ccc_cfg+0x1c>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1ff0c:	7809      	ldrb	r1, [r1, #0]
   1ff0e:	462a      	mov	r2, r5
   1ff10:	f7ff f801 	bl	1ef16 <bt_conn_is_peer_addr_le>
	return NULL;
   1ff14:	2800      	cmp	r0, #0
   1ff16:	bf08      	it	eq
   1ff18:	2400      	moveq	r4, #0
}
   1ff1a:	4620      	mov	r0, r4
   1ff1c:	b003      	add	sp, #12
   1ff1e:	bd30      	pop	{r4, r5, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1ff20:	9000      	str	r0, [sp, #0]
	return memcmp(a, b, sizeof(*a));
   1ff22:	2207      	movs	r2, #7
   1ff24:	f8cd 0003 	str.w	r0, [sp, #3]
   1ff28:	4669      	mov	r1, sp
   1ff2a:	4628      	mov	r0, r5
   1ff2c:	f7fe f870 	bl	1e010 <memcmp>
	return NULL;
   1ff30:	2800      	cmp	r0, #0
   1ff32:	bf18      	it	ne
   1ff34:	2400      	movne	r4, #0
   1ff36:	e7f0      	b.n	1ff1a <find_ccc_cfg+0x16>

0001ff38 <bt_gatt_attr_write_ccc>:
{
   1ff38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ff3c:	461f      	mov	r7, r3
   1ff3e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
   1ff42:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
   1ff46:	4604      	mov	r4, r0
   1ff48:	4688      	mov	r8, r1
	if (offset) {
   1ff4a:	2b00      	cmp	r3, #0
   1ff4c:	d13b      	bne.n	1ffc6 <bt_gatt_attr_write_ccc+0x8e>
	if (!len || len > sizeof(uint16_t)) {
   1ff4e:	1e7b      	subs	r3, r7, #1
   1ff50:	2b01      	cmp	r3, #1
   1ff52:	d83b      	bhi.n	1ffcc <bt_gatt_attr_write_ccc+0x94>
		value = *(uint8_t *)buf;
   1ff54:	7816      	ldrb	r6, [r2, #0]
	if (len < sizeof(uint16_t)) {
   1ff56:	2f01      	cmp	r7, #1
	cfg = find_ccc_cfg(conn, ccc);
   1ff58:	4649      	mov	r1, r9
   1ff5a:	bf14      	ite	ne
   1ff5c:	8816      	ldrhne	r6, [r2, #0]
		value = *(uint8_t *)buf;
   1ff5e:	b2b6      	uxtheq	r6, r6
	cfg = find_ccc_cfg(conn, ccc);
   1ff60:	f7ff ffd0 	bl	1ff04 <find_ccc_cfg>
	if (!cfg) {
   1ff64:	4605      	mov	r5, r0
   1ff66:	b980      	cbnz	r0, 1ff8a <bt_gatt_attr_write_ccc+0x52>
		if (!value) {
   1ff68:	b916      	cbnz	r6, 1ff70 <bt_gatt_attr_write_ccc+0x38>
			return len;
   1ff6a:	4638      	mov	r0, r7
}
   1ff6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   1ff70:	4649      	mov	r1, r9
   1ff72:	f7ff ffc7 	bl	1ff04 <find_ccc_cfg>
		if (!cfg) {
   1ff76:	4605      	mov	r5, r0
   1ff78:	b358      	cbz	r0, 1ffd2 <bt_gatt_attr_write_ccc+0x9a>
	memcpy(dst, src, sizeof(*dst));
   1ff7a:	2207      	movs	r2, #7
   1ff7c:	f104 0188 	add.w	r1, r4, #136	; 0x88
   1ff80:	3001      	adds	r0, #1
   1ff82:	f7fe f856 	bl	1e032 <memcpy>
		cfg->id = conn->id;
   1ff86:	7a23      	ldrb	r3, [r4, #8]
   1ff88:	702b      	strb	r3, [r5, #0]
	if (ccc->cfg_write) {
   1ff8a:	f8d9 3010 	ldr.w	r3, [r9, #16]
   1ff8e:	b973      	cbnz	r3, 1ffae <bt_gatt_attr_write_ccc+0x76>
	if (cfg->value != ccc->value) {
   1ff90:	f8b9 300a 	ldrh.w	r3, [r9, #10]
	cfg->value = value;
   1ff94:	812e      	strh	r6, [r5, #8]
	if (cfg->value != ccc->value) {
   1ff96:	42b3      	cmp	r3, r6
   1ff98:	d003      	beq.n	1ffa2 <bt_gatt_attr_write_ccc+0x6a>
		gatt_ccc_changed(attr, ccc);
   1ff9a:	4649      	mov	r1, r9
   1ff9c:	4640      	mov	r0, r8
   1ff9e:	f7ff fdd8 	bl	1fb52 <gatt_ccc_changed>
	if (!value) {
   1ffa2:	2e00      	cmp	r6, #0
   1ffa4:	d1e1      	bne.n	1ff6a <bt_gatt_attr_write_ccc+0x32>
		clear_ccc_cfg(cfg);
   1ffa6:	4628      	mov	r0, r5
   1ffa8:	f7ff ff9d 	bl	1fee6 <clear_ccc_cfg>
   1ffac:	e7dd      	b.n	1ff6a <bt_gatt_attr_write_ccc+0x32>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   1ffae:	4632      	mov	r2, r6
   1ffb0:	4641      	mov	r1, r8
   1ffb2:	4620      	mov	r0, r4
   1ffb4:	4798      	blx	r3
		if (write < 0) {
   1ffb6:	2800      	cmp	r0, #0
   1ffb8:	dbd8      	blt.n	1ff6c <bt_gatt_attr_write_ccc+0x34>
		if (write != sizeof(value) && write != 1) {
   1ffba:	1e44      	subs	r4, r0, #1
   1ffbc:	2c01      	cmp	r4, #1
   1ffbe:	d9e7      	bls.n	1ff90 <bt_gatt_attr_write_ccc+0x58>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   1ffc0:	f06f 000d 	mvn.w	r0, #13
   1ffc4:	e7d2      	b.n	1ff6c <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1ffc6:	f06f 0006 	mvn.w	r0, #6
   1ffca:	e7cf      	b.n	1ff6c <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1ffcc:	f06f 000c 	mvn.w	r0, #12
   1ffd0:	e7cc      	b.n	1ff6c <bt_gatt_attr_write_ccc+0x34>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1ffd2:	f06f 0010 	mvn.w	r0, #16
   1ffd6:	e7c9      	b.n	1ff6c <bt_gatt_attr_write_ccc+0x34>

0001ffd8 <bt_gatt_attr_read_ccc>:
{
   1ffd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   1ffda:	68c9      	ldr	r1, [r1, #12]
{
   1ffdc:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   1ffe0:	4615      	mov	r5, r2
   1ffe2:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   1ffe4:	f7ff ff8e 	bl	1ff04 <find_ccc_cfg>
	if (cfg) {
   1ffe8:	b100      	cbz	r0, 1ffec <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   1ffea:	8900      	ldrh	r0, [r0, #8]
   1ffec:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   1fff0:	2e02      	cmp	r6, #2
   1fff2:	d80e      	bhi.n	20012 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   1fff4:	f1c6 0402 	rsb	r4, r6, #2
   1fff8:	42bc      	cmp	r4, r7
   1fffa:	bfa8      	it	ge
   1fffc:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1fffe:	f10d 0306 	add.w	r3, sp, #6
   20002:	4622      	mov	r2, r4
   20004:	1999      	adds	r1, r3, r6
   20006:	4628      	mov	r0, r5
   20008:	f7fe f813 	bl	1e032 <memcpy>
}
   2000c:	4620      	mov	r0, r4
   2000e:	b003      	add	sp, #12
   20010:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   20012:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   20016:	e7f9      	b.n	2000c <bt_gatt_attr_read_ccc+0x34>

00020018 <sc_save>:
{
   20018:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2001c:	4680      	mov	r8, r0
   2001e:	460f      	mov	r7, r1
   20020:	4616      	mov	r6, r2
   20022:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   20024:	f7e9 f9f6 	bl	9414 <find_sc_cfg>
	if (!cfg) {
   20028:	4604      	mov	r4, r0
   2002a:	b968      	cbnz	r0, 20048 <sc_save+0x30>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   2002c:	4669      	mov	r1, sp
   2002e:	9000      	str	r0, [sp, #0]
   20030:	f8cd 0003 	str.w	r0, [sp, #3]
   20034:	f7e9 f9ee 	bl	9414 <find_sc_cfg>
		if (!cfg) {
   20038:	4604      	mov	r4, r0
   2003a:	b180      	cbz	r0, 2005e <sc_save+0x46>
		cfg->id = id;
   2003c:	f800 8b01 	strb.w	r8, [r0], #1
   20040:	2207      	movs	r2, #7
   20042:	4639      	mov	r1, r7
   20044:	f7fd fff5 	bl	1e032 <memcpy>
	if (!(cfg->data.start || cfg->data.end)) {
   20048:	8922      	ldrh	r2, [r4, #8]
   2004a:	8963      	ldrh	r3, [r4, #10]
   2004c:	b91a      	cbnz	r2, 20056 <sc_save+0x3e>
   2004e:	b923      	cbnz	r3, 2005a <sc_save+0x42>
		cfg->data.start = start;
   20050:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   20052:	8165      	strh	r5, [r4, #10]
   20054:	e003      	b.n	2005e <sc_save+0x46>
	if (new_start >= *start && new_end <= *end) {
   20056:	4296      	cmp	r6, r2
   20058:	d304      	bcc.n	20064 <sc_save+0x4c>
   2005a:	429d      	cmp	r5, r3
   2005c:	d8f9      	bhi.n	20052 <sc_save+0x3a>
}
   2005e:	b002      	add	sp, #8
   20060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*start = new_start;
   20064:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   20066:	e7f8      	b.n	2005a <sc_save+0x42>

00020068 <sc_clear>:
{
   20068:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2006a:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   2006e:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   20070:	4631      	mov	r1, r6
   20072:	7a00      	ldrb	r0, [r0, #8]
   20074:	f7fe fc59 	bl	1e92a <bt_addr_le_is_bonded>
   20078:	7a20      	ldrb	r0, [r4, #8]
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   2007a:	4631      	mov	r1, r6
   2007c:	f7e9 f9ca 	bl	9414 <find_sc_cfg>
	if (!cfg) {
   20080:	b128      	cbz	r0, 2008e <sc_clear+0x26>
}
   20082:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   20086:	220c      	movs	r2, #12
   20088:	2100      	movs	r1, #0
   2008a:	f7fd bfdd 	b.w	1e048 <memset>
}
   2008e:	bd70      	pop	{r4, r5, r6, pc}

00020090 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   20090:	2a02      	cmp	r2, #2
{
   20092:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   20094:	d108      	bne.n	200a8 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   20096:	2300      	movs	r3, #0
   20098:	f100 0188 	add.w	r1, r0, #136	; 0x88
   2009c:	461a      	mov	r2, r3
   2009e:	7a00      	ldrb	r0, [r0, #8]
   200a0:	f7ff ffba 	bl	20018 <sc_save>
}
   200a4:	2002      	movs	r0, #2
   200a6:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   200a8:	f7ff ffde 	bl	20068 <sc_clear>
   200ac:	e7fa      	b.n	200a4 <sc_ccc_cfg_write+0x14>

000200ae <sc_restore_rsp>:
{
   200ae:	b538      	push	{r3, r4, r5, lr}
   200b0:	4605      	mov	r5, r0
   200b2:	4614      	mov	r4, r2
	cfg = find_cf_cfg(conn);
   200b4:	f7e9 f91c 	bl	92f0 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   200b8:	b130      	cbz	r0, 200c8 <sc_restore_rsp+0x1a>
   200ba:	7a03      	ldrb	r3, [r0, #8]
   200bc:	07db      	lsls	r3, r3, #31
   200be:	d503      	bpl.n	200c8 <sc_restore_rsp+0x1a>
   200c0:	2101      	movs	r1, #1
   200c2:	300c      	adds	r0, #12
   200c4:	f7ff fdc1 	bl	1fc4a <atomic_or>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   200c8:	b964      	cbnz	r4, 200e4 <sc_restore_rsp+0x36>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   200ca:	7a28      	ldrb	r0, [r5, #8]
   200cc:	f105 0188 	add.w	r1, r5, #136	; 0x88
   200d0:	f7e9 f9a0 	bl	9414 <find_sc_cfg>
		if (sc_cfg) {
   200d4:	b130      	cbz	r0, 200e4 <sc_restore_rsp+0x36>
	memset(&cfg->data, 0, sizeof(cfg->data));
   200d6:	4621      	mov	r1, r4
   200d8:	2204      	movs	r2, #4
}
   200da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memset(&cfg->data, 0, sizeof(cfg->data));
   200de:	3008      	adds	r0, #8
   200e0:	f7fd bfb2 	b.w	1e048 <memset>
}
   200e4:	bd38      	pop	{r3, r4, r5, pc}

000200e6 <bt_gatt_attr_value_handle>:
{
   200e6:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   200e8:	4604      	mov	r4, r0
   200ea:	b910      	cbnz	r0, 200f2 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   200ec:	2000      	movs	r0, #0
}
   200ee:	b002      	add	sp, #8
   200f0:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   200f2:	2300      	movs	r3, #0
   200f4:	f88d 3004 	strb.w	r3, [sp, #4]
   200f8:	6800      	ldr	r0, [r0, #0]
   200fa:	f642 0303 	movw	r3, #10243	; 0x2803
   200fe:	a901      	add	r1, sp, #4
   20100:	f8ad 3006 	strh.w	r3, [sp, #6]
   20104:	f7fe f9be 	bl	1e484 <bt_uuid_cmp>
   20108:	2800      	cmp	r0, #0
   2010a:	d1ef      	bne.n	200ec <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   2010c:	68e3      	ldr	r3, [r4, #12]
   2010e:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   20110:	2800      	cmp	r0, #0
   20112:	d1ec      	bne.n	200ee <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   20114:	4620      	mov	r0, r4
   20116:	f7e9 faa5 	bl	9664 <bt_gatt_attr_get_handle>
   2011a:	3001      	adds	r0, #1
   2011c:	b280      	uxth	r0, r0
	return handle;
   2011e:	e7e6      	b.n	200ee <bt_gatt_attr_value_handle+0x8>

00020120 <bt_gatt_attr_read_chrc>:
{
   20120:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   20122:	68cf      	ldr	r7, [r1, #12]
{
   20124:	b087      	sub	sp, #28
   20126:	4608      	mov	r0, r1
   20128:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   2012a:	79bb      	ldrb	r3, [r7, #6]
   2012c:	f88d 3004 	strb.w	r3, [sp, #4]
{
   20130:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   20134:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   20136:	f7ff ffd6 	bl	200e6 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   2013a:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   2013c:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   20140:	780b      	ldrb	r3, [r1, #0]
   20142:	b99b      	cbnz	r3, 2016c <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   20144:	884b      	ldrh	r3, [r1, #2]
   20146:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   2014a:	2105      	movs	r1, #5
	if (offset > value_len) {
   2014c:	42b1      	cmp	r1, r6
   2014e:	d315      	bcc.n	2017c <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   20150:	1b89      	subs	r1, r1, r6
   20152:	42a1      	cmp	r1, r4
   20154:	bfa8      	it	ge
   20156:	4621      	movge	r1, r4
   20158:	b28c      	uxth	r4, r1
	memcpy(buf, (uint8_t *)value + offset, len);
   2015a:	ab01      	add	r3, sp, #4
   2015c:	4622      	mov	r2, r4
   2015e:	1999      	adds	r1, r3, r6
   20160:	4628      	mov	r0, r5
   20162:	f7fd ff66 	bl	1e032 <memcpy>
}
   20166:	4620      	mov	r0, r4
   20168:	b007      	add	sp, #28
   2016a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   2016c:	3101      	adds	r1, #1
   2016e:	2210      	movs	r2, #16
   20170:	f10d 0007 	add.w	r0, sp, #7
   20174:	f7fd ff5d 	bl	1e032 <memcpy>
		value_len += 16U;
   20178:	2113      	movs	r1, #19
   2017a:	e7e7      	b.n	2014c <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2017c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   20180:	e7f1      	b.n	20166 <bt_gatt_attr_read_chrc+0x46>

00020182 <bt_gatt_foreach_attr>:
{
   20182:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   20184:	e9cd 2301 	strd	r2, r3, [sp, #4]
   20188:	2300      	movs	r3, #0
   2018a:	9300      	str	r3, [sp, #0]
   2018c:	461a      	mov	r2, r3
   2018e:	f7e9 fa99 	bl	96c4 <bt_gatt_foreach_attr_type>
}
   20192:	b005      	add	sp, #20
   20194:	f85d fb04 	ldr.w	pc, [sp], #4

00020198 <db_hash_process>:
	db_hash_gen(true);
   20198:	f7e9 bbda 	b.w	9950 <db_hash_gen.constprop.0>

0002019c <bt_gatt_get_mtu>:
	return bt_att_get_mtu(conn);
   2019c:	f7ff bc55 	b.w	1fa4a <bt_att_get_mtu>

000201a0 <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   201a0:	07d3      	lsls	r3, r2, #31
{
   201a2:	b510      	push	{r4, lr}
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   201a4:	7c8c      	ldrb	r4, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   201a6:	d504      	bpl.n	201b2 <bt_gatt_check_perm+0x12>
   201a8:	f014 0f15 	tst.w	r4, #21
   201ac:	d017      	beq.n	201de <bt_gatt_check_perm+0x3e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   201ae:	684b      	ldr	r3, [r1, #4]
   201b0:	b1ab      	cbz	r3, 201de <bt_gatt_check_perm+0x3e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   201b2:	0793      	lsls	r3, r2, #30
   201b4:	d504      	bpl.n	201c0 <bt_gatt_check_perm+0x20>
   201b6:	f014 0f2a 	tst.w	r4, #42	; 0x2a
   201ba:	d012      	beq.n	201e2 <bt_gatt_check_perm+0x42>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   201bc:	688b      	ldr	r3, [r1, #8]
   201be:	b183      	cbz	r3, 201e2 <bt_gatt_check_perm+0x42>
	mask &= attr->perm;
   201c0:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   201c2:	f014 0f30 	tst.w	r4, #48	; 0x30
   201c6:	d104      	bne.n	201d2 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   201c8:	f014 000c 	ands.w	r0, r4, #12
   201cc:	bf18      	it	ne
   201ce:	200f      	movne	r0, #15
}
   201d0:	bd10      	pop	{r4, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   201d2:	f7fe fe9e 	bl	1ef12 <bt_conn_get_security>
   201d6:	2802      	cmp	r0, #2
   201d8:	d8f6      	bhi.n	201c8 <bt_gatt_check_perm+0x28>
			return BT_ATT_ERR_AUTHENTICATION;
   201da:	2005      	movs	r0, #5
   201dc:	e7f8      	b.n	201d0 <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   201de:	2002      	movs	r0, #2
   201e0:	e7f6      	b.n	201d0 <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   201e2:	2003      	movs	r0, #3
   201e4:	e7f4      	b.n	201d0 <bt_gatt_check_perm+0x30>

000201e6 <gatt_notify>:
{
   201e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   201ea:	4614      	mov	r4, r2
   201ec:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr,
   201ee:	2214      	movs	r2, #20
   201f0:	6861      	ldr	r1, [r4, #4]
{
   201f2:	4607      	mov	r7, r0
	if (bt_gatt_check_perm(conn, params->attr,
   201f4:	f7ff ffd4 	bl	201a0 <bt_gatt_check_perm>
   201f8:	bb08      	cbnz	r0, 2023e <gatt_notify+0x58>
				sizeof(*nfy) + params->len);
   201fa:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   201fc:	211b      	movs	r1, #27
   201fe:	3202      	adds	r2, #2
   20200:	4638      	mov	r0, r7
   20202:	f7ff fbaf 	bl	1f964 <bt_att_create_pdu>
	if (!buf) {
   20206:	4605      	mov	r5, r0
   20208:	b1e8      	cbz	r0, 20246 <gatt_notify+0x60>
   2020a:	f100 0908 	add.w	r9, r0, #8
   2020e:	2102      	movs	r1, #2
   20210:	4648      	mov	r0, r9
   20212:	f004 fd80 	bl	24d16 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   20216:	4606      	mov	r6, r0
   20218:	89a1      	ldrh	r1, [r4, #12]
   2021a:	f826 8b02 	strh.w	r8, [r6], #2
   2021e:	4648      	mov	r0, r9
   20220:	f004 fd79 	bl	24d16 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   20224:	89a2      	ldrh	r2, [r4, #12]
   20226:	68a1      	ldr	r1, [r4, #8]
   20228:	4630      	mov	r0, r6
   2022a:	f7fd ff02 	bl	1e032 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   2022e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   20232:	4629      	mov	r1, r5
   20234:	4638      	mov	r0, r7
}
   20236:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
   2023a:	f7ff bc2b 	b.w	1fa94 <bt_att_send>
		return -EPERM;
   2023e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   20242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOMEM;
   20246:	f06f 000b 	mvn.w	r0, #11
   2024a:	e7fa      	b.n	20242 <gatt_notify+0x5c>

0002024c <bt_gatt_change_aware>:
{
   2024c:	b510      	push	{r4, lr}
   2024e:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   20250:	f7e9 f84e 	bl	92f0 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   20254:	b910      	cbnz	r0, 2025c <bt_gatt_change_aware+0x10>
		return true;
   20256:	2401      	movs	r4, #1
}
   20258:	4620      	mov	r0, r4
   2025a:	bd10      	pop	{r4, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   2025c:	7a03      	ldrb	r3, [r0, #8]
   2025e:	07db      	lsls	r3, r3, #31
   20260:	d5f9      	bpl.n	20256 <bt_gatt_change_aware+0xa>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   20262:	f100 030c 	add.w	r3, r0, #12
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   20266:	4618      	mov	r0, r3
   20268:	f7ff fc94 	bl	1fb94 <atomic_get>
   2026c:	07c1      	lsls	r1, r0, #31
   2026e:	d4f2      	bmi.n	20256 <bt_gatt_change_aware+0xa>
	if (!req) {
   20270:	2c00      	cmp	r4, #0
   20272:	d0f1      	beq.n	20258 <bt_gatt_change_aware+0xc>
   20274:	4618      	mov	r0, r3
   20276:	f7ff fc8d 	bl	1fb94 <atomic_get>
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   2027a:	0782      	lsls	r2, r0, #30
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2027c:	f3c0 0440 	ubfx	r4, r0, #1, #1
   20280:	d508      	bpl.n	20294 <bt_gatt_change_aware+0x48>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   20282:	f06f 0102 	mvn.w	r1, #2
   20286:	4618      	mov	r0, r3
   20288:	f7ff fd5a 	bl	1fd40 <atomic_and.isra.0>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2028c:	2101      	movs	r1, #1
   2028e:	f7ff fcdc 	bl	1fc4a <atomic_or>
}
   20292:	e7e1      	b.n	20258 <bt_gatt_change_aware+0xc>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   20294:	2102      	movs	r1, #2
   20296:	4618      	mov	r0, r3
   20298:	e7f9      	b.n	2028e <bt_gatt_change_aware+0x42>

0002029a <bt_smp_recv>:
{
   2029a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   2029c:	2100      	movs	r1, #0
   2029e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   202a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	struct bt_conn *conn = chan->conn;
   202a6:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   202a8:	4608      	mov	r0, r1
   202aa:	f7fe feef 	bl	1f08c <bt_l2cap_create_pdu_timeout>
   202ae:	f100 0608 	add.w	r6, r0, #8
   202b2:	4604      	mov	r4, r0
   202b4:	2101      	movs	r1, #1
   202b6:	4630      	mov	r0, r6
   202b8:	f004 fd2d 	bl	24d16 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   202bc:	2505      	movs	r5, #5
   202be:	7005      	strb	r5, [r0, #0]
   202c0:	2101      	movs	r1, #1
   202c2:	4630      	mov	r0, r6
   202c4:	f004 fd27 	bl	24d16 <net_buf_simple_add>
   202c8:	2300      	movs	r3, #0
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   202ca:	7005      	strb	r5, [r0, #0]
   202cc:	4622      	mov	r2, r4
   202ce:	9300      	str	r3, [sp, #0]
   202d0:	2106      	movs	r1, #6
   202d2:	4638      	mov	r0, r7
   202d4:	f7fe fedd 	bl	1f092 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   202d8:	b110      	cbz	r0, 202e0 <bt_smp_recv+0x46>
		net_buf_unref(buf);
   202da:	4620      	mov	r0, r4
   202dc:	f7f6 fecc 	bl	17078 <net_buf_unref>
}
   202e0:	2000      	movs	r0, #0
   202e2:	b003      	add	sp, #12
   202e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000202e6 <bt_smp_sign>:
   202e6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   202ea:	4770      	bx	lr

000202ec <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   202ec:	2000      	movs	r0, #0
   202ee:	4770      	bx	lr

000202f0 <model_start>:
	if (mod->cb && mod->cb->start) {
   202f0:	6983      	ldr	r3, [r0, #24]
   202f2:	b113      	cbz	r3, 202fa <model_start+0xa>
   202f4:	685b      	ldr	r3, [r3, #4]
   202f6:	b103      	cbz	r3, 202fa <model_start+0xa>
		mod->cb->start(mod);
   202f8:	4718      	bx	r3
}
   202fa:	4770      	bx	lr

000202fc <bt_mesh_init>:
{
   202fc:	b538      	push	{r3, r4, r5, lr}
   202fe:	4605      	mov	r5, r0
	err = bt_mesh_comp_register(comp);
   20300:	4608      	mov	r0, r1
   20302:	f7ec febd 	bl	d080 <bt_mesh_comp_register>
	if (err) {
   20306:	4604      	mov	r4, r0
   20308:	b980      	cbnz	r0, 2032c <bt_mesh_init+0x30>
		err = bt_mesh_prov_init(prov);
   2030a:	4628      	mov	r0, r5
   2030c:	f7ee fa20 	bl	e750 <bt_mesh_prov_init>
		if (err) {
   20310:	4604      	mov	r4, r0
   20312:	b958      	cbnz	r0, 2032c <bt_mesh_init+0x30>
	bt_mesh_cfg_default_set();
   20314:	f7e9 ffa8 	bl	a268 <bt_mesh_cfg_default_set>
	bt_mesh_net_init();
   20318:	f7ea ff28 	bl	b16c <bt_mesh_net_init>
	bt_mesh_trans_init();
   2031c:	f7eb fdbc 	bl	be98 <bt_mesh_trans_init>
	bt_mesh_hb_init();
   20320:	f7ec fc04 	bl	cb2c <bt_mesh_hb_init>
	bt_mesh_beacon_init();
   20324:	f7ea f960 	bl	a5e8 <bt_mesh_beacon_init>
	bt_mesh_adv_init();
   20328:	f7ed face 	bl	d8c8 <bt_mesh_adv_init>
}
   2032c:	4620      	mov	r0, r4
   2032e:	bd38      	pop	{r3, r4, r5, pc}

00020330 <node_id_is_running>:
	return sub->node_id == BT_MESH_NODE_IDENTITY_RUNNING;
   20330:	7fc0      	ldrb	r0, [r0, #31]
}
   20332:	1e43      	subs	r3, r0, #1
   20334:	4258      	negs	r0, r3
   20336:	4158      	adcs	r0, r3
   20338:	4770      	bx	lr

0002033a <atomic_or.isra.0>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2033a:	f3bf 8f5b 	dmb	ish
   2033e:	e850 3f00 	ldrex	r3, [r0]
   20342:	430b      	orrs	r3, r1
   20344:	e840 3200 	strex	r2, r3, [r0]
   20348:	2a00      	cmp	r2, #0
   2034a:	d1f8      	bne.n	2033e <atomic_or.isra.0+0x4>
   2034c:	f3bf 8f5b 	dmb	ish
}
   20350:	4770      	bx	lr

00020352 <bt_mesh_friend_set>:
{
   20352:	b538      	push	{r3, r4, r5, lr}
	err = feature_set(BT_MESH_FRIEND, friendship);
   20354:	4601      	mov	r1, r0
{
   20356:	4605      	mov	r5, r0
	err = feature_set(BT_MESH_FRIEND, friendship);
   20358:	2009      	movs	r0, #9
   2035a:	f7e9 fe9b 	bl	a094 <feature_set>
	if (err) {
   2035e:	4604      	mov	r4, r0
   20360:	b928      	cbnz	r0, 2036e <bt_mesh_friend_set+0x1c>
	bt_mesh_hb_feature_changed(BT_MESH_FEAT_FRIEND);
   20362:	2004      	movs	r0, #4
   20364:	f7ec fbd6 	bl	cb14 <bt_mesh_hb_feature_changed>
	if (friendship == BT_MESH_FEATURE_DISABLED) {
   20368:	b90d      	cbnz	r5, 2036e <bt_mesh_friend_set+0x1c>
		bt_mesh_friends_clear();
   2036a:	f7ed fe09 	bl	df80 <bt_mesh_friends_clear>
}
   2036e:	4620      	mov	r0, r4
   20370:	bd38      	pop	{r3, r4, r5, pc}

00020372 <bt_mesh_fixed_group_match>:
	switch (addr) {
   20372:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
   20376:	38fc      	subs	r0, #252	; 0xfc
{
   20378:	b508      	push	{r3, lr}
	switch (addr) {
   2037a:	2803      	cmp	r0, #3
   2037c:	d803      	bhi.n	20386 <bt_mesh_fixed_group_match+0x14>
   2037e:	e8df f000 	tbb	[pc, r0]
   20382:	0a04      	.short	0x0a04
   20384:	100d      	.short	0x100d
   20386:	2000      	movs	r0, #0
}
   20388:	bd08      	pop	{r3, pc}
		return (bt_mesh_gatt_proxy_get() == BT_MESH_FEATURE_ENABLED);
   2038a:	f7e9 ff01 	bl	a190 <bt_mesh_gatt_proxy_get>
		return (bt_mesh_friend_get() == BT_MESH_FEATURE_ENABLED);
   2038e:	1e43      	subs	r3, r0, #1
   20390:	4258      	negs	r0, r3
   20392:	4158      	adcs	r0, r3
   20394:	e7f8      	b.n	20388 <bt_mesh_fixed_group_match+0x16>
   20396:	f7e9 ff1f 	bl	a1d8 <bt_mesh_friend_get>
   2039a:	e7f8      	b.n	2038e <bt_mesh_fixed_group_match+0x1c>
		return (bt_mesh_relay_get() == BT_MESH_FEATURE_ENABLED);
   2039c:	f7e9 ff52 	bl	a244 <bt_mesh_relay_get>
   203a0:	e7f5      	b.n	2038e <bt_mesh_fixed_group_match+0x1c>
		return true;
   203a2:	2001      	movs	r0, #1
   203a4:	e7f0      	b.n	20388 <bt_mesh_fixed_group_match+0x16>

000203a6 <adv_buf_destroy>:
{
   203a6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct bt_mesh_adv adv = *BT_MESH_ADV(buf);
   203a8:	6943      	ldr	r3, [r0, #20]
{
   203aa:	4604      	mov	r4, r0
	struct bt_mesh_adv adv = *BT_MESH_ADV(buf);
   203ac:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   203b0:	ab04      	add	r3, sp, #16
   203b2:	e903 0007 	stmdb	r3, {r0, r1, r2}
   203b6:	4605      	mov	r5, r0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   203b8:	79a0      	ldrb	r0, [r4, #6]
   203ba:	460e      	mov	r6, r1
   203bc:	f7f6 fd98 	bl	16ef0 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   203c0:	4621      	mov	r1, r4
   203c2:	f005 fb69 	bl	25a98 <k_queue_prepend>
}

static inline void bt_mesh_adv_send_end(
	int err, struct bt_mesh_adv const *adv)
{
	if (adv->started && adv->cb && adv->cb->end) {
   203c6:	f89d 300c 	ldrb.w	r3, [sp, #12]
   203ca:	075b      	lsls	r3, r3, #29
   203cc:	d508      	bpl.n	203e0 <adv_buf_destroy+0x3a>
   203ce:	b13d      	cbz	r5, 203e0 <adv_buf_destroy+0x3a>
   203d0:	686b      	ldr	r3, [r5, #4]
   203d2:	b12b      	cbz	r3, 203e0 <adv_buf_destroy+0x3a>
		adv->cb->end(err, adv->cb_data);
   203d4:	4631      	mov	r1, r6
   203d6:	2000      	movs	r0, #0
}
   203d8:	b004      	add	sp, #16
   203da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   203de:	4718      	bx	r3
   203e0:	b004      	add	sp, #16
   203e2:	bd70      	pop	{r4, r5, r6, pc}

000203e4 <bt_mesh_scan_cb>:
	if (adv_type != BT_GAP_ADV_TYPE_ADV_NONCONN_IND) {
   203e4:	2a03      	cmp	r2, #3
{
   203e6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   203ea:	4688      	mov	r8, r1
   203ec:	461c      	mov	r4, r3
	if (adv_type != BT_GAP_ADV_TYPE_ADV_NONCONN_IND) {
   203ee:	d010      	beq.n	20412 <bt_mesh_scan_cb+0x2e>
}
   203f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			bt_mesh_net_recv(buf, rssi, BT_MESH_NET_IF_ADV);
   203f4:	2200      	movs	r2, #0
   203f6:	4641      	mov	r1, r8
   203f8:	4620      	mov	r0, r4
   203fa:	f7ea fdb9 	bl	af70 <bt_mesh_net_recv>
	buf->data = buf->__buf + state->offset;
   203fe:	68a0      	ldr	r0, [r4, #8]
	buf->len = state->len;
   20400:	f8a4 9004 	strh.w	r9, [r4, #4]
	buf->data = buf->__buf + state->offset;
   20404:	fa10 f686 	uxtah	r6, r0, r6
   20408:	6026      	str	r6, [r4, #0]
		net_buf_simple_pull(buf, len);
   2040a:	4629      	mov	r1, r5
   2040c:	4620      	mov	r0, r4
   2040e:	f004 fcfd 	bl	24e0c <net_buf_simple_pull>
	while (buf->len > 1) {
   20412:	88a3      	ldrh	r3, [r4, #4]
   20414:	2b01      	cmp	r3, #1
   20416:	d9eb      	bls.n	203f0 <bt_mesh_scan_cb+0xc>
		len = net_buf_simple_pull_u8(buf);
   20418:	4620      	mov	r0, r4
   2041a:	f004 fd07 	bl	24e2c <net_buf_simple_pull_u8>
		if (len == 0U) {
   2041e:	4605      	mov	r5, r0
   20420:	2800      	cmp	r0, #0
   20422:	d0e5      	beq.n	203f0 <bt_mesh_scan_cb+0xc>
		if (len > buf->len) {
   20424:	88a3      	ldrh	r3, [r4, #4]
   20426:	b287      	uxth	r7, r0
   20428:	42bb      	cmp	r3, r7
   2042a:	d3e1      	bcc.n	203f0 <bt_mesh_scan_cb+0xc>
	state->offset = net_buf_simple_headroom(buf);
   2042c:	4620      	mov	r0, r4
   2042e:	f004 fd28 	bl	24e82 <net_buf_simple_headroom>
   20432:	4606      	mov	r6, r0
		type = net_buf_simple_pull_u8(buf);
   20434:	4620      	mov	r0, r4
	state->len = buf->len;
   20436:	f8b4 9004 	ldrh.w	r9, [r4, #4]
   2043a:	f004 fcf7 	bl	24e2c <net_buf_simple_pull_u8>
		buf->len = len - 1;
   2043e:	3f01      	subs	r7, #1
		switch (type) {
   20440:	282a      	cmp	r0, #42	; 0x2a
		buf->len = len - 1;
   20442:	80a7      	strh	r7, [r4, #4]
		switch (type) {
   20444:	d0d6      	beq.n	203f4 <bt_mesh_scan_cb+0x10>
   20446:	282b      	cmp	r0, #43	; 0x2b
   20448:	d005      	beq.n	20456 <bt_mesh_scan_cb+0x72>
   2044a:	2829      	cmp	r0, #41	; 0x29
   2044c:	d1d7      	bne.n	203fe <bt_mesh_scan_cb+0x1a>
			bt_mesh_pb_adv_recv(buf);
   2044e:	4620      	mov	r0, r4
   20450:	f7ee fdd0 	bl	eff4 <bt_mesh_pb_adv_recv>
			break;
   20454:	e7d3      	b.n	203fe <bt_mesh_scan_cb+0x1a>
			bt_mesh_beacon_recv(buf);
   20456:	4620      	mov	r0, r4
   20458:	f7ea f8ee 	bl	a638 <bt_mesh_beacon_recv>
			break;
   2045c:	e7cf      	b.n	203fe <bt_mesh_scan_cb+0x1a>

0002045e <bt_mesh_adv_gatt_send>:
{
   2045e:	b508      	push	{r3, lr}
	if (bt_mesh_is_provisioned()) {
   20460:	f7e9 fd9a 	bl	9f98 <bt_mesh_is_provisioned>
   20464:	b118      	cbz	r0, 2046e <bt_mesh_adv_gatt_send+0x10>
}
   20466:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			return bt_mesh_proxy_adv_start();
   2046a:	f7ef baa9 	b.w	f9c0 <bt_mesh_proxy_adv_start>
}
   2046e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		return bt_mesh_pb_gatt_adv_start();
   20472:	f7ee bfaf 	b.w	f3d4 <bt_mesh_pb_gatt_adv_start>

00020476 <bt_mesh_scan_disable>:

int bt_mesh_scan_disable(void)
{
   20476:	b508      	push	{r3, lr}
	int err;

	BT_DBG("");

	err = bt_le_scan_stop();
   20478:	f7e7 fbd2 	bl	7c20 <bt_le_scan_stop>
	if (err && err != -EALREADY) {
   2047c:	b118      	cbz	r0, 20486 <bt_mesh_scan_disable+0x10>
		BT_ERR("stopping scan failed (err %d)", err);
		return err;
	}

	return 0;
   2047e:	f110 0f78 	cmn.w	r0, #120	; 0x78
   20482:	bf08      	it	eq
   20484:	2000      	moveq	r0, #0
}
   20486:	bd08      	pop	{r3, pc}

00020488 <sub_update_beacon_observation>:
	sub->beacons_last = sub->beacons_cur;
   20488:	7943      	ldrb	r3, [r0, #5]
   2048a:	7103      	strb	r3, [r0, #4]
	sub->beacons_cur = 0U;
   2048c:	2300      	movs	r3, #0
   2048e:	7143      	strb	r3, [r0, #5]
}
   20490:	4770      	bx	lr

00020492 <beacon_cache_match>:
{
   20492:	b508      	push	{r3, lr}
	return !memcmp(sub->beacon_cache, beacon_data, 21);
   20494:	2215      	movs	r2, #21
   20496:	3006      	adds	r0, #6
   20498:	f7fd fdba 	bl	1e010 <memcmp>
}
   2049c:	fab0 f080 	clz	r0, r0
   204a0:	0940      	lsrs	r0, r0, #5
   204a2:	bd08      	pop	{r3, pc}

000204a4 <subnet_by_id>:
{
   204a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   204a8:	b085      	sub	sp, #20
   204aa:	460d      	mov	r5, r1
	for (int i = 0; i < ARRAY_SIZE(sub->keys); i++) {
   204ac:	f100 0476 	add.w	r4, r0, #118	; 0x76
   204b0:	2700      	movs	r7, #0
	bt_mesh_beacon_auth(keys->beacon, params->flags, keys->net_id,
   204b2:	f10d 0808 	add.w	r8, sp, #8
		if (sub->keys[i].valid && auth_match(&sub->keys[i], params)) {
   204b6:	f814 6c4a 	ldrb.w	r6, [r4, #-74]
   204ba:	b1e6      	cbz	r6, 204f6 <subnet_by_id+0x52>
	if (memcmp(params->net_id, keys->net_id, 8)) {
   204bc:	f1a4 0918 	sub.w	r9, r4, #24
   204c0:	6828      	ldr	r0, [r5, #0]
   204c2:	2208      	movs	r2, #8
   204c4:	4649      	mov	r1, r9
   204c6:	f7fd fda3 	bl	1e010 <memcmp>
   204ca:	b9a0      	cbnz	r0, 204f6 <subnet_by_id+0x52>
	bt_mesh_beacon_auth(keys->beacon, params->flags, keys->net_id,
   204cc:	7b29      	ldrb	r1, [r5, #12]
   204ce:	68ab      	ldr	r3, [r5, #8]
   204d0:	f8cd 8000 	str.w	r8, [sp]
   204d4:	464a      	mov	r2, r9
   204d6:	4620      	mov	r0, r4
   204d8:	f000 fe02 	bl	210e0 <bt_mesh_beacon_auth>
	if (memcmp(params->auth, net_auth, 8)) {
   204dc:	6868      	ldr	r0, [r5, #4]
   204de:	2208      	movs	r2, #8
   204e0:	4641      	mov	r1, r8
   204e2:	f7fd fd95 	bl	1e010 <memcmp>
   204e6:	b930      	cbnz	r0, 204f6 <subnet_by_id+0x52>
			params->new_key = (i > 0);
   204e8:	736f      	strb	r7, [r5, #13]
}
   204ea:	4630      	mov	r0, r6
   204ec:	b005      	add	sp, #20
   204ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   204f2:	2701      	movs	r7, #1
   204f4:	e7df      	b.n	204b6 <subnet_by_id+0x12>
	for (int i = 0; i < ARRAY_SIZE(sub->keys); i++) {
   204f6:	345a      	adds	r4, #90	; 0x5a
   204f8:	2f00      	cmp	r7, #0
   204fa:	d0fa      	beq.n	204f2 <subnet_by_id+0x4e>
	return false;
   204fc:	2600      	movs	r6, #0
   204fe:	e7f4      	b.n	204ea <subnet_by_id+0x46>

00020500 <beacon_complete>:
{
   20500:	b510      	push	{r4, lr}
   20502:	460c      	mov	r4, r1
	return z_impl_k_uptime_ticks();
   20504:	f005 fd52 	bl	25fac <z_impl_k_uptime_ticks>
   20508:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2050c:	fba0 0302 	umull	r0, r3, r0, r2
   20510:	fb02 3301 	mla	r3, r2, r1, r3
   20514:	0bc0      	lsrs	r0, r0, #15
   20516:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return (uint32_t)k_uptime_get();
   2051a:	6020      	str	r0, [r4, #0]
}
   2051c:	bd10      	pop	{r4, pc}

0002051e <subnet_evt>:
	if (evt != BT_MESH_KEY_DELETED) {
   2051e:	2901      	cmp	r1, #1
   20520:	d001      	beq.n	20526 <subnet_evt+0x8>
		bt_mesh_beacon_update(sub);
   20522:	f7ea b845 	b.w	a5b0 <bt_mesh_beacon_update>
}
   20526:	4770      	bx	lr

00020528 <subnet_beacon_enable>:
	sub->beacons_last = 0U;
   20528:	2200      	movs	r2, #0
   2052a:	8082      	strh	r2, [r0, #4]
	bt_mesh_beacon_update(sub);
   2052c:	f7ea b840 	b.w	a5b0 <bt_mesh_beacon_update>

00020530 <sys_get_be24>:
	return ((uint32_t)src[0] << 16) | sys_get_be16(&src[1]);
   20530:	f8b0 3001 	ldrh.w	r3, [r0, #1]
   20534:	7802      	ldrb	r2, [r0, #0]
   20536:	ba5b      	rev16	r3, r3
   20538:	b29b      	uxth	r3, r3
}
   2053a:	ea43 4002 	orr.w	r0, r3, r2, lsl #16
   2053e:	4770      	bx	lr

00020540 <net_encrypt>:
{
   20540:	b570      	push	{r4, r5, r6, lr}
   20542:	460d      	mov	r5, r1
   20544:	4604      	mov	r4, r0
	err = bt_mesh_net_encrypt(cred->enc, buf, iv_index, proxy);
   20546:	4601      	mov	r1, r0
   20548:	1c68      	adds	r0, r5, #1
{
   2054a:	4616      	mov	r6, r2
	err = bt_mesh_net_encrypt(cred->enc, buf, iv_index, proxy);
   2054c:	f000 fce4 	bl	20f18 <bt_mesh_net_encrypt>
	if (err) {
   20550:	b938      	cbnz	r0, 20562 <net_encrypt+0x22>
	return bt_mesh_net_obfuscate(buf->data, iv_index, cred->privacy);
   20552:	6820      	ldr	r0, [r4, #0]
   20554:	f105 0211 	add.w	r2, r5, #17
   20558:	4631      	mov	r1, r6
}
   2055a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_mesh_net_obfuscate(buf->data, iv_index, cred->privacy);
   2055e:	f7ec bbd3 	b.w	cd08 <bt_mesh_net_obfuscate>
}
   20562:	bd70      	pop	{r4, r5, r6, pc}

00020564 <key_refresh>:
{
   20564:	b538      	push	{r3, r4, r5, lr}
   20566:	4604      	mov	r4, r0
	switch (new_phase) {
   20568:	2903      	cmp	r1, #3
   2056a:	d81e      	bhi.n	205aa <key_refresh+0x46>
   2056c:	e8df f001 	tbb	[pc, r1]
   20570:	0e0a0210 	.word	0x0e0a0210
		sub->kr_phase = new_phase;
   20574:	2301      	movs	r3, #1
   20576:	7783      	strb	r3, [r0, #30]
		subnet_evt(sub, BT_MESH_KEY_UPDATED);
   20578:	2102      	movs	r1, #2
		subnet_evt(sub, BT_MESH_KEY_REVOKED);
   2057a:	4620      	mov	r0, r4
}
   2057c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		subnet_evt(sub, BT_MESH_KEY_REVOKED);
   20580:	f7ea be08 	b.w	b194 <subnet_evt>
		sub->kr_phase = new_phase;
   20584:	2302      	movs	r3, #2
   20586:	7783      	strb	r3, [r0, #30]
		subnet_evt(sub, BT_MESH_KEY_SWAPPED);
   20588:	2103      	movs	r1, #3
   2058a:	e7f6      	b.n	2057a <key_refresh+0x16>
		if (sub->kr_phase == BT_MESH_KR_NORMAL) {
   2058c:	7f83      	ldrb	r3, [r0, #30]
   2058e:	b163      	cbz	r3, 205aa <key_refresh+0x46>
		sub->kr_phase = BT_MESH_KR_NORMAL;
   20590:	2500      	movs	r5, #0
		memcpy(&sub->keys[0], &sub->keys[1], sizeof(sub->keys[0]));
   20592:	f104 0186 	add.w	r1, r4, #134	; 0x86
		sub->kr_phase = BT_MESH_KR_NORMAL;
   20596:	77a5      	strb	r5, [r4, #30]
		memcpy(&sub->keys[0], &sub->keys[1], sizeof(sub->keys[0]));
   20598:	225a      	movs	r2, #90	; 0x5a
   2059a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   2059e:	f7fd fd48 	bl	1e032 <memcpy>
		sub->keys[1].valid = 0U;
   205a2:	f884 5086 	strb.w	r5, [r4, #134]	; 0x86
		subnet_evt(sub, BT_MESH_KEY_REVOKED);
   205a6:	2104      	movs	r1, #4
   205a8:	e7e7      	b.n	2057a <key_refresh+0x16>
}
   205aa:	bd38      	pop	{r3, r4, r5, pc}

000205ac <subnet_del>:
{
   205ac:	b510      	push	{r4, lr}
   205ae:	4604      	mov	r4, r0
	bt_mesh_net_loopback_clear(sub->net_idx);
   205b0:	8b80      	ldrh	r0, [r0, #28]
   205b2:	f7ea fbf3 	bl	ad9c <bt_mesh_net_loopback_clear>
	subnet_evt(sub, BT_MESH_KEY_DELETED);
   205b6:	2101      	movs	r1, #1
   205b8:	4620      	mov	r0, r4
   205ba:	f7ea fdeb 	bl	b194 <subnet_evt>
	(void)memset(sub, 0, sizeof(*sub));
   205be:	22e0      	movs	r2, #224	; 0xe0
   205c0:	2100      	movs	r1, #0
   205c2:	4620      	mov	r0, r4
   205c4:	f7fd fd40 	bl	1e048 <memset>
	sub->net_idx = BT_MESH_KEY_UNUSED;
   205c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   205cc:	83a3      	strh	r3, [r4, #28]
}
   205ce:	bd10      	pop	{r4, pc}

000205d0 <bt_mesh_kr_update>:
	if (!new_key) {
   205d0:	b16a      	cbz	r2, 205ee <bt_mesh_kr_update+0x1e>
	if (sub->kr_phase == BT_MESH_KR_PHASE_1) {
   205d2:	7f83      	ldrb	r3, [r0, #30]
   205d4:	2b01      	cmp	r3, #1
   205d6:	d105      	bne.n	205e4 <bt_mesh_kr_update+0x14>
		key_refresh(sub, (kr_flag ? BT_MESH_KR_PHASE_2 :
   205d8:	2900      	cmp	r1, #0
   205da:	bf14      	ite	ne
   205dc:	2102      	movne	r1, #2
   205de:	2103      	moveq	r1, #3
		key_refresh(sub, BT_MESH_KR_PHASE_3);
   205e0:	f7ff bfc0 	b.w	20564 <key_refresh>
	} else if (sub->kr_phase == BT_MESH_KR_PHASE_2 && !kr_flag) {
   205e4:	2b02      	cmp	r3, #2
   205e6:	d102      	bne.n	205ee <bt_mesh_kr_update+0x1e>
   205e8:	b909      	cbnz	r1, 205ee <bt_mesh_kr_update+0x1e>
		key_refresh(sub, BT_MESH_KR_PHASE_3);
   205ea:	2103      	movs	r1, #3
   205ec:	e7f8      	b.n	205e0 <bt_mesh_kr_update+0x10>
}
   205ee:	4770      	bx	lr

000205f0 <bt_mesh_subnet_add>:
{
   205f0:	b570      	push	{r4, r5, r6, lr}
   205f2:	4606      	mov	r6, r0
   205f4:	460c      	mov	r4, r1
	sub = subnet_alloc(net_idx);
   205f6:	f7ea fddf 	bl	b1b8 <subnet_alloc>
	if (!sub) {
   205fa:	4605      	mov	r5, r0
   205fc:	b1d8      	cbz	r0, 20636 <bt_mesh_subnet_add+0x46>
	if (sub->net_idx == net_idx) {
   205fe:	8b83      	ldrh	r3, [r0, #28]
   20600:	42b3      	cmp	r3, r6
   20602:	d10a      	bne.n	2061a <bt_mesh_subnet_add+0x2a>
		if (memcmp(key, sub->keys[0].net, 16)) {
   20604:	f100 012d 	add.w	r1, r0, #45	; 0x2d
   20608:	2210      	movs	r2, #16
   2060a:	4620      	mov	r0, r4
   2060c:	f7fd fd00 	bl	1e010 <memcmp>
		return STATUS_SUCCESS;
   20610:	2800      	cmp	r0, #0
   20612:	bf14      	ite	ne
   20614:	2006      	movne	r0, #6
   20616:	2000      	moveq	r0, #0
}
   20618:	bd70      	pop	{r4, r5, r6, pc}
	err = net_keys_create(&sub->keys[0], key);
   2061a:	4621      	mov	r1, r4
   2061c:	302c      	adds	r0, #44	; 0x2c
   2061e:	f7ea fdeb 	bl	b1f8 <net_keys_create>
	if (err) {
   20622:	4604      	mov	r4, r0
   20624:	b948      	cbnz	r0, 2063a <bt_mesh_subnet_add+0x4a>
	sub->kr_phase = BT_MESH_KR_NORMAL;
   20626:	83e8      	strh	r0, [r5, #30]
	subnet_evt(sub, BT_MESH_KEY_ADDED);
   20628:	4601      	mov	r1, r0
	sub->net_idx = net_idx;
   2062a:	83ae      	strh	r6, [r5, #28]
	subnet_evt(sub, BT_MESH_KEY_ADDED);
   2062c:	4628      	mov	r0, r5
   2062e:	f7ea fdb1 	bl	b194 <subnet_evt>
	return STATUS_SUCCESS;
   20632:	4620      	mov	r0, r4
   20634:	e7f0      	b.n	20618 <bt_mesh_subnet_add+0x28>
		return STATUS_INSUFF_RESOURCES;
   20636:	2005      	movs	r0, #5
   20638:	e7ee      	b.n	20618 <bt_mesh_subnet_add+0x28>
		return STATUS_UNSPECIFIED;
   2063a:	2010      	movs	r0, #16
   2063c:	e7ec      	b.n	20618 <bt_mesh_subnet_add+0x28>

0002063e <bt_mesh_friend_cred_create>:
{
   2063e:	b530      	push	{r4, r5, lr}
   20640:	b087      	sub	sp, #28
	p[0] = 0x01;
   20642:	2501      	movs	r5, #1
{
   20644:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
	p[0] = 0x01;
   20648:	f88d 500c 	strb.w	r5, [sp, #12]
	dst[1] = val;
   2064c:	f88d 100e 	strb.w	r1, [sp, #14]
	dst[0] = val >> 8;
   20650:	0a0d      	lsrs	r5, r1, #8
	dst[1] = val;
   20652:	f88d 2010 	strb.w	r2, [sp, #16]
	dst[0] = val >> 8;
   20656:	0a11      	lsrs	r1, r2, #8
	dst[1] = val;
   20658:	f88d 3012 	strb.w	r3, [sp, #18]
	dst[0] = val >> 8;
   2065c:	0a1a      	lsrs	r2, r3, #8
   2065e:	0a23      	lsrs	r3, r4, #8
   20660:	f88d 3013 	strb.w	r3, [sp, #19]
	return bt_mesh_k2(key, p, p_len, &cred->nid, cred->enc, cred->privacy);
   20664:	f100 0311 	add.w	r3, r0, #17
   20668:	9301      	str	r3, [sp, #4]
   2066a:	1c43      	adds	r3, r0, #1
   2066c:	f88d 100f 	strb.w	r1, [sp, #15]
   20670:	f88d 2011 	strb.w	r2, [sp, #17]
   20674:	9300      	str	r3, [sp, #0]
   20676:	2209      	movs	r2, #9
   20678:	4603      	mov	r3, r0
   2067a:	a903      	add	r1, sp, #12
   2067c:	980b      	ldr	r0, [sp, #44]	; 0x2c
   2067e:	f88d 500d 	strb.w	r5, [sp, #13]
	dst[1] = val;
   20682:	f88d 4014 	strb.w	r4, [sp, #20]
   20686:	f7ec fa7b 	bl	cb80 <bt_mesh_k2>
}
   2068a:	b007      	add	sp, #28
   2068c:	bd30      	pop	{r4, r5, pc}

0002068e <bt_mesh_subnet_exists>:
{
   2068e:	b508      	push	{r3, lr}
	return !!bt_mesh_subnet_get(net_idx);
   20690:	f7ea fe1e 	bl	b2d0 <bt_mesh_subnet_get>
}
   20694:	3800      	subs	r0, #0
   20696:	bf18      	it	ne
   20698:	2001      	movne	r0, #1
   2069a:	bd08      	pop	{r3, pc}

0002069c <bt_mesh_subnet_update>:
{
   2069c:	b538      	push	{r3, r4, r5, lr}
	sub = bt_mesh_subnet_get(net_idx);
   2069e:	f7ea fe17 	bl	b2d0 <bt_mesh_subnet_get>
{
   206a2:	460c      	mov	r4, r1
	if (!sub) {
   206a4:	4605      	mov	r5, r0
   206a6:	b340      	cbz	r0, 206fa <bt_mesh_subnet_update+0x5e>
	switch (sub->kr_phase) {
   206a8:	7f83      	ldrb	r3, [r0, #30]
   206aa:	2b01      	cmp	r3, #1
   206ac:	d00e      	beq.n	206cc <bt_mesh_subnet_update+0x30>
   206ae:	d904      	bls.n	206ba <bt_mesh_subnet_update+0x1e>
   206b0:	3b02      	subs	r3, #2
   206b2:	2b01      	cmp	r3, #1
   206b4:	d813      	bhi.n	206de <bt_mesh_subnet_update+0x42>
		return STATUS_CANNOT_UPDATE;
   206b6:	200b      	movs	r0, #11
   206b8:	e010      	b.n	206dc <bt_mesh_subnet_update+0x40>
		if (!memcmp(key, sub->keys[0].net, 16)) {
   206ba:	f100 012d 	add.w	r1, r0, #45	; 0x2d
   206be:	2210      	movs	r2, #16
   206c0:	4620      	mov	r0, r4
   206c2:	f7fd fca5 	bl	1e010 <memcmp>
   206c6:	b950      	cbnz	r0, 206de <bt_mesh_subnet_update+0x42>
			return STATUS_IDX_ALREADY_STORED;
   206c8:	2006      	movs	r0, #6
   206ca:	e007      	b.n	206dc <bt_mesh_subnet_update+0x40>
		if (!memcmp(key, sub->keys[1].net, 16)) {
   206cc:	f100 0187 	add.w	r1, r0, #135	; 0x87
   206d0:	2210      	movs	r2, #16
   206d2:	4620      	mov	r0, r4
   206d4:	f7fd fc9c 	bl	1e010 <memcmp>
   206d8:	2800      	cmp	r0, #0
   206da:	d1ec      	bne.n	206b6 <bt_mesh_subnet_update+0x1a>
}
   206dc:	bd38      	pop	{r3, r4, r5, pc}
	err = net_keys_create(&sub->keys[1], key);
   206de:	4621      	mov	r1, r4
   206e0:	f105 0086 	add.w	r0, r5, #134	; 0x86
   206e4:	f7ea fd88 	bl	b1f8 <net_keys_create>
	if (err) {
   206e8:	4604      	mov	r4, r0
   206ea:	2800      	cmp	r0, #0
   206ec:	d1e3      	bne.n	206b6 <bt_mesh_subnet_update+0x1a>
	key_refresh(sub, BT_MESH_KR_PHASE_1);
   206ee:	4628      	mov	r0, r5
   206f0:	2101      	movs	r1, #1
   206f2:	f7ff ff37 	bl	20564 <key_refresh>
	return STATUS_SUCCESS;
   206f6:	4620      	mov	r0, r4
   206f8:	e7f0      	b.n	206dc <bt_mesh_subnet_update+0x40>
		return STATUS_INVALID_NETKEY;
   206fa:	2004      	movs	r0, #4
   206fc:	e7ee      	b.n	206dc <bt_mesh_subnet_update+0x40>

000206fe <bt_mesh_subnet_del>:
{
   206fe:	b508      	push	{r3, lr}
	sub = bt_mesh_subnet_get(net_idx);
   20700:	f7ea fde6 	bl	b2d0 <bt_mesh_subnet_get>
	if (!sub) {
   20704:	b118      	cbz	r0, 2070e <bt_mesh_subnet_del+0x10>
	subnet_del(sub);
   20706:	f7ff ff51 	bl	205ac <subnet_del>
	return STATUS_SUCCESS;
   2070a:	2000      	movs	r0, #0
}
   2070c:	bd08      	pop	{r3, pc}
		return STATUS_INVALID_NETKEY;
   2070e:	2004      	movs	r0, #4
   20710:	e7fc      	b.n	2070c <bt_mesh_subnet_del+0xe>

00020712 <bt_mesh_subnet_kr_phase_get>:
{
   20712:	b508      	push	{r3, lr}
	sub = bt_mesh_subnet_get(net_idx);
   20714:	f7ea fddc 	bl	b2d0 <bt_mesh_subnet_get>
	if (!sub) {
   20718:	b118      	cbz	r0, 20722 <bt_mesh_subnet_kr_phase_get+0x10>
	*phase = sub->kr_phase;
   2071a:	7f83      	ldrb	r3, [r0, #30]
	return STATUS_SUCCESS;
   2071c:	2000      	movs	r0, #0
   2071e:	700b      	strb	r3, [r1, #0]
}
   20720:	bd08      	pop	{r3, pc}
		*phase = BT_MESH_KR_NORMAL;
   20722:	4603      	mov	r3, r0
		return STATUS_INVALID_NETKEY;
   20724:	2004      	movs	r0, #4
   20726:	e7fa      	b.n	2071e <bt_mesh_subnet_kr_phase_get+0xc>

00020728 <bt_mesh_subnet_node_id_set>:
	if (node_id == BT_MESH_FEATURE_NOT_SUPPORTED) {
   20728:	2902      	cmp	r1, #2
{
   2072a:	b508      	push	{r3, lr}
	if (node_id == BT_MESH_FEATURE_NOT_SUPPORTED) {
   2072c:	d00c      	beq.n	20748 <bt_mesh_subnet_node_id_set+0x20>
	sub = bt_mesh_subnet_get(net_idx);
   2072e:	f7ea fdcf 	bl	b2d0 <bt_mesh_subnet_get>
	if (!sub) {
   20732:	b158      	cbz	r0, 2074c <bt_mesh_subnet_node_id_set+0x24>
	if (node_id) {
   20734:	b129      	cbz	r1, 20742 <bt_mesh_subnet_node_id_set+0x1a>
		bt_mesh_proxy_identity_start(sub);
   20736:	f7ef f827 	bl	f788 <bt_mesh_proxy_identity_start>
	bt_mesh_adv_gatt_update();
   2073a:	f002 fb92 	bl	22e62 <bt_mesh_adv_gatt_update>
	return STATUS_SUCCESS;
   2073e:	2000      	movs	r0, #0
}
   20740:	bd08      	pop	{r3, pc}
		bt_mesh_proxy_identity_stop(sub);
   20742:	f7ef f82b 	bl	f79c <bt_mesh_proxy_identity_stop>
   20746:	e7f8      	b.n	2073a <bt_mesh_subnet_node_id_set+0x12>
		return STATUS_CANNOT_SET;
   20748:	200f      	movs	r0, #15
   2074a:	e7f9      	b.n	20740 <bt_mesh_subnet_node_id_set+0x18>
		return STATUS_INVALID_NETKEY;
   2074c:	2004      	movs	r0, #4
   2074e:	e7f7      	b.n	20740 <bt_mesh_subnet_node_id_set+0x18>

00020750 <bt_mesh_subnet_node_id_get>:
{
   20750:	b508      	push	{r3, lr}
	sub = bt_mesh_subnet_get(net_idx);
   20752:	f7ea fdbd 	bl	b2d0 <bt_mesh_subnet_get>
	if (!sub) {
   20756:	b118      	cbz	r0, 20760 <bt_mesh_subnet_node_id_get+0x10>
	*node_id = sub->node_id;
   20758:	7fc3      	ldrb	r3, [r0, #31]
	return STATUS_SUCCESS;
   2075a:	2000      	movs	r0, #0
   2075c:	700b      	strb	r3, [r1, #0]
}
   2075e:	bd08      	pop	{r3, pc}
		*node_id = 0x00;
   20760:	4603      	mov	r3, r0
		return STATUS_INVALID_NETKEY;
   20762:	2004      	movs	r0, #4
   20764:	e7fa      	b.n	2075c <bt_mesh_subnet_node_id_get+0xc>

00020766 <bt_mesh_subnet_set>:
{
   20766:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2076a:	4606      	mov	r6, r0
   2076c:	4688      	mov	r8, r1
   2076e:	4617      	mov	r7, r2
   20770:	461d      	mov	r5, r3
	sub = subnet_alloc(net_idx);
   20772:	f7ea fd21 	bl	b1b8 <subnet_alloc>
	if (!sub) {
   20776:	4604      	mov	r4, r0
   20778:	b300      	cbz	r0, 207bc <bt_mesh_subnet_set+0x56>
	if (sub->net_idx == net_idx) {
   2077a:	8b83      	ldrh	r3, [r0, #28]
   2077c:	42b3      	cmp	r3, r6
   2077e:	d020      	beq.n	207c2 <bt_mesh_subnet_set+0x5c>
		if (!keys[i]) {
   20780:	b957      	cbnz	r7, 20798 <bt_mesh_subnet_set+0x32>
   20782:	b99d      	cbnz	r5, 207ac <bt_mesh_subnet_set+0x46>
		sub->node_id = BT_MESH_NODE_IDENTITY_STOPPED;
   20784:	2500      	movs	r5, #0
	bt_mesh_beacon_update(sub);
   20786:	4620      	mov	r0, r4
	sub->net_idx = net_idx;
   20788:	83a6      	strh	r6, [r4, #28]
	sub->kr_phase = kr_phase;
   2078a:	f884 801e 	strb.w	r8, [r4, #30]
		sub->node_id = BT_MESH_NODE_IDENTITY_STOPPED;
   2078e:	77e5      	strb	r5, [r4, #31]
	bt_mesh_beacon_update(sub);
   20790:	f7e9 ff0e 	bl	a5b0 <bt_mesh_beacon_update>
	return 0;
   20794:	4628      	mov	r0, r5
   20796:	e007      	b.n	207a8 <bt_mesh_subnet_set+0x42>
		if (net_keys_create(&sub->keys[i], keys[i])) {
   20798:	4639      	mov	r1, r7
   2079a:	302c      	adds	r0, #44	; 0x2c
   2079c:	f7ea fd2c 	bl	b1f8 <net_keys_create>
   207a0:	2800      	cmp	r0, #0
   207a2:	d0ee      	beq.n	20782 <bt_mesh_subnet_set+0x1c>
			return -EIO;
   207a4:	f06f 0004 	mvn.w	r0, #4
}
   207a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (net_keys_create(&sub->keys[i], keys[i])) {
   207ac:	4629      	mov	r1, r5
   207ae:	f104 0086 	add.w	r0, r4, #134	; 0x86
   207b2:	f7ea fd21 	bl	b1f8 <net_keys_create>
   207b6:	2800      	cmp	r0, #0
   207b8:	d0e4      	beq.n	20784 <bt_mesh_subnet_set+0x1e>
   207ba:	e7f3      	b.n	207a4 <bt_mesh_subnet_set+0x3e>
		return -ENOMEM;
   207bc:	f06f 000b 	mvn.w	r0, #11
   207c0:	e7f2      	b.n	207a8 <bt_mesh_subnet_set+0x42>
		return -EALREADY;
   207c2:	f06f 0077 	mvn.w	r0, #119	; 0x77
   207c6:	e7ef      	b.n	207a8 <bt_mesh_subnet_set+0x42>

000207c8 <app_key_del>:
{
   207c8:	b510      	push	{r4, lr}
	app_key_evt(app, BT_MESH_KEY_DELETED);
   207ca:	2101      	movs	r1, #1
{
   207cc:	4604      	mov	r4, r0
	app_key_evt(app, BT_MESH_KEY_DELETED);
   207ce:	f7ea feab 	bl	b528 <app_key_evt>
	app->net_idx = BT_MESH_KEY_UNUSED;
   207d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   207d6:	8023      	strh	r3, [r4, #0]
	app->app_idx = BT_MESH_KEY_UNUSED;
   207d8:	8063      	strh	r3, [r4, #2]
	(void)memset(app->keys, 0, sizeof(app->keys));
   207da:	1d60      	adds	r0, r4, #5
   207dc:	2222      	movs	r2, #34	; 0x22
}
   207de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)memset(app->keys, 0, sizeof(app->keys));
   207e2:	2100      	movs	r1, #0
   207e4:	f7fd bc30 	b.w	1e048 <memset>

000207e8 <bt_mesh_app_key_add>:
{
   207e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   207ec:	4607      	mov	r7, r0
	if (!bt_mesh_subnet_get(net_idx)) {
   207ee:	4608      	mov	r0, r1
{
   207f0:	4688      	mov	r8, r1
   207f2:	4616      	mov	r6, r2
	if (!bt_mesh_subnet_get(net_idx)) {
   207f4:	f7ea fd6c 	bl	b2d0 <bt_mesh_subnet_get>
   207f8:	b360      	cbz	r0, 20854 <bt_mesh_app_key_add+0x6c>
	app = app_key_alloc(app_idx);
   207fa:	4638      	mov	r0, r7
   207fc:	f7ea fea8 	bl	b550 <app_key_alloc>
	if (!app) {
   20800:	4605      	mov	r5, r0
   20802:	b328      	cbz	r0, 20850 <bt_mesh_app_key_add+0x68>
	if (app->app_idx == app_idx) {
   20804:	8843      	ldrh	r3, [r0, #2]
   20806:	42bb      	cmp	r3, r7
   20808:	d10d      	bne.n	20826 <bt_mesh_app_key_add+0x3e>
		if (app->net_idx != net_idx) {
   2080a:	8803      	ldrh	r3, [r0, #0]
   2080c:	4543      	cmp	r3, r8
   2080e:	d121      	bne.n	20854 <bt_mesh_app_key_add+0x6c>
		if (memcmp(key, app->keys[0].val, 16)) {
   20810:	1d81      	adds	r1, r0, #6
   20812:	2210      	movs	r2, #16
   20814:	4630      	mov	r0, r6
   20816:	f7fd fbfb 	bl	1e010 <memcmp>
		return STATUS_SUCCESS;
   2081a:	2800      	cmp	r0, #0
   2081c:	bf14      	ite	ne
   2081e:	2006      	movne	r0, #6
   20820:	2000      	moveq	r0, #0
}
   20822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			const uint8_t net_id[8], uint32_t iv_index,
			uint8_t auth[8]);

static inline int bt_mesh_app_id(const uint8_t app_key[16], uint8_t app_id[1])
{
	return bt_mesh_k4(app_key, app_id);
   20826:	1d41      	adds	r1, r0, #5
   20828:	4630      	mov	r0, r6
   2082a:	f7ec fa2f 	bl	cc8c <bt_mesh_k4>
	if (bt_mesh_app_id(key, &app->keys[0].id)) {
   2082e:	4604      	mov	r4, r0
   20830:	b990      	cbnz	r0, 20858 <bt_mesh_app_key_add+0x70>
	app->updated = false;
   20832:	7128      	strb	r0, [r5, #4]
	memcpy(app->keys[0].val, key, 16);
   20834:	2210      	movs	r2, #16
   20836:	4631      	mov	r1, r6
	app->net_idx = net_idx;
   20838:	f8a5 8000 	strh.w	r8, [r5]
	app->app_idx = app_idx;
   2083c:	806f      	strh	r7, [r5, #2]
	memcpy(app->keys[0].val, key, 16);
   2083e:	1da8      	adds	r0, r5, #6
   20840:	f7fd fbf7 	bl	1e032 <memcpy>
	app_key_evt(app, BT_MESH_KEY_ADDED);
   20844:	4628      	mov	r0, r5
   20846:	4621      	mov	r1, r4
   20848:	f7ea fe6e 	bl	b528 <app_key_evt>
	return STATUS_SUCCESS;
   2084c:	4620      	mov	r0, r4
   2084e:	e7e8      	b.n	20822 <bt_mesh_app_key_add+0x3a>
		return STATUS_INSUFF_RESOURCES;
   20850:	2005      	movs	r0, #5
   20852:	e7e6      	b.n	20822 <bt_mesh_app_key_add+0x3a>
		return STATUS_INVALID_NETKEY;
   20854:	2004      	movs	r0, #4
   20856:	e7e4      	b.n	20822 <bt_mesh_app_key_add+0x3a>
		return STATUS_CANNOT_SET;
   20858:	200f      	movs	r0, #15
   2085a:	e7e2      	b.n	20822 <bt_mesh_app_key_add+0x3a>

0002085c <bt_mesh_app_key_update>:
{
   2085c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2085e:	4616      	mov	r6, r2
	app = app_get(app_idx);
   20860:	f7ea fe50 	bl	b504 <app_get>
	if (!app) {
   20864:	4605      	mov	r5, r0
   20866:	b380      	cbz	r0, 208ca <bt_mesh_app_key_update+0x6e>
	if (net_idx != BT_MESH_KEY_UNUSED && app->net_idx != net_idx) {
   20868:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2086c:	4299      	cmp	r1, r3
   2086e:	8800      	ldrh	r0, [r0, #0]
   20870:	d001      	beq.n	20876 <bt_mesh_app_key_update+0x1a>
   20872:	4281      	cmp	r1, r0
   20874:	d12b      	bne.n	208ce <bt_mesh_app_key_update+0x72>
	sub = bt_mesh_subnet_get(app->net_idx);
   20876:	f7ea fd2b 	bl	b2d0 <bt_mesh_subnet_get>
	if (!sub) {
   2087a:	b350      	cbz	r0, 208d2 <bt_mesh_app_key_update+0x76>
	if (sub->kr_phase != BT_MESH_KR_PHASE_1) {
   2087c:	7f87      	ldrb	r7, [r0, #30]
   2087e:	2f01      	cmp	r7, #1
   20880:	d001      	beq.n	20886 <bt_mesh_app_key_update+0x2a>
		return STATUS_CANNOT_UPDATE;
   20882:	200b      	movs	r0, #11
}
   20884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (app->updated) {
   20886:	792b      	ldrb	r3, [r5, #4]
   20888:	b153      	cbz	r3, 208a0 <bt_mesh_app_key_update+0x44>
		if (memcmp(app->keys[1].val, key, 16)) {
   2088a:	2210      	movs	r2, #16
   2088c:	4631      	mov	r1, r6
   2088e:	f105 0017 	add.w	r0, r5, #23
   20892:	f7fd fbbd 	bl	1e010 <memcmp>
		return STATUS_SUCCESS;
   20896:	2800      	cmp	r0, #0
   20898:	bf14      	ite	ne
   2089a:	2006      	movne	r0, #6
   2089c:	2000      	moveq	r0, #0
   2089e:	e7f1      	b.n	20884 <bt_mesh_app_key_update+0x28>
   208a0:	f105 0116 	add.w	r1, r5, #22
   208a4:	4630      	mov	r0, r6
   208a6:	f7ec f9f1 	bl	cc8c <bt_mesh_k4>
	if (bt_mesh_app_id(key, &app->keys[1].id)) {
   208aa:	4604      	mov	r4, r0
   208ac:	2800      	cmp	r0, #0
   208ae:	d1e8      	bne.n	20882 <bt_mesh_app_key_update+0x26>
	memcpy(app->keys[1].val, key, 16);
   208b0:	2210      	movs	r2, #16
   208b2:	4631      	mov	r1, r6
	app->updated = true;
   208b4:	712f      	strb	r7, [r5, #4]
	memcpy(app->keys[1].val, key, 16);
   208b6:	f105 0017 	add.w	r0, r5, #23
   208ba:	f7fd fbba 	bl	1e032 <memcpy>
	app_key_evt(app, BT_MESH_KEY_UPDATED);
   208be:	4628      	mov	r0, r5
   208c0:	2102      	movs	r1, #2
   208c2:	f7ea fe31 	bl	b528 <app_key_evt>
	return STATUS_SUCCESS;
   208c6:	4620      	mov	r0, r4
   208c8:	e7dc      	b.n	20884 <bt_mesh_app_key_update+0x28>
		return STATUS_INVALID_APPKEY;
   208ca:	2003      	movs	r0, #3
   208cc:	e7da      	b.n	20884 <bt_mesh_app_key_update+0x28>
		return STATUS_INVALID_BINDING;
   208ce:	2011      	movs	r0, #17
   208d0:	e7d8      	b.n	20884 <bt_mesh_app_key_update+0x28>
		return STATUS_INVALID_NETKEY;
   208d2:	2004      	movs	r0, #4
   208d4:	e7d6      	b.n	20884 <bt_mesh_app_key_update+0x28>

000208d6 <bt_mesh_app_key_del>:
{
   208d6:	b538      	push	{r3, r4, r5, lr}
	if (net_idx != BT_MESH_KEY_UNUSED && !bt_mesh_subnet_get(net_idx)) {
   208d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   208dc:	4299      	cmp	r1, r3
{
   208de:	4605      	mov	r5, r0
   208e0:	460c      	mov	r4, r1
	if (net_idx != BT_MESH_KEY_UNUSED && !bt_mesh_subnet_get(net_idx)) {
   208e2:	d104      	bne.n	208ee <bt_mesh_app_key_del+0x18>
	app = app_get(app_idx);
   208e4:	4628      	mov	r0, r5
   208e6:	f7ea fe0d 	bl	b504 <app_get>
	if (!app) {
   208ea:	b938      	cbnz	r0, 208fc <bt_mesh_app_key_del+0x26>
}
   208ec:	bd38      	pop	{r3, r4, r5, pc}
	if (net_idx != BT_MESH_KEY_UNUSED && !bt_mesh_subnet_get(net_idx)) {
   208ee:	4608      	mov	r0, r1
   208f0:	f7ea fcee 	bl	b2d0 <bt_mesh_subnet_get>
   208f4:	2800      	cmp	r0, #0
   208f6:	d1f5      	bne.n	208e4 <bt_mesh_app_key_del+0xe>
		return STATUS_INVALID_NETKEY;
   208f8:	2004      	movs	r0, #4
   208fa:	e7f7      	b.n	208ec <bt_mesh_app_key_del+0x16>
	if (net_idx != BT_MESH_KEY_UNUSED && net_idx != app->net_idx) {
   208fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   20900:	429c      	cmp	r4, r3
   20902:	d002      	beq.n	2090a <bt_mesh_app_key_del+0x34>
   20904:	8803      	ldrh	r3, [r0, #0]
   20906:	42a3      	cmp	r3, r4
   20908:	d103      	bne.n	20912 <bt_mesh_app_key_del+0x3c>
	app_key_del(app);
   2090a:	f7ff ff5d 	bl	207c8 <app_key_del>
	return STATUS_SUCCESS;
   2090e:	2000      	movs	r0, #0
   20910:	e7ec      	b.n	208ec <bt_mesh_app_key_del+0x16>
		return STATUS_INVALID_BINDING;
   20912:	2011      	movs	r0, #17
   20914:	e7ea      	b.n	208ec <bt_mesh_app_key_del+0x16>

00020916 <send_cb_finalize>:
{
   20916:	b570      	push	{r4, r5, r6, lr}
   20918:	460d      	mov	r5, r1
	if (!cb) {
   2091a:	4604      	mov	r4, r0
   2091c:	b160      	cbz	r0, 20938 <send_cb_finalize+0x22>
	if (cb->start) {
   2091e:	6803      	ldr	r3, [r0, #0]
   20920:	b11b      	cbz	r3, 2092a <send_cb_finalize+0x14>
		cb->start(0, 0, cb_data);
   20922:	460a      	mov	r2, r1
   20924:	2100      	movs	r1, #0
   20926:	4608      	mov	r0, r1
   20928:	4798      	blx	r3
	if (cb->end) {
   2092a:	6863      	ldr	r3, [r4, #4]
   2092c:	b123      	cbz	r3, 20938 <send_cb_finalize+0x22>
		cb->end(0, cb_data);
   2092e:	4629      	mov	r1, r5
   20930:	2000      	movs	r0, #0
	}
}
   20932:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		cb->end(0, cb_data);
   20936:	4718      	bx	r3
}
   20938:	bd70      	pop	{r4, r5, r6, pc}

0002093a <seg_tx_buf_build>:
{
   2093a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t len = MIN(seg_len(tx->ctl), tx->len - (seg_len(tx->ctl) * seg_o));
   2093e:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
	uint16_t seq_zero = tx->seq_auth & TRANS_SEQ_ZERO_MASK;
   20942:	f8b0 8010 	ldrh.w	r8, [r0, #16]
		return BT_MESH_APP_SEG_SDU_MAX;
   20946:	f013 0f02 	tst.w	r3, #2
	uint8_t len = MIN(seg_len(tx->ctl), tx->len - (seg_len(tx->ctl) * seg_o));
   2094a:	8b83      	ldrh	r3, [r0, #28]
		return BT_MESH_APP_SEG_SDU_MAX;
   2094c:	bf14      	ite	ne
   2094e:	2708      	movne	r7, #8
   20950:	270c      	moveq	r7, #12
	uint8_t len = MIN(seg_len(tx->ctl), tx->len - (seg_len(tx->ctl) * seg_o));
   20952:	fb07 3311 	mls	r3, r7, r1, r3
{
   20956:	4604      	mov	r4, r0
	uint8_t len = MIN(seg_len(tx->ctl), tx->len - (seg_len(tx->ctl) * seg_o));
   20958:	429f      	cmp	r7, r3
{
   2095a:	460e      	mov	r6, r1
	net_buf_simple_add_u8(buf, tx->hdr);
   2095c:	7f81      	ldrb	r1, [r0, #30]
   2095e:	4610      	mov	r0, r2
{
   20960:	4615      	mov	r5, r2
	uint8_t len = MIN(seg_len(tx->ctl), tx->len - (seg_len(tx->ctl) * seg_o));
   20962:	bfa8      	it	ge
   20964:	b2df      	uxtbge	r7, r3
	net_buf_simple_add_u8(buf, tx->hdr);
   20966:	f004 f9e5 	bl	24d34 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, (tx->aszmic << 7) | seq_zero >> 6);
   2096a:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
	uint16_t seq_zero = tx->seq_auth & TRANS_SEQ_ZERO_MASK;
   2096e:	f3c8 080c 	ubfx	r8, r8, #0, #13
	net_buf_simple_add_u8(buf, (tx->aszmic << 7) | seq_zero >> 6);
   20972:	f3c3 0380 	ubfx	r3, r3, #2, #1
   20976:	ea4f 1198 	mov.w	r1, r8, lsr #6
   2097a:	ea41 11c3 	orr.w	r1, r1, r3, lsl #7
   2097e:	4628      	mov	r0, r5
   20980:	f004 f9d8 	bl	24d34 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, (((seq_zero & 0x3f) << 2) | (seg_o >> 3)));
   20984:	08f1      	lsrs	r1, r6, #3
   20986:	ea41 0188 	orr.w	r1, r1, r8, lsl #2
   2098a:	b2c9      	uxtb	r1, r1
   2098c:	4628      	mov	r0, r5
   2098e:	f004 f9d1 	bl	24d34 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, ((seg_o & 0x07) << 5) | tx->seg_n);
   20992:	f894 1020 	ldrb.w	r1, [r4, #32]
	net_buf_simple_add_mem(buf, tx->seg[seg_o], len);
   20996:	eb04 0486 	add.w	r4, r4, r6, lsl #2
	net_buf_simple_add_u8(buf, ((seg_o & 0x07) << 5) | tx->seg_n);
   2099a:	ea41 1146 	orr.w	r1, r1, r6, lsl #5
   2099e:	b2c9      	uxtb	r1, r1
   209a0:	4628      	mov	r0, r5
   209a2:	f004 f9c7 	bl	24d34 <net_buf_simple_add_u8>
	net_buf_simple_add_mem(buf, tx->seg[seg_o], len);
   209a6:	6861      	ldr	r1, [r4, #4]
   209a8:	463a      	mov	r2, r7
   209aa:	4628      	mov	r0, r5
}
   209ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	net_buf_simple_add_mem(buf, tx->seg[seg_o], len);
   209b0:	f004 b9b7 	b.w	24d22 <net_buf_simple_add_mem>

000209b4 <seg_rx_assemble>:
{
   209b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf->data = buf->__buf;
   209b8:	688b      	ldr	r3, [r1, #8]
   209ba:	600b      	str	r3, [r1, #0]
	buf->len  = 0U;
   209bc:	2500      	movs	r5, #0
   209be:	4606      	mov	r6, r0
   209c0:	460c      	mov	r4, r1
   209c2:	4617      	mov	r7, r2
   209c4:	808d      	strh	r5, [r1, #4]
	for (i = 0; i <= rx->seg_n; i++) {
   209c6:	f100 0804 	add.w	r8, r0, #4
				       MIN(seg_len(rx->ctl),
   209ca:	7ff3      	ldrb	r3, [r6, #31]
		net_buf_simple_add_mem(buf, rx->seg[i],
   209cc:	f858 1b04 	ldr.w	r1, [r8], #4
		return BT_MESH_APP_SEG_SDU_MAX;
   209d0:	f013 0f20 	tst.w	r3, #32
				       MIN(seg_len(rx->ctl),
   209d4:	8bb3      	ldrh	r3, [r6, #28]
		return BT_MESH_APP_SEG_SDU_MAX;
   209d6:	bf14      	ite	ne
   209d8:	2208      	movne	r2, #8
   209da:	220c      	moveq	r2, #12
				       MIN(seg_len(rx->ctl),
   209dc:	fb05 3312 	mls	r3, r5, r2, r3
		net_buf_simple_add_mem(buf, rx->seg[i],
   209e0:	429a      	cmp	r2, r3
   209e2:	bfa8      	it	ge
   209e4:	461a      	movge	r2, r3
   209e6:	4620      	mov	r0, r4
   209e8:	f004 f99b 	bl	24d22 <net_buf_simple_add_mem>
	for (i = 0; i <= rx->seg_n; i++) {
   209ec:	7ff3      	ldrb	r3, [r6, #31]
   209ee:	3501      	adds	r5, #1
   209f0:	461a      	mov	r2, r3
   209f2:	f003 031f 	and.w	r3, r3, #31
   209f6:	42ab      	cmp	r3, r5
   209f8:	dae7      	bge.n	209ca <seg_rx_assemble+0x16>
	if (!rx->ctl) {
   209fa:	0693      	lsls	r3, r2, #26
   209fc:	d406      	bmi.n	20a0c <seg_rx_assemble+0x58>
		buf->len -= APP_MIC_LEN(aszmic);
   209fe:	88a3      	ldrh	r3, [r4, #4]
   20a00:	2f00      	cmp	r7, #0
   20a02:	bf14      	ite	ne
   20a04:	2208      	movne	r2, #8
   20a06:	2204      	moveq	r2, #4
   20a08:	1a9b      	subs	r3, r3, r2
   20a0a:	80a3      	strh	r3, [r4, #4]
}
   20a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00020a10 <ack_timeout>:
{
   20a10:	b538      	push	{r3, r4, r5, lr}
	if (rx->ttl == BT_MESH_TTL_DEFAULT) {
   20a12:	f890 4020 	ldrb.w	r4, [r0, #32]
   20a16:	2cff      	cmp	r4, #255	; 0xff
{
   20a18:	4605      	mov	r5, r0
	if (rx->ttl == BT_MESH_TTL_DEFAULT) {
   20a1a:	d102      	bne.n	20a22 <ack_timeout+0x12>
		ttl = bt_mesh_default_ttl_get();
   20a1c:	f7e9 fbd6 	bl	a1cc <bt_mesh_default_ttl_get>
   20a20:	4604      	mov	r4, r0
	to += ((rx->seg_n + 1) - popcount(rx->block)) * 100U;
   20a22:	6a68      	ldr	r0, [r5, #36]	; 0x24
   20a24:	f7e0 fd42 	bl	14ac <__popcountsi2>
   20a28:	7feb      	ldrb	r3, [r5, #31]
   20a2a:	f003 031f 	and.w	r3, r3, #31
   20a2e:	1a18      	subs	r0, r3, r0
   20a30:	2364      	movs	r3, #100	; 0x64
   20a32:	fb00 3303 	mla	r3, r0, r3, r3
	to = 150 + (ttl * 50U);
   20a36:	2296      	movs	r2, #150	; 0x96
   20a38:	2032      	movs	r0, #50	; 0x32
   20a3a:	fb10 2004 	smlabb	r0, r0, r4, r2
	to += ((rx->seg_n + 1) - popcount(rx->block)) * 100U;
   20a3e:	4418      	add	r0, r3
}
   20a40:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
   20a44:	bfb8      	it	lt
   20a46:	f44f 70c8 	movlt.w	r0, #400	; 0x190
   20a4a:	bd38      	pop	{r3, r4, r5, pc}

00020a4c <sdu_try_decrypt>:
	if (ctx->seg) {
   20a4c:	69d0      	ldr	r0, [r2, #28]
{
   20a4e:	b570      	push	{r4, r5, r6, lr}
   20a50:	460d      	mov	r5, r1
   20a52:	4614      	mov	r4, r2
	if (ctx->seg) {
   20a54:	b118      	cbz	r0, 20a5e <sdu_try_decrypt+0x12>
		seg_rx_assemble(ctx->seg, ctx->buf, ctx->crypto.aszmic);
   20a56:	7852      	ldrb	r2, [r2, #1]
   20a58:	6961      	ldr	r1, [r4, #20]
   20a5a:	f7ff ffab 	bl	209b4 <seg_rx_assemble>
	net_buf_simple_reset(ctx->sdu);
   20a5e:	69a3      	ldr	r3, [r4, #24]
   20a60:	2200      	movs	r2, #0
   20a62:	809a      	strh	r2, [r3, #4]
	buf->data = buf->__buf;
   20a64:	689a      	ldr	r2, [r3, #8]
   20a66:	601a      	str	r2, [r3, #0]
	return bt_mesh_app_decrypt(key, &ctx->crypto, ctx->buf, ctx->sdu);
   20a68:	4621      	mov	r1, r4
   20a6a:	6962      	ldr	r2, [r4, #20]
   20a6c:	4628      	mov	r0, r5
}
   20a6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_mesh_app_decrypt(key, &ctx->crypto, ctx->buf, ctx->sdu);
   20a72:	f000 bb0e 	b.w	21092 <bt_mesh_app_decrypt>

00020a76 <schedule_retransmit>:
{
   20a76:	b510      	push	{r4, lr}
	if (!tx->nack_count) {
   20a78:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   20a7c:	b38b      	cbz	r3, 20ae2 <schedule_retransmit+0x6c>
	if (--tx->seg_pending || tx->sending) {
   20a7e:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
   20a82:	3b01      	subs	r3, #1
   20a84:	b2db      	uxtb	r3, r3
   20a86:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
   20a8a:	bb53      	cbnz	r3, 20ae2 <schedule_retransmit+0x6c>
   20a8c:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
   20a90:	06db      	lsls	r3, r3, #27
   20a92:	d426      	bmi.n	20ae2 <schedule_retransmit+0x6c>
	k_work_reschedule(&tx->retransmit,
   20a94:	f890 1021 	ldrb.w	r1, [r0, #33]	; 0x21
   20a98:	f100 0430 	add.w	r4, r0, #48	; 0x30
   20a9c:	b131      	cbz	r1, 20aac <schedule_retransmit+0x36>
   20a9e:	2200      	movs	r2, #0
   20aa0:	4613      	mov	r3, r2
   20aa2:	4620      	mov	r0, r4
}
   20aa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_reschedule(&tx->retransmit,
   20aa8:	f7fa be36 	b.w	1b718 <k_work_reschedule>
			  K_MSEC(SEG_RETRANSMIT_TIMEOUT(tx)));
   20aac:	f9b0 301a 	ldrsh.w	r3, [r0, #26]
   20ab0:	2b00      	cmp	r3, #0
   20ab2:	bfc8      	it	gt
   20ab4:	f890 2024 	ldrbgt.w	r2, [r0, #36]	; 0x24
   20ab8:	f04f 0332 	mov.w	r3, #50	; 0x32
   20abc:	bfc5      	ittet	gt
   20abe:	f44f 70c8 	movgt.w	r0, #400	; 0x190
   20ac2:	fb03 0002 	mlagt	r0, r3, r2, r0
   20ac6:	4618      	movle	r0, r3
   20ac8:	2100      	movgt	r1, #0
   20aca:	03c0      	lsls	r0, r0, #15
   20acc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   20ad0:	2300      	movs	r3, #0
   20ad2:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   20ad6:	03c9      	lsls	r1, r1, #15
   20ad8:	f7e0 fcce 	bl	1478 <__aeabi_uldivmod>
   20adc:	4602      	mov	r2, r0
   20ade:	460b      	mov	r3, r1
   20ae0:	e7df      	b.n	20aa2 <schedule_retransmit+0x2c>
}
   20ae2:	bd10      	pop	{r4, pc}

00020ae4 <seg_sent>:
	schedule_retransmit(tx);
   20ae4:	4608      	mov	r0, r1
   20ae6:	f7ff bfc6 	b.w	20a76 <schedule_retransmit>

00020aea <seg_send_start>:
{
   20aea:	b538      	push	{r3, r4, r5, lr}
	if (!tx->started && tx->cb && tx->cb->start) {
   20aec:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
   20af0:	071b      	lsls	r3, r3, #28
{
   20af2:	460d      	mov	r5, r1
   20af4:	4614      	mov	r4, r2
	if (!tx->started && tx->cb && tx->cb->start) {
   20af6:	d40b      	bmi.n	20b10 <seg_send_start+0x26>
   20af8:	6a93      	ldr	r3, [r2, #40]	; 0x28
   20afa:	b14b      	cbz	r3, 20b10 <seg_send_start+0x26>
   20afc:	681b      	ldr	r3, [r3, #0]
   20afe:	b13b      	cbz	r3, 20b10 <seg_send_start+0x26>
		tx->cb->start(duration, err, tx->cb_data);
   20b00:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   20b02:	4798      	blx	r3
		tx->started = 1U;
   20b04:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   20b08:	f043 0308 	orr.w	r3, r3, #8
   20b0c:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	if (err) {
   20b10:	b125      	cbz	r5, 20b1c <seg_send_start+0x32>
		schedule_retransmit(tx);
   20b12:	4620      	mov	r0, r4
}
   20b14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		schedule_retransmit(tx);
   20b18:	f7ff bfad 	b.w	20a76 <schedule_retransmit>
}
   20b1c:	bd38      	pop	{r3, r4, r5, pc}

00020b1e <seg_retransmit>:
	seg_tx_send_unacked(tx);
   20b1e:	3830      	subs	r0, #48	; 0x30
   20b20:	f7ea bf08 	b.w	b934 <seg_tx_send_unacked>

00020b24 <send_unseg>:
{
   20b24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20b28:	4690      	mov	r8, r2
   20b2a:	4699      	mov	r9, r3
				 tx->xmit, BUF_TIMEOUT);
   20b2c:	2200      	movs	r2, #0
   20b2e:	2300      	movs	r3, #0
	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA, BT_MESH_LOCAL_ADV,
   20b30:	e9cd 2300 	strd	r2, r3, [sp]
{
   20b34:	468a      	mov	sl, r1
	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA, BT_MESH_LOCAL_ADV,
   20b36:	2101      	movs	r1, #1
   20b38:	7a82      	ldrb	r2, [r0, #10]
{
   20b3a:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   20b3e:	4604      	mov	r4, r0
	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA, BT_MESH_LOCAL_ADV,
   20b40:	4608      	mov	r0, r1
   20b42:	f7e9 fbad 	bl	a2a0 <bt_mesh_adv_create>
	if (!buf) {
   20b46:	4605      	mov	r5, r0
   20b48:	b348      	cbz	r0, 20b9e <send_unseg+0x7a>
	net_buf_simple_reserve(&buf->b, reserve);
   20b4a:	f100 0608 	add.w	r6, r0, #8
   20b4e:	2109      	movs	r1, #9
   20b50:	4630      	mov	r0, r6
   20b52:	f004 f87a 	bl	24c4a <net_buf_simple_reserve>
	if (ctl_op) {
   20b56:	f1bb 0f00 	cmp.w	fp, #0
   20b5a:	d023      	beq.n	20ba4 <send_unseg+0x80>
		net_buf_add_u8(buf, TRANS_CTL_HDR(*ctl_op, 0));
   20b5c:	f89b 1000 	ldrb.w	r1, [fp]
	return net_buf_simple_add_u8(&buf->b, val);
   20b60:	f001 017f 	and.w	r1, r1, #127	; 0x7f
   20b64:	4630      	mov	r0, r6
   20b66:	f004 f8e5 	bl	24d34 <net_buf_simple_add_u8>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   20b6a:	f8ba 2004 	ldrh.w	r2, [sl, #4]
   20b6e:	f8da 1000 	ldr.w	r1, [sl]
   20b72:	4630      	mov	r0, r6
   20b74:	f004 f8d5 	bl	24d22 <net_buf_simple_add_mem>
		if (!bt_mesh_friend_queue_has_space(tx->sub->net_idx,
   20b78:	6863      	ldr	r3, [r4, #4]
   20b7a:	8921      	ldrh	r1, [r4, #8]
   20b7c:	889a      	ldrh	r2, [r3, #4]
   20b7e:	6823      	ldr	r3, [r4, #0]
   20b80:	2701      	movs	r7, #1
   20b82:	8b98      	ldrh	r0, [r3, #28]
   20b84:	9700      	str	r7, [sp, #0]
   20b86:	2300      	movs	r3, #0
   20b88:	f7ed fc16 	bl	e3b8 <bt_mesh_friend_queue_has_space>
   20b8c:	b9b0      	cbnz	r0, 20bbc <send_unseg+0x98>
			if (BT_MESH_ADDR_IS_UNICAST(tx->ctx->addr)) {
   20b8e:	6863      	ldr	r3, [r4, #4]
   20b90:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
   20b94:	2b00      	cmp	r3, #0
   20b96:	dd29      	ble.n	20bec <send_unseg+0xc8>
				net_buf_unref(buf);
   20b98:	4628      	mov	r0, r5
   20b9a:	f7f6 fa6d 	bl	17078 <net_buf_unref>
		return -ENOBUFS;
   20b9e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   20ba2:	e020      	b.n	20be6 <send_unseg+0xc2>
	} else if (BT_MESH_IS_DEV_KEY(tx->ctx->app_idx)) {
   20ba4:	6863      	ldr	r3, [r4, #4]
   20ba6:	885f      	ldrh	r7, [r3, #2]
   20ba8:	3703      	adds	r7, #3
   20baa:	b2bf      	uxth	r7, r7
   20bac:	2f01      	cmp	r7, #1
		net_buf_add_u8(buf, UNSEG_HDR(1, tx->aid));
   20bae:	bf85      	ittet	hi
   20bb0:	7ae1      	ldrbhi	r1, [r4, #11]
   20bb2:	0889      	lsrhi	r1, r1, #2
	return net_buf_simple_add_u8(&buf->b, val);
   20bb4:	4659      	movls	r1, fp
   20bb6:	f041 0140 	orrhi.w	r1, r1, #64	; 0x40
   20bba:	e7d3      	b.n	20b64 <send_unseg+0x40>
		if (bt_mesh_friend_enqueue_tx(tx, BT_MESH_FRIEND_PDU_SINGLE,
   20bbc:	2200      	movs	r2, #0
   20bbe:	9600      	str	r6, [sp, #0]
   20bc0:	463b      	mov	r3, r7
   20bc2:	4611      	mov	r1, r2
   20bc4:	4620      	mov	r0, r4
   20bc6:	f7ed fcab 	bl	e520 <bt_mesh_friend_enqueue_tx>
   20bca:	b178      	cbz	r0, 20bec <send_unseg+0xc8>
		    BT_MESH_ADDR_IS_UNICAST(tx->ctx->addr)) {
   20bcc:	6863      	ldr	r3, [r4, #4]
					      NULL, 1, &buf->b) &&
   20bce:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
   20bd2:	2b00      	cmp	r3, #0
   20bd4:	dd0a      	ble.n	20bec <send_unseg+0xc8>
			net_buf_unref(buf);
   20bd6:	4628      	mov	r0, r5
   20bd8:	f7f6 fa4e 	bl	17078 <net_buf_unref>
			send_cb_finalize(cb, cb_data);
   20bdc:	4640      	mov	r0, r8
   20bde:	4649      	mov	r1, r9
   20be0:	f7ff fe99 	bl	20916 <send_cb_finalize>
			return 0;
   20be4:	2000      	movs	r0, #0
}
   20be6:	b003      	add	sp, #12
   20be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return bt_mesh_net_send(tx, buf, cb, cb_data);
   20bec:	464b      	mov	r3, r9
   20bee:	4642      	mov	r2, r8
   20bf0:	4629      	mov	r1, r5
   20bf2:	4620      	mov	r0, r4
}
   20bf4:	b003      	add	sp, #12
   20bf6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_mesh_net_send(tx, buf, cb, cb_data);
   20bfa:	f7ea b825 	b.w	ac48 <bt_mesh_net_send>

00020bfe <bt_mesh_ctl_send>:
{
   20bfe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
   20c02:	f8d0 9004 	ldr.w	r9, [r0, #4]
{
   20c06:	461d      	mov	r5, r3
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
   20c08:	f899 300b 	ldrb.w	r3, [r9, #11]
{
   20c0c:	b089      	sub	sp, #36	; 0x24
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
   20c0e:	2bff      	cmp	r3, #255	; 0xff
{
   20c10:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   20c14:	4604      	mov	r4, r0
   20c16:	4616      	mov	r6, r2
   20c18:	f88d 100f 	strb.w	r1, [sp, #15]
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
   20c1c:	d123      	bne.n	20c66 <bt_mesh_ctl_send+0x68>
		tx->ctx->send_ttl = bt_mesh_default_ttl_get();
   20c1e:	f7e9 fad5 	bl	a1cc <bt_mesh_default_ttl_get>
   20c22:	f889 000b 	strb.w	r0, [r9, #11]
	net_buf_simple_init_with_data(&buf, data, data_len);
   20c26:	462a      	mov	r2, r5
   20c28:	4631      	mov	r1, r6
   20c2a:	a805      	add	r0, sp, #20
   20c2c:	f004 f807 	bl	24c3e <net_buf_simple_init_with_data>
	if (data_len > BT_MESH_SDU_UNSEG_MAX) {
   20c30:	6863      	ldr	r3, [r4, #4]
   20c32:	2d0b      	cmp	r5, #11
		tx->ctx->send_rel = true;
   20c34:	bf84      	itt	hi
   20c36:	2201      	movhi	r2, #1
   20c38:	729a      	strbhi	r2, [r3, #10]
	tx->ctx->app_idx = BT_MESH_KEY_UNUSED;
   20c3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   20c3e:	805a      	strh	r2, [r3, #2]
	if (tx->ctx->addr == BT_MESH_ADDR_UNASSIGNED ||
   20c40:	889a      	ldrh	r2, [r3, #4]
   20c42:	b192      	cbz	r2, 20c6a <bt_mesh_ctl_send+0x6c>
   20c44:	f482 4200 	eor.w	r2, r2, #32768	; 0x8000
   20c48:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
   20c4c:	d30d      	bcc.n	20c6a <bt_mesh_ctl_send+0x6c>
	if (tx->ctx->send_rel) {
   20c4e:	7a9a      	ldrb	r2, [r3, #10]
   20c50:	f10d 030f 	add.w	r3, sp, #15
		return send_seg(tx, &buf, cb, cb_data, &ctl_op);
   20c54:	9300      	str	r3, [sp, #0]
   20c56:	4643      	mov	r3, r8
	if (tx->ctx->send_rel) {
   20c58:	b162      	cbz	r2, 20c74 <bt_mesh_ctl_send+0x76>
		return send_seg(tx, &buf, cb, cb_data, &ctl_op);
   20c5a:	463a      	mov	r2, r7
   20c5c:	a905      	add	r1, sp, #20
   20c5e:	4620      	mov	r0, r4
   20c60:	f7ea ffe8 	bl	bc34 <send_seg>
   20c64:	e003      	b.n	20c6e <bt_mesh_ctl_send+0x70>
	} else if (tx->ctx->send_ttl > BT_MESH_TTL_MAX) {
   20c66:	061b      	lsls	r3, r3, #24
   20c68:	d5dd      	bpl.n	20c26 <bt_mesh_ctl_send+0x28>
		return -EINVAL;
   20c6a:	f06f 0015 	mvn.w	r0, #21
}
   20c6e:	b009      	add	sp, #36	; 0x24
   20c70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return send_unseg(tx, &buf, cb, cb_data, &ctl_op);
   20c74:	463a      	mov	r2, r7
   20c76:	a905      	add	r1, sp, #20
   20c78:	4620      	mov	r0, r4
   20c7a:	f7ff ff53 	bl	20b24 <send_unseg>
   20c7e:	e7f6      	b.n	20c6e <bt_mesh_ctl_send+0x70>

00020c80 <send_ack.isra.0>:
static int send_ack(struct bt_mesh_subnet *sub, uint16_t src, uint16_t dst,
   20c80:	b5f0      	push	{r4, r5, r6, r7, lr}
   20c82:	b08b      	sub	sp, #44	; 0x2c
	struct bt_mesh_msg_ctx ctx = {
   20c84:	8b87      	ldrh	r7, [r0, #28]
static int send_ack(struct bt_mesh_subnet *sub, uint16_t src, uint16_t dst,
   20c86:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
	struct bt_mesh_msg_ctx ctx = {
   20c8a:	f8ad 7010 	strh.w	r7, [sp, #16]
static int send_ack(struct bt_mesh_subnet *sub, uint16_t src, uint16_t dst,
   20c8e:	460d      	mov	r5, r1
	struct bt_mesh_msg_ctx ctx = {
   20c90:	f64f 77ff 	movw	r7, #65535	; 0xffff
   20c94:	2100      	movs	r1, #0
   20c96:	f88d 301b 	strb.w	r3, [sp, #27]
	struct bt_mesh_net_tx tx = {
   20c9a:	ab04      	add	r3, sp, #16
static int send_ack(struct bt_mesh_subnet *sub, uint16_t src, uint16_t dst,
   20c9c:	9e11      	ldr	r6, [sp, #68]	; 0x44
	struct bt_mesh_msg_ctx ctx = {
   20c9e:	f8cd 1016 	str.w	r1, [sp, #22]
   20ca2:	f88d 101a 	strb.w	r1, [sp, #26]
   20ca6:	f8ad 7012 	strh.w	r7, [sp, #18]
   20caa:	f8ad 2014 	strh.w	r2, [sp, #20]
	struct bt_mesh_net_tx tx = {
   20cae:	9109      	str	r1, [sp, #36]	; 0x24
   20cb0:	9007      	str	r0, [sp, #28]
   20cb2:	9308      	str	r3, [sp, #32]
   20cb4:	b36c      	cbz	r4, 20d12 <send_ack.isra.0+0x92>
		.src = obo ? bt_mesh_primary_addr() : src,
   20cb6:	f7ec fa17 	bl	d0e8 <bt_mesh_primary_addr>
	struct bt_mesh_net_tx tx = {
   20cba:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
		.xmit = bt_mesh_net_transmit_get(),
   20cbe:	f7e9 faa1 	bl	a204 <bt_mesh_net_transmit_get>
	if (!BT_MESH_ADDR_IS_UNICAST(src)) {
   20cc2:	b22d      	sxth	r5, r5
   20cc4:	2d00      	cmp	r5, #0
	struct bt_mesh_net_tx tx = {
   20cc6:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
	if (!BT_MESH_ADDR_IS_UNICAST(src)) {
   20cca:	dd20      	ble.n	20d0e <send_ack.isra.0+0x8e>
	uint16_t seq_zero = *seq_auth & TRANS_SEQ_ZERO_MASK;
   20ccc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   20cce:	f88d 600d 	strb.w	r6, [sp, #13]
   20cd2:	881b      	ldrh	r3, [r3, #0]
	sys_put_be16(((seq_zero << 2) & 0x7ffc) | (obo << 15), buf);
   20cd4:	03e4      	lsls	r4, r4, #15
   20cd6:	f3c3 030c 	ubfx	r3, r3, #0, #13
   20cda:	ea44 0483 	orr.w	r4, r4, r3, lsl #2
	dst[0] = val >> 8;
   20cde:	f3c4 2307 	ubfx	r3, r4, #8, #8
   20ce2:	f88d 3008 	strb.w	r3, [sp, #8]
	sys_put_be16(val >> 16, dst);
   20ce6:	0c33      	lsrs	r3, r6, #16
	dst[0] = val >> 8;
   20ce8:	0e32      	lsrs	r2, r6, #24
	dst[1] = val;
   20cea:	f88d 300b 	strb.w	r3, [sp, #11]
	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_ACK, buf, sizeof(buf),
   20cee:	2100      	movs	r1, #0
	dst[0] = val >> 8;
   20cf0:	f3c6 2307 	ubfx	r3, r6, #8, #8
   20cf4:	f88d 200a 	strb.w	r2, [sp, #10]
   20cf8:	f88d 300c 	strb.w	r3, [sp, #12]
   20cfc:	e9cd 1100 	strd	r1, r1, [sp]
   20d00:	2306      	movs	r3, #6
   20d02:	aa02      	add	r2, sp, #8
   20d04:	a807      	add	r0, sp, #28
	dst[1] = val;
   20d06:	f88d 4009 	strb.w	r4, [sp, #9]
   20d0a:	f7ff ff78 	bl	20bfe <bt_mesh_ctl_send>
}
   20d0e:	b00b      	add	sp, #44	; 0x2c
   20d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct bt_mesh_net_tx tx = {
   20d12:	4628      	mov	r0, r5
   20d14:	e7d1      	b.n	20cba <send_ack.isra.0+0x3a>

00020d16 <seg_ack>:
{
   20d16:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!rx->in_use || rx->block == BLOCK_COMPLETE(rx->seg_n)) {
   20d18:	f810 3c11 	ldrb.w	r3, [r0, #-17]
   20d1c:	065a      	lsls	r2, r3, #25
{
   20d1e:	b085      	sub	sp, #20
   20d20:	4604      	mov	r4, r0
	if (!rx->in_use || rx->block == BLOCK_COMPLETE(rx->seg_n)) {
   20d22:	d554      	bpl.n	20dce <seg_ack+0xb8>
   20d24:	f003 031f 	and.w	r3, r3, #31
   20d28:	2201      	movs	r2, #1
   20d2a:	3301      	adds	r3, #1
   20d2c:	fa02 f303 	lsl.w	r3, r2, r3
   20d30:	f850 2c0c 	ldr.w	r2, [r0, #-12]
   20d34:	3b01      	subs	r3, #1
   20d36:	429a      	cmp	r2, r3
   20d38:	d049      	beq.n	20dce <seg_ack+0xb8>
	struct seg_rx *rx = CONTAINER_OF(dwork, struct seg_rx, ack);
   20d3a:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
   20d3e:	f005 f935 	bl	25fac <z_impl_k_uptime_ticks>
   20d42:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   20d46:	fba0 0302 	umull	r0, r3, r0, r2
   20d4a:	fb02 3301 	mla	r3, r2, r1, r3
   20d4e:	0bc0      	lsrs	r0, r0, #15
   20d50:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	if (k_uptime_get_32() - rx->last > (60 * MSEC_PER_SEC)) {
   20d54:	f854 3c08 	ldr.w	r3, [r4, #-8]
   20d58:	1ac0      	subs	r0, r0, r3
   20d5a:	f64e 2360 	movw	r3, #60000	; 0xea60
   20d5e:	4298      	cmp	r0, r3
   20d60:	f04f 0500 	mov.w	r5, #0
   20d64:	d906      	bls.n	20d74 <seg_ack+0x5e>
		seg_rx_reset(rx, false);
   20d66:	4629      	mov	r1, r5
   20d68:	4630      	mov	r0, r6
}
   20d6a:	b005      	add	sp, #20
   20d6c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		seg_rx_reset(rx, false);
   20d70:	f7ea bd24 	b.w	b7bc <seg_rx_reset>
		 rx->block, rx->obo);
   20d74:	f814 3c11 	ldrb.w	r3, [r4, #-17]
	send_ack(rx->sub, rx->dst, rx->src, rx->ttl, &rx->seq_auth,
   20d78:	f834 2c18 	ldrh.w	r2, [r4, #-24]
   20d7c:	f834 1c16 	ldrh.w	r1, [r4, #-22]
   20d80:	f854 0c30 	ldr.w	r0, [r4, #-48]
   20d84:	09db      	lsrs	r3, r3, #7
   20d86:	9302      	str	r3, [sp, #8]
   20d88:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   20d8c:	9301      	str	r3, [sp, #4]
   20d8e:	f1a4 0320 	sub.w	r3, r4, #32
   20d92:	9300      	str	r3, [sp, #0]
   20d94:	f814 3c10 	ldrb.w	r3, [r4, #-16]
   20d98:	f7ff ff72 	bl	20c80 <send_ack.isra.0>
	timeout = ack_timeout(rx);
   20d9c:	4630      	mov	r0, r6
   20d9e:	f7ff fe37 	bl	20a10 <ack_timeout>
   20da2:	f44f 4700 	mov.w	r7, #32768	; 0x8000
	k_work_schedule(&rx->ack, K_MSEC(timeout));
   20da6:	ea20 76e0 	bic.w	r6, r0, r0, asr #31
   20daa:	4629      	mov	r1, r5
   20dac:	f240 30e7 	movw	r0, #999	; 0x3e7
   20db0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   20db4:	2300      	movs	r3, #0
   20db6:	fbc6 0107 	smlal	r0, r1, r6, r7
   20dba:	f7e0 fb5d 	bl	1478 <__aeabi_uldivmod>
   20dbe:	4602      	mov	r2, r0
   20dc0:	460b      	mov	r3, r1
   20dc2:	4620      	mov	r0, r4
}
   20dc4:	b005      	add	sp, #20
   20dc6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_work_schedule(&rx->ack, K_MSEC(timeout));
   20dca:	f7fa bc71 	b.w	1b6b0 <k_work_schedule>
}
   20dce:	b005      	add	sp, #20
   20dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}

00020dd2 <bt_mesh_rpl_update>:
	if (rpl->old_iv && !rx->old_iv) {
   20dd2:	f990 3001 	ldrsb.w	r3, [r0, #1]
   20dd6:	2b00      	cmp	r3, #0
   20dd8:	da07      	bge.n	20dea <bt_mesh_rpl_update+0x18>
   20dda:	7d0b      	ldrb	r3, [r1, #20]
   20ddc:	f013 0301 	ands.w	r3, r3, #1
		rpl->seg = 0;
   20de0:	bf02      	ittt	eq
   20de2:	6842      	ldreq	r2, [r0, #4]
   20de4:	f363 221f 	bfieq	r2, r3, #8, #24
   20de8:	6042      	streq	r2, [r0, #4]
	rpl->seq = rx->seq;
   20dea:	8a0a      	ldrh	r2, [r1, #16]
	rpl->src = rx->ctx.addr;
   20dec:	890b      	ldrh	r3, [r1, #8]
	rpl->seq = rx->seq;
   20dee:	8042      	strh	r2, [r0, #2]
   20df0:	7c8a      	ldrb	r2, [r1, #18]
   20df2:	7102      	strb	r2, [r0, #4]
	rpl->old_iv = rx->old_iv;
   20df4:	7d0a      	ldrb	r2, [r1, #20]
	rpl->src = rx->ctx.addr;
   20df6:	f3c3 030e 	ubfx	r3, r3, #0, #15
   20dfa:	f002 0201 	and.w	r2, r2, #1
   20dfe:	ea43 33c2 	orr.w	r3, r3, r2, lsl #15
   20e02:	8003      	strh	r3, [r0, #0]
}
   20e04:	4770      	bx	lr

00020e06 <hb_publish_start_cb>:
{
   20e06:	4608      	mov	r0, r1
   20e08:	4611      	mov	r1, r2
	if (err) {
   20e0a:	b108      	cbz	r0, 20e10 <hb_publish_start_cb+0xa>
		hb_publish_end_cb(err, cb_data);
   20e0c:	f7eb bcf0 	b.w	c7f0 <hb_publish_end_cb>
}
   20e10:	4770      	bx	lr

00020e12 <sys_put_be32>:
	sys_put_be16(val >> 16, dst);
   20e12:	0c03      	lsrs	r3, r0, #16
	dst[0] = val >> 8;
   20e14:	0e02      	lsrs	r2, r0, #24
	dst[1] = val;
   20e16:	704b      	strb	r3, [r1, #1]
	dst[0] = val >> 8;
   20e18:	f3c0 2307 	ubfx	r3, r0, #8, #8
   20e1c:	700a      	strb	r2, [r1, #0]
   20e1e:	708b      	strb	r3, [r1, #2]
	dst[1] = val;
   20e20:	70c8      	strb	r0, [r1, #3]
}
   20e22:	4770      	bx	lr

00020e24 <create_app_nonce>:
{
   20e24:	b538      	push	{r3, r4, r5, lr}
	if (ctx->dev_key) {
   20e26:	780b      	ldrb	r3, [r1, #0]
{
   20e28:	460c      	mov	r4, r1
		nonce[0] = 0x01;
   20e2a:	2b00      	cmp	r3, #0
   20e2c:	4601      	mov	r1, r0
   20e2e:	bf14      	ite	ne
   20e30:	2302      	movne	r3, #2
   20e32:	2301      	moveq	r3, #1
   20e34:	f801 3b01 	strb.w	r3, [r1], #1
{
   20e38:	4605      	mov	r5, r0
	sys_put_be32((ctx->seq_num | ((uint32_t)ctx->aszmic << 31)), &nonce[1]);
   20e3a:	68a3      	ldr	r3, [r4, #8]
   20e3c:	7860      	ldrb	r0, [r4, #1]
   20e3e:	ea43 70c0 	orr.w	r0, r3, r0, lsl #31
   20e42:	f7ff ffe6 	bl	20e12 <sys_put_be32>
	sys_put_be16(ctx->src, &nonce[5]);
   20e46:	8863      	ldrh	r3, [r4, #2]
	dst[1] = val;
   20e48:	71ab      	strb	r3, [r5, #6]
	dst[0] = val >> 8;
   20e4a:	0a1a      	lsrs	r2, r3, #8
   20e4c:	716a      	strb	r2, [r5, #5]
	sys_put_be16(ctx->dst, &nonce[7]);
   20e4e:	88a3      	ldrh	r3, [r4, #4]
	dst[1] = val;
   20e50:	722b      	strb	r3, [r5, #8]
	dst[0] = val >> 8;
   20e52:	0a1a      	lsrs	r2, r3, #8
   20e54:	71ea      	strb	r2, [r5, #7]
	sys_put_be32(ctx->iv_index, &nonce[9]);
   20e56:	68e0      	ldr	r0, [r4, #12]
   20e58:	f105 0109 	add.w	r1, r5, #9
}
   20e5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	sys_put_be32(ctx->iv_index, &nonce[9]);
   20e60:	f7ff bfd7 	b.w	20e12 <sys_put_be32>

00020e64 <bt_mesh_aes_cmac>:
{
   20e64:	b570      	push	{r4, r5, r6, lr}
   20e66:	b0c2      	sub	sp, #264	; 0x108
   20e68:	460d      	mov	r5, r1
   20e6a:	4614      	mov	r4, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   20e6c:	4601      	mov	r1, r0
   20e6e:	aa16      	add	r2, sp, #88	; 0x58
   20e70:	4668      	mov	r0, sp
{
   20e72:	461e      	mov	r6, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   20e74:	f7fc ffd4 	bl	1de20 <tc_cmac_setup>
   20e78:	b130      	cbz	r0, 20e88 <bt_mesh_aes_cmac+0x24>
   20e7a:	3508      	adds	r5, #8
	for (; sg_len; sg_len--, sg++) {
   20e7c:	b944      	cbnz	r4, 20e90 <bt_mesh_aes_cmac+0x2c>
	if (tc_cmac_final(mac, &state) == TC_CRYPTO_FAIL) {
   20e7e:	4669      	mov	r1, sp
   20e80:	4630      	mov	r0, r6
   20e82:	f7fd f863 	bl	1df4c <tc_cmac_final>
   20e86:	b968      	cbnz	r0, 20ea4 <bt_mesh_aes_cmac+0x40>
		return -EIO;
   20e88:	f06f 0004 	mvn.w	r0, #4
}
   20e8c:	b042      	add	sp, #264	; 0x108
   20e8e:	bd70      	pop	{r4, r5, r6, pc}
		if (tc_cmac_update(&state, sg->data,
   20e90:	e955 1202 	ldrd	r1, r2, [r5, #-8]
   20e94:	4668      	mov	r0, sp
   20e96:	f7fc ffee 	bl	1de76 <tc_cmac_update>
   20e9a:	3508      	adds	r5, #8
   20e9c:	2800      	cmp	r0, #0
   20e9e:	d0f3      	beq.n	20e88 <bt_mesh_aes_cmac+0x24>
	for (; sg_len; sg_len--, sg++) {
   20ea0:	3c01      	subs	r4, #1
   20ea2:	e7eb      	b.n	20e7c <bt_mesh_aes_cmac+0x18>
	return 0;
   20ea4:	4620      	mov	r0, r4
   20ea6:	e7f1      	b.n	20e8c <bt_mesh_aes_cmac+0x28>

00020ea8 <bt_mesh_aes_cmac_one>:
{
   20ea8:	b507      	push	{r0, r1, r2, lr}
	struct bt_mesh_sg sg = { m, len };
   20eaa:	e9cd 1200 	strd	r1, r2, [sp]
	return bt_mesh_aes_cmac(key, &sg, 1, mac);
   20eae:	2201      	movs	r2, #1
   20eb0:	4669      	mov	r1, sp
   20eb2:	f7ff ffd7 	bl	20e64 <bt_mesh_aes_cmac>
}
   20eb6:	b003      	add	sp, #12
   20eb8:	f85d fb04 	ldr.w	pc, [sp], #4

00020ebc <bt_mesh_s1>:
{
   20ebc:	b530      	push	{r4, r5, lr}
	const uint8_t zero[16] = { 0 };
   20ebe:	2200      	movs	r2, #0
{
   20ec0:	b085      	sub	sp, #20
   20ec2:	460d      	mov	r5, r1
	const uint8_t zero[16] = { 0 };
   20ec4:	e9cd 2200 	strd	r2, r2, [sp]
   20ec8:	e9cd 2202 	strd	r2, r2, [sp, #8]
{
   20ecc:	4604      	mov	r4, r0
	return bt_mesh_aes_cmac_one(zero, m, strlen(m), salt);
   20ece:	f7fd f883 	bl	1dfd8 <strlen>
   20ed2:	462b      	mov	r3, r5
   20ed4:	4602      	mov	r2, r0
   20ed6:	4621      	mov	r1, r4
   20ed8:	4668      	mov	r0, sp
   20eda:	f7ff ffe5 	bl	20ea8 <bt_mesh_aes_cmac_one>
}
   20ede:	3800      	subs	r0, #0
   20ee0:	bf18      	it	ne
   20ee2:	2001      	movne	r0, #1
   20ee4:	b005      	add	sp, #20
   20ee6:	bd30      	pop	{r4, r5, pc}

00020ee8 <bt_mesh_k1>:
{
   20ee8:	b570      	push	{r4, r5, r6, lr}
   20eea:	9d04      	ldr	r5, [sp, #16]
   20eec:	4606      	mov	r6, r0
   20eee:	461c      	mov	r4, r3
   20ef0:	4610      	mov	r0, r2
	err = bt_mesh_aes_cmac_one(salt, ikm, ikm_len, okm);
   20ef2:	462b      	mov	r3, r5
   20ef4:	460a      	mov	r2, r1
   20ef6:	4631      	mov	r1, r6
   20ef8:	f7ff ffd6 	bl	20ea8 <bt_mesh_aes_cmac_one>
	if (err < 0) {
   20efc:	2800      	cmp	r0, #0
   20efe:	db0a      	blt.n	20f16 <bt_mesh_k1+0x2e>
	return bt_mesh_aes_cmac_one(okm, info, strlen(info), okm);
   20f00:	4620      	mov	r0, r4
   20f02:	f7fd f869 	bl	1dfd8 <strlen>
   20f06:	462b      	mov	r3, r5
   20f08:	4602      	mov	r2, r0
   20f0a:	4621      	mov	r1, r4
   20f0c:	4628      	mov	r0, r5
}
   20f0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_mesh_aes_cmac_one(okm, info, strlen(info), okm);
   20f12:	f7ff bfc9 	b.w	20ea8 <bt_mesh_aes_cmac_one>
}
   20f16:	bd70      	pop	{r4, r5, r6, pc}

00020f18 <bt_mesh_net_encrypt>:
{
   20f18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   20f1c:	680c      	ldr	r4, [r1, #0]
{
   20f1e:	4607      	mov	r7, r0
   20f20:	4610      	mov	r0, r2
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   20f22:	f994 2001 	ldrsb.w	r2, [r4, #1]
   20f26:	f894 9001 	ldrb.w	r9, [r4, #1]
	nonce[2] = pdu[2];
   20f2a:	f894 8002 	ldrb.w	r8, [r4, #2]
	nonce[3] = pdu[3];
   20f2e:	f894 e003 	ldrb.w	lr, [r4, #3]
	nonce[4] = pdu[4];
   20f32:	f894 c004 	ldrb.w	ip, [r4, #4]
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   20f36:	2a00      	cmp	r2, #0
{
   20f38:	460d      	mov	r5, r1
	nonce[6] = pdu[6];
   20f3a:	79a2      	ldrb	r2, [r4, #6]
	nonce[5] = pdu[5];
   20f3c:	7961      	ldrb	r1, [r4, #5]
{
   20f3e:	b089      	sub	sp, #36	; 0x24
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   20f40:	bfb4      	ite	lt
   20f42:	2608      	movlt	r6, #8
   20f44:	2604      	movge	r6, #4
	if (IS_ENABLED(CONFIG_BT_MESH_PROXY) && proxy) {
   20f46:	b373      	cbz	r3, 20fa6 <bt_mesh_net_encrypt+0x8e>
	nonce[0] = 0x03;
   20f48:	2303      	movs	r3, #3
   20f4a:	f88d 3010 	strb.w	r3, [sp, #16]
	nonce[1] = 0x00;
   20f4e:	2300      	movs	r3, #0
   20f50:	f88d 3011 	strb.w	r3, [sp, #17]
	nonce[5] = pdu[5];
   20f54:	f88d 1015 	strb.w	r1, [sp, #21]
	sys_put_be32(iv_index, &nonce[9]);
   20f58:	f10d 0119 	add.w	r1, sp, #25
	nonce[3] = pdu[3];
   20f5c:	f88d e013 	strb.w	lr, [sp, #19]
	nonce[4] = pdu[4];
   20f60:	f88d c014 	strb.w	ip, [sp, #20]
	nonce[6] = pdu[6];
   20f64:	f88d 2016 	strb.w	r2, [sp, #22]
	nonce[7] = 0U;
   20f68:	f88d 3017 	strb.w	r3, [sp, #23]
	nonce[8] = 0U;
   20f6c:	f88d 3018 	strb.w	r3, [sp, #24]
	nonce[2] = pdu[2];
   20f70:	f88d 8012 	strb.w	r8, [sp, #18]
	sys_put_be32(iv_index, &nonce[9]);
   20f74:	f7ff ff4d 	bl	20e12 <sys_put_be32>
	err = bt_ccm_encrypt(key, nonce, &buf->data[7], buf->len - 7, NULL, 0,
   20f78:	682a      	ldr	r2, [r5, #0]
   20f7a:	88ab      	ldrh	r3, [r5, #4]
   20f7c:	3207      	adds	r2, #7
   20f7e:	2100      	movs	r1, #0
   20f80:	e9cd 1100 	strd	r1, r1, [sp]
   20f84:	e9cd 2602 	strd	r2, r6, [sp, #8]
   20f88:	3b07      	subs	r3, #7
   20f8a:	a904      	add	r1, sp, #16
   20f8c:	4638      	mov	r0, r7
   20f8e:	f7fd fa51 	bl	1e434 <bt_ccm_encrypt>
	if (!err) {
   20f92:	4604      	mov	r4, r0
   20f94:	b918      	cbnz	r0, 20f9e <bt_mesh_net_encrypt+0x86>
		net_buf_simple_add(buf, mic_len);
   20f96:	4631      	mov	r1, r6
   20f98:	4628      	mov	r0, r5
   20f9a:	f003 febc 	bl	24d16 <net_buf_simple_add>
}
   20f9e:	4620      	mov	r0, r4
   20fa0:	b009      	add	sp, #36	; 0x24
   20fa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	nonce[0] = 0x00;
   20fa6:	f88d 3010 	strb.w	r3, [sp, #16]
	nonce[1] = pdu[1];
   20faa:	f88d 9011 	strb.w	r9, [sp, #17]
   20fae:	e7d1      	b.n	20f54 <bt_mesh_net_encrypt+0x3c>

00020fb0 <bt_mesh_net_decrypt>:
{
   20fb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   20fb4:	680c      	ldr	r4, [r1, #0]
{
   20fb6:	4606      	mov	r6, r0
   20fb8:	4610      	mov	r0, r2
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   20fba:	f994 2001 	ldrsb.w	r2, [r4, #1]
   20fbe:	f894 9001 	ldrb.w	r9, [r4, #1]
	nonce[2] = pdu[2];
   20fc2:	f894 8002 	ldrb.w	r8, [r4, #2]
	nonce[3] = pdu[3];
   20fc6:	f894 e003 	ldrb.w	lr, [r4, #3]
	nonce[4] = pdu[4];
   20fca:	f894 c004 	ldrb.w	ip, [r4, #4]
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   20fce:	2a00      	cmp	r2, #0
{
   20fd0:	460d      	mov	r5, r1
	nonce[6] = pdu[6];
   20fd2:	79a2      	ldrb	r2, [r4, #6]
	nonce[5] = pdu[5];
   20fd4:	7961      	ldrb	r1, [r4, #5]
{
   20fd6:	b089      	sub	sp, #36	; 0x24
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   20fd8:	bfb4      	ite	lt
   20fda:	2708      	movlt	r7, #8
   20fdc:	2704      	movge	r7, #4
	if (IS_ENABLED(CONFIG_BT_MESH_PROXY) && proxy) {
   20fde:	b353      	cbz	r3, 21036 <bt_mesh_net_decrypt+0x86>
	nonce[0] = 0x03;
   20fe0:	2303      	movs	r3, #3
   20fe2:	f88d 3010 	strb.w	r3, [sp, #16]
	nonce[1] = 0x00;
   20fe6:	2300      	movs	r3, #0
   20fe8:	f88d 3011 	strb.w	r3, [sp, #17]
	nonce[5] = pdu[5];
   20fec:	f88d 1015 	strb.w	r1, [sp, #21]
	sys_put_be32(iv_index, &nonce[9]);
   20ff0:	f10d 0119 	add.w	r1, sp, #25
	nonce[3] = pdu[3];
   20ff4:	f88d e013 	strb.w	lr, [sp, #19]
	nonce[4] = pdu[4];
   20ff8:	f88d c014 	strb.w	ip, [sp, #20]
	nonce[6] = pdu[6];
   20ffc:	f88d 2016 	strb.w	r2, [sp, #22]
	nonce[7] = 0U;
   21000:	f88d 3017 	strb.w	r3, [sp, #23]
	nonce[8] = 0U;
   21004:	f88d 3018 	strb.w	r3, [sp, #24]
	nonce[2] = pdu[2];
   21008:	f88d 8012 	strb.w	r8, [sp, #18]
	sys_put_be32(iv_index, &nonce[9]);
   2100c:	f7ff ff01 	bl	20e12 <sys_put_be32>
	buf->len -= mic_len;
   21010:	88ab      	ldrh	r3, [r5, #4]
	return bt_ccm_decrypt(key, nonce, &buf->data[7], buf->len - 7, NULL, 0,
   21012:	682a      	ldr	r2, [r5, #0]
	buf->len -= mic_len;
   21014:	1bdb      	subs	r3, r3, r7
	return bt_ccm_decrypt(key, nonce, &buf->data[7], buf->len - 7, NULL, 0,
   21016:	3207      	adds	r2, #7
	buf->len -= mic_len;
   21018:	b29b      	uxth	r3, r3
	return bt_ccm_decrypt(key, nonce, &buf->data[7], buf->len - 7, NULL, 0,
   2101a:	2100      	movs	r1, #0
   2101c:	e9cd 1100 	strd	r1, r1, [sp]
	buf->len -= mic_len;
   21020:	80ab      	strh	r3, [r5, #4]
	return bt_ccm_decrypt(key, nonce, &buf->data[7], buf->len - 7, NULL, 0,
   21022:	e9cd 2702 	strd	r2, r7, [sp, #8]
   21026:	3b07      	subs	r3, #7
   21028:	a904      	add	r1, sp, #16
   2102a:	4630      	mov	r0, r6
   2102c:	f7fd f9d3 	bl	1e3d6 <bt_ccm_decrypt>
}
   21030:	b009      	add	sp, #36	; 0x24
   21032:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	nonce[0] = 0x00;
   21036:	f88d 3010 	strb.w	r3, [sp, #16]
	nonce[1] = pdu[1];
   2103a:	f88d 9011 	strb.w	r9, [sp, #17]
   2103e:	e7d5      	b.n	20fec <bt_mesh_net_decrypt+0x3c>

00021040 <bt_mesh_app_encrypt>:
{
   21040:	b570      	push	{r4, r5, r6, lr}
   21042:	460d      	mov	r5, r1
   21044:	b088      	sub	sp, #32
   21046:	4606      	mov	r6, r0
	create_app_nonce(nonce, ctx);
   21048:	a804      	add	r0, sp, #16
{
   2104a:	4614      	mov	r4, r2
	create_app_nonce(nonce, ctx);
   2104c:	f7ff feea 	bl	20e24 <create_app_nonce>
	err = bt_ccm_encrypt(key, nonce, buf->data, buf->len, ctx->ad,
   21050:	692b      	ldr	r3, [r5, #16]
   21052:	7868      	ldrb	r0, [r5, #1]
   21054:	6822      	ldr	r2, [r4, #0]
   21056:	2b00      	cmp	r3, #0
   21058:	bf14      	ite	ne
   2105a:	2110      	movne	r1, #16
   2105c:	2100      	moveq	r1, #0
   2105e:	2800      	cmp	r0, #0
   21060:	bf14      	ite	ne
   21062:	2008      	movne	r0, #8
   21064:	2004      	moveq	r0, #4
   21066:	e9cd 3100 	strd	r3, r1, [sp]
   2106a:	e9cd 2002 	strd	r2, r0, [sp, #8]
   2106e:	88a3      	ldrh	r3, [r4, #4]
   21070:	4630      	mov	r0, r6
   21072:	a904      	add	r1, sp, #16
   21074:	f7fd f9de 	bl	1e434 <bt_ccm_encrypt>
	if (!err) {
   21078:	4606      	mov	r6, r0
   2107a:	b938      	cbnz	r0, 2108c <bt_mesh_app_encrypt+0x4c>
		net_buf_simple_add(buf, APP_MIC_LEN(ctx->aszmic));
   2107c:	786b      	ldrb	r3, [r5, #1]
   2107e:	2b00      	cmp	r3, #0
   21080:	bf14      	ite	ne
   21082:	2108      	movne	r1, #8
   21084:	2104      	moveq	r1, #4
   21086:	4620      	mov	r0, r4
   21088:	f003 fe45 	bl	24d16 <net_buf_simple_add>
}
   2108c:	4630      	mov	r0, r6
   2108e:	b008      	add	sp, #32
   21090:	bd70      	pop	{r4, r5, r6, pc}

00021092 <bt_mesh_app_decrypt>:
{
   21092:	b5f0      	push	{r4, r5, r6, r7, lr}
   21094:	460d      	mov	r5, r1
   21096:	b089      	sub	sp, #36	; 0x24
   21098:	4607      	mov	r7, r0
	create_app_nonce(nonce, ctx);
   2109a:	a804      	add	r0, sp, #16
{
   2109c:	4614      	mov	r4, r2
   2109e:	461e      	mov	r6, r3
	create_app_nonce(nonce, ctx);
   210a0:	f7ff fec0 	bl	20e24 <create_app_nonce>
	err = bt_ccm_decrypt(key, nonce, buf->data, buf->len, ctx->ad,
   210a4:	692b      	ldr	r3, [r5, #16]
   210a6:	7868      	ldrb	r0, [r5, #1]
   210a8:	6831      	ldr	r1, [r6, #0]
   210aa:	2b00      	cmp	r3, #0
   210ac:	bf14      	ite	ne
   210ae:	2210      	movne	r2, #16
   210b0:	2200      	moveq	r2, #0
   210b2:	2800      	cmp	r0, #0
   210b4:	bf14      	ite	ne
   210b6:	2008      	movne	r0, #8
   210b8:	2004      	moveq	r0, #4
   210ba:	e9cd 1002 	strd	r1, r0, [sp, #8]
   210be:	e9cd 3200 	strd	r3, r2, [sp]
   210c2:	a904      	add	r1, sp, #16
   210c4:	88a3      	ldrh	r3, [r4, #4]
   210c6:	6822      	ldr	r2, [r4, #0]
   210c8:	4638      	mov	r0, r7
   210ca:	f7fd f984 	bl	1e3d6 <bt_ccm_decrypt>
	if (!err) {
   210ce:	4605      	mov	r5, r0
   210d0:	b918      	cbnz	r0, 210da <bt_mesh_app_decrypt+0x48>
		net_buf_simple_add(out, buf->len);
   210d2:	88a1      	ldrh	r1, [r4, #4]
   210d4:	4630      	mov	r0, r6
   210d6:	f003 fe1e 	bl	24d16 <net_buf_simple_add>
}
   210da:	4628      	mov	r0, r5
   210dc:	b009      	add	sp, #36	; 0x24
   210de:	bdf0      	pop	{r4, r5, r6, r7, pc}

000210e0 <bt_mesh_beacon_auth>:
}

int bt_mesh_beacon_auth(const uint8_t beacon_key[16], uint8_t flags,
			const uint8_t net_id[8], uint32_t iv_index,
			uint8_t auth[8])
{
   210e0:	b530      	push	{r4, r5, lr}
   210e2:	b089      	sub	sp, #36	; 0x24
   210e4:	4604      	mov	r4, r0
   210e6:	4608      	mov	r0, r1
   210e8:	461d      	mov	r5, r3
   210ea:	4611      	mov	r1, r2

	BT_DBG("BeaconKey %s", bt_hex(beacon_key, 16));
	BT_DBG("NetId %s", bt_hex(net_id, 8));
	BT_DBG("IV Index 0x%08x", iv_index);

	msg[0] = flags;
   210ec:	f88d 0000 	strb.w	r0, [sp]
	memcpy(&msg[1], net_id, 8);
   210f0:	2208      	movs	r2, #8
   210f2:	f10d 0001 	add.w	r0, sp, #1
   210f6:	f7fc ff9c 	bl	1e032 <memcpy>
	sys_put_be32(iv_index, &msg[9]);
   210fa:	f10d 0109 	add.w	r1, sp, #9
   210fe:	4628      	mov	r0, r5
   21100:	f7ff fe87 	bl	20e12 <sys_put_be32>

	BT_DBG("BeaconMsg %s", bt_hex(msg, sizeof(msg)));

	err = bt_mesh_aes_cmac_one(beacon_key, msg, sizeof(msg), tmp);
   21104:	4620      	mov	r0, r4
   21106:	ab04      	add	r3, sp, #16
   21108:	220d      	movs	r2, #13
   2110a:	4669      	mov	r1, sp
   2110c:	f7ff fecc 	bl	20ea8 <bt_mesh_aes_cmac_one>
	if (!err) {
   21110:	4604      	mov	r4, r0
   21112:	b920      	cbnz	r0, 2111e <bt_mesh_beacon_auth+0x3e>
		memcpy(auth, tmp, 8);
   21114:	980c      	ldr	r0, [sp, #48]	; 0x30
   21116:	2208      	movs	r2, #8
   21118:	a904      	add	r1, sp, #16
   2111a:	f7fc ff8a 	bl	1e032 <memcpy>
	}

	return err;
}
   2111e:	4620      	mov	r0, r4
   21120:	b009      	add	sp, #36	; 0x24
   21122:	bd30      	pop	{r4, r5, pc}

00021124 <k_uptime_get_32>:
{
   21124:	b508      	push	{r3, lr}
   21126:	f004 ff41 	bl	25fac <z_impl_k_uptime_ticks>
   2112a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2112e:	fba0 3002 	umull	r3, r0, r0, r2
   21132:	fb02 0101 	mla	r1, r2, r1, r0
   21136:	0bd8      	lsrs	r0, r3, #15
}
   21138:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   2113c:	bd08      	pop	{r3, pc}

0002113e <find_group_mod_visitor>:
{
   2113e:	b510      	push	{r4, lr}
	if (mod->elem_idx != ctx->mod->elem_idx) {
   21140:	684b      	ldr	r3, [r1, #4]
   21142:	7902      	ldrb	r2, [r0, #4]
   21144:	791b      	ldrb	r3, [r3, #4]
   21146:	429a      	cmp	r2, r3
   21148:	d109      	bne.n	2115e <find_group_mod_visitor+0x20>
		if (mod->groups[i] == addr) {
   2114a:	89c3      	ldrh	r3, [r0, #14]
	ctx->entry = model_group_get(mod, ctx->addr);
   2114c:	890a      	ldrh	r2, [r1, #8]
		if (mod->groups[i] == addr) {
   2114e:	4293      	cmp	r3, r2
   21150:	f04f 0300 	mov.w	r3, #0
   21154:	d006      	beq.n	21164 <find_group_mod_visitor+0x26>
   21156:	8a04      	ldrh	r4, [r0, #16]
   21158:	4294      	cmp	r4, r2
   2115a:	d002      	beq.n	21162 <find_group_mod_visitor+0x24>
	ctx->entry = model_group_get(mod, ctx->addr);
   2115c:	600b      	str	r3, [r1, #0]
		return BT_MESH_WALK_CONTINUE;
   2115e:	2001      	movs	r0, #1
   21160:	e006      	b.n	21170 <find_group_mod_visitor+0x32>
	for (i = 0; i < ARRAY_SIZE(mod->groups); i++) {
   21162:	2301      	movs	r3, #1
			return &mod->groups[i];
   21164:	3307      	adds	r3, #7
   21166:	eb00 0343 	add.w	r3, r0, r3, lsl #1
		ctx->mod = mod;
   2116a:	e9c1 3000 	strd	r3, r0, [r1]
		return BT_MESH_WALK_STOP;
   2116e:	2000      	movs	r0, #0
}
   21170:	bd10      	pop	{r4, pc}

00021172 <publish_sent>:
{
   21172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_mesh_model_pub *pub = mod->pub;
   21176:	688d      	ldr	r5, [r1, #8]
{
   21178:	460e      	mov	r6, r1
	elapsed = k_uptime_get_32() - pub->period_start;
   2117a:	f7ff ffd3 	bl	21124 <k_uptime_get_32>
   2117e:	68ec      	ldr	r4, [r5, #12]
	if (mod->pub->count) {
   21180:	68b5      	ldr	r5, [r6, #8]
	elapsed = k_uptime_get_32() - pub->period_start;
   21182:	4601      	mov	r1, r0
   21184:	1b07      	subs	r7, r0, r4
	if (mod->pub->count) {
   21186:	7ae8      	ldrb	r0, [r5, #11]
   21188:	f010 0ff0 	tst.w	r0, #240	; 0xf0
   2118c:	d027      	beq.n	211de <publish_sent+0x6c>
		period = BT_MESH_PUB_TRANSMIT_INT(mod->pub->retransmit);
   2118e:	7a6a      	ldrb	r2, [r5, #9]
   21190:	ea4f 0cd2 	mov.w	ip, r2, lsr #3
		period *= BT_MESH_PUB_MSG_NUM(mod->pub);
   21194:	f002 0207 	and.w	r2, r2, #7
		period = BT_MESH_PUB_TRANSMIT_INT(mod->pub->retransmit);
   21198:	2332      	movs	r3, #50	; 0x32
		period *= BT_MESH_PUB_MSG_NUM(mod->pub);
   2119a:	3201      	adds	r2, #1
		period = BT_MESH_PUB_TRANSMIT_INT(mod->pub->retransmit);
   2119c:	fb0c 3303 	mla	r3, ip, r3, r3
		period *= BT_MESH_PUB_MSG_NUM(mod->pub);
   211a0:	eba2 1010 	sub.w	r0, r2, r0, lsr #4
		if (period && elapsed >= period) {
   211a4:	4343      	muls	r3, r0
   211a6:	d01a      	beq.n	211de <publish_sent+0x6c>
   211a8:	429f      	cmp	r7, r3
	if (elapsed >= period) {
   211aa:	d21f      	bcs.n	211ec <publish_sent+0x7a>
	return period - elapsed;
   211ac:	1a64      	subs	r4, r4, r1
	if (delay) {
   211ae:	18e0      	adds	r0, r4, r3
   211b0:	d01e      	beq.n	211f0 <publish_sent+0x7e>
		k_work_schedule(&mod->pub->timer, K_MSEC(delay));
   211b2:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
   211b6:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   211ba:	f240 30e7 	movw	r0, #999	; 0x3e7
   211be:	2100      	movs	r1, #0
   211c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   211c4:	2300      	movs	r3, #0
   211c6:	fbc4 0106 	smlal	r0, r1, r4, r6
   211ca:	f7e0 f955 	bl	1478 <__aeabi_uldivmod>
   211ce:	4602      	mov	r2, r0
   211d0:	460b      	mov	r3, r1
   211d2:	f105 0018 	add.w	r0, r5, #24
}
   211d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_work_schedule(&mod->pub->timer, K_MSEC(delay));
   211da:	f7fa ba69 	b.w	1b6b0 <k_work_schedule>
		period = bt_mesh_model_pub_period_get(mod);
   211de:	4630      	mov	r0, r6
   211e0:	f7eb fe92 	bl	cf08 <bt_mesh_model_pub_period_get>
   211e4:	4603      	mov	r3, r0
		if (!period) {
   211e6:	b118      	cbz	r0, 211f0 <publish_sent+0x7e>
	if (elapsed >= period) {
   211e8:	4287      	cmp	r7, r0
   211ea:	e7de      	b.n	211aa <publish_sent+0x38>
			return 1;
   211ec:	2001      	movs	r0, #1
   211ee:	e7e0      	b.n	211b2 <publish_sent+0x40>
}
   211f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000211f4 <publish_start>:
{
   211f4:	4608      	mov	r0, r1
   211f6:	4611      	mov	r1, r2
	if (err) {
   211f8:	b108      	cbz	r0, 211fe <publish_start+0xa>
		publish_sent(err, user_data);
   211fa:	f7ff bfba 	b.w	21172 <publish_sent>
}
   211fe:	4770      	bx	lr

00021200 <bt_mesh_msg_send>:
{
   21200:	b530      	push	{r4, r5, lr}
   21202:	b085      	sub	sp, #20
   21204:	461d      	mov	r5, r3
	struct bt_mesh_net_tx tx = {
   21206:	2300      	movs	r3, #0
   21208:	e9cd 0302 	strd	r0, r3, [sp, #8]
{
   2120c:	460c      	mov	r4, r1
	struct bt_mesh_net_tx tx = {
   2120e:	9301      	str	r3, [sp, #4]
   21210:	f8ad 200c 	strh.w	r2, [sp, #12]
	if (!bt_mesh_is_provisioned()) {
   21214:	f7e8 fec0 	bl	9f98 <bt_mesh_is_provisioned>
   21218:	b138      	cbz	r0, 2122a <bt_mesh_msg_send+0x2a>
	return bt_mesh_trans_send(&tx, buf, cb, cb_data);
   2121a:	9b08      	ldr	r3, [sp, #32]
   2121c:	462a      	mov	r2, r5
   2121e:	4621      	mov	r1, r4
   21220:	a801      	add	r0, sp, #4
   21222:	f7ea feeb 	bl	bffc <bt_mesh_trans_send>
}
   21226:	b005      	add	sp, #20
   21228:	bd30      	pop	{r4, r5, pc}
		return -EAGAIN;
   2122a:	f06f 000a 	mvn.w	r0, #10
   2122e:	e7fa      	b.n	21226 <bt_mesh_msg_send+0x26>

00021230 <bt_mesh_model_has_key>:
		if (mod->keys[i] == key ||
   21230:	8983      	ldrh	r3, [r0, #12]
   21232:	428b      	cmp	r3, r1
   21234:	d00a      	beq.n	2124c <bt_mesh_model_has_key+0x1c>
   21236:	f64f 72fc 	movw	r2, #65532	; 0xfffc
   2123a:	4293      	cmp	r3, r2
   2123c:	d108      	bne.n	21250 <bt_mesh_model_has_key+0x20>
		     BT_MESH_IS_DEV_KEY(key))) {
   2123e:	1cc8      	adds	r0, r1, #3
		    (mod->keys[i] == BT_MESH_KEY_DEV_ANY &&
   21240:	b280      	uxth	r0, r0
   21242:	2801      	cmp	r0, #1
   21244:	bf8c      	ite	hi
   21246:	2000      	movhi	r0, #0
   21248:	2001      	movls	r0, #1
   2124a:	4770      	bx	lr
			return true;
   2124c:	2001      	movs	r0, #1
   2124e:	4770      	bx	lr
	return false;
   21250:	2000      	movs	r0, #0
}
   21252:	4770      	bx	lr

00021254 <bt_mesh_model_send>:
{
   21254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21258:	460c      	mov	r4, r1
	if (!bt_mesh_model_has_key(model, ctx->app_idx)) {
   2125a:	8849      	ldrh	r1, [r1, #2]
{
   2125c:	4607      	mov	r7, r0
   2125e:	4615      	mov	r5, r2
   21260:	461e      	mov	r6, r3
	if (!bt_mesh_model_has_key(model, ctx->app_idx)) {
   21262:	f7ff ffe5 	bl	21230 <bt_mesh_model_has_key>
   21266:	b150      	cbz	r0, 2127e <bt_mesh_model_send+0x2a>
	return bt_mesh_msg_send(ctx, msg, bt_mesh_model_elem(model)->addr, cb, cb_data);
   21268:	4638      	mov	r0, r7
   2126a:	f7eb fe71 	bl	cf50 <bt_mesh_model_elem>
   2126e:	4629      	mov	r1, r5
   21270:	8802      	ldrh	r2, [r0, #0]
   21272:	4633      	mov	r3, r6
   21274:	4620      	mov	r0, r4
}
   21276:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_mesh_msg_send(ctx, msg, bt_mesh_model_elem(model)->addr, cb, cb_data);
   2127a:	f7ff bfc1 	b.w	21200 <bt_mesh_msg_send>
}
   2127e:	f06f 0015 	mvn.w	r0, #21
   21282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00021286 <bt_mesh_model_find_vnd>:
{
   21286:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0U; i < elem->vnd_model_count; i++) {
   21288:	7947      	ldrb	r7, [r0, #5]
{
   2128a:	4604      	mov	r4, r0
	for (i = 0U; i < elem->vnd_model_count; i++) {
   2128c:	2300      	movs	r3, #0
		if (elem->vnd_models[i].vnd.company == company &&
   2128e:	f04f 0c24 	mov.w	ip, #36	; 0x24
	for (i = 0U; i < elem->vnd_model_count; i++) {
   21292:	b2d8      	uxtb	r0, r3
   21294:	4287      	cmp	r7, r0
   21296:	d801      	bhi.n	2129c <bt_mesh_model_find_vnd+0x16>
	return NULL;
   21298:	2000      	movs	r0, #0
}
   2129a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (elem->vnd_models[i].vnd.company == company &&
   2129c:	68e6      	ldr	r6, [r4, #12]
   2129e:	fb0c f503 	mul.w	r5, ip, r3
   212a2:	1970      	adds	r0, r6, r5
   212a4:	5b75      	ldrh	r5, [r6, r5]
   212a6:	428d      	cmp	r5, r1
   212a8:	d102      	bne.n	212b0 <bt_mesh_model_find_vnd+0x2a>
   212aa:	8845      	ldrh	r5, [r0, #2]
   212ac:	4295      	cmp	r5, r2
   212ae:	d0f4      	beq.n	2129a <bt_mesh_model_find_vnd+0x14>
	for (i = 0U; i < elem->vnd_model_count; i++) {
   212b0:	3301      	adds	r3, #1
   212b2:	e7ee      	b.n	21292 <bt_mesh_model_find_vnd+0xc>

000212b4 <bt_mesh_model_find>:
{
   212b4:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0U; i < elem->model_count; i++) {
   212b6:	7906      	ldrb	r6, [r0, #4]
{
   212b8:	4602      	mov	r2, r0
	for (i = 0U; i < elem->model_count; i++) {
   212ba:	2300      	movs	r3, #0
		if (elem->models[i].id == id) {
   212bc:	2724      	movs	r7, #36	; 0x24
	for (i = 0U; i < elem->model_count; i++) {
   212be:	b2d8      	uxtb	r0, r3
   212c0:	4286      	cmp	r6, r0
   212c2:	d801      	bhi.n	212c8 <bt_mesh_model_find+0x14>
	return NULL;
   212c4:	2000      	movs	r0, #0
   212c6:	e008      	b.n	212da <bt_mesh_model_find+0x26>
		if (elem->models[i].id == id) {
   212c8:	fb07 f403 	mul.w	r4, r7, r3
   212cc:	6895      	ldr	r5, [r2, #8]
   212ce:	1928      	adds	r0, r5, r4
   212d0:	5b2c      	ldrh	r4, [r5, r4]
   212d2:	428c      	cmp	r4, r1
   212d4:	f103 0301 	add.w	r3, r3, #1
   212d8:	d1f1      	bne.n	212be <bt_mesh_model_find+0xa>
}
   212da:	bdf0      	pop	{r4, r5, r6, r7, pc}

000212dc <bt_mesh_model_extensions_walk>:

void bt_mesh_model_extensions_walk(struct bt_mesh_model *model,
				   enum bt_mesh_walk (*cb)(struct bt_mesh_model *mod,
							   void *user_data),
				   void *user_data)
{
   212dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   212de:	460e      	mov	r6, r1
	(void)cb(model, user_data);
	return;
#else
	struct bt_mesh_model *it;

	if (cb(model, user_data) == BT_MESH_WALK_STOP || !model->next) {
   212e0:	4611      	mov	r1, r2
{
   212e2:	4605      	mov	r5, r0
   212e4:	4617      	mov	r7, r2
	if (cb(model, user_data) == BT_MESH_WALK_STOP || !model->next) {
   212e6:	47b0      	blx	r6
   212e8:	b108      	cbz	r0, 212ee <bt_mesh_model_extensions_walk+0x12>
   212ea:	69ec      	ldr	r4, [r5, #28]
   212ec:	b934      	cbnz	r4, 212fc <bt_mesh_model_extensions_walk+0x20>
		if (cb(it, user_data) == BT_MESH_WALK_STOP) {
			return;
		}
	}
#endif
}
   212ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb(it, user_data) == BT_MESH_WALK_STOP) {
   212f0:	4639      	mov	r1, r7
   212f2:	4620      	mov	r0, r4
   212f4:	47b0      	blx	r6
   212f6:	2800      	cmp	r0, #0
   212f8:	d0f9      	beq.n	212ee <bt_mesh_model_extensions_walk+0x12>
	for (it = model->next; it != model; it = it->next) {
   212fa:	69e4      	ldr	r4, [r4, #28]
   212fc:	42ac      	cmp	r4, r5
   212fe:	d1f7      	bne.n	212f0 <bt_mesh_model_extensions_walk+0x14>
   21300:	e7f5      	b.n	212ee <bt_mesh_model_extensions_walk+0x12>

00021302 <bt_mesh_model_msg_init>:
#define BT_DBG_ENABLED IS_ENABLED(CONFIG_BT_MESH_DEBUG_ACCESS)
#define LOG_MODULE_NAME bt_mesh_msg
#include "common/log.h"

void bt_mesh_model_msg_init(struct net_buf_simple *msg, uint32_t opcode)
{
   21302:	b538      	push	{r3, r4, r5, lr}
	if (!buf->__buf) {
   21304:	6883      	ldr	r3, [r0, #8]
   21306:	4604      	mov	r4, r0
   21308:	b913      	cbnz	r3, 21310 <bt_mesh_model_msg_init+0xe>
		buf->__buf = (uint8_t *)buf + sizeof(*buf);
   2130a:	f100 030c 	add.w	r3, r0, #12
   2130e:	6083      	str	r3, [r0, #8]
	buf->data = buf->__buf + reserve_head;
   21310:	68a3      	ldr	r3, [r4, #8]
   21312:	6023      	str	r3, [r4, #0]
	net_buf_simple_init(msg, 0);

	switch (BT_MESH_MODEL_OP_LEN(opcode)) {
   21314:	29ff      	cmp	r1, #255	; 0xff
	buf->len = 0U;
   21316:	f04f 0300 	mov.w	r3, #0
   2131a:	80a3      	strh	r3, [r4, #4]
   2131c:	d805      	bhi.n	2132a <bt_mesh_model_msg_init+0x28>
	case 1:
		net_buf_simple_add_u8(msg, opcode);
   2131e:	4620      	mov	r0, r4
   21320:	b2c9      	uxtb	r1, r1
		break;
	default:
		BT_WARN("Unknown opcode format");
		break;
	}
}
   21322:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_simple_add_u8(msg, opcode);
   21326:	f003 bd05 	b.w	24d34 <net_buf_simple_add_u8>
	switch (BT_MESH_MODEL_OP_LEN(opcode)) {
   2132a:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
		net_buf_simple_add_be16(msg, opcode);
   2132e:	b28d      	uxth	r5, r1
	switch (BT_MESH_MODEL_OP_LEN(opcode)) {
   21330:	d205      	bcs.n	2133e <bt_mesh_model_msg_init+0x3c>
		net_buf_simple_add_be16(msg, opcode);
   21332:	4629      	mov	r1, r5
   21334:	4620      	mov	r0, r4
}
   21336:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_simple_add_be16(msg, opcode);
   2133a:	f003 bd0d 	b.w	24d58 <net_buf_simple_add_be16>
		net_buf_simple_add_u8(msg, ((opcode >> 16) & 0xff));
   2133e:	f3c1 4107 	ubfx	r1, r1, #16, #8
   21342:	4620      	mov	r0, r4
   21344:	f003 fcf6 	bl	24d34 <net_buf_simple_add_u8>
		net_buf_simple_add_le16(msg, opcode & 0xffff);
   21348:	4629      	mov	r1, r5
   2134a:	4620      	mov	r0, r4
}
   2134c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_simple_add_le16(msg, opcode & 0xffff);
   21350:	f003 bcf8 	b.w	24d44 <net_buf_simple_add_le16>

00021354 <cfg_srv_init>:
{
   21354:	4603      	mov	r3, r0
	if (!bt_mesh_model_in_primary(model)) {
   21356:	7900      	ldrb	r0, [r0, #4]
   21358:	b918      	cbnz	r0, 21362 <cfg_srv_init+0xe>
	model->keys[0] = BT_MESH_KEY_DEV_LOCAL;
   2135a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   2135e:	819a      	strh	r2, [r3, #12]
	return 0;
   21360:	4770      	bx	lr
		return -EINVAL;
   21362:	f06f 0015 	mvn.w	r0, #21
}
   21366:	4770      	bx	lr

00021368 <key_idx_pack>:

#include <sys/byteorder.h>

static inline void key_idx_pack(struct net_buf_simple *buf,
				uint16_t idx1, uint16_t idx2)
{
   21368:	b538      	push	{r3, r4, r5, lr}
	net_buf_simple_add_le16(buf, idx1 | ((idx2 & 0x00f) << 12));
   2136a:	ea41 3102 	orr.w	r1, r1, r2, lsl #12
{
   2136e:	4605      	mov	r5, r0
   21370:	4614      	mov	r4, r2
	net_buf_simple_add_le16(buf, idx1 | ((idx2 & 0x00f) << 12));
   21372:	b289      	uxth	r1, r1
   21374:	f003 fce6 	bl	24d44 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(buf, idx2 >> 4);
   21378:	f3c4 1107 	ubfx	r1, r4, #4, #8
   2137c:	4628      	mov	r0, r5
}
   2137e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_simple_add_u8(buf, idx2 >> 4);
   21382:	f003 bcd7 	b.w	24d34 <net_buf_simple_add_u8>

00021386 <send_krp_status>:
{
   21386:	b5f0      	push	{r4, r5, r6, r7, lr}
   21388:	b089      	sub	sp, #36	; 0x24
   2138a:	4605      	mov	r5, r0
   2138c:	460e      	mov	r6, r1
   2138e:	4617      	mov	r7, r2
   21390:	461c      	mov	r4, r3
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_KRP_STATUS, 4);
   21392:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
   21396:	ab02      	add	r3, sp, #8
	bt_mesh_model_msg_init(&msg, OP_KRP_STATUS);
   21398:	a805      	add	r0, sp, #20
   2139a:	f248 0117 	movw	r1, #32791	; 0x8017
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_KRP_STATUS, 4);
   2139e:	e9cd 2306 	strd	r2, r3, [sp, #24]
   213a2:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_KRP_STATUS);
   213a4:	f7ff ffad 	bl	21302 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   213a8:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
   213ac:	a805      	add	r0, sp, #20
   213ae:	f003 fcc1 	bl	24d34 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, idx);
   213b2:	4639      	mov	r1, r7
   213b4:	a805      	add	r0, sp, #20
   213b6:	f003 fcc5 	bl	24d44 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(&msg, phase);
   213ba:	4621      	mov	r1, r4
   213bc:	a805      	add	r0, sp, #20
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   213be:	2400      	movs	r4, #0
	net_buf_simple_add_u8(&msg, phase);
   213c0:	f003 fcb8 	bl	24d34 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   213c4:	9400      	str	r4, [sp, #0]
   213c6:	4623      	mov	r3, r4
   213c8:	aa05      	add	r2, sp, #20
   213ca:	4631      	mov	r1, r6
   213cc:	4628      	mov	r0, r5
   213ce:	f7ff ff41 	bl	21254 <bt_mesh_model_send>
}
   213d2:	4620      	mov	r0, r4
   213d4:	b009      	add	sp, #36	; 0x24
   213d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000213d8 <send_node_id_status>:
{
   213d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   213da:	b089      	sub	sp, #36	; 0x24
   213dc:	4605      	mov	r5, r0
   213de:	460e      	mov	r6, r1
   213e0:	4617      	mov	r7, r2
   213e2:	461c      	mov	r4, r3
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NODE_IDENTITY_STATUS, 4);
   213e4:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
   213e8:	ab02      	add	r3, sp, #8
	bt_mesh_model_msg_init(&msg, OP_NODE_IDENTITY_STATUS);
   213ea:	a805      	add	r0, sp, #20
   213ec:	f248 0148 	movw	r1, #32840	; 0x8048
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NODE_IDENTITY_STATUS, 4);
   213f0:	e9cd 2306 	strd	r2, r3, [sp, #24]
   213f4:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_NODE_IDENTITY_STATUS);
   213f6:	f7ff ff84 	bl	21302 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   213fa:	4639      	mov	r1, r7
   213fc:	a805      	add	r0, sp, #20
   213fe:	f003 fc99 	bl	24d34 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, net_idx);
   21402:	4621      	mov	r1, r4
   21404:	a805      	add	r0, sp, #20
   21406:	f003 fc9d 	bl	24d44 <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   2140a:	2400      	movs	r4, #0
	net_buf_simple_add_u8(&msg, node_id);
   2140c:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
   21410:	a805      	add	r0, sp, #20
   21412:	f003 fc8f 	bl	24d34 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   21416:	9400      	str	r4, [sp, #0]
   21418:	4623      	mov	r3, r4
   2141a:	aa05      	add	r2, sp, #20
   2141c:	4631      	mov	r1, r6
   2141e:	4628      	mov	r0, r5
   21420:	f7ff ff18 	bl	21254 <bt_mesh_model_send>
}
   21424:	4620      	mov	r0, r4
   21426:	b009      	add	sp, #36	; 0x24
   21428:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002142a <send_net_key_status>:
{
   2142a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2142c:	b089      	sub	sp, #36	; 0x24
   2142e:	4605      	mov	r5, r0
   21430:	460e      	mov	r6, r1
   21432:	4614      	mov	r4, r2
   21434:	461f      	mov	r7, r3
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_KEY_STATUS, 3);
   21436:	f44f 2210 	mov.w	r2, #589824	; 0x90000
   2143a:	ab02      	add	r3, sp, #8
	bt_mesh_model_msg_init(&msg, OP_NET_KEY_STATUS);
   2143c:	a805      	add	r0, sp, #20
   2143e:	f248 0144 	movw	r1, #32836	; 0x8044
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_KEY_STATUS, 3);
   21442:	e9cd 2306 	strd	r2, r3, [sp, #24]
   21446:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_NET_KEY_STATUS);
   21448:	f7ff ff5b 	bl	21302 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   2144c:	4639      	mov	r1, r7
   2144e:	a805      	add	r0, sp, #20
   21450:	f003 fc70 	bl	24d34 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, idx);
   21454:	4621      	mov	r1, r4
   21456:	a805      	add	r0, sp, #20
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   21458:	2400      	movs	r4, #0
	net_buf_simple_add_le16(&msg, idx);
   2145a:	f003 fc73 	bl	24d44 <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   2145e:	9400      	str	r4, [sp, #0]
   21460:	4623      	mov	r3, r4
   21462:	aa05      	add	r2, sp, #20
   21464:	4631      	mov	r1, r6
   21466:	4628      	mov	r0, r5
   21468:	f7ff fef4 	bl	21254 <bt_mesh_model_send>
}
   2146c:	4620      	mov	r0, r4
   2146e:	b009      	add	sp, #36	; 0x24
   21470:	bdf0      	pop	{r4, r5, r6, r7, pc}

00021472 <send_app_key_status>:
{
   21472:	b5f0      	push	{r4, r5, r6, r7, lr}
   21474:	b089      	sub	sp, #36	; 0x24
   21476:	4605      	mov	r5, r0
   21478:	460e      	mov	r6, r1
   2147a:	4617      	mov	r7, r2
   2147c:	461c      	mov	r4, r3
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_APP_KEY_STATUS, 4);
   2147e:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
   21482:	ab02      	add	r3, sp, #8
	bt_mesh_model_msg_init(&msg, OP_APP_KEY_STATUS);
   21484:	a805      	add	r0, sp, #20
   21486:	f248 0103 	movw	r1, #32771	; 0x8003
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_APP_KEY_STATUS, 4);
   2148a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2148e:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_APP_KEY_STATUS);
   21490:	f7ff ff37 	bl	21302 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   21494:	4639      	mov	r1, r7
   21496:	a805      	add	r0, sp, #20
   21498:	f003 fc4c 	bl	24d34 <net_buf_simple_add_u8>
	key_idx_pack(&msg, net_idx, app_idx);
   2149c:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
   214a0:	4622      	mov	r2, r4
   214a2:	a805      	add	r0, sp, #20
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   214a4:	2400      	movs	r4, #0
	key_idx_pack(&msg, net_idx, app_idx);
   214a6:	f7ff ff5f 	bl	21368 <key_idx_pack>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   214aa:	9400      	str	r4, [sp, #0]
   214ac:	4623      	mov	r3, r4
   214ae:	aa05      	add	r2, sp, #20
   214b0:	4631      	mov	r1, r6
   214b2:	4628      	mov	r0, r5
   214b4:	f7ff fece 	bl	21254 <bt_mesh_model_send>
}
   214b8:	4620      	mov	r0, r4
   214ba:	b009      	add	sp, #36	; 0x24
   214bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000214be <krp_set>:
{
   214be:	b5f0      	push	{r4, r5, r6, r7, lr}
   214c0:	4606      	mov	r6, r0
   214c2:	b085      	sub	sp, #20
	idx = net_buf_simple_pull_le16(buf);
   214c4:	4610      	mov	r0, r2
{
   214c6:	4615      	mov	r5, r2
   214c8:	460f      	mov	r7, r1
	idx = net_buf_simple_pull_le16(buf);
   214ca:	f003 fcb7 	bl	24e3c <net_buf_simple_pull_le16>
   214ce:	4604      	mov	r4, r0
	phase = net_buf_simple_pull_u8(buf);
   214d0:	4628      	mov	r0, r5
   214d2:	f003 fcab 	bl	24e2c <net_buf_simple_pull_u8>
	if (idx > 0xfff) {
   214d6:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
	phase = net_buf_simple_pull_u8(buf);
   214da:	f88d 000f 	strb.w	r0, [sp, #15]
	if (idx > 0xfff) {
   214de:	d303      	bcc.n	214e8 <krp_set+0x2a>
		return -EINVAL;
   214e0:	f06f 0015 	mvn.w	r0, #21
}
   214e4:	b005      	add	sp, #20
   214e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = bt_mesh_subnet_kr_phase_set(idx, &phase);
   214e8:	f10d 010f 	add.w	r1, sp, #15
   214ec:	4620      	mov	r0, r4
   214ee:	f7e9 fefd 	bl	b2ec <bt_mesh_subnet_kr_phase_set>
	if (status == STATUS_CANNOT_UPDATE) {
   214f2:	280b      	cmp	r0, #11
   214f4:	d0f4      	beq.n	214e0 <krp_set+0x22>
	return send_krp_status(model, ctx, idx, phase, status);
   214f6:	9000      	str	r0, [sp, #0]
   214f8:	f89d 300f 	ldrb.w	r3, [sp, #15]
   214fc:	4622      	mov	r2, r4
   214fe:	4639      	mov	r1, r7
   21500:	4630      	mov	r0, r6
   21502:	f7ff ff40 	bl	21386 <send_krp_status>
   21506:	e7ed      	b.n	214e4 <krp_set+0x26>

00021508 <krp_get>:
{
   21508:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2150a:	4605      	mov	r5, r0
	idx = net_buf_simple_pull_le16(buf);
   2150c:	4610      	mov	r0, r2
{
   2150e:	460e      	mov	r6, r1
	idx = net_buf_simple_pull_le16(buf);
   21510:	f003 fc94 	bl	24e3c <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
   21514:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
   21518:	4604      	mov	r4, r0
	if (idx > 0xfff) {
   2151a:	d20d      	bcs.n	21538 <krp_get+0x30>
	status = bt_mesh_subnet_kr_phase_get(idx, &kr_phase);
   2151c:	f10d 010f 	add.w	r1, sp, #15
   21520:	f7ff f8f7 	bl	20712 <bt_mesh_subnet_kr_phase_get>
	return send_krp_status(model, ctx, idx, kr_phase, status);
   21524:	f89d 300f 	ldrb.w	r3, [sp, #15]
   21528:	9000      	str	r0, [sp, #0]
   2152a:	4622      	mov	r2, r4
   2152c:	4631      	mov	r1, r6
   2152e:	4628      	mov	r0, r5
   21530:	f7ff ff29 	bl	21386 <send_krp_status>
}
   21534:	b004      	add	sp, #16
   21536:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   21538:	f06f 0015 	mvn.w	r0, #21
   2153c:	e7fa      	b.n	21534 <krp_get+0x2c>

0002153e <lpn_timeout_get>:
{
   2153e:	b570      	push	{r4, r5, r6, lr}
   21540:	b088      	sub	sp, #32
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_LPN_TIMEOUT_STATUS, 5);
   21542:	ab02      	add	r3, sp, #8
{
   21544:	4605      	mov	r5, r0
   21546:	460e      	mov	r6, r1
	lpn_addr = net_buf_simple_pull_le16(buf);
   21548:	4610      	mov	r0, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_LPN_TIMEOUT_STATUS, 5);
   2154a:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
   2154e:	e9cd 1306 	strd	r1, r3, [sp, #24]
   21552:	9305      	str	r3, [sp, #20]
	lpn_addr = net_buf_simple_pull_le16(buf);
   21554:	f003 fc72 	bl	24e3c <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(lpn_addr)) {
   21558:	b203      	sxth	r3, r0
   2155a:	2b00      	cmp	r3, #0
	lpn_addr = net_buf_simple_pull_le16(buf);
   2155c:	4604      	mov	r4, r0
	if (!BT_MESH_ADDR_IS_UNICAST(lpn_addr)) {
   2155e:	dd24      	ble.n	215aa <lpn_timeout_get+0x6c>
	bt_mesh_model_msg_init(&msg, OP_LPN_TIMEOUT_STATUS);
   21560:	f248 012e 	movw	r1, #32814	; 0x802e
   21564:	a805      	add	r0, sp, #20
   21566:	f7ff fecc 	bl	21302 <bt_mesh_model_msg_init>
	net_buf_simple_add_le16(&msg, lpn_addr);
   2156a:	4621      	mov	r1, r4
   2156c:	a805      	add	r0, sp, #20
   2156e:	f003 fbe9 	bl	24d44 <net_buf_simple_add_le16>
	frnd = bt_mesh_friend_find(BT_MESH_KEY_ANY, lpn_addr, true, true);
   21572:	2301      	movs	r3, #1
   21574:	461a      	mov	r2, r3
   21576:	4621      	mov	r1, r4
   21578:	f64f 70ff 	movw	r0, #65535	; 0xffff
   2157c:	f7ec fcce 	bl	df1c <bt_mesh_friend_find>
	if (!frnd) {
   21580:	b188      	cbz	r0, 215a6 <lpn_timeout_get+0x68>
	timeout_steps = frnd->poll_to / 100;
   21582:	6841      	ldr	r1, [r0, #4]
   21584:	2064      	movs	r0, #100	; 0x64
   21586:	fb91 f1f0 	sdiv	r1, r1, r0
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   2158a:	2400      	movs	r4, #0
	net_buf_simple_add_le24(&msg, timeout_steps);
   2158c:	a805      	add	r0, sp, #20
   2158e:	f003 fbed 	bl	24d6c <net_buf_simple_add_le24>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   21592:	9400      	str	r4, [sp, #0]
   21594:	4623      	mov	r3, r4
   21596:	aa05      	add	r2, sp, #20
   21598:	4631      	mov	r1, r6
   2159a:	4628      	mov	r0, r5
   2159c:	f7ff fe5a 	bl	21254 <bt_mesh_model_send>
	return 0;
   215a0:	4620      	mov	r0, r4
}
   215a2:	b008      	add	sp, #32
   215a4:	bd70      	pop	{r4, r5, r6, pc}
		timeout_steps = 0;
   215a6:	4601      	mov	r1, r0
   215a8:	e7ef      	b.n	2158a <lpn_timeout_get+0x4c>
		return -EINVAL;
   215aa:	f06f 0015 	mvn.w	r0, #21
   215ae:	e7f8      	b.n	215a2 <lpn_timeout_get+0x64>

000215b0 <send_friend_status>:
{
   215b0:	b570      	push	{r4, r5, r6, lr}
   215b2:	b088      	sub	sp, #32
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_FRIEND_STATUS, 1);
   215b4:	ab03      	add	r3, sp, #12
   215b6:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   215ba:	4605      	mov	r5, r0
   215bc:	460e      	mov	r6, r1
	bt_mesh_model_msg_init(&msg, OP_FRIEND_STATUS);
   215be:	a805      	add	r0, sp, #20
   215c0:	f248 0111 	movw	r1, #32785	; 0x8011
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_FRIEND_STATUS, 1);
   215c4:	e9cd 2306 	strd	r2, r3, [sp, #24]
   215c8:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_FRIEND_STATUS);
   215ca:	f7ff fe9a 	bl	21302 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_friend_get());
   215ce:	f7e8 fe03 	bl	a1d8 <bt_mesh_friend_get>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   215d2:	2400      	movs	r4, #0
	net_buf_simple_add_u8(&msg, bt_mesh_friend_get());
   215d4:	4601      	mov	r1, r0
   215d6:	a805      	add	r0, sp, #20
   215d8:	f003 fbac 	bl	24d34 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   215dc:	9400      	str	r4, [sp, #0]
   215de:	4623      	mov	r3, r4
   215e0:	aa05      	add	r2, sp, #20
   215e2:	4631      	mov	r1, r6
   215e4:	4628      	mov	r0, r5
   215e6:	f7ff fe35 	bl	21254 <bt_mesh_model_send>
}
   215ea:	4620      	mov	r0, r4
   215ec:	b008      	add	sp, #32
   215ee:	bd70      	pop	{r4, r5, r6, pc}

000215f0 <friend_set>:
{
   215f0:	b538      	push	{r3, r4, r5, lr}
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   215f2:	6813      	ldr	r3, [r2, #0]
{
   215f4:	4604      	mov	r4, r0
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   215f6:	7818      	ldrb	r0, [r3, #0]
   215f8:	2801      	cmp	r0, #1
{
   215fa:	460d      	mov	r5, r1
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   215fc:	d807      	bhi.n	2160e <friend_set+0x1e>
	(void)bt_mesh_friend_set(buf->data[0]);
   215fe:	f7fe fea8 	bl	20352 <bt_mesh_friend_set>
	return send_friend_status(model, ctx);
   21602:	4629      	mov	r1, r5
   21604:	4620      	mov	r0, r4
}
   21606:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return send_friend_status(model, ctx);
   2160a:	f7ff bfd1 	b.w	215b0 <send_friend_status>
}
   2160e:	f06f 0015 	mvn.w	r0, #21
   21612:	bd38      	pop	{r3, r4, r5, pc}

00021614 <friend_get>:
	return send_friend_status(model, ctx);
   21614:	f7ff bfcc 	b.w	215b0 <send_friend_status>

00021618 <reset_send_end>:
	bt_mesh_reset();
   21618:	f7e8 bc7e 	b.w	9f18 <bt_mesh_reset>

0002161c <reset_send_start>:
	if (err) {
   2161c:	b109      	cbz	r1, 21622 <reset_send_start+0x6>
		bt_mesh_reset();
   2161e:	f7e8 bc7b 	b.w	9f18 <bt_mesh_reset>
}
   21622:	4770      	bx	lr

00021624 <send_mod_sub_status>:
{
   21624:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21628:	b08b      	sub	sp, #44	; 0x2c
   2162a:	4617      	mov	r7, r2
   2162c:	461c      	mov	r4, r3
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_SUB_STATUS, 9);
   2162e:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   21632:	ab06      	add	r3, sp, #24
{
   21634:	4605      	mov	r5, r0
   21636:	460e      	mov	r6, r1
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_STATUS);
   21638:	a803      	add	r0, sp, #12
   2163a:	f248 011f 	movw	r1, #32799	; 0x801f
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_SUB_STATUS, 9);
   2163e:	e9cd 2304 	strd	r2, r3, [sp, #16]
   21642:	9303      	str	r3, [sp, #12]
{
   21644:	f89d 9050 	ldrb.w	r9, [sp, #80]	; 0x50
   21648:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_STATUS);
   2164c:	f7ff fe59 	bl	21302 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   21650:	4639      	mov	r1, r7
   21652:	a803      	add	r0, sp, #12
   21654:	f003 fb6e 	bl	24d34 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, elem_addr);
   21658:	4621      	mov	r1, r4
   2165a:	a803      	add	r0, sp, #12
   2165c:	f003 fb72 	bl	24d44 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, sub_addr);
   21660:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   21664:	a803      	add	r0, sp, #12
   21666:	f003 fb6d 	bl	24d44 <net_buf_simple_add_le16>
	if (vnd) {
   2166a:	f1b9 0f00 	cmp.w	r9, #0
   2166e:	d013      	beq.n	21698 <send_mod_sub_status+0x74>
		memcpy(net_buf_simple_add(&msg, 4), mod_id, 4);
   21670:	2104      	movs	r1, #4
   21672:	a803      	add	r0, sp, #12
   21674:	f003 fb4f 	bl	24d16 <net_buf_simple_add>
   21678:	2204      	movs	r2, #4
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   2167a:	2400      	movs	r4, #0
		memcpy(net_buf_simple_add(&msg, 2), mod_id, 2);
   2167c:	4641      	mov	r1, r8
   2167e:	f7fc fcd8 	bl	1e032 <memcpy>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   21682:	9400      	str	r4, [sp, #0]
   21684:	4623      	mov	r3, r4
   21686:	aa03      	add	r2, sp, #12
   21688:	4631      	mov	r1, r6
   2168a:	4628      	mov	r0, r5
   2168c:	f7ff fde2 	bl	21254 <bt_mesh_model_send>
}
   21690:	4620      	mov	r0, r4
   21692:	b00b      	add	sp, #44	; 0x2c
   21694:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		memcpy(net_buf_simple_add(&msg, 2), mod_id, 2);
   21698:	2102      	movs	r1, #2
   2169a:	a803      	add	r0, sp, #12
   2169c:	f003 fb3b 	bl	24d16 <net_buf_simple_add>
   216a0:	2202      	movs	r2, #2
   216a2:	e7ea      	b.n	2167a <send_mod_sub_status+0x56>

000216a4 <node_identity_set>:
{
   216a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   216a6:	4605      	mov	r5, r0
	idx = net_buf_simple_pull_le16(buf);
   216a8:	4610      	mov	r0, r2
{
   216aa:	460e      	mov	r6, r1
   216ac:	4617      	mov	r7, r2
	idx = net_buf_simple_pull_le16(buf);
   216ae:	f003 fbc5 	bl	24e3c <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
   216b2:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
   216b6:	4604      	mov	r4, r0
	if (idx > 0xfff) {
   216b8:	d303      	bcc.n	216c2 <node_identity_set+0x1e>
		return -EINVAL;
   216ba:	f06f 0015 	mvn.w	r0, #21
}
   216be:	b003      	add	sp, #12
   216c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	node_id = net_buf_simple_pull_u8(buf);
   216c2:	4638      	mov	r0, r7
   216c4:	f003 fbb2 	bl	24e2c <net_buf_simple_pull_u8>
	if (node_id != 0x00 && node_id != 0x01) {
   216c8:	2801      	cmp	r0, #1
	node_id = net_buf_simple_pull_u8(buf);
   216ca:	4607      	mov	r7, r0
	if (node_id != 0x00 && node_id != 0x01) {
   216cc:	d8f5      	bhi.n	216ba <node_identity_set+0x16>
	status = bt_mesh_subnet_node_id_set(idx, node_id);
   216ce:	4601      	mov	r1, r0
   216d0:	4620      	mov	r0, r4
   216d2:	f7ff f829 	bl	20728 <bt_mesh_subnet_node_id_set>
	if (status == STATUS_INVALID_NETKEY) {
   216d6:	2804      	cmp	r0, #4
	status = bt_mesh_subnet_node_id_set(idx, node_id);
   216d8:	4602      	mov	r2, r0
	if (status == STATUS_INVALID_NETKEY) {
   216da:	d103      	bne.n	216e4 <node_identity_set+0x40>
		return send_node_id_status(model, ctx, status, idx,
   216dc:	2300      	movs	r3, #0
   216de:	9300      	str	r3, [sp, #0]
	return send_node_id_status(model, ctx, status, idx, node_id);
   216e0:	4623      	mov	r3, r4
   216e2:	e005      	b.n	216f0 <node_identity_set+0x4c>
	if (status == STATUS_FEAT_NOT_SUPP) {
   216e4:	280a      	cmp	r0, #10
   216e6:	d108      	bne.n	216fa <node_identity_set+0x56>
		return send_node_id_status(model, ctx, STATUS_SUCCESS, idx,
   216e8:	2302      	movs	r3, #2
   216ea:	9300      	str	r3, [sp, #0]
   216ec:	2200      	movs	r2, #0
   216ee:	4623      	mov	r3, r4
	return send_node_id_status(model, ctx, status, idx, node_id);
   216f0:	4631      	mov	r1, r6
   216f2:	4628      	mov	r0, r5
   216f4:	f7ff fe70 	bl	213d8 <send_node_id_status>
   216f8:	e7e1      	b.n	216be <node_identity_set+0x1a>
   216fa:	9700      	str	r7, [sp, #0]
   216fc:	e7f0      	b.n	216e0 <node_identity_set+0x3c>

000216fe <node_identity_get>:
{
   216fe:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   21700:	4605      	mov	r5, r0
	idx = net_buf_simple_pull_le16(buf);
   21702:	4610      	mov	r0, r2
{
   21704:	460e      	mov	r6, r1
	idx = net_buf_simple_pull_le16(buf);
   21706:	f003 fb99 	bl	24e3c <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
   2170a:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
   2170e:	4604      	mov	r4, r0
	if (idx > 0xfff) {
   21710:	d20e      	bcs.n	21730 <node_identity_get+0x32>
	status = bt_mesh_subnet_node_id_get(idx, &node_id);
   21712:	f10d 010f 	add.w	r1, sp, #15
   21716:	f7ff f81b 	bl	20750 <bt_mesh_subnet_node_id_get>
	return send_node_id_status(model, ctx, status, idx, node_id);
   2171a:	f89d 300f 	ldrb.w	r3, [sp, #15]
   2171e:	9300      	str	r3, [sp, #0]
	status = bt_mesh_subnet_node_id_get(idx, &node_id);
   21720:	4602      	mov	r2, r0
	return send_node_id_status(model, ctx, status, idx, node_id);
   21722:	4623      	mov	r3, r4
   21724:	4631      	mov	r1, r6
   21726:	4628      	mov	r0, r5
   21728:	f7ff fe56 	bl	213d8 <send_node_id_status>
}
   2172c:	b004      	add	sp, #16
   2172e:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   21730:	f06f 0015 	mvn.w	r0, #21
   21734:	e7fa      	b.n	2172c <node_identity_get+0x2e>

00021736 <net_key_get>:
{
   21736:	b5f0      	push	{r4, r5, r6, r7, lr}
   21738:	b08b      	sub	sp, #44	; 0x2c
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_KEY_LIST,
   2173a:	ab04      	add	r3, sp, #16
   2173c:	f44f 2210 	mov.w	r2, #589824	; 0x90000
{
   21740:	4605      	mov	r5, r0
   21742:	460e      	mov	r6, r1
	bt_mesh_model_msg_init(&msg, OP_NET_KEY_LIST);
   21744:	a807      	add	r0, sp, #28
   21746:	f248 0143 	movw	r1, #32835	; 0x8043
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_KEY_LIST,
   2174a:	e9cd 2308 	strd	r2, r3, [sp, #32]
   2174e:	9307      	str	r3, [sp, #28]
	bt_mesh_model_msg_init(&msg, OP_NET_KEY_LIST);
   21750:	f7ff fdd7 	bl	21302 <bt_mesh_model_msg_init>
	count = bt_mesh_subnets_get(net_idx, ARRAY_SIZE(net_idx), 0);
   21754:	2200      	movs	r2, #0
   21756:	2102      	movs	r1, #2
   21758:	a803      	add	r0, sp, #12
   2175a:	f7e9 fd97 	bl	b28c <bt_mesh_subnets_get>
		count = ARRAY_SIZE(net_idx);
   2175e:	2803      	cmp	r0, #3
	count = bt_mesh_subnets_get(net_idx, ARRAY_SIZE(net_idx), 0);
   21760:	4604      	mov	r4, r0
		count = ARRAY_SIZE(net_idx);
   21762:	bf28      	it	cs
   21764:	2402      	movcs	r4, #2
	for (i = 0; i < count - 1; i += 2) {
   21766:	2300      	movs	r3, #0
   21768:	1e67      	subs	r7, r4, #1
   2176a:	429f      	cmp	r7, r3
   2176c:	dc14      	bgt.n	21798 <net_key_get+0x62>
	if (i < count) {
   2176e:	42a3      	cmp	r3, r4
   21770:	da07      	bge.n	21782 <net_key_get+0x4c>
		net_buf_simple_add_le16(&msg, net_idx[i]);
   21772:	aa0a      	add	r2, sp, #40	; 0x28
   21774:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   21778:	a807      	add	r0, sp, #28
   2177a:	f833 1c1c 	ldrh.w	r1, [r3, #-28]
   2177e:	f003 fae1 	bl	24d44 <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   21782:	2400      	movs	r4, #0
   21784:	9400      	str	r4, [sp, #0]
   21786:	4623      	mov	r3, r4
   21788:	aa07      	add	r2, sp, #28
   2178a:	4631      	mov	r1, r6
   2178c:	4628      	mov	r0, r5
   2178e:	f7ff fd61 	bl	21254 <bt_mesh_model_send>
}
   21792:	4620      	mov	r0, r4
   21794:	b00b      	add	sp, #44	; 0x2c
   21796:	bdf0      	pop	{r4, r5, r6, r7, pc}
		key_idx_pack(&msg, net_idx[i], net_idx[i + 1]);
   21798:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   2179c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   217a0:	a807      	add	r0, sp, #28
   217a2:	f7ff fde1 	bl	21368 <key_idx_pack>
	for (i = 0; i < count - 1; i += 2) {
   217a6:	2302      	movs	r3, #2
   217a8:	e7df      	b.n	2176a <net_key_get+0x34>

000217aa <net_key_del>:
{
   217aa:	b570      	push	{r4, r5, r6, lr}
   217ac:	4606      	mov	r6, r0
	del_idx = net_buf_simple_pull_le16(buf);
   217ae:	4610      	mov	r0, r2
{
   217b0:	460c      	mov	r4, r1
	del_idx = net_buf_simple_pull_le16(buf);
   217b2:	f003 fb43 	bl	24e3c <net_buf_simple_pull_le16>
	if (del_idx > 0xfff) {
   217b6:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	del_idx = net_buf_simple_pull_le16(buf);
   217ba:	4605      	mov	r5, r0
	if (del_idx > 0xfff) {
   217bc:	d20e      	bcs.n	217dc <net_key_del+0x32>
	if (ctx->net_idx == del_idx) {
   217be:	8822      	ldrh	r2, [r4, #0]
   217c0:	4282      	cmp	r2, r0
   217c2:	d106      	bne.n	217d2 <net_key_del+0x28>
		return send_net_key_status(model, ctx, del_idx,
   217c4:	230c      	movs	r3, #12
	return send_net_key_status(model, ctx, del_idx, STATUS_SUCCESS);
   217c6:	4621      	mov	r1, r4
   217c8:	4630      	mov	r0, r6
}
   217ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return send_net_key_status(model, ctx, del_idx, STATUS_SUCCESS);
   217ce:	f7ff be2c 	b.w	2142a <send_net_key_status>
	(void)bt_mesh_subnet_del(del_idx);
   217d2:	f7fe ff94 	bl	206fe <bt_mesh_subnet_del>
	return send_net_key_status(model, ctx, del_idx, STATUS_SUCCESS);
   217d6:	2300      	movs	r3, #0
   217d8:	462a      	mov	r2, r5
   217da:	e7f4      	b.n	217c6 <net_key_del+0x1c>
}
   217dc:	f06f 0015 	mvn.w	r0, #21
   217e0:	bd70      	pop	{r4, r5, r6, pc}

000217e2 <net_key_update>:
{
   217e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   217e6:	4606      	mov	r6, r0
	idx = net_buf_simple_pull_le16(buf);
   217e8:	4610      	mov	r0, r2
{
   217ea:	460f      	mov	r7, r1
   217ec:	4615      	mov	r5, r2
	idx = net_buf_simple_pull_le16(buf);
   217ee:	f003 fb25 	bl	24e3c <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
   217f2:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
   217f6:	4604      	mov	r4, r0
	if (idx > 0xfff) {
   217f8:	d20a      	bcs.n	21810 <net_key_update+0x2e>
	status = bt_mesh_subnet_update(idx, buf->data);
   217fa:	6829      	ldr	r1, [r5, #0]
   217fc:	f7fe ff4e 	bl	2069c <bt_mesh_subnet_update>
	return send_net_key_status(model, ctx, idx, status);
   21800:	4622      	mov	r2, r4
	status = bt_mesh_subnet_update(idx, buf->data);
   21802:	4603      	mov	r3, r0
	return send_net_key_status(model, ctx, idx, status);
   21804:	4639      	mov	r1, r7
   21806:	4630      	mov	r0, r6
}
   21808:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return send_net_key_status(model, ctx, idx, status);
   2180c:	f7ff be0d 	b.w	2142a <send_net_key_status>
}
   21810:	f06f 0015 	mvn.w	r0, #21
   21814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00021818 <net_key_add>:
{
   21818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2181c:	4606      	mov	r6, r0
	idx = net_buf_simple_pull_le16(buf);
   2181e:	4610      	mov	r0, r2
{
   21820:	460f      	mov	r7, r1
   21822:	4615      	mov	r5, r2
	idx = net_buf_simple_pull_le16(buf);
   21824:	f003 fb0a 	bl	24e3c <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
   21828:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
   2182c:	4604      	mov	r4, r0
	if (idx > 0xfff) {
   2182e:	d20a      	bcs.n	21846 <net_key_add+0x2e>
	status = bt_mesh_subnet_add(idx, buf->data);
   21830:	6829      	ldr	r1, [r5, #0]
   21832:	f7fe fedd 	bl	205f0 <bt_mesh_subnet_add>
	return send_net_key_status(model, ctx, idx, status);
   21836:	4622      	mov	r2, r4
	status = bt_mesh_subnet_add(idx, buf->data);
   21838:	4603      	mov	r3, r0
	return send_net_key_status(model, ctx, idx, status);
   2183a:	4639      	mov	r1, r7
   2183c:	4630      	mov	r0, r6
}
   2183e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return send_net_key_status(model, ctx, idx, status);
   21842:	f7ff bdf2 	b.w	2142a <send_net_key_status>
}
   21846:	f06f 0015 	mvn.w	r0, #21
   2184a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002184e <send_mod_pub_status>:
{
   2184e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21852:	b08b      	sub	sp, #44	; 0x2c
   21854:	4692      	mov	sl, r2
   21856:	f89d b058 	ldrb.w	fp, [sp, #88]	; 0x58
   2185a:	f89d 8050 	ldrb.w	r8, [sp, #80]	; 0x50
   2185e:	9c15      	ldr	r4, [sp, #84]	; 0x54
   21860:	9f17      	ldr	r7, [sp, #92]	; 0x5c
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_PUB_STATUS, 14);
   21862:	f44f 12a0 	mov.w	r2, #1310720	; 0x140000
{
   21866:	4605      	mov	r5, r0
   21868:	460e      	mov	r6, r1
	bt_mesh_model_msg_init(&msg, OP_MOD_PUB_STATUS);
   2186a:	a802      	add	r0, sp, #8
   2186c:	f248 0119 	movw	r1, #32793	; 0x8019
{
   21870:	4699      	mov	r9, r3
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_PUB_STATUS, 14);
   21872:	ab05      	add	r3, sp, #20
   21874:	e9cd 2303 	strd	r2, r3, [sp, #12]
   21878:	9302      	str	r3, [sp, #8]
	bt_mesh_model_msg_init(&msg, OP_MOD_PUB_STATUS);
   2187a:	f7ff fd42 	bl	21302 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   2187e:	4659      	mov	r1, fp
   21880:	a802      	add	r0, sp, #8
   21882:	f003 fa57 	bl	24d34 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, elem_addr);
   21886:	4651      	mov	r1, sl
   21888:	a802      	add	r0, sp, #8
   2188a:	f003 fa5b 	bl	24d44 <net_buf_simple_add_le16>
	if (status != STATUS_SUCCESS) {
   2188e:	f1bb 0f00 	cmp.w	fp, #0
   21892:	d01e      	beq.n	218d2 <send_mod_pub_status+0x84>
		(void)memset(net_buf_simple_add(&msg, 7), 0, 7);
   21894:	2107      	movs	r1, #7
   21896:	a802      	add	r0, sp, #8
   21898:	f003 fa3d 	bl	24d16 <net_buf_simple_add>
   2189c:	2207      	movs	r2, #7
   2189e:	2100      	movs	r1, #0
   218a0:	f7fc fbd2 	bl	1e048 <memset>
	if (vnd) {
   218a4:	f1b8 0f00 	cmp.w	r8, #0
   218a8:	d035      	beq.n	21916 <send_mod_pub_status+0xc8>
		memcpy(net_buf_simple_add(&msg, 4), mod_id, 4);
   218aa:	2104      	movs	r1, #4
   218ac:	a802      	add	r0, sp, #8
   218ae:	f003 fa32 	bl	24d16 <net_buf_simple_add>
   218b2:	2204      	movs	r2, #4
	if (bt_mesh_model_send(cfg_mod, ctx, &msg, NULL, NULL)) {
   218b4:	2400      	movs	r4, #0
		memcpy(net_buf_simple_add(&msg, 2), mod_id, 2);
   218b6:	4639      	mov	r1, r7
   218b8:	f7fc fbbb 	bl	1e032 <memcpy>
	if (bt_mesh_model_send(cfg_mod, ctx, &msg, NULL, NULL)) {
   218bc:	9400      	str	r4, [sp, #0]
   218be:	4623      	mov	r3, r4
   218c0:	aa02      	add	r2, sp, #8
   218c2:	4631      	mov	r1, r6
   218c4:	4628      	mov	r0, r5
   218c6:	f7ff fcc5 	bl	21254 <bt_mesh_model_send>
}
   218ca:	4620      	mov	r0, r4
   218cc:	b00b      	add	sp, #44	; 0x2c
   218ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		net_buf_simple_add_le16(&msg, pub_addr);
   218d2:	4649      	mov	r1, r9
   218d4:	a802      	add	r0, sp, #8
   218d6:	f003 fa35 	bl	24d44 <net_buf_simple_add_le16>
		idx_cred = mod->pub->key | (uint16_t)mod->pub->cred << 12;
   218da:	68a3      	ldr	r3, [r4, #8]
   218dc:	79d9      	ldrb	r1, [r3, #7]
   218de:	88db      	ldrh	r3, [r3, #6]
   218e0:	f3c1 1100 	ubfx	r1, r1, #4, #1
   218e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
   218e8:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
		net_buf_simple_add_le16(&msg, idx_cred);
   218ec:	a802      	add	r0, sp, #8
   218ee:	f3c1 010c 	ubfx	r1, r1, #0, #13
   218f2:	f003 fa27 	bl	24d44 <net_buf_simple_add_le16>
		net_buf_simple_add_u8(&msg, mod->pub->ttl);
   218f6:	68a3      	ldr	r3, [r4, #8]
   218f8:	a802      	add	r0, sp, #8
   218fa:	7a19      	ldrb	r1, [r3, #8]
   218fc:	f003 fa1a 	bl	24d34 <net_buf_simple_add_u8>
		net_buf_simple_add_u8(&msg, mod->pub->period);
   21900:	68a3      	ldr	r3, [r4, #8]
   21902:	a802      	add	r0, sp, #8
   21904:	7a99      	ldrb	r1, [r3, #10]
   21906:	f003 fa15 	bl	24d34 <net_buf_simple_add_u8>
		net_buf_simple_add_u8(&msg, mod->pub->retransmit);
   2190a:	68a3      	ldr	r3, [r4, #8]
   2190c:	a802      	add	r0, sp, #8
   2190e:	7a59      	ldrb	r1, [r3, #9]
   21910:	f003 fa10 	bl	24d34 <net_buf_simple_add_u8>
   21914:	e7c6      	b.n	218a4 <send_mod_pub_status+0x56>
		memcpy(net_buf_simple_add(&msg, 2), mod_id, 2);
   21916:	2102      	movs	r1, #2
   21918:	a802      	add	r0, sp, #8
   2191a:	f003 f9fc 	bl	24d16 <net_buf_simple_add>
   2191e:	2202      	movs	r2, #2
   21920:	e7c8      	b.n	218b4 <send_mod_pub_status+0x66>

00021922 <relay_set>:
{
   21922:	b570      	push	{r4, r5, r6, lr}
   21924:	b088      	sub	sp, #32
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_RELAY_STATUS, 2);
   21926:	ab03      	add	r3, sp, #12
{
   21928:	460e      	mov	r6, r1
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_RELAY_STATUS, 2);
   2192a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   2192e:	e9cd 1306 	strd	r1, r3, [sp, #24]
   21932:	9305      	str	r3, [sp, #20]
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   21934:	6813      	ldr	r3, [r2, #0]
{
   21936:	4605      	mov	r5, r0
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   21938:	7818      	ldrb	r0, [r3, #0]
   2193a:	2801      	cmp	r0, #1
   2193c:	d81e      	bhi.n	2197c <relay_set+0x5a>
	(void)bt_mesh_relay_set(buf->data[0], buf->data[1]);
   2193e:	7859      	ldrb	r1, [r3, #1]
   21940:	f7e8 fc66 	bl	a210 <bt_mesh_relay_set>
	bt_mesh_model_msg_init(&msg, OP_RELAY_STATUS);
   21944:	f248 0128 	movw	r1, #32808	; 0x8028
   21948:	a805      	add	r0, sp, #20
   2194a:	f7ff fcda 	bl	21302 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_relay_get());
   2194e:	f7e8 fc79 	bl	a244 <bt_mesh_relay_get>
   21952:	4601      	mov	r1, r0
   21954:	a805      	add	r0, sp, #20
   21956:	f003 f9ed 	bl	24d34 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, bt_mesh_relay_retransmit_get());
   2195a:	f7e8 fc7f 	bl	a25c <bt_mesh_relay_retransmit_get>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   2195e:	2400      	movs	r4, #0
	net_buf_simple_add_u8(&msg, bt_mesh_relay_retransmit_get());
   21960:	4601      	mov	r1, r0
   21962:	a805      	add	r0, sp, #20
   21964:	f003 f9e6 	bl	24d34 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   21968:	9400      	str	r4, [sp, #0]
   2196a:	4623      	mov	r3, r4
   2196c:	aa05      	add	r2, sp, #20
   2196e:	4631      	mov	r1, r6
   21970:	4628      	mov	r0, r5
   21972:	f7ff fc6f 	bl	21254 <bt_mesh_model_send>
	return 0;
   21976:	4620      	mov	r0, r4
}
   21978:	b008      	add	sp, #32
   2197a:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2197c:	f06f 0015 	mvn.w	r0, #21
   21980:	e7fa      	b.n	21978 <relay_set+0x56>

00021982 <relay_get>:
{
   21982:	b570      	push	{r4, r5, r6, lr}
   21984:	b088      	sub	sp, #32
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_RELAY_STATUS, 2);
   21986:	ab03      	add	r3, sp, #12
   21988:	f44f 2200 	mov.w	r2, #524288	; 0x80000
{
   2198c:	4605      	mov	r5, r0
   2198e:	460e      	mov	r6, r1
	bt_mesh_model_msg_init(&msg, OP_RELAY_STATUS);
   21990:	a805      	add	r0, sp, #20
   21992:	f248 0128 	movw	r1, #32808	; 0x8028
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_RELAY_STATUS, 2);
   21996:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2199a:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_RELAY_STATUS);
   2199c:	f7ff fcb1 	bl	21302 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_relay_get());
   219a0:	f7e8 fc50 	bl	a244 <bt_mesh_relay_get>
   219a4:	4601      	mov	r1, r0
   219a6:	a805      	add	r0, sp, #20
   219a8:	f003 f9c4 	bl	24d34 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, bt_mesh_relay_retransmit_get());
   219ac:	f7e8 fc56 	bl	a25c <bt_mesh_relay_retransmit_get>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   219b0:	2400      	movs	r4, #0
	net_buf_simple_add_u8(&msg, bt_mesh_relay_retransmit_get());
   219b2:	4601      	mov	r1, r0
   219b4:	a805      	add	r0, sp, #20
   219b6:	f003 f9bd 	bl	24d34 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   219ba:	9400      	str	r4, [sp, #0]
   219bc:	4623      	mov	r3, r4
   219be:	aa05      	add	r2, sp, #20
   219c0:	4631      	mov	r1, r6
   219c2:	4628      	mov	r0, r5
   219c4:	f7ff fc46 	bl	21254 <bt_mesh_model_send>
}
   219c8:	4620      	mov	r0, r4
   219ca:	b008      	add	sp, #32
   219cc:	bd70      	pop	{r4, r5, r6, pc}

000219ce <net_transmit_set>:
{
   219ce:	b570      	push	{r4, r5, r6, lr}
   219d0:	b088      	sub	sp, #32
   219d2:	4614      	mov	r4, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_TRANSMIT_STATUS, 1);
   219d4:	ab03      	add	r3, sp, #12
   219d6:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
   219da:	e9cd 2306 	strd	r2, r3, [sp, #24]
   219de:	9305      	str	r3, [sp, #20]
	bt_mesh_net_transmit_set(buf->data[0]);
   219e0:	6823      	ldr	r3, [r4, #0]
{
   219e2:	4605      	mov	r5, r0
	bt_mesh_net_transmit_set(buf->data[0]);
   219e4:	7818      	ldrb	r0, [r3, #0]
{
   219e6:	460e      	mov	r6, r1
	bt_mesh_net_transmit_set(buf->data[0]);
   219e8:	f7e8 fc02 	bl	a1f0 <bt_mesh_net_transmit_set>
	bt_mesh_model_msg_init(&msg, OP_NET_TRANSMIT_STATUS);
   219ec:	a805      	add	r0, sp, #20
   219ee:	f248 0125 	movw	r1, #32805	; 0x8025
   219f2:	f7ff fc86 	bl	21302 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, buf->data[0]);
   219f6:	6823      	ldr	r3, [r4, #0]
   219f8:	a805      	add	r0, sp, #20
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   219fa:	2400      	movs	r4, #0
	net_buf_simple_add_u8(&msg, buf->data[0]);
   219fc:	7819      	ldrb	r1, [r3, #0]
   219fe:	f003 f999 	bl	24d34 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   21a02:	9400      	str	r4, [sp, #0]
   21a04:	4623      	mov	r3, r4
   21a06:	aa05      	add	r2, sp, #20
   21a08:	4631      	mov	r1, r6
   21a0a:	4628      	mov	r0, r5
   21a0c:	f7ff fc22 	bl	21254 <bt_mesh_model_send>
}
   21a10:	4620      	mov	r0, r4
   21a12:	b008      	add	sp, #32
   21a14:	bd70      	pop	{r4, r5, r6, pc}

00021a16 <net_transmit_get>:
{
   21a16:	b570      	push	{r4, r5, r6, lr}
   21a18:	b088      	sub	sp, #32
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_TRANSMIT_STATUS, 1);
   21a1a:	ab03      	add	r3, sp, #12
   21a1c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   21a20:	4605      	mov	r5, r0
   21a22:	460e      	mov	r6, r1
	bt_mesh_model_msg_init(&msg, OP_NET_TRANSMIT_STATUS);
   21a24:	a805      	add	r0, sp, #20
   21a26:	f248 0125 	movw	r1, #32805	; 0x8025
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_TRANSMIT_STATUS, 1);
   21a2a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   21a2e:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_NET_TRANSMIT_STATUS);
   21a30:	f7ff fc67 	bl	21302 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_net_transmit_get());
   21a34:	f7e8 fbe6 	bl	a204 <bt_mesh_net_transmit_get>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   21a38:	2400      	movs	r4, #0
	net_buf_simple_add_u8(&msg, bt_mesh_net_transmit_get());
   21a3a:	4601      	mov	r1, r0
   21a3c:	a805      	add	r0, sp, #20
   21a3e:	f003 f979 	bl	24d34 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   21a42:	9400      	str	r4, [sp, #0]
   21a44:	4623      	mov	r3, r4
   21a46:	aa05      	add	r2, sp, #20
   21a48:	4631      	mov	r1, r6
   21a4a:	4628      	mov	r0, r5
   21a4c:	f7ff fc02 	bl	21254 <bt_mesh_model_send>
}
   21a50:	4620      	mov	r0, r4
   21a52:	b008      	add	sp, #32
   21a54:	bd70      	pop	{r4, r5, r6, pc}

00021a56 <send_gatt_proxy_status>:
{
   21a56:	b570      	push	{r4, r5, r6, lr}
   21a58:	b088      	sub	sp, #32
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_GATT_PROXY_STATUS, 1);
   21a5a:	ab03      	add	r3, sp, #12
   21a5c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   21a60:	4605      	mov	r5, r0
   21a62:	460e      	mov	r6, r1
	bt_mesh_model_msg_init(&msg, OP_GATT_PROXY_STATUS);
   21a64:	a805      	add	r0, sp, #20
   21a66:	f248 0114 	movw	r1, #32788	; 0x8014
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_GATT_PROXY_STATUS, 1);
   21a6a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   21a6e:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_GATT_PROXY_STATUS);
   21a70:	f7ff fc47 	bl	21302 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_gatt_proxy_get());
   21a74:	f7e8 fb8c 	bl	a190 <bt_mesh_gatt_proxy_get>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   21a78:	2400      	movs	r4, #0
	net_buf_simple_add_u8(&msg, bt_mesh_gatt_proxy_get());
   21a7a:	4601      	mov	r1, r0
   21a7c:	a805      	add	r0, sp, #20
   21a7e:	f003 f959 	bl	24d34 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   21a82:	9400      	str	r4, [sp, #0]
   21a84:	4623      	mov	r3, r4
   21a86:	aa05      	add	r2, sp, #20
   21a88:	4631      	mov	r1, r6
   21a8a:	4628      	mov	r0, r5
   21a8c:	f7ff fbe2 	bl	21254 <bt_mesh_model_send>
}
   21a90:	4620      	mov	r0, r4
   21a92:	b008      	add	sp, #32
   21a94:	bd70      	pop	{r4, r5, r6, pc}

00021a96 <gatt_proxy_set>:
{
   21a96:	b538      	push	{r3, r4, r5, lr}
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   21a98:	6813      	ldr	r3, [r2, #0]
{
   21a9a:	4604      	mov	r4, r0
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   21a9c:	7818      	ldrb	r0, [r3, #0]
   21a9e:	2801      	cmp	r0, #1
{
   21aa0:	460d      	mov	r5, r1
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   21aa2:	d807      	bhi.n	21ab4 <gatt_proxy_set+0x1e>
	(void)bt_mesh_gatt_proxy_set(buf->data[0]);
   21aa4:	f7e8 fb58 	bl	a158 <bt_mesh_gatt_proxy_set>
	return send_gatt_proxy_status(model, ctx);
   21aa8:	4629      	mov	r1, r5
   21aaa:	4620      	mov	r0, r4
}
   21aac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return send_gatt_proxy_status(model, ctx);
   21ab0:	f7ff bfd1 	b.w	21a56 <send_gatt_proxy_status>
}
   21ab4:	f06f 0015 	mvn.w	r0, #21
   21ab8:	bd38      	pop	{r3, r4, r5, pc}

00021aba <gatt_proxy_get>:
	return send_gatt_proxy_status(model, ctx);
   21aba:	f7ff bfcc 	b.w	21a56 <send_gatt_proxy_status>

00021abe <default_ttl_set>:
{
   21abe:	b5f0      	push	{r4, r5, r6, r7, lr}
   21ac0:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_DEFAULT_TTL_STATUS, 1);
   21ac2:	ab03      	add	r3, sp, #12
{
   21ac4:	4615      	mov	r5, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_DEFAULT_TTL_STATUS, 1);
   21ac6:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
   21aca:	e9cd 2306 	strd	r2, r3, [sp, #24]
   21ace:	9305      	str	r3, [sp, #20]
	err = bt_mesh_default_ttl_set(buf->data[0]);
   21ad0:	682b      	ldr	r3, [r5, #0]
{
   21ad2:	4606      	mov	r6, r0
	err = bt_mesh_default_ttl_set(buf->data[0]);
   21ad4:	7818      	ldrb	r0, [r3, #0]
{
   21ad6:	460f      	mov	r7, r1
	err = bt_mesh_default_ttl_set(buf->data[0]);
   21ad8:	f7e8 fb66 	bl	a1a8 <bt_mesh_default_ttl_set>
	if (err) {
   21adc:	4604      	mov	r4, r0
   21ade:	b980      	cbnz	r0, 21b02 <default_ttl_set+0x44>
	bt_mesh_model_msg_init(&msg, OP_DEFAULT_TTL_STATUS);
   21ae0:	f248 010e 	movw	r1, #32782	; 0x800e
   21ae4:	a805      	add	r0, sp, #20
   21ae6:	f7ff fc0c 	bl	21302 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, buf->data[0]);
   21aea:	682b      	ldr	r3, [r5, #0]
   21aec:	a805      	add	r0, sp, #20
   21aee:	7819      	ldrb	r1, [r3, #0]
   21af0:	f003 f920 	bl	24d34 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   21af4:	9400      	str	r4, [sp, #0]
   21af6:	4623      	mov	r3, r4
   21af8:	aa05      	add	r2, sp, #20
   21afa:	4639      	mov	r1, r7
   21afc:	4630      	mov	r0, r6
   21afe:	f7ff fba9 	bl	21254 <bt_mesh_model_send>
}
   21b02:	4620      	mov	r0, r4
   21b04:	b009      	add	sp, #36	; 0x24
   21b06:	bdf0      	pop	{r4, r5, r6, r7, pc}

00021b08 <default_ttl_get>:
{
   21b08:	b570      	push	{r4, r5, r6, lr}
   21b0a:	b088      	sub	sp, #32
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_DEFAULT_TTL_STATUS, 1);
   21b0c:	ab03      	add	r3, sp, #12
   21b0e:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   21b12:	4605      	mov	r5, r0
   21b14:	460e      	mov	r6, r1
	bt_mesh_model_msg_init(&msg, OP_DEFAULT_TTL_STATUS);
   21b16:	a805      	add	r0, sp, #20
   21b18:	f248 010e 	movw	r1, #32782	; 0x800e
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_DEFAULT_TTL_STATUS, 1);
   21b1c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   21b20:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_DEFAULT_TTL_STATUS);
   21b22:	f7ff fbee 	bl	21302 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_default_ttl_get());
   21b26:	f7e8 fb51 	bl	a1cc <bt_mesh_default_ttl_get>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   21b2a:	2400      	movs	r4, #0
	net_buf_simple_add_u8(&msg, bt_mesh_default_ttl_get());
   21b2c:	4601      	mov	r1, r0
   21b2e:	a805      	add	r0, sp, #20
   21b30:	f003 f900 	bl	24d34 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   21b34:	9400      	str	r4, [sp, #0]
   21b36:	4623      	mov	r3, r4
   21b38:	aa05      	add	r2, sp, #20
   21b3a:	4631      	mov	r1, r6
   21b3c:	4628      	mov	r0, r5
   21b3e:	f7ff fb89 	bl	21254 <bt_mesh_model_send>
}
   21b42:	4620      	mov	r0, r4
   21b44:	b008      	add	sp, #32
   21b46:	bd70      	pop	{r4, r5, r6, pc}

00021b48 <beacon_set>:
{
   21b48:	b570      	push	{r4, r5, r6, lr}
   21b4a:	b088      	sub	sp, #32
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_BEACON_STATUS, 1);
   21b4c:	ab03      	add	r3, sp, #12
{
   21b4e:	4614      	mov	r4, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_BEACON_STATUS, 1);
   21b50:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
   21b54:	e9cd 2306 	strd	r2, r3, [sp, #24]
   21b58:	9305      	str	r3, [sp, #20]
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   21b5a:	6823      	ldr	r3, [r4, #0]
{
   21b5c:	4605      	mov	r5, r0
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   21b5e:	7818      	ldrb	r0, [r3, #0]
   21b60:	2801      	cmp	r0, #1
{
   21b62:	460e      	mov	r6, r1
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   21b64:	d818      	bhi.n	21b98 <beacon_set+0x50>
	bt_mesh_beacon_set(buf->data[0]);
   21b66:	f000 0001 	and.w	r0, r0, #1
   21b6a:	f7e8 fac1 	bl	a0f0 <bt_mesh_beacon_set>
	bt_mesh_model_msg_init(&msg, OP_BEACON_STATUS);
   21b6e:	f248 010b 	movw	r1, #32779	; 0x800b
   21b72:	a805      	add	r0, sp, #20
   21b74:	f7ff fbc5 	bl	21302 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, buf->data[0]);
   21b78:	6823      	ldr	r3, [r4, #0]
   21b7a:	a805      	add	r0, sp, #20
   21b7c:	7819      	ldrb	r1, [r3, #0]
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   21b7e:	2400      	movs	r4, #0
	net_buf_simple_add_u8(&msg, buf->data[0]);
   21b80:	f003 f8d8 	bl	24d34 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   21b84:	9400      	str	r4, [sp, #0]
   21b86:	4623      	mov	r3, r4
   21b88:	aa05      	add	r2, sp, #20
   21b8a:	4631      	mov	r1, r6
   21b8c:	4628      	mov	r0, r5
   21b8e:	f7ff fb61 	bl	21254 <bt_mesh_model_send>
	return 0;
   21b92:	4620      	mov	r0, r4
}
   21b94:	b008      	add	sp, #32
   21b96:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   21b98:	f06f 0015 	mvn.w	r0, #21
   21b9c:	e7fa      	b.n	21b94 <beacon_set+0x4c>

00021b9e <beacon_get>:
{
   21b9e:	b570      	push	{r4, r5, r6, lr}
   21ba0:	b088      	sub	sp, #32
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_BEACON_STATUS, 1);
   21ba2:	ab03      	add	r3, sp, #12
   21ba4:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   21ba8:	4605      	mov	r5, r0
   21baa:	460e      	mov	r6, r1
	bt_mesh_model_msg_init(&msg, OP_BEACON_STATUS);
   21bac:	a805      	add	r0, sp, #20
   21bae:	f248 010b 	movw	r1, #32779	; 0x800b
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_BEACON_STATUS, 1);
   21bb2:	e9cd 2306 	strd	r2, r3, [sp, #24]
   21bb6:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_BEACON_STATUS);
   21bb8:	f7ff fba3 	bl	21302 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_beacon_enabled());
   21bbc:	f7e8 fac0 	bl	a140 <bt_mesh_beacon_enabled>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   21bc0:	2400      	movs	r4, #0
	net_buf_simple_add_u8(&msg, bt_mesh_beacon_enabled());
   21bc2:	4601      	mov	r1, r0
   21bc4:	a805      	add	r0, sp, #20
   21bc6:	f003 f8b5 	bl	24d34 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   21bca:	9400      	str	r4, [sp, #0]
   21bcc:	4623      	mov	r3, r4
   21bce:	aa05      	add	r2, sp, #20
   21bd0:	4631      	mov	r1, r6
   21bd2:	4628      	mov	r0, r5
   21bd4:	f7ff fb3e 	bl	21254 <bt_mesh_model_send>
}
   21bd8:	4620      	mov	r0, r4
   21bda:	b008      	add	sp, #32
   21bdc:	bd70      	pop	{r4, r5, r6, pc}

00021bde <app_key_get>:
{
   21bde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21be2:	b08a      	sub	sp, #40	; 0x28
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_APP_KEY_LIST,
   21be4:	ab04      	add	r3, sp, #16
{
   21be6:	4606      	mov	r6, r0
   21be8:	460f      	mov	r7, r1
	get_idx = net_buf_simple_pull_le16(buf);
   21bea:	4610      	mov	r0, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_APP_KEY_LIST,
   21bec:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
   21bf0:	e9cd 1308 	strd	r1, r3, [sp, #32]
   21bf4:	9307      	str	r3, [sp, #28]
	get_idx = net_buf_simple_pull_le16(buf);
   21bf6:	f003 f921 	bl	24e3c <net_buf_simple_pull_le16>
	if (get_idx > 0xfff) {
   21bfa:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	get_idx = net_buf_simple_pull_le16(buf);
   21bfe:	4605      	mov	r5, r0
	if (get_idx > 0xfff) {
   21c00:	d241      	bcs.n	21c86 <app_key_get+0xa8>
	bt_mesh_model_msg_init(&msg, OP_APP_KEY_LIST);
   21c02:	f248 0102 	movw	r1, #32770	; 0x8002
   21c06:	a807      	add	r0, sp, #28
   21c08:	f7ff fb7b 	bl	21302 <bt_mesh_model_msg_init>
	if (!bt_mesh_subnet_exists(get_idx)) {
   21c0c:	4628      	mov	r0, r5
   21c0e:	f7fe fd3e 	bl	2068e <bt_mesh_subnet_exists>
		status = STATUS_SUCCESS;
   21c12:	2800      	cmp	r0, #0
   21c14:	bf0c      	ite	eq
   21c16:	2404      	moveq	r4, #4
   21c18:	2400      	movne	r4, #0
	net_buf_simple_add_u8(&msg, status);
   21c1a:	4621      	mov	r1, r4
   21c1c:	a807      	add	r0, sp, #28
   21c1e:	f003 f889 	bl	24d34 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, get_idx);
   21c22:	4629      	mov	r1, r5
   21c24:	a807      	add	r0, sp, #28
   21c26:	f003 f88d 	bl	24d44 <net_buf_simple_add_le16>
	if (status != STATUS_SUCCESS) {
   21c2a:	b9bc      	cbnz	r4, 21c5c <app_key_get+0x7e>
	count = bt_mesh_app_keys_get(get_idx, app_idx, ARRAY_SIZE(app_idx), 0);
   21c2c:	4628      	mov	r0, r5
   21c2e:	4623      	mov	r3, r4
   21c30:	2202      	movs	r2, #2
   21c32:	a903      	add	r1, sp, #12
   21c34:	f7e9 fcfa 	bl	b62c <bt_mesh_app_keys_get>
		count = ARRAY_SIZE(app_idx);
   21c38:	2803      	cmp	r0, #3
	count = bt_mesh_app_keys_get(get_idx, app_idx, ARRAY_SIZE(app_idx), 0);
   21c3a:	4605      	mov	r5, r0
		count = ARRAY_SIZE(app_idx);
   21c3c:	bf28      	it	cs
   21c3e:	2502      	movcs	r5, #2
	for (i = 0; i < count - 1; i += 2) {
   21c40:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
   21c44:	45a0      	cmp	r8, r4
   21c46:	dc15      	bgt.n	21c74 <app_key_get+0x96>
	if (i < count) {
   21c48:	42a5      	cmp	r5, r4
   21c4a:	dd07      	ble.n	21c5c <app_key_get+0x7e>
		net_buf_simple_add_le16(&msg, app_idx[i]);
   21c4c:	ab0a      	add	r3, sp, #40	; 0x28
   21c4e:	eb03 0444 	add.w	r4, r3, r4, lsl #1
   21c52:	a807      	add	r0, sp, #28
   21c54:	f834 1c1c 	ldrh.w	r1, [r4, #-28]
   21c58:	f003 f874 	bl	24d44 <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   21c5c:	2400      	movs	r4, #0
   21c5e:	9400      	str	r4, [sp, #0]
   21c60:	4623      	mov	r3, r4
   21c62:	aa07      	add	r2, sp, #28
   21c64:	4639      	mov	r1, r7
   21c66:	4630      	mov	r0, r6
   21c68:	f7ff faf4 	bl	21254 <bt_mesh_model_send>
	return 0;
   21c6c:	4620      	mov	r0, r4
}
   21c6e:	b00a      	add	sp, #40	; 0x28
   21c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		key_idx_pack(&msg, app_idx[i], app_idx[i + 1]);
   21c74:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   21c78:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   21c7c:	a807      	add	r0, sp, #28
   21c7e:	f7ff fb73 	bl	21368 <key_idx_pack>
	for (i = 0; i < count - 1; i += 2) {
   21c82:	2402      	movs	r4, #2
   21c84:	e7de      	b.n	21c44 <app_key_get+0x66>
		return -EINVAL;
   21c86:	f06f 0015 	mvn.w	r0, #21
   21c8a:	e7f0      	b.n	21c6e <app_key_get+0x90>

00021c8c <key_idx_unpack>:

static inline void key_idx_unpack(struct net_buf_simple *buf,
				  uint16_t *idx1, uint16_t *idx2)
{
   21c8c:	b410      	push	{r4}
	*idx1 = sys_get_le16(&buf->data[0]) & 0xfff;
   21c8e:	6804      	ldr	r4, [r0, #0]
   21c90:	8823      	ldrh	r3, [r4, #0]
   21c92:	f3c3 030b 	ubfx	r3, r3, #0, #12
   21c96:	800b      	strh	r3, [r1, #0]
	*idx2 = sys_get_le16(&buf->data[1]) >> 4;
   21c98:	f8b4 3001 	ldrh.w	r3, [r4, #1]
	net_buf_simple_pull(buf, 3);
}
   21c9c:	bc10      	pop	{r4}
	*idx2 = sys_get_le16(&buf->data[1]) >> 4;
   21c9e:	091b      	lsrs	r3, r3, #4
   21ca0:	8013      	strh	r3, [r2, #0]
	net_buf_simple_pull(buf, 3);
   21ca2:	2103      	movs	r1, #3
   21ca4:	f003 b8b2 	b.w	24e0c <net_buf_simple_pull>

00021ca8 <app_key_del>:
{
   21ca8:	b530      	push	{r4, r5, lr}
   21caa:	b085      	sub	sp, #20
   21cac:	4604      	mov	r4, r0
   21cae:	460d      	mov	r5, r1
   21cb0:	4610      	mov	r0, r2
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
   21cb2:	a903      	add	r1, sp, #12
   21cb4:	f10d 020e 	add.w	r2, sp, #14
   21cb8:	f7ff ffe8 	bl	21c8c <key_idx_unpack>
	status = bt_mesh_app_key_del(key_app_idx, key_net_idx);
   21cbc:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   21cc0:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   21cc4:	f7fe fe07 	bl	208d6 <bt_mesh_app_key_del>
	return send_app_key_status(model, ctx, status, key_app_idx, key_net_idx);
   21cc8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   21ccc:	9300      	str	r3, [sp, #0]
	status = bt_mesh_app_key_del(key_app_idx, key_net_idx);
   21cce:	4602      	mov	r2, r0
	return send_app_key_status(model, ctx, status, key_app_idx, key_net_idx);
   21cd0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   21cd4:	4629      	mov	r1, r5
   21cd6:	4620      	mov	r0, r4
   21cd8:	f7ff fbcb 	bl	21472 <send_app_key_status>
}
   21cdc:	b005      	add	sp, #20
   21cde:	bd30      	pop	{r4, r5, pc}

00021ce0 <app_key_update>:
{
   21ce0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   21ce2:	4614      	mov	r4, r2
   21ce4:	4605      	mov	r5, r0
   21ce6:	460e      	mov	r6, r1
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
   21ce8:	f10d 020e 	add.w	r2, sp, #14
   21cec:	a903      	add	r1, sp, #12
   21cee:	4620      	mov	r0, r4
   21cf0:	f7ff ffcc 	bl	21c8c <key_idx_unpack>
	status = bt_mesh_app_key_update(key_app_idx, key_net_idx, buf->data);
   21cf4:	6822      	ldr	r2, [r4, #0]
   21cf6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   21cfa:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   21cfe:	f7fe fdad 	bl	2085c <bt_mesh_app_key_update>
	return send_app_key_status(model, ctx, status, key_app_idx, key_net_idx);
   21d02:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   21d06:	9300      	str	r3, [sp, #0]
	status = bt_mesh_app_key_update(key_app_idx, key_net_idx, buf->data);
   21d08:	4602      	mov	r2, r0
	return send_app_key_status(model, ctx, status, key_app_idx, key_net_idx);
   21d0a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   21d0e:	4631      	mov	r1, r6
   21d10:	4628      	mov	r0, r5
   21d12:	f7ff fbae 	bl	21472 <send_app_key_status>
}
   21d16:	b004      	add	sp, #16
   21d18:	bd70      	pop	{r4, r5, r6, pc}

00021d1a <app_key_add>:
{
   21d1a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   21d1c:	4614      	mov	r4, r2
   21d1e:	4605      	mov	r5, r0
   21d20:	460e      	mov	r6, r1
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
   21d22:	f10d 020e 	add.w	r2, sp, #14
   21d26:	a903      	add	r1, sp, #12
   21d28:	4620      	mov	r0, r4
   21d2a:	f7ff ffaf 	bl	21c8c <key_idx_unpack>
	status = bt_mesh_app_key_add(key_app_idx, key_net_idx, buf->data);
   21d2e:	6822      	ldr	r2, [r4, #0]
   21d30:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   21d34:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   21d38:	f7fe fd56 	bl	207e8 <bt_mesh_app_key_add>
	return send_app_key_status(model, ctx, status, key_app_idx, key_net_idx);
   21d3c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   21d40:	9300      	str	r3, [sp, #0]
	status = bt_mesh_app_key_add(key_app_idx, key_net_idx, buf->data);
   21d42:	4602      	mov	r2, r0
	return send_app_key_status(model, ctx, status, key_app_idx, key_net_idx);
   21d44:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   21d48:	4631      	mov	r1, r6
   21d4a:	4628      	mov	r0, r5
   21d4c:	f7ff fb91 	bl	21472 <send_app_key_status>
}
   21d50:	b004      	add	sp, #16
   21d52:	bd70      	pop	{r4, r5, r6, pc}

00021d54 <bt_mesh_hb_pwr2>:
 * SPDX-License-Identifier: Apache-2.0
 */

static inline uint16_t bt_mesh_hb_pwr2(uint8_t val)
{
	if (!val) {
   21d54:	b158      	cbz	r0, 21d6e <bt_mesh_hb_pwr2+0x1a>
		return 0x0000;
	} else if (val == 0xff || val == 0x11) {
   21d56:	28ff      	cmp	r0, #255	; 0xff
   21d58:	d007      	beq.n	21d6a <bt_mesh_hb_pwr2+0x16>
   21d5a:	2811      	cmp	r0, #17
   21d5c:	d005      	beq.n	21d6a <bt_mesh_hb_pwr2+0x16>
		return 0xffff;
	} else {
		return (1 << (val - 1));
   21d5e:	2301      	movs	r3, #1
   21d60:	3801      	subs	r0, #1
   21d62:	fa03 f000 	lsl.w	r0, r3, r0
   21d66:	b280      	uxth	r0, r0
   21d68:	4770      	bx	lr
		return 0xffff;
   21d6a:	f64f 70ff 	movw	r0, #65535	; 0xffff
	}
}
   21d6e:	4770      	bx	lr

00021d70 <get_model>:
{
   21d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < 4) {
   21d72:	888b      	ldrh	r3, [r1, #4]
   21d74:	2b03      	cmp	r3, #3
{
   21d76:	4605      	mov	r5, r0
   21d78:	460c      	mov	r4, r1
   21d7a:	4616      	mov	r6, r2
		id = net_buf_simple_pull_le16(buf);
   21d7c:	4608      	mov	r0, r1
	if (buf->len < 4) {
   21d7e:	d809      	bhi.n	21d94 <get_model+0x24>
		id = net_buf_simple_pull_le16(buf);
   21d80:	f003 f85c 	bl	24e3c <net_buf_simple_pull_le16>
		*vnd = false;
   21d84:	2300      	movs	r3, #0
		id = net_buf_simple_pull_le16(buf);
   21d86:	4601      	mov	r1, r0
		*vnd = false;
   21d88:	7033      	strb	r3, [r6, #0]
		return bt_mesh_model_find(elem, id);
   21d8a:	4628      	mov	r0, r5
}
   21d8c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		return bt_mesh_model_find(elem, id);
   21d90:	f7ff ba90 	b.w	212b4 <bt_mesh_model_find>
		company = net_buf_simple_pull_le16(buf);
   21d94:	f003 f852 	bl	24e3c <net_buf_simple_pull_le16>
   21d98:	4607      	mov	r7, r0
		id = net_buf_simple_pull_le16(buf);
   21d9a:	4620      	mov	r0, r4
   21d9c:	f003 f84e 	bl	24e3c <net_buf_simple_pull_le16>
		*vnd = true;
   21da0:	2301      	movs	r3, #1
		id = net_buf_simple_pull_le16(buf);
   21da2:	4602      	mov	r2, r0
		*vnd = true;
   21da4:	7033      	strb	r3, [r6, #0]
		return bt_mesh_model_find_vnd(elem, company, id);
   21da6:	4639      	mov	r1, r7
   21da8:	4628      	mov	r0, r5
}
   21daa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		return bt_mesh_model_find_vnd(elem, company, id);
   21dae:	f7ff ba6a 	b.w	21286 <bt_mesh_model_find_vnd>

00021db2 <mod_app_get>:
{
   21db2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21db6:	4615      	mov	r5, r2
   21db8:	b08d      	sub	sp, #52	; 0x34
	NET_BUF_SIMPLE_DEFINE(msg,
   21dba:	ab07      	add	r3, sp, #28
   21dbc:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
   21dc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
   21dc4:	9304      	str	r3, [sp, #16]
	if ((buf->len != 4U) && (buf->len != 6U)) {
   21dc6:	88ab      	ldrh	r3, [r5, #4]
   21dc8:	f023 0302 	bic.w	r3, r3, #2
   21dcc:	b29b      	uxth	r3, r3
   21dce:	2b04      	cmp	r3, #4
{
   21dd0:	4606      	mov	r6, r0
   21dd2:	460f      	mov	r7, r1
	if ((buf->len != 4U) && (buf->len != 6U)) {
   21dd4:	d147      	bne.n	21e66 <mod_app_get+0xb4>
	elem_addr = net_buf_simple_pull_le16(buf);
   21dd6:	4628      	mov	r0, r5
   21dd8:	f003 f830 	bl	24e3c <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   21ddc:	b203      	sxth	r3, r0
   21dde:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   21de0:	4680      	mov	r8, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   21de2:	dd43      	ble.n	21e6c <mod_app_get+0xba>
	mod_id = buf->data;
   21de4:	f8d5 9000 	ldr.w	r9, [r5]
	elem = bt_mesh_elem_find(elem_addr);
   21de8:	f7eb f984 	bl	d0f4 <bt_mesh_elem_find>
	if (!elem) {
   21dec:	4604      	mov	r4, r0
   21dee:	bb58      	cbnz	r0, 21e48 <mod_app_get+0x96>
		vnd = (buf->len == 4U);
   21df0:	88ab      	ldrh	r3, [r5, #4]
   21df2:	1f1a      	subs	r2, r3, #4
   21df4:	4253      	negs	r3, r2
   21df6:	4153      	adcs	r3, r2
   21df8:	f88d 300f 	strb.w	r3, [sp, #15]
		status = STATUS_INVALID_ADDRESS;
   21dfc:	2501      	movs	r5, #1
	if (vnd) {
   21dfe:	f89d 300f 	ldrb.w	r3, [sp, #15]
   21e02:	b35b      	cbz	r3, 21e5c <mod_app_get+0xaa>
		bt_mesh_model_msg_init(&msg, OP_VND_MOD_APP_LIST);
   21e04:	f248 014e 	movw	r1, #32846	; 0x804e
		bt_mesh_model_msg_init(&msg, OP_SIG_MOD_APP_LIST);
   21e08:	a804      	add	r0, sp, #16
   21e0a:	f7ff fa7a 	bl	21302 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   21e0e:	4629      	mov	r1, r5
   21e10:	a804      	add	r0, sp, #16
   21e12:	f002 ff8f 	bl	24d34 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, elem_addr);
   21e16:	4641      	mov	r1, r8
   21e18:	a804      	add	r0, sp, #16
   21e1a:	f002 ff93 	bl	24d44 <net_buf_simple_add_le16>
	if (vnd) {
   21e1e:	f89d 300f 	ldrb.w	r3, [sp, #15]
   21e22:	b1f3      	cbz	r3, 21e62 <mod_app_get+0xb0>
		net_buf_simple_add_mem(&msg, mod_id, 4);
   21e24:	2204      	movs	r2, #4
		net_buf_simple_add_mem(&msg, mod_id, 2);
   21e26:	4649      	mov	r1, r9
   21e28:	a804      	add	r0, sp, #16
   21e2a:	f002 ff7a 	bl	24d22 <net_buf_simple_add_mem>
	if (mod) {
   21e2e:	bb04      	cbnz	r4, 21e72 <mod_app_get+0xc0>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   21e30:	2400      	movs	r4, #0
   21e32:	9400      	str	r4, [sp, #0]
   21e34:	4623      	mov	r3, r4
   21e36:	aa04      	add	r2, sp, #16
   21e38:	4639      	mov	r1, r7
   21e3a:	4630      	mov	r0, r6
   21e3c:	f7ff fa0a 	bl	21254 <bt_mesh_model_send>
	return 0;
   21e40:	4620      	mov	r0, r4
}
   21e42:	b00d      	add	sp, #52	; 0x34
   21e44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	mod = get_model(elem, buf, &vnd);
   21e48:	4629      	mov	r1, r5
   21e4a:	f10d 020f 	add.w	r2, sp, #15
   21e4e:	f7ff ff8f 	bl	21d70 <get_model>
		status = STATUS_INVALID_MODEL;
   21e52:	1e04      	subs	r4, r0, #0
   21e54:	bf14      	ite	ne
   21e56:	2500      	movne	r5, #0
   21e58:	2502      	moveq	r5, #2
   21e5a:	e7d0      	b.n	21dfe <mod_app_get+0x4c>
		bt_mesh_model_msg_init(&msg, OP_SIG_MOD_APP_LIST);
   21e5c:	f248 014c 	movw	r1, #32844	; 0x804c
   21e60:	e7d2      	b.n	21e08 <mod_app_get+0x56>
		net_buf_simple_add_mem(&msg, mod_id, 2);
   21e62:	2202      	movs	r2, #2
   21e64:	e7df      	b.n	21e26 <mod_app_get+0x74>
		return -EMSGSIZE;
   21e66:	f06f 0079 	mvn.w	r0, #121	; 0x79
   21e6a:	e7ea      	b.n	21e42 <mod_app_get+0x90>
		return -EINVAL;
   21e6c:	f06f 0015 	mvn.w	r0, #21
   21e70:	e7e7      	b.n	21e42 <mod_app_get+0x90>
			if (mod->keys[i] != BT_MESH_KEY_UNUSED) {
   21e72:	89a1      	ldrh	r1, [r4, #12]
   21e74:	f64f 73ff 	movw	r3, #65535	; 0xffff
   21e78:	4299      	cmp	r1, r3
   21e7a:	d0d9      	beq.n	21e30 <mod_app_get+0x7e>
				net_buf_simple_add_le16(&msg, mod->keys[i]);
   21e7c:	a804      	add	r0, sp, #16
   21e7e:	f002 ff61 	bl	24d44 <net_buf_simple_add_le16>
		for (i = 0; i < ARRAY_SIZE(mod->keys); i++) {
   21e82:	e7d5      	b.n	21e30 <mod_app_get+0x7e>

00021e84 <mod_sub_va_del>:
{
   21e84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if ((buf->len != 20U) && (buf->len != 22U)) {
   21e88:	8893      	ldrh	r3, [r2, #4]
   21e8a:	f023 0302 	bic.w	r3, r3, #2
   21e8e:	b29b      	uxth	r3, r3
   21e90:	2b14      	cmp	r3, #20
{
   21e92:	b087      	sub	sp, #28
   21e94:	4606      	mov	r6, r0
   21e96:	460f      	mov	r7, r1
   21e98:	4614      	mov	r4, r2
	if ((buf->len != 20U) && (buf->len != 22U)) {
   21e9a:	d148      	bne.n	21f2e <mod_sub_va_del+0xaa>
	elem_addr = net_buf_simple_pull_le16(buf);
   21e9c:	4610      	mov	r0, r2
   21e9e:	f002 ffcd 	bl	24e3c <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   21ea2:	b203      	sxth	r3, r0
   21ea4:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   21ea6:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   21ea8:	dd44      	ble.n	21f34 <mod_sub_va_del+0xb0>
	label_uuid = net_buf_simple_pull_mem(buf, 16);
   21eaa:	2110      	movs	r1, #16
   21eac:	4620      	mov	r0, r4
   21eae:	f002 ffb5 	bl	24e1c <net_buf_simple_pull_mem>
   21eb2:	4681      	mov	r9, r0
	elem = bt_mesh_elem_find(elem_addr);
   21eb4:	4628      	mov	r0, r5
	mod_id = buf->data;
   21eb6:	f8d4 8000 	ldr.w	r8, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   21eba:	f7eb f91b 	bl	d0f4 <bt_mesh_elem_find>
	if (!elem) {
   21ebe:	b9c0      	cbnz	r0, 21ef2 <mod_sub_va_del+0x6e>
		vnd = (buf->len == 4U);
   21ec0:	88a2      	ldrh	r2, [r4, #4]
		mod = NULL;
   21ec2:	9005      	str	r0, [sp, #20]
		vnd = (buf->len == 4U);
   21ec4:	1f11      	subs	r1, r2, #4
   21ec6:	424a      	negs	r2, r1
   21ec8:	414a      	adcs	r2, r1
   21eca:	f88d 2011 	strb.w	r2, [sp, #17]
		sub_addr = BT_MESH_ADDR_UNASSIGNED;
   21ece:	f8ad 0012 	strh.w	r0, [sp, #18]
		status = STATUS_INVALID_ADDRESS;
   21ed2:	2201      	movs	r2, #1
	return send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   21ed4:	f89d 3011 	ldrb.w	r3, [sp, #17]
   21ed8:	e9cd 8301 	strd	r8, r3, [sp, #4]
   21edc:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   21ee0:	9300      	str	r3, [sp, #0]
   21ee2:	4639      	mov	r1, r7
   21ee4:	462b      	mov	r3, r5
   21ee6:	4630      	mov	r0, r6
   21ee8:	f7ff fb9c 	bl	21624 <send_mod_sub_status>
}
   21eec:	b007      	add	sp, #28
   21eee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	mod = get_model(elem, buf, &vnd);
   21ef2:	f10d 0211 	add.w	r2, sp, #17
   21ef6:	4621      	mov	r1, r4
   21ef8:	f7ff ff3a 	bl	21d70 <get_model>
   21efc:	9005      	str	r0, [sp, #20]
	if (!mod) {
   21efe:	b918      	cbnz	r0, 21f08 <mod_sub_va_del+0x84>
		sub_addr = BT_MESH_ADDR_UNASSIGNED;
   21f00:	f8ad 0012 	strh.w	r0, [sp, #18]
		status = STATUS_INVALID_MODEL;
   21f04:	2202      	movs	r2, #2
		goto send_status;
   21f06:	e7e5      	b.n	21ed4 <mod_sub_va_del+0x50>
	status = bt_mesh_va_del(label_uuid, &sub_addr);
   21f08:	f10d 0112 	add.w	r1, sp, #18
   21f0c:	4648      	mov	r0, r9
   21f0e:	f7ea f823 	bl	bf58 <bt_mesh_va_del>
	if (sub_addr == BT_MESH_ADDR_UNASSIGNED) {
   21f12:	f8bd 1012 	ldrh.w	r1, [sp, #18]
	status = bt_mesh_va_del(label_uuid, &sub_addr);
   21f16:	4602      	mov	r2, r0
	if (sub_addr == BT_MESH_ADDR_UNASSIGNED) {
   21f18:	2900      	cmp	r1, #0
   21f1a:	d0db      	beq.n	21ed4 <mod_sub_va_del+0x50>
	match = bt_mesh_model_find_group(&mod, sub_addr);
   21f1c:	a805      	add	r0, sp, #20
   21f1e:	f7eb f943 	bl	d1a8 <bt_mesh_model_find_group>
	if (match) {
   21f22:	b110      	cbz	r0, 21f2a <mod_sub_va_del+0xa6>
		*match = BT_MESH_ADDR_UNASSIGNED;
   21f24:	2200      	movs	r2, #0
   21f26:	8002      	strh	r2, [r0, #0]
		status = STATUS_SUCCESS;
   21f28:	e7d4      	b.n	21ed4 <mod_sub_va_del+0x50>
		status = STATUS_CANNOT_REMOVE;
   21f2a:	220c      	movs	r2, #12
   21f2c:	e7d2      	b.n	21ed4 <mod_sub_va_del+0x50>
		return -EMSGSIZE;
   21f2e:	f06f 0079 	mvn.w	r0, #121	; 0x79
   21f32:	e7db      	b.n	21eec <mod_sub_va_del+0x68>
		return -EINVAL;
   21f34:	f06f 0015 	mvn.w	r0, #21
   21f38:	e7d8      	b.n	21eec <mod_sub_va_del+0x68>

00021f3a <mod_sub_del>:
{
   21f3a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if ((buf->len != 6U) && (buf->len != 8U)) {
   21f3e:	8893      	ldrh	r3, [r2, #4]
   21f40:	2b06      	cmp	r3, #6
{
   21f42:	b087      	sub	sp, #28
   21f44:	4606      	mov	r6, r0
   21f46:	460f      	mov	r7, r1
   21f48:	4691      	mov	r9, r2
	if ((buf->len != 6U) && (buf->len != 8U)) {
   21f4a:	d001      	beq.n	21f50 <mod_sub_del+0x16>
   21f4c:	2b08      	cmp	r3, #8
   21f4e:	d13f      	bne.n	21fd0 <mod_sub_del+0x96>
	elem_addr = net_buf_simple_pull_le16(buf);
   21f50:	4648      	mov	r0, r9
   21f52:	f002 ff73 	bl	24e3c <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   21f56:	b203      	sxth	r3, r0
   21f58:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   21f5a:	4604      	mov	r4, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   21f5c:	dd3b      	ble.n	21fd6 <mod_sub_del+0x9c>
	sub_addr = net_buf_simple_pull_le16(buf);
   21f5e:	4648      	mov	r0, r9
   21f60:	f002 ff6c 	bl	24e3c <net_buf_simple_pull_le16>
   21f64:	4605      	mov	r5, r0
	elem = bt_mesh_elem_find(elem_addr);
   21f66:	4620      	mov	r0, r4
	mod_id = buf->data;
   21f68:	f8d9 8000 	ldr.w	r8, [r9]
	elem = bt_mesh_elem_find(elem_addr);
   21f6c:	f7eb f8c2 	bl	d0f4 <bt_mesh_elem_find>
	if (!elem) {
   21f70:	b948      	cbnz	r0, 21f86 <mod_sub_del+0x4c>
		vnd = (buf->len == 4U);
   21f72:	f8b9 3004 	ldrh.w	r3, [r9, #4]
		mod = NULL;
   21f76:	9005      	str	r0, [sp, #20]
		vnd = (buf->len == 4U);
   21f78:	1f1a      	subs	r2, r3, #4
   21f7a:	4253      	negs	r3, r2
   21f7c:	4153      	adcs	r3, r2
   21f7e:	f88d 3013 	strb.w	r3, [sp, #19]
		status = STATUS_INVALID_ADDRESS;
   21f82:	2201      	movs	r2, #1
   21f84:	e015      	b.n	21fb2 <mod_sub_del+0x78>
	mod = get_model(elem, buf, &vnd);
   21f86:	f10d 0213 	add.w	r2, sp, #19
   21f8a:	4649      	mov	r1, r9
   21f8c:	f7ff fef0 	bl	21d70 <get_model>
   21f90:	9005      	str	r0, [sp, #20]
	if (!mod) {
   21f92:	b1d8      	cbz	r0, 21fcc <mod_sub_del+0x92>
	if (!BT_MESH_ADDR_IS_GROUP(sub_addr)) {
   21f94:	f505 4380 	add.w	r3, r5, #16384	; 0x4000
   21f98:	b29b      	uxth	r3, r3
   21f9a:	f5b3 5f7c 	cmp.w	r3, #16128	; 0x3f00
   21f9e:	d8f0      	bhi.n	21f82 <mod_sub_del+0x48>
	match = bt_mesh_model_find_group(&mod, sub_addr);
   21fa0:	4629      	mov	r1, r5
   21fa2:	a805      	add	r0, sp, #20
   21fa4:	f7eb f900 	bl	d1a8 <bt_mesh_model_find_group>
	if (match) {
   21fa8:	4602      	mov	r2, r0
   21faa:	2000      	movs	r0, #0
   21fac:	b10a      	cbz	r2, 21fb2 <mod_sub_del+0x78>
		*match = BT_MESH_ADDR_UNASSIGNED;
   21fae:	8010      	strh	r0, [r2, #0]
	status = STATUS_SUCCESS;
   21fb0:	4602      	mov	r2, r0
	return send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   21fb2:	f89d 3013 	ldrb.w	r3, [sp, #19]
   21fb6:	9500      	str	r5, [sp, #0]
   21fb8:	e9cd 8301 	strd	r8, r3, [sp, #4]
   21fbc:	4639      	mov	r1, r7
   21fbe:	4623      	mov	r3, r4
   21fc0:	4630      	mov	r0, r6
   21fc2:	f7ff fb2f 	bl	21624 <send_mod_sub_status>
}
   21fc6:	b007      	add	sp, #28
   21fc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		status = STATUS_INVALID_MODEL;
   21fcc:	2202      	movs	r2, #2
   21fce:	e7f0      	b.n	21fb2 <mod_sub_del+0x78>
		return -EMSGSIZE;
   21fd0:	f06f 0079 	mvn.w	r0, #121	; 0x79
   21fd4:	e7f7      	b.n	21fc6 <mod_sub_del+0x8c>
		return -EINVAL;
   21fd6:	f06f 0015 	mvn.w	r0, #21
   21fda:	e7f4      	b.n	21fc6 <mod_sub_del+0x8c>

00021fdc <mod_sub_va_add>:
{
   21fdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if ((buf->len != 20U) && (buf->len != 22U)) {
   21fe0:	8893      	ldrh	r3, [r2, #4]
   21fe2:	f023 0302 	bic.w	r3, r3, #2
   21fe6:	b29b      	uxth	r3, r3
   21fe8:	2b14      	cmp	r3, #20
{
   21fea:	b087      	sub	sp, #28
   21fec:	4607      	mov	r7, r0
   21fee:	4688      	mov	r8, r1
   21ff0:	4614      	mov	r4, r2
	if ((buf->len != 20U) && (buf->len != 22U)) {
   21ff2:	d157      	bne.n	220a4 <mod_sub_va_add+0xc8>
	elem_addr = net_buf_simple_pull_le16(buf);
   21ff4:	4610      	mov	r0, r2
   21ff6:	f002 ff21 	bl	24e3c <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   21ffa:	b203      	sxth	r3, r0
   21ffc:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   21ffe:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   22000:	dd53      	ble.n	220aa <mod_sub_va_add+0xce>
	label_uuid = net_buf_simple_pull_mem(buf, 16);
   22002:	2110      	movs	r1, #16
   22004:	4620      	mov	r0, r4
   22006:	f002 ff09 	bl	24e1c <net_buf_simple_pull_mem>
   2200a:	4606      	mov	r6, r0
	elem = bt_mesh_elem_find(elem_addr);
   2200c:	4628      	mov	r0, r5
	mod_id = buf->data;
   2200e:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   22012:	f7eb f86f 	bl	d0f4 <bt_mesh_elem_find>
	if (!elem) {
   22016:	b9c8      	cbnz	r0, 2204c <mod_sub_va_add+0x70>
		vnd = (buf->len == 4U);
   22018:	88a2      	ldrh	r2, [r4, #4]
		mod = NULL;
   2201a:	9005      	str	r0, [sp, #20]
		vnd = (buf->len == 4U);
   2201c:	1f11      	subs	r1, r2, #4
   2201e:	424a      	negs	r2, r1
   22020:	414a      	adcs	r2, r1
   22022:	f88d 2011 	strb.w	r2, [sp, #17]
		sub_addr = BT_MESH_ADDR_UNASSIGNED;
   22026:	f8ad 0012 	strh.w	r0, [sp, #18]
		status = STATUS_INVALID_ADDRESS;
   2202a:	2401      	movs	r4, #1
	return send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   2202c:	f89d 3011 	ldrb.w	r3, [sp, #17]
   22030:	e9cd 9301 	strd	r9, r3, [sp, #4]
   22034:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   22038:	9300      	str	r3, [sp, #0]
   2203a:	4622      	mov	r2, r4
   2203c:	462b      	mov	r3, r5
   2203e:	4641      	mov	r1, r8
   22040:	4638      	mov	r0, r7
   22042:	f7ff faef 	bl	21624 <send_mod_sub_status>
}
   22046:	b007      	add	sp, #28
   22048:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	mod = get_model(elem, buf, &vnd);
   2204c:	f10d 0211 	add.w	r2, sp, #17
   22050:	4621      	mov	r1, r4
   22052:	f7ff fe8d 	bl	21d70 <get_model>
   22056:	9005      	str	r0, [sp, #20]
	if (!mod) {
   22058:	b918      	cbnz	r0, 22062 <mod_sub_va_add+0x86>
		sub_addr = BT_MESH_ADDR_UNASSIGNED;
   2205a:	f8ad 0012 	strh.w	r0, [sp, #18]
		status = STATUS_INVALID_MODEL;
   2205e:	2402      	movs	r4, #2
		goto send_status;
   22060:	e7e4      	b.n	2202c <mod_sub_va_add+0x50>
	status = bt_mesh_va_add(label_uuid, &sub_addr);
   22062:	f10d 0112 	add.w	r1, sp, #18
   22066:	4630      	mov	r0, r6
   22068:	f7e9 ff2a 	bl	bec0 <bt_mesh_va_add>
	if (status != STATUS_SUCCESS) {
   2206c:	4604      	mov	r4, r0
   2206e:	2800      	cmp	r0, #0
   22070:	d1dc      	bne.n	2202c <mod_sub_va_add+0x50>
	if (bt_mesh_model_find_group(&mod, sub_addr)) {
   22072:	f8bd 1012 	ldrh.w	r1, [sp, #18]
   22076:	a805      	add	r0, sp, #20
   22078:	f7eb f896 	bl	d1a8 <bt_mesh_model_find_group>
		bt_mesh_va_del(label_uuid, NULL);
   2207c:	4621      	mov	r1, r4
	if (bt_mesh_model_find_group(&mod, sub_addr)) {
   2207e:	b118      	cbz	r0, 22088 <mod_sub_va_add+0xac>
		bt_mesh_va_del(label_uuid, NULL);
   22080:	4630      	mov	r0, r6
   22082:	f7e9 ff69 	bl	bf58 <bt_mesh_va_del>
		goto send_status;
   22086:	e7d1      	b.n	2202c <mod_sub_va_add+0x50>
	entry = bt_mesh_model_find_group(&mod, BT_MESH_ADDR_UNASSIGNED);
   22088:	a805      	add	r0, sp, #20
   2208a:	f7eb f88d 	bl	d1a8 <bt_mesh_model_find_group>
	if (!entry) {
   2208e:	b928      	cbnz	r0, 2209c <mod_sub_va_add+0xc0>
		bt_mesh_va_del(label_uuid, NULL);
   22090:	4621      	mov	r1, r4
   22092:	4630      	mov	r0, r6
   22094:	f7e9 ff60 	bl	bf58 <bt_mesh_va_del>
		status = STATUS_INSUFF_RESOURCES;
   22098:	2405      	movs	r4, #5
		goto send_status;
   2209a:	e7c7      	b.n	2202c <mod_sub_va_add+0x50>
	*entry = sub_addr;
   2209c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   220a0:	8003      	strh	r3, [r0, #0]
	status = STATUS_SUCCESS;
   220a2:	e7c3      	b.n	2202c <mod_sub_va_add+0x50>
		return -EMSGSIZE;
   220a4:	f06f 0079 	mvn.w	r0, #121	; 0x79
   220a8:	e7cd      	b.n	22046 <mod_sub_va_add+0x6a>
		return -EINVAL;
   220aa:	f06f 0015 	mvn.w	r0, #21
   220ae:	e7ca      	b.n	22046 <mod_sub_va_add+0x6a>

000220b0 <mod_sub_add>:
{
   220b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if ((buf->len != 6U) && (buf->len != 8U)) {
   220b4:	8893      	ldrh	r3, [r2, #4]
   220b6:	2b06      	cmp	r3, #6
{
   220b8:	b087      	sub	sp, #28
   220ba:	4607      	mov	r7, r0
   220bc:	4688      	mov	r8, r1
   220be:	4614      	mov	r4, r2
	if ((buf->len != 6U) && (buf->len != 8U)) {
   220c0:	d001      	beq.n	220c6 <mod_sub_add+0x16>
   220c2:	2b08      	cmp	r3, #8
   220c4:	d143      	bne.n	2214e <mod_sub_add+0x9e>
	elem_addr = net_buf_simple_pull_le16(buf);
   220c6:	4620      	mov	r0, r4
   220c8:	f002 feb8 	bl	24e3c <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   220cc:	b203      	sxth	r3, r0
   220ce:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   220d0:	4606      	mov	r6, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   220d2:	dd3f      	ble.n	22154 <mod_sub_add+0xa4>
	sub_addr = net_buf_simple_pull_le16(buf);
   220d4:	4620      	mov	r0, r4
   220d6:	f002 feb1 	bl	24e3c <net_buf_simple_pull_le16>
   220da:	4605      	mov	r5, r0
	elem = bt_mesh_elem_find(elem_addr);
   220dc:	4630      	mov	r0, r6
	mod_id = buf->data;
   220de:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   220e2:	f7eb f807 	bl	d0f4 <bt_mesh_elem_find>
	if (!elem) {
   220e6:	b940      	cbnz	r0, 220fa <mod_sub_add+0x4a>
		vnd = (buf->len == 4U);
   220e8:	88a3      	ldrh	r3, [r4, #4]
		mod = NULL;
   220ea:	9005      	str	r0, [sp, #20]
		vnd = (buf->len == 4U);
   220ec:	1f1a      	subs	r2, r3, #4
   220ee:	4253      	negs	r3, r2
   220f0:	4153      	adcs	r3, r2
   220f2:	f88d 3013 	strb.w	r3, [sp, #19]
		status = STATUS_INVALID_ADDRESS;
   220f6:	2201      	movs	r2, #1
   220f8:	e01a      	b.n	22130 <mod_sub_add+0x80>
	mod = get_model(elem, buf, &vnd);
   220fa:	f10d 0213 	add.w	r2, sp, #19
   220fe:	4621      	mov	r1, r4
   22100:	f7ff fe36 	bl	21d70 <get_model>
   22104:	9005      	str	r0, [sp, #20]
	if (!mod) {
   22106:	b190      	cbz	r0, 2212e <mod_sub_add+0x7e>
	if (!BT_MESH_ADDR_IS_GROUP(sub_addr)) {
   22108:	f505 4380 	add.w	r3, r5, #16384	; 0x4000
   2210c:	b29b      	uxth	r3, r3
   2210e:	f5b3 5f7c 	cmp.w	r3, #16128	; 0x3f00
   22112:	d8f0      	bhi.n	220f6 <mod_sub_add+0x46>
	if (bt_mesh_model_find_group(&mod, sub_addr)) {
   22114:	4629      	mov	r1, r5
   22116:	a805      	add	r0, sp, #20
   22118:	f7eb f846 	bl	d1a8 <bt_mesh_model_find_group>
   2211c:	b928      	cbnz	r0, 2212a <mod_sub_add+0x7a>
	entry = bt_mesh_model_find_group(&mod, BT_MESH_ADDR_UNASSIGNED);
   2211e:	4601      	mov	r1, r0
   22120:	a805      	add	r0, sp, #20
   22122:	f7eb f841 	bl	d1a8 <bt_mesh_model_find_group>
	if (!entry) {
   22126:	b180      	cbz	r0, 2214a <mod_sub_add+0x9a>
	*entry = sub_addr;
   22128:	8005      	strh	r5, [r0, #0]
		status = STATUS_SUCCESS;
   2212a:	2200      	movs	r2, #0
   2212c:	e000      	b.n	22130 <mod_sub_add+0x80>
		status = STATUS_INVALID_MODEL;
   2212e:	2202      	movs	r2, #2
	return send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   22130:	f89d 3013 	ldrb.w	r3, [sp, #19]
   22134:	9500      	str	r5, [sp, #0]
   22136:	e9cd 9301 	strd	r9, r3, [sp, #4]
   2213a:	4641      	mov	r1, r8
   2213c:	4633      	mov	r3, r6
   2213e:	4638      	mov	r0, r7
   22140:	f7ff fa70 	bl	21624 <send_mod_sub_status>
}
   22144:	b007      	add	sp, #28
   22146:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		status = STATUS_INSUFF_RESOURCES;
   2214a:	2205      	movs	r2, #5
   2214c:	e7f0      	b.n	22130 <mod_sub_add+0x80>
		return -EMSGSIZE;
   2214e:	f06f 0079 	mvn.w	r0, #121	; 0x79
   22152:	e7f7      	b.n	22144 <mod_sub_add+0x94>
		return -EINVAL;
   22154:	f06f 0015 	mvn.w	r0, #21
   22158:	e7f4      	b.n	22144 <mod_sub_add+0x94>

0002215a <mod_pub_get>:
{
   2215a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if ((buf->len != 4U) && (buf->len != 6U)) {
   2215e:	8893      	ldrh	r3, [r2, #4]
   22160:	f023 0302 	bic.w	r3, r3, #2
   22164:	b29b      	uxth	r3, r3
   22166:	2b04      	cmp	r3, #4
{
   22168:	b087      	sub	sp, #28
   2216a:	4606      	mov	r6, r0
   2216c:	460f      	mov	r7, r1
   2216e:	4691      	mov	r9, r2
	if ((buf->len != 4U) && (buf->len != 6U)) {
   22170:	d133      	bne.n	221da <mod_pub_get+0x80>
	elem_addr = net_buf_simple_pull_le16(buf);
   22172:	4610      	mov	r0, r2
   22174:	f002 fe62 	bl	24e3c <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   22178:	b203      	sxth	r3, r0
   2217a:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   2217c:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   2217e:	dd2f      	ble.n	221e0 <mod_pub_get+0x86>
	mod_id = buf->data;
   22180:	f8d9 8000 	ldr.w	r8, [r9]
	elem = bt_mesh_elem_find(elem_addr);
   22184:	f7ea ffb6 	bl	d0f4 <bt_mesh_elem_find>
	if (!elem) {
   22188:	4604      	mov	r4, r0
   2218a:	b948      	cbnz	r0, 221a0 <mod_pub_get+0x46>
		vnd = (buf->len == 4U);
   2218c:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   22190:	1f1a      	subs	r2, r3, #4
   22192:	4253      	negs	r3, r2
   22194:	4153      	adcs	r3, r2
   22196:	f88d 3017 	strb.w	r3, [sp, #23]
		status = STATUS_INVALID_ADDRESS;
   2219a:	2201      	movs	r2, #1
	uint16_t elem_addr, pub_addr = 0U;
   2219c:	4623      	mov	r3, r4
   2219e:	e00a      	b.n	221b6 <mod_pub_get+0x5c>
	mod = get_model(elem, buf, &vnd);
   221a0:	f10d 0217 	add.w	r2, sp, #23
   221a4:	4649      	mov	r1, r9
   221a6:	f7ff fde3 	bl	21d70 <get_model>
	if (!mod) {
   221aa:	4604      	mov	r4, r0
   221ac:	b188      	cbz	r0, 221d2 <mod_pub_get+0x78>
	if (!mod->pub) {
   221ae:	6883      	ldr	r3, [r0, #8]
   221b0:	b18b      	cbz	r3, 221d6 <mod_pub_get+0x7c>
	pub_addr = mod->pub->addr;
   221b2:	889b      	ldrh	r3, [r3, #4]
	status = STATUS_SUCCESS;
   221b4:	2200      	movs	r2, #0
	return send_mod_pub_status(model, ctx, elem_addr, pub_addr, vnd, mod,
   221b6:	e9cd 2802 	strd	r2, r8, [sp, #8]
   221ba:	f89d 2017 	ldrb.w	r2, [sp, #23]
   221be:	9200      	str	r2, [sp, #0]
   221c0:	9401      	str	r4, [sp, #4]
   221c2:	462a      	mov	r2, r5
   221c4:	4639      	mov	r1, r7
   221c6:	4630      	mov	r0, r6
   221c8:	f7ff fb41 	bl	2184e <send_mod_pub_status>
}
   221cc:	b007      	add	sp, #28
   221ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		status = STATUS_INVALID_MODEL;
   221d2:	2202      	movs	r2, #2
   221d4:	e7e2      	b.n	2219c <mod_pub_get+0x42>
		status = STATUS_NVAL_PUB_PARAM;
   221d6:	2207      	movs	r2, #7
   221d8:	e7ed      	b.n	221b6 <mod_pub_get+0x5c>
		return -EMSGSIZE;
   221da:	f06f 0079 	mvn.w	r0, #121	; 0x79
   221de:	e7f5      	b.n	221cc <mod_pub_get+0x72>
		return -EINVAL;
   221e0:	f06f 0015 	mvn.w	r0, #21
   221e4:	e7f2      	b.n	221cc <mod_pub_get+0x72>

000221e6 <mod_sub_list_visitor>:
{
   221e6:	b538      	push	{r3, r4, r5, lr}
	if (mod->elem_idx != visit->elem_idx) {
   221e8:	880b      	ldrh	r3, [r1, #0]
   221ea:	7902      	ldrb	r2, [r0, #4]
   221ec:	429a      	cmp	r2, r3
{
   221ee:	4605      	mov	r5, r0
   221f0:	460c      	mov	r4, r1
	if (mod->elem_idx != visit->elem_idx) {
   221f2:	d117      	bne.n	22224 <mod_sub_list_visitor+0x3e>
		if (mod->groups[i] == BT_MESH_ADDR_UNASSIGNED) {
   221f4:	89c3      	ldrh	r3, [r0, #14]
   221f6:	b143      	cbz	r3, 2220a <mod_sub_list_visitor+0x24>
		if (net_buf_simple_tailroom(visit->msg) <
   221f8:	6848      	ldr	r0, [r1, #4]
   221fa:	f002 fe46 	bl	24e8a <net_buf_simple_tailroom>
   221fe:	2805      	cmp	r0, #5
   22200:	d90a      	bls.n	22218 <mod_sub_list_visitor+0x32>
		net_buf_simple_add_le16(visit->msg, mod->groups[i]);
   22202:	89e9      	ldrh	r1, [r5, #14]
   22204:	6860      	ldr	r0, [r4, #4]
   22206:	f002 fd9d 	bl	24d44 <net_buf_simple_add_le16>
		if (mod->groups[i] == BT_MESH_ADDR_UNASSIGNED) {
   2220a:	8a2b      	ldrh	r3, [r5, #16]
   2220c:	b153      	cbz	r3, 22224 <mod_sub_list_visitor+0x3e>
		if (net_buf_simple_tailroom(visit->msg) <
   2220e:	6860      	ldr	r0, [r4, #4]
   22210:	f002 fe3b 	bl	24e8a <net_buf_simple_tailroom>
   22214:	2805      	cmp	r0, #5
   22216:	d801      	bhi.n	2221c <mod_sub_list_visitor+0x36>
			return BT_MESH_WALK_STOP;
   22218:	2000      	movs	r0, #0
}
   2221a:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_simple_add_le16(visit->msg, mod->groups[i]);
   2221c:	8a29      	ldrh	r1, [r5, #16]
   2221e:	6860      	ldr	r0, [r4, #4]
   22220:	f002 fd90 	bl	24d44 <net_buf_simple_add_le16>
		return BT_MESH_WALK_CONTINUE;
   22224:	2001      	movs	r0, #1
   22226:	e7f8      	b.n	2221a <mod_sub_list_visitor+0x34>

00022228 <create_mod_app_status.constprop.0>:
static void create_mod_app_status(struct net_buf_simple *msg,
   22228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2222c:	f89d 9020 	ldrb.w	r9, [sp, #32]
   22230:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
   22234:	4604      	mov	r4, r0
   22236:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(msg, OP_MOD_APP_STATUS);
   22238:	f248 013e 	movw	r1, #32830	; 0x803e
static void create_mod_app_status(struct net_buf_simple *msg,
   2223c:	4617      	mov	r7, r2
   2223e:	461e      	mov	r6, r3
	bt_mesh_model_msg_init(msg, OP_MOD_APP_STATUS);
   22240:	f7ff f85f 	bl	21302 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(msg, status);
   22244:	4649      	mov	r1, r9
   22246:	4620      	mov	r0, r4
   22248:	f002 fd74 	bl	24d34 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(msg, elem_addr);
   2224c:	4639      	mov	r1, r7
   2224e:	4620      	mov	r0, r4
   22250:	f002 fd78 	bl	24d44 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(msg, app_idx);
   22254:	4631      	mov	r1, r6
   22256:	4620      	mov	r0, r4
   22258:	f002 fd74 	bl	24d44 <net_buf_simple_add_le16>
	if (vnd) {
   2225c:	b14d      	cbz	r5, 22272 <create_mod_app_status.constprop.0+0x4a>
		memcpy(net_buf_simple_add(msg, 4), mod_id, 4);
   2225e:	2104      	movs	r1, #4
   22260:	4620      	mov	r0, r4
   22262:	f002 fd58 	bl	24d16 <net_buf_simple_add>
   22266:	2204      	movs	r2, #4
		memcpy(net_buf_simple_add(msg, 2), mod_id, 2);
   22268:	4641      	mov	r1, r8
}
   2226a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		memcpy(net_buf_simple_add(msg, 2), mod_id, 2);
   2226e:	f7fb bee0 	b.w	1e032 <memcpy>
   22272:	2102      	movs	r1, #2
   22274:	4620      	mov	r0, r4
   22276:	f002 fd4e 	bl	24d16 <net_buf_simple_add>
   2227a:	2202      	movs	r2, #2
   2227c:	e7f4      	b.n	22268 <create_mod_app_status.constprop.0+0x40>

0002227e <mod_app_bind>:
{
   2227e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22282:	4614      	mov	r4, r2
   22284:	b08b      	sub	sp, #44	; 0x2c
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_APP_STATUS, 9);
   22286:	ab06      	add	r3, sp, #24
   22288:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2228c:	e9cd 2304 	strd	r2, r3, [sp, #16]
   22290:	9303      	str	r3, [sp, #12]
	if ((buf->len != 6U) && (buf->len != 8U)) {
   22292:	88a3      	ldrh	r3, [r4, #4]
   22294:	2b06      	cmp	r3, #6
{
   22296:	4607      	mov	r7, r0
   22298:	4688      	mov	r8, r1
	if ((buf->len != 6U) && (buf->len != 8U)) {
   2229a:	d001      	beq.n	222a0 <mod_app_bind+0x22>
   2229c:	2b08      	cmp	r3, #8
   2229e:	d14b      	bne.n	22338 <mod_app_bind+0xba>
	elem_addr = net_buf_simple_pull_le16(buf);
   222a0:	4620      	mov	r0, r4
   222a2:	f002 fdcb 	bl	24e3c <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   222a6:	b203      	sxth	r3, r0
   222a8:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   222aa:	4606      	mov	r6, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   222ac:	dd47      	ble.n	2233e <mod_app_bind+0xc0>
	key_app_idx = net_buf_simple_pull_le16(buf);
   222ae:	4620      	mov	r0, r4
   222b0:	f002 fdc4 	bl	24e3c <net_buf_simple_pull_le16>
   222b4:	4605      	mov	r5, r0
	elem = bt_mesh_elem_find(elem_addr);
   222b6:	4630      	mov	r0, r6
	mod_id = buf->data;
   222b8:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   222bc:	f7ea ff1a 	bl	d0f4 <bt_mesh_elem_find>
	if (!elem) {
   222c0:	b9d8      	cbnz	r0, 222fa <mod_app_bind+0x7c>
		vnd = (buf->len == 4U);
   222c2:	88a3      	ldrh	r3, [r4, #4]
   222c4:	1f1a      	subs	r2, r3, #4
   222c6:	4253      	negs	r3, r2
   222c8:	4153      	adcs	r3, r2
   222ca:	f88d 300b 	strb.w	r3, [sp, #11]
		status = STATUS_INVALID_ADDRESS;
   222ce:	2401      	movs	r4, #1
	create_mod_app_status(&msg, mod, vnd, elem_addr, key_app_idx, status,
   222d0:	e9cd 4900 	strd	r4, r9, [sp]
   222d4:	f89d 100b 	ldrb.w	r1, [sp, #11]
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   222d8:	2400      	movs	r4, #0
	create_mod_app_status(&msg, mod, vnd, elem_addr, key_app_idx, status,
   222da:	462b      	mov	r3, r5
   222dc:	4632      	mov	r2, r6
   222de:	a803      	add	r0, sp, #12
   222e0:	f7ff ffa2 	bl	22228 <create_mod_app_status.constprop.0>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   222e4:	9400      	str	r4, [sp, #0]
   222e6:	4623      	mov	r3, r4
   222e8:	aa03      	add	r2, sp, #12
   222ea:	4641      	mov	r1, r8
   222ec:	4638      	mov	r0, r7
   222ee:	f7fe ffb1 	bl	21254 <bt_mesh_model_send>
	return 0;
   222f2:	4620      	mov	r0, r4
}
   222f4:	b00b      	add	sp, #44	; 0x2c
   222f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	mod = get_model(elem, buf, &vnd);
   222fa:	4621      	mov	r1, r4
   222fc:	f10d 020b 	add.w	r2, sp, #11
   22300:	f7ff fd36 	bl	21d70 <get_model>
	if (!mod) {
   22304:	4604      	mov	r4, r0
   22306:	b188      	cbz	r0, 2232c <mod_app_bind+0xae>
	if (model == mod) {
   22308:	4287      	cmp	r7, r0
   2230a:	d011      	beq.n	22330 <mod_app_bind+0xb2>
	if (!bt_mesh_app_key_exists(key_idx)) {
   2230c:	4628      	mov	r0, r5
   2230e:	f7e9 f97f 	bl	b610 <bt_mesh_app_key_exists>
   22312:	b178      	cbz	r0, 22334 <mod_app_bind+0xb6>
		if (model->keys[i] == key_idx) {
   22314:	89a3      	ldrh	r3, [r4, #12]
   22316:	429d      	cmp	r5, r3
   22318:	d006      	beq.n	22328 <mod_app_bind+0xaa>
		if (model->keys[i] == BT_MESH_KEY_UNUSED) {
   2231a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2231e:	4293      	cmp	r3, r2
   22320:	d001      	beq.n	22326 <mod_app_bind+0xa8>
	return STATUS_INSUFF_RESOURCES;
   22322:	2405      	movs	r4, #5
   22324:	e7d4      	b.n	222d0 <mod_app_bind+0x52>
			model->keys[i] = key_idx;
   22326:	81a5      	strh	r5, [r4, #12]
			return STATUS_SUCCESS;
   22328:	2400      	movs	r4, #0
   2232a:	e7d1      	b.n	222d0 <mod_app_bind+0x52>
		status = STATUS_INVALID_MODEL;
   2232c:	2402      	movs	r4, #2
   2232e:	e7cf      	b.n	222d0 <mod_app_bind+0x52>
		status = STATUS_CANNOT_BIND;
   22330:	240d      	movs	r4, #13
   22332:	e7cd      	b.n	222d0 <mod_app_bind+0x52>
		return STATUS_INVALID_APPKEY;
   22334:	2403      	movs	r4, #3
   22336:	e7cb      	b.n	222d0 <mod_app_bind+0x52>
		return -EMSGSIZE;
   22338:	f06f 0079 	mvn.w	r0, #121	; 0x79
   2233c:	e7da      	b.n	222f4 <mod_app_bind+0x76>
		return -EINVAL;
   2233e:	f06f 0015 	mvn.w	r0, #21
   22342:	e7d7      	b.n	222f4 <mod_app_bind+0x76>

00022344 <_mod_pub_set.constprop.0>:
static uint8_t _mod_pub_set(struct bt_mesh_model *model, uint16_t pub_addr,
   22344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22348:	4605      	mov	r5, r0
	if (!model->pub) {
   2234a:	6880      	ldr	r0, [r0, #8]
static uint8_t _mod_pub_set(struct bt_mesh_model *model, uint16_t pub_addr,
   2234c:	f89d 701c 	ldrb.w	r7, [sp, #28]
   22350:	460e      	mov	r6, r1
   22352:	4690      	mov	r8, r2
   22354:	461c      	mov	r4, r3
	if (!model->pub) {
   22356:	2800      	cmp	r0, #0
   22358:	d062      	beq.n	22420 <_mod_pub_set.constprop.0+0xdc>
	if (!IS_ENABLED(CONFIG_BT_MESH_LOW_POWER) && cred_flag) {
   2235a:	2b00      	cmp	r3, #0
   2235c:	d15e      	bne.n	2241c <_mod_pub_set.constprop.0+0xd8>
	if (!model->pub->update && period) {
   2235e:	6942      	ldr	r2, [r0, #20]
   22360:	b90a      	cbnz	r2, 22366 <_mod_pub_set.constprop.0+0x22>
   22362:	2f00      	cmp	r7, #0
   22364:	d15c      	bne.n	22420 <_mod_pub_set.constprop.0+0xdc>
	if (pub_addr == BT_MESH_ADDR_UNASSIGNED) {
   22366:	b976      	cbnz	r6, 22386 <_mod_pub_set.constprop.0+0x42>
		if (model->pub->addr == BT_MESH_ADDR_UNASSIGNED) {
   22368:	8883      	ldrh	r3, [r0, #4]
   2236a:	b18b      	cbz	r3, 22390 <_mod_pub_set.constprop.0+0x4c>
		model->pub->addr = BT_MESH_ADDR_UNASSIGNED;
   2236c:	6843      	ldr	r3, [r0, #4]
   2236e:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
   22372:	6043      	str	r3, [r0, #4]
		model->pub->ttl = 0U;
   22374:	6883      	ldr	r3, [r0, #8]
   22376:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
   2237a:	6083      	str	r3, [r0, #8]
		if (model->pub->update) {
   2237c:	b142      	cbz	r2, 22390 <_mod_pub_set.constprop.0+0x4c>
			(void)k_work_cancel_delayable(&model->pub->timer);
   2237e:	3018      	adds	r0, #24
   22380:	f003 fc94 	bl	25cac <k_work_cancel_delayable>
   22384:	e004      	b.n	22390 <_mod_pub_set.constprop.0+0x4c>
	if (!bt_mesh_app_key_exists(app_idx) || !bt_mesh_model_has_key(model, app_idx)) {
   22386:	4640      	mov	r0, r8
   22388:	f7e9 f942 	bl	b610 <bt_mesh_app_key_exists>
   2238c:	b918      	cbnz	r0, 22396 <_mod_pub_set.constprop.0+0x52>
		return STATUS_INVALID_APPKEY;
   2238e:	2403      	movs	r4, #3
}
   22390:	4620      	mov	r0, r4
   22392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!bt_mesh_app_key_exists(app_idx) || !bt_mesh_model_has_key(model, app_idx)) {
   22396:	4641      	mov	r1, r8
   22398:	4628      	mov	r0, r5
   2239a:	f7fe ff49 	bl	21230 <bt_mesh_model_has_key>
   2239e:	2800      	cmp	r0, #0
   223a0:	d0f5      	beq.n	2238e <_mod_pub_set.constprop.0+0x4a>
	if (BT_MESH_ADDR_IS_VIRTUAL(model->pub->addr)) {
   223a2:	68ab      	ldr	r3, [r5, #8]
   223a4:	8898      	ldrh	r0, [r3, #4]
   223a6:	f480 4300 	eor.w	r3, r0, #32768	; 0x8000
   223aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   223ae:	d205      	bcs.n	223bc <_mod_pub_set.constprop.0+0x78>
		uint8_t *uuid = bt_mesh_va_label_get(model->pub->addr);
   223b0:	f7e9 fe0a 	bl	bfc8 <bt_mesh_va_label_get>
		if (uuid) {
   223b4:	b110      	cbz	r0, 223bc <_mod_pub_set.constprop.0+0x78>
			bt_mesh_va_del(uuid, NULL);
   223b6:	2100      	movs	r1, #0
   223b8:	f7e9 fdce 	bl	bf58 <bt_mesh_va_del>
	model->pub->addr = pub_addr;
   223bc:	68ab      	ldr	r3, [r5, #8]
	model->pub->ttl = ttl;
   223be:	f89d 2018 	ldrb.w	r2, [sp, #24]
	model->pub->addr = pub_addr;
   223c2:	809e      	strh	r6, [r3, #4]
	model->pub->key = app_idx;
   223c4:	88de      	ldrh	r6, [r3, #6]
	model->pub->ttl = ttl;
   223c6:	721a      	strb	r2, [r3, #8]
	model->pub->key = app_idx;
   223c8:	f426 56ff 	bic.w	r6, r6, #8160	; 0x1fe0
   223cc:	f026 061f 	bic.w	r6, r6, #31
   223d0:	f3c8 080c 	ubfx	r8, r8, #0, #13
	model->pub->retransmit = retransmit;
   223d4:	f89d 2020 	ldrb.w	r2, [sp, #32]
	model->pub->period = period;
   223d8:	729f      	strb	r7, [r3, #10]
	model->pub->key = app_idx;
   223da:	ea46 0608 	orr.w	r6, r6, r8
   223de:	80de      	strh	r6, [r3, #6]
	model->pub->retransmit = retransmit;
   223e0:	725a      	strb	r2, [r3, #9]
	if (model->pub->update) {
   223e2:	695b      	ldr	r3, [r3, #20]
   223e4:	2b00      	cmp	r3, #0
   223e6:	d0d3      	beq.n	22390 <_mod_pub_set.constprop.0+0x4c>
		period_ms = bt_mesh_model_pub_period_get(model);
   223e8:	4628      	mov	r0, r5
   223ea:	f7ea fd8d 	bl	cf08 <bt_mesh_model_pub_period_get>
		if (period_ms > 0) {
   223ee:	1e06      	subs	r6, r0, #0
   223f0:	68a8      	ldr	r0, [r5, #8]
   223f2:	ddc4      	ble.n	2237e <_mod_pub_set.constprop.0+0x3a>
			k_work_reschedule(&model->pub->timer,
   223f4:	f100 0518 	add.w	r5, r0, #24
   223f8:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   223fc:	f240 30e7 	movw	r0, #999	; 0x3e7
   22400:	2100      	movs	r1, #0
   22402:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   22406:	2300      	movs	r3, #0
   22408:	fbc6 0107 	smlal	r0, r1, r6, r7
   2240c:	f7df f834 	bl	1478 <__aeabi_uldivmod>
   22410:	4602      	mov	r2, r0
   22412:	460b      	mov	r3, r1
   22414:	4628      	mov	r0, r5
   22416:	f7f9 f97f 	bl	1b718 <k_work_reschedule>
   2241a:	e7b9      	b.n	22390 <_mod_pub_set.constprop.0+0x4c>
		return STATUS_FEAT_NOT_SUPP;
   2241c:	240a      	movs	r4, #10
   2241e:	e7b7      	b.n	22390 <_mod_pub_set.constprop.0+0x4c>
		return STATUS_NVAL_PUB_PARAM;
   22420:	2407      	movs	r4, #7
   22422:	e7b5      	b.n	22390 <_mod_pub_set.constprop.0+0x4c>

00022424 <mod_unbind.constprop.0>:
static uint8_t mod_unbind(struct bt_mesh_model *model, uint16_t key_idx, bool store)
   22424:	b530      	push	{r4, r5, lr}
   22426:	4605      	mov	r5, r0
   22428:	b085      	sub	sp, #20
	if (!bt_mesh_app_key_exists(key_idx)) {
   2242a:	4608      	mov	r0, r1
static uint8_t mod_unbind(struct bt_mesh_model *model, uint16_t key_idx, bool store)
   2242c:	460c      	mov	r4, r1
	if (!bt_mesh_app_key_exists(key_idx)) {
   2242e:	f7e9 f8ef 	bl	b610 <bt_mesh_app_key_exists>
   22432:	b990      	cbnz	r0, 2245a <mod_unbind.constprop.0+0x36>
		return STATUS_INVALID_APPKEY;
   22434:	2003      	movs	r0, #3
}
   22436:	b005      	add	sp, #20
   22438:	bd30      	pop	{r4, r5, pc}
		if (model->pub && model->pub->key == key_idx) {
   2243a:	88db      	ldrh	r3, [r3, #6]
   2243c:	f3c3 030b 	ubfx	r3, r3, #0, #12
   22440:	4293      	cmp	r3, r2
   22442:	d113      	bne.n	2246c <mod_unbind.constprop.0+0x48>
			_mod_pub_set(model, BT_MESH_ADDR_UNASSIGNED,
   22444:	2400      	movs	r4, #0
   22446:	e9cd 4401 	strd	r4, r4, [sp, #4]
   2244a:	9400      	str	r4, [sp, #0]
   2244c:	4623      	mov	r3, r4
   2244e:	4622      	mov	r2, r4
   22450:	4621      	mov	r1, r4
   22452:	4628      	mov	r0, r5
   22454:	f7ff ff76 	bl	22344 <_mod_pub_set.constprop.0>
   22458:	e008      	b.n	2246c <mod_unbind.constprop.0+0x48>
		if (model->keys[i] != key_idx) {
   2245a:	89aa      	ldrh	r2, [r5, #12]
   2245c:	42a2      	cmp	r2, r4
   2245e:	d105      	bne.n	2246c <mod_unbind.constprop.0+0x48>
		model->keys[i] = BT_MESH_KEY_UNUSED;
   22460:	f64f 73ff 	movw	r3, #65535	; 0xffff
   22464:	81ab      	strh	r3, [r5, #12]
		if (model->pub && model->pub->key == key_idx) {
   22466:	68ab      	ldr	r3, [r5, #8]
   22468:	2b00      	cmp	r3, #0
   2246a:	d1e6      	bne.n	2243a <mod_unbind.constprop.0+0x16>
static uint8_t mod_unbind(struct bt_mesh_model *model, uint16_t key_idx, bool store)
   2246c:	2000      	movs	r0, #0
   2246e:	e7e2      	b.n	22436 <mod_unbind.constprop.0+0x12>

00022470 <mod_app_unbind>:
{
   22470:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22474:	4614      	mov	r4, r2
   22476:	b08b      	sub	sp, #44	; 0x2c
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_APP_STATUS, 9);
   22478:	ab06      	add	r3, sp, #24
   2247a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2247e:	e9cd 2304 	strd	r2, r3, [sp, #16]
   22482:	9303      	str	r3, [sp, #12]
	if ((buf->len != 6U) && (buf->len != 8U)) {
   22484:	88a3      	ldrh	r3, [r4, #4]
   22486:	2b06      	cmp	r3, #6
{
   22488:	4607      	mov	r7, r0
   2248a:	4688      	mov	r8, r1
	if ((buf->len != 6U) && (buf->len != 8U)) {
   2248c:	d001      	beq.n	22492 <mod_app_unbind+0x22>
   2248e:	2b08      	cmp	r3, #8
   22490:	d138      	bne.n	22504 <mod_app_unbind+0x94>
	elem_addr = net_buf_simple_pull_le16(buf);
   22492:	4620      	mov	r0, r4
   22494:	f002 fcd2 	bl	24e3c <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   22498:	b203      	sxth	r3, r0
   2249a:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   2249c:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   2249e:	dd34      	ble.n	2250a <mod_app_unbind+0x9a>
	key_app_idx = net_buf_simple_pull_le16(buf);
   224a0:	4620      	mov	r0, r4
   224a2:	f002 fccb 	bl	24e3c <net_buf_simple_pull_le16>
   224a6:	4606      	mov	r6, r0
	elem = bt_mesh_elem_find(elem_addr);
   224a8:	4628      	mov	r0, r5
	mod_id = buf->data;
   224aa:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   224ae:	f7ea fe21 	bl	d0f4 <bt_mesh_elem_find>
	if (!elem) {
   224b2:	b9d8      	cbnz	r0, 224ec <mod_app_unbind+0x7c>
		vnd = (buf->len == 4U);
   224b4:	88a3      	ldrh	r3, [r4, #4]
   224b6:	1f1a      	subs	r2, r3, #4
   224b8:	4253      	negs	r3, r2
   224ba:	4153      	adcs	r3, r2
   224bc:	f88d 300b 	strb.w	r3, [sp, #11]
		status = STATUS_INVALID_ADDRESS;
   224c0:	2001      	movs	r0, #1
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   224c2:	2400      	movs	r4, #0
	create_mod_app_status(&msg, mod, vnd, elem_addr, key_app_idx, status,
   224c4:	e9cd 0900 	strd	r0, r9, [sp]
   224c8:	f89d 100b 	ldrb.w	r1, [sp, #11]
   224cc:	4633      	mov	r3, r6
   224ce:	462a      	mov	r2, r5
   224d0:	a803      	add	r0, sp, #12
   224d2:	f7ff fea9 	bl	22228 <create_mod_app_status.constprop.0>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   224d6:	9400      	str	r4, [sp, #0]
   224d8:	4623      	mov	r3, r4
   224da:	aa03      	add	r2, sp, #12
   224dc:	4641      	mov	r1, r8
   224de:	4638      	mov	r0, r7
   224e0:	f7fe feb8 	bl	21254 <bt_mesh_model_send>
	return 0;
   224e4:	4620      	mov	r0, r4
}
   224e6:	b00b      	add	sp, #44	; 0x2c
   224e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	mod = get_model(elem, buf, &vnd);
   224ec:	f10d 020b 	add.w	r2, sp, #11
   224f0:	4621      	mov	r1, r4
   224f2:	f7ff fc3d 	bl	21d70 <get_model>
	if (!mod) {
   224f6:	b118      	cbz	r0, 22500 <mod_app_unbind+0x90>
	status = mod_unbind(mod, key_app_idx, true);
   224f8:	4631      	mov	r1, r6
   224fa:	f7ff ff93 	bl	22424 <mod_unbind.constprop.0>
send_status:
   224fe:	e7e0      	b.n	224c2 <mod_app_unbind+0x52>
		status = STATUS_INVALID_MODEL;
   22500:	2002      	movs	r0, #2
   22502:	e7de      	b.n	224c2 <mod_app_unbind+0x52>
		return -EMSGSIZE;
   22504:	f06f 0079 	mvn.w	r0, #121	; 0x79
   22508:	e7ed      	b.n	224e6 <mod_app_unbind+0x76>
		return -EINVAL;
   2250a:	f06f 0015 	mvn.w	r0, #21
   2250e:	e7ea      	b.n	224e6 <mod_app_unbind+0x76>

00022510 <mod_app_key_del>:
	mod_unbind(mod, *app_idx, true);
   22510:	9b00      	ldr	r3, [sp, #0]
   22512:	8819      	ldrh	r1, [r3, #0]
   22514:	f7ff bf86 	b.w	22424 <mod_unbind.constprop.0>

00022518 <mod_pub_set>:
{
   22518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if ((buf->len != 11U) && (buf->len != 13U)) {
   2251c:	8893      	ldrh	r3, [r2, #4]
   2251e:	2b0b      	cmp	r3, #11
{
   22520:	b08b      	sub	sp, #44	; 0x2c
   22522:	4681      	mov	r9, r0
   22524:	468a      	mov	sl, r1
   22526:	4693      	mov	fp, r2
	if ((buf->len != 11U) && (buf->len != 13U)) {
   22528:	d001      	beq.n	2252e <mod_pub_set+0x16>
   2252a:	2b0d      	cmp	r3, #13
   2252c:	d158      	bne.n	225e0 <mod_pub_set+0xc8>
	elem_addr = net_buf_simple_pull_le16(buf);
   2252e:	4658      	mov	r0, fp
   22530:	f002 fc84 	bl	24e3c <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   22534:	b203      	sxth	r3, r0
   22536:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   22538:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   2253a:	dc04      	bgt.n	22546 <mod_pub_set+0x2e>
		return -EINVAL;
   2253c:	f06f 0015 	mvn.w	r0, #21
}
   22540:	b00b      	add	sp, #44	; 0x2c
   22542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	pub_addr = net_buf_simple_pull_le16(buf);
   22546:	4658      	mov	r0, fp
   22548:	f002 fc78 	bl	24e3c <net_buf_simple_pull_le16>
   2254c:	4606      	mov	r6, r0
	pub_app_idx = net_buf_simple_pull_le16(buf);
   2254e:	4658      	mov	r0, fp
   22550:	f002 fc74 	bl	24e3c <net_buf_simple_pull_le16>
   22554:	4607      	mov	r7, r0
	pub_ttl = net_buf_simple_pull_u8(buf);
   22556:	4658      	mov	r0, fp
   22558:	f002 fc68 	bl	24e2c <net_buf_simple_pull_u8>
	if (pub_ttl > BT_MESH_TTL_MAX && pub_ttl != BT_MESH_TTL_DEFAULT) {
   2255c:	f1a0 0380 	sub.w	r3, r0, #128	; 0x80
   22560:	b2db      	uxtb	r3, r3
   22562:	2b7e      	cmp	r3, #126	; 0x7e
	pub_ttl = net_buf_simple_pull_u8(buf);
   22564:	4680      	mov	r8, r0
	if (pub_ttl > BT_MESH_TTL_MAX && pub_ttl != BT_MESH_TTL_DEFAULT) {
   22566:	d9e9      	bls.n	2253c <mod_pub_set+0x24>
	pub_period = net_buf_simple_pull_u8(buf);
   22568:	4658      	mov	r0, fp
   2256a:	f002 fc5f 	bl	24e2c <net_buf_simple_pull_u8>
   2256e:	9006      	str	r0, [sp, #24]
	retransmit = net_buf_simple_pull_u8(buf);
   22570:	4658      	mov	r0, fp
   22572:	f002 fc5b 	bl	24e2c <net_buf_simple_pull_u8>
	mod_id = buf->data;
   22576:	f8db 3000 	ldr.w	r3, [fp]
	retransmit = net_buf_simple_pull_u8(buf);
   2257a:	9007      	str	r0, [sp, #28]
	elem = bt_mesh_elem_find(elem_addr);
   2257c:	4628      	mov	r0, r5
	mod_id = buf->data;
   2257e:	9305      	str	r3, [sp, #20]
	elem = bt_mesh_elem_find(elem_addr);
   22580:	f7ea fdb8 	bl	d0f4 <bt_mesh_elem_find>
	if (!elem) {
   22584:	4604      	mov	r4, r0
   22586:	b9a8      	cbnz	r0, 225b4 <mod_pub_set+0x9c>
		vnd = (buf->len == 4U);
   22588:	f8bb 3004 	ldrh.w	r3, [fp, #4]
   2258c:	1f1a      	subs	r2, r3, #4
   2258e:	4253      	negs	r3, r2
   22590:	4153      	adcs	r3, r2
   22592:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
		status = STATUS_INVALID_ADDRESS;
   22596:	2001      	movs	r0, #1
	return send_mod_pub_status(model, ctx, elem_addr, pub_addr, vnd, mod,
   22598:	9b05      	ldr	r3, [sp, #20]
   2259a:	9401      	str	r4, [sp, #4]
   2259c:	e9cd 0302 	strd	r0, r3, [sp, #8]
   225a0:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   225a4:	9300      	str	r3, [sp, #0]
   225a6:	462a      	mov	r2, r5
   225a8:	4633      	mov	r3, r6
   225aa:	4651      	mov	r1, sl
   225ac:	4648      	mov	r0, r9
   225ae:	f7ff f94e 	bl	2184e <send_mod_pub_status>
   225b2:	e7c5      	b.n	22540 <mod_pub_set+0x28>
	mod = get_model(elem, buf, &vnd);
   225b4:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   225b8:	4659      	mov	r1, fp
   225ba:	f7ff fbd9 	bl	21d70 <get_model>
	if (!mod) {
   225be:	4604      	mov	r4, r0
   225c0:	b160      	cbz	r0, 225dc <mod_pub_set+0xc4>
	status = _mod_pub_set(mod, pub_addr, pub_app_idx, cred_flag, pub_ttl,
   225c2:	9b07      	ldr	r3, [sp, #28]
   225c4:	9302      	str	r3, [sp, #8]
   225c6:	9b06      	ldr	r3, [sp, #24]
   225c8:	f3c7 020b 	ubfx	r2, r7, #0, #12
   225cc:	e9cd 8300 	strd	r8, r3, [sp]
   225d0:	4631      	mov	r1, r6
   225d2:	f3c7 3300 	ubfx	r3, r7, #12, #1
   225d6:	f7ff feb5 	bl	22344 <_mod_pub_set.constprop.0>
   225da:	e7dd      	b.n	22598 <mod_pub_set+0x80>
		status = STATUS_INVALID_MODEL;
   225dc:	2002      	movs	r0, #2
   225de:	e7db      	b.n	22598 <mod_pub_set+0x80>
		return -EMSGSIZE;
   225e0:	f06f 0079 	mvn.w	r0, #121	; 0x79
   225e4:	e7ac      	b.n	22540 <mod_pub_set+0x28>

000225e6 <mod_pub_va_set>:
{
   225e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if ((buf->len != 25U) && (buf->len != 27U)) {
   225ea:	8893      	ldrh	r3, [r2, #4]
   225ec:	f023 0302 	bic.w	r3, r3, #2
   225f0:	b29b      	uxth	r3, r3
   225f2:	2b19      	cmp	r3, #25
{
   225f4:	b08b      	sub	sp, #44	; 0x2c
   225f6:	4681      	mov	r9, r0
   225f8:	468a      	mov	sl, r1
   225fa:	4693      	mov	fp, r2
	if ((buf->len != 25U) && (buf->len != 27U)) {
   225fc:	d172      	bne.n	226e4 <mod_pub_va_set+0xfe>
	elem_addr = net_buf_simple_pull_le16(buf);
   225fe:	4610      	mov	r0, r2
   22600:	f002 fc1c 	bl	24e3c <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   22604:	b203      	sxth	r3, r0
   22606:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   22608:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   2260a:	dc04      	bgt.n	22616 <mod_pub_va_set+0x30>
		return -EINVAL;
   2260c:	f06f 0015 	mvn.w	r0, #21
}
   22610:	b00b      	add	sp, #44	; 0x2c
   22612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	label_uuid = net_buf_simple_pull_mem(buf, 16);
   22616:	2110      	movs	r1, #16
   22618:	4658      	mov	r0, fp
   2261a:	f002 fbff 	bl	24e1c <net_buf_simple_pull_mem>
   2261e:	4606      	mov	r6, r0
	pub_app_idx = net_buf_simple_pull_le16(buf);
   22620:	4658      	mov	r0, fp
   22622:	f002 fc0b 	bl	24e3c <net_buf_simple_pull_le16>
   22626:	4607      	mov	r7, r0
	pub_ttl = net_buf_simple_pull_u8(buf);
   22628:	4658      	mov	r0, fp
   2262a:	f002 fbff 	bl	24e2c <net_buf_simple_pull_u8>
	if (pub_ttl > BT_MESH_TTL_MAX && pub_ttl != BT_MESH_TTL_DEFAULT) {
   2262e:	f1a0 0380 	sub.w	r3, r0, #128	; 0x80
   22632:	b2db      	uxtb	r3, r3
   22634:	2b7e      	cmp	r3, #126	; 0x7e
	pub_ttl = net_buf_simple_pull_u8(buf);
   22636:	4680      	mov	r8, r0
	if (pub_ttl > BT_MESH_TTL_MAX && pub_ttl != BT_MESH_TTL_DEFAULT) {
   22638:	d9e8      	bls.n	2260c <mod_pub_va_set+0x26>
	pub_period = net_buf_simple_pull_u8(buf);
   2263a:	4658      	mov	r0, fp
   2263c:	f002 fbf6 	bl	24e2c <net_buf_simple_pull_u8>
   22640:	9006      	str	r0, [sp, #24]
	retransmit = net_buf_simple_pull_u8(buf);
   22642:	4658      	mov	r0, fp
   22644:	f002 fbf2 	bl	24e2c <net_buf_simple_pull_u8>
	mod_id = buf->data;
   22648:	f8db 3000 	ldr.w	r3, [fp]
	retransmit = net_buf_simple_pull_u8(buf);
   2264c:	9007      	str	r0, [sp, #28]
	elem = bt_mesh_elem_find(elem_addr);
   2264e:	4628      	mov	r0, r5
	mod_id = buf->data;
   22650:	9305      	str	r3, [sp, #20]
	elem = bt_mesh_elem_find(elem_addr);
   22652:	f7ea fd4f 	bl	d0f4 <bt_mesh_elem_find>
	if (!elem) {
   22656:	4604      	mov	r4, r0
   22658:	b9c0      	cbnz	r0, 2268c <mod_pub_va_set+0xa6>
		vnd = (buf->len == 4U);
   2265a:	f8bb 3004 	ldrh.w	r3, [fp, #4]
		pub_addr = 0U;
   2265e:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
		vnd = (buf->len == 4U);
   22662:	1f1a      	subs	r2, r3, #4
   22664:	4253      	negs	r3, r2
   22666:	4153      	adcs	r3, r2
   22668:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
		status = STATUS_INVALID_ADDRESS;
   2266c:	2301      	movs	r3, #1
	return send_mod_pub_status(model, ctx, elem_addr, pub_addr, vnd, mod,
   2266e:	9a05      	ldr	r2, [sp, #20]
   22670:	9401      	str	r4, [sp, #4]
   22672:	e9cd 3202 	strd	r3, r2, [sp, #8]
   22676:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   2267a:	9300      	str	r3, [sp, #0]
   2267c:	462a      	mov	r2, r5
   2267e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   22682:	4651      	mov	r1, sl
   22684:	4648      	mov	r0, r9
   22686:	f7ff f8e2 	bl	2184e <send_mod_pub_status>
   2268a:	e7c1      	b.n	22610 <mod_pub_va_set+0x2a>
	mod = get_model(elem, buf, &vnd);
   2268c:	f10d 0225 	add.w	r2, sp, #37	; 0x25
   22690:	4659      	mov	r1, fp
   22692:	f7ff fb6d 	bl	21d70 <get_model>
	if (!mod) {
   22696:	4604      	mov	r4, r0
   22698:	b918      	cbnz	r0, 226a2 <mod_pub_va_set+0xbc>
		pub_addr = 0U;
   2269a:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
		status = STATUS_INVALID_MODEL;
   2269e:	2302      	movs	r3, #2
		goto send_status;
   226a0:	e7e5      	b.n	2266e <mod_pub_va_set+0x88>
	status = bt_mesh_va_add(label_uuid, &pub_addr);
   226a2:	f10d 0126 	add.w	r1, sp, #38	; 0x26
   226a6:	4630      	mov	r0, r6
   226a8:	f7e9 fc0a 	bl	bec0 <bt_mesh_va_add>
   226ac:	4603      	mov	r3, r0
   226ae:	4683      	mov	fp, r0
	if (status != STATUS_SUCCESS) {
   226b0:	2800      	cmp	r0, #0
   226b2:	d1dc      	bne.n	2266e <mod_pub_va_set+0x88>
	status = _mod_pub_set(mod, pub_addr, pub_app_idx, cred_flag, pub_ttl,
   226b4:	9b07      	ldr	r3, [sp, #28]
   226b6:	9302      	str	r3, [sp, #8]
   226b8:	9b06      	ldr	r3, [sp, #24]
   226ba:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
   226be:	e9cd 8300 	strd	r8, r3, [sp]
   226c2:	f3c7 020b 	ubfx	r2, r7, #0, #12
   226c6:	f3c7 3300 	ubfx	r3, r7, #12, #1
   226ca:	4620      	mov	r0, r4
   226cc:	f7ff fe3a 	bl	22344 <_mod_pub_set.constprop.0>
	if (status != STATUS_SUCCESS) {
   226d0:	4603      	mov	r3, r0
   226d2:	2800      	cmp	r0, #0
   226d4:	d0cb      	beq.n	2266e <mod_pub_va_set+0x88>
   226d6:	9006      	str	r0, [sp, #24]
		bt_mesh_va_del(label_uuid, NULL);
   226d8:	4659      	mov	r1, fp
   226da:	4630      	mov	r0, r6
   226dc:	f7e9 fc3c 	bl	bf58 <bt_mesh_va_del>
   226e0:	9b06      	ldr	r3, [sp, #24]
   226e2:	e7c4      	b.n	2266e <mod_pub_va_set+0x88>
		return -EMSGSIZE;
   226e4:	f06f 0079 	mvn.w	r0, #121	; 0x79
   226e8:	e792      	b.n	22610 <mod_pub_va_set+0x2a>

000226ea <dev_comp_data_get>:
{
   226ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   226ee:	b091      	sub	sp, #68	; 0x44
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   226f0:	ab07      	add	r3, sp, #28
{
   226f2:	4680      	mov	r8, r0
   226f4:	4689      	mov	r9, r1
	page = net_buf_simple_pull_u8(buf);
   226f6:	4610      	mov	r0, r2
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   226f8:	f44f 1110 	mov.w	r1, #2359296	; 0x240000
   226fc:	e9cd 1305 	strd	r1, r3, [sp, #20]
   22700:	9304      	str	r3, [sp, #16]
	page = net_buf_simple_pull_u8(buf);
   22702:	f002 fb93 	bl	24e2c <net_buf_simple_pull_u8>
	bt_mesh_model_msg_init(&sdu, OP_DEV_COMP_DATA_STATUS);
   22706:	2102      	movs	r1, #2
   22708:	a804      	add	r0, sp, #16
   2270a:	f7fe fdfa 	bl	21302 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&sdu, page);
   2270e:	2100      	movs	r1, #0
   22710:	a804      	add	r0, sp, #16
   22712:	f002 fb0f 	bl	24d34 <net_buf_simple_add_u8>
	comp = bt_mesh_comp_get();
   22716:	f7ea fd41 	bl	d19c <bt_mesh_comp_get>
   2271a:	4605      	mov	r5, r0
	net_buf_simple_add_le16(buf, comp->cid);
   2271c:	8801      	ldrh	r1, [r0, #0]
   2271e:	a804      	add	r0, sp, #16
   22720:	f002 fb10 	bl	24d44 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(buf, comp->pid);
   22724:	8869      	ldrh	r1, [r5, #2]
   22726:	a804      	add	r0, sp, #16
   22728:	f002 fb0c 	bl	24d44 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(buf, comp->vid);
   2272c:	88a9      	ldrh	r1, [r5, #4]
   2272e:	a804      	add	r0, sp, #16
   22730:	f002 fb08 	bl	24d44 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(buf, CONFIG_BT_MESH_CRPL);
   22734:	210a      	movs	r1, #10
   22736:	a804      	add	r0, sp, #16
   22738:	f002 fb04 	bl	24d44 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(buf, feat);
   2273c:	2107      	movs	r1, #7
   2273e:	a804      	add	r0, sp, #16
   22740:	f002 fb00 	bl	24d44 <net_buf_simple_add_le16>
	for (i = 0; i < comp->elem_count; i++) {
   22744:	2600      	movs	r6, #0
	    4 + (elem->model_count * 2U) + (elem->vnd_model_count * 4U)) {
   22746:	f04f 0b02 	mov.w	fp, #2
		net_buf_simple_add_le16(buf, mod->id);
   2274a:	f04f 0a24 	mov.w	sl, #36	; 0x24
	for (i = 0; i < comp->elem_count; i++) {
   2274e:	68ab      	ldr	r3, [r5, #8]
   22750:	429e      	cmp	r6, r3
   22752:	d309      	bcc.n	22768 <dev_comp_data_get+0x7e>
	if (bt_mesh_model_send(model, ctx, &sdu, NULL, NULL)) {
   22754:	2400      	movs	r4, #0
   22756:	9400      	str	r4, [sp, #0]
   22758:	4623      	mov	r3, r4
   2275a:	aa04      	add	r2, sp, #16
   2275c:	4649      	mov	r1, r9
   2275e:	4640      	mov	r0, r8
   22760:	f7fe fd78 	bl	21254 <bt_mesh_model_send>
	return 0;
   22764:	4620      	mov	r0, r4
   22766:	e03e      	b.n	227e6 <dev_comp_data_get+0xfc>
		err = comp_add_elem(buf, &comp->elem[i], i == 0);
   22768:	68ec      	ldr	r4, [r5, #12]
   2276a:	eb04 1406 	add.w	r4, r4, r6, lsl #4
	if (net_buf_simple_tailroom(buf) <
   2276e:	a804      	add	r0, sp, #16
   22770:	f002 fb8b 	bl	24e8a <net_buf_simple_tailroom>
	    4 + (elem->model_count * 2U) + (elem->vnd_model_count * 4U)) {
   22774:	7922      	ldrb	r2, [r4, #4]
   22776:	7963      	ldrb	r3, [r4, #5]
   22778:	3202      	adds	r2, #2
   2277a:	fb1b 2303 	smlabb	r3, fp, r3, r2
	if (net_buf_simple_tailroom(buf) <
   2277e:	ebb0 0f43 	cmp.w	r0, r3, lsl #1
   22782:	d32e      	bcc.n	227e2 <dev_comp_data_get+0xf8>
	net_buf_simple_add_le16(buf, elem->loc);
   22784:	8861      	ldrh	r1, [r4, #2]
   22786:	a804      	add	r0, sp, #16
   22788:	f002 fadc 	bl	24d44 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(buf, elem->model_count);
   2278c:	7921      	ldrb	r1, [r4, #4]
   2278e:	a804      	add	r0, sp, #16
   22790:	f002 fad0 	bl	24d34 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, elem->vnd_model_count);
   22794:	7961      	ldrb	r1, [r4, #5]
   22796:	a804      	add	r0, sp, #16
   22798:	f002 facc 	bl	24d34 <net_buf_simple_add_u8>
	for (i = 0; i < elem->model_count; i++) {
   2279c:	2700      	movs	r7, #0
   2279e:	7923      	ldrb	r3, [r4, #4]
   227a0:	429f      	cmp	r7, r3
   227a2:	db05      	blt.n	227b0 <dev_comp_data_get+0xc6>
	for (i = 0; i < elem->vnd_model_count; i++) {
   227a4:	2700      	movs	r7, #0
   227a6:	7963      	ldrb	r3, [r4, #5]
   227a8:	429f      	cmp	r7, r3
   227aa:	db0a      	blt.n	227c2 <dev_comp_data_get+0xd8>
	for (i = 0; i < comp->elem_count; i++) {
   227ac:	3601      	adds	r6, #1
   227ae:	e7ce      	b.n	2274e <dev_comp_data_get+0x64>
		net_buf_simple_add_le16(buf, mod->id);
   227b0:	fb0a f307 	mul.w	r3, sl, r7
   227b4:	68a2      	ldr	r2, [r4, #8]
   227b6:	a804      	add	r0, sp, #16
   227b8:	5ad1      	ldrh	r1, [r2, r3]
   227ba:	f002 fac3 	bl	24d44 <net_buf_simple_add_le16>
	for (i = 0; i < elem->model_count; i++) {
   227be:	3701      	adds	r7, #1
   227c0:	e7ed      	b.n	2279e <dev_comp_data_get+0xb4>
		mod = &elem->vnd_models[i];
   227c2:	fb0a f307 	mul.w	r3, sl, r7
   227c6:	68e1      	ldr	r1, [r4, #12]
		net_buf_simple_add_le16(buf, mod->vnd.company);
   227c8:	a804      	add	r0, sp, #16
		mod = &elem->vnd_models[i];
   227ca:	18ca      	adds	r2, r1, r3
		net_buf_simple_add_le16(buf, mod->vnd.company);
   227cc:	5ac9      	ldrh	r1, [r1, r3]
		mod = &elem->vnd_models[i];
   227ce:	9203      	str	r2, [sp, #12]
		net_buf_simple_add_le16(buf, mod->vnd.company);
   227d0:	f002 fab8 	bl	24d44 <net_buf_simple_add_le16>
		net_buf_simple_add_le16(buf, mod->vnd.id);
   227d4:	9a03      	ldr	r2, [sp, #12]
   227d6:	a804      	add	r0, sp, #16
   227d8:	8851      	ldrh	r1, [r2, #2]
   227da:	f002 fab3 	bl	24d44 <net_buf_simple_add_le16>
	for (i = 0; i < elem->vnd_model_count; i++) {
   227de:	3701      	adds	r7, #1
   227e0:	e7e1      	b.n	227a6 <dev_comp_data_get+0xbc>
   227e2:	f06f 0006 	mvn.w	r0, #6
}
   227e6:	b011      	add	sp, #68	; 0x44
   227e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000227ec <mod_sub_list_clear.isra.0>:
static size_t mod_sub_list_clear(struct bt_mesh_model *mod)
   227ec:	b570      	push	{r4, r5, r6, lr}
   227ee:	f100 050e 	add.w	r5, r0, #14
   227f2:	f100 0412 	add.w	r4, r0, #18
		mod->groups[i] = BT_MESH_ADDR_UNASSIGNED;
   227f6:	2600      	movs	r6, #0
		if (!BT_MESH_ADDR_IS_VIRTUAL(mod->groups[i])) {
   227f8:	f835 0b02 	ldrh.w	r0, [r5], #2
   227fc:	f480 4300 	eor.w	r3, r0, #32768	; 0x8000
   22800:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   22804:	d305      	bcc.n	22812 <mod_sub_list_clear.isra.0+0x26>
			if (mod->groups[i] != BT_MESH_ADDR_UNASSIGNED) {
   22806:	b108      	cbz	r0, 2280c <mod_sub_list_clear.isra.0+0x20>
				mod->groups[i] = BT_MESH_ADDR_UNASSIGNED;
   22808:	f825 6c02 	strh.w	r6, [r5, #-2]
	for (i = 0, clear_count = 0; i < ARRAY_SIZE(mod->groups); i++) {
   2280c:	42a5      	cmp	r5, r4
   2280e:	d1f3      	bne.n	227f8 <mod_sub_list_clear.isra.0+0xc>
}
   22810:	bd70      	pop	{r4, r5, r6, pc}
		label_uuid = bt_mesh_va_label_get(mod->groups[i]);
   22812:	f7e9 fbd9 	bl	bfc8 <bt_mesh_va_label_get>
		mod->groups[i] = BT_MESH_ADDR_UNASSIGNED;
   22816:	f825 6c02 	strh.w	r6, [r5, #-2]
		if (label_uuid) {
   2281a:	2800      	cmp	r0, #0
   2281c:	d0f6      	beq.n	2280c <mod_sub_list_clear.isra.0+0x20>
			bt_mesh_va_del(label_uuid, NULL);
   2281e:	2100      	movs	r1, #0
   22820:	f7e9 fb9a 	bl	bf58 <bt_mesh_va_del>
   22824:	e7f2      	b.n	2280c <mod_sub_list_clear.isra.0+0x20>

00022826 <mod_reset>:
{
   22826:	b510      	push	{r4, lr}
   22828:	4604      	mov	r4, r0
	clear_count = mod_sub_list_clear(mod);
   2282a:	f7ff ffdf 	bl	227ec <mod_sub_list_clear.isra.0>
	if (mod->cb && mod->cb->reset) {
   2282e:	69a3      	ldr	r3, [r4, #24]
   22830:	b12b      	cbz	r3, 2283e <mod_reset+0x18>
   22832:	68db      	ldr	r3, [r3, #12]
   22834:	b11b      	cbz	r3, 2283e <mod_reset+0x18>
		mod->cb->reset(mod);
   22836:	4620      	mov	r0, r4
}
   22838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		mod->cb->reset(mod);
   2283c:	4718      	bx	r3
}
   2283e:	bd10      	pop	{r4, pc}

00022840 <mod_sub_clear_visitor>:
{
   22840:	b508      	push	{r3, lr}
	mod_sub_list_clear(mod);
   22842:	f7ff ffd3 	bl	227ec <mod_sub_list_clear.isra.0>
}
   22846:	2001      	movs	r0, #1
   22848:	bd08      	pop	{r3, pc}

0002284a <hb_pub_send_status>:
{
   2284a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2284c:	b08b      	sub	sp, #44	; 0x2c
   2284e:	461c      	mov	r4, r3
   22850:	4617      	mov	r7, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_HEARTBEAT_PUB_STATUS, 10);
   22852:	ab06      	add	r3, sp, #24
   22854:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
{
   22858:	4605      	mov	r5, r0
   2285a:	460e      	mov	r6, r1
	bt_mesh_model_msg_init(&msg, OP_HEARTBEAT_PUB_STATUS);
   2285c:	a803      	add	r0, sp, #12
   2285e:	2106      	movs	r1, #6
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_HEARTBEAT_PUB_STATUS, 10);
   22860:	e9cd 2304 	strd	r2, r3, [sp, #16]
   22864:	9303      	str	r3, [sp, #12]
	bt_mesh_model_msg_init(&msg, OP_HEARTBEAT_PUB_STATUS);
   22866:	f7fe fd4c 	bl	21302 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   2286a:	4639      	mov	r1, r7
   2286c:	a803      	add	r0, sp, #12
   2286e:	f002 fa61 	bl	24d34 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, pub->dst);
   22872:	8821      	ldrh	r1, [r4, #0]
   22874:	a803      	add	r0, sp, #12
   22876:	f002 fa65 	bl	24d44 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(&msg, hb_pub_count_log(pub->count));
   2287a:	8861      	ldrh	r1, [r4, #2]
	if (!val) {
   2287c:	b171      	cbz	r1, 2289c <hb_pub_send_status+0x52>
	} else if (val == 0x01) {
   2287e:	2901      	cmp	r1, #1
   22880:	d00c      	beq.n	2289c <hb_pub_send_status+0x52>
	} else if (val == 0xffff) {
   22882:	f64f 73ff 	movw	r3, #65535	; 0xffff
   22886:	4299      	cmp	r1, r3
		return 32 - __builtin_clz(val - 1) + 1;
   22888:	bf1f      	itttt	ne
   2288a:	f101 31ff 	addne.w	r1, r1, #4294967295	; 0xffffffff
   2288e:	fab1 f181 	clzne	r1, r1
   22892:	f1c1 0121 	rsbne	r1, r1, #33	; 0x21
   22896:	b2c9      	uxtbne	r1, r1
		return 0xff;
   22898:	bf08      	it	eq
   2289a:	21ff      	moveq	r1, #255	; 0xff
	net_buf_simple_add_u8(&msg, hb_pub_count_log(pub->count));
   2289c:	a803      	add	r0, sp, #12
   2289e:	f002 fa49 	bl	24d34 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, bt_mesh_hb_log(pub->period));
   228a2:	68e1      	ldr	r1, [r4, #12]

static inline uint8_t bt_mesh_hb_log(uint32_t val)
{
	if (!val) {
   228a4:	b149      	cbz	r1, 228ba <hb_pub_send_status+0x70>
		return 0x00;
	} else if (val == 0xffff) {
   228a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   228aa:	4299      	cmp	r1, r3
		return 0xff;
	} else {
		return 32 - __builtin_clz(val);
   228ac:	bf1d      	ittte	ne
   228ae:	fab1 f181 	clzne	r1, r1
   228b2:	f1c1 0120 	rsbne	r1, r1, #32
   228b6:	b2c9      	uxtbne	r1, r1
		return 0xff;
   228b8:	21ff      	moveq	r1, #255	; 0xff
   228ba:	a803      	add	r0, sp, #12
   228bc:	f002 fa3a 	bl	24d34 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, pub->ttl);
   228c0:	7921      	ldrb	r1, [r4, #4]
   228c2:	a803      	add	r0, sp, #12
   228c4:	f002 fa36 	bl	24d34 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, pub->feat);
   228c8:	88e1      	ldrh	r1, [r4, #6]
   228ca:	a803      	add	r0, sp, #12
   228cc:	f002 fa3a 	bl	24d44 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, pub->net_idx);
   228d0:	8921      	ldrh	r1, [r4, #8]
   228d2:	a803      	add	r0, sp, #12
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   228d4:	2400      	movs	r4, #0
	net_buf_simple_add_le16(&msg, pub->net_idx);
   228d6:	f002 fa35 	bl	24d44 <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   228da:	9400      	str	r4, [sp, #0]
   228dc:	4623      	mov	r3, r4
   228de:	aa03      	add	r2, sp, #12
   228e0:	4631      	mov	r1, r6
   228e2:	4628      	mov	r0, r5
   228e4:	f7fe fcb6 	bl	21254 <bt_mesh_model_send>
}
   228e8:	4620      	mov	r0, r4
   228ea:	b00b      	add	sp, #44	; 0x2c
   228ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

000228ee <heartbeat_pub_set>:
{
   228ee:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct hb_pub_param *param = (void *)buf->data;
   228f0:	6812      	ldr	r2, [r2, #0]
	pub.count = bt_mesh_hb_pwr2(param->count_log);
   228f2:	7894      	ldrb	r4, [r2, #2]
	pub.dst = sys_le16_to_cpu(param->dst);
   228f4:	8813      	ldrh	r3, [r2, #0]
{
   228f6:	b085      	sub	sp, #20
   228f8:	4605      	mov	r5, r0
	pub.count = bt_mesh_hb_pwr2(param->count_log);
   228fa:	4620      	mov	r0, r4
	pub.dst = sys_le16_to_cpu(param->dst);
   228fc:	f8ad 3000 	strh.w	r3, [sp]
{
   22900:	460e      	mov	r6, r1
	pub.dst = sys_le16_to_cpu(param->dst);
   22902:	b299      	uxth	r1, r3
	pub.count = bt_mesh_hb_pwr2(param->count_log);
   22904:	f7ff fa26 	bl	21d54 <bt_mesh_hb_pwr2>
   22908:	f8ad 0002 	strh.w	r0, [sp, #2]
	pub.period = bt_mesh_hb_pwr2(param->period_log);
   2290c:	78d7      	ldrb	r7, [r2, #3]
   2290e:	4638      	mov	r0, r7
   22910:	f7ff fa20 	bl	21d54 <bt_mesh_hb_pwr2>
   22914:	9003      	str	r0, [sp, #12]
	pub.ttl = param->ttl;
   22916:	7913      	ldrb	r3, [r2, #4]
   22918:	f88d 3004 	strb.w	r3, [sp, #4]
	pub.feat = sys_le16_to_cpu(param->feat);
   2291c:	7950      	ldrb	r0, [r2, #5]
   2291e:	f892 c006 	ldrb.w	ip, [r2, #6]
   22922:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
   22926:	f8ad 0006 	strh.w	r0, [sp, #6]
	pub.net_idx = sys_le16_to_cpu(param->net_idx);
   2292a:	f8b2 2007 	ldrh.w	r2, [r2, #7]
   2292e:	f8ad 2008 	strh.w	r2, [sp, #8]
	if (BT_MESH_ADDR_IS_VIRTUAL(pub.dst)) {
   22932:	f481 4100 	eor.w	r1, r1, #32768	; 0x8000
   22936:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
	pub.net_idx = sys_le16_to_cpu(param->net_idx);
   2293a:	b290      	uxth	r0, r2
	if (BT_MESH_ADDR_IS_VIRTUAL(pub.dst)) {
   2293c:	d317      	bcc.n	2296e <heartbeat_pub_set+0x80>
	if (param->count_log > 0x11 && param->count_log != 0xff) {
   2293e:	3c12      	subs	r4, #18
   22940:	b2e4      	uxtb	r4, r4
   22942:	2cec      	cmp	r4, #236	; 0xec
   22944:	d915      	bls.n	22972 <heartbeat_pub_set+0x84>
	if (param->period_log > 0x10) {
   22946:	2f10      	cmp	r7, #16
   22948:	d813      	bhi.n	22972 <heartbeat_pub_set+0x84>
	if (param->ttl > BT_MESH_TTL_MAX && param->ttl != BT_MESH_TTL_DEFAULT) {
   2294a:	f083 0380 	eor.w	r3, r3, #128	; 0x80
   2294e:	2b7e      	cmp	r3, #126	; 0x7e
   22950:	d911      	bls.n	22976 <heartbeat_pub_set+0x88>
	if (pub.net_idx > 0xfff) {
   22952:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   22956:	d20e      	bcs.n	22976 <heartbeat_pub_set+0x88>
	status = bt_mesh_hb_pub_set(&pub);
   22958:	4668      	mov	r0, sp
   2295a:	f7ea f839 	bl	c9d0 <bt_mesh_hb_pub_set>
   2295e:	4602      	mov	r2, r0
	return hb_pub_send_status(model, ctx, status, &pub);
   22960:	466b      	mov	r3, sp
   22962:	4631      	mov	r1, r6
   22964:	4628      	mov	r0, r5
   22966:	f7ff ff70 	bl	2284a <hb_pub_send_status>
}
   2296a:	b005      	add	sp, #20
   2296c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		status = STATUS_INVALID_ADDRESS;
   2296e:	2201      	movs	r2, #1
   22970:	e7f6      	b.n	22960 <heartbeat_pub_set+0x72>
		status = STATUS_CANNOT_SET;
   22972:	220f      	movs	r2, #15
   22974:	e7f4      	b.n	22960 <heartbeat_pub_set+0x72>
		return -EINVAL;
   22976:	f06f 0015 	mvn.w	r0, #21
   2297a:	e7f6      	b.n	2296a <heartbeat_pub_set+0x7c>

0002297c <heartbeat_pub_get>:
{
   2297c:	b530      	push	{r4, r5, lr}
   2297e:	b085      	sub	sp, #20
   22980:	4604      	mov	r4, r0
   22982:	460d      	mov	r5, r1
	bt_mesh_hb_pub_get(&pub);
   22984:	4668      	mov	r0, sp
   22986:	f7ea f84f 	bl	ca28 <bt_mesh_hb_pub_get>
	return hb_pub_send_status(model, ctx, STATUS_SUCCESS, &pub);
   2298a:	466b      	mov	r3, sp
   2298c:	2200      	movs	r2, #0
   2298e:	4629      	mov	r1, r5
   22990:	4620      	mov	r0, r4
   22992:	f7ff ff5a 	bl	2284a <hb_pub_send_status>
}
   22996:	b005      	add	sp, #20
   22998:	bd30      	pop	{r4, r5, pc}

0002299a <hb_sub_send_status>:
{
   2299a:	b570      	push	{r4, r5, r6, lr}
   2299c:	b08a      	sub	sp, #40	; 0x28
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_HEARTBEAT_SUB_STATUS, 9);
   2299e:	ab06      	add	r3, sp, #24
{
   229a0:	4614      	mov	r4, r2
   229a2:	4605      	mov	r5, r0
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_HEARTBEAT_SUB_STATUS, 9);
   229a4:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
	bt_mesh_model_msg_init(&msg, OP_HEARTBEAT_SUB_STATUS);
   229a8:	a803      	add	r0, sp, #12
{
   229aa:	460e      	mov	r6, r1
	bt_mesh_model_msg_init(&msg, OP_HEARTBEAT_SUB_STATUS);
   229ac:	f248 013c 	movw	r1, #32828	; 0x803c
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_HEARTBEAT_SUB_STATUS, 9);
   229b0:	e9cd 2304 	strd	r2, r3, [sp, #16]
   229b4:	9303      	str	r3, [sp, #12]
	bt_mesh_model_msg_init(&msg, OP_HEARTBEAT_SUB_STATUS);
   229b6:	f7fe fca4 	bl	21302 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, STATUS_SUCCESS);
   229ba:	2100      	movs	r1, #0
   229bc:	a803      	add	r0, sp, #12
   229be:	f002 f9b9 	bl	24d34 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, sub->src);
   229c2:	8921      	ldrh	r1, [r4, #8]
   229c4:	a803      	add	r0, sp, #12
   229c6:	f002 f9bd 	bl	24d44 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, sub->dst);
   229ca:	8961      	ldrh	r1, [r4, #10]
   229cc:	a803      	add	r0, sp, #12
   229ce:	f002 f9b9 	bl	24d44 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(&msg, bt_mesh_hb_log(sub->remaining));
   229d2:	6861      	ldr	r1, [r4, #4]
	if (!val) {
   229d4:	b149      	cbz	r1, 229ea <hb_sub_send_status+0x50>
	} else if (val == 0xffff) {
   229d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   229da:	4299      	cmp	r1, r3
		return 32 - __builtin_clz(val);
   229dc:	bf1d      	ittte	ne
   229de:	fab1 f181 	clzne	r1, r1
   229e2:	f1c1 0120 	rsbne	r1, r1, #32
   229e6:	b2c9      	uxtbne	r1, r1
		return 0xff;
   229e8:	21ff      	moveq	r1, #255	; 0xff
   229ea:	a803      	add	r0, sp, #12
   229ec:	f002 f9a2 	bl	24d34 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, bt_mesh_hb_log(sub->count));
   229f0:	89a1      	ldrh	r1, [r4, #12]
	if (!val) {
   229f2:	b149      	cbz	r1, 22a08 <hb_sub_send_status+0x6e>
	} else if (val == 0xffff) {
   229f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   229f8:	4299      	cmp	r1, r3
		return 32 - __builtin_clz(val);
   229fa:	bf1d      	ittte	ne
   229fc:	fab1 f181 	clzne	r1, r1
   22a00:	f1c1 0120 	rsbne	r1, r1, #32
   22a04:	b2c9      	uxtbne	r1, r1
		return 0xff;
   22a06:	21ff      	moveq	r1, #255	; 0xff
   22a08:	a803      	add	r0, sp, #12
   22a0a:	f002 f993 	bl	24d34 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, sub->min_hops);
   22a0e:	7ba1      	ldrb	r1, [r4, #14]
   22a10:	a803      	add	r0, sp, #12
   22a12:	f002 f98f 	bl	24d34 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, sub->max_hops);
   22a16:	7be1      	ldrb	r1, [r4, #15]
   22a18:	a803      	add	r0, sp, #12
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   22a1a:	2400      	movs	r4, #0
	net_buf_simple_add_u8(&msg, sub->max_hops);
   22a1c:	f002 f98a 	bl	24d34 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   22a20:	9400      	str	r4, [sp, #0]
   22a22:	4623      	mov	r3, r4
   22a24:	aa03      	add	r2, sp, #12
   22a26:	4631      	mov	r1, r6
   22a28:	4628      	mov	r0, r5
   22a2a:	f7fe fc13 	bl	21254 <bt_mesh_model_send>
}
   22a2e:	4620      	mov	r0, r4
   22a30:	b00a      	add	sp, #40	; 0x28
   22a32:	bd70      	pop	{r4, r5, r6, pc}

00022a34 <heartbeat_sub_set>:
{
   22a34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22a38:	4606      	mov	r6, r0
   22a3a:	b085      	sub	sp, #20
	sub_src = net_buf_simple_pull_le16(buf);
   22a3c:	4610      	mov	r0, r2
{
   22a3e:	4614      	mov	r4, r2
   22a40:	460f      	mov	r7, r1
	sub_src = net_buf_simple_pull_le16(buf);
   22a42:	f002 f9fb 	bl	24e3c <net_buf_simple_pull_le16>
   22a46:	4680      	mov	r8, r0
	sub_dst = net_buf_simple_pull_le16(buf);
   22a48:	4620      	mov	r0, r4
   22a4a:	f002 f9f7 	bl	24e3c <net_buf_simple_pull_le16>
   22a4e:	4681      	mov	r9, r0
	period_log = net_buf_simple_pull_u8(buf);
   22a50:	4620      	mov	r0, r4
   22a52:	f002 f9eb 	bl	24e2c <net_buf_simple_pull_u8>
	if (period_log > 0x11) {
   22a56:	2811      	cmp	r0, #17
	period_log = net_buf_simple_pull_u8(buf);
   22a58:	4604      	mov	r4, r0
	if (period_log > 0x11) {
   22a5a:	d905      	bls.n	22a68 <heartbeat_sub_set+0x34>
		return -EINVAL;
   22a5c:	f06f 0415 	mvn.w	r4, #21
}
   22a60:	4620      	mov	r0, r4
   22a62:	b005      	add	sp, #20
   22a64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	period = bt_mesh_hb_pwr2(period_log);
   22a68:	f7ff f974 	bl	21d54 <bt_mesh_hb_pwr2>
	status = bt_mesh_hb_sub_set(sub_src, sub_dst, period);
   22a6c:	4649      	mov	r1, r9
	period = bt_mesh_hb_pwr2(period_log);
   22a6e:	4605      	mov	r5, r0
	status = bt_mesh_hb_sub_set(sub_src, sub_dst, period);
   22a70:	4602      	mov	r2, r0
   22a72:	4640      	mov	r0, r8
   22a74:	f7e9 ffe2 	bl	ca3c <bt_mesh_hb_sub_set>
	if (status != STATUS_SUCCESS) {
   22a78:	2800      	cmp	r0, #0
   22a7a:	d1ef      	bne.n	22a5c <heartbeat_sub_set+0x28>
	bt_mesh_hb_sub_get(&sub);
   22a7c:	4668      	mov	r0, sp
   22a7e:	f7ea f82d 	bl	cadc <bt_mesh_hb_sub_get>
	if (sub.src == BT_MESH_ADDR_UNASSIGNED || !period_log) {
   22a82:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   22a86:	b103      	cbz	r3, 22a8a <heartbeat_sub_set+0x56>
   22a88:	b914      	cbnz	r4, 22a90 <heartbeat_sub_set+0x5c>
		sub.min_hops = BT_MESH_TTL_MAX;
   22a8a:	237f      	movs	r3, #127	; 0x7f
   22a8c:	f88d 300e 	strb.w	r3, [sp, #14]
	err = hb_sub_send_status(model, ctx, &sub);
   22a90:	466a      	mov	r2, sp
   22a92:	4639      	mov	r1, r7
   22a94:	4630      	mov	r0, r6
   22a96:	f7ff ff80 	bl	2299a <hb_sub_send_status>
	if (err) {
   22a9a:	4604      	mov	r4, r0
   22a9c:	2800      	cmp	r0, #0
   22a9e:	d1df      	bne.n	22a60 <heartbeat_sub_set+0x2c>
	if (sub.src != BT_MESH_ADDR_UNASSIGNED &&
   22aa0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   22aa4:	2b00      	cmp	r3, #0
   22aa6:	d0db      	beq.n	22a60 <heartbeat_sub_set+0x2c>
   22aa8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   22aac:	2b00      	cmp	r3, #0
   22aae:	d0d7      	beq.n	22a60 <heartbeat_sub_set+0x2c>
	    sub.dst != BT_MESH_ADDR_UNASSIGNED && !period) {
   22ab0:	2d00      	cmp	r5, #0
   22ab2:	d1d5      	bne.n	22a60 <heartbeat_sub_set+0x2c>
		bt_mesh_hb_sub_reset_count();
   22ab4:	f7ea f80c 	bl	cad0 <bt_mesh_hb_sub_reset_count>
   22ab8:	e7d2      	b.n	22a60 <heartbeat_sub_set+0x2c>

00022aba <heartbeat_sub_get>:
{
   22aba:	b530      	push	{r4, r5, lr}
   22abc:	b085      	sub	sp, #20
   22abe:	4604      	mov	r4, r0
   22ac0:	460d      	mov	r5, r1
	bt_mesh_hb_sub_get(&sub);
   22ac2:	4668      	mov	r0, sp
   22ac4:	f7ea f80a 	bl	cadc <bt_mesh_hb_sub_get>
	return hb_sub_send_status(model, ctx, &sub);
   22ac8:	466a      	mov	r2, sp
   22aca:	4629      	mov	r1, r5
   22acc:	4620      	mov	r0, r4
   22ace:	f7ff ff64 	bl	2299a <hb_sub_send_status>
}
   22ad2:	b005      	add	sp, #20
   22ad4:	bd30      	pop	{r4, r5, pc}

00022ad6 <attention_off>:
	if (srv->cb && srv->cb->attn_off) {
   22ad6:	f850 3c04 	ldr.w	r3, [r0, #-4]
   22ada:	b123      	cbz	r3, 22ae6 <attention_off+0x10>
   22adc:	695b      	ldr	r3, [r3, #20]
   22ade:	b113      	cbz	r3, 22ae6 <attention_off+0x10>
		srv->cb->attn_off(srv->model);
   22ae0:	f850 0c08 	ldr.w	r0, [r0, #-8]
   22ae4:	4718      	bx	r3
}
   22ae6:	4770      	bx	lr

00022ae8 <health_period_set_unrel>:
{
   22ae8:	b510      	push	{r4, lr}
   22aea:	4604      	mov	r4, r0
	period = net_buf_simple_pull_u8(buf);
   22aec:	4610      	mov	r0, r2
   22aee:	f002 f99d 	bl	24e2c <net_buf_simple_pull_u8>
	if (period > 15) {
   22af2:	280f      	cmp	r0, #15
	model->pub->period_div = period;
   22af4:	bf9f      	itttt	ls
   22af6:	68a3      	ldrls	r3, [r4, #8]
   22af8:	7ada      	ldrbls	r2, [r3, #11]
   22afa:	f360 0203 	bfils	r2, r0, #0, #4
   22afe:	72da      	strbls	r2, [r3, #11]
	return 0;
   22b00:	bf94      	ite	ls
   22b02:	2000      	movls	r0, #0
		return -EINVAL;
   22b04:	f06f 0015 	mvnhi.w	r0, #21
}
   22b08:	bd10      	pop	{r4, pc}

00022b0a <send_health_period_status>:
{
   22b0a:	b570      	push	{r4, r5, r6, lr}
   22b0c:	4604      	mov	r4, r0
   22b0e:	b088      	sub	sp, #32
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_HEALTH_PERIOD_STATUS, 1);
   22b10:	ab03      	add	r3, sp, #12
   22b12:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   22b16:	460e      	mov	r6, r1
	bt_mesh_model_msg_init(&msg, OP_HEALTH_PERIOD_STATUS);
   22b18:	a805      	add	r0, sp, #20
   22b1a:	f248 0137 	movw	r1, #32823	; 0x8037
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_HEALTH_PERIOD_STATUS, 1);
   22b1e:	e9cd 2306 	strd	r2, r3, [sp, #24]
   22b22:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_HEALTH_PERIOD_STATUS);
   22b24:	f7fe fbed 	bl	21302 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, model->pub->period_div);
   22b28:	68a3      	ldr	r3, [r4, #8]
   22b2a:	7ad9      	ldrb	r1, [r3, #11]
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   22b2c:	2500      	movs	r5, #0
	net_buf_simple_add_u8(&msg, model->pub->period_div);
   22b2e:	f001 010f 	and.w	r1, r1, #15
   22b32:	a805      	add	r0, sp, #20
   22b34:	f002 f8fe 	bl	24d34 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   22b38:	9500      	str	r5, [sp, #0]
   22b3a:	462b      	mov	r3, r5
   22b3c:	aa05      	add	r2, sp, #20
   22b3e:	4631      	mov	r1, r6
   22b40:	4620      	mov	r0, r4
   22b42:	f7fe fb87 	bl	21254 <bt_mesh_model_send>
}
   22b46:	4628      	mov	r0, r5
   22b48:	b008      	add	sp, #32
   22b4a:	bd70      	pop	{r4, r5, r6, pc}

00022b4c <health_period_set>:
{
   22b4c:	b538      	push	{r3, r4, r5, lr}
   22b4e:	4604      	mov	r4, r0
   22b50:	460d      	mov	r5, r1
	err = health_period_set_unrel(model, ctx, buf);
   22b52:	f7ff ffc9 	bl	22ae8 <health_period_set_unrel>
	if (err) {
   22b56:	b928      	cbnz	r0, 22b64 <health_period_set+0x18>
	return send_health_period_status(model, ctx);
   22b58:	4629      	mov	r1, r5
   22b5a:	4620      	mov	r0, r4
}
   22b5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return send_health_period_status(model, ctx);
   22b60:	f7ff bfd3 	b.w	22b0a <send_health_period_status>
}
   22b64:	bd38      	pop	{r3, r4, r5, pc}

00022b66 <health_period_get>:
	return send_health_period_status(model, ctx);
   22b66:	f7ff bfd0 	b.w	22b0a <send_health_period_status>

00022b6a <send_attention_status>:
{
   22b6a:	b5f0      	push	{r4, r5, r6, r7, lr}
   22b6c:	4605      	mov	r5, r0
	return z_timeout_remaining(&dwork->timeout);
   22b6e:	6a00      	ldr	r0, [r0, #32]
   22b70:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_ATTENTION_STATUS, 1);
   22b72:	ab03      	add	r3, sp, #12
   22b74:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
   22b78:	3018      	adds	r0, #24
   22b7a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   22b7e:	9305      	str	r3, [sp, #20]
{
   22b80:	460f      	mov	r7, r1
   22b82:	f003 f9d5 	bl	25f30 <z_timeout_remaining>
	bt_mesh_model_msg_init(&msg, OP_ATTENTION_STATUS);
   22b86:	f248 0107 	movw	r1, #32775	; 0x8007
   22b8a:	4604      	mov	r4, r0
   22b8c:	a805      	add	r0, sp, #20
   22b8e:	f7fe fbb8 	bl	21302 <bt_mesh_model_msg_init>
			return (uint32_t)((t * to_hz + off) / from_hz);
   22b92:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   22b96:	fba4 4001 	umull	r4, r0, r4, r1
   22b9a:	0be2      	lsrs	r2, r4, #15
 * @return The converted time value
 */
static TIME_CONSTEXPR inline uint32_t k_ticks_to_ms_floor32(uint32_t t)
{
	/* Generated.  Do not edit.  See above. */
	return z_tmcvt(t, Z_HZ_ticks, Z_HZ_ms, true, true, false, false);
   22b9c:	2600      	movs	r6, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   22b9e:	ea42 4240 	orr.w	r2, r2, r0, lsl #17
	net_buf_simple_add_u8(&msg, time);
   22ba2:	a805      	add	r0, sp, #20
		k_work_delayable_remaining_get(&srv->attn_timer)) / 1000U;
   22ba4:	fbb2 f1f1 	udiv	r1, r2, r1
	net_buf_simple_add_u8(&msg, time);
   22ba8:	b2c9      	uxtb	r1, r1
   22baa:	f002 f8c3 	bl	24d34 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   22bae:	9600      	str	r6, [sp, #0]
   22bb0:	4633      	mov	r3, r6
   22bb2:	aa05      	add	r2, sp, #20
   22bb4:	4639      	mov	r1, r7
   22bb6:	4628      	mov	r0, r5
   22bb8:	f7fe fb4c 	bl	21254 <bt_mesh_model_send>
}
   22bbc:	4630      	mov	r0, r6
   22bbe:	b009      	add	sp, #36	; 0x24
   22bc0:	bdf0      	pop	{r4, r5, r6, r7, pc}

00022bc2 <attention_get>:
	return send_attention_status(model, ctx);
   22bc2:	f7ff bfd2 	b.w	22b6a <send_attention_status>

00022bc6 <health_fault_test_unrel>:
{
   22bc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_mesh_health_srv *srv = model->user_data;
   22bca:	6a07      	ldr	r7, [r0, #32]
{
   22bcc:	4604      	mov	r4, r0
	test_id = net_buf_simple_pull_u8(buf);
   22bce:	4610      	mov	r0, r2
{
   22bd0:	4615      	mov	r5, r2
	test_id = net_buf_simple_pull_u8(buf);
   22bd2:	f002 f92b 	bl	24e2c <net_buf_simple_pull_u8>
   22bd6:	4606      	mov	r6, r0
	company_id = net_buf_simple_pull_le16(buf);
   22bd8:	4628      	mov	r0, r5
   22bda:	f002 f92f 	bl	24e3c <net_buf_simple_pull_le16>
	if (srv->cb && srv->cb->fault_test) {
   22bde:	687b      	ldr	r3, [r7, #4]
	company_id = net_buf_simple_pull_le16(buf);
   22be0:	4602      	mov	r2, r0
	if (srv->cb && srv->cb->fault_test) {
   22be2:	b133      	cbz	r3, 22bf2 <health_fault_test_unrel+0x2c>
   22be4:	68db      	ldr	r3, [r3, #12]
   22be6:	b123      	cbz	r3, 22bf2 <health_fault_test_unrel+0x2c>
		return srv->cb->fault_test(model, test_id, company_id);
   22be8:	4631      	mov	r1, r6
   22bea:	4620      	mov	r0, r4
}
   22bec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return srv->cb->fault_test(model, test_id, company_id);
   22bf0:	4718      	bx	r3
}
   22bf2:	2000      	movs	r0, #0
   22bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00022bf8 <health_fault_clear_unrel>:
{
   22bf8:	b570      	push	{r4, r5, r6, lr}
	struct bt_mesh_health_srv *srv = model->user_data;
   22bfa:	6a05      	ldr	r5, [r0, #32]
{
   22bfc:	4604      	mov	r4, r0
	company_id = net_buf_simple_pull_le16(buf);
   22bfe:	4610      	mov	r0, r2
   22c00:	f002 f91c 	bl	24e3c <net_buf_simple_pull_le16>
	if (srv->cb && srv->cb->fault_clear) {
   22c04:	686b      	ldr	r3, [r5, #4]
	company_id = net_buf_simple_pull_le16(buf);
   22c06:	4601      	mov	r1, r0
	if (srv->cb && srv->cb->fault_clear) {
   22c08:	b12b      	cbz	r3, 22c16 <health_fault_clear_unrel+0x1e>
   22c0a:	689b      	ldr	r3, [r3, #8]
   22c0c:	b11b      	cbz	r3, 22c16 <health_fault_clear_unrel+0x1e>
		return srv->cb->fault_clear(model, company_id);
   22c0e:	4620      	mov	r0, r4
}
   22c10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return srv->cb->fault_clear(model, company_id);
   22c14:	4718      	bx	r3
}
   22c16:	2000      	movs	r0, #0
   22c18:	bd70      	pop	{r4, r5, r6, pc}

00022c1a <health_get_registered>:
{
   22c1a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   22c1e:	4614      	mov	r4, r2
	struct bt_mesh_health_srv *srv = mod->user_data;
   22c20:	f8d0 8020 	ldr.w	r8, [r0, #32]
{
   22c24:	460f      	mov	r7, r1
   22c26:	4606      	mov	r6, r0
	bt_mesh_model_msg_init(msg, OP_HEALTH_FAULT_STATUS);
   22c28:	2105      	movs	r1, #5
   22c2a:	4610      	mov	r0, r2
   22c2c:	f7fe fb69 	bl	21302 <bt_mesh_model_msg_init>
	test_id = net_buf_simple_add(msg, 1);
   22c30:	2101      	movs	r1, #1
   22c32:	4620      	mov	r0, r4
   22c34:	f002 f86f 	bl	24d16 <net_buf_simple_add>
	net_buf_simple_add_le16(msg, company_id);
   22c38:	4639      	mov	r1, r7
	test_id = net_buf_simple_add(msg, 1);
   22c3a:	4605      	mov	r5, r0
	net_buf_simple_add_le16(msg, company_id);
   22c3c:	4620      	mov	r0, r4
   22c3e:	f002 f881 	bl	24d44 <net_buf_simple_add_le16>
	if (srv->cb && srv->cb->fault_get_reg) {
   22c42:	f8d8 3004 	ldr.w	r3, [r8, #4]
   22c46:	b1b3      	cbz	r3, 22c76 <health_get_registered+0x5c>
   22c48:	685b      	ldr	r3, [r3, #4]
   22c4a:	b1a3      	cbz	r3, 22c76 <health_get_registered+0x5c>
		uint8_t fault_count = net_buf_simple_tailroom(msg) - 4;
   22c4c:	4620      	mov	r0, r4
   22c4e:	f002 f91c 	bl	24e8a <net_buf_simple_tailroom>
   22c52:	3804      	subs	r0, #4
		err = srv->cb->fault_get_reg(mod, company_id, test_id,
   22c54:	f8d8 1004 	ldr.w	r1, [r8, #4]
	return buf->data + buf->len;
   22c58:	6822      	ldr	r2, [r4, #0]
   22c5a:	88a3      	ldrh	r3, [r4, #4]
		uint8_t fault_count = net_buf_simple_tailroom(msg) - 4;
   22c5c:	f88d 000f 	strb.w	r0, [sp, #15]
		err = srv->cb->fault_get_reg(mod, company_id, test_id,
   22c60:	f10d 000f 	add.w	r0, sp, #15
   22c64:	9000      	str	r0, [sp, #0]
   22c66:	f8d1 8004 	ldr.w	r8, [r1, #4]
   22c6a:	4413      	add	r3, r2
   22c6c:	4639      	mov	r1, r7
   22c6e:	462a      	mov	r2, r5
   22c70:	4630      	mov	r0, r6
   22c72:	47c0      	blx	r8
		if (err) {
   22c74:	b110      	cbz	r0, 22c7c <health_get_registered+0x62>
		*test_id = HEALTH_TEST_STANDARD;
   22c76:	2300      	movs	r3, #0
   22c78:	702b      	strb	r3, [r5, #0]
}
   22c7a:	e004      	b.n	22c86 <health_get_registered+0x6c>
			net_buf_simple_add(msg, fault_count);
   22c7c:	f89d 100f 	ldrb.w	r1, [sp, #15]
   22c80:	4620      	mov	r0, r4
   22c82:	f002 f848 	bl	24d16 <net_buf_simple_add>
}
   22c86:	b004      	add	sp, #16
   22c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00022c8c <health_fault_test>:
{
   22c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22c90:	4614      	mov	r4, r2
   22c92:	b08e      	sub	sp, #56	; 0x38
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   22c94:	ab05      	add	r3, sp, #20
	struct bt_mesh_health_srv *srv = model->user_data;
   22c96:	f8d0 8020 	ldr.w	r8, [r0, #32]
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   22c9a:	9302      	str	r3, [sp, #8]
   22c9c:	f44f 1210 	mov.w	r2, #2359296	; 0x240000
{
   22ca0:	4605      	mov	r5, r0
	test_id = net_buf_simple_pull_u8(buf);
   22ca2:	4620      	mov	r0, r4
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   22ca4:	e9cd 2303 	strd	r2, r3, [sp, #12]
{
   22ca8:	460e      	mov	r6, r1
	test_id = net_buf_simple_pull_u8(buf);
   22caa:	f002 f8bf 	bl	24e2c <net_buf_simple_pull_u8>
   22cae:	4607      	mov	r7, r0
	company_id = net_buf_simple_pull_le16(buf);
   22cb0:	4620      	mov	r0, r4
   22cb2:	f002 f8c3 	bl	24e3c <net_buf_simple_pull_le16>
	if (srv->cb && srv->cb->fault_test) {
   22cb6:	f8d8 3004 	ldr.w	r3, [r8, #4]
	company_id = net_buf_simple_pull_le16(buf);
   22cba:	4604      	mov	r4, r0
	if (srv->cb && srv->cb->fault_test) {
   22cbc:	b983      	cbnz	r3, 22ce0 <health_fault_test+0x54>
	health_get_registered(model, company_id, &sdu);
   22cbe:	4621      	mov	r1, r4
   22cc0:	aa02      	add	r2, sp, #8
	if (bt_mesh_model_send(model, ctx, &sdu, NULL, NULL)) {
   22cc2:	2400      	movs	r4, #0
	health_get_registered(model, company_id, &sdu);
   22cc4:	4628      	mov	r0, r5
   22cc6:	f7ff ffa8 	bl	22c1a <health_get_registered>
	if (bt_mesh_model_send(model, ctx, &sdu, NULL, NULL)) {
   22cca:	9400      	str	r4, [sp, #0]
   22ccc:	4623      	mov	r3, r4
   22cce:	aa02      	add	r2, sp, #8
   22cd0:	4631      	mov	r1, r6
   22cd2:	4628      	mov	r0, r5
   22cd4:	f7fe fabe 	bl	21254 <bt_mesh_model_send>
	return 0;
   22cd8:	4620      	mov	r0, r4
}
   22cda:	b00e      	add	sp, #56	; 0x38
   22cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (srv->cb && srv->cb->fault_test) {
   22ce0:	68db      	ldr	r3, [r3, #12]
   22ce2:	2b00      	cmp	r3, #0
   22ce4:	d0eb      	beq.n	22cbe <health_fault_test+0x32>
		err = srv->cb->fault_test(model, test_id, company_id);
   22ce6:	4602      	mov	r2, r0
   22ce8:	4639      	mov	r1, r7
   22cea:	4628      	mov	r0, r5
   22cec:	4798      	blx	r3
		if (err) {
   22cee:	2800      	cmp	r0, #0
   22cf0:	d0e5      	beq.n	22cbe <health_fault_test+0x32>
   22cf2:	e7f2      	b.n	22cda <health_fault_test+0x4e>

00022cf4 <health_fault_clear>:
{
   22cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
   22cf6:	b08f      	sub	sp, #60	; 0x3c
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   22cf8:	ab05      	add	r3, sp, #20
	struct bt_mesh_health_srv *srv = model->user_data;
   22cfa:	6a07      	ldr	r7, [r0, #32]
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   22cfc:	9302      	str	r3, [sp, #8]
{
   22cfe:	4605      	mov	r5, r0
   22d00:	460e      	mov	r6, r1
	company_id = net_buf_simple_pull_le16(buf);
   22d02:	4610      	mov	r0, r2
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   22d04:	f44f 1110 	mov.w	r1, #2359296	; 0x240000
   22d08:	e9cd 1303 	strd	r1, r3, [sp, #12]
	company_id = net_buf_simple_pull_le16(buf);
   22d0c:	f002 f896 	bl	24e3c <net_buf_simple_pull_le16>
	if (srv->cb && srv->cb->fault_clear) {
   22d10:	687b      	ldr	r3, [r7, #4]
	company_id = net_buf_simple_pull_le16(buf);
   22d12:	4604      	mov	r4, r0
	if (srv->cb && srv->cb->fault_clear) {
   22d14:	b97b      	cbnz	r3, 22d36 <health_fault_clear+0x42>
	health_get_registered(model, company_id, &sdu);
   22d16:	4621      	mov	r1, r4
   22d18:	aa02      	add	r2, sp, #8
	if (bt_mesh_model_send(model, ctx, &sdu, NULL, NULL)) {
   22d1a:	2400      	movs	r4, #0
	health_get_registered(model, company_id, &sdu);
   22d1c:	4628      	mov	r0, r5
   22d1e:	f7ff ff7c 	bl	22c1a <health_get_registered>
	if (bt_mesh_model_send(model, ctx, &sdu, NULL, NULL)) {
   22d22:	9400      	str	r4, [sp, #0]
   22d24:	4623      	mov	r3, r4
   22d26:	aa02      	add	r2, sp, #8
   22d28:	4631      	mov	r1, r6
   22d2a:	4628      	mov	r0, r5
   22d2c:	f7fe fa92 	bl	21254 <bt_mesh_model_send>
	return 0;
   22d30:	4620      	mov	r0, r4
}
   22d32:	b00f      	add	sp, #60	; 0x3c
   22d34:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (srv->cb && srv->cb->fault_clear) {
   22d36:	689b      	ldr	r3, [r3, #8]
   22d38:	2b00      	cmp	r3, #0
   22d3a:	d0ec      	beq.n	22d16 <health_fault_clear+0x22>
		err = srv->cb->fault_clear(model, company_id);
   22d3c:	4601      	mov	r1, r0
   22d3e:	4628      	mov	r0, r5
   22d40:	4798      	blx	r3
		if (err) {
   22d42:	2800      	cmp	r0, #0
   22d44:	d0e7      	beq.n	22d16 <health_fault_clear+0x22>
   22d46:	e7f4      	b.n	22d32 <health_fault_clear+0x3e>

00022d48 <health_fault_get>:
{
   22d48:	b570      	push	{r4, r5, r6, lr}
   22d4a:	b08e      	sub	sp, #56	; 0x38
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   22d4c:	ab05      	add	r3, sp, #20
{
   22d4e:	4604      	mov	r4, r0
   22d50:	460e      	mov	r6, r1
	company_id = net_buf_simple_pull_le16(buf);
   22d52:	4610      	mov	r0, r2
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   22d54:	f44f 1110 	mov.w	r1, #2359296	; 0x240000
   22d58:	e9cd 1303 	strd	r1, r3, [sp, #12]
   22d5c:	9302      	str	r3, [sp, #8]
	company_id = net_buf_simple_pull_le16(buf);
   22d5e:	f002 f86d 	bl	24e3c <net_buf_simple_pull_le16>
	if (bt_mesh_model_send(model, ctx, &sdu, NULL, NULL)) {
   22d62:	2500      	movs	r5, #0
	company_id = net_buf_simple_pull_le16(buf);
   22d64:	4601      	mov	r1, r0
	health_get_registered(model, company_id, &sdu);
   22d66:	aa02      	add	r2, sp, #8
   22d68:	4620      	mov	r0, r4
   22d6a:	f7ff ff56 	bl	22c1a <health_get_registered>
	if (bt_mesh_model_send(model, ctx, &sdu, NULL, NULL)) {
   22d6e:	9500      	str	r5, [sp, #0]
   22d70:	462b      	mov	r3, r5
   22d72:	aa02      	add	r2, sp, #8
   22d74:	4631      	mov	r1, r6
   22d76:	4620      	mov	r0, r4
   22d78:	f7fe fa6c 	bl	21254 <bt_mesh_model_send>
}
   22d7c:	4628      	mov	r0, r5
   22d7e:	b00e      	add	sp, #56	; 0x38
   22d80:	bd70      	pop	{r4, r5, r6, pc}

00022d82 <health_pub_update>:
{
   22d82:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_mesh_model_pub *pub = mod->pub;
   22d86:	f8d0 9008 	ldr.w	r9, [r0, #8]
	struct bt_mesh_health_srv *srv = mod->user_data;
   22d8a:	f8d0 a020 	ldr.w	sl, [r0, #32]
	count = health_get_current(mod, pub->msg);
   22d8e:	f8d9 5010 	ldr.w	r5, [r9, #16]
	bt_mesh_model_msg_init(msg, OP_HEALTH_CURRENT_STATUS);
   22d92:	2104      	movs	r1, #4
{
   22d94:	4607      	mov	r7, r0
	bt_mesh_model_msg_init(msg, OP_HEALTH_CURRENT_STATUS);
   22d96:	4628      	mov	r0, r5
   22d98:	f7fe fab3 	bl	21302 <bt_mesh_model_msg_init>
	test_id = net_buf_simple_add(msg, 1);
   22d9c:	2101      	movs	r1, #1
   22d9e:	4628      	mov	r0, r5
   22da0:	f001 ffb9 	bl	24d16 <net_buf_simple_add>
	company_ptr = net_buf_simple_add(msg, sizeof(company_id));
   22da4:	2102      	movs	r1, #2
	test_id = net_buf_simple_add(msg, 1);
   22da6:	4606      	mov	r6, r0
	company_ptr = net_buf_simple_add(msg, sizeof(company_id));
   22da8:	4628      	mov	r0, r5
   22daa:	f001 ffb4 	bl	24d16 <net_buf_simple_add>
   22dae:	4604      	mov	r4, r0
	comp = bt_mesh_comp_get();
   22db0:	f7ea f9f4 	bl	d19c <bt_mesh_comp_get>
	if (srv->cb && srv->cb->fault_get_cur) {
   22db4:	f8da 3004 	ldr.w	r3, [sl, #4]
	comp = bt_mesh_comp_get();
   22db8:	4680      	mov	r8, r0
	if (srv->cb && srv->cb->fault_get_cur) {
   22dba:	b1b3      	cbz	r3, 22dea <health_pub_update+0x68>
   22dbc:	681b      	ldr	r3, [r3, #0]
   22dbe:	b1a3      	cbz	r3, 22dea <health_pub_update+0x68>
		fault_count = net_buf_simple_tailroom(msg);
   22dc0:	4628      	mov	r0, r5
   22dc2:	f002 f862 	bl	24e8a <net_buf_simple_tailroom>
   22dc6:	f88d 000d 	strb.w	r0, [sp, #13]
   22dca:	682a      	ldr	r2, [r5, #0]
		err = srv->cb->fault_get_cur(mod, test_id, &company_id,
   22dcc:	f8da 1004 	ldr.w	r1, [sl, #4]
   22dd0:	88ab      	ldrh	r3, [r5, #4]
   22dd2:	f10d 000d 	add.w	r0, sp, #13
   22dd6:	9000      	str	r0, [sp, #0]
   22dd8:	f8d1 a000 	ldr.w	sl, [r1]
   22ddc:	4413      	add	r3, r2
   22dde:	4631      	mov	r1, r6
   22de0:	f10d 020e 	add.w	r2, sp, #14
   22de4:	4638      	mov	r0, r7
   22de6:	47d0      	blx	sl
		if (err) {
   22de8:	b148      	cbz	r0, 22dfe <health_pub_update+0x7c>
		sys_put_le16(comp->cid, company_ptr);
   22dea:	f8b8 3000 	ldrh.w	r3, [r8]
	dst[0] = val;
   22dee:	7023      	strb	r3, [r4, #0]
	dst[1] = val >> 8;
   22df0:	0a1b      	lsrs	r3, r3, #8
   22df2:	7063      	strb	r3, [r4, #1]
		*test_id = HEALTH_TEST_STANDARD;
   22df4:	2300      	movs	r3, #0
   22df6:	7033      	strb	r3, [r6, #0]
		fault_count = 0U;
   22df8:	f88d 300d 	strb.w	r3, [sp, #13]
   22dfc:	e009      	b.n	22e12 <health_pub_update+0x90>
			sys_put_le16(company_id, company_ptr);
   22dfe:	f8bd 300e 	ldrh.w	r3, [sp, #14]
	dst[0] = val;
   22e02:	7023      	strb	r3, [r4, #0]
	dst[1] = val >> 8;
   22e04:	0a1b      	lsrs	r3, r3, #8
			net_buf_simple_add(msg, fault_count);
   22e06:	f89d 100d 	ldrb.w	r1, [sp, #13]
   22e0a:	7063      	strb	r3, [r4, #1]
   22e0c:	4628      	mov	r0, r5
   22e0e:	f001 ff82 	bl	24d16 <net_buf_simple_add>
	return fault_count;
   22e12:	f89d 300d 	ldrb.w	r3, [sp, #13]
	if (count) {
   22e16:	f899 2007 	ldrb.w	r2, [r9, #7]
   22e1a:	3b00      	subs	r3, #0
   22e1c:	bf18      	it	ne
   22e1e:	2301      	movne	r3, #1
   22e20:	f363 1286 	bfi	r2, r3, #6, #1
}
   22e24:	2000      	movs	r0, #0
   22e26:	f889 2007 	strb.w	r2, [r9, #7]
   22e2a:	b004      	add	sp, #16
   22e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00022e30 <attention_set_unrel>:
{
   22e30:	b510      	push	{r4, lr}
   22e32:	4604      	mov	r4, r0
	time = net_buf_simple_pull_u8(buf);
   22e34:	4610      	mov	r0, r2
   22e36:	f001 fff9 	bl	24e2c <net_buf_simple_pull_u8>
   22e3a:	4601      	mov	r1, r0
	bt_mesh_attention(model, time);
   22e3c:	4620      	mov	r0, r4
   22e3e:	f7ea fc73 	bl	d728 <bt_mesh_attention>
}
   22e42:	2000      	movs	r0, #0
   22e44:	bd10      	pop	{r4, pc}

00022e46 <attention_set>:
{
   22e46:	b538      	push	{r3, r4, r5, lr}
   22e48:	4604      	mov	r4, r0
   22e4a:	460d      	mov	r5, r1
	err = attention_set_unrel(model, ctx, buf);
   22e4c:	f7ff fff0 	bl	22e30 <attention_set_unrel>
	if (err) {
   22e50:	b928      	cbnz	r0, 22e5e <attention_set+0x18>
	return send_attention_status(model, ctx);
   22e52:	4629      	mov	r1, r5
   22e54:	4620      	mov	r0, r4
}
   22e56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return send_attention_status(model, ctx);
   22e5a:	f7ff be86 	b.w	22b6a <send_attention_status>
}
   22e5e:	bd38      	pop	{r3, r4, r5, pc}

00022e60 <bt_mesh_adv_buf_local_ready>:
}
   22e60:	4770      	bx	lr

00022e62 <bt_mesh_adv_gatt_update>:
	bt_mesh_adv_buf_get_cancel();
   22e62:	f7e7 ba5f 	b.w	a324 <bt_mesh_adv_buf_get_cancel>

00022e66 <friend_recv_delay>:
{
   22e66:	b510      	push	{r4, lr}
   22e68:	4604      	mov	r4, r0
	return (int32_t)frnd->recv_delay + (CONFIG_BT_MESH_FRIEND_RECV_WIN / 5);
   22e6a:	7880      	ldrb	r0, [r0, #2]
	frnd->pending_req = 1U;
   22e6c:	78e3      	ldrb	r3, [r4, #3]
			return ((t * to_hz + off) / from_hz);
   22e6e:	03c0      	lsls	r0, r0, #15
   22e70:	f043 0304 	orr.w	r3, r3, #4
   22e74:	f500 10cc 	add.w	r0, r0, #1671168	; 0x198000
   22e78:	70e3      	strb	r3, [r4, #3]
   22e7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   22e7e:	2300      	movs	r3, #0
   22e80:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   22e84:	2100      	movs	r1, #0
   22e86:	f7de faf7 	bl	1478 <__aeabi_uldivmod>
   22e8a:	4602      	mov	r2, r0
   22e8c:	460b      	mov	r3, r1
	k_work_reschedule(&frnd->timer, K_MSEC(delay));
   22e8e:	f104 0060 	add.w	r0, r4, #96	; 0x60
}
   22e92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_reschedule(&frnd->timer, K_MSEC(delay));
   22e96:	f7f8 bc3f 	b.w	1b718 <k_work_reschedule>

00022e9a <friend_clear_sent>:
{
   22e9a:	b570      	push	{r4, r5, r6, lr}
			  K_SECONDS(frnd->clear.repeat_sec));
   22e9c:	f8b1 50b6 	ldrh.w	r5, [r1, #182]	; 0xb6
   22ea0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
   22ea4:	460c      	mov	r4, r1
			  K_SECONDS(frnd->clear.repeat_sec));
   22ea6:	435d      	muls	r5, r3
   22ea8:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   22eac:	f240 30e7 	movw	r0, #999	; 0x3e7
   22eb0:	2100      	movs	r1, #0
   22eb2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   22eb6:	2300      	movs	r3, #0
   22eb8:	fbe5 0106 	umlal	r0, r1, r5, r6
   22ebc:	f7de fadc 	bl	1478 <__aeabi_uldivmod>
   22ec0:	4602      	mov	r2, r0
   22ec2:	460b      	mov	r3, r1
	k_work_reschedule(&frnd->clear.timer,
   22ec4:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   22ec8:	f7f8 fc26 	bl	1b718 <k_work_reschedule>
	frnd->clear.repeat_sec *= 2U;
   22ecc:	f8b4 30b6 	ldrh.w	r3, [r4, #182]	; 0xb6
   22ed0:	005b      	lsls	r3, r3, #1
   22ed2:	f8a4 30b6 	strh.w	r3, [r4, #182]	; 0xb6
}
   22ed6:	bd70      	pop	{r4, r5, r6, pc}

00022ed8 <friend_lpn_matches>:
	if (!frnd->established) {
   22ed8:	78c3      	ldrb	r3, [r0, #3]
{
   22eda:	b510      	push	{r4, lr}
   22edc:	4604      	mov	r4, r0
	if (!frnd->established) {
   22ede:	f013 0010 	ands.w	r0, r3, #16
   22ee2:	d013      	beq.n	22f0c <friend_lpn_matches+0x34>
	if (net_idx != frnd->subnet->net_idx) {
   22ee4:	6923      	ldr	r3, [r4, #16]
   22ee6:	8b9b      	ldrh	r3, [r3, #28]
   22ee8:	428b      	cmp	r3, r1
   22eea:	d11c      	bne.n	22f26 <friend_lpn_matches+0x4e>
	if (BT_MESH_ADDR_IS_UNICAST(addr)) {
   22eec:	b213      	sxth	r3, r2
   22eee:	2b00      	cmp	r3, #0
   22ef0:	dc0d      	bgt.n	22f0e <friend_lpn_matches+0x36>
		if (frnd->sub_list[i] == addr) {
   22ef2:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
   22ef6:	4293      	cmp	r3, r2
   22ef8:	d017      	beq.n	22f2a <friend_lpn_matches+0x52>
   22efa:	f8b4 3058 	ldrh.w	r3, [r4, #88]	; 0x58
   22efe:	4293      	cmp	r3, r2
   22f00:	d013      	beq.n	22f2a <friend_lpn_matches+0x52>
   22f02:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
   22f06:	1a9b      	subs	r3, r3, r2
   22f08:	4258      	negs	r0, r3
   22f0a:	4158      	adcs	r0, r3
}
   22f0c:	bd10      	pop	{r4, pc}
	if (frnd->lpn == BT_MESH_ADDR_UNASSIGNED) {
   22f0e:	8820      	ldrh	r0, [r4, #0]
   22f10:	2800      	cmp	r0, #0
   22f12:	d0fb      	beq.n	22f0c <friend_lpn_matches+0x34>
	return (addr >= frnd->lpn && addr < (frnd->lpn + frnd->num_elem));
   22f14:	4282      	cmp	r2, r0
   22f16:	d306      	bcc.n	22f26 <friend_lpn_matches+0x4e>
   22f18:	7a23      	ldrb	r3, [r4, #8]
   22f1a:	4418      	add	r0, r3
   22f1c:	4282      	cmp	r2, r0
   22f1e:	bfac      	ite	ge
   22f20:	2000      	movge	r0, #0
   22f22:	2001      	movlt	r0, #1
   22f24:	e7f2      	b.n	22f0c <friend_lpn_matches+0x34>
		return false;
   22f26:	2000      	movs	r0, #0
   22f28:	e7f0      	b.n	22f0c <friend_lpn_matches+0x34>
			return true;
   22f2a:	2001      	movs	r0, #1
   22f2c:	e7ee      	b.n	22f0c <friend_lpn_matches+0x34>

00022f2e <buf_send_start>:
{
   22f2e:	b538      	push	{r3, r4, r5, lr}
	frnd->pending_buf = 0U;
   22f30:	78d3      	ldrb	r3, [r2, #3]
   22f32:	f36f 03c3 	bfc	r3, #3, #1
	if (!frnd->established && frnd->last) {
   22f36:	f013 0510 	ands.w	r5, r3, #16
{
   22f3a:	4614      	mov	r4, r2
	frnd->pending_buf = 0U;
   22f3c:	70d3      	strb	r3, [r2, #3]
	if (!frnd->established && frnd->last) {
   22f3e:	d106      	bne.n	22f4e <buf_send_start+0x20>
   22f40:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
   22f44:	b118      	cbz	r0, 22f4e <buf_send_start+0x20>
		net_buf_unref(frnd->last);
   22f46:	f7f4 f897 	bl	17078 <net_buf_unref>
		frnd->last = NULL;
   22f4a:	f8c4 509c 	str.w	r5, [r4, #156]	; 0x9c
}
   22f4e:	bd38      	pop	{r3, r4, r5, pc}

00022f50 <buf_send_end>:
	if (frnd->pending_req) {
   22f50:	78cb      	ldrb	r3, [r1, #3]
{
   22f52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (frnd->pending_req) {
   22f56:	f013 0504 	ands.w	r5, r3, #4
   22f5a:	d11d      	bne.n	22f98 <buf_send_end+0x48>
	if (frnd->established) {
   22f5c:	06db      	lsls	r3, r3, #27
		k_work_reschedule(&frnd->timer, K_MSEC(frnd->poll_to));
   22f5e:	f101 0660 	add.w	r6, r1, #96	; 0x60
	if (frnd->established) {
   22f62:	d515      	bpl.n	22f90 <buf_send_end+0x40>
		k_work_reschedule(&frnd->timer, K_MSEC(frnd->poll_to));
   22f64:	684c      	ldr	r4, [r1, #4]
   22f66:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   22f6a:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   22f6e:	f240 30e7 	movw	r0, #999	; 0x3e7
   22f72:	4629      	mov	r1, r5
   22f74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   22f78:	2300      	movs	r3, #0
   22f7a:	fbc4 0107 	smlal	r0, r1, r4, r7
   22f7e:	f7de fa7b 	bl	1478 <__aeabi_uldivmod>
   22f82:	4602      	mov	r2, r0
   22f84:	460b      	mov	r3, r1
		k_work_reschedule(&frnd->timer, K_SECONDS(1));
   22f86:	4630      	mov	r0, r6
}
   22f88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_work_reschedule(&frnd->timer, K_SECONDS(1));
   22f8c:	f7f8 bbc4 	b.w	1b718 <k_work_reschedule>
   22f90:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   22f94:	2300      	movs	r3, #0
   22f96:	e7f6      	b.n	22f86 <buf_send_end+0x36>
}
   22f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00022f9c <net_buf_skip.isra.0>:
static inline struct net_buf *net_buf_skip(struct net_buf *buf, size_t len)
   22f9c:	b538      	push	{r3, r4, r5, lr}
   22f9e:	4604      	mov	r4, r0
   22fa0:	460d      	mov	r5, r1
	while (buf && len--) {
   22fa2:	b10c      	cbz	r4, 22fa8 <net_buf_skip.isra.0+0xc>
   22fa4:	3d01      	subs	r5, #1
   22fa6:	d200      	bcs.n	22faa <net_buf_skip.isra.0+0xe>
}
   22fa8:	bd38      	pop	{r3, r4, r5, pc}
	return net_buf_simple_pull_u8(&buf->b);
   22faa:	f104 0008 	add.w	r0, r4, #8
   22fae:	f001 ff3d 	bl	24e2c <net_buf_simple_pull_u8>
		if (!buf->len) {
   22fb2:	89a0      	ldrh	r0, [r4, #12]
   22fb4:	2800      	cmp	r0, #0
   22fb6:	d1f4      	bne.n	22fa2 <net_buf_skip.isra.0+0x6>
			buf = net_buf_frag_del(NULL, buf);
   22fb8:	4621      	mov	r1, r4
   22fba:	f001 fe9a 	bl	24cf2 <net_buf_frag_del>
   22fbe:	4604      	mov	r4, r0
   22fc0:	e7ef      	b.n	22fa2 <net_buf_skip.isra.0+0x6>

00022fc2 <purge_buffers>:
{
   22fc2:	b538      	push	{r3, r4, r5, lr}
   22fc4:	4604      	mov	r4, r0
		buf->frags = NULL;
   22fc6:	2500      	movs	r5, #0
	return list->head;
   22fc8:	6820      	ldr	r0, [r4, #0]
	while (!sys_slist_is_empty(list)) {
   22fca:	b900      	cbnz	r0, 22fce <purge_buffers+0xc>
}
   22fcc:	bd38      	pop	{r3, r4, r5, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   22fce:	6862      	ldr	r2, [r4, #4]
	return node->next;
   22fd0:	6803      	ldr	r3, [r0, #0]
	list->head = node;
   22fd2:	6023      	str	r3, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   22fd4:	4290      	cmp	r0, r2
	list->tail = node;
   22fd6:	bf08      	it	eq
   22fd8:	6063      	streq	r3, [r4, #4]
		buf->flags &= ~NET_BUF_FRAGS;
   22fda:	7943      	ldrb	r3, [r0, #5]
		buf->frags = NULL;
   22fdc:	6005      	str	r5, [r0, #0]
		buf->flags &= ~NET_BUF_FRAGS;
   22fde:	f023 0301 	bic.w	r3, r3, #1
   22fe2:	7143      	strb	r3, [r0, #5]
		net_buf_unref(buf);
   22fe4:	f7f4 f848 	bl	17078 <net_buf_unref>
   22fe8:	e7ee      	b.n	22fc8 <purge_buffers+0x6>

00022fea <clear_timeout>:
{
   22fea:	b538      	push	{r3, r4, r5, lr}
	if (frnd->clear.frnd == BT_MESH_ADDR_UNASSIGNED) {
   22fec:	f830 3c04 	ldrh.w	r3, [r0, #-4]
{
   22ff0:	4604      	mov	r4, r0
	if (frnd->clear.frnd == BT_MESH_ADDR_UNASSIGNED) {
   22ff2:	b1ab      	cbz	r3, 23020 <clear_timeout+0x36>
   22ff4:	f002 ffda 	bl	25fac <z_impl_k_uptime_ticks>
   22ff8:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   22ffc:	fba0 3005 	umull	r3, r0, r0, r5
   23000:	fb05 0001 	mla	r0, r5, r1, r0
   23004:	0bdb      	lsrs	r3, r3, #15
	duration = k_uptime_get_32() - frnd->clear.start;
   23006:	f854 1c08 	ldr.w	r1, [r4, #-8]
	if (duration > 2 * frnd->poll_to) {
   2300a:	f854 2cb4 	ldr.w	r2, [r4, #-180]
   2300e:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
	duration = k_uptime_get_32() - frnd->clear.start;
   23012:	1a5b      	subs	r3, r3, r1
	if (duration > 2 * frnd->poll_to) {
   23014:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
   23018:	d903      	bls.n	23022 <clear_timeout+0x38>
		frnd->clear.frnd = BT_MESH_ADDR_UNASSIGNED;
   2301a:	2300      	movs	r3, #0
   2301c:	f824 3c04 	strh.w	r3, [r4, #-4]
}
   23020:	bd38      	pop	{r3, r4, r5, pc}
	send_friend_clear(frnd);
   23022:	f1a4 00b8 	sub.w	r0, r4, #184	; 0xb8
}
   23026:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	send_friend_clear(frnd);
   2302a:	f7ea bc8b 	b.w	d944 <send_friend_clear>

0002302e <is_seg>:
{
   2302e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return list->head;
   23032:	6804      	ldr	r4, [r0, #0]
   23034:	4688      	mov	r8, r1
   23036:	4616      	mov	r6, r2
	if (!buf) {
   23038:	b33c      	cbz	r4, 2308a <is_seg+0x5c>
	net_buf_simple_save(&buf->b, &state);
   2303a:	f104 0908 	add.w	r9, r4, #8
	state->offset = net_buf_simple_headroom(buf);
   2303e:	4648      	mov	r0, r9
   23040:	f001 ff1f 	bl	24e82 <net_buf_simple_headroom>
	net_buf_skip(buf, 5);   /* skip IVI, NID, CTL, TTL, SEQ */
   23044:	2105      	movs	r1, #5
   23046:	4605      	mov	r5, r0
   23048:	4620      	mov	r0, r4
	state->len = buf->len;
   2304a:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
   2304e:	f7ff ffa5 	bl	22f9c <net_buf_skip.isra.0>
	return net_buf_simple_pull_be16(&buf->b);
   23052:	4648      	mov	r0, r9
   23054:	f001 fefa 	bl	24e4c <net_buf_simple_pull_be16>
	net_buf_skip(buf, 3);   /* skip DST, OP/AID */
   23058:	2103      	movs	r1, #3
   2305a:	4607      	mov	r7, r0
   2305c:	4620      	mov	r0, r4
   2305e:	f7ff ff9d 	bl	22f9c <net_buf_skip.isra.0>
   23062:	4648      	mov	r0, r9
   23064:	f001 fef2 	bl	24e4c <net_buf_simple_pull_be16>
	buf->data = buf->__buf + state->offset;
   23068:	6923      	ldr	r3, [r4, #16]
	buf->len = state->len;
   2306a:	f8a4 a00c 	strh.w	sl, [r4, #12]
	buf->data = buf->__buf + state->offset;
   2306e:	fa13 f585 	uxtah	r5, r3, r5
	return ((src == buf_src) && (seq_zero == buf_seq_zero));
   23072:	45b8      	cmp	r8, r7
   23074:	60a5      	str	r5, [r4, #8]
   23076:	d106      	bne.n	23086 <is_seg+0x58>
   23078:	f3c0 008c 	ubfx	r0, r0, #2, #13
   2307c:	1b83      	subs	r3, r0, r6
   2307e:	4258      	negs	r0, r3
   23080:	4158      	adcs	r0, r3
}
   23082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return ((src == buf_src) && (seq_zero == buf_seq_zero));
   23086:	2000      	movs	r0, #0
   23088:	e7fb      	b.n	23082 <is_seg+0x54>
		return false;
   2308a:	4620      	mov	r0, r4
   2308c:	e7f9      	b.n	23082 <is_seg+0x54>

0002308e <friend_queue_has_space.part.0>:
static bool friend_queue_has_space(struct bt_mesh_friend *frnd, uint16_t addr,
   2308e:	b538      	push	{r3, r4, r5, lr}
   23090:	4604      	mov	r4, r0
   23092:	461d      	mov	r5, r3
		if (seq_auth && is_seg(seg, addr, *seq_auth & TRANS_SEQ_ZERO_MASK)) {
   23094:	b942      	cbnz	r2, 230a8 <friend_queue_has_space.part.0+0x1a>
		total += seg->seg_count;
   23096:	f894 0098 	ldrb.w	r0, [r4, #152]	; 0x98
	return (CONFIG_BT_MESH_FRIEND_QUEUE_SIZE - total) > seg_count;
   2309a:	f1c0 0010 	rsb	r0, r0, #16
   2309e:	42a8      	cmp	r0, r5
   230a0:	bf94      	ite	ls
   230a2:	2000      	movls	r0, #0
   230a4:	2001      	movhi	r0, #1
}
   230a6:	bd38      	pop	{r3, r4, r5, pc}
		if (seq_auth && is_seg(seg, addr, *seq_auth & TRANS_SEQ_ZERO_MASK)) {
   230a8:	8812      	ldrh	r2, [r2, #0]
   230aa:	3090      	adds	r0, #144	; 0x90
   230ac:	f3c2 020c 	ubfx	r2, r2, #0, #13
   230b0:	f7ff ffbd 	bl	2302e <is_seg>
   230b4:	2800      	cmp	r0, #0
   230b6:	d1f6      	bne.n	230a6 <friend_queue_has_space.part.0+0x18>
   230b8:	e7ed      	b.n	23096 <friend_queue_has_space.part.0+0x8>

000230ba <enqueue_friend_pdu>:
{
   230ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   230be:	9d06      	ldr	r5, [sp, #24]
   230c0:	4604      	mov	r4, r0
   230c2:	461f      	mov	r7, r3
   230c4:	4610      	mov	r0, r2
	if (type == BT_MESH_FRIEND_PDU_SINGLE) {
   230c6:	460e      	mov	r6, r1
   230c8:	b959      	cbnz	r1, 230e2 <enqueue_friend_pdu+0x28>
	net_buf_slist_put(&frnd->queue, buf);
   230ca:	4629      	mov	r1, r5
   230cc:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   230d0:	f001 fdbf 	bl	24c52 <net_buf_slist_put>
	frnd->queue_size++;
   230d4:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   230d8:	3301      	adds	r3, #1
   230da:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
}
   230de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint16_t seq_zero = (((buf->data[10] << 8 | buf->data[11]) >> 2) & TRANS_SEQ_ZERO_MASK);
   230e2:	68ab      	ldr	r3, [r5, #8]
   230e4:	895a      	ldrh	r2, [r3, #10]
		struct bt_mesh_friend_seg *seg = &frnd->seg[i];
   230e6:	f104 0890 	add.w	r8, r4, #144	; 0x90
	uint16_t seq_zero = (((buf->data[10] << 8 | buf->data[11]) >> 2) & TRANS_SEQ_ZERO_MASK);
   230ea:	ba52      	rev16	r2, r2
		if (is_seg(seg, src, seq_zero)) {
   230ec:	4601      	mov	r1, r0
   230ee:	f3c2 028c 	ubfx	r2, r2, #2, #13
   230f2:	4640      	mov	r0, r8
   230f4:	f7ff ff9b 	bl	2302e <is_seg>
   230f8:	b920      	cbnz	r0, 23104 <enqueue_friend_pdu+0x4a>
		if (!unassigned && !sys_slist_peek_head(&seg->queue)) {
   230fa:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   230fe:	b9eb      	cbnz	r3, 2313c <enqueue_friend_pdu+0x82>
		unassigned->seg_count = seg_count;
   23100:	f884 7098 	strb.w	r7, [r4, #152]	; 0x98
	net_buf_slist_put(&seg->queue, buf);
   23104:	4629      	mov	r1, r5
   23106:	4640      	mov	r0, r8
   23108:	f001 fda3 	bl	24c52 <net_buf_slist_put>
	if (type == BT_MESH_FRIEND_PDU_COMPLETE) {
   2310c:	2e02      	cmp	r6, #2
   2310e:	d11c      	bne.n	2314a <enqueue_friend_pdu+0x90>
	return list->tail;
   23110:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   23114:	e9d4 2124 	ldrd	r2, r1, [r4, #144]	; 0x90
Z_GENLIST_APPEND_LIST(slist, snode)
   23118:	b9ab      	cbnz	r3, 23146 <enqueue_friend_pdu+0x8c>
	list->head = node;
   2311a:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		frnd->queue_size += seg->seg_count;
   2311e:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
	list->tail = node;
   23122:	f8c4 10a4 	str.w	r1, [r4, #164]	; 0xa4
   23126:	f894 1098 	ldrb.w	r1, [r4, #152]	; 0x98
	list->head = NULL;
   2312a:	2300      	movs	r3, #0
   2312c:	440a      	add	r2, r1
	list->tail = NULL;
   2312e:	e9c4 3324 	strd	r3, r3, [r4, #144]	; 0x90
   23132:	f8c4 20a8 	str.w	r2, [r4, #168]	; 0xa8
		seg->seg_count = 0U;
   23136:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
   2313a:	e7d0      	b.n	230de <enqueue_friend_pdu+0x24>
		net_buf_unref(buf);
   2313c:	4628      	mov	r0, r5
}
   2313e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   23142:	f7f3 bf99 	b.w	17078 <net_buf_unref>
	parent->next = child;
   23146:	601a      	str	r2, [r3, #0]
}
   23148:	e7e9      	b.n	2311e <enqueue_friend_pdu+0x64>
		buf->flags |= NET_BUF_FRAGS;
   2314a:	796b      	ldrb	r3, [r5, #5]
   2314c:	f043 0301 	orr.w	r3, r3, #1
   23150:	716b      	strb	r3, [r5, #5]
   23152:	e7c4      	b.n	230de <enqueue_friend_pdu+0x24>

00023154 <friend_queue_prepare_space>:
	if (seg_count > CONFIG_BT_MESH_FRIEND_QUEUE_SIZE) {
   23154:	2b10      	cmp	r3, #16
{
   23156:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2315a:	4605      	mov	r5, r0
   2315c:	461e      	mov	r6, r3
	if (seg_count > CONFIG_BT_MESH_FRIEND_QUEUE_SIZE) {
   2315e:	d904      	bls.n	2316a <friend_queue_prepare_space+0x16>
		return false;
   23160:	f04f 0800 	mov.w	r8, #0
}
   23164:	4640      	mov	r0, r8
   23166:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2316a:	f7ff ff90 	bl	2308e <friend_queue_has_space.part.0>
	if (!friend_queue_has_space(frnd, addr, seq_auth, seg_count)) {
   2316e:	4680      	mov	r8, r0
   23170:	2800      	cmp	r0, #0
   23172:	d0f5      	beq.n	23160 <friend_queue_prepare_space+0xc>
	avail_space = CONFIG_BT_MESH_FRIEND_QUEUE_SIZE - frnd->queue_size;
   23174:	f8d5 40a8 	ldr.w	r4, [r5, #168]	; 0xa8
	pending_segments = false;
   23178:	2700      	movs	r7, #0
	avail_space = CONFIG_BT_MESH_FRIEND_QUEUE_SIZE - frnd->queue_size;
   2317a:	f1c4 0410 	rsb	r4, r4, #16
   2317e:	b2e4      	uxtb	r4, r4
		buf->frags = NULL;
   23180:	46b9      	mov	r9, r7
	while (pending_segments || avail_space < seg_count) {
   23182:	b90f      	cbnz	r7, 23188 <friend_queue_prepare_space+0x34>
   23184:	42a6      	cmp	r6, r4
   23186:	d9ed      	bls.n	23164 <friend_queue_prepare_space+0x10>
	return list->head;
   23188:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
Z_GENLIST_GET(slist, snode)
   2318c:	2800      	cmp	r0, #0
   2318e:	d0e7      	beq.n	23160 <friend_queue_prepare_space+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   23190:	f8d5 20a4 	ldr.w	r2, [r5, #164]	; 0xa4
	return node->next;
   23194:	6803      	ldr	r3, [r0, #0]
	list->head = node;
   23196:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2319a:	4290      	cmp	r0, r2
   2319c:	d101      	bne.n	231a2 <friend_queue_prepare_space+0x4e>
	list->tail = node;
   2319e:	f8c5 30a4 	str.w	r3, [r5, #164]	; 0xa4
		frnd->queue_size--;
   231a2:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
   231a6:	3b01      	subs	r3, #1
   231a8:	f8c5 30a8 	str.w	r3, [r5, #168]	; 0xa8
		pending_segments = (buf->flags & NET_BUF_FRAGS);
   231ac:	7942      	ldrb	r2, [r0, #5]
		buf->frags = NULL;
   231ae:	f8c0 9000 	str.w	r9, [r0]
		pending_segments = (buf->flags & NET_BUF_FRAGS);
   231b2:	f002 0701 	and.w	r7, r2, #1
		buf->flags &= ~NET_BUF_FRAGS;
   231b6:	f022 0201 	bic.w	r2, r2, #1
		avail_space++;
   231ba:	3401      	adds	r4, #1
		buf->flags &= ~NET_BUF_FRAGS;
   231bc:	7142      	strb	r2, [r0, #5]
		avail_space++;
   231be:	b2e4      	uxtb	r4, r4
		net_buf_unref(buf);
   231c0:	f7f3 ff5a 	bl	17078 <net_buf_unref>
   231c4:	e7dd      	b.n	23182 <friend_queue_prepare_space+0x2e>

000231c6 <enqueue_sub_cfm>:
{
   231c6:	b530      	push	{r4, r5, lr}
   231c8:	b085      	sub	sp, #20
	NET_BUF_SIMPLE_DEFINE(sdu, 1 + sizeof(*cfm));
   231ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
{
   231ce:	460d      	mov	r5, r1
   231d0:	4604      	mov	r4, r0
	net_buf_simple_reserve(&sdu, 1);
   231d2:	2101      	movs	r1, #1
   231d4:	a801      	add	r0, sp, #4
	NET_BUF_SIMPLE_DEFINE(sdu, 1 + sizeof(*cfm));
   231d6:	9302      	str	r3, [sp, #8]
   231d8:	f8cd d004 	str.w	sp, [sp, #4]
   231dc:	f8cd d00c 	str.w	sp, [sp, #12]
	net_buf_simple_reserve(&sdu, 1);
   231e0:	f001 fd33 	bl	24c4a <net_buf_simple_reserve>
	cfm = net_buf_simple_add(&sdu, sizeof(*cfm));
   231e4:	2101      	movs	r1, #1
   231e6:	a801      	add	r0, sp, #4
   231e8:	f001 fd95 	bl	24d16 <net_buf_simple_add>
	buf = encode_friend_ctl(frnd, TRANS_CTL_OP_FRIEND_SUB_CFM, &sdu);
   231ec:	aa01      	add	r2, sp, #4
	cfm->xact = xact;
   231ee:	7005      	strb	r5, [r0, #0]
	buf = encode_friend_ctl(frnd, TRANS_CTL_OP_FRIEND_SUB_CFM, &sdu);
   231f0:	2109      	movs	r1, #9
   231f2:	4620      	mov	r0, r4
   231f4:	f7ea fc64 	bl	dac0 <encode_friend_ctl>
	if (!buf) {
   231f8:	4605      	mov	r5, r0
   231fa:	b180      	cbz	r0, 2321e <enqueue_sub_cfm+0x58>
	if (encrypt_friend_pdu(frnd, buf, false)) {
   231fc:	4601      	mov	r1, r0
   231fe:	2200      	movs	r2, #0
   23200:	4620      	mov	r0, r4
   23202:	f7ea fcff 	bl	dc04 <encrypt_friend_pdu>
   23206:	b950      	cbnz	r0, 2321e <enqueue_sub_cfm+0x58>
	if (frnd->last) {
   23208:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   2320c:	b108      	cbz	r0, 23212 <enqueue_sub_cfm+0x4c>
		net_buf_unref(frnd->last);
   2320e:	f7f3 ff33 	bl	17078 <net_buf_unref>
	frnd->send_last = 1U;
   23212:	78e3      	ldrb	r3, [r4, #3]
	frnd->last = buf;
   23214:	f8c4 509c 	str.w	r5, [r4, #156]	; 0x9c
	frnd->send_last = 1U;
   23218:	f043 0302 	orr.w	r3, r3, #2
   2321c:	70e3      	strb	r3, [r4, #3]
}
   2321e:	b005      	add	sp, #20
   23220:	bd30      	pop	{r4, r5, pc}

00023222 <friend_purge_old_ack>:
{
   23222:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
   23226:	f8d0 40a0 	ldr.w	r4, [r0, #160]	; 0xa0
   2322a:	4682      	mov	sl, r0
   2322c:	460f      	mov	r7, r1
   2322e:	4690      	mov	r8, r2
	sys_snode_t *cur, *prev = NULL;
   23230:	2600      	movs	r6, #0
	for (cur = sys_slist_peek_head(&frnd->queue);
   23232:	b90c      	cbnz	r4, 23238 <friend_purge_old_ack+0x16>
}
   23234:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (buf->len != 16) {
   23238:	89a3      	ldrh	r3, [r4, #12]
   2323a:	2b10      	cmp	r3, #16
   2323c:	d156      	bne.n	232ec <friend_purge_old_ack+0xca>
	net_buf_simple_save(&buf->b, &state);
   2323e:	f104 0b08 	add.w	fp, r4, #8
	state->offset = net_buf_simple_headroom(buf);
   23242:	4658      	mov	r0, fp
   23244:	f001 fe1d 	bl	24e82 <net_buf_simple_headroom>
	net_buf_skip(buf, 1); /* skip IVI, NID */
   23248:	2101      	movs	r1, #1
   2324a:	4605      	mov	r5, r0
   2324c:	4620      	mov	r0, r4
	state->len = buf->len;
   2324e:	f8b4 900c 	ldrh.w	r9, [r4, #12]
   23252:	f7ff fea3 	bl	22f9c <net_buf_skip.isra.0>
	return net_buf_simple_pull_u8(&buf->b);
   23256:	4658      	mov	r0, fp
   23258:	f001 fde8 	bl	24e2c <net_buf_simple_pull_u8>
	if (!(net_buf_pull_u8(buf) >> 7)) {
   2325c:	0602      	lsls	r2, r0, #24
   2325e:	d41e      	bmi.n	2329e <friend_purge_old_ack+0x7c>
	bool found = false;
   23260:	2300      	movs	r3, #0
	buf->data = buf->__buf + state->offset;
   23262:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   23264:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
   23268:	fa10 f585 	uxtah	r5, r0, r5
   2326c:	60a5      	str	r5, [r4, #8]
		if (is_segack(buf, seq_auth, src)) {
   2326e:	2b00      	cmp	r3, #0
   23270:	d03c      	beq.n	232ec <friend_purge_old_ack+0xca>
Z_GENLIST_REMOVE(slist, snode)
   23272:	6823      	ldr	r3, [r4, #0]
   23274:	f8da 20a4 	ldr.w	r2, [sl, #164]	; 0xa4
   23278:	bb96      	cbnz	r6, 232e0 <friend_purge_old_ack+0xbe>
   2327a:	4294      	cmp	r4, r2
	list->head = node;
   2327c:	f8ca 30a0 	str.w	r3, [sl, #160]	; 0xa0
Z_GENLIST_REMOVE(slist, snode)
   23280:	d101      	bne.n	23286 <friend_purge_old_ack+0x64>
	list->tail = node;
   23282:	f8ca 30a4 	str.w	r3, [sl, #164]	; 0xa4
			frnd->queue_size--;
   23286:	f8da 30a8 	ldr.w	r3, [sl, #168]	; 0xa8
   2328a:	3b01      	subs	r3, #1
   2328c:	f8ca 30a8 	str.w	r3, [sl, #168]	; 0xa8
			buf->frags = NULL;
   23290:	2300      	movs	r3, #0
   23292:	6023      	str	r3, [r4, #0]
			net_buf_unref(buf);
   23294:	4620      	mov	r0, r4
}
   23296:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			net_buf_unref(buf);
   2329a:	f7f3 beed 	b.w	17078 <net_buf_unref>
	return net_buf_simple_pull(&buf->b, len);
   2329e:	2103      	movs	r1, #3
   232a0:	4658      	mov	r0, fp
   232a2:	f001 fdb3 	bl	24e0c <net_buf_simple_pull>
	return net_buf_simple_pull_be16(&buf->b);
   232a6:	4658      	mov	r0, fp
   232a8:	f001 fdd0 	bl	24e4c <net_buf_simple_pull_be16>
	if (src != net_buf_pull_be16(buf)) {
   232ac:	4580      	cmp	r8, r0
   232ae:	d1d7      	bne.n	23260 <friend_purge_old_ack+0x3e>
	net_buf_skip(buf, 2); /* skip dst */
   232b0:	2102      	movs	r1, #2
   232b2:	4620      	mov	r0, r4
   232b4:	f7ff fe72 	bl	22f9c <net_buf_skip.isra.0>
	return net_buf_simple_pull_mem(&buf->b, len);
   232b8:	2101      	movs	r1, #1
   232ba:	4658      	mov	r0, fp
   232bc:	f001 fdae 	bl	24e1c <net_buf_simple_pull_mem>
	if (TRANS_CTL_OP((uint8_t *) net_buf_pull_mem(buf, 1)) != TRANS_CTL_OP_ACK) {
   232c0:	7803      	ldrb	r3, [r0, #0]
   232c2:	065b      	lsls	r3, r3, #25
   232c4:	d1cc      	bne.n	23260 <friend_purge_old_ack+0x3e>
	return net_buf_simple_pull_be16(&buf->b);
   232c6:	4658      	mov	r0, fp
   232c8:	f001 fdc0 	bl	24e4c <net_buf_simple_pull_be16>
	found = ((net_buf_pull_be16(buf) >> 2) & TRANS_SEQ_ZERO_MASK) ==
   232cc:	f3c0 038f 	ubfx	r3, r0, #2, #16
   232d0:	6838      	ldr	r0, [r7, #0]
   232d2:	4043      	eors	r3, r0
   232d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
   232d8:	fab3 f383 	clz	r3, r3
   232dc:	095b      	lsrs	r3, r3, #5
   232de:	e7c0      	b.n	23262 <friend_purge_old_ack+0x40>
Z_GENLIST_REMOVE(slist, snode)
   232e0:	42a2      	cmp	r2, r4
	parent->next = child;
   232e2:	6033      	str	r3, [r6, #0]
	list->tail = node;
   232e4:	bf08      	it	eq
   232e6:	f8ca 60a4 	streq.w	r6, [sl, #164]	; 0xa4
}
   232ea:	e7cc      	b.n	23286 <friend_purge_old_ack+0x64>
	return node->next;
   232ec:	4626      	mov	r6, r4
	     cur != NULL; prev = cur, cur = sys_slist_peek_next(cur)) {
   232ee:	6824      	ldr	r4, [r4, #0]
   232f0:	e79f      	b.n	23232 <friend_purge_old_ack+0x10>

000232f2 <bt_mesh_friend_clear>:
{
   232f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_mesh_net_tx tx = {
   232f6:	4603      	mov	r3, r0
{
   232f8:	b086      	sub	sp, #24
	struct bt_mesh_net_tx tx = {
   232fa:	f853 2b04 	ldr.w	r2, [r3], #4
	struct bt_mesh_ctl_friend_clear *msg = (void *)buf->data;
   232fe:	680f      	ldr	r7, [r1, #0]
	struct bt_mesh_net_tx tx = {
   23300:	2400      	movs	r4, #0
   23302:	e9cd 2303 	strd	r2, r3, [sp, #12]
{
   23306:	460e      	mov	r6, r1
   23308:	4605      	mov	r5, r0
	struct bt_mesh_net_tx tx = {
   2330a:	9405      	str	r4, [sp, #20]
		.src  = bt_mesh_primary_addr(),
   2330c:	f7e9 feec 	bl	d0e8 <bt_mesh_primary_addr>
	struct bt_mesh_net_tx tx = {
   23310:	f8ad 0014 	strh.w	r0, [sp, #20]
		.xmit = bt_mesh_net_transmit_get(),
   23314:	f7e6 ff76 	bl	a204 <bt_mesh_net_transmit_get>
	if (buf->len < sizeof(*msg)) {
   23318:	88b3      	ldrh	r3, [r6, #4]
	struct bt_mesh_net_tx tx = {
   2331a:	f88d 0016 	strb.w	r0, [sp, #22]
	if (buf->len < sizeof(*msg)) {
   2331e:	2b03      	cmp	r3, #3
   23320:	d927      	bls.n	23372 <bt_mesh_friend_clear+0x80>
	lpn_addr = sys_be16_to_cpu(msg->lpn_addr);
   23322:	f8b7 8000 	ldrh.w	r8, [r7]
	frnd = bt_mesh_friend_find(rx->sub->net_idx, lpn_addr, false, false);
   23326:	6828      	ldr	r0, [r5, #0]
   23328:	887f      	ldrh	r7, [r7, #2]
   2332a:	8b80      	ldrh	r0, [r0, #28]
   2332c:	fa98 f198 	rev16.w	r1, r8
   23330:	4623      	mov	r3, r4
   23332:	4622      	mov	r2, r4
   23334:	b289      	uxth	r1, r1
   23336:	f7ea fdf1 	bl	df1c <bt_mesh_friend_find>
   2333a:	ba7e      	rev16	r6, r7
   2333c:	b2b6      	uxth	r6, r6
	if (!frnd) {
   2333e:	4605      	mov	r5, r0
   23340:	b1c8      	cbz	r0, 23376 <bt_mesh_friend_clear+0x84>
	if (lpn_counter - frnd->lpn_counter > 255) {
   23342:	8943      	ldrh	r3, [r0, #10]
   23344:	1af6      	subs	r6, r6, r3
   23346:	2eff      	cmp	r6, #255	; 0xff
   23348:	dc11      	bgt.n	2336e <bt_mesh_friend_clear+0x7c>
	tx.ctx->send_ttl = BT_MESH_TTL_MAX;
   2334a:	9b04      	ldr	r3, [sp, #16]
	cfm.lpn_addr    = msg->lpn_addr;
   2334c:	f8ad 8008 	strh.w	r8, [sp, #8]
	tx.ctx->send_ttl = BT_MESH_TTL_MAX;
   23350:	227f      	movs	r2, #127	; 0x7f
   23352:	72da      	strb	r2, [r3, #11]
	bt_mesh_ctl_send(&tx, TRANS_CTL_OP_FRIEND_CLEAR_CFM, &cfm,
   23354:	2106      	movs	r1, #6
   23356:	e9cd 4400 	strd	r4, r4, [sp]
   2335a:	2304      	movs	r3, #4
   2335c:	aa02      	add	r2, sp, #8
   2335e:	a803      	add	r0, sp, #12
	cfm.lpn_counter = msg->lpn_counter;
   23360:	f8ad 700a 	strh.w	r7, [sp, #10]
	bt_mesh_ctl_send(&tx, TRANS_CTL_OP_FRIEND_CLEAR_CFM, &cfm,
   23364:	f7fd fc4b 	bl	20bfe <bt_mesh_ctl_send>
	friend_clear(frnd);
   23368:	4628      	mov	r0, r5
   2336a:	f7ea fb23 	bl	d9b4 <friend_clear>
		return 0;
   2336e:	4620      	mov	r0, r4
   23370:	e001      	b.n	23376 <bt_mesh_friend_clear+0x84>
		return -EINVAL;
   23372:	f06f 0015 	mvn.w	r0, #21
}
   23376:	b006      	add	sp, #24
   23378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002337c <bt_mesh_friend_sub_add>:
	if (buf->len < BT_MESH_FRIEND_SUB_MIN_LEN) {
   2337c:	888b      	ldrh	r3, [r1, #4]
   2337e:	2b02      	cmp	r3, #2
{
   23380:	b570      	push	{r4, r5, r6, lr}
   23382:	460d      	mov	r5, r1
	if (buf->len < BT_MESH_FRIEND_SUB_MIN_LEN) {
   23384:	d92f      	bls.n	233e6 <bt_mesh_friend_sub_add+0x6a>
	frnd = bt_mesh_friend_find(rx->sub->net_idx, rx->ctx.addr, true, true);
   23386:	6804      	ldr	r4, [r0, #0]
   23388:	8901      	ldrh	r1, [r0, #8]
   2338a:	8ba0      	ldrh	r0, [r4, #28]
   2338c:	2301      	movs	r3, #1
   2338e:	461a      	mov	r2, r3
   23390:	f7ea fdc4 	bl	df1c <bt_mesh_friend_find>
	if (!frnd) {
   23394:	4604      	mov	r4, r0
   23396:	b178      	cbz	r0, 233b8 <bt_mesh_friend_sub_add+0x3c>
	if (frnd->pending_buf) {
   23398:	78c3      	ldrb	r3, [r0, #3]
   2339a:	071b      	lsls	r3, r3, #28
   2339c:	d40c      	bmi.n	233b8 <bt_mesh_friend_sub_add+0x3c>
	friend_recv_delay(frnd);
   2339e:	f7ff fd62 	bl	22e66 <friend_recv_delay>
	xact = net_buf_simple_pull_u8(buf);
   233a2:	4628      	mov	r0, r5
   233a4:	f001 fd42 	bl	24e2c <net_buf_simple_pull_u8>
   233a8:	4606      	mov	r6, r0
	while (buf->len >= 2U) {
   233aa:	88ab      	ldrh	r3, [r5, #4]
   233ac:	2b01      	cmp	r3, #1
   233ae:	d805      	bhi.n	233bc <bt_mesh_friend_sub_add+0x40>
	enqueue_sub_cfm(frnd, xact);
   233b0:	4631      	mov	r1, r6
   233b2:	4620      	mov	r0, r4
   233b4:	f7ff ff07 	bl	231c6 <enqueue_sub_cfm>
		return 0;
   233b8:	2000      	movs	r0, #0
   233ba:	e016      	b.n	233ea <bt_mesh_friend_sub_add+0x6e>
		friend_sub_add(frnd, net_buf_simple_pull_be16(buf));
   233bc:	4628      	mov	r0, r5
   233be:	f001 fd45 	bl	24e4c <net_buf_simple_pull_be16>
		if (frnd->sub_list[i] == BT_MESH_ADDR_UNASSIGNED) {
   233c2:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
   233c6:	b13b      	cbz	r3, 233d8 <bt_mesh_friend_sub_add+0x5c>
   233c8:	f8b4 3058 	ldrh.w	r3, [r4, #88]	; 0x58
   233cc:	b14b      	cbz	r3, 233e2 <bt_mesh_friend_sub_add+0x66>
   233ce:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
   233d2:	2b00      	cmp	r3, #0
   233d4:	d1e9      	bne.n	233aa <bt_mesh_friend_sub_add+0x2e>
	for (i = 0; i < ARRAY_SIZE(frnd->sub_list); i++) {
   233d6:	2302      	movs	r3, #2
			frnd->sub_list[i] = addr;
   233d8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
   233dc:	f8a3 0056 	strh.w	r0, [r3, #86]	; 0x56
			return;
   233e0:	e7e3      	b.n	233aa <bt_mesh_friend_sub_add+0x2e>
	for (i = 0; i < ARRAY_SIZE(frnd->sub_list); i++) {
   233e2:	2301      	movs	r3, #1
   233e4:	e7f8      	b.n	233d8 <bt_mesh_friend_sub_add+0x5c>
		return -EINVAL;
   233e6:	f06f 0015 	mvn.w	r0, #21
}
   233ea:	bd70      	pop	{r4, r5, r6, pc}

000233ec <bt_mesh_friend_sub_rem>:
{
   233ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < BT_MESH_FRIEND_SUB_MIN_LEN) {
   233ee:	888b      	ldrh	r3, [r1, #4]
   233f0:	2b02      	cmp	r3, #2
{
   233f2:	460d      	mov	r5, r1
	if (buf->len < BT_MESH_FRIEND_SUB_MIN_LEN) {
   233f4:	d934      	bls.n	23460 <bt_mesh_friend_sub_rem+0x74>
	frnd = bt_mesh_friend_find(rx->sub->net_idx, rx->ctx.addr, true, true);
   233f6:	6804      	ldr	r4, [r0, #0]
   233f8:	8901      	ldrh	r1, [r0, #8]
   233fa:	8ba0      	ldrh	r0, [r4, #28]
   233fc:	2301      	movs	r3, #1
   233fe:	461a      	mov	r2, r3
   23400:	f7ea fd8c 	bl	df1c <bt_mesh_friend_find>
	if (!frnd) {
   23404:	4604      	mov	r4, r0
   23406:	b180      	cbz	r0, 2342a <bt_mesh_friend_sub_rem+0x3e>
	if (frnd->pending_buf) {
   23408:	78c3      	ldrb	r3, [r0, #3]
   2340a:	f013 0708 	ands.w	r7, r3, #8
   2340e:	d10c      	bne.n	2342a <bt_mesh_friend_sub_rem+0x3e>
	friend_recv_delay(frnd);
   23410:	f7ff fd29 	bl	22e66 <friend_recv_delay>
	xact = net_buf_simple_pull_u8(buf);
   23414:	4628      	mov	r0, r5
   23416:	f001 fd09 	bl	24e2c <net_buf_simple_pull_u8>
   2341a:	4606      	mov	r6, r0
	while (buf->len >= 2U) {
   2341c:	88ab      	ldrh	r3, [r5, #4]
   2341e:	2b01      	cmp	r3, #1
   23420:	d805      	bhi.n	2342e <bt_mesh_friend_sub_rem+0x42>
	enqueue_sub_cfm(frnd, xact);
   23422:	4631      	mov	r1, r6
   23424:	4620      	mov	r0, r4
   23426:	f7ff fece 	bl	231c6 <enqueue_sub_cfm>
		return 0;
   2342a:	2000      	movs	r0, #0
   2342c:	e01a      	b.n	23464 <bt_mesh_friend_sub_rem+0x78>
		friend_sub_rem(frnd, net_buf_simple_pull_be16(buf));
   2342e:	4628      	mov	r0, r5
   23430:	f001 fd0c 	bl	24e4c <net_buf_simple_pull_be16>
		if (frnd->sub_list[i] == addr) {
   23434:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
   23438:	4283      	cmp	r3, r0
   2343a:	d00d      	beq.n	23458 <bt_mesh_friend_sub_rem+0x6c>
   2343c:	f8b4 3058 	ldrh.w	r3, [r4, #88]	; 0x58
   23440:	4283      	cmp	r3, r0
   23442:	d00b      	beq.n	2345c <bt_mesh_friend_sub_rem+0x70>
   23444:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
   23448:	4283      	cmp	r3, r0
   2344a:	d1e7      	bne.n	2341c <bt_mesh_friend_sub_rem+0x30>
	for (i = 0; i < ARRAY_SIZE(frnd->sub_list); i++) {
   2344c:	2302      	movs	r3, #2
			frnd->sub_list[i] = BT_MESH_ADDR_UNASSIGNED;
   2344e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
   23452:	f8a3 7056 	strh.w	r7, [r3, #86]	; 0x56
			return;
   23456:	e7e1      	b.n	2341c <bt_mesh_friend_sub_rem+0x30>
	for (i = 0; i < ARRAY_SIZE(frnd->sub_list); i++) {
   23458:	2300      	movs	r3, #0
   2345a:	e7f8      	b.n	2344e <bt_mesh_friend_sub_rem+0x62>
   2345c:	2301      	movs	r3, #1
   2345e:	e7f6      	b.n	2344e <bt_mesh_friend_sub_rem+0x62>
		return -EINVAL;
   23460:	f06f 0015 	mvn.w	r0, #21
}
   23464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00023466 <pub_key_ready>:
}
   23466:	4770      	bx	lr

00023468 <atomic_or>:
{
   23468:	4603      	mov	r3, r0
}
   2346a:	f3bf 8f5b 	dmb	ish
   2346e:	e853 0f00 	ldrex	r0, [r3]
   23472:	ea40 0201 	orr.w	r2, r0, r1
   23476:	e843 2c00 	strex	ip, r2, [r3]
   2347a:	f1bc 0f00 	cmp.w	ip, #0
   2347e:	d1f6      	bne.n	2346e <atomic_or+0x6>
   23480:	f3bf 8f5b 	dmb	ish
   23484:	4770      	bx	lr

00023486 <adv_buf_create>:
{
   23486:	b507      	push	{r0, r1, r2, lr}
	buf = bt_mesh_adv_create(BT_MESH_ADV_PROV, BT_MESH_LOCAL_ADV,
   23488:	2300      	movs	r3, #0
   2348a:	f243 3234 	movw	r2, #13108	; 0x3334
   2348e:	e9cd 2300 	strd	r2, r3, [sp]
   23492:	2101      	movs	r1, #1
   23494:	f040 0208 	orr.w	r2, r0, #8
   23498:	2000      	movs	r0, #0
   2349a:	f7e6 ff01 	bl	a2a0 <bt_mesh_adv_create>
}
   2349e:	b003      	add	sp, #12
   234a0:	f85d fb04 	ldr.w	pc, [sp], #4

000234a4 <net_buf_add_u8.isra.0>:
	return net_buf_simple_add_u8(&buf->b, val);
   234a4:	3008      	adds	r0, #8
   234a6:	f001 bc45 	b.w	24d34 <net_buf_simple_add_u8>

000234aa <buf_start>:
{
   234aa:	4608      	mov	r0, r1
   234ac:	4611      	mov	r1, r2
	if (err) {
   234ae:	b108      	cbz	r0, 234b4 <buf_start+0xa>
		buf_sent(err, user_data);
   234b0:	f7eb bd7a 	b.w	efa8 <buf_sent>
}
   234b4:	4770      	bx	lr

000234b6 <pb_adv_reset>:

void pb_adv_reset(void)
{
	reset_adv_link();
   234b6:	f7eb ba0b 	b.w	e8d0 <reset_adv_link>

000234ba <clear_tx>:
}
   234ba:	4770      	bx	lr

000234bc <pb_gatt_reset>:
}

void pb_gatt_reset(void)
{
	reset_state();
   234bc:	f7eb bdfc 	b.w	f0b8 <reset_state>

000234c0 <prov_ccc_changed>:
}
   234c0:	4770      	bx	lr

000234c2 <proxy_msg_recv>:
	switch (role->msg_type) {
   234c2:	7903      	ldrb	r3, [r0, #4]
   234c4:	2b03      	cmp	r3, #3
   234c6:	d104      	bne.n	234d2 <proxy_msg_recv+0x10>
		bt_mesh_pb_gatt_recv(role->conn, &role->buf);
   234c8:	f100 0140 	add.w	r1, r0, #64	; 0x40
   234cc:	6800      	ldr	r0, [r0, #0]
   234ce:	f7eb be51 	b.w	f174 <bt_mesh_pb_gatt_recv>
}
   234d2:	4770      	bx	lr

000234d4 <proxy_ccc_changed>:
}
   234d4:	4770      	bx	lr

000234d6 <beacon_send>:
{
   234d6:	b530      	push	{r4, r5, lr}
   234d8:	b08d      	sub	sp, #52	; 0x34
	NET_BUF_SIMPLE_DEFINE(buf, 23);
   234da:	ab06      	add	r3, sp, #24
   234dc:	f44f 12b8 	mov.w	r2, #1507328	; 0x170000
{
   234e0:	4604      	mov	r4, r0
   234e2:	460d      	mov	r5, r1
	net_buf_simple_reserve(&buf, 1);
   234e4:	a803      	add	r0, sp, #12
   234e6:	2101      	movs	r1, #1
	NET_BUF_SIMPLE_DEFINE(buf, 23);
   234e8:	e9cd 2304 	strd	r2, r3, [sp, #16]
   234ec:	9303      	str	r3, [sp, #12]
	net_buf_simple_reserve(&buf, 1);
   234ee:	f001 fbac 	bl	24c4a <net_buf_simple_reserve>
	bt_mesh_beacon_create(sub, &buf);
   234f2:	a903      	add	r1, sp, #12
   234f4:	4628      	mov	r0, r5
   234f6:	f7e6 fff3 	bl	a4e0 <bt_mesh_beacon_create>
	return bt_mesh_proxy_msg_send(client->cli, BT_MESH_PROXY_BEACON,
   234fa:	2300      	movs	r3, #0
   234fc:	6820      	ldr	r0, [r4, #0]
   234fe:	9300      	str	r3, [sp, #0]
   23500:	aa03      	add	r2, sp, #12
   23502:	2101      	movs	r1, #1
   23504:	f000 f8d9 	bl	236ba <bt_mesh_proxy_msg_send>
}
   23508:	b00d      	add	sp, #52	; 0x34
   2350a:	bd30      	pop	{r4, r5, pc}

0002350c <send_beacon_cb>:
{
   2350c:	b508      	push	{r3, lr}
   2350e:	460b      	mov	r3, r1
	return beacon_send(client, sub) != 0;
   23510:	4601      	mov	r1, r0
   23512:	4618      	mov	r0, r3
   23514:	f7ff ffdf 	bl	234d6 <beacon_send>
}
   23518:	3800      	subs	r0, #0
   2351a:	bf18      	it	ne
   2351c:	2001      	movne	r0, #1
   2351e:	bd08      	pop	{r3, pc}

00023520 <buf_send_end>:
	net_buf_unref(buf);
   23520:	4608      	mov	r0, r1
   23522:	f7f3 bda9 	b.w	17078 <net_buf_unref>

00023526 <send_filter_status>:
{
   23526:	b570      	push	{r4, r5, r6, lr}
	struct bt_mesh_net_tx tx = {
   23528:	f851 3b04 	ldr.w	r3, [r1], #4
{
   2352c:	b086      	sub	sp, #24
	struct bt_mesh_net_tx tx = {
   2352e:	2600      	movs	r6, #0
{
   23530:	4614      	mov	r4, r2
   23532:	4605      	mov	r5, r0
	struct bt_mesh_net_tx tx = {
   23534:	e9cd 3103 	strd	r3, r1, [sp, #12]
   23538:	9605      	str	r6, [sp, #20]
		.src = bt_mesh_primary_addr(),
   2353a:	f7e9 fdd5 	bl	d0e8 <bt_mesh_primary_addr>
	tx.ctx->addr = BT_MESH_ADDR_UNASSIGNED;
   2353e:	9b04      	ldr	r3, [sp, #16]
	struct bt_mesh_net_tx tx = {
   23540:	f8ad 0014 	strh.w	r0, [sp, #20]
	tx.ctx->addr = BT_MESH_ADDR_UNASSIGNED;
   23544:	809e      	strh	r6, [r3, #4]
	buf->data = buf->__buf;
   23546:	68a3      	ldr	r3, [r4, #8]
   23548:	6023      	str	r3, [r4, #0]
	net_buf_simple_reserve(buf, 10);
   2354a:	210a      	movs	r1, #10
   2354c:	4620      	mov	r0, r4
	buf->len  = 0U;
   2354e:	80a6      	strh	r6, [r4, #4]
   23550:	f001 fb7b 	bl	24c4a <net_buf_simple_reserve>
	net_buf_simple_add_u8(buf, CFG_FILTER_STATUS);
   23554:	2103      	movs	r1, #3
   23556:	4620      	mov	r0, r4
   23558:	f001 fbec 	bl	24d34 <net_buf_simple_add_u8>
	if (client->filter_type == ACCEPT) {
   2355c:	7aab      	ldrb	r3, [r5, #10]
   2355e:	2b01      	cmp	r3, #1
		net_buf_simple_add_u8(buf, 0x00);
   23560:	bf0c      	ite	eq
   23562:	4631      	moveq	r1, r6
		net_buf_simple_add_u8(buf, 0x01);
   23564:	2101      	movne	r1, #1
   23566:	4620      	mov	r0, r4
   23568:	f001 fbe4 	bl	24d34 <net_buf_simple_add_u8>
		if (client->filter[i] != BT_MESH_ADDR_UNASSIGNED) {
   2356c:	88a9      	ldrh	r1, [r5, #4]
   2356e:	88eb      	ldrh	r3, [r5, #6]
	for (filter_size = 0U, i = 0; i < ARRAY_SIZE(client->filter); i++) {
   23570:	3900      	subs	r1, #0
   23572:	bf18      	it	ne
   23574:	2101      	movne	r1, #1
		if (client->filter[i] != BT_MESH_ADDR_UNASSIGNED) {
   23576:	b103      	cbz	r3, 2357a <send_filter_status+0x54>
			filter_size++;
   23578:	3101      	adds	r1, #1
		if (client->filter[i] != BT_MESH_ADDR_UNASSIGNED) {
   2357a:	892b      	ldrh	r3, [r5, #8]
   2357c:	b10b      	cbz	r3, 23582 <send_filter_status+0x5c>
			filter_size++;
   2357e:	3101      	adds	r1, #1
   23580:	b289      	uxth	r1, r1
	net_buf_simple_add_be16(buf, filter_size);
   23582:	4620      	mov	r0, r4
   23584:	f001 fbe8 	bl	24d58 <net_buf_simple_add_be16>
	err = bt_mesh_net_encode(&tx, buf, true);
   23588:	2201      	movs	r2, #1
   2358a:	4621      	mov	r1, r4
   2358c:	a803      	add	r0, sp, #12
   2358e:	f7e7 fb31 	bl	abf4 <bt_mesh_net_encode>
	if (err) {
   23592:	4603      	mov	r3, r0
   23594:	b928      	cbnz	r0, 235a2 <send_filter_status+0x7c>
	err = bt_mesh_proxy_msg_send(client->cli, BT_MESH_PROXY_CONFIG,
   23596:	9000      	str	r0, [sp, #0]
   23598:	4622      	mov	r2, r4
   2359a:	6828      	ldr	r0, [r5, #0]
   2359c:	2102      	movs	r1, #2
   2359e:	f000 f88c 	bl	236ba <bt_mesh_proxy_msg_send>
}
   235a2:	b006      	add	sp, #24
   235a4:	bd70      	pop	{r4, r5, r6, pc}

000235a6 <filter_add>:
{
   235a6:	b510      	push	{r4, lr}
	if (addr == BT_MESH_ADDR_UNASSIGNED) {
   235a8:	b179      	cbz	r1, 235ca <filter_add+0x24>
		if (client->filter[i] == addr) {
   235aa:	8883      	ldrh	r3, [r0, #4]
   235ac:	4299      	cmp	r1, r3
   235ae:	d00c      	beq.n	235ca <filter_add+0x24>
   235b0:	88c4      	ldrh	r4, [r0, #6]
   235b2:	42a1      	cmp	r1, r4
   235b4:	d009      	beq.n	235ca <filter_add+0x24>
   235b6:	8902      	ldrh	r2, [r0, #8]
   235b8:	4291      	cmp	r1, r2
   235ba:	d006      	beq.n	235ca <filter_add+0x24>
		if (client->filter[i] == BT_MESH_ADDR_UNASSIGNED) {
   235bc:	b113      	cbz	r3, 235c4 <filter_add+0x1e>
   235be:	b12c      	cbz	r4, 235cc <filter_add+0x26>
   235c0:	b91a      	cbnz	r2, 235ca <filter_add+0x24>
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
   235c2:	2302      	movs	r3, #2
			client->filter[i] = addr;
   235c4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   235c8:	8081      	strh	r1, [r0, #4]
}
   235ca:	bd10      	pop	{r4, pc}
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
   235cc:	2301      	movs	r3, #1
   235ce:	e7f9      	b.n	235c4 <filter_add+0x1e>

000235d0 <sub_count_cb>:
	if (sub->net_idx == BT_MESH_KEY_UNUSED) {
   235d0:	8b82      	ldrh	r2, [r0, #28]
   235d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   235d6:	429a      	cmp	r2, r3
{
   235d8:	b510      	push	{r4, lr}
   235da:	460c      	mov	r4, r1
	if (sub->net_idx == BT_MESH_KEY_UNUSED) {
   235dc:	d005      	beq.n	235ea <sub_count_cb+0x1a>
	return (sub->node_id == BT_MESH_NODE_IDENTITY_RUNNING ||
   235de:	7fc3      	ldrb	r3, [r0, #31]
   235e0:	2b01      	cmp	r3, #1
   235e2:	d104      	bne.n	235ee <sub_count_cb+0x1e>
		(*count)++;
   235e4:	6823      	ldr	r3, [r4, #0]
   235e6:	3301      	adds	r3, #1
   235e8:	6023      	str	r3, [r4, #0]
}
   235ea:	2000      	movs	r0, #0
   235ec:	bd10      	pop	{r4, pc}
		bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED);
   235ee:	f7e6 fdcf 	bl	a190 <bt_mesh_gatt_proxy_get>
	if (advertise_subnet(sub)) {
   235f2:	2801      	cmp	r0, #1
   235f4:	d1f9      	bne.n	235ea <sub_count_cb+0x1a>
   235f6:	e7f5      	b.n	235e4 <sub_count_cb+0x14>

000235f8 <proxy_sar_timeout>:
	if (role->conn) {
   235f8:	f850 0c10 	ldr.w	r0, [r0, #-16]
   235fc:	b110      	cbz	r0, 23604 <proxy_sar_timeout+0xc>
		bt_conn_disconnect(role->conn,
   235fe:	2113      	movs	r1, #19
   23600:	f7fb bc63 	b.w	1eeca <bt_conn_disconnect>
}
   23604:	4770      	bx	lr

00023606 <bt_mesh_proxy_msg_recv>:
{
   23606:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (PDU_SAR(data)) {
   23608:	780b      	ldrb	r3, [r1, #0]
		if (role->buf.len) {
   2360a:	f8b0 6044 	ldrh.w	r6, [r0, #68]	; 0x44
{
   2360e:	4617      	mov	r7, r2
	switch (PDU_SAR(data)) {
   23610:	099a      	lsrs	r2, r3, #6
   23612:	2a02      	cmp	r2, #2
{
   23614:	4604      	mov	r4, r0
   23616:	460d      	mov	r5, r1
	switch (PDU_SAR(data)) {
   23618:	d027      	beq.n	2366a <bt_mesh_proxy_msg_recv+0x64>
   2361a:	2a03      	cmp	r2, #3
   2361c:	d034      	beq.n	23688 <bt_mesh_proxy_msg_recv+0x82>
   2361e:	2a01      	cmp	r2, #1
   23620:	d00f      	beq.n	23642 <bt_mesh_proxy_msg_recv+0x3c>
		if (role->buf.len) {
   23622:	2e00      	cmp	r6, #0
   23624:	d146      	bne.n	236b4 <bt_mesh_proxy_msg_recv+0xae>
		role->msg_type = PDU_TYPE(data);
   23626:	7103      	strb	r3, [r0, #4]
		net_buf_simple_add_mem(&role->buf, data + 1, len - 1);
   23628:	1e7a      	subs	r2, r7, #1
   2362a:	3101      	adds	r1, #1
   2362c:	3040      	adds	r0, #64	; 0x40
   2362e:	f001 fb78 	bl	24d22 <net_buf_simple_add_mem>
		role->cb.recv(role);
   23632:	68e3      	ldr	r3, [r4, #12]
   23634:	4620      	mov	r0, r4
   23636:	4798      	blx	r3
   23638:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
	buf->data = buf->__buf;
   2363c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   2363e:	6423      	str	r3, [r4, #64]	; 0x40
}
   23640:	e011      	b.n	23666 <bt_mesh_proxy_msg_recv+0x60>
		if (role->buf.len) {
   23642:	bbbe      	cbnz	r6, 236b4 <bt_mesh_proxy_msg_recv+0xae>
		k_work_reschedule(&role->sar_timer, PROXY_SAR_TIMEOUT);
   23644:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
   23648:	2300      	movs	r3, #0
   2364a:	3010      	adds	r0, #16
   2364c:	f7f8 f864 	bl	1b718 <k_work_reschedule>
		role->msg_type = PDU_TYPE(data);
   23650:	4629      	mov	r1, r5
		net_buf_simple_add_mem(&role->buf, data + 1, len - 1);
   23652:	1e7a      	subs	r2, r7, #1
		role->msg_type = PDU_TYPE(data);
   23654:	f811 3b01 	ldrb.w	r3, [r1], #1
   23658:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2365c:	7123      	strb	r3, [r4, #4]
		net_buf_simple_add_mem(&role->buf, data + 1, len - 1);
   2365e:	f104 0040 	add.w	r0, r4, #64	; 0x40
   23662:	f001 fb5e 	bl	24d22 <net_buf_simple_add_mem>
	return len;
   23666:	4638      	mov	r0, r7
   23668:	e026      	b.n	236b8 <bt_mesh_proxy_msg_recv+0xb2>
		if (!role->buf.len) {
   2366a:	b31e      	cbz	r6, 236b4 <bt_mesh_proxy_msg_recv+0xae>
		if (role->msg_type != PDU_TYPE(data)) {
   2366c:	7902      	ldrb	r2, [r0, #4]
   2366e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   23672:	429a      	cmp	r2, r3
   23674:	d11e      	bne.n	236b4 <bt_mesh_proxy_msg_recv+0xae>
		k_work_reschedule(&role->sar_timer, PROXY_SAR_TIMEOUT);
   23676:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
   2367a:	2300      	movs	r3, #0
   2367c:	3010      	adds	r0, #16
   2367e:	f7f8 f84b 	bl	1b718 <k_work_reschedule>
		net_buf_simple_add_mem(&role->buf, data + 1, len - 1);
   23682:	1e7a      	subs	r2, r7, #1
   23684:	1c69      	adds	r1, r5, #1
   23686:	e7ea      	b.n	2365e <bt_mesh_proxy_msg_recv+0x58>
		if (!role->buf.len) {
   23688:	b1a6      	cbz	r6, 236b4 <bt_mesh_proxy_msg_recv+0xae>
		if (role->msg_type != PDU_TYPE(data)) {
   2368a:	7902      	ldrb	r2, [r0, #4]
   2368c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   23690:	429a      	cmp	r2, r3
   23692:	d10f      	bne.n	236b4 <bt_mesh_proxy_msg_recv+0xae>
		(void)k_work_cancel_delayable(&role->sar_timer);
   23694:	3010      	adds	r0, #16
   23696:	f002 fb09 	bl	25cac <k_work_cancel_delayable>
		net_buf_simple_add_mem(&role->buf, data + 1, len - 1);
   2369a:	1e7a      	subs	r2, r7, #1
   2369c:	1c69      	adds	r1, r5, #1
   2369e:	f104 0040 	add.w	r0, r4, #64	; 0x40
   236a2:	f001 fb3e 	bl	24d22 <net_buf_simple_add_mem>
		role->cb.recv(role);
   236a6:	68e3      	ldr	r3, [r4, #12]
   236a8:	4620      	mov	r0, r4
   236aa:	4798      	blx	r3
	buf->len  = 0U;
   236ac:	2300      	movs	r3, #0
   236ae:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   236b2:	e7c3      	b.n	2363c <bt_mesh_proxy_msg_recv+0x36>
			return -EINVAL;
   236b4:	f06f 0015 	mvn.w	r0, #21
}
   236b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000236ba <bt_mesh_proxy_msg_send>:
{
   236ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_conn *conn = role->conn;
   236be:	f8d0 9000 	ldr.w	r9, [r0]
{
   236c2:	b085      	sub	sp, #20
   236c4:	4606      	mov	r6, r0
   236c6:	469a      	mov	sl, r3
	mtu = bt_gatt_get_mtu(conn) - 3;
   236c8:	4648      	mov	r0, r9
{
   236ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   236cc:	9303      	str	r3, [sp, #12]
   236ce:	4688      	mov	r8, r1
   236d0:	4614      	mov	r4, r2
	mtu = bt_gatt_get_mtu(conn) - 3;
   236d2:	f7fc fd63 	bl	2019c <bt_gatt_get_mtu>
	if (mtu > msg->len) {
   236d6:	88a3      	ldrh	r3, [r4, #4]
	mtu = bt_gatt_get_mtu(conn) - 3;
   236d8:	1ec5      	subs	r5, r0, #3
   236da:	b2ad      	uxth	r5, r5
	if (mtu > msg->len) {
   236dc:	42ab      	cmp	r3, r5
		net_buf_simple_push_u8(msg, PDU_HDR(SAR_COMPLETE, type));
   236de:	f008 0b3f 	and.w	fp, r8, #63	; 0x3f
	if (mtu > msg->len) {
   236e2:	d20f      	bcs.n	23704 <bt_mesh_proxy_msg_send+0x4a>
		net_buf_simple_push_u8(msg, PDU_HDR(SAR_COMPLETE, type));
   236e4:	4659      	mov	r1, fp
			net_buf_simple_push_u8(msg, PDU_HDR(SAR_LAST, type));
   236e6:	4620      	mov	r0, r4
   236e8:	f001 fb77 	bl	24dda <net_buf_simple_push_u8>
			err = role->cb.send(conn, msg->data, msg->len, end, user_data);
   236ec:	68b5      	ldr	r5, [r6, #8]
   236ee:	9b03      	ldr	r3, [sp, #12]
   236f0:	88a2      	ldrh	r2, [r4, #4]
   236f2:	6821      	ldr	r1, [r4, #0]
   236f4:	930e      	str	r3, [sp, #56]	; 0x38
   236f6:	4648      	mov	r0, r9
   236f8:	4653      	mov	r3, sl
   236fa:	46ac      	mov	ip, r5
}
   236fc:	b005      	add	sp, #20
   236fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			err = role->cb.send(conn, msg->data, msg->len, end, user_data);
   23702:	4760      	bx	ip
	net_buf_simple_push_u8(msg, PDU_HDR(SAR_FIRST, type));
   23704:	f04b 0140 	orr.w	r1, fp, #64	; 0x40
   23708:	4620      	mov	r0, r4
   2370a:	f001 fb66 	bl	24dda <net_buf_simple_push_u8>
	err = role->cb.send(conn, msg->data, mtu, NULL, NULL);
   2370e:	2300      	movs	r3, #0
   23710:	68b7      	ldr	r7, [r6, #8]
   23712:	6821      	ldr	r1, [r4, #0]
   23714:	9300      	str	r3, [sp, #0]
   23716:	462a      	mov	r2, r5
   23718:	4648      	mov	r0, r9
   2371a:	47b8      	blx	r7
	if (err) {
   2371c:	4607      	mov	r7, r0
   2371e:	b938      	cbnz	r0, 23730 <bt_mesh_proxy_msg_send+0x76>
	net_buf_simple_pull(msg, mtu);
   23720:	4629      	mov	r1, r5
   23722:	4620      	mov	r0, r4
   23724:	f001 fb72 	bl	24e0c <net_buf_simple_pull>
		net_buf_simple_push_u8(msg, PDU_HDR(SAR_CONT, type));
   23728:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
	while (msg->len) {
   2372c:	88a3      	ldrh	r3, [r4, #4]
   2372e:	b91b      	cbnz	r3, 23738 <bt_mesh_proxy_msg_send+0x7e>
}
   23730:	4638      	mov	r0, r7
   23732:	b005      	add	sp, #20
   23734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (msg->len + 1 < mtu) {
   23738:	3301      	adds	r3, #1
   2373a:	42ab      	cmp	r3, r5
   2373c:	da02      	bge.n	23744 <bt_mesh_proxy_msg_send+0x8a>
			net_buf_simple_push_u8(msg, PDU_HDR(SAR_LAST, type));
   2373e:	f048 01c0 	orr.w	r1, r8, #192	; 0xc0
   23742:	e7d0      	b.n	236e6 <bt_mesh_proxy_msg_send+0x2c>
		net_buf_simple_push_u8(msg, PDU_HDR(SAR_CONT, type));
   23744:	4659      	mov	r1, fp
   23746:	4620      	mov	r0, r4
   23748:	f001 fb47 	bl	24dda <net_buf_simple_push_u8>
		err = role->cb.send(conn, msg->data, mtu, NULL, NULL);
   2374c:	2300      	movs	r3, #0
   2374e:	6821      	ldr	r1, [r4, #0]
   23750:	f8d6 c008 	ldr.w	ip, [r6, #8]
   23754:	9300      	str	r3, [sp, #0]
   23756:	462a      	mov	r2, r5
   23758:	4648      	mov	r0, r9
   2375a:	47e0      	blx	ip
		if (err) {
   2375c:	b920      	cbnz	r0, 23768 <bt_mesh_proxy_msg_send+0xae>
		net_buf_simple_pull(msg, mtu);
   2375e:	4629      	mov	r1, r5
   23760:	4620      	mov	r0, r4
   23762:	f001 fb53 	bl	24e0c <net_buf_simple_pull>
   23766:	e7e1      	b.n	2372c <bt_mesh_proxy_msg_send+0x72>
   23768:	4607      	mov	r7, r0
   2376a:	e7e1      	b.n	23730 <bt_mesh_proxy_msg_send+0x76>

0002376c <bt_mesh_proxy_role_cleanup>:

void bt_mesh_proxy_role_cleanup(struct bt_mesh_proxy_role *role)
{
   2376c:	b510      	push	{r4, lr}
   2376e:	4604      	mov	r4, r0
	/* If this fails, the work handler exits early, as
	 * there's no active connection.
	 */
	(void)k_work_cancel_delayable(&role->sar_timer);
   23770:	3010      	adds	r0, #16
   23772:	f002 fa9b 	bl	25cac <k_work_cancel_delayable>
	bt_conn_unref(role->conn);
   23776:	6820      	ldr	r0, [r4, #0]
   23778:	f7fb fb62 	bl	1ee40 <bt_conn_unref>
	role->conn = NULL;
   2377c:	2300      	movs	r3, #0
   2377e:	6023      	str	r3, [r4, #0]

	bt_mesh_adv_gatt_update();
}
   23780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_mesh_adv_gatt_update();
   23784:	f7ff bb6d 	b.w	22e62 <bt_mesh_adv_gatt_update>

00023788 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, uint16_t mem_size, uint16_t mem_count,
	      void **mem_head)
{
   23788:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	*mem_head = mem_pool;
   2378a:	6018      	str	r0, [r3, #0]

	/* Store free mem_count after the list's next pointer at an 32-bit
	 * aligned memory location to ensure atomic read/write (in ARM for now).
	 */
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   2378c:	1dc3      	adds	r3, r0, #7
{
   2378e:	4605      	mov	r5, r0
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   23790:	f023 0303 	bic.w	r3, r3, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   23794:	1e50      	subs	r0, r2, #1
{
   23796:	460e      	mov	r6, r1
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   23798:	b280      	uxth	r0, r0
{
   2379a:	4614      	mov	r4, r2
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   2379c:	801a      	strh	r2, [r3, #0]
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   2379e:	2100      	movs	r1, #0
   237a0:	2204      	movs	r2, #4
   237a2:	fb06 5000 	mla	r0, r6, r0, r5
   237a6:	f7fa fc4f 	bl	1e048 <memset>
		     sizeof(mem_pool));
	while (mem_count--) {
   237aa:	3c02      	subs	r4, #2
   237ac:	b2a4      	uxth	r4, r4
   237ae:	f64f 77ff 	movw	r7, #65535	; 0xffff
   237b2:	42bc      	cmp	r4, r7
   237b4:	d101      	bne.n	237ba <mem_init+0x32>
		next = (uint32_t)((uint8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
		       (void *)&next, sizeof(next));
	}
}
   237b6:	b003      	add	sp, #12
   237b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			       (mem_size * (mem_count + 1)));
   237ba:	1c63      	adds	r3, r4, #1
   237bc:	b29b      	uxth	r3, r3
   237be:	4373      	muls	r3, r6
		next = (uint32_t)((uint8_t *) mem_pool +
   237c0:	18ea      	adds	r2, r5, r3
   237c2:	9201      	str	r2, [sp, #4]
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
   237c4:	1b98      	subs	r0, r3, r6
   237c6:	2204      	movs	r2, #4
   237c8:	eb0d 0102 	add.w	r1, sp, r2
   237cc:	4428      	add	r0, r5
   237ce:	3c01      	subs	r4, #1
   237d0:	f7fa fc2f 	bl	1e032 <memcpy>
   237d4:	b2a4      	uxth	r4, r4
   237d6:	e7ec      	b.n	237b2 <mem_init+0x2a>

000237d8 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
   237d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (*mem_head) {
   237da:	6804      	ldr	r4, [r0, #0]
{
   237dc:	4605      	mov	r5, r0
	if (*mem_head) {
   237de:	b18c      	cbz	r4, 23804 <mem_acquire+0x2c>
		uint16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   237e0:	1de3      	adds	r3, r4, #7
   237e2:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
   237e6:	2204      	movs	r2, #4
   237e8:	4621      	mov	r1, r4
   237ea:	eb0d 0002 	add.w	r0, sp, r2
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   237ee:	881e      	ldrh	r6, [r3, #0]
		memcpy(&head, mem, sizeof(head));
   237f0:	f7fa fc1f 	bl	1e032 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
   237f4:	9b01      	ldr	r3, [sp, #4]
   237f6:	b123      	cbz	r3, 23802 <mem_acquire+0x2a>
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
   237f8:	1dda      	adds	r2, r3, #7
   237fa:	f022 0203 	bic.w	r2, r2, #3
		free_count--;
   237fe:	3e01      	subs	r6, #1
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
   23800:	8016      	strh	r6, [r2, #0]
				free_count;
		}

		*mem_head = head;
   23802:	602b      	str	r3, [r5, #0]
		return mem;
	}

	return NULL;
}
   23804:	4620      	mov	r0, r4
   23806:	b002      	add	sp, #8
   23808:	bd70      	pop	{r4, r5, r6, pc}

0002380a <mem_release>:

void mem_release(void *mem, void **mem_head)
{
   2380a:	b570      	push	{r4, r5, r6, lr}
	uint16_t free_count = 0U;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
   2380c:	680c      	ldr	r4, [r1, #0]
{
   2380e:	4606      	mov	r6, r0
   23810:	460d      	mov	r5, r1
	if (*mem_head) {
   23812:	b11c      	cbz	r4, 2381c <mem_release+0x12>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   23814:	1de3      	adds	r3, r4, #7
   23816:	f023 0303 	bic.w	r3, r3, #3
   2381a:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
   2381c:	2204      	movs	r2, #4
   2381e:	4629      	mov	r1, r5
   23820:	4630      	mov	r0, r6
   23822:	f7fa fc06 	bl	1e032 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((uint16_t *)MROUND((uint8_t *)mem + sizeof(mem))) = free_count;
   23826:	1df2      	adds	r2, r6, #7
   23828:	f022 0203 	bic.w	r2, r2, #3
	free_count++;
   2382c:	1c63      	adds	r3, r4, #1
	*((uint16_t *)MROUND((uint8_t *)mem + sizeof(mem))) = free_count;
   2382e:	8013      	strh	r3, [r2, #0]

	*mem_head = mem;
   23830:	602e      	str	r6, [r5, #0]
}
   23832:	bd70      	pop	{r4, r5, r6, pc}

00023834 <mem_get>:
}

void *mem_get(void *mem_pool, uint16_t mem_size, uint16_t index)
{
	return ((void *)((uint8_t *)mem_pool + (mem_size * index)));
}
   23834:	fb02 0001 	mla	r0, r2, r1, r0
   23838:	4770      	bx	lr

0002383a <mem_index_get>:

uint16_t mem_index_get(void *mem, void *mem_pool, uint16_t mem_size)
{
	return ((uint16_t)((uint8_t *)mem - (uint8_t *)mem_pool) / mem_size);
   2383a:	1a40      	subs	r0, r0, r1
   2383c:	b280      	uxth	r0, r0
}
   2383e:	fbb0 f0f2 	udiv	r0, r0, r2
   23842:	4770      	bx	lr

00023844 <mem_rcopy>:
/**
 * @brief  Copy bytes in reverse
 * @details Example: [ 0x11 0x22 0x33 ] -> [ 0x33 0x22 0x11 ]
 */
void mem_rcopy(uint8_t *dst, uint8_t const *src, uint16_t len)
{
   23844:	b510      	push	{r4, lr}
	src += len;
   23846:	4411      	add	r1, r2
	while (len--) {
   23848:	3801      	subs	r0, #1
   2384a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2384e:	3a01      	subs	r2, #1
   23850:	b292      	uxth	r2, r2
   23852:	429a      	cmp	r2, r3
   23854:	d100      	bne.n	23858 <mem_rcopy+0x14>
		*dst++ = *--src;
	}
}
   23856:	bd10      	pop	{r4, pc}
		*dst++ = *--src;
   23858:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   2385c:	f800 4f01 	strb.w	r4, [r0, #1]!
   23860:	e7f5      	b.n	2384e <mem_rcopy+0xa>

00023862 <mem_nz>:
 * @brief Determine if src[0..len-1] contains one or more non-zero bytes
 * @return 0 if all bytes are zero; otherwise 1
 */
uint8_t mem_nz(uint8_t *src, uint16_t len)
{
	while (len--) {
   23862:	4401      	add	r1, r0
   23864:	4288      	cmp	r0, r1
   23866:	d101      	bne.n	2386c <mem_nz+0xa>
		if (*src++) {
			return 1;
		}
	}

	return 0;
   23868:	2000      	movs	r0, #0
   2386a:	4770      	bx	lr
		if (*src++) {
   2386c:	f810 3b01 	ldrb.w	r3, [r0], #1
   23870:	2b00      	cmp	r3, #0
   23872:	d0f7      	beq.n	23864 <mem_nz+0x2>
			return 1;
   23874:	2001      	movs	r0, #1
}
   23876:	4770      	bx	lr

00023878 <memq_init>:
 * @return          Initial link-element
 */
memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* Head and tail pointer to the initial link - forms an empty queue */
	*head = *tail = link;
   23878:	6010      	str	r0, [r2, #0]
   2387a:	6008      	str	r0, [r1, #0]

	return link;
}
   2387c:	4770      	bx	lr

0002387e <memq_deinit>:
memq_link_t *memq_deinit(memq_link_t **head, memq_link_t **tail)
{
	memq_link_t *old_head;

	/* If head and tail are not equal, then queue is not empty */
	if (*head != *tail) {
   2387e:	680a      	ldr	r2, [r1, #0]
{
   23880:	4603      	mov	r3, r0
	if (*head != *tail) {
   23882:	6800      	ldr	r0, [r0, #0]
   23884:	4290      	cmp	r0, r2
   23886:	f04f 0200 	mov.w	r2, #0
		return NULL;
	}

	old_head = *head;
	*head = *tail = NULL;
   2388a:	bf0a      	itet	eq
   2388c:	600a      	streq	r2, [r1, #0]
		return NULL;
   2388e:	4610      	movne	r0, r2
	*head = *tail = NULL;
   23890:	601a      	streq	r2, [r3, #0]

	return old_head;
}
   23892:	4770      	bx	lr

00023894 <memq_enqueue>:
 * @param mem[in]      The memory payload to be enqueued. Pointed to by old tail
 * @param tail[in,out] Tail of queue. Will be updated to point to link
 * @return             New tail. Note: Does not point to the new mem
 */
memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
   23894:	b510      	push	{r4, lr}
	/* Let the old tail element point to the new tail element */
	(*tail)->next = link;
   23896:	6814      	ldr	r4, [r2, #0]
   23898:	6020      	str	r0, [r4, #0]

	/* Let the old tail element point the the new memory */
	(*tail)->mem = mem;
   2389a:	6814      	ldr	r4, [r2, #0]
   2389c:	6061      	str	r1, [r4, #4]

	/* Update the tail-pointer to point to the new tail element.
	 * The new tail-element is not expected to point to anything sensible
	 */
	cpu_dmb(); /* Ensure data accesses are synchronized */
	*tail = link; /* Commit: enqueue of memq node */
   2389e:	6010      	str	r0, [r2, #0]

	return link;
}
   238a0:	bd10      	pop	{r4, pc}

000238a2 <memq_peek>:
 * @return         head or NULL if queue is empty
 */
memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* If head and tail are equal, then queue empty */
	if (head == tail) {
   238a2:	4288      	cmp	r0, r1
   238a4:	d003      	beq.n	238ae <memq_peek+0xc>
		return NULL;
	}

	/* Extract the head link-element's memory */
	if (mem) {
   238a6:	b11a      	cbz	r2, 238b0 <memq_peek+0xe>
		*mem = head->mem;
   238a8:	6843      	ldr	r3, [r0, #4]
   238aa:	6013      	str	r3, [r2, #0]
   238ac:	4770      	bx	lr
		return NULL;
   238ae:	2000      	movs	r0, #0
	}

	return head; /* queue was not empty */
}
   238b0:	4770      	bx	lr

000238b2 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *old_head;

	/* Use memq peek to get the old head and its mem */
	old_head = memq_peek(*head, tail, mem);
   238b2:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
   238b4:	4283      	cmp	r3, r0
   238b6:	d009      	beq.n	238cc <memq_dequeue+0x1a>
	if (mem) {
   238b8:	b122      	cbz	r2, 238c4 <memq_dequeue+0x12>
		*mem = head->mem;
   238ba:	6858      	ldr	r0, [r3, #4]
   238bc:	6010      	str	r0, [r2, #0]
	if (old_head == NULL) {
		return NULL; /* queue is empty */
	}

	/* Update the head-pointer to point to the new head element */
	*head = old_head->next;
   238be:	681a      	ldr	r2, [r3, #0]
   238c0:	600a      	str	r2, [r1, #0]

	return old_head;
   238c2:	e001      	b.n	238c8 <memq_dequeue+0x16>
	if (old_head == NULL) {
   238c4:	2b00      	cmp	r3, #0
   238c6:	d1fa      	bne.n	238be <memq_dequeue+0xc>
}
   238c8:	4618      	mov	r0, r3
   238ca:	4770      	bx	lr
		return NULL; /* queue is empty */
   238cc:	2300      	movs	r3, #0
   238ce:	e7fb      	b.n	238c8 <memq_dequeue+0x16>

000238d0 <util_ones_count_get>:
 * @param octets_len Must not be bigger than 255/8 = 31 bytes
 *
 * @return popcnt of 'octets'
 */
uint8_t util_ones_count_get(const uint8_t *octets, uint8_t octets_len)
{
   238d0:	b510      	push	{r4, lr}
   238d2:	1e43      	subs	r3, r0, #1
	uint8_t one_count = 0U;
   238d4:	2000      	movs	r0, #0

	while (octets_len--) {
   238d6:	3901      	subs	r1, #1
   238d8:	b2c9      	uxtb	r1, r1
   238da:	29ff      	cmp	r1, #255	; 0xff
   238dc:	d100      	bne.n	238e0 <util_ones_count_get+0x10>
		}
		octets++;
	}

	return one_count;
}
   238de:	bd10      	pop	{r4, pc}
		bite = *octets;
   238e0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
		while (bite) {
   238e4:	2a00      	cmp	r2, #0
   238e6:	d0f6      	beq.n	238d6 <util_ones_count_get+0x6>
			bite &= (bite - 1);
   238e8:	1e54      	subs	r4, r2, #1
			one_count++;
   238ea:	3001      	adds	r0, #1
			bite &= (bite - 1);
   238ec:	4022      	ands	r2, r4
			one_count++;
   238ee:	b2c0      	uxtb	r0, r0
   238f0:	e7f8      	b.n	238e4 <util_ones_count_get+0x14>

000238f2 <ticker_dequeue>:
{
   238f2:	b5f0      	push	{r4, r5, r6, r7, lr}
	previous = instance->ticker_id_head;
   238f4:	7f42      	ldrb	r2, [r0, #29]
	node = &instance->nodes[0];
   238f6:	6806      	ldr	r6, [r0, #0]
{
   238f8:	4605      	mov	r5, r0
   238fa:	468c      	mov	ip, r1
	previous = instance->ticker_id_head;
   238fc:	4613      	mov	r3, r2
	total = 0U;
   238fe:	2000      	movs	r0, #0
	while (current != TICKER_NULL) {
   23900:	2aff      	cmp	r2, #255	; 0xff
   23902:	d101      	bne.n	23908 <ticker_dequeue+0x16>
		return 0;
   23904:	2000      	movs	r0, #0
}
   23906:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ticker_current = &node[current];
   23908:	eb02 0442 	add.w	r4, r2, r2, lsl #1
   2390c:	0127      	lsls	r7, r4, #4
   2390e:	eb06 1404 	add.w	r4, r6, r4, lsl #4
		if (current == id) {
   23912:	4562      	cmp	r2, ip
		total += ticker_current->ticks_to_expire;
   23914:	68a1      	ldr	r1, [r4, #8]
		current = ticker_current->next;
   23916:	5df7      	ldrb	r7, [r6, r7]
		total += ticker_current->ticks_to_expire;
   23918:	4408      	add	r0, r1
		if (current == id) {
   2391a:	d002      	beq.n	23922 <ticker_dequeue+0x30>
   2391c:	4613      	mov	r3, r2
		current = ticker_current->next;
   2391e:	463a      	mov	r2, r7
   23920:	e7ee      	b.n	23900 <ticker_dequeue+0xe>
	if (previous == current) {
   23922:	4293      	cmp	r3, r2
   23924:	d100      	bne.n	23928 <ticker_dequeue+0x36>
		instance->ticker_id_head = ticker_current->next;
   23926:	776f      	strb	r7, [r5, #29]
	node[previous].next = ticker_current->next;
   23928:	b21b      	sxth	r3, r3
   2392a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   2392e:	011b      	lsls	r3, r3, #4
   23930:	54f7      	strb	r7, [r6, r3]
	if (ticker_current->next != TICKER_NULL) {
   23932:	7823      	ldrb	r3, [r4, #0]
   23934:	2bff      	cmp	r3, #255	; 0xff
   23936:	d0e6      	beq.n	23906 <ticker_dequeue+0x14>
		node[ticker_current->next].ticks_to_expire += timeout;
   23938:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   2393c:	eb06 1303 	add.w	r3, r6, r3, lsl #4
   23940:	689a      	ldr	r2, [r3, #8]
   23942:	440a      	add	r2, r1
   23944:	609a      	str	r2, [r3, #8]
	return (total + timeout);
   23946:	e7de      	b.n	23906 <ticker_dequeue+0x14>

00023948 <ticks_to_expire_prep>:
{
   23948:	b530      	push	{r4, r5, lr}
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   2394a:	1a55      	subs	r5, r2, r1
   2394c:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
   23950:	6883      	ldr	r3, [r0, #8]
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
   23952:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   23954:	d109      	bne.n	2396a <ticks_to_expire_prep+0x22>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   23956:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   2395a:	442b      	add	r3, r5
	if (ticks_to_expire > ticks_to_expire_minus) {
   2395c:	42a3      	cmp	r3, r4
   2395e:	d90e      	bls.n	2397e <ticks_to_expire_prep+0x36>
		ticks_to_expire -= ticks_to_expire_minus;
   23960:	1b1b      	subs	r3, r3, r4
		ticks_to_expire_minus = 0U;
   23962:	2400      	movs	r4, #0
	ticker->ticks_to_expire = ticks_to_expire;
   23964:	6083      	str	r3, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   23966:	6144      	str	r4, [r0, #20]
}
   23968:	bd30      	pop	{r4, r5, pc}
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   2396a:	1a8a      	subs	r2, r1, r2
   2396c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
   23970:	4293      	cmp	r3, r2
   23972:	d901      	bls.n	23978 <ticks_to_expire_prep+0x30>
			ticks_to_expire -= delta_current_start;
   23974:	1a9b      	subs	r3, r3, r2
   23976:	e7f1      	b.n	2395c <ticks_to_expire_prep+0x14>
			ticks_to_expire_minus +=
   23978:	4414      	add	r4, r2
   2397a:	1ae4      	subs	r4, r4, r3
			ticks_to_expire = 0U;
   2397c:	2300      	movs	r3, #0
		ticks_to_expire_minus -= ticks_to_expire;
   2397e:	1ae4      	subs	r4, r4, r3
		ticks_to_expire = 0U;
   23980:	2300      	movs	r3, #0
   23982:	e7ef      	b.n	23964 <ticks_to_expire_prep+0x1c>

00023984 <ticker_job_op_cb>:
{
   23984:	4603      	mov	r3, r0
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   23986:	2200      	movs	r2, #0
   23988:	701a      	strb	r2, [r3, #0]
	if (user_op->fp_op_func) {
   2398a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	user_op->status = status;
   2398c:	6299      	str	r1, [r3, #40]	; 0x28
{
   2398e:	4608      	mov	r0, r1
	if (user_op->fp_op_func) {
   23990:	b10a      	cbz	r2, 23996 <ticker_job_op_cb+0x12>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   23992:	6b19      	ldr	r1, [r3, #48]	; 0x30
   23994:	4710      	bx	r2
}
   23996:	4770      	bx	lr

00023998 <ticker_job_list_insert>:
{
   23998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2399c:	b089      	sub	sp, #36	; 0x24
	node = &instance->nodes[0];
   2399e:	6803      	ldr	r3, [r0, #0]
   239a0:	9303      	str	r3, [sp, #12]
	users = &instance->users[0];
   239a2:	6843      	ldr	r3, [r0, #4]
   239a4:	9305      	str	r3, [sp, #20]
	while (count_user--) {
   239a6:	7a43      	ldrb	r3, [r0, #9]
{
   239a8:	4606      	mov	r6, r0
   239aa:	4688      	mov	r8, r1
   239ac:	3b01      	subs	r3, #1
   239ae:	fa5f fa83 	uxtb.w	sl, r3
	while (count_user--) {
   239b2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   239b6:	d102      	bne.n	239be <ticker_job_list_insert+0x26>
}
   239b8:	b009      	add	sp, #36	; 0x24
   239ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		user = &users[count_user];
   239be:	9b05      	ldr	r3, [sp, #20]
   239c0:	eb03 0bca 	add.w	fp, r3, sl, lsl #3
		user_ops = (void *)&user->user_op[0];
   239c4:	f8db 3004 	ldr.w	r3, [fp, #4]
		user_ops_first = user->first;
   239c8:	f89b 7001 	ldrb.w	r7, [fp, #1]
		user_ops = (void *)&user->user_op[0];
   239cc:	9304      	str	r3, [sp, #16]
		while ((insert_head != TICKER_NULL) ||
   239ce:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   239d2:	d076      	beq.n	23ac2 <ticker_job_list_insert+0x12a>
				ticker = &node[id_insert];
   239d4:	eb08 0448 	add.w	r4, r8, r8, lsl #1
   239d8:	9a03      	ldr	r2, [sp, #12]
   239da:	f8cd 8008 	str.w	r8, [sp, #8]
   239de:	0123      	lsls	r3, r4, #4
				user_op = NULL;
   239e0:	2500      	movs	r5, #0
				insert_head = ticker->next;
   239e2:	f812 8003 	ldrb.w	r8, [r2, r3]
				ticker = &node[id_insert];
   239e6:	eb02 1404 	add.w	r4, r2, r4, lsl #4
	ticker->next = TICKER_NULL;
   239ea:	23ff      	movs	r3, #255	; 0xff
   239ec:	7023      	strb	r3, [r4, #0]
	ticker_new = &node[id];
   239ee:	f9bd c008 	ldrsh.w	ip, [sp, #8]
	node = &instance->nodes[0];
   239f2:	6830      	ldr	r0, [r6, #0]
	ticker_new = &node[id];
   239f4:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   239f8:	ea4f 120c 	mov.w	r2, ip, lsl #4
   239fc:	eb00 1c0c 	add.w	ip, r0, ip, lsl #4
   23a00:	9206      	str	r2, [sp, #24]
	ticks_to_expire = ticker_new->ticks_to_expire;
   23a02:	f8dc 2008 	ldr.w	r2, [ip, #8]
   23a06:	9201      	str	r2, [sp, #4]
	current = instance->ticker_id_head;
   23a08:	7f72      	ldrb	r2, [r6, #29]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   23a0a:	2aff      	cmp	r2, #255	; 0xff
   23a0c:	d00c      	beq.n	23a28 <ticker_job_list_insert+0x90>
		(ticker_current = &node[current])->ticks_to_expire))) {
   23a0e:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
   23a12:	ea4f 110e 	mov.w	r1, lr, lsl #4
   23a16:	eb00 1e0e 	add.w	lr, r0, lr, lsl #4
   23a1a:	9107      	str	r1, [sp, #28]
		(ticks_to_expire_current =
   23a1c:	f8de 9008 	ldr.w	r9, [lr, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   23a20:	9901      	ldr	r1, [sp, #4]
   23a22:	4549      	cmp	r1, r9
   23a24:	f080 8085 	bcs.w	23b32 <ticker_job_list_insert+0x19a>
	if (previous == TICKER_NULL) {
   23a28:	2bff      	cmp	r3, #255	; 0xff
		node[previous].next = id;
   23a2a:	bf18      	it	ne
   23a2c:	b21b      	sxthne	r3, r3
	ticker_new->ticks_to_expire = ticks_to_expire;
   23a2e:	9901      	ldr	r1, [sp, #4]
   23a30:	f8cc 1008 	str.w	r1, [ip, #8]
		node[previous].next = id;
   23a34:	bf18      	it	ne
   23a36:	eb03 0343 	addne.w	r3, r3, r3, lsl #1
	ticker_new->next = current;
   23a3a:	9906      	ldr	r1, [sp, #24]
		instance->ticker_id_head = id;
   23a3c:	bf08      	it	eq
   23a3e:	9b02      	ldreq	r3, [sp, #8]
	ticker_new->next = current;
   23a40:	5442      	strb	r2, [r0, r1]
		node[previous].next = id;
   23a42:	bf1d      	ittte	ne
   23a44:	011b      	lslne	r3, r3, #4
   23a46:	9902      	ldrne	r1, [sp, #8]
   23a48:	54c1      	strbne	r1, [r0, r3]
		instance->ticker_id_head = id;
   23a4a:	7773      	strbeq	r3, [r6, #29]
	if (current != TICKER_NULL) {
   23a4c:	2aff      	cmp	r2, #255	; 0xff
   23a4e:	d007      	beq.n	23a60 <ticker_job_list_insert+0xc8>
		node[current].ticks_to_expire -= ticks_to_expire;
   23a50:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   23a54:	eb00 1202 	add.w	r2, r0, r2, lsl #4
   23a58:	9901      	ldr	r1, [sp, #4]
   23a5a:	6893      	ldr	r3, [r2, #8]
   23a5c:	1a5b      	subs	r3, r3, r1
   23a5e:	6093      	str	r3, [r2, #8]
	ticker->req = ticker->ack + 1;
   23a60:	78a3      	ldrb	r3, [r4, #2]
   23a62:	3301      	adds	r3, #1
   23a64:	7063      	strb	r3, [r4, #1]
			if (user_op) {
   23a66:	2d00      	cmp	r5, #0
   23a68:	d0b1      	beq.n	239ce <ticker_job_list_insert+0x36>
				ticker_job_op_cb(user_op, status);
   23a6a:	2100      	movs	r1, #0
   23a6c:	4628      	mov	r0, r5
   23a6e:	f7ff ff89 	bl	23984 <ticker_job_op_cb>
				if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   23a72:	6863      	ldr	r3, [r4, #4]
   23a74:	2b00      	cmp	r3, #0
   23a76:	d1aa      	bne.n	239ce <ticker_job_list_insert+0x36>
					ticker->fp_op_func =
   23a78:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   23a7a:	6223      	str	r3, [r4, #32]
					ticker->op_context =
   23a7c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   23a7e:	6263      	str	r3, [r4, #36]	; 0x24
   23a80:	e7a5      	b.n	239ce <ticker_job_list_insert+0x36>
				user_op = &user_ops[user_ops_first];
   23a82:	9a04      	ldr	r2, [sp, #16]
   23a84:	2334      	movs	r3, #52	; 0x34
   23a86:	fb17 f303 	smulbb	r3, r7, r3
   23a8a:	18d5      	adds	r5, r2, r3
				first = user_ops_first + 1;
   23a8c:	3701      	adds	r7, #1
				if (first == user->count_user_op) {
   23a8e:	f89b 2000 	ldrb.w	r2, [fp]
				first = user_ops_first + 1;
   23a92:	b2ff      	uxtb	r7, r7
					first = 0U;
   23a94:	42ba      	cmp	r2, r7
   23a96:	bf08      	it	eq
   23a98:	2700      	moveq	r7, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   23a9a:	9a04      	ldr	r2, [sp, #16]
   23a9c:	5cd3      	ldrb	r3, [r2, r3]
   23a9e:	2b04      	cmp	r3, #4
   23aa0:	d10f      	bne.n	23ac2 <ticker_job_list_insert+0x12a>
				id_insert = user_op->id;
   23aa2:	786b      	ldrb	r3, [r5, #1]
   23aa4:	9302      	str	r3, [sp, #8]
				ticker = &node[id_insert];
   23aa6:	eb03 0443 	add.w	r4, r3, r3, lsl #1
   23aaa:	9b03      	ldr	r3, [sp, #12]
   23aac:	eb03 1404 	add.w	r4, r3, r4, lsl #4
				if (((ticker->req -
   23ab0:	7863      	ldrb	r3, [r4, #1]
				      ticker->ack) & 0xff) != 0U) {
   23ab2:	78a2      	ldrb	r2, [r4, #2]
				if (((ticker->req -
   23ab4:	1a9b      	subs	r3, r3, r2
				      ticker->ack) & 0xff) != 0U) {
   23ab6:	b2db      	uxtb	r3, r3
				if (((ticker->req -
   23ab8:	b153      	cbz	r3, 23ad0 <ticker_job_list_insert+0x138>
					ticker_job_op_cb(user_op,
   23aba:	2101      	movs	r1, #1
   23abc:	4628      	mov	r0, r5
   23abe:	f7ff ff61 	bl	23984 <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
   23ac2:	f89b 3002 	ldrb.w	r3, [fp, #2]
   23ac6:	42bb      	cmp	r3, r7
   23ac8:	d1db      	bne.n	23a82 <ticker_job_list_insert+0xea>
   23aca:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
   23ace:	e76e      	b.n	239ae <ticker_job_list_insert+0x16>
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   23ad0:	8aab      	ldrh	r3, [r5, #20]
				ticker_job_op_start(ticker, user_op,
   23ad2:	6971      	ldr	r1, [r6, #20]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   23ad4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   23ad8:	4293      	cmp	r3, r2
   23ada:	d006      	beq.n	23aea <ticker_job_list_insert+0x152>
		ticker->must_expire =
   23adc:	f64f 72ff 	movw	r2, #65535	; 0xffff
   23ae0:	1a98      	subs	r0, r3, r2
   23ae2:	4242      	negs	r2, r0
   23ae4:	4142      	adcs	r2, r0
   23ae6:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
	ticker->ext_data = start->ext_data;
   23aea:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   23aec:	62a2      	str	r2, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
   23aee:	68ea      	ldr	r2, [r5, #12]
   23af0:	6062      	str	r2, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   23af2:	692a      	ldr	r2, [r5, #16]
   23af4:	6222      	str	r2, [r4, #32]
	ticker->lazy_periodic =
   23af6:	f64f 72fd 	movw	r2, #65533	; 0xfffd
   23afa:	4293      	cmp	r3, r2
   23afc:	bf88      	it	hi
   23afe:	2300      	movhi	r3, #0
   23b00:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
   23b02:	69ab      	ldr	r3, [r5, #24]
   23b04:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
   23b06:	69eb      	ldr	r3, [r5, #28]
   23b08:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
   23b0a:	6a2b      	ldr	r3, [r5, #32]
   23b0c:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire_minus = 0U;
   23b0e:	f04f 0900 	mov.w	r9, #0
	ticker->ticks_to_expire = start->ticks_first;
   23b12:	68ab      	ldr	r3, [r5, #8]
   23b14:	60a3      	str	r3, [r4, #8]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   23b16:	686a      	ldr	r2, [r5, #4]
	ticker->ticks_to_expire_minus = 0U;
   23b18:	f8c4 9014 	str.w	r9, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   23b1c:	4620      	mov	r0, r4
   23b1e:	f7ff ff13 	bl	23948 <ticks_to_expire_prep>
	ticker->force = 1U;
   23b22:	f04f 0301 	mov.w	r3, #1
	ticker->remainder_current = 0U;
   23b26:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
   23b2a:	f8a4 901e 	strh.w	r9, [r4, #30]
	ticker->force = 1U;
   23b2e:	70e3      	strb	r3, [r4, #3]
}
   23b30:	e75b      	b.n	239ea <ticker_job_list_insert+0x52>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
   23b32:	9901      	ldr	r1, [sp, #4]
   23b34:	ebb1 0109 	subs.w	r1, r1, r9
   23b38:	9101      	str	r1, [sp, #4]
   23b3a:	d105      	bne.n	23b48 <ticker_job_list_insert+0x1b0>
   23b3c:	f8bc 101e 	ldrh.w	r1, [ip, #30]
   23b40:	f8be e01e 	ldrh.w	lr, [lr, #30]
   23b44:	4571      	cmp	r1, lr
   23b46:	d803      	bhi.n	23b50 <ticker_job_list_insert+0x1b8>
		current = ticker_current->next;
   23b48:	4613      	mov	r3, r2
   23b4a:	9a07      	ldr	r2, [sp, #28]
   23b4c:	5c82      	ldrb	r2, [r0, r2]
   23b4e:	e75c      	b.n	23a0a <ticker_job_list_insert+0x72>
   23b50:	f8cd 9004 	str.w	r9, [sp, #4]
   23b54:	e768      	b.n	23a28 <ticker_job_list_insert+0x90>

00023b56 <ticker_worker>:
{
   23b56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
   23b5a:	7f86      	ldrb	r6, [r0, #30]
	instance->worker_trigger = 1U;
   23b5c:	2301      	movs	r3, #1
{
   23b5e:	b08d      	sub	sp, #52	; 0x34
   23b60:	4605      	mov	r5, r0
	instance->worker_trigger = 1U;
   23b62:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
   23b64:	b91e      	cbnz	r6, 23b6e <ticker_worker+0x18>
	if (instance->ticker_id_head == TICKER_NULL) {
   23b66:	7f43      	ldrb	r3, [r0, #29]
   23b68:	2bff      	cmp	r3, #255	; 0xff
   23b6a:	d103      	bne.n	23b74 <ticker_worker+0x1e>
		instance->worker_trigger = 0U;
   23b6c:	77c6      	strb	r6, [r0, #31]
}
   23b6e:	b00d      	add	sp, #52	; 0x34
   23b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
   23b74:	f7f2 fd22 	bl	165bc <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   23b78:	696b      	ldr	r3, [r5, #20]
	ticker_id_head = instance->ticker_id_head;
   23b7a:	7f6f      	ldrb	r7, [r5, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   23b7c:	1ac0      	subs	r0, r0, r3
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   23b7e:	7f2b      	ldrb	r3, [r5, #28]
   23b80:	2bff      	cmp	r3, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   23b82:	f020 4b7f 	bic.w	fp, r0, #4278190080	; 0xff000000
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   23b86:	d004      	beq.n	23b92 <ticker_worker+0x3c>
		if (instance->ticks_slot_previous > ticks_elapsed) {
   23b88:	69ae      	ldr	r6, [r5, #24]
	uint8_t slot_reserved = 0;
   23b8a:	455e      	cmp	r6, fp
   23b8c:	bf94      	ite	ls
   23b8e:	2600      	movls	r6, #0
   23b90:	2601      	movhi	r6, #1
	node = &instance->nodes[0];
   23b92:	f8d5 9000 	ldr.w	r9, [r5]
	ticks_expired = 0U;
   23b96:	f04f 0800 	mov.w	r8, #0
	while (ticker_id_head != TICKER_NULL) {
   23b9a:	2fff      	cmp	r7, #255	; 0xff
   23b9c:	d11a      	bne.n	23bd4 <ticker_worker+0x7e>
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
   23b9e:	7aea      	ldrb	r2, [r5, #11]
   23ba0:	7aab      	ldrb	r3, [r5, #10]
   23ba2:	4293      	cmp	r3, r2
   23ba4:	d105      	bne.n	23bb2 <ticker_worker+0x5c>
	uint8_t idx = *ticks_elapsed_index + 1;
   23ba6:	3301      	adds	r3, #1
   23ba8:	b2db      	uxtb	r3, r3
		idx = 0U;
   23baa:	2b02      	cmp	r3, #2
   23bac:	bf08      	it	eq
   23bae:	2300      	moveq	r3, #0
	*ticks_elapsed_index = idx;
   23bb0:	72eb      	strb	r3, [r5, #11]
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   23bb2:	7aeb      	ldrb	r3, [r5, #11]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   23bb4:	6a6c      	ldr	r4, [r5, #36]	; 0x24
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   23bb6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   23bba:	2201      	movs	r2, #1
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   23bbc:	f8c3 800c 	str.w	r8, [r3, #12]
	instance->worker_trigger = 0U;
   23bc0:	2300      	movs	r3, #0
   23bc2:	77eb      	strb	r3, [r5, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   23bc4:	2104      	movs	r1, #4
   23bc6:	462b      	mov	r3, r5
   23bc8:	2003      	movs	r0, #3
   23bca:	46a4      	mov	ip, r4
}
   23bcc:	b00d      	add	sp, #52	; 0x34
   23bce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   23bd2:	4760      	bx	ip
		ticker = &node[ticker_id_head];
   23bd4:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   23bd8:	eb09 1407 	add.w	r4, r9, r7, lsl #4
   23bdc:	013a      	lsls	r2, r7, #4
		ticks_to_expire = ticker->ticks_to_expire;
   23bde:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
   23be0:	459b      	cmp	fp, r3
   23be2:	d3dc      	bcc.n	23b9e <ticker_worker+0x48>
		ticks_elapsed -= ticks_to_expire;
   23be4:	ebab 0b03 	sub.w	fp, fp, r3
		ticks_expired += ticks_to_expire;
   23be8:	4498      	add	r8, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   23bea:	78a3      	ldrb	r3, [r4, #2]
   23bec:	9303      	str	r3, [sp, #12]
		ticker_id_head = ticker->next;
   23bee:	f819 7002 	ldrb.w	r7, [r9, r2]
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   23bf2:	7863      	ldrb	r3, [r4, #1]
   23bf4:	9a03      	ldr	r2, [sp, #12]
   23bf6:	1a9b      	subs	r3, r3, r2
   23bf8:	b2db      	uxtb	r3, r3
   23bfa:	2b01      	cmp	r3, #1
   23bfc:	d1cd      	bne.n	23b9a <ticker_worker+0x44>
		if (ticker->ticks_slot != 0U &&
   23bfe:	69a3      	ldr	r3, [r4, #24]
   23c00:	9304      	str	r3, [sp, #16]
   23c02:	2b00      	cmp	r3, #0
   23c04:	d034      	beq.n	23c70 <ticker_worker+0x11a>
   23c06:	2e00      	cmp	r6, #0
   23c08:	f040 80a8 	bne.w	23d5c <ticker_worker+0x206>
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
   23c0c:	f994 302d 	ldrsb.w	r3, [r4, #45]	; 0x2d
   23c10:	9305      	str	r3, [sp, #20]
   23c12:	3380      	adds	r3, #128	; 0x80
   23c14:	d02c      	beq.n	23c70 <ticker_worker+0x11a>
   23c16:	2fff      	cmp	r7, #255	; 0xff
   23c18:	d02a      	beq.n	23c70 <ticker_worker+0x11a>
		int32_t lazy_current = ticker->lazy_current;
   23c1a:	8be3      	ldrh	r3, [r4, #30]
		if (lazy_current >= ticker->lazy_periodic) {
   23c1c:	8ba2      	ldrh	r2, [r4, #28]
		uint32_t current_age = ticker->ticks_periodic +
   23c1e:	6861      	ldr	r1, [r4, #4]
		if (lazy_current >= ticker->lazy_periodic) {
   23c20:	4293      	cmp	r3, r2
			lazy_current -= ticker->lazy_periodic;
   23c22:	bf28      	it	cs
   23c24:	1a9b      	subcs	r3, r3, r2
		uint32_t current_age = ticker->ticks_periodic +
   23c26:	fb03 1201 	mla	r2, r3, r1, r1
   23c2a:	9209      	str	r2, [sp, #36]	; 0x24
		uint32_t acc_ticks_to_expire = 0U;
   23c2c:	2200      	movs	r2, #0
   23c2e:	9206      	str	r2, [sp, #24]
				(lazy_current - ticker->priority);
   23c30:	9a05      	ldr	r2, [sp, #20]
   23c32:	1a9b      	subs	r3, r3, r2
		uint32_t current_age = ticker->ticks_periodic +
   23c34:	46ba      	mov	sl, r7
				(lazy_current - ticker->priority);
   23c36:	930b      	str	r3, [sp, #44]	; 0x2c
			struct ticker_node *ticker_next = &nodes[id_head];
   23c38:	fa0f fa8a 	sxth.w	sl, sl
   23c3c:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
   23c40:	ea4f 130a 	mov.w	r3, sl, lsl #4
   23c44:	eb09 1a0a 	add.w	sl, r9, sl, lsl #4
   23c48:	9308      	str	r3, [sp, #32]
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
   23c4a:	f8da c008 	ldr.w	ip, [sl, #8]
   23c4e:	9b06      	ldr	r3, [sp, #24]
   23c50:	4463      	add	r3, ip
   23c52:	9306      	str	r3, [sp, #24]
			if (acc_ticks_to_expire > ticker->ticks_slot) {
   23c54:	9a06      	ldr	r2, [sp, #24]
   23c56:	9b04      	ldr	r3, [sp, #16]
   23c58:	4293      	cmp	r3, r2
   23c5a:	d309      	bcc.n	23c70 <ticker_worker+0x11a>
			if (ticker_next->ticks_slot == 0U) {
   23c5c:	f8da 3018 	ldr.w	r3, [sl, #24]
   23c60:	2b00      	cmp	r3, #0
   23c62:	d13a      	bne.n	23cda <ticker_worker+0x184>
			id_head = ticker_next->next;
   23c64:	9b08      	ldr	r3, [sp, #32]
   23c66:	f819 a003 	ldrb.w	sl, [r9, r3]
		while (id_head != TICKER_NULL) {
   23c6a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   23c6e:	d1e3      	bne.n	23c38 <ticker_worker+0xe2>
		must_expire_skip = 0U;
   23c70:	f04f 0a00 	mov.w	sl, #0
		if (ticker->ext_data) {
   23c74:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   23c76:	2b00      	cmp	r3, #0
   23c78:	f000 809a 	beq.w	23db0 <ticker_worker+0x25a>
			ticker->ext_data->ticks_drift = 0U;
   23c7c:	2200      	movs	r2, #0
			ticks_drift = ticker->ext_data->ticks_drift;
   23c7e:	6859      	ldr	r1, [r3, #4]
			ticker->ext_data->reschedule_state =
   23c80:	721a      	strb	r2, [r3, #8]
			ticker->ext_data->ticks_drift = 0U;
   23c82:	605a      	str	r2, [r3, #4]
		ticker->ack--;
   23c84:	9b03      	ldr	r3, [sp, #12]
   23c86:	3b01      	subs	r3, #1
   23c88:	70a3      	strb	r3, [r4, #2]
		if (ticker->timeout_func) {
   23c8a:	68e3      	ldr	r3, [r4, #12]
   23c8c:	469e      	mov	lr, r3
   23c8e:	2b00      	cmp	r3, #0
   23c90:	d083      	beq.n	23b9a <ticker_worker+0x44>
					   ticks_expired -
   23c92:	6960      	ldr	r0, [r4, #20]
   23c94:	696b      	ldr	r3, [r5, #20]
			ticker->timeout_func(ticks_at_expire,
   23c96:	6a62      	ldr	r2, [r4, #36]	; 0x24
					   ticks_expired -
   23c98:	eba8 0000 	sub.w	r0, r8, r0
   23c9c:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
   23c9e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
   23ca2:	f1ba 0f00 	cmp.w	sl, #0
   23ca6:	f040 8085 	bne.w	23db4 <ticker_worker+0x25e>
   23caa:	8be3      	ldrh	r3, [r4, #30]
   23cac:	f8d4 c010 	ldr.w	ip, [r4, #16]
   23cb0:	f8cd c004 	str.w	ip, [sp, #4]
   23cb4:	f894 c003 	ldrb.w	ip, [r4, #3]
   23cb8:	f8cd c000 	str.w	ip, [sp]
   23cbc:	46f4      	mov	ip, lr
   23cbe:	47e0      	blx	ip
			if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   23cc0:	f1ba 0f00 	cmp.w	sl, #0
   23cc4:	f47f af69 	bne.w	23b9a <ticker_worker+0x44>
				if (ticker->ticks_slot != 0U) {
   23cc8:	69a3      	ldr	r3, [r4, #24]
				ticker->lazy_current = 0U;
   23cca:	f8a4 a01e 	strh.w	sl, [r4, #30]
					slot_reserved = 1U;
   23cce:	2b00      	cmp	r3, #0
				ticker->force = 0U;
   23cd0:	f884 a003 	strb.w	sl, [r4, #3]
					slot_reserved = 1U;
   23cd4:	bf18      	it	ne
   23cd6:	2601      	movne	r6, #1
   23cd8:	e75f      	b.n	23b9a <ticker_worker+0x44>
			int32_t lazy_next = ticker_next->lazy_current;
   23cda:	f8ba 201e 	ldrh.w	r2, [sl, #30]
				ticker_next->lazy_periodic > lazy_next;
   23cde:	f8ba 001c 	ldrh.w	r0, [sl, #28]
				ticker_next->priority;
   23ce2:	f99a e02d 	ldrsb.w	lr, [sl, #45]	; 0x2d
   23ce6:	f8cd e01c 	str.w	lr, [sp, #28]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   23cea:	f8da e004 	ldr.w	lr, [sl, #4]
			if (!lazy_next_periodic_skip) {
   23cee:	4282      	cmp	r2, r0
			int32_t lazy_next = ticker_next->lazy_current;
   23cf0:	4613      	mov	r3, r2
				lazy_next -= ticker_next->lazy_periodic;
   23cf2:	bf28      	it	cs
   23cf4:	1a13      	subcs	r3, r2, r0
					  0U :
   23cf6:	f1be 0f00 	cmp.w	lr, #0
   23cfa:	d04d      	beq.n	23d98 <ticker_worker+0x242>
   23cfc:	ebae 0c0c 	sub.w	ip, lr, ip
				(ticker->ticks_periodic == 0U) ||
   23d00:	2900      	cmp	r1, #0
   23d02:	d04b      	beq.n	23d9c <ticker_worker+0x246>
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   23d04:	fb0e cc03 	mla	ip, lr, r3, ip
				(ticker->ticks_periodic == 0U) ||
   23d08:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
   23d0c:	45e6      	cmp	lr, ip
   23d0e:	bf8c      	ite	hi
   23d10:	f04f 0e01 	movhi.w	lr, #1
   23d14:	f04f 0e00 	movls.w	lr, #0
					(ticker->ticks_periodic != 0U) &&
   23d18:	bf34      	ite	cc
   23d1a:	f04f 0c01 	movcc.w	ip, #1
   23d1e:	f04f 0c00 	movcs.w	ip, #0
			uint8_t next_force = (ticker_next->force > ticker->force);
   23d22:	f89a a003 	ldrb.w	sl, [sl, #3]
   23d26:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
			if (!lazy_next_periodic_skip &&
   23d2a:	4282      	cmp	r2, r0
			uint8_t next_force = (ticker_next->force > ticker->force);
   23d2c:	f894 a003 	ldrb.w	sl, [r4, #3]
			if (!lazy_next_periodic_skip &&
   23d30:	d398      	bcc.n	23c64 <ticker_worker+0x10e>
   23d32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   23d34:	4552      	cmp	r2, sl
   23d36:	d811      	bhi.n	23d5c <ticker_worker+0x206>
			    (next_force ||
   23d38:	9a07      	ldr	r2, [sp, #28]
   23d3a:	f112 0f80 	cmn.w	r2, #128	; 0x80
   23d3e:	d00d      	beq.n	23d5c <ticker_worker+0x206>
				(lazy_next - ticker_next->priority) >
   23d40:	1a9b      	subs	r3, r3, r2
			     next_is_critical ||
   23d42:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   23d44:	4293      	cmp	r3, r2
   23d46:	dd02      	ble.n	23d4e <ticker_worker+0x1f8>
			     (next_has_priority && !current_is_older) ||
   23d48:	f1be 0f00 	cmp.w	lr, #0
   23d4c:	d006      	beq.n	23d5c <ticker_worker+0x206>
   23d4e:	9b05      	ldr	r3, [sp, #20]
   23d50:	9a07      	ldr	r2, [sp, #28]
   23d52:	4293      	cmp	r3, r2
   23d54:	d186      	bne.n	23c64 <ticker_worker+0x10e>
			     (equal_priority && next_is_older))) {
   23d56:	f1bc 0f00 	cmp.w	ip, #0
   23d5a:	d083      	beq.n	23c64 <ticker_worker+0x10e>
			struct ticker_ext *ext_data = ticker->ext_data;
   23d5c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
		int32_t lazy_current = ticker->lazy_current;
   23d5e:	8be2      	ldrh	r2, [r4, #30]
			if (ext_data &&
   23d60:	b14b      	cbz	r3, 23d76 <ticker_worker+0x220>
   23d62:	6819      	ldr	r1, [r3, #0]
   23d64:	b1f1      	cbz	r1, 23da4 <ticker_worker+0x24e>
			    ext_data->ticks_slot_window != 0U &&
   23d66:	7a19      	ldrb	r1, [r3, #8]
   23d68:	b9e1      	cbnz	r1, 23da4 <ticker_worker+0x24e>
			    TICKER_RESCHEDULE_STATE_NONE &&
   23d6a:	8ba1      	ldrh	r1, [r4, #28]
   23d6c:	4291      	cmp	r1, r2
   23d6e:	d819      	bhi.n	23da4 <ticker_worker+0x24e>
				ext_data->reschedule_state =
   23d70:	f04f 0101 	mov.w	r1, #1
				ext_data->reschedule_state =
   23d74:	7219      	strb	r1, [r3, #8]
			ticker->lazy_current++;
   23d76:	3201      	adds	r2, #1
			if ((ticker->must_expire == 0U) ||
   23d78:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
			ticker->lazy_current++;
   23d7c:	b292      	uxth	r2, r2
   23d7e:	83e2      	strh	r2, [r4, #30]
			if ((ticker->must_expire == 0U) ||
   23d80:	b131      	cbz	r1, 23d90 <ticker_worker+0x23a>
   23d82:	8ba1      	ldrh	r1, [r4, #28]
   23d84:	4291      	cmp	r1, r2
   23d86:	d203      	bcs.n	23d90 <ticker_worker+0x23a>
			    (ticker->lazy_periodic >= ticker->lazy_current) ||
   23d88:	b17b      	cbz	r3, 23daa <ticker_worker+0x254>
			    TICKER_RESCHEDULE_PENDING(ticker)) {
   23d8a:	7a1b      	ldrb	r3, [r3, #8]
   23d8c:	2b01      	cmp	r3, #1
   23d8e:	d10c      	bne.n	23daa <ticker_worker+0x254>
				ticker->ack--;
   23d90:	9b03      	ldr	r3, [sp, #12]
   23d92:	3b01      	subs	r3, #1
   23d94:	70a3      	strb	r3, [r4, #2]
				continue;
   23d96:	e700      	b.n	23b9a <ticker_worker+0x44>
					  0U :
   23d98:	46f4      	mov	ip, lr
   23d9a:	e7b1      	b.n	23d00 <ticker_worker+0x1aa>
				(ticker->ticks_periodic == 0U) ||
   23d9c:	f04f 0e01 	mov.w	lr, #1
					(ticker->ticks_periodic != 0U) &&
   23da0:	468c      	mov	ip, r1
   23da2:	e7be      	b.n	23d22 <ticker_worker+0x1cc>
				ext_data->reschedule_state =
   23da4:	f04f 0100 	mov.w	r1, #0
   23da8:	e7e4      	b.n	23d74 <ticker_worker+0x21e>
			must_expire_skip = 1U;
   23daa:	f04f 0a01 	mov.w	sl, #1
   23dae:	e761      	b.n	23c74 <ticker_worker+0x11e>
			ticks_drift = 0U;
   23db0:	4619      	mov	r1, r3
   23db2:	e767      	b.n	23c84 <ticker_worker+0x12e>
			ticker->timeout_func(ticks_at_expire,
   23db4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   23db8:	e778      	b.n	23cac <ticker_worker+0x156>

00023dba <ticker_start>:
{
   23dba:	b510      	push	{r4, lr}
   23dbc:	b08a      	sub	sp, #40	; 0x28
	return ticker_start_ext(instance_index, user_id, ticker_id,
   23dbe:	2400      	movs	r4, #0
   23dc0:	9409      	str	r4, [sp, #36]	; 0x24
   23dc2:	9c14      	ldr	r4, [sp, #80]	; 0x50
   23dc4:	9408      	str	r4, [sp, #32]
   23dc6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   23dc8:	9407      	str	r4, [sp, #28]
   23dca:	9c12      	ldr	r4, [sp, #72]	; 0x48
   23dcc:	9406      	str	r4, [sp, #24]
   23dce:	9c11      	ldr	r4, [sp, #68]	; 0x44
   23dd0:	9405      	str	r4, [sp, #20]
   23dd2:	9c10      	ldr	r4, [sp, #64]	; 0x40
   23dd4:	9404      	str	r4, [sp, #16]
   23dd6:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
   23dda:	9403      	str	r4, [sp, #12]
   23ddc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   23dde:	9402      	str	r4, [sp, #8]
   23de0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   23de2:	9401      	str	r4, [sp, #4]
   23de4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   23de6:	9400      	str	r4, [sp, #0]
   23de8:	f7ec fcd2 	bl	10790 <ticker_start_ext>
}
   23dec:	b00a      	add	sp, #40	; 0x28
   23dee:	bd10      	pop	{r4, pc}

00023df0 <ticker_update>:
{
   23df0:	b510      	push	{r4, lr}
   23df2:	b088      	sub	sp, #32
	return ticker_update_ext(instance_index, user_id, ticker_id,
   23df4:	2400      	movs	r4, #0
   23df6:	9407      	str	r4, [sp, #28]
   23df8:	9c10      	ldr	r4, [sp, #64]	; 0x40
   23dfa:	9406      	str	r4, [sp, #24]
   23dfc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   23dfe:	9405      	str	r4, [sp, #20]
   23e00:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
   23e04:	9404      	str	r4, [sp, #16]
   23e06:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
   23e0a:	9403      	str	r4, [sp, #12]
   23e0c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   23e0e:	9402      	str	r4, [sp, #8]
   23e10:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   23e12:	9401      	str	r4, [sp, #4]
   23e14:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   23e16:	9400      	str	r4, [sp, #0]
   23e18:	f7ec fd08 	bl	1082c <ticker_update_ext>
}
   23e1c:	b008      	add	sp, #32
   23e1e:	bd10      	pop	{r4, pc}

00023e20 <ticker_ticks_now_get>:
	return cntr_cnt_get();
   23e20:	f7f2 bbcc 	b.w	165bc <cntr_cnt_get>

00023e24 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   23e24:	1a40      	subs	r0, r0, r1
}
   23e26:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   23e2a:	4770      	bx	lr

00023e2c <ll_addr_read>:

uint8_t *ll_addr_read(uint8_t addr_type, uint8_t *const bdaddr)
{
   23e2c:	b538      	push	{r3, r4, r5, lr}
	uint8_t *addr;

	addr = ll_addr_get(addr_type);
   23e2e:	f7ec fda3 	bl	10978 <ll_addr_get>
{
   23e32:	460d      	mov	r5, r1
	if (addr) {
   23e34:	4604      	mov	r4, r0
   23e36:	b120      	cbz	r0, 23e42 <ll_addr_read+0x16>
		memcpy(bdaddr, addr, BDADDR_SIZE);
   23e38:	4601      	mov	r1, r0
   23e3a:	2206      	movs	r2, #6
   23e3c:	4628      	mov	r0, r5
   23e3e:	f7fa f8f8 	bl	1e032 <memcpy>
	}

	return addr;
}
   23e42:	4620      	mov	r0, r4
   23e44:	bd38      	pop	{r3, r4, r5, pc}

00023e46 <ll_tx_pwr_lvl_get>:

#include "ll.h"

uint8_t ll_tx_pwr_lvl_get(uint8_t handle_type,
		       uint16_t handle, uint8_t type, int8_t *tx_pwr_lvl)
{
   23e46:	b538      	push	{r3, r4, r5, lr}
   23e48:	4604      	mov	r4, r0
	switch (handle_type) {
   23e4a:	2c02      	cmp	r4, #2
{
   23e4c:	4608      	mov	r0, r1
   23e4e:	461d      	mov	r5, r3
	switch (handle_type) {
   23e50:	d106      	bne.n	23e60 <ll_tx_pwr_lvl_get+0x1a>
#endif /* CONFIG_BT_OBSERVER && CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL*/
#if defined(CONFIG_BT_CONN)
		case (BT_HCI_VS_LL_HANDLE_TYPE_CONN): {
			struct ll_conn *conn;

			conn = ll_connected_get(handle);
   23e52:	f000 fa60 	bl	24316 <ll_connected_get>
			if (!conn) {
   23e56:	b108      	cbz	r0, 23e5c <ll_tx_pwr_lvl_get+0x16>
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
				/* Level desired is maximum available */
				*tx_pwr_lvl = lll_radio_tx_pwr_max_get();
#else  /* !CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
				/* Return default if not multiple TXP */
				*tx_pwr_lvl = RADIO_TXP_DEFAULT;
   23e58:	2400      	movs	r4, #0
   23e5a:	702c      	strb	r4, [r5, #0]
			return BT_HCI_ERR_UNKNOWN_CMD;
		}
	}

	return BT_HCI_ERR_SUCCESS;
}
   23e5c:	4620      	mov	r0, r4
   23e5e:	bd38      	pop	{r3, r4, r5, pc}
			return BT_HCI_ERR_UNKNOWN_CMD;
   23e60:	2401      	movs	r4, #1
   23e62:	e7fb      	b.n	23e5c <ll_tx_pwr_lvl_get+0x16>

00023e64 <ll_tx_pwr_get>:
{
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	*min = lll_radio_tx_pwr_min_get();
	*max = lll_radio_tx_pwr_max_get();
#else
	*min = RADIO_TXP_DEFAULT;
   23e64:	2300      	movs	r3, #0
   23e66:	7003      	strb	r3, [r0, #0]
	*max = RADIO_TXP_DEFAULT;
   23e68:	700b      	strb	r3, [r1, #0]
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
}
   23e6a:	4770      	bx	lr

00023e6c <meta_evt>:
{
   23e6c:	b570      	push	{r4, r5, r6, lr}
	return net_buf_simple_add(&buf->b, len);
   23e6e:	f100 0408 	add.w	r4, r0, #8
   23e72:	460e      	mov	r6, r1
   23e74:	4620      	mov	r0, r4
   23e76:	2102      	movs	r1, #2
   23e78:	4615      	mov	r5, r2
   23e7a:	f000 ff4c 	bl	24d16 <net_buf_simple_add>
	hdr->evt = evt;
   23e7e:	233e      	movs	r3, #62	; 0x3e
   23e80:	7003      	strb	r3, [r0, #0]
	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
   23e82:	1c6b      	adds	r3, r5, #1
	hdr->len = len;
   23e84:	7043      	strb	r3, [r0, #1]
   23e86:	2101      	movs	r1, #1
   23e88:	4620      	mov	r0, r4
   23e8a:	f000 ff44 	bl	24d16 <net_buf_simple_add>
	me->subevent = subevt;
   23e8e:	7006      	strb	r6, [r0, #0]
   23e90:	4629      	mov	r1, r5
   23e92:	4620      	mov	r0, r4
}
   23e94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   23e98:	f000 bf3d 	b.w	24d16 <net_buf_simple_add>

00023e9c <sys_get_le64>:
{
   23e9c:	4603      	mov	r3, r0
}
   23e9e:	6800      	ldr	r0, [r0, #0]
   23ea0:	6859      	ldr	r1, [r3, #4]
   23ea2:	4770      	bx	lr

00023ea4 <hci_num_cmplt_encode>:
{
   23ea4:	b570      	push	{r4, r5, r6, lr}
   23ea6:	f100 0408 	add.w	r4, r0, #8
   23eaa:	460e      	mov	r6, r1
   23eac:	4620      	mov	r0, r4
   23eae:	2102      	movs	r1, #2
   23eb0:	4615      	mov	r5, r2
   23eb2:	f000 ff30 	bl	24d16 <net_buf_simple_add>
	hdr->evt = evt;
   23eb6:	2313      	movs	r3, #19
	hdr->len = len;
   23eb8:	2105      	movs	r1, #5
	hdr->evt = evt;
   23eba:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   23ebc:	7041      	strb	r1, [r0, #1]
   23ebe:	4620      	mov	r0, r4
   23ec0:	f000 ff29 	bl	24d16 <net_buf_simple_add>
	ep->num_handles = num_handles;
   23ec4:	2301      	movs	r3, #1
   23ec6:	7003      	strb	r3, [r0, #0]
	hc->handle = sys_cpu_to_le16(handle);
   23ec8:	f8a0 6001 	strh.w	r6, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
   23ecc:	f8a0 5003 	strh.w	r5, [r0, #3]
}
   23ed0:	bd70      	pop	{r4, r5, r6, pc}

00023ed2 <bt_rand>:
#include "hal/ecb.h"
#include "lll.h"

int bt_rand(void *buf, size_t len)
{
	return lll_csrand_get(buf, len);
   23ed2:	f7f0 be67 	b.w	14ba4 <lll_csrand_get>

00023ed6 <bt_encrypt_be>:
	return 0;
}

int bt_encrypt_be(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
   23ed6:	b508      	push	{r3, lr}
	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	ecb_encrypt_be(key, plaintext, enc_data);
   23ed8:	f000 fd6d 	bl	249b6 <ecb_encrypt_be>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
   23edc:	2000      	movs	r0, #0
   23ede:	bd08      	pop	{r3, pc}

00023ee0 <ll_feat_get>:

#else /* !CONFIG_BT_CTLR_SET_HOST_FEATURE */
uint64_t ll_feat_get(void)
{
	return LL_FEAT;
}
   23ee0:	208e      	movs	r0, #142	; 0x8e
   23ee2:	2100      	movs	r1, #0
   23ee4:	4770      	bx	lr

00023ee6 <disabled_cb>:
	z_impl_k_sem_give(sem);
   23ee6:	f7f7 ba0f 	b.w	1b308 <z_impl_k_sem_give>

00023eea <rx_demux_conn_tx_ack>:
{
   23eea:	b537      	push	{r0, r1, r2, r4, r5, lr}
   23eec:	4605      	mov	r5, r0
   23eee:	4614      	mov	r4, r2
   23ef0:	9300      	str	r3, [sp, #0]
   23ef2:	f8ad 1006 	strh.w	r1, [sp, #6]
		ull_conn_ack_dequeue();
   23ef6:	f7f0 fa09 	bl	1430c <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
   23efa:	4621      	mov	r1, r4
   23efc:	9a00      	ldr	r2, [sp, #0]
   23efe:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   23f02:	f7f0 fa47 	bl	14394 <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
   23f06:	4620      	mov	r0, r4
   23f08:	f7f0 f9ca 	bl	142a0 <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   23f0c:	466a      	mov	r2, sp
   23f0e:	f10d 0106 	add.w	r1, sp, #6
   23f12:	4628      	mov	r0, r5
   23f14:	f7f0 f9e6 	bl	142e4 <ull_conn_ack_by_last_peek>
	} while (link);
   23f18:	4604      	mov	r4, r0
   23f1a:	2800      	cmp	r0, #0
   23f1c:	d1eb      	bne.n	23ef6 <rx_demux_conn_tx_ack+0xc>
			ll_rx_sched();
   23f1e:	f7ed ff59 	bl	11dd4 <ll_rx_sched>
}
   23f22:	b003      	add	sp, #12
   23f24:	bd30      	pop	{r4, r5, pc}

00023f26 <ll_timeslice_ticker_id_get>:
	*instance_index = TICKER_INSTANCE_ID_CTLR;
   23f26:	2300      	movs	r3, #0
   23f28:	7003      	strb	r3, [r0, #0]
	*ticker_id = (TICKER_NODES - FLASH_TICKER_NODES);
   23f2a:	2306      	movs	r3, #6
   23f2c:	700b      	strb	r3, [r1, #0]
}
   23f2e:	4770      	bx	lr

00023f30 <ull_rxfifo_alloc>:
 * @details This function allocates up to 'max' number of MFIFO elements by
 *          enqueuing pointers to memory elements with associated memq links.
 */
void ull_rxfifo_alloc(uint8_t s, uint8_t n, uint8_t f, uint8_t *l, uint8_t *m,
		      void *mem_free, void *link_free, uint8_t max)
{
   23f30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23f34:	e9dd a60d 	ldrd	sl, r6, [sp, #52]	; 0x34
   23f38:	469b      	mov	fp, r3
   23f3a:	f89d 703c 	ldrb.w	r7, [sp, #60]	; 0x3c
   23f3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   23f40:	9100      	str	r1, [sp, #0]
   23f42:	4681      	mov	r9, r0
   23f44:	4690      	mov	r8, r2
   23f46:	9301      	str	r3, [sp, #4]
	uint8_t idx;

	while ((max--) && mfifo_enqueue_idx_get(n, f, *l, &idx)) {
   23f48:	b177      	cbz	r7, 23f68 <ull_rxfifo_alloc+0x38>
	last = last + 1;
   23f4a:	f89b 4000 	ldrb.w	r4, [fp]
		last = 0U;
   23f4e:	9b00      	ldr	r3, [sp, #0]
	last = last + 1;
   23f50:	3401      	adds	r4, #1
   23f52:	b2e4      	uxtb	r4, r4
		last = 0U;
   23f54:	42a3      	cmp	r3, r4
   23f56:	bf08      	it	eq
   23f58:	2400      	moveq	r4, #0
	if (last == first) {
   23f5a:	45a0      	cmp	r8, r4
   23f5c:	d004      	beq.n	23f68 <ull_rxfifo_alloc+0x38>
		memq_link_t *link;
		struct node_rx_hdr *rx;

		link = mem_acquire(link_free);
   23f5e:	4630      	mov	r0, r6
   23f60:	f7ff fc3a 	bl	237d8 <mem_acquire>
		if (!link) {
   23f64:	4605      	mov	r5, r0
   23f66:	b910      	cbnz	r0, 23f6e <ull_rxfifo_alloc+0x3e>
		link->mem = NULL;
		rx->link = link;

		mfifo_by_idx_enqueue(m, s, idx, rx, l);
	}
}
   23f68:	b003      	add	sp, #12
   23f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rx = mem_acquire(mem_free);
   23f6e:	4650      	mov	r0, sl
   23f70:	f7ff fc32 	bl	237d8 <mem_acquire>
		if (!rx) {
   23f74:	b930      	cbnz	r0, 23f84 <ull_rxfifo_alloc+0x54>
			mem_release(link, link_free);
   23f76:	4631      	mov	r1, r6
   23f78:	4628      	mov	r0, r5
}
   23f7a:	b003      	add	sp, #12
   23f7c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mem_release(link, link_free);
   23f80:	f7ff bc43 	b.w	2380a <mem_release>
		link->mem = NULL;
   23f84:	2300      	movs	r3, #0
   23f86:	606b      	str	r3, [r5, #4]
		rx->link = link;
   23f88:	6005      	str	r5, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   23f8a:	f89b 5000 	ldrb.w	r5, [fp]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   23f8e:	9b01      	ldr	r3, [sp, #4]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   23f90:	fb15 f509 	smulbb	r5, r5, r9
	while ((max--) && mfifo_enqueue_idx_get(n, f, *l, &idx)) {
   23f94:	1e7a      	subs	r2, r7, #1
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   23f96:	5158      	str	r0, [r3, r5]
   23f98:	b2d7      	uxtb	r7, r2
	*last = idx; /* Commit: Update write index */
   23f9a:	f88b 4000 	strb.w	r4, [fp]
}
   23f9e:	e7d3      	b.n	23f48 <ull_rxfifo_alloc+0x18>

00023fa0 <ull_rxfifo_release>:
 * @brief   Support function for RXFIFO_RELEASE macro
 * @details This function releases a node by returning it to the FIFO.
 */
void *ull_rxfifo_release(uint8_t s, uint8_t n, uint8_t f, uint8_t *l, uint8_t *m,
			 memq_link_t *link, struct node_rx_hdr *rx)
{
   23fa0:	b530      	push	{r4, r5, lr}
	last = last + 1;
   23fa2:	781c      	ldrb	r4, [r3, #0]
   23fa4:	3401      	adds	r4, #1
   23fa6:	b2e4      	uxtb	r4, r4
		last = 0U;
   23fa8:	42a1      	cmp	r1, r4
   23faa:	bf08      	it	eq
   23fac:	2400      	moveq	r4, #0
	if (last == first) {
   23fae:	42a2      	cmp	r2, r4
   23fb0:	4605      	mov	r5, r0
   23fb2:	9805      	ldr	r0, [sp, #20]
   23fb4:	d008      	beq.n	23fc8 <ull_rxfifo_release+0x28>

	if (!mfifo_enqueue_idx_get(n, f, *l, &idx)) {
		return NULL;
	}

	rx->link = link;
   23fb6:	9a04      	ldr	r2, [sp, #16]
   23fb8:	6002      	str	r2, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   23fba:	781a      	ldrb	r2, [r3, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   23fbc:	9903      	ldr	r1, [sp, #12]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   23fbe:	fb12 f205 	smulbb	r2, r2, r5
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   23fc2:	5088      	str	r0, [r1, r2]
	*last = idx; /* Commit: Update write index */
   23fc4:	701c      	strb	r4, [r3, #0]

	mfifo_by_idx_enqueue(m, s, idx, rx, l);

	return rx;
}
   23fc6:	bd30      	pop	{r4, r5, pc}
		return NULL;
   23fc8:	2000      	movs	r0, #0
   23fca:	e7fc      	b.n	23fc6 <ull_rxfifo_release+0x26>

00023fcc <lll_prepare>:
{
   23fcc:	b507      	push	{r0, r1, r2, lr}
	return lll_prepare_resolve(is_abort_cb, abort_cb, prepare_cb,
   23fce:	2300      	movs	r3, #0
   23fd0:	e9cd 3300 	strd	r3, r3, [sp]
   23fd4:	9b04      	ldr	r3, [sp, #16]
   23fd6:	f7f0 ff23 	bl	14e20 <lll_prepare_resolve>
}
   23fda:	b003      	add	sp, #12
   23fdc:	f85d fb04 	ldr.w	pc, [sp], #4

00023fe0 <adv_time_get.constprop.0.isra.0>:
static uint16_t adv_time_get(struct pdu_adv *pdu, struct pdu_adv *pdu_scan,
   23fe0:	b530      	push	{r4, r5, lr}
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
   23fe2:	7804      	ldrb	r4, [r0, #0]
   23fe4:	f004 040f 	and.w	r4, r4, #15
				   rxtx_turn_us * (adv_chn_cnt - 1);
   23fe8:	1e53      	subs	r3, r2, #1
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
   23fea:	2c02      	cmp	r4, #2
			time_us += BYTES2US(adv_size, PHY_1M) * adv_chn_cnt +
   23fec:	b29d      	uxth	r5, r3
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
   23fee:	d10d      	bne.n	2400c <adv_time_get.constprop.0.isra.0+0x2c>
			adv_size += pdu->len;
   23ff0:	7841      	ldrb	r1, [r0, #1]
			time_us += BYTES2US(adv_size, PHY_1M) * adv_chn_cnt +
   23ff2:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   23ff6:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   23ffa:	3110      	adds	r1, #16
   23ffc:	0058      	lsls	r0, r3, #1
   23ffe:	00c9      	lsls	r1, r1, #3
   24000:	f500 70c8 	add.w	r0, r0, #400	; 0x190
   24004:	fb01 0002 	mla	r0, r1, r2, r0
			time_us += (BYTES2US(adv_size, PHY_1M) +
   24008:	b280      	uxth	r0, r0
}
   2400a:	bd30      	pop	{r4, r5, pc}
			if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   2400c:	2c01      	cmp	r4, #1
   2400e:	d016      	beq.n	2403e <adv_time_get.constprop.0.isra.0+0x5e>
			BYTES2US((PDU_OVERHEAD_SIZE(PHY_1M) +
   24010:	3110      	adds	r1, #16
		const uint16_t scan_rsp_us =
   24012:	00c9      	lsls	r1, r1, #3
			} else if (pdu->type == PDU_ADV_TYPE_ADV_IND) {
   24014:	b96c      	cbnz	r4, 24032 <adv_time_get.constprop.0.isra.0+0x52>
				adv_size += pdu->len;
   24016:	7840      	ldrb	r0, [r0, #1]
				time_us += scan_req_us + EVENT_IFS_MAX_US +
   24018:	f501 7136 	add.w	r1, r1, #728	; 0x2d8
				adv_size += pdu->len;
   2401c:	3010      	adds	r0, #16
				   BYTES2US(adv_size, PHY_1M) + EVENT_IFS_MAX_US;
   2401e:	00c3      	lsls	r3, r0, #3
				    EVENT_IFS_MAX_US + rx_to_us +
   24020:	f503 73b3 	add.w	r3, r3, #358	; 0x166
   24024:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
   24028:	3098      	adds	r0, #152	; 0x98
				    rxtx_turn_us) * (adv_chn_cnt - 1) +
   2402a:	fb13 f305 	smulbb	r3, r3, r5
			time_us += (BYTES2US(adv_size, PHY_1M) +
   2402e:	4418      	add	r0, r3
   24030:	e7ea      	b.n	24008 <adv_time_get.constprop.0.isra.0+0x28>
			} else if (pdu->type == PDU_ADV_TYPE_SCAN_IND) {
   24032:	2c06      	cmp	r4, #6
   24034:	d0ef      	beq.n	24016 <adv_time_get.constprop.0.isra.0+0x36>
		uint16_t adv_size =
   24036:	2010      	movs	r0, #16
	uint16_t time_us = EVENT_OVERHEAD_START_US + EVENT_OVERHEAD_END_US;
   24038:	f44f 71c8 	mov.w	r1, #400	; 0x190
   2403c:	e7ef      	b.n	2401e <adv_time_get.constprop.0.isra.0+0x3e>
				adv_size += TARGETA_SIZE;
   2403e:	2016      	movs	r0, #22
				time_us += conn_ind_us;
   24040:	f44f 713c 	mov.w	r1, #752	; 0x2f0
   24044:	e7eb      	b.n	2401e <adv_time_get.constprop.0.isra.0+0x3e>

00024046 <ull_adv_init>:
	err = init_reset();
   24046:	f7ee bd3b 	b.w	12ac0 <init_reset>

0002404a <ull_adv_reset>:
{
   2404a:	b508      	push	{r3, lr}
		(void)disable(handle);
   2404c:	f7ee fed6 	bl	12dfc <disable.constprop.0>
}
   24050:	2000      	movs	r0, #0
   24052:	bd08      	pop	{r3, pc}

00024054 <ull_adv_is_enabled>:
{
   24054:	b508      	push	{r3, lr}
	adv = ull_adv_is_enabled_get(handle);
   24056:	f7ee fec3 	bl	12de0 <ull_adv_is_enabled_get>
}
   2405a:	3800      	subs	r0, #0
   2405c:	bf18      	it	ne
   2405e:	2001      	movne	r0, #1
   24060:	bd08      	pop	{r3, pc}

00024062 <ull_adv_filter_pol_get>:
{
   24062:	b508      	push	{r3, lr}
	adv = ull_adv_is_enabled_get(handle);
   24064:	f7ee febc 	bl	12de0 <ull_adv_is_enabled_get>
	if (!adv) {
   24068:	b118      	cbz	r0, 24072 <ull_adv_filter_pol_get+0x10>
	return adv->lll.filter_policy;
   2406a:	f890 0025 	ldrb.w	r0, [r0, #37]	; 0x25
   2406e:	f000 0003 	and.w	r0, r0, #3
}
   24072:	bd08      	pop	{r3, pc}

00024074 <ull_adv_pdu_update_addrs>:
{
   24074:	b510      	push	{r4, lr}
			own_id_addr = ll_addr_get(pdu->tx_addr);
   24076:	460c      	mov	r4, r1
   24078:	f814 0b02 	ldrb.w	r0, [r4], #2
   2407c:	f3c0 1080 	ubfx	r0, r0, #6, #1
   24080:	f7ec fc7a 	bl	10978 <ll_addr_get>
	memcpy(adv_addr, tx_addr, BDADDR_SIZE);
   24084:	2206      	movs	r2, #6
			own_id_addr = ll_addr_get(pdu->tx_addr);
   24086:	4601      	mov	r1, r0
	memcpy(adv_addr, tx_addr, BDADDR_SIZE);
   24088:	4620      	mov	r0, r4
   2408a:	f7f9 ffd2 	bl	1e032 <memcpy>
}
   2408e:	4620      	mov	r0, r4
   24090:	bd10      	pop	{r4, pc}

00024092 <ull_adv_data_set>:
	if (len > PDU_AC_DATA_SIZE_MAX) {
   24092:	291f      	cmp	r1, #31
{
   24094:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   24098:	4604      	mov	r4, r0
   2409a:	460d      	mov	r5, r1
   2409c:	4690      	mov	r8, r2
	if (len > PDU_AC_DATA_SIZE_MAX) {
   2409e:	d849      	bhi.n	24134 <ull_adv_data_set+0xa2>
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   240a0:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   240a4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   240a8:	6adf      	ldr	r7, [r3, #44]	; 0x2c
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
   240aa:	783b      	ldrb	r3, [r7, #0]
   240ac:	f003 030f 	and.w	r3, r3, #15
   240b0:	2b01      	cmp	r3, #1
   240b2:	d10a      	bne.n	240ca <ull_adv_data_set+0x38>
		adv->ad_data_backup.len = len;
   240b4:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
		memcpy(adv->ad_data_backup.data, data, adv->ad_data_backup.len);
   240b8:	460a      	mov	r2, r1
   240ba:	3041      	adds	r0, #65	; 0x41
   240bc:	4641      	mov	r1, r8
   240be:	f7f9 ffb8 	bl	1e032 <memcpy>
	return 0;
   240c2:	2000      	movs	r0, #0
}
   240c4:	b002      	add	sp, #8
   240c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   240ca:	f10d 0107 	add.w	r1, sp, #7
   240ce:	3028      	adds	r0, #40	; 0x28
   240d0:	f000 fadf 	bl	24692 <lll_adv_pdu_alloc>
	pdu->tx_addr = prev->tx_addr;
   240d4:	4639      	mov	r1, r7
   240d6:	4606      	mov	r6, r0
   240d8:	f811 2b02 	ldrb.w	r2, [r1], #2
   240dc:	f3c2 1080 	ubfx	r0, r2, #6, #1
	pdu->type = prev->type;
   240e0:	f3c2 0303 	ubfx	r3, r2, #0, #4
   240e4:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
   240e8:	f002 0280 	and.w	r2, r2, #128	; 0x80
   240ec:	4630      	mov	r0, r6
   240ee:	4313      	orrs	r3, r2
   240f0:	f800 3b02 	strb.w	r3, [r0], #2
	memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
   240f4:	2206      	movs	r2, #6
   240f6:	f7f9 ff9c 	bl	1e032 <memcpy>
	memcpy(&pdu->adv_ind.data[0], data, len);
   240fa:	462a      	mov	r2, r5
   240fc:	4641      	mov	r1, r8
   240fe:	f106 0008 	add.w	r0, r6, #8
	pdu->len = BDADDR_SIZE + len;
   24102:	3506      	adds	r5, #6
	memcpy(&pdu->adv_ind.data[0], data, len);
   24104:	f7f9 ff95 	bl	1e032 <memcpy>
	pdu->len = BDADDR_SIZE + len;
   24108:	7075      	strb	r5, [r6, #1]
	if (adv->is_enabled) {
   2410a:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   2410e:	07db      	lsls	r3, r3, #31
   24110:	d404      	bmi.n	2411c <ull_adv_data_set+0x8a>
	pdu->last = idx;
   24112:	f89d 3007 	ldrb.w	r3, [sp, #7]
   24116:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
   2411a:	e7d2      	b.n	240c2 <ull_adv_data_set+0x30>
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   2411c:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
   24120:	eb04 0383 	add.w	r3, r4, r3, lsl #2
		err = ull_adv_time_update(adv, pdu, pdu_scan);
   24124:	4631      	mov	r1, r6
   24126:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   24128:	4620      	mov	r0, r4
   2412a:	f7dd fcf5 	bl	1b18 <ull_adv_time_update>
		if (err) {
   2412e:	2800      	cmp	r0, #0
   24130:	d0ef      	beq.n	24112 <ull_adv_data_set+0x80>
   24132:	e7c7      	b.n	240c4 <ull_adv_data_set+0x32>
		return BT_HCI_ERR_INVALID_PARAM;
   24134:	2012      	movs	r0, #18
   24136:	e7c5      	b.n	240c4 <ull_adv_data_set+0x32>

00024138 <ull_scan_rsp_set>:
	if (len > PDU_AC_DATA_SIZE_MAX) {
   24138:	291f      	cmp	r1, #31
{
   2413a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2413e:	4604      	mov	r4, r0
   24140:	460e      	mov	r6, r1
   24142:	4617      	mov	r7, r2
	if (len > PDU_AC_DATA_SIZE_MAX) {
   24144:	d83e      	bhi.n	241c4 <ull_scan_rsp_set+0x8c>
   24146:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
   2414a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
	return lll_adv_pdu_alloc(&lll->scan_rsp, idx);
   2414e:	f10d 0107 	add.w	r1, sp, #7
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   24152:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
	return lll_adv_pdu_alloc(&lll->scan_rsp, idx);
   24156:	3034      	adds	r0, #52	; 0x34
   24158:	f000 fa9b 	bl	24692 <lll_adv_pdu_alloc>
	pdu->tx_addr = prev->tx_addr;
   2415c:	4641      	mov	r1, r8
   2415e:	4605      	mov	r5, r0
   24160:	f811 3b02 	ldrb.w	r3, [r1], #2
   24164:	f3c3 1380 	ubfx	r3, r3, #6, #1
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   24168:	019b      	lsls	r3, r3, #6
   2416a:	f043 0304 	orr.w	r3, r3, #4
   2416e:	7003      	strb	r3, [r0, #0]
	pdu->len = BDADDR_SIZE + len;
   24170:	1db3      	adds	r3, r6, #6
   24172:	7043      	strb	r3, [r0, #1]
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
   24174:	2206      	movs	r2, #6
   24176:	3002      	adds	r0, #2
   24178:	f7f9 ff5b 	bl	1e032 <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
   2417c:	4632      	mov	r2, r6
   2417e:	4639      	mov	r1, r7
   24180:	f105 0008 	add.w	r0, r5, #8
   24184:	f7f9 ff55 	bl	1e032 <memcpy>
	if (adv->is_enabled) {
   24188:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   2418c:	07db      	lsls	r3, r3, #31
   2418e:	d407      	bmi.n	241a0 <ull_scan_rsp_set+0x68>
	pdu->last = idx;
   24190:	f89d 3007 	ldrb.w	r3, [sp, #7]
   24194:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	return 0;
   24198:	2000      	movs	r0, #0
}
   2419a:	b002      	add	sp, #8
   2419c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   241a0:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   241a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   241a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
		if ((pdu_adv_scan->type == PDU_ADV_TYPE_ADV_IND) ||
   241aa:	780b      	ldrb	r3, [r1, #0]
   241ac:	f013 030f 	ands.w	r3, r3, #15
   241b0:	d001      	beq.n	241b6 <ull_scan_rsp_set+0x7e>
   241b2:	2b06      	cmp	r3, #6
   241b4:	d1ec      	bne.n	24190 <ull_scan_rsp_set+0x58>
			err = ull_adv_time_update(adv, pdu_adv_scan, pdu);
   241b6:	462a      	mov	r2, r5
   241b8:	4620      	mov	r0, r4
   241ba:	f7dd fcad 	bl	1b18 <ull_adv_time_update>
			if (err) {
   241be:	2800      	cmp	r0, #0
   241c0:	d0e6      	beq.n	24190 <ull_scan_rsp_set+0x58>
   241c2:	e7ea      	b.n	2419a <ull_scan_rsp_set+0x62>
		return BT_HCI_ERR_INVALID_PARAM;
   241c4:	2012      	movs	r0, #18
   241c6:	e7e8      	b.n	2419a <ull_scan_rsp_set+0x62>

000241c8 <ull_scan_init>:
}
   241c8:	2000      	movs	r0, #0
   241ca:	4770      	bx	lr

000241cc <disable.constprop.0>:
	ll_rx_put(rx_hdr->link, rx_hdr);
	ll_rx_sched();
}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

static uint8_t disable(uint8_t handle)
   241cc:	b510      	push	{r4, lr}
{
	struct ll_scan_set *scan;
	uint8_t ret;

	scan = ull_scan_is_enabled_get(handle);
   241ce:	2000      	movs	r0, #0
   241d0:	f7ee ff34 	bl	1303c <ull_scan_is_enabled_get>
	if (!scan) {
   241d4:	4604      	mov	r4, r0
   241d6:	b158      	cbz	r0, 241f0 <disable.constprop.0+0x24>
	if (scan->lll.conn) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}
#endif

	ret = ull_scan_disable(handle, scan);
   241d8:	4601      	mov	r1, r0
   241da:	2000      	movs	r0, #0
   241dc:	f7ee ff04 	bl	12fe8 <ull_scan_disable>
	if (ret) {
   241e0:	b928      	cbnz	r0, 241ee <disable.constprop.0+0x22>
		return ret;
	}

	scan->is_enabled = 0U;
   241e2:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   241e6:	f360 0300 	bfi	r3, r0, #0, #1
   241ea:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		ull_filter_adv_scan_state_cb(0);
	}
#endif

	return 0;
}
   241ee:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   241f0:	200c      	movs	r0, #12
   241f2:	e7fc      	b.n	241ee <disable.constprop.0+0x22>

000241f4 <ull_scan_reset>:
{
   241f4:	b508      	push	{r3, lr}
		(void)disable(handle);
   241f6:	f7ff ffe9 	bl	241cc <disable.constprop.0>
}
   241fa:	2000      	movs	r0, #0
   241fc:	bd08      	pop	{r3, pc}

000241fe <ll_scan_enable>:
{
   241fe:	b510      	push	{r4, lr}
	if (!enable) {
   24200:	b918      	cbnz	r0, 2420a <ll_scan_enable+0xc>
}
   24202:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = disable(SCAN_HANDLE_1M);
   24206:	f7ff bfe1 	b.w	241cc <disable.constprop.0>
	scan = ull_scan_is_disabled_get(SCAN_HANDLE_1M);
   2420a:	2000      	movs	r0, #0
   2420c:	f7ee ff24 	bl	13058 <ull_scan_is_disabled_get>
	if (!scan) {
   24210:	4604      	mov	r4, r0
   24212:	b190      	cbz	r0, 2423a <ll_scan_enable+0x3c>
	    (!is_coded_phy && (scan->own_addr_type & 0x1))) {
   24214:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
   24218:	079b      	lsls	r3, r3, #30
   2421a:	d404      	bmi.n	24226 <ll_scan_enable+0x28>
		err = ull_scan_enable(scan);
   2421c:	4620      	mov	r0, r4
}
   2421e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = ull_scan_enable(scan);
   24222:	f7dd bcd1 	b.w	1bc8 <ull_scan_enable>
		if (!mem_nz(ll_addr_get(BT_ADDR_LE_RANDOM), BDADDR_SIZE)) {
   24226:	2001      	movs	r0, #1
   24228:	f7ec fba6 	bl	10978 <ll_addr_get>
   2422c:	2106      	movs	r1, #6
   2422e:	f7ff fb18 	bl	23862 <mem_nz>
   24232:	2800      	cmp	r0, #0
   24234:	d1f2      	bne.n	2421c <ll_scan_enable+0x1e>
			return BT_HCI_ERR_INVALID_PARAM;
   24236:	2012      	movs	r0, #18
}
   24238:	bd10      	pop	{r4, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   2423a:	200c      	movs	r0, #12
   2423c:	e7fc      	b.n	24238 <ll_scan_enable+0x3a>

0002423e <ull_scan_is_enabled>:
{
   2423e:	b508      	push	{r3, lr}
	scan = ull_scan_is_enabled_get(handle);
   24240:	f7ee fefc 	bl	1303c <ull_scan_is_enabled_get>
	if (!scan) {
   24244:	b148      	cbz	r0, 2425a <ull_scan_is_enabled+0x1c>
	return (((uint32_t)scan->is_enabled << scan->lll.type) |
   24246:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
   2424a:	f890 0020 	ldrb.w	r0, [r0, #32]
   2424e:	f003 0301 	and.w	r3, r3, #1
   24252:	f3c0 1040 	ubfx	r0, r0, #5, #1
   24256:	fa03 f000 	lsl.w	r0, r3, r0
}
   2425a:	bd08      	pop	{r3, pc}

0002425c <ull_scan_filter_pol_get>:
{
   2425c:	b508      	push	{r3, lr}
	scan = ull_scan_is_enabled_get(handle);
   2425e:	f7ee feed 	bl	1303c <ull_scan_is_enabled_get>
	if (!scan) {
   24262:	b118      	cbz	r0, 2426c <ull_scan_filter_pol_get+0x10>
	return scan->lll.filter_policy;
   24264:	f890 0020 	ldrb.w	r0, [r0, #32]
   24268:	f3c0 00c1 	ubfx	r0, r0, #3, #2
}
   2426c:	bd08      	pop	{r3, pc}

0002426e <sys_put_le64>:
	dst[1] = val >> 8;
   2426e:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   24272:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   24274:	7053      	strb	r3, [r2, #1]
	sys_put_le16(val >> 16, &dst[2]);
   24276:	0c00      	lsrs	r0, r0, #16
	dst[1] = val >> 8;
   24278:	f3c1 2307 	ubfx	r3, r1, #8, #8
	dst[0] = val;
   2427c:	7111      	strb	r1, [r2, #4]
	sys_put_le16(val >> 16, &dst[2]);
   2427e:	0c09      	lsrs	r1, r1, #16
	dst[0] = val;
   24280:	7090      	strb	r0, [r2, #2]
   24282:	7191      	strb	r1, [r2, #6]
	dst[1] = val >> 8;
   24284:	0a00      	lsrs	r0, r0, #8
   24286:	0a09      	lsrs	r1, r1, #8
   24288:	70d0      	strb	r0, [r2, #3]
   2428a:	7153      	strb	r3, [r2, #5]
   2428c:	71d1      	strb	r1, [r2, #7]
}
   2428e:	4770      	bx	lr

00024290 <ctrl_tx_enqueue>:
		if (!conn->tx_ctrl) {
   24290:	e9d0 3247 	ldrd	r3, r2, [r0, #284]	; 0x11c
{
   24294:	b510      	push	{r4, lr}
	if (
   24296:	b18b      	cbz	r3, 242bc <ctrl_tx_enqueue+0x2c>
		if (conn->tx_head == conn->tx_data) {
   24298:	f8d0 4128 	ldr.w	r4, [r0, #296]	; 0x128
   2429c:	42a3      	cmp	r3, r4
			conn->tx_data = conn->tx_data->next;
   2429e:	bf04      	itt	eq
   242a0:	681c      	ldreq	r4, [r3, #0]
   242a2:	f8c0 4128 	streq.w	r4, [r0, #296]	; 0x128
		if (!conn->tx_ctrl) {
   242a6:	b992      	cbnz	r2, 242ce <ctrl_tx_enqueue+0x3e>
			tx->next = conn->tx_head->next;
   242a8:	681a      	ldr	r2, [r3, #0]
   242aa:	600a      	str	r2, [r1, #0]
			conn->tx_head->next = tx;
   242ac:	6019      	str	r1, [r3, #0]
				conn->tx_ctrl = tx;
   242ae:	f8c0 1120 	str.w	r1, [r0, #288]	; 0x120
	if (!tx->next) {
   242b2:	680b      	ldr	r3, [r1, #0]
	conn->tx_ctrl_last = tx;
   242b4:	f8c0 1124 	str.w	r1, [r0, #292]	; 0x124
	if (!tx->next) {
   242b8:	b133      	cbz	r3, 242c8 <ctrl_tx_enqueue+0x38>
}
   242ba:	bd10      	pop	{r4, pc}
		if (!conn->tx_ctrl) {
   242bc:	b93a      	cbnz	r2, 242ce <ctrl_tx_enqueue+0x3e>
			tx->next = conn->tx_head;
   242be:	600a      	str	r2, [r1, #0]
				conn->tx_ctrl = tx;
   242c0:	e9c0 1147 	strd	r1, r1, [r0, #284]	; 0x11c
				conn->tx_ctrl_last = tx;
   242c4:	f8c0 1124 	str.w	r1, [r0, #292]	; 0x124
		conn->tx_data_last = tx;
   242c8:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
}
   242cc:	e7f5      	b.n	242ba <ctrl_tx_enqueue+0x2a>
	tx->next = conn->tx_ctrl_last->next;
   242ce:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
   242d2:	681a      	ldr	r2, [r3, #0]
   242d4:	600a      	str	r2, [r1, #0]
	conn->tx_ctrl_last->next = tx;
   242d6:	6019      	str	r1, [r3, #0]
   242d8:	e7eb      	b.n	242b2 <ctrl_tx_enqueue+0x22>

000242da <reject_ext_ind_send.constprop.0>:
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
   242da:	b573      	push	{r0, r1, r4, r5, r6, lr}
   242dc:	4616      	mov	r6, r2
	tx = ctrl_tx_rsp_mem_acquire(conn, rx, &err);
   242de:	aa01      	add	r2, sp, #4
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
   242e0:	460c      	mov	r4, r1
   242e2:	4605      	mov	r5, r0
	tx = ctrl_tx_rsp_mem_acquire(conn, rx, &err);
   242e4:	f7ee fecc 	bl	13080 <ctrl_tx_rsp_mem_acquire>
	if (!tx) {
   242e8:	4601      	mov	r1, r0
   242ea:	b910      	cbnz	r0, 242f2 <reject_ext_ind_send.constprop.0+0x18>
		return err;
   242ec:	9801      	ldr	r0, [sp, #4]
}
   242ee:	b002      	add	sp, #8
   242f0:	bd70      	pop	{r4, r5, r6, pc}
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   242f2:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
   242f4:	7246      	strb	r6, [r0, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   242f6:	f043 0303 	orr.w	r3, r3, #3
   242fa:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   242fc:	2303      	movs	r3, #3
   242fe:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   24300:	2311      	movs	r3, #17
   24302:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
   24304:	230f      	movs	r3, #15
   24306:	7203      	strb	r3, [r0, #8]
	ctrl_tx_enqueue(conn, tx);
   24308:	4628      	mov	r0, r5
   2430a:	f7ff ffc1 	bl	24290 <ctrl_tx_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   2430e:	2301      	movs	r3, #1
   24310:	7123      	strb	r3, [r4, #4]
	return 0;
   24312:	2000      	movs	r0, #0
   24314:	e7eb      	b.n	242ee <reject_ext_ind_send.constprop.0+0x14>

00024316 <ll_connected_get>:
{
   24316:	b508      	push	{r3, lr}
	if (handle >= CONFIG_BT_MAX_CONN) {
   24318:	b918      	cbnz	r0, 24322 <ll_connected_get+0xc>
	conn = ll_conn_get(handle);
   2431a:	f7ef f8ab 	bl	13474 <ll_conn_get>
	if (conn->lll.handle != handle) {
   2431e:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   24320:	b103      	cbz	r3, 24324 <ll_connected_get+0xe>
		return NULL;
   24322:	2000      	movs	r0, #0
}
   24324:	bd08      	pop	{r3, pc}

00024326 <ll_conn_update>:
{
   24326:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2432a:	4605      	mov	r5, r0
   2432c:	f8bd a020 	ldrh.w	sl, [sp, #32]
   24330:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
   24334:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
   24338:	460c      	mov	r4, r1
   2433a:	4617      	mov	r7, r2
   2433c:	461e      	mov	r6, r3
	conn = ll_connected_get(handle);
   2433e:	f7ff ffea 	bl	24316 <ll_connected_get>
	if (!conn) {
   24342:	2800      	cmp	r0, #0
   24344:	d06e      	beq.n	24424 <ll_conn_update+0xfe>
	if (!cmd) {
   24346:	bb84      	cbnz	r4, 243aa <ll_conn_update+0x84>
		if (!conn->llcp_conn_param.disabled &&
   24348:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
   2434c:	069a      	lsls	r2, r3, #26
   2434e:	d408      	bmi.n	24362 <ll_conn_update+0x3c>
		    (!conn->common.fex_valid ||
   24350:	f890 107c 	ldrb.w	r1, [r0, #124]	; 0x7c
		if (!conn->llcp_conn_param.disabled &&
   24354:	f011 0101 	ands.w	r1, r1, #1
   24358:	d045      	beq.n	243e6 <ll_conn_update+0xc0>
		     (conn->llcp_feature.features_conn &
   2435a:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
		    (!conn->common.fex_valid ||
   2435e:	079b      	lsls	r3, r3, #30
   24360:	d424      	bmi.n	243ac <ll_conn_update+0x86>
		} else if (conn->lll.role) {
   24362:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   24366:	2b00      	cmp	r3, #0
   24368:	db5e      	blt.n	24428 <ll_conn_update+0x102>
		if (conn->llcp_cu.req != conn->llcp_cu.ack) {
   2436a:	f890 309c 	ldrb.w	r3, [r0, #156]	; 0x9c
   2436e:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
   24372:	429a      	cmp	r2, r3
   24374:	d15a      	bne.n	2442c <ll_conn_update+0x106>
		conn->llcp_cu.win_size = 1U;
   24376:	2301      	movs	r3, #1
   24378:	f880 30ac 	strb.w	r3, [r0, #172]	; 0xac
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   2437c:	f890 309e 	ldrb.w	r3, [r0, #158]	; 0x9e
		conn->llcp_cu.interval = interval_max;
   24380:	f8a0 a0a0 	strh.w	sl, [r0, #160]	; 0xa0
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   24384:	f023 030f 	bic.w	r3, r3, #15
		conn->llcp_cu.win_offset_us = 0U;
   24388:	2400      	movs	r4, #0
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   2438a:	f043 0309 	orr.w	r3, r3, #9
		conn->llcp_cu.req++;
   2438e:	3201      	adds	r2, #1
		conn->llcp_cu.win_offset_us = 0U;
   24390:	f8c0 40a8 	str.w	r4, [r0, #168]	; 0xa8
		conn->llcp_cu.latency = latency;
   24394:	f8a0 90a2 	strh.w	r9, [r0, #162]	; 0xa2
		conn->llcp_cu.timeout = timeout;
   24398:	f8a0 80a4 	strh.w	r8, [r0, #164]	; 0xa4
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   2439c:	f880 309e 	strb.w	r3, [r0, #158]	; 0x9e
		conn->llcp_cu.req++;
   243a0:	f880 209c 	strb.w	r2, [r0, #156]	; 0x9c
}
   243a4:	4620      	mov	r0, r4
   243a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   243aa:	4621      	mov	r1, r4
		cmd--;
   243ac:	1e4c      	subs	r4, r1, #1
		if (cmd) {
   243ae:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
			if ((conn->llcp_conn_param.req ==
   243b2:	f890 30f4 	ldrb.w	r3, [r0, #244]	; 0xf4
			     conn->llcp_conn_param.ack) ||
   243b6:	f890 20f5 	ldrb.w	r2, [r0, #245]	; 0xf5
		if (cmd) {
   243ba:	d016      	beq.n	243ea <ll_conn_update+0xc4>
			if ((conn->llcp_conn_param.req ==
   243bc:	4293      	cmp	r3, r2
   243be:	d035      	beq.n	2442c <ll_conn_update+0x106>
			    (conn->llcp_conn_param.state !=
   243c0:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
			     conn->llcp_conn_param.ack) ||
   243c4:	f003 020f 	and.w	r2, r3, #15
   243c8:	2a03      	cmp	r2, #3
   243ca:	d12f      	bne.n	2442c <ll_conn_update+0x106>
			conn->llcp_conn_param.state = cmd;
   243cc:	f004 040f 	and.w	r4, r4, #15
   243d0:	f044 0410 	orr.w	r4, r4, #16
   243d4:	f023 031f 	bic.w	r3, r3, #31
   243d8:	431c      	orrs	r4, r3
   243da:	f880 40f6 	strb.w	r4, [r0, #246]	; 0xf6
			conn->llcp_conn_param.status = status;
   243de:	f880 70f7 	strb.w	r7, [r0, #247]	; 0xf7
	return 0;
   243e2:	2400      	movs	r4, #0
   243e4:	e7de      	b.n	243a4 <ll_conn_update+0x7e>
			cmd++;
   243e6:	2101      	movs	r1, #1
   243e8:	e7e0      	b.n	243ac <ll_conn_update+0x86>
			if (conn->llcp_conn_param.req !=
   243ea:	4293      	cmp	r3, r2
   243ec:	d11e      	bne.n	2442c <ll_conn_update+0x106>
			conn->llcp_conn_param.state = cmd;
   243ee:	f8b0 20f6 	ldrh.w	r2, [r0, #246]	; 0xf6
			conn->llcp_conn_param.interval_min = interval_min;
   243f2:	f8a0 60f8 	strh.w	r6, [r0, #248]	; 0xf8
			conn->llcp_conn_param.req++;
   243f6:	3301      	adds	r3, #1
   243f8:	f880 30f4 	strb.w	r3, [r0, #244]	; 0xf4
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   243fc:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
			conn->llcp_conn_param.interval_max = interval_max;
   24400:	f8a0 a0fa 	strh.w	sl, [r0, #250]	; 0xfa
			conn->llcp_conn_param.state = cmd;
   24404:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
   24408:	f042 0210 	orr.w	r2, r2, #16
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2440c:	2b00      	cmp	r3, #0
			conn->llcp_conn_param.latency = latency;
   2440e:	f8a0 90fc 	strh.w	r9, [r0, #252]	; 0xfc
			conn->llcp_conn_param.timeout = timeout;
   24412:	f8a0 80fe 	strh.w	r8, [r0, #254]	; 0xfe
			conn->llcp_conn_param.state = cmd;
   24416:	f8a0 20f6 	strh.w	r2, [r0, #246]	; 0xf6
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2441a:	dac3      	bge.n	243a4 <ll_conn_update+0x7e>
				ull_periph_latency_cancel(conn, handle);
   2441c:	4629      	mov	r1, r5
   2441e:	f7f0 f8cf 	bl	145c0 <ull_periph_latency_cancel>
   24422:	e7bf      	b.n	243a4 <ll_conn_update+0x7e>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   24424:	2402      	movs	r4, #2
   24426:	e7bd      	b.n	243a4 <ll_conn_update+0x7e>
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   24428:	241a      	movs	r4, #26
   2442a:	e7bb      	b.n	243a4 <ll_conn_update+0x7e>
			return BT_HCI_ERR_CMD_DISALLOWED;
   2442c:	240c      	movs	r4, #12
   2442e:	e7b9      	b.n	243a4 <ll_conn_update+0x7e>

00024430 <ll_chm_get>:
{
   24430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24432:	460d      	mov	r5, r1
	conn = ll_connected_get(handle);
   24434:	f7ff ff6f 	bl	24316 <ll_connected_get>
	if (!conn) {
   24438:	4604      	mov	r4, r0
   2443a:	b170      	cbz	r0, 2445a <ll_chm_get+0x2a>
		conn->chm_updated = 0U;
   2443c:	2700      	movs	r7, #0
		memcpy(chm, conn->lll.data_chan_map,
   2443e:	f100 0634 	add.w	r6, r0, #52	; 0x34
		conn->chm_updated = 0U;
   24442:	f884 7130 	strb.w	r7, [r4, #304]	; 0x130
		memcpy(chm, conn->lll.data_chan_map,
   24446:	2205      	movs	r2, #5
   24448:	4631      	mov	r1, r6
   2444a:	4628      	mov	r0, r5
   2444c:	f7f9 fdf1 	bl	1e032 <memcpy>
	} while (conn->chm_updated);
   24450:	f894 0130 	ldrb.w	r0, [r4, #304]	; 0x130
   24454:	2800      	cmp	r0, #0
   24456:	d1f4      	bne.n	24442 <ll_chm_get+0x12>
}
   24458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   2445a:	2002      	movs	r0, #2
   2445c:	e7fc      	b.n	24458 <ll_chm_get+0x28>

0002445e <ll_feature_req_send>:
{
   2445e:	b510      	push	{r4, lr}
   24460:	4604      	mov	r4, r0
	conn = ll_connected_get(handle);
   24462:	f7ff ff58 	bl	24316 <ll_connected_get>
	if (!conn) {
   24466:	b188      	cbz	r0, 2448c <ll_feature_req_send+0x2e>
	if (conn->llcp_feature.req != conn->llcp_feature.ack) {
   24468:	f890 10b0 	ldrb.w	r1, [r0, #176]	; 0xb0
   2446c:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
   24470:	428a      	cmp	r2, r1
   24472:	d10d      	bne.n	24490 <ll_feature_req_send+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   24474:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
	conn->llcp_feature.req++;
   24478:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2447a:	2b00      	cmp	r3, #0
	conn->llcp_feature.req++;
   2447c:	f880 20b0 	strb.w	r2, [r0, #176]	; 0xb0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   24480:	da02      	bge.n	24488 <ll_feature_req_send+0x2a>
		ull_periph_latency_cancel(conn, handle);
   24482:	4621      	mov	r1, r4
   24484:	f7f0 f89c 	bl	145c0 <ull_periph_latency_cancel>
	return 0;
   24488:	2000      	movs	r0, #0
   2448a:	e000      	b.n	2448e <ll_feature_req_send+0x30>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   2448c:	2002      	movs	r0, #2
}
   2448e:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   24490:	200c      	movs	r0, #12
   24492:	e7fc      	b.n	2448e <ll_feature_req_send+0x30>

00024494 <ll_version_ind_send>:
{
   24494:	b510      	push	{r4, lr}
   24496:	4604      	mov	r4, r0
	conn = ll_connected_get(handle);
   24498:	f7ff ff3d 	bl	24316 <ll_connected_get>
	if (!conn) {
   2449c:	b188      	cbz	r0, 244c2 <ll_version_ind_send+0x2e>
	if (conn->llcp_version.req != conn->llcp_version.ack) {
   2449e:	f890 10c8 	ldrb.w	r1, [r0, #200]	; 0xc8
   244a2:	f890 20c9 	ldrb.w	r2, [r0, #201]	; 0xc9
   244a6:	428a      	cmp	r2, r1
   244a8:	d10d      	bne.n	244c6 <ll_version_ind_send+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   244aa:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
	conn->llcp_version.req++;
   244ae:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   244b0:	2b00      	cmp	r3, #0
	conn->llcp_version.req++;
   244b2:	f880 20c8 	strb.w	r2, [r0, #200]	; 0xc8
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   244b6:	da02      	bge.n	244be <ll_version_ind_send+0x2a>
		ull_periph_latency_cancel(conn, handle);
   244b8:	4621      	mov	r1, r4
   244ba:	f7f0 f881 	bl	145c0 <ull_periph_latency_cancel>
	return 0;
   244be:	2000      	movs	r0, #0
   244c0:	e000      	b.n	244c4 <ll_version_ind_send+0x30>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   244c2:	2002      	movs	r0, #2
}
   244c4:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   244c6:	200c      	movs	r0, #12
   244c8:	e7fc      	b.n	244c4 <ll_version_ind_send+0x30>

000244ca <ull_conn_init>:
	err = init_reset();
   244ca:	f7ee bdf7 	b.w	130bc <init_reset>

000244ce <tx_demux>:
{
   244ce:	b510      	push	{r4, lr}
   244d0:	4604      	mov	r4, r0
	ull_conn_tx_demux(1);
   244d2:	2001      	movs	r0, #1
   244d4:	f7ef fcea 	bl	13eac <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(param, 1);
   244d8:	4620      	mov	r0, r4
   244da:	2101      	movs	r1, #1
}
   244dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ull_conn_tx_lll_enqueue(param, 1);
   244e0:	f7ef be8e 	b.w	14200 <ull_conn_tx_lll_enqueue>

000244e4 <ull_conn_lll_max_tx_octets_get>:
}
   244e4:	201b      	movs	r0, #27
   244e6:	4770      	bx	lr

000244e8 <lll_chan_sel_1>:
/* Refer to Bluetooth Specification v5.2 Vol 6, Part B, Section 4.5.8.2
 * Channel Selection algorithm #1
 */
uint8_t lll_chan_sel_1(uint8_t *chan_use, uint8_t hop, uint16_t latency, uint8_t *chan_map,
		    uint8_t chan_count)
{
   244e8:	b530      	push	{r4, r5, lr}
	uint8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   244ea:	fb02 1101 	mla	r1, r2, r1, r1
   244ee:	7802      	ldrb	r2, [r0, #0]
{
   244f0:	f89d 500c 	ldrb.w	r5, [sp, #12]
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   244f4:	4411      	add	r1, r2
   244f6:	2225      	movs	r2, #37	; 0x25
{
   244f8:	4604      	mov	r4, r0
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   244fa:	fbb1 f0f2 	udiv	r0, r1, r2
   244fe:	fb02 1110 	mls	r1, r2, r0, r1
   24502:	b2c8      	uxtb	r0, r1
	*chan_use = chan_next;

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   24504:	08c2      	lsrs	r2, r0, #3
	*chan_use = chan_next;
   24506:	7020      	strb	r0, [r4, #0]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   24508:	5c9c      	ldrb	r4, [r3, r2]
   2450a:	f001 0107 	and.w	r1, r1, #7
   2450e:	fa44 f101 	asr.w	r1, r4, r1
   24512:	f011 0101 	ands.w	r1, r1, #1
   24516:	d109      	bne.n	2452c <lll_chan_sel_1+0x44>
		uint8_t chan_index;

		chan_index = chan_next % chan_count;
   24518:	fbb0 f2f5 	udiv	r2, r0, r5
   2451c:	fb05 0212 	mls	r2, r5, r2, r0
   24520:	1e5c      	subs	r4, r3, #1
   24522:	b2d2      	uxtb	r2, r2
	uint8_t chan_next;
	uint8_t byte_count;

	chan_next = 0U;
	byte_count = 5U;
	while (byte_count--) {
   24524:	3304      	adds	r3, #4
	chan_next = 0U;
   24526:	4608      	mov	r0, r1
	while (byte_count--) {
   24528:	42a3      	cmp	r3, r4
   2452a:	d100      	bne.n	2452e <lll_chan_sel_1+0x46>
}
   2452c:	bd30      	pop	{r4, r5, pc}
		uint8_t bite;
		uint8_t bit_count;

		bite = *chan_map;
   2452e:	f100 0108 	add.w	r1, r0, #8
   24532:	f814 5f01 	ldrb.w	r5, [r4, #1]!
		bit_count = 8U;
		while (bit_count--) {
   24536:	b2c9      	uxtb	r1, r1
   24538:	4288      	cmp	r0, r1
   2453a:	d0f5      	beq.n	24528 <lll_chan_sel_1+0x40>
			if (bite & 0x01) {
   2453c:	f015 0f01 	tst.w	r5, #1
   24540:	d003      	beq.n	2454a <lll_chan_sel_1+0x62>
				if (chan_index == 0U) {
   24542:	2a00      	cmp	r2, #0
   24544:	d0f2      	beq.n	2452c <lll_chan_sel_1+0x44>
					break;
				}
				chan_index--;
   24546:	3a01      	subs	r2, #1
   24548:	b2d2      	uxtb	r2, r2
			}
			chan_next++;
   2454a:	3001      	adds	r0, #1
   2454c:	b2c0      	uxtb	r0, r0
			bite >>= 1;
   2454e:	086d      	lsrs	r5, r5, #1
   24550:	e7f2      	b.n	24538 <lll_chan_sel_1+0x50>

00024552 <filter_find.part.0>:
static uint32_t filter_find(const struct lll_filter *const filter,
   24552:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24556:	4605      	mov	r5, r0
   24558:	460f      	mov	r7, r1
   2455a:	4690      	mov	r8, r2
   2455c:	f100 062c 	add.w	r6, r0, #44	; 0x2c
	index = FAL_SIZE;
   24560:	2408      	movs	r4, #8
	while (index--) {
   24562:	3c01      	subs	r4, #1
   24564:	d202      	bcs.n	2456c <filter_find.part.0+0x1a>
	return FILTER_IDX_NONE;
   24566:	f04f 09ff 	mov.w	r9, #255	; 0xff
   2456a:	e012      	b.n	24592 <filter_find.part.0+0x40>
		if ((filter->enable_bitmask & BIT(index)) &&
   2456c:	782b      	ldrb	r3, [r5, #0]
   2456e:	40e3      	lsrs	r3, r4
   24570:	07da      	lsls	r2, r3, #31
   24572:	d401      	bmi.n	24578 <filter_find.part.0+0x26>
   24574:	3e06      	subs	r6, #6
   24576:	e7f4      	b.n	24562 <filter_find.part.0+0x10>
		    (((filter->addr_type_bitmask >> index) & 0x01) ==
   24578:	786b      	ldrb	r3, [r5, #1]
   2457a:	4123      	asrs	r3, r4
   2457c:	407b      	eors	r3, r7
		if ((filter->enable_bitmask & BIT(index)) &&
   2457e:	07db      	lsls	r3, r3, #31
   24580:	d4f8      	bmi.n	24574 <filter_find.part.0+0x22>
		    !memcmp(filter->bdaddr[index], bdaddr, BDADDR_SIZE)) {
   24582:	2206      	movs	r2, #6
   24584:	4641      	mov	r1, r8
   24586:	4630      	mov	r0, r6
   24588:	46a1      	mov	r9, r4
   2458a:	f7f9 fd41 	bl	1e010 <memcmp>
		     (addr_type & 0x01)) &&
   2458e:	2800      	cmp	r0, #0
   24590:	d1f0      	bne.n	24574 <filter_find.part.0+0x22>
}
   24592:	4648      	mov	r0, r9
   24594:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00024598 <ll_fal_size_get>:
}
   24598:	2008      	movs	r0, #8
   2459a:	4770      	bx	lr

0002459c <swi_lll_nrf5_isr>:
	mayfly_run(TICKER_USER_ID_LLL);
   2459c:	2000      	movs	r0, #0
   2459e:	f7eb bc1d 	b.w	fddc <mayfly_run>

000245a2 <isr_race>:
	radio_status_reset();
   245a2:	f7f2 b93b 	b.w	1681c <radio_status_reset>

000245a6 <radio_nrf5_isr>:
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   245a6:	4668      	mov	r0, sp
   245a8:	f020 0107 	bic.w	r1, r0, #7
   245ac:	468d      	mov	sp, r1
   245ae:	b501      	push	{r0, lr}
	isr_radio();
   245b0:	f7f2 f84a 	bl	16648 <isr_radio>
	ISR_DIRECT_PM();
   245b4:	f7e1 f88e 	bl	56d4 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   245b8:	f7e1 f97e 	bl	58b8 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   245bc:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   245c0:	4685      	mov	sp, r0
   245c2:	4770      	bx	lr

000245c4 <lll_rand_isr_get>:
   245c4:	f7f0 bafc 	b.w	14bc0 <lll_csrand_isr_get>

000245c8 <lll_reset>:
}
   245c8:	2000      	movs	r0, #0
   245ca:	4770      	bx	lr

000245cc <lll_prepare_done>:
}
   245cc:	2000      	movs	r0, #0
   245ce:	4770      	bx	lr

000245d0 <lll_is_abort_cb>:
}
   245d0:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   245d4:	4770      	bx	lr

000245d6 <lll_event_offset_get>:
{
   245d6:	4603      	mov	r3, r0
		return MAX(ull->ticks_active_to_start,
   245d8:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
	} else if (ull->ticks_prepare_to_start & XON_BITMASK) {
   245dc:	2a00      	cmp	r2, #0
   245de:	da04      	bge.n	245ea <lll_event_offset_get+0x14>
		return MAX(ull->ticks_active_to_start,
   245e0:	68db      	ldr	r3, [r3, #12]
   245e2:	4298      	cmp	r0, r3
   245e4:	bf38      	it	cc
   245e6:	4618      	movcc	r0, r3
   245e8:	4770      	bx	lr
		return MAX(ull->ticks_active_to_start,
   245ea:	4290      	cmp	r0, r2
   245ec:	bf38      	it	cc
   245ee:	4610      	movcc	r0, r2
}
   245f0:	4770      	bx	lr

000245f2 <lll_preempt_calc>:
{
   245f2:	b510      	push	{r4, lr}
   245f4:	4614      	mov	r4, r2
	ticks_now = ticker_ticks_now_get();
   245f6:	f7ff fc13 	bl	23e20 <ticker_ticks_now_get>
	diff = ticks_now - ticks_at_event;
   245fa:	1b00      	subs	r0, r0, r4
	if (diff & BIT(HAL_TICKER_CNTR_MSBIT)) {
   245fc:	0203      	lsls	r3, r0, #8
   245fe:	d405      	bmi.n	2460c <lll_preempt_calc+0x1a>
	diff += HAL_TICKER_CNTR_CMP_OFFSET_MIN;
   24600:	3003      	adds	r0, #3
	if (diff > HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US)) {
   24602:	2809      	cmp	r0, #9
   24604:	bf94      	ite	ls
   24606:	2000      	movls	r0, #0
   24608:	2001      	movhi	r0, #1
}
   2460a:	bd10      	pop	{r4, pc}
		return 0;
   2460c:	2000      	movs	r0, #0
   2460e:	e7fc      	b.n	2460a <lll_preempt_calc+0x18>

00024610 <lll_radio_rx_ready_delay_get>:
	return radio_rx_ready_delay_get(phy, flags);
   24610:	f000 ba2f 	b.w	24a72 <radio_rx_ready_delay_get>

00024614 <lll_isr_tx_status_reset>:
{
   24614:	b508      	push	{r3, lr}
	radio_status_reset();
   24616:	f7f2 f901 	bl	1681c <radio_status_reset>
}
   2461a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_status_reset();
   2461e:	f7f2 ba4b 	b.w	16ab8 <radio_tmr_status_reset>

00024622 <lll_isr_rx_status_reset>:
{
   24622:	b508      	push	{r3, lr}
	radio_status_reset();
   24624:	f7f2 f8fa 	bl	1681c <radio_status_reset>
	radio_tmr_status_reset();
   24628:	f7f2 fa46 	bl	16ab8 <radio_tmr_status_reset>
}
   2462c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   24630:	f7f2 b9f2 	b.w	16a18 <radio_rssi_status_reset>

00024634 <lll_isr_status_reset>:
{
   24634:	b508      	push	{r3, lr}
	radio_status_reset();
   24636:	f7f2 f8f1 	bl	1681c <radio_status_reset>
	radio_tmr_status_reset();
   2463a:	f7f2 fa3d 	bl	16ab8 <radio_tmr_status_reset>
	radio_filter_status_reset();
   2463e:	f7f2 fa23 	bl	16a88 <radio_filter_status_reset>
	radio_ar_status_reset();
   24642:	f7f2 fb3d 	bl	16cc0 <radio_ar_status_reset>
}
   24646:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   2464a:	f7f2 b9e5 	b.w	16a18 <radio_rssi_status_reset>

0002464e <lll_isr_abort>:
{
   2464e:	b510      	push	{r4, lr}
   24650:	4604      	mov	r4, r0
	lll_isr_status_reset();
   24652:	f7ff ffef 	bl	24634 <lll_isr_status_reset>
	lll_isr_cleanup(param);
   24656:	4620      	mov	r0, r4
}
   24658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   2465c:	f7f0 bb8e 	b.w	14d7c <lll_isr_cleanup>

00024660 <clock_ready>:
   24660:	f101 0010 	add.w	r0, r1, #16
   24664:	f7f6 be50 	b.w	1b308 <z_impl_k_sem_give>

00024668 <lll_clock_ppm_local_get>:
}
   24668:	2032      	movs	r0, #50	; 0x32
   2466a:	4770      	bx	lr

0002466c <isr_abort>:
{
   2466c:	b510      	push	{r4, lr}
   2466e:	4604      	mov	r4, r0
	lll_isr_status_reset();
   24670:	f7ff ffe0 	bl	24634 <lll_isr_status_reset>
	radio_filter_disable();
   24674:	f7f2 f9fe 	bl	16a74 <radio_filter_disable>
	lll_isr_cleanup(param);
   24678:	4620      	mov	r0, r4
}
   2467a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   2467e:	f7f0 bb7d 	b.w	14d7c <lll_isr_cleanup>

00024682 <lll_adv_reset>:
   24682:	f7f0 bdb1 	b.w	151e8 <lll_adv_init>

00024686 <lll_adv_data_reset>:
{
   24686:	4603      	mov	r3, r0
	pdu->first = 0U;
   24688:	2000      	movs	r0, #0
   2468a:	7018      	strb	r0, [r3, #0]
	pdu->last = 0U;
   2468c:	7058      	strb	r0, [r3, #1]
	pdu->pdu[1] = NULL;
   2468e:	6098      	str	r0, [r3, #8]
}
   24690:	4770      	bx	lr

00024692 <lll_adv_pdu_alloc>:
{
   24692:	b510      	push	{r4, lr}
	first = pdu->first;
   24694:	7804      	ldrb	r4, [r0, #0]
	last = pdu->last;
   24696:	7843      	ldrb	r3, [r0, #1]
	if (first == last) {
   24698:	429c      	cmp	r4, r3
	first = pdu->first;
   2469a:	b2e2      	uxtb	r2, r4
	if (first == last) {
   2469c:	d10d      	bne.n	246ba <lll_adv_pdu_alloc+0x28>
		last++;
   2469e:	3301      	adds	r3, #1
   246a0:	b2db      	uxtb	r3, r3
		if (last == DOUBLE_BUFFER_SIZE) {
   246a2:	2b02      	cmp	r3, #2
   246a4:	d100      	bne.n	246a8 <lll_adv_pdu_alloc+0x16>
			last = 0U;
   246a6:	2300      	movs	r3, #0
	*idx = last;
   246a8:	eb00 0483 	add.w	r4, r0, r3, lsl #2
   246ac:	700b      	strb	r3, [r1, #0]
	p = (void *)pdu->pdu[last];
   246ae:	6860      	ldr	r0, [r4, #4]
	if (p) {
   246b0:	b910      	cbnz	r0, 246b8 <lll_adv_pdu_alloc+0x26>
	p = lll_adv_pdu_alloc_pdu_adv();
   246b2:	f7f0 fdc1 	bl	15238 <lll_adv_pdu_alloc_pdu_adv>
	pdu->pdu[last] = (void *)p;
   246b6:	6060      	str	r0, [r4, #4]
}
   246b8:	bd10      	pop	{r4, pc}
		pdu->last = first;
   246ba:	7042      	strb	r2, [r0, #1]
		first_latest = pdu->first;
   246bc:	7804      	ldrb	r4, [r0, #0]
		if (first_latest != first) {
   246be:	42a2      	cmp	r2, r4
   246c0:	d0f2      	beq.n	246a8 <lll_adv_pdu_alloc+0x16>
			pdu->last = last;
   246c2:	7043      	strb	r3, [r0, #1]
			last++;
   246c4:	e7eb      	b.n	2469e <lll_adv_pdu_alloc+0xc>

000246c6 <isr_done>:
{
   246c6:	b510      	push	{r4, lr}
   246c8:	4604      	mov	r4, r0
	lll_isr_status_reset();
   246ca:	f7ff ffb3 	bl	24634 <lll_isr_status_reset>
	if (!IS_ENABLED(CONFIG_BT_CTLR_LOW_LAT) && lll->is_hdcd &&
   246ce:	7a23      	ldrb	r3, [r4, #8]
   246d0:	f003 0271 	and.w	r2, r3, #113	; 0x71
   246d4:	2a01      	cmp	r2, #1
		lll->chan_map_curr = lll->chan_map;
   246d6:	bf02      	ittt	eq
   246d8:	f3c3 0242 	ubfxeq	r2, r3, #1, #3
   246dc:	f362 1306 	bfieq	r3, r2, #4, #3
   246e0:	7223      	strbeq	r3, [r4, #8]
	if (lll->chan_map_curr &&
   246e2:	7a23      	ldrb	r3, [r4, #8]
   246e4:	f013 0f70 	tst.w	r3, #112	; 0x70
   246e8:	d00e      	beq.n	24708 <isr_done+0x42>
	    (!lll->conn || !lll->conn->periph.cancelled) &&
   246ea:	6863      	ldr	r3, [r4, #4]
   246ec:	b11b      	cbz	r3, 246f6 <isr_done+0x30>
   246ee:	f893 3020 	ldrb.w	r3, [r3, #32]
   246f2:	079b      	lsls	r3, r3, #30
   246f4:	d408      	bmi.n	24708 <isr_done+0x42>
		pdu = chan_prepare(lll);
   246f6:	4620      	mov	r0, r4
   246f8:	f7f0 fe48 	bl	1538c <chan_prepare.isra.0>
		radio_tx_enable();
   246fc:	f7f2 f876 	bl	167ec <radio_tx_enable>
}
   24700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_tmr_end_capture();
   24704:	f7f2 bac2 	b.w	16c8c <radio_tmr_end_capture>
	radio_filter_disable();
   24708:	f7f2 f9b4 	bl	16a74 <radio_filter_disable>
	lll_isr_cleanup(param);
   2470c:	4620      	mov	r0, r4
}
   2470e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   24712:	f7f0 bb33 	b.w	14d7c <lll_isr_cleanup>

00024716 <resume_prepare_cb>:
	ull = HDR_LLL2ULL(p->param);
   24716:	68c3      	ldr	r3, [r0, #12]
{
   24718:	b570      	push	{r4, r5, r6, lr}
   2471a:	4604      	mov	r4, r0
	ull = HDR_LLL2ULL(p->param);
   2471c:	681e      	ldr	r6, [r3, #0]
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   2471e:	f7ff fb7f 	bl	23e20 <ticker_ticks_now_get>
   24722:	4605      	mov	r5, r0
   24724:	4630      	mov	r0, r6
   24726:	f7ff ff56 	bl	245d6 <lll_event_offset_get>
	p->remainder = 0;
   2472a:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   2472c:	1a2d      	subs	r5, r5, r0
   2472e:	6025      	str	r5, [r4, #0]
	p->remainder = 0;
   24730:	6063      	str	r3, [r4, #4]
	p->lazy = 0;
   24732:	8123      	strh	r3, [r4, #8]
	return prepare_cb(p);
   24734:	4620      	mov	r0, r4
}
   24736:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return prepare_cb(p);
   2473a:	f7f0 bea5 	b.w	15488 <prepare_cb>

0002473e <lll_adv_scan_req_check>:
{
   2473e:	b510      	push	{r4, lr}
	return (((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) == 0U) ||
   24740:	7a40      	ldrb	r0, [r0, #9]
{
   24742:	f89d 4008 	ldrb.w	r4, [sp, #8]
		 devmatch_ok) &&
   24746:	07c0      	lsls	r0, r0, #31
   24748:	d500      	bpl.n	2474c <lll_adv_scan_req_check+0xe>
	return (((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) == 0U) ||
   2474a:	b174      	cbz	r4, 2476a <lll_adv_scan_req_check+0x2c>
}

static bool isr_rx_sr_adva_check(uint8_t tx_addr, uint8_t *addr,
				 struct pdu_adv *sr)
{
	return (tx_addr == sr->rx_addr) &&
   2474c:	7808      	ldrb	r0, [r1, #0]
   2474e:	ebb2 1fd0 	cmp.w	r2, r0, lsr #7
   24752:	d108      	bne.n	24766 <lll_adv_scan_req_check+0x28>
		!memcmp(addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   24754:	2206      	movs	r2, #6
   24756:	3108      	adds	r1, #8
   24758:	4618      	mov	r0, r3
   2475a:	f7f9 fc59 	bl	1e010 <memcmp>
	return (tx_addr == sr->rx_addr) &&
   2475e:	fab0 f080 	clz	r0, r0
   24762:	0940      	lsrs	r0, r0, #5
}
   24764:	bd10      	pop	{r4, pc}
	return (tx_addr == sr->rx_addr) &&
   24766:	2000      	movs	r0, #0
   24768:	e7fc      	b.n	24764 <lll_adv_scan_req_check+0x26>
		 devmatch_ok) &&
   2476a:	4620      	mov	r0, r4
   2476c:	e7fa      	b.n	24764 <lll_adv_scan_req_check+0x26>

0002476e <lll_adv_connect_ind_check>:
{
   2476e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24770:	9f07      	ldr	r7, [sp, #28]
   24772:	f89d 4020 	ldrb.w	r4, [sp, #32]
   24776:	4606      	mov	r6, r0
   24778:	460d      	mov	r5, r1
   2477a:	4618      	mov	r0, r3
	if (tgt_addr) {
   2477c:	b1ef      	cbz	r7, 247ba <lll_adv_connect_ind_check+0x4c>
}

static inline bool isr_rx_ci_adva_check(uint8_t tx_addr, uint8_t *addr,
					struct pdu_adv *ci)
{
	return (tx_addr == ci->rx_addr) &&
   2477e:	780b      	ldrb	r3, [r1, #0]
   24780:	ebb2 1fd3 	cmp.w	r2, r3, lsr #7
   24784:	d003      	beq.n	2478e <lll_adv_connect_ind_check+0x20>
		       isr_rx_ci_adva_check(tx_addr, addr, ci) &&
   24786:	2000      	movs	r0, #0
   24788:	f000 0001 	and.w	r0, r0, #1
}
   2478c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		!memcmp(addr, ci->connect_ind.adv_addr, BDADDR_SIZE);
   2478e:	2206      	movs	r2, #6
   24790:	3108      	adds	r1, #8
   24792:	f7f9 fc3d 	bl	1e010 <memcmp>
		       isr_rx_ci_adva_check(tx_addr, addr, ci) &&
   24796:	2800      	cmp	r0, #0
   24798:	d1f5      	bne.n	24786 <lll_adv_connect_ind_check+0x18>
	return (rx_addr == ci->tx_addr) &&
   2479a:	782b      	ldrb	r3, [r5, #0]
   2479c:	f89d 2018 	ldrb.w	r2, [sp, #24]
   247a0:	f3c3 1380 	ubfx	r3, r3, #6, #1
   247a4:	4293      	cmp	r3, r2
   247a6:	d1ef      	bne.n	24788 <lll_adv_connect_ind_check+0x1a>
	       !memcmp(tgt_addr, ci->connect_ind.init_addr, BDADDR_SIZE);
   247a8:	2206      	movs	r2, #6
   247aa:	1ca9      	adds	r1, r5, #2
   247ac:	4638      	mov	r0, r7
   247ae:	f7f9 fc2f 	bl	1e010 <memcmp>
	return (rx_addr == ci->tx_addr) &&
   247b2:	fab0 f080 	clz	r0, r0
   247b6:	0940      	lsrs	r0, r0, #5
   247b8:	e7e6      	b.n	24788 <lll_adv_connect_ind_check+0x1a>
	return (((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) == 0) ||
   247ba:	7a73      	ldrb	r3, [r6, #9]
		(devmatch_ok)) &&
   247bc:	079b      	lsls	r3, r3, #30
   247be:	d500      	bpl.n	247c2 <lll_adv_connect_ind_check+0x54>
	return (((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) == 0) ||
   247c0:	b174      	cbz	r4, 247e0 <lll_adv_connect_ind_check+0x72>
	return (tx_addr == ci->rx_addr) &&
   247c2:	782b      	ldrb	r3, [r5, #0]
   247c4:	ebb2 1fd3 	cmp.w	r2, r3, lsr #7
   247c8:	d108      	bne.n	247dc <lll_adv_connect_ind_check+0x6e>
		!memcmp(addr, ci->connect_ind.adv_addr, BDADDR_SIZE);
   247ca:	2206      	movs	r2, #6
   247cc:	f105 0108 	add.w	r1, r5, #8
   247d0:	f7f9 fc1e 	bl	1e010 <memcmp>
	return (tx_addr == ci->rx_addr) &&
   247d4:	fab0 f080 	clz	r0, r0
   247d8:	0940      	lsrs	r0, r0, #5
   247da:	e7d7      	b.n	2478c <lll_adv_connect_ind_check+0x1e>
   247dc:	2000      	movs	r0, #0
   247de:	e7d5      	b.n	2478c <lll_adv_connect_ind_check+0x1e>
		(devmatch_ok)) &&
   247e0:	4620      	mov	r0, r4
   247e2:	e7d3      	b.n	2478c <lll_adv_connect_ind_check+0x1e>

000247e4 <prepare_cb>:
	return common_prepare_cb(p, false);
   247e4:	2100      	movs	r1, #0
   247e6:	f7f0 bff5 	b.w	157d4 <common_prepare_cb>

000247ea <isr_abort>:
{
   247ea:	b510      	push	{r4, lr}
   247ec:	4604      	mov	r4, r0
	lll_isr_status_reset();
   247ee:	f7ff ff21 	bl	24634 <lll_isr_status_reset>
	radio_filter_disable();
   247f2:	f7f2 f93f 	bl	16a74 <radio_filter_disable>
	lll_isr_cleanup(param);
   247f6:	4620      	mov	r0, r4
}
   247f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   247fc:	f7f0 babe 	b.w	14d7c <lll_isr_cleanup>

00024800 <isr_done>:
{
   24800:	b508      	push	{r3, lr}
	isr_common_done(param);
   24802:	f7f1 f8b7 	bl	15974 <isr_common_done>
	radio_rx_enable();
   24806:	f7f1 ffeb 	bl	167e0 <radio_rx_enable>
}
   2480a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_end_capture();
   2480e:	f7f2 ba3d 	b.w	16c8c <radio_tmr_end_capture>

00024812 <isr_window>:
{
   24812:	b510      	push	{r4, lr}
   24814:	4604      	mov	r4, r0
	isr_common_done(param);
   24816:	f7f1 f8ad 	bl	15974 <isr_common_done>
	if (++lll->chan == ADV_CHAN_MAX) {
   2481a:	7923      	ldrb	r3, [r4, #4]
   2481c:	f3c3 0241 	ubfx	r2, r3, #1, #2
   24820:	3201      	adds	r2, #1
   24822:	f002 0203 	and.w	r2, r2, #3
   24826:	2a03      	cmp	r2, #3
   24828:	bf14      	ite	ne
   2482a:	f362 0342 	bfine	r3, r2, #1, #2
		lll->chan = 0U;
   2482e:	f36f 0342 	bfceq	r3, #1, #2
   24832:	7123      	strb	r3, [r4, #4]
	lll_chan_set(37 + lll->chan);
   24834:	7920      	ldrb	r0, [r4, #4]
   24836:	f3c0 0041 	ubfx	r0, r0, #1, #2
   2483a:	3025      	adds	r0, #37	; 0x25
   2483c:	f7f0 fa6c 	bl	14d18 <lll_chan_set>
	remainder_us = radio_tmr_start_now(0);
   24840:	2000      	movs	r0, #0
   24842:	f7f2 f9c3 	bl	16bcc <radio_tmr_start_now>
}
   24846:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_tmr_end_capture();
   2484a:	f7f2 ba1f 	b.w	16c8c <radio_tmr_end_capture>

0002484e <resume_prepare_cb>:
	ull = HDR_LLL2ULL(p->param);
   2484e:	68c3      	ldr	r3, [r0, #12]
{
   24850:	b570      	push	{r4, r5, r6, lr}
   24852:	4604      	mov	r4, r0
	ull = HDR_LLL2ULL(p->param);
   24854:	681e      	ldr	r6, [r3, #0]
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   24856:	f7ff fae3 	bl	23e20 <ticker_ticks_now_get>
   2485a:	4605      	mov	r5, r0
   2485c:	4630      	mov	r0, r6
   2485e:	f7ff feba 	bl	245d6 <lll_event_offset_get>
	p->remainder = 0;
   24862:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   24864:	1a2d      	subs	r5, r5, r0
   24866:	6025      	str	r5, [r4, #0]
	p->remainder = 0;
   24868:	6063      	str	r3, [r4, #4]
	p->lazy = 0;
   2486a:	8123      	strh	r3, [r4, #8]
	return common_prepare_cb(p, true);
   2486c:	4620      	mov	r0, r4
   2486e:	2101      	movs	r1, #1
}
   24870:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return common_prepare_cb(p, true);
   24874:	f7f0 bfae 	b.w	157d4 <common_prepare_cb>

00024878 <isr_done_cleanup>:
{
   24878:	b530      	push	{r4, r5, lr}
   2487a:	4604      	mov	r4, r0
   2487c:	b085      	sub	sp, #20
	lll_isr_status_reset();
   2487e:	f7ff fed9 	bl	24634 <lll_isr_status_reset>
	if (lll_is_done(param, &is_resume)) {
   24882:	f10d 010f 	add.w	r1, sp, #15
   24886:	4620      	mov	r0, r4
   24888:	f7f0 fa38 	bl	14cfc <lll_is_done>
   2488c:	4605      	mov	r5, r0
   2488e:	b9c0      	cbnz	r0, 248c2 <isr_done_cleanup+0x4a>
	radio_filter_disable();
   24890:	f7f2 f8f0 	bl	16a74 <radio_filter_disable>
	if (++lll->chan == ADV_CHAN_MAX) {
   24894:	7923      	ldrb	r3, [r4, #4]
   24896:	f3c3 0241 	ubfx	r2, r3, #1, #2
   2489a:	3201      	adds	r2, #1
   2489c:	f002 0203 	and.w	r2, r2, #3
   248a0:	2a03      	cmp	r2, #3
   248a2:	bf14      	ite	ne
   248a4:	f362 0342 	bfine	r3, r2, #1, #2
		lll->chan = 0U;
   248a8:	f365 0342 	bfieq	r3, r5, #1, #2
   248ac:	7123      	strb	r3, [r4, #4]
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_LLL,
   248ae:	2300      	movs	r3, #0
   248b0:	9300      	str	r3, [sp, #0]
   248b2:	2203      	movs	r2, #3
   248b4:	4619      	mov	r1, r3
   248b6:	4618      	mov	r0, r3
   248b8:	f7ec f804 	bl	108c4 <ticker_stop>
	lll_isr_cleanup(param);
   248bc:	4620      	mov	r0, r4
   248be:	f7f0 fa5d 	bl	14d7c <lll_isr_cleanup>
}
   248c2:	b005      	add	sp, #20
   248c4:	bd30      	pop	{r4, r5, pc}

000248c6 <lll_scan_init>:
}
   248c6:	2000      	movs	r0, #0
   248c8:	4770      	bx	lr

000248ca <lll_scan_reset>:
   248ca:	2000      	movs	r0, #0
   248cc:	4770      	bx	lr

000248ce <lll_conn_init>:
{
   248ce:	b508      	push	{r3, lr}

static void empty_tx_init(void)
{
	struct pdu_data *p;

	p = (void *)radio_pkt_empty_get();
   248d0:	f7f1 ffe4 	bl	1689c <radio_pkt_empty_get>
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   248d4:	7803      	ldrb	r3, [r0, #0]
   248d6:	2201      	movs	r2, #1
   248d8:	f362 0301 	bfi	r3, r2, #0, #2
   248dc:	7003      	strb	r3, [r0, #0]
}
   248de:	2000      	movs	r0, #0
   248e0:	bd08      	pop	{r3, pc}

000248e2 <lll_conn_reset>:
}
   248e2:	2000      	movs	r0, #0
   248e4:	4770      	bx	lr

000248e6 <lll_conn_flush>:
}
   248e6:	4770      	bx	lr

000248e8 <lll_conn_tx_pkt_set>:
{
   248e8:	b510      	push	{r4, lr}
   248ea:	460c      	mov	r4, r1
	radio_phy_set(phy, flags);
   248ec:	2100      	movs	r1, #0
   248ee:	4608      	mov	r0, r1
   248f0:	f7f1 fefe 	bl	166f0 <radio_phy_set>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, max_tx_octets, pkt_flags);
   248f4:	2008      	movs	r0, #8
   248f6:	2201      	movs	r2, #1
   248f8:	211b      	movs	r1, #27
   248fa:	f7f1 ff3f 	bl	1677c <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   248fe:	4620      	mov	r0, r4
}
   24900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_pkt_tx_set(pdu_data_tx);
   24904:	f7f1 bf66 	b.w	167d4 <radio_pkt_tx_set>

00024908 <lll_conn_pdu_tx_prep>:
{
   24908:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2490c:	4604      	mov	r4, r0
   2490e:	4688      	mov	r8, r1
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   24910:	aa01      	add	r2, sp, #4
   24912:	e9d0 010f 	ldrd	r0, r1, [r0, #60]	; 0x3c
   24916:	f7fe ffc4 	bl	238a2 <memq_peek>
	if (lll->empty || !link) {
   2491a:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
   2491e:	075b      	lsls	r3, r3, #29
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   24920:	4681      	mov	r9, r0
	if (lll->empty || !link) {
   24922:	d400      	bmi.n	24926 <lll_conn_pdu_tx_prep+0x1e>
   24924:	b9b8      	cbnz	r0, 24956 <lll_conn_pdu_tx_prep+0x4e>
		lll->empty = 1U;
   24926:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
   2492a:	f043 0304 	orr.w	r3, r3, #4
   2492e:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
		p = (void *)radio_pkt_empty_get();
   24932:	f7f1 ffb3 	bl	1689c <radio_pkt_empty_get>
   24936:	7803      	ldrb	r3, [r0, #0]
   24938:	4605      	mov	r5, r0
		if (link || FORCE_MD_CNT_GET()) {
   2493a:	f1b9 0f00 	cmp.w	r9, #0
   2493e:	d007      	beq.n	24950 <lll_conn_pdu_tx_prep+0x48>
			p->md = 1U;
   24940:	f043 0310 	orr.w	r3, r3, #16
			p->md = 0U;
   24944:	702b      	strb	r3, [r5, #0]
	*pdu_data_tx = p;
   24946:	f8c8 5000 	str.w	r5, [r8]
}
   2494a:	b003      	add	sp, #12
   2494c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			p->md = 0U;
   24950:	f369 1304 	bfi	r3, r9, #4, #1
   24954:	e7f6      	b.n	24944 <lll_conn_pdu_tx_prep+0x3c>
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   24956:	9f01      	ldr	r7, [sp, #4]
   24958:	f894 6051 	ldrb.w	r6, [r4, #81]	; 0x51
		if (!lll->packet_tx_head_len) {
   2495c:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   24960:	3704      	adds	r7, #4
   24962:	19bd      	adds	r5, r7, r6
		if (!lll->packet_tx_head_len) {
   24964:	b913      	cbnz	r3, 2496c <lll_conn_pdu_tx_prep+0x64>
			lll->packet_tx_head_len = p->len;
   24966:	786b      	ldrb	r3, [r5, #1]
   24968:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
		if (lll->packet_tx_head_offset) {
   2496c:	b126      	cbz	r6, 24978 <lll_conn_pdu_tx_prep+0x70>
			p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   2496e:	5dbb      	ldrb	r3, [r7, r6]
   24970:	2201      	movs	r2, #1
   24972:	f362 0301 	bfi	r3, r2, #0, #2
   24976:	55bb      	strb	r3, [r7, r6]
		p->len = lll->packet_tx_head_len - lll->packet_tx_head_offset;
   24978:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   2497c:	1b9b      	subs	r3, r3, r6
   2497e:	706b      	strb	r3, [r5, #1]
		max_tx_octets = ull_conn_lll_max_tx_octets_get(lll);
   24980:	4620      	mov	r0, r4
   24982:	f7ff fdaf 	bl	244e4 <ull_conn_lll_max_tx_octets_get>
		if (p->len > max_tx_octets) {
   24986:	786b      	ldrb	r3, [r5, #1]
   24988:	4283      	cmp	r3, r0
   2498a:	d90b      	bls.n	249a4 <lll_conn_pdu_tx_prep+0x9c>
			p->len = max_tx_octets;
   2498c:	7068      	strb	r0, [r5, #1]
			p->md = 1U;
   2498e:	5dbb      	ldrb	r3, [r7, r6]
			p->md = 1U;
   24990:	f043 0310 	orr.w	r3, r3, #16
			p->md = 0U;
   24994:	55bb      	strb	r3, [r7, r6]
		p->rfu = 0U;
   24996:	5dbb      	ldrb	r3, [r7, r6]
   24998:	f36f 1347 	bfc	r3, #5, #3
   2499c:	55bb      	strb	r3, [r7, r6]
		p->resv = 0U;
   2499e:	2300      	movs	r3, #0
   249a0:	70ab      	strb	r3, [r5, #2]
   249a2:	e7d0      	b.n	24946 <lll_conn_pdu_tx_prep+0x3e>
		} else if ((link->next != lll->memq_tx.tail) ||
   249a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
   249a6:	f8d9 2000 	ldr.w	r2, [r9]
   249aa:	429a      	cmp	r2, r3
   249ac:	5dbb      	ldrb	r3, [r7, r6]
   249ae:	d1ef      	bne.n	24990 <lll_conn_pdu_tx_prep+0x88>
			p->md = 0U;
   249b0:	f36f 1304 	bfc	r3, #4, #1
   249b4:	e7ee      	b.n	24994 <lll_conn_pdu_tx_prep+0x8c>

000249b6 <ecb_encrypt_be>:

void ecb_encrypt_be(uint8_t const *const key_be, uint8_t const *const clear_text_be,
		    uint8_t * const cipher_text_be)
{
   249b6:	b530      	push	{r4, r5, lr}
   249b8:	b08d      	sub	sp, #52	; 0x34
   249ba:	460d      	mov	r5, r1
   249bc:	4614      	mov	r4, r2
	struct ecb_param ecb;

	memcpy(&ecb.key[0], key_be, sizeof(ecb.key));
   249be:	4601      	mov	r1, r0
   249c0:	2210      	movs	r2, #16
   249c2:	4668      	mov	r0, sp
   249c4:	f7f9 fb35 	bl	1e032 <memcpy>
	memcpy(&ecb.clear_text[0], clear_text_be, sizeof(ecb.clear_text));
   249c8:	2210      	movs	r2, #16
   249ca:	4629      	mov	r1, r5
   249cc:	eb0d 0002 	add.w	r0, sp, r2
   249d0:	f7f9 fb2f 	bl	1e032 <memcpy>

	do_ecb(&ecb);
   249d4:	4668      	mov	r0, sp
   249d6:	f7f1 fdff 	bl	165d8 <do_ecb>

	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
   249da:	2210      	movs	r2, #16
   249dc:	a908      	add	r1, sp, #32
   249de:	4620      	mov	r0, r4
   249e0:	f7f9 fb27 	bl	1e032 <memcpy>
}
   249e4:	b00d      	add	sp, #52	; 0x34
   249e6:	bd30      	pop	{r4, r5, pc}

000249e8 <ecb_encrypt>:

void ecb_encrypt(uint8_t const *const key_le, uint8_t const *const clear_text_le,
		 uint8_t * const cipher_text_le, uint8_t * const cipher_text_be)
{
   249e8:	b570      	push	{r4, r5, r6, lr}
   249ea:	b08c      	sub	sp, #48	; 0x30
   249ec:	460e      	mov	r6, r1
   249ee:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   249f0:	4601      	mov	r1, r0
   249f2:	2210      	movs	r2, #16
   249f4:	4668      	mov	r0, sp
{
   249f6:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   249f8:	f7fe ff24 	bl	23844 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   249fc:	2210      	movs	r2, #16
   249fe:	eb0d 0002 	add.w	r0, sp, r2
   24a02:	4631      	mov	r1, r6
   24a04:	f7fe ff1e 	bl	23844 <mem_rcopy>

	do_ecb(&ecb);
   24a08:	4668      	mov	r0, sp
   24a0a:	f7f1 fde5 	bl	165d8 <do_ecb>

	if (cipher_text_le) {
   24a0e:	b125      	cbz	r5, 24a1a <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   24a10:	2210      	movs	r2, #16
   24a12:	a908      	add	r1, sp, #32
   24a14:	4628      	mov	r0, r5
   24a16:	f7fe ff15 	bl	23844 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   24a1a:	b124      	cbz	r4, 24a26 <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   24a1c:	2210      	movs	r2, #16
   24a1e:	a908      	add	r1, sp, #32
   24a20:	4620      	mov	r0, r4
   24a22:	f7f9 fb06 	bl	1e032 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   24a26:	b00c      	add	sp, #48	; 0x30
   24a28:	bd70      	pop	{r4, r5, r6, pc}

00024a2a <radio_setup>:
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   24a2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   24a2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   24a32:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   24a34:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   24a38:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   24a3c:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   24a40:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   24a44:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   24a48:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   24a4c:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   24a50:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   24a54:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   24a58:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   24a5c:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   24a60:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   24a64:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   24a68:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
}
   24a6c:	4770      	bx	lr

00024a6e <radio_tx_chain_delay_get>:
}
   24a6e:	2001      	movs	r0, #1
   24a70:	4770      	bx	lr

00024a72 <radio_rx_ready_delay_get>:
}
   24a72:	2029      	movs	r0, #41	; 0x29
   24a74:	4770      	bx	lr

00024a76 <radio_rx_chain_delay_get>:
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_2M_US;
   24a76:	2802      	cmp	r0, #2
}
   24a78:	bf14      	ite	ne
   24a7a:	200a      	movne	r0, #10
   24a7c:	2005      	moveq	r0, #5
   24a7e:	4770      	bx	lr

00024a80 <radio_phy_flags_rx_get>:
}
   24a80:	2000      	movs	r0, #0
   24a82:	4770      	bx	lr

00024a84 <mayfly_prio_is_equal>:
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   24a84:	4288      	cmp	r0, r1
   24a86:	d00a      	beq.n	24a9e <mayfly_prio_is_equal+0x1a>
	return (caller_id == callee_id) ||
   24a88:	2801      	cmp	r0, #1
   24a8a:	d104      	bne.n	24a96 <mayfly_prio_is_equal+0x12>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   24a8c:	2902      	cmp	r1, #2
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   24a8e:	bf14      	ite	ne
   24a90:	2000      	movne	r0, #0
   24a92:	2001      	moveq	r0, #1
   24a94:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   24a96:	2802      	cmp	r0, #2
   24a98:	d103      	bne.n	24aa2 <mayfly_prio_is_equal+0x1e>
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   24a9a:	2901      	cmp	r1, #1
   24a9c:	e7f7      	b.n	24a8e <mayfly_prio_is_equal+0xa>
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   24a9e:	2001      	movs	r0, #1
   24aa0:	4770      	bx	lr
   24aa2:	2000      	movs	r0, #0
}
   24aa4:	4770      	bx	lr

00024aa6 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(uint32_t value)
{
   24aa6:	4601      	mov	r1, r0
	cntr_cmp_set(0, value);
   24aa8:	2000      	movs	r0, #0
   24aaa:	f7f1 bd8d 	b.w	165c8 <cntr_cmp_set>

00024aae <sys_put_le32>:
	dst[1] = val >> 8;
   24aae:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   24ab2:	7008      	strb	r0, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
   24ab4:	0c00      	lsrs	r0, r0, #16
	dst[0] = val;
   24ab6:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
   24ab8:	0a00      	lsrs	r0, r0, #8
   24aba:	704b      	strb	r3, [r1, #1]
   24abc:	70c8      	strb	r0, [r1, #3]
}
   24abe:	4770      	bx	lr

00024ac0 <hci_vendor_read_static_addr>:
				 uint8_t size)
{
	/* only one supported */
	ARG_UNUSED(size);

	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   24ac0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
{
   24ac4:	b510      	push	{r4, lr}
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   24ac6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   24aca:	3201      	adds	r2, #1
{
   24acc:	4604      	mov	r4, r0
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   24ace:	d106      	bne.n	24ade <hci_vendor_read_static_addr+0x1e>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   24ad0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   24ad4:	f64f 72ff 	movw	r2, #65535	; 0xffff
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   24ad8:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   24ada:	4293      	cmp	r3, r2
   24adc:	d044      	beq.n	24b68 <hci_vendor_read_static_addr+0xa8>
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   24ade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   24ae2:	f8d2 00a0 	ldr.w	r0, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   24ae6:	f010 0001 	ands.w	r0, r0, #1
   24aea:	d036      	beq.n	24b5a <hci_vendor_read_static_addr+0x9a>
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addrs[0].bdaddr.val[0]);
   24aec:	4621      	mov	r1, r4
   24aee:	f8d2 00a4 	ldr.w	r0, [r2, #164]	; 0xa4
   24af2:	f7ff ffdc 	bl	24aae <sys_put_le32>
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addrs[0].bdaddr.val[4]);
   24af6:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
	dst[0] = val;
   24afa:	7123      	strb	r3, [r4, #4]
	dst[1] = val >> 8;
   24afc:	f3c3 2307 	ubfx	r3, r3, #8, #8

		/* The FICR value is a just a random number, with no knowledge
		 * of the Bluetooth Specification requirements for random
		 * static addresses.
		 */
		BT_ADDR_SET_STATIC(&addrs[0].bdaddr);
   24b00:	f063 033f 	orn	r3, r3, #63	; 0x3f
   24b04:	7163      	strb	r3, [r4, #5]

		/* If no public address is provided and a static address is
		 * available, then it is recommended to return an identity root
		 * key (if available) from this command.
		 */
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   24b06:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
   24b0a:	3101      	adds	r1, #1
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
		    (NRF_FICR->IR[3] != UINT32_MAX)) {
			sys_put_le32(NRF_FICR->IR[0], &addrs[0].ir[0]);
   24b0c:	f104 0306 	add.w	r3, r4, #6
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   24b10:	d024      	beq.n	24b5c <hci_vendor_read_static_addr+0x9c>
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   24b12:	f8d2 1094 	ldr.w	r1, [r2, #148]	; 0x94
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   24b16:	3101      	adds	r1, #1
   24b18:	d020      	beq.n	24b5c <hci_vendor_read_static_addr+0x9c>
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   24b1a:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   24b1e:	3101      	adds	r1, #1
   24b20:	d01c      	beq.n	24b5c <hci_vendor_read_static_addr+0x9c>
		    (NRF_FICR->IR[3] != UINT32_MAX)) {
   24b22:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   24b26:	3101      	adds	r1, #1
   24b28:	d018      	beq.n	24b5c <hci_vendor_read_static_addr+0x9c>
			sys_put_le32(NRF_FICR->IR[0], &addrs[0].ir[0]);
   24b2a:	4619      	mov	r1, r3
   24b2c:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
   24b30:	f7ff ffbd 	bl	24aae <sys_put_le32>
			sys_put_le32(NRF_FICR->IR[1], &addrs[0].ir[4]);
   24b34:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
   24b38:	f104 010a 	add.w	r1, r4, #10
   24b3c:	f7ff ffb7 	bl	24aae <sys_put_le32>
			sys_put_le32(NRF_FICR->IR[2], &addrs[0].ir[8]);
   24b40:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
   24b44:	f104 010e 	add.w	r1, r4, #14
   24b48:	f7ff ffb1 	bl	24aae <sys_put_le32>
			sys_put_le32(NRF_FICR->IR[3], &addrs[0].ir[12]);
   24b4c:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
   24b50:	f104 0112 	add.w	r1, r4, #18
   24b54:	f7ff ffab 	bl	24aae <sys_put_le32>
		} else {
			/* Mark IR as invalid */
			(void)memset(addrs[0].ir, 0x00, sizeof(addrs[0].ir));
		}

		return 1;
   24b58:	2001      	movs	r0, #1
	}

	return 0;
}
   24b5a:	bd10      	pop	{r4, pc}
			(void)memset(addrs[0].ir, 0x00, sizeof(addrs[0].ir));
   24b5c:	2210      	movs	r2, #16
   24b5e:	2100      	movs	r1, #0
   24b60:	4618      	mov	r0, r3
   24b62:	f7f9 fa71 	bl	1e048 <memset>
   24b66:	e7f7      	b.n	24b58 <hci_vendor_read_static_addr+0x98>
	return 0;
   24b68:	2000      	movs	r0, #0
   24b6a:	e7f6      	b.n	24b5a <hci_vendor_read_static_addr+0x9a>

00024b6c <hci_vendor_read_key_hierarchy_roots>:

void hci_vendor_read_key_hierarchy_roots(uint8_t ir[16], uint8_t er[16])
{
   24b6c:	b510      	push	{r4, lr}
	/* Mark IR as invalid.
	 * No public address is available, and static address IR should be read
	 * using Read Static Addresses command.
	 */
	(void)memset(ir, 0x00, 16);
   24b6e:	2210      	movs	r2, #16
{
   24b70:	460c      	mov	r4, r1
	(void)memset(ir, 0x00, 16);
   24b72:	2100      	movs	r1, #0
   24b74:	f7f9 fa68 	bl	1e048 <memset>

	/* Fill in ER if present */
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   24b78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   24b7c:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   24b80:	3301      	adds	r3, #1
   24b82:	d023      	beq.n	24bcc <hci_vendor_read_key_hierarchy_roots+0x60>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   24b84:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   24b88:	3301      	adds	r3, #1
   24b8a:	d01f      	beq.n	24bcc <hci_vendor_read_key_hierarchy_roots+0x60>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   24b8c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   24b90:	3301      	adds	r3, #1
   24b92:	d01b      	beq.n	24bcc <hci_vendor_read_key_hierarchy_roots+0x60>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
   24b94:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   24b98:	3301      	adds	r3, #1
   24b9a:	d017      	beq.n	24bcc <hci_vendor_read_key_hierarchy_roots+0x60>
		sys_put_le32(NRF_FICR->ER[0], &er[0]);
   24b9c:	4621      	mov	r1, r4
   24b9e:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
   24ba2:	f7ff ff84 	bl	24aae <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[1], &er[4]);
   24ba6:	1d21      	adds	r1, r4, #4
   24ba8:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
   24bac:	f7ff ff7f 	bl	24aae <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[2], &er[8]);
   24bb0:	f104 0108 	add.w	r1, r4, #8
   24bb4:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
   24bb8:	f7ff ff79 	bl	24aae <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
   24bbc:	f104 010c 	add.w	r1, r4, #12
   24bc0:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
	} else {
		/* Mark ER as invalid */
		(void)memset(er, 0x00, 16);
	}
}
   24bc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
   24bc8:	f7ff bf71 	b.w	24aae <sys_put_le32>
		(void)memset(er, 0x00, 16);
   24bcc:	4620      	mov	r0, r4
   24bce:	2210      	movs	r2, #16
}
   24bd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		(void)memset(er, 0x00, 16);
   24bd4:	2100      	movs	r1, #0
   24bd6:	f7f9 ba37 	b.w	1e048 <memset>

00024bda <sys_put_be32>:
	sys_put_be16(val >> 16, dst);
   24bda:	0c03      	lsrs	r3, r0, #16
	dst[0] = val >> 8;
   24bdc:	0e02      	lsrs	r2, r0, #24
	dst[1] = val;
   24bde:	704b      	strb	r3, [r1, #1]
	dst[0] = val >> 8;
   24be0:	f3c0 2307 	ubfx	r3, r0, #8, #8
   24be4:	700a      	strb	r2, [r1, #0]
   24be6:	708b      	strb	r3, [r1, #2]
	dst[1] = val;
   24be8:	70c8      	strb	r0, [r1, #3]
}
   24bea:	4770      	bx	lr

00024bec <sys_put_le32>:
	dst[1] = val >> 8;
   24bec:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   24bf0:	7008      	strb	r0, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
   24bf2:	0c00      	lsrs	r0, r0, #16
	dst[0] = val;
   24bf4:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
   24bf6:	0a00      	lsrs	r0, r0, #8
   24bf8:	704b      	strb	r3, [r1, #1]
   24bfa:	70c8      	strb	r0, [r1, #3]
}
   24bfc:	4770      	bx	lr

00024bfe <fixed_data_unref>:
}
   24bfe:	4770      	bx	lr

00024c00 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   24c00:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   24c02:	6849      	ldr	r1, [r1, #4]
   24c04:	6809      	ldr	r1, [r1, #0]
   24c06:	f7f2 b9a3 	b.w	16f50 <net_buf_alloc_len>

00024c0a <net_buf_get>:
{
   24c0a:	b570      	push	{r4, r5, r6, lr}
   24c0c:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   24c0e:	f7f6 fb47 	bl	1b2a0 <z_impl_k_queue_get>
	if (!buf) {
   24c12:	4605      	mov	r5, r0
   24c14:	b128      	cbz	r0, 24c22 <net_buf_get+0x18>
   24c16:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   24c18:	7963      	ldrb	r3, [r4, #5]
   24c1a:	f013 0301 	ands.w	r3, r3, #1
   24c1e:	d102      	bne.n	24c26 <net_buf_get+0x1c>
	frag->frags = NULL;
   24c20:	6023      	str	r3, [r4, #0]
}
   24c22:	4628      	mov	r0, r5
   24c24:	bd70      	pop	{r4, r5, r6, pc}
   24c26:	2300      	movs	r3, #0
   24c28:	2200      	movs	r2, #0
   24c2a:	4630      	mov	r0, r6
   24c2c:	f7f6 fb38 	bl	1b2a0 <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   24c30:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   24c32:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   24c34:	f023 0301 	bic.w	r3, r3, #1
   24c38:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   24c3a:	4604      	mov	r4, r0
   24c3c:	e7ec      	b.n	24c18 <net_buf_get+0xe>

00024c3e <net_buf_simple_init_with_data>:
	buf->size  = size;
   24c3e:	b292      	uxth	r2, r2
	buf->__buf = data;
   24c40:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   24c42:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   24c44:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   24c46:	8082      	strh	r2, [r0, #4]
}
   24c48:	4770      	bx	lr

00024c4a <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   24c4a:	6883      	ldr	r3, [r0, #8]
   24c4c:	440b      	add	r3, r1
   24c4e:	6003      	str	r3, [r0, #0]
}
   24c50:	4770      	bx	lr

00024c52 <net_buf_slist_put>:
{
   24c52:	b510      	push	{r4, lr}
	for (tail = buf; tail->frags; tail = tail->frags) {
   24c54:	460b      	mov	r3, r1
   24c56:	681c      	ldr	r4, [r3, #0]
   24c58:	b984      	cbnz	r4, 24c7c <net_buf_slist_put+0x2a>
	__asm__ volatile(
   24c5a:	f04f 0220 	mov.w	r2, #32
   24c5e:	f3ef 8411 	mrs	r4, BASEPRI
   24c62:	f382 8812 	msr	BASEPRI_MAX, r2
   24c66:	f3bf 8f6f 	isb	sy
	return list->tail;
   24c6a:	6842      	ldr	r2, [r0, #4]
Z_GENLIST_APPEND_LIST(slist, snode)
   24c6c:	b962      	cbnz	r2, 24c88 <net_buf_slist_put+0x36>
	list->head = node;
   24c6e:	6001      	str	r1, [r0, #0]
	list->tail = node;
   24c70:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   24c72:	f384 8811 	msr	BASEPRI, r4
   24c76:	f3bf 8f6f 	isb	sy
}
   24c7a:	bd10      	pop	{r4, pc}
		tail->flags |= NET_BUF_FRAGS;
   24c7c:	795a      	ldrb	r2, [r3, #5]
   24c7e:	f042 0201 	orr.w	r2, r2, #1
   24c82:	715a      	strb	r2, [r3, #5]
   24c84:	4623      	mov	r3, r4
   24c86:	e7e6      	b.n	24c56 <net_buf_slist_put+0x4>
	parent->next = child;
   24c88:	6011      	str	r1, [r2, #0]
}
   24c8a:	e7f1      	b.n	24c70 <net_buf_slist_put+0x1e>

00024c8c <net_buf_put>:
{
   24c8c:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   24c8e:	460a      	mov	r2, r1
   24c90:	6814      	ldr	r4, [r2, #0]
   24c92:	b914      	cbnz	r4, 24c9a <net_buf_put+0xe>
}
   24c94:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   24c96:	f000 bf09 	b.w	25aac <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   24c9a:	7953      	ldrb	r3, [r2, #5]
   24c9c:	f043 0301 	orr.w	r3, r3, #1
   24ca0:	7153      	strb	r3, [r2, #5]
   24ca2:	4622      	mov	r2, r4
   24ca4:	e7f4      	b.n	24c90 <net_buf_put+0x4>

00024ca6 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   24ca6:	7902      	ldrb	r2, [r0, #4]
   24ca8:	3201      	adds	r2, #1
   24caa:	7102      	strb	r2, [r0, #4]
	return buf;
}
   24cac:	4770      	bx	lr

00024cae <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   24cae:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   24cb0:	4618      	mov	r0, r3
   24cb2:	681b      	ldr	r3, [r3, #0]
   24cb4:	2b00      	cmp	r3, #0
   24cb6:	d1fb      	bne.n	24cb0 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   24cb8:	4770      	bx	lr

00024cba <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   24cba:	6802      	ldr	r2, [r0, #0]
{
   24cbc:	b510      	push	{r4, lr}
	if (parent->frags) {
   24cbe:	b12a      	cbz	r2, 24ccc <net_buf_frag_insert+0x12>
   24cc0:	460b      	mov	r3, r1
	while (buf->frags) {
   24cc2:	461c      	mov	r4, r3
   24cc4:	681b      	ldr	r3, [r3, #0]
   24cc6:	2b00      	cmp	r3, #0
   24cc8:	d1fb      	bne.n	24cc2 <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   24cca:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   24ccc:	6001      	str	r1, [r0, #0]
}
   24cce:	bd10      	pop	{r4, pc}

00024cd0 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   24cd0:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   24cd2:	4604      	mov	r4, r0
   24cd4:	b920      	cbnz	r0, 24ce0 <net_buf_frag_add+0x10>
	buf->ref++;
   24cd6:	790b      	ldrb	r3, [r1, #4]
   24cd8:	3301      	adds	r3, #1
   24cda:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   24cdc:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   24cde:	bd10      	pop	{r4, pc}
   24ce0:	4603      	mov	r3, r0
	while (buf->frags) {
   24ce2:	4618      	mov	r0, r3
   24ce4:	681b      	ldr	r3, [r3, #0]
   24ce6:	2b00      	cmp	r3, #0
   24ce8:	d1fb      	bne.n	24ce2 <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   24cea:	f7ff ffe6 	bl	24cba <net_buf_frag_insert>
   24cee:	4620      	mov	r0, r4
   24cf0:	e7f5      	b.n	24cde <net_buf_frag_add+0xe>

00024cf2 <net_buf_frag_del>:
				       struct net_buf *frag,
				       const char *func, int line)
#else
struct net_buf *net_buf_frag_del(struct net_buf *parent, struct net_buf *frag)
#endif
{
   24cf2:	b510      	push	{r4, lr}
	struct net_buf *next_frag;

	__ASSERT_NO_MSG(frag);

	if (parent) {
   24cf4:	b108      	cbz	r0, 24cfa <net_buf_frag_del+0x8>
		__ASSERT_NO_MSG(parent->frags);
		__ASSERT_NO_MSG(parent->frags == frag);
		parent->frags = frag->frags;
   24cf6:	680b      	ldr	r3, [r1, #0]
   24cf8:	6003      	str	r3, [r0, #0]
	}

	next_frag = frag->frags;
   24cfa:	680c      	ldr	r4, [r1, #0]

	frag->frags = NULL;
   24cfc:	2300      	movs	r3, #0

#if defined(CONFIG_NET_BUF_LOG)
	net_buf_unref_debug(frag, func, line);
#else
	net_buf_unref(frag);
   24cfe:	4608      	mov	r0, r1
	frag->frags = NULL;
   24d00:	600b      	str	r3, [r1, #0]
	net_buf_unref(frag);
   24d02:	f7f2 f9b9 	bl	17078 <net_buf_unref>
#endif

	return next_frag;
}
   24d06:	4620      	mov	r0, r4
   24d08:	bd10      	pop	{r4, pc}

00024d0a <net_buf_simple_clone>:
#define NET_BUF_SIMPLE_INFO(fmt, ...)
#endif /* CONFIG_NET_BUF_SIMPLE_LOG */

void net_buf_simple_clone(const struct net_buf_simple *original,
			  struct net_buf_simple *clone)
{
   24d0a:	460b      	mov	r3, r1
	memcpy(clone, original, sizeof(struct net_buf_simple));
   24d0c:	220c      	movs	r2, #12
   24d0e:	4601      	mov	r1, r0
   24d10:	4618      	mov	r0, r3
   24d12:	f7f9 b98e 	b.w	1e032 <memcpy>

00024d16 <net_buf_simple_add>:
	return buf->data + buf->len;
   24d16:	8883      	ldrh	r3, [r0, #4]
   24d18:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   24d1a:	4419      	add	r1, r3
   24d1c:	8081      	strh	r1, [r0, #4]
	return tail;
}
   24d1e:	18d0      	adds	r0, r2, r3
   24d20:	4770      	bx	lr

00024d22 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   24d22:	b430      	push	{r4, r5}
   24d24:	8884      	ldrh	r4, [r0, #4]
   24d26:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   24d28:	18a3      	adds	r3, r4, r2
   24d2a:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   24d2c:	1928      	adds	r0, r5, r4
}
   24d2e:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   24d30:	f7f9 b97f 	b.w	1e032 <memcpy>

00024d34 <net_buf_simple_add_u8>:
   24d34:	8883      	ldrh	r3, [r0, #4]
   24d36:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   24d38:	b510      	push	{r4, lr}
	buf->len += len;
   24d3a:	1c5c      	adds	r4, r3, #1
   24d3c:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   24d3e:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   24d40:	18d0      	adds	r0, r2, r3
   24d42:	bd10      	pop	{r4, pc}

00024d44 <net_buf_simple_add_le16>:
   24d44:	8883      	ldrh	r3, [r0, #4]
   24d46:	6802      	ldr	r2, [r0, #0]

void net_buf_simple_add_le16(struct net_buf_simple *buf, uint16_t val)
{
   24d48:	b530      	push	{r4, r5, lr}
   24d4a:	18d4      	adds	r4, r2, r3
	buf->len += len;
   24d4c:	1c9d      	adds	r5, r3, #2
   24d4e:	8085      	strh	r5, [r0, #4]
	dst[0] = val;
   24d50:	54d1      	strb	r1, [r2, r3]
	dst[1] = val >> 8;
   24d52:	0a09      	lsrs	r1, r1, #8
   24d54:	7061      	strb	r1, [r4, #1]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
}
   24d56:	bd30      	pop	{r4, r5, pc}

00024d58 <net_buf_simple_add_be16>:
   24d58:	8883      	ldrh	r3, [r0, #4]
   24d5a:	6802      	ldr	r2, [r0, #0]

void net_buf_simple_add_be16(struct net_buf_simple *buf, uint16_t val)
{
   24d5c:	b530      	push	{r4, r5, lr}
	buf->len += len;
   24d5e:	1c9d      	adds	r5, r3, #2
   24d60:	8085      	strh	r5, [r0, #4]
   24d62:	18d4      	adds	r4, r2, r3
	dst[0] = val >> 8;
   24d64:	0a08      	lsrs	r0, r1, #8
   24d66:	54d0      	strb	r0, [r2, r3]
	dst[1] = val;
   24d68:	7061      	strb	r1, [r4, #1]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_be16(val, net_buf_simple_add(buf, sizeof(val)));
}
   24d6a:	bd30      	pop	{r4, r5, pc}

00024d6c <net_buf_simple_add_le24>:
   24d6c:	8883      	ldrh	r3, [r0, #4]

void net_buf_simple_add_le24(struct net_buf_simple *buf, uint32_t val)
{
   24d6e:	b530      	push	{r4, r5, lr}
   24d70:	6804      	ldr	r4, [r0, #0]
	buf->len += len;
   24d72:	1cdd      	adds	r5, r3, #3
   24d74:	18e2      	adds	r2, r4, r3
   24d76:	8085      	strh	r5, [r0, #4]
	dst[0] = val;
   24d78:	54e1      	strb	r1, [r4, r3]
	dst[1] = val >> 8;
   24d7a:	f3c1 2307 	ubfx	r3, r1, #8, #8
	dst[2] = val >> 16;
   24d7e:	0c09      	lsrs	r1, r1, #16
	dst[1] = val >> 8;
   24d80:	7053      	strb	r3, [r2, #1]
	dst[2] = val >> 16;
   24d82:	7091      	strb	r1, [r2, #2]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_le24(val, net_buf_simple_add(buf, 3));
}
   24d84:	bd30      	pop	{r4, r5, pc}

00024d86 <net_buf_simple_add_le32>:

	sys_put_be24(val, net_buf_simple_add(buf, 3));
}

void net_buf_simple_add_le32(struct net_buf_simple *buf, uint32_t val)
{
   24d86:	4603      	mov	r3, r0
   24d88:	4608      	mov	r0, r1
   24d8a:	889a      	ldrh	r2, [r3, #4]
   24d8c:	6819      	ldr	r1, [r3, #0]
   24d8e:	b410      	push	{r4}
	buf->len += len;
   24d90:	1d14      	adds	r4, r2, #4
   24d92:	809c      	strh	r4, [r3, #4]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_le32(val, net_buf_simple_add(buf, sizeof(val)));
   24d94:	4411      	add	r1, r2
}
   24d96:	bc10      	pop	{r4}
	sys_put_le32(val, net_buf_simple_add(buf, sizeof(val)));
   24d98:	f7ff bf28 	b.w	24bec <sys_put_le32>

00024d9c <net_buf_simple_add_be32>:

void net_buf_simple_add_be32(struct net_buf_simple *buf, uint32_t val)
{
   24d9c:	4603      	mov	r3, r0
   24d9e:	4608      	mov	r0, r1
   24da0:	889a      	ldrh	r2, [r3, #4]
   24da2:	6819      	ldr	r1, [r3, #0]
   24da4:	b410      	push	{r4}
	buf->len += len;
   24da6:	1d14      	adds	r4, r2, #4
   24da8:	809c      	strh	r4, [r3, #4]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_be32(val, net_buf_simple_add(buf, sizeof(val)));
   24daa:	4411      	add	r1, r2
}
   24dac:	bc10      	pop	{r4}
	sys_put_be32(val, net_buf_simple_add(buf, sizeof(val)));
   24dae:	f7ff bf14 	b.w	24bda <sys_put_be32>

00024db2 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   24db2:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   24db4:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   24db6:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   24db8:	1a40      	subs	r0, r0, r1
	buf->len += len;
   24dba:	4411      	add	r1, r2
	buf->data -= len;
   24dbc:	6018      	str	r0, [r3, #0]
	buf->len += len;
   24dbe:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   24dc0:	4770      	bx	lr

00024dc2 <net_buf_simple_push_be16>:
	buf->data -= len;
   24dc2:	6803      	ldr	r3, [r0, #0]
   24dc4:	1e9a      	subs	r2, r3, #2
   24dc6:	6002      	str	r2, [r0, #0]
	buf->len += len;
   24dc8:	8882      	ldrh	r2, [r0, #4]
   24dca:	3202      	adds	r2, #2
   24dcc:	8082      	strh	r2, [r0, #4]
	dst[0] = val >> 8;
   24dce:	0a0a      	lsrs	r2, r1, #8
   24dd0:	f803 2c02 	strb.w	r2, [r3, #-2]
	dst[1] = val;
   24dd4:	f803 1c01 	strb.w	r1, [r3, #-1]
void net_buf_simple_push_be16(struct net_buf_simple *buf, uint16_t val)
{
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_be16(val, net_buf_simple_push(buf, sizeof(val)));
}
   24dd8:	4770      	bx	lr

00024dda <net_buf_simple_push_u8>:
	buf->data -= len;
   24dda:	6802      	ldr	r2, [r0, #0]
   24ddc:	1e53      	subs	r3, r2, #1
   24dde:	6003      	str	r3, [r0, #0]
	buf->len += len;
   24de0:	8883      	ldrh	r3, [r0, #4]
   24de2:	3301      	adds	r3, #1
   24de4:	8083      	strh	r3, [r0, #4]

void net_buf_simple_push_u8(struct net_buf_simple *buf, uint8_t val)
{
	uint8_t *data = net_buf_simple_push(buf, 1);

	*data = val;
   24de6:	f802 1c01 	strb.w	r1, [r2, #-1]
}
   24dea:	4770      	bx	lr

00024dec <net_buf_simple_push_be24>:
	buf->data -= len;
   24dec:	6803      	ldr	r3, [r0, #0]
   24dee:	1eda      	subs	r2, r3, #3
   24df0:	6002      	str	r2, [r0, #0]
	buf->len += len;
   24df2:	8882      	ldrh	r2, [r0, #4]
   24df4:	3203      	adds	r2, #3
   24df6:	8082      	strh	r2, [r0, #4]
	dst[0] = val >> 16;
   24df8:	0c0a      	lsrs	r2, r1, #16
   24dfa:	f803 2c03 	strb.w	r2, [r3, #-3]
	dst[0] = val >> 8;
   24dfe:	f3c1 2207 	ubfx	r2, r1, #8, #8
   24e02:	f803 2c02 	strb.w	r2, [r3, #-2]
	dst[1] = val;
   24e06:	f803 1c01 	strb.w	r1, [r3, #-1]
void net_buf_simple_push_be24(struct net_buf_simple *buf, uint32_t val)
{
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_be24(val, net_buf_simple_push(buf, 3));
}
   24e0a:	4770      	bx	lr

00024e0c <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   24e0c:	8882      	ldrh	r2, [r0, #4]
   24e0e:	1a52      	subs	r2, r2, r1
{
   24e10:	4603      	mov	r3, r0
	buf->len -= len;
   24e12:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   24e14:	6800      	ldr	r0, [r0, #0]
   24e16:	4408      	add	r0, r1
   24e18:	6018      	str	r0, [r3, #0]
}
   24e1a:	4770      	bx	lr

00024e1c <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   24e1c:	4603      	mov	r3, r0
	void *data = buf->data;
   24e1e:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   24e20:	889a      	ldrh	r2, [r3, #4]
   24e22:	1a52      	subs	r2, r2, r1
	buf->data += len;
   24e24:	4401      	add	r1, r0
	buf->len -= len;
   24e26:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   24e28:	6019      	str	r1, [r3, #0]

	return data;
}
   24e2a:	4770      	bx	lr

00024e2c <net_buf_simple_pull_u8>:

uint8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   24e2c:	b510      	push	{r4, lr}
	uint8_t val;

	val = buf->data[0];
   24e2e:	6803      	ldr	r3, [r0, #0]
   24e30:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   24e32:	2101      	movs	r1, #1
   24e34:	f7ff ffea 	bl	24e0c <net_buf_simple_pull>

	return val;
}
   24e38:	4620      	mov	r0, r4
   24e3a:	bd10      	pop	{r4, pc}

00024e3c <net_buf_simple_pull_le16>:

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   24e3c:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   24e3e:	6803      	ldr	r3, [r0, #0]
   24e40:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   24e42:	2102      	movs	r1, #2
   24e44:	f7ff ffe2 	bl	24e0c <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   24e48:	4620      	mov	r0, r4
   24e4a:	bd10      	pop	{r4, pc}

00024e4c <net_buf_simple_pull_be16>:

uint16_t net_buf_simple_pull_be16(struct net_buf_simple *buf)
{
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   24e4c:	6803      	ldr	r3, [r0, #0]
{
   24e4e:	b510      	push	{r4, lr}
   24e50:	881c      	ldrh	r4, [r3, #0]
   24e52:	ba64      	rev16	r4, r4
   24e54:	b2a4      	uxth	r4, r4
	net_buf_simple_pull(buf, sizeof(val));
   24e56:	2102      	movs	r1, #2
   24e58:	f7ff ffd8 	bl	24e0c <net_buf_simple_pull>

	return sys_be16_to_cpu(val);
}
   24e5c:	4620      	mov	r0, r4
   24e5e:	bd10      	pop	{r4, pc}

00024e60 <net_buf_simple_pull_le32>:

	return sys_be24_to_cpu(val.u24);
}

uint32_t net_buf_simple_pull_le32(struct net_buf_simple *buf)
{
   24e60:	b510      	push	{r4, lr}
	uint32_t val;

	val = UNALIGNED_GET((uint32_t *)buf->data);
   24e62:	6803      	ldr	r3, [r0, #0]
   24e64:	681c      	ldr	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   24e66:	2104      	movs	r1, #4
   24e68:	f7ff ffd0 	bl	24e0c <net_buf_simple_pull>

	return sys_le32_to_cpu(val);
}
   24e6c:	4620      	mov	r0, r4
   24e6e:	bd10      	pop	{r4, pc}

00024e70 <net_buf_simple_pull_be32>:

uint32_t net_buf_simple_pull_be32(struct net_buf_simple *buf)
{
   24e70:	b510      	push	{r4, lr}
   24e72:	6803      	ldr	r3, [r0, #0]
   24e74:	681c      	ldr	r4, [r3, #0]
	uint32_t val;

	val = UNALIGNED_GET((uint32_t *)buf->data);
	net_buf_simple_pull(buf, sizeof(val));
   24e76:	2104      	movs	r1, #4
   24e78:	ba24      	rev	r4, r4
   24e7a:	f7ff ffc7 	bl	24e0c <net_buf_simple_pull>

	return sys_be32_to_cpu(val);
}
   24e7e:	4620      	mov	r0, r4
   24e80:	bd10      	pop	{r4, pc}

00024e82 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   24e82:	6802      	ldr	r2, [r0, #0]
   24e84:	6880      	ldr	r0, [r0, #8]
}
   24e86:	1a10      	subs	r0, r2, r0
   24e88:	4770      	bx	lr

00024e8a <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   24e8a:	8883      	ldrh	r3, [r0, #4]
   24e8c:	88c2      	ldrh	r2, [r0, #6]
   24e8e:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   24e90:	6803      	ldr	r3, [r0, #0]
   24e92:	6880      	ldr	r0, [r0, #8]
   24e94:	1a18      	subs	r0, r3, r0
}
   24e96:	1a10      	subs	r0, r2, r0
   24e98:	4770      	bx	lr

00024e9a <ep_ctx_reset>:
	ep_ctx->buf.data = ep_ctx->buf.block.data;
   24e9a:	6903      	ldr	r3, [r0, #16]
{
   24e9c:	b510      	push	{r4, lr}
	ep_ctx->buf.curr = ep_ctx->buf.data;
   24e9e:	e9c0 3305 	strd	r3, r3, [r0, #20]
	ep_ctx->buf.len  = 0U;
   24ea2:	2300      	movs	r3, #0
   24ea4:	60c3      	str	r3, [r0, #12]
	if (ep_ctx->write_in_progress) {
   24ea6:	7f83      	ldrb	r3, [r0, #30]
{
   24ea8:	4604      	mov	r4, r0
	if (ep_ctx->write_in_progress) {
   24eaa:	b113      	cbz	r3, 24eb2 <ep_ctx_reset+0x18>
		nrfx_usbd_ep_abort(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   24eac:	7a40      	ldrb	r0, [r0, #9]
   24eae:	f000 fc68 	bl	25782 <nrfx_usbd_ep_abort>
	ep_ctx->read_complete = true;
   24eb2:	2301      	movs	r3, #1
   24eb4:	7723      	strb	r3, [r4, #28]
	ep_ctx->read_pending = false;
   24eb6:	2300      	movs	r3, #0
   24eb8:	7763      	strb	r3, [r4, #29]
	ep_ctx->trans_zlp = false;
   24eba:	77e3      	strb	r3, [r4, #31]
	ep_ctx->write_in_progress = false;
   24ebc:	77a3      	strb	r3, [r4, #30]
}
   24ebe:	bd10      	pop	{r4, pc}

00024ec0 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   24ec0:	f7f6 b934 	b.w	1b12c <z_impl_k_mutex_lock>

00024ec4 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   24ec4:	f7f6 b9aa 	b.w	1b21c <z_impl_k_mutex_unlock>

00024ec8 <usb_dc_ep_check_cap>:
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
   24ec8:	7803      	ldrb	r3, [r0, #0]
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
   24eca:	7901      	ldrb	r1, [r0, #4]
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
   24ecc:	f003 020f 	and.w	r2, r3, #15
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
   24ed0:	b921      	cbnz	r1, 24edc <usb_dc_ep_check_cap+0x14>
   24ed2:	1e10      	subs	r0, r2, #0
   24ed4:	bf18      	it	ne
   24ed6:	2001      	movne	r0, #1
   24ed8:	4240      	negs	r0, r0
   24eda:	4770      	bx	lr
	if (!NRF_USBD_EP_VALIDATE(ep_cfg->ep_addr)) {
   24edc:	2a08      	cmp	r2, #8
   24ede:	d806      	bhi.n	24eee <usb_dc_ep_check_cap+0x26>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
   24ee0:	2901      	cmp	r1, #1
   24ee2:	d107      	bne.n	24ef4 <usb_dc_ep_check_cap+0x2c>
   24ee4:	f083 0008 	eor.w	r0, r3, #8
   24ee8:	f340 00c0 	sbfx	r0, r0, #3, #1
   24eec:	4770      	bx	lr
		return -1;
   24eee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24ef2:	4770      	bx	lr
	return 0;
   24ef4:	2000      	movs	r0, #0
}
   24ef6:	4770      	bx	lr

00024ef8 <usb_dc_ep_read>:
{
   24ef8:	b570      	push	{r4, r5, r6, lr}
   24efa:	4604      	mov	r4, r0
   24efc:	460e      	mov	r6, r1
   24efe:	4615      	mov	r5, r2
	ret = usb_dc_ep_read_wait(ep, data, max_data_len, read_bytes);
   24f00:	f7f2 fde2 	bl	17ac8 <usb_dc_ep_read_wait>
	if (ret) {
   24f04:	b930      	cbnz	r0, 24f14 <usb_dc_ep_read+0x1c>
	if (!data && !max_data_len) {
   24f06:	b906      	cbnz	r6, 24f0a <usb_dc_ep_read+0x12>
   24f08:	b125      	cbz	r5, 24f14 <usb_dc_ep_read+0x1c>
	ret = usb_dc_ep_read_continue(ep);
   24f0a:	4620      	mov	r0, r4
}
   24f0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ret = usb_dc_ep_read_continue(ep);
   24f10:	f7f2 be22 	b.w	17b58 <usb_dc_ep_read_continue>
}
   24f14:	bd70      	pop	{r4, r5, r6, pc}

00024f16 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   24f16:	6903      	ldr	r3, [r0, #16]
   24f18:	b2c9      	uxtb	r1, r1
   24f1a:	220c      	movs	r2, #12
   24f1c:	fb01 3302 	mla	r3, r1, r2, r3
   24f20:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   24f22:	f000 0007 	and.w	r0, r0, #7
   24f26:	4770      	bx	lr

00024f28 <set_on_state>:
	__asm__ volatile(
   24f28:	f04f 0320 	mov.w	r3, #32
   24f2c:	f3ef 8211 	mrs	r2, BASEPRI
   24f30:	f383 8812 	msr	BASEPRI_MAX, r3
   24f34:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   24f38:	6803      	ldr	r3, [r0, #0]
   24f3a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   24f3e:	f043 0302 	orr.w	r3, r3, #2
   24f42:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   24f44:	f382 8811 	msr	BASEPRI, r2
   24f48:	f3bf 8f6f 	isb	sy
}
   24f4c:	4770      	bx	lr

00024f4e <stop>:
{
   24f4e:	4603      	mov	r3, r0
   24f50:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
   24f52:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   24f54:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   24f56:	f04f 0420 	mov.w	r4, #32
   24f5a:	f3ef 8611 	mrs	r6, BASEPRI
   24f5e:	f384 8812 	msr	BASEPRI_MAX, r4
   24f62:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   24f66:	250c      	movs	r5, #12
   24f68:	fb05 0401 	mla	r4, r5, r1, r0
   24f6c:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   24f6e:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   24f72:	d001      	beq.n	24f78 <stop+0x2a>
   24f74:	42a2      	cmp	r2, r4
   24f76:	d110      	bne.n	24f9a <stop+0x4c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   24f78:	fb05 0001 	mla	r0, r5, r1, r0
   24f7c:	2201      	movs	r2, #1
   24f7e:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
   24f80:	2000      	movs	r0, #0
	__asm__ volatile(
   24f82:	f386 8811 	msr	BASEPRI, r6
   24f86:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   24f8a:	b928      	cbnz	r0, 24f98 <stop+0x4a>
	get_sub_config(dev, type)->stop();
   24f8c:	685b      	ldr	r3, [r3, #4]
   24f8e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   24f92:	684b      	ldr	r3, [r1, #4]
   24f94:	4798      	blx	r3
	return 0;
   24f96:	2000      	movs	r0, #0
}
   24f98:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
   24f9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24f9e:	e7f0      	b.n	24f82 <stop+0x34>

00024fa0 <api_stop>:
	return stop(dev, subsys, CTX_API);
   24fa0:	2280      	movs	r2, #128	; 0x80
   24fa2:	f7ff bfd4 	b.w	24f4e <stop>

00024fa6 <async_start>:
{
   24fa6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24fa8:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   24faa:	6904      	ldr	r4, [r0, #16]
{
   24fac:	4605      	mov	r5, r0
   24fae:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   24fb0:	f04f 0020 	mov.w	r0, #32
   24fb4:	f3ef 8c11 	mrs	ip, BASEPRI
   24fb8:	f380 8812 	msr	BASEPRI_MAX, r0
   24fbc:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   24fc0:	260c      	movs	r6, #12
   24fc2:	fb06 4601 	mla	r6, r6, r1, r4
   24fc6:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   24fc8:	f000 0e07 	and.w	lr, r0, #7
   24fcc:	f1be 0f01 	cmp.w	lr, #1
   24fd0:	d111      	bne.n	24ff6 <async_start+0x50>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   24fd2:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
   24fd4:	2600      	movs	r6, #0
	__asm__ volatile(
   24fd6:	f38c 8811 	msr	BASEPRI, ip
   24fda:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   24fde:	b946      	cbnz	r6, 24ff2 <async_start+0x4c>
	subdata->cb = cb;
   24fe0:	200c      	movs	r0, #12
   24fe2:	fb00 4401 	mla	r4, r0, r1, r4
	subdata->user_data = user_data;
   24fe6:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   24fea:	686b      	ldr	r3, [r5, #4]
   24fec:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
   24ff0:	4798      	blx	r3
}
   24ff2:	4630      	mov	r0, r6
   24ff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   24ff6:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
   24ffa:	4287      	cmp	r7, r0
   24ffc:	bf14      	ite	ne
   24ffe:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
   25002:	f06f 0677 	mvneq.w	r6, #119	; 0x77
   25006:	e7e6      	b.n	24fd6 <async_start+0x30>

00025008 <api_start>:
{
   25008:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   2500a:	2480      	movs	r4, #128	; 0x80
   2500c:	9400      	str	r4, [sp, #0]
   2500e:	f7ff ffca 	bl	24fa6 <async_start>
}
   25012:	b002      	add	sp, #8
   25014:	bd10      	pop	{r4, pc}

00025016 <onoff_started_callback>:
	return &data->mgr[type];
   25016:	6900      	ldr	r0, [r0, #16]
{
   25018:	b410      	push	{r4}
	return &data->mgr[type];
   2501a:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   2501c:	241c      	movs	r4, #28
   2501e:	fb03 0004 	mla	r0, r3, r4, r0
   25022:	2100      	movs	r1, #0
}
   25024:	bc10      	pop	{r4}
	notify(mgr, 0);
   25026:	4710      	bx	r2

00025028 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   25028:	2000      	movs	r0, #0
   2502a:	f000 ba48 	b.w	254be <nrfx_clock_start>

0002502e <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   2502e:	2000      	movs	r0, #0
   25030:	f7f4 ba08 	b.w	19444 <nrfx_clock_stop>

00025034 <blocking_start_callback>:
{
   25034:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   25036:	f7f6 b967 	b.w	1b308 <z_impl_k_sem_give>

0002503a <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2503a:	6843      	ldr	r3, [r0, #4]
   2503c:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   2503e:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   25042:	600b      	str	r3, [r1, #0]
}
   25044:	2000      	movs	r0, #0
   25046:	4770      	bx	lr

00025048 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   25048:	6843      	ldr	r3, [r0, #4]
   2504a:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   2504c:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   25050:	4042      	eors	r2, r0
   25052:	400a      	ands	r2, r1
   25054:	4042      	eors	r2, r0
    p_reg->OUT = value;
   25056:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   2505a:	2000      	movs	r0, #0
   2505c:	4770      	bx	lr

0002505e <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2505e:	6843      	ldr	r3, [r0, #4]
   25060:	685b      	ldr	r3, [r3, #4]
}
   25062:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   25064:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   25068:	4770      	bx	lr

0002506a <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2506a:	6843      	ldr	r3, [r0, #4]
   2506c:	685b      	ldr	r3, [r3, #4]
}
   2506e:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   25070:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   25074:	4770      	bx	lr

00025076 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   25076:	6843      	ldr	r3, [r0, #4]
   25078:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   2507a:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   2507e:	404b      	eors	r3, r1
    p_reg->OUT = value;
   25080:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   25084:	2000      	movs	r0, #0
   25086:	4770      	bx	lr

00025088 <gpio_nrfx_manage_callback>:
	return port->data;
   25088:	6903      	ldr	r3, [r0, #16]
	return list->head;
   2508a:	6858      	ldr	r0, [r3, #4]
{
   2508c:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   2508e:	b158      	cbz	r0, 250a8 <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   25090:	2400      	movs	r4, #0
   25092:	4281      	cmp	r1, r0
   25094:	d112      	bne.n	250bc <gpio_nrfx_manage_callback+0x34>
	return node->next;
   25096:	6808      	ldr	r0, [r1, #0]
	return list->tail;
   25098:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
   2509a:	b954      	cbnz	r4, 250b2 <gpio_nrfx_manage_callback+0x2a>
   2509c:	428d      	cmp	r5, r1
	list->head = node;
   2509e:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   250a0:	d100      	bne.n	250a4 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   250a2:	6098      	str	r0, [r3, #8]
	parent->next = child;
   250a4:	2000      	movs	r0, #0
   250a6:	6008      	str	r0, [r1, #0]
	if (set) {
   250a8:	b96a      	cbnz	r2, 250c6 <gpio_nrfx_manage_callback+0x3e>
	return 0;
   250aa:	2000      	movs	r0, #0
}
   250ac:	bd30      	pop	{r4, r5, pc}
   250ae:	4628      	mov	r0, r5
   250b0:	e7ef      	b.n	25092 <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
   250b2:	428d      	cmp	r5, r1
	parent->next = child;
   250b4:	6020      	str	r0, [r4, #0]
	list->tail = node;
   250b6:	bf08      	it	eq
   250b8:	609c      	streq	r4, [r3, #8]
}
   250ba:	e7f3      	b.n	250a4 <gpio_nrfx_manage_callback+0x1c>
	return node->next;
   250bc:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   250be:	4604      	mov	r4, r0
   250c0:	2d00      	cmp	r5, #0
   250c2:	d1f4      	bne.n	250ae <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   250c4:	b13a      	cbz	r2, 250d6 <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
   250c6:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
   250c8:	685a      	ldr	r2, [r3, #4]
   250ca:	600a      	str	r2, [r1, #0]
	list->head = node;
   250cc:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   250ce:	2800      	cmp	r0, #0
   250d0:	d1eb      	bne.n	250aa <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   250d2:	6099      	str	r1, [r3, #8]
}
   250d4:	e7ea      	b.n	250ac <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   250d6:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   250da:	e7e7      	b.n	250ac <gpio_nrfx_manage_callback+0x24>

000250dc <z_impl_hwinfo_get_device_id>:
struct nrf_uid {
	uint32_t id[2];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
   250dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
NRF_STATIC_INLINE uint32_t nrf_ficr_deviceid_get(NRF_FICR_Type const * p_reg, uint32_t reg_id)
{
#if defined(FICR_INFO_DEVICEID_DEVICEID_Msk)
    return p_reg->INFO.DEVICEID[reg_id];
#else
    return p_reg->DEVICEID[reg_id];
   250de:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
   250e2:	2908      	cmp	r1, #8
   250e4:	6e66      	ldr	r6, [r4, #100]	; 0x64
   250e6:	6e65      	ldr	r5, [r4, #100]	; 0x64
   250e8:	6e62      	ldr	r2, [r4, #100]	; 0x64
   250ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
	struct nrf_uid dev_id;

	dev_id.id[0] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 1));
   250ec:	ea4f 2515 	mov.w	r5, r5, lsr #8
   250f0:	ea4f 6303 	mov.w	r3, r3, lsl #24
   250f4:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
   250f8:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
   250fc:	ea4f 2202 	mov.w	r2, r2, lsl #8
   25100:	ea43 0305 	orr.w	r3, r3, r5
   25104:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
   25108:	ea43 0302 	orr.w	r3, r3, r2
   2510c:	9300      	str	r3, [sp, #0]
   2510e:	6e26      	ldr	r6, [r4, #96]	; 0x60
   25110:	6e25      	ldr	r5, [r4, #96]	; 0x60
   25112:	6e22      	ldr	r2, [r4, #96]	; 0x60
   25114:	6e23      	ldr	r3, [r4, #96]	; 0x60
	dev_id.id[1] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 0));
   25116:	ea4f 2415 	mov.w	r4, r5, lsr #8
   2511a:	ea4f 6303 	mov.w	r3, r3, lsl #24
   2511e:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
   25122:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
   25126:	ea43 0304 	orr.w	r3, r3, r4
   2512a:	ea4f 2402 	mov.w	r4, r2, lsl #8
   2512e:	bf28      	it	cs
   25130:	2108      	movcs	r1, #8
   25132:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
   25136:	4323      	orrs	r3, r4

	if (length > sizeof(dev_id.id)) {
		length = sizeof(dev_id.id);
	}

	memcpy(buffer, dev_id.id, length);
   25138:	460a      	mov	r2, r1
   2513a:	460c      	mov	r4, r1
   2513c:	4669      	mov	r1, sp
	dev_id.id[1] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 0));
   2513e:	9301      	str	r3, [sp, #4]
	memcpy(buffer, dev_id.id, length);
   25140:	f7f8 ff77 	bl	1e032 <memcpy>

	return length;
}
   25144:	4620      	mov	r0, r4
   25146:	b002      	add	sp, #8
   25148:	bd70      	pop	{r4, r5, r6, pc}

0002514a <is_regular_addr_valid>:
{
   2514a:	b538      	push	{r3, r4, r5, lr}
   2514c:	4605      	mov	r5, r0
   2514e:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
   25150:	f000 fa37 	bl	255c2 <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
   25154:	2d00      	cmp	r5, #0
   25156:	db07      	blt.n	25168 <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
   25158:	42a8      	cmp	r0, r5
   2515a:	d905      	bls.n	25168 <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
   2515c:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
   2515e:	4284      	cmp	r4, r0
   25160:	bf8c      	ite	hi
   25162:	2000      	movhi	r0, #0
   25164:	2001      	movls	r0, #1
}
   25166:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
   25168:	2000      	movs	r0, #0
   2516a:	e7fc      	b.n	25166 <is_regular_addr_valid+0x1c>

0002516c <flash_nrf_read>:
{
   2516c:	b570      	push	{r4, r5, r6, lr}
   2516e:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   25170:	4628      	mov	r0, r5
   25172:	4619      	mov	r1, r3
{
   25174:	4616      	mov	r6, r2
   25176:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   25178:	f7ff ffe7 	bl	2514a <is_regular_addr_valid>
   2517c:	b138      	cbz	r0, 2518e <flash_nrf_read+0x22>
	if (!len) {
   2517e:	b14c      	cbz	r4, 25194 <flash_nrf_read+0x28>
	memcpy(data, (void *)addr, len);
   25180:	4622      	mov	r2, r4
   25182:	4629      	mov	r1, r5
   25184:	4630      	mov	r0, r6
   25186:	f7f8 ff54 	bl	1e032 <memcpy>
	return 0;
   2518a:	2000      	movs	r0, #0
}
   2518c:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2518e:	f06f 0015 	mvn.w	r0, #21
   25192:	e7fb      	b.n	2518c <flash_nrf_read+0x20>
		return 0;
   25194:	4620      	mov	r0, r4
   25196:	e7f9      	b.n	2518c <flash_nrf_read+0x20>

00025198 <nrf_flash_sync_is_required>:
	return ticker_is_initialized(0);
   25198:	2000      	movs	r0, #0
   2519a:	f7eb badb 	b.w	10754 <ticker_is_initialized>

0002519e <uarte_nrfx_config_get>:
	*cfg = data->uart_config;
   2519e:	6902      	ldr	r2, [r0, #16]
{
   251a0:	460b      	mov	r3, r1
	*cfg = data->uart_config;
   251a2:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   251a6:	e883 0003 	stmia.w	r3, {r0, r1}
}
   251aa:	2000      	movs	r0, #0
   251ac:	4770      	bx	lr

000251ae <uarte_nrfx_err_check>:
	return config->uarte_regs;
   251ae:	6843      	ldr	r3, [r0, #4]
   251b0:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   251b2:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   251b6:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   251ba:	4770      	bx	lr

000251bc <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   251bc:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   251be:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   251c0:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   251c2:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   251c6:	b148      	cbz	r0, 251dc <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
   251c8:	7d52      	ldrb	r2, [r2, #21]
   251ca:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   251cc:	2000      	movs	r0, #0
   251ce:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   251d2:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   251d6:	2201      	movs	r2, #1
   251d8:	601a      	str	r2, [r3, #0]
	return 0;
   251da:	4770      	bx	lr
		return -1;
   251dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   251e0:	4770      	bx	lr

000251e2 <uarte_nrfx_fifo_read>:
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   251e2:	2a00      	cmp	r2, #0
{
   251e4:	b510      	push	{r4, lr}
   251e6:	4604      	mov	r4, r0
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   251e8:	dd0f      	ble.n	2520a <uarte_nrfx_fifo_read+0x28>
	return config->uarte_regs;
   251ea:	6843      	ldr	r3, [r0, #4]
   251ec:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   251ee:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   251f2:	b148      	cbz	r0, 25208 <uarte_nrfx_fifo_read+0x26>
	const struct uarte_nrfx_data *data = dev->data;
   251f4:	6922      	ldr	r2, [r4, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   251f6:	2000      	movs	r0, #0
   251f8:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   251fc:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
		rx_data[num_rx++] = (uint8_t)data->rx_data;
   25200:	7d52      	ldrb	r2, [r2, #21]
   25202:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   25204:	2001      	movs	r0, #1
   25206:	6018      	str	r0, [r3, #0]
}
   25208:	bd10      	pop	{r4, pc}
	int num_rx = 0;
   2520a:	2000      	movs	r0, #0
   2520c:	e7fc      	b.n	25208 <uarte_nrfx_fifo_read+0x26>

0002520e <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
   2520e:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   25210:	6901      	ldr	r1, [r0, #16]
	return config->uarte_regs;
   25212:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   25214:	f04f 0020 	mov.w	r0, #32
   25218:	f3ef 8311 	mrs	r3, BASEPRI
   2521c:	f380 8812 	msr	BASEPRI_MAX, r0
   25220:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   25224:	68c9      	ldr	r1, [r1, #12]
   25226:	2000      	movs	r0, #0
   25228:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   2522a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   2522e:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   25232:	f383 8811 	msr	BASEPRI, r3
   25236:	f3bf 8f6f 	isb	sy
}
   2523a:	4770      	bx	lr

0002523c <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   2523c:	6903      	ldr	r3, [r0, #16]
   2523e:	68db      	ldr	r3, [r3, #12]
   25240:	2201      	movs	r2, #1
   25242:	739a      	strb	r2, [r3, #14]
}
   25244:	4770      	bx	lr

00025246 <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
   25246:	6903      	ldr	r3, [r0, #16]
   25248:	68db      	ldr	r3, [r3, #12]
   2524a:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   2524c:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   25250:	b962      	cbnz	r2, 2526c <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
   25252:	6842      	ldr	r2, [r0, #4]
   25254:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   25256:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   2525a:	b140      	cbz	r0, 2526e <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
   2525c:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
	if (ready) {
   25260:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   25264:	d003      	beq.n	2526e <uarte_nrfx_irq_tx_ready_complete+0x28>
		data->int_driven->fifo_fill_lock = 0;
   25266:	6119      	str	r1, [r3, #16]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   25268:	2001      	movs	r0, #1
   2526a:	4770      	bx	lr
   2526c:	2000      	movs	r0, #0
}
   2526e:	4770      	bx	lr

00025270 <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   25270:	6843      	ldr	r3, [r0, #4]
   25272:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   25274:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   25278:	3800      	subs	r0, #0
   2527a:	bf18      	it	ne
   2527c:	2001      	movne	r0, #1
   2527e:	4770      	bx	lr

00025280 <uarte_nrfx_irq_rx_enable>:
	return config->uarte_regs;
   25280:	6843      	ldr	r3, [r0, #4]
   25282:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   25284:	2210      	movs	r2, #16
   25286:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2528a:	4770      	bx	lr

0002528c <uarte_nrfx_irq_rx_disable>:
	return config->uarte_regs;
   2528c:	6843      	ldr	r3, [r0, #4]
   2528e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   25290:	2210      	movs	r2, #16
   25292:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   25296:	4770      	bx	lr

00025298 <uarte_nrfx_irq_err_enable>:
	return config->uarte_regs;
   25298:	6843      	ldr	r3, [r0, #4]
   2529a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   2529c:	f44f 7200 	mov.w	r2, #512	; 0x200
   252a0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   252a4:	4770      	bx	lr

000252a6 <uarte_nrfx_irq_err_disable>:
	return config->uarte_regs;
   252a6:	6843      	ldr	r3, [r0, #4]
   252a8:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   252aa:	f44f 7200 	mov.w	r2, #512	; 0x200
   252ae:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   252b2:	4770      	bx	lr

000252b4 <uarte_nrfx_irq_update>:
}
   252b4:	2001      	movs	r0, #1
   252b6:	4770      	bx	lr

000252b8 <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   252b8:	6903      	ldr	r3, [r0, #16]
   252ba:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
   252bc:	e9c3 1200 	strd	r1, r2, [r3]
}
   252c0:	4770      	bx	lr

000252c2 <uarte_nrfx_irq_is_pending>:
{
   252c2:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   252c4:	6843      	ldr	r3, [r0, #4]
   252c6:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   252c8:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   252cc:	025b      	lsls	r3, r3, #9
{
   252ce:	4604      	mov	r4, r0
		||
   252d0:	d405      	bmi.n	252de <uarte_nrfx_irq_is_pending+0x1c>
   252d2:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
   252d6:	f010 0010 	ands.w	r0, r0, #16
   252da:	d106      	bne.n	252ea <uarte_nrfx_irq_is_pending+0x28>
}
   252dc:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   252de:	f7ff ffb2 	bl	25246 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   252e2:	2800      	cmp	r0, #0
   252e4:	d0f5      	beq.n	252d2 <uarte_nrfx_irq_is_pending+0x10>
		||
   252e6:	2001      	movs	r0, #1
   252e8:	e7f8      	b.n	252dc <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   252ea:	4620      	mov	r0, r4
   252ec:	f7ff ffc0 	bl	25270 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   252f0:	3800      	subs	r0, #0
   252f2:	bf18      	it	ne
   252f4:	2001      	movne	r0, #1
   252f6:	e7f1      	b.n	252dc <uarte_nrfx_irq_is_pending+0x1a>

000252f8 <nrf_gpio_cfg_input>:
{
   252f8:	b507      	push	{r0, r1, r2, lr}
   252fa:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   252fc:	a801      	add	r0, sp, #4
   252fe:	f7f3 f9b9 	bl	18674 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   25302:	9b01      	ldr	r3, [sp, #4]
   25304:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   25308:	0089      	lsls	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
   2530a:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
}
   2530e:	b003      	add	sp, #12
   25310:	f85d fb04 	ldr.w	pc, [sp], #4

00025314 <tx_start.isra.0>:
	return config->uarte_regs;
   25314:	6803      	ldr	r3, [r0, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   25316:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2531a:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2531e:	2200      	movs	r2, #0
   25320:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   25324:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   25328:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   2532c:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   25330:	6842      	ldr	r2, [r0, #4]
   25332:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   25334:	bf41      	itttt	mi
   25336:	2208      	movmi	r2, #8
   25338:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
   2533c:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
   25340:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   25344:	2201      	movs	r2, #1
   25346:	609a      	str	r2, [r3, #8]
}
   25348:	4770      	bx	lr

0002534a <is_tx_ready.isra.0>:
	return config->uarte_regs;
   2534a:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   2534c:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2534e:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   25352:	b940      	cbnz	r0, 25366 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   25354:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   25356:	079b      	lsls	r3, r3, #30
   25358:	d406      	bmi.n	25368 <is_tx_ready.isra.0+0x1e>
   2535a:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   2535e:	3800      	subs	r0, #0
   25360:	bf18      	it	ne
   25362:	2001      	movne	r0, #1
   25364:	4770      	bx	lr
   25366:	2001      	movs	r0, #1
}
   25368:	4770      	bx	lr

0002536a <uarte_nrfx_fifo_fill>:
{
   2536a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
   2536c:	6906      	ldr	r6, [r0, #16]
	len = MIN(len, data->int_driven->tx_buff_size);
   2536e:	68f3      	ldr	r3, [r6, #12]
   25370:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   25372:	f3bf 8f5b 	dmb	ish
   25376:	4294      	cmp	r4, r2
   25378:	bfa8      	it	ge
   2537a:	4614      	movge	r4, r2
{
   2537c:	4605      	mov	r5, r0
   2537e:	3310      	adds	r3, #16
   25380:	2201      	movs	r2, #1
   25382:	e853 0f00 	ldrex	r0, [r3]
   25386:	2800      	cmp	r0, #0
   25388:	d103      	bne.n	25392 <uarte_nrfx_fifo_fill+0x28>
   2538a:	e843 2700 	strex	r7, r2, [r3]
   2538e:	2f00      	cmp	r7, #0
   25390:	d1f7      	bne.n	25382 <uarte_nrfx_fifo_fill+0x18>
   25392:	f3bf 8f5b 	dmb	ish
   25396:	bf0c      	ite	eq
   25398:	4613      	moveq	r3, r2
   2539a:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   2539c:	d01d      	beq.n	253da <uarte_nrfx_fifo_fill+0x70>
		return 0;
   2539e:	461c      	mov	r4, r3
}
   253a0:	4620      	mov	r0, r4
   253a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   253a4:	68f2      	ldr	r2, [r6, #12]
   253a6:	5cc8      	ldrb	r0, [r1, r3]
   253a8:	6892      	ldr	r2, [r2, #8]
   253aa:	54d0      	strb	r0, [r2, r3]
	for (int i = 0; i < len; i++) {
   253ac:	3301      	adds	r3, #1
   253ae:	42a3      	cmp	r3, r4
   253b0:	dbf8      	blt.n	253a4 <uarte_nrfx_fifo_fill+0x3a>
	__asm__ volatile(
   253b2:	f04f 0320 	mov.w	r3, #32
   253b6:	f3ef 8711 	mrs	r7, BASEPRI
   253ba:	f383 8812 	msr	BASEPRI_MAX, r3
   253be:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   253c2:	6868      	ldr	r0, [r5, #4]
   253c4:	f7ff ffc1 	bl	2534a <is_tx_ready.isra.0>
   253c8:	68f3      	ldr	r3, [r6, #12]
   253ca:	b940      	cbnz	r0, 253de <uarte_nrfx_fifo_fill+0x74>
		data->int_driven->fifo_fill_lock = 0;
   253cc:	6118      	str	r0, [r3, #16]
		len = 0;
   253ce:	4604      	mov	r4, r0
	__asm__ volatile(
   253d0:	f387 8811 	msr	BASEPRI, r7
   253d4:	f3bf 8f6f 	isb	sy
	return len;
   253d8:	e7e2      	b.n	253a0 <uarte_nrfx_fifo_fill+0x36>
	for (int i = 0; i < len; i++) {
   253da:	2300      	movs	r3, #0
   253dc:	e7e7      	b.n	253ae <uarte_nrfx_fifo_fill+0x44>
		tx_start(dev, data->int_driven->tx_buffer, len);
   253de:	6899      	ldr	r1, [r3, #8]
   253e0:	6868      	ldr	r0, [r5, #4]
   253e2:	4622      	mov	r2, r4
   253e4:	f7ff ff96 	bl	25314 <tx_start.isra.0>
   253e8:	e7f2      	b.n	253d0 <uarte_nrfx_fifo_fill+0x66>

000253ea <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
   253ea:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   253ec:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   253ee:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   253f2:	05c9      	lsls	r1, r1, #23
{
   253f4:	b410      	push	{r4}
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   253f6:	d518      	bpl.n	2542a <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   253f8:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   253fc:	b1a9      	cbz	r1, 2542a <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
   253fe:	f04f 0420 	mov.w	r4, #32
   25402:	f3ef 8111 	mrs	r1, BASEPRI
   25406:	f384 8812 	msr	BASEPRI_MAX, r4
   2540a:	f3bf 8f6f 	isb	sy
   2540e:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   25412:	b134      	cbz	r4, 25422 <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   25414:	2400      	movs	r4, #0
   25416:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
   2541a:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2541e:	2401      	movs	r4, #1
   25420:	60dc      	str	r4, [r3, #12]
	__asm__ volatile(
   25422:	f381 8811 	msr	BASEPRI, r1
   25426:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2542a:	6852      	ldr	r2, [r2, #4]
   2542c:	06d2      	lsls	r2, r2, #27
   2542e:	d51a      	bpl.n	25466 <uarte_nrfx_isr_int+0x7c>
	__asm__ volatile(
   25430:	f04f 0220 	mov.w	r2, #32
   25434:	f3ef 8111 	mrs	r1, BASEPRI
   25438:	f382 8812 	msr	BASEPRI_MAX, r2
   2543c:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   25440:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   25444:	b112      	cbz	r2, 2544c <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   25446:	2200      	movs	r2, #0
   25448:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
   2544c:	6902      	ldr	r2, [r0, #16]
   2544e:	68d2      	ldr	r2, [r2, #12]
   25450:	b10a      	cbz	r2, 25456 <uarte_nrfx_isr_int+0x6c>
   25452:	6912      	ldr	r2, [r2, #16]
   25454:	b91a      	cbnz	r2, 2545e <uarte_nrfx_isr_int+0x74>
    p_reg->INTENCLR = mask;
   25456:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   2545a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	__asm__ volatile(
   2545e:	f381 8811 	msr	BASEPRI, r1
   25462:	f3bf 8f6f 	isb	sy
	if (!data->int_driven) {
   25466:	6902      	ldr	r2, [r0, #16]
   25468:	68d2      	ldr	r2, [r2, #12]
   2546a:	b15a      	cbz	r2, 25484 <uarte_nrfx_isr_int+0x9a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2546c:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   25470:	b151      	cbz	r1, 25488 <uarte_nrfx_isr_int+0x9e>
		if (data->int_driven->disable_tx_irq) {
   25472:	7b94      	ldrb	r4, [r2, #14]
		data->int_driven->fifo_fill_lock = 0;
   25474:	2100      	movs	r1, #0
   25476:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
   25478:	b134      	cbz	r4, 25488 <uarte_nrfx_isr_int+0x9e>
    p_reg->INTENCLR = mask;
   2547a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   2547e:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   25482:	7391      	strb	r1, [r2, #14]
}
   25484:	bc10      	pop	{r4}
   25486:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   25488:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   2548c:	b121      	cbz	r1, 25498 <uarte_nrfx_isr_int+0xae>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2548e:	2100      	movs	r1, #0
   25490:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
   25494:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   25498:	6813      	ldr	r3, [r2, #0]
   2549a:	2b00      	cmp	r3, #0
   2549c:	d0f2      	beq.n	25484 <uarte_nrfx_isr_int+0x9a>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   2549e:	6851      	ldr	r1, [r2, #4]
}
   254a0:	bc10      	pop	{r4}
		data->int_driven->cb(dev, data->int_driven->cb_data);
   254a2:	4718      	bx	r3

000254a4 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   254a4:	4770      	bx	lr

000254a6 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   254a6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   254aa:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
   254ae:	f1a0 0308 	sub.w	r3, r0, #8
   254b2:	4258      	negs	r0, r3
   254b4:	4158      	adcs	r0, r3
   254b6:	4770      	bx	lr

000254b8 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   254b8:	4700      	bx	r0

000254ba <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   254ba:	f000 bd79 	b.w	25fb0 <z_impl_k_busy_wait>

000254be <nrfx_clock_start>:
    switch (domain)
   254be:	b110      	cbz	r0, 254c6 <nrfx_clock_start+0x8>
   254c0:	2801      	cmp	r0, #1
   254c2:	d01d      	beq.n	25500 <nrfx_clock_start+0x42>
   254c4:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   254c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   254ca:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   254ce:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   254d2:	03c9      	lsls	r1, r1, #15
   254d4:	d512      	bpl.n	254fc <nrfx_clock_start+0x3e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   254d6:	f002 0203 	and.w	r2, r2, #3
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   254da:	2a01      	cmp	r2, #1
   254dc:	d10e      	bne.n	254fc <nrfx_clock_start+0x3e>
    p_reg->LFCLKSRC = (uint32_t)(source);
   254de:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   254e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   254e6:	2200      	movs	r2, #0
   254e8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   254ec:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
   254f0:	2202      	movs	r2, #2
   254f2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   254f6:	2201      	movs	r2, #1
   254f8:	609a      	str	r2, [r3, #8]
}
   254fa:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
   254fc:	2200      	movs	r2, #0
   254fe:	e7ee      	b.n	254de <nrfx_clock_start+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   25500:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   25504:	2200      	movs	r2, #0
   25506:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   2550a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   2550e:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   25512:	6018      	str	r0, [r3, #0]
}
   25514:	4770      	bx	lr

00025516 <nrf_gpio_reconfigure>:
{
   25516:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   25518:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2551a:	a801      	add	r0, sp, #4
{
   2551c:	e9dd 4608 	ldrd	r4, r6, [sp, #32]
   25520:	4617      	mov	r7, r2
   25522:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   25524:	f7f3 fffe 	bl	19524 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   25528:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2552a:	2f00      	cmp	r7, #0
   2552c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   25530:	bf14      	ite	ne
   25532:	2302      	movne	r3, #2
   25534:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   25536:	2900      	cmp	r1, #0
   25538:	bf18      	it	ne
   2553a:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2553e:	2d00      	cmp	r5, #0
   25540:	bf14      	ite	ne
   25542:	f04f 0c0c 	movne.w	ip, #12
   25546:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   2554a:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2554c:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   25550:	bf14      	ite	ne
   25552:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
   25556:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   2555a:	2e00      	cmp	r6, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2555c:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
   25560:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   25564:	bf14      	ite	ne
   25566:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
   2556a:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2556e:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
   25572:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   25576:	b101      	cbz	r1, 2557a <nrf_gpio_reconfigure+0x64>
   25578:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   2557a:	b10f      	cbz	r7, 25580 <nrf_gpio_reconfigure+0x6a>
   2557c:	783f      	ldrb	r7, [r7, #0]
   2557e:	007f      	lsls	r7, r7, #1
   25580:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   25582:	b10d      	cbz	r5, 25588 <nrf_gpio_reconfigure+0x72>
   25584:	782d      	ldrb	r5, [r5, #0]
   25586:	00ad      	lsls	r5, r5, #2
   25588:	4339      	orrs	r1, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   2558a:	b10c      	cbz	r4, 25590 <nrf_gpio_reconfigure+0x7a>
   2558c:	7822      	ldrb	r2, [r4, #0]
   2558e:	0214      	lsls	r4, r2, #8
   25590:	430d      	orrs	r5, r1
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   25592:	b10e      	cbz	r6, 25598 <nrf_gpio_reconfigure+0x82>
   25594:	7836      	ldrb	r6, [r6, #0]
   25596:	0436      	lsls	r6, r6, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   25598:	432c      	orrs	r4, r5
   2559a:	4334      	orrs	r4, r6
    reg->PIN_CNF[pin_number] = cnf;
   2559c:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
   255a0:	b003      	add	sp, #12
   255a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000255a4 <nrf_gpio_cfg_sense_set>:
{
   255a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   255a6:	f10d 030f 	add.w	r3, sp, #15
   255aa:	9301      	str	r3, [sp, #4]
   255ac:	2300      	movs	r3, #0
{
   255ae:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   255b2:	9300      	str	r3, [sp, #0]
   255b4:	461a      	mov	r2, r3
   255b6:	4619      	mov	r1, r3
   255b8:	f7ff ffad 	bl	25516 <nrf_gpio_reconfigure>
}
   255bc:	b005      	add	sp, #20
   255be:	f85d fb04 	ldr.w	pc, [sp], #4

000255c2 <nrfx_nvmc_flash_size_get>:
    return p_reg->CODEPAGESIZE;
   255c2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   255c6:	691a      	ldr	r2, [r3, #16]
    return p_reg->CODESIZE;
   255c8:	6958      	ldr	r0, [r3, #20]
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   255ca:	4350      	muls	r0, r2
   255cc:	4770      	bx	lr

000255ce <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
   255ce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   255d2:	6918      	ldr	r0, [r3, #16]

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   255d4:	4770      	bx	lr

000255d6 <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
   255d6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   255da:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   255dc:	4770      	bx	lr

000255de <nrf_power_event_get_and_clear.constprop.0>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   255de:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   255e2:	681a      	ldr	r2, [r3, #0]
   255e4:	2a00      	cmp	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   255e6:	bf1f      	itttt	ne
   255e8:	2200      	movne	r2, #0
   255ea:	601a      	strne	r2, [r3, #0]
   255ec:	681b      	ldrne	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   255ee:	2001      	movne	r0, #1
   255f0:	bf08      	it	eq
   255f2:	2000      	moveq	r0, #0
}
   255f4:	4770      	bx	lr

000255f6 <nrfx_power_usbevt_enable>:
    p_reg->INTENSET = mask;
   255f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   255fa:	f44f 7260 	mov.w	r2, #896	; 0x380
   255fe:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   25602:	4770      	bx	lr

00025604 <nrfx_power_usbevt_disable>:
    p_reg->INTENCLR = mask;
   25604:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   25608:	f44f 7260 	mov.w	r2, #896	; 0x380
   2560c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   25610:	4770      	bx	lr

00025612 <nrfx_power_clock_irq_handler>:
 * a library with nrfx is created. In such case, forcing a linker to use this
 * function instead of another one defined as weak will require additional
 * actions, and might be even impossible.
 */
void nrfx_power_clock_irq_handler(void)
{
   25612:	b508      	push	{r3, lr}
    nrfx_power_irq_handler();
   25614:	f7f4 fb70 	bl	19cf8 <nrfx_power_irq_handler>
    nrfx_clock_irq_handler();
}
   25618:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_irq_handler();
   2561c:	f7f3 bf4e 	b.w	194bc <nrfx_clock_irq_handler>

00025620 <nrf52_errata_166>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   25620:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   25624:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
   25628:	f1a0 0308 	sub.w	r3, r0, #8
   2562c:	4258      	negs	r0, r3
   2562e:	4158      	adcs	r0, r3
   25630:	4770      	bx	lr

00025632 <nrfx_usbd_consumer>:
{
   25632:	b530      	push	{r4, r5, lr}
    size_t size = p_transfer->size;
   25634:	684c      	ldr	r4, [r1, #4]
    if (size < data_size)
   25636:	680d      	ldr	r5, [r1, #0]
   25638:	42a3      	cmp	r3, r4
        p_next->p_data = p_transfer->p_data;
   2563a:	bf97      	itett	ls
   2563c:	e9c0 5300 	strdls	r5, r3, [r0]
        p_next->size = 0;
   25640:	2100      	movhi	r1, #0
        size -= data_size;
   25642:	1ae4      	subls	r4, r4, r3
        p_transfer->p_data.addr += data_size;
   25644:	18ed      	addls	r5, r5, r3
        p_next->p_data = p_transfer->p_data;
   25646:	bf8e      	itee	hi
   25648:	e9c0 5100 	strdhi	r5, r1, [r0]
        p_transfer->size = size;
   2564c:	604c      	strls	r4, [r1, #4]
        p_transfer->p_data.addr += data_size;
   2564e:	600d      	strls	r5, [r1, #0]
    return (ep_size == data_size) && (size != 0);
   25650:	429a      	cmp	r2, r3
   25652:	d103      	bne.n	2565c <nrfx_usbd_consumer+0x2a>
   25654:	1e20      	subs	r0, r4, #0
   25656:	bf18      	it	ne
   25658:	2001      	movne	r0, #1
}
   2565a:	bd30      	pop	{r4, r5, pc}
    return (ep_size == data_size) && (size != 0);
   2565c:	2000      	movs	r0, #0
   2565e:	e7fc      	b.n	2565a <nrfx_usbd_consumer+0x28>

00025660 <nrfx_usbd_feeder_ram>:
    size_t tx_size = p_transfer->size;
   25660:	684b      	ldr	r3, [r1, #4]
{
   25662:	b510      	push	{r4, lr}
   25664:	429a      	cmp	r2, r3
    p_next->p_data = p_transfer->p_data;
   25666:	680c      	ldr	r4, [r1, #0]
   25668:	bf28      	it	cs
   2566a:	461a      	movcs	r2, r3
    p_next->size = tx_size;
   2566c:	e9c0 4200 	strd	r4, r2, [r0]
    p_transfer->size -= tx_size;
   25670:	1a98      	subs	r0, r3, r2
    p_transfer->p_data.addr += tx_size;
   25672:	680b      	ldr	r3, [r1, #0]
    p_transfer->size -= tx_size;
   25674:	6048      	str	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
   25676:	441a      	add	r2, r3
}
   25678:	3800      	subs	r0, #0
    p_transfer->p_data.addr += tx_size;
   2567a:	600a      	str	r2, [r1, #0]
}
   2567c:	bf18      	it	ne
   2567e:	2001      	movne	r0, #1
   25680:	bd10      	pop	{r4, pc}

00025682 <nrfx_usbd_feeder_ram_zlp>:
{
   25682:	b530      	push	{r4, r5, lr}
    size_t tx_size = p_transfer->size;
   25684:	684c      	ldr	r4, [r1, #4]
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
   25686:	680b      	ldr	r3, [r1, #0]
   25688:	42a2      	cmp	r2, r4
   2568a:	bf28      	it	cs
   2568c:	4622      	movcs	r2, r4
   2568e:	2a00      	cmp	r2, #0
   25690:	bf14      	ite	ne
   25692:	461d      	movne	r5, r3
   25694:	2500      	moveq	r5, #0
    p_next->size = tx_size;
   25696:	e9c0 5200 	strd	r5, r2, [r0]
    p_transfer->size -= tx_size;
   2569a:	eba4 0402 	sub.w	r4, r4, r2
    p_transfer->p_data.addr += tx_size;
   2569e:	441a      	add	r2, r3
    p_transfer->size -= tx_size;
   256a0:	604c      	str	r4, [r1, #4]
    p_transfer->p_data.addr += tx_size;
   256a2:	600a      	str	r2, [r1, #0]
}
   256a4:	bf14      	ite	ne
   256a6:	2001      	movne	r0, #1
   256a8:	2000      	moveq	r0, #0
   256aa:	bd30      	pop	{r4, r5, pc}

000256ac <ep2bit>:
    return NRFX_USBD_EP_BITPOS(ep);
   256ac:	f010 0f80 	tst.w	r0, #128	; 0x80
   256b0:	bf14      	ite	ne
   256b2:	2300      	movne	r3, #0
   256b4:	2310      	moveq	r3, #16
   256b6:	f000 000f 	and.w	r0, r0, #15
}
   256ba:	4418      	add	r0, r3
   256bc:	4770      	bx	lr

000256be <ev_started_handler>:
}
   256be:	4770      	bx	lr

000256c0 <nrf_usbd_epin_dma_handler>:
{
   256c0:	b508      	push	{r3, lr}
   256c2:	4601      	mov	r1, r0
    usbd_dma_pending_clear();
   256c4:	f7f4 fb90 	bl	19de8 <usbd_dma_pending_clear>
    usbd_ep_state_t * p_state = ep_state_access(ep);
   256c8:	4608      	mov	r0, r1
   256ca:	f7f4 fb7f 	bl	19dcc <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   256ce:	7b83      	ldrb	r3, [r0, #14]
   256d0:	2b03      	cmp	r3, #3
   256d2:	d10a      	bne.n	256ea <nrf_usbd_epin_dma_handler+0x2a>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   256d4:	4608      	mov	r0, r1
   256d6:	f7ff ffe9 	bl	256ac <ep2bit>
   256da:	2301      	movs	r3, #1
   256dc:	fa03 f000 	lsl.w	r0, r3, r0
   256e0:	43c0      	mvns	r0, r0
}
   256e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   256e6:	f7f4 bc8f 	b.w	1a008 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
   256ea:	6803      	ldr	r3, [r0, #0]
   256ec:	2b00      	cmp	r3, #0
   256ee:	d0f1      	beq.n	256d4 <nrf_usbd_epin_dma_handler+0x14>
}
   256f0:	bd08      	pop	{r3, pc}

000256f2 <ev_dma_epin7_handler>:
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
   256f2:	2087      	movs	r0, #135	; 0x87
   256f4:	f7ff bfe4 	b.w	256c0 <nrf_usbd_epin_dma_handler>

000256f8 <ev_dma_epin6_handler>:
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
   256f8:	2086      	movs	r0, #134	; 0x86
   256fa:	f7ff bfe1 	b.w	256c0 <nrf_usbd_epin_dma_handler>

000256fe <ev_dma_epin5_handler>:
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
   256fe:	2085      	movs	r0, #133	; 0x85
   25700:	f7ff bfde 	b.w	256c0 <nrf_usbd_epin_dma_handler>

00025704 <ev_dma_epin4_handler>:
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
   25704:	2084      	movs	r0, #132	; 0x84
   25706:	f7ff bfdb 	b.w	256c0 <nrf_usbd_epin_dma_handler>

0002570a <ev_dma_epin3_handler>:
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
   2570a:	2083      	movs	r0, #131	; 0x83
   2570c:	f7ff bfd8 	b.w	256c0 <nrf_usbd_epin_dma_handler>

00025710 <ev_dma_epin2_handler>:
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
   25710:	2082      	movs	r0, #130	; 0x82
   25712:	f7ff bfd5 	b.w	256c0 <nrf_usbd_epin_dma_handler>

00025716 <ev_dma_epin1_handler>:
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
   25716:	2081      	movs	r0, #129	; 0x81
   25718:	f7ff bfd2 	b.w	256c0 <nrf_usbd_epin_dma_handler>

0002571c <ev_dma_epin0_handler>:
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
   2571c:	f7f4 bc84 	b.w	1a028 <nrf_usbd_ep0in_dma_handler>

00025720 <nrfx_usbd_ep_max_packet_size_set>:
{
   25720:	b508      	push	{r3, lr}
    usbd_ep_state_t * p_state = ep_state_access(ep);
   25722:	f7f4 fb53 	bl	19dcc <ep_state_access>
    p_state->max_packet_size = size;
   25726:	8181      	strh	r1, [r0, #12]
}
   25728:	bd08      	pop	{r3, pc}

0002572a <nrfx_usbd_ep_status_get>:
{
   2572a:	b508      	push	{r3, lr}
    usbd_ep_state_t const * p_state = ep_state_access(ep);
   2572c:	f7f4 fb4e 	bl	19dcc <ep_state_access>
	__asm__ volatile(
   25730:	f04f 0220 	mov.w	r2, #32
   25734:	f3ef 8311 	mrs	r3, BASEPRI
   25738:	f382 8812 	msr	BASEPRI_MAX, r2
   2573c:	f3bf 8f6f 	isb	sy
    *p_size = p_state->transfer_cnt;
   25740:	6882      	ldr	r2, [r0, #8]
   25742:	600a      	str	r2, [r1, #0]
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
   25744:	6802      	ldr	r2, [r0, #0]
   25746:	b92a      	cbnz	r2, 25754 <nrfx_usbd_ep_status_get+0x2a>
   25748:	7b80      	ldrb	r0, [r0, #14]
	__asm__ volatile(
   2574a:	f383 8811 	msr	BASEPRI, r3
   2574e:	f3bf 8f6f 	isb	sy
}
   25752:	bd08      	pop	{r3, pc}
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
   25754:	2004      	movs	r0, #4
   25756:	e7f8      	b.n	2574a <nrfx_usbd_ep_status_get+0x20>

00025758 <ev_dma_epout7_handler>:
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
   25758:	2007      	movs	r0, #7
   2575a:	f7f4 bf9d 	b.w	1a698 <nrf_usbd_epout_dma_handler>

0002575e <ev_dma_epout6_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
   2575e:	2006      	movs	r0, #6
   25760:	f7f4 bf9a 	b.w	1a698 <nrf_usbd_epout_dma_handler>

00025764 <ev_dma_epout5_handler>:
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
   25764:	2005      	movs	r0, #5
   25766:	f7f4 bf97 	b.w	1a698 <nrf_usbd_epout_dma_handler>

0002576a <ev_dma_epout4_handler>:
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
   2576a:	2004      	movs	r0, #4
   2576c:	f7f4 bf94 	b.w	1a698 <nrf_usbd_epout_dma_handler>

00025770 <ev_dma_epout3_handler>:
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
   25770:	2003      	movs	r0, #3
   25772:	f7f4 bf91 	b.w	1a698 <nrf_usbd_epout_dma_handler>

00025776 <ev_dma_epout2_handler>:
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
   25776:	2002      	movs	r0, #2
   25778:	f7f4 bf8e 	b.w	1a698 <nrf_usbd_epout_dma_handler>

0002577c <ev_dma_epout1_handler>:
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
   2577c:	2001      	movs	r0, #1
   2577e:	f7f4 bf8b 	b.w	1a698 <nrf_usbd_epout_dma_handler>

00025782 <nrfx_usbd_ep_abort>:
    usbd_ep_abort(ep);
   25782:	f7f5 b87f 	b.w	1a884 <usbd_ep_abort>

00025786 <z_device_state_init>:
}
   25786:	4770      	bx	lr

00025788 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   25788:	b138      	cbz	r0, 2579a <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   2578a:	68c3      	ldr	r3, [r0, #12]
   2578c:	8818      	ldrh	r0, [r3, #0]
   2578e:	f3c0 0008 	ubfx	r0, r0, #0, #9
   25792:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   25796:	4258      	negs	r0, r3
   25798:	4158      	adcs	r0, r3
}
   2579a:	4770      	bx	lr

0002579c <arch_system_halt>:
	__asm__ volatile(
   2579c:	f04f 0220 	mov.w	r2, #32
   257a0:	f3ef 8311 	mrs	r3, BASEPRI
   257a4:	f382 8812 	msr	BASEPRI_MAX, r2
   257a8:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
   257ac:	e7fe      	b.n	257ac <arch_system_halt+0x10>

000257ae <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
   257ae:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
   257b0:	f7ff fff4 	bl	2579c <arch_system_halt>

000257b4 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   257b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   257b6:	4605      	mov	r5, r0
   257b8:	460e      	mov	r6, r1
   257ba:	f04f 0320 	mov.w	r3, #32
   257be:	f3ef 8711 	mrs	r7, BASEPRI
   257c2:	f383 8812 	msr	BASEPRI_MAX, r3
   257c6:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   257ca:	f7f6 fa9b 	bl	1bd04 <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   257ce:	4631      	mov	r1, r6
   257d0:	4604      	mov	r4, r0
   257d2:	4628      	mov	r0, r5
   257d4:	f7ff ffeb 	bl	257ae <k_sys_fatal_error_handler>
	__asm__ volatile(
   257d8:	f387 8811 	msr	BASEPRI, r7
   257dc:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   257e0:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   257e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   257e6:	f7e0 b993 	b.w	5b10 <z_impl_k_thread_abort>

000257ea <k_heap_init>:
{
   257ea:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   257ec:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   257f0:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   257f4:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   257f6:	f7f7 b811 	b.w	1c81c <sys_heap_init>

000257fa <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   257fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   257fe:	b085      	sub	sp, #20
   25800:	4606      	mov	r6, r0
   25802:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   25804:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
{
   25808:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2580a:	f000 fbd5 	bl	25fb8 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   2580e:	f106 0a14 	add.w	sl, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   25812:	4605      	mov	r5, r0
   25814:	460f      	mov	r7, r1
	__asm__ volatile(
   25816:	f04f 0320 	mov.w	r3, #32
   2581a:	f3ef 8411 	mrs	r4, BASEPRI
   2581e:	f383 8812 	msr	BASEPRI_MAX, r3
   25822:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   25826:	f106 0b0c 	add.w	fp, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   2582a:	464a      	mov	r2, r9
   2582c:	4641      	mov	r1, r8
   2582e:	4630      	mov	r0, r6
   25830:	f7f6 ff8c 	bl	1c74c <sys_heap_aligned_alloc>
   25834:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   25836:	f7f6 fc3f 	bl	1c0b8 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   2583a:	9b03      	ldr	r3, [sp, #12]
   2583c:	b13b      	cbz	r3, 2584e <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   2583e:	f384 8811 	msr	BASEPRI, r4
   25842:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   25846:	4618      	mov	r0, r3
   25848:	b005      	add	sp, #20
   2584a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   2584e:	1a28      	subs	r0, r5, r0
   25850:	eb67 0101 	sbc.w	r1, r7, r1
   25854:	2801      	cmp	r0, #1
   25856:	f171 0200 	sbcs.w	r2, r1, #0
   2585a:	dbf0      	blt.n	2583e <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2585c:	e9cd 0100 	strd	r0, r1, [sp]
   25860:	465a      	mov	r2, fp
   25862:	4621      	mov	r1, r4
   25864:	4650      	mov	r0, sl
   25866:	f7f6 f8f5 	bl	1ba54 <z_pend_curr>
	__asm__ volatile(
   2586a:	f04f 0320 	mov.w	r3, #32
   2586e:	f3ef 8411 	mrs	r4, BASEPRI
   25872:	f383 8812 	msr	BASEPRI_MAX, r3
   25876:	f3bf 8f6f 	isb	sy
   2587a:	e7d6      	b.n	2582a <k_heap_aligned_alloc+0x30>

0002587c <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   2587c:	b538      	push	{r3, r4, r5, lr}
   2587e:	4604      	mov	r4, r0
   25880:	f04f 0320 	mov.w	r3, #32
   25884:	f3ef 8511 	mrs	r5, BASEPRI
   25888:	f383 8812 	msr	BASEPRI_MAX, r3
   2588c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   25890:	f7f6 ff24 	bl	1c6dc <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   25894:	f104 000c 	add.w	r0, r4, #12
   25898:	f000 fb07 	bl	25eaa <z_unpend_all>
   2589c:	b130      	cbz	r0, 258ac <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   2589e:	4629      	mov	r1, r5
   258a0:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   258a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   258a8:	f7f5 bf82 	b.w	1b7b0 <z_reschedule>
	__asm__ volatile(
   258ac:	f385 8811 	msr	BASEPRI, r5
   258b0:	f3bf 8f6f 	isb	sy
}
   258b4:	bd38      	pop	{r3, r4, r5, pc}

000258b6 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   258b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   258b8:	4604      	mov	r4, r0
   258ba:	460d      	mov	r5, r1
	__asm__ volatile(
   258bc:	f04f 0320 	mov.w	r3, #32
   258c0:	f3ef 8611 	mrs	r6, BASEPRI
   258c4:	f383 8812 	msr	BASEPRI_MAX, r3
   258c8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   258cc:	6947      	ldr	r7, [r0, #20]
   258ce:	b977      	cbnz	r7, 258ee <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   258d0:	f000 fad3 	bl	25e7a <z_unpend_first_thread>

		if (pending_thread != NULL) {
   258d4:	b158      	cbz	r0, 258ee <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   258d6:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   258d8:	6142      	str	r2, [r0, #20]
   258da:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   258dc:	f000 fa71 	bl	25dc2 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   258e0:	4631      	mov	r1, r6
   258e2:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   258e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   258ea:	f7f5 bf61 	b.w	1b7b0 <z_reschedule>
	**(char ***) mem = slab->free_list;
   258ee:	682b      	ldr	r3, [r5, #0]
   258f0:	6962      	ldr	r2, [r4, #20]
   258f2:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   258f4:	682b      	ldr	r3, [r5, #0]
   258f6:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   258f8:	69a3      	ldr	r3, [r4, #24]
   258fa:	3b01      	subs	r3, #1
   258fc:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   258fe:	f386 8811 	msr	BASEPRI, r6
   25902:	f3bf 8f6f 	isb	sy
}
   25906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00025908 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   25908:	f3ef 8005 	mrs	r0, IPSR
}
   2590c:	3800      	subs	r0, #0
   2590e:	bf18      	it	ne
   25910:	2001      	movne	r0, #1
   25912:	4770      	bx	lr

00025914 <z_impl_k_thread_name_set>:
}
   25914:	f06f 0057 	mvn.w	r0, #87	; 0x57
   25918:	4770      	bx	lr

0002591a <z_impl_k_thread_start>:
	z_sched_start(thread);
   2591a:	f7f6 b83f 	b.w	1b99c <z_sched_start>

0002591e <z_pm_save_idle_exit>:
{
   2591e:	b508      	push	{r3, lr}
	pm_system_resume();
   25920:	f7df fc2c 	bl	517c <pm_system_resume>
}
   25924:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   25928:	f7ff bdbc 	b.w	254a4 <sys_clock_idle_exit>

0002592c <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   2592c:	f990 300e 	ldrsb.w	r3, [r0, #14]
   25930:	428b      	cmp	r3, r1
   25932:	d001      	beq.n	25938 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   25934:	f7f6 b8a2 	b.w	1ba7c <z_set_prio>
}
   25938:	2000      	movs	r0, #0
   2593a:	4770      	bx	lr

0002593c <z_impl_k_mutex_init>:
{
   2593c:	4603      	mov	r3, r0
	mutex->owner = NULL;
   2593e:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   25940:	e9c3 0002 	strd	r0, r0, [r3, #8]
   25944:	e9c3 3300 	strd	r3, r3, [r3]
}
   25948:	4770      	bx	lr

0002594a <queue_insert>:
{
   2594a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2594e:	4699      	mov	r9, r3
   25950:	4604      	mov	r4, r0
   25952:	f89d 3020 	ldrb.w	r3, [sp, #32]
   25956:	460d      	mov	r5, r1
   25958:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2595a:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   2595e:	f04f 0220 	mov.w	r2, #32
   25962:	f3ef 8711 	mrs	r7, BASEPRI
   25966:	f382 8812 	msr	BASEPRI_MAX, r2
   2596a:	f3bf 8f6f 	isb	sy
	if (is_append) {
   2596e:	b103      	cbz	r3, 25972 <queue_insert+0x28>
	return list->tail;
   25970:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   25972:	4630      	mov	r0, r6
   25974:	f000 fa81 	bl	25e7a <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   25978:	b158      	cbz	r0, 25992 <queue_insert+0x48>
   2597a:	2400      	movs	r4, #0
   2597c:	67c4      	str	r4, [r0, #124]	; 0x7c
   2597e:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   25982:	f000 fa1e 	bl	25dc2 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   25986:	4630      	mov	r0, r6
   25988:	4639      	mov	r1, r7
   2598a:	f7f5 ff11 	bl	1b7b0 <z_reschedule>
	return 0;
   2598e:	2000      	movs	r0, #0
   25990:	e00c      	b.n	259ac <queue_insert+0x62>
	if (alloc) {
   25992:	f1b9 0f00 	cmp.w	r9, #0
   25996:	d01b      	beq.n	259d0 <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   25998:	2108      	movs	r1, #8
   2599a:	f7f6 fc29 	bl	1c1f0 <z_thread_aligned_alloc>
		if (anode == NULL) {
   2599e:	b938      	cbnz	r0, 259b0 <queue_insert+0x66>
	__asm__ volatile(
   259a0:	f387 8811 	msr	BASEPRI, r7
   259a4:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   259a8:	f06f 000b 	mvn.w	r0, #11
}
   259ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   259b0:	2301      	movs	r3, #1
		anode->data = data;
   259b2:	f8c0 8004 	str.w	r8, [r0, #4]
   259b6:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   259b8:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   259ba:	f003 0203 	and.w	r2, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
   259be:	b95d      	cbnz	r5, 259d8 <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   259c0:	6823      	ldr	r3, [r4, #0]
   259c2:	4313      	orrs	r3, r2
   259c4:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   259c6:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   259c8:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   259ca:	b973      	cbnz	r3, 259ea <queue_insert+0xa0>
	list->tail = node;
   259cc:	6060      	str	r0, [r4, #4]
}
   259ce:	e00c      	b.n	259ea <queue_insert+0xa0>
	node->next_and_flags = flags;
   259d0:	f8c8 9000 	str.w	r9, [r8]
}
   259d4:	4640      	mov	r0, r8
   259d6:	e7ef      	b.n	259b8 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   259d8:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   259da:	f033 0303 	bics.w	r3, r3, #3
   259de:	d110      	bne.n	25a02 <queue_insert+0xb8>
	parent->next_and_flags = cur_flags | (unative_t)child;
   259e0:	6002      	str	r2, [r0, #0]
	return list->tail;
   259e2:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   259e4:	b93a      	cbnz	r2, 259f6 <queue_insert+0xac>
	list->head = node;
   259e6:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   259ea:	2104      	movs	r1, #4
   259ec:	f104 0010 	add.w	r0, r4, #16
   259f0:	f000 fc4b 	bl	2628a <z_handle_obj_poll_events>
   259f4:	e7c7      	b.n	25986 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   259f6:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   259f8:	f003 0303 	and.w	r3, r3, #3
   259fc:	4303      	orrs	r3, r0
   259fe:	6013      	str	r3, [r2, #0]
   25a00:	e7e4      	b.n	259cc <queue_insert+0x82>
   25a02:	4313      	orrs	r3, r2
   25a04:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   25a06:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   25a08:	f003 0303 	and.w	r3, r3, #3
   25a0c:	4303      	orrs	r3, r0
   25a0e:	602b      	str	r3, [r5, #0]
}
   25a10:	e7eb      	b.n	259ea <queue_insert+0xa0>

00025a12 <z_queue_node_peek>:
{
   25a12:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   25a14:	4604      	mov	r4, r0
   25a16:	b130      	cbz	r0, 25a26 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   25a18:	6802      	ldr	r2, [r0, #0]
   25a1a:	0793      	lsls	r3, r2, #30
   25a1c:	d003      	beq.n	25a26 <z_queue_node_peek+0x14>
		ret = anode->data;
   25a1e:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   25a20:	b109      	cbz	r1, 25a26 <z_queue_node_peek+0x14>
			k_free(anode);
   25a22:	f000 fc40 	bl	262a6 <k_free>
}
   25a26:	4620      	mov	r0, r4
   25a28:	bd10      	pop	{r4, pc}

00025a2a <z_impl_k_queue_init>:
	list->head = NULL;
   25a2a:	2300      	movs	r3, #0
	list->tail = NULL;
   25a2c:	e9c0 3300 	strd	r3, r3, [r0]
   25a30:	f100 0308 	add.w	r3, r0, #8
   25a34:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   25a38:	f100 0310 	add.w	r3, r0, #16
   25a3c:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   25a40:	4770      	bx	lr

00025a42 <z_impl_k_queue_cancel_wait>:
{
   25a42:	b570      	push	{r4, r5, r6, lr}
   25a44:	4604      	mov	r4, r0
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   25a46:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   25a4a:	f04f 0320 	mov.w	r3, #32
   25a4e:	f3ef 8611 	mrs	r6, BASEPRI
   25a52:	f383 8812 	msr	BASEPRI_MAX, r3
   25a56:	f3bf 8f6f 	isb	sy
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   25a5a:	4628      	mov	r0, r5
   25a5c:	f000 fa0d 	bl	25e7a <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   25a60:	b120      	cbz	r0, 25a6c <z_impl_k_queue_cancel_wait+0x2a>
   25a62:	2200      	movs	r2, #0
   25a64:	67c2      	str	r2, [r0, #124]	; 0x7c
	thread->base.swap_data = data;
   25a66:	6142      	str	r2, [r0, #20]
	z_ready_thread(thread);
   25a68:	f000 f9ab 	bl	25dc2 <z_ready_thread>
	z_handle_obj_poll_events(&queue->poll_events, state);
   25a6c:	f104 0010 	add.w	r0, r4, #16
   25a70:	2108      	movs	r1, #8
   25a72:	f000 fc0a 	bl	2628a <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   25a76:	4631      	mov	r1, r6
   25a78:	4628      	mov	r0, r5
}
   25a7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&queue->lock, key);
   25a7e:	f7f5 be97 	b.w	1b7b0 <z_reschedule>

00025a82 <k_queue_append>:
{
   25a82:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   25a84:	2301      	movs	r3, #1
   25a86:	9300      	str	r3, [sp, #0]
   25a88:	2300      	movs	r3, #0
{
   25a8a:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   25a8c:	4619      	mov	r1, r3
   25a8e:	f7ff ff5c 	bl	2594a <queue_insert>
}
   25a92:	b003      	add	sp, #12
   25a94:	f85d fb04 	ldr.w	pc, [sp], #4

00025a98 <k_queue_prepend>:
{
   25a98:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   25a9a:	2300      	movs	r3, #0
{
   25a9c:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   25a9e:	9300      	str	r3, [sp, #0]
   25aa0:	4619      	mov	r1, r3
   25aa2:	f7ff ff52 	bl	2594a <queue_insert>
}
   25aa6:	b003      	add	sp, #12
   25aa8:	f85d fb04 	ldr.w	pc, [sp], #4

00025aac <k_queue_append_list>:
{
   25aac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25ab0:	4605      	mov	r5, r0
   25ab2:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   25ab4:	460c      	mov	r4, r1
   25ab6:	b391      	cbz	r1, 25b1e <k_queue_append_list+0x72>
   25ab8:	b38a      	cbz	r2, 25b1e <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   25aba:	f100 0708 	add.w	r7, r0, #8
   25abe:	f04f 0320 	mov.w	r3, #32
   25ac2:	f3ef 8811 	mrs	r8, BASEPRI
   25ac6:	f383 8812 	msr	BASEPRI_MAX, r3
   25aca:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   25ace:	4638      	mov	r0, r7
   25ad0:	f000 f9d3 	bl	25e7a <z_unpend_first_thread>
   25ad4:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   25ad8:	b920      	cbnz	r0, 25ae4 <k_queue_append_list+0x38>
	return list->tail;
   25ada:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   25adc:	b9ca      	cbnz	r2, 25b12 <k_queue_append_list+0x66>
	list->head = node;
   25ade:	602c      	str	r4, [r5, #0]
	list->tail = node;
   25ae0:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   25ae2:	e00a      	b.n	25afa <k_queue_append_list+0x4e>
   25ae4:	6144      	str	r4, [r0, #20]
   25ae6:	f8c0 907c 	str.w	r9, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   25aea:	f000 f96a 	bl	25dc2 <z_ready_thread>
		head = *(void **)head;
   25aee:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   25af0:	4638      	mov	r0, r7
   25af2:	f000 f9c2 	bl	25e7a <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   25af6:	2c00      	cmp	r4, #0
   25af8:	d1ee      	bne.n	25ad8 <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   25afa:	2104      	movs	r1, #4
   25afc:	f105 0010 	add.w	r0, r5, #16
   25b00:	f000 fbc3 	bl	2628a <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   25b04:	4638      	mov	r0, r7
   25b06:	4641      	mov	r1, r8
   25b08:	f7f5 fe52 	bl	1b7b0 <z_reschedule>
	return 0;
   25b0c:	2000      	movs	r0, #0
}
   25b0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   25b12:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   25b14:	f003 0303 	and.w	r3, r3, #3
   25b18:	431c      	orrs	r4, r3
   25b1a:	6014      	str	r4, [r2, #0]
}
   25b1c:	e7e0      	b.n	25ae0 <k_queue_append_list+0x34>
		return -EINVAL;
   25b1e:	f06f 0015 	mvn.w	r0, #21
   25b22:	e7f4      	b.n	25b0e <k_queue_append_list+0x62>

00025b24 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   25b24:	b15a      	cbz	r2, 25b3e <z_impl_k_sem_init+0x1a>
   25b26:	428a      	cmp	r2, r1
   25b28:	d309      	bcc.n	25b3e <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   25b2a:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   25b2e:	e9c0 1202 	strd	r1, r2, [r0, #8]
   25b32:	e9c0 0000 	strd	r0, r0, [r0]
   25b36:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   25b3a:	2000      	movs	r0, #0
   25b3c:	4770      	bx	lr
		return -EINVAL;
   25b3e:	f06f 0015 	mvn.w	r0, #21
}
   25b42:	4770      	bx	lr

00025b44 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   25b44:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   25b46:	2301      	movs	r3, #1
   25b48:	408b      	lsls	r3, r1
   25b4a:	ea22 0303 	bic.w	r3, r2, r3
   25b4e:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   25b50:	fa22 f001 	lsr.w	r0, r2, r1
}
   25b54:	f000 0001 	and.w	r0, r0, #1
   25b58:	4770      	bx	lr

00025b5a <unschedule_locked>:
{
   25b5a:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   25b5c:	2103      	movs	r1, #3
{
   25b5e:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   25b60:	300c      	adds	r0, #12
   25b62:	f7ff ffef 	bl	25b44 <flag_test_and_clear>
   25b66:	4604      	mov	r4, r0
   25b68:	b118      	cbz	r0, 25b72 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   25b6a:	f105 0010 	add.w	r0, r5, #16
   25b6e:	f000 f9c9 	bl	25f04 <z_abort_timeout>
}
   25b72:	4620      	mov	r0, r4
   25b74:	bd38      	pop	{r3, r4, r5, pc}

00025b76 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   25b76:	b120      	cbz	r0, 25b82 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   25b78:	2200      	movs	r2, #0
   25b7a:	4611      	mov	r1, r2
   25b7c:	3088      	adds	r0, #136	; 0x88
   25b7e:	f000 b9a4 	b.w	25eca <z_sched_wake>
}
   25b82:	4770      	bx	lr

00025b84 <cancel_async_locked>:
	return (*flagp & BIT(bit)) != 0U;
   25b84:	68c3      	ldr	r3, [r0, #12]
{
   25b86:	b570      	push	{r4, r5, r6, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   25b88:	f3c3 0540 	ubfx	r5, r3, #1, #1
   25b8c:	079b      	lsls	r3, r3, #30
{
   25b8e:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   25b90:	d416      	bmi.n	25bc0 <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   25b92:	6886      	ldr	r6, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   25b94:	2102      	movs	r1, #2
   25b96:	300c      	adds	r0, #12
   25b98:	f7ff ffd4 	bl	25b44 <flag_test_and_clear>
   25b9c:	b180      	cbz	r0, 25bc0 <cancel_async_locked+0x3c>
	return list->head;
   25b9e:	f8d6 2080 	ldr.w	r2, [r6, #128]	; 0x80
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   25ba2:	b16a      	cbz	r2, 25bc0 <cancel_async_locked+0x3c>
   25ba4:	4294      	cmp	r4, r2
   25ba6:	d11b      	bne.n	25be0 <cancel_async_locked+0x5c>
	return node->next;
   25ba8:	6822      	ldr	r2, [r4, #0]
	return list->tail;
   25baa:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
Z_GENLIST_REMOVE(slist, snode)
   25bae:	b98d      	cbnz	r5, 25bd4 <cancel_async_locked+0x50>
   25bb0:	428c      	cmp	r4, r1
	list->head = node;
   25bb2:	f8c6 2080 	str.w	r2, [r6, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   25bb6:	d101      	bne.n	25bbc <cancel_async_locked+0x38>
	list->tail = node;
   25bb8:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
	parent->next = child;
   25bbc:	2300      	movs	r3, #0
   25bbe:	6023      	str	r3, [r4, #0]
	return *flagp;
   25bc0:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   25bc2:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   25bc6:	bf1e      	ittt	ne
   25bc8:	f043 0302 	orrne.w	r3, r3, #2
   25bcc:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   25bce:	f003 000f 	andne.w	r0, r3, #15
}
   25bd2:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_REMOVE(slist, snode)
   25bd4:	428c      	cmp	r4, r1
	parent->next = child;
   25bd6:	602a      	str	r2, [r5, #0]
	list->tail = node;
   25bd8:	bf08      	it	eq
   25bda:	f8c6 5084 	streq.w	r5, [r6, #132]	; 0x84
}
   25bde:	e7ed      	b.n	25bbc <cancel_async_locked+0x38>
	return node->next;
   25be0:	4615      	mov	r5, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   25be2:	6812      	ldr	r2, [r2, #0]
   25be4:	e7dd      	b.n	25ba2 <cancel_async_locked+0x1e>

00025be6 <work_timeout>:
{
   25be6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   25be8:	4604      	mov	r4, r0
   25bea:	f04f 0320 	mov.w	r3, #32
   25bee:	f3ef 8511 	mrs	r5, BASEPRI
   25bf2:	f383 8812 	msr	BASEPRI_MAX, r3
   25bf6:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   25bfa:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   25bfc:	f1a0 0610 	sub.w	r6, r0, #16
   25c00:	2103      	movs	r1, #3
   25c02:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   25c04:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   25c06:	f7ff ff9d 	bl	25b44 <flag_test_and_clear>
   25c0a:	b128      	cbz	r0, 25c18 <work_timeout+0x32>
		queue = dw->queue;
   25c0c:	69a3      	ldr	r3, [r4, #24]
   25c0e:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   25c10:	a901      	add	r1, sp, #4
   25c12:	4630      	mov	r0, r6
   25c14:	f7f5 fc94 	bl	1b540 <submit_to_queue_locked>
	__asm__ volatile(
   25c18:	f385 8811 	msr	BASEPRI, r5
   25c1c:	f3bf 8f6f 	isb	sy
}
   25c20:	b002      	add	sp, #8
   25c22:	bd70      	pop	{r4, r5, r6, pc}

00025c24 <k_work_init>:
{
   25c24:	b538      	push	{r3, r4, r5, lr}
   25c26:	4604      	mov	r4, r0
   25c28:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   25c2a:	2210      	movs	r2, #16
   25c2c:	2100      	movs	r1, #0
   25c2e:	f7f8 fa0b 	bl	1e048 <memset>
   25c32:	6065      	str	r5, [r4, #4]
}
   25c34:	bd38      	pop	{r3, r4, r5, pc}

00025c36 <k_work_busy_get>:
	__asm__ volatile(
   25c36:	f04f 0220 	mov.w	r2, #32
   25c3a:	f3ef 8311 	mrs	r3, BASEPRI
   25c3e:	f382 8812 	msr	BASEPRI_MAX, r2
   25c42:	f3bf 8f6f 	isb	sy
	return flags_get(&work->flags) & K_WORK_MASK;
   25c46:	68c0      	ldr	r0, [r0, #12]
   25c48:	f000 000f 	and.w	r0, r0, #15
	__asm__ volatile(
   25c4c:	f383 8811 	msr	BASEPRI, r3
   25c50:	f3bf 8f6f 	isb	sy
}
   25c54:	4770      	bx	lr

00025c56 <k_work_submit_to_queue>:
{
   25c56:	b537      	push	{r0, r1, r2, r4, r5, lr}
   25c58:	9001      	str	r0, [sp, #4]
   25c5a:	4608      	mov	r0, r1
	__asm__ volatile(
   25c5c:	f04f 0320 	mov.w	r3, #32
   25c60:	f3ef 8511 	mrs	r5, BASEPRI
   25c64:	f383 8812 	msr	BASEPRI_MAX, r3
   25c68:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   25c6c:	a901      	add	r1, sp, #4
   25c6e:	f7f5 fc67 	bl	1b540 <submit_to_queue_locked>
   25c72:	4604      	mov	r4, r0
	__asm__ volatile(
   25c74:	f385 8811 	msr	BASEPRI, r5
   25c78:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   25c7c:	2800      	cmp	r0, #0
   25c7e:	dd04      	ble.n	25c8a <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
   25c80:	f7f6 f846 	bl	1bd10 <z_impl_k_is_preempt_thread>
   25c84:	b108      	cbz	r0, 25c8a <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
   25c86:	f7f5 ff9b 	bl	1bbc0 <z_impl_k_yield>
}
   25c8a:	4620      	mov	r0, r4
   25c8c:	b003      	add	sp, #12
   25c8e:	bd30      	pop	{r4, r5, pc}

00025c90 <k_work_init_delayable>:
{
   25c90:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   25c92:	2230      	movs	r2, #48	; 0x30
{
   25c94:	4604      	mov	r4, r0
   25c96:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   25c98:	2100      	movs	r1, #0
   25c9a:	f7f8 f9d5 	bl	1e048 <memset>
   25c9e:	f44f 7380 	mov.w	r3, #256	; 0x100
   25ca2:	6065      	str	r5, [r4, #4]
   25ca4:	60e3      	str	r3, [r4, #12]
}
   25ca6:	bd38      	pop	{r3, r4, r5, pc}

00025ca8 <k_work_delayable_busy_get>:
   25ca8:	f7ff bfc5 	b.w	25c36 <k_work_busy_get>

00025cac <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   25cac:	b538      	push	{r3, r4, r5, lr}
   25cae:	4604      	mov	r4, r0
	__asm__ volatile(
   25cb0:	f04f 0320 	mov.w	r3, #32
   25cb4:	f3ef 8511 	mrs	r5, BASEPRI
   25cb8:	f383 8812 	msr	BASEPRI_MAX, r3
   25cbc:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   25cc0:	f7ff ff4b 	bl	25b5a <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   25cc4:	4620      	mov	r0, r4
   25cc6:	f7ff ff5d 	bl	25b84 <cancel_async_locked>
	__asm__ volatile(
   25cca:	f385 8811 	msr	BASEPRI, r5
   25cce:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   25cd2:	bd38      	pop	{r3, r4, r5, pc}

00025cd4 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   25cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25cd6:	4604      	mov	r4, r0
   25cd8:	460d      	mov	r5, r1
	__asm__ volatile(
   25cda:	f04f 0320 	mov.w	r3, #32
   25cde:	f3ef 8711 	mrs	r7, BASEPRI
   25ce2:	f383 8812 	msr	BASEPRI_MAX, r3
   25ce6:	f3bf 8f6f 	isb	sy
	return flags_get(&dwork->work.flags) & K_WORK_MASK;
   25cea:	68c3      	ldr	r3, [r0, #12]
   25cec:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   25cf0:	2b00      	cmp	r3, #0
   25cf2:	bf14      	ite	ne
   25cf4:	2601      	movne	r6, #1
   25cf6:	2600      	moveq	r6, #0
	bool need_wait = false;

	if (pending) {
   25cf8:	d009      	beq.n	25d0e <k_work_cancel_delayable_sync+0x3a>
	(void)unschedule_locked(dwork);
   25cfa:	f7ff ff2e 	bl	25b5a <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   25cfe:	4620      	mov	r0, r4
   25d00:	f7ff ff40 	bl	25b84 <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   25d04:	4629      	mov	r1, r5
   25d06:	4620      	mov	r0, r4
   25d08:	f7f5 fbfc 	bl	1b504 <cancel_sync_locked>
   25d0c:	4603      	mov	r3, r0
	__asm__ volatile(
   25d0e:	f387 8811 	msr	BASEPRI, r7
   25d12:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   25d16:	b13b      	cbz	r3, 25d28 <k_work_cancel_delayable_sync+0x54>
	return z_impl_k_sem_take(sem, timeout);
   25d18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   25d1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   25d20:	f105 0008 	add.w	r0, r5, #8
   25d24:	f7f5 fb16 	bl	1b354 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   25d28:	4630      	mov	r0, r6
   25d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00025d2c <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   25d2c:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   25d30:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   25d32:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   25d34:	2300      	movs	r3, #0
	node->prev = NULL;
   25d36:	e9c0 3300 	strd	r3, r3, [r0]
}
   25d3a:	4770      	bx	lr

00025d3c <unpend_thread_no_timeout>:
{
   25d3c:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   25d3e:	f7ff fff5 	bl	25d2c <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   25d42:	7b43      	ldrb	r3, [r0, #13]
   25d44:	f023 0302 	bic.w	r3, r3, #2
   25d48:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   25d4a:	2300      	movs	r3, #0
   25d4c:	6083      	str	r3, [r0, #8]
}
   25d4e:	bd08      	pop	{r3, pc}

00025d50 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   25d50:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   25d54:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   25d58:	4283      	cmp	r3, r0
		return b2 - b1;
   25d5a:	bf14      	ite	ne
   25d5c:	1ac0      	subne	r0, r0, r3
	return 0;
   25d5e:	2000      	moveq	r0, #0
}
   25d60:	4770      	bx	lr

00025d62 <z_unpend_thread>:
{
   25d62:	b510      	push	{r4, lr}
	__asm__ volatile(
   25d64:	f04f 0320 	mov.w	r3, #32
   25d68:	f3ef 8411 	mrs	r4, BASEPRI
   25d6c:	f383 8812 	msr	BASEPRI_MAX, r3
   25d70:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   25d74:	f7ff ffe2 	bl	25d3c <unpend_thread_no_timeout>
	__asm__ volatile(
   25d78:	f384 8811 	msr	BASEPRI, r4
   25d7c:	f3bf 8f6f 	isb	sy
}
   25d80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   25d84:	3018      	adds	r0, #24
   25d86:	f000 b8bd 	b.w	25f04 <z_abort_timeout>

00025d8a <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   25d8a:	4603      	mov	r3, r0
   25d8c:	b920      	cbnz	r0, 25d98 <z_reschedule_irqlock+0xe>
   25d8e:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   25d92:	b90a      	cbnz	r2, 25d98 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   25d94:	f7df bcd4 	b.w	5740 <arch_swap>
   25d98:	f383 8811 	msr	BASEPRI, r3
   25d9c:	f3bf 8f6f 	isb	sy
}
   25da0:	4770      	bx	lr

00025da2 <z_reschedule_unlocked>:
	__asm__ volatile(
   25da2:	f04f 0320 	mov.w	r3, #32
   25da6:	f3ef 8011 	mrs	r0, BASEPRI
   25daa:	f383 8812 	msr	BASEPRI_MAX, r3
   25dae:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   25db2:	f7ff bfea 	b.w	25d8a <z_reschedule_irqlock>

00025db6 <z_priq_dumb_best>:
{
   25db6:	4603      	mov	r3, r0
	return list->head == list;
   25db8:	6800      	ldr	r0, [r0, #0]
}
   25dba:	4283      	cmp	r3, r0
   25dbc:	bf08      	it	eq
   25dbe:	2000      	moveq	r0, #0
   25dc0:	4770      	bx	lr

00025dc2 <z_ready_thread>:
{
   25dc2:	b510      	push	{r4, lr}
   25dc4:	f04f 0320 	mov.w	r3, #32
   25dc8:	f3ef 8411 	mrs	r4, BASEPRI
   25dcc:	f383 8812 	msr	BASEPRI_MAX, r3
   25dd0:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   25dd4:	f7f5 fdac 	bl	1b930 <ready_thread>
	__asm__ volatile(
   25dd8:	f384 8811 	msr	BASEPRI, r4
   25ddc:	f3bf 8f6f 	isb	sy
}
   25de0:	bd10      	pop	{r4, pc}

00025de2 <z_thread_timeout>:
{
   25de2:	b510      	push	{r4, lr}
   25de4:	4601      	mov	r1, r0
	__asm__ volatile(
   25de6:	f04f 0320 	mov.w	r3, #32
   25dea:	f3ef 8411 	mrs	r4, BASEPRI
   25dee:	f383 8812 	msr	BASEPRI_MAX, r3
   25df2:	f3bf 8f6f 	isb	sy
		if (!killed) {
   25df6:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   25dfa:	f013 0f28 	tst.w	r3, #40	; 0x28
   25dfe:	d10d      	bne.n	25e1c <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   25e00:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   25e04:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   25e06:	b10b      	cbz	r3, 25e0c <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   25e08:	f7ff ff98 	bl	25d3c <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   25e0c:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   25e10:	f023 0314 	bic.w	r3, r3, #20
   25e14:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   25e18:	f7f5 fd8a 	bl	1b930 <ready_thread>
	__asm__ volatile(
   25e1c:	f384 8811 	msr	BASEPRI, r4
   25e20:	f3bf 8f6f 	isb	sy
}
   25e24:	bd10      	pop	{r4, pc}

00025e26 <add_to_waitq_locked>:
{
   25e26:	b538      	push	{r3, r4, r5, lr}
   25e28:	4604      	mov	r4, r0
   25e2a:	460d      	mov	r5, r1
	unready_thread(thread);
   25e2c:	f7f5 fdd4 	bl	1b9d8 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   25e30:	7b63      	ldrb	r3, [r4, #13]
   25e32:	f043 0302 	orr.w	r3, r3, #2
   25e36:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   25e38:	b195      	cbz	r5, 25e60 <add_to_waitq_locked+0x3a>
   25e3a:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   25e3c:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25e3e:	429d      	cmp	r5, r3
   25e40:	d015      	beq.n	25e6e <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   25e42:	b1a3      	cbz	r3, 25e6e <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
   25e44:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   25e48:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   25e4c:	4291      	cmp	r1, r2
   25e4e:	d008      	beq.n	25e62 <add_to_waitq_locked+0x3c>
		return b2 - b1;
   25e50:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   25e52:	2a00      	cmp	r2, #0
   25e54:	dd05      	ble.n	25e62 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
   25e56:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   25e58:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   25e5c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   25e5e:	605c      	str	r4, [r3, #4]
}
   25e60:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   25e62:	686a      	ldr	r2, [r5, #4]
   25e64:	4293      	cmp	r3, r2
   25e66:	d002      	beq.n	25e6e <add_to_waitq_locked+0x48>
   25e68:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   25e6a:	2b00      	cmp	r3, #0
   25e6c:	d1ec      	bne.n	25e48 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
   25e6e:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   25e70:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   25e74:	601c      	str	r4, [r3, #0]
	list->tail = node;
   25e76:	606c      	str	r4, [r5, #4]
}
   25e78:	e7f2      	b.n	25e60 <add_to_waitq_locked+0x3a>

00025e7a <z_unpend_first_thread>:
{
   25e7a:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   25e7c:	f04f 0320 	mov.w	r3, #32
   25e80:	f3ef 8511 	mrs	r5, BASEPRI
   25e84:	f383 8812 	msr	BASEPRI_MAX, r3
   25e88:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   25e8c:	f7ff ff93 	bl	25db6 <z_priq_dumb_best>
		if (thread != NULL) {
   25e90:	4604      	mov	r4, r0
   25e92:	b120      	cbz	r0, 25e9e <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
   25e94:	f7ff ff52 	bl	25d3c <unpend_thread_no_timeout>
   25e98:	3018      	adds	r0, #24
   25e9a:	f000 f833 	bl	25f04 <z_abort_timeout>
	__asm__ volatile(
   25e9e:	f385 8811 	msr	BASEPRI, r5
   25ea2:	f3bf 8f6f 	isb	sy
}
   25ea6:	4620      	mov	r0, r4
   25ea8:	bd38      	pop	{r3, r4, r5, pc}

00025eaa <z_unpend_all>:
{
   25eaa:	b538      	push	{r3, r4, r5, lr}
   25eac:	4605      	mov	r5, r0
	int need_sched = 0;
   25eae:	2000      	movs	r0, #0
	return list->head == list;
   25eb0:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25eb2:	42a5      	cmp	r5, r4
   25eb4:	d000      	beq.n	25eb8 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   25eb6:	b904      	cbnz	r4, 25eba <z_unpend_all+0x10>
}
   25eb8:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   25eba:	4620      	mov	r0, r4
   25ebc:	f7ff ff51 	bl	25d62 <z_unpend_thread>
		z_ready_thread(thread);
   25ec0:	4620      	mov	r0, r4
   25ec2:	f7ff ff7e 	bl	25dc2 <z_ready_thread>
		need_sched = 1;
   25ec6:	2001      	movs	r0, #1
   25ec8:	e7f2      	b.n	25eb0 <z_unpend_all+0x6>

00025eca <z_sched_wake>:
{
   25eca:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   25ecc:	f04f 0320 	mov.w	r3, #32
   25ed0:	f3ef 8511 	mrs	r5, BASEPRI
   25ed4:	f383 8812 	msr	BASEPRI_MAX, r3
   25ed8:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   25edc:	f7ff ff6b 	bl	25db6 <z_priq_dumb_best>
		if (thread != NULL) {
   25ee0:	4604      	mov	r4, r0
   25ee2:	b150      	cbz	r0, 25efa <z_sched_wake+0x30>
   25ee4:	67c1      	str	r1, [r0, #124]	; 0x7c
   25ee6:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
   25ee8:	f7ff ff28 	bl	25d3c <unpend_thread_no_timeout>
   25eec:	3018      	adds	r0, #24
   25eee:	f000 f809 	bl	25f04 <z_abort_timeout>
			ready_thread(thread);
   25ef2:	4620      	mov	r0, r4
   25ef4:	f7f5 fd1c 	bl	1b930 <ready_thread>
			ret = true;
   25ef8:	2001      	movs	r0, #1
	__asm__ volatile(
   25efa:	f385 8811 	msr	BASEPRI, r5
   25efe:	f3bf 8f6f 	isb	sy
}
   25f02:	bd38      	pop	{r3, r4, r5, pc}

00025f04 <z_abort_timeout>:
{
   25f04:	b510      	push	{r4, lr}
	__asm__ volatile(
   25f06:	f04f 0220 	mov.w	r2, #32
   25f0a:	f3ef 8411 	mrs	r4, BASEPRI
   25f0e:	f382 8812 	msr	BASEPRI_MAX, r2
   25f12:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   25f16:	6803      	ldr	r3, [r0, #0]
   25f18:	b13b      	cbz	r3, 25f2a <z_abort_timeout+0x26>
			remove_timeout(to);
   25f1a:	f7f5 ffb7 	bl	1be8c <remove_timeout>
			ret = 0;
   25f1e:	2000      	movs	r0, #0
	__asm__ volatile(
   25f20:	f384 8811 	msr	BASEPRI, r4
   25f24:	f3bf 8f6f 	isb	sy
}
   25f28:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   25f2a:	f06f 0015 	mvn.w	r0, #21
   25f2e:	e7f7      	b.n	25f20 <z_abort_timeout+0x1c>

00025f30 <z_timeout_remaining>:
{
   25f30:	b510      	push	{r4, lr}
	__asm__ volatile(
   25f32:	f04f 0320 	mov.w	r3, #32
   25f36:	f3ef 8411 	mrs	r4, BASEPRI
   25f3a:	f383 8812 	msr	BASEPRI_MAX, r3
   25f3e:	f3bf 8f6f 	isb	sy
		ticks = timeout_rem(timeout);
   25f42:	f7f5 ffbd 	bl	1bec0 <timeout_rem>
	__asm__ volatile(
   25f46:	f384 8811 	msr	BASEPRI, r4
   25f4a:	f3bf 8f6f 	isb	sy
}
   25f4e:	bd10      	pop	{r4, pc}

00025f50 <z_get_next_timeout_expiry>:
{
   25f50:	b510      	push	{r4, lr}
	__asm__ volatile(
   25f52:	f04f 0320 	mov.w	r3, #32
   25f56:	f3ef 8411 	mrs	r4, BASEPRI
   25f5a:	f383 8812 	msr	BASEPRI_MAX, r3
   25f5e:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   25f62:	f7f5 ff6d 	bl	1be40 <next_timeout>
	__asm__ volatile(
   25f66:	f384 8811 	msr	BASEPRI, r4
   25f6a:	f3bf 8f6f 	isb	sy
}
   25f6e:	bd10      	pop	{r4, pc}

00025f70 <z_set_timeout_expiry>:
{
   25f70:	b570      	push	{r4, r5, r6, lr}
   25f72:	4604      	mov	r4, r0
   25f74:	460d      	mov	r5, r1
	__asm__ volatile(
   25f76:	f04f 0320 	mov.w	r3, #32
   25f7a:	f3ef 8611 	mrs	r6, BASEPRI
   25f7e:	f383 8812 	msr	BASEPRI_MAX, r3
   25f82:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   25f86:	f7f5 ff5b 	bl	1be40 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   25f8a:	2801      	cmp	r0, #1
   25f8c:	dd05      	ble.n	25f9a <z_set_timeout_expiry+0x2a>
   25f8e:	42a0      	cmp	r0, r4
   25f90:	db03      	blt.n	25f9a <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   25f92:	4629      	mov	r1, r5
   25f94:	4620      	mov	r0, r4
   25f96:	f7f3 f897 	bl	190c8 <sys_clock_set_timeout>
	__asm__ volatile(
   25f9a:	f386 8811 	msr	BASEPRI, r6
   25f9e:	f3bf 8f6f 	isb	sy
}
   25fa2:	bd70      	pop	{r4, r5, r6, pc}

00025fa4 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   25fa4:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   25fa6:	f7f6 f887 	bl	1c0b8 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   25faa:	bd08      	pop	{r3, pc}

00025fac <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   25fac:	f7f6 b884 	b.w	1c0b8 <sys_clock_tick_get>

00025fb0 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   25fb0:	b108      	cbz	r0, 25fb6 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   25fb2:	f7df bebb 	b.w	5d2c <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   25fb6:	4770      	bx	lr

00025fb8 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   25fb8:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   25fbc:	bf08      	it	eq
   25fbe:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   25fc2:	b538      	push	{r3, r4, r5, lr}
   25fc4:	4605      	mov	r5, r0
   25fc6:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   25fc8:	d01d      	beq.n	26006 <sys_clock_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   25fca:	ea51 0300 	orrs.w	r3, r1, r0
   25fce:	d103      	bne.n	25fd8 <sys_clock_timeout_end_calc+0x20>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   25fd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   25fd4:	f7f6 b870 	b.w	1c0b8 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   25fd8:	f06f 0301 	mvn.w	r3, #1
   25fdc:	1a18      	subs	r0, r3, r0
   25fde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   25fe2:	eb63 0101 	sbc.w	r1, r3, r1
   25fe6:	2900      	cmp	r1, #0
   25fe8:	da0c      	bge.n	26004 <sys_clock_timeout_end_calc+0x4c>
		return sys_clock_tick_get() + MAX(1, dt);
   25fea:	f7f6 f865 	bl	1c0b8 <sys_clock_tick_get>
   25fee:	2d01      	cmp	r5, #1
   25ff0:	4622      	mov	r2, r4
   25ff2:	f174 0400 	sbcs.w	r4, r4, #0
   25ff6:	462b      	mov	r3, r5
   25ff8:	bfbc      	itt	lt
   25ffa:	2301      	movlt	r3, #1
   25ffc:	2200      	movlt	r2, #0
   25ffe:	1818      	adds	r0, r3, r0
   26000:	eb41 0102 	adc.w	r1, r1, r2
}
   26004:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   26006:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2600a:	4601      	mov	r1, r0
   2600c:	e7fa      	b.n	26004 <sys_clock_timeout_end_calc+0x4c>

0002600e <add_event>:
{
   2600e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26010:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   26012:	e9d0 1300 	ldrd	r1, r3, [r0]
   26016:	4288      	cmp	r0, r1
   26018:	4604      	mov	r4, r0
   2601a:	d00d      	beq.n	26038 <add_event+0x2a>
	if ((pending == NULL) ||
   2601c:	b163      	cbz	r3, 26038 <add_event+0x2a>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2601e:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   26020:	b100      	cbz	r0, 26024 <add_event+0x16>
   26022:	3860      	subs	r0, #96	; 0x60
   26024:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   26028:	4639      	mov	r1, r7
   2602a:	f7ff fe91 	bl	25d50 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   2602e:	2800      	cmp	r0, #0
   26030:	dc02      	bgt.n	26038 <add_event+0x2a>
	return list->head == list;
   26032:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26034:	42b4      	cmp	r4, r6
   26036:	d109      	bne.n	2604c <add_event+0x3e>
	sys_dnode_t *const tail = list->tail;
   26038:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   2603a:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   2603e:	601d      	str	r5, [r3, #0]
	list->tail = node;
   26040:	6065      	str	r5, [r4, #4]
}
   26042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   26044:	6863      	ldr	r3, [r4, #4]
   26046:	42b3      	cmp	r3, r6
   26048:	d0f6      	beq.n	26038 <add_event+0x2a>
   2604a:	6836      	ldr	r6, [r6, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2604c:	2e00      	cmp	r6, #0
   2604e:	d0f3      	beq.n	26038 <add_event+0x2a>
		if (z_sched_prio_cmp(poller_thread(poller),
   26050:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   26052:	b101      	cbz	r1, 26056 <add_event+0x48>
   26054:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   26056:	4638      	mov	r0, r7
   26058:	f7ff fe7a 	bl	25d50 <z_sched_prio_cmp>
   2605c:	2800      	cmp	r0, #0
   2605e:	ddf1      	ble.n	26044 <add_event+0x36>
	sys_dnode_t *const prev = successor->prev;
   26060:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   26062:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   26066:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   26068:	6075      	str	r5, [r6, #4]
			return;
   2606a:	e7ea      	b.n	26042 <add_event+0x34>

0002606c <register_events>:
{
   2606c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   26070:	2500      	movs	r5, #0
{
   26072:	468b      	mov	fp, r1
   26074:	4614      	mov	r4, r2
   26076:	461f      	mov	r7, r3
   26078:	4682      	mov	sl, r0
	int events_registered = 0;
   2607a:	462e      	mov	r6, r5
	event->poller = NULL;
   2607c:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   2607e:	455d      	cmp	r5, fp
   26080:	db02      	blt.n	26088 <register_events+0x1c>
}
   26082:	4630      	mov	r0, r6
   26084:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   26088:	f04f 0320 	mov.w	r3, #32
   2608c:	f3ef 8911 	mrs	r9, BASEPRI
   26090:	f383 8812 	msr	BASEPRI_MAX, r3
   26094:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   26098:	f89a 300d 	ldrb.w	r3, [sl, #13]
   2609c:	f003 031f 	and.w	r3, r3, #31
   260a0:	3b01      	subs	r3, #1
   260a2:	2b07      	cmp	r3, #7
   260a4:	d80f      	bhi.n	260c6 <register_events+0x5a>
   260a6:	e8df f003 	tbb	[pc, r3]
   260aa:	041e      	.short	0x041e
   260ac:	0e0e0a0e 	.word	0x0e0e0a0e
   260b0:	250e      	.short	0x250e
		if (k_sem_count_get(event->sem) > 0U) {
   260b2:	f8da 3010 	ldr.w	r3, [sl, #16]
   260b6:	689b      	ldr	r3, [r3, #8]
   260b8:	b12b      	cbz	r3, 260c6 <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   260ba:	2302      	movs	r3, #2
   260bc:	e020      	b.n	26100 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   260be:	f8da 3010 	ldr.w	r3, [sl, #16]
   260c2:	681b      	ldr	r3, [r3, #0]
   260c4:	bb8b      	cbnz	r3, 2612a <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   260c6:	bb47      	cbnz	r7, 2611a <register_events+0xae>
   260c8:	7823      	ldrb	r3, [r4, #0]
   260ca:	b333      	cbz	r3, 2611a <register_events+0xae>
	switch (event->type) {
   260cc:	f89a 300d 	ldrb.w	r3, [sl, #13]
   260d0:	f003 031f 	and.w	r3, r3, #31
   260d4:	3b01      	subs	r3, #1
   260d6:	2b07      	cmp	r3, #7
   260d8:	d830      	bhi.n	2613c <register_events+0xd0>
   260da:	e8df f003 	tbb	[pc, r3]
   260de:	2833      	.short	0x2833
   260e0:	2f2f282f 	.word	0x2f2f282f
   260e4:	382f      	.short	0x382f
		if (event->signal->signaled != 0U) {
   260e6:	f8da 3010 	ldr.w	r3, [sl, #16]
   260ea:	689b      	ldr	r3, [r3, #8]
   260ec:	2b00      	cmp	r3, #0
   260ee:	d0ea      	beq.n	260c6 <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   260f0:	2301      	movs	r3, #1
   260f2:	e005      	b.n	26100 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   260f4:	f8da 3010 	ldr.w	r3, [sl, #16]
   260f8:	6a1b      	ldr	r3, [r3, #32]
   260fa:	2b00      	cmp	r3, #0
   260fc:	d0e3      	beq.n	260c6 <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   260fe:	2310      	movs	r3, #16
	event->state |= state;
   26100:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   26104:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   26108:	f3c2 3145 	ubfx	r1, r2, #13, #6
   2610c:	430b      	orrs	r3, r1
   2610e:	f363 3252 	bfi	r2, r3, #13, #6
   26112:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   26116:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   2611a:	f389 8811 	msr	BASEPRI, r9
   2611e:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   26122:	3501      	adds	r5, #1
   26124:	f10a 0a14 	add.w	sl, sl, #20
   26128:	e7a9      	b.n	2607e <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   2612a:	2304      	movs	r3, #4
   2612c:	e7e8      	b.n	26100 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   2612e:	f8da 0010 	ldr.w	r0, [sl, #16]
   26132:	4622      	mov	r2, r4
   26134:	4651      	mov	r1, sl
   26136:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   26138:	f7ff ff69 	bl	2600e <add_event>
	event->poller = poller;
   2613c:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   26140:	3601      	adds	r6, #1
   26142:	e7ea      	b.n	2611a <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   26144:	f8da 0010 	ldr.w	r0, [sl, #16]
   26148:	4622      	mov	r2, r4
   2614a:	4651      	mov	r1, sl
   2614c:	e7f4      	b.n	26138 <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   2614e:	f8da 0010 	ldr.w	r0, [sl, #16]
   26152:	4622      	mov	r2, r4
   26154:	4651      	mov	r1, sl
   26156:	3024      	adds	r0, #36	; 0x24
   26158:	e7ee      	b.n	26138 <register_events+0xcc>

0002615a <signal_poll_event>:
{
   2615a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   2615e:	6884      	ldr	r4, [r0, #8]
{
   26160:	4605      	mov	r5, r0
   26162:	460e      	mov	r6, r1
	if (poller != NULL) {
   26164:	b144      	cbz	r4, 26178 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   26166:	7863      	ldrb	r3, [r4, #1]
   26168:	2b01      	cmp	r3, #1
   2616a:	d136      	bne.n	261da <signal_poll_event+0x80>
	if (!z_is_thread_pending(thread)) {
   2616c:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   26170:	f013 0302 	ands.w	r3, r3, #2
   26174:	d10a      	bne.n	2618c <signal_poll_event+0x32>
		poller->is_polling = false;
   26176:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   26178:	68eb      	ldr	r3, [r5, #12]
   2617a:	f3c3 3145 	ubfx	r1, r3, #13, #6
   2617e:	430e      	orrs	r6, r1
	event->poller = NULL;
   26180:	2000      	movs	r0, #0
	event->state |= state;
   26182:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
   26186:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   26188:	60eb      	str	r3, [r5, #12]
	return retcode;
   2618a:	e00b      	b.n	261a4 <signal_poll_event+0x4a>
	if (z_is_thread_timeout_expired(thread)) {
   2618c:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   26190:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   26194:	bf08      	it	eq
   26196:	f112 0f02 	cmneq.w	r2, #2
   2619a:	d105      	bne.n	261a8 <signal_poll_event+0x4e>
		poller->is_polling = false;
   2619c:	2300      	movs	r3, #0
   2619e:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   261a0:	f06f 000a 	mvn.w	r0, #10
}
   261a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   261a8:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   261ac:	4640      	mov	r0, r8
   261ae:	f7ff fdd8 	bl	25d62 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   261b2:	2e08      	cmp	r6, #8
   261b4:	bf0c      	ite	eq
   261b6:	f06f 0303 	mvneq.w	r3, #3
   261ba:	2300      	movne	r3, #0
   261bc:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   261be:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   261c2:	06db      	lsls	r3, r3, #27
   261c4:	d102      	bne.n	261cc <signal_poll_event+0x72>
	if (!z_is_thread_ready(thread)) {
   261c6:	f854 7c48 	ldr.w	r7, [r4, #-72]
   261ca:	b10f      	cbz	r7, 261d0 <signal_poll_event+0x76>
		poller->is_polling = false;
   261cc:	2300      	movs	r3, #0
   261ce:	e7d2      	b.n	26176 <signal_poll_event+0x1c>
	z_ready_thread(thread);
   261d0:	4640      	mov	r0, r8
   261d2:	f7ff fdf6 	bl	25dc2 <z_ready_thread>
		poller->is_polling = false;
   261d6:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   261d8:	e7ce      	b.n	26178 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   261da:	2b02      	cmp	r3, #2
   261dc:	d1f6      	bne.n	261cc <signal_poll_event+0x72>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   261de:	7823      	ldrb	r3, [r4, #0]
   261e0:	2b00      	cmp	r3, #0
   261e2:	d0c9      	beq.n	26178 <signal_poll_event+0x1e>
   261e4:	f854 7c04 	ldr.w	r7, [r4, #-4]
   261e8:	2f00      	cmp	r7, #0
   261ea:	d0f4      	beq.n	261d6 <signal_poll_event+0x7c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   261ec:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   261f0:	f1a4 0914 	sub.w	r9, r4, #20
   261f4:	f104 0014 	add.w	r0, r4, #20
   261f8:	f7ff fe84 	bl	25f04 <z_abort_timeout>
		twork->poll_result = 0;
   261fc:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   26200:	4649      	mov	r1, r9
   26202:	4638      	mov	r0, r7
   26204:	f7ff fd27 	bl	25c56 <k_work_submit_to_queue>
		poller->is_polling = false;
   26208:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   2620c:	e7b4      	b.n	26178 <signal_poll_event+0x1e>

0002620e <clear_event_registrations>:
	while (num_events--) {
   2620e:	2314      	movs	r3, #20
{
   26210:	b5f0      	push	{r4, r5, r6, r7, lr}
   26212:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   26216:	2400      	movs	r4, #0
   26218:	2601      	movs	r6, #1
	while (num_events--) {
   2621a:	b901      	cbnz	r1, 2621e <clear_event_registrations+0x10>
}
   2621c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   2621e:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   26222:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   26226:	f003 031f 	and.w	r3, r3, #31
   2622a:	2b08      	cmp	r3, #8
   2622c:	f1a0 0714 	sub.w	r7, r0, #20
   26230:	d80d      	bhi.n	2624e <clear_event_registrations+0x40>
   26232:	fa06 f303 	lsl.w	r3, r6, r3
   26236:	f413 7f8b 	tst.w	r3, #278	; 0x116
   2623a:	d008      	beq.n	2624e <clear_event_registrations+0x40>
	return node->next != NULL;
   2623c:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   26240:	b12b      	cbz	r3, 2624e <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   26242:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   26246:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   26248:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   2624a:	e940 4405 	strd	r4, r4, [r0, #-20]
   2624e:	f382 8811 	msr	BASEPRI, r2
   26252:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   26256:	f04f 0320 	mov.w	r3, #32
   2625a:	f3ef 8211 	mrs	r2, BASEPRI
   2625e:	f383 8812 	msr	BASEPRI_MAX, r3
   26262:	f3bf 8f6f 	isb	sy
   26266:	3901      	subs	r1, #1
   26268:	4638      	mov	r0, r7
   2626a:	e7d6      	b.n	2621a <clear_event_registrations+0xc>

0002626c <k_poll_event_init>:
{
   2626c:	b510      	push	{r4, lr}
	event->type = type;
   2626e:	04d2      	lsls	r2, r2, #19
   26270:	0209      	lsls	r1, r1, #8
   26272:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
   26276:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
   2627a:	430a      	orrs	r2, r1
   2627c:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   2627e:	2400      	movs	r4, #0
	event->type = type;
   26280:	430a      	orrs	r2, r1
	event->obj = obj;
   26282:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   26286:	6084      	str	r4, [r0, #8]
}
   26288:	bd10      	pop	{r4, pc}

0002628a <z_handle_obj_poll_events>:
{
   2628a:	4603      	mov	r3, r0
	return list->head == list;
   2628c:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2628e:	4283      	cmp	r3, r0
   26290:	d008      	beq.n	262a4 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   26292:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   26296:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   26298:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2629a:	2300      	movs	r3, #0
	node->prev = NULL;
   2629c:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   262a0:	f7ff bf5b 	b.w	2615a <signal_poll_event>
}
   262a4:	4770      	bx	lr

000262a6 <k_free>:
	if (ptr != NULL) {
   262a6:	b120      	cbz	r0, 262b2 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   262a8:	1f01      	subs	r1, r0, #4
   262aa:	f850 0c04 	ldr.w	r0, [r0, #-4]
   262ae:	f7ff bae5 	b.w	2587c <k_heap_free>
}
   262b2:	4770      	bx	lr

000262b4 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   262b4:	f7f2 bf70 	b.w	19198 <SystemInit>
