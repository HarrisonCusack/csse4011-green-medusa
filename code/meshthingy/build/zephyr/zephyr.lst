
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	a0 47 00 20 fd 40 00 00 d9 71 01 00 d1 40 00 00     .G. .@...q...@..
  10:	d1 40 00 00 d1 40 00 00 d1 40 00 00 00 00 00 00     .@...@...@......
	...
  2c:	e5 3d 00 00 d1 40 00 00 00 00 00 00 91 3d 00 00     .=...@.......=..
  3c:	d1 40 00 00                                         .@..

00000040 <_irq_vector_table>:
  40:	95 3e 00 00 a1 c8 01 00 95 3e 00 00 95 3e 00 00     .>.......>...>..
  50:	95 3e 00 00 95 3e 00 00 95 3e 00 00 95 3e 00 00     .>...>...>...>..
  60:	95 3e 00 00 95 3e 00 00 95 3e 00 00 95 3e 00 00     .>...>...>...>..
  70:	95 3e 00 00 95 3e 00 00 95 3e 00 00 95 3e 00 00     .>...>...>...>..
  80:	95 3e 00 00 95 3e 00 00 95 3e 00 00 95 3e 00 00     .>...>...>...>..
  90:	95 3e 00 00 95 3e 00 00 95 3e 00 00 95 3e 00 00     .>...>...>...>..
  a0:	95 3e 00 00 95 3e 00 00 95 3e 00 00 95 3e 00 00     .>...>...>...>..
  b0:	95 3e 00 00 95 3e 00 00 95 3e 00 00 95 3e 00 00     .>...>...>...>..
  c0:	95 3e 00 00 95 3e 00 00 95 3e 00 00 95 3e 00 00     .>...>...>...>..
  d0:	95 3e 00 00 95 3e 00 00 95 3e 00 00                 .>...>...>..

Disassembly of section text:

000000e0 <__aeabi_drsub>:
      e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
      e4:	e002      	b.n	ec <__adddf3>
      e6:	bf00      	nop

000000e8 <__aeabi_dsub>:
      e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000000ec <__adddf3>:
      ec:	b530      	push	{r4, r5, lr}
      ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
      f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
      f6:	ea94 0f05 	teq	r4, r5
      fa:	bf08      	it	eq
      fc:	ea90 0f02 	teqeq	r0, r2
     100:	bf1f      	itttt	ne
     102:	ea54 0c00 	orrsne.w	ip, r4, r0
     106:	ea55 0c02 	orrsne.w	ip, r5, r2
     10a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     10e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     112:	f000 80e2 	beq.w	2da <CONFIG_BT_HCI_TX_STACK_SIZE+0x5a>
     116:	ea4f 5454 	mov.w	r4, r4, lsr #21
     11a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     11e:	bfb8      	it	lt
     120:	426d      	neglt	r5, r5
     122:	dd0c      	ble.n	13e <CONFIG_KOBJECT_TEXT_AREA+0x3e>
     124:	442c      	add	r4, r5
     126:	ea80 0202 	eor.w	r2, r0, r2
     12a:	ea81 0303 	eor.w	r3, r1, r3
     12e:	ea82 0000 	eor.w	r0, r2, r0
     132:	ea83 0101 	eor.w	r1, r3, r1
     136:	ea80 0202 	eor.w	r2, r0, r2
     13a:	ea81 0303 	eor.w	r3, r1, r3
     13e:	2d36      	cmp	r5, #54	; 0x36
     140:	bf88      	it	hi
     142:	bd30      	pophi	{r4, r5, pc}
     144:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     148:	ea4f 3101 	mov.w	r1, r1, lsl #12
     14c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     150:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     154:	d002      	beq.n	15c <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x12>
     156:	4240      	negs	r0, r0
     158:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     15c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     160:	ea4f 3303 	mov.w	r3, r3, lsl #12
     164:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     168:	d002      	beq.n	170 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x3>
     16a:	4252      	negs	r2, r2
     16c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     170:	ea94 0f05 	teq	r4, r5
     174:	f000 80a7 	beq.w	2c6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x46>
     178:	f1a4 0401 	sub.w	r4, r4, #1
     17c:	f1d5 0e20 	rsbs	lr, r5, #32
     180:	db0d      	blt.n	19e <CONFIG_BT_MESH_TX_SEG_RETRANS_TIMEOUT_UNICAST+0xe>
     182:	fa02 fc0e 	lsl.w	ip, r2, lr
     186:	fa22 f205 	lsr.w	r2, r2, r5
     18a:	1880      	adds	r0, r0, r2
     18c:	f141 0100 	adc.w	r1, r1, #0
     190:	fa03 f20e 	lsl.w	r2, r3, lr
     194:	1880      	adds	r0, r0, r2
     196:	fa43 f305 	asr.w	r3, r3, r5
     19a:	4159      	adcs	r1, r3
     19c:	e00e      	b.n	1bc <CONFIG_BT_MESH_TX_SEG_RETRANS_TIMEOUT_UNICAST+0x2c>
     19e:	f1a5 0520 	sub.w	r5, r5, #32
     1a2:	f10e 0e20 	add.w	lr, lr, #32
     1a6:	2a01      	cmp	r2, #1
     1a8:	fa03 fc0e 	lsl.w	ip, r3, lr
     1ac:	bf28      	it	cs
     1ae:	f04c 0c02 	orrcs.w	ip, ip, #2
     1b2:	fa43 f305 	asr.w	r3, r3, r5
     1b6:	18c0      	adds	r0, r0, r3
     1b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     1bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     1c0:	d507      	bpl.n	1d2 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x12>
     1c2:	f04f 0e00 	mov.w	lr, #0
     1c6:	f1dc 0c00 	rsbs	ip, ip, #0
     1ca:	eb7e 0000 	sbcs.w	r0, lr, r0
     1ce:	eb6e 0101 	sbc.w	r1, lr, r1
     1d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     1d6:	d31b      	bcc.n	210 <CONFIG_FLASH_SIZE+0x10>
     1d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     1dc:	d30c      	bcc.n	1f8 <CONFIG_BT_MESH_PB_ADV_RETRANS_TIMEOUT+0x4>
     1de:	0849      	lsrs	r1, r1, #1
     1e0:	ea5f 0030 	movs.w	r0, r0, rrx
     1e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
     1e8:	f104 0401 	add.w	r4, r4, #1
     1ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
     1f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     1f4:	f080 809a 	bcs.w	32c <CONFIG_BT_MESH_ADV_STACK_SIZE+0x2c>
     1f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     1fc:	bf08      	it	eq
     1fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     202:	f150 0000 	adcs.w	r0, r0, #0
     206:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     20a:	ea41 0105 	orr.w	r1, r1, r5
     20e:	bd30      	pop	{r4, r5, pc}
     210:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     214:	4140      	adcs	r0, r0
     216:	eb41 0101 	adc.w	r1, r1, r1
     21a:	3c01      	subs	r4, #1
     21c:	bf28      	it	cs
     21e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     222:	d2e9      	bcs.n	1f8 <CONFIG_BT_MESH_PB_ADV_RETRANS_TIMEOUT+0x4>
     224:	f091 0f00 	teq	r1, #0
     228:	bf04      	itt	eq
     22a:	4601      	moveq	r1, r0
     22c:	2000      	moveq	r0, #0
     22e:	fab1 f381 	clz	r3, r1
     232:	bf08      	it	eq
     234:	3320      	addeq	r3, #32
     236:	f1a3 030b 	sub.w	r3, r3, #11
     23a:	f1b3 0220 	subs.w	r2, r3, #32
     23e:	da0c      	bge.n	25a <CONFIG_FLASH_SIZE+0x5a>
     240:	320c      	adds	r2, #12
     242:	dd08      	ble.n	256 <CONFIG_FLASH_SIZE+0x56>
     244:	f102 0c14 	add.w	ip, r2, #20
     248:	f1c2 020c 	rsb	r2, r2, #12
     24c:	fa01 f00c 	lsl.w	r0, r1, ip
     250:	fa21 f102 	lsr.w	r1, r1, r2
     254:	e00c      	b.n	270 <CONFIG_FLASH_SIZE+0x70>
     256:	f102 0214 	add.w	r2, r2, #20
     25a:	bfd8      	it	le
     25c:	f1c2 0c20 	rsble	ip, r2, #32
     260:	fa01 f102 	lsl.w	r1, r1, r2
     264:	fa20 fc0c 	lsr.w	ip, r0, ip
     268:	bfdc      	itt	le
     26a:	ea41 010c 	orrle.w	r1, r1, ip
     26e:	4090      	lslle	r0, r2
     270:	1ae4      	subs	r4, r4, r3
     272:	bfa2      	ittt	ge
     274:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     278:	4329      	orrge	r1, r5
     27a:	bd30      	popge	{r4, r5, pc}
     27c:	ea6f 0404 	mvn.w	r4, r4
     280:	3c1f      	subs	r4, #31
     282:	da1c      	bge.n	2be <CONFIG_BT_HCI_TX_STACK_SIZE+0x3e>
     284:	340c      	adds	r4, #12
     286:	dc0e      	bgt.n	2a6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x26>
     288:	f104 0414 	add.w	r4, r4, #20
     28c:	f1c4 0220 	rsb	r2, r4, #32
     290:	fa20 f004 	lsr.w	r0, r0, r4
     294:	fa01 f302 	lsl.w	r3, r1, r2
     298:	ea40 0003 	orr.w	r0, r0, r3
     29c:	fa21 f304 	lsr.w	r3, r1, r4
     2a0:	ea45 0103 	orr.w	r1, r5, r3
     2a4:	bd30      	pop	{r4, r5, pc}
     2a6:	f1c4 040c 	rsb	r4, r4, #12
     2aa:	f1c4 0220 	rsb	r2, r4, #32
     2ae:	fa20 f002 	lsr.w	r0, r0, r2
     2b2:	fa01 f304 	lsl.w	r3, r1, r4
     2b6:	ea40 0003 	orr.w	r0, r0, r3
     2ba:	4629      	mov	r1, r5
     2bc:	bd30      	pop	{r4, r5, pc}
     2be:	fa21 f004 	lsr.w	r0, r1, r4
     2c2:	4629      	mov	r1, r5
     2c4:	bd30      	pop	{r4, r5, pc}
     2c6:	f094 0f00 	teq	r4, #0
     2ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     2ce:	bf06      	itte	eq
     2d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     2d4:	3401      	addeq	r4, #1
     2d6:	3d01      	subne	r5, #1
     2d8:	e74e      	b.n	178 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xb>
     2da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     2de:	bf18      	it	ne
     2e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     2e4:	d029      	beq.n	33a <CONFIG_BT_MESH_ADV_STACK_SIZE+0x3a>
     2e6:	ea94 0f05 	teq	r4, r5
     2ea:	bf08      	it	eq
     2ec:	ea90 0f02 	teqeq	r0, r2
     2f0:	d005      	beq.n	2fe <CONFIG_BT_HCI_TX_STACK_SIZE+0x7e>
     2f2:	ea54 0c00 	orrs.w	ip, r4, r0
     2f6:	bf04      	itt	eq
     2f8:	4619      	moveq	r1, r3
     2fa:	4610      	moveq	r0, r2
     2fc:	bd30      	pop	{r4, r5, pc}
     2fe:	ea91 0f03 	teq	r1, r3
     302:	bf1e      	ittt	ne
     304:	2100      	movne	r1, #0
     306:	2000      	movne	r0, #0
     308:	bd30      	popne	{r4, r5, pc}
     30a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     30e:	d105      	bne.n	31c <CONFIG_BT_MESH_ADV_STACK_SIZE+0x1c>
     310:	0040      	lsls	r0, r0, #1
     312:	4149      	adcs	r1, r1
     314:	bf28      	it	cs
     316:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     31a:	bd30      	pop	{r4, r5, pc}
     31c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     320:	bf3c      	itt	cc
     322:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     326:	bd30      	popcc	{r4, r5, pc}
     328:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     32c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     330:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     334:	f04f 0000 	mov.w	r0, #0
     338:	bd30      	pop	{r4, r5, pc}
     33a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     33e:	bf1a      	itte	ne
     340:	4619      	movne	r1, r3
     342:	4610      	movne	r0, r2
     344:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     348:	bf1c      	itt	ne
     34a:	460b      	movne	r3, r1
     34c:	4602      	movne	r2, r0
     34e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     352:	bf06      	itte	eq
     354:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     358:	ea91 0f03 	teqeq	r1, r3
     35c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     360:	bd30      	pop	{r4, r5, pc}
     362:	bf00      	nop

00000364 <__aeabi_ui2d>:
     364:	f090 0f00 	teq	r0, #0
     368:	bf04      	itt	eq
     36a:	2100      	moveq	r1, #0
     36c:	4770      	bxeq	lr
     36e:	b530      	push	{r4, r5, lr}
     370:	f44f 6480 	mov.w	r4, #1024	; 0x400
     374:	f104 0432 	add.w	r4, r4, #50	; 0x32
     378:	f04f 0500 	mov.w	r5, #0
     37c:	f04f 0100 	mov.w	r1, #0
     380:	e750      	b.n	224 <CONFIG_FLASH_SIZE+0x24>
     382:	bf00      	nop

00000384 <__aeabi_i2d>:
     384:	f090 0f00 	teq	r0, #0
     388:	bf04      	itt	eq
     38a:	2100      	moveq	r1, #0
     38c:	4770      	bxeq	lr
     38e:	b530      	push	{r4, r5, lr}
     390:	f44f 6480 	mov.w	r4, #1024	; 0x400
     394:	f104 0432 	add.w	r4, r4, #50	; 0x32
     398:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     39c:	bf48      	it	mi
     39e:	4240      	negmi	r0, r0
     3a0:	f04f 0100 	mov.w	r1, #0
     3a4:	e73e      	b.n	224 <CONFIG_FLASH_SIZE+0x24>
     3a6:	bf00      	nop

000003a8 <__aeabi_f2d>:
     3a8:	0042      	lsls	r2, r0, #1
     3aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
     3ae:	ea4f 0131 	mov.w	r1, r1, rrx
     3b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
     3b6:	bf1f      	itttt	ne
     3b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     3bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     3c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     3c4:	4770      	bxne	lr
     3c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     3ca:	bf08      	it	eq
     3cc:	4770      	bxeq	lr
     3ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     3d2:	bf04      	itt	eq
     3d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     3d8:	4770      	bxeq	lr
     3da:	b530      	push	{r4, r5, lr}
     3dc:	f44f 7460 	mov.w	r4, #896	; 0x380
     3e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     3e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     3e8:	e71c      	b.n	224 <CONFIG_FLASH_SIZE+0x24>
     3ea:	bf00      	nop

000003ec <__aeabi_ul2d>:
     3ec:	ea50 0201 	orrs.w	r2, r0, r1
     3f0:	bf08      	it	eq
     3f2:	4770      	bxeq	lr
     3f4:	b530      	push	{r4, r5, lr}
     3f6:	f04f 0500 	mov.w	r5, #0
     3fa:	e00a      	b.n	412 <CONFIG_MAIN_STACK_SIZE+0x12>

000003fc <__aeabi_l2d>:
     3fc:	ea50 0201 	orrs.w	r2, r0, r1
     400:	bf08      	it	eq
     402:	4770      	bxeq	lr
     404:	b530      	push	{r4, r5, lr}
     406:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     40a:	d502      	bpl.n	412 <CONFIG_MAIN_STACK_SIZE+0x12>
     40c:	4240      	negs	r0, r0
     40e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     412:	f44f 6480 	mov.w	r4, #1024	; 0x400
     416:	f104 0432 	add.w	r4, r4, #50	; 0x32
     41a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     41e:	f43f aed8 	beq.w	1d2 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x12>
     422:	f04f 0203 	mov.w	r2, #3
     426:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     42a:	bf18      	it	ne
     42c:	3203      	addne	r2, #3
     42e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     432:	bf18      	it	ne
     434:	3203      	addne	r2, #3
     436:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     43a:	f1c2 0320 	rsb	r3, r2, #32
     43e:	fa00 fc03 	lsl.w	ip, r0, r3
     442:	fa20 f002 	lsr.w	r0, r0, r2
     446:	fa01 fe03 	lsl.w	lr, r1, r3
     44a:	ea40 000e 	orr.w	r0, r0, lr
     44e:	fa21 f102 	lsr.w	r1, r1, r2
     452:	4414      	add	r4, r2
     454:	e6bd      	b.n	1d2 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x12>
     456:	bf00      	nop

00000458 <__aeabi_dmul>:
     458:	b570      	push	{r4, r5, r6, lr}
     45a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     45e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     462:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     466:	bf1d      	ittte	ne
     468:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     46c:	ea94 0f0c 	teqne	r4, ip
     470:	ea95 0f0c 	teqne	r5, ip
     474:	f000 f8de 	bleq	634 <CONFIG_BT_COMPANY_ID+0x43>
     478:	442c      	add	r4, r5
     47a:	ea81 0603 	eor.w	r6, r1, r3
     47e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     482:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     486:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     48a:	bf18      	it	ne
     48c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     490:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     494:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     498:	d038      	beq.n	50c <CONFIG_BT_HCI_ECC_STACK_SIZE+0x98>
     49a:	fba0 ce02 	umull	ip, lr, r0, r2
     49e:	f04f 0500 	mov.w	r5, #0
     4a2:	fbe1 e502 	umlal	lr, r5, r1, r2
     4a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     4aa:	fbe0 e503 	umlal	lr, r5, r0, r3
     4ae:	f04f 0600 	mov.w	r6, #0
     4b2:	fbe1 5603 	umlal	r5, r6, r1, r3
     4b6:	f09c 0f00 	teq	ip, #0
     4ba:	bf18      	it	ne
     4bc:	f04e 0e01 	orrne.w	lr, lr, #1
     4c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     4c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     4c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     4cc:	d204      	bcs.n	4d8 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x64>
     4ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     4d2:	416d      	adcs	r5, r5
     4d4:	eb46 0606 	adc.w	r6, r6, r6
     4d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     4dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     4e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     4e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     4e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     4ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     4f0:	bf88      	it	hi
     4f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     4f6:	d81e      	bhi.n	536 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xc2>
     4f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     4fc:	bf08      	it	eq
     4fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     502:	f150 0000 	adcs.w	r0, r0, #0
     506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     50a:	bd70      	pop	{r4, r5, r6, pc}
     50c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     510:	ea46 0101 	orr.w	r1, r6, r1
     514:	ea40 0002 	orr.w	r0, r0, r2
     518:	ea81 0103 	eor.w	r1, r1, r3
     51c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     520:	bfc2      	ittt	gt
     522:	ebd4 050c 	rsbsgt	r5, r4, ip
     526:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     52a:	bd70      	popgt	{r4, r5, r6, pc}
     52c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     530:	f04f 0e00 	mov.w	lr, #0
     534:	3c01      	subs	r4, #1
     536:	f300 80ab 	bgt.w	690 <CONFIG_BT_COMPANY_ID+0x9f>
     53a:	f114 0f36 	cmn.w	r4, #54	; 0x36
     53e:	bfde      	ittt	le
     540:	2000      	movle	r0, #0
     542:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     546:	bd70      	pople	{r4, r5, r6, pc}
     548:	f1c4 0400 	rsb	r4, r4, #0
     54c:	3c20      	subs	r4, #32
     54e:	da35      	bge.n	5bc <CONFIG_BT_HCI_ECC_STACK_SIZE+0x148>
     550:	340c      	adds	r4, #12
     552:	dc1b      	bgt.n	58c <CONFIG_BT_HCI_ECC_STACK_SIZE+0x118>
     554:	f104 0414 	add.w	r4, r4, #20
     558:	f1c4 0520 	rsb	r5, r4, #32
     55c:	fa00 f305 	lsl.w	r3, r0, r5
     560:	fa20 f004 	lsr.w	r0, r0, r4
     564:	fa01 f205 	lsl.w	r2, r1, r5
     568:	ea40 0002 	orr.w	r0, r0, r2
     56c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     570:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     574:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     578:	fa21 f604 	lsr.w	r6, r1, r4
     57c:	eb42 0106 	adc.w	r1, r2, r6
     580:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     584:	bf08      	it	eq
     586:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     58a:	bd70      	pop	{r4, r5, r6, pc}
     58c:	f1c4 040c 	rsb	r4, r4, #12
     590:	f1c4 0520 	rsb	r5, r4, #32
     594:	fa00 f304 	lsl.w	r3, r0, r4
     598:	fa20 f005 	lsr.w	r0, r0, r5
     59c:	fa01 f204 	lsl.w	r2, r1, r4
     5a0:	ea40 0002 	orr.w	r0, r0, r2
     5a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5ac:	f141 0100 	adc.w	r1, r1, #0
     5b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5b4:	bf08      	it	eq
     5b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5ba:	bd70      	pop	{r4, r5, r6, pc}
     5bc:	f1c4 0520 	rsb	r5, r4, #32
     5c0:	fa00 f205 	lsl.w	r2, r0, r5
     5c4:	ea4e 0e02 	orr.w	lr, lr, r2
     5c8:	fa20 f304 	lsr.w	r3, r0, r4
     5cc:	fa01 f205 	lsl.w	r2, r1, r5
     5d0:	ea43 0302 	orr.w	r3, r3, r2
     5d4:	fa21 f004 	lsr.w	r0, r1, r4
     5d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5dc:	fa21 f204 	lsr.w	r2, r1, r4
     5e0:	ea20 0002 	bic.w	r0, r0, r2
     5e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     5e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5ec:	bf08      	it	eq
     5ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5f2:	bd70      	pop	{r4, r5, r6, pc}
     5f4:	f094 0f00 	teq	r4, #0
     5f8:	d10f      	bne.n	61a <CONFIG_BT_COMPANY_ID+0x29>
     5fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     5fe:	0040      	lsls	r0, r0, #1
     600:	eb41 0101 	adc.w	r1, r1, r1
     604:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     608:	bf08      	it	eq
     60a:	3c01      	subeq	r4, #1
     60c:	d0f7      	beq.n	5fe <CONFIG_BT_COMPANY_ID+0xd>
     60e:	ea41 0106 	orr.w	r1, r1, r6
     612:	f095 0f00 	teq	r5, #0
     616:	bf18      	it	ne
     618:	4770      	bxne	lr
     61a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     61e:	0052      	lsls	r2, r2, #1
     620:	eb43 0303 	adc.w	r3, r3, r3
     624:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     628:	bf08      	it	eq
     62a:	3d01      	subeq	r5, #1
     62c:	d0f7      	beq.n	61e <CONFIG_BT_COMPANY_ID+0x2d>
     62e:	ea43 0306 	orr.w	r3, r3, r6
     632:	4770      	bx	lr
     634:	ea94 0f0c 	teq	r4, ip
     638:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     63c:	bf18      	it	ne
     63e:	ea95 0f0c 	teqne	r5, ip
     642:	d00c      	beq.n	65e <CONFIG_BT_COMPANY_ID+0x6d>
     644:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     648:	bf18      	it	ne
     64a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     64e:	d1d1      	bne.n	5f4 <CONFIG_BT_COMPANY_ID+0x3>
     650:	ea81 0103 	eor.w	r1, r1, r3
     654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     658:	f04f 0000 	mov.w	r0, #0
     65c:	bd70      	pop	{r4, r5, r6, pc}
     65e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     662:	bf06      	itte	eq
     664:	4610      	moveq	r0, r2
     666:	4619      	moveq	r1, r3
     668:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     66c:	d019      	beq.n	6a2 <CONFIG_BT_COMPANY_ID+0xb1>
     66e:	ea94 0f0c 	teq	r4, ip
     672:	d102      	bne.n	67a <CONFIG_BT_COMPANY_ID+0x89>
     674:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     678:	d113      	bne.n	6a2 <CONFIG_BT_COMPANY_ID+0xb1>
     67a:	ea95 0f0c 	teq	r5, ip
     67e:	d105      	bne.n	68c <CONFIG_BT_COMPANY_ID+0x9b>
     680:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     684:	bf1c      	itt	ne
     686:	4610      	movne	r0, r2
     688:	4619      	movne	r1, r3
     68a:	d10a      	bne.n	6a2 <CONFIG_BT_COMPANY_ID+0xb1>
     68c:	ea81 0103 	eor.w	r1, r1, r3
     690:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     694:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     698:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     69c:	f04f 0000 	mov.w	r0, #0
     6a0:	bd70      	pop	{r4, r5, r6, pc}
     6a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     6aa:	bd70      	pop	{r4, r5, r6, pc}

000006ac <__aeabi_ddiv>:
     6ac:	b570      	push	{r4, r5, r6, lr}
     6ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
     6b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     6b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     6ba:	bf1d      	ittte	ne
     6bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     6c0:	ea94 0f0c 	teqne	r4, ip
     6c4:	ea95 0f0c 	teqne	r5, ip
     6c8:	f000 f8a7 	bleq	81a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1a>
     6cc:	eba4 0405 	sub.w	r4, r4, r5
     6d0:	ea81 0e03 	eor.w	lr, r1, r3
     6d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     6d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
     6dc:	f000 8088 	beq.w	7f0 <__aeabi_ddiv+0x144>
     6e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
     6e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     6e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     6ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     6f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
     6f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     6f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     6fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
     700:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     704:	429d      	cmp	r5, r3
     706:	bf08      	it	eq
     708:	4296      	cmpeq	r6, r2
     70a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     70e:	f504 7440 	add.w	r4, r4, #768	; 0x300
     712:	d202      	bcs.n	71a <__aeabi_ddiv+0x6e>
     714:	085b      	lsrs	r3, r3, #1
     716:	ea4f 0232 	mov.w	r2, r2, rrx
     71a:	1ab6      	subs	r6, r6, r2
     71c:	eb65 0503 	sbc.w	r5, r5, r3
     720:	085b      	lsrs	r3, r3, #1
     722:	ea4f 0232 	mov.w	r2, r2, rrx
     726:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     72a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     72e:	ebb6 0e02 	subs.w	lr, r6, r2
     732:	eb75 0e03 	sbcs.w	lr, r5, r3
     736:	bf22      	ittt	cs
     738:	1ab6      	subcs	r6, r6, r2
     73a:	4675      	movcs	r5, lr
     73c:	ea40 000c 	orrcs.w	r0, r0, ip
     740:	085b      	lsrs	r3, r3, #1
     742:	ea4f 0232 	mov.w	r2, r2, rrx
     746:	ebb6 0e02 	subs.w	lr, r6, r2
     74a:	eb75 0e03 	sbcs.w	lr, r5, r3
     74e:	bf22      	ittt	cs
     750:	1ab6      	subcs	r6, r6, r2
     752:	4675      	movcs	r5, lr
     754:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     758:	085b      	lsrs	r3, r3, #1
     75a:	ea4f 0232 	mov.w	r2, r2, rrx
     75e:	ebb6 0e02 	subs.w	lr, r6, r2
     762:	eb75 0e03 	sbcs.w	lr, r5, r3
     766:	bf22      	ittt	cs
     768:	1ab6      	subcs	r6, r6, r2
     76a:	4675      	movcs	r5, lr
     76c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     770:	085b      	lsrs	r3, r3, #1
     772:	ea4f 0232 	mov.w	r2, r2, rrx
     776:	ebb6 0e02 	subs.w	lr, r6, r2
     77a:	eb75 0e03 	sbcs.w	lr, r5, r3
     77e:	bf22      	ittt	cs
     780:	1ab6      	subcs	r6, r6, r2
     782:	4675      	movcs	r5, lr
     784:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     788:	ea55 0e06 	orrs.w	lr, r5, r6
     78c:	d018      	beq.n	7c0 <__aeabi_ddiv+0x114>
     78e:	ea4f 1505 	mov.w	r5, r5, lsl #4
     792:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     796:	ea4f 1606 	mov.w	r6, r6, lsl #4
     79a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     79e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     7a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     7a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     7aa:	d1c0      	bne.n	72e <__aeabi_ddiv+0x82>
     7ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7b0:	d10b      	bne.n	7ca <__aeabi_ddiv+0x11e>
     7b2:	ea41 0100 	orr.w	r1, r1, r0
     7b6:	f04f 0000 	mov.w	r0, #0
     7ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     7be:	e7b6      	b.n	72e <__aeabi_ddiv+0x82>
     7c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7c4:	bf04      	itt	eq
     7c6:	4301      	orreq	r1, r0
     7c8:	2000      	moveq	r0, #0
     7ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     7ce:	bf88      	it	hi
     7d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     7d4:	f63f aeaf 	bhi.w	536 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xc2>
     7d8:	ebb5 0c03 	subs.w	ip, r5, r3
     7dc:	bf04      	itt	eq
     7de:	ebb6 0c02 	subseq.w	ip, r6, r2
     7e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     7e6:	f150 0000 	adcs.w	r0, r0, #0
     7ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     7ee:	bd70      	pop	{r4, r5, r6, pc}
     7f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     7f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     7f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     7fc:	bfc2      	ittt	gt
     7fe:	ebd4 050c 	rsbsgt	r5, r4, ip
     802:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     806:	bd70      	popgt	{r4, r5, r6, pc}
     808:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     80c:	f04f 0e00 	mov.w	lr, #0
     810:	3c01      	subs	r4, #1
     812:	e690      	b.n	536 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xc2>
     814:	ea45 0e06 	orr.w	lr, r5, r6
     818:	e68d      	b.n	536 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xc2>
     81a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     81e:	ea94 0f0c 	teq	r4, ip
     822:	bf08      	it	eq
     824:	ea95 0f0c 	teqeq	r5, ip
     828:	f43f af3b 	beq.w	6a2 <CONFIG_BT_COMPANY_ID+0xb1>
     82c:	ea94 0f0c 	teq	r4, ip
     830:	d10a      	bne.n	848 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x48>
     832:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     836:	f47f af34 	bne.w	6a2 <CONFIG_BT_COMPANY_ID+0xb1>
     83a:	ea95 0f0c 	teq	r5, ip
     83e:	f47f af25 	bne.w	68c <CONFIG_BT_COMPANY_ID+0x9b>
     842:	4610      	mov	r0, r2
     844:	4619      	mov	r1, r3
     846:	e72c      	b.n	6a2 <CONFIG_BT_COMPANY_ID+0xb1>
     848:	ea95 0f0c 	teq	r5, ip
     84c:	d106      	bne.n	85c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5c>
     84e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     852:	f43f aefd 	beq.w	650 <CONFIG_BT_COMPANY_ID+0x5f>
     856:	4610      	mov	r0, r2
     858:	4619      	mov	r1, r3
     85a:	e722      	b.n	6a2 <CONFIG_BT_COMPANY_ID+0xb1>
     85c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     860:	bf18      	it	ne
     862:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     866:	f47f aec5 	bne.w	5f4 <CONFIG_BT_COMPANY_ID+0x3>
     86a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     86e:	f47f af0d 	bne.w	68c <CONFIG_BT_COMPANY_ID+0x9b>
     872:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     876:	f47f aeeb 	bne.w	650 <CONFIG_BT_COMPANY_ID+0x5f>
     87a:	e712      	b.n	6a2 <CONFIG_BT_COMPANY_ID+0xb1>

0000087c <__aeabi_d2f>:
     87c:	ea4f 0241 	mov.w	r2, r1, lsl #1
     880:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
     884:	bf24      	itt	cs
     886:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
     88a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
     88e:	d90d      	bls.n	8ac <__aeabi_d2f+0x30>
     890:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     894:	ea4f 02c0 	mov.w	r2, r0, lsl #3
     898:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
     89c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
     8a0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
     8a4:	bf08      	it	eq
     8a6:	f020 0001 	biceq.w	r0, r0, #1
     8aa:	4770      	bx	lr
     8ac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
     8b0:	d121      	bne.n	8f6 <__aeabi_d2f+0x7a>
     8b2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
     8b6:	bfbc      	itt	lt
     8b8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     8bc:	4770      	bxlt	lr
     8be:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     8c2:	ea4f 5252 	mov.w	r2, r2, lsr #21
     8c6:	f1c2 0218 	rsb	r2, r2, #24
     8ca:	f1c2 0c20 	rsb	ip, r2, #32
     8ce:	fa10 f30c 	lsls.w	r3, r0, ip
     8d2:	fa20 f002 	lsr.w	r0, r0, r2
     8d6:	bf18      	it	ne
     8d8:	f040 0001 	orrne.w	r0, r0, #1
     8dc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     8e0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     8e4:	fa03 fc0c 	lsl.w	ip, r3, ip
     8e8:	ea40 000c 	orr.w	r0, r0, ip
     8ec:	fa23 f302 	lsr.w	r3, r3, r2
     8f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
     8f4:	e7cc      	b.n	890 <__aeabi_d2f+0x14>
     8f6:	ea7f 5362 	mvns.w	r3, r2, asr #21
     8fa:	d107      	bne.n	90c <__aeabi_d2f+0x90>
     8fc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     900:	bf1e      	ittt	ne
     902:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     906:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     90a:	4770      	bxne	lr
     90c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     910:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     914:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     918:	4770      	bx	lr
     91a:	bf00      	nop

0000091c <__aeabi_ldivmod>:
     91c:	b97b      	cbnz	r3, 93e <__aeabi_ldivmod+0x22>
     91e:	b972      	cbnz	r2, 93e <__aeabi_ldivmod+0x22>
     920:	2900      	cmp	r1, #0
     922:	bfbe      	ittt	lt
     924:	2000      	movlt	r0, #0
     926:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
     92a:	e006      	blt.n	93a <__aeabi_ldivmod+0x1e>
     92c:	bf08      	it	eq
     92e:	2800      	cmpeq	r0, #0
     930:	bf1c      	itt	ne
     932:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
     936:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     93a:	f000 b857 	b.w	9ec <__aeabi_idiv0>
     93e:	f1ad 0c08 	sub.w	ip, sp, #8
     942:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     946:	2900      	cmp	r1, #0
     948:	db09      	blt.n	95e <__aeabi_ldivmod+0x42>
     94a:	2b00      	cmp	r3, #0
     94c:	db1a      	blt.n	984 <__aeabi_ldivmod+0x68>
     94e:	f000 f862 	bl	a16 <__udivmoddi4>
     952:	f8dd e004 	ldr.w	lr, [sp, #4]
     956:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     95a:	b004      	add	sp, #16
     95c:	4770      	bx	lr
     95e:	4240      	negs	r0, r0
     960:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     964:	2b00      	cmp	r3, #0
     966:	db1b      	blt.n	9a0 <__aeabi_ldivmod+0x84>
     968:	f000 f855 	bl	a16 <__udivmoddi4>
     96c:	f8dd e004 	ldr.w	lr, [sp, #4]
     970:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     974:	b004      	add	sp, #16
     976:	4240      	negs	r0, r0
     978:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     97c:	4252      	negs	r2, r2
     97e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     982:	4770      	bx	lr
     984:	4252      	negs	r2, r2
     986:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     98a:	f000 f844 	bl	a16 <__udivmoddi4>
     98e:	f8dd e004 	ldr.w	lr, [sp, #4]
     992:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     996:	b004      	add	sp, #16
     998:	4240      	negs	r0, r0
     99a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     99e:	4770      	bx	lr
     9a0:	4252      	negs	r2, r2
     9a2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     9a6:	f000 f836 	bl	a16 <__udivmoddi4>
     9aa:	f8dd e004 	ldr.w	lr, [sp, #4]
     9ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     9b2:	b004      	add	sp, #16
     9b4:	4252      	negs	r2, r2
     9b6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     9ba:	4770      	bx	lr

000009bc <__aeabi_uldivmod>:
     9bc:	b953      	cbnz	r3, 9d4 <__aeabi_uldivmod+0x18>
     9be:	b94a      	cbnz	r2, 9d4 <__aeabi_uldivmod+0x18>
     9c0:	2900      	cmp	r1, #0
     9c2:	bf08      	it	eq
     9c4:	2800      	cmpeq	r0, #0
     9c6:	bf1c      	itt	ne
     9c8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     9cc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     9d0:	f000 b80c 	b.w	9ec <__aeabi_idiv0>
     9d4:	f1ad 0c08 	sub.w	ip, sp, #8
     9d8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     9dc:	f000 f81b 	bl	a16 <__udivmoddi4>
     9e0:	f8dd e004 	ldr.w	lr, [sp, #4]
     9e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     9e8:	b004      	add	sp, #16
     9ea:	4770      	bx	lr

000009ec <__aeabi_idiv0>:
     9ec:	4770      	bx	lr
     9ee:	bf00      	nop

000009f0 <__popcountsi2>:
     9f0:	0843      	lsrs	r3, r0, #1
     9f2:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
     9f6:	1ac0      	subs	r0, r0, r3
     9f8:	f000 3333 	and.w	r3, r0, #858993459	; 0x33333333
     9fc:	0880      	lsrs	r0, r0, #2
     9fe:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
     a02:	4418      	add	r0, r3
     a04:	eb00 1010 	add.w	r0, r0, r0, lsr #4
     a08:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
     a0c:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
     a10:	4358      	muls	r0, r3
     a12:	0e00      	lsrs	r0, r0, #24
     a14:	4770      	bx	lr

00000a16 <__udivmoddi4>:
     a16:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     a1a:	4607      	mov	r7, r0
     a1c:	468c      	mov	ip, r1
     a1e:	4608      	mov	r0, r1
     a20:	9e09      	ldr	r6, [sp, #36]	; 0x24
     a22:	4615      	mov	r5, r2
     a24:	463c      	mov	r4, r7
     a26:	4619      	mov	r1, r3
     a28:	2b00      	cmp	r3, #0
     a2a:	f040 80c6 	bne.w	bba <__udivmoddi4+0x1a4>
     a2e:	4282      	cmp	r2, r0
     a30:	fab2 f782 	clz	r7, r2
     a34:	d946      	bls.n	ac4 <__udivmoddi4+0xae>
     a36:	b14f      	cbz	r7, a4c <__udivmoddi4+0x36>
     a38:	f1c7 0e20 	rsb	lr, r7, #32
     a3c:	fa24 fe0e 	lsr.w	lr, r4, lr
     a40:	fa00 f307 	lsl.w	r3, r0, r7
     a44:	40bd      	lsls	r5, r7
     a46:	ea4e 0c03 	orr.w	ip, lr, r3
     a4a:	40bc      	lsls	r4, r7
     a4c:	ea4f 4815 	mov.w	r8, r5, lsr #16
     a50:	fa1f fe85 	uxth.w	lr, r5
     a54:	fbbc f9f8 	udiv	r9, ip, r8
     a58:	0c22      	lsrs	r2, r4, #16
     a5a:	fb08 c319 	mls	r3, r8, r9, ip
     a5e:	fb09 fa0e 	mul.w	sl, r9, lr
     a62:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     a66:	459a      	cmp	sl, r3
     a68:	d928      	bls.n	abc <__udivmoddi4+0xa6>
     a6a:	18eb      	adds	r3, r5, r3
     a6c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     a70:	d204      	bcs.n	a7c <__udivmoddi4+0x66>
     a72:	459a      	cmp	sl, r3
     a74:	d902      	bls.n	a7c <__udivmoddi4+0x66>
     a76:	f1a9 0002 	sub.w	r0, r9, #2
     a7a:	442b      	add	r3, r5
     a7c:	eba3 030a 	sub.w	r3, r3, sl
     a80:	b2a4      	uxth	r4, r4
     a82:	fbb3 f2f8 	udiv	r2, r3, r8
     a86:	fb08 3312 	mls	r3, r8, r2, r3
     a8a:	fb02 fe0e 	mul.w	lr, r2, lr
     a8e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     a92:	45a6      	cmp	lr, r4
     a94:	d914      	bls.n	ac0 <__udivmoddi4+0xaa>
     a96:	192c      	adds	r4, r5, r4
     a98:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
     a9c:	d203      	bcs.n	aa6 <__udivmoddi4+0x90>
     a9e:	45a6      	cmp	lr, r4
     aa0:	d901      	bls.n	aa6 <__udivmoddi4+0x90>
     aa2:	1e93      	subs	r3, r2, #2
     aa4:	442c      	add	r4, r5
     aa6:	eba4 040e 	sub.w	r4, r4, lr
     aaa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     aae:	b11e      	cbz	r6, ab8 <__udivmoddi4+0xa2>
     ab0:	40fc      	lsrs	r4, r7
     ab2:	2300      	movs	r3, #0
     ab4:	6034      	str	r4, [r6, #0]
     ab6:	6073      	str	r3, [r6, #4]
     ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     abc:	4648      	mov	r0, r9
     abe:	e7dd      	b.n	a7c <__udivmoddi4+0x66>
     ac0:	4613      	mov	r3, r2
     ac2:	e7f0      	b.n	aa6 <__udivmoddi4+0x90>
     ac4:	b902      	cbnz	r2, ac8 <__udivmoddi4+0xb2>
     ac6:	deff      	udf	#255	; 0xff
     ac8:	bb87      	cbnz	r7, b2c <__udivmoddi4+0x116>
     aca:	1a83      	subs	r3, r0, r2
     acc:	2101      	movs	r1, #1
     ace:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     ad2:	b2aa      	uxth	r2, r5
     ad4:	fbb3 fcfe 	udiv	ip, r3, lr
     ad8:	0c20      	lsrs	r0, r4, #16
     ada:	fb0e 331c 	mls	r3, lr, ip, r3
     ade:	fb0c f802 	mul.w	r8, ip, r2
     ae2:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     ae6:	4598      	cmp	r8, r3
     ae8:	d963      	bls.n	bb2 <__udivmoddi4+0x19c>
     aea:	18eb      	adds	r3, r5, r3
     aec:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     af0:	d204      	bcs.n	afc <__udivmoddi4+0xe6>
     af2:	4598      	cmp	r8, r3
     af4:	d902      	bls.n	afc <__udivmoddi4+0xe6>
     af6:	f1ac 0002 	sub.w	r0, ip, #2
     afa:	442b      	add	r3, r5
     afc:	eba3 0308 	sub.w	r3, r3, r8
     b00:	b2a4      	uxth	r4, r4
     b02:	fbb3 fcfe 	udiv	ip, r3, lr
     b06:	fb0e 331c 	mls	r3, lr, ip, r3
     b0a:	fb0c f202 	mul.w	r2, ip, r2
     b0e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     b12:	42a2      	cmp	r2, r4
     b14:	d94f      	bls.n	bb6 <__udivmoddi4+0x1a0>
     b16:	192c      	adds	r4, r5, r4
     b18:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     b1c:	d204      	bcs.n	b28 <__udivmoddi4+0x112>
     b1e:	42a2      	cmp	r2, r4
     b20:	d902      	bls.n	b28 <__udivmoddi4+0x112>
     b22:	f1ac 0302 	sub.w	r3, ip, #2
     b26:	442c      	add	r4, r5
     b28:	1aa4      	subs	r4, r4, r2
     b2a:	e7be      	b.n	aaa <__udivmoddi4+0x94>
     b2c:	f1c7 0c20 	rsb	ip, r7, #32
     b30:	fa20 f80c 	lsr.w	r8, r0, ip
     b34:	fa00 f307 	lsl.w	r3, r0, r7
     b38:	fa24 fc0c 	lsr.w	ip, r4, ip
     b3c:	40bd      	lsls	r5, r7
     b3e:	ea4c 0203 	orr.w	r2, ip, r3
     b42:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     b46:	b2ab      	uxth	r3, r5
     b48:	fbb8 fcfe 	udiv	ip, r8, lr
     b4c:	0c11      	lsrs	r1, r2, #16
     b4e:	fb0e 801c 	mls	r0, lr, ip, r8
     b52:	fb0c f903 	mul.w	r9, ip, r3
     b56:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     b5a:	4581      	cmp	r9, r0
     b5c:	fa04 f407 	lsl.w	r4, r4, r7
     b60:	d923      	bls.n	baa <__udivmoddi4+0x194>
     b62:	1828      	adds	r0, r5, r0
     b64:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     b68:	d204      	bcs.n	b74 <__udivmoddi4+0x15e>
     b6a:	4581      	cmp	r9, r0
     b6c:	d902      	bls.n	b74 <__udivmoddi4+0x15e>
     b6e:	f1ac 0102 	sub.w	r1, ip, #2
     b72:	4428      	add	r0, r5
     b74:	eba0 0009 	sub.w	r0, r0, r9
     b78:	b292      	uxth	r2, r2
     b7a:	fbb0 fcfe 	udiv	ip, r0, lr
     b7e:	fb0e 001c 	mls	r0, lr, ip, r0
     b82:	fb0c f803 	mul.w	r8, ip, r3
     b86:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     b8a:	4598      	cmp	r8, r3
     b8c:	d90f      	bls.n	bae <__udivmoddi4+0x198>
     b8e:	18eb      	adds	r3, r5, r3
     b90:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
     b94:	d204      	bcs.n	ba0 <__udivmoddi4+0x18a>
     b96:	4598      	cmp	r8, r3
     b98:	d902      	bls.n	ba0 <__udivmoddi4+0x18a>
     b9a:	f1ac 0202 	sub.w	r2, ip, #2
     b9e:	442b      	add	r3, r5
     ba0:	eba3 0308 	sub.w	r3, r3, r8
     ba4:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     ba8:	e791      	b.n	ace <__udivmoddi4+0xb8>
     baa:	4661      	mov	r1, ip
     bac:	e7e2      	b.n	b74 <__udivmoddi4+0x15e>
     bae:	4662      	mov	r2, ip
     bb0:	e7f6      	b.n	ba0 <__udivmoddi4+0x18a>
     bb2:	4660      	mov	r0, ip
     bb4:	e7a2      	b.n	afc <__udivmoddi4+0xe6>
     bb6:	4663      	mov	r3, ip
     bb8:	e7b6      	b.n	b28 <__udivmoddi4+0x112>
     bba:	4283      	cmp	r3, r0
     bbc:	d905      	bls.n	bca <__udivmoddi4+0x1b4>
     bbe:	b10e      	cbz	r6, bc4 <__udivmoddi4+0x1ae>
     bc0:	e9c6 7000 	strd	r7, r0, [r6]
     bc4:	2100      	movs	r1, #0
     bc6:	4608      	mov	r0, r1
     bc8:	e776      	b.n	ab8 <__udivmoddi4+0xa2>
     bca:	fab3 f183 	clz	r1, r3
     bce:	b981      	cbnz	r1, bf2 <__udivmoddi4+0x1dc>
     bd0:	4283      	cmp	r3, r0
     bd2:	d301      	bcc.n	bd8 <__udivmoddi4+0x1c2>
     bd4:	42ba      	cmp	r2, r7
     bd6:	d80a      	bhi.n	bee <__udivmoddi4+0x1d8>
     bd8:	1abc      	subs	r4, r7, r2
     bda:	eb60 0303 	sbc.w	r3, r0, r3
     bde:	2001      	movs	r0, #1
     be0:	469c      	mov	ip, r3
     be2:	2e00      	cmp	r6, #0
     be4:	d068      	beq.n	cb8 <__udivmoddi4+0x2a2>
     be6:	e9c6 4c00 	strd	r4, ip, [r6]
     bea:	2100      	movs	r1, #0
     bec:	e764      	b.n	ab8 <__udivmoddi4+0xa2>
     bee:	4608      	mov	r0, r1
     bf0:	e7f7      	b.n	be2 <__udivmoddi4+0x1cc>
     bf2:	f1c1 0c20 	rsb	ip, r1, #32
     bf6:	408b      	lsls	r3, r1
     bf8:	fa22 f40c 	lsr.w	r4, r2, ip
     bfc:	431c      	orrs	r4, r3
     bfe:	fa02 f501 	lsl.w	r5, r2, r1
     c02:	fa00 f301 	lsl.w	r3, r0, r1
     c06:	fa27 f20c 	lsr.w	r2, r7, ip
     c0a:	fa20 fb0c 	lsr.w	fp, r0, ip
     c0e:	ea4f 4914 	mov.w	r9, r4, lsr #16
     c12:	4313      	orrs	r3, r2
     c14:	fbbb f8f9 	udiv	r8, fp, r9
     c18:	fa1f fe84 	uxth.w	lr, r4
     c1c:	fb09 bb18 	mls	fp, r9, r8, fp
     c20:	0c1a      	lsrs	r2, r3, #16
     c22:	fb08 fa0e 	mul.w	sl, r8, lr
     c26:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     c2a:	4592      	cmp	sl, r2
     c2c:	fa07 f701 	lsl.w	r7, r7, r1
     c30:	d93e      	bls.n	cb0 <__udivmoddi4+0x29a>
     c32:	18a2      	adds	r2, r4, r2
     c34:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     c38:	d204      	bcs.n	c44 <__udivmoddi4+0x22e>
     c3a:	4592      	cmp	sl, r2
     c3c:	d902      	bls.n	c44 <__udivmoddi4+0x22e>
     c3e:	f1a8 0002 	sub.w	r0, r8, #2
     c42:	4422      	add	r2, r4
     c44:	eba2 020a 	sub.w	r2, r2, sl
     c48:	b29b      	uxth	r3, r3
     c4a:	fbb2 f8f9 	udiv	r8, r2, r9
     c4e:	fb09 2218 	mls	r2, r9, r8, r2
     c52:	fb08 fe0e 	mul.w	lr, r8, lr
     c56:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
     c5a:	4596      	cmp	lr, r2
     c5c:	d92a      	bls.n	cb4 <__udivmoddi4+0x29e>
     c5e:	18a2      	adds	r2, r4, r2
     c60:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     c64:	d204      	bcs.n	c70 <__udivmoddi4+0x25a>
     c66:	4596      	cmp	lr, r2
     c68:	d902      	bls.n	c70 <__udivmoddi4+0x25a>
     c6a:	f1a8 0302 	sub.w	r3, r8, #2
     c6e:	4422      	add	r2, r4
     c70:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     c74:	fba0 9305 	umull	r9, r3, r0, r5
     c78:	eba2 020e 	sub.w	r2, r2, lr
     c7c:	429a      	cmp	r2, r3
     c7e:	46ce      	mov	lr, r9
     c80:	4698      	mov	r8, r3
     c82:	d302      	bcc.n	c8a <__udivmoddi4+0x274>
     c84:	d106      	bne.n	c94 <__udivmoddi4+0x27e>
     c86:	454f      	cmp	r7, r9
     c88:	d204      	bcs.n	c94 <__udivmoddi4+0x27e>
     c8a:	ebb9 0e05 	subs.w	lr, r9, r5
     c8e:	eb63 0804 	sbc.w	r8, r3, r4
     c92:	3801      	subs	r0, #1
     c94:	b186      	cbz	r6, cb8 <__udivmoddi4+0x2a2>
     c96:	ebb7 030e 	subs.w	r3, r7, lr
     c9a:	eb62 0708 	sbc.w	r7, r2, r8
     c9e:	fa07 fc0c 	lsl.w	ip, r7, ip
     ca2:	40cb      	lsrs	r3, r1
     ca4:	ea4c 0303 	orr.w	r3, ip, r3
     ca8:	40cf      	lsrs	r7, r1
     caa:	e9c6 3700 	strd	r3, r7, [r6]
     cae:	e79c      	b.n	bea <__udivmoddi4+0x1d4>
     cb0:	4640      	mov	r0, r8
     cb2:	e7c7      	b.n	c44 <__udivmoddi4+0x22e>
     cb4:	4643      	mov	r3, r8
     cb6:	e7db      	b.n	c70 <__udivmoddi4+0x25a>
     cb8:	4631      	mov	r1, r6
     cba:	e6fd      	b.n	ab8 <__udivmoddi4+0xa2>
     cbc:	0000      	movs	r0, r0
	...

00000cc0 <scu_hts221_read_temp>:
 * @brief  reads HTS221 temperature sensor value
 * 
 * @return returns HTS221 temperature sensor value
**/
double scu_hts221_read_temp(void)
{
     cc0:	b570      	push	{r4, r5, r6, lr}
	static struct sensor_value temp;

	if (sensor_sample_fetch(hts221_dev) < 0) {
     cc2:	4c17      	ldr	r4, [pc, #92]	; (d20 <scu_hts221_read_temp+0x60>)
     cc4:	6820      	ldr	r0, [r4, #0]
     cc6:	f015 fc62 	bl	1658e <sensor_sample_fetch>
     cca:	2800      	cmp	r0, #0
     ccc:	da05      	bge.n	cda <scu_hts221_read_temp+0x1a>
		printf("Sensor sample update errortemp\n");
     cce:	4815      	ldr	r0, [pc, #84]	; (d24 <scu_hts221_read_temp+0x64>)
		return -1;
	}

	if (sensor_channel_get(hts221_dev, SENSOR_CHAN_AMBIENT_TEMP, &temp) < 0) {
		printf("Cannot read HTS221 temperature channel\n");
     cd0:	f003 fb16 	bl	4300 <printf>
		return -1;
     cd4:	4914      	ldr	r1, [pc, #80]	; (d28 <scu_hts221_read_temp+0x68>)
     cd6:	2000      	movs	r0, #0
	}
    return sensor_value_to_double(&temp);
}
     cd8:	bd70      	pop	{r4, r5, r6, pc}
	if (sensor_channel_get(hts221_dev, SENSOR_CHAN_AMBIENT_TEMP, &temp) < 0) {
     cda:	4e14      	ldr	r6, [pc, #80]	; (d2c <scu_hts221_read_temp+0x6c>)
     cdc:	6820      	ldr	r0, [r4, #0]
     cde:	4632      	mov	r2, r6
     ce0:	210d      	movs	r1, #13
     ce2:	f015 fc58 	bl	16596 <sensor_channel_get>
     ce6:	2800      	cmp	r0, #0
     ce8:	da01      	bge.n	cee <scu_hts221_read_temp+0x2e>
		printf("Cannot read HTS221 temperature channel\n");
     cea:	4811      	ldr	r0, [pc, #68]	; (d30 <scu_hts221_read_temp+0x70>)
     cec:	e7f0      	b.n	cd0 <scu_hts221_read_temp+0x10>
 * @param val A pointer to a sensor_value struct.
 * @return The converted value.
 */
static inline double sensor_value_to_double(const struct sensor_value *val)
{
	return (double)val->val1 + (double)val->val2 / 1000000;
     cee:	6870      	ldr	r0, [r6, #4]
     cf0:	f7ff fb48 	bl	384 <__aeabi_i2d>
     cf4:	a308      	add	r3, pc, #32	; (adr r3, d18 <scu_hts221_read_temp+0x58>)
     cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
     cfa:	f7ff fcd7 	bl	6ac <__aeabi_ddiv>
     cfe:	4604      	mov	r4, r0
     d00:	6830      	ldr	r0, [r6, #0]
     d02:	460d      	mov	r5, r1
     d04:	f7ff fb3e 	bl	384 <__aeabi_i2d>
     d08:	4602      	mov	r2, r0
     d0a:	460b      	mov	r3, r1
     d0c:	4620      	mov	r0, r4
     d0e:	4629      	mov	r1, r5
     d10:	f7ff f9ec 	bl	ec <__adddf3>
    return sensor_value_to_double(&temp);
     d14:	e7e0      	b.n	cd8 <scu_hts221_read_temp+0x18>
     d16:	bf00      	nop
     d18:	00000000 	.word	0x00000000
     d1c:	412e8480 	.word	0x412e8480
     d20:	2000189c 	.word	0x2000189c
     d24:	0001ff79 	.word	0x0001ff79
     d28:	bff00000 	.word	0xbff00000
     d2c:	200018b8 	.word	0x200018b8
     d30:	0001ff99 	.word	0x0001ff99
     d34:	00000000 	.word	0x00000000

00000d38 <scu_hts221_read_hum>:
 * @brief  reads HTS221 humidity sensor value
 * 
 * @return returns HTS221 humidity sensor value
**/
double scu_hts221_read_hum(void) 
{
     d38:	b570      	push	{r4, r5, r6, lr}
	static struct sensor_value hum;

	if (sensor_sample_fetch(hts221_dev) < 0) {
     d3a:	4c17      	ldr	r4, [pc, #92]	; (d98 <scu_hts221_read_hum+0x60>)
     d3c:	6820      	ldr	r0, [r4, #0]
     d3e:	f015 fc26 	bl	1658e <sensor_sample_fetch>
     d42:	2800      	cmp	r0, #0
     d44:	da05      	bge.n	d52 <scu_hts221_read_hum+0x1a>
		printf("Sensor sample update errorhum\n");
     d46:	4815      	ldr	r0, [pc, #84]	; (d9c <scu_hts221_read_hum+0x64>)
		return -1;
	}

	if (sensor_channel_get(hts221_dev, SENSOR_CHAN_HUMIDITY, &hum) < 0) {
		printf("Cannot read HTS221 humidity channel\n");
     d48:	f003 fada 	bl	4300 <printf>
		return -1;
     d4c:	4914      	ldr	r1, [pc, #80]	; (da0 <scu_hts221_read_hum+0x68>)
     d4e:	2000      	movs	r0, #0
	}

    return sensor_value_to_double(&hum);
}
     d50:	bd70      	pop	{r4, r5, r6, pc}
	if (sensor_channel_get(hts221_dev, SENSOR_CHAN_HUMIDITY, &hum) < 0) {
     d52:	4e14      	ldr	r6, [pc, #80]	; (da4 <scu_hts221_read_hum+0x6c>)
     d54:	6820      	ldr	r0, [r4, #0]
     d56:	4632      	mov	r2, r6
     d58:	2110      	movs	r1, #16
     d5a:	f015 fc1c 	bl	16596 <sensor_channel_get>
     d5e:	2800      	cmp	r0, #0
     d60:	da01      	bge.n	d66 <scu_hts221_read_hum+0x2e>
		printf("Cannot read HTS221 humidity channel\n");
     d62:	4811      	ldr	r0, [pc, #68]	; (da8 <scu_hts221_read_hum+0x70>)
     d64:	e7f0      	b.n	d48 <scu_hts221_read_hum+0x10>
     d66:	6870      	ldr	r0, [r6, #4]
     d68:	f7ff fb0c 	bl	384 <__aeabi_i2d>
     d6c:	a308      	add	r3, pc, #32	; (adr r3, d90 <scu_hts221_read_hum+0x58>)
     d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
     d72:	f7ff fc9b 	bl	6ac <__aeabi_ddiv>
     d76:	4604      	mov	r4, r0
     d78:	6830      	ldr	r0, [r6, #0]
     d7a:	460d      	mov	r5, r1
     d7c:	f7ff fb02 	bl	384 <__aeabi_i2d>
     d80:	4602      	mov	r2, r0
     d82:	460b      	mov	r3, r1
     d84:	4620      	mov	r0, r4
     d86:	4629      	mov	r1, r5
     d88:	f7ff f9b0 	bl	ec <__adddf3>
    return sensor_value_to_double(&hum);
     d8c:	e7e0      	b.n	d50 <scu_hts221_read_hum+0x18>
     d8e:	bf00      	nop
     d90:	00000000 	.word	0x00000000
     d94:	412e8480 	.word	0x412e8480
     d98:	2000189c 	.word	0x2000189c
     d9c:	0001ffc1 	.word	0x0001ffc1
     da0:	bff00000 	.word	0xbff00000
     da4:	200018a0 	.word	0x200018a0
     da8:	0001ffe0 	.word	0x0001ffe0
     dac:	00000000 	.word	0x00000000

00000db0 <scu_lps22hb_read>:
 * @brief  reads LPS22HB pressure sensor value
 * 
 * @return returns LPS22HB pressure sensor value
**/
double scu_lps22hb_read(void)
{
     db0:	b570      	push	{r4, r5, r6, lr}
	static struct sensor_value pressure;

	if (sensor_sample_fetch(lps22hb_dev) < 0) {
     db2:	4c17      	ldr	r4, [pc, #92]	; (e10 <scu_lps22hb_read+0x60>)
     db4:	6820      	ldr	r0, [r4, #0]
     db6:	f015 fbea 	bl	1658e <sensor_sample_fetch>
     dba:	2800      	cmp	r0, #0
     dbc:	da05      	bge.n	dca <scu_lps22hb_read+0x1a>
		printf("Sensor sample update errorpress\n");
     dbe:	4815      	ldr	r0, [pc, #84]	; (e14 <scu_lps22hb_read+0x64>)
		return -1;
	}

	if (sensor_channel_get(lps22hb_dev, SENSOR_CHAN_PRESS, &pressure) < 0) {
		printf("Cannot read LPS22HB pressure channel\n");
     dc0:	f003 fa9e 	bl	4300 <printf>
		return -1;
     dc4:	4914      	ldr	r1, [pc, #80]	; (e18 <scu_lps22hb_read+0x68>)
     dc6:	2000      	movs	r0, #0
	}

    return sensor_value_to_double(&pressure);
}
     dc8:	bd70      	pop	{r4, r5, r6, pc}
	if (sensor_channel_get(lps22hb_dev, SENSOR_CHAN_PRESS, &pressure) < 0) {
     dca:	4e14      	ldr	r6, [pc, #80]	; (e1c <scu_lps22hb_read+0x6c>)
     dcc:	6820      	ldr	r0, [r4, #0]
     dce:	4632      	mov	r2, r6
     dd0:	210e      	movs	r1, #14
     dd2:	f015 fbe0 	bl	16596 <sensor_channel_get>
     dd6:	2800      	cmp	r0, #0
     dd8:	da01      	bge.n	dde <scu_lps22hb_read+0x2e>
		printf("Cannot read LPS22HB pressure channel\n");
     dda:	4811      	ldr	r0, [pc, #68]	; (e20 <scu_lps22hb_read+0x70>)
     ddc:	e7f0      	b.n	dc0 <scu_lps22hb_read+0x10>
     dde:	6870      	ldr	r0, [r6, #4]
     de0:	f7ff fad0 	bl	384 <__aeabi_i2d>
     de4:	a308      	add	r3, pc, #32	; (adr r3, e08 <scu_lps22hb_read+0x58>)
     de6:	e9d3 2300 	ldrd	r2, r3, [r3]
     dea:	f7ff fc5f 	bl	6ac <__aeabi_ddiv>
     dee:	4604      	mov	r4, r0
     df0:	6830      	ldr	r0, [r6, #0]
     df2:	460d      	mov	r5, r1
     df4:	f7ff fac6 	bl	384 <__aeabi_i2d>
     df8:	4602      	mov	r2, r0
     dfa:	460b      	mov	r3, r1
     dfc:	4620      	mov	r0, r4
     dfe:	4629      	mov	r1, r5
     e00:	f7ff f974 	bl	ec <__adddf3>
    return sensor_value_to_double(&pressure);
     e04:	e7e0      	b.n	dc8 <scu_lps22hb_read+0x18>
     e06:	bf00      	nop
     e08:	00000000 	.word	0x00000000
     e0c:	412e8480 	.word	0x412e8480
     e10:	200018ac 	.word	0x200018ac
     e14:	00020041 	.word	0x00020041
     e18:	bff00000 	.word	0xbff00000
     e1c:	200018b0 	.word	0x200018b0
     e20:	00020062 	.word	0x00020062
     e24:	00000000 	.word	0x00000000

00000e28 <ull_drift_ticks_get>:
 * @param ticks_drift_minus[out] Negative part of drift uncertainty window
 */
void ull_drift_ticks_get(struct node_rx_event_done *done,
			 uint32_t *ticks_drift_plus,
			 uint32_t *ticks_drift_minus)
{
     e28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     e2c:	4603      	mov	r3, r0
	uint32_t window_widening_event_us;
	uint32_t preamble_to_addr_us;

	start_to_address_actual_us =
		done->extra.drift.start_to_address_actual_us;
	window_widening_event_us =
     e2e:	e9d0 800a 	ldrd	r8, r0, [r0, #40]	; 0x28
		done->extra.drift.window_widening_event_us;
	preamble_to_addr_us =
     e32:	6b1e      	ldr	r6, [r3, #48]	; 0x30
		done->extra.drift.preamble_to_addr_us;

	start_to_address_expected_us = EVENT_JITTER_US +
     e34:	4d18      	ldr	r5, [pc, #96]	; (e98 <ull_drift_ticks_get+0x70>)
				       EVENT_TICKER_RES_MARGIN_US +
				       window_widening_event_us +
     e36:	1984      	adds	r4, r0, r6
	start_to_address_expected_us = EVENT_JITTER_US +
     e38:	3430      	adds	r4, #48	; 0x30
				       preamble_to_addr_us;

	if (start_to_address_actual_us <= start_to_address_expected_us) {
     e3a:	45a0      	cmp	r8, r4
{
     e3c:	4617      	mov	r7, r2
     e3e:	4689      	mov	r9, r1
		*ticks_drift_plus =
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
     e40:	a313      	add	r3, pc, #76	; (adr r3, e90 <ull_drift_ticks_get+0x68>)
     e42:	e9d3 2300 	ldrd	r2, r3, [r3]
	if (start_to_address_actual_us <= start_to_address_expected_us) {
     e46:	d815      	bhi.n	e74 <ull_drift_ticks_get+0x4c>
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
     e48:	fba0 0105 	umull	r0, r1, r0, r5
     e4c:	f7ff fdb6 	bl	9bc <__aeabi_uldivmod>
     e50:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
     e54:	f8c9 0000 	str.w	r0, [r9]
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
     e58:	eba4 0008 	sub.w	r0, r4, r8
					       start_to_address_actual_us));
	} else {
		*ticks_drift_plus =
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
     e5c:	a30c      	add	r3, pc, #48	; (adr r3, e90 <ull_drift_ticks_get+0x68>)
     e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
     e62:	fba0 0105 	umull	r0, r1, r0, r5
     e66:	f7ff fda9 	bl	9bc <__aeabi_uldivmod>
     e6a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
     e6e:	6038      	str	r0, [r7, #0]
					       EVENT_TICKER_RES_MARGIN_US +
					       preamble_to_addr_us);
	}
}
     e70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
     e74:	fba8 0105 	umull	r0, r1, r8, r5
     e78:	f7ff fda0 	bl	9bc <__aeabi_uldivmod>
     e7c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
     e80:	f8c9 0000 	str.w	r0, [r9]
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
     e84:	f106 0030 	add.w	r0, r6, #48	; 0x30
     e88:	e7e8      	b.n	e5c <ull_drift_ticks_get+0x34>
     e8a:	bf00      	nop
     e8c:	f3af 8000 	nop.w
     e90:	1afd498d 	.word	0x1afd498d
     e94:	00000007 	.word	0x00000007
     e98:	3b9aca00 	.word	0x3b9aca00
     e9c:	00000000 	.word	0x00000000

00000ea0 <ll_adv_enable>:
	uint8_t aux_is_started = 0U;
	uint32_t ticks_anchor;
#endif /* !CONFIG_BT_HCI_MESH_EXT */
#else /* !CONFIG_BT_CTLR_ADV_EXT || !CONFIG_BT_HCI_MESH_EXT */
uint8_t ll_adv_enable(uint8_t enable)
{
     ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     ea4:	b08f      	sub	sp, #60	; 0x3c
	struct ll_adv_set *adv;
	struct lll_adv *lll;
	uint8_t hci_err;
	uint32_t ret;

	if (!enable) {
     ea6:	b920      	cbnz	r0, eb2 <ll_adv_enable+0x12>
		conn_release(adv);
	}
#endif /* CONFIG_BT_PERIPHERAL */

	return BT_HCI_ERR_CMD_DISALLOWED;
}
     ea8:	b00f      	add	sp, #60	; 0x3c
     eaa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		return disable(handle);
     eae:	f00d b8b1 	b.w	e014 <disable.constprop.0>
static inline struct ll_adv_set *is_disabled_get(uint8_t handle)
{
	struct ll_adv_set *adv;

	adv = ull_adv_set_get(handle);
	if (!adv || adv->is_enabled) {
     eb2:	4ebd      	ldr	r6, [pc, #756]	; (11a8 <CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE+0x1a8>)
     eb4:	f896 706a 	ldrb.w	r7, [r6, #106]	; 0x6a
     eb8:	f017 0701 	ands.w	r7, r7, #1
     ebc:	f040 816e 	bne.w	119c <CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE+0x19c>
	lll_adv_pdu_enqueue(&lll->adv_data, idx);
}

static inline struct pdu_adv *lll_adv_data_peek(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     ec0:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
     ec4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
     ec8:	f8d3 902c 	ldr.w	r9, [r3, #44]	; 0x2c
	lll_adv_pdu_enqueue(&lll->scan_rsp, idx);
}

static inline struct pdu_adv *lll_adv_scan_rsp_peek(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
     ecc:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
     ed0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
     ed4:	f8d3 b038 	ldr.w	fp, [r3, #56]	; 0x38
#endif /* CONFIG_BT_CTLR_ADV_EXT */
	} else {
		pdu_adv_to_update = pdu;
	}

	if (pdu_adv_to_update) {
     ed8:	f1b9 0f00 	cmp.w	r9, #0
     edc:	d013      	beq.n	f06 <ll_adv_enable+0x66>
#if defined(CONFIG_BT_CTLR_ADV_EXT)
		} else if (ll_adv_cmds_is_ext() && pdu->tx_addr) {
			own_id_addr = adv->rnd_addr;
#endif
		} else {
			own_id_addr = ll_addr_get(pdu->tx_addr);
     ede:	464c      	mov	r4, r9
     ee0:	f814 0b02 	ldrb.w	r0, [r4], #2
     ee4:	f3c0 1080 	ubfx	r0, r0, #6, #1
     ee8:	f00a fe52 	bl	bb90 <ll_addr_get>
	} else {
		tx_addr = own_id_addr;
	}

	adv_addr = adv_pdu_adva_get(pdu);
	memcpy(adv_addr, tx_addr, BDADDR_SIZE);
     eec:	2206      	movs	r2, #6
			own_id_addr = ll_addr_get(pdu->tx_addr);
     eee:	4601      	mov	r1, r0
	memcpy(adv_addr, tx_addr, BDADDR_SIZE);
     ef0:	4620      	mov	r0, r4
     ef2:	f016 f9af 	bl	17254 <memcpy>
		if (pdu_adv_to_update->tx_addr &&
     ef6:	f899 3000 	ldrb.w	r3, [r9]
     efa:	065a      	lsls	r2, r3, #25
     efc:	d40d      	bmi.n	f1a <ll_adv_enable+0x7a>
			ull_adv_pdu_update_addrs(adv, pdu_scan);
     efe:	48aa      	ldr	r0, [pc, #680]	; (11a8 <CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE+0x1a8>)
     f00:	4659      	mov	r1, fp
     f02:	f01b fa34 	bl	1c36e <ull_adv_pdu_update_addrs>
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
     f06:	f899 3000 	ldrb.w	r3, [r9]
     f0a:	f013 0f0e 	tst.w	r3, #14
     f0e:	f040 80a2 	bne.w	1056 <CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE+0x56>
		if (lll->conn) {
     f12:	6a33      	ldr	r3, [r6, #32]
     f14:	b14b      	cbz	r3, f2a <ll_adv_enable+0x8a>
	return BT_HCI_ERR_CMD_DISALLOWED;
     f16:	270c      	movs	r7, #12
     f18:	e099      	b.n	104e <CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE+0x4e>
		    !mem_nz((void *)adv_addr, BDADDR_SIZE)) {
     f1a:	2106      	movs	r1, #6
     f1c:	4620      	mov	r0, r4
     f1e:	f01a fe1d 	bl	1bb5c <mem_nz>
		if (pdu_adv_to_update->tx_addr &&
     f22:	2800      	cmp	r0, #0
     f24:	d1eb      	bne.n	efe <ll_adv_enable+0x5e>
			return BT_HCI_ERR_INVALID_PARAM;
     f26:	2712      	movs	r7, #18
     f28:	e091      	b.n	104e <CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE+0x4e>
		link = ll_rx_link_alloc();
     f2a:	f00c f83d 	bl	cfa8 <ll_rx_link_alloc>
		if (!link) {
     f2e:	4680      	mov	r8, r0
     f30:	b130      	cbz	r0, f40 <ll_adv_enable+0xa0>
		node_rx = ll_rx_alloc();
     f32:	f00c f845 	bl	cfc0 <ll_rx_alloc>
		if (!node_rx) {
     f36:	4682      	mov	sl, r0
     f38:	b920      	cbnz	r0, f44 <ll_adv_enable+0xa4>
			ll_rx_link_release(link);
     f3a:	4640      	mov	r0, r8
     f3c:	f00c f83a 	bl	cfb4 <ll_rx_link_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
     f40:	2707      	movs	r7, #7
     f42:	e084      	b.n	104e <CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE+0x4e>
		conn = ll_conn_acquire();
     f44:	f00d fb20 	bl	e588 <ll_conn_acquire>
		if (!conn) {
     f48:	4604      	mov	r4, r0
     f4a:	b918      	cbnz	r0, f54 <ll_adv_enable+0xb4>
			ll_rx_release(node_rx);
     f4c:	4650      	mov	r0, sl
     f4e:	f00c f83d 	bl	cfcc <ll_rx_release>
     f52:	e7f2      	b.n	f3a <ll_adv_enable+0x9a>
		conn_lll->handle = 0xFFFF;
     f54:	f64f 72ff 	movw	r2, #65535	; 0xffff
     f58:	8502      	strh	r2, [r0, #40]	; 0x28
		if (!conn_lll->link_tx_free) {
     f5a:	6e82      	ldr	r2, [r0, #104]	; 0x68
		conn_lll = &conn->lll;
     f5c:	f100 031c 	add.w	r3, r0, #28
		if (!conn_lll->link_tx_free) {
     f60:	b912      	cbnz	r2, f68 <ll_adv_enable+0xc8>
			conn_lll->link_tx_free = &conn_lll->link_tx;
     f62:	f100 0260 	add.w	r2, r0, #96	; 0x60
     f66:	6682      	str	r2, [r0, #104]	; 0x68
		memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
     f68:	f104 025c 	add.w	r2, r4, #92	; 0x5c
     f6c:	f104 0158 	add.w	r1, r4, #88	; 0x58
     f70:	6ea0      	ldr	r0, [r4, #104]	; 0x68
     f72:	930b      	str	r3, [sp, #44]	; 0x2c
     f74:	f01a fdfd 	bl	1bb72 <memq_init>
		conn_lll->sn = 0;
     f78:	f894 206e 	ldrb.w	r2, [r4, #110]	; 0x6e
     f7c:	f022 0207 	bic.w	r2, r2, #7
     f80:	f884 206e 	strb.w	r2, [r4, #110]	; 0x6e
		conn_lll->data_chan_sel = 0;
     f84:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
     f88:	f002 023f 	and.w	r2, r2, #63	; 0x3f
     f8c:	f062 027f 	orn	r2, r2, #127	; 0x7f
     f90:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
		conn_lll->periph.initiated = 0;
     f94:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
     f98:	f022 0207 	bic.w	r2, r2, #7
     f9c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
		conn->connect_expire = 6;
     fa0:	2206      	movs	r2, #6
     fa2:	f8a4 2070 	strh.w	r2, [r4, #112]	; 0x70
		conn->common.fex_valid = 0;
     fa6:	f894 207c 	ldrb.w	r2, [r4, #124]	; 0x7c
		conn_lll->link_tx_free = NULL;
     faa:	2500      	movs	r5, #0
		conn->common.fex_valid = 0;
     fac:	f022 0207 	bic.w	r2, r2, #7
     fb0:	f884 207c 	strb.w	r2, [r4, #124]	; 0x7c
		conn_lll->periph.window_widening_event_us = 0;
     fb4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
		conn_lll->link_tx_free = NULL;
     fb8:	66a5      	str	r5, [r4, #104]	; 0x68
		conn_lll->packet_tx_head_len = 0;
     fba:	f8a4 506c 	strh.w	r5, [r4, #108]	; 0x6c
		conn_lll->latency_prepare = 0;
     fbe:	85e5      	strh	r5, [r4, #46]	; 0x2e
		conn_lll->latency_event = 0;
     fc0:	6325      	str	r5, [r4, #48]	; 0x30
		conn_lll->data_chan_use = 0;
     fc2:	f884 503b 	strb.w	r5, [r4, #59]	; 0x3b
		conn_lll->periph.window_size_prepare_us = 0;
     fc6:	6525      	str	r5, [r4, #80]	; 0x50
		conn->supervision_expire = 0;
     fc8:	f8a4 5074 	strh.w	r5, [r4, #116]	; 0x74
		conn->procedure_expire = 0;
     fcc:	f8a4 5078 	strh.w	r5, [r4, #120]	; 0x78
		conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0;
     fd0:	f8a4 5088 	strh.w	r5, [r4, #136]	; 0x88
     fd4:	f884 508a 	strb.w	r5, [r4, #138]	; 0x8a
		conn->llcp_rx = NULL;
     fd8:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
		conn->llcp_cu.req = conn->llcp_cu.ack = 0;
     fdc:	f8a4 509c 	strh.w	r5, [r4, #156]	; 0x9c
		conn->llcp_feature.req = conn->llcp_feature.ack = 0;
     fe0:	f8a4 50b0 	strh.w	r5, [r4, #176]	; 0xb0
		conn->llcp_feature.features_conn = ll_feat_get();
     fe4:	f01b f8f9 	bl	1c1da <ll_feat_get>
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
     fe8:	f894 20ca 	ldrb.w	r2, [r4, #202]	; 0xca
		lll->conn = conn_lll;
     fec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     fee:	6233      	str	r3, [r6, #32]
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
     ff0:	f022 0203 	bic.w	r2, r2, #3
     ff4:	f884 20ca 	strb.w	r2, [r4, #202]	; 0xca
		conn->llcp_conn_param.disabled = 0;
     ff8:	f894 20f6 	ldrb.w	r2, [r4, #246]	; 0xf6
		conn->llcp_version.req = conn->llcp_version.ack = 0;
     ffc:	f8a4 50c8 	strh.w	r5, [r4, #200]	; 0xc8
		conn->llcp_feature.features_conn = ll_feat_get();
    1000:	e9c4 012e 	strd	r0, r1, [r4, #184]	; 0xb8
		conn->llcp_conn_param.disabled = 0;
    1004:	f365 1245 	bfi	r2, r5, #5, #1
		conn->llcp_feature.features_peer = 0;
    1008:	2000      	movs	r0, #0
    100a:	2100      	movs	r1, #0
		adv->node_rx_cc_free = node_rx;
    100c:	e9c6 8a18 	strd	r8, sl, [r6, #96]	; 0x60
		conn->llcp_feature.features_peer = 0;
    1010:	e9c4 0130 	strd	r0, r1, [r4, #192]	; 0xc0
		conn->tx_data = conn->tx_data_last = 0;
    1014:	e9c4 554a 	strd	r5, r5, [r4, #296]	; 0x128
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
    1018:	e9c4 5548 	strd	r5, r5, [r4, #288]	; 0x120
}

static inline void ull_hdr_init(struct ull_hdr *hdr)
{
	hdr->ref = 0U;
	hdr->disabled_cb = hdr->disabled_param = NULL;
    101c:	e9c4 5505 	strd	r5, r5, [r4, #20]
		conn->llcp_terminate.req = conn->llcp_terminate.ack = 0;
    1020:	f8a4 50d0 	strh.w	r5, [r4, #208]	; 0xd0
		conn->llcp_terminate.reason_final = 0;
    1024:	f884 50d3 	strb.w	r5, [r4, #211]	; 0xd3
		conn->llcp_terminate.node_rx.hdr.link = link;
    1028:	f8c4 80d4 	str.w	r8, [r4, #212]	; 0xd4
		conn->llcp_conn_param.req = 0;
    102c:	f8a4 50f4 	strh.w	r5, [r4, #244]	; 0xf4
		conn->llcp_conn_param.disabled = 0;
    1030:	f884 20f6 	strb.w	r2, [r4, #246]	; 0xf6
		conn->periph.ticks_to_offset = 0;
    1034:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
    1038:	f8c4 511c 	str.w	r5, [r4, #284]	; 0x11c
	hdr->ref = 0U;
    103c:	7025      	strb	r5, [r4, #0]

static inline void lll_hdr_init(void *lll, void *parent)
{
	struct lll_hdr *hdr = lll;

	hdr->parent = parent;
    103e:	61e4      	str	r4, [r4, #28]
		err = lll_clock_wait();
    1040:	f00f f8d8 	bl	101f4 <lll_clock_wait>
		if (err) {
    1044:	b138      	cbz	r0, 1056 <CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE+0x56>
			conn_release(adv);
    1046:	4858      	ldr	r0, [pc, #352]	; (11a8 <CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE+0x1a8>)
    1048:	f00c fd8c 	bl	db64 <conn_release>
			return BT_HCI_ERR_HW_FAILURE;
    104c:	2703      	movs	r7, #3
}
    104e:	4638      	mov	r0, r7
    1050:	b00f      	add	sp, #60	; 0x3c
    1052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t ch_map = lll->chan_map;
    1056:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
    105a:	2101      	movs	r1, #1
	uint8_t ch_map = lll->chan_map;
    105c:	f3c3 0342 	ubfx	r3, r3, #1, #3
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
    1060:	f10d 0033 	add.w	r0, sp, #51	; 0x33
	uint8_t ch_map = lll->chan_map;
    1064:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
    1068:	f01a fdaf 	bl	1bbca <util_ones_count_get>
	if (adv_chn_cnt == 0) {
    106c:	4602      	mov	r2, r0
    106e:	2800      	cmp	r0, #0
    1070:	f000 808c 	beq.w	118c <CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE+0x18c>
	uint16_t time_us = adv_time_get(pdu_adv, pdu_scan, adv_chn_cnt, phy,
    1074:	f89b 1001 	ldrb.w	r1, [fp, #1]
    1078:	4648      	mov	r0, r9
    107a:	f01b f92e 	bl	1c2da <adv_time_get.constprop.0.isra.0>
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
    107e:	494b      	ldr	r1, [pc, #300]	; (11ac <CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE+0x1ac>)
	uint16_t interval = adv->interval;
    1080:	f8b6 8068 	ldrh.w	r8, [r6, #104]	; 0x68
    1084:	2400      	movs	r4, #0
	adv->ull.ticks_prepare_to_start =
    1086:	2331      	movs	r3, #49	; 0x31
	adv->ull.ticks_preempt_to_start =
    1088:	e9c6 3402 	strd	r3, r4, [r6, #8]
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
    108c:	fba0 0101 	umull	r0, r1, r0, r1
    1090:	a343      	add	r3, pc, #268	; (adr r3, 11a0 <CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE+0x1a0>)
    1092:	e9d3 2300 	ldrd	r2, r3, [r3]
	hdr->disabled_cb = hdr->disabled_param = NULL;
    1096:	e9c6 4405 	strd	r4, r4, [r6, #20]
	hdr->ref = 0U;
    109a:	7034      	strb	r4, [r6, #0]
	adv->ull.ticks_active_to_start = 0;
    109c:	6074      	str	r4, [r6, #4]
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
    109e:	f7ff fc8d 	bl	9bc <__aeabi_uldivmod>
    10a2:	6130      	str	r0, [r6, #16]
	ticks_anchor = ticker_ticks_now_get();
    10a4:	f01b f839 	bl	1c11a <ticker_ticks_now_get>
    10a8:	4605      	mov	r5, r0
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
    10aa:	f1b8 0f00 	cmp.w	r8, #0
    10ae:	d106      	bne.n	10be <CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE+0xbe>
    10b0:	f899 4000 	ldrb.w	r4, [r9]
    10b4:	f004 040f 	and.w	r4, r4, #15
    10b8:	1e63      	subs	r3, r4, #1
    10ba:	425c      	negs	r4, r3
    10bc:	415c      	adcs	r4, r3
    10be:	f896 9024 	ldrb.w	r9, [r6, #36]	; 0x24
				   (adv->ull.ticks_slot + ticks_slot_overhead),
    10c2:	6933      	ldr	r3, [r6, #16]
    10c4:	f8df b0e8 	ldr.w	fp, [pc, #232]	; 11b0 <CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE+0x1b0>
    10c8:	4a3a      	ldr	r2, [pc, #232]	; (11b4 <CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE+0x1b4>)
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
    10ca:	f364 0900 	bfi	r9, r4, #0, #1
    10ce:	f886 9024 	strb.w	r9, [r6, #36]	; 0x24
	if (lll->is_hdcd) {
    10d2:	f04f 0a02 	mov.w	sl, #2
    10d6:	f019 0901 	ands.w	r9, r9, #1
    10da:	ac0d      	add	r4, sp, #52	; 0x34
		ret_cb = TICKER_STATUS_BUSY;
    10dc:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
	if (lll->is_hdcd) {
    10e0:	d031      	beq.n	1146 <CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE+0x146>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    10e2:	2000      	movs	r0, #0
    10e4:	e9cd 2605 	strd	r2, r6, [sp, #20]
    10e8:	e9cd 0300 	strd	r0, r3, [sp]
    10ec:	9304      	str	r3, [sp, #16]
    10ee:	2103      	movs	r1, #3
    10f0:	e9cd b407 	strd	fp, r4, [sp, #28]
    10f4:	e9cd 0002 	strd	r0, r0, [sp, #8]
    10f8:	462b      	mov	r3, r5
    10fa:	4652      	mov	r2, sl
    10fc:	f01a ffda 	bl	1c0b4 <ticker_start>
		ret = ull_ticker_status_take(ret, &ret_cb);
    1100:	4621      	mov	r1, r4
    1102:	f00c f877 	bl	d1f4 <ull_ticker_status_take>
		if (ret != TICKER_STATUS_SUCCESS) {
    1106:	2800      	cmp	r0, #0
    1108:	d140      	bne.n	118c <CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE+0x18c>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    110a:	4a2b      	ldr	r2, [pc, #172]	; (11b8 <CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE+0x1b8>)
    110c:	9606      	str	r6, [sp, #24]
    110e:	f24a 33d8 	movw	r3, #41944	; 0xa3d8
    1112:	e9cd 0204 	strd	r0, r2, [sp, #16]
    1116:	9300      	str	r3, [sp, #0]
    1118:	e9cd b407 	strd	fp, r4, [sp, #28]
    111c:	e9cd 0002 	strd	r0, r0, [sp, #8]
    1120:	9001      	str	r0, [sp, #4]
    1122:	462b      	mov	r3, r5
    1124:	2201      	movs	r2, #1
    1126:	2103      	movs	r1, #3
		ret_cb = TICKER_STATUS_BUSY;
    1128:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    112c:	f01a ffc2 	bl	1c0b4 <ticker_start>
	ret = ull_ticker_status_take(ret, &ret_cb);
    1130:	4621      	mov	r1, r4
    1132:	f00c f85f 	bl	d1f4 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
    1136:	bb48      	cbnz	r0, 118c <CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE+0x18c>
	adv->is_enabled = 1;
    1138:	f896 306a 	ldrb.w	r3, [r6, #106]	; 0x6a
    113c:	f043 0301 	orr.w	r3, r3, #1
    1140:	f886 306a 	strb.w	r3, [r6, #106]	; 0x6a
	return 0;
    1144:	e783      	b.n	104e <CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE+0x4e>
		ll_adv_ticker_ext[handle].ticks_slot_window =
    1146:	491d      	ldr	r1, [pc, #116]	; (11bc <CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE+0x1bc>)
			ULL_ADV_RANDOM_DELAY + ticks_slot;
    1148:	f203 1047 	addw	r0, r3, #327	; 0x147
		ll_adv_ticker_ext[handle].ticks_slot_window =
    114c:	6008      	str	r0, [r1, #0]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    114e:	481c      	ldr	r0, [pc, #112]	; (11c0 <CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE+0x1c0>)
		ret = ticker_start_ext(
    1150:	e9cd 3204 	strd	r3, r2, [sp, #16]
    1154:	e9cd 4108 	strd	r4, r1, [sp, #32]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    1158:	f04f 0c91 	mov.w	ip, #145	; 0x91
    115c:	fba8 0100 	umull	r0, r1, r8, r0
		ret = ticker_start_ext(
    1160:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1164:	e9cd 9302 	strd	r9, r3, [sp, #8]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    1168:	fb0c 1108 	mla	r1, ip, r8, r1
    116c:	a30c      	add	r3, pc, #48	; (adr r3, 11a0 <CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE+0x1a0>)
    116e:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret = ticker_start_ext(
    1172:	e9cd 6b06 	strd	r6, fp, [sp, #24]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    1176:	f7ff fc21 	bl	9bc <__aeabi_uldivmod>
		ret = ticker_start_ext(
    117a:	462b      	mov	r3, r5
    117c:	e9cd 9000 	strd	r9, r0, [sp]
    1180:	4652      	mov	r2, sl
    1182:	2103      	movs	r1, #3
    1184:	4648      	mov	r0, r9
    1186:	f00a fc0f 	bl	b9a8 <ticker_start_ext>
    118a:	e7d1      	b.n	1130 <CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE+0x130>
	if (adv->lll.conn) {
    118c:	6a33      	ldr	r3, [r6, #32]
    118e:	2b00      	cmp	r3, #0
    1190:	f43f aec1 	beq.w	f16 <ll_adv_enable+0x76>
		conn_release(adv);
    1194:	4804      	ldr	r0, [pc, #16]	; (11a8 <CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE+0x1a8>)
    1196:	f00c fce5 	bl	db64 <conn_release>
    119a:	e6bc      	b.n	f16 <ll_adv_enable+0x76>
			return 0;
    119c:	2700      	movs	r7, #0
    119e:	e756      	b.n	104e <CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE+0x4e>
    11a0:	1afd498d 	.word	0x1afd498d
    11a4:	00000007 	.word	0x00000007
    11a8:	2000235c 	.word	0x2000235c
    11ac:	3b9aca00 	.word	0x3b9aca00
    11b0:	0000cc49 	.word	0x0000cc49
    11b4:	0000dd2d 	.word	0x0000dd2d
    11b8:	0000da61 	.word	0x0000da61
    11bc:	200023c8 	.word	0x200023c8
    11c0:	84e72a00 	.word	0x84e72a00
    11c4:	00000000 	.word	0x00000000

000011c8 <ull_adv_time_update>:
{
    11c8:	b570      	push	{r4, r5, r6, lr}
	chan_map = lll->chan_map;
    11ca:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
    11ce:	b08a      	sub	sp, #40	; 0x28
	chan_map = lll->chan_map;
    11d0:	f3c3 0342 	ubfx	r3, r3, #1, #3
{
    11d4:	460d      	mov	r5, r1
    11d6:	4604      	mov	r4, r0
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    11d8:	2101      	movs	r1, #1
    11da:	f10d 0023 	add.w	r0, sp, #35	; 0x23
{
    11de:	4616      	mov	r6, r2
	chan_map = lll->chan_map;
    11e0:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    11e4:	f01a fcf1 	bl	1bbca <util_ones_count_get>
	time_us = adv_time_get(pdu, pdu_scan, chan_cnt, phy, phy_flags);
    11e8:	7871      	ldrb	r1, [r6, #1]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    11ea:	4602      	mov	r2, r0
	time_us = adv_time_get(pdu, pdu_scan, chan_cnt, phy, phy_flags);
    11ec:	4628      	mov	r0, r5
    11ee:	f01b f874 	bl	1c2da <adv_time_get.constprop.0.isra.0>
	time_ticks = HAL_TICKER_US_TO_TICKS(time_us);
    11f2:	491d      	ldr	r1, [pc, #116]	; (1268 <ull_adv_time_update+0xa0>)
    11f4:	a31a      	add	r3, pc, #104	; (adr r3, 1260 <ull_adv_time_update+0x98>)
    11f6:	e9d3 2300 	ldrd	r2, r3, [r3]
    11fa:	fba0 0101 	umull	r0, r1, r0, r1
    11fe:	f7ff fbdd 	bl	9bc <__aeabi_uldivmod>
	if (adv->ull.ticks_slot > time_ticks) {
    1202:	6921      	ldr	r1, [r4, #16]
	time_ticks = HAL_TICKER_US_TO_TICKS(time_us);
    1204:	4605      	mov	r5, r0
	if (adv->ull.ticks_slot > time_ticks) {
    1206:	428d      	cmp	r5, r1
    1208:	d21f      	bcs.n	124a <ull_adv_time_update+0x82>
		ticks_minus = adv->ull.ticks_slot - time_ticks;
    120a:	1b48      	subs	r0, r1, r5
		ticks_plus = 0U;
    120c:	2100      	movs	r1, #0
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    120e:	4a17      	ldr	r2, [pc, #92]	; (126c <ull_adv_time_update+0xa4>)
	ret_cb = TICKER_STATUS_BUSY;
    1210:	2302      	movs	r3, #2
    1212:	9309      	str	r3, [sp, #36]	; 0x24
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    1214:	1aa2      	subs	r2, r4, r2
    1216:	236c      	movs	r3, #108	; 0x6c
    1218:	fbb2 f2f3 	udiv	r2, r2, r3
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    121c:	4b14      	ldr	r3, [pc, #80]	; (1270 <ull_adv_time_update+0xa8>)
    121e:	9305      	str	r3, [sp, #20]
    1220:	ae09      	add	r6, sp, #36	; 0x24
    1222:	2300      	movs	r3, #0
    1224:	3202      	adds	r2, #2
    1226:	e9cd 1001 	strd	r1, r0, [sp, #4]
    122a:	e9cd 3303 	strd	r3, r3, [sp, #12]
    122e:	2103      	movs	r1, #3
    1230:	9606      	str	r6, [sp, #24]
    1232:	9300      	str	r3, [sp, #0]
    1234:	b2d2      	uxtb	r2, r2
    1236:	4618      	mov	r0, r3
    1238:	f01a ff57 	bl	1c0ea <ticker_update>
	ret = ull_ticker_status_take(ret, &ret_cb);
    123c:	4631      	mov	r1, r6
    123e:	f00b ffd9 	bl	d1f4 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
    1242:	b940      	cbnz	r0, 1256 <ull_adv_time_update+0x8e>
	adv->ull.ticks_slot = time_ticks;
    1244:	6125      	str	r5, [r4, #16]
}
    1246:	b00a      	add	sp, #40	; 0x28
    1248:	bd70      	pop	{r4, r5, r6, pc}
	} else if (adv->ull.ticks_slot < time_ticks) {
    124a:	d902      	bls.n	1252 <ull_adv_time_update+0x8a>
		ticks_plus = time_ticks - adv->ull.ticks_slot;
    124c:	1a69      	subs	r1, r5, r1
		ticks_minus = 0U;
    124e:	2000      	movs	r0, #0
    1250:	e7dd      	b.n	120e <ull_adv_time_update+0x46>
		return BT_HCI_ERR_SUCCESS;
    1252:	2000      	movs	r0, #0
    1254:	e7f7      	b.n	1246 <ull_adv_time_update+0x7e>
		return BT_HCI_ERR_CMD_DISALLOWED;
    1256:	200c      	movs	r0, #12
    1258:	e7f5      	b.n	1246 <ull_adv_time_update+0x7e>
    125a:	bf00      	nop
    125c:	f3af 8000 	nop.w
    1260:	1afd498d 	.word	0x1afd498d
    1264:	00000007 	.word	0x00000007
    1268:	3b9aca00 	.word	0x3b9aca00
    126c:	2000235c 	.word	0x2000235c
    1270:	0000cc49 	.word	0x0000cc49
    1274:	00000000 	.word	0x00000000

00001278 <ull_scan_enable>:
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
						   SCAN_INT_UNIT_US);
}

uint8_t ull_scan_enable(struct ll_scan_set *scan)
{
    1278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    127c:	4604      	mov	r4, r0
	scan->is_stop = 0U;
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	/* Initialize LLL scan context */
	lll = &scan->lll;
	lll->init_addr_type = scan->own_addr_type;
    127e:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    1282:	f894 3020 	ldrb.w	r3, [r4, #32]
	lll->is_stop = 0U;

	ull_hdr_init(&scan->ull);
	lll_hdr_init(lll, scan);

	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
    1286:	4f3e      	ldr	r7, [pc, #248]	; (1380 <ull_scan_enable+0x108>)
	lll->init_addr_type = scan->own_addr_type;
    1288:	f3c0 0040 	ubfx	r0, r0, #1, #1
    128c:	f360 1386 	bfi	r3, r0, #6, #1
{
    1290:	b08c      	sub	sp, #48	; 0x30
	lll->init_addr_type = scan->own_addr_type;
    1292:	f884 3020 	strb.w	r3, [r4, #32]
	(void)ll_addr_read(lll->init_addr_type, lll->init_addr);
    1296:	f104 0121 	add.w	r1, r4, #33	; 0x21
    129a:	f01a ff44 	bl	1c126 <ll_addr_read>
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
    129e:	8d26      	ldrh	r6, [r4, #40]	; 0x28
	lll->chan = 0U;
    12a0:	f894 3020 	ldrb.w	r3, [r4, #32]
    12a4:	61e4      	str	r4, [r4, #28]
    12a6:	2500      	movs	r5, #0
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
    12a8:	fba6 0107 	umull	r0, r1, r6, r7
    12ac:	f04f 0c91 	mov.w	ip, #145	; 0x91
	lll->chan = 0U;
    12b0:	f003 0379 	and.w	r3, r3, #121	; 0x79
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
    12b4:	fb0c 1106 	mla	r1, ip, r6, r1
	hdr->disabled_cb = hdr->disabled_param = NULL;
    12b8:	e9c4 5505 	strd	r5, r5, [r4, #20]
	lll->chan = 0U;
    12bc:	f884 3020 	strb.w	r3, [r4, #32]
	hdr->ref = 0U;
    12c0:	7025      	strb	r5, [r4, #0]
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
    12c2:	a32d      	add	r3, pc, #180	; (adr r3, 1378 <ull_scan_enable+0x100>)
    12c4:	e9d3 2300 	ldrd	r2, r3, [r3]
    12c8:	f7ff fb78 	bl	9bc <__aeabi_uldivmod>
						SCAN_INT_UNIT_US);

	/* TODO: active_to_start feature port */
	scan->ull.ticks_active_to_start = 0U;
	scan->ull.ticks_prepare_to_start =
    12cc:	2331      	movs	r3, #49	; 0x31
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_XTAL_US);
	scan->ull.ticks_preempt_to_start =
    12ce:	e9c4 3502 	strd	r3, r5, [r4, #8]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_PREEMPT_MIN_US);
	if ((lll->ticks_window +
    12d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	scan->ull.ticks_active_to_start = 0U;
    12d4:	6065      	str	r5, [r4, #4]
	if ((lll->ticks_window +
    12d6:	3309      	adds	r3, #9
	     HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US)) <
	    (ticks_interval -
    12d8:	f1a0 0231 	sub.w	r2, r0, #49	; 0x31
	if ((lll->ticks_window +
    12dc:	4293      	cmp	r3, r2
	     HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_XTAL_US))) {
		scan->ull.ticks_slot =
    12de:	bf32      	itee	cc
    12e0:	6123      	strcc	r3, [r4, #16]
			(lll->ticks_window +
			 HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US));
	} else {
		if (IS_ENABLED(CONFIG_BT_CTLR_SCAN_UNRESERVED)) {
			scan->ull.ticks_slot = 0U;
    12e2:	6125      	strcs	r5, [r4, #16]
		} else {
			scan->ull.ticks_slot = ticks_interval -
				HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_XTAL_US);
		}

		lll->ticks_window = 0U;
    12e4:	62e5      	strcs	r5, [r4, #44]	; 0x2c
	return &ll_scan[handle];
}

uint8_t ull_scan_handle_get(struct ll_scan_set *scan)
{
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
    12e6:	4d27      	ldr	r5, [pc, #156]	; (1384 <ull_scan_enable+0x10c>)
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
    12e8:	4606      	mov	r6, r0
	ticks_anchor = ticker_ticks_now_get();
    12ea:	f01a ff16 	bl	1c11a <ticker_ticks_now_get>
	ret_cb = TICKER_STATUS_BUSY;
    12ee:	2302      	movs	r3, #2
    12f0:	930b      	str	r3, [sp, #44]	; 0x2c
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
    12f2:	1b65      	subs	r5, r4, r5
    12f4:	2334      	movs	r3, #52	; 0x34
    12f6:	fbb5 f5f3 	udiv	r5, r5, r3
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    12fa:	4b23      	ldr	r3, [pc, #140]	; (1388 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT>)
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
    12fc:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1300:	e9cd 4306 	strd	r4, r3, [sp, #24]
    1304:	46b8      	mov	r8, r7
    1306:	4b21      	ldr	r3, [pc, #132]	; (138c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4>)
    1308:	9305      	str	r3, [sp, #20]
	ticks_anchor = ticker_ticks_now_get();
    130a:	4607      	mov	r7, r0
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    130c:	6923      	ldr	r3, [r4, #16]
    130e:	9304      	str	r3, [sp, #16]
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
    1310:	fbac 0808 	umull	r0, r8, ip, r8
    1314:	2191      	movs	r1, #145	; 0x91
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1316:	f04f 0900 	mov.w	r9, #0
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
    131a:	fb01 810c 	mla	r1, r1, ip, r8
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    131e:	f10d 0a2c 	add.w	sl, sp, #44	; 0x2c
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
    1322:	a315      	add	r3, pc, #84	; (adr r3, 1378 <ull_scan_enable+0x100>)
    1324:	e9d3 2300 	ldrd	r2, r3, [r3]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1328:	f8cd a020 	str.w	sl, [sp, #32]
    132c:	f8cd 900c 	str.w	r9, [sp, #12]
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
    1330:	f7ff fb44 	bl	9bc <__aeabi_uldivmod>
    1334:	4610      	mov	r0, r2
    1336:	4619      	mov	r1, r3
    1338:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    133c:	2300      	movs	r3, #0
    133e:	f7ff fb3d 	bl	9bc <__aeabi_uldivmod>
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1342:	3504      	adds	r5, #4
    1344:	b2ed      	uxtb	r5, r5
    1346:	e9cd 6001 	strd	r6, r0, [sp, #4]
    134a:	2103      	movs	r1, #3
    134c:	f8cd 9000 	str.w	r9, [sp]
    1350:	463b      	mov	r3, r7
    1352:	462a      	mov	r2, r5
    1354:	4648      	mov	r0, r9
    1356:	f01a fead 	bl	1c0b4 <ticker_start>
	ret = ull_ticker_status_take(ret, &ret_cb);
    135a:	4651      	mov	r1, sl
    135c:	f00b ff4a 	bl	d1f4 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
    1360:	b940      	cbnz	r0, 1374 <ull_scan_enable+0xfc>
	scan->is_enabled = 1U;
    1362:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    1366:	f043 0301 	orr.w	r3, r3, #1
    136a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
    136e:	b00c      	add	sp, #48	; 0x30
    1370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    1374:	200c      	movs	r0, #12
    1376:	e7fa      	b.n	136e <ull_scan_enable+0xf6>
    1378:	1afd498d 	.word	0x1afd498d
    137c:	00000007 	.word	0x00000007
    1380:	84e72a00 	.word	0x84e72a00
    1384:	200023ec 	.word	0x200023ec
    1388:	0000cc49 	.word	0x0000cc49
    138c:	0000e179 	.word	0x0000e179

00001390 <ll_scan_params_set>:
{
    1390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1392:	4604      	mov	r4, r0
	scan = ull_scan_is_disabled_get(SCAN_HANDLE_1M);
    1394:	2000      	movs	r0, #0
{
    1396:	4616      	mov	r6, r2
    1398:	461f      	mov	r7, r3
	scan = ull_scan_is_disabled_get(SCAN_HANDLE_1M);
    139a:	f00c ff69 	bl	e270 <ull_scan_is_disabled_get>
	if (!scan) {
    139e:	4605      	mov	r5, r0
    13a0:	b320      	cbz	r0, 13ec <ll_scan_params_set+0x5c>
	scan->own_addr_type = own_addr_type;
    13a2:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
	lll->interval = interval;
    13a6:	8501      	strh	r1, [r0, #40]	; 0x28
	scan->own_addr_type = own_addr_type;
    13a8:	f367 0342 	bfi	r3, r7, #1, #2
    13ac:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
	lll->filter_policy = filter_policy;
    13b0:	f89d 3018 	ldrb.w	r3, [sp, #24]
    13b4:	0164      	lsls	r4, r4, #5
    13b6:	00db      	lsls	r3, r3, #3
    13b8:	f003 0318 	and.w	r3, r3, #24
    13bc:	f004 0420 	and.w	r4, r4, #32
    13c0:	431c      	orrs	r4, r3
    13c2:	f890 3020 	ldrb.w	r3, [r0, #32]
    13c6:	f023 0338 	bic.w	r3, r3, #56	; 0x38
    13ca:	431c      	orrs	r4, r3
    13cc:	f880 4020 	strb.w	r4, [r0, #32]
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
    13d0:	4809      	ldr	r0, [pc, #36]	; (13f8 <ll_scan_params_set+0x68>)
    13d2:	2491      	movs	r4, #145	; 0x91
    13d4:	fba6 0100 	umull	r0, r1, r6, r0
    13d8:	a305      	add	r3, pc, #20	; (adr r3, 13f0 <ll_scan_params_set+0x60>)
    13da:	e9d3 2300 	ldrd	r2, r3, [r3]
    13de:	fb04 1106 	mla	r1, r4, r6, r1
    13e2:	f7ff faeb 	bl	9bc <__aeabi_uldivmod>
    13e6:	62e8      	str	r0, [r5, #44]	; 0x2c
	return 0;
    13e8:	2000      	movs	r0, #0
}
    13ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    13ec:	200c      	movs	r0, #12
    13ee:	e7fc      	b.n	13ea <ll_scan_params_set+0x5a>
    13f0:	1afd498d 	.word	0x1afd498d
    13f4:	00000007 	.word	0x00000007
    13f8:	84e72a00 	.word	0x84e72a00
    13fc:	00000000 	.word	0x00000000

00001400 <ull_conn_llcp>:

	return 0;
}

int ull_conn_llcp(struct ll_conn *conn, uint32_t ticks_at_expire, uint16_t lazy)
{
    1400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1404:	4615      	mov	r5, r2
#if defined(CONFIG_BT_LL_SW_LLCP_LEGACY)
	/* Check if no other procedure with instant is requested and not in
	 * Encryption setup.
	 */
	if ((conn->llcp_ack == conn->llcp_req) &&
    1406:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
    140a:	f890 2089 	ldrb.w	r2, [r0, #137]	; 0x89
    140e:	4293      	cmp	r3, r2
{
    1410:	b08b      	sub	sp, #44	; 0x2c
    1412:	4604      	mov	r4, r0
    1414:	4689      	mov	r9, r1
	if ((conn->llcp_ack == conn->llcp_req) &&
    1416:	d10b      	bne.n	1430 <ull_conn_llcp+0x30>
#endif /* !CONFIG_BT_CTLR_LE_ENC */

		/* TODO: Optimize the checks below, maybe have common flag */

		/* check if connection update procedure is requested */
		if (conn->llcp_cu.ack != conn->llcp_cu.req) {
    1418:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    141c:	f890 209c 	ldrb.w	r2, [r0, #156]	; 0x9c
    1420:	428a      	cmp	r2, r1
    1422:	d025      	beq.n	1470 <ull_conn_llcp+0x70>
			/* switch to LLCP_CONN_UPD state machine */
			conn->llcp_type = LLCP_CONN_UPD;
    1424:	2201      	movs	r2, #1
			conn->llcp_ack -= 2U;
    1426:	3b02      	subs	r3, #2
			conn->llcp_type = LLCP_CONN_UPD;
    1428:	f880 208a 	strb.w	r2, [r0, #138]	; 0x8a
			conn->llcp_ack -= 2U;
    142c:	f880 3089 	strb.w	r3, [r0, #137]	; 0x89
	}

	/* Check if procedures with instant or encryption setup is requested or
	 * active.
	 */
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    1430:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
    1434:	f894 2089 	ldrb.w	r2, [r4, #137]	; 0x89
    1438:	1a9a      	subs	r2, r3, r2
    143a:	f002 0203 	and.w	r2, r2, #3
    143e:	2a02      	cmp	r2, #2
    1440:	f040 826d 	bne.w	191e <ull_conn_llcp+0x51e>
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */
		}

		/* Process procedures with instants or encryption setup */
		/* FIXME: Make LE Ping cacheable */
		switch (conn->llcp_type) {
    1444:	f894 008a 	ldrb.w	r0, [r4, #138]	; 0x8a
    1448:	2801      	cmp	r0, #1
    144a:	f000 8214 	beq.w	1876 <ull_conn_llcp+0x476>
    144e:	2802      	cmp	r0, #2
    1450:	f000 842c 	beq.w	1cac <ull_conn_llcp+0x8ac>
		}
		break;
#endif /* CONFIG_BT_CTLR_PHY */

		default:
			LL_ASSERT(0);
    1454:	4acc      	ldr	r2, [pc, #816]	; (1788 <ull_conn_llcp+0x388>)
    1456:	49cd      	ldr	r1, [pc, #820]	; (178c <ull_conn_llcp+0x38c>)
    1458:	48cd      	ldr	r0, [pc, #820]	; (1790 <ull_conn_llcp+0x390>)
    145a:	f240 43e1 	movw	r3, #1249	; 0x4e1
    145e:	f015 f8cc 	bl	165fa <printk>
    1462:	4040      	eors	r0, r0
    1464:	f380 8811 	msr	BASEPRI, r0
    1468:	f04f 0003 	mov.w	r0, #3
    146c:	df02      	svc	2
			break;
    146e:	e256      	b.n	191e <ull_conn_llcp+0x51e>
		} else if (conn->llcp_feature.ack != conn->llcp_feature.req) {
    1470:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
    1474:	f890 20b0 	ldrb.w	r2, [r0, #176]	; 0xb0
    1478:	4293      	cmp	r3, r2
    147a:	d05b      	beq.n	1534 <ull_conn_llcp+0x134>
static inline void event_fex_prep(struct ll_conn *conn)
{
	struct node_tx *tx;

	/* If waiting for response, do nothing */
	if (!((conn->llcp_feature.ack - conn->llcp_feature.req) & 0x01)) {
    147c:	1a9b      	subs	r3, r3, r2
    147e:	07da      	lsls	r2, r3, #31
    1480:	d5d6      	bpl.n	1430 <ull_conn_llcp+0x30>
		return;
	}

	if (conn->common.fex_valid) {
    1482:	f890 107c 	ldrb.w	r1, [r0, #124]	; 0x7c
    1486:	f011 0801 	ands.w	r8, r1, #1
    148a:	d026      	beq.n	14da <ull_conn_llcp+0xda>
		struct node_rx_pdu *rx;
		struct pdu_data *pdu;

		/* get a rx node for ULL->LL */
		rx = ll_pdu_rx_alloc();
    148c:	f00b fe50 	bl	d130 <ll_pdu_rx_alloc>
		if (!rx) {
    1490:	4606      	mov	r6, r0
    1492:	2800      	cmp	r0, #0
    1494:	d0cc      	beq.n	1430 <ull_conn_llcp+0x30>
			return;
		}

		/* procedure request acked */
		conn->llcp_feature.ack = conn->llcp_feature.req;
    1496:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
    149a:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1

		/* prepare feature rsp structure */
		rx->hdr.handle = conn->lll.handle;
    149e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    14a0:	80c3      	strh	r3, [r0, #6]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    14a2:	2303      	movs	r3, #3
    14a4:	7103      	strb	r3, [r0, #4]
		pdu = (void *)rx->pdu;
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    14a6:	7f03      	ldrb	r3, [r0, #28]
    14a8:	f043 0303 	orr.w	r3, r3, #3
    14ac:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
			   sizeof(struct pdu_data_llctrl_feature_rsp);
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
		(void)memset(&pdu->llctrl.feature_rsp.features[0], 0x00,
    14ae:	f100 0720 	add.w	r7, r0, #32
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    14b2:	2309      	movs	r3, #9
    14b4:	7743      	strb	r3, [r0, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    14b6:	77c3      	strb	r3, [r0, #31]
		(void)memset(&pdu->llctrl.feature_rsp.features[0], 0x00,
    14b8:	2208      	movs	r2, #8
    14ba:	2100      	movs	r1, #0
    14bc:	4638      	mov	r0, r7
    14be:	f015 fed4 	bl	1726a <memset>
			sizeof(pdu->llctrl.feature_rsp.features));
		sys_put_le64(conn->llcp_feature.features_peer,
    14c2:	e9d4 0130 	ldrd	r0, r1, [r4, #192]	; 0xc0
    14c6:	463a      	mov	r2, r7
    14c8:	f01b f84e 	bl	1c568 <sys_put_le64>
			     pdu->llctrl.feature_req.features);

		/* enqueue feature rsp structure into rx queue */
		ll_rx_put(rx->hdr.link, rx);
    14cc:	4631      	mov	r1, r6
			sys_cpu_to_le16(conn->llcp_version.company_id);
		pdu->llctrl.version_ind.sub_version_number =
			sys_cpu_to_le16(conn->llcp_version.sub_version_number);

		/* enqueue version ind structure into rx queue */
		ll_rx_put(rx->hdr.link, rx);
    14ce:	6808      	ldr	r0, [r1, #0]
    14d0:	f00b fd82 	bl	cfd8 <ll_rx_put>
		ll_rx_sched();
    14d4:	f00b fd8a 	bl	cfec <ll_rx_sched>
    14d8:	e7aa      	b.n	1430 <ull_conn_llcp+0x30>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    14da:	48ae      	ldr	r0, [pc, #696]	; (1794 <ull_conn_llcp+0x394>)
    14dc:	f01a faf9 	bl	1bad2 <mem_acquire>
	if (tx) {
    14e0:	4606      	mov	r6, r0
    14e2:	2800      	cmp	r0, #0
    14e4:	d0a4      	beq.n	1430 <ull_conn_llcp+0x30>
		conn->llcp_feature.ack--;
    14e6:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
    14ea:	3b01      	subs	r3, #1
    14ec:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    14f0:	7903      	ldrb	r3, [r0, #4]
    14f2:	f043 0303 	orr.w	r3, r3, #3
    14f6:	7103      	strb	r3, [r0, #4]
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
    14f8:	2309      	movs	r3, #9
    14fa:	7143      	strb	r3, [r0, #5]
		pdu->llctrl.opcode = !conn->lll.role ?
    14fc:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    1500:	2b00      	cmp	r3, #0
    1502:	bfac      	ite	ge
    1504:	2308      	movge	r3, #8
    1506:	230e      	movlt	r3, #14
		(void)memset(&pdu->llctrl.feature_req.features[0],
    1508:	f100 0708 	add.w	r7, r0, #8
		pdu->llctrl.opcode = !conn->lll.role ?
    150c:	71c3      	strb	r3, [r0, #7]
		(void)memset(&pdu->llctrl.feature_req.features[0],
    150e:	2208      	movs	r2, #8
    1510:	4641      	mov	r1, r8
    1512:	4638      	mov	r0, r7
    1514:	f015 fea9 	bl	1726a <memset>
		sys_put_le64(conn->llcp_feature.features_conn,
    1518:	e9d4 012e 	ldrd	r0, r1, [r4, #184]	; 0xb8
    151c:	463a      	mov	r2, r7
    151e:	f01b f823 	bl	1c568 <sys_put_le64>
		ctrl_tx_enqueue(conn, tx);
    1522:	4631      	mov	r1, r6
			ctrl_tx_enqueue(conn, tx);
    1524:	4620      	mov	r0, r4
    1526:	f01b f830 	bl	1c58a <ctrl_tx_enqueue>
			conn->procedure_expire = conn->procedure_reload;
    152a:	f8b4 3076 	ldrh.w	r3, [r4, #118]	; 0x76
    152e:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
    1532:	e77d      	b.n	1430 <ull_conn_llcp+0x30>
		} else if (conn->llcp_version.ack != conn->llcp_version.req) {
    1534:	f890 30c9 	ldrb.w	r3, [r0, #201]	; 0xc9
    1538:	f890 20c8 	ldrb.w	r2, [r0, #200]	; 0xc8
    153c:	4293      	cmp	r3, r2
    153e:	d05f      	beq.n	1600 <ull_conn_llcp+0x200>
	if (!((conn->llcp_version.ack - conn->llcp_version.req) & 0x01)) {
    1540:	1a9b      	subs	r3, r3, r2
    1542:	07db      	lsls	r3, r3, #31
    1544:	f57f af74 	bpl.w	1430 <ull_conn_llcp+0x30>
	if (conn->llcp_version.tx == 0U) {
    1548:	f890 30ca 	ldrb.w	r3, [r0, #202]	; 0xca
    154c:	07df      	lsls	r7, r3, #31
    154e:	d424      	bmi.n	159a <ull_conn_llcp+0x19a>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1550:	4890      	ldr	r0, [pc, #576]	; (1794 <ull_conn_llcp+0x394>)
    1552:	f01a fabe 	bl	1bad2 <mem_acquire>
		if (tx) {
    1556:	4601      	mov	r1, r0
    1558:	2800      	cmp	r0, #0
    155a:	f43f af69 	beq.w	1430 <ull_conn_llcp+0x30>
			conn->llcp_version.ack--;
    155e:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    1562:	3b01      	subs	r3, #1
    1564:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
			conn->llcp_version.tx = 1U;
    1568:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
    156c:	f043 0301 	orr.w	r3, r3, #1
    1570:	f884 30ca 	strb.w	r3, [r4, #202]	; 0xca
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    1574:	7903      	ldrb	r3, [r0, #4]
    1576:	f043 0303 	orr.w	r3, r3, #3
    157a:	7103      	strb	r3, [r0, #4]
			pdu->len =
    157c:	2306      	movs	r3, #6
    157e:	7143      	strb	r3, [r0, #5]
			pdu->llctrl.opcode =
    1580:	230c      	movs	r3, #12
    1582:	71c3      	strb	r3, [r0, #7]
			pdu->llctrl.version_ind.version_number =
    1584:	7203      	strb	r3, [r0, #8]
			pdu->llctrl.version_ind.company_id = cid;
    1586:	f06f 030e 	mvn.w	r3, #14
    158a:	7243      	strb	r3, [r0, #9]
    158c:	2305      	movs	r3, #5
    158e:	7283      	strb	r3, [r0, #10]
			pdu->llctrl.version_ind.sub_version_number = svn;
    1590:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1594:	72c3      	strb	r3, [r0, #11]
    1596:	7303      	strb	r3, [r0, #12]
    1598:	e7c4      	b.n	1524 <ull_conn_llcp+0x124>
	} else if (conn->llcp_version.rx) {
    159a:	079e      	lsls	r6, r3, #30
    159c:	d522      	bpl.n	15e4 <ull_conn_llcp+0x1e4>
		rx = ll_pdu_rx_alloc();
    159e:	f00b fdc7 	bl	d130 <ll_pdu_rx_alloc>
		if (!rx) {
    15a2:	4601      	mov	r1, r0
    15a4:	2800      	cmp	r0, #0
    15a6:	f43f af43 	beq.w	1430 <ull_conn_llcp+0x30>
		conn->llcp_version.ack = conn->llcp_version.req;
    15aa:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    15ae:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
		rx->hdr.handle = conn->lll.handle;
    15b2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    15b4:	80c3      	strh	r3, [r0, #6]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    15b6:	2303      	movs	r3, #3
    15b8:	7103      	strb	r3, [r0, #4]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    15ba:	7f03      	ldrb	r3, [r0, #28]
    15bc:	f043 0303 	orr.w	r3, r3, #3
    15c0:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
    15c2:	2306      	movs	r3, #6
    15c4:	7743      	strb	r3, [r0, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    15c6:	230c      	movs	r3, #12
    15c8:	77c3      	strb	r3, [r0, #31]
		pdu->llctrl.version_ind.version_number =
    15ca:	f894 30cb 	ldrb.w	r3, [r4, #203]	; 0xcb
    15ce:	f880 3020 	strb.w	r3, [r0, #32]
		pdu->llctrl.version_ind.company_id =
    15d2:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
    15d6:	f8a0 3021 	strh.w	r3, [r0, #33]	; 0x21
		pdu->llctrl.version_ind.sub_version_number =
    15da:	f8b4 30ce 	ldrh.w	r3, [r4, #206]	; 0xce
    15de:	f8a0 3023 	strh.w	r3, [r0, #35]	; 0x23
    15e2:	e774      	b.n	14ce <ull_conn_llcp+0xce>
	} else {
		/* tx-ed but no rx, and new request placed */
		LL_ASSERT(0);
    15e4:	f640 63a1 	movw	r3, #3745	; 0xea1
	}
	break;
#endif /* CONFIG_BT_CTLR_SCHED_ADVANCED */

	default:
		LL_ASSERT(0);
    15e8:	4a67      	ldr	r2, [pc, #412]	; (1788 <ull_conn_llcp+0x388>)
    15ea:	4968      	ldr	r1, [pc, #416]	; (178c <ull_conn_llcp+0x38c>)
    15ec:	4868      	ldr	r0, [pc, #416]	; (1790 <ull_conn_llcp+0x390>)
    15ee:	f015 f804 	bl	165fa <printk>
    15f2:	4040      	eors	r0, r0
    15f4:	f380 8811 	msr	BASEPRI, r0
    15f8:	f04f 0003 	mov.w	r0, #3
    15fc:	df02      	svc	2
		break;
    15fe:	e717      	b.n	1430 <ull_conn_llcp+0x30>
		} else if (conn->llcp_conn_param.ack !=
    1600:	f890 20f5 	ldrb.w	r2, [r0, #245]	; 0xf5
    1604:	f890 30f4 	ldrb.w	r3, [r0, #244]	; 0xf4
    1608:	429a      	cmp	r2, r3
    160a:	f43f af11 	beq.w	1430 <ull_conn_llcp+0x30>
	return conn_upd_curr && (conn_upd_curr != conn);
    160e:	4e62      	ldr	r6, [pc, #392]	; (1798 <ull_conn_llcp+0x398>)
    1610:	6833      	ldr	r3, [r6, #0]
    1612:	b113      	cbz	r3, 161a <ull_conn_llcp+0x21a>
	if (cpr_active_is_set(conn)) {
    1614:	4298      	cmp	r0, r3
    1616:	f47f af0b 	bne.w	1430 <ull_conn_llcp+0x30>
	switch (conn->llcp_conn_param.state) {
    161a:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
    161e:	f003 030f 	and.w	r3, r3, #15
    1622:	2b06      	cmp	r3, #6
    1624:	f200 8124 	bhi.w	1870 <ull_conn_llcp+0x470>
    1628:	a201      	add	r2, pc, #4	; (adr r2, 1630 <ull_conn_llcp+0x230>)
    162a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    162e:	bf00      	nop
    1630:	0000164d 	.word	0x0000164d
    1634:	000016d1 	.word	0x000016d1
    1638:	00001827 	.word	0x00001827
    163c:	00001431 	.word	0x00001431
    1640:	00001431 	.word	0x00001431
    1644:	00001431 	.word	0x00001431
    1648:	00001431 	.word	0x00001431
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    164c:	4851      	ldr	r0, [pc, #324]	; (1794 <ull_conn_llcp+0x394>)
			event_counter = lll->event_counter +
    164e:	8e67      	ldrh	r7, [r4, #50]	; 0x32
					lll->latency_prepare + lazy;
    1650:	f8b4 802e 	ldrh.w	r8, [r4, #46]	; 0x2e
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1654:	f01a fa3d 	bl	1bad2 <mem_acquire>
	if (!tx) {
    1658:	4601      	mov	r1, r0
    165a:	2800      	cmp	r0, #0
    165c:	f43f aee8 	beq.w	1430 <ull_conn_llcp+0x30>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1660:	7903      	ldrb	r3, [r0, #4]
	conn_upd_curr = conn;
    1662:	6034      	str	r4, [r6, #0]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1664:	f043 0303 	orr.w	r3, r3, #3
    1668:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    166a:	2318      	movs	r3, #24
    166c:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    166e:	230f      	movs	r3, #15
    1670:	71c3      	strb	r3, [r0, #7]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    1672:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
    1676:	8103      	strh	r3, [r0, #8]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    1678:	f8b4 30fa 	ldrh.w	r3, [r4, #250]	; 0xfa
    167c:	8143      	strh	r3, [r0, #10]
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    167e:	f8b4 30fc 	ldrh.w	r3, [r4, #252]	; 0xfc
    1682:	8183      	strh	r3, [r0, #12]
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    1684:	f8b4 30fe 	ldrh.w	r3, [r4, #254]	; 0xfe
    1688:	81c3      	strh	r3, [r0, #14]
	p->preferred_periodicity = 0U;
    168a:	2300      	movs	r3, #0
    168c:	7403      	strb	r3, [r0, #16]
	p->offset0 = sys_cpu_to_le16(0x0000);
    168e:	74c3      	strb	r3, [r0, #19]
    1690:	7503      	strb	r3, [r0, #20]
			event_counter = lll->event_counter +
    1692:	4447      	add	r7, r8
	p->offset1 = sys_cpu_to_le16(0xffff);
    1694:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1698:	7543      	strb	r3, [r0, #21]
    169a:	7583      	strb	r3, [r0, #22]
	p->offset2 = sys_cpu_to_le16(0xffff);
    169c:	75c3      	strb	r3, [r0, #23]
    169e:	7603      	strb	r3, [r0, #24]
	p->offset3 = sys_cpu_to_le16(0xffff);
    16a0:	7643      	strb	r3, [r0, #25]
    16a2:	7683      	strb	r3, [r0, #26]
	p->offset4 = sys_cpu_to_le16(0xffff);
    16a4:	76c3      	strb	r3, [r0, #27]
    16a6:	7703      	strb	r3, [r0, #28]
	p->offset5 = sys_cpu_to_le16(0xffff);
    16a8:	7743      	strb	r3, [r0, #29]
    16aa:	7783      	strb	r3, [r0, #30]
			event_counter = lll->event_counter +
    16ac:	442f      	add	r7, r5
	conn->procedure_expire = conn->procedure_reload;
    16ae:	f8b4 3076 	ldrh.w	r3, [r4, #118]	; 0x76
    16b2:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
	p->reference_conn_event_count = sys_cpu_to_le16(event_counter);
    16b6:	f8a0 7011 	strh.w	r7, [r0, #17]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    16ba:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
    16be:	2204      	movs	r2, #4
    16c0:	f362 0303 	bfi	r3, r2, #0, #4
    16c4:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
	ctrl_tx_enqueue(conn, tx);
    16c8:	4620      	mov	r0, r4
    16ca:	f01a ff5e 	bl	1c58a <ctrl_tx_enqueue>
    16ce:	e6af      	b.n	1430 <ull_conn_llcp+0x30>
	if (conn->llcp_conn_param.status) {
    16d0:	f894 30f7 	ldrb.w	r3, [r4, #247]	; 0xf7
    16d4:	b1eb      	cbz	r3, 1712 <ull_conn_llcp+0x312>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    16d6:	482f      	ldr	r0, [pc, #188]	; (1794 <ull_conn_llcp+0x394>)
    16d8:	f01a f9fb 	bl	1bad2 <mem_acquire>
		if (!tx) {
    16dc:	4601      	mov	r1, r0
    16de:	2800      	cmp	r0, #0
    16e0:	f43f aea6 	beq.w	1430 <ull_conn_llcp+0x30>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    16e4:	7903      	ldrb	r3, [r0, #4]
    16e6:	f043 0303 	orr.w	r3, r3, #3
    16ea:	7103      	strb	r3, [r0, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    16ec:	2311      	movs	r3, #17
    16ee:	71c3      	strb	r3, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    16f0:	2303      	movs	r3, #3
    16f2:	7143      	strb	r3, [r0, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    16f4:	230f      	movs	r3, #15
    16f6:	7203      	strb	r3, [r0, #8]
		rej->error_code = conn->llcp_conn_param.status;
    16f8:	f894 30f7 	ldrb.w	r3, [r4, #247]	; 0xf7
    16fc:	7243      	strb	r3, [r0, #9]
		ctrl_tx_enqueue(conn, tx);
    16fe:	4620      	mov	r0, r4
    1700:	f01a ff43 	bl	1c58a <ctrl_tx_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    1704:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
    1708:	f884 30f5 	strb.w	r3, [r4, #245]	; 0xf5
	conn_upd_curr = NULL;
    170c:	2300      	movs	r3, #0
    170e:	6033      	str	r3, [r6, #0]
		return;
    1710:	e68e      	b.n	1430 <ull_conn_llcp+0x30>
	if (!conn->lll.role) {
    1712:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
    1716:	2a00      	cmp	r2, #0
    1718:	db40      	blt.n	179c <ull_conn_llcp+0x39c>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    171a:	f894 20f6 	ldrb.w	r2, [r4, #246]	; 0xf6
		conn->llcp_cu.win_offset_us = 0U;
    171e:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    1722:	2006      	movs	r0, #6
    1724:	f360 0203 	bfi	r2, r0, #0, #4
		preferred_periodicity = conn->llcp_conn_param.preferred_periodicity;
    1728:	f894 0100 	ldrb.w	r0, [r4, #256]	; 0x100
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    172c:	f884 20f6 	strb.w	r2, [r4, #246]	; 0xf6
		conn->llcp_cu.win_size = 1U;
    1730:	2201      	movs	r2, #1
    1732:	f884 20ac 	strb.w	r2, [r4, #172]	; 0xac
		interval_max = conn->llcp_conn_param.interval_max;
    1736:	f8b4 20fa 	ldrh.w	r2, [r4, #250]	; 0xfa
		if (preferred_periodicity) {
    173a:	b148      	cbz	r0, 1750 <ull_conn_llcp+0x350>
			conn->llcp_cu.interval = (interval_max / preferred_periodicity) *
    173c:	fbb2 f3f0 	udiv	r3, r2, r0
    1740:	fb13 f300 	smulbb	r3, r3, r0
			if (conn->llcp_cu.interval < conn->llcp_conn_param.interval_min) {
    1744:	f8b4 00f8 	ldrh.w	r0, [r4, #248]	; 0xf8
			conn->llcp_cu.interval = (interval_max / preferred_periodicity) *
    1748:	b29b      	uxth	r3, r3
				conn->llcp_cu.interval = interval_max;
    174a:	4298      	cmp	r0, r3
    174c:	bf98      	it	ls
    174e:	461a      	movls	r2, r3
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
    1750:	f8b4 30fc 	ldrh.w	r3, [r4, #252]	; 0xfc
    1754:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
    1758:	f8b4 30fe 	ldrh.w	r3, [r4, #254]	; 0xfe
    175c:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
    1760:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
			conn->llcp_cu.interval = interval_max;
    1764:	f8a4 20a0 	strh.w	r2, [r4, #160]	; 0xa0
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
    1768:	f3c3 1300 	ubfx	r3, r3, #4, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
    176c:	f894 209e 	ldrb.w	r2, [r4, #158]	; 0x9e
    1770:	00db      	lsls	r3, r3, #3
    1772:	f043 0302 	orr.w	r3, r3, #2
    1776:	f022 020f 	bic.w	r2, r2, #15
    177a:	4313      	orrs	r3, r2
		conn->llcp_cu.ack--;
    177c:	3901      	subs	r1, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
    177e:	f884 309e 	strb.w	r3, [r4, #158]	; 0x9e
		conn->llcp_cu.ack--;
    1782:	f884 109d 	strb.w	r1, [r4, #157]	; 0x9d
		return;
    1786:	e653      	b.n	1430 <ull_conn_llcp+0x30>
    1788:	00020847 	.word	0x00020847
    178c:	00020e86 	.word	0x00020e86
    1790:	0002023c 	.word	0x0002023c
    1794:	200024c8 	.word	0x200024c8
    1798:	20002434 	.word	0x20002434
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    179c:	4866      	ldr	r0, [pc, #408]	; (1938 <ull_conn_llcp+0x538>)
    179e:	f01a f998 	bl	1bad2 <mem_acquire>
	if (!tx) {
    17a2:	4601      	mov	r1, r0
    17a4:	2800      	cmp	r0, #0
    17a6:	f43f ae43 	beq.w	1430 <ull_conn_llcp+0x30>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    17aa:	7903      	ldrb	r3, [r0, #4]
    17ac:	f043 0303 	orr.w	r3, r3, #3
    17b0:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
    17b2:	2318      	movs	r3, #24
    17b4:	7143      	strb	r3, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
    17b6:	2310      	movs	r3, #16
    17b8:	71c3      	strb	r3, [r0, #7]
	rsp->interval_min =
    17ba:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
    17be:	8103      	strh	r3, [r0, #8]
	rsp->interval_max =
    17c0:	f8b4 30fa 	ldrh.w	r3, [r4, #250]	; 0xfa
    17c4:	8143      	strh	r3, [r0, #10]
	rsp->latency =
    17c6:	f8b4 30fc 	ldrh.w	r3, [r4, #252]	; 0xfc
    17ca:	8183      	strh	r3, [r0, #12]
	rsp->timeout =
    17cc:	f8b4 30fe 	ldrh.w	r3, [r4, #254]	; 0xfe
    17d0:	81c3      	strh	r3, [r0, #14]
	rsp->preferred_periodicity =
    17d2:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
    17d6:	7403      	strb	r3, [r0, #16]
	rsp->reference_conn_event_count =
    17d8:	f8b4 3102 	ldrh.w	r3, [r4, #258]	; 0x102
    17dc:	f8a0 3011 	strh.w	r3, [r0, #17]
	rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
    17e0:	f8b4 3104 	ldrh.w	r3, [r4, #260]	; 0x104
    17e4:	f8a0 3013 	strh.w	r3, [r0, #19]
	rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
    17e8:	f8b4 3106 	ldrh.w	r3, [r4, #262]	; 0x106
    17ec:	f8a0 3015 	strh.w	r3, [r0, #21]
	rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
    17f0:	f8b4 3108 	ldrh.w	r3, [r4, #264]	; 0x108
    17f4:	f8a0 3017 	strh.w	r3, [r0, #23]
	rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
    17f8:	f8b4 310a 	ldrh.w	r3, [r4, #266]	; 0x10a
    17fc:	f8a0 3019 	strh.w	r3, [r0, #25]
	rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
    1800:	f8b4 310c 	ldrh.w	r3, [r4, #268]	; 0x10c
    1804:	f8a0 301b 	strh.w	r3, [r0, #27]
	rsp->offset5 = sys_cpu_to_le16(conn->llcp_conn_param.offset5);
    1808:	f8b4 310e 	ldrh.w	r3, [r4, #270]	; 0x10e
    180c:	f8a0 301d 	strh.w	r3, [r0, #29]
	ctrl_tx_enqueue(conn, tx);
    1810:	4620      	mov	r0, r4
    1812:	f01a feba 	bl	1c58a <ctrl_tx_enqueue>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD_WAIT;
    1816:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
    181a:	2205      	movs	r2, #5
    181c:	f362 0303 	bfi	r3, r2, #0, #4
    1820:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
    1824:	e604      	b.n	1430 <ull_conn_llcp+0x30>
	rx = ll_pdu_rx_alloc();
    1826:	f00b fc83 	bl	d130 <ll_pdu_rx_alloc>
	if (!rx) {
    182a:	4601      	mov	r1, r0
    182c:	2800      	cmp	r0, #0
    182e:	f43f adff 	beq.w	1430 <ull_conn_llcp+0x30>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    1832:	f894 20f6 	ldrb.w	r2, [r4, #246]	; 0xf6
    1836:	2303      	movs	r3, #3
    1838:	f363 0203 	bfi	r2, r3, #0, #4
    183c:	f884 20f6 	strb.w	r2, [r4, #246]	; 0xf6
	rx->hdr.handle = conn->lll.handle;
    1840:	8d22      	ldrh	r2, [r4, #40]	; 0x28
	rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1842:	7103      	strb	r3, [r0, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    1844:	7f03      	ldrb	r3, [r0, #28]
	rx->hdr.handle = conn->lll.handle;
    1846:	80c2      	strh	r2, [r0, #6]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    1848:	f043 0303 	orr.w	r3, r3, #3
    184c:	7703      	strb	r3, [r0, #28]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    184e:	2318      	movs	r3, #24
    1850:	7743      	strb	r3, [r0, #29]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    1852:	230f      	movs	r3, #15
    1854:	77c3      	strb	r3, [r0, #31]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    1856:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
    185a:	8403      	strh	r3, [r0, #32]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    185c:	f8b4 30fa 	ldrh.w	r3, [r4, #250]	; 0xfa
    1860:	8443      	strh	r3, [r0, #34]	; 0x22
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    1862:	f8b4 30fc 	ldrh.w	r3, [r4, #252]	; 0xfc
    1866:	8483      	strh	r3, [r0, #36]	; 0x24
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    1868:	f8b4 30fe 	ldrh.w	r3, [r4, #254]	; 0xfe
    186c:	84c3      	strh	r3, [r0, #38]	; 0x26
	ll_rx_put(rx->hdr.link, rx);
    186e:	e62e      	b.n	14ce <ull_conn_llcp+0xce>
		LL_ASSERT(0);
    1870:	f640 73e1 	movw	r3, #4065	; 0xfe1
    1874:	e6b8      	b.n	15e8 <ull_conn_llcp+0x1e8>
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    1876:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
    1878:	8e62      	ldrh	r2, [r4, #50]	; 0x32
    187a:	440a      	add	r2, r1
    187c:	fa15 f582 	uxtah	r5, r5, r2
    1880:	fa1f fb82 	uxth.w	fp, r2
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    1884:	f894 209e 	ldrb.w	r2, [r4, #158]	; 0x9e
    1888:	f012 0107 	ands.w	r1, r2, #7
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    188c:	b2ad      	uxth	r5, r5
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    188e:	d055      	beq.n	193c <ull_conn_llcp+0x53c>
		rx = ll_pdu_rx_alloc_peek(1);
    1890:	f00b fc36 	bl	d100 <ll_pdu_rx_alloc_peek>
		if (!rx) {
    1894:	4607      	mov	r7, r0
    1896:	2800      	cmp	r0, #0
    1898:	d041      	beq.n	191e <ull_conn_llcp+0x51e>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    189a:	4827      	ldr	r0, [pc, #156]	; (1938 <ull_conn_llcp+0x538>)
    189c:	f01a f919 	bl	1bad2 <mem_acquire>
		if (!tx) {
    18a0:	4606      	mov	r6, r0
    18a2:	2800      	cmp	r0, #0
    18a4:	d03b      	beq.n	191e <ull_conn_llcp+0x51e>
		cpr_active_check_and_set(conn);
    18a6:	4620      	mov	r0, r4
    18a8:	f00c fcee 	bl	e288 <cpr_active_check_and_set>
		(void)ll_pdu_rx_alloc();
    18ac:	f00b fc40 	bl	d130 <ll_pdu_rx_alloc>
		rx->hdr.link->mem = conn->llcp_rx;
    18b0:	683b      	ldr	r3, [r7, #0]
    18b2:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
    18b6:	605a      	str	r2, [r3, #4]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    18b8:	7933      	ldrb	r3, [r6, #4]
		conn->llcp_rx = rx;
    18ba:	f8c4 7098 	str.w	r7, [r4, #152]	; 0x98
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    18be:	f043 0303 	orr.w	r3, r3, #3
    18c2:	7133      	strb	r3, [r6, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    18c4:	2200      	movs	r2, #0
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    18c6:	230c      	movs	r3, #12
    18c8:	7173      	strb	r3, [r6, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    18ca:	71f2      	strb	r2, [r6, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size = conn->llcp_cu.win_size;
    18cc:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
    18d0:	7233      	strb	r3, [r6, #8]
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
    18d2:	f240 41e2 	movw	r1, #1250	; 0x4e2
    18d6:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
    18da:	fbb3 f3f1 	udiv	r3, r3, r1
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
    18de:	f8a6 3009 	strh.w	r3, [r6, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    18e2:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
    18e6:	f8a6 300b 	strh.w	r3, [r6, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    18ea:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
    18ee:	f8a6 300d 	strh.w	r3, [r6, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    18f2:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
    18f6:	f8a6 300f 	strh.w	r3, [r6, #15]
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    18fa:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
    18fe:	f362 0302 	bfi	r3, r2, #0, #3
    1902:	f884 309e 	strb.w	r3, [r4, #158]	; 0x9e
					      conn->lll.latency + 6;
    1906:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    1908:	3306      	adds	r3, #6
    190a:	441d      	add	r5, r3
    190c:	b2ad      	uxth	r5, r5
		conn->llcp.conn_upd.instant = event_counter +
    190e:	f8a4 508c 	strh.w	r5, [r4, #140]	; 0x8c
		pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    1912:	f8a6 5011 	strh.w	r5, [r6, #17]
			ctrl_tx_enqueue(conn, tx);
    1916:	4631      	mov	r1, r6
    1918:	4620      	mov	r0, r4
    191a:	f01a fe36 	bl	1c58a <ctrl_tx_enqueue>
	if (((conn->llcp_terminate.req - conn->llcp_terminate.ack) & 0xFF) ==
    191e:	f894 30d0 	ldrb.w	r3, [r4, #208]	; 0xd0
    1922:	f894 20d1 	ldrb.w	r2, [r4, #209]	; 0xd1
    1926:	1a9b      	subs	r3, r3, r2
    1928:	b2db      	uxtb	r3, r3
    192a:	2b01      	cmp	r3, #1
    192c:	f000 820a 	beq.w	1d44 <ull_conn_llcp+0x944>
	return 0;
    1930:	2000      	movs	r0, #0
}
    1932:	b00b      	add	sp, #44	; 0x2c
    1934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1938:	200024c8 	.word	0x200024c8
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    193c:	f8b4 808c 	ldrh.w	r8, [r4, #140]	; 0x8c
    1940:	eba5 0508 	sub.w	r5, r5, r8
    1944:	fa1f fa85 	uxth.w	sl, r5
	} else if (instant_latency <= 0x7FFF) {
    1948:	042d      	lsls	r5, r5, #16
    194a:	d4e8      	bmi.n	191e <ull_conn_llcp+0x51e>
			conn->llcp_ack = conn->llcp_req;
    194c:	f884 3089 	strb.w	r3, [r4, #137]	; 0x89
		conn->llcp_cu.ack = conn->llcp_cu.req;
    1950:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    1954:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
		conn->llcp_cu.ack = conn->llcp_cu.req;
    1958:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    195c:	f894 30f5 	ldrb.w	r3, [r4, #245]	; 0xf5
    1960:	4293      	cmp	r3, r2
    1962:	d009      	beq.n	1978 <ull_conn_llcp+0x578>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
    1964:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    1968:	f003 030f 	and.w	r3, r3, #15
    196c:	2b06      	cmp	r3, #6
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    196e:	bf04      	itt	eq
    1970:	f884 20f5 	strbeq.w	r2, [r4, #245]	; 0xf5
			conn->procedure_expire = 0U;
    1974:	f8a4 1078 	strheq.w	r1, [r4, #120]	; 0x78
	if (conn == conn_upd_curr) {
    1978:	4bbf      	ldr	r3, [pc, #764]	; (1c78 <ull_conn_llcp+0x878>)
		rx = conn->llcp_rx;
    197a:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
	if (conn == conn_upd_curr) {
    197e:	681a      	ldr	r2, [r3, #0]
    1980:	4294      	cmp	r4, r2
		conn_upd_curr = NULL;
    1982:	bf04      	itt	eq
    1984:	2200      	moveq	r2, #0
    1986:	601a      	streq	r2, [r3, #0]
		LL_ASSERT(rx && rx->hdr.link);
    1988:	b10d      	cbz	r5, 198e <ull_conn_llcp+0x58e>
    198a:	682b      	ldr	r3, [r5, #0]
    198c:	b963      	cbnz	r3, 19a8 <ull_conn_llcp+0x5a8>
    198e:	4abb      	ldr	r2, [pc, #748]	; (1c7c <ull_conn_llcp+0x87c>)
    1990:	49bb      	ldr	r1, [pc, #748]	; (1c80 <ull_conn_llcp+0x880>)
    1992:	48bc      	ldr	r0, [pc, #752]	; (1c84 <ull_conn_llcp+0x884>)
    1994:	f44f 6342 	mov.w	r3, #3104	; 0xc20
    1998:	f014 fe2f 	bl	165fa <printk>
    199c:	4040      	eors	r0, r0
    199e:	f380 8811 	msr	BASEPRI, r0
    19a2:	f04f 0003 	mov.w	r0, #3
    19a6:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
    19a8:	6828      	ldr	r0, [r5, #0]
		if ((conn->llcp_cu.interval != lll->interval) ||
    19aa:	f8b4 20a0 	ldrh.w	r2, [r4, #160]	; 0xa0
		conn->llcp_rx = rx->hdr.link->mem;
    19ae:	6843      	ldr	r3, [r0, #4]
    19b0:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
		if ((conn->llcp_cu.interval != lll->interval) ||
    19b4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
		    (conn->llcp_cu.latency != lll->latency) ||
    19b6:	f8b4 60a2 	ldrh.w	r6, [r4, #162]	; 0xa2
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    19ba:	f8b4 10a4 	ldrh.w	r1, [r4, #164]	; 0xa4
		if ((conn->llcp_cu.interval != lll->interval) ||
    19be:	429a      	cmp	r2, r3
    19c0:	d113      	bne.n	19ea <ull_conn_llcp+0x5ea>
    19c2:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    19c4:	42b3      	cmp	r3, r6
    19c6:	d110      	bne.n	19ea <ull_conn_llcp+0x5ea>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    19c8:	f240 43e2 	movw	r3, #1250	; 0x4e2
    19cc:	fb03 f702 	mul.w	r7, r3, r2
    19d0:	f242 7310 	movw	r3, #10000	; 0x2710
    19d4:	fb03 7301 	mla	r3, r3, r1, r7
    19d8:	3b01      	subs	r3, #1
    19da:	fbb3 f3f7 	udiv	r3, r3, r7
		    (conn->llcp_cu.latency != lll->latency) ||
    19de:	f8b4 7072 	ldrh.w	r7, [r4, #114]	; 0x72
    19e2:	b29b      	uxth	r3, r3
    19e4:	429f      	cmp	r7, r3
    19e6:	f000 811f 	beq.w	1c28 <ull_conn_llcp+0x828>
			rx->hdr.handle = lll->handle;
    19ea:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    19ec:	80eb      	strh	r3, [r5, #6]
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    19ee:	2318      	movs	r3, #24
    19f0:	712b      	strb	r3, [r5, #4]
			cu->status = 0x00;
    19f2:	2300      	movs	r3, #0
    19f4:	772b      	strb	r3, [r5, #28]
			cu->interval = conn->llcp_cu.interval;
    19f6:	83ea      	strh	r2, [r5, #30]
			cu->latency = conn->llcp_cu.latency;
    19f8:	842e      	strh	r6, [r5, #32]
			cu->timeout = conn->llcp_cu.timeout;
    19fa:	8469      	strh	r1, [r5, #34]	; 0x22
		ll_rx_put(rx->hdr.link, rx);
    19fc:	4629      	mov	r1, r5
    19fe:	f00b faeb 	bl	cfd8 <ll_rx_put>
		ll_rx_sched();
    1a02:	f00b faf3 	bl	cfec <ll_rx_sched>
		if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
    1a06:	68a3      	ldr	r3, [r4, #8]
    1a08:	2b00      	cmp	r3, #0
    1a0a:	da0a      	bge.n	1a22 <ull_conn_llcp+0x622>
			uint32_t ticks_prepare_to_start =
    1a0c:	68e0      	ldr	r0, [r4, #12]
    1a0e:	6862      	ldr	r2, [r4, #4]
			conn->ull.ticks_prepare_to_start &= ~XON_BITMASK;
    1a10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			ticks_at_expire -= (conn->ull.ticks_prepare_to_start -
    1a14:	4290      	cmp	r0, r2
    1a16:	bf2c      	ite	cs
    1a18:	4481      	addcs	r9, r0
    1a1a:	4491      	addcc	r9, r2
			conn->ull.ticks_prepare_to_start &= ~XON_BITMASK;
    1a1c:	60a3      	str	r3, [r4, #8]
			ticks_at_expire -= (conn->ull.ticks_prepare_to_start -
    1a1e:	eba9 0903 	sub.w	r9, r9, r3
		conn_interval_old = instant_latency * lll->interval;
    1a22:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
		latency = conn_interval_old / conn->llcp_cu.interval;
    1a24:	f8b4 60a0 	ldrh.w	r6, [r4, #160]	; 0xa0
    1a28:	4d97      	ldr	r5, [pc, #604]	; (1c88 <ull_conn_llcp+0x888>)
		conn_interval_old = instant_latency * lll->interval;
    1a2a:	fb10 f00a 	smulbb	r0, r0, sl
    1a2e:	b280      	uxth	r0, r0
		latency = conn_interval_old / conn->llcp_cu.interval;
    1a30:	fbb0 f2f6 	udiv	r2, r0, r6
		conn_interval_new = latency * conn->llcp_cu.interval;
    1a34:	fb16 f302 	smulbb	r3, r6, r2
    1a38:	b29b      	uxth	r3, r3
		if (conn_interval_new > conn_interval_old) {
    1a3a:	4298      	cmp	r0, r3
		latency = conn_interval_old / conn->llcp_cu.interval;
    1a3c:	b297      	uxth	r7, r2
		if (conn_interval_new > conn_interval_old) {
    1a3e:	f240 41e2 	movw	r1, #1250	; 0x4e2
    1a42:	f080 80f4 	bcs.w	1c2e <ull_conn_llcp+0x82e>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    1a46:	1a18      	subs	r0, r3, r0
    1a48:	4348      	muls	r0, r1
    1a4a:	a389      	add	r3, pc, #548	; (adr r3, 1c70 <ull_conn_llcp+0x870>)
    1a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
    1a50:	fba0 0105 	umull	r0, r1, r0, r5
    1a54:	f7fe ffb2 	bl	9bc <__aeabi_uldivmod>
    1a58:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1a5c:	4481      	add	r9, r0
		lll->latency_prepare -= (instant_latency - latency);
    1a5e:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    1a60:	4498      	add	r8, r3
		} else if (lll->role) {
    1a62:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		lll->latency_prepare -= (instant_latency - latency);
    1a66:	eba8 0b0b 	sub.w	fp, r8, fp
    1a6a:	44bb      	add	fp, r7
		conn_interval_us = conn->llcp_cu.interval *
    1a6c:	f240 48e2 	movw	r8, #1250	; 0x4e2
		} else if (lll->role) {
    1a70:	2b00      	cmp	r3, #0
		lll->latency_prepare -= (instant_latency - latency);
    1a72:	f8a4 b02e 	strh.w	fp, [r4, #46]	; 0x2e
		conn_interval_us = conn->llcp_cu.interval *
    1a76:	fb08 fb06 	mul.w	fp, r8, r6
		} else if (lll->role) {
    1a7a:	f280 80e6 	bge.w	1c4a <ull_conn_llcp+0x84a>
				lll->periph.window_widening_periodic_us *
    1a7e:	6c22      	ldr	r2, [r4, #64]	; 0x40
			lll->periph.window_widening_prepare_us -=
    1a80:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    1a82:	fb02 331a 	mls	r3, r2, sl, r3
    1a86:	64a3      	str	r3, [r4, #72]	; 0x48
				ceiling_fraction(((lll_clock_ppm_local_get() +
    1a88:	f01a ff6b 	bl	1c962 <lll_clock_ppm_local_get>
    1a8c:	4606      	mov	r6, r0
    1a8e:	f894 007c 	ldrb.w	r0, [r4, #124]	; 0x7c
    1a92:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    1a96:	f00e fbfb 	bl	10290 <lll_clock_ppm_get>
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
    1a9a:	f894 20ac 	ldrb.w	r2, [r4, #172]	; 0xac
				ceiling_fraction(((lll_clock_ppm_local_get() +
    1a9e:	4406      	add	r6, r0
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
    1aa0:	fb08 f202 	mul.w	r2, r8, r2
			lll->periph.window_size_prepare_us =
    1aa4:	6522      	str	r2, [r4, #80]	; 0x50
				ceiling_fraction(((lll_clock_ppm_local_get() +
    1aa6:	fb0b f606 	mul.w	r6, fp, r6
			conn->periph.ticks_to_offset = 0U;
    1aaa:	2200      	movs	r2, #0
    1aac:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
				ceiling_fraction(((lll_clock_ppm_local_get() +
    1ab0:	f506 2674 	add.w	r6, r6, #999424	; 0xf4000
			lll->periph.window_widening_prepare_us +=
    1ab4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
				ceiling_fraction(((lll_clock_ppm_local_get() +
    1ab6:	4875      	ldr	r0, [pc, #468]	; (1c8c <ull_conn_llcp+0x88c>)
    1ab8:	f206 263f 	addw	r6, r6, #575	; 0x23f
				(conn_interval_us >> 1) - EVENT_IFS_US;
    1abc:	ea4f 035b 	mov.w	r3, fp, lsr #1
				ceiling_fraction(((lll_clock_ppm_local_get() +
    1ac0:	fbb6 f6f0 	udiv	r6, r6, r0
				lll->periph.window_widening_periodic_us *
    1ac4:	fb06 f007 	mul.w	r0, r6, r7
				(conn_interval_us >> 1) - EVENT_IFS_US;
    1ac8:	3b96      	subs	r3, #150	; 0x96
			lll->periph.window_widening_prepare_us +=
    1aca:	4402      	add	r2, r0
			lll->periph.window_widening_periodic_us =
    1acc:	6426      	str	r6, [r4, #64]	; 0x40
			lll->periph.window_widening_max_us =
    1ace:	6463      	str	r3, [r4, #68]	; 0x44
			lll->periph.window_widening_prepare_us +=
    1ad0:	429a      	cmp	r2, r3
    1ad2:	bf94      	ite	ls
    1ad4:	64a2      	strls	r2, [r4, #72]	; 0x48
    1ad6:	64a3      	strhi	r3, [r4, #72]	; 0x48
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    1ad8:	fba0 0105 	umull	r0, r1, r0, r5
    1adc:	a364      	add	r3, pc, #400	; (adr r3, 1c70 <ull_conn_llcp+0x870>)
    1ade:	e9d3 2300 	ldrd	r2, r3, [r3]
    1ae2:	f7fe ff6b 	bl	9bc <__aeabi_uldivmod>
    1ae6:	eba9 0900 	sub.w	r9, r9, r0
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    1aea:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
    1aee:	fbb0 f0f8 	udiv	r0, r0, r8
    1af2:	fb08 f000 	mul.w	r0, r8, r0
    1af6:	a35e      	add	r3, pc, #376	; (adr r3, 1c70 <ull_conn_llcp+0x870>)
    1af8:	e9d3 2300 	ldrd	r2, r3, [r3]
    1afc:	fba0 0105 	umull	r0, r1, r0, r5
    1b00:	f7fe ff5c 	bl	9bc <__aeabi_uldivmod>
			periodic_us -= lll->periph.window_widening_periodic_us;
    1b04:	ebab 0606 	sub.w	r6, fp, r6
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    1b08:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
		lll->interval = conn->llcp_cu.interval;
    1b0c:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
    1b10:	8563      	strh	r3, [r4, #42]	; 0x2a
		lll->latency = conn->llcp_cu.latency;
    1b12:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
    1b16:	85a3      	strh	r3, [r4, #44]	; 0x2c
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    1b18:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
    1b1c:	f242 7210 	movw	r2, #10000	; 0x2710
    1b20:	fb02 b303 	mla	r3, r2, r3, fp
    1b24:	3b01      	subs	r3, #1
    1b26:	fbb3 f3fb 	udiv	r3, r3, fp
    1b2a:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1b2e:	4b58      	ldr	r3, [pc, #352]	; (1c90 <ull_conn_llcp+0x890>)
    1b30:	445b      	add	r3, fp
    1b32:	fbb3 f3fb 	udiv	r3, r3, fp
    1b36:	f8a4 3076 	strh.w	r3, [r4, #118]	; 0x76
		if (conn->llcp_cu.cmd) {
    1b3a:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
    1b3e:	0718      	lsls	r0, r3, #28
			conn->supervision_expire = 0U;
    1b40:	bf44      	itt	mi
    1b42:	2300      	movmi	r3, #0
    1b44:	f8a4 3074 	strhmi.w	r3, [r4, #116]	; 0x74
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    1b48:	2102      	movs	r1, #2
    1b4a:	2001      	movs	r0, #1
    1b4c:	f010 fa0a 	bl	11f64 <mayfly_is_enabled>
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    1b50:	2200      	movs	r2, #0
    1b52:	2102      	movs	r1, #2
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    1b54:	4682      	mov	sl, r0
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    1b56:	2001      	movs	r0, #1
    1b58:	f009 f9ce 	bl	aef8 <mayfly_enable>
		ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    1b5c:	4620      	mov	r0, r4
    1b5e:	f00c fd1f 	bl	e5a0 <ll_conn_handle_get>
    1b62:	f100 0805 	add.w	r8, r0, #5
    1b66:	fa5f f888 	uxtb.w	r8, r8
		ticker_status =	ticker_stop(TICKER_INSTANCE_ID_CTLR,
    1b6a:	4b4a      	ldr	r3, [pc, #296]	; (1c94 <ull_conn_llcp+0x894>)
    1b6c:	9400      	str	r4, [sp, #0]
    1b6e:	4642      	mov	r2, r8
    1b70:	2101      	movs	r1, #1
    1b72:	2000      	movs	r0, #0
    1b74:	f009 ffb2 	bl	badc <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    1b78:	f030 0302 	bics.w	r3, r0, #2
    1b7c:	d00c      	beq.n	1b98 <ull_conn_llcp+0x798>
    1b7e:	4a3f      	ldr	r2, [pc, #252]	; (1c7c <ull_conn_llcp+0x87c>)
    1b80:	4945      	ldr	r1, [pc, #276]	; (1c98 <ull_conn_llcp+0x898>)
    1b82:	4840      	ldr	r0, [pc, #256]	; (1c84 <ull_conn_llcp+0x884>)
    1b84:	f640 43cb 	movw	r3, #3275	; 0xccb
    1b88:	f014 fd37 	bl	165fa <printk>
    1b8c:	4040      	eors	r0, r0
    1b8e:	f380 8811 	msr	BASEPRI, r0
    1b92:	f04f 0003 	mov.w	r0, #3
    1b96:	df02      	svc	2
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    1b98:	fba6 6505 	umull	r6, r5, r6, r5
    1b9c:	a334      	add	r3, pc, #208	; (adr r3, 1c70 <ull_conn_llcp+0x870>)
    1b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1ba2:	4630      	mov	r0, r6
    1ba4:	4629      	mov	r1, r5
    1ba6:	f7fe ff09 	bl	9bc <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1baa:	4b3c      	ldr	r3, [pc, #240]	; (1c9c <ull_conn_llcp+0x89c>)
    1bac:	9408      	str	r4, [sp, #32]
    1bae:	e9cd 4306 	strd	r4, r3, [sp, #24]
    1bb2:	4b3b      	ldr	r3, [pc, #236]	; (1ca0 <ull_conn_llcp+0x8a0>)
    1bb4:	9305      	str	r3, [sp, #20]
    1bb6:	6923      	ldr	r3, [r4, #16]
    1bb8:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_REMAINDER(periodic_us),
    1bba:	f020 447f 	bic.w	r4, r0, #4278190080	; 0xff000000
    1bbe:	4839      	ldr	r0, [pc, #228]	; (1ca4 <ull_conn_llcp+0x8a4>)
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1bc0:	f64f 73fe 	movw	r3, #65534	; 0xfffe
    1bc4:	9303      	str	r3, [sp, #12]
				     HAL_TICKER_REMAINDER(periodic_us),
    1bc6:	fba4 0100 	umull	r0, r1, r4, r0
    1bca:	2307      	movs	r3, #7
    1bcc:	1a30      	subs	r0, r6, r0
    1bce:	fb03 1104 	mla	r1, r3, r4, r1
    1bd2:	eb65 0101 	sbc.w	r1, r5, r1
    1bd6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1bda:	2300      	movs	r3, #0
    1bdc:	f7fe feee 	bl	9bc <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1be0:	464b      	mov	r3, r9
    1be2:	e9cd 4001 	strd	r4, r0, [sp, #4]
    1be6:	9700      	str	r7, [sp, #0]
    1be8:	4642      	mov	r2, r8
    1bea:	2101      	movs	r1, #1
    1bec:	2000      	movs	r0, #0
    1bee:	f01a fa61 	bl	1c0b4 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    1bf2:	f030 0302 	bics.w	r3, r0, #2
    1bf6:	d00c      	beq.n	1c12 <ull_conn_llcp+0x812>
    1bf8:	4a20      	ldr	r2, [pc, #128]	; (1c7c <ull_conn_llcp+0x87c>)
    1bfa:	4927      	ldr	r1, [pc, #156]	; (1c98 <ull_conn_llcp+0x898>)
    1bfc:	4821      	ldr	r0, [pc, #132]	; (1c84 <ull_conn_llcp+0x884>)
    1bfe:	f640 43e5 	movw	r3, #3301	; 0xce5
    1c02:	f014 fcfa 	bl	165fa <printk>
    1c06:	4040      	eors	r0, r0
    1c08:	f380 8811 	msr	BASEPRI, r0
    1c0c:	f04f 0003 	mov.w	r0, #3
    1c10:	df02      	svc	2
		if (mayfly_was_enabled) {
    1c12:	f1ba 0f00 	cmp.w	sl, #0
    1c16:	d004      	beq.n	1c22 <ull_conn_llcp+0x822>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
    1c18:	2201      	movs	r2, #1
    1c1a:	2102      	movs	r1, #2
    1c1c:	4610      	mov	r0, r2
    1c1e:	f009 f96b 	bl	aef8 <mayfly_enable>
				return -ECANCELED;
    1c22:	f06f 008b 	mvn.w	r0, #139	; 0x8b
    1c26:	e684      	b.n	1932 <ull_conn_llcp+0x532>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
    1c28:	2301      	movs	r3, #1
    1c2a:	712b      	strb	r3, [r5, #4]
    1c2c:	e6e6      	b.n	19fc <ull_conn_llcp+0x5fc>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    1c2e:	fb06 0012 	mls	r0, r6, r2, r0
    1c32:	b280      	uxth	r0, r0
    1c34:	4348      	muls	r0, r1
    1c36:	a30e      	add	r3, pc, #56	; (adr r3, 1c70 <ull_conn_llcp+0x870>)
    1c38:	e9d3 2300 	ldrd	r2, r3, [r3]
    1c3c:	fba0 0105 	umull	r0, r1, r0, r5
    1c40:	f7fe febc 	bl	9bc <__aeabi_uldivmod>
    1c44:	eba9 0900 	sub.w	r9, r9, r0
    1c48:	e709      	b.n	1a5e <ull_conn_llcp+0x65e>
			LL_ASSERT(0);
    1c4a:	4a0c      	ldr	r2, [pc, #48]	; (1c7c <ull_conn_llcp+0x87c>)
    1c4c:	4916      	ldr	r1, [pc, #88]	; (1ca8 <ull_conn_llcp+0x8a8>)
    1c4e:	480d      	ldr	r0, [pc, #52]	; (1c84 <ull_conn_llcp+0x884>)
    1c50:	f640 439c 	movw	r3, #3228	; 0xc9c
    1c54:	f014 fcd1 	bl	165fa <printk>
    1c58:	4040      	eors	r0, r0
    1c5a:	f380 8811 	msr	BASEPRI, r0
    1c5e:	f04f 0003 	mov.w	r0, #3
    1c62:	df02      	svc	2
		uint32_t ticks_win_offset = 0;
    1c64:	2700      	movs	r7, #0
		periodic_us = conn_interval_us;
    1c66:	465e      	mov	r6, fp
    1c68:	e750      	b.n	1b0c <ull_conn_llcp+0x70c>
    1c6a:	bf00      	nop
    1c6c:	f3af 8000 	nop.w
    1c70:	1afd498d 	.word	0x1afd498d
    1c74:	00000007 	.word	0x00000007
    1c78:	20002434 	.word	0x20002434
    1c7c:	00020847 	.word	0x00020847
    1c80:	00020911 	.word	0x00020911
    1c84:	0002023c 	.word	0x0002023c
    1c88:	3b9aca00 	.word	0x3b9aca00
    1c8c:	000f4240 	.word	0x000f4240
    1c90:	026259ff 	.word	0x026259ff
    1c94:	0000e4d9 	.word	0x0000e4d9
    1c98:	00020924 	.word	0x00020924
    1c9c:	0000e481 	.word	0x0000e481
    1ca0:	0000f721 	.word	0x0000f721
    1ca4:	1afd498d 	.word	0x1afd498d
    1ca8:	00020e86 	.word	0x00020e86
			event_counter = lll->event_counter +
    1cac:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
    1cae:	8e62      	ldrh	r2, [r4, #50]	; 0x32
    1cb0:	440a      	add	r2, r1
    1cb2:	4415      	add	r5, r2
	if (conn->llcp.chan_map.initiate) {
    1cb4:	f894 208c 	ldrb.w	r2, [r4, #140]	; 0x8c
    1cb8:	07d1      	lsls	r1, r2, #31
			event_counter = lll->event_counter +
    1cba:	b2ad      	uxth	r5, r5
	if (conn->llcp.chan_map.initiate) {
    1cbc:	d524      	bpl.n	1d08 <ull_conn_llcp+0x908>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1cbe:	4835      	ldr	r0, [pc, #212]	; (1d94 <ull_conn_llcp+0x994>)
    1cc0:	f019 ff07 	bl	1bad2 <mem_acquire>
		if (tx) {
    1cc4:	4606      	mov	r6, r0
    1cc6:	2800      	cmp	r0, #0
    1cc8:	f43f ae29 	beq.w	191e <ull_conn_llcp+0x51e>
			conn->llcp.chan_map.initiate = 0U;
    1ccc:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
    1cd0:	f36f 0300 	bfc	r3, #0, #1
    1cd4:	f884 308c 	strb.w	r3, [r4, #140]	; 0x8c
						      conn->lll.latency + 6;
    1cd8:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    1cda:	3306      	adds	r3, #6
    1cdc:	441d      	add	r5, r3
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1cde:	7903      	ldrb	r3, [r0, #4]
			conn->llcp.chan_map.instant = event_counter +
    1ce0:	f8a4 5092 	strh.w	r5, [r4, #146]	; 0x92
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1ce4:	f043 0303 	orr.w	r3, r3, #3
    1ce8:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    1cea:	2308      	movs	r3, #8
    1cec:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    1cee:	2301      	movs	r3, #1
    1cf0:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    1cf2:	2205      	movs	r2, #5
    1cf4:	f104 018d 	add.w	r1, r4, #141	; 0x8d
    1cf8:	3008      	adds	r0, #8
    1cfa:	f015 faab 	bl	17254 <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    1cfe:	f8b4 3092 	ldrh.w	r3, [r4, #146]	; 0x92
    1d02:	f8a6 300d 	strh.w	r3, [r6, #13]
    1d06:	e606      	b.n	1916 <ull_conn_llcp+0x516>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    1d08:	f8b4 2092 	ldrh.w	r2, [r4, #146]	; 0x92
    1d0c:	1aad      	subs	r5, r5, r2
    1d0e:	042a      	lsls	r2, r5, #16
    1d10:	f53f ae05 	bmi.w	191e <ull_conn_llcp+0x51e>
		memcpy(&lll->data_chan_map[0],
    1d14:	f104 0534 	add.w	r5, r4, #52	; 0x34
			conn->llcp_ack = conn->llcp_req;
    1d18:	f884 3089 	strb.w	r3, [r4, #137]	; 0x89
		memcpy(&lll->data_chan_map[0],
    1d1c:	2205      	movs	r2, #5
    1d1e:	f104 018d 	add.w	r1, r4, #141	; 0x8d
    1d22:	4628      	mov	r0, r5
    1d24:	f015 fa96 	bl	17254 <memcpy>
			util_ones_count_get(&lll->data_chan_map[0],
    1d28:	2105      	movs	r1, #5
    1d2a:	4628      	mov	r0, r5
    1d2c:	f019 ff4d 	bl	1bbca <util_ones_count_get>
		lll->data_chan_count =
    1d30:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    1d34:	f360 0305 	bfi	r3, r0, #0, #6
    1d38:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
    1d3c:	2301      	movs	r3, #1
    1d3e:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
    1d42:	e5ec      	b.n	191e <ull_conn_llcp+0x51e>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1d44:	4813      	ldr	r0, [pc, #76]	; (1d94 <ull_conn_llcp+0x994>)
    1d46:	f019 fec4 	bl	1bad2 <mem_acquire>
		if (tx) {
    1d4a:	4601      	mov	r1, r0
    1d4c:	b188      	cbz	r0, 1d72 <ull_conn_llcp+0x972>
			conn->llcp_terminate.ack--;
    1d4e:	f894 30d1 	ldrb.w	r3, [r4, #209]	; 0xd1
    1d52:	3b01      	subs	r3, #1
    1d54:	f884 30d1 	strb.w	r3, [r4, #209]	; 0xd1
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    1d58:	7903      	ldrb	r3, [r0, #4]
    1d5a:	f043 0303 	orr.w	r3, r3, #3
    1d5e:	7103      	strb	r3, [r0, #4]
			pdu_tx->len = offsetof(struct pdu_data_llctrl,
    1d60:	2302      	movs	r3, #2
    1d62:	7143      	strb	r3, [r0, #5]
			pdu_tx->llctrl.opcode =
    1d64:	71c3      	strb	r3, [r0, #7]
			pdu_tx->llctrl.terminate_ind.error_code =
    1d66:	f894 30d2 	ldrb.w	r3, [r4, #210]	; 0xd2
    1d6a:	7203      	strb	r3, [r0, #8]
			ctrl_tx_enqueue(conn, tx);
    1d6c:	4620      	mov	r0, r4
    1d6e:	f01a fc0c 	bl	1c58a <ctrl_tx_enqueue>
		if (!conn->procedure_expire) {
    1d72:	f8b4 0078 	ldrh.w	r0, [r4, #120]	; 0x78
    1d76:	2800      	cmp	r0, #0
    1d78:	f47f adda 	bne.w	1930 <ull_conn_llcp+0x530>
			conn->procedure_expire = conn->supervision_reload;
    1d7c:	f8b4 3072 	ldrh.w	r3, [r4, #114]	; 0x72
			if (conn->procedure_expire <= 1U) {
    1d80:	2b01      	cmp	r3, #1
    1d82:	d902      	bls.n	1d8a <ull_conn_llcp+0x98a>
			conn->procedure_expire = conn->supervision_reload;
    1d84:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
    1d88:	e5d2      	b.n	1930 <ull_conn_llcp+0x530>
				conn->procedure_expire++;
    1d8a:	3301      	adds	r3, #1
    1d8c:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
    1d90:	e5cf      	b.n	1932 <ull_conn_llcp+0x532>
    1d92:	bf00      	nop
    1d94:	200024c8 	.word	0x200024c8

00001d98 <ull_periph_setup>:
static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *param);

void ull_periph_setup(struct node_rx_hdr *rx, struct node_rx_ftr *ftr,
		     struct lll_conn *lll)
{
    1d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	memq_link_t *link;
	uint16_t timeout;
	uint8_t chan_sel;
	void *node;

	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    1d9c:	680b      	ldr	r3, [r1, #0]
{
    1d9e:	4615      	mov	r5, r2
	conn = lll->hdr.parent;
    1da0:	4617      	mov	r7, r2

	/* Populate the peripheral context */
	pdu_adv = (void *)((struct node_rx_pdu *)rx)->pdu;

	peer_addr_type = pdu_adv->tx_addr;
    1da2:	4602      	mov	r2, r0
{
    1da4:	b095      	sub	sp, #84	; 0x54
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    1da6:	f8d3 9000 	ldr.w	r9, [r3]
	peer_addr_type = pdu_adv->tx_addr;
    1daa:	f812 3f1c 	ldrb.w	r3, [r2, #28]!
    1dae:	920d      	str	r2, [sp, #52]	; 0x34
{
    1db0:	4604      	mov	r4, r0
	peer_addr_type = pdu_adv->tx_addr;
    1db2:	f3c3 1380 	ubfx	r3, r3, #6, #1
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    1db6:	2206      	movs	r2, #6
{
    1db8:	4688      	mov	r8, r1
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    1dba:	f100 011e 	add.w	r1, r0, #30
    1dbe:	a812      	add	r0, sp, #72	; 0x48
	peer_addr_type = pdu_adv->tx_addr;
    1dc0:	930c      	str	r3, [sp, #48]	; 0x30
	conn = lll->hdr.parent;
    1dc2:	f857 6b08 	ldr.w	r6, [r7], #8
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    1dc6:	f015 fa45 	bl	17254 <memcpy>
		peer_addr_type += 2;
	} else {
#else /* CONFIG_BT_CTLR_PRIVACY */
	if (1) {
#endif /* CONFIG_BT_CTLR_PRIVACY */
		memcpy(peer_id_addr, peer_addr, BDADDR_SIZE);
    1dca:	2206      	movs	r2, #6
    1dcc:	a912      	add	r1, sp, #72	; 0x48
    1dce:	a810      	add	r0, sp, #64	; 0x40
    1dd0:	f015 fa40 	bl	17254 <memcpy>
	}

	/* Use the link stored in the node rx to enqueue connection
	 * complete node rx towards LL context.
	 */
	link = rx->link;
    1dd4:	4621      	mov	r1, r4
	conn->own_id_addr_type = own_id_addr_type;
	(void)memcpy(conn->own_id_addr, own_id_addr,
		     sizeof(conn->own_id_addr));
#endif /* CONFIG_BT_CTLR_CHECK_SAME_PEER_CONN */

	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    1dd6:	2203      	movs	r2, #3
	link = rx->link;
    1dd8:	f851 ab2e 	ldr.w	sl, [r1], #46
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    1ddc:	4638      	mov	r0, r7
    1dde:	f015 fa39 	bl	17254 <memcpy>
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
    1de2:	1d2b      	adds	r3, r5, #4
    1de4:	4618      	mov	r0, r3
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    1de6:	f105 0718 	add.w	r7, r5, #24
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
    1dea:	2204      	movs	r2, #4
    1dec:	f104 012a 	add.w	r1, r4, #42	; 0x2a
    1df0:	930b      	str	r3, [sp, #44]	; 0x2c
    1df2:	f015 fa2f 	bl	17254 <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    1df6:	2205      	movs	r2, #5
    1df8:	f104 013a 	add.w	r1, r4, #58	; 0x3a
    1dfc:	4638      	mov	r0, r7
    1dfe:	f015 fa29 	bl	17254 <memcpy>
	       sizeof(lll->data_chan_map));
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    1e02:	2105      	movs	r1, #5
    1e04:	4638      	mov	r0, r7
    1e06:	f019 fee0 	bl	1bbca <util_ones_count_get>
    1e0a:	7f6a      	ldrb	r2, [r5, #29]
    1e0c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    1e10:	f360 0205 	bfi	r2, r0, #0, #6
    1e14:	776a      	strb	r2, [r5, #29]
			       sizeof(lll->data_chan_map));
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    1e16:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
    1e1a:	f3c2 0104 	ubfx	r1, r2, #0, #5
    1e1e:	77a9      	strb	r1, [r5, #30]
	lll->interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
    1e20:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
    1e22:	81e9      	strh	r1, [r5, #14]
	if ((lll->data_chan_count < CHM_USED_COUNT_MIN) ||
    1e24:	2801      	cmp	r0, #1
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    1e26:	f002 021f 	and.w	r2, r2, #31
	lll->interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
    1e2a:	b28f      	uxth	r7, r1
	if ((lll->data_chan_count < CHM_USED_COUNT_MIN) ||
    1e2c:	d906      	bls.n	1e3c <ull_periph_setup+0xa4>
    1e2e:	321b      	adds	r2, #27
    1e30:	f002 021f 	and.w	r2, r2, #31
    1e34:	2a0b      	cmp	r2, #11
    1e36:	d801      	bhi.n	1e3c <ull_periph_setup+0xa4>
	    (lll->data_chan_hop < CHM_HOP_COUNT_MIN) ||
	    (lll->data_chan_hop > CHM_HOP_COUNT_MAX) ||
    1e38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1e3a:	b99f      	cbnz	r7, 1e64 <ull_periph_setup+0xcc>
{
	/* Reset the advertising disabled callback */
	hdr->disabled_cb = NULL;

	/* Let the advertiser continue with connectable advertising */
	lll->periph.initiated = 0U;
    1e3c:	f895 3020 	ldrb.w	r3, [r5, #32]
	hdr->disabled_cb = NULL;
    1e40:	2200      	movs	r2, #0
	lll->periph.initiated = 0U;
    1e42:	f362 0300 	bfi	r3, r2, #0, #1
	hdr->disabled_cb = NULL;
    1e46:	f8c9 2014 	str.w	r2, [r9, #20]
	lll->periph.initiated = 0U;
    1e4a:	f885 3020 	strb.w	r3, [r5, #32]

	/* Mark for buffer for release */
	rx->type = NODE_RX_TYPE_RELEASE;
    1e4e:	2301      	movs	r3, #1
    1e50:	7123      	strb	r3, [r4, #4]
		/* Mark for buffer for release */
		rx->type = NODE_RX_TYPE_RELEASE;
	}

	/* Enqueue connection or CSA event to be release */
	ll_rx_put(link, rx);
    1e52:	4621      	mov	r1, r4
    1e54:	4650      	mov	r0, sl
    1e56:	f00b f8bf 	bl	cfd8 <ll_rx_put>
	ll_rx_sched();
    1e5a:	f00b f8c7 	bl	cfec <ll_rx_sched>
}
    1e5e:	b015      	add	sp, #84	; 0x54
    1e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	((struct lll_adv *)ftr->param)->conn = NULL;
    1e64:	f8d8 2000 	ldr.w	r2, [r8]
    1e68:	930f      	str	r3, [sp, #60]	; 0x3c
    1e6a:	2100      	movs	r1, #0
    1e6c:	6051      	str	r1, [r2, #4]
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
    1e6e:	f894 1037 	ldrb.w	r1, [r4, #55]	; 0x37
    1e72:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
    1e76:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    1e7a:	822a      	strh	r2, [r5, #16]
	conn->periph.sca = pdu_adv->connect_ind.sca;
    1e7c:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
    1e80:	f896 107c 	ldrb.w	r1, [r6, #124]	; 0x7c
	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
    1e84:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1e86:	930b      	str	r3, [sp, #44]	; 0x2c
	conn->periph.sca = pdu_adv->connect_ind.sca;
    1e88:	0952      	lsrs	r2, r2, #5
    1e8a:	f362 01c5 	bfi	r1, r2, #3, #3
    1e8e:	f886 107c 	strb.w	r1, [r6, #124]	; 0x7c
		ceiling_fraction(((lll_clock_ppm_local_get() +
    1e92:	f01a fd66 	bl	1c962 <lll_clock_ppm_local_get>
    1e96:	900e      	str	r0, [sp, #56]	; 0x38
    1e98:	f896 007c 	ldrb.w	r0, [r6, #124]	; 0x7c
    1e9c:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    1ea0:	f00e f9f6 	bl	10290 <lll_clock_ppm_get>
    1ea4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	memcpy((void *)&conn->periph.force, &lll->access_addr[0],
    1ea6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
    1ea8:	f240 4be2 	movw	fp, #1250	; 0x4e2
    1eac:	fb0b f707 	mul.w	r7, fp, r7
		ceiling_fraction(((lll_clock_ppm_local_get() +
    1eb0:	4410      	add	r0, r2
    1eb2:	4378      	muls	r0, r7
    1eb4:	f500 2074 	add.w	r0, r0, #999424	; 0xf4000
    1eb8:	4a7d      	ldr	r2, [pc, #500]	; (20b0 <ull_periph_setup+0x318>)
    1eba:	f200 203f 	addw	r0, r0, #575	; 0x23f
    1ebe:	fbb0 f0f2 	udiv	r0, r0, r2
	lll->periph.window_widening_max_us = (conn_interval_us >> 1) -
    1ec2:	087a      	lsrs	r2, r7, #1
    1ec4:	3a96      	subs	r2, #150	; 0x96
    1ec6:	62aa      	str	r2, [r5, #40]	; 0x28
	lll->periph.window_size_event_us = pdu_adv->connect_ind.win_size *
    1ec8:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
	lll->periph.window_widening_periodic_us =
    1ecc:	6268      	str	r0, [r5, #36]	; 0x24
	lll->periph.window_size_event_us = pdu_adv->connect_ind.win_size *
    1ece:	fb0b f202 	mul.w	r2, fp, r2
    1ed2:	63aa      	str	r2, [r5, #56]	; 0x38
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    1ed4:	f8b4 b038 	ldrh.w	fp, [r4, #56]	; 0x38
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    1ed8:	f242 7110 	movw	r1, #10000	; 0x2710
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    1edc:	fa1f f28b 	uxth.w	r2, fp
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    1ee0:	fb01 7202 	mla	r2, r1, r2, r7
    1ee4:	3a01      	subs	r2, #1
    1ee6:	fbb2 f2f7 	udiv	r2, r2, r7
    1eea:	f8a6 2072 	strh.w	r2, [r6, #114]	; 0x72
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1eee:	4a71      	ldr	r2, [pc, #452]	; (20b4 <ull_periph_setup+0x31c>)
	memcpy((void *)&conn->periph.force, &lll->access_addr[0],
    1ef0:	4619      	mov	r1, r3
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1ef2:	443a      	add	r2, r7
	memcpy((void *)&conn->periph.force, &lll->access_addr[0],
    1ef4:	f106 0080 	add.w	r0, r6, #128	; 0x80
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1ef8:	fbb2 f2f7 	udiv	r2, r2, r7
    1efc:	f8a6 2076 	strh.w	r2, [r6, #118]	; 0x76
	memcpy((void *)&conn->periph.force, &lll->access_addr[0],
    1f00:	2204      	movs	r2, #4
    1f02:	f015 f9a7 	bl	17254 <memcpy>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    1f06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1f08:	07da      	lsls	r2, r3, #31
    1f0a:	d50b      	bpl.n	1f24 <ull_periph_setup+0x18c>
    1f0c:	4a6a      	ldr	r2, [pc, #424]	; (20b8 <ull_periph_setup+0x320>)
    1f0e:	496b      	ldr	r1, [pc, #428]	; (20bc <ull_periph_setup+0x324>)
    1f10:	486b      	ldr	r0, [pc, #428]	; (20c0 <ull_periph_setup+0x328>)
    1f12:	23f1      	movs	r3, #241	; 0xf1
    1f14:	f014 fb71 	bl	165fa <printk>
    1f18:	4040      	eors	r0, r0
    1f1a:	f380 8811 	msr	BASEPRI, r0
    1f1e:	f04f 0003 	mov.w	r0, #3
    1f22:	df02      	svc	2
	cc->status = 0U;
    1f24:	f44f 7380 	mov.w	r3, #256	; 0x100
    1f28:	83a3      	strh	r3, [r4, #28]
	cc->peer_addr_type = peer_addr_type;
    1f2a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    1f2e:	77a3      	strb	r3, [r4, #30]
	memcpy(cc->peer_addr, peer_id_addr, BDADDR_SIZE);
    1f30:	2206      	movs	r2, #6
    1f32:	a910      	add	r1, sp, #64	; 0x40
    1f34:	f104 001f 	add.w	r0, r4, #31
    1f38:	f015 f98c 	bl	17254 <memcpy>
	cc->interval = lll->interval;
    1f3c:	89eb      	ldrh	r3, [r5, #14]
    1f3e:	84e3      	strh	r3, [r4, #38]	; 0x26
	cc->latency = lll->latency;
    1f40:	8a2b      	ldrh	r3, [r5, #16]
    1f42:	8523      	strh	r3, [r4, #40]	; 0x28
	cc->sca = conn->periph.sca;
    1f44:	f896 307c 	ldrb.w	r3, [r6, #124]	; 0x7c
	cc->timeout = timeout;
    1f48:	f8a4 b02a 	strh.w	fp, [r4, #42]	; 0x2a
	cc->sca = conn->periph.sca;
    1f4c:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    1f50:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	lll->handle = ll_conn_handle_get(conn);
    1f54:	4630      	mov	r0, r6
    1f56:	f00c fb23 	bl	e5a0 <ll_conn_handle_get>
	ll_rx_put(link, rx);
    1f5a:	4621      	mov	r1, r4
	lll->handle = ll_conn_handle_get(conn);
    1f5c:	81a8      	strh	r0, [r5, #12]
	rx->handle = lll->handle;
    1f5e:	80e0      	strh	r0, [r4, #6]
	ll_rx_put(link, rx);
    1f60:	4650      	mov	r0, sl
    1f62:	f00b f839 	bl	cfd8 <ll_rx_put>
	ll_rx_sched();
    1f66:	f00b f841 	bl	cfec <ll_rx_sched>
	ready_delay_us = lll_radio_rx_ready_delay_get(0, 0);
    1f6a:	2100      	movs	r1, #0
    1f6c:	4608      	mov	r0, r1
    1f6e:	f01a fccc 	bl	1c90a <lll_radio_rx_ready_delay_get>
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    1f72:	4c54      	ldr	r4, [pc, #336]	; (20c4 <ull_periph_setup+0x32c>)
	conn->ull.ticks_prepare_to_start =
    1f74:	f04f 0a00 	mov.w	sl, #0
	ready_delay_us = lll_radio_rx_ready_delay_get(0, 0);
    1f78:	4683      	mov	fp, r0
	conn->ull.ticks_prepare_to_start =
    1f7a:	2331      	movs	r3, #49	; 0x31
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    1f7c:	f200 4052 	addw	r0, r0, #1106	; 0x452
	conn->ull.ticks_prepare_to_start =
    1f80:	e9c6 a301 	strd	sl, r3, [r6, #4]
	conn->ull.ticks_preempt_to_start =
    1f84:	f8c6 a00c 	str.w	sl, [r6, #12]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    1f88:	a347      	add	r3, pc, #284	; (adr r3, 20a8 <ull_periph_setup+0x310>)
    1f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
    1f8e:	fba0 0104 	umull	r0, r1, r0, r4
    1f92:	f7fe fd13 	bl	9bc <__aeabi_uldivmod>
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
    1f96:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	conn_offset_us = ftr->radio_end_us;
    1f98:	f8d8 300c 	ldr.w	r3, [r8, #12]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    1f9c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
    1fa0:	f240 41e2 	movw	r1, #1250	; 0x4e2
    1fa4:	fb01 3302 	mla	r3, r1, r2, r3
	conn->ull.ticks_slot =
    1fa8:	6130      	str	r0, [r6, #16]
	conn_interval_us -= lll->periph.window_widening_periodic_us;
    1faa:	6a68      	ldr	r0, [r5, #36]	; 0x24
	conn_offset_us -= EVENT_JITTER_US;
    1fac:	f203 41b2 	addw	r1, r3, #1202	; 0x4b2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    1fb0:	4652      	mov	r2, sl
	conn_interval_us -= lll->periph.window_widening_periodic_us;
    1fb2:	1a3f      	subs	r7, r7, r0
	conn_offset_us -= ready_delay_us;
    1fb4:	eba1 0b0b 	sub.w	fp, r1, fp
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    1fb8:	2001      	movs	r0, #1
    1fba:	2102      	movs	r1, #2
    1fbc:	f008 ff9c 	bl	aef8 <mayfly_enable>
	ticker_id_adv = TICKER_ID_ADV_BASE + ull_adv_handle_get(adv);
    1fc0:	4648      	mov	r0, r9
    1fc2:	f00c f805 	bl	dfd0 <ull_adv_handle_get>
    1fc6:	1c82      	adds	r2, r0, #2
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    1fc8:	4b3f      	ldr	r3, [pc, #252]	; (20c8 <ull_periph_setup+0x330>)
    1fca:	f8cd 9000 	str.w	r9, [sp]
    1fce:	b2d2      	uxtb	r2, r2
    1fd0:	2101      	movs	r1, #1
    1fd2:	4650      	mov	r0, sl
    1fd4:	f009 fd82 	bl	badc <ticker_stop>
	ticker_op_stop_adv_cb(ticker_status, adv);
    1fd8:	4649      	mov	r1, r9
    1fda:	f00d fb85 	bl	f6e8 <ticker_op_stop_adv_cb>
	if (adv->lll.is_hdcd) {
    1fde:	f899 3024 	ldrb.w	r3, [r9, #36]	; 0x24
    1fe2:	07db      	lsls	r3, r3, #31
    1fe4:	d507      	bpl.n	1ff6 <ull_periph_setup+0x25e>
		ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    1fe6:	2201      	movs	r2, #1
    1fe8:	f8cd a000 	str.w	sl, [sp]
    1fec:	4653      	mov	r3, sl
    1fee:	4611      	mov	r1, r2
    1ff0:	4650      	mov	r0, sl
    1ff2:	f009 fd73 	bl	badc <ticker_stop>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    1ff6:	4630      	mov	r0, r6
    1ff8:	f00c fad2 	bl	e5a0 <ll_conn_handle_get>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    1ffc:	fba7 7904 	umull	r7, r9, r7, r4
    2000:	a329      	add	r3, pc, #164	; (adr r3, 20a8 <ull_periph_setup+0x310>)
    2002:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    2006:	4605      	mov	r5, r0
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    2008:	4649      	mov	r1, r9
    200a:	4638      	mov	r0, r7
    200c:	f7fe fcd6 	bl	9bc <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2010:	f8d8 3008 	ldr.w	r3, [r8, #8]
    2014:	f1a3 083a 	sub.w	r8, r3, #58	; 0x3a
    2018:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
    201c:	9308      	str	r3, [sp, #32]
    201e:	4b2b      	ldr	r3, [pc, #172]	; (20cc <ull_periph_setup+0x334>)
    2020:	e9cd 6306 	strd	r6, r3, [sp, #24]
    2024:	4b2a      	ldr	r3, [pc, #168]	; (20d0 <ull_periph_setup+0x338>)
    2026:	9305      	str	r3, [sp, #20]
    2028:	6933      	ldr	r3, [r6, #16]
    202a:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    202c:	f020 467f 	bic.w	r6, r0, #4278190080	; 0xff000000
    2030:	4828      	ldr	r0, [pc, #160]	; (20d4 <ull_periph_setup+0x33c>)
    2032:	2307      	movs	r3, #7
    2034:	fba6 0100 	umull	r0, r1, r6, r0
    2038:	1a38      	subs	r0, r7, r0
    203a:	fb03 1106 	mla	r1, r3, r6, r1
    203e:	eb69 0101 	sbc.w	r1, r9, r1
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2042:	f04f 0a00 	mov.w	sl, #0
				     HAL_TICKER_REMAINDER(conn_interval_us),
    2046:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    204a:	2300      	movs	r3, #0
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    204c:	f8cd a00c 	str.w	sl, [sp, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    2050:	f7fe fcb4 	bl	9bc <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    2054:	a314      	add	r3, pc, #80	; (adr r3, 20a8 <ull_periph_setup+0x310>)
    2056:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    205a:	e9cd 6001 	strd	r6, r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    205e:	fbab 0104 	umull	r0, r1, fp, r4
    2062:	f7fe fcab 	bl	9bc <__aeabi_uldivmod>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    2066:	3505      	adds	r5, #5
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2068:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    206c:	b2ed      	uxtb	r5, r5
    206e:	9000      	str	r0, [sp, #0]
    2070:	4643      	mov	r3, r8
    2072:	462a      	mov	r2, r5
    2074:	2101      	movs	r1, #1
    2076:	4650      	mov	r0, sl
    2078:	f01a f81c 	bl	1c0b4 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    207c:	f030 0302 	bics.w	r3, r0, #2
    2080:	d00c      	beq.n	209c <ull_periph_setup+0x304>
    2082:	4a0d      	ldr	r2, [pc, #52]	; (20b8 <ull_periph_setup+0x320>)
    2084:	4914      	ldr	r1, [pc, #80]	; (20d8 <ull_periph_setup+0x340>)
    2086:	480e      	ldr	r0, [pc, #56]	; (20c0 <ull_periph_setup+0x328>)
    2088:	f240 13c9 	movw	r3, #457	; 0x1c9
    208c:	f014 fab5 	bl	165fa <printk>
    2090:	4040      	eors	r0, r0
    2092:	f380 8811 	msr	BASEPRI, r0
    2096:	f04f 0003 	mov.w	r0, #3
    209a:	df02      	svc	2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
    209c:	2201      	movs	r2, #1
    209e:	2102      	movs	r1, #2
    20a0:	4610      	mov	r0, r2
    20a2:	f008 ff29 	bl	aef8 <mayfly_enable>
    20a6:	e6da      	b.n	1e5e <ull_periph_setup+0xc6>
    20a8:	1afd498d 	.word	0x1afd498d
    20ac:	00000007 	.word	0x00000007
    20b0:	000f4240 	.word	0x000f4240
    20b4:	026259ff 	.word	0x026259ff
    20b8:	000209c2 	.word	0x000209c2
    20bc:	00020480 	.word	0x00020480
    20c0:	0002023c 	.word	0x0002023c
    20c4:	3b9aca00 	.word	0x3b9aca00
    20c8:	0000f6e9 	.word	0x0000f6e9
    20cc:	0000f6bd 	.word	0x0000f6bd
    20d0:	0000f721 	.word	0x0000f721
    20d4:	1afd498d 	.word	0x1afd498d
    20d8:	00020924 	.word	0x00020924
    20dc:	00000000 	.word	0x00000000

000020e0 <lis2dh_attr_set>:

static int lis2dh_attr_set(const struct device *dev, enum sensor_channel chan,
			   enum sensor_attribute attr,
			   const struct sensor_value *val)
{
	switch (chan) {
    20e0:	2903      	cmp	r1, #3
{
    20e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
    20e4:	4614      	mov	r4, r2
    20e6:	4605      	mov	r5, r0
    20e8:	461a      	mov	r2, r3
	switch (chan) {
    20ea:	d85d      	bhi.n	21a8 <lis2dh_attr_set+0xc8>
	switch (attr) {
    20ec:	2c00      	cmp	r4, #0
    20ee:	d03c      	beq.n	216a <lis2dh_attr_set+0x8a>
    20f0:	2c07      	cmp	r4, #7
    20f2:	d159      	bne.n	21a8 <lis2dh_attr_set+0xc8>
	int64_t micro_ms2 = ms2->val1 * 1000000LL + ms2->val2;
    20f4:	685b      	ldr	r3, [r3, #4]
    20f6:	6810      	ldr	r0, [r2, #0]
    20f8:	4a37      	ldr	r2, [pc, #220]	; (21d8 <lis2dh_attr_set+0xf8>)
    20fa:	17d9      	asrs	r1, r3, #31
    20fc:	fbc0 3102 	smlal	r3, r1, r0, r2
	if (micro_ms2 > 0) {
    2100:	2b01      	cmp	r3, #1
    2102:	f171 0200 	sbcs.w	r2, r1, #0
    2106:	db22      	blt.n	214e <lis2dh_attr_set+0x6e>
		return (micro_ms2 + SENSOR_G / 2) / SENSOR_G;
    2108:	4834      	ldr	r0, [pc, #208]	; (21dc <lis2dh_attr_set+0xfc>)
    210a:	1818      	adds	r0, r3, r0
    210c:	a330      	add	r3, pc, #192	; (adr r3, 21d0 <lis2dh_attr_set+0xf0>)
    210e:	e9d3 2300 	ldrd	r2, r3, [r3]
    2112:	f141 0100 	adc.w	r1, r1, #0
		return (micro_ms2 - SENSOR_G / 2) / SENSOR_G;
    2116:	f7fe fc01 	bl	91c <__aeabi_ldivmod>
		if (range == LIS2DH_RANGE_IDX_TO_VALUE(i)) {
    211a:	b280      	uxth	r0, r0
    211c:	2802      	cmp	r0, #2
    211e:	d01e      	beq.n	215e <lis2dh_attr_set+0x7e>
    2120:	2804      	cmp	r0, #4
    2122:	d01e      	beq.n	2162 <lis2dh_attr_set+0x82>
    2124:	2808      	cmp	r0, #8
    2126:	d01e      	beq.n	2166 <lis2dh_attr_set+0x86>
    2128:	2810      	cmp	r0, #16
    212a:	d133      	bne.n	2194 <lis2dh_attr_set+0xb4>
    212c:	2303      	movs	r3, #3
	lis2dh->scale = lis2dh_reg_val_to_scale[fs];
    212e:	492c      	ldr	r1, [pc, #176]	; (21e0 <lis2dh_attr_set+0x100>)
	struct lis2dh_data *lis2dh = dev->data;
    2130:	692a      	ldr	r2, [r5, #16]
	lis2dh->scale = lis2dh_reg_val_to_scale[fs];
    2132:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    2136:	6111      	str	r1, [r2, #16]
	return lis2dh->hw_tf->update_reg(dev, LIS2DH_REG_CTRL4,
    2138:	6852      	ldr	r2, [r2, #4]
    213a:	6914      	ldr	r4, [r2, #16]
    213c:	011b      	lsls	r3, r3, #4
    213e:	2230      	movs	r2, #48	; 0x30
    2140:	2123      	movs	r1, #35	; 0x23
    2142:	4628      	mov	r0, r5
    2144:	46a4      	mov	ip, r4
		LOG_WRN("attr_set() not supported on this channel.");
		return -ENOTSUP;
	}

	return 0;
}
    2146:	b002      	add	sp, #8
    2148:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return lis2dh->hw_tf->update_reg(dev, LIS2DH_REG_CTRL4,
    214c:	4760      	bx	ip
    214e:	4825      	ldr	r0, [pc, #148]	; (21e4 <lis2dh_attr_set+0x104>)
    2150:	1818      	adds	r0, r3, r0
    2152:	f161 0100 	sbc.w	r1, r1, #0
    2156:	a31e      	add	r3, pc, #120	; (adr r3, 21d0 <lis2dh_attr_set+0xf0>)
    2158:	e9d3 2300 	ldrd	r2, r3, [r3]
    215c:	e7db      	b.n	2116 <lis2dh_attr_set+0x36>
	for (i = 0; i < LIS2DH_NUM_RANGES; i++) {
    215e:	2300      	movs	r3, #0
    2160:	e7e5      	b.n	212e <lis2dh_attr_set+0x4e>
		if (range == LIS2DH_RANGE_IDX_TO_VALUE(i)) {
    2162:	2301      	movs	r3, #1
    2164:	e7e3      	b.n	212e <lis2dh_attr_set+0x4e>
    2166:	2302      	movs	r3, #2
    2168:	e7e1      	b.n	212e <lis2dh_attr_set+0x4e>
		return lis2dh_acc_odr_set(dev, val->val1);
    216a:	881a      	ldrh	r2, [r3, #0]
	for (i = 0; i < ARRAY_SIZE(lis2dh_odr_map); i++) {
    216c:	4b1e      	ldr	r3, [pc, #120]	; (21e8 <lis2dh_attr_set+0x108>)
		if (freq == lis2dh_odr_map[i]) {
    216e:	f833 1b02 	ldrh.w	r1, [r3], #2
    2172:	428a      	cmp	r2, r1
    2174:	d10b      	bne.n	218e <lis2dh_attr_set+0xae>
	struct lis2dh_data *data = dev->data;
    2176:	692e      	ldr	r6, [r5, #16]
	status = data->hw_tf->read_reg(dev, LIS2DH_REG_CTRL1, &value);
    2178:	6873      	ldr	r3, [r6, #4]
    217a:	f10d 0207 	add.w	r2, sp, #7
    217e:	689b      	ldr	r3, [r3, #8]
    2180:	2120      	movs	r1, #32
    2182:	4628      	mov	r0, r5
    2184:	4798      	blx	r3
	if (status < 0) {
    2186:	2800      	cmp	r0, #0
    2188:	da07      	bge.n	219a <lis2dh_attr_set+0xba>
}
    218a:	b002      	add	sp, #8
    218c:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < ARRAY_SIZE(lis2dh_odr_map); i++) {
    218e:	3401      	adds	r4, #1
    2190:	2c0b      	cmp	r4, #11
    2192:	d1ec      	bne.n	216e <lis2dh_attr_set+0x8e>
	return -EINVAL;
    2194:	f06f 0015 	mvn.w	r0, #21
    2198:	e7f7      	b.n	218a <lis2dh_attr_set+0xaa>
	if ((value & LIS2DH_LP_EN_BIT_MASK) == 0U && odr == LIS2DH_ODR_8) {
    219a:	f89d 2007 	ldrb.w	r2, [sp, #7]
    219e:	0711      	lsls	r1, r2, #28
			return i;
    21a0:	4623      	mov	r3, r4
	if ((value & LIS2DH_LP_EN_BIT_MASK) == 0U && odr == LIS2DH_ODR_8) {
    21a2:	d404      	bmi.n	21ae <lis2dh_attr_set+0xce>
    21a4:	2c08      	cmp	r4, #8
    21a6:	d105      	bne.n	21b4 <lis2dh_attr_set+0xd4>
	switch (attr) {
    21a8:	f06f 0085 	mvn.w	r0, #133	; 0x85
    21ac:	e7ed      	b.n	218a <lis2dh_attr_set+0xaa>
		odr--;
    21ae:	2c0a      	cmp	r4, #10
    21b0:	bf08      	it	eq
    21b2:	2309      	moveq	r3, #9
				      (value & ~LIS2DH_ODR_MASK) |
    21b4:	f002 020f 	and.w	r2, r2, #15
	return data->hw_tf->write_reg(dev, LIS2DH_REG_CTRL1,
    21b8:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
    21bc:	6873      	ldr	r3, [r6, #4]
    21be:	b2d2      	uxtb	r2, r2
    21c0:	68db      	ldr	r3, [r3, #12]
    21c2:	2120      	movs	r1, #32
    21c4:	4628      	mov	r0, r5
    21c6:	4798      	blx	r3
    21c8:	e7df      	b.n	218a <lis2dh_attr_set+0xaa>
    21ca:	bf00      	nop
    21cc:	f3af 8000 	nop.w
    21d0:	0095a33a 	.word	0x0095a33a
    21d4:	00000000 	.word	0x00000000
    21d8:	000f4240 	.word	0x000f4240
    21dc:	004ad19d 	.word	0x004ad19d
    21e0:	200008e8 	.word	0x200008e8
    21e4:	ffb52e63 	.word	0xffb52e63
    21e8:	0001fc5c 	.word	0x0001fc5c
    21ec:	00000000 	.word	0x00000000

000021f0 <nrf_flash_sync_exe>:
	_ticker_sync_context.interval = duration - FLASH_SYNC_SWITCHING_TIME;
	_ticker_sync_context.slot = duration;
}

int nrf_flash_sync_exe(struct flash_op_desc *op_desc)
{
    21f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    21f4:	b08f      	sub	sp, #60	; 0x3c
			      /* (MAYFLY_CALL_ID_PROGRAM) */
			   ticker_id, /* flash ticker id */
			   ticker_ticks_now_get(), /* current tick */
			   0, /* first int. immediately */
			   /* period */
			   HAL_TICKER_US_TO_TICKS(
    21f6:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 22d0 <nrf_flash_sync_exe+0xe0>
{
    21fa:	900a      	str	r0, [sp, #40]	; 0x28
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
    21fc:	f10d 0137 	add.w	r1, sp, #55	; 0x37
    2200:	f10d 0036 	add.w	r0, sp, #54	; 0x36
    2204:	f01a f80c 	bl	1c220 <ll_timeslice_ticker_id_get>
			   HAL_TICKER_US_TO_TICKS(
    2208:	4f32      	ldr	r7, [pc, #200]	; (22d4 <nrf_flash_sync_exe+0xe4>)
	err = ticker_start(instance_index,
    220a:	f89d a036 	ldrb.w	sl, [sp, #54]	; 0x36
    220e:	f89d b037 	ldrb.w	fp, [sp, #55]	; 0x37
    2212:	f019 ff82 	bl	1c11a <ticker_ticks_now_get>
			   HAL_TICKER_US_TO_TICKS(
    2216:	f8d8 4000 	ldr.w	r4, [r8]
    221a:	fba4 5407 	umull	r5, r4, r4, r7
    221e:	a32a      	add	r3, pc, #168	; (adr r3, 22c8 <nrf_flash_sync_exe+0xd8>)
    2220:	e9d3 2300 	ldrd	r2, r3, [r3]
	err = ticker_start(instance_index,
    2224:	4681      	mov	r9, r0
			   HAL_TICKER_US_TO_TICKS(
    2226:	4621      	mov	r1, r4
    2228:	4628      	mov	r0, r5
    222a:	f7fe fbc7 	bl	9bc <__aeabi_uldivmod>
	err = ticker_start(instance_index,
    222e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			   HAL_TICKER_US_TO_TICKS(
    2230:	900b      	str	r0, [sp, #44]	; 0x2c
				_ticker_sync_context.interval),
			   /* period remainder */
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
			   0, /* lazy, voluntary skips */
			   HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot),
    2232:	f8d8 0004 	ldr.w	r0, [r8, #4]
	err = ticker_start(instance_index,
    2236:	9306      	str	r3, [sp, #24]
    2238:	4b27      	ldr	r3, [pc, #156]	; (22d8 <nrf_flash_sync_exe+0xe8>)
    223a:	9305      	str	r3, [sp, #20]
    223c:	2600      	movs	r6, #0
			   HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot),
    223e:	a322      	add	r3, pc, #136	; (adr r3, 22c8 <nrf_flash_sync_exe+0xd8>)
    2240:	e9d3 2300 	ldrd	r2, r3, [r3]
    2244:	fba0 0107 	umull	r0, r1, r0, r7
	err = ticker_start(instance_index,
    2248:	e9cd 6607 	strd	r6, r6, [sp, #28]
			   HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot),
    224c:	f7fe fbb6 	bl	9bc <__aeabi_uldivmod>
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
    2250:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	err = ticker_start(instance_index,
    2252:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2256:	e9cd 6003 	strd	r6, r0, [sp, #12]
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
    225a:	4820      	ldr	r0, [pc, #128]	; (22dc <nrf_flash_sync_exe+0xec>)
    225c:	f023 477f 	bic.w	r7, r3, #4278190080	; 0xff000000
    2260:	fba7 0100 	umull	r0, r1, r7, r0
    2264:	2307      	movs	r3, #7
    2266:	1a28      	subs	r0, r5, r0
    2268:	fb03 1107 	mla	r1, r3, r7, r1
    226c:	eb64 0101 	sbc.w	r1, r4, r1
    2270:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2274:	2300      	movs	r3, #0
    2276:	f7fe fba1 	bl	9bc <__aeabi_uldivmod>
	err = ticker_start(instance_index,
    227a:	9600      	str	r6, [sp, #0]
    227c:	e9cd 7001 	strd	r7, r0, [sp, #4]
    2280:	464b      	mov	r3, r9
    2282:	465a      	mov	r2, fp
    2284:	2103      	movs	r1, #3
    2286:	4650      	mov	r0, sl
    2288:	f019 ff14 	bl	1c0b4 <ticker_start>
			   time_slot_callback_prepare,
			   op_desc,
			   NULL, /* no op callback */
			   NULL);

	if (err != TICKER_STATUS_SUCCESS && err != TICKER_STATUS_BUSY) {
    228c:	f030 0402 	bics.w	r4, r0, #2
    2290:	d116      	bne.n	22c0 <nrf_flash_sync_exe+0xd0>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    2292:	4a13      	ldr	r2, [pc, #76]	; (22e0 <nrf_flash_sync_exe+0xf0>)
    2294:	4813      	ldr	r0, [pc, #76]	; (22e4 <nrf_flash_sync_exe+0xf4>)
    2296:	2300      	movs	r3, #0
    2298:	f013 fa34 	bl	15704 <z_impl_k_sem_take>
		result = -ECANCELED;
	} else if (k_sem_take(&sem_sync, K_MSEC(FLASH_TIMEOUT_MS)) != 0) {
    229c:	b168      	cbz	r0, 22ba <nrf_flash_sync_exe+0xca>
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
    229e:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
    22a2:	f89d 0036 	ldrb.w	r0, [sp, #54]	; 0x36
    22a6:	9400      	str	r4, [sp, #0]
    22a8:	4623      	mov	r3, r4
    22aa:	2103      	movs	r1, #3
    22ac:	f009 fc16 	bl	badc <ticker_stop>
		/* Stop any scheduled jobs */
		_ticker_stop(instance_index, 3, ticker_id);

		/* wait for operation's complete overrun*/
		result = -ETIMEDOUT;
    22b0:	f06f 0073 	mvn.w	r0, #115	; 0x73
	} else {
		result = _ticker_sync_context.result;
	}

	return result;
}
    22b4:	b00f      	add	sp, #60	; 0x3c
    22b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		result = _ticker_sync_context.result;
    22ba:	f8d8 000c 	ldr.w	r0, [r8, #12]
    22be:	e7f9      	b.n	22b4 <nrf_flash_sync_exe+0xc4>
		result = -ECANCELED;
    22c0:	f06f 008b 	mvn.w	r0, #139	; 0x8b
	return result;
    22c4:	e7f6      	b.n	22b4 <nrf_flash_sync_exe+0xc4>
    22c6:	bf00      	nop
    22c8:	1afd498d 	.word	0x1afd498d
    22cc:	00000007 	.word	0x00000007
    22d0:	2000291c 	.word	0x2000291c
    22d4:	3b9aca00 	.word	0x3b9aca00
    22d8:	0001338d 	.word	0x0001338d
    22dc:	1afd498d 	.word	0x1afd498d
    22e0:	000b7b44 	.word	0x000b7b44
    22e4:	2000292c 	.word	0x2000292c

000022e8 <nrf_flash_sync_check_time_limit>:
{
	_ticker_sync_context.ticks_begin = ticker_ticks_now_get();
}

bool nrf_flash_sync_check_time_limit(uint32_t iteration)
{
    22e8:	b538      	push	{r3, r4, r5, lr}
	uint32_t ticks_diff;

	ticks_diff = ticker_ticks_diff_get(ticker_ticks_now_get(),
    22ea:	4d0f      	ldr	r5, [pc, #60]	; (2328 <nrf_flash_sync_check_time_limit+0x40>)
{
    22ec:	4604      	mov	r4, r0
	ticks_diff = ticker_ticks_diff_get(ticker_ticks_now_get(),
    22ee:	f019 ff14 	bl	1c11a <ticker_ticks_now_get>
    22f2:	68a9      	ldr	r1, [r5, #8]
    22f4:	f019 ff13 	bl	1c11e <ticker_ticks_diff_get>
					   _ticker_sync_context.ticks_begin);
	if (ticks_diff + ticks_diff/iteration >
	    HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot)) {
    22f8:	6869      	ldr	r1, [r5, #4]
	if (ticks_diff + ticks_diff/iteration >
    22fa:	fbb0 f4f4 	udiv	r4, r0, r4
    22fe:	4404      	add	r4, r0
	    HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot)) {
    2300:	480a      	ldr	r0, [pc, #40]	; (232c <nrf_flash_sync_check_time_limit+0x44>)
    2302:	a307      	add	r3, pc, #28	; (adr r3, 2320 <nrf_flash_sync_check_time_limit+0x38>)
    2304:	e9d3 2300 	ldrd	r2, r3, [r3]
    2308:	fba1 0100 	umull	r0, r1, r1, r0
    230c:	f7fe fb56 	bl	9bc <__aeabi_uldivmod>
    2310:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return true;
	}

	return false;
}
    2314:	4284      	cmp	r4, r0
    2316:	bf94      	ite	ls
    2318:	2000      	movls	r0, #0
    231a:	2001      	movhi	r0, #1
    231c:	bd38      	pop	{r3, r4, r5, pc}
    231e:	bf00      	nop
    2320:	1afd498d 	.word	0x1afd498d
    2324:	00000007 	.word	0x00000007
    2328:	2000291c 	.word	0x2000291c
    232c:	3b9aca00 	.word	0x3b9aca00

00002330 <sensor_status>:
	onoff.src = ctx->addr;
}

void sensor_status(struct bt_mesh_model *model, struct bt_mesh_msg_ctx *ctx, struct net_buf_simple *buf)
{
	printk("sensor_status\n");
    2330:	4801      	ldr	r0, [pc, #4]	; (2338 <sensor_status+0x8>)
    2332:	f014 b962 	b.w	165fa <printk>
    2336:	bf00      	nop
    2338:	0001fc72 	.word	0x0001fc72

0000233c <sensor_column_get>:
}

void sensor_column_get(struct bt_mesh_model *model, struct bt_mesh_msg_ctx *ctx, struct net_buf_simple *buf)
{
	printk("sensor_column_get\n");
    233c:	4801      	ldr	r0, [pc, #4]	; (2344 <sensor_column_get+0x8>)
    233e:	f014 b95c 	b.w	165fa <printk>
    2342:	bf00      	nop
    2344:	0001fc81 	.word	0x0001fc81

00002348 <sensor_column_status>:
}

void sensor_column_status(struct bt_mesh_model *model, struct bt_mesh_msg_ctx *ctx, struct net_buf_simple *buf)
{
	printk("sensor_column_status\n");
    2348:	4801      	ldr	r0, [pc, #4]	; (2350 <sensor_column_status+0x8>)
    234a:	f014 b956 	b.w	165fa <printk>
    234e:	bf00      	nop
    2350:	0001fc94 	.word	0x0001fc94

00002354 <sensor_series_get>:
}

void sensor_series_get(struct bt_mesh_model *model, struct bt_mesh_msg_ctx *ctx, struct net_buf_simple *buf)
{
	printk("sensor_series_get\n");
    2354:	4801      	ldr	r0, [pc, #4]	; (235c <sensor_series_get+0x8>)
    2356:	f014 b950 	b.w	165fa <printk>
    235a:	bf00      	nop
    235c:	0001fcaa 	.word	0x0001fcaa

00002360 <sensor_series_status>:
}

void sensor_series_status(struct bt_mesh_model *model, struct bt_mesh_msg_ctx *ctx, struct net_buf_simple *buf)
{
	printk("sensor_series_status\n");
    2360:	4801      	ldr	r0, [pc, #4]	; (2368 <sensor_series_status+0x8>)
    2362:	f014 b94a 	b.w	165fa <printk>
    2366:	bf00      	nop
    2368:	0001fcbd 	.word	0x0001fcbd

0000236c <bt_ready>:
		return bt_mesh_model_send(model, ctx, &buf, NULL, NULL);
	}
}

static void bt_ready(int err)
{
    236c:	b513      	push	{r0, r1, r4, lr}
	if (err) {
    236e:	4601      	mov	r1, r0
    2370:	b128      	cbz	r0, 237e <bt_ready+0x12>
		printk("Bluetooth init failed (err %d)\n", err);
    2372:	4822      	ldr	r0, [pc, #136]	; (23fc <bt_ready+0x90>)

	/* This will be a no-op if settings_load() loaded provisioning info */
	//bt_mesh_prov_enable(BT_MESH_PROV_ADV | BT_MESH_PROV_GATT);

	printk("Mesh initialized\n");
}
    2374:	b002      	add	sp, #8
    2376:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Initializing mesh failed (err %d)\n", err);
    237a:	f014 b93e 	b.w	165fa <printk>
	printk("Bluetooth initialized\n");
    237e:	4820      	ldr	r0, [pc, #128]	; (2400 <bt_ready+0x94>)
    2380:	f014 f93b 	bl	165fa <printk>
	err = bt_mesh_init(&prov, &comp);
    2384:	491f      	ldr	r1, [pc, #124]	; (2404 <bt_ready+0x98>)
    2386:	4820      	ldr	r0, [pc, #128]	; (2408 <bt_ready+0x9c>)
    2388:	f017 f809 	bl	1939e <bt_mesh_init>
	if (err) {
    238c:	4603      	mov	r3, r0
    238e:	b110      	cbz	r0, 2396 <bt_ready+0x2a>
		printk("Initializing mesh failed (err %d)\n", err);
    2390:	4601      	mov	r1, r0
    2392:	481e      	ldr	r0, [pc, #120]	; (240c <bt_ready+0xa0>)
    2394:	e7ee      	b.n	2374 <bt_ready+0x8>
	err = bt_mesh_provision(net_key, net_idx, flags, iv_index, addr,
    2396:	4a1e      	ldr	r2, [pc, #120]	; (2410 <bt_ready+0xa4>)
    2398:	9201      	str	r2, [sp, #4]
    239a:	2204      	movs	r2, #4
    239c:	9200      	str	r2, [sp, #0]
    239e:	4601      	mov	r1, r0
    23a0:	4602      	mov	r2, r0
    23a2:	481c      	ldr	r0, [pc, #112]	; (2414 <bt_ready+0xa8>)
    23a4:	f005 fc74 	bl	7c90 <bt_mesh_provision>
	if (err == -EALREADY) {
    23a8:	f110 0f78 	cmn.w	r0, #120	; 0x78
	err = bt_mesh_provision(net_key, net_idx, flags, iv_index, addr,
    23ac:	4604      	mov	r4, r0
	if (err == -EALREADY) {
    23ae:	d103      	bne.n	23b8 <bt_ready+0x4c>
		printk("Using stored settings\n");
    23b0:	4819      	ldr	r0, [pc, #100]	; (2418 <bt_ready+0xac>)
	printk("Configuration complete\n");
    23b2:	f014 f922 	bl	165fa <printk>
    23b6:	e013      	b.n	23e0 <bt_ready+0x74>
	} else if (err) {
    23b8:	b110      	cbz	r0, 23c0 <bt_ready+0x54>
		printk("Provisioning failed (err %d)\n", err);
    23ba:	4601      	mov	r1, r0
    23bc:	4817      	ldr	r0, [pc, #92]	; (241c <bt_ready+0xb0>)
    23be:	e7d9      	b.n	2374 <bt_ready+0x8>
		printk("Provisioning completed\n");
    23c0:	4817      	ldr	r0, [pc, #92]	; (2420 <bt_ready+0xb4>)
    23c2:	f014 f91a 	bl	165fa <printk>
	printk("Configuring...\n");
    23c6:	4817      	ldr	r0, [pc, #92]	; (2424 <bt_ready+0xb8>)
    23c8:	f014 f917 	bl	165fa <printk>
	err = bt_mesh_app_key_add(app_idx, net_idx, app_key);
    23cc:	4621      	mov	r1, r4
    23ce:	4a16      	ldr	r2, [pc, #88]	; (2428 <bt_ready+0xbc>)
    23d0:	4620      	mov	r0, r4
    23d2:	f006 fd59 	bl	8e88 <bt_mesh_app_key_add>
	if (err) {
    23d6:	4601      	mov	r1, r0
    23d8:	b140      	cbz	r0, 23ec <bt_ready+0x80>
		printk("Base key add failed (err: %d)\n", err);
    23da:	4814      	ldr	r0, [pc, #80]	; (242c <bt_ready+0xc0>)
    23dc:	f014 f90d 	bl	165fa <printk>
	printk("Mesh initialized\n");
    23e0:	4813      	ldr	r0, [pc, #76]	; (2430 <bt_ready+0xc4>)
}
    23e2:	b002      	add	sp, #8
    23e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	printk("Mesh initialized\n");
    23e8:	f014 b907 	b.w	165fa <printk>
	models[2].keys[0] = app_idx;
    23ec:	4b11      	ldr	r3, [pc, #68]	; (2434 <bt_ready+0xc8>)
    23ee:	f8a3 004c 	strh.w	r0, [r3, #76]	; 0x4c
	printk("Provisioned and configured!\n");
    23f2:	4811      	ldr	r0, [pc, #68]	; (2438 <bt_ready+0xcc>)
    23f4:	f014 f901 	bl	165fa <printk>
	printk("Configuration complete\n");
    23f8:	4810      	ldr	r0, [pc, #64]	; (243c <bt_ready+0xd0>)
    23fa:	e7da      	b.n	23b2 <bt_ready+0x46>
    23fc:	0001fcd3 	.word	0x0001fcd3
    2400:	0001fcf3 	.word	0x0001fcf3
    2404:	0001f2b8 	.word	0x0001f2b8
    2408:	0001f2e0 	.word	0x0001f2e0
    240c:	0001fd0a 	.word	0x0001fd0a
    2410:	0001fe8e 	.word	0x0001fe8e
    2414:	0001fe9e 	.word	0x0001fe9e
    2418:	0001fd2d 	.word	0x0001fd2d
    241c:	0001fd44 	.word	0x0001fd44
    2420:	0001fd62 	.word	0x0001fd62
    2424:	0001fd7a 	.word	0x0001fd7a
    2428:	0001fe7e 	.word	0x0001fe7e
    242c:	0001fd8a 	.word	0x0001fd8a
    2430:	0001fdde 	.word	0x0001fdde
    2434:	200001fc 	.word	0x200001fc
    2438:	0001fda9 	.word	0x0001fda9
    243c:	0001fdc6 	.word	0x0001fdc6

00002440 <timer_func>:
{    
    2440:	b508      	push	{r3, lr}
        time++;
    2442:	4c04      	ldr	r4, [pc, #16]	; (2454 <timer_func+0x14>)
	return z_impl_k_sleep(timeout);
    2444:	2021      	movs	r0, #33	; 0x21
    2446:	2100      	movs	r1, #0
    2448:	f013 fdd2 	bl	15ff0 <z_impl_k_sleep>
    244c:	6823      	ldr	r3, [r4, #0]
    244e:	3301      	adds	r3, #1
    2450:	6023      	str	r3, [r4, #0]
    while(1) {
    2452:	e7f7      	b.n	2444 <timer_func+0x4>
    2454:	20001880 	.word	0x20001880

00002458 <send_sensor_data.isra.0>:
static int send_sensor_data(struct bt_mesh_model *model, struct bt_mesh_msg_ctx *ctx, uint8_t device, float data)
    2458:	b5f0      	push	{r4, r5, r6, r7, lr}
    245a:	4605      	mov	r5, r0
    245c:	b08b      	sub	sp, #44	; 0x2c
	printk("send_sensor_data()\n");
    245e:	4835      	ldr	r0, [pc, #212]	; (2534 <send_sensor_data.isra.0+0xdc>)
static int send_sensor_data(struct bt_mesh_model *model, struct bt_mesh_msg_ctx *ctx, uint8_t device, float data)
    2460:	460e      	mov	r6, r1
    2462:	4617      	mov	r7, r2
    2464:	461c      	mov	r4, r3
	printk("send_sensor_data()\n");
    2466:	f014 f8c8 	bl	165fa <printk>
	if (bt_mesh_is_provisioned()) {
    246a:	f005 fbeb 	bl	7c44 <bt_mesh_is_provisioned>
    246e:	2800      	cmp	r0, #0
    2470:	d057      	beq.n	2522 <send_sensor_data.isra.0+0xca>
		BT_MESH_MODEL_BUF_DEFINE(buf, OP_ONOFF_STATUS, 3 + 3 + 4 + 4);
    2472:	ab05      	add	r3, sp, #20
    2474:	f44f 12a0 	mov.w	r2, #1310720	; 0x140000
		bt_mesh_model_msg_init(&buf, OP_ONOFF_STATUS);
    2478:	a802      	add	r0, sp, #8
    247a:	f248 2104 	movw	r1, #33284	; 0x8204
		BT_MESH_MODEL_BUF_DEFINE(buf, OP_ONOFF_STATUS, 3 + 3 + 4 + 4);
    247e:	e9cd 2303 	strd	r2, r3, [sp, #12]
    2482:	9302      	str	r3, [sp, #8]
		bt_mesh_model_msg_init(&buf, OP_ONOFF_STATUS);
    2484:	f017 fd97 	bl	19fb6 <bt_mesh_model_msg_init>
		net_buf_simple_add_u8(&buf, tid++);
    2488:	4b2b      	ldr	r3, [pc, #172]	; (2538 <send_sensor_data.isra.0+0xe0>)
    248a:	7819      	ldrb	r1, [r3, #0]
    248c:	a802      	add	r0, sp, #8
    248e:	1c4a      	adds	r2, r1, #1
    2490:	701a      	strb	r2, [r3, #0]
    2492:	f01a fda9 	bl	1cfe8 <net_buf_simple_add_u8>
	return z_impl_k_uptime_ticks();
    2496:	f01c fada 	bl	1ea4e <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    249a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    249e:	4341      	muls	r1, r0
		net_buf_simple_add_u8(&buf, RANDOM_8);
    24a0:	f3c1 31c7 	ubfx	r1, r1, #15, #8
    24a4:	a802      	add	r0, sp, #8
    24a6:	f01a fd9f 	bl	1cfe8 <net_buf_simple_add_u8>
		net_buf_simple_add_u8(&buf, NODE_ADDR);
    24aa:	2104      	movs	r1, #4
    24ac:	a802      	add	r0, sp, #8
    24ae:	f01a fd9b 	bl	1cfe8 <net_buf_simple_add_u8>
		net_buf_simple_add_u8(&buf, PREAMBLE);
    24b2:	21af      	movs	r1, #175	; 0xaf
    24b4:	a802      	add	r0, sp, #8
    24b6:	f01a fd97 	bl	1cfe8 <net_buf_simple_add_u8>
		net_buf_simple_add_u8(&buf, device);
    24ba:	4639      	mov	r1, r7
    24bc:	a802      	add	r0, sp, #8
    24be:	f01a fd93 	bl	1cfe8 <net_buf_simple_add_u8>
		net_buf_simple_add_u8(&buf, 4);
    24c2:	2104      	movs	r1, #4
    24c4:	a802      	add	r0, sp, #8
    24c6:	f01a fd8f 	bl	1cfe8 <net_buf_simple_add_u8>
		net_buf_simple_add_le32(&buf, time);
    24ca:	4b1c      	ldr	r3, [pc, #112]	; (253c <send_sensor_data.isra.0+0xe4>)
			printk("%02x ", buf.data[i]);
    24cc:	4f1c      	ldr	r7, [pc, #112]	; (2540 <send_sensor_data.isra.0+0xe8>)
		net_buf_simple_add_le32(&buf, time);
    24ce:	6819      	ldr	r1, [r3, #0]
    24d0:	a802      	add	r0, sp, #8
    24d2:	f01a fdb2 	bl	1d03a <net_buf_simple_add_le32>
		net_buf_simple_add_le32(&buf, *((uint32_t*)(&data)));
    24d6:	4621      	mov	r1, r4
    24d8:	a802      	add	r0, sp, #8
    24da:	f01a fdae 	bl	1d03a <net_buf_simple_add_le32>
		printk("Sending ");
    24de:	4819      	ldr	r0, [pc, #100]	; (2544 <send_sensor_data.isra.0+0xec>)
    24e0:	f014 f88b 	bl	165fa <printk>
		for (int i = 0; i < buf.len; i++) {
    24e4:	2400      	movs	r4, #0
    24e6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    24ea:	429c      	cmp	r4, r3
    24ec:	db1b      	blt.n	2526 <send_sensor_data.isra.0+0xce>
		printk("\n");
    24ee:	4816      	ldr	r0, [pc, #88]	; (2548 <send_sensor_data.isra.0+0xf0>)
    24f0:	f014 f883 	bl	165fa <printk>
	return z_impl_k_sleep(timeout);
    24f4:	2100      	movs	r1, #0
    24f6:	f640 40cd 	movw	r0, #3277	; 0xccd
    24fa:	f013 fd79 	bl	15ff0 <z_impl_k_sleep>
		board_led_set(true);
    24fe:	2001      	movs	r0, #1
    2500:	f000 f936 	bl	2770 <board_led_set>
    2504:	2100      	movs	r1, #0
    2506:	f240 6067 	movw	r0, #1639	; 0x667
    250a:	f013 fd71 	bl	15ff0 <z_impl_k_sleep>
		board_led_set(false);
    250e:	2000      	movs	r0, #0
    2510:	f000 f92e 	bl	2770 <board_led_set>
		return bt_mesh_model_send(model, ctx, &buf, NULL, NULL);
    2514:	2300      	movs	r3, #0
    2516:	9300      	str	r3, [sp, #0]
    2518:	aa02      	add	r2, sp, #8
    251a:	4631      	mov	r1, r6
    251c:	4628      	mov	r0, r5
    251e:	f017 fd06 	bl	19f2e <bt_mesh_model_send>
}
    2522:	b00b      	add	sp, #44	; 0x2c
    2524:	bdf0      	pop	{r4, r5, r6, r7, pc}
			printk("%02x ", buf.data[i]);
    2526:	9b02      	ldr	r3, [sp, #8]
    2528:	4638      	mov	r0, r7
    252a:	5d19      	ldrb	r1, [r3, r4]
    252c:	f014 f865 	bl	165fa <printk>
		for (int i = 0; i < buf.len; i++) {
    2530:	3401      	adds	r4, #1
    2532:	e7d8      	b.n	24e6 <send_sensor_data.isra.0+0x8e>
    2534:	0001fdf0 	.word	0x0001fdf0
    2538:	20002b28 	.word	0x20002b28
    253c:	20001880 	.word	0x20001880
    2540:	0001fe0d 	.word	0x0001fe0d
    2544:	0001fe04 	.word	0x0001fe04
    2548:	0001fdc4 	.word	0x0001fdc4

0000254c <sensor_get>:
{
    254c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2550:	4606      	mov	r6, r0
	printk("sensor_get()\n");
    2552:	4843      	ldr	r0, [pc, #268]	; (2660 <sensor_get+0x114>)
		printk("%02x ", buf->data[i]);
    2554:	f8df 810c 	ldr.w	r8, [pc, #268]	; 2664 <sensor_get+0x118>
{
    2558:	460d      	mov	r5, r1
    255a:	4614      	mov	r4, r2
	printk("sensor_get()\n");
    255c:	f014 f84d 	bl	165fa <printk>
	printk("Got ");
    2560:	4841      	ldr	r0, [pc, #260]	; (2668 <sensor_get+0x11c>)
    2562:	f014 f84a 	bl	165fa <printk>
	for (int i = 0; i < buf->len; i++) {
    2566:	2700      	movs	r7, #0
    2568:	88a3      	ldrh	r3, [r4, #4]
    256a:	42bb      	cmp	r3, r7
    256c:	dc45      	bgt.n	25fa <sensor_get+0xae>
	printk("\n");
    256e:	483f      	ldr	r0, [pc, #252]	; (266c <sensor_get+0x120>)
	printk("%02x %02x\n", onoff.src, ctx->addr);
    2570:	4f3f      	ldr	r7, [pc, #252]	; (2670 <sensor_get+0x124>)
	printk("\n");
    2572:	f014 f842 	bl	165fa <printk>
	uint8_t tid = net_buf_simple_pull_u8(buf);
    2576:	4620      	mov	r0, r4
    2578:	f01a fdb2 	bl	1d0e0 <net_buf_simple_pull_u8>
    257c:	4680      	mov	r8, r0
	uint8_t random = net_buf_simple_pull_u8(buf);
    257e:	4620      	mov	r0, r4
    2580:	f01a fdae 	bl	1d0e0 <net_buf_simple_pull_u8>
	uint8_t address = net_buf_simple_pull_u8(buf);
    2584:	4620      	mov	r0, r4
    2586:	f01a fdab 	bl	1d0e0 <net_buf_simple_pull_u8>
	uint8_t preamble = net_buf_simple_pull_u8(buf);
    258a:	4620      	mov	r0, r4
    258c:	f01a fda8 	bl	1d0e0 <net_buf_simple_pull_u8>
    2590:	4681      	mov	r9, r0
	uint8_t type = net_buf_simple_pull_u8(buf);
    2592:	4620      	mov	r0, r4
    2594:	f01a fda4 	bl	1d0e0 <net_buf_simple_pull_u8>
	uint8_t length = net_buf_simple_pull_u8(buf);
    2598:	4620      	mov	r0, r4
    259a:	f01a fda1 	bl	1d0e0 <net_buf_simple_pull_u8>
	time = net_buf_simple_pull_le32(buf);
    259e:	4620      	mov	r0, r4
    25a0:	f01a fdb8 	bl	1d114 <net_buf_simple_pull_le32>
    25a4:	4b33      	ldr	r3, [pc, #204]	; (2674 <sensor_get+0x128>)
    25a6:	6018      	str	r0, [r3, #0]
	uint8_t device = net_buf_simple_pull_u8(buf);
    25a8:	4620      	mov	r0, r4
    25aa:	f01a fd99 	bl	1d0e0 <net_buf_simple_pull_u8>
	printk("%02x %02x\n", onoff.src, ctx->addr);
    25ae:	88aa      	ldrh	r2, [r5, #4]
    25b0:	8879      	ldrh	r1, [r7, #2]
	uint8_t device = net_buf_simple_pull_u8(buf);
    25b2:	4604      	mov	r4, r0
	printk("%02x %02x\n", onoff.src, ctx->addr);
    25b4:	4830      	ldr	r0, [pc, #192]	; (2678 <sensor_get+0x12c>)
    25b6:	f014 f820 	bl	165fa <printk>
	if (tid == onoff.tid && onoff.src == ctx->addr) {
    25ba:	783b      	ldrb	r3, [r7, #0]
    25bc:	4543      	cmp	r3, r8
    25be:	d103      	bne.n	25c8 <sensor_get+0x7c>
    25c0:	887a      	ldrh	r2, [r7, #2]
    25c2:	88ab      	ldrh	r3, [r5, #4]
    25c4:	429a      	cmp	r2, r3
    25c6:	d02d      	beq.n	2624 <sensor_get+0xd8>
	board_led_set(true);
    25c8:	2001      	movs	r0, #1
    25ca:	f000 f8d1 	bl	2770 <board_led_set>
    25ce:	2100      	movs	r1, #0
    25d0:	f240 6067 	movw	r0, #1639	; 0x667
    25d4:	f013 fd0c 	bl	15ff0 <z_impl_k_sleep>
	board_led_set(false);
    25d8:	2000      	movs	r0, #0
    25da:	f000 f8c9 	bl	2770 <board_led_set>
	if (preamble == PREAMBLE) {
    25de:	f1b9 0faf 	cmp.w	r9, #175	; 0xaf
    25e2:	d11b      	bne.n	261c <sensor_get+0xd0>
		printk("correct preamble\n");
    25e4:	4825      	ldr	r0, [pc, #148]	; (267c <sensor_get+0x130>)
    25e6:	f014 f808 	bl	165fa <printk>
		switch(device) {
    25ea:	1e63      	subs	r3, r4, #1
    25ec:	2b04      	cmp	r3, #4
    25ee:	d815      	bhi.n	261c <sensor_get+0xd0>
    25f0:	e8df f003 	tbb	[pc, r3]
    25f4:	28211a0a 	.word	0x28211a0a
    25f8:	2f          	.byte	0x2f
    25f9:	00          	.byte	0x00
		printk("%02x ", buf->data[i]);
    25fa:	6823      	ldr	r3, [r4, #0]
    25fc:	4640      	mov	r0, r8
    25fe:	5dd9      	ldrb	r1, [r3, r7]
    2600:	f013 fffb 	bl	165fa <printk>
	for (int i = 0; i < buf->len; i++) {
    2604:	3701      	adds	r7, #1
    2606:	e7af      	b.n	2568 <sensor_get+0x1c>
				send_sensor_data(model, ctx, device, scu_lps22hb_read());
    2608:	f7fe fbd2 	bl	db0 <scu_lps22hb_read>
    260c:	f7fe f936 	bl	87c <__aeabi_d2f>
    2610:	2201      	movs	r2, #1
    2612:	4603      	mov	r3, r0
				send_sensor_data(model, ctx, device, scu_ccs811_read_voc());
    2614:	4629      	mov	r1, r5
    2616:	4630      	mov	r0, r6
    2618:	f7ff ff1e 	bl	2458 <send_sensor_data.isra.0>
	onoff.src = ctx->addr;
    261c:	88ab      	ldrh	r3, [r5, #4]
	onoff.tid = tid;
    261e:	f887 8000 	strb.w	r8, [r7]
	onoff.src = ctx->addr;
    2622:	807b      	strh	r3, [r7, #2]
}
    2624:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				send_sensor_data(model, ctx, device, scu_ccs811_read_eco2());
    2628:	f000 f8f6 	bl	2818 <scu_ccs811_read_eco2>
    262c:	f7fe f926 	bl	87c <__aeabi_d2f>
    2630:	2202      	movs	r2, #2
    2632:	4603      	mov	r3, r0
    2634:	e7ee      	b.n	2614 <sensor_get+0xc8>
				send_sensor_data(model, ctx, device, scu_hts221_read_temp());
    2636:	f7fe fb43 	bl	cc0 <scu_hts221_read_temp>
    263a:	f7fe f91f 	bl	87c <__aeabi_d2f>
    263e:	2203      	movs	r2, #3
    2640:	4603      	mov	r3, r0
    2642:	e7e7      	b.n	2614 <sensor_get+0xc8>
				send_sensor_data(model, ctx, device, scu_hts221_read_hum());
    2644:	f7fe fb78 	bl	d38 <scu_hts221_read_hum>
    2648:	f7fe f918 	bl	87c <__aeabi_d2f>
    264c:	2204      	movs	r2, #4
    264e:	4603      	mov	r3, r0
    2650:	e7e0      	b.n	2614 <sensor_get+0xc8>
				send_sensor_data(model, ctx, device, scu_ccs811_read_voc());
    2652:	f000 f89f 	bl	2794 <scu_ccs811_read_voc>
    2656:	f7fe f911 	bl	87c <__aeabi_d2f>
    265a:	2205      	movs	r2, #5
    265c:	4603      	mov	r3, r0
    265e:	e7d9      	b.n	2614 <sensor_get+0xc8>
    2660:	0001fe13 	.word	0x0001fe13
    2664:	0001fe0d 	.word	0x0001fe0d
    2668:	0001fe21 	.word	0x0001fe21
    266c:	0001fdc4 	.word	0x0001fdc4
    2670:	20002afc 	.word	0x20002afc
    2674:	20001880 	.word	0x20001880
    2678:	0001fe26 	.word	0x0001fe26
    267c:	0001fe31 	.word	0x0001fe31

00002680 <main>:
    scu_lis2dh_init();
    scu_lps22hb_init();
}    

void main(void)
{
    2680:	b510      	push	{r4, lr}
	int err = -1;

	printk("Initializing...\n");
    2682:	4810      	ldr	r0, [pc, #64]	; (26c4 <main+0x44>)
    2684:	f013 ffb9 	bl	165fa <printk>

	sensors_init();
    2688:	f013 ff75 	bl	16576 <sensors_init>
		/* coverity[OVERRUN] */
		return (ssize_t) arch_syscall_invoke2(*(uintptr_t *)&buffer, *(uintptr_t *)&length, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
    268c:	4c0e      	ldr	r4, [pc, #56]	; (26c8 <main+0x48>)
    268e:	2110      	movs	r1, #16
    2690:	4620      	mov	r0, r4
    2692:	f01b fb39 	bl	1dd08 <z_impl_hwinfo_get_device_id>

	if (IS_ENABLED(CONFIG_HWINFO)) {
		err = hwinfo_get_device_id(dev_uuid, sizeof(dev_uuid));
	}

	if (err < 0) {
    2696:	2800      	cmp	r0, #0
		dev_uuid[0] = 0xdd;
    2698:	bfbe      	ittt	lt
    269a:	23dd      	movlt	r3, #221	; 0xdd
    269c:	7023      	strblt	r3, [r4, #0]
		dev_uuid[1] = 0xdd;
    269e:	7063      	strblt	r3, [r4, #1]
	}

	err = board_init();
    26a0:	f000 f81a 	bl	26d8 <board_init>
	if (err) {
    26a4:	4601      	mov	r1, r0
    26a6:	b110      	cbz	r0, 26ae <main+0x2e>
		printk("Board init failed (err: %d)\n", err);
    26a8:	4808      	ldr	r0, [pc, #32]	; (26cc <main+0x4c>)
    26aa:	f013 ffa6 	bl	165fa <printk>
	}

	/* Initialize the Bluetooth Subsystem */
	err = bt_enable(bt_ready);
    26ae:	4808      	ldr	r0, [pc, #32]	; (26d0 <main+0x50>)
    26b0:	f002 fd30 	bl	5114 <bt_enable>
	if (err) {
    26b4:	4601      	mov	r1, r0
    26b6:	b120      	cbz	r0, 26c2 <main+0x42>
		printk("Bluetooth init failed (err %d)\n", err);
	}
}
    26b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Bluetooth init failed (err %d)\n", err);
    26bc:	4805      	ldr	r0, [pc, #20]	; (26d4 <main+0x54>)
    26be:	f013 bf9c 	b.w	165fa <printk>
}
    26c2:	bd10      	pop	{r4, pc}
    26c4:	0001fe43 	.word	0x0001fe43
    26c8:	20002b18 	.word	0x20002b18
    26cc:	0001fe54 	.word	0x0001fe54
    26d0:	0000236d 	.word	0x0000236d
    26d4:	0001fcd3 	.word	0x0001fcd3

000026d8 <board_init>:

	return 0;
}

int board_init(void)
{
    26d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    26da:	4c21      	ldr	r4, [pc, #132]	; (2760 <board_init+0x88>)
    26dc:	4620      	mov	r0, r4
    26de:	f01b fdd3 	bl	1e288 <z_device_is_ready>
	if (!device_is_ready(led_dev)) {
    26e2:	2800      	cmp	r0, #0
    26e4:	d039      	beq.n	275a <board_init+0x82>
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
    26e6:	6922      	ldr	r2, [r4, #16]
	const struct gpio_driver_api *api =
    26e8:	68a1      	ldr	r1, [r4, #8]
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
    26ea:	6813      	ldr	r3, [r2, #0]
    26ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    26f0:	6013      	str	r3, [r2, #0]
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
	}

	return api->pin_configure(port, pin, flags);
    26f2:	4620      	mov	r0, r4
    26f4:	680b      	ldr	r3, [r1, #0]
    26f6:	f640 2201 	movw	r2, #2561	; 0xa01
    26fa:	2107      	movs	r1, #7
    26fc:	4798      	blx	r3
	if (err) {
    26fe:	4604      	mov	r4, r0
    2700:	bb48      	cbnz	r0, 2756 <board_init+0x7e>
	const struct gpio_driver_api *api =
    2702:	4d18      	ldr	r5, [pc, #96]	; (2764 <board_init+0x8c>)
	struct gpio_driver_data *data =
    2704:	692f      	ldr	r7, [r5, #16]
	const struct gpio_driver_api *api =
    2706:	68ae      	ldr	r6, [r5, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    2708:	683b      	ldr	r3, [r7, #0]
    270a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    270e:	603b      	str	r3, [r7, #0]
	return api->pin_configure(port, pin, flags);
    2710:	f240 1211 	movw	r2, #273	; 0x111
    2714:	6833      	ldr	r3, [r6, #0]
    2716:	210b      	movs	r1, #11
    2718:	4628      	mov	r0, r5
    271a:	4798      	blx	r3
	if (err) {
    271c:	4604      	mov	r4, r0
    271e:	b9d0      	cbnz	r0, 2756 <board_init+0x7e>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    2720:	683b      	ldr	r3, [r7, #0]
	return api->pin_interrupt_configure(port, pin, mode, trig);
    2722:	69b4      	ldr	r4, [r6, #24]
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
    2724:	f413 6f00 	tst.w	r3, #2048	; 0x800
	return api->pin_interrupt_configure(port, pin, mode, trig);
    2728:	bf0c      	ite	eq
    272a:	f44f 2380 	moveq.w	r3, #262144	; 0x40000
    272e:	f44f 3300 	movne.w	r3, #131072	; 0x20000
    2732:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
    2736:	210b      	movs	r1, #11
    2738:	4628      	mov	r0, r5
    273a:	47a0      	blx	r4
	if (err) {
    273c:	4604      	mov	r4, r0
    273e:	b950      	cbnz	r0, 2756 <board_init+0x7e>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    2740:	4909      	ldr	r1, [pc, #36]	; (2768 <board_init+0x90>)
    2742:	4b0a      	ldr	r3, [pc, #40]	; (276c <board_init+0x94>)
    2744:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    2746:	f44f 6300 	mov.w	r3, #2048	; 0x800
    274a:	608b      	str	r3, [r1, #8]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
    274c:	69f3      	ldr	r3, [r6, #28]
    274e:	b113      	cbz	r3, 2756 <board_init+0x7e>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    2750:	2201      	movs	r2, #1
    2752:	4628      	mov	r0, r5
    2754:	4798      	blx	r3
	if (err) {
		return err;
	}

	return button_init();
}
    2756:	4620      	mov	r0, r4
    2758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENODEV;
    275a:	f06f 0412 	mvn.w	r4, #18
    275e:	e7fa      	b.n	2756 <board_init+0x7e>
    2760:	0001eefc 	.word	0x0001eefc
    2764:	0001ee54 	.word	0x0001ee54
    2768:	20001884 	.word	0x20001884
    276c:	0001658d 	.word	0x0001658d

00002770 <board_led_set>:
	const struct gpio_driver_data *const data =
    2770:	4b07      	ldr	r3, [pc, #28]	; (2790 <board_led_set+0x20>)
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    2772:	691a      	ldr	r2, [r3, #16]
    2774:	6812      	ldr	r2, [r2, #0]
    2776:	0612      	lsls	r2, r2, #24
		value = (value != 0) ? 0 : 1;
    2778:	bf48      	it	mi
    277a:	f080 0001 	eormi.w	r0, r0, #1
	if (value != 0)	{
    277e:	b120      	cbz	r0, 278a <board_led_set+0x1a>
	return api->port_set_bits_raw(port, pins);
    2780:	689b      	ldr	r3, [r3, #8]
    2782:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    2784:	4802      	ldr	r0, [pc, #8]	; (2790 <board_led_set+0x20>)
    2786:	2180      	movs	r1, #128	; 0x80
    2788:	4718      	bx	r3
    278a:	689b      	ldr	r3, [r3, #8]
    278c:	691b      	ldr	r3, [r3, #16]
    278e:	e7f9      	b.n	2784 <board_led_set+0x14>
    2790:	0001eefc 	.word	0x0001eefc

00002794 <scu_ccs811_read_voc>:
{
    2794:	b538      	push	{r3, r4, r5, lr}
		rc = sensor_sample_fetch(ccs811_dev);
    2796:	4d18      	ldr	r5, [pc, #96]	; (27f8 <scu_ccs811_read_voc+0x64>)
    2798:	6828      	ldr	r0, [r5, #0]
    279a:	f013 fef8 	bl	1658e <sensor_sample_fetch>
	if (rc == 0) {
    279e:	4601      	mov	r1, r0
    27a0:	b9f8      	cbnz	r0, 27e2 <scu_ccs811_read_voc+0x4e>
		const struct ccs811_result_type *rp = ccs811_result(ccs811_dev);
    27a2:	6828      	ldr	r0, [r5, #0]
    27a4:	f01b f897 	bl	1d8d6 <ccs811_result>
		sensor_channel_get(ccs811_dev, SENSOR_CHAN_VOC, &tvoc);
    27a8:	4a14      	ldr	r2, [pc, #80]	; (27fc <scu_ccs811_read_voc+0x68>)
		const struct ccs811_result_type *rp = ccs811_result(ccs811_dev);
    27aa:	4604      	mov	r4, r0
		sensor_channel_get(ccs811_dev, SENSOR_CHAN_VOC, &tvoc);
    27ac:	211c      	movs	r1, #28
    27ae:	6828      	ldr	r0, [r5, #0]
    27b0:	f013 fef1 	bl	16596 <sensor_channel_get>
		if (app_fw_2 && !(rp->status & CCS811_STATUS_DATA_READY)) {
    27b4:	4b12      	ldr	r3, [pc, #72]	; (2800 <scu_ccs811_read_voc+0x6c>)
    27b6:	781b      	ldrb	r3, [r3, #0]
    27b8:	b12b      	cbz	r3, 27c6 <scu_ccs811_read_voc+0x32>
    27ba:	79a3      	ldrb	r3, [r4, #6]
    27bc:	071a      	lsls	r2, r3, #28
    27be:	d402      	bmi.n	27c6 <scu_ccs811_read_voc+0x32>
			printk("STALE DATA\n");
    27c0:	4810      	ldr	r0, [pc, #64]	; (2804 <scu_ccs811_read_voc+0x70>)
    27c2:	f013 ff1a 	bl	165fa <printk>
		if (rp->status & CCS811_STATUS_ERROR) {
    27c6:	79a3      	ldrb	r3, [r4, #6]
    27c8:	07db      	lsls	r3, r3, #31
    27ca:	d503      	bpl.n	27d4 <scu_ccs811_read_voc+0x40>
			printk("ERROR: %02x\n", rp->error);
    27cc:	79e1      	ldrb	r1, [r4, #7]
    27ce:	480e      	ldr	r0, [pc, #56]	; (2808 <scu_ccs811_read_voc+0x74>)
    27d0:	f013 ff13 	bl	165fa <printk>
		printk("Timed fetch got %d\n", rc);
    27d4:	480d      	ldr	r0, [pc, #52]	; (280c <scu_ccs811_read_voc+0x78>)
    27d6:	2100      	movs	r1, #0
    27d8:	e000      	b.n	27dc <scu_ccs811_read_voc+0x48>
		printk("Timed fetch failed: %d\n", rc);
    27da:	480d      	ldr	r0, [pc, #52]	; (2810 <scu_ccs811_read_voc+0x7c>)
		printk("Timed fetch got %d\n", rc);
    27dc:	f013 ff0d 	bl	165fa <printk>
    27e0:	e005      	b.n	27ee <scu_ccs811_read_voc+0x5a>
	} else if (-EAGAIN == rc) {
    27e2:	f110 0f0b 	cmn.w	r0, #11
    27e6:	d1f8      	bne.n	27da <scu_ccs811_read_voc+0x46>
		printk("Timed fetch got stale data\n");
    27e8:	480a      	ldr	r0, [pc, #40]	; (2814 <scu_ccs811_read_voc+0x80>)
    27ea:	f013 ff06 	bl	165fa <printk>
	return (double) tvoc.val1;
    27ee:	4b03      	ldr	r3, [pc, #12]	; (27fc <scu_ccs811_read_voc+0x68>)
    27f0:	6818      	ldr	r0, [r3, #0]
    27f2:	f7fd fdc7 	bl	384 <__aeabi_i2d>
}
    27f6:	bd38      	pop	{r3, r4, r5, pc}
    27f8:	20001890 	.word	0x20001890
    27fc:	200018c0 	.word	0x200018c0
    2800:	20002b29 	.word	0x20002b29
    2804:	0001feae 	.word	0x0001feae
    2808:	0001feba 	.word	0x0001feba
    280c:	0001fefb 	.word	0x0001fefb
    2810:	0001fee3 	.word	0x0001fee3
    2814:	0001fec7 	.word	0x0001fec7

00002818 <scu_ccs811_read_eco2>:
{
    2818:	b538      	push	{r3, r4, r5, lr}
		rc = sensor_sample_fetch(ccs811_dev);
    281a:	4d18      	ldr	r5, [pc, #96]	; (287c <scu_ccs811_read_eco2+0x64>)
    281c:	6828      	ldr	r0, [r5, #0]
    281e:	f013 feb6 	bl	1658e <sensor_sample_fetch>
	if (rc == 0) {
    2822:	4601      	mov	r1, r0
    2824:	b9f8      	cbnz	r0, 2866 <scu_ccs811_read_eco2+0x4e>
		const struct ccs811_result_type *rp = ccs811_result(ccs811_dev);
    2826:	6828      	ldr	r0, [r5, #0]
    2828:	f01b f855 	bl	1d8d6 <ccs811_result>
		sensor_channel_get(ccs811_dev, SENSOR_CHAN_CO2, &eco2);
    282c:	4a14      	ldr	r2, [pc, #80]	; (2880 <scu_ccs811_read_eco2+0x68>)
		const struct ccs811_result_type *rp = ccs811_result(ccs811_dev);
    282e:	4604      	mov	r4, r0
		sensor_channel_get(ccs811_dev, SENSOR_CHAN_CO2, &eco2);
    2830:	211b      	movs	r1, #27
    2832:	6828      	ldr	r0, [r5, #0]
    2834:	f013 feaf 	bl	16596 <sensor_channel_get>
		if (app_fw_2 && !(rp->status & CCS811_STATUS_DATA_READY)) {
    2838:	4b12      	ldr	r3, [pc, #72]	; (2884 <scu_ccs811_read_eco2+0x6c>)
    283a:	781b      	ldrb	r3, [r3, #0]
    283c:	b12b      	cbz	r3, 284a <scu_ccs811_read_eco2+0x32>
    283e:	79a3      	ldrb	r3, [r4, #6]
    2840:	071a      	lsls	r2, r3, #28
    2842:	d402      	bmi.n	284a <scu_ccs811_read_eco2+0x32>
			printk("STALE DATA\n");
    2844:	4810      	ldr	r0, [pc, #64]	; (2888 <scu_ccs811_read_eco2+0x70>)
    2846:	f013 fed8 	bl	165fa <printk>
		if (rp->status & CCS811_STATUS_ERROR) {
    284a:	79a3      	ldrb	r3, [r4, #6]
    284c:	07db      	lsls	r3, r3, #31
    284e:	d503      	bpl.n	2858 <scu_ccs811_read_eco2+0x40>
			printk("ERROR: %02x\n", rp->error);
    2850:	79e1      	ldrb	r1, [r4, #7]
    2852:	480e      	ldr	r0, [pc, #56]	; (288c <scu_ccs811_read_eco2+0x74>)
    2854:	f013 fed1 	bl	165fa <printk>
		printk("Timed fetch got %d\n", rc);
    2858:	480d      	ldr	r0, [pc, #52]	; (2890 <scu_ccs811_read_eco2+0x78>)
    285a:	2100      	movs	r1, #0
    285c:	e000      	b.n	2860 <scu_ccs811_read_eco2+0x48>
		printk("Timed fetch failed: %d\n", rc);
    285e:	480d      	ldr	r0, [pc, #52]	; (2894 <scu_ccs811_read_eco2+0x7c>)
		printk("Timed fetch got %d\n", rc);
    2860:	f013 fecb 	bl	165fa <printk>
    2864:	e005      	b.n	2872 <scu_ccs811_read_eco2+0x5a>
	} else if (-EAGAIN == rc) {
    2866:	f110 0f0b 	cmn.w	r0, #11
    286a:	d1f8      	bne.n	285e <scu_ccs811_read_eco2+0x46>
		printk("Timed fetch got stale data\n");
    286c:	480a      	ldr	r0, [pc, #40]	; (2898 <scu_ccs811_read_eco2+0x80>)
    286e:	f013 fec4 	bl	165fa <printk>
	return (double) eco2.val1;
    2872:	4b03      	ldr	r3, [pc, #12]	; (2880 <scu_ccs811_read_eco2+0x68>)
    2874:	6818      	ldr	r0, [r3, #0]
    2876:	f7fd fd85 	bl	384 <__aeabi_i2d>
}
    287a:	bd38      	pop	{r3, r4, r5, pc}
    287c:	20001890 	.word	0x20001890
    2880:	20001894 	.word	0x20001894
    2884:	20002b29 	.word	0x20002b29
    2888:	0001feae 	.word	0x0001feae
    288c:	0001feba 	.word	0x0001feba
    2890:	0001fefb 	.word	0x0001fefb
    2894:	0001fee3 	.word	0x0001fee3
    2898:	0001fec7 	.word	0x0001fec7

0000289c <scu_ccs811_init>:
{
    289c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    289e:	4818      	ldr	r0, [pc, #96]	; (2900 <scu_ccs811_init+0x64>)
	ccs811_dev = device_get_binding(DT_LABEL(DT_INST(0, ams_ccs811)));
    28a0:	4c18      	ldr	r4, [pc, #96]	; (2904 <scu_ccs811_init+0x68>)
    28a2:	f012 fcaf 	bl	15204 <z_impl_device_get_binding>
    28a6:	4601      	mov	r1, r0
    28a8:	6020      	str	r0, [r4, #0]
	if (!ccs811_dev) {
    28aa:	b938      	cbnz	r0, 28bc <scu_ccs811_init+0x20>
		printk("Failed to get device binding");
    28ac:	4816      	ldr	r0, [pc, #88]	; (2908 <scu_ccs811_init+0x6c>)
    28ae:	f013 fea4 	bl	165fa <printk>
		return -1;
    28b2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
    28b6:	4620      	mov	r0, r4
    28b8:	b004      	add	sp, #16
    28ba:	bd10      	pop	{r4, pc}
	printk("device is %p, name is %s\n", ccs811_dev, ccs811_dev->name);
    28bc:	6802      	ldr	r2, [r0, #0]
    28be:	4813      	ldr	r0, [pc, #76]	; (290c <scu_ccs811_init+0x70>)
    28c0:	f013 fe9b 	bl	165fa <printk>
	rc = ccs811_configver_fetch(ccs811_dev, &cfgver);
    28c4:	6820      	ldr	r0, [r4, #0]
    28c6:	a902      	add	r1, sp, #8
    28c8:	f01b f808 	bl	1d8dc <ccs811_configver_fetch>
	if (rc == 0) {
    28cc:	4604      	mov	r4, r0
    28ce:	b9a8      	cbnz	r0, 28fc <scu_ccs811_init+0x60>
		printk("HW %02x; FW Boot %04x App %04x ; mode %02x\n",
    28d0:	f89d 300d 	ldrb.w	r3, [sp, #13]
    28d4:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    28d8:	9300      	str	r3, [sp, #0]
    28da:	f89d 100c 	ldrb.w	r1, [sp, #12]
    28de:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    28e2:	480b      	ldr	r0, [pc, #44]	; (2910 <scu_ccs811_init+0x74>)
    28e4:	f013 fe89 	bl	165fa <printk>
		app_fw_2 = (cfgver.fw_app_version >> 8) > 0x11;
    28e8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    28ec:	4a09      	ldr	r2, [pc, #36]	; (2914 <scu_ccs811_init+0x78>)
    28ee:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
    28f2:	bf34      	ite	cc
    28f4:	2300      	movcc	r3, #0
    28f6:	2301      	movcs	r3, #1
    28f8:	7013      	strb	r3, [r2, #0]
    28fa:	e7dc      	b.n	28b6 <scu_ccs811_init+0x1a>
    return 0;
    28fc:	2400      	movs	r4, #0
    28fe:	e7da      	b.n	28b6 <scu_ccs811_init+0x1a>
    2900:	0001ff0f 	.word	0x0001ff0f
    2904:	20001890 	.word	0x20001890
    2908:	0001ff16 	.word	0x0001ff16
    290c:	0001ff33 	.word	0x0001ff33
    2910:	0001ff4d 	.word	0x0001ff4d
    2914:	20002b29 	.word	0x20002b29

00002918 <scu_hts221_init>:
{
    2918:	b508      	push	{r3, lr}
    291a:	4807      	ldr	r0, [pc, #28]	; (2938 <scu_hts221_init+0x20>)
    291c:	f012 fc72 	bl	15204 <z_impl_device_get_binding>
    hts221_dev = device_get_binding("HTS221");
    2920:	4b06      	ldr	r3, [pc, #24]	; (293c <scu_hts221_init+0x24>)
    2922:	6018      	str	r0, [r3, #0]
	if (hts221_dev == NULL) {
    2924:	b928      	cbnz	r0, 2932 <scu_hts221_init+0x1a>
		printf("Could not get HTS221 device\n");
    2926:	4806      	ldr	r0, [pc, #24]	; (2940 <scu_hts221_init+0x28>)
    2928:	f001 fcea 	bl	4300 <printf>
		return -1;
    292c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    2930:	bd08      	pop	{r3, pc}
    return 0;
    2932:	2000      	movs	r0, #0
    2934:	e7fc      	b.n	2930 <scu_hts221_init+0x18>
    2936:	bf00      	nop
    2938:	00020005 	.word	0x00020005
    293c:	2000189c 	.word	0x2000189c
    2940:	0002000c 	.word	0x0002000c

00002944 <scu_lis2dh_init>:
{
    2944:	b510      	push	{r4, lr}
	lis2dh_dev = DEVICE_DT_GET_ANY(st_lis2dh);
    2946:	4c08      	ldr	r4, [pc, #32]	; (2968 <scu_lis2dh_init+0x24>)
    2948:	4808      	ldr	r0, [pc, #32]	; (296c <scu_lis2dh_init+0x28>)
    294a:	6020      	str	r0, [r4, #0]
    294c:	f01b fc9c 	bl	1e288 <z_device_is_ready>
	if (!device_is_ready(lis2dh_dev)) {
    2950:	b938      	cbnz	r0, 2962 <scu_lis2dh_init+0x1e>
		printf("Device %s is not ready\n", lis2dh_dev->name);
    2952:	6823      	ldr	r3, [r4, #0]
    2954:	4806      	ldr	r0, [pc, #24]	; (2970 <scu_lis2dh_init+0x2c>)
    2956:	6819      	ldr	r1, [r3, #0]
    2958:	f001 fcd2 	bl	4300 <printf>
		return -1;
    295c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    2960:	bd10      	pop	{r4, pc}
    return 0;
    2962:	2000      	movs	r0, #0
    2964:	e7fc      	b.n	2960 <scu_lis2dh_init+0x1c>
    2966:	bf00      	nop
    2968:	200018a8 	.word	0x200018a8
    296c:	0001efd4 	.word	0x0001efd4
    2970:	00020029 	.word	0x00020029

00002974 <scu_lps22hb_init>:
 * @brief  Initilise LPS22HB sensor
 * 
 * @return error status
**/
int scu_lps22hb_init(void)
{
    2974:	b508      	push	{r3, lr}
    2976:	4807      	ldr	r0, [pc, #28]	; (2994 <scu_lps22hb_init+0x20>)
    2978:	f012 fc44 	bl	15204 <z_impl_device_get_binding>
	lps22hb_dev = device_get_binding(DT_LABEL(DT_INST(0, st_lps22hb_press)));
    297c:	4b06      	ldr	r3, [pc, #24]	; (2998 <scu_lps22hb_init+0x24>)
    297e:	6018      	str	r0, [r3, #0]

	if (lps22hb_dev == NULL) {
    2980:	b928      	cbnz	r0, 298e <scu_lps22hb_init+0x1a>
		printf("Could not get LPS22HB device\n");
    2982:	4806      	ldr	r0, [pc, #24]	; (299c <scu_lps22hb_init+0x28>)
    2984:	f001 fcbc 	bl	4300 <printf>
		return -1;
    2988:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

    return 0;
    298c:	bd08      	pop	{r3, pc}
    return 0;
    298e:	2000      	movs	r0, #0
    2990:	e7fc      	b.n	298c <scu_lps22hb_init+0x18>
    2992:	bf00      	nop
    2994:	00020088 	.word	0x00020088
    2998:	200018ac 	.word	0x200018ac
    299c:	00020090 	.word	0x00020090

000029a0 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    29a0:	680b      	ldr	r3, [r1, #0]
    29a2:	3301      	adds	r3, #1
    29a4:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    29a6:	4b01      	ldr	r3, [pc, #4]	; (29ac <char_out+0xc>)
    29a8:	681b      	ldr	r3, [r3, #0]
    29aa:	4718      	bx	r3
    29ac:	2000025c 	.word	0x2000025c

000029b0 <__printk_hook_install>:
	_char_out = fn;
    29b0:	4b01      	ldr	r3, [pc, #4]	; (29b8 <__printk_hook_install+0x8>)
    29b2:	6018      	str	r0, [r3, #0]
}
    29b4:	4770      	bx	lr
    29b6:	bf00      	nop
    29b8:	2000025c 	.word	0x2000025c

000029bc <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
    29bc:	b507      	push	{r0, r1, r2, lr}
    29be:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
    29c0:	2100      	movs	r1, #0
{
    29c2:	4602      	mov	r2, r0
		struct out_context ctx = { 0 };
    29c4:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
    29c6:	4803      	ldr	r0, [pc, #12]	; (29d4 <vprintk+0x18>)
    29c8:	a901      	add	r1, sp, #4
    29ca:	f000 f8e5 	bl	2b98 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    29ce:	b003      	add	sp, #12
    29d0:	f85d fb04 	ldr.w	pc, [sp], #4
    29d4:	000029a1 	.word	0x000029a1

000029d8 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    29d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    29dc:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    29e0:	f019 0808 	ands.w	r8, r9, #8
{
    29e4:	4604      	mov	r4, r0
    29e6:	4693      	mov	fp, r2
	if (processing) {
    29e8:	d00d      	beq.n	2a06 <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
    29ea:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    29ec:	bf0c      	ite	eq
    29ee:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    29f2:	f049 0920 	orrne.w	r9, r9, #32
    29f6:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    29fa:	f38b 8811 	msr	BASEPRI, fp
    29fe:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    2a02:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    2a06:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    2a0a:	2902      	cmp	r1, #2
    2a0c:	d107      	bne.n	2a1e <process_event+0x46>
			evt = process_recheck(mgr);
    2a0e:	4620      	mov	r0, r4
    2a10:	f013 fe00 	bl	16614 <process_recheck>
		if (evt == EVT_NOP) {
    2a14:	2800      	cmp	r0, #0
    2a16:	d0f0      	beq.n	29fa <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    2a18:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2a1a:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
    2a1c:	d14e      	bne.n	2abc <process_event+0xe4>
			res = mgr->last_res;
    2a1e:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    2a20:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    2a22:	2f00      	cmp	r7, #0
    2a24:	da15      	bge.n	2a52 <process_event+0x7a>
		*clients = mgr->clients;
    2a26:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2a28:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    2a2c:	e9c4 8800 	strd	r8, r8, [r4]
    2a30:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    2a34:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    2a36:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    2a38:	8b21      	ldrh	r1, [r4, #24]
    2a3a:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    2a3e:	45ca      	cmp	sl, r9
    2a40:	d002      	beq.n	2a48 <process_event+0x70>
		if (do_monitors
    2a42:	68a3      	ldr	r3, [r4, #8]
    2a44:	2b00      	cmp	r3, #0
    2a46:	d15a      	bne.n	2afe <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
    2a48:	b90d      	cbnz	r5, 2a4e <process_event+0x76>
		    || (transit != NULL)) {
    2a4a:	2e00      	cmp	r6, #0
    2a4c:	d071      	beq.n	2b32 <process_event+0x15a>
    2a4e:	2300      	movs	r3, #0
    2a50:	e056      	b.n	2b00 <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    2a52:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    2a56:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    2a58:	2a01      	cmp	r2, #1
    2a5a:	d81e      	bhi.n	2a9a <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2a5c:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    2a60:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    2a62:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2a64:	b289      	uxth	r1, r1
    2a66:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    2a6a:	d10a      	bne.n	2a82 <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    2a6c:	b13d      	cbz	r5, 2a7e <process_event+0xa6>
    2a6e:	8b63      	ldrh	r3, [r4, #26]
    2a70:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    2a72:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
    2a74:	3301      	adds	r3, #1
    2a76:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    2a78:	2a00      	cmp	r2, #0
    2a7a:	d1fa      	bne.n	2a72 <process_event+0x9a>
    2a7c:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2a7e:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    2a82:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    2a84:	4620      	mov	r0, r4
    2a86:	f013 fdc5 	bl	16614 <process_recheck>
    2a8a:	4606      	mov	r6, r0
    2a8c:	2800      	cmp	r0, #0
    2a8e:	d0d3      	beq.n	2a38 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    2a90:	8b23      	ldrh	r3, [r4, #24]
    2a92:	f043 0320 	orr.w	r3, r3, #32
    2a96:	8323      	strh	r3, [r4, #24]
    2a98:	e7cd      	b.n	2a36 <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
    2a9a:	2b04      	cmp	r3, #4
    2a9c:	d10c      	bne.n	2ab8 <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2a9e:	f021 0107 	bic.w	r1, r1, #7
    2aa2:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    2aa4:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    2aa6:	4620      	mov	r0, r4
    2aa8:	f013 fdb4 	bl	16614 <process_recheck>
    2aac:	4605      	mov	r5, r0
    2aae:	2800      	cmp	r0, #0
    2ab0:	d0c1      	beq.n	2a36 <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    2ab2:	f041 0120 	orr.w	r1, r1, #32
    2ab6:	8321      	strh	r1, [r4, #24]
    2ab8:	2500      	movs	r5, #0
    2aba:	e7bc      	b.n	2a36 <process_event+0x5e>
		} else if (evt == EVT_START) {
    2abc:	2803      	cmp	r0, #3
    2abe:	d109      	bne.n	2ad4 <process_event+0xfc>
			transit = mgr->transitions->start;
    2ac0:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2ac2:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    2ac6:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2ac8:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    2acc:	8323      	strh	r3, [r4, #24]
}
    2ace:	2500      	movs	r5, #0
		res = 0;
    2ad0:	462f      	mov	r7, r5
    2ad2:	e7b1      	b.n	2a38 <process_event+0x60>
		} else if (evt == EVT_STOP) {
    2ad4:	2804      	cmp	r0, #4
    2ad6:	d106      	bne.n	2ae6 <process_event+0x10e>
			transit = mgr->transitions->stop;
    2ad8:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2ada:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    2ade:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2ae0:	f043 0304 	orr.w	r3, r3, #4
    2ae4:	e7f2      	b.n	2acc <process_event+0xf4>
		} else if (evt == EVT_RESET) {
    2ae6:	2805      	cmp	r0, #5
    2ae8:	d106      	bne.n	2af8 <process_event+0x120>
			transit = mgr->transitions->reset;
    2aea:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2aec:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    2af0:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2af2:	f043 0305 	orr.w	r3, r3, #5
    2af6:	e7e9      	b.n	2acc <process_event+0xf4>
    2af8:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    2afa:	462e      	mov	r6, r5
    2afc:	e7e8      	b.n	2ad0 <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
    2afe:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    2b00:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    2b04:	8321      	strh	r1, [r4, #24]
    2b06:	f38b 8811 	msr	BASEPRI, fp
    2b0a:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    2b0e:	b9fb      	cbnz	r3, 2b50 <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
    2b10:	bb85      	cbnz	r5, 2b74 <process_event+0x19c>
			if (transit != NULL) {
    2b12:	b116      	cbz	r6, 2b1a <process_event+0x142>
				transit(mgr, transition_complete);
    2b14:	491f      	ldr	r1, [pc, #124]	; (2b94 <process_event+0x1bc>)
    2b16:	4620      	mov	r0, r4
    2b18:	47b0      	blx	r6
	__asm__ volatile(
    2b1a:	f04f 0320 	mov.w	r3, #32
    2b1e:	f3ef 8b11 	mrs	fp, BASEPRI
    2b22:	f383 8812 	msr	BASEPRI_MAX, r3
    2b26:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    2b2a:	8b23      	ldrh	r3, [r4, #24]
    2b2c:	f023 0308 	bic.w	r3, r3, #8
    2b30:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    2b32:	8b23      	ldrh	r3, [r4, #24]
    2b34:	06da      	lsls	r2, r3, #27
    2b36:	d525      	bpl.n	2b84 <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    2b38:	f023 0310 	bic.w	r3, r3, #16
    2b3c:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    2b3e:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    2b40:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    2b44:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    2b48:	2900      	cmp	r1, #0
    2b4a:	f47f af5e 	bne.w	2a0a <process_event+0x32>
out:
    2b4e:	e754      	b.n	29fa <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    2b50:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    2b52:	2900      	cmp	r1, #0
    2b54:	d0dc      	beq.n	2b10 <process_event+0x138>
	return node->next;
    2b56:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
    2b5a:	f8d1 b004 	ldr.w	fp, [r1, #4]
    2b5e:	463b      	mov	r3, r7
    2b60:	4652      	mov	r2, sl
    2b62:	4620      	mov	r0, r4
    2b64:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    2b66:	f1b9 0f00 	cmp.w	r9, #0
    2b6a:	d0d1      	beq.n	2b10 <process_event+0x138>
    2b6c:	4649      	mov	r1, r9
    2b6e:	f8d9 9000 	ldr.w	r9, [r9]
    2b72:	e7f2      	b.n	2b5a <process_event+0x182>
    2b74:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    2b76:	463b      	mov	r3, r7
    2b78:	4652      	mov	r2, sl
    2b7a:	4620      	mov	r0, r4
    2b7c:	682d      	ldr	r5, [r5, #0]
    2b7e:	f013 fd65 	bl	1664c <notify_one>
    2b82:	e7c5      	b.n	2b10 <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    2b84:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    2b88:	bf1e      	ittt	ne
    2b8a:	f023 0320 	bicne.w	r3, r3, #32
    2b8e:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    2b90:	2102      	movne	r1, #2
    2b92:	e7d5      	b.n	2b40 <process_event+0x168>
    2b94:	00016679 	.word	0x00016679

00002b98 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    2b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2b9c:	4681      	mov	r9, r0
    2b9e:	b09b      	sub	sp, #108	; 0x6c
    2ba0:	468a      	mov	sl, r1
    2ba2:	4615      	mov	r5, r2
    2ba4:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    2ba6:	2600      	movs	r6, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    2ba8:	7828      	ldrb	r0, [r5, #0]
    2baa:	b910      	cbnz	r0, 2bb2 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    2bac:	4630      	mov	r0, r6
    2bae:	f000 bdee 	b.w	378e <cbvprintf+0xbf6>
			OUTC(*fp++);
    2bb2:	1c6b      	adds	r3, r5, #1
		if (*fp != '%') {
    2bb4:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    2bb6:	9302      	str	r3, [sp, #8]
		if (*fp != '%') {
    2bb8:	d006      	beq.n	2bc8 <cbvprintf+0x30>
			OUTC(*fp++);
    2bba:	4651      	mov	r1, sl
			OUTC('%');
    2bbc:	47c8      	blx	r9
    2bbe:	2800      	cmp	r0, #0
    2bc0:	f2c0 85e5 	blt.w	378e <cbvprintf+0xbf6>
    2bc4:	3601      	adds	r6, #1
		if (bps == NULL) {
    2bc6:	e24c      	b.n	3062 <cbvprintf+0x4ca>
		} state = {
    2bc8:	2218      	movs	r2, #24
    2bca:	2100      	movs	r1, #0
    2bcc:	a80c      	add	r0, sp, #48	; 0x30
    2bce:	f014 fb4c 	bl	1726a <memset>
	if (*sp == '%') {
    2bd2:	786b      	ldrb	r3, [r5, #1]
    2bd4:	2b25      	cmp	r3, #37	; 0x25
    2bd6:	d07c      	beq.n	2cd2 <cbvprintf+0x13a>
    2bd8:	2200      	movs	r2, #0
    2bda:	1c68      	adds	r0, r5, #1
    2bdc:	4696      	mov	lr, r2
    2bde:	4690      	mov	r8, r2
    2be0:	4694      	mov	ip, r2
    2be2:	4617      	mov	r7, r2
    2be4:	4601      	mov	r1, r0
		switch (*sp) {
    2be6:	f810 3b01 	ldrb.w	r3, [r0], #1
    2bea:	2b2b      	cmp	r3, #43	; 0x2b
    2bec:	f000 80a0 	beq.w	2d30 <cbvprintf+0x198>
    2bf0:	f200 8097 	bhi.w	2d22 <cbvprintf+0x18a>
    2bf4:	2b20      	cmp	r3, #32
    2bf6:	f000 809e 	beq.w	2d36 <cbvprintf+0x19e>
    2bfa:	2b23      	cmp	r3, #35	; 0x23
    2bfc:	f000 809e 	beq.w	2d3c <cbvprintf+0x1a4>
    2c00:	b12f      	cbz	r7, 2c0e <cbvprintf+0x76>
    2c02:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    2c06:	f040 0004 	orr.w	r0, r0, #4
    2c0a:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
    2c0e:	f1bc 0f00 	cmp.w	ip, #0
    2c12:	d005      	beq.n	2c20 <cbvprintf+0x88>
    2c14:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    2c18:	f040 0008 	orr.w	r0, r0, #8
    2c1c:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
    2c20:	f1b8 0f00 	cmp.w	r8, #0
    2c24:	d005      	beq.n	2c32 <cbvprintf+0x9a>
    2c26:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    2c2a:	f040 0010 	orr.w	r0, r0, #16
    2c2e:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
    2c32:	f1be 0f00 	cmp.w	lr, #0
    2c36:	d005      	beq.n	2c44 <cbvprintf+0xac>
    2c38:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    2c3c:	f040 0020 	orr.w	r0, r0, #32
    2c40:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
    2c44:	b12a      	cbz	r2, 2c52 <cbvprintf+0xba>
    2c46:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    2c4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    2c4e:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	if (conv->flag_zero && conv->flag_dash) {
    2c52:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    2c56:	f002 0044 	and.w	r0, r2, #68	; 0x44
    2c5a:	2844      	cmp	r0, #68	; 0x44
    2c5c:	d103      	bne.n	2c66 <cbvprintf+0xce>
		conv->flag_zero = false;
    2c5e:	f36f 1286 	bfc	r2, #6, #1
    2c62:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	conv->width_present = true;
    2c66:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
	if (*sp == '*') {
    2c6a:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
    2c6c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    2c70:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	if (*sp == '*') {
    2c74:	d17e      	bne.n	2d74 <cbvprintf+0x1dc>
		conv->width_star = true;
    2c76:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    2c7a:	f042 0201 	orr.w	r2, r2, #1
			++sp;
    2c7e:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    2c80:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	conv->prec_present = (*sp == '.');
    2c84:	781a      	ldrb	r2, [r3, #0]
    2c86:	2a2e      	cmp	r2, #46	; 0x2e
    2c88:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    2c8c:	bf0c      	ite	eq
    2c8e:	2101      	moveq	r1, #1
    2c90:	2100      	movne	r1, #0
    2c92:	f361 0241 	bfi	r2, r1, #1, #1
    2c96:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	if (!conv->prec_present) {
    2c9a:	d177      	bne.n	2d8c <cbvprintf+0x1f4>
	if (*sp == '*') {
    2c9c:	785a      	ldrb	r2, [r3, #1]
    2c9e:	2a2a      	cmp	r2, #42	; 0x2a
    2ca0:	d06d      	beq.n	2d7e <cbvprintf+0x1e6>
	++sp;
    2ca2:	3301      	adds	r3, #1
	size_t val = 0;
    2ca4:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    2ca6:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    2caa:	4618      	mov	r0, r3
    2cac:	f810 2b01 	ldrb.w	r2, [r0], #1
    2cb0:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    2cb4:	2f09      	cmp	r7, #9
    2cb6:	f240 80ab 	bls.w	2e10 <cbvprintf+0x278>
	conv->unsupported |= ((conv->prec_value < 0)
    2cba:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
	conv->prec_value = prec;
    2cbe:	9110      	str	r1, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
    2cc0:	f3c2 0040 	ubfx	r0, r2, #1, #1
    2cc4:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    2cc8:	f361 0241 	bfi	r2, r1, #1, #1
    2ccc:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
    2cd0:	e05c      	b.n	2d8c <cbvprintf+0x1f4>
		conv->specifier = *sp++;
    2cd2:	1caa      	adds	r2, r5, #2
    2cd4:	9202      	str	r2, [sp, #8]
    2cd6:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
    2cda:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    2cde:	07df      	lsls	r7, r3, #31
    2ce0:	f140 8173 	bpl.w	2fca <cbvprintf+0x432>
			width = va_arg(ap, int);
    2ce4:	f854 bb04 	ldr.w	fp, [r4], #4
			if (width < 0) {
    2ce8:	f1bb 0f00 	cmp.w	fp, #0
    2cec:	da07      	bge.n	2cfe <cbvprintf+0x166>
				conv->flag_dash = true;
    2cee:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    2cf2:	f042 0204 	orr.w	r2, r2, #4
    2cf6:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				width = -width;
    2cfa:	f1cb 0b00 	rsb	fp, fp, #0
		if (conv->prec_star) {
    2cfe:	0758      	lsls	r0, r3, #29
    2d00:	f140 816c 	bpl.w	2fdc <cbvprintf+0x444>
			int arg = va_arg(ap, int);
    2d04:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    2d08:	f1b8 0f00 	cmp.w	r8, #0
    2d0c:	f280 816b 	bge.w	2fe6 <cbvprintf+0x44e>
				conv->prec_present = false;
    2d10:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    2d14:	f36f 0341 	bfc	r3, #1, #1
    2d18:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
    2d1c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    2d20:	e161      	b.n	2fe6 <cbvprintf+0x44e>
		switch (*sp) {
    2d22:	2b2d      	cmp	r3, #45	; 0x2d
    2d24:	d00d      	beq.n	2d42 <cbvprintf+0x1aa>
    2d26:	2b30      	cmp	r3, #48	; 0x30
    2d28:	f47f af6a 	bne.w	2c00 <cbvprintf+0x68>
			conv->flag_zero = true;
    2d2c:	2201      	movs	r2, #1
	} while (loop);
    2d2e:	e759      	b.n	2be4 <cbvprintf+0x4c>
			conv->flag_plus = true;
    2d30:	f04f 0c01 	mov.w	ip, #1
    2d34:	e756      	b.n	2be4 <cbvprintf+0x4c>
			conv->flag_space = true;
    2d36:	f04f 0801 	mov.w	r8, #1
    2d3a:	e753      	b.n	2be4 <cbvprintf+0x4c>
			conv->flag_hash = true;
    2d3c:	f04f 0e01 	mov.w	lr, #1
    2d40:	e750      	b.n	2be4 <cbvprintf+0x4c>
		switch (*sp) {
    2d42:	2701      	movs	r7, #1
    2d44:	e74e      	b.n	2be4 <cbvprintf+0x4c>
		val = 10U * val + *sp++ - '0';
    2d46:	fb0c 7202 	mla	r2, ip, r2, r7
    2d4a:	3a30      	subs	r2, #48	; 0x30
    2d4c:	4603      	mov	r3, r0
    2d4e:	4618      	mov	r0, r3
    2d50:	f810 7b01 	ldrb.w	r7, [r0], #1
    2d54:	f1a7 0e30 	sub.w	lr, r7, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    2d58:	f1be 0f09 	cmp.w	lr, #9
    2d5c:	d9f3      	bls.n	2d46 <cbvprintf+0x1ae>
	if (sp != wp) {
    2d5e:	4299      	cmp	r1, r3
    2d60:	d090      	beq.n	2c84 <cbvprintf+0xec>
		conv->unsupported |= ((conv->width_value < 0)
    2d62:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		conv->width_value = width;
    2d66:	920f      	str	r2, [sp, #60]	; 0x3c
				      || (width != (size_t)conv->width_value));
    2d68:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    2d6a:	f362 0141 	bfi	r1, r2, #1, #1
    2d6e:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
    2d72:	e787      	b.n	2c84 <cbvprintf+0xec>
    2d74:	460b      	mov	r3, r1
	size_t val = 0;
    2d76:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    2d78:	f04f 0c0a 	mov.w	ip, #10
    2d7c:	e7e7      	b.n	2d4e <cbvprintf+0x1b6>
		conv->prec_star = true;
    2d7e:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    2d82:	f042 0204 	orr.w	r2, r2, #4
    2d86:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		return ++sp;
    2d8a:	3302      	adds	r3, #2
	switch (*sp) {
    2d8c:	4619      	mov	r1, r3
    2d8e:	f811 2b01 	ldrb.w	r2, [r1], #1
    2d92:	2a6c      	cmp	r2, #108	; 0x6c
    2d94:	d05c      	beq.n	2e50 <cbvprintf+0x2b8>
    2d96:	d840      	bhi.n	2e1a <cbvprintf+0x282>
    2d98:	2a68      	cmp	r2, #104	; 0x68
    2d9a:	d046      	beq.n	2e2a <cbvprintf+0x292>
    2d9c:	2a6a      	cmp	r2, #106	; 0x6a
    2d9e:	d061      	beq.n	2e64 <cbvprintf+0x2cc>
    2da0:	2a4c      	cmp	r2, #76	; 0x4c
    2da2:	d067      	beq.n	2e74 <cbvprintf+0x2dc>
    2da4:	4619      	mov	r1, r3
	conv->specifier = *sp++;
    2da6:	460b      	mov	r3, r1
    2da8:	f813 2b01 	ldrb.w	r2, [r3], #1
    2dac:	9302      	str	r3, [sp, #8]
	switch (conv->specifier) {
    2dae:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
    2db0:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	switch (conv->specifier) {
    2db4:	f200 80df 	bhi.w	2f76 <cbvprintf+0x3de>
    2db8:	2a57      	cmp	r2, #87	; 0x57
    2dba:	d868      	bhi.n	2e8e <cbvprintf+0x2f6>
    2dbc:	2a41      	cmp	r2, #65	; 0x41
    2dbe:	d004      	beq.n	2dca <cbvprintf+0x232>
    2dc0:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
    2dc4:	2b02      	cmp	r3, #2
    2dc6:	f200 80d6 	bhi.w	2f76 <cbvprintf+0x3de>
		conv->specifier_cat = SPECIFIER_FP;
    2dca:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
			|| (conv->specifier == 'A');
    2dce:	f002 02df 	and.w	r2, r2, #223	; 0xdf
		conv->specifier_cat = SPECIFIER_FP;
    2dd2:	2104      	movs	r1, #4
			|| (conv->specifier == 'A');
    2dd4:	f1a2 0841 	sub.w	r8, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
    2dd8:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
    2ddc:	f1d8 0200 	rsbs	r2, r8, #0
		conv->specifier_a = (conv->specifier == 'a')
    2de0:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
		conv->specifier_cat = SPECIFIER_FP;
    2de4:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			|| (conv->specifier == 'A');
    2de8:	eb42 0208 	adc.w	r2, r2, r8
		conv->specifier_a = (conv->specifier == 'a')
    2dec:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
    2df0:	060a      	lsls	r2, r1, #24
		conv->specifier_a = (conv->specifier == 'a')
    2df2:	f88d 1039 	strb.w	r1, [sp, #57]	; 0x39
		if (conv->specifier_a
    2df6:	b2cb      	uxtb	r3, r1
    2df8:	f100 80e5 	bmi.w	2fc6 <cbvprintf+0x42e>
		if (conv->length_mod == LENGTH_L) {
    2dfc:	f003 0278 	and.w	r2, r3, #120	; 0x78
    2e00:	2a18      	cmp	r2, #24
    2e02:	f040 80b5 	bne.w	2f70 <cbvprintf+0x3d8>
			conv->length_mod = LENGTH_NONE;
    2e06:	f36f 03c6 	bfc	r3, #3, #4
    2e0a:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    2e0e:	e09c      	b.n	2f4a <cbvprintf+0x3b2>
		val = 10U * val + *sp++ - '0';
    2e10:	fb0c 2101 	mla	r1, ip, r1, r2
    2e14:	3930      	subs	r1, #48	; 0x30
    2e16:	4603      	mov	r3, r0
    2e18:	e747      	b.n	2caa <cbvprintf+0x112>
	switch (*sp) {
    2e1a:	2a74      	cmp	r2, #116	; 0x74
    2e1c:	d026      	beq.n	2e6c <cbvprintf+0x2d4>
    2e1e:	2a7a      	cmp	r2, #122	; 0x7a
    2e20:	d1c0      	bne.n	2da4 <cbvprintf+0x20c>
		conv->length_mod = LENGTH_Z;
    2e22:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    2e26:	2206      	movs	r2, #6
    2e28:	e00d      	b.n	2e46 <cbvprintf+0x2ae>
		if (*++sp == 'h') {
    2e2a:	785a      	ldrb	r2, [r3, #1]
    2e2c:	2a68      	cmp	r2, #104	; 0x68
    2e2e:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    2e32:	d106      	bne.n	2e42 <cbvprintf+0x2aa>
			conv->length_mod = LENGTH_HH;
    2e34:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    2e36:	f361 02c6 	bfi	r2, r1, #3, #4
    2e3a:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			++sp;
    2e3e:	1c99      	adds	r1, r3, #2
    2e40:	e7b1      	b.n	2da6 <cbvprintf+0x20e>
			conv->length_mod = LENGTH_H;
    2e42:	4613      	mov	r3, r2
    2e44:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    2e46:	f362 03c6 	bfi	r3, r2, #3, #4
    2e4a:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		break;
    2e4e:	e7aa      	b.n	2da6 <cbvprintf+0x20e>
		if (*++sp == 'l') {
    2e50:	785a      	ldrb	r2, [r3, #1]
    2e52:	2a6c      	cmp	r2, #108	; 0x6c
    2e54:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    2e58:	d101      	bne.n	2e5e <cbvprintf+0x2c6>
			conv->length_mod = LENGTH_LL;
    2e5a:	2104      	movs	r1, #4
    2e5c:	e7eb      	b.n	2e36 <cbvprintf+0x29e>
			conv->length_mod = LENGTH_L;
    2e5e:	4613      	mov	r3, r2
    2e60:	2203      	movs	r2, #3
    2e62:	e7f0      	b.n	2e46 <cbvprintf+0x2ae>
		conv->length_mod = LENGTH_J;
    2e64:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    2e68:	2205      	movs	r2, #5
    2e6a:	e7ec      	b.n	2e46 <cbvprintf+0x2ae>
		conv->length_mod = LENGTH_T;
    2e6c:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    2e70:	2207      	movs	r2, #7
    2e72:	e7e8      	b.n	2e46 <cbvprintf+0x2ae>
		conv->unsupported = true;
    2e74:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    2e78:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    2e7c:	f023 0302 	bic.w	r3, r3, #2
    2e80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    2e84:	f043 0302 	orr.w	r3, r3, #2
    2e88:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
    2e8c:	e78b      	b.n	2da6 <cbvprintf+0x20e>
	switch (conv->specifier) {
    2e8e:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
    2e92:	2b20      	cmp	r3, #32
    2e94:	d86f      	bhi.n	2f76 <cbvprintf+0x3de>
    2e96:	a101      	add	r1, pc, #4	; (adr r1, 2e9c <cbvprintf+0x304>)
    2e98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    2e9c:	00002f4f 	.word	0x00002f4f
    2ea0:	00002f77 	.word	0x00002f77
    2ea4:	00002f77 	.word	0x00002f77
    2ea8:	00002f77 	.word	0x00002f77
    2eac:	00002f77 	.word	0x00002f77
    2eb0:	00002f77 	.word	0x00002f77
    2eb4:	00002f77 	.word	0x00002f77
    2eb8:	00002f77 	.word	0x00002f77
    2ebc:	00002f77 	.word	0x00002f77
    2ec0:	00002dcb 	.word	0x00002dcb
    2ec4:	00002f77 	.word	0x00002f77
    2ec8:	00002f4f 	.word	0x00002f4f
    2ecc:	00002f21 	.word	0x00002f21
    2ed0:	00002dcb 	.word	0x00002dcb
    2ed4:	00002dcb 	.word	0x00002dcb
    2ed8:	00002dcb 	.word	0x00002dcb
    2edc:	00002f77 	.word	0x00002f77
    2ee0:	00002f21 	.word	0x00002f21
    2ee4:	00002f77 	.word	0x00002f77
    2ee8:	00002f77 	.word	0x00002f77
    2eec:	00002f77 	.word	0x00002f77
    2ef0:	00002f77 	.word	0x00002f77
    2ef4:	00002f85 	.word	0x00002f85
    2ef8:	00002f4f 	.word	0x00002f4f
    2efc:	00002fa9 	.word	0x00002fa9
    2f00:	00002f77 	.word	0x00002f77
    2f04:	00002f77 	.word	0x00002f77
    2f08:	00002fa9 	.word	0x00002fa9
    2f0c:	00002f77 	.word	0x00002f77
    2f10:	00002f4f 	.word	0x00002f4f
    2f14:	00002f77 	.word	0x00002f77
    2f18:	00002f77 	.word	0x00002f77
    2f1c:	00002f4f 	.word	0x00002f4f
		conv->specifier_cat = SPECIFIER_SINT;
    2f20:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    2f24:	2101      	movs	r1, #1
		conv->specifier_cat = SPECIFIER_UINT;
    2f26:	f361 0302 	bfi	r3, r1, #0, #3
    2f2a:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    2f2e:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    2f32:	f003 0378 	and.w	r3, r3, #120	; 0x78
    2f36:	2b40      	cmp	r3, #64	; 0x40
			conv->invalid = true;
    2f38:	bf02      	ittt	eq
    2f3a:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
    2f3e:	f041 0101 	orreq.w	r1, r1, #1
    2f42:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
    2f46:	2a63      	cmp	r2, #99	; 0x63
    2f48:	d005      	beq.n	2f56 <cbvprintf+0x3be>
	bool unsupported = false;
    2f4a:	2300      	movs	r3, #0
    2f4c:	e006      	b.n	2f5c <cbvprintf+0x3c4>
		conv->specifier_cat = SPECIFIER_UINT;
    2f4e:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    2f52:	2102      	movs	r1, #2
    2f54:	e7e7      	b.n	2f26 <cbvprintf+0x38e>
			unsupported = (conv->length_mod != LENGTH_NONE);
    2f56:	3b00      	subs	r3, #0
    2f58:	bf18      	it	ne
    2f5a:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    2f5c:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    2f60:	f3c2 0140 	ubfx	r1, r2, #1, #1
    2f64:	430b      	orrs	r3, r1
    2f66:	f363 0241 	bfi	r2, r3, #1, #1
    2f6a:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
    2f6e:	e6b4      	b.n	2cda <cbvprintf+0x142>
		} else if ((conv->length_mod != LENGTH_NONE)
    2f70:	f013 0f38 	tst.w	r3, #56	; 0x38
    2f74:	d0e9      	beq.n	2f4a <cbvprintf+0x3b2>
			conv->invalid = true;
    2f76:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    2f7a:	f043 0301 	orr.w	r3, r3, #1
    2f7e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    2f82:	e7e2      	b.n	2f4a <cbvprintf+0x3b2>
		conv->specifier_cat = SPECIFIER_PTR;
    2f84:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    2f88:	2203      	movs	r2, #3
    2f8a:	f362 0302 	bfi	r3, r2, #0, #3
    2f8e:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    2f92:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    2f96:	f003 0378 	and.w	r3, r3, #120	; 0x78
    2f9a:	f1a3 0c40 	sub.w	ip, r3, #64	; 0x40
    2f9e:	f1dc 0300 	rsbs	r3, ip, #0
    2fa2:	eb43 030c 	adc.w	r3, r3, ip
    2fa6:	e7d9      	b.n	2f5c <cbvprintf+0x3c4>
		conv->specifier_cat = SPECIFIER_PTR;
    2fa8:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    2fac:	2203      	movs	r2, #3
    2fae:	f362 0302 	bfi	r3, r2, #0, #3
    2fb2:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
    2fb6:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    2fba:	f013 0f78 	tst.w	r3, #120	; 0x78
    2fbe:	bf14      	ite	ne
    2fc0:	2301      	movne	r3, #1
    2fc2:	2300      	moveq	r3, #0
    2fc4:	e7ca      	b.n	2f5c <cbvprintf+0x3c4>
			unsupported = true;
    2fc6:	2301      	movs	r3, #1
    2fc8:	e7c8      	b.n	2f5c <cbvprintf+0x3c4>
		} else if (conv->width_present) {
    2fca:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
    2fce:	2a00      	cmp	r2, #0
			width = conv->width_value;
    2fd0:	bfb4      	ite	lt
    2fd2:	f8dd b03c 	ldrlt.w	fp, [sp, #60]	; 0x3c
		int width = -1;
    2fd6:	f04f 3bff 	movge.w	fp, #4294967295	; 0xffffffff
    2fda:	e690      	b.n	2cfe <cbvprintf+0x166>
		} else if (conv->prec_present) {
    2fdc:	0799      	lsls	r1, r3, #30
    2fde:	f57f ae9d 	bpl.w	2d1c <cbvprintf+0x184>
			precision = conv->prec_value;
    2fe2:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
		conv->pad0_value = 0;
    2fe6:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
    2fea:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    2fec:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
		    && (conv->specifier_cat == SPECIFIER_FP)
    2ff0:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
    2ff4:	f003 0207 	and.w	r2, r3, #7
    2ff8:	2a04      	cmp	r2, #4
    2ffa:	d109      	bne.n	3010 <cbvprintf+0x478>
		    && !conv->prec_present) {
    2ffc:	078a      	lsls	r2, r1, #30
    2ffe:	d407      	bmi.n	3010 <cbvprintf+0x478>
			if (conv->specifier_a) {
    3000:	f99d 2039 	ldrsb.w	r2, [sp, #57]	; 0x39
				precision = 6;
    3004:	2a00      	cmp	r2, #0
    3006:	bfb4      	ite	lt
    3008:	f04f 080d 	movlt.w	r8, #13
    300c:	f04f 0806 	movge.w	r8, #6
		enum specifier_cat_enum specifier_cat
    3010:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    3014:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    3016:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    301a:	d137      	bne.n	308c <cbvprintf+0x4f4>
			switch (length_mod) {
    301c:	1ecb      	subs	r3, r1, #3
    301e:	2b04      	cmp	r3, #4
    3020:	d821      	bhi.n	3066 <cbvprintf+0x4ce>
    3022:	e8df f003 	tbb	[pc, r3]
    3026:	0903      	.short	0x0903
    3028:	2009      	.short	0x2009
    302a:	20          	.byte	0x20
    302b:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    302c:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
    3030:	17da      	asrs	r2, r3, #31
    3032:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
    3036:	e006      	b.n	3046 <cbvprintf+0x4ae>
					(sint_value_type)va_arg(ap, intmax_t);
    3038:	3407      	adds	r4, #7
    303a:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    303e:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    3042:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
    3046:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
    304a:	07bb      	lsls	r3, r7, #30
    304c:	d056      	beq.n	30fc <cbvprintf+0x564>
			OUTS(sp, fp);
    304e:	9b02      	ldr	r3, [sp, #8]
    3050:	462a      	mov	r2, r5
    3052:	4651      	mov	r1, sl
    3054:	4648      	mov	r0, r9
    3056:	f013 fe1e 	bl	16c96 <outs>
    305a:	2800      	cmp	r0, #0
    305c:	f2c0 8397 	blt.w	378e <cbvprintf+0xbf6>
    3060:	4406      	add	r6, r0
			while (pad_len-- > 0) {
    3062:	9d02      	ldr	r5, [sp, #8]
    3064:	e5a0      	b.n	2ba8 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    3066:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    306a:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    306c:	ea4f 72e3 	mov.w	r2, r3, asr #31
    3070:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    3074:	d105      	bne.n	3082 <cbvprintf+0x4ea>
				value->uint = (unsigned char)value->uint;
    3076:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
    307a:	930c      	str	r3, [sp, #48]	; 0x30
    307c:	2300      	movs	r3, #0
    307e:	930d      	str	r3, [sp, #52]	; 0x34
    3080:	e7e1      	b.n	3046 <cbvprintf+0x4ae>
			} else if (length_mod == LENGTH_H) {
    3082:	2902      	cmp	r1, #2
    3084:	d1df      	bne.n	3046 <cbvprintf+0x4ae>
				value->sint = (short)value->sint;
    3086:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
    308a:	e7d1      	b.n	3030 <cbvprintf+0x498>
		} else if (specifier_cat == SPECIFIER_UINT) {
    308c:	2b02      	cmp	r3, #2
    308e:	d123      	bne.n	30d8 <cbvprintf+0x540>
			switch (length_mod) {
    3090:	1ecb      	subs	r3, r1, #3
    3092:	2b04      	cmp	r3, #4
    3094:	d813      	bhi.n	30be <cbvprintf+0x526>
    3096:	e8df f003 	tbb	[pc, r3]
    309a:	0a03      	.short	0x0a03
    309c:	120a      	.short	0x120a
    309e:	12          	.byte	0x12
    309f:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    30a0:	6822      	ldr	r2, [r4, #0]
    30a2:	920c      	str	r2, [sp, #48]	; 0x30
    30a4:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
    30a6:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    30a8:	930d      	str	r3, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
    30aa:	4604      	mov	r4, r0
    30ac:	e7cb      	b.n	3046 <cbvprintf+0x4ae>
					(uint_value_type)va_arg(ap,
    30ae:	1de0      	adds	r0, r4, #7
    30b0:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
    30b4:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    30b8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				break;
    30bc:	e7f5      	b.n	30aa <cbvprintf+0x512>
					(uint_value_type)va_arg(ap, size_t);
    30be:	f854 3b04 	ldr.w	r3, [r4], #4
    30c2:	930c      	str	r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    30c4:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    30c6:	f04f 0300 	mov.w	r3, #0
    30ca:	930d      	str	r3, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
    30cc:	d0d3      	beq.n	3076 <cbvprintf+0x4de>
			} else if (length_mod == LENGTH_H) {
    30ce:	2902      	cmp	r1, #2
    30d0:	d1b9      	bne.n	3046 <cbvprintf+0x4ae>
				value->uint = (unsigned short)value->uint;
    30d2:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    30d6:	e7d0      	b.n	307a <cbvprintf+0x4e2>
		} else if (specifier_cat == SPECIFIER_FP) {
    30d8:	2b04      	cmp	r3, #4
    30da:	d109      	bne.n	30f0 <cbvprintf+0x558>
					(sint_value_type)va_arg(ap, long long);
    30dc:	1de3      	adds	r3, r4, #7
    30de:	f023 0307 	bic.w	r3, r3, #7
    30e2:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    30e6:	e9d3 2300 	ldrd	r2, r3, [r3]
    30ea:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    30ee:	e7aa      	b.n	3046 <cbvprintf+0x4ae>
		} else if (specifier_cat == SPECIFIER_PTR) {
    30f0:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    30f2:	bf04      	itt	eq
    30f4:	f854 3b04 	ldreq.w	r3, [r4], #4
    30f8:	930c      	streq	r3, [sp, #48]	; 0x30
    30fa:	e7a4      	b.n	3046 <cbvprintf+0x4ae>
		switch (conv->specifier) {
    30fc:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
    3100:	2a78      	cmp	r2, #120	; 0x78
    3102:	d8ae      	bhi.n	3062 <cbvprintf+0x4ca>
    3104:	2a57      	cmp	r2, #87	; 0x57
    3106:	f200 808c 	bhi.w	3222 <cbvprintf+0x68a>
    310a:	2a25      	cmp	r2, #37	; 0x25
    310c:	f000 80d4 	beq.w	32b8 <cbvprintf+0x720>
    3110:	2a24      	cmp	r2, #36	; 0x24
    3112:	d9a6      	bls.n	3062 <cbvprintf+0x4ca>
    3114:	2a41      	cmp	r2, #65	; 0x41
    3116:	d003      	beq.n	3120 <cbvprintf+0x588>
    3118:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
    311c:	2b02      	cmp	r3, #2
    311e:	d8a0      	bhi.n	3062 <cbvprintf+0x4ca>
	} u = {
    3120:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
	if ((u.u64 & SIGN_MASK) != 0U) {
    3124:	2b00      	cmp	r3, #0
    3126:	f2c0 81be 	blt.w	34a6 <cbvprintf+0x90e>
	} else if (conv->flag_plus) {
    312a:	0738      	lsls	r0, r7, #28
    312c:	f100 81bd 	bmi.w	34aa <cbvprintf+0x912>
		*sign = ' ';
    3130:	f017 0710 	ands.w	r7, r7, #16
    3134:	bf18      	it	ne
    3136:	2720      	movne	r7, #32
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    3138:	f3c3 550a 	ubfx	r5, r3, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
    313c:	f3c3 0313 	ubfx	r3, r3, #0, #20
    3140:	e9cd 1308 	strd	r1, r3, [sp, #32]
	bool is_subnormal = (expo == 0) && (fract != 0);
    3144:	2d00      	cmp	r5, #0
    3146:	f040 81b2 	bne.w	34ae <cbvprintf+0x916>
    314a:	ea51 0003 	orrs.w	r0, r1, r3
    314e:	bf14      	ite	ne
    3150:	2001      	movne	r0, #1
    3152:	2000      	moveq	r0, #0
	fract <<= EXPONENT_BITS;
    3154:	02db      	lsls	r3, r3, #11
    3156:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
    315a:	02c9      	lsls	r1, r1, #11
		c = 'f';
    315c:	2a46      	cmp	r2, #70	; 0x46
	if ((expo | fract) != 0) {
    315e:	ea45 0e01 	orr.w	lr, r5, r1
    3162:	ea43 7ce5 	orr.w	ip, r3, r5, asr #31
		c = 'f';
    3166:	bf08      	it	eq
    3168:	2266      	moveq	r2, #102	; 0x66
	if ((expo | fract) != 0) {
    316a:	ea5e 0c0c 	orrs.w	ip, lr, ip
	fract &= ~SIGN_MASK;
    316e:	e9cd 1308 	strd	r1, r3, [sp, #32]
	if ((expo | fract) != 0) {
    3172:	f000 8206 	beq.w	3582 <cbvprintf+0x9ea>
		if (is_subnormal) {
    3176:	2800      	cmp	r0, #0
    3178:	f040 81ce 	bne.w	3518 <cbvprintf+0x980>
		fract |= BIT_63;
    317c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    3180:	f04f 0c00 	mov.w	ip, #0
    3184:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
    3188:	f2a5 35fe 	subw	r5, r5, #1022	; 0x3fe
		fract |= BIT_63;
    318c:	9109      	str	r1, [sp, #36]	; 0x24
    318e:	4663      	mov	r3, ip
		fract *= 5U;
    3190:	f04f 0e05 	mov.w	lr, #5
	while (expo < -2) {
    3194:	f115 0f02 	cmn.w	r5, #2
    3198:	f2c0 81c5 	blt.w	3526 <cbvprintf+0x98e>
    319c:	f1bc 0f00 	cmp.w	ip, #0
    31a0:	d001      	beq.n	31a6 <cbvprintf+0x60e>
    31a2:	e9cd 0108 	strd	r0, r1, [sp, #32]
	while (expo > 0) {
    31a6:	2d00      	cmp	r5, #0
		fract += 2;
    31a8:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
	while (expo > 0) {
    31ac:	f300 81d0 	bgt.w	3550 <cbvprintf+0x9b8>
	fract >>= (4 - expo);
    31b0:	9809      	ldr	r0, [sp, #36]	; 0x24
    31b2:	9908      	ldr	r1, [sp, #32]
    31b4:	f1c5 0c04 	rsb	ip, r5, #4
    31b8:	351c      	adds	r5, #28
    31ba:	fa00 f505 	lsl.w	r5, r0, r5
    31be:	f1ac 0e20 	sub.w	lr, ip, #32
    31c2:	fa21 f10c 	lsr.w	r1, r1, ip
    31c6:	fa20 fe0e 	lsr.w	lr, r0, lr
    31ca:	4329      	orrs	r1, r5
    31cc:	ea41 010e 	orr.w	r1, r1, lr
    31d0:	fa20 f00c 	lsr.w	r0, r0, ip
    31d4:	e9cd 1008 	strd	r1, r0, [sp, #32]
	if ((c == 'g') || (c == 'G')) {
    31d8:	f002 01df 	and.w	r1, r2, #223	; 0xdf
    31dc:	2947      	cmp	r1, #71	; 0x47
    31de:	f040 81d7 	bne.w	3590 <cbvprintf+0x9f8>
		if (decexp < (-4 + 1) || decexp > precision) {
    31e2:	1cdd      	adds	r5, r3, #3
    31e4:	db02      	blt.n	31ec <cbvprintf+0x654>
    31e6:	4598      	cmp	r8, r3
    31e8:	f280 81ce 	bge.w	3588 <cbvprintf+0x9f0>
			c += 'e' - 'g';  /* e or E */
    31ec:	3a02      	subs	r2, #2
			if (precision > 0) {
    31ee:	f1b8 0f00 	cmp.w	r8, #0
			c += 'e' - 'g';  /* e or E */
    31f2:	b2d2      	uxtb	r2, r2
			if (precision > 0) {
    31f4:	dd01      	ble.n	31fa <cbvprintf+0x662>
				precision--;
    31f6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		if (!conv->flag_hash && (precision > 0)) {
    31fa:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    31fe:	0688      	lsls	r0, r1, #26
    3200:	f100 81c6 	bmi.w	3590 <cbvprintf+0x9f8>
    3204:	f1b8 0f00 	cmp.w	r8, #0
    3208:	bfd4      	ite	le
    320a:	2100      	movle	r1, #0
    320c:	2101      	movgt	r1, #1
	if (c == 'f') {
    320e:	2a66      	cmp	r2, #102	; 0x66
	bool prune_zero = false;
    3210:	9103      	str	r1, [sp, #12]
	if (c == 'f') {
    3212:	f040 81bf 	bne.w	3594 <cbvprintf+0x9fc>
		if (decimals < 0) {
    3216:	eb18 0503 	adds.w	r5, r8, r3
    321a:	f140 81bd 	bpl.w	3598 <cbvprintf+0xa00>
			decimals = 0;
    321e:	2500      	movs	r5, #0
    3220:	e1bd      	b.n	359e <cbvprintf+0xa06>
		switch (conv->specifier) {
    3222:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
    3226:	2b20      	cmp	r3, #32
    3228:	f63f af1b 	bhi.w	3062 <cbvprintf+0x4ca>
    322c:	a001      	add	r0, pc, #4	; (adr r0, 3234 <cbvprintf+0x69c>)
    322e:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
    3232:	bf00      	nop
    3234:	00003449 	.word	0x00003449
    3238:	00003063 	.word	0x00003063
    323c:	00003063 	.word	0x00003063
    3240:	00003063 	.word	0x00003063
    3244:	00003063 	.word	0x00003063
    3248:	00003063 	.word	0x00003063
    324c:	00003063 	.word	0x00003063
    3250:	00003063 	.word	0x00003063
    3254:	00003063 	.word	0x00003063
    3258:	00003121 	.word	0x00003121
    325c:	00003063 	.word	0x00003063
    3260:	000032e5 	.word	0x000032e5
    3264:	000033e9 	.word	0x000033e9
    3268:	00003121 	.word	0x00003121
    326c:	00003121 	.word	0x00003121
    3270:	00003121 	.word	0x00003121
    3274:	00003063 	.word	0x00003063
    3278:	000033e9 	.word	0x000033e9
    327c:	00003063 	.word	0x00003063
    3280:	00003063 	.word	0x00003063
    3284:	00003063 	.word	0x00003063
    3288:	00003063 	.word	0x00003063
    328c:	0000347f 	.word	0x0000347f
    3290:	00003449 	.word	0x00003449
    3294:	0000344d 	.word	0x0000344d
    3298:	00003063 	.word	0x00003063
    329c:	00003063 	.word	0x00003063
    32a0:	000032bf 	.word	0x000032bf
    32a4:	00003063 	.word	0x00003063
    32a8:	00003449 	.word	0x00003449
    32ac:	00003063 	.word	0x00003063
    32b0:	00003063 	.word	0x00003063
    32b4:	00003449 	.word	0x00003449
			OUTC('%');
    32b8:	4651      	mov	r1, sl
    32ba:	4610      	mov	r0, r2
    32bc:	e47e      	b.n	2bbc <cbvprintf+0x24>
			if (precision >= 0) {
    32be:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    32c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			if (precision >= 0) {
    32c4:	db09      	blt.n	32da <cbvprintf+0x742>
				len = strnlen(bps, precision);
    32c6:	4641      	mov	r1, r8
    32c8:	4610      	mov	r0, r2
    32ca:	9203      	str	r2, [sp, #12]
    32cc:	f013 ff9c 	bl	17208 <strnlen>
				len = strlen(bps);
    32d0:	9a03      	ldr	r2, [sp, #12]
		char sign = 0;
    32d2:	2700      	movs	r7, #0
			bpe = bps + len;
    32d4:	1815      	adds	r5, r2, r0
		if (bps == NULL) {
    32d6:	b962      	cbnz	r2, 32f2 <cbvprintf+0x75a>
    32d8:	e6c3      	b.n	3062 <cbvprintf+0x4ca>
				len = strlen(bps);
    32da:	4610      	mov	r0, r2
    32dc:	9203      	str	r2, [sp, #12]
    32de:	f013 ff8c 	bl	171fa <strlen>
    32e2:	e7f5      	b.n	32d0 <cbvprintf+0x738>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    32e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    32e6:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
		char sign = 0;
    32ea:	2700      	movs	r7, #0
			bpe = buf + 1;
    32ec:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
				bps = encode_float(value->dbl, conv, precision,
    32f0:	aa13      	add	r2, sp, #76	; 0x4c
		size_t nj_len = (bpe - bps);
    32f2:	1aab      	subs	r3, r5, r2
		if (sign != 0) {
    32f4:	b107      	cbz	r7, 32f8 <cbvprintf+0x760>
			nj_len += 1U;
    32f6:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    32f8:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
    32fc:	06c1      	lsls	r1, r0, #27
    32fe:	f140 823a 	bpl.w	3776 <cbvprintf+0xbde>
			nj_len += 2U;
    3302:	3302      	adds	r3, #2
		nj_len += conv->pad0_value;
    3304:	990f      	ldr	r1, [sp, #60]	; 0x3c
		if (conv->pad_fp) {
    3306:	0640      	lsls	r0, r0, #25
		nj_len += conv->pad0_value;
    3308:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    330a:	bf44      	itt	mi
    330c:	9910      	ldrmi	r1, [sp, #64]	; 0x40
    330e:	185b      	addmi	r3, r3, r1
		if (width > 0) {
    3310:	f1bb 0f00 	cmp.w	fp, #0
    3314:	dd23      	ble.n	335e <cbvprintf+0x7c6>
			width -= (int)nj_len;
    3316:	ebab 0b03 	sub.w	fp, fp, r3
			if (!conv->flag_dash) {
    331a:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    331e:	0759      	lsls	r1, r3, #29
    3320:	f3c3 0880 	ubfx	r8, r3, #2, #1
    3324:	d41b      	bmi.n	335e <cbvprintf+0x7c6>
				if (conv->flag_zero) {
    3326:	0658      	lsls	r0, r3, #25
    3328:	f140 8234 	bpl.w	3794 <cbvprintf+0xbfc>
					if (sign != 0) {
    332c:	2f00      	cmp	r7, #0
    332e:	f000 8234 	beq.w	379a <cbvprintf+0xc02>
						OUTC(sign);
    3332:	4651      	mov	r1, sl
    3334:	4638      	mov	r0, r7
    3336:	9203      	str	r2, [sp, #12]
    3338:	47c8      	blx	r9
    333a:	2800      	cmp	r0, #0
    333c:	f2c0 8227 	blt.w	378e <cbvprintf+0xbf6>
    3340:	9a03      	ldr	r2, [sp, #12]
						sign = 0;
    3342:	4647      	mov	r7, r8
						OUTC(sign);
    3344:	3601      	adds	r6, #1
					pad = '0';
    3346:	f04f 0830 	mov.w	r8, #48	; 0x30
    334a:	445e      	add	r6, fp
    334c:	465b      	mov	r3, fp
				while (width-- > 0) {
    334e:	2b00      	cmp	r3, #0
    3350:	eba6 000b 	sub.w	r0, r6, fp
    3354:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    3358:	f300 8211 	bgt.w	377e <cbvprintf+0xbe6>
    335c:	4606      	mov	r6, r0
		if (sign != 0) {
    335e:	b147      	cbz	r7, 3372 <cbvprintf+0x7da>
			OUTC(sign);
    3360:	4651      	mov	r1, sl
    3362:	4638      	mov	r0, r7
    3364:	9203      	str	r2, [sp, #12]
    3366:	47c8      	blx	r9
    3368:	2800      	cmp	r0, #0
    336a:	f2c0 8210 	blt.w	378e <cbvprintf+0xbf6>
    336e:	9a03      	ldr	r2, [sp, #12]
    3370:	3601      	adds	r6, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
    3372:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    3376:	0659      	lsls	r1, r3, #25
    3378:	f140 8265 	bpl.w	3846 <cbvprintf+0xcae>
			if (conv->specifier_a) {
    337c:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
    3380:	2b00      	cmp	r3, #0
    3382:	eba6 0302 	sub.w	r3, r6, r2
    3386:	9303      	str	r3, [sp, #12]
    3388:	f2c0 820a 	blt.w	37a0 <cbvprintf+0xc08>
    338c:	4617      	mov	r7, r2
				while (isdigit((int)*cp)) {
    338e:	7838      	ldrb	r0, [r7, #0]
    3390:	9b03      	ldr	r3, [sp, #12]
    3392:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
    3396:	2a09      	cmp	r2, #9
    3398:	46b8      	mov	r8, r7
    339a:	eb03 0607 	add.w	r6, r3, r7
    339e:	f107 0701 	add.w	r7, r7, #1
    33a2:	f240 8229 	bls.w	37f8 <cbvprintf+0xc60>
				if (!conv->pad_postdp) {
    33a6:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
				pad_len = conv->pad0_value;
    33aa:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
				if (!conv->pad_postdp) {
    33ac:	0693      	lsls	r3, r2, #26
    33ae:	d408      	bmi.n	33c2 <cbvprintf+0x82a>
    33b0:	443e      	add	r6, r7
					while (pad_len-- > 0) {
    33b2:	2f00      	cmp	r7, #0
    33b4:	eba6 0307 	sub.w	r3, r6, r7
    33b8:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
    33bc:	f300 8222 	bgt.w	3804 <cbvprintf+0xc6c>
    33c0:	461e      	mov	r6, r3
				if (*cp == '.') {
    33c2:	f898 0000 	ldrb.w	r0, [r8]
    33c6:	282e      	cmp	r0, #46	; 0x2e
    33c8:	d10b      	bne.n	33e2 <cbvprintf+0x84a>
					OUTC(*cp++);
    33ca:	4651      	mov	r1, sl
    33cc:	47c8      	blx	r9
						OUTC('0');
    33ce:	2800      	cmp	r0, #0
    33d0:	f2c0 81dd 	blt.w	378e <cbvprintf+0xbf6>
					while (pad_len-- > 0) {
    33d4:	2f00      	cmp	r7, #0
						OUTC('0');
    33d6:	f106 0601 	add.w	r6, r6, #1
					while (pad_len-- > 0) {
    33da:	f300 821a 	bgt.w	3812 <cbvprintf+0xc7a>
					OUTC(*cp++);
    33de:	f108 0801 	add.w	r8, r8, #1
    33e2:	eba6 0608 	sub.w	r6, r6, r8
    33e6:	e21d      	b.n	3824 <cbvprintf+0xc8c>
			if (conv->flag_plus) {
    33e8:	073d      	lsls	r5, r7, #28
    33ea:	d42b      	bmi.n	3444 <cbvprintf+0x8ac>
				sign = ' ';
    33ec:	f017 0710 	ands.w	r7, r7, #16
    33f0:	bf18      	it	ne
    33f2:	2720      	movne	r7, #32
			sint = value->sint;
    33f4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			if (sint < 0) {
    33f8:	2b00      	cmp	r3, #0
    33fa:	da05      	bge.n	3408 <cbvprintf+0x870>
				value->uint = (uint_value_type)-sint;
    33fc:	4252      	negs	r2, r2
    33fe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    3402:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				sign = '-';
    3406:	272d      	movs	r7, #45	; 0x2d
			bps = encode_uint(value->uint, conv, buf, bpe);
    3408:	f10d 0365 	add.w	r3, sp, #101	; 0x65
    340c:	9300      	str	r3, [sp, #0]
    340e:	aa0e      	add	r2, sp, #56	; 0x38
    3410:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    3414:	ab13      	add	r3, sp, #76	; 0x4c
    3416:	f013 fbf8 	bl	16c0a <encode_uint>
    341a:	4602      	mov	r2, r0
			if (precision >= 0) {
    341c:	f1b8 0f00 	cmp.w	r8, #0
    3420:	f10d 0565 	add.w	r5, sp, #101	; 0x65
    3424:	f6ff af57 	blt.w	32d6 <cbvprintf+0x73e>
				conv->flag_zero = false;
    3428:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
				size_t len = bpe - bps;
    342c:	1aab      	subs	r3, r5, r2
				conv->flag_zero = false;
    342e:	f36f 1186 	bfc	r1, #6, #1
				if (len < (size_t)precision) {
    3432:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    3434:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
    3438:	f67f af4d 	bls.w	32d6 <cbvprintf+0x73e>
					conv->pad0_value = precision - (int)len;
    343c:	eba8 0303 	sub.w	r3, r8, r3
    3440:	930f      	str	r3, [sp, #60]	; 0x3c
    3442:	e748      	b.n	32d6 <cbvprintf+0x73e>
				sign = '+';
    3444:	272b      	movs	r7, #43	; 0x2b
    3446:	e7d5      	b.n	33f4 <cbvprintf+0x85c>
		switch (conv->specifier) {
    3448:	2700      	movs	r7, #0
    344a:	e7dd      	b.n	3408 <cbvprintf+0x870>
			if (value->ptr != NULL) {
    344c:	980c      	ldr	r0, [sp, #48]	; 0x30
    344e:	2800      	cmp	r0, #0
    3450:	f000 818d 	beq.w	376e <cbvprintf+0xbd6>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    3454:	f10d 0365 	add.w	r3, sp, #101	; 0x65
    3458:	9300      	str	r3, [sp, #0]
    345a:	aa0e      	add	r2, sp, #56	; 0x38
    345c:	ab13      	add	r3, sp, #76	; 0x4c
    345e:	2100      	movs	r1, #0
    3460:	f013 fbd3 	bl	16c0a <encode_uint>
				conv->altform_0c = true;
    3464:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
    3468:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    346c:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    3470:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    3474:	4602      	mov	r2, r0
				conv->altform_0c = true;
    3476:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		char sign = 0;
    347a:	2700      	movs	r7, #0
				goto prec_int_pad0;
    347c:	e7ce      	b.n	341c <cbvprintf+0x884>
				store_count(conv, value->ptr, count);
    347e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
    3480:	2907      	cmp	r1, #7
    3482:	f63f adee 	bhi.w	3062 <cbvprintf+0x4ca>
    3486:	e8df f001 	tbb	[pc, r1]
    348a:	040c      	.short	0x040c
    348c:	08080c06 	.word	0x08080c06
    3490:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    3492:	701e      	strb	r6, [r3, #0]
		break;
    3494:	e5e5      	b.n	3062 <cbvprintf+0x4ca>
		*(short *)dp = (short)count;
    3496:	801e      	strh	r6, [r3, #0]
		break;
    3498:	e5e3      	b.n	3062 <cbvprintf+0x4ca>
		*(intmax_t *)dp = (intmax_t)count;
    349a:	17f2      	asrs	r2, r6, #31
    349c:	e9c3 6200 	strd	r6, r2, [r3]
		break;
    34a0:	e5df      	b.n	3062 <cbvprintf+0x4ca>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    34a2:	601e      	str	r6, [r3, #0]
		break;
    34a4:	e5dd      	b.n	3062 <cbvprintf+0x4ca>
		*sign = '-';
    34a6:	272d      	movs	r7, #45	; 0x2d
    34a8:	e646      	b.n	3138 <cbvprintf+0x5a0>
		*sign = '+';
    34aa:	272b      	movs	r7, #43	; 0x2b
    34ac:	e644      	b.n	3138 <cbvprintf+0x5a0>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
    34ae:	f240 70ff 	movw	r0, #2047	; 0x7ff
    34b2:	4285      	cmp	r5, r0
    34b4:	d12d      	bne.n	3512 <cbvprintf+0x97a>
		if (fract == 0) {
    34b6:	430b      	orrs	r3, r1
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    34b8:	f1a2 0241 	sub.w	r2, r2, #65	; 0x41
    34bc:	d11b      	bne.n	34f6 <cbvprintf+0x95e>
			if (isupper((int)c)) {
    34be:	2a19      	cmp	r2, #25
    34c0:	d811      	bhi.n	34e6 <cbvprintf+0x94e>
				*buf++ = 'I';
    34c2:	2349      	movs	r3, #73	; 0x49
    34c4:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'N';
    34c8:	234e      	movs	r3, #78	; 0x4e
    34ca:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'F';
    34ce:	2346      	movs	r3, #70	; 0x46
				*buf++ = 'n';
    34d0:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
		conv->flag_zero = false;
    34d4:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    34d8:	f36f 1386 	bfc	r3, #6, #1
    34dc:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
		*bpe = buf;
    34e0:	f10d 054f 	add.w	r5, sp, #79	; 0x4f
		return bps;
    34e4:	e704      	b.n	32f0 <cbvprintf+0x758>
				*buf++ = 'i';
    34e6:	2369      	movs	r3, #105	; 0x69
    34e8:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
    34ec:	236e      	movs	r3, #110	; 0x6e
    34ee:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'f';
    34f2:	2366      	movs	r3, #102	; 0x66
    34f4:	e7ec      	b.n	34d0 <cbvprintf+0x938>
			if (isupper((int)c)) {
    34f6:	2a19      	cmp	r2, #25
				*buf++ = 'N';
    34f8:	bf99      	ittee	ls
    34fa:	234e      	movls	r3, #78	; 0x4e
				*buf++ = 'A';
    34fc:	2241      	movls	r2, #65	; 0x41
				*buf++ = 'n';
    34fe:	236e      	movhi	r3, #110	; 0x6e
				*buf++ = 'a';
    3500:	2261      	movhi	r2, #97	; 0x61
				*buf++ = 'N';
    3502:	bf94      	ite	ls
    3504:	f88d 304c 	strbls.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
    3508:	f88d 304c 	strbhi.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'a';
    350c:	f88d 204d 	strb.w	r2, [sp, #77]	; 0x4d
    3510:	e7de      	b.n	34d0 <cbvprintf+0x938>
	bool is_subnormal = (expo == 0) && (fract != 0);
    3512:	2000      	movs	r0, #0
    3514:	e61e      	b.n	3154 <cbvprintf+0x5bc>
				expo--;
    3516:	3d01      	subs	r5, #1
			while (((fract <<= 1) & BIT_63) == 0) {
    3518:	1849      	adds	r1, r1, r1
    351a:	415b      	adcs	r3, r3
    351c:	2b00      	cmp	r3, #0
    351e:	dafa      	bge.n	3516 <cbvprintf+0x97e>
    3520:	e9cd 1308 	strd	r1, r3, [sp, #32]
    3524:	e62a      	b.n	317c <cbvprintf+0x5e4>
			fract >>= 1;
    3526:	0840      	lsrs	r0, r0, #1
    3528:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
    352c:	0849      	lsrs	r1, r1, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    352e:	f1b1 3f33 	cmp.w	r1, #858993459	; 0x33333333
    3532:	46ac      	mov	ip, r5
			expo++;
    3534:	f105 0501 	add.w	r5, r5, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    3538:	d2f5      	bcs.n	3526 <cbvprintf+0x98e>
		fract *= 5U;
    353a:	fb0e f501 	mul.w	r5, lr, r1
    353e:	fba0 010e 	umull	r0, r1, r0, lr
    3542:	4429      	add	r1, r5
		decexp--;
    3544:	3b01      	subs	r3, #1
		expo++;
    3546:	f10c 0502 	add.w	r5, ip, #2
		decexp--;
    354a:	f04f 0c01 	mov.w	ip, #1
    354e:	e621      	b.n	3194 <cbvprintf+0x5fc>
		fract += 2;
    3550:	3102      	adds	r1, #2
    3552:	f140 0000 	adc.w	r0, r0, #0
    3556:	e9cd 1008 	strd	r1, r0, [sp, #32]
		_ldiv5(&fract);
    355a:	a808      	add	r0, sp, #32
    355c:	e9cd 2303 	strd	r2, r3, [sp, #12]
    3560:	f013 fb24 	bl	16bac <_ldiv5>
		decexp++;
    3564:	9b04      	ldr	r3, [sp, #16]
    3566:	9a03      	ldr	r2, [sp, #12]
    3568:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
		expo--;
    356c:	3d01      	subs	r5, #1
		decexp++;
    356e:	3301      	adds	r3, #1
			fract <<= 1;
    3570:	1849      	adds	r1, r1, r1
    3572:	4140      	adcs	r0, r0
		} while (!(fract & BIT_63));
    3574:	2800      	cmp	r0, #0
			expo--;
    3576:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		} while (!(fract & BIT_63));
    357a:	daf9      	bge.n	3570 <cbvprintf+0x9d8>
    357c:	e9cd 1008 	strd	r1, r0, [sp, #32]
    3580:	e611      	b.n	31a6 <cbvprintf+0x60e>
    3582:	2300      	movs	r3, #0
    3584:	461d      	mov	r5, r3
    3586:	e613      	b.n	31b0 <cbvprintf+0x618>
			precision -= decexp;
    3588:	eba8 0803 	sub.w	r8, r8, r3
			c = 'f';
    358c:	2266      	movs	r2, #102	; 0x66
    358e:	e634      	b.n	31fa <cbvprintf+0x662>
	bool prune_zero = false;
    3590:	2100      	movs	r1, #0
    3592:	e63c      	b.n	320e <cbvprintf+0x676>
		decimals = precision + 1;
    3594:	f108 0501 	add.w	r5, r8, #1
	if (decimals > 16) {
    3598:	2d10      	cmp	r5, #16
    359a:	bfa8      	it	ge
    359c:	2510      	movge	r5, #16
    359e:	2110      	movs	r1, #16
    35a0:	9107      	str	r1, [sp, #28]
	uint64_t round = BIT64(59); /* 0.5 */
    35a2:	2000      	movs	r0, #0
    35a4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    35a8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
	*v >>= 1;
    35ac:	e9dd 100a 	ldrd	r1, r0, [sp, #40]	; 0x28
	while (decimals--) {
    35b0:	b9a5      	cbnz	r5, 35dc <cbvprintf+0xa44>
	fract += round;
    35b2:	9d08      	ldr	r5, [sp, #32]
    35b4:	1949      	adds	r1, r1, r5
    35b6:	9d09      	ldr	r5, [sp, #36]	; 0x24
    35b8:	eb40 0505 	adc.w	r5, r0, r5
	if (fract >= BIT64(60)) {
    35bc:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
    35c0:	d21b      	bcs.n	35fa <cbvprintf+0xa62>
	fract += round;
    35c2:	e9cd 1508 	strd	r1, r5, [sp, #32]
	if (c == 'f') {
    35c6:	2a66      	cmp	r2, #102	; 0x66
    35c8:	f040 8099 	bne.w	36fe <cbvprintf+0xb66>
		if (decexp > 0) {
    35cc:	2b00      	cmp	r3, #0
    35ce:	dc23      	bgt.n	3618 <cbvprintf+0xa80>
			*buf++ = '0';
    35d0:	2130      	movs	r1, #48	; 0x30
    35d2:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
    35d6:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
    35da:	e02f      	b.n	363c <cbvprintf+0xaa4>
	*v >>= 1;
    35dc:	0849      	lsrs	r1, r1, #1
    35de:	ea41 71c0 	orr.w	r1, r1, r0, lsl #31
    35e2:	0840      	lsrs	r0, r0, #1
    35e4:	e9cd 100a 	strd	r1, r0, [sp, #40]	; 0x28
	_ldiv5(v);
    35e8:	a80a      	add	r0, sp, #40	; 0x28
    35ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
    35ee:	3d01      	subs	r5, #1
    35f0:	f013 fadc 	bl	16bac <_ldiv5>
    35f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
}
    35f8:	e7d8      	b.n	35ac <cbvprintf+0xa14>
	*v >>= 1;
    35fa:	0849      	lsrs	r1, r1, #1
    35fc:	ea41 71c5 	orr.w	r1, r1, r5, lsl #31
	_ldiv5(v);
    3600:	a808      	add	r0, sp, #32
	*v >>= 1;
    3602:	086d      	lsrs	r5, r5, #1
    3604:	e9cd 2304 	strd	r2, r3, [sp, #16]
    3608:	e9cd 1508 	strd	r1, r5, [sp, #32]
	_ldiv5(v);
    360c:	f013 face 	bl	16bac <_ldiv5>
		decexp++;
    3610:	9b05      	ldr	r3, [sp, #20]
    3612:	9a04      	ldr	r2, [sp, #16]
    3614:	3301      	adds	r3, #1
    3616:	e7d6      	b.n	35c6 <cbvprintf+0xa2e>
	char *buf = bps;
    3618:	ad13      	add	r5, sp, #76	; 0x4c
			while (decexp > 0 && digit_count > 0) {
    361a:	9907      	ldr	r1, [sp, #28]
    361c:	2900      	cmp	r1, #0
    361e:	dd0b      	ble.n	3638 <cbvprintf+0xaa0>
				*buf++ = _get_digit(&fract, &digit_count);
    3620:	a907      	add	r1, sp, #28
    3622:	a808      	add	r0, sp, #32
    3624:	e9cd 2304 	strd	r2, r3, [sp, #16]
    3628:	f013 fad8 	bl	16bdc <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    362c:	9b05      	ldr	r3, [sp, #20]
				*buf++ = _get_digit(&fract, &digit_count);
    362e:	f805 0b01 	strb.w	r0, [r5], #1
			while (decexp > 0 && digit_count > 0) {
    3632:	3b01      	subs	r3, #1
    3634:	9a04      	ldr	r2, [sp, #16]
    3636:	d1f0      	bne.n	361a <cbvprintf+0xa82>
			conv->pad0_value = decexp;
    3638:	930f      	str	r3, [sp, #60]	; 0x3c
			decexp = 0;
    363a:	2300      	movs	r3, #0
		if (conv->flag_hash || (precision > 0)) {
    363c:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    3640:	0689      	lsls	r1, r1, #26
    3642:	d402      	bmi.n	364a <cbvprintf+0xab2>
    3644:	f1b8 0f00 	cmp.w	r8, #0
    3648:	dd1d      	ble.n	3686 <cbvprintf+0xaee>
			*buf++ = '.';
    364a:	212e      	movs	r1, #46	; 0x2e
    364c:	f805 1b01 	strb.w	r1, [r5], #1
		if (decexp < 0 && precision > 0) {
    3650:	b19b      	cbz	r3, 367a <cbvprintf+0xae2>
    3652:	f1b8 0f00 	cmp.w	r8, #0
    3656:	dd16      	ble.n	3686 <cbvprintf+0xaee>
			conv->pad0_value = -decexp;
    3658:	4259      	negs	r1, r3
    365a:	4541      	cmp	r1, r8
    365c:	bfa8      	it	ge
    365e:	4641      	movge	r1, r8
			conv->pad_postdp = (conv->pad0_value > 0);
    3660:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
			conv->pad0_value = -decexp;
    3664:	910f      	str	r1, [sp, #60]	; 0x3c
			conv->pad_postdp = (conv->pad0_value > 0);
    3666:	2900      	cmp	r1, #0
			precision -= conv->pad0_value;
    3668:	eba8 0801 	sub.w	r8, r8, r1
			conv->pad_postdp = (conv->pad0_value > 0);
    366c:	bfd4      	ite	le
    366e:	2100      	movle	r1, #0
    3670:	2101      	movgt	r1, #1
    3672:	f361 1045 	bfi	r0, r1, #5, #1
    3676:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
	while (precision > 0 && digit_count > 0) {
    367a:	f1b8 0f00 	cmp.w	r8, #0
    367e:	dd02      	ble.n	3686 <cbvprintf+0xaee>
    3680:	9907      	ldr	r1, [sp, #28]
    3682:	2900      	cmp	r1, #0
    3684:	dc56      	bgt.n	3734 <cbvprintf+0xb9c>
	if (prune_zero) {
    3686:	9903      	ldr	r1, [sp, #12]
    3688:	2900      	cmp	r1, #0
    368a:	d163      	bne.n	3754 <cbvprintf+0xbbc>
	conv->pad0_pre_exp = precision;
    368c:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
	if ((c == 'e') || (c == 'E')) {
    3690:	f002 01df 	and.w	r1, r2, #223	; 0xdf
    3694:	2945      	cmp	r1, #69	; 0x45
    3696:	d121      	bne.n	36dc <cbvprintf+0xb44>
		if (decexp < 0) {
    3698:	2b00      	cmp	r3, #0
		*buf++ = c;
    369a:	4629      	mov	r1, r5
			decexp = -decexp;
    369c:	bfb8      	it	lt
    369e:	425b      	neglt	r3, r3
		*buf++ = c;
    36a0:	f801 2b02 	strb.w	r2, [r1], #2
			*buf++ = '-';
    36a4:	bfb4      	ite	lt
    36a6:	222d      	movlt	r2, #45	; 0x2d
			*buf++ = '+';
    36a8:	222b      	movge	r2, #43	; 0x2b
		if (decexp >= 100) {
    36aa:	2b63      	cmp	r3, #99	; 0x63
    36ac:	706a      	strb	r2, [r5, #1]
    36ae:	dd09      	ble.n	36c4 <cbvprintf+0xb2c>
			*buf++ = (decexp / 100) + '0';
    36b0:	2064      	movs	r0, #100	; 0x64
    36b2:	fbb3 f2f0 	udiv	r2, r3, r0
    36b6:	f102 0c30 	add.w	ip, r2, #48	; 0x30
    36ba:	1ce9      	adds	r1, r5, #3
    36bc:	f885 c002 	strb.w	ip, [r5, #2]
			decexp %= 100;
    36c0:	fb00 3312 	mls	r3, r0, r2, r3
		*buf++ = (decexp / 10) + '0';
    36c4:	200a      	movs	r0, #10
    36c6:	460d      	mov	r5, r1
    36c8:	fbb3 f2f0 	udiv	r2, r3, r0
		*buf++ = (decexp % 10) + '0';
    36cc:	fb00 3312 	mls	r3, r0, r2, r3
		*buf++ = (decexp / 10) + '0';
    36d0:	f102 0c30 	add.w	ip, r2, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
    36d4:	3330      	adds	r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    36d6:	f805 cb02 	strb.w	ip, [r5], #2
		*buf++ = (decexp % 10) + '0';
    36da:	704b      	strb	r3, [r1, #1]
		|| (conv->pad0_pre_exp > 0);
    36dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    36de:	2b00      	cmp	r3, #0
    36e0:	dc43      	bgt.n	376a <cbvprintf+0xbd2>
    36e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    36e4:	2b00      	cmp	r3, #0
    36e6:	bfd4      	ite	le
    36e8:	2300      	movle	r3, #0
    36ea:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
    36ec:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
    36f0:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
    36f4:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
    36f6:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
	*buf = 0;
    36fa:	702b      	strb	r3, [r5, #0]
	return bps;
    36fc:	e5f8      	b.n	32f0 <cbvprintf+0x758>
		*buf = _get_digit(&fract, &digit_count);
    36fe:	a907      	add	r1, sp, #28
    3700:	a808      	add	r0, sp, #32
    3702:	e9cd 2304 	strd	r2, r3, [sp, #16]
    3706:	f013 fa69 	bl	16bdc <_get_digit>
		if (*buf++ != '0') {
    370a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		if (conv->flag_hash || (precision > 0)) {
    370e:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		*buf = _get_digit(&fract, &digit_count);
    3712:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
		if (*buf++ != '0') {
    3716:	2830      	cmp	r0, #48	; 0x30
			decexp--;
    3718:	bf18      	it	ne
    371a:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
		if (conv->flag_hash || (precision > 0)) {
    371e:	0688      	lsls	r0, r1, #26
    3720:	d402      	bmi.n	3728 <cbvprintf+0xb90>
    3722:	f1b8 0f00 	cmp.w	r8, #0
    3726:	dd12      	ble.n	374e <cbvprintf+0xbb6>
			*buf++ = '.';
    3728:	212e      	movs	r1, #46	; 0x2e
    372a:	f88d 104d 	strb.w	r1, [sp, #77]	; 0x4d
    372e:	f10d 054e 	add.w	r5, sp, #78	; 0x4e
    3732:	e7a2      	b.n	367a <cbvprintf+0xae2>
		*buf++ = _get_digit(&fract, &digit_count);
    3734:	a907      	add	r1, sp, #28
    3736:	a808      	add	r0, sp, #32
    3738:	e9cd 2304 	strd	r2, r3, [sp, #16]
    373c:	f013 fa4e 	bl	16bdc <_get_digit>
		precision--;
    3740:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    3744:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		*buf++ = _get_digit(&fract, &digit_count);
    3748:	f805 0b01 	strb.w	r0, [r5], #1
		precision--;
    374c:	e795      	b.n	367a <cbvprintf+0xae2>
		if (*buf++ != '0') {
    374e:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
    3752:	e798      	b.n	3686 <cbvprintf+0xaee>
		conv->pad0_pre_exp = 0;
    3754:	2100      	movs	r1, #0
    3756:	9110      	str	r1, [sp, #64]	; 0x40
		while (*--buf == '0') {
    3758:	4628      	mov	r0, r5
    375a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
    375e:	2930      	cmp	r1, #48	; 0x30
    3760:	d0fa      	beq.n	3758 <cbvprintf+0xbc0>
		if (*buf != '.') {
    3762:	292e      	cmp	r1, #46	; 0x2e
    3764:	bf18      	it	ne
    3766:	4605      	movne	r5, r0
    3768:	e792      	b.n	3690 <cbvprintf+0xaf8>
		|| (conv->pad0_pre_exp > 0);
    376a:	2301      	movs	r3, #1
    376c:	e7be      	b.n	36ec <cbvprintf+0xb54>
			bpe = bps + 5;
    376e:	4d4b      	ldr	r5, [pc, #300]	; (389c <cbvprintf+0xd04>)
		char sign = 0;
    3770:	4607      	mov	r7, r0
			bps = "(nil)";
    3772:	1f6a      	subs	r2, r5, #5
    3774:	e5bd      	b.n	32f2 <cbvprintf+0x75a>
		} else if (conv->altform_0) {
    3776:	0701      	lsls	r1, r0, #28
			nj_len += 1U;
    3778:	bf48      	it	mi
    377a:	3301      	addmi	r3, #1
    377c:	e5c2      	b.n	3304 <cbvprintf+0x76c>
					OUTC(pad);
    377e:	4651      	mov	r1, sl
    3780:	4640      	mov	r0, r8
    3782:	9203      	str	r2, [sp, #12]
    3784:	47c8      	blx	r9
    3786:	2800      	cmp	r0, #0
    3788:	9a03      	ldr	r2, [sp, #12]
    378a:	f6bf addf 	bge.w	334c <cbvprintf+0x7b4>
#undef OUTS
#undef OUTC
}
    378e:	b01b      	add	sp, #108	; 0x6c
    3790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    3794:	f04f 0820 	mov.w	r8, #32
    3798:	e5d7      	b.n	334a <cbvprintf+0x7b2>
					pad = '0';
    379a:	f04f 0830 	mov.w	r8, #48	; 0x30
    379e:	e5d4      	b.n	334a <cbvprintf+0x7b2>
			if (conv->specifier_a) {
    37a0:	4690      	mov	r8, r2
    37a2:	9b03      	ldr	r3, [sp, #12]
    37a4:	4647      	mov	r7, r8
    37a6:	4443      	add	r3, r8
				while (*cp != 'p') {
    37a8:	f818 0b01 	ldrb.w	r0, [r8], #1
    37ac:	2870      	cmp	r0, #112	; 0x70
    37ae:	d11e      	bne.n	37ee <cbvprintf+0xc56>
			while (pad_len-- > 0) {
    37b0:	461e      	mov	r6, r3
    37b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    37b4:	eb03 0806 	add.w	r8, r3, r6
    37b8:	eba8 0306 	sub.w	r3, r8, r6
    37bc:	2b00      	cmp	r3, #0
    37be:	dc3b      	bgt.n	3838 <cbvprintf+0xca0>
			OUTS(cp, bpe);
    37c0:	462b      	mov	r3, r5
    37c2:	463a      	mov	r2, r7
			OUTS(bps, bpe);
    37c4:	4651      	mov	r1, sl
    37c6:	4648      	mov	r0, r9
    37c8:	f013 fa65 	bl	16c96 <outs>
    37cc:	2800      	cmp	r0, #0
    37ce:	dbde      	blt.n	378e <cbvprintf+0xbf6>
    37d0:	4430      	add	r0, r6
			while (pad_len-- > 0) {
    37d2:	4606      	mov	r6, r0
    37d4:	4483      	add	fp, r0
		while (width > 0) {
    37d6:	ebab 0306 	sub.w	r3, fp, r6
    37da:	2b00      	cmp	r3, #0
    37dc:	f77f ac41 	ble.w	3062 <cbvprintf+0x4ca>
			OUTC(' ');
    37e0:	4651      	mov	r1, sl
    37e2:	2020      	movs	r0, #32
    37e4:	47c8      	blx	r9
    37e6:	2800      	cmp	r0, #0
    37e8:	dbd1      	blt.n	378e <cbvprintf+0xbf6>
    37ea:	3601      	adds	r6, #1
			--width;
    37ec:	e7f3      	b.n	37d6 <cbvprintf+0xc3e>
					OUTC(*cp++);
    37ee:	4651      	mov	r1, sl
    37f0:	47c8      	blx	r9
    37f2:	2800      	cmp	r0, #0
    37f4:	dad5      	bge.n	37a2 <cbvprintf+0xc0a>
    37f6:	e7ca      	b.n	378e <cbvprintf+0xbf6>
					OUTC(*cp++);
    37f8:	4651      	mov	r1, sl
    37fa:	47c8      	blx	r9
    37fc:	2800      	cmp	r0, #0
    37fe:	f6bf adc6 	bge.w	338e <cbvprintf+0x7f6>
    3802:	e7c4      	b.n	378e <cbvprintf+0xbf6>
						OUTC('0');
    3804:	4651      	mov	r1, sl
    3806:	2030      	movs	r0, #48	; 0x30
    3808:	47c8      	blx	r9
    380a:	2800      	cmp	r0, #0
    380c:	f6bf add1 	bge.w	33b2 <cbvprintf+0x81a>
    3810:	e7bd      	b.n	378e <cbvprintf+0xbf6>
						OUTC('0');
    3812:	4651      	mov	r1, sl
    3814:	2030      	movs	r0, #48	; 0x30
    3816:	47c8      	blx	r9
    3818:	3f01      	subs	r7, #1
    381a:	e5d8      	b.n	33ce <cbvprintf+0x836>
					OUTC(*cp++);
    381c:	4651      	mov	r1, sl
    381e:	47c8      	blx	r9
    3820:	2800      	cmp	r0, #0
    3822:	dbb4      	blt.n	378e <cbvprintf+0xbf6>
    3824:	4647      	mov	r7, r8
    3826:	eb06 0308 	add.w	r3, r6, r8
				while (isdigit((int)*cp)) {
    382a:	f818 0b01 	ldrb.w	r0, [r8], #1
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    382e:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
    3832:	2a09      	cmp	r2, #9
    3834:	d9f2      	bls.n	381c <cbvprintf+0xc84>
    3836:	e7bb      	b.n	37b0 <cbvprintf+0xc18>
				OUTC('0');
    3838:	4651      	mov	r1, sl
    383a:	2030      	movs	r0, #48	; 0x30
    383c:	47c8      	blx	r9
    383e:	2800      	cmp	r0, #0
    3840:	dba5      	blt.n	378e <cbvprintf+0xbf6>
    3842:	3601      	adds	r6, #1
    3844:	e7b8      	b.n	37b8 <cbvprintf+0xc20>
			if (conv->altform_0c | conv->altform_0) {
    3846:	06d8      	lsls	r0, r3, #27
    3848:	d401      	bmi.n	384e <cbvprintf+0xcb6>
    384a:	0719      	lsls	r1, r3, #28
    384c:	d507      	bpl.n	385e <cbvprintf+0xcc6>
				OUTC('0');
    384e:	4651      	mov	r1, sl
    3850:	2030      	movs	r0, #48	; 0x30
    3852:	9203      	str	r2, [sp, #12]
    3854:	47c8      	blx	r9
    3856:	2800      	cmp	r0, #0
    3858:	db99      	blt.n	378e <cbvprintf+0xbf6>
    385a:	9a03      	ldr	r2, [sp, #12]
    385c:	3601      	adds	r6, #1
			if (conv->altform_0c) {
    385e:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    3862:	06db      	lsls	r3, r3, #27
    3864:	d508      	bpl.n	3878 <cbvprintf+0xce0>
				OUTC(conv->specifier);
    3866:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
    386a:	9203      	str	r2, [sp, #12]
    386c:	4651      	mov	r1, sl
    386e:	47c8      	blx	r9
    3870:	2800      	cmp	r0, #0
    3872:	db8c      	blt.n	378e <cbvprintf+0xbf6>
    3874:	9a03      	ldr	r2, [sp, #12]
    3876:	3601      	adds	r6, #1
			while (pad_len-- > 0) {
    3878:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    387a:	4437      	add	r7, r6
    387c:	1bbb      	subs	r3, r7, r6
    387e:	2b00      	cmp	r3, #0
    3880:	dc01      	bgt.n	3886 <cbvprintf+0xcee>
			OUTS(bps, bpe);
    3882:	462b      	mov	r3, r5
    3884:	e79e      	b.n	37c4 <cbvprintf+0xc2c>
				OUTC('0');
    3886:	4651      	mov	r1, sl
    3888:	2030      	movs	r0, #48	; 0x30
    388a:	9203      	str	r2, [sp, #12]
    388c:	47c8      	blx	r9
    388e:	2800      	cmp	r0, #0
    3890:	f6ff af7d 	blt.w	378e <cbvprintf+0xbf6>
    3894:	9a03      	ldr	r2, [sp, #12]
    3896:	3601      	adds	r6, #1
    3898:	e7f0      	b.n	387c <cbvprintf+0xce4>
    389a:	bf00      	nop
    389c:	000200b3 	.word	0x000200b3

000038a0 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    38a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    38a4:	4605      	mov	r5, r0
    38a6:	f04f 0320 	mov.w	r3, #32
    38aa:	f3ef 8611 	mrs	r6, BASEPRI
    38ae:	f383 8812 	msr	BASEPRI_MAX, r3
    38b2:	f3bf 8f6f 	isb	sy
	return list->head;
    38b6:	4b0e      	ldr	r3, [pc, #56]	; (38f0 <pm_state_notify+0x50>)
    38b8:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    38ba:	b19c      	cbz	r4, 38e4 <pm_state_notify+0x44>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    38bc:	4f0d      	ldr	r7, [pc, #52]	; (38f4 <pm_state_notify+0x54>)
    38be:	f8df 8038 	ldr.w	r8, [pc, #56]	; 38f8 <pm_state_notify+0x58>
    38c2:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    38c6:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    38ca:	2d00      	cmp	r5, #0
    38cc:	bf08      	it	eq
    38ce:	4613      	moveq	r3, r2
		if (callback) {
    38d0:	b12b      	cbz	r3, 38de <pm_state_notify+0x3e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    38d2:	f898 2014 	ldrb.w	r2, [r8, #20]
    38d6:	fb09 f202 	mul.w	r2, r9, r2
    38da:	5cb8      	ldrb	r0, [r7, r2]
    38dc:	4798      	blx	r3
	return node->next;
    38de:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    38e0:	2c00      	cmp	r4, #0
    38e2:	d1f0      	bne.n	38c6 <pm_state_notify+0x26>
	__asm__ volatile(
    38e4:	f386 8811 	msr	BASEPRI, r6
    38e8:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    38ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    38f0:	200018c8 	.word	0x200018c8
    38f4:	200018d0 	.word	0x200018d0
    38f8:	20002abc 	.word	0x20002abc

000038fc <atomic_clear_bit.constprop.0>:
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    38fc:	0942      	lsrs	r2, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
    38fe:	2301      	movs	r3, #1
    3900:	f000 001f 	and.w	r0, r0, #31
    3904:	fa03 f000 	lsl.w	r0, r3, r0
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3908:	4b07      	ldr	r3, [pc, #28]	; (3928 <atomic_clear_bit.constprop.0+0x2c>)
    390a:	f3bf 8f5b 	dmb	ish
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    390e:	43c0      	mvns	r0, r0
    3910:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    3914:	e853 2f00 	ldrex	r2, [r3]
    3918:	4002      	ands	r2, r0
    391a:	e843 2100 	strex	r1, r2, [r3]
    391e:	2900      	cmp	r1, #0
    3920:	d1f8      	bne.n	3914 <atomic_clear_bit.constprop.0+0x18>
    3922:	f3bf 8f5b 	dmb	ish
}
    3926:	4770      	bx	lr
    3928:	200018dc 	.word	0x200018dc

0000392c <pm_system_resume>:

void pm_system_resume(void)
{
    392c:	b530      	push	{r4, r5, lr}
	uint8_t id = _current_cpu->id;
    392e:	4b1d      	ldr	r3, [pc, #116]	; (39a4 <pm_system_resume+0x78>)
    3930:	7d1c      	ldrb	r4, [r3, #20]
    3932:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    3936:	f004 031f 	and.w	r3, r4, #31
    393a:	2201      	movs	r2, #1
    393c:	409a      	lsls	r2, r3
    393e:	4b1a      	ldr	r3, [pc, #104]	; (39a8 <pm_system_resume+0x7c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3940:	0961      	lsrs	r1, r4, #5
{
    3942:	b085      	sub	sp, #20
    3944:	43d0      	mvns	r0, r2
    3946:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    394a:	e853 1f00 	ldrex	r1, [r3]
    394e:	ea01 0500 	and.w	r5, r1, r0
    3952:	e843 5c00 	strex	ip, r5, [r3]
    3956:	f1bc 0f00 	cmp.w	ip, #0
    395a:	d1f6      	bne.n	394a <pm_system_resume+0x1e>
    395c:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    3960:	4211      	tst	r1, r2
    3962:	d017      	beq.n	3994 <pm_system_resume+0x68>
		exit_pos_ops(z_cpus_pm_state[id]);
    3964:	4d11      	ldr	r5, [pc, #68]	; (39ac <pm_system_resume+0x80>)
    3966:	220c      	movs	r2, #12
    3968:	fb02 5204 	mla	r2, r2, r4, r5
    396c:	ca07      	ldmia	r2, {r0, r1, r2}
    396e:	ab01      	add	r3, sp, #4
    3970:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    3974:	4a0e      	ldr	r2, [pc, #56]	; (39b0 <pm_system_resume+0x84>)
    3976:	b17a      	cbz	r2, 3998 <pm_system_resume+0x6c>
		pm_power_state_exit_post_ops(info);
    3978:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    397c:	f013 fc96 	bl	172ac <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    3980:	2000      	movs	r0, #0
    3982:	f7ff ff8d 	bl	38a0 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    3986:	230c      	movs	r3, #12
    3988:	435c      	muls	r4, r3
    398a:	192a      	adds	r2, r5, r4
    398c:	2300      	movs	r3, #0
    398e:	512b      	str	r3, [r5, r4]
    3990:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    3994:	b005      	add	sp, #20
    3996:	bd30      	pop	{r4, r5, pc}
    3998:	f382 8811 	msr	BASEPRI, r2
    399c:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    39a0:	e7ee      	b.n	3980 <pm_system_resume+0x54>
    39a2:	bf00      	nop
    39a4:	20002abc 	.word	0x20002abc
    39a8:	200018e0 	.word	0x200018e0
    39ac:	200018d0 	.word	0x200018d0
    39b0:	000172ad 	.word	0x000172ad

000039b4 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    39b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    39b8:	4b35      	ldr	r3, [pc, #212]	; (3a90 <pm_system_suspend+0xdc>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    39ba:	4a36      	ldr	r2, [pc, #216]	; (3a94 <pm_system_suspend+0xe0>)
    39bc:	7d1c      	ldrb	r4, [r3, #20]
    39be:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    39c2:	0963      	lsrs	r3, r4, #5
    39c4:	ea4f 0983 	mov.w	r9, r3, lsl #2
    39c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    39cc:	4d32      	ldr	r5, [pc, #200]	; (3a98 <pm_system_suspend+0xe4>)
    39ce:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    39d2:	f004 081f 	and.w	r8, r4, #31
    39d6:	fa43 f308 	asr.w	r3, r3, r8

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    39da:	f013 0f01 	tst.w	r3, #1
{
    39de:	b085      	sub	sp, #20
    39e0:	4607      	mov	r7, r0
	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    39e2:	d10a      	bne.n	39fa <pm_system_suspend+0x46>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
    39e4:	4601      	mov	r1, r0
    39e6:	4620      	mov	r0, r4
    39e8:	f000 f876 	bl	3ad8 <pm_policy_next_state>
		if (info != NULL) {
    39ec:	b128      	cbz	r0, 39fa <pm_system_suspend+0x46>
			z_cpus_pm_state[id] = *info;
    39ee:	c807      	ldmia	r0, {r0, r1, r2}
    39f0:	230c      	movs	r3, #12
    39f2:	fb03 5304 	mla	r3, r3, r4, r5
    39f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    39fa:	230c      	movs	r3, #12
    39fc:	4363      	muls	r3, r4
    39fe:	18ea      	adds	r2, r5, r3
    3a00:	5cee      	ldrb	r6, [r5, r3]
    3a02:	b936      	cbnz	r6, 3a12 <pm_system_suspend+0x5e>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
    3a04:	4620      	mov	r0, r4
    3a06:	f7ff ff79 	bl	38fc <atomic_clear_bit.constprop.0>
		ret = false;
    3a0a:	4630      	mov	r0, r6
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    3a0c:	b005      	add	sp, #20
    3a0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
    3a12:	1c7b      	adds	r3, r7, #1
    3a14:	d00f      	beq.n	3a36 <pm_system_suspend+0x82>
			return (uint32_t)((t * to_hz + off) / from_hz);
    3a16:	f8d2 c008 	ldr.w	ip, [r2, #8]
    3a1a:	4820      	ldr	r0, [pc, #128]	; (3a9c <pm_system_suspend+0xe8>)
    3a1c:	4a20      	ldr	r2, [pc, #128]	; (3aa0 <pm_system_suspend+0xec>)
    3a1e:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    3a22:	2100      	movs	r1, #0
    3a24:	2300      	movs	r3, #0
    3a26:	fbec 0106 	umlal	r0, r1, ip, r6
    3a2a:	f7fc ffc7 	bl	9bc <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    3a2e:	2101      	movs	r1, #1
    3a30:	1a38      	subs	r0, r7, r0
    3a32:	f01a ffee 	bl	1ea12 <z_set_timeout_expiry>
	k_sched_lock();
    3a36:	f012 f8a5 	bl	15b84 <k_sched_lock>
	pm_state_notify(true);
    3a3a:	2001      	movs	r0, #1
    3a3c:	f7ff ff30 	bl	38a0 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3a40:	f3bf 8f5b 	dmb	ish
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    3a44:	2301      	movs	r3, #1
    3a46:	fa03 f808 	lsl.w	r8, r3, r8
    3a4a:	4b16      	ldr	r3, [pc, #88]	; (3aa4 <pm_system_suspend+0xf0>)
    3a4c:	4499      	add	r9, r3
    3a4e:	e859 3f00 	ldrex	r3, [r9]
    3a52:	ea43 0308 	orr.w	r3, r3, r8
    3a56:	e849 3200 	strex	r2, r3, [r9]
    3a5a:	2a00      	cmp	r2, #0
    3a5c:	d1f7      	bne.n	3a4e <pm_system_suspend+0x9a>
    3a5e:	f3bf 8f5b 	dmb	ish
	pm_state_set(z_cpus_pm_state[id]);
    3a62:	230c      	movs	r3, #12
    3a64:	fb03 5504 	mla	r5, r3, r4, r5
    3a68:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    3a6c:	ab01      	add	r3, sp, #4
    3a6e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    3a72:	4a0d      	ldr	r2, [pc, #52]	; (3aa8 <pm_system_suspend+0xf4>)
    3a74:	b11a      	cbz	r2, 3a7e <pm_system_suspend+0xca>
		pm_power_state_set(info);
    3a76:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    3a7a:	f013 fc04 	bl	17286 <pm_power_state_set>
	pm_system_resume();
    3a7e:	f7ff ff55 	bl	392c <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
    3a82:	4620      	mov	r0, r4
    3a84:	f7ff ff3a 	bl	38fc <atomic_clear_bit.constprop.0>
	k_sched_unlock();
    3a88:	f012 fa02 	bl	15e90 <k_sched_unlock>
	bool ret = true;
    3a8c:	2001      	movs	r0, #1
    3a8e:	e7bd      	b.n	3a0c <pm_system_suspend+0x58>
    3a90:	20002abc 	.word	0x20002abc
    3a94:	200018dc 	.word	0x200018dc
    3a98:	200018d0 	.word	0x200018d0
    3a9c:	000f423f 	.word	0x000f423f
    3aa0:	000f4240 	.word	0x000f4240
    3aa4:	200018e0 	.word	0x200018e0
    3aa8:	00017287 	.word	0x00017287

00003aac <pm_constraint_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3aac:	4b05      	ldr	r3, [pc, #20]	; (3ac4 <pm_constraint_get+0x18>)
    3aae:	f3bf 8f5b 	dmb	ish
    3ab2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    3ab6:	f3bf 8f5b 	dmb	ish
__weak bool pm_constraint_get(enum pm_state state)
{
	__ASSERT(state < PM_STATE_COUNT, "Invalid power state!");

	return (atomic_get(&power_state_disable_count[state]) == 0);
}
    3aba:	fab0 f080 	clz	r0, r0
    3abe:	0940      	lsrs	r0, r0, #5
    3ac0:	4770      	bx	lr
    3ac2:	bf00      	nop
    3ac4:	200018e4 	.word	0x200018e4

00003ac8 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    3ac8:	b908      	cbnz	r0, 3ace <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    3aca:	4b02      	ldr	r3, [pc, #8]	; (3ad4 <pm_state_cpu_get_all+0xc>)
    3acc:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    3ace:	2000      	movs	r0, #0
    3ad0:	4770      	bx	lr
    3ad2:	bf00      	nop
    3ad4:	0001f380 	.word	0x0001f380

00003ad8 <pm_policy_next_state>:

#include <logging/log.h>
LOG_MODULE_DECLARE(pm, CONFIG_PM_LOG_LEVEL);

const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    3ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3adc:	b085      	sub	sp, #20
    3ade:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    3ae0:	a903      	add	r1, sp, #12
    3ae2:	f7ff fff1 	bl	3ac8 <pm_state_cpu_get_all>
    3ae6:	f8df a074 	ldr.w	sl, [pc, #116]	; 3b5c <pm_policy_next_state+0x84>
    3aea:	f8df 8074 	ldr.w	r8, [pc, #116]	; 3b60 <pm_policy_next_state+0x88>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    3aee:	1e44      	subs	r4, r0, #1
    3af0:	b224      	sxth	r4, r4
    3af2:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    3af6:	f04f 0900 	mov.w	r9, #0
    3afa:	1c63      	adds	r3, r4, #1
    3afc:	d104      	bne.n	3b08 <pm_policy_next_state+0x30>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    3afe:	2500      	movs	r5, #0
}
    3b00:	4628      	mov	r0, r5
    3b02:	b005      	add	sp, #20
    3b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
    3b08:	9a03      	ldr	r2, [sp, #12]
    3b0a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    3b0e:	eb02 0583 	add.w	r5, r2, r3, lsl #2
		if (!pm_constraint_get(state->state)) {
    3b12:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
    3b16:	f7ff ffc9 	bl	3aac <pm_constraint_get>
    3b1a:	b1e0      	cbz	r0, 3b56 <pm_policy_next_state+0x7e>
    3b1c:	6868      	ldr	r0, [r5, #4]
    3b1e:	f04f 0b00 	mov.w	fp, #0
    3b22:	46d4      	mov	ip, sl
    3b24:	4659      	mov	r1, fp
    3b26:	fbe0 c107 	umlal	ip, r1, r0, r7
    3b2a:	4642      	mov	r2, r8
    3b2c:	464b      	mov	r3, r9
    3b2e:	4660      	mov	r0, ip
    3b30:	f7fc ff44 	bl	9bc <__aeabi_uldivmod>
    3b34:	9001      	str	r0, [sp, #4]
    3b36:	68a8      	ldr	r0, [r5, #8]
    3b38:	46d4      	mov	ip, sl
    3b3a:	4659      	mov	r1, fp
    3b3c:	fbe0 c107 	umlal	ip, r1, r0, r7
    3b40:	4642      	mov	r2, r8
    3b42:	464b      	mov	r3, r9
    3b44:	4660      	mov	r0, ip
    3b46:	f7fc ff39 	bl	9bc <__aeabi_uldivmod>
		if ((ticks == K_TICKS_FOREVER) ||
    3b4a:	1c72      	adds	r2, r6, #1
    3b4c:	d0d8      	beq.n	3b00 <pm_policy_next_state+0x28>
		    (ticks >= (min_residency + exit_latency))) {
    3b4e:	9b01      	ldr	r3, [sp, #4]
    3b50:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    3b52:	42b0      	cmp	r0, r6
    3b54:	d9d4      	bls.n	3b00 <pm_policy_next_state+0x28>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    3b56:	3c01      	subs	r4, #1
    3b58:	b224      	sxth	r4, r4
    3b5a:	e7ce      	b.n	3afa <pm_policy_next_state+0x22>
    3b5c:	000f423f 	.word	0x000f423f
    3b60:	000f4240 	.word	0x000f4240

00003b64 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
    3b64:	4904      	ldr	r1, [pc, #16]	; (3b78 <sub_bytes+0x14>)
    3b66:	1e43      	subs	r3, r0, #1
    3b68:	300f      	adds	r0, #15
    3b6a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    3b6e:	5c8a      	ldrb	r2, [r1, r2]
    3b70:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    3b72:	4283      	cmp	r3, r0
    3b74:	d1f9      	bne.n	3b6a <sub_bytes+0x6>
	}
}
    3b76:	4770      	bx	lr
    3b78:	000200b4 	.word	0x000200b4

00003b7c <tc_aes128_set_encrypt_key>:
{
    3b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
    3b7e:	4e26      	ldr	r6, [pc, #152]	; (3c18 <tc_aes128_set_encrypt_key+0x9c>)
{
    3b80:	4607      	mov	r7, r0
    3b82:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    3b84:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
    3b86:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    3b88:	ad01      	add	r5, sp, #4
    3b8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    3b8c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    3b8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    3b90:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    3b94:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
    3b98:	4638      	mov	r0, r7
    3b9a:	2f00      	cmp	r7, #0
    3b9c:	d038      	beq.n	3c10 <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
    3b9e:	2c00      	cmp	r4, #0
    3ba0:	d038      	beq.n	3c14 <tc_aes128_set_encrypt_key+0x98>
    3ba2:	1f38      	subs	r0, r7, #4
    3ba4:	4621      	mov	r1, r4
    3ba6:	4602      	mov	r2, r0
    3ba8:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    3baa:	784b      	ldrb	r3, [r1, #1]
    3bac:	780d      	ldrb	r5, [r1, #0]
    3bae:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    3bb0:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    3bb4:	78cd      	ldrb	r5, [r1, #3]
    3bb6:	432b      	orrs	r3, r5
    3bb8:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
    3bba:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    3bbc:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
    3bc0:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    3bc2:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    3bc6:	d1f0      	bne.n	3baa <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    3bc8:	4c14      	ldr	r4, [pc, #80]	; (3c1c <tc_aes128_set_encrypt_key+0xa0>)
    3bca:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
    3bcc:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    3bce:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    3bd0:	d116      	bne.n	3c00 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    3bd2:	f3c3 4207 	ubfx	r2, r3, #16, #8
    3bd6:	5ca5      	ldrb	r5, [r4, r2]
    3bd8:	0e1a      	lsrs	r2, r3, #24
    3bda:	5ca2      	ldrb	r2, [r4, r2]
    3bdc:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    3be0:	f3c3 2507 	ubfx	r5, r3, #8, #8
    3be4:	b2db      	uxtb	r3, r3
    3be6:	5d65      	ldrb	r5, [r4, r5]
    3be8:	5ce3      	ldrb	r3, [r4, r3]
    3bea:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    3bee:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    3bf2:	ad0c      	add	r5, sp, #48	; 0x30
    3bf4:	f021 0303 	bic.w	r3, r1, #3
    3bf8:	442b      	add	r3, r5
    3bfa:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    3bfe:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
    3c00:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    3c04:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    3c06:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    3c08:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    3c0a:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    3c0c:	d1de      	bne.n	3bcc <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
    3c0e:	2001      	movs	r0, #1
}
    3c10:	b00d      	add	sp, #52	; 0x34
    3c12:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    3c14:	4620      	mov	r0, r4
    3c16:	e7fb      	b.n	3c10 <tc_aes128_set_encrypt_key+0x94>
    3c18:	0001f240 	.word	0x0001f240
    3c1c:	000200b4 	.word	0x000200b4

00003c20 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    3c20:	4901      	ldr	r1, [pc, #4]	; (3c28 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    3c22:	2210      	movs	r2, #16
	str	r2, [r1]
    3c24:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    3c26:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    3c28:	e000ed10 	.word	0xe000ed10

00003c2c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    3c2c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    3c2e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    3c30:	f380 8811 	msr	BASEPRI, r0
	isb
    3c34:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    3c38:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    3c3c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    3c3e:	b662      	cpsie	i
	isb
    3c40:	f3bf 8f6f 	isb	sy

	bx	lr
    3c44:	4770      	bx	lr
    3c46:	bf00      	nop

00003c48 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    3c48:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    3c4a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    3c4c:	f381 8811 	msr	BASEPRI, r1

	wfe
    3c50:	bf20      	wfe

	msr	BASEPRI, r0
    3c52:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    3c56:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    3c58:	4770      	bx	lr
    3c5a:	bf00      	nop

00003c5c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    3c5c:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    3c5e:	2b00      	cmp	r3, #0
    3c60:	db08      	blt.n	3c74 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3c62:	2201      	movs	r2, #1
    3c64:	f000 001f 	and.w	r0, r0, #31
    3c68:	fa02 f000 	lsl.w	r0, r2, r0
    3c6c:	095b      	lsrs	r3, r3, #5
    3c6e:	4a02      	ldr	r2, [pc, #8]	; (3c78 <arch_irq_enable+0x1c>)
    3c70:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    3c74:	4770      	bx	lr
    3c76:	bf00      	nop
    3c78:	e000e100 	.word	0xe000e100

00003c7c <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    3c7c:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    3c7e:	2b00      	cmp	r3, #0
    3c80:	db0d      	blt.n	3c9e <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3c82:	2201      	movs	r2, #1
    3c84:	095b      	lsrs	r3, r3, #5
    3c86:	f000 001f 	and.w	r0, r0, #31
    3c8a:	fa02 f000 	lsl.w	r0, r2, r0
    3c8e:	3320      	adds	r3, #32
    3c90:	4a03      	ldr	r2, [pc, #12]	; (3ca0 <arch_irq_disable+0x24>)
    3c92:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    3c96:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3c9a:	f3bf 8f6f 	isb	sy
}
    3c9e:	4770      	bx	lr
    3ca0:	e000e100 	.word	0xe000e100

00003ca4 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    3ca4:	4b05      	ldr	r3, [pc, #20]	; (3cbc <arch_irq_is_enabled+0x18>)
    3ca6:	0942      	lsrs	r2, r0, #5
    3ca8:	f000 001f 	and.w	r0, r0, #31
    3cac:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3cb0:	2301      	movs	r3, #1
    3cb2:	fa03 f000 	lsl.w	r0, r3, r0
}
    3cb6:	4010      	ands	r0, r2
    3cb8:	4770      	bx	lr
    3cba:	bf00      	nop
    3cbc:	e000e100 	.word	0xe000e100

00003cc0 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    3cc0:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    3cc2:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3cc4:	bfa8      	it	ge
    3cc6:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    3cca:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3cce:	bfb8      	it	lt
    3cd0:	4b06      	ldrlt	r3, [pc, #24]	; (3cec <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3cd2:	ea4f 1141 	mov.w	r1, r1, lsl #5
    3cd6:	bfac      	ite	ge
    3cd8:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3cdc:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3ce0:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3ce2:	bfb4      	ite	lt
    3ce4:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3ce6:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    3cea:	4770      	bx	lr
    3cec:	e000ed14 	.word	0xe000ed14

00003cf0 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
    3cf0:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    3cf2:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    3cf4:	4b04      	ldr	r3, [pc, #16]	; (3d08 <_arch_isr_direct_pm+0x18>)
    3cf6:	699a      	ldr	r2, [r3, #24]
    3cf8:	b11a      	cbz	r2, 3d02 <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
    3cfa:	2200      	movs	r2, #0
    3cfc:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
    3cfe:	f01a fb8e 	bl	1e41e <z_pm_save_idle_exit>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    3d02:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    3d04:	bd08      	pop	{r3, pc}
    3d06:	bf00      	nop
    3d08:	20002abc 	.word	0x20002abc

00003d0c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    3d0c:	bf30      	wfi
    b z_SysNmiOnReset
    3d0e:	f7ff bffd 	b.w	3d0c <z_SysNmiOnReset>
    3d12:	bf00      	nop

00003d14 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    3d14:	4a0f      	ldr	r2, [pc, #60]	; (3d54 <z_arm_prep_c+0x40>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    3d16:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    3d18:	4b0f      	ldr	r3, [pc, #60]	; (3d58 <z_arm_prep_c+0x44>)
    3d1a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    3d1e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    3d20:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3d24:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    3d28:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    3d2c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    3d30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
    3d34:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    3d38:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    3d3c:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
    3d40:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    3d44:	f011 face 	bl	152e4 <z_bss_zero>
	z_data_copy();
    3d48:	f012 f9e6 	bl	16118 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    3d4c:	f000 f9ca 	bl	40e4 <z_arm_interrupt_init>
	z_cstart();
    3d50:	f011 fad2 	bl	152f8 <z_cstart>
    3d54:	00000000 	.word	0x00000000
    3d58:	e000ed00 	.word	0xe000ed00

00003d5c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    3d5c:	4a09      	ldr	r2, [pc, #36]	; (3d84 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    3d5e:	490a      	ldr	r1, [pc, #40]	; (3d88 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    3d60:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    3d62:	6809      	ldr	r1, [r1, #0]
    3d64:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3d66:	4909      	ldr	r1, [pc, #36]	; (3d8c <arch_swap+0x30>)
	_current->arch.basepri = key;
    3d68:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3d6a:	684b      	ldr	r3, [r1, #4]
    3d6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3d70:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    3d72:	2300      	movs	r3, #0
    3d74:	f383 8811 	msr	BASEPRI, r3
    3d78:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    3d7c:	6893      	ldr	r3, [r2, #8]
}
    3d7e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    3d80:	4770      	bx	lr
    3d82:	bf00      	nop
    3d84:	20002abc 	.word	0x20002abc
    3d88:	0001fc48 	.word	0x0001fc48
    3d8c:	e000ed00 	.word	0xe000ed00

00003d90 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    3d90:	4912      	ldr	r1, [pc, #72]	; (3ddc <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    3d92:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    3d94:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    3d98:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    3d9a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    3d9e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3da2:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    3da4:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    3da8:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    3dac:	4f0c      	ldr	r7, [pc, #48]	; (3de0 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    3dae:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    3db2:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    3db4:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    3db6:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    3db8:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    3dba:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    3dbc:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    3dbe:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    3dc2:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    3dc4:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    3dc6:	f000 f9cf 	bl	4168 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    3dca:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    3dce:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    3dd2:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    3dd6:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    3dda:	4770      	bx	lr
    ldr r1, =_kernel
    3ddc:	20002abc 	.word	0x20002abc
    ldr v4, =_SCS_ICSR
    3de0:	e000ed04 	.word	0xe000ed04

00003de4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    3de4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    3de8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    3dea:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    3dee:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    3df2:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    3df4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    3df8:	2902      	cmp	r1, #2
    beq _oops
    3dfa:	d0ff      	beq.n	3dfc <_oops>

00003dfc <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    3dfc:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    3dfe:	f013 f9e3 	bl	171c8 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    3e02:	bd01      	pop	{r0, pc}

00003e04 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    3e04:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    3e08:	9b00      	ldr	r3, [sp, #0]
    3e0a:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    3e0e:	490a      	ldr	r1, [pc, #40]	; (3e38 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    3e10:	9b01      	ldr	r3, [sp, #4]
    3e12:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    3e16:	9b02      	ldr	r3, [sp, #8]
    3e18:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    3e1c:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    3e20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    3e24:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    3e28:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    3e2c:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    3e2e:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    3e30:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    3e32:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    3e34:	4770      	bx	lr
    3e36:	bf00      	nop
    3e38:	0001680d 	.word	0x0001680d

00003e3c <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    3e3c:	4a09      	ldr	r2, [pc, #36]	; (3e64 <z_check_thread_stack_fail+0x28>)
{
    3e3e:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    3e40:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    3e42:	b170      	cbz	r0, 3e62 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    3e44:	f113 0f16 	cmn.w	r3, #22
    3e48:	6e80      	ldr	r0, [r0, #104]	; 0x68
    3e4a:	d005      	beq.n	3e58 <z_check_thread_stack_fail+0x1c>
    3e4c:	f1a0 0220 	sub.w	r2, r0, #32
    3e50:	429a      	cmp	r2, r3
    3e52:	d805      	bhi.n	3e60 <z_check_thread_stack_fail+0x24>
    3e54:	4283      	cmp	r3, r0
    3e56:	d203      	bcs.n	3e60 <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    3e58:	4281      	cmp	r1, r0
    3e5a:	bf28      	it	cs
    3e5c:	2000      	movcs	r0, #0
    3e5e:	4770      	bx	lr
    3e60:	2000      	movs	r0, #0
}
    3e62:	4770      	bx	lr
    3e64:	20002abc 	.word	0x20002abc

00003e68 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    3e68:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    3e6a:	4b09      	ldr	r3, [pc, #36]	; (3e90 <arch_switch_to_main_thread+0x28>)
    3e6c:	6098      	str	r0, [r3, #8]
{
    3e6e:	460d      	mov	r5, r1
    3e70:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    3e72:	f000 f979 	bl	4168 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    3e76:	4620      	mov	r0, r4
    3e78:	f385 8809 	msr	PSP, r5
    3e7c:	2100      	movs	r1, #0
    3e7e:	b663      	cpsie	if
    3e80:	f381 8811 	msr	BASEPRI, r1
    3e84:	f3bf 8f6f 	isb	sy
    3e88:	2200      	movs	r2, #0
    3e8a:	2300      	movs	r3, #0
    3e8c:	f012 fcbe 	bl	1680c <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    3e90:	20002abc 	.word	0x20002abc

00003e94 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    3e94:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    3e96:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    3e98:	4a0b      	ldr	r2, [pc, #44]	; (3ec8 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    3e9a:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    3e9c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    3e9e:	bf1e      	ittt	ne
	movne	r1, #0
    3ea0:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    3ea2:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    3ea4:	f01a fabb 	blne	1e41e <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    3ea8:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    3eaa:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    3eae:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    3eb2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    3eb6:	4905      	ldr	r1, [pc, #20]	; (3ecc <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    3eb8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    3eba:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    3ebc:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    3ebe:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    3ec2:	4903      	ldr	r1, [pc, #12]	; (3ed0 <_isr_wrapper+0x3c>)
	bx r1
    3ec4:	4708      	bx	r1
    3ec6:	0000      	.short	0x0000
	ldr r2, =_kernel
    3ec8:	20002abc 	.word	0x20002abc
	ldr r1, =_sw_isr_table
    3ecc:	0001f004 	.word	0x0001f004
	ldr r1, =z_arm_int_exit
    3ed0:	00003ed5 	.word	0x00003ed5

00003ed4 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    3ed4:	4b04      	ldr	r3, [pc, #16]	; (3ee8 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    3ed6:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    3ed8:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    3eda:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    3edc:	d003      	beq.n	3ee6 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    3ede:	4903      	ldr	r1, [pc, #12]	; (3eec <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    3ee0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    3ee4:	600a      	str	r2, [r1, #0]

00003ee6 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    3ee6:	4770      	bx	lr
	ldr r3, =_kernel
    3ee8:	20002abc 	.word	0x20002abc
	ldr r1, =_SCS_ICSR
    3eec:	e000ed04 	.word	0xe000ed04

00003ef0 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    3ef0:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    3ef2:	4b19      	ldr	r3, [pc, #100]	; (3f58 <mem_manage_fault+0x68>)
{
    3ef4:	4614      	mov	r4, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    3ef6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    3ef8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    3efa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
    3efc:	4605      	mov	r5, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    3efe:	0790      	lsls	r0, r2, #30
    3f00:	d519      	bpl.n	3f36 <mem_manage_fault+0x46>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    3f02:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    3f04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3f06:	0612      	lsls	r2, r2, #24
    3f08:	d515      	bpl.n	3f36 <mem_manage_fault+0x46>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    3f0a:	b119      	cbz	r1, 3f14 <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    3f0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3f0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    3f12:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    3f14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    3f16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    3f18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3f1a:	06d1      	lsls	r1, r2, #27
    3f1c:	d40e      	bmi.n	3f3c <mem_manage_fault+0x4c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    3f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    3f20:	079a      	lsls	r2, r3, #30
    3f22:	d40b      	bmi.n	3f3c <mem_manage_fault+0x4c>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    3f24:	2000      	movs	r0, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    3f26:	4a0c      	ldr	r2, [pc, #48]	; (3f58 <mem_manage_fault+0x68>)
    3f28:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3f2a:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    3f2e:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    3f30:	2300      	movs	r3, #0
    3f32:	7023      	strb	r3, [r4, #0]

	return reason;
}
    3f34:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t mmfar = -EINVAL;
    3f36:	f06f 0015 	mvn.w	r0, #21
    3f3a:	e7eb      	b.n	3f14 <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    3f3c:	4b06      	ldr	r3, [pc, #24]	; (3f58 <mem_manage_fault+0x68>)
    3f3e:	685b      	ldr	r3, [r3, #4]
    3f40:	051b      	lsls	r3, r3, #20
    3f42:	d5ef      	bpl.n	3f24 <mem_manage_fault+0x34>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    3f44:	4629      	mov	r1, r5
    3f46:	f7ff ff79 	bl	3e3c <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    3f4a:	2800      	cmp	r0, #0
    3f4c:	d0ea      	beq.n	3f24 <mem_manage_fault+0x34>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    3f4e:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    3f52:	2002      	movs	r0, #2
    3f54:	e7e7      	b.n	3f26 <mem_manage_fault+0x36>
    3f56:	bf00      	nop
    3f58:	e000ed00 	.word	0xe000ed00

00003f5c <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    3f5c:	4b0d      	ldr	r3, [pc, #52]	; (3f94 <bus_fault.constprop.0+0x38>)
    3f5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    3f60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    3f62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3f64:	0592      	lsls	r2, r2, #22
    3f66:	d508      	bpl.n	3f7a <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    3f68:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    3f6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3f6c:	0412      	lsls	r2, r2, #16
    3f6e:	d504      	bpl.n	3f7a <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    3f70:	b118      	cbz	r0, 3f7a <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    3f72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3f74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    3f78:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    3f7a:	4b06      	ldr	r3, [pc, #24]	; (3f94 <bus_fault.constprop.0+0x38>)
    3f7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    3f7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3f80:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    3f82:	bf58      	it	pl
    3f84:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    3f86:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    3f88:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    3f8a:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    3f8e:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    3f90:	7008      	strb	r0, [r1, #0]

	return reason;
}
    3f92:	4770      	bx	lr
    3f94:	e000ed00 	.word	0xe000ed00

00003f98 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    3f98:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    3f9a:	4b48      	ldr	r3, [pc, #288]	; (40bc <z_arm_fault+0x124>)
    3f9c:	685b      	ldr	r3, [r3, #4]
{
    3f9e:	b08a      	sub	sp, #40	; 0x28
    3fa0:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    3fa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
    3fa6:	2600      	movs	r6, #0
    3fa8:	f386 8811 	msr	BASEPRI, r6
    3fac:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    3fb0:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
    3fb4:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
    3fb8:	d111      	bne.n	3fde <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    3fba:	f002 010c 	and.w	r1, r2, #12
    3fbe:	2908      	cmp	r1, #8
    3fc0:	d00d      	beq.n	3fde <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    3fc2:	0711      	lsls	r1, r2, #28
    3fc4:	d401      	bmi.n	3fca <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    3fc6:	4605      	mov	r5, r0
			*nested_exc = true;
    3fc8:	2601      	movs	r6, #1
	*recoverable = false;
    3fca:	2200      	movs	r2, #0
	switch (fault) {
    3fcc:	3b03      	subs	r3, #3
	*recoverable = false;
    3fce:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    3fd2:	2b03      	cmp	r3, #3
    3fd4:	d86b      	bhi.n	40ae <z_arm_fault+0x116>
    3fd6:	e8df f003 	tbb	[pc, r3]
    3fda:	5504      	.short	0x5504
    3fdc:	5d59      	.short	0x5d59
		return NULL;
    3fde:	4635      	mov	r5, r6
    3fe0:	e7f3      	b.n	3fca <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    3fe2:	4b36      	ldr	r3, [pc, #216]	; (40bc <z_arm_fault+0x124>)
    3fe4:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    3fe6:	f014 0402 	ands.w	r4, r4, #2
    3fea:	d160      	bne.n	40ae <z_arm_fault+0x116>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    3fec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3fee:	2a00      	cmp	r2, #0
    3ff0:	db15      	blt.n	401e <z_arm_fault+0x86>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    3ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3ff4:	0052      	lsls	r2, r2, #1
    3ff6:	d512      	bpl.n	401e <z_arm_fault+0x86>
	uint16_t fault_insn = *(ret_addr - 1);
    3ff8:	69aa      	ldr	r2, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    3ffa:	f832 1c02 	ldrh.w	r1, [r2, #-2]
    3ffe:	f64d 7202 	movw	r2, #57090	; 0xdf02
    4002:	4291      	cmp	r1, r2
    4004:	d00a      	beq.n	401c <z_arm_fault+0x84>
		} else if (SCB_MMFSR != 0) {
    4006:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    400a:	b30a      	cbz	r2, 4050 <z_arm_fault+0xb8>
			reason = mem_manage_fault(esf, 1, recoverable);
    400c:	f10d 0207 	add.w	r2, sp, #7
    4010:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    4012:	4628      	mov	r0, r5
    4014:	f7ff ff6c 	bl	3ef0 <mem_manage_fault>
		reason = bus_fault(esf, 0, recoverable);
    4018:	4604      	mov	r4, r0
		break;
    401a:	e000      	b.n	401e <z_arm_fault+0x86>
			reason = esf->basic.r0;
    401c:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    401e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    4022:	b99b      	cbnz	r3, 404c <z_arm_fault+0xb4>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    4024:	2220      	movs	r2, #32
    4026:	4629      	mov	r1, r5
    4028:	a802      	add	r0, sp, #8
    402a:	f013 f913 	bl	17254 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    402e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4030:	2e00      	cmp	r6, #0
    4032:	d03e      	beq.n	40b2 <z_arm_fault+0x11a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    4034:	f3c3 0208 	ubfx	r2, r3, #0, #9
    4038:	b922      	cbnz	r2, 4044 <z_arm_fault+0xac>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    403a:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    403e:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    4042:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    4044:	a902      	add	r1, sp, #8
    4046:	4620      	mov	r0, r4
    4048:	f013 f8bc 	bl	171c4 <z_arm_fatal_error>
}
    404c:	b00a      	add	sp, #40	; 0x28
    404e:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
    4050:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
    4054:	b12a      	cbz	r2, 4062 <z_arm_fault+0xca>
			reason = bus_fault(esf, 1, recoverable);
    4056:	f10d 0107 	add.w	r1, sp, #7
    405a:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    405c:	f7ff ff7e 	bl	3f5c <bus_fault.constprop.0>
    4060:	e7da      	b.n	4018 <z_arm_fault+0x80>
		} else if (SCB_UFSR != 0) {
    4062:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    4064:	b292      	uxth	r2, r2
    4066:	2a00      	cmp	r2, #0
    4068:	d0d9      	beq.n	401e <z_arm_fault+0x86>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    406a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    406c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    406e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    4070:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    4072:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    4074:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    4076:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4078:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    407c:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    4080:	629a      	str	r2, [r3, #40]	; 0x28
	return reason;
    4082:	e7cc      	b.n	401e <z_arm_fault+0x86>
		reason = mem_manage_fault(esf, 0, recoverable);
    4084:	f10d 0207 	add.w	r2, sp, #7
    4088:	2100      	movs	r1, #0
    408a:	e7c2      	b.n	4012 <z_arm_fault+0x7a>
		reason = bus_fault(esf, 0, recoverable);
    408c:	f10d 0107 	add.w	r1, sp, #7
    4090:	2000      	movs	r0, #0
    4092:	e7e3      	b.n	405c <z_arm_fault+0xc4>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    4094:	4b09      	ldr	r3, [pc, #36]	; (40bc <z_arm_fault+0x124>)
    4096:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    4098:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    409a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    409c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    409e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    40a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    40a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    40a4:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    40a8:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    40ac:	629a      	str	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    40ae:	2400      	movs	r4, #0
    40b0:	e7b5      	b.n	401e <z_arm_fault+0x86>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    40b2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    40b6:	f023 0301 	bic.w	r3, r3, #1
    40ba:	e7c2      	b.n	4042 <z_arm_fault+0xaa>
    40bc:	e000ed00 	.word	0xe000ed00

000040c0 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    40c0:	4a02      	ldr	r2, [pc, #8]	; (40cc <z_arm_fault_init+0xc>)
    40c2:	6953      	ldr	r3, [r2, #20]
    40c4:	f043 0310 	orr.w	r3, r3, #16
    40c8:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    40ca:	4770      	bx	lr
    40cc:	e000ed00 	.word	0xe000ed00

000040d0 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    40d0:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    40d4:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    40d8:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    40da:	4672      	mov	r2, lr
	bl z_arm_fault
    40dc:	f7ff ff5c 	bl	3f98 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    40e0:	bd01      	pop	{r0, pc}
    40e2:	bf00      	nop

000040e4 <z_arm_interrupt_init>:
    40e4:	4804      	ldr	r0, [pc, #16]	; (40f8 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    40e6:	2300      	movs	r3, #0
    40e8:	2120      	movs	r1, #32
    40ea:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    40ec:	3301      	adds	r3, #1
    40ee:	2b27      	cmp	r3, #39	; 0x27
    40f0:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    40f4:	d1f9      	bne.n	40ea <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    40f6:	4770      	bx	lr
    40f8:	e000e100 	.word	0xe000e100

000040fc <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    40fc:	f01a fe2c 	bl	1ed58 <z_arm_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    4100:	2020      	movs	r0, #32
    msr BASEPRI, r0
    4102:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    4106:	4808      	ldr	r0, [pc, #32]	; (4128 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    4108:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    410c:	1840      	adds	r0, r0, r1
    msr PSP, r0
    410e:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    4112:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    4116:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    4118:	4308      	orrs	r0, r1
    msr CONTROL, r0
    411a:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    411e:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    4122:	f7ff fdf7 	bl	3d14 <z_arm_prep_c>
    4126:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    4128:	20004920 	.word	0x20004920

0000412c <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    412c:	4b06      	ldr	r3, [pc, #24]	; (4148 <z_impl_k_thread_abort+0x1c>)
    412e:	689b      	ldr	r3, [r3, #8]
    4130:	4283      	cmp	r3, r0
    4132:	d107      	bne.n	4144 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4134:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    4138:	b123      	cbz	r3, 4144 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    413a:	4a04      	ldr	r2, [pc, #16]	; (414c <z_impl_k_thread_abort+0x20>)
    413c:	6853      	ldr	r3, [r2, #4]
    413e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    4142:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    4144:	f011 bf84 	b.w	16050 <z_thread_abort>
    4148:	20002abc 	.word	0x20002abc
    414c:	e000ed00 	.word	0xe000ed00

00004150 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    4150:	4b02      	ldr	r3, [pc, #8]	; (415c <z_arm_configure_static_mpu_regions+0xc>)
    4152:	4a03      	ldr	r2, [pc, #12]	; (4160 <z_arm_configure_static_mpu_regions+0x10>)
    4154:	4803      	ldr	r0, [pc, #12]	; (4164 <z_arm_configure_static_mpu_regions+0x14>)
    4156:	2101      	movs	r1, #1
    4158:	f000 b86e 	b.w	4238 <arm_core_mpu_configure_static_mpu_regions>
    415c:	20010000 	.word	0x20010000
    4160:	20000000 	.word	0x20000000
    4164:	0001f380 	.word	0x0001f380

00004168 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    4168:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    416a:	4b05      	ldr	r3, [pc, #20]	; (4180 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    416c:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    416e:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    4170:	4a04      	ldr	r2, [pc, #16]	; (4184 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    4172:	2120      	movs	r1, #32
    4174:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    4178:	4618      	mov	r0, r3
    417a:	2101      	movs	r1, #1
    417c:	f000 b866 	b.w	424c <arm_core_mpu_configure_dynamic_mpu_regions>
    4180:	20001900 	.word	0x20001900
    4184:	150b0000 	.word	0x150b0000

00004188 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    4188:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    418a:	4f1f      	ldr	r7, [pc, #124]	; (4208 <mpu_configure_regions+0x80>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    418c:	2600      	movs	r6, #0
    418e:	428e      	cmp	r6, r1
    4190:	db01      	blt.n	4196 <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    4192:	4610      	mov	r0, r2
    4194:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
    4196:	6844      	ldr	r4, [r0, #4]
    4198:	b39c      	cbz	r4, 4202 <mpu_configure_regions+0x7a>
		if (do_sanity_check &&
    419a:	b153      	cbz	r3, 41b2 <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    419c:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    41a0:	ea14 0f0c 	tst.w	r4, ip
    41a4:	d118      	bne.n	41d8 <mpu_configure_regions+0x50>
		&&
    41a6:	2c1f      	cmp	r4, #31
    41a8:	d916      	bls.n	41d8 <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
    41aa:	6805      	ldr	r5, [r0, #0]
		&&
    41ac:	ea1c 0f05 	tst.w	ip, r5
    41b0:	d112      	bne.n	41d8 <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    41b2:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    41b4:	6805      	ldr	r5, [r0, #0]
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    41b6:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    41ba:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
    41bc:	d90f      	bls.n	41de <mpu_configure_regions+0x56>
	if (size > (1UL << 31)) {
    41be:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    41c2:	d80e      	bhi.n	41e2 <mpu_configure_regions+0x5a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    41c4:	3c01      	subs	r4, #1
    41c6:	fab4 f484 	clz	r4, r4
    41ca:	f1c4 041f 	rsb	r4, r4, #31
    41ce:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    41d0:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    41d2:	ea4c 0404 	orr.w	r4, ip, r4
    41d6:	d906      	bls.n	41e6 <mpu_configure_regions+0x5e>
			return -EINVAL;
    41d8:	f06f 0215 	mvn.w	r2, #21
    41dc:	e7d9      	b.n	4192 <mpu_configure_regions+0xa>
		return REGION_32B;
    41de:	2408      	movs	r4, #8
    41e0:	e7f6      	b.n	41d0 <mpu_configure_regions+0x48>
		return REGION_4G;
    41e2:	243e      	movs	r4, #62	; 0x3e
    41e4:	e7f4      	b.n	41d0 <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    41e6:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    41ea:	4315      	orrs	r5, r2
    41ec:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    41f0:	f044 0401 	orr.w	r4, r4, #1
    41f4:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    41f8:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
		reg_index++;
    41fc:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    41fe:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    4202:	3601      	adds	r6, #1
    4204:	300c      	adds	r0, #12
    4206:	e7c2      	b.n	418e <mpu_configure_regions+0x6>
    4208:	e000ed00 	.word	0xe000ed00

0000420c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    420c:	4b04      	ldr	r3, [pc, #16]	; (4220 <arm_core_mpu_enable+0x14>)
    420e:	2205      	movs	r2, #5
    4210:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    4214:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4218:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    421c:	4770      	bx	lr
    421e:	bf00      	nop
    4220:	e000ed00 	.word	0xe000ed00

00004224 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    4224:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    4228:	4b02      	ldr	r3, [pc, #8]	; (4234 <arm_core_mpu_disable+0x10>)
    422a:	2200      	movs	r2, #0
    422c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    4230:	4770      	bx	lr
    4232:	bf00      	nop
    4234:	e000ed00 	.word	0xe000ed00

00004238 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    4238:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    423a:	4c03      	ldr	r4, [pc, #12]	; (4248 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    423c:	2301      	movs	r3, #1
    423e:	7822      	ldrb	r2, [r4, #0]
    4240:	f7ff ffa2 	bl	4188 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    4244:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    4246:	bd10      	pop	{r4, pc}
    4248:	20002b2a 	.word	0x20002b2a

0000424c <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    424c:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    424e:	4a09      	ldr	r2, [pc, #36]	; (4274 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    4250:	2300      	movs	r3, #0
    4252:	7812      	ldrb	r2, [r2, #0]
    4254:	f7ff ff98 	bl	4188 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    4258:	f110 0f16 	cmn.w	r0, #22
    425c:	d002      	beq.n	4264 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    425e:	4a06      	ldr	r2, [pc, #24]	; (4278 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    4260:	2807      	cmp	r0, #7
    4262:	dd00      	ble.n	4266 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    4264:	bd08      	pop	{r3, pc}
    4266:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    426a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
    426e:	3001      	adds	r0, #1
    4270:	e7f6      	b.n	4260 <arm_core_mpu_configure_dynamic_mpu_regions+0x14>
    4272:	bf00      	nop
    4274:	20002b2a 	.word	0x20002b2a
    4278:	e000ed00 	.word	0xe000ed00

0000427c <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    427c:	4914      	ldr	r1, [pc, #80]	; (42d0 <z_arm_mpu_init+0x54>)
    427e:	6808      	ldr	r0, [r1, #0]
    4280:	2808      	cmp	r0, #8
{
    4282:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    4284:	d821      	bhi.n	42ca <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    4286:	f7ff ffcd 	bl	4224 <arm_core_mpu_disable>
    428a:	4c12      	ldr	r4, [pc, #72]	; (42d4 <z_arm_mpu_init+0x58>)
    428c:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    428e:	2200      	movs	r2, #0
    4290:	4290      	cmp	r0, r2
    4292:	f101 010c 	add.w	r1, r1, #12
    4296:	d105      	bne.n	42a4 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    4298:	4b0f      	ldr	r3, [pc, #60]	; (42d8 <z_arm_mpu_init+0x5c>)
    429a:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    429c:	f7ff ffb6 	bl	420c <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    42a0:	2000      	movs	r0, #0
}
    42a2:	bd10      	pop	{r4, pc}
    42a4:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    42a8:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    42ac:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    42b0:	4313      	orrs	r3, r2
    42b2:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    42b6:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    42ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
    42be:	f043 0301 	orr.w	r3, r3, #1
    42c2:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    42c6:	3201      	adds	r2, #1
    42c8:	e7e2      	b.n	4290 <z_arm_mpu_init+0x14>
		return -1;
    42ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    42ce:	e7e8      	b.n	42a2 <z_arm_mpu_init+0x26>
    42d0:	0001f38c 	.word	0x0001f38c
    42d4:	e000ed00 	.word	0xe000ed00
    42d8:	20002b2a 	.word	0x20002b2a

000042dc <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    42dc:	4b01      	ldr	r3, [pc, #4]	; (42e4 <__stdout_hook_install+0x8>)
    42de:	6018      	str	r0, [r3, #0]
}
    42e0:	4770      	bx	lr
    42e2:	bf00      	nop
    42e4:	20000260 	.word	0x20000260

000042e8 <z_impl_zephyr_fputc>:

int z_impl_zephyr_fputc(int c, FILE *stream)
{
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
    42e8:	3902      	subs	r1, #2
    42ea:	2901      	cmp	r1, #1
    42ec:	d802      	bhi.n	42f4 <z_impl_zephyr_fputc+0xc>
    42ee:	4b03      	ldr	r3, [pc, #12]	; (42fc <z_impl_zephyr_fputc+0x14>)
    42f0:	681b      	ldr	r3, [r3, #0]
    42f2:	4718      	bx	r3
}
    42f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    42f8:	4770      	bx	lr
    42fa:	bf00      	nop
    42fc:	20000260 	.word	0x20000260

00004300 <printf>:

	return r;
}

int printf(const char *ZRESTRICT format, ...)
{
    4300:	b40f      	push	{r0, r1, r2, r3}
    4302:	b507      	push	{r0, r1, r2, lr}
    4304:	ab04      	add	r3, sp, #16
	va_list vargs;
	int     r;

	va_start(vargs, format);
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    4306:	2102      	movs	r1, #2
{
    4308:	f853 2b04 	ldr.w	r2, [r3], #4
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    430c:	4804      	ldr	r0, [pc, #16]	; (4320 <printf+0x20>)
	va_start(vargs, format);
    430e:	9301      	str	r3, [sp, #4]
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    4310:	f7fe fc42 	bl	2b98 <cbvprintf>
	va_end(vargs);

	return r;
}
    4314:	b003      	add	sp, #12
    4316:	f85d eb04 	ldr.w	lr, [sp], #4
    431a:	b004      	add	sp, #16
    431c:	4770      	bx	lr
    431e:	bf00      	nop
    4320:	00017283 	.word	0x00017283

00004324 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    4324:	f04f 0220 	mov.w	r2, #32
    4328:	f3ef 8311 	mrs	r3, BASEPRI
    432c:	f382 8812 	msr	BASEPRI_MAX, r2
    4330:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    4334:	4a04      	ldr	r2, [pc, #16]	; (4348 <nordicsemi_nrf52_init+0x24>)
    4336:	2101      	movs	r1, #1
    4338:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    433c:	f383 8811 	msr	BASEPRI, r3
    4340:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    4344:	2000      	movs	r0, #0
    4346:	4770      	bx	lr
    4348:	4001e000 	.word	0x4001e000

0000434c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    434c:	b120      	cbz	r0, 4358 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    434e:	4b03      	ldr	r3, [pc, #12]	; (435c <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    4350:	0180      	lsls	r0, r0, #6
    4352:	f043 0301 	orr.w	r3, r3, #1
    4356:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    4358:	4770      	bx	lr
    435a:	bf00      	nop
    435c:	0001f2b0 	.word	0x0001f2b0

00004360 <pwr_ctrl_init>:
	const char *port;
	uint32_t pin;
};

static int pwr_ctrl_init(const struct device *dev)
{
    4360:	b538      	push	{r3, r4, r5, lr}
	const struct pwr_ctrl_cfg *cfg = dev->config;
    4362:	6844      	ldr	r4, [r0, #4]
	const struct device *gpio;

	gpio = device_get_binding(cfg->port);
    4364:	6820      	ldr	r0, [r4, #0]
    4366:	f010 ff4d 	bl	15204 <z_impl_device_get_binding>
	if (!gpio) {
    436a:	b930      	cbnz	r0, 437a <pwr_ctrl_init+0x1a>
		printk("Could not bind device \"%s\"\n", cfg->port);
    436c:	480d      	ldr	r0, [pc, #52]	; (43a4 <pwr_ctrl_init+0x44>)
    436e:	6821      	ldr	r1, [r4, #0]
    4370:	f012 f943 	bl	165fa <printk>
		return -ENODEV;
    4374:	f06f 0012 	mvn.w	r0, #18
	gpio_pin_configure(gpio, cfg->pin, GPIO_OUTPUT_HIGH);

	k_sleep(K_MSEC(1)); /* Wait for the rail to come up and stabilize */

	return 0;
}
    4378:	bd38      	pop	{r3, r4, r5, pc}
	gpio_pin_configure(gpio, cfg->pin, GPIO_OUTPUT_HIGH);
    437a:	6861      	ldr	r1, [r4, #4]
	struct gpio_driver_data *data =
    437c:	6904      	ldr	r4, [r0, #16]
	const struct gpio_driver_api *api =
    437e:	6885      	ldr	r5, [r0, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    4380:	b2c9      	uxtb	r1, r1
    4382:	2301      	movs	r3, #1
    4384:	fa03 f201 	lsl.w	r2, r3, r1
    4388:	6823      	ldr	r3, [r4, #0]
    438a:	ea23 0302 	bic.w	r3, r3, r2
    438e:	6023      	str	r3, [r4, #0]
	return api->pin_configure(port, pin, flags);
    4390:	f44f 6220 	mov.w	r2, #2560	; 0xa00
    4394:	682b      	ldr	r3, [r5, #0]
    4396:	4798      	blx	r3
    4398:	2021      	movs	r0, #33	; 0x21
    439a:	2100      	movs	r1, #0
    439c:	f011 fe28 	bl	15ff0 <z_impl_k_sleep>
	return 0;
    43a0:	2000      	movs	r0, #0
    43a2:	e7e9      	b.n	4378 <pwr_ctrl_init+0x18>
    43a4:	000201c3 	.word	0x000201c3

000043a8 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    43a8:	b430      	push	{r4, r5}
    43aa:	4603      	mov	r3, r0
    43ac:	4608      	mov	r0, r1
	switch (src->type) {
    43ae:	781a      	ldrb	r2, [r3, #0]
    43b0:	2a01      	cmp	r2, #1
    43b2:	d013      	beq.n	43dc <uuid_to_uuid128+0x34>
    43b4:	2a02      	cmp	r2, #2
    43b6:	d026      	beq.n	4406 <uuid_to_uuid128+0x5e>
    43b8:	b972      	cbnz	r2, 43d8 <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    43ba:	4a15      	ldr	r2, [pc, #84]	; (4410 <uuid_to_uuid128+0x68>)
    43bc:	f102 0410 	add.w	r4, r2, #16
    43c0:	f852 5b04 	ldr.w	r5, [r2], #4
    43c4:	f841 5b04 	str.w	r5, [r1], #4
    43c8:	42a2      	cmp	r2, r4
    43ca:	d1f9      	bne.n	43c0 <uuid_to_uuid128+0x18>
		sys_put_le16(BT_UUID_16(src)->val,
    43cc:	885b      	ldrh	r3, [r3, #2]
		*dst = uuid128_base;
    43ce:	7812      	ldrb	r2, [r2, #0]
    43d0:	700a      	strb	r2, [r1, #0]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
    43d2:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
    43d4:	0a1b      	lsrs	r3, r3, #8
    43d6:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    43d8:	bc30      	pop	{r4, r5}
    43da:	4770      	bx	lr
		*dst = uuid128_base;
    43dc:	4a0c      	ldr	r2, [pc, #48]	; (4410 <uuid_to_uuid128+0x68>)
    43de:	f102 0410 	add.w	r4, r2, #16
    43e2:	f852 5b04 	ldr.w	r5, [r2], #4
    43e6:	f841 5b04 	str.w	r5, [r1], #4
    43ea:	42a2      	cmp	r2, r4
    43ec:	d1f9      	bne.n	43e2 <uuid_to_uuid128+0x3a>
		sys_put_le32(BT_UUID_32(src)->val,
    43ee:	685b      	ldr	r3, [r3, #4]
		*dst = uuid128_base;
    43f0:	7812      	ldrb	r2, [r2, #0]
    43f2:	700a      	strb	r2, [r1, #0]
    43f4:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
    43f8:	7343      	strb	r3, [r0, #13]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    43fa:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    43fc:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
    43fe:	0a1b      	lsrs	r3, r3, #8
    4400:	7382      	strb	r2, [r0, #14]
    4402:	7403      	strb	r3, [r0, #16]
}
    4404:	e7e8      	b.n	43d8 <uuid_to_uuid128+0x30>
}
    4406:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
    4408:	2211      	movs	r2, #17
    440a:	4619      	mov	r1, r3
    440c:	f012 bf22 	b.w	17254 <memcpy>
    4410:	000201ee 	.word	0x000201ee

00004414 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
    4414:	b538      	push	{r3, r4, r5, lr}
    4416:	4605      	mov	r5, r0
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
    4418:	4805      	ldr	r0, [pc, #20]	; (4430 <bt_buf_get_rx+0x1c>)
    441a:	f018 fd6e 	bl	1cefa <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    441e:	4604      	mov	r4, r0
    4420:	b120      	cbz	r0, 442c <bt_buf_get_rx+0x18>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
    4422:	2100      	movs	r1, #0
    4424:	3008      	adds	r0, #8
    4426:	f018 fd8d 	bl	1cf44 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    442a:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    442c:	4620      	mov	r0, r4
    442e:	bd38      	pop	{r3, r4, r5, pc}
    4430:	20000c48 	.word	0x20000c48

00004434 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    4434:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
    4436:	490b      	ldr	r1, [pc, #44]	; (4464 <bt_buf_get_cmd_complete+0x30>)
{
    4438:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
    443a:	f8d1 0130 	ldr.w	r0, [r1, #304]	; 0x130
{
    443e:	b510      	push	{r4, lr}
	if (bt_dev.sent_cmd) {
    4440:	b920      	cbnz	r0, 444c <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    4442:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    4446:	2001      	movs	r0, #1
    4448:	f7ff bfe4 	b.w	4414 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
    444c:	f018 fd8b 	bl	1cf66 <net_buf_ref>
    4450:	2301      	movs	r3, #1
		buf->len = 0U;
    4452:	2100      	movs	r1, #0
    4454:	7503      	strb	r3, [r0, #20]
    4456:	8181      	strh	r1, [r0, #12]
		buf = net_buf_ref(bt_dev.sent_cmd);
    4458:	4604      	mov	r4, r0
    445a:	3008      	adds	r0, #8
    445c:	f018 fd72 	bl	1cf44 <net_buf_simple_reserve>
}
    4460:	4620      	mov	r0, r4
    4462:	bd10      	pop	{r4, pc}
    4464:	20000080 	.word	0x20000080

00004468 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    4468:	b570      	push	{r4, r5, r6, lr}
    446a:	4604      	mov	r4, r0
	switch (evt) {
    446c:	2c0f      	cmp	r4, #15
{
    446e:	460d      	mov	r5, r1
    4470:	4610      	mov	r0, r2
    4472:	4619      	mov	r1, r3
	switch (evt) {
    4474:	d805      	bhi.n	4482 <bt_buf_get_evt+0x1a>
    4476:	2c0d      	cmp	r4, #13
    4478:	d912      	bls.n	44a0 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    447a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    447e:	f7ff bfd9 	b.w	4434 <bt_buf_get_cmd_complete>
	switch (evt) {
    4482:	2c13      	cmp	r4, #19
    4484:	d10c      	bne.n	44a0 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
    4486:	480b      	ldr	r0, [pc, #44]	; (44b4 <bt_buf_get_evt+0x4c>)
    4488:	f018 fd37 	bl	1cefa <net_buf_alloc_fixed>
			if (buf) {
    448c:	4604      	mov	r4, r0
    448e:	b128      	cbz	r0, 449c <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
    4490:	2100      	movs	r1, #0
    4492:	3008      	adds	r0, #8
    4494:	f018 fd56 	bl	1cf44 <net_buf_simple_reserve>
    4498:	2301      	movs	r3, #1
    449a:	7523      	strb	r3, [r4, #20]
}
    449c:	4620      	mov	r0, r4
    449e:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
    44a0:	4602      	mov	r2, r0
    44a2:	460b      	mov	r3, r1
		if (discardable) {
    44a4:	b10d      	cbz	r5, 44aa <bt_buf_get_evt+0x42>
    44a6:	4804      	ldr	r0, [pc, #16]	; (44b8 <bt_buf_get_evt+0x50>)
    44a8:	e7ee      	b.n	4488 <bt_buf_get_evt+0x20>
}
    44aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    44ae:	2001      	movs	r0, #1
    44b0:	f7ff bfb0 	b.w	4414 <bt_buf_get_rx>
    44b4:	20000c74 	.word	0x20000c74
    44b8:	20000bc4 	.word	0x20000bc4

000044bc <hci_disconn_complete_prio>:

	return false;
}

static void hci_disconn_complete_prio(struct net_buf *buf)
{
    44bc:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    44be:	6883      	ldr	r3, [r0, #8]
	struct bt_conn *conn;

	BT_DBG("status 0x%02x handle %u reason 0x%02x", evt->status, handle,
	       evt->reason);

	if (evt->status) {
    44c0:	781a      	ldrb	r2, [r3, #0]
    44c2:	b972      	cbnz	r2, 44e2 <hci_disconn_complete_prio+0x26>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    44c4:	f8b3 4001 	ldrh.w	r4, [r3, #1]
		return;
	}

	conn = bt_conn_lookup_handle(handle);
    44c8:	4620      	mov	r0, r4
    44ca:	f001 fe63 	bl	6194 <bt_conn_lookup_handle>
	if (!conn) {
    44ce:	4605      	mov	r5, r0
    44d0:	b940      	cbnz	r0, 44e4 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
    44d2:	4b08      	ldr	r3, [pc, #32]	; (44f4 <hci_disconn_complete_prio+0x38>)
    44d4:	881a      	ldrh	r2, [r3, #0]
    44d6:	b922      	cbnz	r2, 44e2 <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
    44d8:	ea6f 5004 	mvn.w	r0, r4, lsl #20
    44dc:	ea6f 5010 	mvn.w	r0, r0, lsr #20
    44e0:	8018      	strh	r0, [r3, #0]
		return;
	}

	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
	bt_conn_unref(conn);
}
    44e2:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    44e4:	2101      	movs	r1, #1
    44e6:	f001 fe5d 	bl	61a4 <bt_conn_set_state>
	bt_conn_unref(conn);
    44ea:	4628      	mov	r0, r5
}
    44ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    44f0:	f013 bd75 	b.w	17fde <bt_conn_unref>
    44f4:	20002b00 	.word	0x20002b00

000044f8 <hci_le_meta_event>:
#endif /* CONFIG_BT_DF_CONNECTION_CTE_REQ */

};

static void hci_le_meta_event(struct net_buf *buf)
{
    44f8:	b510      	push	{r4, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    44fa:	2101      	movs	r1, #1
    44fc:	4604      	mov	r4, r0
    44fe:	3008      	adds	r0, #8
    4500:	f018 fde6 	bl	1d0d0 <net_buf_simple_pull_mem>

	evt = net_buf_pull_mem(buf, sizeof(*evt));

	BT_DBG("subevent 0x%02x", evt->subevent);

	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    4504:	4621      	mov	r1, r4
    4506:	4a03      	ldr	r2, [pc, #12]	; (4514 <hci_le_meta_event+0x1c>)
    4508:	7800      	ldrb	r0, [r0, #0]
}
    450a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    450e:	2306      	movs	r3, #6
    4510:	f013 b8f2 	b.w	176f8 <handle_event>
    4514:	0001f3ec 	.word	0x0001f3ec

00004518 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    4518:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    451a:	4c0c      	ldr	r4, [pc, #48]	; (454c <find_pending_connect.part.0+0x34>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    451c:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    451e:	2205      	movs	r2, #5
    4520:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    4524:	f001 ffc2 	bl	64ac <bt_conn_lookup_state_le>
		if (!conn) {
    4528:	b970      	cbnz	r0, 4548 <find_pending_connect.part.0+0x30>
						       BT_ADDR_LE_NONE,
    452a:	4b09      	ldr	r3, [pc, #36]	; (4550 <find_pending_connect.part.0+0x38>)
    452c:	6818      	ldr	r0, [r3, #0]
    452e:	889a      	ldrh	r2, [r3, #4]
    4530:	9000      	str	r0, [sp, #0]
    4532:	799b      	ldrb	r3, [r3, #6]
    4534:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    4538:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
						       BT_ADDR_LE_NONE,
    453c:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    4540:	2204      	movs	r2, #4
    4542:	4669      	mov	r1, sp
    4544:	f001 ffb2 	bl	64ac <bt_conn_lookup_state_le>
}
    4548:	b002      	add	sp, #8
    454a:	bd10      	pop	{r4, pc}
    454c:	20000080 	.word	0x20000080
    4550:	0001f274 	.word	0x0001f274

00004554 <hci_cmd_done>:
{
    4554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4556:	4607      	mov	r7, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    4558:	7990      	ldrb	r0, [r2, #6]
{
    455a:	460e      	mov	r6, r1
    455c:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    455e:	f00d fdd3 	bl	12108 <net_buf_pool_get>
    4562:	4b30      	ldr	r3, [pc, #192]	; (4624 <hci_cmd_done+0xd0>)
    4564:	4283      	cmp	r3, r0
    4566:	d15b      	bne.n	4620 <hci_cmd_done+0xcc>
	if (cmd(buf)->opcode != opcode) {
    4568:	4620      	mov	r0, r4
    456a:	f00d fdd5 	bl	12118 <net_buf_id>
    456e:	4d2e      	ldr	r5, [pc, #184]	; (4628 <hci_cmd_done+0xd4>)
    4570:	230c      	movs	r3, #12
    4572:	fb03 5000 	mla	r0, r3, r0, r5
    4576:	8843      	ldrh	r3, [r0, #2]
    4578:	42bb      	cmp	r3, r7
    457a:	d151      	bne.n	4620 <hci_cmd_done+0xcc>
	if (bt_dev.sent_cmd) {
    457c:	4f2b      	ldr	r7, [pc, #172]	; (462c <hci_cmd_done+0xd8>)
    457e:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
    4582:	b120      	cbz	r0, 458e <hci_cmd_done+0x3a>
		net_buf_unref(bt_dev.sent_cmd);
    4584:	f00d fe84 	bl	12290 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    4588:	2300      	movs	r3, #0
    458a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	if (cmd(buf)->state && !status) {
    458e:	4620      	mov	r0, r4
    4590:	f00d fdc2 	bl	12118 <net_buf_id>
    4594:	270c      	movs	r7, #12
    4596:	fb07 5000 	mla	r0, r7, r0, r5
    459a:	6843      	ldr	r3, [r0, #4]
    459c:	b1e3      	cbz	r3, 45d8 <hci_cmd_done+0x84>
    459e:	b9de      	cbnz	r6, 45d8 <hci_cmd_done+0x84>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    45a0:	4620      	mov	r0, r4
    45a2:	f00d fdb9 	bl	12118 <net_buf_id>
    45a6:	fb07 5000 	mla	r0, r7, r0, r5
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    45aa:	2201      	movs	r2, #1
    45ac:	6840      	ldr	r0, [r0, #4]
    45ae:	e9d0 3100 	ldrd	r3, r1, [r0]

	if (val) {
    45b2:	7a00      	ldrb	r0, [r0, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
    45b4:	f001 071f 	and.w	r7, r1, #31
    45b8:	40ba      	lsls	r2, r7
	if (val) {
    45ba:	0949      	lsrs	r1, r1, #5
    45bc:	b318      	cbz	r0, 4606 <hci_cmd_done+0xb2>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    45be:	f3bf 8f5b 	dmb	ish
    45c2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    45c6:	e853 1f00 	ldrex	r1, [r3]
    45ca:	4311      	orrs	r1, r2
    45cc:	e843 1000 	strex	r0, r1, [r3]
    45d0:	2800      	cmp	r0, #0
    45d2:	d1f8      	bne.n	45c6 <hci_cmd_done+0x72>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    45d4:	f3bf 8f5b 	dmb	ish
	if (cmd(buf)->sync) {
    45d8:	4620      	mov	r0, r4
    45da:	f00d fd9d 	bl	12118 <net_buf_id>
    45de:	270c      	movs	r7, #12
    45e0:	fb07 5000 	mla	r0, r7, r0, r5
    45e4:	6883      	ldr	r3, [r0, #8]
    45e6:	b1db      	cbz	r3, 4620 <hci_cmd_done+0xcc>
		cmd(buf)->status = status;
    45e8:	4620      	mov	r0, r4
    45ea:	f00d fd95 	bl	12118 <net_buf_id>
    45ee:	4378      	muls	r0, r7
    45f0:	542e      	strb	r6, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    45f2:	4620      	mov	r0, r4
    45f4:	f00d fd90 	bl	12118 <net_buf_id>
    45f8:	fb07 5500 	mla	r5, r7, r0, r5
    45fc:	68a8      	ldr	r0, [r5, #8]
}
    45fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    4602:	f011 b859 	b.w	156b8 <z_impl_k_sem_give>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    4606:	43d2      	mvns	r2, r2
    4608:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    460c:	f3bf 8f5b 	dmb	ish
    4610:	e853 1f00 	ldrex	r1, [r3]
    4614:	4011      	ands	r1, r2
    4616:	e843 1000 	strex	r0, r1, [r3]
    461a:	2800      	cmp	r0, #0
    461c:	d0da      	beq.n	45d4 <hci_cmd_done+0x80>
    461e:	e7f7      	b.n	4610 <hci_cmd_done+0xbc>
    4620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4622:	bf00      	nop
    4624:	20000c1c 	.word	0x20000c1c
    4628:	20001910 	.word	0x20001910
    462c:	20000080 	.word	0x20000080

00004630 <hci_cmd_status>:
{
    4630:	b538      	push	{r3, r4, r5, lr}
    4632:	2104      	movs	r1, #4
    4634:	4604      	mov	r4, r0
    4636:	3008      	adds	r0, #8
    4638:	f018 fd4a 	bl	1d0d0 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    463c:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    463e:	7801      	ldrb	r1, [r0, #0]
    4640:	8840      	ldrh	r0, [r0, #2]
    4642:	4622      	mov	r2, r4
    4644:	f7ff ff86 	bl	4554 <hci_cmd_done>
	if (ncmd) {
    4648:	b125      	cbz	r5, 4654 <hci_cmd_status+0x24>
    464a:	4803      	ldr	r0, [pc, #12]	; (4658 <hci_cmd_status+0x28>)
}
    464c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4650:	f011 b832 	b.w	156b8 <z_impl_k_sem_give>
    4654:	bd38      	pop	{r3, r4, r5, pc}
    4656:	bf00      	nop
    4658:	20000198 	.word	0x20000198

0000465c <hci_cmd_complete>:
{
    465c:	b538      	push	{r3, r4, r5, lr}
    465e:	2103      	movs	r1, #3
    4660:	4604      	mov	r4, r0
    4662:	3008      	adds	r0, #8
    4664:	f018 fd34 	bl	1d0d0 <net_buf_simple_pull_mem>
	status = buf->data[0];
    4668:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    466a:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    466c:	7819      	ldrb	r1, [r3, #0]
    466e:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    4672:	4622      	mov	r2, r4
    4674:	f7ff ff6e 	bl	4554 <hci_cmd_done>
	if (ncmd) {
    4678:	b125      	cbz	r5, 4684 <hci_cmd_complete+0x28>
    467a:	4803      	ldr	r0, [pc, #12]	; (4688 <hci_cmd_complete+0x2c>)
}
    467c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4680:	f011 b81a 	b.w	156b8 <z_impl_k_sem_give>
    4684:	bd38      	pop	{r3, r4, r5, pc}
    4686:	bf00      	nop
    4688:	20000198 	.word	0x20000198

0000468c <bt_hci_cmd_state_set_init>:
{
    468c:	b510      	push	{r4, lr}
	state->bit = bit;
    468e:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
    4692:	f89d 3008 	ldrb.w	r3, [sp, #8]
    4696:	720b      	strb	r3, [r1, #8]
{
    4698:	460c      	mov	r4, r1
	cmd(buf)->state = state;
    469a:	f00d fd3d 	bl	12118 <net_buf_id>
    469e:	4b03      	ldr	r3, [pc, #12]	; (46ac <bt_hci_cmd_state_set_init+0x20>)
    46a0:	220c      	movs	r2, #12
    46a2:	fb02 3300 	mla	r3, r2, r0, r3
    46a6:	605c      	str	r4, [r3, #4]
}
    46a8:	bd10      	pop	{r4, pc}
    46aa:	bf00      	nop
    46ac:	20001910 	.word	0x20001910

000046b0 <bt_hci_cmd_create>:
{
    46b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
    46b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    46b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    46bc:	4606      	mov	r6, r0
    46be:	4817      	ldr	r0, [pc, #92]	; (471c <bt_hci_cmd_create+0x6c>)
	cmd(buf)->opcode = opcode;
    46c0:	4d17      	ldr	r5, [pc, #92]	; (4720 <bt_hci_cmd_create+0x70>)
{
    46c2:	460f      	mov	r7, r1
    46c4:	f018 fc19 	bl	1cefa <net_buf_alloc_fixed>
    46c8:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
    46ca:	f100 0a08 	add.w	sl, r0, #8
    46ce:	2100      	movs	r1, #0
    46d0:	f04f 0800 	mov.w	r8, #0
    46d4:	4650      	mov	r0, sl
    46d6:	f018 fc35 	bl	1cf44 <net_buf_simple_reserve>
    46da:	f884 8014 	strb.w	r8, [r4, #20]
	cmd(buf)->opcode = opcode;
    46de:	4620      	mov	r0, r4
    46e0:	f00d fd1a 	bl	12118 <net_buf_id>
    46e4:	f04f 090c 	mov.w	r9, #12
    46e8:	fb09 5000 	mla	r0, r9, r0, r5
    46ec:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
    46ee:	4620      	mov	r0, r4
    46f0:	f00d fd12 	bl	12118 <net_buf_id>
    46f4:	fb09 5000 	mla	r0, r9, r0, r5
    46f8:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
    46fc:	4620      	mov	r0, r4
    46fe:	f00d fd0b 	bl	12118 <net_buf_id>
    4702:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
    4706:	2103      	movs	r1, #3
    4708:	f8c5 8004 	str.w	r8, [r5, #4]
    470c:	4650      	mov	r0, sl
    470e:	f018 fc5c 	bl	1cfca <net_buf_simple_add>
	hdr->param_len = param_len;
    4712:	7087      	strb	r7, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    4714:	8006      	strh	r6, [r0, #0]
}
    4716:	4620      	mov	r0, r4
    4718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    471c:	20000c1c 	.word	0x20000c1c
    4720:	20001910 	.word	0x20001910

00004724 <bt_hci_cmd_send_sync>:
{
    4724:	b5f0      	push	{r4, r5, r6, r7, lr}
    4726:	4615      	mov	r5, r2
    4728:	b087      	sub	sp, #28
	if (!buf) {
    472a:	460c      	mov	r4, r1
    472c:	b921      	cbnz	r1, 4738 <bt_hci_cmd_send_sync+0x14>
		buf = bt_hci_cmd_create(opcode, 0);
    472e:	f7ff ffbf 	bl	46b0 <bt_hci_cmd_create>
		if (!buf) {
    4732:	4604      	mov	r4, r0
    4734:	2800      	cmp	r0, #0
    4736:	d048      	beq.n	47ca <bt_hci_cmd_send_sync+0xa6>
	return z_impl_k_sem_init(sem, initial_count, limit);
    4738:	2201      	movs	r2, #1
    473a:	2100      	movs	r1, #0
    473c:	4668      	mov	r0, sp
    473e:	f019 ff42 	bl	1e5c6 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    4742:	4620      	mov	r0, r4
    4744:	f00d fce8 	bl	12118 <net_buf_id>
    4748:	4f21      	ldr	r7, [pc, #132]	; (47d0 <bt_hci_cmd_send_sync+0xac>)
    474a:	230c      	movs	r3, #12
    474c:	fb03 7000 	mla	r0, r3, r0, r7
    4750:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
    4754:	4620      	mov	r0, r4
    4756:	f018 fc06 	bl	1cf66 <net_buf_ref>
    475a:	4601      	mov	r1, r0
    475c:	481d      	ldr	r0, [pc, #116]	; (47d4 <bt_hci_cmd_send_sync+0xb0>)
    475e:	f018 fbf5 	bl	1cf4c <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    4762:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    4766:	2300      	movs	r3, #0
    4768:	4668      	mov	r0, sp
    476a:	f010 ffcb 	bl	15704 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    476e:	4606      	mov	r6, r0
    4770:	b180      	cbz	r0, 4794 <bt_hci_cmd_send_sync+0x70>
    4772:	4a19      	ldr	r2, [pc, #100]	; (47d8 <bt_hci_cmd_send_sync+0xb4>)
    4774:	4919      	ldr	r1, [pc, #100]	; (47dc <bt_hci_cmd_send_sync+0xb8>)
    4776:	481a      	ldr	r0, [pc, #104]	; (47e0 <bt_hci_cmd_send_sync+0xbc>)
    4778:	f240 1331 	movw	r3, #305	; 0x131
    477c:	f011 ff3d 	bl	165fa <printk>
    4780:	4818      	ldr	r0, [pc, #96]	; (47e4 <bt_hci_cmd_send_sync+0xc0>)
    4782:	4631      	mov	r1, r6
    4784:	f011 ff39 	bl	165fa <printk>
    4788:	4040      	eors	r0, r0
    478a:	f380 8811 	msr	BASEPRI, r0
    478e:	f04f 0003 	mov.w	r0, #3
    4792:	df02      	svc	2
	status = cmd(buf)->status;
    4794:	4620      	mov	r0, r4
    4796:	f00d fcbf 	bl	12118 <net_buf_id>
    479a:	230c      	movs	r3, #12
    479c:	4358      	muls	r0, r3
    479e:	5c3e      	ldrb	r6, [r7, r0]
	if (status) {
    47a0:	b156      	cbz	r6, 47b8 <bt_hci_cmd_send_sync+0x94>
		net_buf_unref(buf);
    47a2:	4620      	mov	r0, r4
    47a4:	f00d fd74 	bl	12290 <net_buf_unref>
			return -EIO;
    47a8:	2e09      	cmp	r6, #9
    47aa:	bf0c      	ite	eq
    47ac:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
    47b0:	f06f 0004 	mvnne.w	r0, #4
}
    47b4:	b007      	add	sp, #28
    47b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rsp) {
    47b8:	b115      	cbz	r5, 47c0 <bt_hci_cmd_send_sync+0x9c>
		*rsp = buf;
    47ba:	602c      	str	r4, [r5, #0]
	return 0;
    47bc:	4630      	mov	r0, r6
    47be:	e7f9      	b.n	47b4 <bt_hci_cmd_send_sync+0x90>
		net_buf_unref(buf);
    47c0:	4620      	mov	r0, r4
    47c2:	f00d fd65 	bl	12290 <net_buf_unref>
	return 0;
    47c6:	4628      	mov	r0, r5
    47c8:	e7f4      	b.n	47b4 <bt_hci_cmd_send_sync+0x90>
			return -ENOBUFS;
    47ca:	f06f 0068 	mvn.w	r0, #104	; 0x68
    47ce:	e7f1      	b.n	47b4 <bt_hci_cmd_send_sync+0x90>
    47d0:	20001910 	.word	0x20001910
    47d4:	200001b4 	.word	0x200001b4
    47d8:	000201ff 	.word	0x000201ff
    47dc:	00020233 	.word	0x00020233
    47e0:	0002023c 	.word	0x0002023c
    47e4:	00020259 	.word	0x00020259

000047e8 <bt_send>:

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		return bt_hci_ecc_send(buf);
	}

	return bt_dev.drv->send(buf);
    47e8:	4b02      	ldr	r3, [pc, #8]	; (47f4 <bt_send+0xc>)
    47ea:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
    47ee:	691b      	ldr	r3, [r3, #16]
    47f0:	4718      	bx	r3
    47f2:	bf00      	nop
    47f4:	20000080 	.word	0x20000080

000047f8 <bt_hci_cmd_send>:
{
    47f8:	b538      	push	{r3, r4, r5, lr}
    47fa:	4605      	mov	r5, r0
	if (!buf) {
    47fc:	460c      	mov	r4, r1
    47fe:	b919      	cbnz	r1, 4808 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    4800:	f7ff ff56 	bl	46b0 <bt_hci_cmd_create>
		if (!buf) {
    4804:	4604      	mov	r4, r0
    4806:	b198      	cbz	r0, 4830 <bt_hci_cmd_send+0x38>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    4808:	f640 4335 	movw	r3, #3125	; 0xc35
    480c:	429d      	cmp	r5, r3
    480e:	d109      	bne.n	4824 <bt_hci_cmd_send+0x2c>
		err = bt_send(buf);
    4810:	4620      	mov	r0, r4
    4812:	f7ff ffe9 	bl	47e8 <bt_send>
		if (err) {
    4816:	4605      	mov	r5, r0
    4818:	b110      	cbz	r0, 4820 <bt_hci_cmd_send+0x28>
			net_buf_unref(buf);
    481a:	4620      	mov	r0, r4
    481c:	f00d fd38 	bl	12290 <net_buf_unref>
}
    4820:	4628      	mov	r0, r5
    4822:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    4824:	4804      	ldr	r0, [pc, #16]	; (4838 <bt_hci_cmd_send+0x40>)
    4826:	4621      	mov	r1, r4
    4828:	f018 fb90 	bl	1cf4c <net_buf_put>
	return 0;
    482c:	2500      	movs	r5, #0
    482e:	e7f7      	b.n	4820 <bt_hci_cmd_send+0x28>
			return -ENOBUFS;
    4830:	f06f 0568 	mvn.w	r5, #104	; 0x68
    4834:	e7f4      	b.n	4820 <bt_hci_cmd_send+0x28>
    4836:	bf00      	nop
    4838:	200001b4 	.word	0x200001b4

0000483c <conn_auto_initiate>:
{
    483c:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    483e:	7a83      	ldrb	r3, [r0, #10]
    4840:	2b07      	cmp	r3, #7
{
    4842:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    4844:	d121      	bne.n	488a <conn_auto_initiate+0x4e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4846:	f3bf 8f5b 	dmb	ish
    484a:	6843      	ldr	r3, [r0, #4]
    484c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    4850:	049a      	lsls	r2, r3, #18
    4852:	d41a      	bmi.n	488a <conn_auto_initiate+0x4e>
    4854:	78c3      	ldrb	r3, [r0, #3]
    4856:	b123      	cbz	r3, 4862 <conn_auto_initiate+0x26>
	     BT_FEAT_LE_PER_INIT_FEAT_XCHG(bt_dev.le.features))) {
    4858:	4b0c      	ldr	r3, [pc, #48]	; (488c <conn_auto_initiate+0x50>)
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
    485a:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
    485e:	071b      	lsls	r3, r3, #28
    4860:	d513      	bpl.n	488a <conn_auto_initiate+0x4e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    4862:	2102      	movs	r1, #2
    4864:	f242 0016 	movw	r0, #8214	; 0x2016
    4868:	f7ff ff22 	bl	46b0 <bt_hci_cmd_create>
	if (!buf) {
    486c:	4605      	mov	r5, r0
    486e:	b160      	cbz	r0, 488a <conn_auto_initiate+0x4e>
    4870:	2102      	movs	r1, #2
    4872:	3008      	adds	r0, #8
    4874:	f018 fba9 	bl	1cfca <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    4878:	8823      	ldrh	r3, [r4, #0]
    487a:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    487c:	4629      	mov	r1, r5
    487e:	f242 0016 	movw	r0, #8214	; 0x2016
}
    4882:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    4886:	f7ff bfb7 	b.w	47f8 <bt_hci_cmd_send>
}
    488a:	bd38      	pop	{r3, r4, r5, pc}
    488c:	20000080 	.word	0x20000080

00004890 <bt_hci_le_enh_conn_complete>:
{
    4890:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    4894:	f8b0 7001 	ldrh.w	r7, [r0, #1]
		if (disconnected_handles[i] == handle) {
    4898:	4a68      	ldr	r2, [pc, #416]	; (4a3c <bt_hci_le_enh_conn_complete+0x1ac>)
	if (evt->status) {
    489a:	7804      	ldrb	r4, [r0, #0]
		if (disconnected_handles[i] == handle) {
    489c:	8811      	ldrh	r1, [r2, #0]
	handle |= ~BT_ACL_HANDLE_MASK;
    489e:	ea6f 5307 	mvn.w	r3, r7, lsl #20
    48a2:	ea6f 5313 	mvn.w	r3, r3, lsr #20
		if (disconnected_handles[i] == handle) {
    48a6:	b29b      	uxth	r3, r3
    48a8:	4299      	cmp	r1, r3
    48aa:	f04f 0600 	mov.w	r6, #0
			disconnected_handles[i] = 0;
    48ae:	bf08      	it	eq
    48b0:	8016      	strheq	r6, [r2, #0]
{
    48b2:	b085      	sub	sp, #20
    48b4:	4605      	mov	r5, r0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    48b6:	fa1f f887 	uxth.w	r8, r7
			return true;
    48ba:	bf08      	it	eq
    48bc:	2601      	moveq	r6, #1
	if (evt->status) {
    48be:	b304      	cbz	r4, 4902 <bt_hci_le_enh_conn_complete+0x72>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    48c0:	2c3c      	cmp	r4, #60	; 0x3c
    48c2:	d159      	bne.n	4978 <bt_hci_le_enh_conn_complete+0xe8>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    48c4:	f000 ff20 	bl	5708 <bt_le_adv_lookup_legacy>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    48c8:	f3bf 8f5b 	dmb	ish
    48cc:	3010      	adds	r0, #16
    48ce:	e850 3f00 	ldrex	r3, [r0]
    48d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    48d6:	e840 3200 	strex	r2, r3, [r0]
    48da:	2a00      	cmp	r2, #0
    48dc:	d1f7      	bne.n	48ce <bt_hci_le_enh_conn_complete+0x3e>
    48de:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
    48e2:	2000      	movs	r0, #0
    48e4:	f7ff fe18 	bl	4518 <find_pending_connect.part.0>
		if (!conn) {
    48e8:	4605      	mov	r5, r0
    48ea:	2800      	cmp	r0, #0
    48ec:	d044      	beq.n	4978 <bt_hci_le_enh_conn_complete+0xe8>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
    48ee:	7244      	strb	r4, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    48f0:	2100      	movs	r1, #0
    48f2:	f001 fc57 	bl	61a4 <bt_conn_set_state>
		bt_conn_unref(conn);
    48f6:	4628      	mov	r0, r5
}
    48f8:	b005      	add	sp, #20
    48fa:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		bt_conn_unref(conn);
    48fe:	f013 bb6e 	b.w	17fde <bt_conn_unref>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    4902:	7903      	ldrb	r3, [r0, #4]
    4904:	3b02      	subs	r3, #2
    4906:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    4908:	f100 0904 	add.w	r9, r0, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    490c:	d837      	bhi.n	497e <bt_hci_le_enh_conn_complete+0xee>
 *  @param dst Bluetooth LE device address destination buffer.
 *  @param src Bluetooth LE device address source buffer.
 */
static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    490e:	2207      	movs	r2, #7
    4910:	4649      	mov	r1, r9
    4912:	a802      	add	r0, sp, #8
    4914:	f012 fc9e 	bl	17254 <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    4918:	f89d 3008 	ldrb.w	r3, [sp, #8]
	memcpy(dst, src, sizeof(*dst));
    491c:	2206      	movs	r2, #6
    491e:	3b02      	subs	r3, #2
    4920:	f105 0111 	add.w	r1, r5, #17
    4924:	f10d 0001 	add.w	r0, sp, #1
    4928:	f88d 3008 	strb.w	r3, [sp, #8]
    492c:	f012 fc92 	bl	17254 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    4930:	2301      	movs	r3, #1
    4932:	f88d 3000 	strb.w	r3, [sp]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
    4936:	78eb      	ldrb	r3, [r5, #3]
    4938:	2b01      	cmp	r3, #1
    493a:	d119      	bne.n	4970 <bt_hci_le_enh_conn_complete+0xe0>
    493c:	a802      	add	r0, sp, #8
    493e:	f7ff fdeb 	bl	4518 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    4942:	78eb      	ldrb	r3, [r5, #3]
    4944:	2b01      	cmp	r3, #1
    4946:	4604      	mov	r4, r0
    4948:	d111      	bne.n	496e <bt_hci_le_enh_conn_complete+0xde>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    494a:	f000 fedd 	bl	5708 <bt_le_adv_lookup_legacy>
    494e:	f3bf 8f5b 	dmb	ish
    4952:	f100 0310 	add.w	r3, r0, #16
    4956:	e853 2f00 	ldrex	r2, [r3]
    495a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    495e:	e843 2100 	strex	r1, r2, [r3]
    4962:	2900      	cmp	r1, #0
    4964:	d1f7      	bne.n	4956 <bt_hci_le_enh_conn_complete+0xc6>
    4966:	f3bf 8f5b 	dmb	ish
		(void)bt_le_lim_adv_cancel_timeout(adv);
    496a:	f013 fa6d 	bl	17e48 <bt_le_lim_adv_cancel_timeout>
	if (!conn) {
    496e:	b9dc      	cbnz	r4, 49a8 <bt_hci_le_enh_conn_complete+0x118>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
    4970:	211f      	movs	r1, #31
    4972:	4640      	mov	r0, r8
    4974:	f012 ff9c 	bl	178b0 <bt_hci_disconnect>
}
    4978:	b005      	add	sp, #20
    497a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
    497e:	78c3      	ldrb	r3, [r0, #3]
    4980:	2b01      	cmp	r3, #1
    4982:	bf04      	itt	eq
    4984:	4b2e      	ldreq	r3, [pc, #184]	; (4a40 <bt_hci_le_enh_conn_complete+0x1b0>)
    4986:	f893 4067 	ldrbeq.w	r4, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
    498a:	4649      	mov	r1, r9
    498c:	4620      	mov	r0, r4
    498e:	f013 f8e4 	bl	17b5a <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
    4992:	2207      	movs	r2, #7
    4994:	4601      	mov	r1, r0
    4996:	a802      	add	r0, sp, #8
    4998:	f012 fc5c 	bl	17254 <memcpy>
    499c:	2207      	movs	r2, #7
    499e:	4649      	mov	r1, r9
    49a0:	4668      	mov	r0, sp
    49a2:	f012 fc57 	bl	17254 <memcpy>
}
    49a6:	e7c6      	b.n	4936 <bt_hci_le_enh_conn_complete+0xa6>
	conn->handle = handle;
    49a8:	4620      	mov	r0, r4
	memcpy(dst, src, sizeof(*dst));
    49aa:	2207      	movs	r2, #7
    49ac:	f820 7b88 	strh.w	r7, [r0], #136
    49b0:	a902      	add	r1, sp, #8
    49b2:	f012 fc4f 	bl	17254 <memcpy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    49b6:	7e2a      	ldrb	r2, [r5, #24]
    49b8:	7deb      	ldrb	r3, [r5, #23]
    49ba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    49be:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    49c2:	7eaa      	ldrb	r2, [r5, #26]
    49c4:	7e6b      	ldrb	r3, [r5, #25]
    49c6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    49ca:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    49ce:	7f2a      	ldrb	r2, [r5, #28]
    49d0:	7eeb      	ldrb	r3, [r5, #27]
    49d2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    49d6:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
    49da:	78eb      	ldrb	r3, [r5, #3]
    49dc:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
    49de:	2200      	movs	r2, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    49e0:	2b01      	cmp	r3, #1
	conn->err = 0U;
    49e2:	7262      	strb	r2, [r4, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    49e4:	d117      	bne.n	4a16 <bt_hci_le_enh_conn_complete+0x186>
    49e6:	2207      	movs	r2, #7
    49e8:	4669      	mov	r1, sp
    49ea:	f104 008f 	add.w	r0, r4, #143	; 0x8f
    49ee:	f012 fc31 	bl	17254 <memcpy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    49f2:	f000 fe89 	bl	5708 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
    49f6:	7a21      	ldrb	r1, [r4, #8]
    49f8:	4d11      	ldr	r5, [pc, #68]	; (4a40 <bt_hci_le_enh_conn_complete+0x1b0>)
    49fa:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    49fe:	2207      	movs	r2, #7
    4a00:	4429      	add	r1, r5
    4a02:	f104 0096 	add.w	r0, r4, #150	; 0x96
    4a06:	f012 fc25 	bl	17254 <memcpy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
    4a0a:	f8d5 30dc 	ldr.w	r3, [r5, #220]	; 0xdc
    4a0e:	065b      	lsls	r3, r3, #25
    4a10:	d501      	bpl.n	4a16 <bt_hci_le_enh_conn_complete+0x186>
			bt_le_adv_resume();
    4a12:	f001 f835 	bl	5a80 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    4a16:	2107      	movs	r1, #7
    4a18:	4620      	mov	r0, r4
    4a1a:	f001 fbc3 	bl	61a4 <bt_conn_set_state>
	if (is_disconnected) {
    4a1e:	b11e      	cbz	r6, 4a28 <bt_hci_le_enh_conn_complete+0x198>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    4a20:	2101      	movs	r1, #1
    4a22:	4620      	mov	r0, r4
    4a24:	f001 fbbe 	bl	61a4 <bt_conn_set_state>
	bt_conn_connected(conn);
    4a28:	4620      	mov	r0, r4
    4a2a:	f013 fb14 	bl	18056 <bt_conn_connected>
	conn_auto_initiate(conn);
    4a2e:	4620      	mov	r0, r4
    4a30:	f7ff ff04 	bl	483c <conn_auto_initiate>
	bt_conn_unref(conn);
    4a34:	4620      	mov	r0, r4
    4a36:	f013 fad2 	bl	17fde <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    4a3a:	e79d      	b.n	4978 <bt_hci_le_enh_conn_complete+0xe8>
    4a3c:	20002b00 	.word	0x20002b00
    4a40:	20000080 	.word	0x20000080

00004a44 <hci_tx_thread>:
{
    4a44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    4a48:	f8df 8108 	ldr.w	r8, [pc, #264]	; 4b54 <hci_tx_thread+0x110>
		BT_ASSERT(err == 0);
    4a4c:	f8df a108 	ldr.w	sl, [pc, #264]	; 4b58 <hci_tx_thread+0x114>
		events[0].state = K_POLL_STATE_NOT_READY;
    4a50:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    4a54:	4841      	ldr	r0, [pc, #260]	; (4b5c <hci_tx_thread+0x118>)
		events[0].state = K_POLL_STATE_NOT_READY;
    4a56:	f36f 3352 	bfc	r3, #13, #6
    4a5a:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    4a5e:	f001 fb5b 	bl	6118 <bt_conn_prepare_events>
    4a62:	1c45      	adds	r5, r0, #1
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
    4a64:	483b      	ldr	r0, [pc, #236]	; (4b54 <hci_tx_thread+0x110>)
    4a66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4a6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4a6e:	4629      	mov	r1, r5
    4a70:	f011 fcca 	bl	16408 <z_impl_k_poll>
		BT_ASSERT(err == 0);
    4a74:	b160      	cbz	r0, 4a90 <hci_tx_thread+0x4c>
    4a76:	493a      	ldr	r1, [pc, #232]	; (4b60 <hci_tx_thread+0x11c>)
    4a78:	483a      	ldr	r0, [pc, #232]	; (4b64 <hci_tx_thread+0x120>)
    4a7a:	f640 1393 	movw	r3, #2451	; 0x993
    4a7e:	4652      	mov	r2, sl
    4a80:	f011 fdbb 	bl	165fa <printk>
    4a84:	4040      	eors	r0, r0
    4a86:	f380 8811 	msr	BASEPRI, r0
    4a8a:	f04f 0003 	mov.w	r0, #3
    4a8e:	df02      	svc	2
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    4a90:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 4b68 <hci_tx_thread+0x124>
{
    4a94:	4e2f      	ldr	r6, [pc, #188]	; (4b54 <hci_tx_thread+0x110>)
	return z_impl_k_sem_take(sem, timeout);
    4a96:	f5a9 779a 	sub.w	r7, r9, #308	; 0x134
    4a9a:	f1a9 0b1c 	sub.w	fp, r9, #28
	for (; count; ev++, count--) {
    4a9e:	b915      	cbnz	r5, 4aa6 <hci_tx_thread+0x62>
	z_impl_k_yield();
    4aa0:	f011 fa1e 	bl	15ee0 <z_impl_k_yield>
	while (1) {
    4aa4:	e7d4      	b.n	4a50 <hci_tx_thread+0xc>
		switch (ev->state) {
    4aa6:	68f3      	ldr	r3, [r6, #12]
    4aa8:	f3c3 3345 	ubfx	r3, r3, #13, #6
    4aac:	2b04      	cmp	r3, #4
    4aae:	d147      	bne.n	4b40 <hci_tx_thread+0xfc>
			if (ev->tag == BT_EVENT_CMD_TX) {
    4ab0:	7b33      	ldrb	r3, [r6, #12]
    4ab2:	2b00      	cmp	r3, #0
    4ab4:	d147      	bne.n	4b46 <hci_tx_thread+0x102>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    4ab6:	2200      	movs	r2, #0
    4ab8:	2300      	movs	r3, #0
    4aba:	4648      	mov	r0, r9
    4abc:	f018 fa22 	bl	1cf04 <net_buf_get>
	BT_ASSERT(buf);
    4ac0:	4604      	mov	r4, r0
    4ac2:	b960      	cbnz	r0, 4ade <hci_tx_thread+0x9a>
    4ac4:	4929      	ldr	r1, [pc, #164]	; (4b6c <hci_tx_thread+0x128>)
    4ac6:	4827      	ldr	r0, [pc, #156]	; (4b64 <hci_tx_thread+0x120>)
    4ac8:	f640 132a 	movw	r3, #2346	; 0x92a
    4acc:	4652      	mov	r2, sl
    4ace:	f011 fd94 	bl	165fa <printk>
    4ad2:	4040      	eors	r0, r0
    4ad4:	f380 8811 	msr	BASEPRI, r0
    4ad8:	f04f 0003 	mov.w	r0, #3
    4adc:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    4ade:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4ae2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4ae6:	4658      	mov	r0, fp
    4ae8:	f010 fe0c 	bl	15704 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    4aec:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
    4af0:	b120      	cbz	r0, 4afc <hci_tx_thread+0xb8>
		net_buf_unref(bt_dev.sent_cmd);
    4af2:	f00d fbcd 	bl	12290 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    4af6:	2300      	movs	r3, #0
    4af8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	bt_dev.sent_cmd = net_buf_ref(buf);
    4afc:	4620      	mov	r0, r4
    4afe:	f018 fa32 	bl	1cf66 <net_buf_ref>
    4b02:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
	err = bt_send(buf);
    4b06:	4620      	mov	r0, r4
    4b08:	f7ff fe6e 	bl	47e8 <bt_send>
	if (err) {
    4b0c:	b1c0      	cbz	r0, 4b40 <hci_tx_thread+0xfc>
	z_impl_k_sem_give(sem);
    4b0e:	4818      	ldr	r0, [pc, #96]	; (4b70 <hci_tx_thread+0x12c>)
    4b10:	f010 fdd2 	bl	156b8 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    4b14:	4620      	mov	r0, r4
    4b16:	f00d faff 	bl	12118 <net_buf_id>
    4b1a:	4b16      	ldr	r3, [pc, #88]	; (4b74 <hci_tx_thread+0x130>)
    4b1c:	220c      	movs	r2, #12
    4b1e:	fb02 3000 	mla	r0, r2, r0, r3
    4b22:	211f      	movs	r1, #31
    4b24:	8840      	ldrh	r0, [r0, #2]
    4b26:	4622      	mov	r2, r4
    4b28:	f7ff fd14 	bl	4554 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    4b2c:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
    4b30:	f00d fbae 	bl	12290 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    4b34:	2300      	movs	r3, #0
		net_buf_unref(buf);
    4b36:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
    4b38:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
		net_buf_unref(buf);
    4b3c:	f00d fba8 	bl	12290 <net_buf_unref>
	for (; count; ev++, count--) {
    4b40:	3614      	adds	r6, #20
    4b42:	3d01      	subs	r5, #1
    4b44:	e7ab      	b.n	4a9e <hci_tx_thread+0x5a>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    4b46:	2b01      	cmp	r3, #1
    4b48:	d1fa      	bne.n	4b40 <hci_tx_thread+0xfc>
					conn = CONTAINER_OF(ev->fifo,
    4b4a:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
    4b4c:	3838      	subs	r0, #56	; 0x38
    4b4e:	f001 fdad 	bl	66ac <bt_conn_process_tx>
    4b52:	e7f5      	b.n	4b40 <hci_tx_thread+0xfc>
    4b54:	20000264 	.word	0x20000264
    4b58:	000201ff 	.word	0x000201ff
    4b5c:	20000278 	.word	0x20000278
    4b60:	00020233 	.word	0x00020233
    4b64:	0002023c 	.word	0x0002023c
    4b68:	200001b4 	.word	0x200001b4
    4b6c:	00020279 	.word	0x00020279
    4b70:	20000198 	.word	0x20000198
    4b74:	20001910 	.word	0x20001910

00004b78 <hci_event_prio>:
		      sizeof(struct bt_hci_evt_num_completed_packets)),
#endif /* CONFIG_BT_CONN_TX */
};

void hci_event_prio(struct net_buf *buf)
{
    4b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4b7c:	4604      	mov	r4, r0
	struct net_buf_simple_state state;
	struct bt_hci_evt_hdr *hdr;
	uint8_t evt_flags;

	net_buf_simple_save(&buf->b, &state);
    4b7e:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
    4b82:	4630      	mov	r0, r6
    4b84:	f018 fad7 	bl	1d136 <net_buf_simple_headroom>
	state->len = buf->len;
    4b88:	f8b4 800c 	ldrh.w	r8, [r4, #12]

	BT_ASSERT(buf->len >= sizeof(*hdr));
    4b8c:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
    4b90:	4605      	mov	r5, r0
    4b92:	d80c      	bhi.n	4bae <hci_event_prio+0x36>
    4b94:	4a1c      	ldr	r2, [pc, #112]	; (4c08 <hci_event_prio+0x90>)
    4b96:	491d      	ldr	r1, [pc, #116]	; (4c0c <hci_event_prio+0x94>)
    4b98:	481d      	ldr	r0, [pc, #116]	; (4c10 <hci_event_prio+0x98>)
    4b9a:	f640 532f 	movw	r3, #3375	; 0xd2f
    4b9e:	f011 fd2c 	bl	165fa <printk>
    4ba2:	4040      	eors	r0, r0
    4ba4:	f380 8811 	msr	BASEPRI, r0
    4ba8:	f04f 0003 	mov.w	r0, #3
    4bac:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    4bae:	4630      	mov	r0, r6
    4bb0:	2102      	movs	r1, #2
    4bb2:	f018 fa8d 	bl	1d0d0 <net_buf_simple_pull_mem>
    4bb6:	4607      	mov	r7, r0

	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    4bb8:	7800      	ldrb	r0, [r0, #0]
    4bba:	f012 fd8b 	bl	176d4 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    4bbe:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    4bc0:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    4bc2:	d40c      	bmi.n	4bde <hci_event_prio+0x66>
    4bc4:	4a10      	ldr	r2, [pc, #64]	; (4c08 <hci_event_prio+0x90>)
    4bc6:	4913      	ldr	r1, [pc, #76]	; (4c14 <hci_event_prio+0x9c>)
    4bc8:	4811      	ldr	r0, [pc, #68]	; (4c10 <hci_event_prio+0x98>)
    4bca:	f640 5333 	movw	r3, #3379	; 0xd33
    4bce:	f011 fd14 	bl	165fa <printk>
    4bd2:	4040      	eors	r0, r0
    4bd4:	f380 8811 	msr	BASEPRI, r0
    4bd8:	f04f 0003 	mov.w	r0, #3
    4bdc:	df02      	svc	2

	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    4bde:	2305      	movs	r3, #5
    4be0:	4a0d      	ldr	r2, [pc, #52]	; (4c18 <hci_event_prio+0xa0>)
    4be2:	7838      	ldrb	r0, [r7, #0]
    4be4:	4621      	mov	r1, r4
    4be6:	f012 fd87 	bl	176f8 <handle_event>

	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    4bea:	07b3      	lsls	r3, r6, #30
    4bec:	d507      	bpl.n	4bfe <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
    4bee:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    4bf0:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    4bf4:	fa10 f585 	uxtah	r5, r0, r5
    4bf8:	60a5      	str	r5, [r4, #8]
		net_buf_simple_restore(&buf->b, &state);
	} else {
		net_buf_unref(buf);
	}
}
    4bfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
    4bfe:	4620      	mov	r0, r4
}
    4c00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    4c04:	f00d bb44 	b.w	12290 <net_buf_unref>
    4c08:	000201ff 	.word	0x000201ff
    4c0c:	0002027d 	.word	0x0002027d
    4c10:	0002023c 	.word	0x0002023c
    4c14:	00020296 	.word	0x00020296
    4c18:	0001f44c 	.word	0x0001f44c

00004c1c <bt_recv>:

k_tid_t bt_recv_thread_id;

int bt_recv(struct net_buf *buf)
{
    4c1c:	b570      	push	{r4, r5, r6, lr}
	if (bt_recv_thread_id == NULL) {
    4c1e:	4d3b      	ldr	r5, [pc, #236]	; (4d0c <bt_recv+0xf0>)
    4c20:	682b      	ldr	r3, [r5, #0]
{
    4c22:	4604      	mov	r4, r0
	if (bt_recv_thread_id == NULL) {
    4c24:	b913      	cbnz	r3, 4c2c <bt_recv+0x10>
	return z_impl_z_current_get();
    4c26:	f011 f9fd 	bl	16024 <z_impl_z_current_get>
		bt_recv_thread_id = k_current_get();
    4c2a:	6028      	str	r0, [r5, #0]
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    4c2c:	7d23      	ldrb	r3, [r4, #20]

	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	BT_DBG("buf %p len %u", buf, buf->len);

	switch (bt_buf_get_type(buf)) {
    4c2e:	2b01      	cmp	r3, #1
    4c30:	d036      	beq.n	4ca0 <bt_recv+0x84>
    4c32:	2b03      	cmp	r3, #3
    4c34:	d163      	bne.n	4cfe <bt_recv+0xe2>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    4c36:	89a3      	ldrh	r3, [r4, #12]
    4c38:	2b03      	cmp	r3, #3
    4c3a:	d80c      	bhi.n	4c56 <bt_recv+0x3a>
    4c3c:	4a34      	ldr	r2, [pc, #208]	; (4d10 <bt_recv+0xf4>)
    4c3e:	4935      	ldr	r1, [pc, #212]	; (4d14 <bt_recv+0xf8>)
    4c40:	4835      	ldr	r0, [pc, #212]	; (4d18 <bt_recv+0xfc>)
    4c42:	f240 13b5 	movw	r3, #437	; 0x1b5
    4c46:	f011 fcd8 	bl	165fa <printk>
    4c4a:	4040      	eors	r0, r0
    4c4c:	f380 8811 	msr	BASEPRI, r0
    4c50:	f04f 0003 	mov.w	r0, #3
    4c54:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    4c56:	2104      	movs	r1, #4
    4c58:	f104 0008 	add.w	r0, r4, #8
    4c5c:	f018 fa38 	bl	1d0d0 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    4c60:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
    4c62:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    4c64:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    4c66:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
    4c68:	89a2      	ldrh	r2, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
    4c6a:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
    4c6e:	429a      	cmp	r2, r3
	acl(buf)->handle = bt_acl_handle(handle);
    4c70:	82e0      	strh	r0, [r4, #22]
	if (buf->len != len) {
    4c72:	d003      	beq.n	4c7c <bt_recv+0x60>
	net_buf_unref(buf);
    4c74:	4620      	mov	r0, r4
    4c76:	f00d fb0b 	bl	12290 <net_buf_unref>
    4c7a:	e00f      	b.n	4c9c <bt_recv+0x80>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    4c7c:	f001 fa8a 	bl	6194 <bt_conn_lookup_handle>
	if (!conn) {
    4c80:	4605      	mov	r5, r0
    4c82:	2800      	cmp	r0, #0
    4c84:	d0f6      	beq.n	4c74 <bt_recv+0x58>
	acl(buf)->index = bt_conn_index(conn);
    4c86:	f001 fb35 	bl	62f4 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    4c8a:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
    4c8c:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    4c8e:	4621      	mov	r1, r4
    4c90:	4628      	mov	r0, r5
    4c92:	f013 f93c 	bl	17f0e <bt_conn_recv>
	bt_conn_unref(conn);
    4c96:	4628      	mov	r0, r5
    4c98:	f013 f9a1 	bl	17fde <bt_conn_unref>

		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
			net_buf_put(&bt_dev.rx_queue, buf);
		}
#endif
		return 0;
    4c9c:	2000      	movs	r0, #0
	default:
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
		net_buf_unref(buf);
		return -EINVAL;
	}
}
    4c9e:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    4ca0:	89a3      	ldrh	r3, [r4, #12]
    4ca2:	2b01      	cmp	r3, #1
    4ca4:	d80c      	bhi.n	4cc0 <bt_recv+0xa4>
    4ca6:	4a1a      	ldr	r2, [pc, #104]	; (4d10 <bt_recv+0xf4>)
    4ca8:	491a      	ldr	r1, [pc, #104]	; (4d14 <bt_recv+0xf8>)
    4caa:	481b      	ldr	r0, [pc, #108]	; (4d18 <bt_recv+0xfc>)
    4cac:	f640 1317 	movw	r3, #2327	; 0x917
    4cb0:	f011 fca3 	bl	165fa <printk>
    4cb4:	4040      	eors	r0, r0
    4cb6:	f380 8811 	msr	BASEPRI, r0
    4cba:	f04f 0003 	mov.w	r0, #3
    4cbe:	df02      	svc	2
    4cc0:	2102      	movs	r1, #2
    4cc2:	f104 0008 	add.w	r0, r4, #8
    4cc6:	f018 fa03 	bl	1d0d0 <net_buf_simple_pull_mem>
    4cca:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    4ccc:	7800      	ldrb	r0, [r0, #0]
    4cce:	f012 fd01 	bl	176d4 <bt_hci_evt_get_flags>
    4cd2:	0783      	lsls	r3, r0, #30
    4cd4:	d40c      	bmi.n	4cf0 <bt_recv+0xd4>
    4cd6:	4a0e      	ldr	r2, [pc, #56]	; (4d10 <bt_recv+0xf4>)
    4cd8:	4910      	ldr	r1, [pc, #64]	; (4d1c <bt_recv+0x100>)
    4cda:	480f      	ldr	r0, [pc, #60]	; (4d18 <bt_recv+0xfc>)
    4cdc:	f640 131b 	movw	r3, #2331	; 0x91b
    4ce0:	f011 fc8b 	bl	165fa <printk>
    4ce4:	4040      	eors	r0, r0
    4ce6:	f380 8811 	msr	BASEPRI, r0
    4cea:	f04f 0003 	mov.w	r0, #3
    4cee:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    4cf0:	4a0b      	ldr	r2, [pc, #44]	; (4d20 <bt_recv+0x104>)
    4cf2:	7828      	ldrb	r0, [r5, #0]
    4cf4:	2304      	movs	r3, #4
    4cf6:	4621      	mov	r1, r4
    4cf8:	f012 fcfe 	bl	176f8 <handle_event>
    4cfc:	e7ba      	b.n	4c74 <bt_recv+0x58>
		net_buf_unref(buf);
    4cfe:	4620      	mov	r0, r4
    4d00:	f00d fac6 	bl	12290 <net_buf_unref>
		return -EINVAL;
    4d04:	f06f 0015 	mvn.w	r0, #21
    4d08:	e7c9      	b.n	4c9e <bt_recv+0x82>
    4d0a:	bf00      	nop
    4d0c:	2000190c 	.word	0x2000190c
    4d10:	000201ff 	.word	0x000201ff
    4d14:	0002027d 	.word	0x0002027d
    4d18:	0002023c 	.word	0x0002023c
    4d1c:	000202af 	.word	0x000202af
    4d20:	0001f42c 	.word	0x0001f42c

00004d24 <bt_recv_prio>:

#if defined(CONFIG_BT_RECV_IS_RX_THREAD)
int bt_recv_prio(struct net_buf *buf)
{
    4d24:	b510      	push	{r4, lr}
	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    4d26:	7d03      	ldrb	r3, [r0, #20]
    4d28:	2b01      	cmp	r3, #1
{
    4d2a:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    4d2c:	d00c      	beq.n	4d48 <bt_recv_prio+0x24>
    4d2e:	4a09      	ldr	r2, [pc, #36]	; (4d54 <bt_recv_prio+0x30>)
    4d30:	4909      	ldr	r1, [pc, #36]	; (4d58 <bt_recv_prio+0x34>)
    4d32:	480a      	ldr	r0, [pc, #40]	; (4d5c <bt_recv_prio+0x38>)
    4d34:	f640 537c 	movw	r3, #3452	; 0xd7c
    4d38:	f011 fc5f 	bl	165fa <printk>
    4d3c:	4040      	eors	r0, r0
    4d3e:	f380 8811 	msr	BASEPRI, r0
    4d42:	f04f 0003 	mov.w	r0, #3
    4d46:	df02      	svc	2

	hci_event_prio(buf);
    4d48:	4620      	mov	r0, r4
    4d4a:	f7ff ff15 	bl	4b78 <hci_event_prio>

	return 0;
}
    4d4e:	2000      	movs	r0, #0
    4d50:	bd10      	pop	{r4, pc}
    4d52:	bf00      	nop
    4d54:	000201ff 	.word	0x000201ff
    4d58:	000202dd 	.word	0x000202dd
    4d5c:	0002023c 	.word	0x0002023c

00004d60 <bt_hci_driver_register>:
#endif /* defined(CONFIG_BT_RECV_IS_RX_THREAD) */

int bt_hci_driver_register(const struct bt_hci_driver *drv)
{
	if (bt_dev.drv) {
    4d60:	4a08      	ldr	r2, [pc, #32]	; (4d84 <bt_hci_driver_register+0x24>)
{
    4d62:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    4d64:	f8d2 014c 	ldr.w	r0, [r2, #332]	; 0x14c
    4d68:	b930      	cbnz	r0, 4d78 <bt_hci_driver_register+0x18>
		return -EALREADY;
	}

	if (!drv->open || !drv->send) {
    4d6a:	68d9      	ldr	r1, [r3, #12]
    4d6c:	b139      	cbz	r1, 4d7e <bt_hci_driver_register+0x1e>
    4d6e:	6919      	ldr	r1, [r3, #16]
    4d70:	b129      	cbz	r1, 4d7e <bt_hci_driver_register+0x1e>
		return -EINVAL;
	}

	bt_dev.drv = drv;
    4d72:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
	BT_DBG("Registered %s", drv->name ? drv->name : "");

	bt_monitor_new_index(BT_MONITOR_TYPE_PRIMARY, drv->bus,
			     BT_ADDR_ANY, drv->name ? drv->name : "bt0");

	return 0;
    4d76:	4770      	bx	lr
		return -EALREADY;
    4d78:	f06f 0077 	mvn.w	r0, #119	; 0x77
    4d7c:	4770      	bx	lr
		return -EINVAL;
    4d7e:	f06f 0015 	mvn.w	r0, #21
}
    4d82:	4770      	bx	lr
    4d84:	20000080 	.word	0x20000080

00004d88 <bt_finalize_init>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4d88:	4b07      	ldr	r3, [pc, #28]	; (4da8 <bt_finalize_init+0x20>)
    4d8a:	f3bf 8f5b 	dmb	ish
    4d8e:	e853 2f00 	ldrex	r2, [r3]
    4d92:	f042 0202 	orr.w	r2, r2, #2
    4d96:	e843 2100 	strex	r1, r2, [r3]
    4d9a:	2900      	cmp	r1, #0
    4d9c:	d1f7      	bne.n	4d8e <bt_finalize_init+0x6>
    4d9e:	f3bf 8f5b 	dmb	ish
void bt_finalize_init(void)
{
	atomic_set_bit(bt_dev.flags, BT_DEV_READY);

	if (IS_ENABLED(CONFIG_BT_OBSERVER)) {
		bt_le_scan_update(false);
    4da2:	2000      	movs	r0, #0
    4da4:	f000 bee6 	b.w	5b74 <bt_le_scan_update>
    4da8:	2000014c 	.word	0x2000014c

00004dac <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
    4dac:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    4dae:	4db5      	ldr	r5, [pc, #724]	; (5084 <bt_init+0x2d8>)
    4db0:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
    4db4:	6899      	ldr	r1, [r3, #8]
    4db6:	f011 0101 	ands.w	r1, r1, #1
    4dba:	d123      	bne.n	4e04 <bt_init+0x58>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    4dbc:	aa01      	add	r2, sp, #4
    4dbe:	f640 4003 	movw	r0, #3075	; 0xc03
    4dc2:	f7ff fcaf 	bl	4724 <bt_hci_cmd_send_sync>
		if (err) {
    4dc6:	4604      	mov	r4, r0
    4dc8:	2800      	cmp	r0, #0
    4dca:	d16b      	bne.n	4ea4 <bt_init+0xf8>
	uint8_t status = buf->data[0];
    4dcc:	9b01      	ldr	r3, [sp, #4]
    4dce:	689b      	ldr	r3, [r3, #8]
	if (status) {
    4dd0:	781b      	ldrb	r3, [r3, #0]
    4dd2:	b9a3      	cbnz	r3, 4dfe <bt_init+0x52>
		bt_scan_reset();
    4dd4:	f000 fec8 	bl	5b68 <bt_scan_reset>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4dd8:	f3bf 8f5b 	dmb	ish
    4ddc:	462b      	mov	r3, r5
    4dde:	f853 2fcc 	ldr.w	r2, [r3, #204]!
    4de2:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    4de6:	f002 0205 	and.w	r2, r2, #5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    4dea:	f3bf 8f5b 	dmb	ish
    4dee:	e853 1f00 	ldrex	r1, [r3]
    4df2:	e843 2000 	strex	r0, r2, [r3]
    4df6:	2800      	cmp	r0, #0
    4df8:	d1f9      	bne.n	4dee <bt_init+0x42>
    4dfa:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    4dfe:	9801      	ldr	r0, [sp, #4]
    4e00:	f00d fa46 	bl	12290 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    4e04:	aa01      	add	r2, sp, #4
    4e06:	2100      	movs	r1, #0
    4e08:	f241 0003 	movw	r0, #4099	; 0x1003
    4e0c:	f7ff fc8a 	bl	4724 <bt_hci_cmd_send_sync>
	if (err) {
    4e10:	4604      	mov	r4, r0
    4e12:	2800      	cmp	r0, #0
    4e14:	d146      	bne.n	4ea4 <bt_init+0xf8>
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
    4e16:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    4e18:	489b      	ldr	r0, [pc, #620]	; (5088 <bt_init+0x2dc>)
    4e1a:	6899      	ldr	r1, [r3, #8]
    4e1c:	2208      	movs	r2, #8
    4e1e:	3101      	adds	r1, #1
    4e20:	f012 fa18 	bl	17254 <memcpy>
	net_buf_unref(rsp);
    4e24:	9801      	ldr	r0, [sp, #4]
    4e26:	f00d fa33 	bl	12290 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    4e2a:	4621      	mov	r1, r4
    4e2c:	aa01      	add	r2, sp, #4
    4e2e:	f241 0001 	movw	r0, #4097	; 0x1001
    4e32:	f7ff fc77 	bl	4724 <bt_hci_cmd_send_sync>
	if (err) {
    4e36:	4604      	mov	r4, r0
    4e38:	2800      	cmp	r0, #0
    4e3a:	d133      	bne.n	4ea4 <bt_init+0xf8>
	read_local_ver_complete(rsp);
    4e3c:	9801      	ldr	r0, [sp, #4]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
    4e3e:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    4e40:	785a      	ldrb	r2, [r3, #1]
    4e42:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    4e46:	78d9      	ldrb	r1, [r3, #3]
    4e48:	789a      	ldrb	r2, [r3, #2]
    4e4a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    4e4e:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
    4e52:	791a      	ldrb	r2, [r3, #4]
    4e54:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    4e58:	7a19      	ldrb	r1, [r3, #8]
    4e5a:	79da      	ldrb	r2, [r3, #7]
    4e5c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    4e60:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    4e64:	795a      	ldrb	r2, [r3, #5]
    4e66:	799b      	ldrb	r3, [r3, #6]
    4e68:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    4e6c:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
    4e70:	f00d fa0e 	bl	12290 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    4e74:	4621      	mov	r1, r4
    4e76:	aa01      	add	r2, sp, #4
    4e78:	f241 0002 	movw	r0, #4098	; 0x1002
    4e7c:	f7ff fc52 	bl	4724 <bt_hci_cmd_send_sync>
	if (err) {
    4e80:	4604      	mov	r4, r0
    4e82:	b978      	cbnz	r0, 4ea4 <bt_init+0xf8>
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
    4e84:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
    4e86:	4881      	ldr	r0, [pc, #516]	; (508c <bt_init+0x2e0>)
    4e88:	6899      	ldr	r1, [r3, #8]
    4e8a:	2240      	movs	r2, #64	; 0x40
    4e8c:	3101      	adds	r1, #1
    4e8e:	f012 f9e1 	bl	17254 <memcpy>
	net_buf_unref(rsp);
    4e92:	9801      	ldr	r0, [sp, #4]
    4e94:	f00d f9fc 	bl	12290 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    4e98:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    4e9c:	0658      	lsls	r0, r3, #25
    4e9e:	d404      	bmi.n	4eaa <bt_init+0xfe>
		return -ENODEV;
    4ea0:	f06f 0412 	mvn.w	r4, #18
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
    4ea4:	4620      	mov	r0, r4
    4ea6:	b002      	add	sp, #8
    4ea8:	bd70      	pop	{r4, r5, r6, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    4eaa:	4621      	mov	r1, r4
    4eac:	aa01      	add	r2, sp, #4
    4eae:	f242 0003 	movw	r0, #8195	; 0x2003
    4eb2:	f7ff fc37 	bl	4724 <bt_hci_cmd_send_sync>
	if (err) {
    4eb6:	4604      	mov	r4, r0
    4eb8:	2800      	cmp	r0, #0
    4eba:	d1f3      	bne.n	4ea4 <bt_init+0xf8>
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
    4ebc:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    4ebe:	4874      	ldr	r0, [pc, #464]	; (5090 <bt_init+0x2e4>)
    4ec0:	6899      	ldr	r1, [r3, #8]
    4ec2:	2208      	movs	r2, #8
    4ec4:	3101      	adds	r1, #1
    4ec6:	f012 f9c5 	bl	17254 <memcpy>
	net_buf_unref(rsp);
    4eca:	9801      	ldr	r0, [sp, #4]
    4ecc:	f00d f9e0 	bl	12290 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    4ed0:	4621      	mov	r1, r4
    4ed2:	aa01      	add	r2, sp, #4
    4ed4:	f242 0002 	movw	r0, #8194	; 0x2002
    4ed8:	f7ff fc24 	bl	4724 <bt_hci_cmd_send_sync>
		if (err) {
    4edc:	4604      	mov	r4, r0
    4ede:	2800      	cmp	r0, #0
    4ee0:	d1e0      	bne.n	4ea4 <bt_init+0xf8>
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
    4ee2:	9b01      	ldr	r3, [sp, #4]
    4ee4:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    4ee6:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    4eea:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
    4eee:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
    4ef0:	b121      	cbz	r1, 4efc <bt_init+0x150>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    4ef2:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
    4ef4:	4867      	ldr	r0, [pc, #412]	; (5094 <bt_init+0x2e8>)
    4ef6:	4611      	mov	r1, r2
    4ef8:	f019 fb65 	bl	1e5c6 <z_impl_k_sem_init>
		net_buf_unref(rsp);
    4efc:	9801      	ldr	r0, [sp, #4]
    4efe:	f00d f9c7 	bl	12290 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    4f02:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
    4f06:	f016 0620 	ands.w	r6, r6, #32
    4f0a:	f000 80b1 	beq.w	5070 <bt_init+0x2c4>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    4f0e:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
    4f12:	0719      	lsls	r1, r3, #28
    4f14:	f100 80d6 	bmi.w	50c4 <bt_init+0x318>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    4f18:	2108      	movs	r1, #8
    4f1a:	f242 0001 	movw	r0, #8193	; 0x2001
    4f1e:	f7ff fbc7 	bl	46b0 <bt_hci_cmd_create>
	if (!buf) {
    4f22:	4604      	mov	r4, r0
    4f24:	2800      	cmp	r0, #0
    4f26:	f000 80aa 	beq.w	507e <bt_init+0x2d2>
	return net_buf_simple_add(&buf->b, len);
    4f2a:	2108      	movs	r1, #8
    4f2c:	4408      	add	r0, r1
    4f2e:	f018 f84c 	bl	1cfca <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    4f32:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    4f36:	f013 0f02 	tst.w	r3, #2
	dst[1] = val >> 8;
    4f3a:	f04f 0200 	mov.w	r2, #0
    4f3e:	bf0c      	ite	eq
    4f40:	230f      	moveq	r3, #15
    4f42:	232f      	movne	r3, #47	; 0x2f
	dst[0] = val;
    4f44:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    4f46:	7042      	strb	r2, [r0, #1]
	dst[0] = val;
    4f48:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    4f4a:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    4f4c:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    4f4e:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    4f50:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    4f52:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    4f54:	4621      	mov	r1, r4
    4f56:	f242 0001 	movw	r0, #8193	; 0x2001
    4f5a:	f7ff fbe3 	bl	4724 <bt_hci_cmd_send_sync>
	if (err) {
    4f5e:	4604      	mov	r4, r0
    4f60:	2800      	cmp	r0, #0
    4f62:	d19f      	bne.n	4ea4 <bt_init+0xf8>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    4f64:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
	if (bt_dev.le.acl_mtu) {
    4f68:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
	if (BT_FEAT_BREDR(bt_dev.features)) {
    4f6c:	069a      	lsls	r2, r3, #26
    4f6e:	f100 80be 	bmi.w	50ee <bt_init+0x342>
	if (bt_dev.le.acl_mtu) {
    4f72:	b9d1      	cbnz	r1, 4faa <bt_init+0x1fe>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    4f74:	aa01      	add	r2, sp, #4
    4f76:	f241 0005 	movw	r0, #4101	; 0x1005
    4f7a:	f7ff fbd3 	bl	4724 <bt_hci_cmd_send_sync>
	if (err) {
    4f7e:	4604      	mov	r4, r0
    4f80:	2800      	cmp	r0, #0
    4f82:	d18f      	bne.n	4ea4 <bt_init+0xf8>
	if (bt_dev.le.acl_mtu) {
    4f84:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
    4f88:	b963      	cbnz	r3, 4fa4 <bt_init+0x1f8>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
    4f8a:	9b01      	ldr	r3, [sp, #4]
    4f8c:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    4f8e:	785a      	ldrb	r2, [r3, #1]
    4f90:	7899      	ldrb	r1, [r3, #2]
    4f92:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    4f96:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    4f9a:	889a      	ldrh	r2, [r3, #4]
    4f9c:	483d      	ldr	r0, [pc, #244]	; (5094 <bt_init+0x2e8>)
    4f9e:	4611      	mov	r1, r2
    4fa0:	f019 fb11 	bl	1e5c6 <z_impl_k_sem_init>
	net_buf_unref(rsp);
    4fa4:	9801      	ldr	r0, [sp, #4]
    4fa6:	f00d f973 	bl	12290 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    4faa:	2108      	movs	r1, #8
    4fac:	f640 4001 	movw	r0, #3073	; 0xc01
    4fb0:	f7ff fb7e 	bl	46b0 <bt_hci_cmd_create>
	if (!buf) {
    4fb4:	4604      	mov	r4, r0
    4fb6:	2800      	cmp	r0, #0
    4fb8:	d061      	beq.n	507e <bt_init+0x2d2>
    4fba:	2108      	movs	r1, #8
    4fbc:	4408      	add	r0, r1
    4fbe:	f018 f804 	bl	1cfca <net_buf_simple_add>
	dst[0] = val;
    4fc2:	2310      	movs	r3, #16
    4fc4:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    4fc6:	2388      	movs	r3, #136	; 0x88
	dst[0] = val;
    4fc8:	2200      	movs	r2, #0
	dst[1] = val >> 8;
    4fca:	7043      	strb	r3, [r0, #1]
    4fcc:	2602      	movs	r6, #2
    4fce:	2320      	movs	r3, #32
	dst[0] = val;
    4fd0:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    4fd2:	70c6      	strb	r6, [r0, #3]
	dst[0] = val;
    4fd4:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    4fd6:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    4fd8:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    4fda:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    4fdc:	4621      	mov	r1, r4
    4fde:	f640 4001 	movw	r0, #3073	; 0xc01
    4fe2:	f7ff fb9f 	bl	4724 <bt_hci_cmd_send_sync>
	if (err) {
    4fe6:	4604      	mov	r4, r0
    4fe8:	2800      	cmp	r0, #0
    4fea:	f47f af5b 	bne.w	4ea4 <bt_init+0xf8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    4fee:	4601      	mov	r1, r0
    4ff0:	aa01      	add	r2, sp, #4
    4ff2:	f64f 4001 	movw	r0, #64513	; 0xfc01
    4ff6:	f7ff fb95 	bl	4724 <bt_hci_cmd_send_sync>
	if (err) {
    4ffa:	4604      	mov	r4, r0
    4ffc:	bb48      	cbnz	r0, 5052 <bt_init+0x2a6>
	net_buf_unref(rsp);
    4ffe:	9801      	ldr	r0, [sp, #4]
    5000:	f00d f946 	bl	12290 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    5004:	4621      	mov	r1, r4
    5006:	aa01      	add	r2, sp, #4
    5008:	f64f 4002 	movw	r0, #64514	; 0xfc02
    500c:	f7ff fb8a 	bl	4724 <bt_hci_cmd_send_sync>
	if (err) {
    5010:	4604      	mov	r4, r0
    5012:	b9f0      	cbnz	r0, 5052 <bt_init+0x2a6>
	rp.cmds = (void *)rsp->data;
    5014:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    5016:	4820      	ldr	r0, [pc, #128]	; (5098 <bt_init+0x2ec>)
    5018:	6899      	ldr	r1, [r3, #8]
    501a:	4632      	mov	r2, r6
    501c:	3101      	adds	r1, #1
    501e:	f012 f919 	bl	17254 <memcpy>
	net_buf_unref(rsp);
    5022:	9801      	ldr	r0, [sp, #4]
    5024:	f00d f934 	bl	12290 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    5028:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
    502c:	075b      	lsls	r3, r3, #29
    502e:	d510      	bpl.n	5052 <bt_init+0x2a6>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    5030:	aa01      	add	r2, sp, #4
    5032:	4621      	mov	r1, r4
    5034:	f64f 4003 	movw	r0, #64515	; 0xfc03
    5038:	f7ff fb74 	bl	4724 <bt_hci_cmd_send_sync>
		if (err) {
    503c:	b948      	cbnz	r0, 5052 <bt_init+0x2a6>
		rp.feat = (void *)rsp->data;
    503e:	9b01      	ldr	r3, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
    5040:	4816      	ldr	r0, [pc, #88]	; (509c <bt_init+0x2f0>)
    5042:	6899      	ldr	r1, [r3, #8]
    5044:	2201      	movs	r2, #1
    5046:	4411      	add	r1, r2
    5048:	f012 f904 	bl	17254 <memcpy>
		net_buf_unref(rsp);
    504c:	9801      	ldr	r0, [sp, #4]
    504e:	f00d f91f 	bl	12290 <net_buf_unref>
	err = bt_id_init();
    5052:	f000 fab9 	bl	55c8 <bt_id_init>
	if (err) {
    5056:	4604      	mov	r4, r0
    5058:	2800      	cmp	r0, #0
    505a:	f47f af23 	bne.w	4ea4 <bt_init+0xf8>
		err = bt_conn_init();
    505e:	f001 fb8b 	bl	6778 <bt_conn_init>
		if (err) {
    5062:	4604      	mov	r4, r0
    5064:	2800      	cmp	r0, #0
    5066:	f47f af1d 	bne.w	4ea4 <bt_init+0xf8>
	bt_finalize_init();
    506a:	f7ff fe8d 	bl	4d88 <bt_finalize_init>
	return 0;
    506e:	e719      	b.n	4ea4 <bt_init+0xf8>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    5070:	2102      	movs	r1, #2
    5072:	f640 406d 	movw	r0, #3181	; 0xc6d
    5076:	f7ff fb1b 	bl	46b0 <bt_hci_cmd_create>
		if (!buf) {
    507a:	4604      	mov	r4, r0
    507c:	b980      	cbnz	r0, 50a0 <bt_init+0x2f4>
		return -ENOBUFS;
    507e:	f06f 0468 	mvn.w	r4, #104	; 0x68
    5082:	e70f      	b.n	4ea4 <bt_init+0xf8>
    5084:	20000080 	.word	0x20000080
    5088:	200000f0 	.word	0x200000f0
    508c:	200000f8 	.word	0x200000f8
    5090:	20000150 	.word	0x20000150
    5094:	20000180 	.word	0x20000180
    5098:	20000139 	.word	0x20000139
    509c:	20000138 	.word	0x20000138
    50a0:	2102      	movs	r1, #2
    50a2:	3008      	adds	r0, #8
    50a4:	f017 ff91 	bl	1cfca <net_buf_simple_add>
		cp_le->le = 0x01;
    50a8:	2301      	movs	r3, #1
    50aa:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    50ac:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    50ae:	4621      	mov	r1, r4
    50b0:	4632      	mov	r2, r6
    50b2:	f640 406d 	movw	r0, #3181	; 0xc6d
    50b6:	f7ff fb35 	bl	4724 <bt_hci_cmd_send_sync>
		if (err) {
    50ba:	4604      	mov	r4, r0
    50bc:	2800      	cmp	r0, #0
    50be:	f43f af26 	beq.w	4f0e <bt_init+0x162>
    50c2:	e6ef      	b.n	4ea4 <bt_init+0xf8>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    50c4:	aa01      	add	r2, sp, #4
    50c6:	2100      	movs	r1, #0
    50c8:	f242 001c 	movw	r0, #8220	; 0x201c
    50cc:	f7ff fb2a 	bl	4724 <bt_hci_cmd_send_sync>
		if (err) {
    50d0:	4604      	mov	r4, r0
    50d2:	2800      	cmp	r0, #0
    50d4:	f47f aee6 	bne.w	4ea4 <bt_init+0xf8>
		le_read_supp_states_complete(rsp);
    50d8:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    50da:	6883      	ldr	r3, [r0, #8]
    50dc:	f8d3 2001 	ldr.w	r2, [r3, #1]
    50e0:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    50e4:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
    50e8:	f00d f8d2 	bl	12290 <net_buf_unref>
    50ec:	e714      	b.n	4f18 <bt_init+0x16c>
	else if (!bt_dev.le.acl_mtu) {
    50ee:	2900      	cmp	r1, #0
    50f0:	f47f af5b 	bne.w	4faa <bt_init+0x1fe>
		return -EIO;
    50f4:	f06f 0404 	mvn.w	r4, #4
    50f8:	e6d4      	b.n	4ea4 <bt_init+0xf8>
    50fa:	bf00      	nop

000050fc <init_work>:

static void init_work(struct k_work *work)
{
    50fc:	b510      	push	{r4, lr}
	int err;

	err = bt_init();
    50fe:	f7ff fe55 	bl	4dac <bt_init>
	if (ready_cb) {
    5102:	4b03      	ldr	r3, [pc, #12]	; (5110 <init_work+0x14>)
    5104:	681b      	ldr	r3, [r3, #0]
    5106:	b113      	cbz	r3, 510e <init_work+0x12>
		ready_cb(err);
	}
}
    5108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    510c:	4718      	bx	r3
}
    510e:	bd10      	pop	{r4, pc}
    5110:	20001928 	.word	0x20001928

00005114 <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
    5114:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bt_dev.drv) {
    5116:	4d24      	ldr	r5, [pc, #144]	; (51a8 <bt_enable+0x94>)
    5118:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
{
    511c:	b088      	sub	sp, #32
    511e:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    5120:	2b00      	cmp	r3, #0
    5122:	d03b      	beq.n	519c <bt_enable+0x88>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5124:	f3bf 8f5b 	dmb	ish
    5128:	f105 02cc 	add.w	r2, r5, #204	; 0xcc
    512c:	e852 3f00 	ldrex	r3, [r2]
    5130:	f043 0101 	orr.w	r1, r3, #1
    5134:	e842 1000 	strex	r0, r1, [r2]
    5138:	2800      	cmp	r0, #0
    513a:	d1f7      	bne.n	512c <bt_enable+0x18>
    513c:	f3bf 8f5b 	dmb	ish
		BT_ERR("No HCI driver registered");
		return -ENODEV;
	}

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    5140:	f013 0301 	ands.w	r3, r3, #1
    5144:	d12d      	bne.n	51a2 <bt_enable+0x8e>
		if (err) {
			BT_WARN("Failed to set device name (%d)", err);
		}
	}

	ready_cb = cb;
    5146:	4a19      	ldr	r2, [pc, #100]	; (51ac <bt_enable+0x98>)
    5148:	6016      	str	r6, [r2, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    514a:	2000      	movs	r0, #0
    514c:	2100      	movs	r1, #0
    514e:	f06f 0208 	mvn.w	r2, #8
    5152:	e9cd 0106 	strd	r0, r1, [sp, #24]
    5156:	e9cd 3202 	strd	r3, r2, [sp, #8]
    515a:	e9cd 3300 	strd	r3, r3, [sp]
    515e:	9304      	str	r3, [sp, #16]
    5160:	4913      	ldr	r1, [pc, #76]	; (51b0 <bt_enable+0x9c>)
    5162:	4b14      	ldr	r3, [pc, #80]	; (51b4 <bt_enable+0xa0>)
    5164:	4814      	ldr	r0, [pc, #80]	; (51b8 <bt_enable+0xa4>)
    5166:	f44f 7220 	mov.w	r2, #640	; 0x280
    516a:	f010 f9cd 	bl	15508 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    516e:	4913      	ldr	r1, [pc, #76]	; (51bc <bt_enable+0xa8>)
    5170:	4811      	ldr	r0, [pc, #68]	; (51b8 <bt_enable+0xa4>)
    5172:	f019 f94f 	bl	1e414 <z_impl_k_thread_name_set>

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		bt_hci_ecc_init();
	}

	err = bt_dev.drv->open();
    5176:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
    517a:	68db      	ldr	r3, [r3, #12]
    517c:	4798      	blx	r3
	if (err) {
    517e:	4604      	mov	r4, r0
    5180:	b948      	cbnz	r0, 5196 <bt_enable+0x82>
		return err;
	}

	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);

	if (!cb) {
    5182:	b926      	cbnz	r6, 518e <bt_enable+0x7a>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
    5184:	b008      	add	sp, #32
    5186:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
    518a:	f7ff be0f 	b.w	4dac <bt_init>
	k_work_submit(&bt_dev.init);
    518e:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
    5192:	f010 fbfd 	bl	15990 <k_work_submit>
}
    5196:	4620      	mov	r0, r4
    5198:	b008      	add	sp, #32
    519a:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
    519c:	f06f 0412 	mvn.w	r4, #18
    51a0:	e7f9      	b.n	5196 <bt_enable+0x82>
		return -EALREADY;
    51a2:	f06f 0477 	mvn.w	r4, #119	; 0x77
    51a6:	e7f6      	b.n	5196 <bt_enable+0x82>
    51a8:	20000080 	.word	0x20000080
    51ac:	20001928 	.word	0x20001928
    51b0:	200033e0 	.word	0x200033e0
    51b4:	00004a45 	.word	0x00004a45
    51b8:	20000d20 	.word	0x20000d20
    51bc:	00020300 	.word	0x00020300

000051c0 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
    51c0:	4800      	ldr	r0, [pc, #0]	; (51c4 <bt_get_name+0x4>)
    51c2:	4770      	bx	lr
    51c4:	00020306 	.word	0x00020306

000051c8 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
    51c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    51ca:	4f0b      	ldr	r7, [pc, #44]	; (51f8 <id_find+0x30>)
{
    51cc:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
    51ce:	2500      	movs	r5, #0
    51d0:	79fb      	ldrb	r3, [r7, #7]
    51d2:	b2ec      	uxtb	r4, r5
    51d4:	42a3      	cmp	r3, r4
    51d6:	d802      	bhi.n	51de <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    51d8:	f06f 0401 	mvn.w	r4, #1
    51dc:	e009      	b.n	51f2 <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    51de:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
    51e2:	2207      	movs	r2, #7
    51e4:	4439      	add	r1, r7
    51e6:	4630      	mov	r0, r6
    51e8:	f012 f823 	bl	17232 <memcmp>
    51ec:	3501      	adds	r5, #1
    51ee:	2800      	cmp	r0, #0
    51f0:	d1ee      	bne.n	51d0 <id_find+0x8>
}
    51f2:	4620      	mov	r0, r4
    51f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    51f6:	bf00      	nop
    51f8:	20000080 	.word	0x20000080

000051fc <set_random_address>:
{
    51fc:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
    51fe:	4914      	ldr	r1, [pc, #80]	; (5250 <set_random_address+0x54>)
    5200:	2206      	movs	r2, #6
    5202:	4605      	mov	r5, r0
    5204:	f012 f815 	bl	17232 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    5208:	4604      	mov	r4, r0
    520a:	b1e0      	cbz	r0, 5246 <set_random_address+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    520c:	2106      	movs	r1, #6
    520e:	f242 0005 	movw	r0, #8197	; 0x2005
    5212:	f7ff fa4d 	bl	46b0 <bt_hci_cmd_create>
	if (!buf) {
    5216:	4604      	mov	r4, r0
    5218:	b1b8      	cbz	r0, 524a <set_random_address+0x4e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    521a:	2206      	movs	r2, #6
    521c:	4629      	mov	r1, r5
    521e:	3008      	adds	r0, #8
    5220:	f017 fed9 	bl	1cfd6 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    5224:	4621      	mov	r1, r4
    5226:	2200      	movs	r2, #0
    5228:	f242 0005 	movw	r0, #8197	; 0x2005
    522c:	f7ff fa7a 	bl	4724 <bt_hci_cmd_send_sync>
	if (err) {
    5230:	4604      	mov	r4, r0
    5232:	b940      	cbnz	r0, 5246 <set_random_address+0x4a>
	memcpy(dst, src, sizeof(*dst));
    5234:	2206      	movs	r2, #6
    5236:	4806      	ldr	r0, [pc, #24]	; (5250 <set_random_address+0x54>)
    5238:	4629      	mov	r1, r5
    523a:	f012 f80b 	bl	17254 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    523e:	4b05      	ldr	r3, [pc, #20]	; (5254 <set_random_address+0x58>)
    5240:	2201      	movs	r2, #1
    5242:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
    5246:	4620      	mov	r0, r4
    5248:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    524a:	f06f 0468 	mvn.w	r4, #104	; 0x68
    524e:	e7fa      	b.n	5246 <set_random_address+0x4a>
    5250:	200000e1 	.word	0x200000e1
    5254:	20000080 	.word	0x20000080

00005258 <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    5258:	b530      	push	{r4, r5, lr}
    525a:	4604      	mov	r4, r0
    525c:	b085      	sub	sp, #20
{
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    525e:	460d      	mov	r5, r1
    5260:	b1a1      	cbz	r1, 528c <id_create.constprop.0+0x34>
    5262:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    5264:	2207      	movs	r2, #7
    5266:	a902      	add	r1, sp, #8
    5268:	4628      	mov	r0, r5
    526a:	9302      	str	r3, [sp, #8]
    526c:	f8cd 300b 	str.w	r3, [sp, #11]
    5270:	f011 ffdf 	bl	17232 <memcmp>
    5274:	b150      	cbz	r0, 528c <id_create.constprop.0+0x34>
	memcpy(dst, src, sizeof(*dst));
    5276:	4812      	ldr	r0, [pc, #72]	; (52c0 <id_create.constprop.0+0x68>)
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    5278:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    527c:	2207      	movs	r2, #7
    527e:	4629      	mov	r1, r5
    5280:	4420      	add	r0, r4
    5282:	f011 ffe7 	bl	17254 <memcpy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
    5286:	2000      	movs	r0, #0
}
    5288:	b005      	add	sp, #20
    528a:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
    528c:	4668      	mov	r0, sp
    528e:	f012 fa13 	bl	176b8 <bt_addr_le_create_static>
			if (err) {
    5292:	2800      	cmp	r0, #0
    5294:	d1f8      	bne.n	5288 <id_create.constprop.0+0x30>
		} while (id_find(&new_addr) >= 0);
    5296:	4668      	mov	r0, sp
    5298:	f7ff ff96 	bl	51c8 <id_find>
    529c:	2800      	cmp	r0, #0
    529e:	daf5      	bge.n	528c <id_create.constprop.0+0x34>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    52a0:	4807      	ldr	r0, [pc, #28]	; (52c0 <id_create.constprop.0+0x68>)
    52a2:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    52a6:	4404      	add	r4, r0
    52a8:	2207      	movs	r2, #7
    52aa:	4669      	mov	r1, sp
    52ac:	4620      	mov	r0, r4
    52ae:	f011 ffd1 	bl	17254 <memcpy>
		if (addr) {
    52b2:	2d00      	cmp	r5, #0
    52b4:	d0e7      	beq.n	5286 <id_create.constprop.0+0x2e>
    52b6:	2207      	movs	r2, #7
    52b8:	4621      	mov	r1, r4
    52ba:	4628      	mov	r0, r5
    52bc:	e7e1      	b.n	5282 <id_create.constprop.0+0x2a>
    52be:	bf00      	nop
    52c0:	20000080 	.word	0x20000080

000052c4 <bt_id_adv_random_addr_check>:
{
    52c4:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    52c6:	4805      	ldr	r0, [pc, #20]	; (52dc <bt_id_adv_random_addr_check+0x18>)
    52c8:	f012 fc37 	bl	17b3a <atomic_get>
	if (!(atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING) ||
    52cc:	0503      	lsls	r3, r0, #20
    52ce:	d402      	bmi.n	52d6 <bt_id_adv_random_addr_check+0x12>
    52d0:	4802      	ldr	r0, [pc, #8]	; (52dc <bt_id_adv_random_addr_check+0x18>)
    52d2:	f012 fc32 	bl	17b3a <atomic_get>
}
    52d6:	2001      	movs	r0, #1
    52d8:	bd08      	pop	{r3, pc}
    52da:	bf00      	nop
    52dc:	2000014c 	.word	0x2000014c

000052e0 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
    52e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    52e2:	460c      	mov	r4, r1
	int new_id, err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    52e4:	4605      	mov	r5, r0
    52e6:	b918      	cbnz	r0, 52f0 <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    52e8:	b1ec      	cbz	r4, 5326 <bt_id_create+0x46>
		return -EINVAL;
    52ea:	f06f 0015 	mvn.w	r0, #21
    52ee:	e018      	b.n	5322 <bt_id_create+0x42>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    52f0:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    52f2:	2207      	movs	r2, #7
    52f4:	4669      	mov	r1, sp
    52f6:	9300      	str	r3, [sp, #0]
    52f8:	f8cd 3003 	str.w	r3, [sp, #3]
    52fc:	f011 ff99 	bl	17232 <memcmp>
    5300:	2800      	cmp	r0, #0
    5302:	d0f1      	beq.n	52e8 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    5304:	782b      	ldrb	r3, [r5, #0]
    5306:	2b01      	cmp	r3, #1
    5308:	d1ef      	bne.n	52ea <bt_id_create+0xa>
    530a:	79ab      	ldrb	r3, [r5, #6]
    530c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    5310:	2bc0      	cmp	r3, #192	; 0xc0
    5312:	d1ea      	bne.n	52ea <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
    5314:	4628      	mov	r0, r5
    5316:	f7ff ff57 	bl	51c8 <id_find>
    531a:	2800      	cmp	r0, #0
    531c:	dbe4      	blt.n	52e8 <bt_id_create+0x8>
			return -EALREADY;
    531e:	f06f 0077 	mvn.w	r0, #119	; 0x77
	if (err) {
		return err;
	}

	return new_id;
}
    5322:	b002      	add	sp, #8
    5324:	bd70      	pop	{r4, r5, r6, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    5326:	4e12      	ldr	r6, [pc, #72]	; (5370 <bt_id_create+0x90>)
    5328:	79f3      	ldrb	r3, [r6, #7]
    532a:	2b01      	cmp	r3, #1
    532c:	d01c      	beq.n	5368 <bt_id_create+0x88>
    532e:	f106 00cc 	add.w	r0, r6, #204	; 0xcc
    5332:	f012 fc02 	bl	17b3a <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    5336:	07c3      	lsls	r3, r0, #31
    5338:	d40b      	bmi.n	5352 <bt_id_create+0x72>
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
    533a:	2d00      	cmp	r5, #0
    533c:	d0d5      	beq.n	52ea <bt_id_create+0xa>
    533e:	2207      	movs	r2, #7
    5340:	4669      	mov	r1, sp
    5342:	4628      	mov	r0, r5
    5344:	9400      	str	r4, [sp, #0]
    5346:	f8cd 4003 	str.w	r4, [sp, #3]
    534a:	f011 ff72 	bl	17232 <memcmp>
    534e:	2800      	cmp	r0, #0
    5350:	d0cb      	beq.n	52ea <bt_id_create+0xa>
	new_id = bt_dev.id_count++;
    5352:	79f4      	ldrb	r4, [r6, #7]
	err = id_create(new_id, addr, irk);
    5354:	4629      	mov	r1, r5
	new_id = bt_dev.id_count++;
    5356:	1c63      	adds	r3, r4, #1
	err = id_create(new_id, addr, irk);
    5358:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
    535a:	71f3      	strb	r3, [r6, #7]
	err = id_create(new_id, addr, irk);
    535c:	f7ff ff7c 	bl	5258 <id_create.constprop.0>
	new_id = bt_dev.id_count++;
    5360:	2800      	cmp	r0, #0
    5362:	bf08      	it	eq
    5364:	4620      	moveq	r0, r4
    5366:	e7dc      	b.n	5322 <bt_id_create+0x42>
		return -ENOMEM;
    5368:	f06f 000b 	mvn.w	r0, #11
    536c:	e7d9      	b.n	5322 <bt_id_create+0x42>
    536e:	bf00      	nop
    5370:	20000080 	.word	0x20000080

00005374 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
    5374:	b570      	push	{r4, r5, r6, lr}
    5376:	b086      	sub	sp, #24
    5378:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    537a:	aa01      	add	r2, sp, #4
    537c:	2100      	movs	r1, #0
    537e:	f241 0009 	movw	r0, #4105	; 0x1009
    5382:	f7ff f9cf 	bl	4724 <bt_hci_cmd_send_sync>
	if (err) {
    5386:	4604      	mov	r4, r0
    5388:	b970      	cbnz	r0, 53a8 <bt_id_read_public_addr+0x34>
		BT_WARN("Failed to read public address");
		return 0U;
	}

	rp = (void *)rsp->data;
    538a:	9b01      	ldr	r3, [sp, #4]

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    538c:	9002      	str	r0, [sp, #8]
    538e:	689d      	ldr	r5, [r3, #8]
    5390:	f8ad 000c 	strh.w	r0, [sp, #12]
    5394:	3501      	adds	r5, #1
	return memcmp(a, b, sizeof(*a));
    5396:	2206      	movs	r2, #6
    5398:	a902      	add	r1, sp, #8
    539a:	4628      	mov	r0, r5
    539c:	f011 ff49 	bl	17232 <memcmp>
    53a0:	b920      	cbnz	r0, 53ac <bt_id_read_public_addr+0x38>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
    53a2:	9801      	ldr	r0, [sp, #4]
    53a4:	f00c ff74 	bl	12290 <net_buf_unref>
		return 0U;
    53a8:	2000      	movs	r0, #0
    53aa:	e016      	b.n	53da <bt_id_read_public_addr+0x66>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
    53ac:	4b0c      	ldr	r3, [pc, #48]	; (53e0 <bt_id_read_public_addr+0x6c>)
    53ae:	6818      	ldr	r0, [r3, #0]
    53b0:	9004      	str	r0, [sp, #16]
    53b2:	889b      	ldrh	r3, [r3, #4]
    53b4:	f8ad 3014 	strh.w	r3, [sp, #20]
    53b8:	2206      	movs	r2, #6
    53ba:	a904      	add	r1, sp, #16
    53bc:	4628      	mov	r0, r5
    53be:	f011 ff38 	bl	17232 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    53c2:	2800      	cmp	r0, #0
    53c4:	d0ed      	beq.n	53a2 <bt_id_read_public_addr+0x2e>
	memcpy(dst, src, sizeof(*dst));
    53c6:	2206      	movs	r2, #6
    53c8:	4629      	mov	r1, r5
    53ca:	1c70      	adds	r0, r6, #1
    53cc:	f011 ff42 	bl	17254 <memcpy>
	}

	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
    53d0:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    53d2:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
    53d4:	f00c ff5c 	bl	12290 <net_buf_unref>
	return 1U;
    53d8:	2001      	movs	r0, #1
}
    53da:	b006      	add	sp, #24
    53dc:	bd70      	pop	{r4, r5, r6, pc}
    53de:	bf00      	nop
    53e0:	0001f27b 	.word	0x0001f27b

000053e4 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
    53e4:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
    53e6:	4668      	mov	r0, sp
    53e8:	f7ff ffc4 	bl	5374 <bt_id_read_public_addr>
    53ec:	4b04      	ldr	r3, [pc, #16]	; (5400 <bt_setup_public_id_addr+0x1c>)
    53ee:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
    53f0:	b118      	cbz	r0, 53fa <bt_setup_public_id_addr+0x16>
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	return id_create(BT_ID_DEFAULT, &addr, irk);
    53f2:	4669      	mov	r1, sp
    53f4:	2000      	movs	r0, #0
    53f6:	f7ff ff2f 	bl	5258 <id_create.constprop.0>
}
    53fa:	b003      	add	sp, #12
    53fc:	f85d fb04 	ldr.w	pc, [sp], #4
    5400:	20000080 	.word	0x20000080

00005404 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
    5404:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    5408:	4b15      	ldr	r3, [pc, #84]	; (5460 <bt_read_static_addr+0x5c>)
    540a:	f893 40ba 	ldrb.w	r4, [r3, #186]	; 0xba
    540e:	f014 0401 	ands.w	r4, r4, #1
{
    5412:	4607      	mov	r7, r0
    5414:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    5416:	d015      	beq.n	5444 <bt_read_static_addr+0x40>
		BT_WARN("Read Static Addresses command not available");
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    5418:	aa01      	add	r2, sp, #4
    541a:	2100      	movs	r1, #0
    541c:	f64f 4009 	movw	r0, #64521	; 0xfc09
    5420:	f7ff f980 	bl	4724 <bt_hci_cmd_send_sync>
	if (err) {
    5424:	4605      	mov	r5, r0
    5426:	b9c8      	cbnz	r0, 545c <bt_read_static_addr+0x58>
		BT_WARN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	rp = (void *)rsp->data;
    5428:	9b01      	ldr	r3, [sp, #4]
    542a:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
    542c:	785c      	ldrb	r4, [r3, #1]
    542e:	42b4      	cmp	r4, r6
    5430:	bf28      	it	cs
    5432:	4634      	movcs	r4, r6
		net_buf_unref(rsp);
		return 0;
	}

	for (i = 0; i < cnt; i++) {
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    5434:	f04f 0816 	mov.w	r8, #22
    5438:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
    543a:	42a5      	cmp	r5, r4
    543c:	db06      	blt.n	544c <bt_read_static_addr+0x48>
	}

	net_buf_unref(rsp);
    543e:	9801      	ldr	r0, [sp, #4]
    5440:	f00c ff26 	bl	12290 <net_buf_unref>
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
	}

	return cnt;
}
    5444:	4620      	mov	r0, r4
    5446:	b002      	add	sp, #8
    5448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    544c:	fb08 7005 	mla	r0, r8, r5, r7
    5450:	2216      	movs	r2, #22
    5452:	4631      	mov	r1, r6
    5454:	f011 fefe 	bl	17254 <memcpy>
	for (i = 0; i < cnt; i++) {
    5458:	3501      	adds	r5, #1
    545a:	e7ee      	b.n	543a <bt_read_static_addr+0x36>
		return 0;
    545c:	2400      	movs	r4, #0
    545e:	e7f1      	b.n	5444 <bt_read_static_addr+0x40>
    5460:	20000080 	.word	0x20000080

00005464 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
    5464:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
    5466:	4e15      	ldr	r6, [pc, #84]	; (54bc <bt_setup_random_id_addr+0x58>)
    5468:	79f4      	ldrb	r4, [r6, #7]
{
    546a:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
    546c:	b9f4      	cbnz	r4, 54ac <bt_setup_random_id_addr+0x48>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    546e:	2101      	movs	r1, #1
    5470:	a802      	add	r0, sp, #8
    5472:	f7ff ffc7 	bl	5404 <bt_read_static_addr>
    5476:	71f0      	strb	r0, [r6, #7]

		if (bt_dev.id_count) {
    5478:	b1c0      	cbz	r0, 54ac <bt_setup_random_id_addr+0x48>
					atomic_set_bit(bt_dev.flags,
						       BT_DEV_STORE_ID);
				}
#endif /* CONFIG_BT_PRIVACY */

				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    547a:	2716      	movs	r7, #22
    547c:	ab02      	add	r3, sp, #8
    547e:	b2e5      	uxtb	r5, r4
    5480:	fb07 3105 	mla	r1, r7, r5, r3
    5484:	2206      	movs	r2, #6
    5486:	f10d 0001 	add.w	r0, sp, #1
    548a:	f011 fee3 	bl	17254 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
    548e:	2301      	movs	r3, #1

				err = id_create(i, &addr, irk);
    5490:	4669      	mov	r1, sp
    5492:	4628      	mov	r0, r5
				addr.type = BT_ADDR_LE_RANDOM;
    5494:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
    5498:	f7ff fede 	bl	5258 <id_create.constprop.0>
				if (err) {
    549c:	b920      	cbnz	r0, 54a8 <bt_setup_random_id_addr+0x44>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    549e:	79f2      	ldrb	r2, [r6, #7]
    54a0:	3401      	adds	r4, #1
    54a2:	b2e3      	uxtb	r3, r4
    54a4:	429a      	cmp	r2, r3
    54a6:	d8e9      	bhi.n	547c <bt_setup_random_id_addr+0x18>
	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
}
    54a8:	b009      	add	sp, #36	; 0x24
    54aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_id_create(NULL, NULL);
    54ac:	2100      	movs	r1, #0
    54ae:	4608      	mov	r0, r1
}
    54b0:	b009      	add	sp, #36	; 0x24
    54b2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
    54b6:	f7ff bf13 	b.w	52e0 <bt_id_create>
    54ba:	bf00      	nop
    54bc:	20000080 	.word	0x20000080

000054c0 <bt_id_set_scan_own_addr>:

	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
}

int bt_id_set_scan_own_addr(bool active_scan, uint8_t *own_addr_type)
{
    54c0:	b570      	push	{r4, r5, r6, lr}
			*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
		} else {
			*own_addr_type = BT_ADDR_LE_RANDOM;
		}
	} else {
		*own_addr_type = bt_dev.id_addr[0].type;
    54c2:	4b0b      	ldr	r3, [pc, #44]	; (54f0 <bt_id_set_scan_own_addr+0x30>)
    54c4:	781b      	ldrb	r3, [r3, #0]
    54c6:	700b      	strb	r3, [r1, #0]
{
    54c8:	4606      	mov	r6, r0
    54ca:	460d      	mov	r5, r1
		/* Use NRPA unless identity has been explicitly requested
		 * (through Kconfig).
		 * Use same RPA as legacy advertiser if advertising.
		 */
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
		    !is_adv_using_rand_addr()) {
    54cc:	f012 fb3b 	bl	17b46 <is_adv_using_rand_addr>
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    54d0:	b928      	cbnz	r0, 54de <bt_id_set_scan_own_addr+0x1e>
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
    54d2:	f012 fb44 	bl	17b5e <bt_id_set_private_addr>
			if (err) {
    54d6:	4604      	mov	r4, r0
    54d8:	b918      	cbnz	r0, 54e2 <bt_id_set_scan_own_addr+0x22>

				BT_WARN("Ignoring failure to set address for passive scan (%d)",
					err);
			}

			*own_addr_type = BT_ADDR_LE_RANDOM;
    54da:	2301      	movs	r3, #1
    54dc:	702b      	strb	r3, [r5, #0]
				return err;
			}
		}
	}

	return 0;
    54de:	2400      	movs	r4, #0
    54e0:	e004      	b.n	54ec <bt_id_set_scan_own_addr+0x2c>
				if (active_scan || !is_adv_using_rand_addr()) {
    54e2:	b91e      	cbnz	r6, 54ec <bt_id_set_scan_own_addr+0x2c>
    54e4:	f012 fb2f 	bl	17b46 <is_adv_using_rand_addr>
    54e8:	2800      	cmp	r0, #0
    54ea:	d1f6      	bne.n	54da <bt_id_set_scan_own_addr+0x1a>
}
    54ec:	4620      	mov	r0, r4
    54ee:	bd70      	pop	{r4, r5, r6, pc}
    54f0:	20000080 	.word	0x20000080

000054f4 <bt_id_set_adv_own_addr>:
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
    54f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int err = 0;

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    54f8:	f011 0401 	ands.w	r4, r1, #1
	id_addr = &bt_dev.id_addr[adv->id];
    54fc:	7806      	ldrb	r6, [r0, #0]
{
    54fe:	4680      	mov	r8, r0
    5500:	460d      	mov	r5, r1
    5502:	4691      	mov	r9, r2
    5504:	461f      	mov	r7, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    5506:	d02b      	beq.n	5560 <bt_id_set_adv_own_addr+0x6c>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    5508:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 55c0 <bt_id_set_adv_own_addr+0xcc>
    550c:	b12a      	cbz	r2, 551a <bt_id_set_adv_own_addr+0x26>
    550e:	0688      	lsls	r0, r1, #26
    5510:	d503      	bpl.n	551a <bt_id_set_adv_own_addr+0x26>
    5512:	f898 30d0 	ldrb.w	r3, [r8, #208]	; 0xd0
    5516:	0659      	lsls	r1, r3, #25
    5518:	d54f      	bpl.n	55ba <bt_id_set_adv_own_addr+0xc6>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    551a:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
    551e:	ea4f 0ac6 	mov.w	sl, r6, lsl #3
    5522:	f818 3003 	ldrb.w	r3, [r8, r3]
    5526:	2b01      	cmp	r3, #1
    5528:	d009      	beq.n	553e <bt_id_set_adv_own_addr+0x4a>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
    552a:	ebaa 0606 	sub.w	r6, sl, r6
    552e:	f818 3006 	ldrb.w	r3, [r8, r6]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    5532:	f1b9 0f00 	cmp.w	r9, #0
    5536:	d10e      	bne.n	5556 <bt_id_set_adv_own_addr+0x62>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    5538:	703b      	strb	r3, [r7, #0]
		if (err) {
			return err;
		}
	}

	return 0;
    553a:	2400      	movs	r4, #0
    553c:	e008      	b.n	5550 <bt_id_set_adv_own_addr+0x5c>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
    553e:	2007      	movs	r0, #7
    5540:	fb10 3006 	smlabb	r0, r0, r6, r3
		return set_random_address(addr);
    5544:	4440      	add	r0, r8
    5546:	f7ff fe59 	bl	51fc <set_random_address>
				if (err) {
    554a:	4604      	mov	r4, r0
    554c:	2800      	cmp	r0, #0
    554e:	d0ec      	beq.n	552a <bt_id_set_adv_own_addr+0x36>
}
    5550:	4620      	mov	r0, r4
    5552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    5556:	06aa      	lsls	r2, r5, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    5558:	bf48      	it	mi
    555a:	f043 0302 	orrmi.w	r3, r3, #2
    555e:	e7eb      	b.n	5538 <bt_id_set_adv_own_addr+0x44>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
    5560:	f011 0504 	ands.w	r5, r1, #4
    5564:	d014      	beq.n	5590 <bt_id_set_adv_own_addr+0x9c>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    5566:	f8df 8058 	ldr.w	r8, [pc, #88]	; 55c0 <bt_id_set_adv_own_addr+0xcc>
    556a:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
    556e:	00f5      	lsls	r5, r6, #3
    5570:	f818 3003 	ldrb.w	r3, [r8, r3]
    5574:	2b01      	cmp	r3, #1
    5576:	d106      	bne.n	5586 <bt_id_set_adv_own_addr+0x92>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
    5578:	2007      	movs	r0, #7
    557a:	fb10 3006 	smlabb	r0, r0, r6, r3
		return set_random_address(addr);
    557e:	4440      	add	r0, r8
    5580:	f7ff fe3c 	bl	51fc <set_random_address>
    5584:	4604      	mov	r4, r0
			*own_addr_type = id_addr->type;
    5586:	1bad      	subs	r5, r5, r6
    5588:	f818 3005 	ldrb.w	r3, [r8, r5]
    558c:	703b      	strb	r3, [r7, #0]
    558e:	e7df      	b.n	5550 <bt_id_set_adv_own_addr+0x5c>
    5590:	480c      	ldr	r0, [pc, #48]	; (55c4 <bt_id_set_adv_own_addr+0xd0>)
    5592:	f012 fad2 	bl	17b3a <atomic_get>
			if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    5596:	0683      	lsls	r3, r0, #26
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    5598:	f3c0 1640 	ubfx	r6, r0, #5, #1
    559c:	d502      	bpl.n	55a4 <bt_id_set_adv_own_addr+0xb0>
				bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
    559e:	4628      	mov	r0, r5
    55a0:	f012 fc66 	bl	17e70 <bt_le_scan_set_enable>
			err = bt_id_set_adv_private_addr(adv);
    55a4:	4640      	mov	r0, r8
    55a6:	f012 faec 	bl	17b82 <bt_id_set_adv_private_addr>
    55aa:	4604      	mov	r4, r0
			*own_addr_type = BT_ADDR_LE_RANDOM;
    55ac:	2001      	movs	r0, #1
    55ae:	7038      	strb	r0, [r7, #0]
			if (scan_enabled) {
    55b0:	2e00      	cmp	r6, #0
    55b2:	d0cd      	beq.n	5550 <bt_id_set_adv_own_addr+0x5c>
				bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
    55b4:	f012 fc5c 	bl	17e70 <bt_le_scan_set_enable>
		if (err) {
    55b8:	e7ca      	b.n	5550 <bt_id_set_adv_own_addr+0x5c>
			return -ENOTSUP;
    55ba:	f06f 0485 	mvn.w	r4, #133	; 0x85
    55be:	e7c7      	b.n	5550 <bt_id_set_adv_own_addr+0x5c>
    55c0:	20000080 	.word	0x20000080
    55c4:	2000014c 	.word	0x2000014c

000055c8 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
    55c8:	b510      	push	{r4, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    55ca:	4c0a      	ldr	r4, [pc, #40]	; (55f4 <bt_id_init+0x2c>)
    55cc:	79e3      	ldrb	r3, [r4, #7]
    55ce:	b10b      	cbz	r3, 55d4 <bt_id_init+0xc>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
    55d0:	2000      	movs	r0, #0
}
    55d2:	bd10      	pop	{r4, pc}
		err = bt_setup_public_id_addr();
    55d4:	f7ff ff06 	bl	53e4 <bt_setup_public_id_addr>
		if (err) {
    55d8:	2800      	cmp	r0, #0
    55da:	d1fa      	bne.n	55d2 <bt_id_init+0xa>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    55dc:	79e3      	ldrb	r3, [r4, #7]
    55de:	2b00      	cmp	r3, #0
    55e0:	d1f6      	bne.n	55d0 <bt_id_init+0x8>
		err = bt_setup_random_id_addr();
    55e2:	f7ff ff3f 	bl	5464 <bt_setup_random_id_addr>
		if (err) {
    55e6:	2800      	cmp	r0, #0
    55e8:	d1f3      	bne.n	55d2 <bt_id_init+0xa>
		err = set_random_address(&bt_dev.id_addr[0].a);
    55ea:	1c60      	adds	r0, r4, #1
}
    55ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = set_random_address(&bt_dev.id_addr[0].a);
    55f0:	f7ff be04 	b.w	51fc <set_random_address>
    55f4:	20000080 	.word	0x20000080

000055f8 <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    55f8:	6843      	ldr	r3, [r0, #4]
{
    55fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
    55fc:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    55fe:	0558      	lsls	r0, r3, #21
    5600:	d502      	bpl.n	5608 <valid_adv_param+0x10>
		return false;
    5602:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
    5604:	b003      	add	sp, #12
    5606:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    5608:	6922      	ldr	r2, [r4, #16]
    560a:	b10a      	cbz	r2, 5610 <valid_adv_param+0x18>
    560c:	07d9      	lsls	r1, r3, #31
    560e:	d5f8      	bpl.n	5602 <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
    5610:	4d1a      	ldr	r5, [pc, #104]	; (567c <valid_adv_param+0x84>)
    5612:	7820      	ldrb	r0, [r4, #0]
    5614:	79eb      	ldrb	r3, [r5, #7]
    5616:	4283      	cmp	r3, r0
    5618:	d9f3      	bls.n	5602 <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    561a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    561e:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    5620:	2207      	movs	r2, #7
    5622:	4669      	mov	r1, sp
    5624:	4428      	add	r0, r5
    5626:	9300      	str	r3, [sp, #0]
    5628:	f8cd 3003 	str.w	r3, [sp, #3]
    562c:	f011 fe01 	bl	17232 <memcmp>
	if (param->id >= bt_dev.id_count ||
    5630:	2800      	cmp	r0, #0
    5632:	d0e6      	beq.n	5602 <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    5634:	6860      	ldr	r0, [r4, #4]
    5636:	07c2      	lsls	r2, r0, #31
    5638:	d406      	bmi.n	5648 <valid_adv_param+0x50>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    563a:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
    563e:	2b08      	cmp	r3, #8
    5640:	d802      	bhi.n	5648 <valid_adv_param+0x50>
    5642:	68a3      	ldr	r3, [r4, #8]
    5644:	2b9f      	cmp	r3, #159	; 0x9f
    5646:	d9dc      	bls.n	5602 <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
    5648:	f010 0f30 	tst.w	r0, #48	; 0x30
    564c:	d002      	beq.n	5654 <valid_adv_param+0x5c>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
    564e:	6923      	ldr	r3, [r4, #16]
    5650:	2b00      	cmp	r3, #0
    5652:	d0d6      	beq.n	5602 <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
    5654:	06c3      	lsls	r3, r0, #27
    5656:	d401      	bmi.n	565c <valid_adv_param+0x64>
    5658:	6923      	ldr	r3, [r4, #16]
    565a:	b943      	cbnz	r3, 566e <valid_adv_param+0x76>
		if (param->interval_min > param->interval_max ||
    565c:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    5660:	429a      	cmp	r2, r3
    5662:	d8ce      	bhi.n	5602 <valid_adv_param+0xa>
    5664:	2a1f      	cmp	r2, #31
    5666:	d9cc      	bls.n	5602 <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
    5668:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    566c:	d8c9      	bhi.n	5602 <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
    566e:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
    5672:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
    5676:	bf18      	it	ne
    5678:	2001      	movne	r0, #1
    567a:	e7c3      	b.n	5604 <valid_adv_param+0xc>
    567c:	20000080 	.word	0x20000080

00005680 <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
    5680:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
    5682:	4606      	mov	r6, r0
    5684:	4b1e      	ldr	r3, [pc, #120]	; (5700 <le_adv_start_add_conn+0x80>)
    5686:	f816 2b09 	ldrb.w	r2, [r6], #9
    568a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
{
    568e:	b085      	sub	sp, #20

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    5690:	2300      	movs	r3, #0
{
    5692:	4605      	mov	r5, r0
    5694:	2207      	movs	r2, #7
    5696:	460f      	mov	r7, r1
    5698:	4630      	mov	r0, r6
    569a:	4669      	mov	r1, sp
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    569c:	9300      	str	r3, [sp, #0]
    569e:	f8cd 3003 	str.w	r3, [sp, #3]
    56a2:	f011 fdc6 	bl	17232 <memcmp>
    56a6:	782a      	ldrb	r2, [r5, #0]
    56a8:	4604      	mov	r4, r0
    56aa:	b9a8      	cbnz	r0, 56d8 <le_adv_start_add_conn+0x58>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
    56ac:	4b15      	ldr	r3, [pc, #84]	; (5704 <le_adv_start_add_conn+0x84>)
    56ae:	6818      	ldr	r0, [r3, #0]
    56b0:	8899      	ldrh	r1, [r3, #4]
    56b2:	9002      	str	r0, [sp, #8]
    56b4:	799b      	ldrb	r3, [r3, #6]
    56b6:	f8ad 100c 	strh.w	r1, [sp, #12]
    56ba:	4610      	mov	r0, r2
    56bc:	a902      	add	r1, sp, #8
    56be:	f88d 300e 	strb.w	r3, [sp, #14]
    56c2:	f000 febb 	bl	643c <bt_conn_add_le>
		if (!conn) {
    56c6:	4605      	mov	r5, r0
    56c8:	b1b8      	cbz	r0, 56fa <le_adv_start_add_conn+0x7a>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
    56ca:	2104      	movs	r1, #4
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
	if (!conn) {
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    56cc:	f000 fd6a 	bl	61a4 <bt_conn_set_state>
	*out_conn = conn;
    56d0:	603d      	str	r5, [r7, #0]
	return 0;
}
    56d2:	4620      	mov	r0, r4
    56d4:	b005      	add	sp, #20
    56d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
    56d8:	4631      	mov	r1, r6
    56da:	4610      	mov	r0, r2
    56dc:	f012 fce6 	bl	180ac <bt_conn_exists_le>
    56e0:	4604      	mov	r4, r0
    56e2:	b938      	cbnz	r0, 56f4 <le_adv_start_add_conn+0x74>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
    56e4:	7828      	ldrb	r0, [r5, #0]
    56e6:	4631      	mov	r1, r6
    56e8:	f000 fea8 	bl	643c <bt_conn_add_le>
	if (!conn) {
    56ec:	4605      	mov	r5, r0
    56ee:	b120      	cbz	r0, 56fa <le_adv_start_add_conn+0x7a>
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    56f0:	2105      	movs	r1, #5
    56f2:	e7eb      	b.n	56cc <le_adv_start_add_conn+0x4c>
		return -EINVAL;
    56f4:	f06f 0415 	mvn.w	r4, #21
    56f8:	e7eb      	b.n	56d2 <le_adv_start_add_conn+0x52>
		return -ENOMEM;
    56fa:	f06f 040b 	mvn.w	r4, #11
    56fe:	e7e8      	b.n	56d2 <le_adv_start_add_conn+0x52>
    5700:	20000080 	.word	0x20000080
    5704:	0001f281 	.word	0x0001f281

00005708 <bt_le_adv_lookup_legacy>:
}
    5708:	4800      	ldr	r0, [pc, #0]	; (570c <bt_le_adv_lookup_legacy+0x4>)
    570a:	4770      	bx	lr
    570c:	20000098 	.word	0x20000098

00005710 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
    5710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
    5714:	690e      	ldr	r6, [r1, #16]
{
    5716:	b08f      	sub	sp, #60	; 0x3c
    5718:	469a      	mov	sl, r3
	struct bt_conn *conn = NULL;
    571a:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable = false;
    571c:	ebb6 0903 	subs.w	r9, r6, r3
{
    5720:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    5722:	488c      	ldr	r0, [pc, #560]	; (5954 <bt_le_adv_start_legacy+0x244>)
    5724:	9205      	str	r2, [sp, #20]
	bool dir_adv = (param->peer != NULL), scannable = false;
    5726:	bf18      	it	ne
    5728:	f04f 0901 	movne.w	r9, #1
	struct bt_conn *conn = NULL;
    572c:	9307      	str	r3, [sp, #28]
    572e:	f012 fa52 	bl	17bd6 <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    5732:	0787      	lsls	r7, r0, #30
{
    5734:	460c      	mov	r4, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    5736:	f140 8102 	bpl.w	593e <bt_le_adv_start_legacy+0x22e>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
    573a:	4608      	mov	r0, r1
    573c:	f7ff ff5c 	bl	55f8 <valid_adv_param>
    5740:	b928      	cbnz	r0, 574e <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
    5742:	f06f 0b15 	mvn.w	fp, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
    5746:	4658      	mov	r0, fp
    5748:	b00f      	add	sp, #60	; 0x3c
    574a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
    574e:	4620      	mov	r0, r4
    5750:	f7ff fdb8 	bl	52c4 <bt_id_adv_random_addr_check>
    5754:	4680      	mov	r8, r0
    5756:	2800      	cmp	r0, #0
    5758:	d0f3      	beq.n	5742 <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    575a:	f105 0710 	add.w	r7, r5, #16
    575e:	4638      	mov	r0, r7
    5760:	f012 fa39 	bl	17bd6 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    5764:	f3c0 1b80 	ubfx	fp, r0, #6, #1
    5768:	0640      	lsls	r0, r0, #25
    576a:	f100 80eb 	bmi.w	5944 <bt_le_adv_start_legacy+0x234>
	(void)memset(&set_param, 0, sizeof(set_param));
    576e:	220f      	movs	r2, #15
    5770:	4659      	mov	r1, fp
    5772:	a80a      	add	r0, sp, #40	; 0x28
    5774:	f011 fd79 	bl	1726a <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    5778:	68a3      	ldr	r3, [r4, #8]
    577a:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	set_param.channel_map  = get_adv_channel_map(param->options);
    577e:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    5780:	68e3      	ldr	r3, [r4, #12]
    5782:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	set_param.channel_map  = get_adv_channel_map(param->options);
    5786:	f012 fa17 	bl	17bb8 <get_adv_channel_map>
	if (adv->id != param->id) {
    578a:	782a      	ldrb	r2, [r5, #0]
    578c:	7823      	ldrb	r3, [r4, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
    578e:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
	if (adv->id != param->id) {
    5792:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
    5794:	f88d b036 	strb.w	fp, [sp, #54]	; 0x36
	if (adv->id != param->id) {
    5798:	d004      	beq.n	57a4 <bt_le_adv_start_legacy+0x94>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    579a:	486e      	ldr	r0, [pc, #440]	; (5954 <bt_le_adv_start_legacy+0x244>)
    579c:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    57a0:	f012 fa1f 	bl	17be2 <atomic_and>
	bt_dev.adv_conn_id = adv->id;
    57a4:	4a6c      	ldr	r2, [pc, #432]	; (5958 <bt_le_adv_start_legacy+0x248>)
	adv->id = param->id;
    57a6:	7823      	ldrb	r3, [r4, #0]
    57a8:	702b      	strb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
    57aa:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
    57ae:	6861      	ldr	r1, [r4, #4]
    57b0:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
    57b4:	464a      	mov	r2, r9
    57b6:	4628      	mov	r0, r5
    57b8:	f7ff fe9c 	bl	54f4 <bt_id_set_adv_own_addr>
	if (err) {
    57bc:	4683      	mov	fp, r0
    57be:	2800      	cmp	r0, #0
    57c0:	d1c1      	bne.n	5746 <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, param->peer);
    57c2:	f105 0009 	add.w	r0, r5, #9
	if (dir_adv) {
    57c6:	2e00      	cmp	r6, #0
    57c8:	d049      	beq.n	585e <bt_le_adv_start_legacy+0x14e>
	memcpy(dst, src, sizeof(*dst));
    57ca:	6921      	ldr	r1, [r4, #16]
    57cc:	2207      	movs	r2, #7
    57ce:	f011 fd41 	bl	17254 <memcpy>
	name_type = get_adv_name_type_param(param);
    57d2:	4620      	mov	r0, r4
    57d4:	f012 fb03 	bl	17dde <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    57d8:	6863      	ldr	r3, [r4, #4]
    57da:	07d9      	lsls	r1, r3, #31
	name_type = get_adv_name_type_param(param);
    57dc:	4681      	mov	r9, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    57de:	d547      	bpl.n	5870 <bt_le_adv_start_legacy+0x160>
		if (dir_adv) {
    57e0:	2e00      	cmp	r6, #0
    57e2:	d042      	beq.n	586a <bt_le_adv_start_legacy+0x15a>
				set_param.type = BT_HCI_ADV_DIRECT_IND;
    57e4:	f013 0f10 	tst.w	r3, #16
    57e8:	bf14      	ite	ne
    57ea:	2304      	movne	r3, #4
    57ec:	2301      	moveq	r3, #1
    57ee:	6921      	ldr	r1, [r4, #16]
    57f0:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    57f4:	2207      	movs	r2, #7
    57f6:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
    57fa:	f011 fd2b 	bl	17254 <memcpy>
	bool dir_adv = (param->peer != NULL), scannable = false;
    57fe:	f04f 0800 	mov.w	r8, #0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    5802:	210f      	movs	r1, #15
    5804:	f242 0006 	movw	r0, #8198	; 0x2006
    5808:	f7fe ff52 	bl	46b0 <bt_hci_cmd_create>
	if (!buf) {
    580c:	4683      	mov	fp, r0
    580e:	2800      	cmp	r0, #0
    5810:	f000 809b 	beq.w	594a <bt_le_adv_start_legacy+0x23a>
    5814:	220f      	movs	r2, #15
    5816:	a90a      	add	r1, sp, #40	; 0x28
    5818:	3008      	adds	r0, #8
    581a:	f017 fbdc 	bl	1cfd6 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    581e:	2200      	movs	r2, #0
    5820:	4659      	mov	r1, fp
    5822:	f242 0006 	movw	r0, #8198	; 0x2006
    5826:	f7fe ff7d 	bl	4724 <bt_hci_cmd_send_sync>
	if (err) {
    582a:	2800      	cmp	r0, #0
    582c:	f040 8090 	bne.w	5950 <bt_le_adv_start_legacy+0x240>
	if (!dir_adv) {
    5830:	b376      	cbz	r6, 5890 <bt_le_adv_start_legacy+0x180>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    5832:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    5834:	07db      	lsls	r3, r3, #31
    5836:	d439      	bmi.n	58ac <bt_le_adv_start_legacy+0x19c>
	return bt_le_adv_set_enable_legacy(adv, enable);
    5838:	2101      	movs	r1, #1
    583a:	4628      	mov	r0, r5
    583c:	f012 fadf 	bl	17dfe <bt_le_adv_set_enable_legacy>
	if (err) {
    5840:	4683      	mov	fp, r0
    5842:	9807      	ldr	r0, [sp, #28]
    5844:	f1bb 0f00 	cmp.w	fp, #0
    5848:	d073      	beq.n	5932 <bt_le_adv_start_legacy+0x222>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    584a:	2800      	cmp	r0, #0
    584c:	f43f af7b 	beq.w	5746 <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    5850:	2100      	movs	r1, #0
    5852:	f000 fca7 	bl	61a4 <bt_conn_set_state>
			bt_conn_unref(conn);
    5856:	9807      	ldr	r0, [sp, #28]
    5858:	f012 fbc1 	bl	17fde <bt_conn_unref>
    585c:	e773      	b.n	5746 <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    585e:	9608      	str	r6, [sp, #32]
    5860:	2207      	movs	r2, #7
    5862:	f8cd 6023 	str.w	r6, [sp, #35]	; 0x23
    5866:	a908      	add	r1, sp, #32
    5868:	e7b1      	b.n	57ce <bt_le_adv_start_legacy+0xbe>
			set_param.type = BT_HCI_ADV_IND;
    586a:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
    586e:	e7c8      	b.n	5802 <bt_le_adv_start_legacy+0xf2>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
    5870:	059a      	lsls	r2, r3, #22
    5872:	d403      	bmi.n	587c <bt_le_adv_start_legacy+0x16c>
    5874:	9b18      	ldr	r3, [sp, #96]	; 0x60
    5876:	b90b      	cbnz	r3, 587c <bt_le_adv_start_legacy+0x16c>
    5878:	2802      	cmp	r0, #2
    587a:	d103      	bne.n	5884 <bt_le_adv_start_legacy+0x174>
		set_param.type = BT_HCI_ADV_SCAN_IND;
    587c:	2302      	movs	r3, #2
    587e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    5882:	e7be      	b.n	5802 <bt_le_adv_start_legacy+0xf2>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
    5884:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
    5886:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
		set_param.type = BT_HCI_ADV_NONCONN_IND;
    588a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    588e:	e7b8      	b.n	5802 <bt_le_adv_start_legacy+0xf2>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
    5890:	9b19      	ldr	r3, [sp, #100]	; 0x64
    5892:	9300      	str	r3, [sp, #0]
    5894:	e9cd 8901 	strd	r8, r9, [sp, #4]
    5898:	9b18      	ldr	r3, [sp, #96]	; 0x60
    589a:	9905      	ldr	r1, [sp, #20]
    589c:	4652      	mov	r2, sl
    589e:	4628      	mov	r0, r5
    58a0:	f012 fa26 	bl	17cf0 <le_adv_update.constprop.0>
		if (err) {
    58a4:	4683      	mov	fp, r0
    58a6:	2800      	cmp	r0, #0
    58a8:	d0c3      	beq.n	5832 <bt_le_adv_start_legacy+0x122>
    58aa:	e74c      	b.n	5746 <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
    58ac:	a907      	add	r1, sp, #28
    58ae:	4628      	mov	r0, r5
    58b0:	f7ff fee6 	bl	5680 <le_adv_start_add_conn>
		if (err) {
    58b4:	4683      	mov	fp, r0
    58b6:	2800      	cmp	r0, #0
    58b8:	d0be      	beq.n	5838 <bt_le_adv_start_legacy+0x128>
			if (err == -ENOMEM && !dir_adv &&
    58ba:	f110 0f0c 	cmn.w	r0, #12
    58be:	f47f af42 	bne.w	5746 <bt_le_adv_start_legacy+0x36>
    58c2:	2e00      	cmp	r6, #0
    58c4:	f47f af3f 	bne.w	5746 <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    58c8:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
    58ca:	0798      	lsls	r0, r3, #30
    58cc:	f53f af3b 	bmi.w	5746 <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    58d0:	6862      	ldr	r2, [r4, #4]
    58d2:	f082 0202 	eor.w	r2, r2, #2
    58d6:	f3c2 0b40 	ubfx	fp, r2, #1, #1
    58da:	f00b 0201 	and.w	r2, fp, #1
    58de:	210d      	movs	r1, #13
    58e0:	4638      	mov	r0, r7
    58e2:	f012 f9ee 	bl	17cc2 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
    58e6:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
    58ea:	425a      	negs	r2, r3
    58ec:	415a      	adcs	r2, r3
    58ee:	2107      	movs	r1, #7
    58f0:	4638      	mov	r0, r7
    58f2:	f012 f9e6 	bl	17cc2 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
    58f6:	f1a9 0102 	sub.w	r1, r9, #2
    58fa:	424a      	negs	r2, r1
    58fc:	414a      	adcs	r2, r1
    58fe:	4638      	mov	r0, r7
    5900:	2108      	movs	r1, #8
    5902:	f012 f9de 	bl	17cc2 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
    5906:	6862      	ldr	r2, [r4, #4]
    5908:	2109      	movs	r1, #9
    590a:	f002 0201 	and.w	r2, r2, #1
    590e:	4638      	mov	r0, r7
    5910:	f012 f9d7 	bl	17cc2 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
    5914:	4642      	mov	r2, r8
    5916:	210a      	movs	r1, #10
    5918:	4638      	mov	r0, r7
    591a:	f012 f9d2 	bl	17cc2 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
    591e:	6862      	ldr	r2, [r4, #4]
    5920:	210c      	movs	r1, #12
    5922:	f3c2 0280 	ubfx	r2, r2, #2, #1
    5926:	4638      	mov	r0, r7
    5928:	f012 f9cb 	bl	17cc2 <atomic_set_bit_to>
	return 0;
    592c:	f04f 0b00 	mov.w	fp, #0
    5930:	e709      	b.n	5746 <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    5932:	b108      	cbz	r0, 5938 <bt_le_adv_start_legacy+0x228>
		bt_conn_unref(conn);
    5934:	f012 fb53 	bl	17fde <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    5938:	2e00      	cmp	r6, #0
    593a:	d1ce      	bne.n	58da <bt_le_adv_start_legacy+0x1ca>
    593c:	e7c8      	b.n	58d0 <bt_le_adv_start_legacy+0x1c0>
		return -EAGAIN;
    593e:	f06f 0b0a 	mvn.w	fp, #10
    5942:	e700      	b.n	5746 <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
    5944:	f06f 0b77 	mvn.w	fp, #119	; 0x77
    5948:	e6fd      	b.n	5746 <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
    594a:	f06f 0b68 	mvn.w	fp, #104	; 0x68
    594e:	e6fa      	b.n	5746 <bt_le_adv_start_legacy+0x36>
    5950:	4683      	mov	fp, r0
    5952:	e6f8      	b.n	5746 <bt_le_adv_start_legacy+0x36>
    5954:	2000014c 	.word	0x2000014c
    5958:	20000080 	.word	0x20000080

0000595c <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    595c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    595e:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    5960:	9a06      	ldr	r2, [sp, #24]
{
    5962:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    5964:	e9cd 3200 	strd	r3, r2, [sp]
    5968:	462b      	mov	r3, r5
    596a:	460a      	mov	r2, r1
    596c:	4601      	mov	r1, r0
    596e:	4811      	ldr	r0, [pc, #68]	; (59b4 <bt_le_adv_start+0x58>)
    5970:	f7ff fece 	bl	5710 <bt_le_adv_start_legacy>
    5974:	4621      	mov	r1, r4
    5976:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
    5978:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
    597a:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
    597e:	429d      	cmp	r5, r3
    5980:	d102      	bne.n	5988 <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
    5982:	4630      	mov	r0, r6
    5984:	b002      	add	sp, #8
    5986:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
    5988:	880a      	ldrh	r2, [r1, #0]
    598a:	4282      	cmp	r2, r0
    598c:	d104      	bne.n	5998 <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
    598e:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
    5990:	b112      	cbz	r2, 5998 <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
    5992:	7812      	ldrb	r2, [r2, #0]
    5994:	07d2      	lsls	r2, r2, #31
    5996:	d402      	bmi.n	599e <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
    5998:	3301      	adds	r3, #1
    599a:	3108      	adds	r1, #8
    599c:	e7ef      	b.n	597e <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
    599e:	4906      	ldr	r1, [pc, #24]	; (59b8 <bt_le_adv_start+0x5c>)
    59a0:	4806      	ldr	r0, [pc, #24]	; (59bc <bt_le_adv_start+0x60>)
    59a2:	f018 fec6 	bl	1e732 <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
    59a6:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    59aa:	2300      	movs	r3, #0
    59ac:	4803      	ldr	r0, [pc, #12]	; (59bc <bt_le_adv_start+0x60>)
    59ae:	f010 f88b 	bl	15ac8 <k_work_reschedule>
    59b2:	e7e6      	b.n	5982 <bt_le_adv_start+0x26>
    59b4:	20000098 	.word	0x20000098
    59b8:	00017e4f 	.word	0x00017e4f
    59bc:	200000b0 	.word	0x200000b0

000059c0 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
    59c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
	int err;

	(void)bt_le_lim_adv_cancel_timeout(adv);
    59c2:	4829      	ldr	r0, [pc, #164]	; (5a68 <bt_le_adv_stop+0xa8>)
    59c4:	f012 fa40 	bl	17e48 <bt_le_lim_adv_cancel_timeout>
    59c8:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
    59cc:	4827      	ldr	r0, [pc, #156]	; (5a6c <bt_le_adv_stop+0xac>)
    59ce:	f012 f908 	bl	17be2 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    59d2:	4826      	ldr	r0, [pc, #152]	; (5a6c <bt_le_adv_stop+0xac>)
    59d4:	f012 f8ff 	bl	17bd6 <atomic_get>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    59d8:	0641      	lsls	r1, r0, #25
    59da:	d403      	bmi.n	59e4 <bt_le_adv_stop+0x24>
		/* Legacy advertiser exists, but is not currently advertising.
		 * This happens when keep advertising behavior is active but
		 * no conn object is available to do connectable advertising.
		 */
		bt_le_adv_delete_legacy();
		return 0;
    59dc:	2400      	movs	r4, #0
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
    59de:	4620      	mov	r0, r4
    59e0:	b004      	add	sp, #16
    59e2:	bd10      	pop	{r4, pc}
    59e4:	4821      	ldr	r0, [pc, #132]	; (5a6c <bt_le_adv_stop+0xac>)
    59e6:	f012 f8f6 	bl	17bd6 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    59ea:	0582      	lsls	r2, r0, #22
    59ec:	d521      	bpl.n	5a32 <bt_le_adv_stop+0x72>
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    59ee:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    59f0:	481f      	ldr	r0, [pc, #124]	; (5a70 <bt_le_adv_stop+0xb0>)
    59f2:	9300      	str	r3, [sp, #0]
    59f4:	2207      	movs	r2, #7
    59f6:	4669      	mov	r1, sp
    59f8:	f8cd 3003 	str.w	r3, [sp, #3]
    59fc:	f011 fc19 	bl	17232 <memcmp>
    5a00:	4b1c      	ldr	r3, [pc, #112]	; (5a74 <bt_le_adv_stop+0xb4>)
    5a02:	bb60      	cbnz	r0, 5a5e <bt_le_adv_stop+0x9e>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
    5a04:	4a1c      	ldr	r2, [pc, #112]	; (5a78 <bt_le_adv_stop+0xb8>)
    5a06:	8891      	ldrh	r1, [r2, #4]
    5a08:	6810      	ldr	r0, [r2, #0]
    5a0a:	7992      	ldrb	r2, [r2, #6]
    5a0c:	f8ad 100c 	strh.w	r1, [sp, #12]
    5a10:	f88d 200e 	strb.w	r2, [sp, #14]
    5a14:	9002      	str	r0, [sp, #8]
    5a16:	2204      	movs	r2, #4
    5a18:	a902      	add	r1, sp, #8
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    5a1a:	7e18      	ldrb	r0, [r3, #24]
    5a1c:	f000 fd46 	bl	64ac <bt_conn_lookup_state_le>
    5a20:	4604      	mov	r4, r0
	if (conn) {
    5a22:	b130      	cbz	r0, 5a32 <bt_le_adv_stop+0x72>
		conn->err = status;
    5a24:	2100      	movs	r1, #0
    5a26:	7241      	strb	r1, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    5a28:	f000 fbbc 	bl	61a4 <bt_conn_set_state>
		bt_conn_unref(conn);
    5a2c:	4620      	mov	r0, r4
    5a2e:	f012 fad6 	bl	17fde <bt_conn_unref>
		err = bt_le_adv_set_enable_legacy(adv, false);
    5a32:	480d      	ldr	r0, [pc, #52]	; (5a68 <bt_le_adv_stop+0xa8>)
    5a34:	2100      	movs	r1, #0
    5a36:	f012 f9e2 	bl	17dfe <bt_le_adv_set_enable_legacy>
		if (err) {
    5a3a:	4604      	mov	r4, r0
    5a3c:	2800      	cmp	r0, #0
    5a3e:	d1ce      	bne.n	59de <bt_le_adv_stop+0x1e>
    5a40:	480e      	ldr	r0, [pc, #56]	; (5a7c <bt_le_adv_stop+0xbc>)
    5a42:	f012 f8c8 	bl	17bd6 <atomic_get>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    5a46:	0683      	lsls	r3, r0, #26
    5a48:	d5c8      	bpl.n	59dc <bt_le_adv_stop+0x1c>
			bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
    5a4a:	4620      	mov	r0, r4
    5a4c:	f012 fa10 	bl	17e70 <bt_le_scan_set_enable>
			bt_id_set_private_addr(BT_ID_DEFAULT);
    5a50:	4620      	mov	r0, r4
    5a52:	f012 f884 	bl	17b5e <bt_id_set_private_addr>
			bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
    5a56:	2001      	movs	r0, #1
    5a58:	f012 fa0a 	bl	17e70 <bt_le_scan_set_enable>
    5a5c:	e7bf      	b.n	59de <bt_le_adv_stop+0x1e>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    5a5e:	2205      	movs	r2, #5
    5a60:	f103 0121 	add.w	r1, r3, #33	; 0x21
    5a64:	e7d9      	b.n	5a1a <bt_le_adv_stop+0x5a>
    5a66:	bf00      	nop
    5a68:	20000098 	.word	0x20000098
    5a6c:	200000a8 	.word	0x200000a8
    5a70:	200000a1 	.word	0x200000a1
    5a74:	20000080 	.word	0x20000080
    5a78:	0001f281 	.word	0x0001f281
    5a7c:	2000014c 	.word	0x2000014c

00005a80 <bt_le_adv_resume>:

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
    5a80:	b537      	push	{r0, r1, r2, r4, r5, lr}
    5a82:	481e      	ldr	r0, [pc, #120]	; (5afc <bt_le_adv_resume+0x7c>)
    5a84:	4c1d      	ldr	r4, [pc, #116]	; (5afc <bt_le_adv_resume+0x7c>)
    5a86:	f012 f8a6 	bl	17bd6 <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
    5a8a:	f410 5f00 	tst.w	r0, #8192	; 0x2000
    5a8e:	d032      	beq.n	5af6 <bt_le_adv_resume+0x76>
    5a90:	4620      	mov	r0, r4
    5a92:	f012 f8a0 	bl	17bd6 <atomic_get>
    5a96:	0642      	lsls	r2, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    5a98:	f3c0 1580 	ubfx	r5, r0, #6, #1
    5a9c:	d42b      	bmi.n	5af6 <bt_le_adv_resume+0x76>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    5a9e:	4620      	mov	r0, r4
    5aa0:	f012 f899 	bl	17bd6 <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
    5aa4:	0583      	lsls	r3, r0, #22
    5aa6:	d526      	bpl.n	5af6 <bt_le_adv_resume+0x76>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
    5aa8:	a901      	add	r1, sp, #4
    5aaa:	f1a4 0010 	sub.w	r0, r4, #16
    5aae:	f7ff fde7 	bl	5680 <le_adv_start_add_conn>
	if (err) {
    5ab2:	bb00      	cbnz	r0, 5af6 <bt_le_adv_resume+0x76>
	return bt_le_adv_set_enable_legacy(adv, enable);
    5ab4:	2101      	movs	r1, #1
    5ab6:	f1a4 0010 	sub.w	r0, r4, #16
    5aba:	f012 f9a0 	bl	17dfe <bt_le_adv_set_enable_legacy>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		bt_id_set_adv_private_addr(adv);
	}

	err = bt_le_adv_set_enable(adv, true);
	if (err) {
    5abe:	b150      	cbz	r0, 5ad6 <bt_le_adv_resume+0x56>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    5ac0:	4629      	mov	r1, r5
    5ac2:	9801      	ldr	r0, [sp, #4]
    5ac4:	f000 fb6e 	bl	61a4 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    5ac8:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
    5acc:	4620      	mov	r0, r4
    5ace:	f012 f888 	bl	17be2 <atomic_and>
	return (old & mask) != 0;
    5ad2:	f3c0 3540 	ubfx	r5, r0, #13, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
    5ad6:	9801      	ldr	r0, [sp, #4]
    5ad8:	f012 fa81 	bl	17fde <bt_conn_unref>
	if (persist_paused) {
    5adc:	b15d      	cbz	r5, 5af6 <bt_le_adv_resume+0x76>
    5ade:	f3bf 8f5b 	dmb	ish
    5ae2:	e854 3f00 	ldrex	r3, [r4]
    5ae6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    5aea:	e844 3200 	strex	r2, r3, [r4]
    5aee:	2a00      	cmp	r2, #0
    5af0:	d1f7      	bne.n	5ae2 <bt_le_adv_resume+0x62>
    5af2:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
    5af6:	b003      	add	sp, #12
    5af8:	bd30      	pop	{r4, r5, pc}
    5afa:	bf00      	nop
    5afc:	200000a8 	.word	0x200000a8

00005b00 <bt_le_scan_set_enable_legacy>:

	return 0;
}

static int bt_le_scan_set_enable_legacy(uint8_t enable)
{
    5b00:	b530      	push	{r4, r5, lr}
	struct bt_hci_cp_le_set_scan_enable *cp;
	struct bt_hci_cmd_state_set state;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    5b02:	2102      	movs	r1, #2
{
    5b04:	b087      	sub	sp, #28
    5b06:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    5b08:	f242 000c 	movw	r0, #8204	; 0x200c
    5b0c:	f7fe fdd0 	bl	46b0 <bt_hci_cmd_create>
	if (!buf) {
    5b10:	4605      	mov	r5, r0
    5b12:	b318      	cbz	r0, 5b5c <bt_le_scan_set_enable_legacy+0x5c>
	return net_buf_simple_add(&buf->b, len);
    5b14:	2102      	movs	r1, #2
    5b16:	3008      	adds	r0, #8
    5b18:	f017 fa57 	bl	1cfca <net_buf_simple_add>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));

	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    5b1c:	2c01      	cmp	r4, #1
    5b1e:	d11b      	bne.n	5b58 <bt_le_scan_set_enable_legacy+0x58>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5b20:	f3bf 8f5b 	dmb	ish
    5b24:	4b0f      	ldr	r3, [pc, #60]	; (5b64 <bt_le_scan_set_enable_legacy+0x64>)
    5b26:	681b      	ldr	r3, [r3, #0]
    5b28:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    5b2c:	f3c3 2300 	ubfx	r3, r3, #8, #1
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
						 BT_DEV_SCAN_FILTER_DUP);
	} else {
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    5b30:	7043      	strb	r3, [r0, #1]
	}

	cp->enable = enable;

	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
    5b32:	1e63      	subs	r3, r4, #1
	cp->enable = enable;
    5b34:	7004      	strb	r4, [r0, #0]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
    5b36:	425c      	negs	r4, r3
    5b38:	415c      	adcs	r4, r3
    5b3a:	4a0a      	ldr	r2, [pc, #40]	; (5b64 <bt_le_scan_set_enable_legacy+0x64>)
    5b3c:	9400      	str	r4, [sp, #0]
    5b3e:	a903      	add	r1, sp, #12
    5b40:	4628      	mov	r0, r5
    5b42:	2305      	movs	r3, #5
    5b44:	f7fe fda2 	bl	468c <bt_hci_cmd_state_set_init>
				  enable == BT_HCI_LE_SCAN_ENABLE);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    5b48:	2200      	movs	r2, #0
    5b4a:	4629      	mov	r1, r5
    5b4c:	f242 000c 	movw	r0, #8204	; 0x200c
    5b50:	f7fe fde8 	bl	4724 <bt_hci_cmd_send_sync>
	if (err) {
		return err;
	}

	return 0;
}
    5b54:	b007      	add	sp, #28
    5b56:	bd30      	pop	{r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    5b58:	2300      	movs	r3, #0
    5b5a:	e7e9      	b.n	5b30 <bt_le_scan_set_enable_legacy+0x30>
		return -ENOBUFS;
    5b5c:	f06f 0068 	mvn.w	r0, #104	; 0x68
    5b60:	e7f8      	b.n	5b54 <bt_le_scan_set_enable_legacy+0x54>
    5b62:	bf00      	nop
    5b64:	2000014c 	.word	0x2000014c

00005b68 <bt_scan_reset>:
	scan_dev_found_cb = NULL;
    5b68:	4b01      	ldr	r3, [pc, #4]	; (5b70 <bt_scan_reset+0x8>)
    5b6a:	2200      	movs	r2, #0
    5b6c:	601a      	str	r2, [r3, #0]
}
    5b6e:	4770      	bx	lr
    5b70:	20001934 	.word	0x20001934

00005b74 <bt_le_scan_update>:
    5b74:	4b0a      	ldr	r3, [pc, #40]	; (5ba0 <bt_le_scan_update+0x2c>)
    5b76:	f3bf 8f5b 	dmb	ish
    5b7a:	681a      	ldr	r2, [r3, #0]
    5b7c:	f3bf 8f5b 	dmb	ish
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
}

int bt_le_scan_update(bool fast_scan)
{
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    5b80:	f3c2 1080 	ubfx	r0, r2, #6, #1
    5b84:	0652      	lsls	r2, r2, #25
    5b86:	d408      	bmi.n	5b9a <bt_le_scan_update+0x26>
    5b88:	f3bf 8f5b 	dmb	ish
    5b8c:	681b      	ldr	r3, [r3, #0]
    5b8e:	f3bf 8f5b 	dmb	ish
		return 0;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    5b92:	069b      	lsls	r3, r3, #26
    5b94:	d501      	bpl.n	5b9a <bt_le_scan_update+0x26>
	return bt_le_scan_set_enable_legacy(enable);
    5b96:	f7ff bfb3 	b.w	5b00 <bt_le_scan_set_enable_legacy>
		return start_passive_scan(fast_scan);
	}
#endif

	return 0;
}
    5b9a:	2000      	movs	r0, #0
    5b9c:	4770      	bx	lr
    5b9e:	bf00      	nop
    5ba0:	2000014c 	.word	0x2000014c

00005ba4 <bt_hci_le_adv_report>:
#endif /* CONFIG_BT_DF_CONNECTIONLESS_CTE_RX */
#endif /* defined(CONFIG_BT_PER_ADV_SYNC) */
#endif /* defined(CONFIG_BT_EXT_ADV) */

void bt_hci_le_adv_report(struct net_buf *buf)
{
    5ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
    5ba8:	f100 0808 	add.w	r8, r0, #8
    5bac:	b08b      	sub	sp, #44	; 0x2c
    5bae:	4604      	mov	r4, r0
    5bb0:	4640      	mov	r0, r8
    5bb2:	f017 fa95 	bl	1d0e0 <net_buf_simple_pull_u8>
	if (scan_dev_found_cb) {
    5bb6:	f8df b144 	ldr.w	fp, [pc, #324]	; 5cfc <bt_hci_le_adv_report+0x158>
    5bba:	4606      	mov	r6, r0
	uint8_t num_reports = net_buf_pull_u8(buf);
	struct bt_hci_evt_le_advertising_info *evt;

	BT_DBG("Adv number of reports %u",  num_reports);

	while (num_reports--) {
    5bbc:	b916      	cbnz	r6, 5bc4 <bt_hci_le_adv_report+0x20>

		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);

		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
	}
}
    5bbe:	b00b      	add	sp, #44	; 0x2c
    5bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (buf->len < sizeof(*evt)) {
    5bc4:	89a3      	ldrh	r3, [r4, #12]
    5bc6:	2b08      	cmp	r3, #8
    5bc8:	d9f9      	bls.n	5bbe <bt_hci_le_adv_report+0x1a>
	return net_buf_simple_pull_mem(&buf->b, len);
    5bca:	2109      	movs	r1, #9
    5bcc:	4640      	mov	r0, r8
    5bce:	f017 fa7f 	bl	1d0d0 <net_buf_simple_pull_mem>
		adv_info.rssi = evt->data[evt->length];
    5bd2:	f890 9008 	ldrb.w	r9, [r0, #8]
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
    5bd6:	237f      	movs	r3, #127	; 0x7f
    5bd8:	f88d 301e 	strb.w	r3, [sp, #30]
		adv_info.rssi = evt->data[evt->length];
    5bdc:	eb00 0309 	add.w	r3, r0, r9
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    5be0:	2201      	movs	r2, #1
		adv_info.rssi = evt->data[evt->length];
    5be2:	7a5b      	ldrb	r3, [r3, #9]
    5be4:	f88d 301d 	strb.w	r3, [sp, #29]
		adv_info.sid = BT_GAP_SID_INVALID;
    5be8:	23ff      	movs	r3, #255	; 0xff
    5bea:	f88d 301c 	strb.w	r3, [sp, #28]
		adv_info.interval = 0U;
    5bee:	2300      	movs	r3, #0
    5bf0:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    5bf4:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
		adv_info.adv_type = evt->evt_type;
    5bf8:	7802      	ldrb	r2, [r0, #0]
    5bfa:	f88d 201f 	strb.w	r2, [sp, #31]
    5bfe:	2a04      	cmp	r2, #4
    5c00:	bf9c      	itt	ls
    5c02:	4b3f      	ldrls	r3, [pc, #252]	; (5d00 <bt_hci_le_adv_report+0x15c>)
    5c04:	5c9b      	ldrbls	r3, [r3, r2]
		adv_info.adv_props = get_adv_props_legacy(evt->evt_type);
    5c06:	f8ad 3020 	strh.w	r3, [sp, #32]
    5c0a:	4b3e      	ldr	r3, [pc, #248]	; (5d04 <bt_hci_le_adv_report+0x160>)
    5c0c:	f3bf 8f5b 	dmb	ish
    5c10:	681b      	ldr	r3, [r3, #0]
    5c12:	f3bf 8f5b 	dmb	ish
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    5c16:	065a      	lsls	r2, r3, #25
    5c18:	4605      	mov	r5, r0
		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);
    5c1a:	f100 0101 	add.w	r1, r0, #1
    5c1e:	fa1f f989 	uxth.w	r9, r9
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    5c22:	d50b      	bpl.n	5c3c <bt_hci_le_adv_report+0x98>
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
    5c24:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    5c28:	075b      	lsls	r3, r3, #29
    5c2a:	d507      	bpl.n	5c3c <bt_hci_le_adv_report+0x98>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
    5c2c:	7a29      	ldrb	r1, [r5, #8]
	return net_buf_simple_pull(&buf->b, len);
    5c2e:	4640      	mov	r0, r8
    5c30:	3101      	adds	r1, #1
    5c32:	3e01      	subs	r6, #1
    5c34:	f017 fa44 	bl	1d0c0 <net_buf_simple_pull>
    5c38:	b2f6      	uxtb	r6, r6
    5c3a:	e7bf      	b.n	5bbc <bt_hci_le_adv_report+0x18>
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
    5c3c:	786b      	ldrb	r3, [r5, #1]
    5c3e:	1e9a      	subs	r2, r3, #2
    5c40:	2a01      	cmp	r2, #1
    5c42:	d848      	bhi.n	5cd6 <bt_hci_le_adv_report+0x132>
	memcpy(dst, src, sizeof(*dst));
    5c44:	2207      	movs	r2, #7
    5c46:	a802      	add	r0, sp, #8
    5c48:	f011 fb04 	bl	17254 <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    5c4c:	f89d 3008 	ldrb.w	r3, [sp, #8]
    5c50:	3b02      	subs	r3, #2
    5c52:	f88d 3008 	strb.w	r3, [sp, #8]
	info->addr = &id_addr;
    5c56:	ab02      	add	r3, sp, #8
    5c58:	9306      	str	r3, [sp, #24]
	if (scan_dev_found_cb) {
    5c5a:	f8db 3000 	ldr.w	r3, [fp]
    5c5e:	b1a3      	cbz	r3, 5c8a <bt_hci_le_adv_report+0xe6>
	state->offset = net_buf_simple_headroom(buf);
    5c60:	4640      	mov	r0, r8
    5c62:	f017 fa68 	bl	1d136 <net_buf_simple_headroom>
	state->len = buf->len;
    5c66:	89a7      	ldrh	r7, [r4, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
    5c68:	f89d 201f 	ldrb.w	r2, [sp, #31]
    5c6c:	f99d 101d 	ldrsb.w	r1, [sp, #29]
    5c70:	f8db c000 	ldr.w	ip, [fp]
		buf->len = len;
    5c74:	f8a4 900c 	strh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    5c78:	4682      	mov	sl, r0
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
    5c7a:	4643      	mov	r3, r8
    5c7c:	a802      	add	r0, sp, #8
    5c7e:	47e0      	blx	ip
	buf->data = buf->__buf + state->offset;
    5c80:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    5c82:	81a7      	strh	r7, [r4, #12]
	buf->data = buf->__buf + state->offset;
    5c84:	fa10 f08a 	uxtah	r0, r0, sl
    5c88:	60a0      	str	r0, [r4, #8]
	return list->head;
    5c8a:	4b1f      	ldr	r3, [pc, #124]	; (5d08 <bt_hci_le_adv_report+0x164>)
    5c8c:	681a      	ldr	r2, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    5c8e:	2a00      	cmp	r2, #0
    5c90:	d0cc      	beq.n	5c2c <bt_hci_le_adv_report+0x88>
	return node->next;
    5c92:	f852 7908 	ldr.w	r7, [r2], #-8
    5c96:	b107      	cbz	r7, 5c9a <bt_hci_le_adv_report+0xf6>
    5c98:	3f08      	subs	r7, #8
		if (listener->recv) {
    5c9a:	6813      	ldr	r3, [r2, #0]
    5c9c:	9201      	str	r2, [sp, #4]
    5c9e:	b193      	cbz	r3, 5cc6 <bt_hci_le_adv_report+0x122>
	state->offset = net_buf_simple_headroom(buf);
    5ca0:	4640      	mov	r0, r8
    5ca2:	f017 fa48 	bl	1d136 <net_buf_simple_headroom>
			listener->recv(info, buf);
    5ca6:	9a01      	ldr	r2, [sp, #4]
	state->len = buf->len;
    5ca8:	89a3      	ldrh	r3, [r4, #12]
    5caa:	6812      	ldr	r2, [r2, #0]
			buf->len = len;
    5cac:	f8a4 900c 	strh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    5cb0:	4682      	mov	sl, r0
			listener->recv(info, buf);
    5cb2:	4641      	mov	r1, r8
    5cb4:	a806      	add	r0, sp, #24
	state->len = buf->len;
    5cb6:	9300      	str	r3, [sp, #0]
    5cb8:	4790      	blx	r2
	buf->data = buf->__buf + state->offset;
    5cba:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    5cbc:	9b00      	ldr	r3, [sp, #0]
    5cbe:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf + state->offset;
    5cc0:	fa10 f08a 	uxtah	r0, r0, sl
    5cc4:	60a0      	str	r0, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    5cc6:	2f00      	cmp	r7, #0
    5cc8:	d0b0      	beq.n	5c2c <bt_hci_le_adv_report+0x88>
    5cca:	68bb      	ldr	r3, [r7, #8]
    5ccc:	b103      	cbz	r3, 5cd0 <bt_hci_le_adv_report+0x12c>
    5cce:	3b08      	subs	r3, #8
		adv_info.adv_type = evt->evt_type;
    5cd0:	463a      	mov	r2, r7
    5cd2:	461f      	mov	r7, r3
    5cd4:	e7e1      	b.n	5c9a <bt_hci_le_adv_report+0xf6>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
    5cd6:	2bff      	cmp	r3, #255	; 0xff
    5cd8:	d109      	bne.n	5cee <bt_hci_le_adv_report+0x14a>
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
    5cda:	2300      	movs	r3, #0
    5cdc:	9304      	str	r3, [sp, #16]
    5cde:	2207      	movs	r2, #7
    5ce0:	f8cd 3013 	str.w	r3, [sp, #19]
    5ce4:	a904      	add	r1, sp, #16
    5ce6:	a802      	add	r0, sp, #8
    5ce8:	f011 fab4 	bl	17254 <memcpy>
}
    5cec:	e7b3      	b.n	5c56 <bt_hci_le_adv_report+0xb2>
		bt_addr_le_copy(&id_addr,
    5cee:	2000      	movs	r0, #0
    5cf0:	f011 ff33 	bl	17b5a <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
    5cf4:	2207      	movs	r2, #7
    5cf6:	4601      	mov	r1, r0
    5cf8:	e7f5      	b.n	5ce6 <bt_hci_le_adv_report+0x142>
    5cfa:	bf00      	nop
    5cfc:	20001934 	.word	0x20001934
    5d00:	0002030d 	.word	0x0002030d
    5d04:	2000014c 	.word	0x2000014c
    5d08:	2000192c 	.word	0x2000192c

00005d0c <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
    5d0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    5d10:	4c62      	ldr	r4, [pc, #392]	; (5e9c <bt_le_scan_start+0x190>)
    5d12:	f3bf 8f5b 	dmb	ish
    5d16:	6823      	ldr	r3, [r4, #0]
    5d18:	f3bf 8f5b 	dmb	ish
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    5d1c:	f013 0f02 	tst.w	r3, #2
{
    5d20:	4605      	mov	r5, r0
    5d22:	460f      	mov	r7, r1
    5d24:	4626      	mov	r6, r4
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    5d26:	f000 80b6 	beq.w	5e96 <bt_le_scan_start+0x18a>
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    5d2a:	7802      	ldrb	r2, [r0, #0]
    5d2c:	2a01      	cmp	r2, #1
    5d2e:	d905      	bls.n	5d3c <bt_le_scan_start+0x30>
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
    5d30:	f06f 0415 	mvn.w	r4, #21
	}

	scan_dev_found_cb = cb;

	return 0;
}
    5d34:	4620      	mov	r0, r4
    5d36:	b003      	add	sp, #12
    5d38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
    5d3c:	6843      	ldr	r3, [r0, #4]
    5d3e:	f033 030f 	bics.w	r3, r3, #15
    5d42:	d1f5      	bne.n	5d30 <bt_le_scan_start+0x24>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
    5d44:	8900      	ldrh	r0, [r0, #8]
    5d46:	1f03      	subs	r3, r0, #4
    5d48:	b29b      	uxth	r3, r3
    5d4a:	f643 7cfc 	movw	ip, #16380	; 0x3ffc
    5d4e:	4563      	cmp	r3, ip
    5d50:	d8ee      	bhi.n	5d30 <bt_le_scan_start+0x24>
	if (param->window < 0x0004 || param->window > 0x4000) {
    5d52:	8969      	ldrh	r1, [r5, #10]
    5d54:	1f0b      	subs	r3, r1, #4
    5d56:	b29b      	uxth	r3, r3
    5d58:	4563      	cmp	r3, ip
    5d5a:	d8e9      	bhi.n	5d30 <bt_le_scan_start+0x24>
	if (param->window > param->interval) {
    5d5c:	4288      	cmp	r0, r1
    5d5e:	d3e7      	bcc.n	5d30 <bt_le_scan_start+0x24>
	if (param->type && !bt_id_scan_random_addr_check()) {
    5d60:	b98a      	cbnz	r2, 5d86 <bt_le_scan_start+0x7a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5d62:	f3bf 8f5b 	dmb	ish
    5d66:	e856 0f00 	ldrex	r0, [r6]
    5d6a:	f040 0340 	orr.w	r3, r0, #64	; 0x40
    5d6e:	e846 3200 	strex	r2, r3, [r6]
    5d72:	2a00      	cmp	r2, #0
    5d74:	d1f7      	bne.n	5d66 <bt_le_scan_start+0x5a>
    5d76:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    5d7a:	f010 0040 	ands.w	r0, r0, #64	; 0x40
    5d7e:	d007      	beq.n	5d90 <bt_le_scan_start+0x84>
		return -EALREADY;
    5d80:	f06f 0477 	mvn.w	r4, #119	; 0x77
    5d84:	e7d6      	b.n	5d34 <bt_le_scan_start+0x28>
	if (param->type && !bt_id_scan_random_addr_check()) {
    5d86:	f011 ff0e 	bl	17ba6 <bt_id_scan_random_addr_check>
    5d8a:	2800      	cmp	r0, #0
    5d8c:	d1e9      	bne.n	5d62 <bt_le_scan_start+0x56>
    5d8e:	e7cf      	b.n	5d30 <bt_le_scan_start+0x24>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5d90:	f3bf 8f5b 	dmb	ish
    5d94:	6823      	ldr	r3, [r4, #0]
    5d96:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    5d9a:	0699      	lsls	r1, r3, #26
    5d9c:	d509      	bpl.n	5db2 <bt_le_scan_start+0xa6>
	return bt_le_scan_set_enable_legacy(enable);
    5d9e:	f7ff feaf 	bl	5b00 <bt_le_scan_set_enable_legacy>
		if (err) {
    5da2:	4604      	mov	r4, r0
    5da4:	b128      	cbz	r0, 5db2 <bt_le_scan_start+0xa6>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    5da6:	f06f 0140 	mvn.w	r1, #64	; 0x40
    5daa:	483c      	ldr	r0, [pc, #240]	; (5e9c <bt_le_scan_start+0x190>)
    5dac:	f012 f851 	bl	17e52 <atomic_and>
		return err;
    5db0:	e7c0      	b.n	5d34 <bt_le_scan_start+0x28>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
    5db2:	686b      	ldr	r3, [r5, #4]
	if (val) {
    5db4:	07da      	lsls	r2, r3, #31
    5db6:	d515      	bpl.n	5de4 <bt_le_scan_start+0xd8>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5db8:	f3bf 8f5b 	dmb	ish
    5dbc:	e856 3f00 	ldrex	r3, [r6]
    5dc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    5dc4:	e846 3200 	strex	r2, r3, [r6]
    5dc8:	2a00      	cmp	r2, #0
    5dca:	d1f7      	bne.n	5dbc <bt_le_scan_start+0xb0>
    5dcc:	f3bf 8f5b 	dmb	ish
		if (param->timeout) {
    5dd0:	89ac      	ldrh	r4, [r5, #12]
    5dd2:	b16c      	cbz	r4, 5df0 <bt_le_scan_start+0xe4>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    5dd4:	4831      	ldr	r0, [pc, #196]	; (5e9c <bt_le_scan_start+0x190>)
    5dd6:	f06f 0140 	mvn.w	r1, #64	; 0x40
    5dda:	f012 f83a 	bl	17e52 <atomic_and>
			return -ENOTSUP;
    5dde:	f06f 0485 	mvn.w	r4, #133	; 0x85
    5de2:	e7a7      	b.n	5d34 <bt_le_scan_start+0x28>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    5de4:	f46f 7180 	mvn.w	r1, #256	; 0x100
    5de8:	482c      	ldr	r0, [pc, #176]	; (5e9c <bt_le_scan_start+0x190>)
    5dea:	f012 f832 	bl	17e52 <atomic_and>
    5dee:	e7ef      	b.n	5dd0 <bt_le_scan_start+0xc4>
		err = start_le_scan_legacy(param->type, param->interval,
    5df0:	f895 8000 	ldrb.w	r8, [r5]
    5df4:	f8b5 9008 	ldrh.w	r9, [r5, #8]
    5df8:	896d      	ldrh	r5, [r5, #10]
	(void)memset(&set_param, 0, sizeof(set_param));
    5dfa:	4621      	mov	r1, r4
    5dfc:	2207      	movs	r2, #7
    5dfe:	4668      	mov	r0, sp
    5e00:	f011 fa33 	bl	1726a <memset>
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
    5e04:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    5e08:	4258      	negs	r0, r3
    5e0a:	f10d 0105 	add.w	r1, sp, #5
    5e0e:	4158      	adcs	r0, r3
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_NO_FILTER;
    5e10:	f88d 4006 	strb.w	r4, [sp, #6]
	set_param.scan_type = scan_type;
    5e14:	f88d 8000 	strb.w	r8, [sp]
	set_param.interval = sys_cpu_to_le16(interval);
    5e18:	f8ad 9001 	strh.w	r9, [sp, #1]
	set_param.window = sys_cpu_to_le16(window);
    5e1c:	f8ad 5003 	strh.w	r5, [sp, #3]
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
    5e20:	f7ff fb4e 	bl	54c0 <bt_id_set_scan_own_addr>
	if (err) {
    5e24:	4604      	mov	r4, r0
    5e26:	2800      	cmp	r0, #0
    5e28:	d1bd      	bne.n	5da6 <bt_le_scan_start+0x9a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    5e2a:	2107      	movs	r1, #7
    5e2c:	f242 000b 	movw	r0, #8203	; 0x200b
    5e30:	f7fe fc3e 	bl	46b0 <bt_hci_cmd_create>
	if (!buf) {
    5e34:	4605      	mov	r5, r0
    5e36:	b358      	cbz	r0, 5e90 <bt_le_scan_start+0x184>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    5e38:	2207      	movs	r2, #7
    5e3a:	4669      	mov	r1, sp
    5e3c:	3008      	adds	r0, #8
    5e3e:	f017 f8ca 	bl	1cfd6 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
    5e42:	4622      	mov	r2, r4
    5e44:	4629      	mov	r1, r5
    5e46:	f242 000b 	movw	r0, #8203	; 0x200b
    5e4a:	f7fe fc6b 	bl	4724 <bt_hci_cmd_send_sync>
	if (err) {
    5e4e:	4604      	mov	r4, r0
    5e50:	2800      	cmp	r0, #0
    5e52:	d1a8      	bne.n	5da6 <bt_le_scan_start+0x9a>
	return bt_le_scan_set_enable_legacy(enable);
    5e54:	2001      	movs	r0, #1
    5e56:	f7ff fe53 	bl	5b00 <bt_le_scan_set_enable_legacy>
	if (err) {
    5e5a:	4604      	mov	r4, r0
    5e5c:	2800      	cmp	r0, #0
    5e5e:	d1a2      	bne.n	5da6 <bt_le_scan_start+0x9a>
	if (val) {
    5e60:	f1b8 0f01 	cmp.w	r8, #1
    5e64:	d10e      	bne.n	5e84 <bt_le_scan_start+0x178>
    5e66:	f3bf 8f5b 	dmb	ish
    5e6a:	e856 3f00 	ldrex	r3, [r6]
    5e6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    5e72:	e846 3200 	strex	r2, r3, [r6]
    5e76:	2a00      	cmp	r2, #0
    5e78:	d1f7      	bne.n	5e6a <bt_le_scan_start+0x15e>
    5e7a:	f3bf 8f5b 	dmb	ish
	scan_dev_found_cb = cb;
    5e7e:	4b08      	ldr	r3, [pc, #32]	; (5ea0 <bt_le_scan_start+0x194>)
    5e80:	601f      	str	r7, [r3, #0]
	return 0;
    5e82:	e757      	b.n	5d34 <bt_le_scan_start+0x28>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    5e84:	f06f 0180 	mvn.w	r1, #128	; 0x80
    5e88:	4804      	ldr	r0, [pc, #16]	; (5e9c <bt_le_scan_start+0x190>)
    5e8a:	f011 ffe2 	bl	17e52 <atomic_and>
	if (err) {
    5e8e:	e7f6      	b.n	5e7e <bt_le_scan_start+0x172>
		return -ENOBUFS;
    5e90:	f06f 0468 	mvn.w	r4, #104	; 0x68
    5e94:	e787      	b.n	5da6 <bt_le_scan_start+0x9a>
		return -EAGAIN;
    5e96:	f06f 040a 	mvn.w	r4, #10
    5e9a:	e74b      	b.n	5d34 <bt_le_scan_start+0x28>
    5e9c:	2000014c 	.word	0x2000014c
    5ea0:	20001934 	.word	0x20001934

00005ea4 <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
    5ea4:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    5ea6:	4808      	ldr	r0, [pc, #32]	; (5ec8 <bt_le_scan_stop+0x24>)
    5ea8:	f06f 0140 	mvn.w	r1, #64	; 0x40
    5eac:	f011 ffd1 	bl	17e52 <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    5eb0:	0643      	lsls	r3, r0, #25
    5eb2:	d506      	bpl.n	5ec2 <bt_le_scan_stop+0x1e>
	scan_dev_found_cb = NULL;
    5eb4:	4b05      	ldr	r3, [pc, #20]	; (5ecc <bt_le_scan_stop+0x28>)
    5eb6:	2000      	movs	r0, #0
    5eb8:	6018      	str	r0, [r3, #0]
		bt_id_pending_keys_update();
#endif
	}

	return bt_le_scan_update(false);
}
    5eba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
    5ebe:	f7ff be59 	b.w	5b74 <bt_le_scan_update>
}
    5ec2:	f06f 0077 	mvn.w	r0, #119	; 0x77
    5ec6:	bd08      	pop	{r3, pc}
    5ec8:	2000014c 	.word	0x2000014c
    5ecc:	20001934 	.word	0x20001934

00005ed0 <tx_free>:
	}
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    5ed0:	2300      	movs	r3, #0
	tx->user_data = NULL;
    5ed2:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
    5ed6:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
    5ed8:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
    5eda:	4801      	ldr	r0, [pc, #4]	; (5ee0 <tx_free+0x10>)
    5edc:	f018 bb22 	b.w	1e524 <k_queue_append>
    5ee0:	20000b3c 	.word	0x20000b3c

00005ee4 <notify_connected>:

static void notify_connected(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    5ee4:	4b0e      	ldr	r3, [pc, #56]	; (5f20 <notify_connected+0x3c>)
{
    5ee6:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    5ee8:	681d      	ldr	r5, [r3, #0]
{
    5eea:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    5eec:	b955      	cbnz	r5, 5f04 <notify_connected+0x20>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    5eee:	4d0d      	ldr	r5, [pc, #52]	; (5f24 <notify_connected+0x40>)
    5ef0:	4e0d      	ldr	r6, [pc, #52]	; (5f28 <notify_connected+0x44>)
		if (cb->connected) {
			cb->connected(conn, conn->err);
    5ef2:	7a61      	ldrb	r1, [r4, #9]
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    5ef4:	42b5      	cmp	r5, r6
    5ef6:	d30c      	bcc.n	5f12 <notify_connected+0x2e>
		}
	}

	if (!conn->err) {
    5ef8:	b989      	cbnz	r1, 5f1e <notify_connected+0x3a>
		bt_gatt_connected(conn);
    5efa:	4620      	mov	r0, r4
	}
}
    5efc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_gatt_connected(conn);
    5f00:	f001 bdd6 	b.w	7ab0 <bt_gatt_connected>
		if (cb->connected) {
    5f04:	682b      	ldr	r3, [r5, #0]
    5f06:	b113      	cbz	r3, 5f0e <notify_connected+0x2a>
			cb->connected(conn, conn->err);
    5f08:	7a61      	ldrb	r1, [r4, #9]
    5f0a:	4620      	mov	r0, r4
    5f0c:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    5f0e:	692d      	ldr	r5, [r5, #16]
    5f10:	e7ec      	b.n	5eec <notify_connected+0x8>
		if (cb->connected) {
    5f12:	682b      	ldr	r3, [r5, #0]
    5f14:	b10b      	cbz	r3, 5f1a <notify_connected+0x36>
			cb->connected(conn, conn->err);
    5f16:	4620      	mov	r0, r4
    5f18:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    5f1a:	3514      	adds	r5, #20
    5f1c:	e7e9      	b.n	5ef2 <notify_connected+0xe>
}
    5f1e:	bd70      	pop	{r4, r5, r6, pc}
    5f20:	20001938 	.word	0x20001938
    5f24:	0001f160 	.word	0x0001f160
    5f28:	0001f160 	.word	0x0001f160

00005f2c <send_frag>:
{
    5f2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
    5f30:	694d      	ldr	r5, [r1, #20]
{
    5f32:	4604      	mov	r4, r0
    5f34:	460e      	mov	r6, r1
    5f36:	4690      	mov	r8, r2
    5f38:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
    5f3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5f3e:	483e      	ldr	r0, [pc, #248]	; (6038 <send_frag+0x10c>)
    5f40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5f44:	f00f fbde 	bl	15704 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
    5f48:	7aa3      	ldrb	r3, [r4, #10]
    5f4a:	2b07      	cmp	r3, #7
    5f4c:	d146      	bne.n	5fdc <send_frag+0xb0>
	__asm__ volatile(
    5f4e:	f04f 0320 	mov.w	r3, #32
    5f52:	f3ef 8211 	mrs	r2, BASEPRI
    5f56:	f383 8812 	msr	BASEPRI_MAX, r3
    5f5a:	f3bf 8f6f 	isb	sy
	if (tx) {
    5f5e:	69a3      	ldr	r3, [r4, #24]
    5f60:	2d00      	cmp	r5, #0
    5f62:	d04d      	beq.n	6000 <send_frag+0xd4>
	parent->next = child;
    5f64:	2100      	movs	r1, #0
    5f66:	6029      	str	r1, [r5, #0]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    5f68:	2b00      	cmp	r3, #0
    5f6a:	d146      	bne.n	5ffa <send_frag+0xce>
	list->head = node;
    5f6c:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
    5f70:	f382 8811 	msr	BASEPRI, r2
    5f74:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
    5f78:	2104      	movs	r1, #4
    5f7a:	f106 0008 	add.w	r0, r6, #8
    5f7e:	f017 f872 	bl	1d066 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    5f82:	8823      	ldrh	r3, [r4, #0]
    5f84:	f008 08fd 	and.w	r8, r8, #253	; 0xfd
    5f88:	ea43 3808 	orr.w	r8, r3, r8, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    5f8c:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    5f8e:	f8a0 8000 	strh.w	r8, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    5f92:	3b04      	subs	r3, #4
    5f94:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    5f96:	2302      	movs	r3, #2
    5f98:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
    5f9a:	4630      	mov	r0, r6
    5f9c:	f7fe fc24 	bl	47e8 <bt_send>
	if (err) {
    5fa0:	2800      	cmp	r0, #0
    5fa2:	d047      	beq.n	6034 <send_frag+0x108>
	__asm__ volatile(
    5fa4:	f04f 0320 	mov.w	r3, #32
    5fa8:	f3ef 8011 	mrs	r0, BASEPRI
    5fac:	f383 8812 	msr	BASEPRI_MAX, r3
    5fb0:	f3bf 8f6f 	isb	sy
		if (tx) {
    5fb4:	2d00      	cmp	r5, #0
    5fb6:	d037      	beq.n	6028 <send_frag+0xfc>
	return list->head;
    5fb8:	6963      	ldr	r3, [r4, #20]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5fba:	2200      	movs	r2, #0
    5fbc:	b153      	cbz	r3, 5fd4 <send_frag+0xa8>
    5fbe:	429d      	cmp	r5, r3
    5fc0:	d12f      	bne.n	6022 <send_frag+0xf6>
	return node->next;
    5fc2:	682b      	ldr	r3, [r5, #0]
	return list->tail;
    5fc4:	69a1      	ldr	r1, [r4, #24]
Z_GENLIST_REMOVE(slist, snode)
    5fc6:	bb3a      	cbnz	r2, 6018 <send_frag+0xec>
    5fc8:	42a9      	cmp	r1, r5
	list->head = node;
    5fca:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
    5fcc:	d100      	bne.n	5fd0 <send_frag+0xa4>
	list->tail = node;
    5fce:	61a3      	str	r3, [r4, #24]
	parent->next = child;
    5fd0:	2300      	movs	r3, #0
    5fd2:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
    5fd4:	f380 8811 	msr	BASEPRI, r0
    5fd8:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    5fdc:	4816      	ldr	r0, [pc, #88]	; (6038 <send_frag+0x10c>)
    5fde:	f00f fb6b 	bl	156b8 <z_impl_k_sem_give>
	if (tx) {
    5fe2:	b115      	cbz	r5, 5fea <send_frag+0xbe>
		tx_free(tx);
    5fe4:	4628      	mov	r0, r5
    5fe6:	f7ff ff73 	bl	5ed0 <tx_free>
	if (always_consume) {
    5fea:	b11f      	cbz	r7, 5ff4 <send_frag+0xc8>
		net_buf_unref(buf);
    5fec:	4630      	mov	r0, r6
    5fee:	f00c f94f 	bl	12290 <net_buf_unref>
	return false;
    5ff2:	2700      	movs	r7, #0
}
    5ff4:	4638      	mov	r0, r7
    5ff6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5ffa:	601d      	str	r5, [r3, #0]
	list->tail = node;
    5ffc:	61a5      	str	r5, [r4, #24]
}
    5ffe:	e7b7      	b.n	5f70 <send_frag+0x44>
		if (tail_tx) {
    6000:	b133      	cbz	r3, 6010 <send_frag+0xe4>
			pending_no_cb = &tail_tx->pending_no_cb;
    6002:	f103 090c 	add.w	r9, r3, #12
    6006:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
    6008:	3301      	adds	r3, #1
    600a:	f8c9 3000 	str.w	r3, [r9]
    600e:	e7af      	b.n	5f70 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
    6010:	69e3      	ldr	r3, [r4, #28]
    6012:	f104 091c 	add.w	r9, r4, #28
    6016:	e7f7      	b.n	6008 <send_frag+0xdc>
Z_GENLIST_REMOVE(slist, snode)
    6018:	42a9      	cmp	r1, r5
	parent->next = child;
    601a:	6013      	str	r3, [r2, #0]
	list->tail = node;
    601c:	bf08      	it	eq
    601e:	61a2      	streq	r2, [r4, #24]
}
    6020:	e7d6      	b.n	5fd0 <send_frag+0xa4>
	return node->next;
    6022:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    6024:	681b      	ldr	r3, [r3, #0]
    6026:	e7c9      	b.n	5fbc <send_frag+0x90>
			(*pending_no_cb)--;
    6028:	f8d9 3000 	ldr.w	r3, [r9]
    602c:	3b01      	subs	r3, #1
    602e:	f8c9 3000 	str.w	r3, [r9]
    6032:	e7cf      	b.n	5fd4 <send_frag+0xa8>
	return true;
    6034:	2701      	movs	r7, #1
    6036:	e7dd      	b.n	5ff4 <send_frag+0xc8>
    6038:	20000180 	.word	0x20000180

0000603c <bt_conn_get_pkts>:
}
    603c:	4800      	ldr	r0, [pc, #0]	; (6040 <bt_conn_get_pkts+0x4>)
    603e:	4770      	bx	lr
    6040:	20000180 	.word	0x20000180

00006044 <bt_conn_new>:
{
    6044:	b538      	push	{r3, r4, r5, lr}
    6046:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
    6048:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    604a:	2501      	movs	r5, #1
    604c:	428b      	cmp	r3, r1
    604e:	d102      	bne.n	6056 <bt_conn_new+0x12>
		return NULL;
    6050:	2400      	movs	r4, #0
}
    6052:	4620      	mov	r0, r4
    6054:	bd38      	pop	{r3, r4, r5, pc}
    6056:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
    605a:	f3bf 8f5b 	dmb	ish
    605e:	e852 0f00 	ldrex	r0, [r2]
    6062:	2800      	cmp	r0, #0
    6064:	d104      	bne.n	6070 <bt_conn_new+0x2c>
    6066:	e842 5c00 	strex	ip, r5, [r2]
    606a:	f1bc 0f00 	cmp.w	ip, #0
    606e:	d1f6      	bne.n	605e <bt_conn_new+0x1a>
    6070:	f3bf 8f5b 	dmb	ish
		if (atomic_cas(&conns[i].ref, 0, 1)) {
    6074:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    6078:	d002      	beq.n	6080 <bt_conn_new+0x3c>
	for (i = 0; i < size; i++) {
    607a:	3301      	adds	r3, #1
    607c:	4604      	mov	r4, r0
    607e:	e7e5      	b.n	604c <bt_conn_new+0x8>
	if (!conn) {
    6080:	2c00      	cmp	r4, #0
    6082:	d0e6      	beq.n	6052 <bt_conn_new+0xe>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
    6084:	22b8      	movs	r2, #184	; 0xb8
    6086:	2100      	movs	r1, #0
    6088:	4620      	mov	r0, r4
    608a:	f011 f8ee 	bl	1726a <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
    608e:	f104 0058 	add.w	r0, r4, #88	; 0x58
    6092:	4904      	ldr	r1, [pc, #16]	; (60a4 <bt_conn_new+0x60>)
    6094:	f018 fb4d 	bl	1e732 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
    6098:	4903      	ldr	r1, [pc, #12]	; (60a8 <bt_conn_new+0x64>)
    609a:	f104 0028 	add.w	r0, r4, #40	; 0x28
    609e:	f018 fb12 	bl	1e6c6 <k_work_init>
	return conn;
    60a2:	e7d6      	b.n	6052 <bt_conn_new+0xe>
    60a4:	0000655d 	.word	0x0000655d
    60a8:	00017ebb 	.word	0x00017ebb

000060ac <bt_conn_send_cb>:
{
    60ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    60ae:	461f      	mov	r7, r3
	if (conn->state != BT_CONN_CONNECTED) {
    60b0:	7a83      	ldrb	r3, [r0, #10]
    60b2:	2b07      	cmp	r3, #7
{
    60b4:	4604      	mov	r4, r0
    60b6:	460d      	mov	r5, r1
    60b8:	4616      	mov	r6, r2
	if (conn->state != BT_CONN_CONNECTED) {
    60ba:	d114      	bne.n	60e6 <bt_conn_send_cb+0x3a>
	if (cb) {
    60bc:	b312      	cbz	r2, 6104 <bt_conn_send_cb+0x58>
	return z_impl_z_current_get();
    60be:	f00f ffb1 	bl	16024 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
    60c2:	4b13      	ldr	r3, [pc, #76]	; (6110 <bt_conn_send_cb+0x64>)
    60c4:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
    60c6:	4813      	ldr	r0, [pc, #76]	; (6114 <bt_conn_send_cb+0x68>)
    60c8:	bf07      	ittee	eq
    60ca:	2200      	moveq	r2, #0
    60cc:	2300      	moveq	r3, #0
    60ce:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
    60d2:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
    60d6:	f00f fabb 	bl	15650 <z_impl_k_queue_get>
		if (!tx) {
    60da:	b1a8      	cbz	r0, 6108 <bt_conn_send_cb+0x5c>
		if (conn->state != BT_CONN_CONNECTED) {
    60dc:	7aa3      	ldrb	r3, [r4, #10]
    60de:	2b07      	cmp	r3, #7
    60e0:	d004      	beq.n	60ec <bt_conn_send_cb+0x40>
			tx_free(tx);
    60e2:	f7ff fef5 	bl	5ed0 <tx_free>
		return -ENOTCONN;
    60e6:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    60ea:	e00a      	b.n	6102 <bt_conn_send_cb+0x56>
		tx->pending_no_cb = 0U;
    60ec:	2300      	movs	r3, #0
		tx->user_data = user_data;
    60ee:	e9c0 6701 	strd	r6, r7, [r0, #4]
		tx->pending_no_cb = 0U;
    60f2:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
    60f4:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
    60f6:	f104 0038 	add.w	r0, r4, #56	; 0x38
    60fa:	4629      	mov	r1, r5
    60fc:	f016 ff26 	bl	1cf4c <net_buf_put>
	return 0;
    6100:	2000      	movs	r0, #0
}
    6102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tx_data(buf)->tx = NULL;
    6104:	614a      	str	r2, [r1, #20]
    6106:	e7f6      	b.n	60f6 <bt_conn_send_cb+0x4a>
			return -ENOBUFS;
    6108:	f06f 0068 	mvn.w	r0, #104	; 0x68
    610c:	e7f9      	b.n	6102 <bt_conn_send_cb+0x56>
    610e:	bf00      	nop
    6110:	200017d8 	.word	0x200017d8
    6114:	20000b3c 	.word	0x20000b3c

00006118 <bt_conn_prepare_events>:
	conn_change.signaled = 0U;
    6118:	4b1b      	ldr	r3, [pc, #108]	; (6188 <bt_conn_prepare_events+0x70>)
{
    611a:	b510      	push	{r4, lr}
	conn_change.signaled = 0U;
    611c:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    611e:	2101      	movs	r1, #1
	conn_change.signaled = 0U;
    6120:	609a      	str	r2, [r3, #8]
{
    6122:	4604      	mov	r4, r0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    6124:	f018 fdf3 	bl	1ed0e <k_poll_event_init>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6128:	f3bf 8f5b 	dmb	ish
    612c:	4b17      	ldr	r3, [pc, #92]	; (618c <bt_conn_prepare_events+0x74>)
    612e:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
    6132:	f3bf 8f5b 	dmb	ish
		if (!conn_prepare_events(conn, &events[ev_count])) {
    6136:	f104 0014 	add.w	r0, r4, #20
	if (!atomic_get(&conn->ref)) {
    613a:	b90a      	cbnz	r2, 6140 <bt_conn_prepare_events+0x28>
		conn_cleanup(conn);
    613c:	2001      	movs	r0, #1
}
    613e:	bd10      	pop	{r4, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
    6140:	7a9a      	ldrb	r2, [r3, #10]
    6142:	b99a      	cbnz	r2, 616c <bt_conn_prepare_events+0x54>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6144:	f3bf 8f5b 	dmb	ish
    6148:	1d1a      	adds	r2, r3, #4
    614a:	e852 1f00 	ldrex	r1, [r2]
    614e:	f021 0c40 	bic.w	ip, r1, #64	; 0x40
    6152:	e842 ce00 	strex	lr, ip, [r2]
    6156:	f1be 0f00 	cmp.w	lr, #0
    615a:	d1f6      	bne.n	614a <bt_conn_prepare_events+0x32>
    615c:	f3bf 8f5b 	dmb	ish
    6160:	064a      	lsls	r2, r1, #25
    6162:	d503      	bpl.n	616c <bt_conn_prepare_events+0x54>
		conn_cleanup(conn);
    6164:	4618      	mov	r0, r3
    6166:	f011 feb4 	bl	17ed2 <conn_cleanup>
    616a:	e7e7      	b.n	613c <bt_conn_prepare_events+0x24>
	if (conn->state != BT_CONN_CONNECTED) {
    616c:	7a9b      	ldrb	r3, [r3, #10]
    616e:	2b07      	cmp	r3, #7
    6170:	d1e4      	bne.n	613c <bt_conn_prepare_events+0x24>
	k_poll_event_init(&events[0],
    6172:	4b07      	ldr	r3, [pc, #28]	; (6190 <bt_conn_prepare_events+0x78>)
    6174:	2200      	movs	r2, #0
    6176:	2104      	movs	r1, #4
    6178:	f018 fdc9 	bl	1ed0e <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
    617c:	2301      	movs	r3, #1
    617e:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
    6182:	2002      	movs	r0, #2
	return ev_count;
    6184:	e7db      	b.n	613e <bt_conn_prepare_events+0x26>
    6186:	bf00      	nop
    6188:	200002a0 	.word	0x200002a0
    618c:	20000da0 	.word	0x20000da0
    6190:	20000dd8 	.word	0x20000dd8

00006194 <bt_conn_lookup_handle>:
{
    6194:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
    6196:	2101      	movs	r1, #1
    6198:	4801      	ldr	r0, [pc, #4]	; (61a0 <bt_conn_lookup_handle+0xc>)
    619a:	f011 bf3a 	b.w	18012 <conn_lookup_handle>
    619e:	bf00      	nop
    61a0:	20000da0 	.word	0x20000da0

000061a4 <bt_conn_set_state>:
{
    61a4:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
    61a6:	7a85      	ldrb	r5, [r0, #10]
    61a8:	428d      	cmp	r5, r1
{
    61aa:	4604      	mov	r4, r0
	if (conn->state == state) {
    61ac:	f000 809d 	beq.w	62ea <bt_conn_set_state+0x146>
	conn->state = state;
    61b0:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
    61b2:	b925      	cbnz	r5, 61be <bt_conn_set_state+0x1a>
		if (conn->type != BT_CONN_TYPE_ISO) {
    61b4:	7883      	ldrb	r3, [r0, #2]
    61b6:	2b08      	cmp	r3, #8
    61b8:	d001      	beq.n	61be <bt_conn_set_state+0x1a>
			bt_conn_ref(conn);
    61ba:	f011 fef5 	bl	17fa8 <bt_conn_ref>
	switch (conn->state) {
    61be:	7aa3      	ldrb	r3, [r4, #10]
    61c0:	2b01      	cmp	r3, #1
    61c2:	d116      	bne.n	61f2 <bt_conn_set_state+0x4e>
	z_impl_k_sem_give(sem);
    61c4:	4d49      	ldr	r5, [pc, #292]	; (62ec <bt_conn_set_state+0x148>)
		tx->pending_no_cb = 0U;
    61c6:	2600      	movs	r6, #0
	__asm__ volatile(
    61c8:	f04f 0320 	mov.w	r3, #32
    61cc:	f3ef 8211 	mrs	r2, BASEPRI
    61d0:	f383 8812 	msr	BASEPRI_MAX, r3
    61d4:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
    61d8:	69e3      	ldr	r3, [r4, #28]
    61da:	2b00      	cmp	r3, #0
    61dc:	d066      	beq.n	62ac <bt_conn_set_state+0x108>
			conn->pending_no_cb--;
    61de:	3b01      	subs	r3, #1
    61e0:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    61e2:	f382 8811 	msr	BASEPRI, r2
    61e6:	f3bf 8f6f 	isb	sy
    61ea:	4628      	mov	r0, r5
    61ec:	f00f fa64 	bl	156b8 <z_impl_k_sem_give>
}
    61f0:	e7ea      	b.n	61c8 <bt_conn_set_state+0x24>
	switch (conn->state) {
    61f2:	2b07      	cmp	r3, #7
    61f4:	d009      	beq.n	620a <bt_conn_set_state+0x66>
    61f6:	2b00      	cmp	r3, #0
    61f8:	d177      	bne.n	62ea <bt_conn_set_state+0x146>
		if (conn->type == BT_CONN_TYPE_SCO) {
    61fa:	78a3      	ldrb	r3, [r4, #2]
    61fc:	2b04      	cmp	r3, #4
    61fe:	d11e      	bne.n	623e <bt_conn_set_state+0x9a>
			bt_conn_unref(conn);
    6200:	4620      	mov	r0, r4
}
    6202:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
    6206:	f011 beea 	b.w	17fde <bt_conn_unref>
		if (conn->type == BT_CONN_TYPE_SCO) {
    620a:	78a3      	ldrb	r3, [r4, #2]
    620c:	2b04      	cmp	r3, #4
    620e:	d06c      	beq.n	62ea <bt_conn_set_state+0x146>
	z_impl_k_queue_init(queue);
    6210:	f104 0038 	add.w	r0, r4, #56	; 0x38
    6214:	f018 f97a 	bl	1e50c <z_impl_k_queue_init>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    6218:	4835      	ldr	r0, [pc, #212]	; (62f0 <bt_conn_set_state+0x14c>)
    621a:	2100      	movs	r1, #0
    621c:	f010 f950 	bl	164c0 <z_impl_k_poll_signal_raise>
	list->head = NULL;
    6220:	2300      	movs	r3, #0
	list->tail = NULL;
    6222:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    6226:	78e3      	ldrb	r3, [r4, #3]
    6228:	2b01      	cmp	r3, #1
    622a:	d15e      	bne.n	62ea <bt_conn_set_state+0x146>
			k_work_schedule(&conn->deferred_work,
    622c:	f104 0058 	add.w	r0, r4, #88	; 0x58
    6230:	f44f 3220 	mov.w	r2, #163840	; 0x28000
}
    6234:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&conn->deferred_work,
    6238:	2300      	movs	r3, #0
    623a:	f00f bc11 	b.w	15a60 <k_work_schedule>
		switch (old_state) {
    623e:	3d01      	subs	r5, #1
    6240:	2d05      	cmp	r5, #5
    6242:	d852      	bhi.n	62ea <bt_conn_set_state+0x146>
    6244:	a301      	add	r3, pc, #4	; (adr r3, 624c <bt_conn_set_state+0xa8>)
    6246:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
    624a:	bf00      	nop
    624c:	00006265 	.word	0x00006265
    6250:	0000629f 	.word	0x0000629f
    6254:	00006201 	.word	0x00006201
    6258:	00006201 	.word	0x00006201
    625c:	0000629f 	.word	0x0000629f
    6260:	0000629f 	.word	0x0000629f
			tx_notify(conn);
    6264:	4620      	mov	r0, r4
    6266:	f011 fe05 	bl	17e74 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
    626a:	78a3      	ldrb	r3, [r4, #2]
    626c:	2b01      	cmp	r3, #1
    626e:	d103      	bne.n	6278 <bt_conn_set_state+0xd4>
				k_work_cancel_delayable(&conn->deferred_work);
    6270:	f104 0058 	add.w	r0, r4, #88	; 0x58
    6274:	f018 fa6b 	bl	1e74e <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6278:	f3bf 8f5b 	dmb	ish
    627c:	3404      	adds	r4, #4
    627e:	e854 3f00 	ldrex	r3, [r4]
    6282:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    6286:	e844 3200 	strex	r2, r3, [r4]
    628a:	2a00      	cmp	r2, #0
    628c:	d1f7      	bne.n	627e <bt_conn_set_state+0xda>
    628e:	f3bf 8f5b 	dmb	ish
    6292:	4817      	ldr	r0, [pc, #92]	; (62f0 <bt_conn_set_state+0x14c>)
}
    6294:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6298:	2100      	movs	r1, #0
    629a:	f010 b911 	b.w	164c0 <z_impl_k_poll_signal_raise>
			if (conn->err) {
    629e:	7a63      	ldrb	r3, [r4, #9]
    62a0:	2b00      	cmp	r3, #0
    62a2:	d0ad      	beq.n	6200 <bt_conn_set_state+0x5c>
				notify_connected(conn);
    62a4:	4620      	mov	r0, r4
    62a6:	f7ff fe1d 	bl	5ee4 <notify_connected>
    62aa:	e7a9      	b.n	6200 <bt_conn_set_state+0x5c>
	return list->head;
    62ac:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
    62ae:	b128      	cbz	r0, 62bc <bt_conn_set_state+0x118>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    62b0:	69a1      	ldr	r1, [r4, #24]
	return node->next;
    62b2:	6803      	ldr	r3, [r0, #0]
	list->head = node;
    62b4:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    62b6:	4288      	cmp	r0, r1
	list->tail = node;
    62b8:	bf08      	it	eq
    62ba:	61a3      	streq	r3, [r4, #24]
    62bc:	f382 8811 	msr	BASEPRI, r2
    62c0:	f3bf 8f6f 	isb	sy
		if (!node) {
    62c4:	b188      	cbz	r0, 62ea <bt_conn_set_state+0x146>
	__asm__ volatile(
    62c6:	f04f 0220 	mov.w	r2, #32
    62ca:	f3ef 8311 	mrs	r3, BASEPRI
    62ce:	f382 8812 	msr	BASEPRI_MAX, r2
    62d2:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
    62d6:	68c2      	ldr	r2, [r0, #12]
    62d8:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
    62da:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
    62dc:	f383 8811 	msr	BASEPRI, r3
    62e0:	f3bf 8f6f 	isb	sy
		tx_free(tx);
    62e4:	f7ff fdf4 	bl	5ed0 <tx_free>
    62e8:	e77f      	b.n	61ea <bt_conn_set_state+0x46>
}
    62ea:	bd70      	pop	{r4, r5, r6, pc}
    62ec:	20000180 	.word	0x20000180
    62f0:	200002a0 	.word	0x200002a0

000062f4 <bt_conn_index>:
		index = conn - acl_conns;
    62f4:	4b03      	ldr	r3, [pc, #12]	; (6304 <bt_conn_index+0x10>)
    62f6:	1ac0      	subs	r0, r0, r3
    62f8:	4b03      	ldr	r3, [pc, #12]	; (6308 <bt_conn_index+0x14>)
    62fa:	1180      	asrs	r0, r0, #6
    62fc:	4358      	muls	r0, r3
}
    62fe:	b2c0      	uxtb	r0, r0
    6300:	4770      	bx	lr
    6302:	bf00      	nop
    6304:	20000da0 	.word	0x20000da0
    6308:	aaaaaaab 	.word	0xaaaaaaab

0000630c <bt_conn_create_pdu_timeout>:
{
    630c:	b538      	push	{r3, r4, r5, lr}
    630e:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
    6310:	4906      	ldr	r1, [pc, #24]	; (632c <bt_conn_create_pdu_timeout+0x20>)
    6312:	2800      	cmp	r0, #0
    6314:	bf08      	it	eq
    6316:	4608      	moveq	r0, r1
    6318:	f016 fdef 	bl	1cefa <net_buf_alloc_fixed>
	if (!buf) {
    631c:	4604      	mov	r4, r0
    631e:	b118      	cbz	r0, 6328 <bt_conn_create_pdu_timeout+0x1c>
	net_buf_simple_reserve(&buf->b, reserve);
    6320:	1d29      	adds	r1, r5, #4
    6322:	3008      	adds	r0, #8
    6324:	f016 fe0e 	bl	1cf44 <net_buf_simple_reserve>
}
    6328:	4620      	mov	r0, r4
    632a:	bd38      	pop	{r3, r4, r5, pc}
    632c:	20000b6c 	.word	0x20000b6c

00006330 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
    6330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6332:	f3bf 8f5b 	dmb	ish
    6336:	6842      	ldr	r2, [r0, #4]
    6338:	f3bf 8f5b 	dmb	ish
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
    633c:	0592      	lsls	r2, r2, #22
{
    633e:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
    6340:	f100 0304 	add.w	r3, r0, #4
    6344:	d519      	bpl.n	637a <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
    6346:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
    634a:	f8b0 10a0 	ldrh.w	r1, [r0, #160]	; 0xa0
    634e:	4291      	cmp	r1, r2
    6350:	d813      	bhi.n	637a <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
    6352:	f8b0 10a2 	ldrh.w	r1, [r0, #162]	; 0xa2
    6356:	4291      	cmp	r1, r2
    6358:	d30f      	bcc.n	637a <notify_le_param_updated+0x4a>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
    635a:	e9d0 1229 	ldrd	r1, r2, [r0, #164]	; 0xa4
    635e:	4291      	cmp	r1, r2
    6360:	d10b      	bne.n	637a <notify_le_param_updated+0x4a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6362:	f3bf 8f5b 	dmb	ish
    6366:	e853 2f00 	ldrex	r2, [r3]
    636a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    636e:	e843 2100 	strex	r1, r2, [r3]
    6372:	2900      	cmp	r1, #0
    6374:	d1f7      	bne.n	6366 <notify_le_param_updated+0x36>
    6376:	f3bf 8f5b 	dmb	ish
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
    637a:	4b10      	ldr	r3, [pc, #64]	; (63bc <notify_le_param_updated+0x8c>)
    637c:	681d      	ldr	r5, [r3, #0]
    637e:	b925      	cbnz	r5, 638a <notify_le_param_updated+0x5a>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    6380:	4d0f      	ldr	r5, [pc, #60]	; (63c0 <notify_le_param_updated+0x90>)
    6382:	4f10      	ldr	r7, [pc, #64]	; (63c4 <notify_le_param_updated+0x94>)
    6384:	42bd      	cmp	r5, r7
    6386:	d30c      	bcc.n	63a2 <notify_le_param_updated+0x72>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
    6388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->le_param_updated) {
    638a:	68ee      	ldr	r6, [r5, #12]
    638c:	b13e      	cbz	r6, 639e <notify_le_param_updated+0x6e>
			cb->le_param_updated(conn, conn->le.interval,
    638e:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    6392:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    6396:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    639a:	4620      	mov	r0, r4
    639c:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    639e:	692d      	ldr	r5, [r5, #16]
    63a0:	e7ed      	b.n	637e <notify_le_param_updated+0x4e>
		if (cb->le_param_updated) {
    63a2:	68ee      	ldr	r6, [r5, #12]
    63a4:	b13e      	cbz	r6, 63b6 <notify_le_param_updated+0x86>
			cb->le_param_updated(conn, conn->le.interval,
    63a6:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    63aa:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    63ae:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    63b2:	4620      	mov	r0, r4
    63b4:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    63b6:	3514      	adds	r5, #20
    63b8:	e7e4      	b.n	6384 <notify_le_param_updated+0x54>
    63ba:	bf00      	nop
    63bc:	20001938 	.word	0x20001938
    63c0:	0001f160 	.word	0x0001f160
    63c4:	0001f160 	.word	0x0001f160

000063c8 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
    63c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    63cc:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
    63ce:	4608      	mov	r0, r1
{
    63d0:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
    63d2:	f011 fa88 	bl	178e6 <bt_le_conn_params_valid>
    63d6:	4605      	mov	r5, r0
    63d8:	b918      	cbnz	r0, 63e2 <le_param_req+0x1a>
		return false;
    63da:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
    63dc:	4628      	mov	r0, r5
    63de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    63e2:	4b13      	ldr	r3, [pc, #76]	; (6430 <le_param_req+0x68>)
    63e4:	681e      	ldr	r6, [r3, #0]
    63e6:	b946      	cbnz	r6, 63fa <le_param_req+0x32>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    63e8:	4e12      	ldr	r6, [pc, #72]	; (6434 <le_param_req+0x6c>)
    63ea:	f8df 804c 	ldr.w	r8, [pc, #76]	; 6438 <le_param_req+0x70>
    63ee:	4546      	cmp	r6, r8
    63f0:	d2f4      	bcs.n	63dc <le_param_req+0x14>
		if (!cb->le_param_req) {
    63f2:	68b3      	ldr	r3, [r6, #8]
    63f4:	b983      	cbnz	r3, 6418 <le_param_req+0x50>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    63f6:	3614      	adds	r6, #20
    63f8:	e7f9      	b.n	63ee <le_param_req+0x26>
		if (!cb->le_param_req) {
    63fa:	68b3      	ldr	r3, [r6, #8]
    63fc:	b90b      	cbnz	r3, 6402 <le_param_req+0x3a>
	for (cb = callback_list; cb; cb = cb->_next) {
    63fe:	6936      	ldr	r6, [r6, #16]
    6400:	e7f1      	b.n	63e6 <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
    6402:	4621      	mov	r1, r4
    6404:	4638      	mov	r0, r7
    6406:	4798      	blx	r3
    6408:	2800      	cmp	r0, #0
    640a:	d0e6      	beq.n	63da <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
    640c:	4620      	mov	r0, r4
    640e:	f011 fa6a 	bl	178e6 <bt_le_conn_params_valid>
    6412:	2800      	cmp	r0, #0
    6414:	d1f3      	bne.n	63fe <le_param_req+0x36>
    6416:	e7e0      	b.n	63da <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
    6418:	4621      	mov	r1, r4
    641a:	4638      	mov	r0, r7
    641c:	4798      	blx	r3
    641e:	2800      	cmp	r0, #0
    6420:	d0db      	beq.n	63da <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
    6422:	4620      	mov	r0, r4
    6424:	f011 fa5f 	bl	178e6 <bt_le_conn_params_valid>
    6428:	2800      	cmp	r0, #0
    642a:	d1e4      	bne.n	63f6 <le_param_req+0x2e>
    642c:	e7d5      	b.n	63da <le_param_req+0x12>
    642e:	bf00      	nop
    6430:	20001938 	.word	0x20001938
    6434:	0001f160 	.word	0x0001f160
    6438:	0001f160 	.word	0x0001f160

0000643c <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
    643c:	b570      	push	{r4, r5, r6, lr}
    643e:	4606      	mov	r6, r0
    6440:	460d      	mov	r5, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
    6442:	4809      	ldr	r0, [pc, #36]	; (6468 <bt_conn_add_le+0x2c>)
    6444:	2101      	movs	r1, #1
    6446:	f7ff fdfd 	bl	6044 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
    644a:	4604      	mov	r4, r0
    644c:	b150      	cbz	r0, 6464 <bt_conn_add_le+0x28>
		return NULL;
	}

	conn->id = id;
    644e:	7206      	strb	r6, [r0, #8]
    6450:	2207      	movs	r2, #7
    6452:	4629      	mov	r1, r5
    6454:	3088      	adds	r0, #136	; 0x88
    6456:	f010 fefd 	bl	17254 <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
    645a:	2301      	movs	r3, #1
    645c:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    645e:	4b03      	ldr	r3, [pc, #12]	; (646c <bt_conn_add_le+0x30>)
    6460:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
    6464:	4620      	mov	r0, r4
    6466:	bd70      	pop	{r4, r5, r6, pc}
    6468:	20000da0 	.word	0x20000da0
    646c:	00280018 	.word	0x00280018

00006470 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
    6470:	b570      	push	{r4, r5, r6, lr}
    6472:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    6474:	480c      	ldr	r0, [pc, #48]	; (64a8 <bt_conn_lookup_addr_le+0x38>)
{
    6476:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    6478:	f011 fd96 	bl	17fa8 <bt_conn_ref>

		if (!conn) {
    647c:	4604      	mov	r4, r0
    647e:	b128      	cbz	r0, 648c <bt_conn_lookup_addr_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    6480:	7883      	ldrb	r3, [r0, #2]
    6482:	2b01      	cmp	r3, #1
    6484:	d004      	beq.n	6490 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
    6486:	f011 fdaa 	bl	17fde <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
    648a:	2400      	movs	r4, #0
}
    648c:	4620      	mov	r0, r4
    648e:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
    6490:	4629      	mov	r1, r5
    6492:	4632      	mov	r2, r6
    6494:	f011 fdea 	bl	1806c <bt_conn_is_peer_addr_le>
    6498:	4605      	mov	r5, r0
    649a:	2800      	cmp	r0, #0
    649c:	d1f6      	bne.n	648c <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
    649e:	4620      	mov	r0, r4
    64a0:	f011 fd9d 	bl	17fde <bt_conn_unref>
	return NULL;
    64a4:	462c      	mov	r4, r5
			continue;
    64a6:	e7f1      	b.n	648c <bt_conn_lookup_addr_le+0x1c>
    64a8:	20000da0 	.word	0x20000da0

000064ac <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
    64ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    64ae:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    64b0:	480e      	ldr	r0, [pc, #56]	; (64ec <bt_conn_lookup_state_le+0x40>)
{
    64b2:	460e      	mov	r6, r1
    64b4:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    64b6:	f011 fd77 	bl	17fa8 <bt_conn_ref>

		if (!conn) {
    64ba:	4604      	mov	r4, r0
    64bc:	b1a0      	cbz	r0, 64e8 <bt_conn_lookup_state_le+0x3c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    64be:	7883      	ldrb	r3, [r0, #2]
    64c0:	2b01      	cmp	r3, #1
    64c2:	d003      	beq.n	64cc <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
    64c4:	f011 fd8b 	bl	17fde <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
    64c8:	2400      	movs	r4, #0
			continue;
    64ca:	e00d      	b.n	64e8 <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
    64cc:	b136      	cbz	r6, 64dc <bt_conn_lookup_state_le+0x30>
    64ce:	4632      	mov	r2, r6
    64d0:	4629      	mov	r1, r5
    64d2:	f011 fdcb 	bl	1806c <bt_conn_is_peer_addr_le>
    64d6:	b908      	cbnz	r0, 64dc <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
    64d8:	4620      	mov	r0, r4
    64da:	e7f3      	b.n	64c4 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
    64dc:	7aa3      	ldrb	r3, [r4, #10]
    64de:	42bb      	cmp	r3, r7
    64e0:	d1fa      	bne.n	64d8 <bt_conn_lookup_state_le+0x2c>
    64e2:	7a23      	ldrb	r3, [r4, #8]
    64e4:	42ab      	cmp	r3, r5
    64e6:	d1f7      	bne.n	64d8 <bt_conn_lookup_state_le+0x2c>
}
    64e8:	4620      	mov	r0, r4
    64ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    64ec:	20000da0 	.word	0x20000da0

000064f0 <send_conn_le_param_update>:
{
    64f0:	b538      	push	{r3, r4, r5, lr}
    64f2:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
    64f4:	4608      	mov	r0, r1
{
    64f6:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    64f8:	f011 f9f5 	bl	178e6 <bt_le_conn_params_valid>
    64fc:	b348      	cbz	r0, 6552 <send_conn_le_param_update+0x62>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    64fe:	4b16      	ldr	r3, [pc, #88]	; (6558 <send_conn_le_param_update+0x68>)
    6500:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
    6504:	0799      	lsls	r1, r3, #30
    6506:	d407      	bmi.n	6518 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
    6508:	78e3      	ldrb	r3, [r4, #3]
    650a:	b183      	cbz	r3, 652e <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
    650c:	4629      	mov	r1, r5
    650e:	4620      	mov	r0, r4
}
    6510:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    6514:	f000 b9b6 	b.w	6884 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    6518:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
    651c:	079a      	lsls	r2, r3, #30
    651e:	d5f3      	bpl.n	6508 <send_conn_le_param_update+0x18>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6520:	f3bf 8f5b 	dmb	ish
    6524:	6863      	ldr	r3, [r4, #4]
    6526:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
    652a:	055b      	lsls	r3, r3, #21
    652c:	d4ec      	bmi.n	6508 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
    652e:	4629      	mov	r1, r5
    6530:	4620      	mov	r0, r4
    6532:	f011 fdc3 	bl	180bc <bt_conn_le_conn_update>
		if (rc == 0) {
    6536:	b958      	cbnz	r0, 6550 <send_conn_le_param_update+0x60>
			conn->le.interval_min = param->interval_min;
    6538:	882b      	ldrh	r3, [r5, #0]
    653a:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
    653e:	886b      	ldrh	r3, [r5, #2]
    6540:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
    6544:	88ab      	ldrh	r3, [r5, #4]
    6546:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
    654a:	88eb      	ldrh	r3, [r5, #6]
    654c:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
    6550:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    6552:	f06f 0015 	mvn.w	r0, #21
    6556:	e7fb      	b.n	6550 <send_conn_le_param_update+0x60>
    6558:	20000080 	.word	0x20000080

0000655c <deferred_work>:
{
    655c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
    655e:	f810 3c4e 	ldrb.w	r3, [r0, #-78]
{
    6562:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
    6564:	f1a0 0558 	sub.w	r5, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
    6568:	b9fb      	cbnz	r3, 65aa <deferred_work+0x4e>
		bt_l2cap_disconnected(conn);
    656a:	4628      	mov	r0, r5
    656c:	f011 fe28 	bl	181c0 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    6570:	4b2c      	ldr	r3, [pc, #176]	; (6624 <deferred_work+0xc8>)
    6572:	681e      	ldr	r6, [r3, #0]
    6574:	b94e      	cbnz	r6, 658a <deferred_work+0x2e>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    6576:	4e2c      	ldr	r6, [pc, #176]	; (6628 <deferred_work+0xcc>)
    6578:	4f2c      	ldr	r7, [pc, #176]	; (662c <deferred_work+0xd0>)
    657a:	42be      	cmp	r6, r7
    657c:	d30d      	bcc.n	659a <deferred_work+0x3e>
		bt_conn_unref(conn);
    657e:	4628      	mov	r0, r5
}
    6580:	b003      	add	sp, #12
    6582:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
    6586:	f011 bd2a 	b.w	17fde <bt_conn_unref>
		if (cb->disconnected) {
    658a:	6873      	ldr	r3, [r6, #4]
    658c:	b11b      	cbz	r3, 6596 <deferred_work+0x3a>
			cb->disconnected(conn, conn->err);
    658e:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
    6592:	4628      	mov	r0, r5
    6594:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    6596:	6936      	ldr	r6, [r6, #16]
    6598:	e7ec      	b.n	6574 <deferred_work+0x18>
		if (cb->disconnected) {
    659a:	6873      	ldr	r3, [r6, #4]
    659c:	b11b      	cbz	r3, 65a6 <deferred_work+0x4a>
			cb->disconnected(conn, conn->err);
    659e:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
    65a2:	4628      	mov	r0, r5
    65a4:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    65a6:	3614      	adds	r6, #20
    65a8:	e7e7      	b.n	657a <deferred_work+0x1e>
	if (conn->type != BT_CONN_TYPE_LE) {
    65aa:	f810 3c56 	ldrb.w	r3, [r0, #-86]
    65ae:	2b01      	cmp	r3, #1
    65b0:	d12f      	bne.n	6612 <deferred_work+0xb6>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    65b2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(conn->flags,
    65b6:	f1a0 0654 	sub.w	r6, r0, #84	; 0x54
    65ba:	e856 3f00 	ldrex	r3, [r6]
    65be:	f423 7200 	bic.w	r2, r3, #512	; 0x200
    65c2:	e846 2100 	strex	r1, r2, [r6]
    65c6:	2900      	cmp	r1, #0
    65c8:	d1f7      	bne.n	65ba <deferred_work+0x5e>
    65ca:	f3bf 8f5b 	dmb	ish
    65ce:	059b      	lsls	r3, r3, #22
    65d0:	d521      	bpl.n	6616 <deferred_work+0xba>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
    65d2:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    65d6:	f8ad 3000 	strh.w	r3, [sp]
    65da:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
    65de:	f8ad 3002 	strh.w	r3, [sp, #2]
    65e2:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
    65e6:	f8ad 3004 	strh.w	r3, [sp, #4]
    65ea:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
    65ee:	f8ad 3006 	strh.w	r3, [sp, #6]
		send_conn_le_param_update(conn, param);
    65f2:	4669      	mov	r1, sp
    65f4:	4628      	mov	r0, r5
    65f6:	f7ff ff7b 	bl	64f0 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    65fa:	f3bf 8f5b 	dmb	ish
    65fe:	e856 3f00 	ldrex	r3, [r6]
    6602:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    6606:	e846 3200 	strex	r2, r3, [r6]
    660a:	2a00      	cmp	r2, #0
    660c:	d1f7      	bne.n	65fe <deferred_work+0xa2>
    660e:	f3bf 8f5b 	dmb	ish
}
    6612:	b003      	add	sp, #12
    6614:	bdf0      	pop	{r4, r5, r6, r7, pc}
		param = BT_LE_CONN_PARAM(
    6616:	4a06      	ldr	r2, [pc, #24]	; (6630 <deferred_work+0xd4>)
    6618:	6810      	ldr	r0, [r2, #0]
    661a:	6851      	ldr	r1, [r2, #4]
    661c:	466b      	mov	r3, sp
    661e:	c303      	stmia	r3!, {r0, r1}
    6620:	e7e7      	b.n	65f2 <deferred_work+0x96>
    6622:	bf00      	nop
    6624:	20001938 	.word	0x20001938
    6628:	0001f160 	.word	0x0001f160
    662c:	0001f160 	.word	0x0001f160
    6630:	0001f26c 	.word	0x0001f26c

00006634 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
    6634:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
    6636:	4801      	ldr	r0, [pc, #4]	; (663c <bt_conn_create_frag_timeout+0x8>)
    6638:	f7ff be68 	b.w	630c <bt_conn_create_pdu_timeout>
    663c:	20000bf0 	.word	0x20000bf0

00006640 <create_frag>:
{
    6640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6644:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
    6646:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    664a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    664e:	2000      	movs	r0, #0
{
    6650:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
    6652:	f7ff ffef 	bl	6634 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
    6656:	7ab3      	ldrb	r3, [r6, #10]
    6658:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
    665a:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
    665c:	f04f 0600 	mov.w	r6, #0
    6660:	d005      	beq.n	666e <create_frag+0x2e>
		net_buf_unref(frag);
    6662:	f00b fe15 	bl	12290 <net_buf_unref>
		return NULL;
    6666:	4635      	mov	r5, r6
}
    6668:	4628      	mov	r0, r5
    666a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
    666e:	6146      	str	r6, [r0, #20]
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
    6670:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
    6674:	4e0c      	ldr	r6, [pc, #48]	; (66a8 <create_frag+0x68>)
    6676:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    6678:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
    667c:	f016 fd5f 	bl	1d13e <net_buf_simple_tailroom>
    6680:	4580      	cmp	r8, r0
    6682:	d20c      	bcs.n	669e <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
    6684:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
    6688:	f854 1f08 	ldr.w	r1, [r4, #8]!
    668c:	4632      	mov	r2, r6
    668e:	4638      	mov	r0, r7
    6690:	f016 fca1 	bl	1cfd6 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
    6694:	4631      	mov	r1, r6
    6696:	4620      	mov	r0, r4
    6698:	f016 fd12 	bl	1d0c0 <net_buf_simple_pull>
    669c:	e7e4      	b.n	6668 <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
    669e:	4638      	mov	r0, r7
    66a0:	f016 fd4d 	bl	1d13e <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    66a4:	b286      	uxth	r6, r0
    66a6:	e7ef      	b.n	6688 <create_frag+0x48>
    66a8:	20000080 	.word	0x20000080

000066ac <bt_conn_process_tx>:
{
    66ac:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
    66ae:	7a83      	ldrb	r3, [r0, #10]
{
    66b0:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    66b2:	b993      	cbnz	r3, 66da <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    66b4:	f3bf 8f5b 	dmb	ish
    66b8:	1d03      	adds	r3, r0, #4
    66ba:	e853 2f00 	ldrex	r2, [r3]
    66be:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    66c2:	e843 1500 	strex	r5, r1, [r3]
    66c6:	2d00      	cmp	r5, #0
    66c8:	d1f7      	bne.n	66ba <bt_conn_process_tx+0xe>
    66ca:	f3bf 8f5b 	dmb	ish
    66ce:	0653      	lsls	r3, r2, #25
    66d0:	d503      	bpl.n	66da <bt_conn_process_tx+0x2e>
}
    66d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
    66d6:	f011 bbfc 	b.w	17ed2 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    66da:	2200      	movs	r2, #0
    66dc:	2300      	movs	r3, #0
    66de:	f104 0038 	add.w	r0, r4, #56	; 0x38
    66e2:	f016 fc0f 	bl	1cf04 <net_buf_get>
	BT_ASSERT(buf);
    66e6:	4605      	mov	r5, r0
    66e8:	b960      	cbnz	r0, 6704 <bt_conn_process_tx+0x58>
    66ea:	4a1f      	ldr	r2, [pc, #124]	; (6768 <bt_conn_process_tx+0xbc>)
    66ec:	491f      	ldr	r1, [pc, #124]	; (676c <bt_conn_process_tx+0xc0>)
    66ee:	4820      	ldr	r0, [pc, #128]	; (6770 <bt_conn_process_tx+0xc4>)
    66f0:	f240 23e7 	movw	r3, #743	; 0x2e7
    66f4:	f00f ff81 	bl	165fa <printk>
    66f8:	4040      	eors	r0, r0
    66fa:	f380 8811 	msr	BASEPRI, r0
    66fe:	f04f 0003 	mov.w	r0, #3
    6702:	df02      	svc	2
	return bt_dev.le.acl_mtu;
    6704:	4e1b      	ldr	r6, [pc, #108]	; (6774 <bt_conn_process_tx+0xc8>)
	if (buf->len <= conn_mtu(conn)) {
    6706:	89aa      	ldrh	r2, [r5, #12]
    6708:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
    670c:	429a      	cmp	r2, r3
    670e:	d807      	bhi.n	6720 <bt_conn_process_tx+0x74>
		return send_frag(conn, buf, FRAG_SINGLE, false);
    6710:	2300      	movs	r3, #0
    6712:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
    6714:	4629      	mov	r1, r5
    6716:	4620      	mov	r0, r4
    6718:	f7ff fc08 	bl	5f2c <send_frag>
	if (!send_buf(conn, buf)) {
    671c:	b130      	cbz	r0, 672c <bt_conn_process_tx+0x80>
}
    671e:	bd70      	pop	{r4, r5, r6, pc}
	frag = create_frag(conn, buf);
    6720:	4629      	mov	r1, r5
    6722:	4620      	mov	r0, r4
    6724:	f7ff ff8c 	bl	6640 <create_frag>
	if (!frag) {
    6728:	4601      	mov	r1, r0
    672a:	b920      	cbnz	r0, 6736 <bt_conn_process_tx+0x8a>
		net_buf_unref(buf);
    672c:	4628      	mov	r0, r5
}
    672e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
    6732:	f00b bdad 	b.w	12290 <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
    6736:	2301      	movs	r3, #1
    6738:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    673a:	4620      	mov	r0, r4
    673c:	f7ff fbf6 	bl	5f2c <send_frag>
    6740:	2800      	cmp	r0, #0
    6742:	d0f3      	beq.n	672c <bt_conn_process_tx+0x80>
	while (buf->len > conn_mtu(conn)) {
    6744:	89aa      	ldrh	r2, [r5, #12]
    6746:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
    674a:	429a      	cmp	r2, r3
    674c:	d802      	bhi.n	6754 <bt_conn_process_tx+0xa8>
	return send_frag(conn, buf, FRAG_END, false);
    674e:	2300      	movs	r3, #0
    6750:	2203      	movs	r2, #3
    6752:	e7df      	b.n	6714 <bt_conn_process_tx+0x68>
		frag = create_frag(conn, buf);
    6754:	4629      	mov	r1, r5
    6756:	4620      	mov	r0, r4
    6758:	f7ff ff72 	bl	6640 <create_frag>
		if (!frag) {
    675c:	4601      	mov	r1, r0
    675e:	2800      	cmp	r0, #0
    6760:	d0e4      	beq.n	672c <bt_conn_process_tx+0x80>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    6762:	2301      	movs	r3, #1
    6764:	461a      	mov	r2, r3
    6766:	e7e8      	b.n	673a <bt_conn_process_tx+0x8e>
    6768:	00020312 	.word	0x00020312
    676c:	00020279 	.word	0x00020279
    6770:	0002023c 	.word	0x0002023c
    6774:	20000080 	.word	0x20000080

00006778 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
    6778:	b570      	push	{r4, r5, r6, lr}
    677a:	4d0b      	ldr	r5, [pc, #44]	; (67a8 <bt_conn_init+0x30>)
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
    677c:	4e0b      	ldr	r6, [pc, #44]	; (67ac <bt_conn_init+0x34>)
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
    677e:	2400      	movs	r4, #0
		k_fifo_put(&free_tx, &conn_tx[i]);
    6780:	4629      	mov	r1, r5
    6782:	4630      	mov	r0, r6
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
    6784:	3401      	adds	r4, #1
		k_fifo_put(&free_tx, &conn_tx[i]);
    6786:	f017 fecd 	bl	1e524 <k_queue_append>
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
    678a:	2c05      	cmp	r4, #5
    678c:	f105 0510 	add.w	r5, r5, #16
    6790:	d1f6      	bne.n	6780 <bt_conn_init+0x8>
	}

	bt_att_init();
    6792:	f012 fa00 	bl	18b96 <bt_att_init>

	err = bt_smp_init();
    6796:	f012 fdfa 	bl	1938e <bt_smp_init>
	if (err) {
    679a:	4604      	mov	r4, r0
    679c:	b908      	cbnz	r0, 67a2 <bt_conn_init+0x2a>
		return err;
	}

	bt_l2cap_init();
    679e:	f011 fd9e 	bl	182de <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
    67a2:	4620      	mov	r0, r4
    67a4:	bd70      	pop	{r4, r5, r6, pc}
    67a6:	bf00      	nop
    67a8:	2000193c 	.word	0x2000193c
    67ac:	20000b3c 	.word	0x20000b3c

000067b0 <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    67b0:	4b04      	ldr	r3, [pc, #16]	; (67c4 <l2cap_accept+0x14>)
    67b2:	6818      	ldr	r0, [r3, #0]
    67b4:	b918      	cbnz	r0, 67be <l2cap_accept+0xe>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    67b6:	4a04      	ldr	r2, [pc, #16]	; (67c8 <l2cap_accept+0x18>)
    67b8:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
    67ba:	600b      	str	r3, [r1, #0]

		return 0;
    67bc:	4770      	bx	lr
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
    67be:	f06f 000b 	mvn.w	r0, #11
}
    67c2:	4770      	bx	lr
    67c4:	20000e60 	.word	0x20000e60
    67c8:	0001f494 	.word	0x0001f494

000067cc <bt_l2cap_connected>:
{
    67cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    67d0:	4e29      	ldr	r6, [pc, #164]	; (6878 <bt_l2cap_connected+0xac>)
    67d2:	4f2a      	ldr	r7, [pc, #168]	; (687c <bt_l2cap_connected+0xb0>)
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
    67d4:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 6880 <bt_l2cap_connected+0xb4>
{
    67d8:	4604      	mov	r4, r0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    67da:	42be      	cmp	r6, r7
    67dc:	d302      	bcc.n	67e4 <bt_l2cap_connected+0x18>
}
    67de:	b003      	add	sp, #12
    67e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
    67e4:	6873      	ldr	r3, [r6, #4]
    67e6:	a901      	add	r1, sp, #4
    67e8:	4620      	mov	r0, r4
    67ea:	4798      	blx	r3
    67ec:	2800      	cmp	r0, #0
    67ee:	db3d      	blt.n	686c <bt_l2cap_connected+0xa0>
		ch = BT_L2CAP_LE_CHAN(chan);
    67f0:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
    67f2:	8833      	ldrh	r3, [r6, #0]
    67f4:	f8a5 3070 	strh.w	r3, [r5, #112]	; 0x70
		ch->tx.cid = fchan->cid;
    67f8:	f8a5 3080 	strh.w	r3, [r5, #128]	; 0x80
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
    67fc:	4641      	mov	r1, r8
    67fe:	f105 0010 	add.w	r0, r5, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
    6802:	f8d6 9008 	ldr.w	r9, [r6, #8]
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
    6806:	f017 ff94 	bl	1e732 <k_work_init_delayable>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    680a:	f3bf 8f5b 	dmb	ish
    680e:	f105 0368 	add.w	r3, r5, #104	; 0x68
    6812:	2200      	movs	r2, #0
    6814:	e853 1f00 	ldrex	r1, [r3]
    6818:	e843 2000 	strex	r0, r2, [r3]
    681c:	2800      	cmp	r0, #0
    681e:	d1f9      	bne.n	6814 <bt_l2cap_connected+0x48>
    6820:	f3bf 8f5b 	dmb	ish
	parent->next = child;
    6824:	60aa      	str	r2, [r5, #8]
	return list->tail;
    6826:	6d62      	ldr	r2, [r4, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
    6828:	f105 0308 	add.w	r3, r5, #8
Z_GENLIST_APPEND(slist, snode)
    682c:	bb02      	cbnz	r2, 6870 <bt_l2cap_connected+0xa4>
	list->head = node;
    682e:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (chan->ops->connected) {
    6832:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
    6834:	602c      	str	r4, [r5, #0]
		if (chan->ops->connected) {
    6836:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
    6838:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
    683c:	681b      	ldr	r3, [r3, #0]
    683e:	b103      	cbz	r3, 6842 <bt_l2cap_connected+0x76>
			chan->ops->connected(chan);
    6840:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6842:	9b01      	ldr	r3, [sp, #4]
    6844:	f3bf 8f5b 	dmb	ish
    6848:	3368      	adds	r3, #104	; 0x68
    684a:	e853 2f00 	ldrex	r2, [r3]
    684e:	f042 0201 	orr.w	r2, r2, #1
    6852:	e843 2100 	strex	r1, r2, [r3]
    6856:	2900      	cmp	r1, #0
    6858:	d1f7      	bne.n	684a <bt_l2cap_connected+0x7e>
    685a:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
    685e:	9801      	ldr	r0, [sp, #4]
    6860:	6843      	ldr	r3, [r0, #4]
    6862:	699b      	ldr	r3, [r3, #24]
    6864:	b113      	cbz	r3, 686c <bt_l2cap_connected+0xa0>
			chan->ops->status(chan, chan->status);
    6866:	f100 0168 	add.w	r1, r0, #104	; 0x68
    686a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    686c:	360c      	adds	r6, #12
    686e:	e7b4      	b.n	67da <bt_l2cap_connected+0xe>
	parent->next = child;
    6870:	6013      	str	r3, [r2, #0]
	list->tail = node;
    6872:	6563      	str	r3, [r4, #84]	; 0x54
}
    6874:	e7dd      	b.n	6832 <bt_l2cap_connected+0x66>
    6876:	bf00      	nop
    6878:	0001f13c 	.word	0x0001f13c
    687c:	0001f160 	.word	0x0001f160
    6880:	000181a7 	.word	0x000181a7

00006884 <bt_l2cap_update_conn_param>:
{
    6884:	b573      	push	{r0, r1, r4, r5, r6, lr}
    6886:	460d      	mov	r5, r1
	ident++;
    6888:	4916      	ldr	r1, [pc, #88]	; (68e4 <bt_l2cap_update_conn_param+0x60>)
    688a:	780b      	ldrb	r3, [r1, #0]
    688c:	3301      	adds	r3, #1
	if (!ident) {
    688e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		ident++;
    6892:	bf08      	it	eq
    6894:	2301      	moveq	r3, #1
    6896:	700b      	strb	r3, [r1, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    6898:	7809      	ldrb	r1, [r1, #0]
{
    689a:	4606      	mov	r6, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    689c:	2208      	movs	r2, #8
    689e:	2012      	movs	r0, #18
    68a0:	f011 fc38 	bl	18114 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
    68a4:	4604      	mov	r4, r0
    68a6:	b1d0      	cbz	r0, 68de <bt_l2cap_update_conn_param+0x5a>
	return net_buf_simple_add(&buf->b, len);
    68a8:	2108      	movs	r1, #8
    68aa:	4408      	add	r0, r1
    68ac:	f016 fb8d 	bl	1cfca <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    68b0:	882b      	ldrh	r3, [r5, #0]
    68b2:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    68b4:	886b      	ldrh	r3, [r5, #2]
    68b6:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    68b8:	88ab      	ldrh	r3, [r5, #4]
    68ba:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    68bc:	88eb      	ldrh	r3, [r5, #6]
    68be:	80c3      	strh	r3, [r0, #6]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
    68c0:	2300      	movs	r3, #0
    68c2:	9300      	str	r3, [sp, #0]
    68c4:	4622      	mov	r2, r4
    68c6:	2105      	movs	r1, #5
    68c8:	4630      	mov	r0, r6
    68ca:	f011 fc8d 	bl	181e8 <bt_l2cap_send_cb>
	if (err) {
    68ce:	4605      	mov	r5, r0
    68d0:	b110      	cbz	r0, 68d8 <bt_l2cap_update_conn_param+0x54>
		net_buf_unref(buf);
    68d2:	4620      	mov	r0, r4
    68d4:	f00b fcdc 	bl	12290 <net_buf_unref>
}
    68d8:	4628      	mov	r0, r5
    68da:	b002      	add	sp, #8
    68dc:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    68de:	f06f 050b 	mvn.w	r5, #11
    68e2:	e7f9      	b.n	68d8 <bt_l2cap_update_conn_param+0x54>
    68e4:	20002b2b 	.word	0x20002b2b

000068e8 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
    68e8:	4b02      	ldr	r3, [pc, #8]	; (68f4 <att_cfm_sent+0xc>)
    68ea:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
    68ee:	f011 bd09 	b.w	18304 <att_sent>
    68f2:	bf00      	nop
    68f4:	00018869 	.word	0x00018869

000068f8 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
    68f8:	4b02      	ldr	r3, [pc, #8]	; (6904 <att_rsp_sent+0xc>)
    68fa:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
    68fe:	f011 bd01 	b.w	18304 <att_sent>
    6902:	bf00      	nop
    6904:	0001884d 	.word	0x0001884d

00006908 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
    6908:	4b02      	ldr	r3, [pc, #8]	; (6914 <att_req_sent+0xc>)
    690a:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
    690e:	f011 bcf9 	b.w	18304 <att_sent>
    6912:	bf00      	nop
    6914:	0001861d 	.word	0x0001861d

00006918 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
    6918:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
    691a:	3808      	subs	r0, #8
    691c:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
    691e:	a901      	add	r1, sp, #4
    6920:	4802      	ldr	r0, [pc, #8]	; (692c <bt_att_released+0x14>)
    6922:	f017 fd48 	bl	1e3b6 <k_mem_slab_free>
}
    6926:	b003      	add	sp, #12
    6928:	f85d fb04 	ldr.w	pc, [sp], #4
    692c:	20000a9c 	.word	0x20000a9c

00006930 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
    6930:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    6932:	2300      	movs	r3, #0
{
    6934:	4607      	mov	r7, r0
    6936:	460e      	mov	r6, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    6938:	481e      	ldr	r0, [pc, #120]	; (69b4 <bt_att_accept+0x84>)
    693a:	2200      	movs	r2, #0
    693c:	4669      	mov	r1, sp
    693e:	f00e fd83 	bl	15448 <k_mem_slab_alloc>
    6942:	4604      	mov	r4, r0
    6944:	b120      	cbz	r0, 6950 <bt_att_accept+0x20>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
    6946:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
    694a:	4620      	mov	r0, r4
    694c:	b003      	add	sp, #12
    694e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(att, 0, sizeof(*att));
    6950:	4601      	mov	r1, r0
    6952:	222c      	movs	r2, #44	; 0x2c
    6954:	9800      	ldr	r0, [sp, #0]
    6956:	f010 fc88 	bl	1726a <memset>
	att->conn = conn;
    695a:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    695c:	4816      	ldr	r0, [pc, #88]	; (69b8 <bt_att_accept+0x88>)
	list->tail = NULL;
    695e:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
    6960:	e9c5 7400 	strd	r7, r4, [r5]
	list->tail = NULL;
    6964:	e9c5 4409 	strd	r4, r4, [r5, #36]	; 0x24
    6968:	2200      	movs	r2, #0
    696a:	2300      	movs	r3, #0
    696c:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
    696e:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    6970:	f00e fd6a 	bl	15448 <k_mem_slab_alloc>
    6974:	4604      	mov	r4, r0
    6976:	2800      	cmp	r0, #0
    6978:	d1e5      	bne.n	6946 <bt_att_accept+0x16>
	(void)memset(chan, 0, sizeof(*chan));
    697a:	4601      	mov	r1, r0
    697c:	f44f 72a4 	mov.w	r2, #328	; 0x148
    6980:	9801      	ldr	r0, [sp, #4]
    6982:	f010 fc72 	bl	1726a <memset>
	chan->chan.chan.ops = &ops;
    6986:	9801      	ldr	r0, [sp, #4]
    6988:	4b0c      	ldr	r3, [pc, #48]	; (69bc <bt_att_accept+0x8c>)
    698a:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
    698c:	30f8      	adds	r0, #248	; 0xf8
    698e:	f017 fdbd 	bl	1e50c <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    6992:	9b01      	ldr	r3, [sp, #4]
    6994:	f3bf 8f5b 	dmb	ish
    6998:	33f0      	adds	r3, #240	; 0xf0
    699a:	e853 2f00 	ldrex	r2, [r3]
    699e:	e843 4100 	strex	r1, r4, [r3]
    69a2:	2900      	cmp	r1, #0
    69a4:	d1f9      	bne.n	699a <bt_att_accept+0x6a>
    69a6:	f3bf 8f5b 	dmb	ish
	chan->att = att;
    69aa:	9b01      	ldr	r3, [sp, #4]
    69ac:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
    69b0:	6033      	str	r3, [r6, #0]
	return 0;
    69b2:	e7ca      	b.n	694a <bt_att_accept+0x1a>
    69b4:	20000a80 	.word	0x20000a80
    69b8:	20000a9c 	.word	0x20000a9c
    69bc:	200002b0 	.word	0x200002b0

000069c0 <read_group_cb>:
{
    69c0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    69c4:	4605      	mov	r5, r0
    69c6:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    69c8:	f04f 0800 	mov.w	r8, #0
    69cc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    69d0:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
    69d2:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    69d4:	f88d 8008 	strb.w	r8, [sp, #8]
    69d8:	a902      	add	r1, sp, #8
{
    69da:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    69dc:	f8ad 300a 	strh.w	r3, [sp, #10]
    69e0:	f010 fe21 	bl	17626 <bt_uuid_cmp>
    69e4:	b1a0      	cbz	r0, 6a10 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    69e6:	f642 0301 	movw	r3, #10241	; 0x2801
    69ea:	6828      	ldr	r0, [r5, #0]
    69ec:	f88d 800c 	strb.w	r8, [sp, #12]
    69f0:	a903      	add	r1, sp, #12
    69f2:	f8ad 300e 	strh.w	r3, [sp, #14]
    69f6:	f010 fe16 	bl	17626 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    69fa:	b148      	cbz	r0, 6a10 <read_group_cb+0x50>
		if (data->group &&
    69fc:	6923      	ldr	r3, [r4, #16]
    69fe:	b11b      	cbz	r3, 6a08 <read_group_cb+0x48>
    6a00:	885a      	ldrh	r2, [r3, #2]
    6a02:	42b2      	cmp	r2, r6
    6a04:	d200      	bcs.n	6a08 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
    6a06:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    6a08:	2001      	movs	r0, #1
}
    6a0a:	b004      	add	sp, #16
    6a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    6a10:	6861      	ldr	r1, [r4, #4]
    6a12:	6828      	ldr	r0, [r5, #0]
    6a14:	f010 fe07 	bl	17626 <bt_uuid_cmp>
    6a18:	b110      	cbz	r0, 6a20 <read_group_cb+0x60>
		data->group = NULL;
    6a1a:	2300      	movs	r3, #0
    6a1c:	6123      	str	r3, [r4, #16]
    6a1e:	e7f3      	b.n	6a08 <read_group_cb+0x48>
	if (data->rsp->len &&
    6a20:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    6a22:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
    6a24:	781a      	ldrb	r2, [r3, #0]
    6a26:	b13a      	cbz	r2, 6a38 <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    6a28:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
    6a2c:	8981      	ldrh	r1, [r0, #12]
    6a2e:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    6a30:	4293      	cmp	r3, r2
    6a32:	da01      	bge.n	6a38 <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
    6a34:	2000      	movs	r0, #0
    6a36:	e7e8      	b.n	6a0a <read_group_cb+0x4a>
    6a38:	2104      	movs	r1, #4
    6a3a:	3008      	adds	r0, #8
    6a3c:	f016 fac5 	bl	1cfca <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    6a40:	4b09      	ldr	r3, [pc, #36]	; (6a68 <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    6a42:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    6a44:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
    6a46:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    6a48:	8046      	strh	r6, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    6a4a:	4629      	mov	r1, r5
    6a4c:	9300      	str	r3, [sp, #0]
    6a4e:	9401      	str	r4, [sp, #4]
    6a50:	2300      	movs	r3, #0
    6a52:	4638      	mov	r0, r7
    6a54:	f011 fe1f 	bl	18696 <att_chan_read>
	if (read < 0) {
    6a58:	2800      	cmp	r0, #0
    6a5a:	dbeb      	blt.n	6a34 <read_group_cb+0x74>
	if (!data->group) {
    6a5c:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
    6a5e:	3800      	subs	r0, #0
    6a60:	bf18      	it	ne
    6a62:	2001      	movne	r0, #1
    6a64:	e7d1      	b.n	6a0a <read_group_cb+0x4a>
    6a66:	bf00      	nop
    6a68:	000185d1 	.word	0x000185d1

00006a6c <chan_send>:
{
    6a6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    6a70:	688b      	ldr	r3, [r1, #8]
    6a72:	781b      	ldrb	r3, [r3, #0]
    6a74:	2bd2      	cmp	r3, #210	; 0xd2
{
    6a76:	4606      	mov	r6, r0
    6a78:	460c      	mov	r4, r1
    6a7a:	4617      	mov	r7, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    6a7c:	d10c      	bne.n	6a98 <chan_send+0x2c>
		err = bt_smp_sign(chan->att->conn, buf);
    6a7e:	6803      	ldr	r3, [r0, #0]
    6a80:	6818      	ldr	r0, [r3, #0]
    6a82:	f012 fc81 	bl	19388 <bt_smp_sign>
		if (err) {
    6a86:	4605      	mov	r5, r0
    6a88:	b130      	cbz	r0, 6a98 <chan_send+0x2c>
			net_buf_unref(buf);
    6a8a:	4620      	mov	r0, r4
    6a8c:	f00b fc00 	bl	12290 <net_buf_unref>
}
    6a90:	4628      	mov	r0, r5
    6a92:	b003      	add	sp, #12
    6a94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
    6a98:	f104 0008 	add.w	r0, r4, #8
    6a9c:	f016 fb4b 	bl	1d136 <net_buf_simple_headroom>
	state->len = buf->len;
    6aa0:	f8b4 900c 	ldrh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    6aa4:	4680      	mov	r8, r0
	chan->sent = cb ? cb : chan_cb(buf);
    6aa6:	b957      	cbnz	r7, 6abe <chan_send+0x52>
	switch (att_op_get_type(buf->data[0])) {
    6aa8:	68a3      	ldr	r3, [r4, #8]
    6aaa:	7818      	ldrb	r0, [r3, #0]
    6aac:	f011 fc42 	bl	18334 <att_op_get_type>
    6ab0:	3801      	subs	r0, #1
    6ab2:	b2c0      	uxtb	r0, r0
    6ab4:	2804      	cmp	r0, #4
    6ab6:	bf9c      	itt	ls
    6ab8:	4b13      	ldrls	r3, [pc, #76]	; (6b08 <chan_send+0x9c>)
    6aba:	f853 7020 	ldrls.w	r7, [r3, r0, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    6abe:	6833      	ldr	r3, [r6, #0]
	chan->sent = cb ? cb : chan_cb(buf);
    6ac0:	f8c6 7140 	str.w	r7, [r6, #320]	; 0x140
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    6ac4:	6818      	ldr	r0, [r3, #0]
	if (cb == chan_rsp_sent) {
    6ac6:	4b11      	ldr	r3, [pc, #68]	; (6b0c <chan_send+0xa0>)
    6ac8:	429f      	cmp	r7, r3
    6aca:	d018      	beq.n	6afe <chan_send+0x92>
	} else if (cb == chan_cfm_sent) {
    6acc:	4b10      	ldr	r3, [pc, #64]	; (6b10 <chan_send+0xa4>)
    6ace:	429f      	cmp	r7, r3
    6ad0:	d017      	beq.n	6b02 <chan_send+0x96>
		return att_sent;
    6ad2:	4910      	ldr	r1, [pc, #64]	; (6b14 <chan_send+0xa8>)
    6ad4:	4b10      	ldr	r3, [pc, #64]	; (6b18 <chan_send+0xac>)
    6ad6:	4a11      	ldr	r2, [pc, #68]	; (6b1c <chan_send+0xb0>)
    6ad8:	428f      	cmp	r7, r1
    6ada:	bf18      	it	ne
    6adc:	4613      	movne	r3, r2
			       &chan->chan.chan);
    6ade:	3608      	adds	r6, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    6ae0:	9600      	str	r6, [sp, #0]
    6ae2:	4622      	mov	r2, r4
    6ae4:	2104      	movs	r1, #4
    6ae6:	f011 fb7f 	bl	181e8 <bt_l2cap_send_cb>
	if (err) {
    6aea:	4605      	mov	r5, r0
    6aec:	2800      	cmp	r0, #0
    6aee:	d0cf      	beq.n	6a90 <chan_send+0x24>
	buf->data = buf->__buf + state->offset;
    6af0:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    6af2:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
    6af6:	fa10 f088 	uxtah	r0, r0, r8
    6afa:	60a0      	str	r0, [r4, #8]
}
    6afc:	e7c8      	b.n	6a90 <chan_send+0x24>
		return att_rsp_sent;
    6afe:	4b08      	ldr	r3, [pc, #32]	; (6b20 <chan_send+0xb4>)
    6b00:	e7ed      	b.n	6ade <chan_send+0x72>
		return att_cfm_sent;
    6b02:	4b08      	ldr	r3, [pc, #32]	; (6b24 <chan_send+0xb8>)
    6b04:	e7eb      	b.n	6ade <chan_send+0x72>
    6b06:	bf00      	nop
    6b08:	0001f4b8 	.word	0x0001f4b8
    6b0c:	0001884d 	.word	0x0001884d
    6b10:	00018869 	.word	0x00018869
    6b14:	0001861d 	.word	0x0001861d
    6b18:	00006909 	.word	0x00006909
    6b1c:	00018305 	.word	0x00018305
    6b20:	000068f9 	.word	0x000068f9
    6b24:	000068e9 	.word	0x000068e9

00006b28 <bt_att_chan_send_rsp.constprop.0>:
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
    6b28:	b538      	push	{r3, r4, r5, lr}
	return chan_send(chan, buf, cb);
    6b2a:	4a07      	ldr	r2, [pc, #28]	; (6b48 <bt_att_chan_send_rsp.constprop.0+0x20>)
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
    6b2c:	4604      	mov	r4, r0
    6b2e:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
    6b30:	f7ff ff9c 	bl	6a6c <chan_send>
	if (err) {
    6b34:	b130      	cbz	r0, 6b44 <bt_att_chan_send_rsp.constprop.0+0x1c>
		net_buf_put(&chan->tx_queue, buf);
    6b36:	4629      	mov	r1, r5
    6b38:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
}
    6b3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
    6b40:	f016 ba04 	b.w	1cf4c <net_buf_put>
}
    6b44:	bd38      	pop	{r3, r4, r5, pc}
    6b46:	bf00      	nop
    6b48:	0001884d 	.word	0x0001884d

00006b4c <read_type_cb>:
{
    6b4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
    6b50:	f8d2 8000 	ldr.w	r8, [r2]
{
    6b54:	4606      	mov	r6, r0
    6b56:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    6b58:	6800      	ldr	r0, [r0, #0]
    6b5a:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
    6b5c:	f8d8 5008 	ldr.w	r5, [r8, #8]
{
    6b60:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    6b62:	f010 fd60 	bl	17626 <bt_uuid_cmp>
    6b66:	4607      	mov	r7, r0
    6b68:	2800      	cmp	r0, #0
    6b6a:	d13e      	bne.n	6bea <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    6b6c:	4628      	mov	r0, r5
    6b6e:	2215      	movs	r2, #21
    6b70:	4631      	mov	r1, r6
    6b72:	f012 fb5b 	bl	1922c <bt_gatt_check_perm>
    6b76:	4605      	mov	r5, r0
    6b78:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    6b7a:	b148      	cbz	r0, 6b90 <read_type_cb+0x44>
		if (data->rsp->len) {
    6b7c:	68e3      	ldr	r3, [r4, #12]
    6b7e:	781b      	ldrb	r3, [r3, #0]
    6b80:	b923      	cbnz	r3, 6b8c <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
    6b82:	2500      	movs	r5, #0
}
    6b84:	4628      	mov	r0, r5
    6b86:	b003      	add	sp, #12
    6b88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
    6b8c:	7527      	strb	r7, [r4, #20]
    6b8e:	e7f8      	b.n	6b82 <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    6b90:	68a0      	ldr	r0, [r4, #8]
    6b92:	f016 f9ec 	bl	1cf6e <net_buf_frag_last>
	return net_buf_simple_add(&buf->b, len);
    6b96:	2102      	movs	r1, #2
    6b98:	3008      	adds	r0, #8
    6b9a:	f016 fa16 	bl	1cfca <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    6b9e:	4b14      	ldr	r3, [pc, #80]	; (6bf0 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    6ba0:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    6ba2:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
    6ba4:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    6ba8:	4631      	mov	r1, r6
    6baa:	9300      	str	r3, [sp, #0]
    6bac:	9401      	str	r4, [sp, #4]
    6bae:	462b      	mov	r3, r5
    6bb0:	4640      	mov	r0, r8
    6bb2:	f011 fd70 	bl	18696 <att_chan_read>
	if (read < 0) {
    6bb6:	2800      	cmp	r0, #0
    6bb8:	da07      	bge.n	6bca <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
    6bba:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
    6bbe:	bf26      	itte	cs
    6bc0:	4240      	negcs	r0, r0
    6bc2:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    6bc4:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
    6bc6:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    6bc8:	e7dc      	b.n	6b84 <read_type_cb+0x38>
	if (!data->item) {
    6bca:	6923      	ldr	r3, [r4, #16]
    6bcc:	2b00      	cmp	r3, #0
    6bce:	d0d8      	beq.n	6b82 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    6bd0:	68a0      	ldr	r0, [r4, #8]
    6bd2:	f011 fb8f 	bl	182f4 <net_buf_frags_len>
    6bd6:	f8b8 508a 	ldrh.w	r5, [r8, #138]	; 0x8a
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    6bda:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    6bdc:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    6bde:	7818      	ldrb	r0, [r3, #0]
    6be0:	4285      	cmp	r5, r0
    6be2:	bf94      	ite	ls
    6be4:	2500      	movls	r5, #0
    6be6:	2501      	movhi	r5, #1
    6be8:	e7cc      	b.n	6b84 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
    6bea:	2501      	movs	r5, #1
    6bec:	e7ca      	b.n	6b84 <read_type_cb+0x38>
    6bee:	bf00      	nop
    6bf0:	00018311 	.word	0x00018311

00006bf4 <bt_att_connected>:
{
    6bf4:	b570      	push	{r4, r5, r6, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    6bf6:	4606      	mov	r6, r0
{
    6bf8:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    6bfa:	2104      	movs	r1, #4
    6bfc:	f856 0908 	ldr.w	r0, [r6], #-8
    6c00:	f011 fb3c 	bl	1827c <bt_l2cap_le_lookup_tx_cid>
	struct bt_att *att = att_chan->att;
    6c04:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (sys_slist_is_empty(&att->chans)) {
    6c08:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    6c0a:	b91b      	cbnz	r3, 6c14 <bt_att_connected+0x20>
    6c0c:	f105 000c 	add.w	r0, r5, #12
    6c10:	f017 fc7c 	bl	1e50c <z_impl_k_queue_init>
	parent->next = child;
    6c14:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    6c16:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
Z_GENLIST_PREPEND(slist, snode)
    6c1a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
    6c1c:	f504 739e 	add.w	r3, r4, #316	; 0x13c
	list->head = node;
    6c20:	626b      	str	r3, [r5, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
    6c22:	b902      	cbnz	r2, 6c26 <bt_att_connected+0x32>
	list->tail = node;
    6c24:	62ab      	str	r3, [r5, #40]	; 0x28
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6c26:	f3bf 8f5b 	dmb	ish
    6c2a:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    6c2e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
    6c32:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    6c34:	bf58      	it	pl
    6c36:	2317      	movpl	r3, #23
	att_chan_mtu_updated(att_chan);
    6c38:	4630      	mov	r0, r6
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    6c3a:	bf5c      	itt	pl
    6c3c:	f8a4 3082 	strhpl.w	r3, [r4, #130]	; 0x82
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    6c40:	f8a4 3072 	strhpl.w	r3, [r4, #114]	; 0x72
	att_chan_mtu_updated(att_chan);
    6c44:	f011 fc8e 	bl	18564 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
    6c48:	f504 7084 	add.w	r0, r4, #264	; 0x108
    6c4c:	4902      	ldr	r1, [pc, #8]	; (6c58 <bt_att_connected+0x64>)
}
    6c4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
    6c52:	f017 bd6e 	b.w	1e732 <k_work_init_delayable>
    6c56:	bf00      	nop
    6c58:	00018ba5 	.word	0x00018ba5

00006c5c <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
    6c5c:	898b      	ldrh	r3, [r1, #12]
{
    6c5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6c62:	4604      	mov	r4, r0
    6c64:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    6c66:	2b00      	cmp	r3, #0
    6c68:	d060      	beq.n	6d2c <bt_att_recv+0xd0>
	return net_buf_simple_pull_mem(&buf->b, len);
    6c6a:	2101      	movs	r1, #1
    6c6c:	f105 0008 	add.w	r0, r5, #8
    6c70:	f016 fa2e 	bl	1d0d0 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
    6c74:	f854 3c08 	ldr.w	r3, [r4, #-8]
    6c78:	4607      	mov	r7, r0
    6c7a:	2b00      	cmp	r3, #0
    6c7c:	d056      	beq.n	6d2c <bt_att_recv+0xd0>
		if (hdr->code == handlers[i].op) {
    6c7e:	7801      	ldrb	r1, [r0, #0]
    6c80:	4a2e      	ldr	r2, [pc, #184]	; (6d3c <bt_att_recv+0xe0>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
    6c82:	f1a4 0608 	sub.w	r6, r4, #8
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    6c86:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
    6c88:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
    6c8c:	4288      	cmp	r0, r1
    6c8e:	d11b      	bne.n	6cc8 <bt_att_recv+0x6c>
		if (handler->type == ATT_REQUEST &&
    6c90:	00d9      	lsls	r1, r3, #3
    6c92:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    6c96:	f893 8002 	ldrb.w	r8, [r3, #2]
    6c9a:	f1b8 0f01 	cmp.w	r8, #1
    6c9e:	d023      	beq.n	6ce8 <bt_att_recv+0x8c>
		} else if (handler->type == ATT_INDICATION &&
    6ca0:	f1b8 0f05 	cmp.w	r8, #5
    6ca4:	d131      	bne.n	6d0a <bt_att_recv+0xae>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6ca6:	f3bf 8f5b 	dmb	ish
    6caa:	34e8      	adds	r4, #232	; 0xe8
    6cac:	e854 3f00 	ldrex	r3, [r4]
    6cb0:	f043 0002 	orr.w	r0, r3, #2
    6cb4:	e844 0c00 	strex	ip, r0, [r4]
    6cb8:	f1bc 0f00 	cmp.w	ip, #0
    6cbc:	d1f6      	bne.n	6cac <bt_att_recv+0x50>
    6cbe:	f3bf 8f5b 	dmb	ish
    6cc2:	f013 0f02 	tst.w	r3, #2
    6cc6:	e01f      	b.n	6d08 <bt_att_recv+0xac>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    6cc8:	3301      	adds	r3, #1
    6cca:	2b0d      	cmp	r3, #13
    6ccc:	d1dc      	bne.n	6c88 <bt_att_recv+0x2c>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
    6cce:	4608      	mov	r0, r1
    6cd0:	f011 fb30 	bl	18334 <att_op_get_type>
    6cd4:	b350      	cbz	r0, 6d2c <bt_att_recv+0xd0>
    6cd6:	2805      	cmp	r0, #5
    6cd8:	d028      	beq.n	6d2c <bt_att_recv+0xd0>
	if (!req) {
    6cda:	b339      	cbz	r1, 6d2c <bt_att_recv+0xd0>
    6cdc:	2306      	movs	r3, #6
    6cde:	2200      	movs	r2, #0
    6ce0:	4630      	mov	r0, r6
    6ce2:	f011 fea7 	bl	18a34 <send_err_rsp.part.0>
    6ce6:	e021      	b.n	6d2c <bt_att_recv+0xd0>
    6ce8:	34e8      	adds	r4, #232	; 0xe8
    6cea:	f3bf 8f5b 	dmb	ish
    6cee:	e854 3f00 	ldrex	r3, [r4]
    6cf2:	f043 0001 	orr.w	r0, r3, #1
    6cf6:	e844 0c00 	strex	ip, r0, [r4]
    6cfa:	f1bc 0f00 	cmp.w	ip, #0
    6cfe:	d1f6      	bne.n	6cee <bt_att_recv+0x92>
    6d00:	f3bf 8f5b 	dmb	ish
		if (handler->type == ATT_REQUEST &&
    6d04:	f013 0f01 	tst.w	r3, #1
    6d08:	d110      	bne.n	6d2c <bt_att_recv+0xd0>
	if (buf->len < handler->expect_len) {
    6d0a:	440a      	add	r2, r1
    6d0c:	89a9      	ldrh	r1, [r5, #12]
    6d0e:	7853      	ldrb	r3, [r2, #1]
    6d10:	4299      	cmp	r1, r3
    6d12:	d30e      	bcc.n	6d32 <bt_att_recv+0xd6>
		err = handler->func(att_chan, buf);
    6d14:	6853      	ldr	r3, [r2, #4]
    6d16:	4629      	mov	r1, r5
    6d18:	4630      	mov	r0, r6
    6d1a:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    6d1c:	f1b8 0f01 	cmp.w	r8, #1
		err = handler->func(att_chan, buf);
    6d20:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    6d22:	d103      	bne.n	6d2c <bt_att_recv+0xd0>
    6d24:	b110      	cbz	r0, 6d2c <bt_att_recv+0xd0>
		send_err_rsp(att_chan, hdr->code, 0, err);
    6d26:	7839      	ldrb	r1, [r7, #0]
	if (!req) {
    6d28:	2900      	cmp	r1, #0
    6d2a:	d1d8      	bne.n	6cde <bt_att_recv+0x82>
}
    6d2c:	2000      	movs	r0, #0
    6d2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (handler->type == ATT_REQUEST && err) {
    6d32:	f1b8 0f01 	cmp.w	r8, #1
    6d36:	d1f9      	bne.n	6d2c <bt_att_recv+0xd0>
		err = BT_ATT_ERR_INVALID_PDU;
    6d38:	2304      	movs	r3, #4
    6d3a:	e7f4      	b.n	6d26 <bt_att_recv+0xca>
    6d3c:	0001f4cc 	.word	0x0001f4cc

00006d40 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
    6d40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6d44:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    6d46:	6803      	ldr	r3, [r0, #0]
    6d48:	460e      	mov	r6, r1
    6d4a:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
    6d4c:	b087      	sub	sp, #28
    6d4e:	4605      	mov	r5, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    6d50:	bf18      	it	ne
    6d52:	2101      	movne	r1, #1
    6d54:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
    6d56:	4690      	mov	r8, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    6d58:	f012 fabe 	bl	192d8 <bt_gatt_change_aware>
    6d5c:	2800      	cmp	r0, #0
    6d5e:	d04a      	beq.n	6df6 <att_write_rsp.constprop.0+0xb6>
	if (!handle) {
    6d60:	2f00      	cmp	r7, #0
    6d62:	d04a      	beq.n	6dfa <att_write_rsp.constprop.0+0xba>
	(void)memset(&data, 0, sizeof(data));
    6d64:	2218      	movs	r2, #24
    6d66:	2100      	movs	r1, #0
    6d68:	4668      	mov	r0, sp
    6d6a:	f010 fa7e 	bl	1726a <memset>
	if (rsp) {
    6d6e:	f1b8 0f00 	cmp.w	r8, #0
    6d72:	d122      	bne.n	6dba <att_write_rsp.constprop.0+0x7a>
	data.conn = chan->att->conn;
    6d74:	682b      	ldr	r3, [r5, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    6d76:	4a22      	ldr	r2, [pc, #136]	; (6e00 <att_write_rsp.constprop.0+0xc0>)
	data.conn = chan->att->conn;
    6d78:	681b      	ldr	r3, [r3, #0]
    6d7a:	9300      	str	r3, [sp, #0]
	data.value = value;
    6d7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6d7e:	9303      	str	r3, [sp, #12]
	data.len = len;
    6d80:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    6d84:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    6d88:	2301      	movs	r3, #1
    6d8a:	f88d 3014 	strb.w	r3, [sp, #20]
	data.offset = offset;
    6d8e:	f04f 0900 	mov.w	r9, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    6d92:	466b      	mov	r3, sp
    6d94:	4639      	mov	r1, r7
    6d96:	4638      	mov	r0, r7
	data.req = req;
    6d98:	f88d 6008 	strb.w	r6, [sp, #8]
	data.offset = offset;
    6d9c:	f8ad 9012 	strh.w	r9, [sp, #18]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    6da0:	f011 faf5 	bl	1838e <bt_gatt_foreach_attr>
	if (data.err) {
    6da4:	f89d 4014 	ldrb.w	r4, [sp, #20]
    6da8:	b1f4      	cbz	r4, 6de8 <att_write_rsp.constprop.0+0xa8>
		if (rsp) {
    6daa:	f1b8 0f00 	cmp.w	r8, #0
    6dae:	d10e      	bne.n	6dce <att_write_rsp.constprop.0+0x8e>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    6db0:	2400      	movs	r4, #0
}
    6db2:	4620      	mov	r0, r4
    6db4:	b007      	add	sp, #28
    6db6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
    6dba:	2200      	movs	r2, #0
    6dbc:	4641      	mov	r1, r8
    6dbe:	4628      	mov	r0, r5
    6dc0:	f011 fe13 	bl	189ea <bt_att_chan_create_pdu>
    6dc4:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    6dc6:	2800      	cmp	r0, #0
    6dc8:	d1d4      	bne.n	6d74 <att_write_rsp.constprop.0+0x34>
			return BT_ATT_ERR_UNLIKELY;
    6dca:	240e      	movs	r4, #14
    6dcc:	e7f1      	b.n	6db2 <att_write_rsp.constprop.0+0x72>
			net_buf_unref(data.buf);
    6dce:	9801      	ldr	r0, [sp, #4]
    6dd0:	f00b fa5e 	bl	12290 <net_buf_unref>
	if (!req) {
    6dd4:	2e00      	cmp	r6, #0
    6dd6:	d0eb      	beq.n	6db0 <att_write_rsp.constprop.0+0x70>
    6dd8:	f89d 3014 	ldrb.w	r3, [sp, #20]
    6ddc:	463a      	mov	r2, r7
    6dde:	4631      	mov	r1, r6
    6de0:	4628      	mov	r0, r5
    6de2:	f011 fe27 	bl	18a34 <send_err_rsp.part.0>
    6de6:	e7e3      	b.n	6db0 <att_write_rsp.constprop.0+0x70>
	if (data.buf) {
    6de8:	9901      	ldr	r1, [sp, #4]
    6dea:	2900      	cmp	r1, #0
    6dec:	d0e0      	beq.n	6db0 <att_write_rsp.constprop.0+0x70>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    6dee:	4628      	mov	r0, r5
    6df0:	f7ff fe9a 	bl	6b28 <bt_att_chan_send_rsp.constprop.0>
    6df4:	e7dd      	b.n	6db2 <att_write_rsp.constprop.0+0x72>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    6df6:	2412      	movs	r4, #18
    6df8:	e7db      	b.n	6db2 <att_write_rsp.constprop.0+0x72>
		return BT_ATT_ERR_INVALID_HANDLE;
    6dfa:	2401      	movs	r4, #1
    6dfc:	e7d9      	b.n	6db2 <att_write_rsp.constprop.0+0x72>
    6dfe:	bf00      	nop
    6e00:	00018633 	.word	0x00018633

00006e04 <att_read_group_req>:
{
    6e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    6e08:	898c      	ldrh	r4, [r1, #12]
    6e0a:	3c04      	subs	r4, #4
    6e0c:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    6e0e:	2c02      	cmp	r4, #2
{
    6e10:	4605      	mov	r5, r0
    6e12:	b08c      	sub	sp, #48	; 0x30
    6e14:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    6e16:	d001      	beq.n	6e1c <att_read_group_req+0x18>
    6e18:	2c10      	cmp	r4, #16
    6e1a:	d16e      	bne.n	6efa <att_read_group_req+0xf6>
    6e1c:	2104      	movs	r1, #4
    6e1e:	3008      	adds	r0, #8
    6e20:	f016 f956 	bl	1d0d0 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    6e24:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
    6e28:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    6e2a:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    6e2c:	1d01      	adds	r1, r0, #4
    6e2e:	4622      	mov	r2, r4
    6e30:	4640      	mov	r0, r8
    6e32:	f010 fc26 	bl	17682 <bt_uuid_create>
    6e36:	2800      	cmp	r0, #0
    6e38:	d061      	beq.n	6efe <att_read_group_req+0xfa>
	if (!start || !end) {
    6e3a:	2e00      	cmp	r6, #0
    6e3c:	d03a      	beq.n	6eb4 <att_read_group_req+0xb0>
    6e3e:	2400      	movs	r4, #0
    6e40:	2f00      	cmp	r7, #0
    6e42:	d036      	beq.n	6eb2 <att_read_group_req+0xae>
	if (start > end) {
    6e44:	42be      	cmp	r6, r7
    6e46:	d835      	bhi.n	6eb4 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    6e48:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    6e4c:	a901      	add	r1, sp, #4
    6e4e:	4640      	mov	r0, r8
    6e50:	f88d 4004 	strb.w	r4, [sp, #4]
    6e54:	f8ad 3006 	strh.w	r3, [sp, #6]
    6e58:	f010 fbe5 	bl	17626 <bt_uuid_cmp>
    6e5c:	2800      	cmp	r0, #0
    6e5e:	d134      	bne.n	6eca <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
    6e60:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    6e62:	2214      	movs	r2, #20
    6e64:	2100      	movs	r1, #0
    6e66:	a807      	add	r0, sp, #28
    6e68:	f010 f9ff 	bl	1726a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    6e6c:	2201      	movs	r2, #1
    6e6e:	2111      	movs	r1, #17
    6e70:	4620      	mov	r0, r4
    6e72:	f011 fe22 	bl	18aba <bt_att_create_pdu>
    6e76:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    6e78:	2800      	cmp	r0, #0
    6e7a:	d040      	beq.n	6efe <att_read_group_req+0xfa>
	return net_buf_simple_add(&buf->b, len);
    6e7c:	2101      	movs	r1, #1
    6e7e:	3008      	adds	r0, #8
	data.uuid = uuid;
    6e80:	e9cd 5807 	strd	r5, r8, [sp, #28]
    6e84:	f016 f8a1 	bl	1cfca <net_buf_simple_add>
	data.rsp->len = 0U;
    6e88:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    6e8c:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    6e8e:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
    6e90:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    6e94:	4a1b      	ldr	r2, [pc, #108]	; (6f04 <att_read_group_req+0x100>)
	data.group = NULL;
    6e96:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    6e9a:	4639      	mov	r1, r7
    6e9c:	4630      	mov	r0, r6
    6e9e:	f011 fa76 	bl	1838e <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    6ea2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6ea4:	781c      	ldrb	r4, [r3, #0]
    6ea6:	bb1c      	cbnz	r4, 6ef0 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
    6ea8:	9809      	ldr	r0, [sp, #36]	; 0x24
    6eaa:	f00b f9f1 	bl	12290 <net_buf_unref>
	if (!req) {
    6eae:	230a      	movs	r3, #10
    6eb0:	e018      	b.n	6ee4 <att_read_group_req+0xe0>
			*err = 0U;
    6eb2:	463e      	mov	r6, r7
	if (!req) {
    6eb4:	2301      	movs	r3, #1
    6eb6:	4632      	mov	r2, r6
    6eb8:	2110      	movs	r1, #16
    6eba:	4628      	mov	r0, r5
    6ebc:	f011 fdba 	bl	18a34 <send_err_rsp.part.0>
		return 0;
    6ec0:	2400      	movs	r4, #0
}
    6ec2:	4620      	mov	r0, r4
    6ec4:	b00c      	add	sp, #48	; 0x30
    6ec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    6eca:	f642 0301 	movw	r3, #10241	; 0x2801
    6ece:	a907      	add	r1, sp, #28
    6ed0:	4640      	mov	r0, r8
    6ed2:	f88d 401c 	strb.w	r4, [sp, #28]
    6ed6:	f8ad 301e 	strh.w	r3, [sp, #30]
    6eda:	f010 fba4 	bl	17626 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    6ede:	2800      	cmp	r0, #0
    6ee0:	d0be      	beq.n	6e60 <att_read_group_req+0x5c>
	if (!req) {
    6ee2:	2310      	movs	r3, #16
    6ee4:	4632      	mov	r2, r6
    6ee6:	2110      	movs	r1, #16
    6ee8:	4628      	mov	r0, r5
    6eea:	f011 fda3 	bl	18a34 <send_err_rsp.part.0>
		return 0;
    6eee:	e7e8      	b.n	6ec2 <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    6ef0:	9909      	ldr	r1, [sp, #36]	; 0x24
    6ef2:	4628      	mov	r0, r5
    6ef4:	f7ff fe18 	bl	6b28 <bt_att_chan_send_rsp.constprop.0>
	return 0;
    6ef8:	e7e2      	b.n	6ec0 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
    6efa:	2404      	movs	r4, #4
    6efc:	e7e1      	b.n	6ec2 <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
    6efe:	240e      	movs	r4, #14
    6f00:	e7df      	b.n	6ec2 <att_read_group_req+0xbe>
    6f02:	bf00      	nop
    6f04:	000069c1 	.word	0x000069c1

00006f08 <att_read_mult_req>:
{
    6f08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    6f0c:	6886      	ldr	r6, [r0, #8]
{
    6f0e:	b085      	sub	sp, #20
    6f10:	4604      	mov	r4, r0
    6f12:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
    6f14:	4630      	mov	r0, r6
    6f16:	2101      	movs	r1, #1
    6f18:	f012 f9de 	bl	192d8 <bt_gatt_change_aware>
    6f1c:	b3b8      	cbz	r0, 6f8e <att_read_mult_req+0x86>
	(void)memset(&data, 0, sizeof(data));
    6f1e:	2210      	movs	r2, #16
    6f20:	2100      	movs	r1, #0
    6f22:	4668      	mov	r0, sp
    6f24:	f010 f9a1 	bl	1726a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    6f28:	2200      	movs	r2, #0
    6f2a:	210f      	movs	r1, #15
    6f2c:	4630      	mov	r0, r6
    6f2e:	f011 fdc4 	bl	18aba <bt_att_create_pdu>
    6f32:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    6f34:	b368      	cbz	r0, 6f92 <att_read_mult_req+0x8a>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    6f36:	f8df 9060 	ldr.w	r9, [pc, #96]	; 6f98 <att_read_mult_req+0x90>
	data.chan = chan;
    6f3a:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
    6f3c:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    6f40:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
    6f44:	89ab      	ldrh	r3, [r5, #12]
    6f46:	2b01      	cmp	r3, #1
    6f48:	d804      	bhi.n	6f54 <att_read_mult_req+0x4c>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    6f4a:	9902      	ldr	r1, [sp, #8]
    6f4c:	4620      	mov	r0, r4
    6f4e:	f7ff fdeb 	bl	6b28 <bt_att_chan_send_rsp.constprop.0>
    6f52:	e018      	b.n	6f86 <att_read_mult_req+0x7e>
    6f54:	4638      	mov	r0, r7
    6f56:	f016 f8cb 	bl	1d0f0 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    6f5a:	466b      	mov	r3, sp
    6f5c:	464a      	mov	r2, r9
    6f5e:	4601      	mov	r1, r0
    6f60:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    6f62:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    6f66:	f011 fa12 	bl	1838e <bt_gatt_foreach_attr>
		if (data.err) {
    6f6a:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6f6e:	2b00      	cmp	r3, #0
    6f70:	d0e8      	beq.n	6f44 <att_read_mult_req+0x3c>
			net_buf_unref(data.buf);
    6f72:	9802      	ldr	r0, [sp, #8]
    6f74:	f00b f98c 	bl	12290 <net_buf_unref>
	if (!req) {
    6f78:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6f7c:	4632      	mov	r2, r6
    6f7e:	210e      	movs	r1, #14
    6f80:	4620      	mov	r0, r4
    6f82:	f011 fd57 	bl	18a34 <send_err_rsp.part.0>
	return 0;
    6f86:	2000      	movs	r0, #0
}
    6f88:	b005      	add	sp, #20
    6f8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    6f8e:	2012      	movs	r0, #18
    6f90:	e7fa      	b.n	6f88 <att_read_mult_req+0x80>
		return BT_ATT_ERR_UNLIKELY;
    6f92:	200e      	movs	r0, #14
    6f94:	e7f8      	b.n	6f88 <att_read_mult_req+0x80>
    6f96:	bf00      	nop
    6f98:	00018885 	.word	0x00018885

00006f9c <att_read_rsp>:
{
    6f9c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    6fa0:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
    6fa4:	4605      	mov	r5, r0
    6fa6:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
    6fa8:	4640      	mov	r0, r8
    6faa:	2101      	movs	r1, #1
{
    6fac:	4614      	mov	r4, r2
    6fae:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
    6fb0:	f012 f992 	bl	192d8 <bt_gatt_change_aware>
    6fb4:	b388      	cbz	r0, 701a <att_read_rsp+0x7e>
	if (!handle) {
    6fb6:	b396      	cbz	r6, 701e <att_read_rsp+0x82>
	(void)memset(&data, 0, sizeof(data));
    6fb8:	2210      	movs	r2, #16
    6fba:	2100      	movs	r1, #0
    6fbc:	4668      	mov	r0, sp
    6fbe:	f010 f954 	bl	1726a <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    6fc2:	2200      	movs	r2, #0
    6fc4:	4621      	mov	r1, r4
    6fc6:	4640      	mov	r0, r8
    6fc8:	f011 fd77 	bl	18aba <bt_att_create_pdu>
    6fcc:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    6fce:	b340      	cbz	r0, 7022 <att_read_rsp+0x86>
	data.offset = offset;
    6fd0:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    6fd4:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    6fd8:	2301      	movs	r3, #1
    6fda:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    6fde:	4a12      	ldr	r2, [pc, #72]	; (7028 <att_read_rsp+0x8c>)
	data.chan = chan;
    6fe0:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    6fe2:	466b      	mov	r3, sp
    6fe4:	4631      	mov	r1, r6
    6fe6:	4630      	mov	r0, r6
    6fe8:	f011 f9d1 	bl	1838e <bt_gatt_foreach_attr>
	if (data.err) {
    6fec:	f89d 400c 	ldrb.w	r4, [sp, #12]
    6ff0:	b174      	cbz	r4, 7010 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
    6ff2:	9802      	ldr	r0, [sp, #8]
    6ff4:	f00b f94c 	bl	12290 <net_buf_unref>
	if (!req) {
    6ff8:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6ffc:	4632      	mov	r2, r6
    6ffe:	4639      	mov	r1, r7
    7000:	4628      	mov	r0, r5
    7002:	f011 fd17 	bl	18a34 <send_err_rsp.part.0>
		return 0;
    7006:	2400      	movs	r4, #0
}
    7008:	4620      	mov	r0, r4
    700a:	b004      	add	sp, #16
    700c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    7010:	9902      	ldr	r1, [sp, #8]
    7012:	4628      	mov	r0, r5
    7014:	f7ff fd88 	bl	6b28 <bt_att_chan_send_rsp.constprop.0>
	return 0;
    7018:	e7f6      	b.n	7008 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    701a:	2412      	movs	r4, #18
    701c:	e7f4      	b.n	7008 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
    701e:	2401      	movs	r4, #1
    7020:	e7f2      	b.n	7008 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    7022:	240e      	movs	r4, #14
    7024:	e7f0      	b.n	7008 <att_read_rsp+0x6c>
    7026:	bf00      	nop
    7028:	00018885 	.word	0x00018885

0000702c <att_read_type_req>:
{
    702c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    7030:	898c      	ldrh	r4, [r1, #12]
    7032:	3c04      	subs	r4, #4
    7034:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    7036:	2c02      	cmp	r4, #2
{
    7038:	4605      	mov	r5, r0
    703a:	b08c      	sub	sp, #48	; 0x30
    703c:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    703e:	d001      	beq.n	7044 <att_read_type_req+0x18>
    7040:	2c10      	cmp	r4, #16
    7042:	d14f      	bne.n	70e4 <att_read_type_req+0xb8>
	return net_buf_simple_pull_mem(&buf->b, len);
    7044:	2104      	movs	r1, #4
    7046:	3008      	adds	r0, #8
    7048:	f016 f842 	bl	1d0d0 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    704c:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
    7050:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    7052:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    7054:	1d01      	adds	r1, r0, #4
    7056:	4622      	mov	r2, r4
    7058:	4640      	mov	r0, r8
    705a:	f010 fb12 	bl	17682 <bt_uuid_create>
    705e:	b188      	cbz	r0, 7084 <att_read_type_req+0x58>
	if (!start || !end) {
    7060:	b19e      	cbz	r6, 708a <att_read_type_req+0x5e>
    7062:	b18f      	cbz	r7, 7088 <att_read_type_req+0x5c>
	if (start > end) {
    7064:	42b7      	cmp	r7, r6
    7066:	d310      	bcc.n	708a <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
    7068:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
    706a:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    706c:	2100      	movs	r1, #0
    706e:	eb0d 0002 	add.w	r0, sp, r2
    7072:	f010 f8fa 	bl	1726a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    7076:	2201      	movs	r2, #1
    7078:	2109      	movs	r1, #9
    707a:	4620      	mov	r0, r4
    707c:	f011 fd1d 	bl	18aba <bt_att_create_pdu>
    7080:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    7082:	b968      	cbnz	r0, 70a0 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
    7084:	240e      	movs	r4, #14
    7086:	e007      	b.n	7098 <att_read_type_req+0x6c>
			*err = 0U;
    7088:	463e      	mov	r6, r7
	if (!req) {
    708a:	2301      	movs	r3, #1
    708c:	4632      	mov	r2, r6
    708e:	2108      	movs	r1, #8
    7090:	4628      	mov	r0, r5
    7092:	f011 fccf 	bl	18a34 <send_err_rsp.part.0>
		return 0;
    7096:	2400      	movs	r4, #0
}
    7098:	4620      	mov	r0, r4
    709a:	b00c      	add	sp, #48	; 0x30
    709c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
    70a0:	2101      	movs	r1, #1
    70a2:	3008      	adds	r0, #8
	data.uuid = uuid;
    70a4:	e9cd 5806 	strd	r5, r8, [sp, #24]
    70a8:	f015 ff8f 	bl	1cfca <net_buf_simple_add>
	data.rsp->len = 0U;
    70ac:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    70b0:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    70b2:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    70b4:	4a0c      	ldr	r2, [pc, #48]	; (70e8 <att_read_type_req+0xbc>)
	data.rsp->len = 0U;
    70b6:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    70ba:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    70bc:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    70c0:	4630      	mov	r0, r6
    70c2:	ab06      	add	r3, sp, #24
    70c4:	f011 f963 	bl	1838e <bt_gatt_foreach_attr>
	if (data.err) {
    70c8:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    70cc:	b12c      	cbz	r4, 70da <att_read_type_req+0xae>
		net_buf_unref(data.buf);
    70ce:	9808      	ldr	r0, [sp, #32]
    70d0:	f00b f8de 	bl	12290 <net_buf_unref>
	if (!req) {
    70d4:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    70d8:	e7d8      	b.n	708c <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    70da:	9908      	ldr	r1, [sp, #32]
    70dc:	4628      	mov	r0, r5
    70de:	f7ff fd23 	bl	6b28 <bt_att_chan_send_rsp.constprop.0>
	return 0;
    70e2:	e7d9      	b.n	7098 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
    70e4:	2404      	movs	r4, #4
    70e6:	e7d7      	b.n	7098 <att_read_type_req+0x6c>
    70e8:	00006b4d 	.word	0x00006b4d

000070ec <att_find_type_req>:
{
    70ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    70f0:	4688      	mov	r8, r1
    70f2:	b086      	sub	sp, #24
    70f4:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
    70f6:	2106      	movs	r1, #6
    70f8:	f108 0008 	add.w	r0, r8, #8
    70fc:	f015 ffe8 	bl	1d0d0 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
    7100:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
    7102:	b317      	cbz	r7, 714a <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
    7104:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
    7108:	f1b9 0f00 	cmp.w	r9, #0
    710c:	d01c      	beq.n	7148 <att_find_type_req+0x5c>
	if (start > end) {
    710e:	454f      	cmp	r7, r9
    7110:	d81b      	bhi.n	714a <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
    7112:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    7114:	f8ad 3002 	strh.w	r3, [sp, #2]
    7118:	2400      	movs	r4, #0
    711a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    711e:	a901      	add	r1, sp, #4
    7120:	4668      	mov	r0, sp
	value = buf->data;
    7122:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    7126:	f88d 4000 	strb.w	r4, [sp]
    712a:	f88d 4004 	strb.w	r4, [sp, #4]
    712e:	f8ad 3006 	strh.w	r3, [sp, #6]
    7132:	f010 fa78 	bl	17626 <bt_uuid_cmp>
    7136:	4606      	mov	r6, r0
    7138:	b190      	cbz	r0, 7160 <att_find_type_req+0x74>
	if (!req) {
    713a:	230a      	movs	r3, #10
    713c:	463a      	mov	r2, r7
    713e:	2106      	movs	r1, #6
    7140:	4628      	mov	r0, r5
    7142:	f011 fc77 	bl	18a34 <send_err_rsp.part.0>
		return 0;
    7146:	e007      	b.n	7158 <att_find_type_req+0x6c>
			*err = 0U;
    7148:	464f      	mov	r7, r9
	if (!req) {
    714a:	2301      	movs	r3, #1
    714c:	463a      	mov	r2, r7
    714e:	2106      	movs	r1, #6
    7150:	4628      	mov	r0, r5
    7152:	f011 fc6f 	bl	18a34 <send_err_rsp.part.0>
		return 0;
    7156:	2400      	movs	r4, #0
}
    7158:	4620      	mov	r0, r4
    715a:	b006      	add	sp, #24
    715c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    7160:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
    7164:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    7168:	4601      	mov	r1, r0
    716a:	2214      	movs	r2, #20
    716c:	a801      	add	r0, sp, #4
    716e:	f010 f87c 	bl	1726a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    7172:	4632      	mov	r2, r6
    7174:	2107      	movs	r1, #7
    7176:	4640      	mov	r0, r8
    7178:	f011 fc9f 	bl	18aba <bt_att_create_pdu>
    717c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    717e:	b1d8      	cbz	r0, 71b8 <att_find_type_req+0xcc>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    7180:	230a      	movs	r3, #10
    7182:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    7186:	4a0d      	ldr	r2, [pc, #52]	; (71bc <att_find_type_req+0xd0>)
	data.value_len = value_len;
    7188:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    718c:	ab01      	add	r3, sp, #4
    718e:	4649      	mov	r1, r9
    7190:	4638      	mov	r0, r7
	data.value = value;
    7192:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
    7196:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    7198:	f011 f8f9 	bl	1838e <bt_gatt_foreach_attr>
	if (data.err) {
    719c:	f89d 4015 	ldrb.w	r4, [sp, #21]
    71a0:	b12c      	cbz	r4, 71ae <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
    71a2:	9802      	ldr	r0, [sp, #8]
    71a4:	f00b f874 	bl	12290 <net_buf_unref>
	if (!req) {
    71a8:	f89d 3015 	ldrb.w	r3, [sp, #21]
    71ac:	e7ce      	b.n	714c <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    71ae:	9902      	ldr	r1, [sp, #8]
    71b0:	4628      	mov	r0, r5
    71b2:	f7ff fcb9 	bl	6b28 <bt_att_chan_send_rsp.constprop.0>
	return 0;
    71b6:	e7cf      	b.n	7158 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    71b8:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    71ba:	e7cd      	b.n	7158 <att_find_type_req+0x6c>
    71bc:	000183a5 	.word	0x000183a5

000071c0 <att_find_info_req>:
{
    71c0:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    71c2:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    71c4:	881e      	ldrh	r6, [r3, #0]
{
    71c6:	b085      	sub	sp, #20
    71c8:	4605      	mov	r5, r0
	if (!start || !end) {
    71ca:	b19e      	cbz	r6, 71f4 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
    71cc:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    71ce:	b184      	cbz	r4, 71f2 <att_find_info_req+0x32>
	if (start > end) {
    71d0:	42b4      	cmp	r4, r6
    71d2:	d30f      	bcc.n	71f4 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
    71d4:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
    71d6:	2210      	movs	r2, #16
    71d8:	2100      	movs	r1, #0
    71da:	4668      	mov	r0, sp
    71dc:	f010 f845 	bl	1726a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    71e0:	2200      	movs	r2, #0
    71e2:	2105      	movs	r1, #5
    71e4:	4638      	mov	r0, r7
    71e6:	f011 fc68 	bl	18aba <bt_att_create_pdu>
    71ea:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    71ec:	b958      	cbnz	r0, 7206 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
    71ee:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
    71f0:	e007      	b.n	7202 <att_find_info_req+0x42>
			*err = 0U;
    71f2:	4626      	mov	r6, r4
	if (!req) {
    71f4:	2301      	movs	r3, #1
    71f6:	4632      	mov	r2, r6
    71f8:	2104      	movs	r1, #4
    71fa:	4628      	mov	r0, r5
    71fc:	f011 fc1a 	bl	18a34 <send_err_rsp.part.0>
	return 0;
    7200:	2000      	movs	r0, #0
}
    7202:	b005      	add	sp, #20
    7204:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    7206:	4621      	mov	r1, r4
    7208:	4a08      	ldr	r2, [pc, #32]	; (722c <att_find_info_req+0x6c>)
	data.chan = chan;
    720a:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    720c:	466b      	mov	r3, sp
    720e:	4630      	mov	r0, r6
    7210:	f011 f8bd 	bl	1838e <bt_gatt_foreach_attr>
	if (!data.rsp) {
    7214:	9c02      	ldr	r4, [sp, #8]
    7216:	b924      	cbnz	r4, 7222 <att_find_info_req+0x62>
		net_buf_unref(data.buf);
    7218:	9801      	ldr	r0, [sp, #4]
    721a:	f00b f839 	bl	12290 <net_buf_unref>
	if (!req) {
    721e:	230a      	movs	r3, #10
    7220:	e7e9      	b.n	71f6 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    7222:	9901      	ldr	r1, [sp, #4]
    7224:	4628      	mov	r0, r5
    7226:	f7ff fc7f 	bl	6b28 <bt_att_chan_send_rsp.constprop.0>
    722a:	e7e9      	b.n	7200 <att_find_info_req+0x40>
    722c:	000184cd 	.word	0x000184cd

00007230 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
    7230:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_att_req *req = NULL;
    7232:	2300      	movs	r3, #0
{
    7234:	4605      	mov	r5, r0
    7236:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
    7238:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
    723a:	f00e fef3 	bl	16024 <z_impl_z_current_get>

	if (k_current_get() == bt_recv_thread_id) {
    723e:	4b0b      	ldr	r3, [pc, #44]	; (726c <bt_att_req_alloc+0x3c>)
    7240:	681b      	ldr	r3, [r3, #0]
    7242:	4283      	cmp	r3, r0
		/* No req will be fulfilled while blocking on the bt_recv thread.
		 * Blocking would cause deadlock.
		 */
		timeout = K_NO_WAIT;
    7244:	bf04      	itt	eq
    7246:	2500      	moveq	r5, #0
    7248:	462c      	moveq	r4, r5
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    724a:	a901      	add	r1, sp, #4
    724c:	4808      	ldr	r0, [pc, #32]	; (7270 <bt_att_req_alloc+0x40>)
    724e:	462a      	mov	r2, r5
    7250:	4623      	mov	r3, r4
    7252:	f00e f8f9 	bl	15448 <k_mem_slab_alloc>
    7256:	4601      	mov	r1, r0
    7258:	b930      	cbnz	r0, 7268 <bt_att_req_alloc+0x38>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
    725a:	9801      	ldr	r0, [sp, #4]
    725c:	2210      	movs	r2, #16
    725e:	f010 f804 	bl	1726a <memset>

	return req;
    7262:	9801      	ldr	r0, [sp, #4]
}
    7264:	b003      	add	sp, #12
    7266:	bd30      	pop	{r4, r5, pc}
		return NULL;
    7268:	2000      	movs	r0, #0
    726a:	e7fb      	b.n	7264 <bt_att_req_alloc+0x34>
    726c:	2000190c 	.word	0x2000190c
    7270:	20000ad4 	.word	0x20000ad4

00007274 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
    7274:	b507      	push	{r0, r1, r2, lr}
    7276:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
    7278:	6880      	ldr	r0, [r0, #8]
    727a:	b120      	cbz	r0, 7286 <bt_att_req_free+0x12>
		net_buf_unref(req->buf);
    727c:	f00b f808 	bl	12290 <net_buf_unref>
		req->buf = NULL;
    7280:	9b01      	ldr	r3, [sp, #4]
    7282:	2200      	movs	r2, #0
    7284:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
    7286:	4803      	ldr	r0, [pc, #12]	; (7294 <bt_att_req_free+0x20>)
    7288:	a901      	add	r1, sp, #4
    728a:	f017 f894 	bl	1e3b6 <k_mem_slab_free>
}
    728e:	b003      	add	sp, #12
    7290:	f85d fb04 	ldr.w	pc, [sp], #4
    7294:	20000ad4 	.word	0x20000ad4

00007298 <att_handle_rsp>:
{
    7298:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    729c:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
    729e:	f500 7088 	add.w	r0, r0, #272	; 0x110
{
    72a2:	4688      	mov	r8, r1
    72a4:	4691      	mov	r9, r2
    72a6:	461f      	mov	r7, r3
	k_work_cancel_delayable(&chan->timeout_work);
    72a8:	f017 fa51 	bl	1e74e <k_work_cancel_delayable>
	if (!chan->req) {
    72ac:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
    72b0:	2600      	movs	r6, #0
    72b2:	b1f0      	cbz	r0, 72f2 <att_handle_rsp+0x5a>
	if (chan->req == &cancel) {
    72b4:	4b10      	ldr	r3, [pc, #64]	; (72f8 <att_handle_rsp+0x60>)
    72b6:	4298      	cmp	r0, r3
    72b8:	d112      	bne.n	72e0 <att_handle_rsp+0x48>
		chan->req = NULL;
    72ba:	f8c4 60f4 	str.w	r6, [r4, #244]	; 0xf4
	bt_att_func_t func = NULL;
    72be:	4635      	mov	r5, r6
	att_req_send_process(chan->att);
    72c0:	6820      	ldr	r0, [r4, #0]
    72c2:	f011 fb46 	bl	18952 <att_req_send_process>
	if (func) {
    72c6:	b13d      	cbz	r5, 72d8 <att_handle_rsp+0x40>
		func(chan->att->conn, err, pdu, len, params);
    72c8:	6820      	ldr	r0, [r4, #0]
    72ca:	f8cd a000 	str.w	sl, [sp]
    72ce:	6800      	ldr	r0, [r0, #0]
    72d0:	464b      	mov	r3, r9
    72d2:	4642      	mov	r2, r8
    72d4:	4639      	mov	r1, r7
    72d6:	47a8      	blx	r5
}
    72d8:	2000      	movs	r0, #0
    72da:	b002      	add	sp, #8
    72dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	func = chan->req->func;
    72e0:	6845      	ldr	r5, [r0, #4]
	chan->req->func = NULL;
    72e2:	6046      	str	r6, [r0, #4]
	params = chan->req->user_data;
    72e4:	f8d0 a00c 	ldr.w	sl, [r0, #12]
	bt_att_req_free(chan->req);
    72e8:	f7ff ffc4 	bl	7274 <bt_att_req_free>
	chan->req = NULL;
    72ec:	f8c4 60f4 	str.w	r6, [r4, #244]	; 0xf4
    72f0:	e7e6      	b.n	72c0 <att_handle_rsp+0x28>
	bt_att_func_t func = NULL;
    72f2:	4605      	mov	r5, r0
    72f4:	e7e4      	b.n	72c0 <att_handle_rsp+0x28>
    72f6:	bf00      	nop
    72f8:	2000198c 	.word	0x2000198c

000072fc <bt_att_disconnected>:
{
    72fc:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att *att = att_chan->att;
    72fe:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
    7302:	b085      	sub	sp, #20
    7304:	4604      	mov	r4, r0
	if (!att_chan->att) {
    7306:	2d00      	cmp	r5, #0
    7308:	d04d      	beq.n	73a6 <bt_att_disconnected+0xaa>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
    730a:	f500 719e 	add.w	r1, r0, #316	; 0x13c
    730e:	f105 0024 	add.w	r0, r5, #36	; 0x24
    7312:	f011 fa81 	bl	18818 <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
    7316:	f1a4 0608 	sub.w	r6, r4, #8
    731a:	f104 07f0 	add.w	r7, r4, #240	; 0xf0
    731e:	2200      	movs	r2, #0
    7320:	2300      	movs	r3, #0
    7322:	4638      	mov	r0, r7
    7324:	f015 fdee 	bl	1cf04 <net_buf_get>
    7328:	4602      	mov	r2, r0
    732a:	bb18      	cbnz	r0, 7374 <bt_att_disconnected+0x78>
	if (chan->req) {
    732c:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
    7330:	b123      	cbz	r3, 733c <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
    7332:	4601      	mov	r1, r0
    7334:	230e      	movs	r3, #14
    7336:	4630      	mov	r0, r6
    7338:	f7ff ffae 	bl	7298 <att_handle_rsp>
	chan->att = NULL;
    733c:	2300      	movs	r3, #0
    733e:	f844 3c08 	str.w	r3, [r4, #-8]
	if (!sys_slist_is_empty(&att->chans)) {
    7342:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    7344:	2b00      	cmp	r3, #0
    7346:	d12e      	bne.n	73a6 <bt_att_disconnected+0xaa>
	att_reset(att);
    7348:	9503      	str	r5, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
    734a:	9803      	ldr	r0, [sp, #12]
    734c:	2200      	movs	r2, #0
    734e:	2300      	movs	r3, #0
    7350:	300c      	adds	r0, #12
    7352:	f015 fdd7 	bl	1cf04 <net_buf_get>
    7356:	b980      	cbnz	r0, 737a <bt_att_disconnected+0x7e>
	while (!sys_slist_is_empty(&att->reqs)) {
    7358:	9803      	ldr	r0, [sp, #12]
	return list->head;
    735a:	6845      	ldr	r5, [r0, #4]
    735c:	b985      	cbnz	r5, 7380 <bt_att_disconnected+0x84>
	att->conn = NULL;
    735e:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
    7360:	a903      	add	r1, sp, #12
    7362:	4812      	ldr	r0, [pc, #72]	; (73ac <bt_att_disconnected+0xb0>)
    7364:	f017 f827 	bl	1e3b6 <k_mem_slab_free>
	bt_gatt_disconnected(ch->chan.conn);
    7368:	6820      	ldr	r0, [r4, #0]
}
    736a:	b005      	add	sp, #20
    736c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_gatt_disconnected(ch->chan.conn);
    7370:	f000 bbf4 	b.w	7b5c <bt_gatt_disconnected>
		net_buf_unref(buf);
    7374:	f00a ff8c 	bl	12290 <net_buf_unref>
    7378:	e7d1      	b.n	731e <bt_att_disconnected+0x22>
		net_buf_unref(buf);
    737a:	f00a ff89 	bl	12290 <net_buf_unref>
    737e:	e7e4      	b.n	734a <bt_att_disconnected+0x4e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    7380:	6882      	ldr	r2, [r0, #8]
		if (req->func) {
    7382:	686e      	ldr	r6, [r5, #4]
	return node->next;
    7384:	682b      	ldr	r3, [r5, #0]
	list->head = node;
    7386:	6043      	str	r3, [r0, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    7388:	4295      	cmp	r5, r2
	list->tail = node;
    738a:	bf08      	it	eq
    738c:	6083      	streq	r3, [r0, #8]
    738e:	b136      	cbz	r6, 739e <bt_att_disconnected+0xa2>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
    7390:	68eb      	ldr	r3, [r5, #12]
    7392:	9300      	str	r3, [sp, #0]
    7394:	2300      	movs	r3, #0
    7396:	6800      	ldr	r0, [r0, #0]
    7398:	461a      	mov	r2, r3
    739a:	210e      	movs	r1, #14
    739c:	47b0      	blx	r6
		bt_att_req_free(req);
    739e:	4628      	mov	r0, r5
    73a0:	f7ff ff68 	bl	7274 <bt_att_req_free>
    73a4:	e7d8      	b.n	7358 <bt_att_disconnected+0x5c>
}
    73a6:	b005      	add	sp, #20
    73a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    73aa:	bf00      	nop
    73ac:	20000a80 	.word	0x20000a80

000073b0 <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
    73b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    73b2:	4d0d      	ldr	r5, [pc, #52]	; (73e8 <find_cf_cfg+0x38>)
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
    73b4:	4604      	mov	r4, r0
    73b6:	b968      	cbnz	r0, 73d4 <find_cf_cfg+0x24>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    73b8:	9000      	str	r0, [sp, #0]
	return memcmp(a, b, sizeof(*a));
    73ba:	2207      	movs	r2, #7
    73bc:	f8cd 0003 	str.w	r0, [sp, #3]
    73c0:	4669      	mov	r1, sp
    73c2:	1c68      	adds	r0, r5, #1
    73c4:	f00f ff35 	bl	17232 <memcmp>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
    73c8:	2800      	cmp	r0, #0
    73ca:	bf08      	it	eq
    73cc:	462c      	moveq	r4, r5
			return cfg;
		}
	}

	return NULL;
}
    73ce:	4620      	mov	r0, r4
    73d0:	b003      	add	sp, #12
    73d2:	bd30      	pop	{r4, r5, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    73d4:	462a      	mov	r2, r5
    73d6:	f812 1b01 	ldrb.w	r1, [r2], #1
    73da:	f010 fe47 	bl	1806c <bt_conn_is_peer_addr_le>
	return NULL;
    73de:	2800      	cmp	r0, #0
    73e0:	bf14      	ite	ne
    73e2:	462c      	movne	r4, r5
    73e4:	2400      	moveq	r4, #0
    73e6:	e7f2      	b.n	73ce <find_cf_cfg+0x1e>
    73e8:	200019a4 	.word	0x200019a4

000073ec <find_sc_cfg>:
{
    73ec:	b510      	push	{r4, lr}
		if (id == sc_cfg[i].id &&
    73ee:	4c06      	ldr	r4, [pc, #24]	; (7408 <find_sc_cfg+0x1c>)
    73f0:	7823      	ldrb	r3, [r4, #0]
    73f2:	4283      	cmp	r3, r0
    73f4:	d104      	bne.n	7400 <find_sc_cfg+0x14>
    73f6:	2207      	movs	r2, #7
    73f8:	1c60      	adds	r0, r4, #1
    73fa:	f00f ff1a 	bl	17232 <memcmp>
    73fe:	b108      	cbz	r0, 7404 <find_sc_cfg+0x18>
	return NULL;
    7400:	2000      	movs	r0, #0
}
    7402:	bd10      	pop	{r4, pc}
			return &sc_cfg[i];
    7404:	4620      	mov	r0, r4
    7406:	e7fc      	b.n	7402 <find_sc_cfg+0x16>
    7408:	20002b04 	.word	0x20002b04

0000740c <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
    740c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    7410:	4b23      	ldr	r3, [pc, #140]	; (74a0 <disconnected_cb+0x94>)
{
    7412:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    7414:	6882      	ldr	r2, [r0, #8]
    7416:	429a      	cmp	r2, r3
{
    7418:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    741a:	d102      	bne.n	7422 <disconnected_cb+0x16>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    741c:	68c4      	ldr	r4, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
    741e:	8963      	ldrh	r3, [r4, #10]
    7420:	bb03      	cbnz	r3, 7464 <disconnected_cb+0x58>

		BT_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
    7422:	2001      	movs	r0, #1
    7424:	b002      	add	sp, #8
    7426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    742a:	f105 0888 	add.w	r8, r5, #136	; 0x88
    742e:	7a28      	ldrb	r0, [r5, #8]
    7430:	4641      	mov	r1, r8
    7432:	f010 fb49 	bl	17ac8 <bt_addr_le_is_bonded>
    7436:	b980      	cbnz	r0, 745a <disconnected_cb+0x4e>
				if (ccc == &sc_ccc) {
    7438:	4b1a      	ldr	r3, [pc, #104]	; (74a4 <disconnected_cb+0x98>)
    743a:	429c      	cmp	r4, r3
    743c:	d102      	bne.n	7444 <disconnected_cb+0x38>
					sc_clear(conn);
    743e:	4628      	mov	r0, r5
    7440:	f011 fe5a 	bl	190f8 <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    7444:	2500      	movs	r5, #0
    7446:	4669      	mov	r1, sp
    7448:	4630      	mov	r0, r6
    744a:	9500      	str	r5, [sp, #0]
    744c:	f8cd 5003 	str.w	r5, [sp, #3]
    7450:	f011 fc7e 	bl	18d50 <bt_addr_le_copy>
	cfg->id = 0U;
    7454:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
    7456:	8125      	strh	r5, [r4, #8]
	if (!value_used) {
    7458:	e019      	b.n	748e <disconnected_cb+0x82>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    745a:	4641      	mov	r1, r8
    745c:	4630      	mov	r0, r6
    745e:	f011 fc77 	bl	18d50 <bt_addr_le_copy>
	if (!value_used) {
    7462:	e014      	b.n	748e <disconnected_cb+0x82>
		if (!cfg->value) {
    7464:	8923      	ldrh	r3, [r4, #8]
    7466:	b193      	cbz	r3, 748e <disconnected_cb+0x82>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    7468:	4626      	mov	r6, r4
    746a:	4628      	mov	r0, r5
    746c:	f816 1b01 	ldrb.w	r1, [r6], #1
    7470:	4632      	mov	r2, r6
    7472:	f010 fdfb 	bl	1806c <bt_conn_is_peer_addr_le>
    7476:	2800      	cmp	r0, #0
    7478:	d1d7      	bne.n	742a <disconnected_cb+0x1e>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    747a:	7820      	ldrb	r0, [r4, #0]
    747c:	4631      	mov	r1, r6
    747e:	f7fe fff7 	bl	6470 <bt_conn_lookup_addr_le>
			if (tmp) {
    7482:	b120      	cbz	r0, 748e <disconnected_cb+0x82>
				if (tmp->state == BT_CONN_CONNECTED) {
    7484:	7a85      	ldrb	r5, [r0, #10]
				bt_conn_unref(tmp);
    7486:	f010 fdaa 	bl	17fde <bt_conn_unref>
	if (!value_used) {
    748a:	2d07      	cmp	r5, #7
    748c:	d0c9      	beq.n	7422 <disconnected_cb+0x16>
		if (ccc->cfg_changed) {
    748e:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
    7490:	2100      	movs	r1, #0
    7492:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
    7494:	2b00      	cmp	r3, #0
    7496:	d0c4      	beq.n	7422 <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
    7498:	4638      	mov	r0, r7
    749a:	4798      	blx	r3
    749c:	e7c1      	b.n	7422 <disconnected_cb+0x16>
    749e:	bf00      	nop
    74a0:	00018fbf 	.word	0x00018fbf
    74a4:	20000304 	.word	0x20000304

000074a8 <sc_indicate_rsp>:
{
    74a8:	b510      	push	{r4, lr}
    74aa:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    74ac:	4814      	ldr	r0, [pc, #80]	; (7500 <sc_indicate_rsp+0x58>)
    74ae:	f3bf 8f5b 	dmb	ish
    74b2:	f100 0350 	add.w	r3, r0, #80	; 0x50
    74b6:	e853 2f00 	ldrex	r2, [r3]
    74ba:	f022 0202 	bic.w	r2, r2, #2
    74be:	e843 2100 	strex	r1, r2, [r3]
    74c2:	2900      	cmp	r1, #0
    74c4:	d1f7      	bne.n	74b6 <sc_indicate_rsp+0xe>
    74c6:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    74ca:	f3bf 8f5b 	dmb	ish
    74ce:	6d03      	ldr	r3, [r0, #80]	; 0x50
    74d0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    74d4:	07da      	lsls	r2, r3, #31
    74d6:	d504      	bpl.n	74e2 <sc_indicate_rsp+0x3a>
	k_work_reschedule(&gatt_sc.work, timeout);
    74d8:	2200      	movs	r2, #0
    74da:	2300      	movs	r3, #0
    74dc:	3020      	adds	r0, #32
    74de:	f00e faf3 	bl	15ac8 <k_work_reschedule>
	cfg = find_cf_cfg(conn);
    74e2:	4620      	mov	r0, r4
    74e4:	f7ff ff64 	bl	73b0 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
    74e8:	b140      	cbz	r0, 74fc <sc_indicate_rsp+0x54>
    74ea:	7a03      	ldrb	r3, [r0, #8]
    74ec:	07db      	lsls	r3, r3, #31
    74ee:	d505      	bpl.n	74fc <sc_indicate_rsp+0x54>
}
    74f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    74f4:	2100      	movs	r1, #0
    74f6:	300c      	adds	r0, #12
    74f8:	f011 bc4a 	b.w	18d90 <atomic_set_bit>
}
    74fc:	bd10      	pop	{r4, pc}
    74fe:	bf00      	nop
    7500:	20000fb0 	.word	0x20000fb0

00007504 <bt_gatt_init>:
{
    7504:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    7506:	4b20      	ldr	r3, [pc, #128]	; (7588 <bt_gatt_init+0x84>)
    7508:	f3bf 8f5b 	dmb	ish
    750c:	2201      	movs	r2, #1
    750e:	e853 1f00 	ldrex	r1, [r3]
    7512:	2900      	cmp	r1, #0
    7514:	d103      	bne.n	751e <bt_gatt_init+0x1a>
    7516:	e843 2000 	strex	r0, r2, [r3]
    751a:	2800      	cmp	r0, #0
    751c:	d1f7      	bne.n	750e <bt_gatt_init+0xa>
    751e:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
    7522:	d130      	bne.n	7586 <bt_gatt_init+0x82>
    7524:	f3bf 8f5b 	dmb	ish
    7528:	4b18      	ldr	r3, [pc, #96]	; (758c <bt_gatt_init+0x88>)
    752a:	e853 1f00 	ldrex	r1, [r3]
    752e:	2900      	cmp	r1, #0
    7530:	d103      	bne.n	753a <bt_gatt_init+0x36>
    7532:	e843 2000 	strex	r0, r2, [r3]
    7536:	2800      	cmp	r0, #0
    7538:	d1f7      	bne.n	752a <bt_gatt_init+0x26>
    753a:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
    753e:	d108      	bne.n	7552 <bt_gatt_init+0x4e>
    7540:	4913      	ldr	r1, [pc, #76]	; (7590 <bt_gatt_init+0x8c>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    7542:	4a14      	ldr	r2, [pc, #80]	; (7594 <bt_gatt_init+0x90>)
    7544:	880b      	ldrh	r3, [r1, #0]
    7546:	4c14      	ldr	r4, [pc, #80]	; (7598 <bt_gatt_init+0x94>)
	if (!atomic_cas(&service_init, 0, 1)) {
    7548:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    754a:	42a2      	cmp	r2, r4
    754c:	d315      	bcc.n	757a <bt_gatt_init+0x76>
    754e:	b100      	cbz	r0, 7552 <bt_gatt_init+0x4e>
    7550:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
    7552:	4b12      	ldr	r3, [pc, #72]	; (759c <bt_gatt_init+0x98>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
    7554:	4912      	ldr	r1, [pc, #72]	; (75a0 <bt_gatt_init+0x9c>)
    7556:	4813      	ldr	r0, [pc, #76]	; (75a4 <bt_gatt_init+0xa0>)
    7558:	2200      	movs	r2, #0
	list->tail = NULL;
    755a:	e9c3 2200 	strd	r2, r2, [r3]
    755e:	f017 f8e8 	bl	1e732 <k_work_init_delayable>
	k_work_schedule(&db_hash.work, DB_HASH_TIMEOUT);
    7562:	4810      	ldr	r0, [pc, #64]	; (75a4 <bt_gatt_init+0xa0>)
    7564:	f44f 72a4 	mov.w	r2, #328	; 0x148
    7568:	2300      	movs	r3, #0
    756a:	f00e fa79 	bl	15a60 <k_work_schedule>
}
    756e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
    7572:	490d      	ldr	r1, [pc, #52]	; (75a8 <bt_gatt_init+0xa4>)
    7574:	480d      	ldr	r0, [pc, #52]	; (75ac <bt_gatt_init+0xa8>)
    7576:	f017 b8dc 	b.w	1e732 <k_work_init_delayable>
		last_static_handle += svc->attr_count;
    757a:	6850      	ldr	r0, [r2, #4]
    757c:	4403      	add	r3, r0
    757e:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    7580:	3208      	adds	r2, #8
    7582:	2001      	movs	r0, #1
    7584:	e7e1      	b.n	754a <bt_gatt_init+0x46>
}
    7586:	bd10      	pop	{r4, pc}
    7588:	200019b4 	.word	0x200019b4
    758c:	200019d0 	.word	0x200019d0
    7590:	20002b02 	.word	0x20002b02
    7594:	0001f160 	.word	0x0001f160
    7598:	0001f170 	.word	0x0001f170
    759c:	2000199c 	.word	0x2000199c
    75a0:	00019229 	.word	0x00019229
    75a4:	20000f58 	.word	0x20000f58
    75a8:	000078c1 	.word	0x000078c1
    75ac:	20000fd0 	.word	0x20000fd0

000075b0 <bt_gatt_attr_get_handle>:
{
    75b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
    75b4:	4603      	mov	r3, r0
    75b6:	b148      	cbz	r0, 75cc <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
    75b8:	8a00      	ldrh	r0, [r0, #16]
    75ba:	b938      	cbnz	r0, 75cc <bt_gatt_attr_get_handle+0x1c>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    75bc:	4912      	ldr	r1, [pc, #72]	; (7608 <bt_gatt_attr_get_handle+0x58>)
    75be:	f8df e04c 	ldr.w	lr, [pc, #76]	; 760c <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
    75c2:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    75c4:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    75c8:	4571      	cmp	r1, lr
    75ca:	d301      	bcc.n	75d0 <bt_gatt_attr_get_handle+0x20>
}
    75cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    75d0:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
    75d4:	42bb      	cmp	r3, r7
    75d6:	d304      	bcc.n	75e2 <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    75d8:	fb0c 7206 	mla	r2, ip, r6, r7
    75dc:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
    75de:	4293      	cmp	r3, r2
    75e0:	d90e      	bls.n	7600 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
    75e2:	19a2      	adds	r2, r4, r6
    75e4:	b292      	uxth	r2, r2
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    75e6:	3108      	adds	r1, #8
    75e8:	4614      	mov	r4, r2
    75ea:	e7ed      	b.n	75c8 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
    75ec:	fb0c 7805 	mla	r8, ip, r5, r7
    75f0:	4543      	cmp	r3, r8
    75f2:	d007      	beq.n	7604 <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
    75f4:	3501      	adds	r5, #1
    75f6:	1962      	adds	r2, r4, r5
    75f8:	42b5      	cmp	r5, r6
    75fa:	b292      	uxth	r2, r2
    75fc:	d1f6      	bne.n	75ec <bt_gatt_attr_get_handle+0x3c>
    75fe:	e7f2      	b.n	75e6 <bt_gatt_attr_get_handle+0x36>
    7600:	2500      	movs	r5, #0
    7602:	e7f8      	b.n	75f6 <bt_gatt_attr_get_handle+0x46>
    7604:	4610      	mov	r0, r2
    7606:	e7e1      	b.n	75cc <bt_gatt_attr_get_handle+0x1c>
    7608:	0001f160 	.word	0x0001f160
    760c:	0001f170 	.word	0x0001f170

00007610 <bt_gatt_foreach_attr_type>:
{
    7610:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7614:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
    7618:	9100      	str	r1, [sp, #0]
    761a:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
    761c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    7620:	2d00      	cmp	r5, #0
    7622:	bf08      	it	eq
    7624:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
    7626:	4b24      	ldr	r3, [pc, #144]	; (76b8 <bt_gatt_foreach_attr_type+0xa8>)
    7628:	881b      	ldrh	r3, [r3, #0]
    762a:	4283      	cmp	r3, r0
{
    762c:	4607      	mov	r7, r0
    762e:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
    7630:	d23c      	bcs.n	76ac <bt_gatt_foreach_attr_type+0x9c>
}
    7632:	b003      	add	sp, #12
    7634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
    7638:	6873      	ldr	r3, [r6, #4]
    763a:	4423      	add	r3, r4
    763c:	42bb      	cmp	r3, r7
    763e:	d232      	bcs.n	76a6 <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
    7640:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    7642:	3608      	adds	r6, #8
    7644:	4b1d      	ldr	r3, [pc, #116]	; (76bc <bt_gatt_foreach_attr_type+0xac>)
    7646:	429e      	cmp	r6, r3
    7648:	d3f6      	bcc.n	7638 <bt_gatt_foreach_attr_type+0x28>
    764a:	e7f2      	b.n	7632 <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    764c:	5889      	ldr	r1, [r1, r2]
    764e:	9301      	str	r3, [sp, #4]
    7650:	4640      	mov	r0, r8
    7652:	f00f ffe8 	bl	17626 <bt_uuid_cmp>
    7656:	9b01      	ldr	r3, [sp, #4]
    7658:	b190      	cbz	r0, 7680 <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    765a:	3401      	adds	r4, #1
    765c:	f10a 0a01 	add.w	sl, sl, #1
    7660:	b2a4      	uxth	r4, r4
    7662:	6873      	ldr	r3, [r6, #4]
    7664:	4553      	cmp	r3, sl
    7666:	d9ec      	bls.n	7642 <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
    7668:	9b00      	ldr	r3, [sp, #0]
    766a:	429c      	cmp	r4, r3
    766c:	d8e1      	bhi.n	7632 <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
    766e:	42bc      	cmp	r4, r7
    7670:	d3f3      	bcc.n	765a <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    7672:	6831      	ldr	r1, [r6, #0]
    7674:	fb0b f20a 	mul.w	r2, fp, sl
    7678:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    767a:	f1b8 0f00 	cmp.w	r8, #0
    767e:	d1e5      	bne.n	764c <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
    7680:	f1b9 0f00 	cmp.w	r9, #0
    7684:	d10b      	bne.n	769e <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
    7686:	3d01      	subs	r5, #1
    7688:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
    768a:	4618      	mov	r0, r3
    768c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    768e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7690:	4621      	mov	r1, r4
    7692:	4798      	blx	r3
	if (!*num_matches) {
    7694:	2d00      	cmp	r5, #0
    7696:	d0cc      	beq.n	7632 <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    7698:	2800      	cmp	r0, #0
    769a:	d1de      	bne.n	765a <bt_gatt_foreach_attr_type+0x4a>
    769c:	e7c9      	b.n	7632 <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
    769e:	68da      	ldr	r2, [r3, #12]
    76a0:	4591      	cmp	r9, r2
    76a2:	d1da      	bne.n	765a <bt_gatt_foreach_attr_type+0x4a>
    76a4:	e7ef      	b.n	7686 <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    76a6:	f04f 0a00 	mov.w	sl, #0
    76aa:	e7da      	b.n	7662 <bt_gatt_foreach_attr_type+0x52>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    76ac:	4e04      	ldr	r6, [pc, #16]	; (76c0 <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
    76ae:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
    76b0:	f04f 0b14 	mov.w	fp, #20
    76b4:	e7c6      	b.n	7644 <bt_gatt_foreach_attr_type+0x34>
    76b6:	bf00      	nop
    76b8:	20002b02 	.word	0x20002b02
    76bc:	0001f170 	.word	0x0001f170
    76c0:	0001f160 	.word	0x0001f160

000076c4 <db_hash_gen.constprop.0>:
static void db_hash_gen(bool store)
    76c4:	b510      	push	{r4, lr}
    76c6:	b0c8      	sub	sp, #288	; 0x120
	uint8_t key[16] = {};
    76c8:	2300      	movs	r3, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    76ca:	aa1c      	add	r2, sp, #112	; 0x70
    76cc:	4669      	mov	r1, sp
    76ce:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
    76d0:	e9cd 3300 	strd	r3, r3, [sp]
    76d4:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    76d8:	f00f fca9 	bl	1702e <tc_cmac_setup>
    76dc:	b320      	cbz	r0, 7728 <db_hash_gen.constprop.0+0x64>
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
    76de:	f64f 71ff 	movw	r1, #65535	; 0xffff
    76e2:	2001      	movs	r0, #1
    76e4:	4a11      	ldr	r2, [pc, #68]	; (772c <db_hash_gen.constprop.0+0x68>)
    76e6:	ab04      	add	r3, sp, #16
    76e8:	f011 fd93 	bl	19212 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
    76ec:	4810      	ldr	r0, [pc, #64]	; (7730 <db_hash_gen.constprop.0+0x6c>)
    76ee:	a904      	add	r1, sp, #16
    76f0:	f00f fd33 	bl	1715a <tc_cmac_final>
    76f4:	b1c0      	cbz	r0, 7728 <db_hash_gen.constprop.0+0x64>
    76f6:	4b0e      	ldr	r3, [pc, #56]	; (7730 <db_hash_gen.constprop.0+0x6c>)
    76f8:	2208      	movs	r2, #8
    76fa:	f103 010f 	add.w	r1, r3, #15
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
    76fe:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
    7700:	780c      	ldrb	r4, [r1, #0]
    7702:	f803 4b01 	strb.w	r4, [r3], #1
	for (i = 0; i < (length/2); i++) {
    7706:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
    7708:	f801 0901 	strb.w	r0, [r1], #-1
	for (i = 0; i < (length/2); i++) {
    770c:	d1f7      	bne.n	76fe <db_hash_gen.constprop.0+0x3a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    770e:	f3bf 8f5b 	dmb	ish
    7712:	4b08      	ldr	r3, [pc, #32]	; (7734 <db_hash_gen.constprop.0+0x70>)
    7714:	e853 2f00 	ldrex	r2, [r3]
    7718:	f042 0204 	orr.w	r2, r2, #4
    771c:	e843 2100 	strex	r1, r2, [r3]
    7720:	2900      	cmp	r1, #0
    7722:	d1f7      	bne.n	7714 <db_hash_gen.constprop.0+0x50>
    7724:	f3bf 8f5b 	dmb	ish
}
    7728:	b048      	add	sp, #288	; 0x120
    772a:	bd10      	pop	{r4, pc}
    772c:	00018ca7 	.word	0x00018ca7
    7730:	20000f48 	.word	0x20000f48
    7734:	20001000 	.word	0x20001000

00007738 <gatt_indicate>:
{
    7738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    773c:	4615      	mov	r5, r2
    773e:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr,
    7740:	2214      	movs	r2, #20
    7742:	6869      	ldr	r1, [r5, #4]
{
    7744:	4680      	mov	r8, r0
	if (bt_gatt_check_perm(conn, params->attr,
    7746:	f011 fd71 	bl	1922c <bt_gatt_check_perm>
    774a:	2800      	cmp	r0, #0
    774c:	d139      	bne.n	77c2 <gatt_indicate+0x8a>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    774e:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
    7752:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
    7754:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    7756:	f7ff fd6b 	bl	7230 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
    775a:	3602      	adds	r6, #2
	if (!req) {
    775c:	4604      	mov	r4, r0
    775e:	b920      	cbnz	r0, 776a <gatt_indicate+0x32>
		return -ENOMEM;
    7760:	f06f 050b 	mvn.w	r5, #11
}
    7764:	4628      	mov	r0, r5
    7766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req->func = func;
    776a:	4b17      	ldr	r3, [pc, #92]	; (77c8 <gatt_indicate+0x90>)
    776c:	6043      	str	r3, [r0, #4]
	req->user_data = params;
    776e:	60c5      	str	r5, [r0, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
    7770:	4632      	mov	r2, r6
    7772:	211d      	movs	r1, #29
    7774:	4640      	mov	r0, r8
    7776:	f011 f9a0 	bl	18aba <bt_att_create_pdu>
	if (!buf) {
    777a:	4606      	mov	r6, r0
    777c:	b918      	cbnz	r0, 7786 <gatt_indicate+0x4e>
		bt_att_req_free(req);
    777e:	4620      	mov	r0, r4
    7780:	f7ff fd78 	bl	7274 <bt_att_req_free>
    7784:	e7ec      	b.n	7760 <gatt_indicate+0x28>
	return net_buf_simple_add(&buf->b, len);
    7786:	f100 0a08 	add.w	sl, r0, #8
    778a:	2102      	movs	r1, #2
    778c:	4650      	mov	r0, sl
    778e:	f015 fc1c 	bl	1cfca <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
    7792:	4607      	mov	r7, r0
    7794:	8aa9      	ldrh	r1, [r5, #20]
    7796:	f827 9b02 	strh.w	r9, [r7], #2
    779a:	4650      	mov	r0, sl
    779c:	f015 fc15 	bl	1cfca <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    77a0:	8aaa      	ldrh	r2, [r5, #20]
    77a2:	6929      	ldr	r1, [r5, #16]
    77a4:	4638      	mov	r0, r7
    77a6:	f00f fd55 	bl	17254 <memcpy>
	req->buf = buf;
    77aa:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
    77ac:	4621      	mov	r1, r4
    77ae:	4640      	mov	r0, r8
    77b0:	f011 fa43 	bl	18c3a <bt_att_req_send>
	if (err) {
    77b4:	4605      	mov	r5, r0
    77b6:	2800      	cmp	r0, #0
    77b8:	d0d4      	beq.n	7764 <gatt_indicate+0x2c>
		bt_att_req_free(req);
    77ba:	4620      	mov	r0, r4
    77bc:	f7ff fd5a 	bl	7274 <bt_att_req_free>
    77c0:	e7d0      	b.n	7764 <gatt_indicate+0x2c>
		return -EPERM;
    77c2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    77c6:	e7cd      	b.n	7764 <gatt_indicate+0x2c>
    77c8:	00018c79 	.word	0x00018c79

000077cc <bt_gatt_indicate>:
{
    77cc:	b530      	push	{r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    77ce:	4b39      	ldr	r3, [pc, #228]	; (78b4 <bt_gatt_indicate+0xe8>)
    77d0:	f3bf 8f5b 	dmb	ish
    77d4:	681b      	ldr	r3, [r3, #0]
    77d6:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    77da:	079a      	lsls	r2, r3, #30
{
    77dc:	b08b      	sub	sp, #44	; 0x2c
    77de:	4604      	mov	r4, r0
    77e0:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    77e2:	d561      	bpl.n	78a8 <bt_gatt_indicate+0xdc>
	if (conn && conn->state != BT_CONN_CONNECTED) {
    77e4:	b110      	cbz	r0, 77ec <bt_gatt_indicate+0x20>
    77e6:	7a83      	ldrb	r3, [r0, #10]
    77e8:	2b07      	cmp	r3, #7
    77ea:	d160      	bne.n	78ae <bt_gatt_indicate+0xe2>
	data.attr = params->attr;
    77ec:	6868      	ldr	r0, [r5, #4]
    77ee:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
    77f0:	f7ff fede 	bl	75b0 <bt_gatt_attr_get_handle>
	if (params->uuid) {
    77f4:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
    77f6:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
    77fa:	b33a      	cbz	r2, 784c <bt_gatt_indicate+0x80>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    77fc:	a905      	add	r1, sp, #20
    77fe:	9102      	str	r1, [sp, #8]
    7800:	492d      	ldr	r1, [pc, #180]	; (78b8 <bt_gatt_indicate+0xec>)
    7802:	9101      	str	r1, [sp, #4]
    7804:	2101      	movs	r1, #1
	found->attr = NULL;
    7806:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    7808:	9100      	str	r1, [sp, #0]
    780a:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
    780e:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    7810:	f7ff fefe 	bl	7610 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
    7814:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
    7816:	b91b      	cbnz	r3, 7820 <bt_gatt_indicate+0x54>
			return -ENOENT;
    7818:	f06f 0001 	mvn.w	r0, #1
}
    781c:	b00b      	add	sp, #44	; 0x2c
    781e:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
    7820:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
    7822:	9b05      	ldr	r3, [sp, #20]
    7824:	6818      	ldr	r0, [r3, #0]
    7826:	2300      	movs	r3, #0
    7828:	f88d 3010 	strb.w	r3, [sp, #16]
    782c:	a904      	add	r1, sp, #16
    782e:	f642 0303 	movw	r3, #10243	; 0x2803
    7832:	f8ad 3012 	strh.w	r3, [sp, #18]
    7836:	f00f fef6 	bl	17626 <bt_uuid_cmp>
    783a:	b970      	cbnz	r0, 785a <bt_gatt_indicate+0x8e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
    783c:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    783e:	68c3      	ldr	r3, [r0, #12]
    7840:	799b      	ldrb	r3, [r3, #6]
    7842:	069b      	lsls	r3, r3, #26
    7844:	d405      	bmi.n	7852 <bt_gatt_indicate+0x86>
			return -EINVAL;
    7846:	f06f 0015 	mvn.w	r0, #21
    784a:	e7e7      	b.n	781c <bt_gatt_indicate+0x50>
		if (!data.handle) {
    784c:	2800      	cmp	r0, #0
    784e:	d1e8      	bne.n	7822 <bt_gatt_indicate+0x56>
    7850:	e7e2      	b.n	7818 <bt_gatt_indicate+0x4c>
		data.handle = bt_gatt_attr_value_handle(data.attr);
    7852:	f011 fc90 	bl	19176 <bt_gatt_attr_value_handle>
    7856:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
    785a:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
    785e:	b13c      	cbz	r4, 7870 <bt_gatt_indicate+0xa4>
		params->_ref = 1;
    7860:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
    7862:	4601      	mov	r1, r0
		params->_ref = 1;
    7864:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
    7866:	462a      	mov	r2, r5
    7868:	4620      	mov	r0, r4
    786a:	f7ff ff65 	bl	7738 <gatt_indicate>
    786e:	e7d5      	b.n	781c <bt_gatt_indicate+0x50>
	data.err = -ENOTCONN;
    7870:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    7874:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
    7876:	2302      	movs	r3, #2
    7878:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    787c:	f642 1302 	movw	r3, #10498	; 0x2902
    7880:	f8ad 3012 	strh.w	r3, [sp, #18]
    7884:	ab05      	add	r3, sp, #20
    7886:	9302      	str	r3, [sp, #8]
    7888:	4b0c      	ldr	r3, [pc, #48]	; (78bc <bt_gatt_indicate+0xf0>)
    788a:	9301      	str	r3, [sp, #4]
    788c:	2301      	movs	r3, #1
    788e:	9300      	str	r3, [sp, #0]
	params->_ref = 0;
    7890:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    7892:	4623      	mov	r3, r4
    7894:	aa04      	add	r2, sp, #16
    7896:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
    789a:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    789c:	f88d 4010 	strb.w	r4, [sp, #16]
    78a0:	f7ff feb6 	bl	7610 <bt_gatt_foreach_attr_type>
	return data.err;
    78a4:	9807      	ldr	r0, [sp, #28]
    78a6:	e7b9      	b.n	781c <bt_gatt_indicate+0x50>
		return -EAGAIN;
    78a8:	f06f 000a 	mvn.w	r0, #10
    78ac:	e7b6      	b.n	781c <bt_gatt_indicate+0x50>
		return -ENOTCONN;
    78ae:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    78b2:	e7b3      	b.n	781c <bt_gatt_indicate+0x50>
    78b4:	2000014c 	.word	0x2000014c
    78b8:	00018c9f 	.word	0x00018c9f
    78bc:	00007931 	.word	0x00007931

000078c0 <sc_process>:
{
    78c0:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
    78c2:	f830 2c08 	ldrh.w	r2, [r0, #-8]
    78c6:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(sc->end);
    78ca:	f830 2c06 	ldrh.w	r2, [r0, #-6]
    78ce:	f8ad 2006 	strh.w	r2, [sp, #6]
{
    78d2:	4603      	mov	r3, r0
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    78d4:	f1a0 0120 	sub.w	r1, r0, #32
    78d8:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    78dc:	f3bf 8f5b 	dmb	ish
    78e0:	e854 2f00 	ldrex	r2, [r4]
    78e4:	f022 0201 	bic.w	r2, r2, #1
    78e8:	e844 2000 	strex	r0, r2, [r4]
    78ec:	2800      	cmp	r0, #0
    78ee:	d1f7      	bne.n	78e0 <sc_process+0x20>
    78f0:	f3bf 8f5b 	dmb	ish
	sc->params.attr = &_1_gatt_svc.attrs[2];
    78f4:	4a0c      	ldr	r2, [pc, #48]	; (7928 <sc_process+0x68>)
    78f6:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
    78fa:	4a0c      	ldr	r2, [pc, #48]	; (792c <sc_process+0x6c>)
    78fc:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
    7900:	aa01      	add	r2, sp, #4
	sc->start = 0U;
    7902:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
    7904:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
    7908:	2204      	movs	r2, #4
	sc->start = 0U;
    790a:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->end = 0U;
    790e:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.len = sizeof(sc_range);
    7912:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
    7916:	f7ff ff59 	bl	77cc <bt_gatt_indicate>
    791a:	b918      	cbnz	r0, 7924 <sc_process+0x64>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
    791c:	2101      	movs	r1, #1
    791e:	4620      	mov	r0, r4
    7920:	f011 fa36 	bl	18d90 <atomic_set_bit>
}
    7924:	b002      	add	sp, #8
    7926:	bd10      	pop	{r4, pc}
    7928:	0001f55c 	.word	0x0001f55c
    792c:	000074a9 	.word	0x000074a9

00007930 <notify_cb>:
{
    7930:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    7932:	4b32      	ldr	r3, [pc, #200]	; (79fc <notify_cb+0xcc>)
{
    7934:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    7936:	6882      	ldr	r2, [r0, #8]
    7938:	429a      	cmp	r2, r3
{
    793a:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    793c:	d12e      	bne.n	799c <notify_cb+0x6c>
	ccc = attr->user_data;
    793e:	68c7      	ldr	r7, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
    7940:	4b2f      	ldr	r3, [pc, #188]	; (7a00 <notify_cb+0xd0>)
    7942:	429f      	cmp	r7, r3
    7944:	d11a      	bne.n	797c <notify_cb+0x4c>
    7946:	4d2f      	ldr	r5, [pc, #188]	; (7a04 <notify_cb+0xd4>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    7948:	2300      	movs	r3, #0
    794a:	2207      	movs	r2, #7
    794c:	4669      	mov	r1, sp
    794e:	1c68      	adds	r0, r5, #1
    7950:	9300      	str	r3, [sp, #0]
    7952:	f8cd 3003 	str.w	r3, [sp, #3]
    7956:	f00f fc6c 	bl	17232 <memcmp>
    795a:	b178      	cbz	r0, 797c <notify_cb+0x4c>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
    795c:	4629      	mov	r1, r5
    795e:	2207      	movs	r2, #7
    7960:	f811 0b01 	ldrb.w	r0, [r1], #1
    7964:	f7fe fda2 	bl	64ac <bt_conn_lookup_state_le>
			if (!conn) {
    7968:	b9e0      	cbnz	r0, 79a4 <notify_cb+0x74>
				sc = (struct sc_data *)data->ind_params->data;
    796a:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
    796c:	4629      	mov	r1, r5
				sc = (struct sc_data *)data->ind_params->data;
    796e:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
    7970:	f811 0b01 	ldrb.w	r0, [r1], #1
    7974:	8853      	ldrh	r3, [r2, #2]
    7976:	8812      	ldrh	r2, [r2, #0]
    7978:	f011 fb97 	bl	190aa <sc_save>
		if (cfg->value != data->type) {
    797c:	893a      	ldrh	r2, [r7, #8]
    797e:	89a3      	ldrh	r3, [r4, #12]
    7980:	429a      	cmp	r2, r3
    7982:	d10b      	bne.n	799c <notify_cb+0x6c>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    7984:	4639      	mov	r1, r7
    7986:	f811 0b01 	ldrb.w	r0, [r1], #1
    798a:	f7fe fd71 	bl	6470 <bt_conn_lookup_addr_le>
		if (!conn) {
    798e:	4605      	mov	r5, r0
    7990:	b120      	cbz	r0, 799c <notify_cb+0x6c>
		if (conn->state != BT_CONN_CONNECTED) {
    7992:	7a83      	ldrb	r3, [r0, #10]
    7994:	2b07      	cmp	r3, #7
    7996:	d008      	beq.n	79aa <notify_cb+0x7a>
			bt_conn_unref(conn);
    7998:	f010 fb21 	bl	17fde <bt_conn_unref>
	return BT_GATT_ITER_CONTINUE;
    799c:	2701      	movs	r7, #1
}
    799e:	4638      	mov	r0, r7
    79a0:	b003      	add	sp, #12
    79a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bt_conn_unref(conn);
    79a4:	f010 fb1b 	bl	17fde <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    79a8:	e7e8      	b.n	797c <notify_cb+0x4c>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
    79aa:	697b      	ldr	r3, [r7, #20]
    79ac:	b123      	cbz	r3, 79b8 <notify_cb+0x88>
    79ae:	4631      	mov	r1, r6
    79b0:	4798      	blx	r3
    79b2:	b908      	cbnz	r0, 79b8 <notify_cb+0x88>
			bt_conn_unref(conn);
    79b4:	4628      	mov	r0, r5
    79b6:	e7ef      	b.n	7998 <notify_cb+0x68>
		if (bt_gatt_check_perm(conn, attr,
    79b8:	2214      	movs	r2, #20
    79ba:	4631      	mov	r1, r6
    79bc:	4628      	mov	r0, r5
    79be:	f011 fc35 	bl	1922c <bt_gatt_check_perm>
    79c2:	4607      	mov	r7, r0
    79c4:	2800      	cmp	r0, #0
    79c6:	d1e9      	bne.n	799c <notify_cb+0x6c>
		if (data->type == BT_GATT_CCC_INDICATE) {
    79c8:	89a3      	ldrh	r3, [r4, #12]
			err = gatt_indicate(conn, data->handle,
    79ca:	88a1      	ldrh	r1, [r4, #4]
    79cc:	6922      	ldr	r2, [r4, #16]
		if (data->type == BT_GATT_CCC_INDICATE) {
    79ce:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
    79d0:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
    79d2:	d10f      	bne.n	79f4 <notify_cb+0xc4>
			err = gatt_indicate(conn, data->handle,
    79d4:	f7ff feb0 	bl	7738 <gatt_indicate>
			if (err == 0) {
    79d8:	4606      	mov	r6, r0
    79da:	b918      	cbnz	r0, 79e4 <notify_cb+0xb4>
				data->ind_params->_ref++;
    79dc:	6922      	ldr	r2, [r4, #16]
    79de:	7d93      	ldrb	r3, [r2, #22]
    79e0:	3301      	adds	r3, #1
    79e2:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
    79e4:	4628      	mov	r0, r5
    79e6:	f010 fafa 	bl	17fde <bt_conn_unref>
		if (err < 0) {
    79ea:	2e00      	cmp	r6, #0
    79ec:	dbd7      	blt.n	799e <notify_cb+0x6e>
		data->err = 0;
    79ee:	2300      	movs	r3, #0
    79f0:	60a3      	str	r3, [r4, #8]
    79f2:	e7d3      	b.n	799c <notify_cb+0x6c>
			err = gatt_notify(conn, data->handle, data->nfy_params);
    79f4:	f011 fc3d 	bl	19272 <gatt_notify>
    79f8:	4606      	mov	r6, r0
    79fa:	e7f3      	b.n	79e4 <notify_cb+0xb4>
    79fc:	00018fbf 	.word	0x00018fbf
    7a00:	20000304 	.word	0x20000304
    7a04:	20002b04 	.word	0x20002b04

00007a08 <update_ccc>:
{
    7a08:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    7a0a:	4b24      	ldr	r3, [pc, #144]	; (7a9c <update_ccc+0x94>)
	struct bt_conn *conn = data->conn;
    7a0c:	6814      	ldr	r4, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
    7a0e:	6882      	ldr	r2, [r0, #8]
    7a10:	429a      	cmp	r2, r3
{
    7a12:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    7a14:	d13f      	bne.n	7a96 <update_ccc+0x8e>
	ccc = attr->user_data;
    7a16:	68c6      	ldr	r6, [r0, #12]
		if (!cfg->value ||
    7a18:	8933      	ldrh	r3, [r6, #8]
    7a1a:	2b00      	cmp	r3, #0
    7a1c:	d03b      	beq.n	7a96 <update_ccc+0x8e>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    7a1e:	4632      	mov	r2, r6
    7a20:	4620      	mov	r0, r4
    7a22:	f812 1b01 	ldrb.w	r1, [r2], #1
    7a26:	f010 fb21 	bl	1806c <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
    7a2a:	2800      	cmp	r0, #0
    7a2c:	d033      	beq.n	7a96 <update_ccc+0x8e>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
    7a2e:	222a      	movs	r2, #42	; 0x2a
    7a30:	4629      	mov	r1, r5
    7a32:	4620      	mov	r0, r4
    7a34:	f011 fbfa 	bl	1922c <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
    7a38:	2803      	cmp	r0, #3
    7a3a:	d02c      	beq.n	7a96 <update_ccc+0x8e>
		gatt_ccc_changed(attr, ccc);
    7a3c:	4631      	mov	r1, r6
    7a3e:	4628      	mov	r0, r5
    7a40:	f011 f910 	bl	18c64 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
    7a44:	4b16      	ldr	r3, [pc, #88]	; (7aa0 <update_ccc+0x98>)
    7a46:	429e      	cmp	r6, r3
    7a48:	d125      	bne.n	7a96 <update_ccc+0x8e>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
    7a4a:	7a20      	ldrb	r0, [r4, #8]
    7a4c:	f104 0188 	add.w	r1, r4, #136	; 0x88
    7a50:	f7ff fccc 	bl	73ec <find_sc_cfg>
	if (!cfg) {
    7a54:	b1f8      	cbz	r0, 7a96 <update_ccc+0x8e>
	if (!(cfg->data.start || cfg->data.end)) {
    7a56:	8902      	ldrh	r2, [r0, #8]
    7a58:	8943      	ldrh	r3, [r0, #10]
    7a5a:	ea53 0102 	orrs.w	r1, r3, r2
    7a5e:	d01a      	beq.n	7a96 <update_ccc+0x8e>
	index = bt_conn_index(conn);
    7a60:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
    7a62:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
    7a66:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
    7a6a:	f7fe fc43 	bl	62f4 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    7a6e:	490d      	ldr	r1, [pc, #52]	; (7aa4 <update_ccc+0x9c>)
    7a70:	4a0d      	ldr	r2, [pc, #52]	; (7aa8 <update_ccc+0xa0>)
    7a72:	2318      	movs	r3, #24
    7a74:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    7a78:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    7a7a:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
    7a7c:	4a0b      	ldr	r2, [pc, #44]	; (7aac <update_ccc+0xa4>)
    7a7e:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
    7a80:	aa01      	add	r2, sp, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    7a82:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].data = &sc_range[0];
    7a86:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
    7a88:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    7a8a:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
    7a8e:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    7a90:	4620      	mov	r0, r4
    7a92:	f7ff fe9b 	bl	77cc <bt_gatt_indicate>
}
    7a96:	2001      	movs	r0, #1
    7a98:	b002      	add	sp, #8
    7a9a:	bd70      	pop	{r4, r5, r6, pc}
    7a9c:	00018fbf 	.word	0x00018fbf
    7aa0:	20000304 	.word	0x20000304
    7aa4:	200019b8 	.word	0x200019b8
    7aa8:	0001f55c 	.word	0x0001f55c
    7aac:	0001913f 	.word	0x0001913f

00007ab0 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
    7ab0:	b507      	push	{r0, r1, r2, lr}
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    7ab2:	4a06      	ldr	r2, [pc, #24]	; (7acc <bt_gatt_connected+0x1c>)
	data.conn = conn;
    7ab4:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    7ab6:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
    7ab8:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    7aba:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
    7abe:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    7ac2:	f011 fba6 	bl	19212 <bt_gatt_foreach_attr>
	 * CF storage on pairing complete.
	 */
	bt_conn_cb_register(&gatt_conn_cb);
#endif /* CONFIG_BT_SETTINGS && CONFIG_BT_SMP */
#endif /* CONFIG_BT_GATT_CLIENT */
}
    7ac6:	b003      	add	sp, #12
    7ac8:	f85d fb04 	ldr.w	pc, [sp], #4
    7acc:	00007a09 	.word	0x00007a09

00007ad0 <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
    7ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return list->head;
    7ad2:	4b08      	ldr	r3, [pc, #32]	; (7af4 <bt_gatt_att_max_mtu_changed+0x24>)
    7ad4:	681c      	ldr	r4, [r3, #0]
    7ad6:	4605      	mov	r5, r0
    7ad8:	460e      	mov	r6, r1
    7ada:	4617      	mov	r7, r2
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    7adc:	b14c      	cbz	r4, 7af2 <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
    7ade:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    7ae2:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
    7ae4:	b11b      	cbz	r3, 7aee <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
    7ae6:	463a      	mov	r2, r7
    7ae8:	4631      	mov	r1, r6
    7aea:	4628      	mov	r0, r5
    7aec:	4798      	blx	r3
	return node->next;
    7aee:	6864      	ldr	r4, [r4, #4]
    7af0:	e7f4      	b.n	7adc <bt_gatt_att_max_mtu_changed+0xc>
		}
	}
}
    7af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7af4:	2000199c 	.word	0x2000199c

00007af8 <db_hash_read>:
{
    7af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
    7afa:	4915      	ldr	r1, [pc, #84]	; (7b50 <db_hash_read+0x58>)
{
    7afc:	f8bd 6018 	ldrh.w	r6, [sp, #24]
    7b00:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
    7b02:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
    7b06:	461f      	mov	r7, r3
    7b08:	4615      	mov	r5, r2
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
    7b0a:	f016 fe34 	bl	1e776 <k_work_cancel_delayable_sync>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7b0e:	f3bf 8f5b 	dmb	ish
    7b12:	4b10      	ldr	r3, [pc, #64]	; (7b54 <db_hash_read+0x5c>)
    7b14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    7b16:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
    7b1a:	075b      	lsls	r3, r3, #29
    7b1c:	d401      	bmi.n	7b22 <db_hash_read+0x2a>
		db_hash_gen(true);
    7b1e:	f7ff fdd1 	bl	76c4 <db_hash_gen.constprop.0>
	(void)bt_gatt_change_aware(conn, true);
    7b22:	2101      	movs	r1, #1
    7b24:	4620      	mov	r0, r4
    7b26:	f011 fbd7 	bl	192d8 <bt_gatt_change_aware>
	if (offset > value_len) {
    7b2a:	2e10      	cmp	r6, #16
    7b2c:	d80c      	bhi.n	7b48 <db_hash_read+0x50>
	len = MIN(buf_len, value_len - offset);
    7b2e:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
    7b32:	4909      	ldr	r1, [pc, #36]	; (7b58 <db_hash_read+0x60>)
	len = MIN(buf_len, value_len - offset);
    7b34:	42bc      	cmp	r4, r7
    7b36:	bfa8      	it	ge
    7b38:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
    7b3a:	4622      	mov	r2, r4
    7b3c:	4431      	add	r1, r6
    7b3e:	4628      	mov	r0, r5
    7b40:	f00f fb88 	bl	17254 <memcpy>
}
    7b44:	4620      	mov	r0, r4
    7b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    7b48:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
    7b4c:	e7fa      	b.n	7b44 <db_hash_read+0x4c>
    7b4e:	bf00      	nop
    7b50:	20000f88 	.word	0x20000f88
    7b54:	20000fb0 	.word	0x20000fb0
    7b58:	20000f48 	.word	0x20000f48

00007b5c <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
    7b5c:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    7b5e:	4603      	mov	r3, r0
    7b60:	4a14      	ldr	r2, [pc, #80]	; (7bb4 <bt_gatt_disconnected+0x58>)
{
    7b62:	4605      	mov	r5, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    7b64:	f64f 71ff 	movw	r1, #65535	; 0xffff
    7b68:	2001      	movs	r0, #1
    7b6a:	f011 fb52 	bl	19212 <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
    7b6e:	4628      	mov	r0, r5
    7b70:	f7ff fc1e 	bl	73b0 <find_cf_cfg>
	if (!cfg) {
    7b74:	4604      	mov	r4, r0
    7b76:	b1e0      	cbz	r0, 7bb2 <bt_gatt_disconnected+0x56>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    7b78:	f105 0688 	add.w	r6, r5, #136	; 0x88
    7b7c:	7a28      	ldrb	r0, [r5, #8]
    7b7e:	4631      	mov	r1, r6
    7b80:	f00f ffa2 	bl	17ac8 <bt_addr_le_is_bonded>
    7b84:	b920      	cbnz	r0, 7b90 <bt_gatt_disconnected+0x34>
		clear_cf_cfg(cfg);
    7b86:	4620      	mov	r0, r4
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
    7b88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		clear_cf_cfg(cfg);
    7b8c:	f011 b8e3 	b.w	18d56 <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    7b90:	1c60      	adds	r0, r4, #1
    7b92:	4631      	mov	r1, r6
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7b94:	340c      	adds	r4, #12
    7b96:	f011 f8db 	bl	18d50 <bt_addr_le_copy>
    7b9a:	f3bf 8f5b 	dmb	ish
    7b9e:	e854 3f00 	ldrex	r3, [r4]
    7ba2:	f023 0302 	bic.w	r3, r3, #2
    7ba6:	e844 3200 	strex	r2, r3, [r4]
    7baa:	2a00      	cmp	r2, #0
    7bac:	d1f7      	bne.n	7b9e <bt_gatt_disconnected+0x42>
    7bae:	f3bf 8f5b 	dmb	ish
}
    7bb2:	bd70      	pop	{r4, r5, r6, pc}
    7bb4:	0000740d 	.word	0x0000740d

00007bb8 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
    7bb8:	4b04      	ldr	r3, [pc, #16]	; (7bcc <bt_smp_accept+0x14>)
    7bba:	6818      	ldr	r0, [r3, #0]
    7bbc:	b918      	cbnz	r0, 7bc6 <bt_smp_accept+0xe>
			continue;
		}

		smp->chan.ops = &ops;
    7bbe:	4a04      	ldr	r2, [pc, #16]	; (7bd0 <bt_smp_accept+0x18>)
    7bc0:	605a      	str	r2, [r3, #4]

		*chan = &smp->chan;
    7bc2:	600b      	str	r3, [r1, #0]

		return 0;
    7bc4:	4770      	bx	lr
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
    7bc6:	f06f 000b 	mvn.w	r0, #11
}
    7bca:	4770      	bx	lr
    7bcc:	20001008 	.word	0x20001008
    7bd0:	0001f660 	.word	0x0001f660

00007bd4 <bt_mesh_reset>:

	return -ENOTSUP;
}

void bt_mesh_reset(void)
{
    7bd4:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7bd6:	481a      	ldr	r0, [pc, #104]	; (7c40 <bt_mesh_reset+0x6c>)
    7bd8:	f3bf 8f5b 	dmb	ish
    7bdc:	6803      	ldr	r3, [r0, #0]
    7bde:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
    7be2:	07db      	lsls	r3, r3, #31
    7be4:	d52b      	bpl.n	7c3e <bt_mesh_reset+0x6a>
		return;
	}

	bt_mesh.iv_index = 0U;
    7be6:	2400      	movs	r4, #0
	bt_mesh.ivu_duration = 0;
	bt_mesh.seq = 0U;

	memset(bt_mesh.flags, 0, sizeof(bt_mesh.flags));
    7be8:	4621      	mov	r1, r4
    7bea:	2204      	movs	r2, #4
	bt_mesh.iv_index = 0U;
    7bec:	f1a0 0508 	sub.w	r5, r0, #8
    7bf0:	f840 4c08 	str.w	r4, [r0, #-8]
	bt_mesh.ivu_duration = 0;
    7bf4:	7704      	strb	r4, [r0, #28]
	bt_mesh.seq = 0U;
    7bf6:	f840 4c04 	str.w	r4, [r0, #-4]
	memset(bt_mesh.flags, 0, sizeof(bt_mesh.flags));
    7bfa:	f00f fb36 	bl	1726a <memset>

	/* If this fails, the work handler will return early on the next
	 * execution, as the device is not provisioned. If the device is
	 * reprovisioned, the timer is always restarted.
	 */
	(void)k_work_cancel_delayable(&bt_mesh.ivu_timer);
    7bfe:	f105 0028 	add.w	r0, r5, #40	; 0x28
    7c02:	f016 fda4 	bl	1e74e <k_work_cancel_delayable>

	bt_mesh_model_reset();
    7c06:	f003 f845 	bl	ac94 <bt_mesh_model_reset>
	bt_mesh_cfg_default_set();
    7c0a:	f000 f925 	bl	7e58 <bt_mesh_cfg_default_set>
	bt_mesh_trans_reset();
    7c0e:	f002 f87d 	bl	9d0c <bt_mesh_trans_reset>
	bt_mesh_app_keys_reset();
    7c12:	f001 fa7b 	bl	910c <bt_mesh_app_keys_reset>
	bt_mesh_net_keys_reset();
    7c16:	f001 f8ad 	bl	8d74 <bt_mesh_net_keys_reset>

	bt_mesh_net_loopback_clear(BT_MESH_KEY_ANY);
    7c1a:	f64f 70ff 	movw	r0, #65535	; 0xffff
    7c1e:	f000 fdd1 	bl	87c4 <bt_mesh_net_loopback_clear>

	if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		bt_mesh_net_clear();
	}

	(void)memset(bt_mesh.dev_key, 0, sizeof(bt_mesh.dev_key));
    7c22:	4621      	mov	r1, r4
    7c24:	2210      	movs	r2, #16
    7c26:	f105 0058 	add.w	r0, r5, #88	; 0x58
    7c2a:	f00f fb1e 	bl	1726a <memset>

	bt_mesh_scan_disable();
    7c2e:	f011 fc3c 	bl	194aa <bt_mesh_scan_disable>
	bt_mesh_beacon_disable();
    7c32:	f000 fb09 	bl	8248 <bt_mesh_beacon_disable>
	bt_mesh_comp_unprovision();

	if (IS_ENABLED(CONFIG_BT_MESH_PROV)) {
		bt_mesh_prov_reset();
	}
}
    7c36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_mesh_comp_unprovision();
    7c3a:	f002 bd2f 	b.w	a69c <bt_mesh_comp_unprovision>
}
    7c3e:	bd38      	pop	{r3, r4, r5, pc}
    7c40:	20001128 	.word	0x20001128

00007c44 <bt_mesh_is_provisioned>:
    7c44:	4b04      	ldr	r3, [pc, #16]	; (7c58 <bt_mesh_is_provisioned+0x14>)
    7c46:	f3bf 8f5b 	dmb	ish
    7c4a:	6818      	ldr	r0, [r3, #0]
    7c4c:	f3bf 8f5b 	dmb	ish

bool bt_mesh_is_provisioned(void)
{
	return atomic_test_bit(bt_mesh.flags, BT_MESH_VALID);
}
    7c50:	f000 0001 	and.w	r0, r0, #1
    7c54:	4770      	bx	lr
    7c56:	bf00      	nop
    7c58:	20001128 	.word	0x20001128

00007c5c <bt_mesh_start>:
		mod->cb->start(mod);
	}
}

int bt_mesh_start(void)
{
    7c5c:	b510      	push	{r4, lr}
	int err;

	err = bt_mesh_adv_enable();
    7c5e:	f003 f919 	bl	ae94 <bt_mesh_adv_enable>
	if (err) {
    7c62:	4604      	mov	r4, r0
    7c64:	b960      	cbnz	r0, 7c80 <bt_mesh_start+0x24>
		BT_ERR("Failed enabling advertiser");
		return err;
	}

	if (bt_mesh_beacon_enabled()) {
    7c66:	f000 f877 	bl	7d58 <bt_mesh_beacon_enabled>
    7c6a:	b158      	cbz	r0, 7c84 <bt_mesh_start+0x28>
		bt_mesh_beacon_enable();
    7c6c:	f000 fada 	bl	8224 <bt_mesh_beacon_enable>
	}

	if (IS_ENABLED(CONFIG_BT_MESH_LOW_POWER)) {
		bt_mesh_lpn_init();
	} else {
		bt_mesh_scan_enable();
    7c70:	f000 f96e 	bl	7f50 <bt_mesh_scan_enable>
		uint16_t addr = bt_mesh_primary_addr();

		bt_mesh_prov_complete(sub->net_idx, addr);
	}

	bt_mesh_hb_start();
    7c74:	f002 faa0 	bl	a1b8 <bt_mesh_hb_start>

	bt_mesh_model_foreach(model_start, NULL);
    7c78:	4804      	ldr	r0, [pc, #16]	; (7c8c <bt_mesh_start+0x30>)
    7c7a:	2100      	movs	r1, #0
    7c7c:	f002 fbea 	bl	a454 <bt_mesh_model_foreach>

	return 0;
}
    7c80:	4620      	mov	r0, r4
    7c82:	bd10      	pop	{r4, pc}
		bt_mesh_beacon_disable();
    7c84:	f000 fae0 	bl	8248 <bt_mesh_beacon_disable>
    7c88:	e7f2      	b.n	7c70 <bt_mesh_start+0x14>
    7c8a:	bf00      	nop
    7c8c:	00019393 	.word	0x00019393

00007c90 <bt_mesh_provision>:
{
    7c90:	b538      	push	{r3, r4, r5, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7c92:	4c1c      	ldr	r4, [pc, #112]	; (7d04 <bt_mesh_provision+0x74>)
    7c94:	f3bf 8f5b 	dmb	ish
    7c98:	4605      	mov	r5, r0
    7c9a:	4608      	mov	r0, r1
    7c9c:	4611      	mov	r1, r2
    7c9e:	e854 2f00 	ldrex	r2, [r4]
    7ca2:	f042 0c01 	orr.w	ip, r2, #1
    7ca6:	e844 ce00 	strex	lr, ip, [r4]
    7caa:	f1be 0f00 	cmp.w	lr, #0
    7cae:	d1f6      	bne.n	7c9e <bt_mesh_provision+0xe>
    7cb0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_mesh.flags, BT_MESH_VALID)) {
    7cb4:	07d2      	lsls	r2, r2, #31
    7cb6:	d421      	bmi.n	7cfc <bt_mesh_provision+0x6c>
	err = bt_mesh_net_create(net_idx, flags, net_key, iv_index);
    7cb8:	462a      	mov	r2, r5
    7cba:	f000 fbd1 	bl	8460 <bt_mesh_net_create>
	if (err) {
    7cbe:	4605      	mov	r5, r0
    7cc0:	b168      	cbz	r0, 7cde <bt_mesh_provision+0x4e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7cc2:	f3bf 8f5b 	dmb	ish
    7cc6:	e854 3f00 	ldrex	r3, [r4]
    7cca:	f023 0301 	bic.w	r3, r3, #1
    7cce:	e844 3200 	strex	r2, r3, [r4]
    7cd2:	2a00      	cmp	r2, #0
    7cd4:	d1f7      	bne.n	7cc6 <bt_mesh_provision+0x36>
    7cd6:	f3bf 8f5b 	dmb	ish
}
    7cda:	4628      	mov	r0, r5
    7cdc:	bd38      	pop	{r3, r4, r5, pc}
	bt_mesh.seq = 0U;
    7cde:	f844 0c04 	str.w	r0, [r4, #-4]
	bt_mesh_comp_provision(addr);
    7ce2:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    7ce6:	f002 fcc3 	bl	a670 <bt_mesh_comp_provision>
	memcpy(bt_mesh.dev_key, dev_key, 16);
    7cea:	9905      	ldr	r1, [sp, #20]
    7cec:	2210      	movs	r2, #16
    7cee:	f104 0050 	add.w	r0, r4, #80	; 0x50
    7cf2:	f00f faaf 	bl	17254 <memcpy>
	bt_mesh_start();
    7cf6:	f7ff ffb1 	bl	7c5c <bt_mesh_start>
	return 0;
    7cfa:	e7ee      	b.n	7cda <bt_mesh_provision+0x4a>
		return -EALREADY;
    7cfc:	f06f 0577 	mvn.w	r5, #119	; 0x77
    7d00:	e7eb      	b.n	7cda <bt_mesh_provision+0x4a>
    7d02:	bf00      	nop
    7d04:	20001128 	.word	0x20001128

00007d08 <bt_mesh_beacon_set>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7d08:	4b12      	ldr	r3, [pc, #72]	; (7d54 <bt_mesh_beacon_set+0x4c>)
    7d0a:	f3bf 8f5b 	dmb	ish
    7d0e:	681a      	ldr	r2, [r3, #0]
    7d10:	f3bf 8f5b 	dmb	ish
	uint8_t default_ttl;
};

void bt_mesh_beacon_set(bool beacon)
{
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_BEACON) == beacon) {
    7d14:	f3c2 12c0 	ubfx	r2, r2, #7, #1
    7d18:	4290      	cmp	r0, r2
    7d1a:	d01a      	beq.n	7d52 <bt_mesh_beacon_set+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7d1c:	f3bf 8f5b 	dmb	ish
	if (val) {
    7d20:	b158      	cbz	r0, 7d3a <bt_mesh_beacon_set+0x32>
    7d22:	e853 2f00 	ldrex	r2, [r3]
    7d26:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    7d2a:	e843 2100 	strex	r1, r2, [r3]
    7d2e:	2900      	cmp	r1, #0
    7d30:	d1f7      	bne.n	7d22 <bt_mesh_beacon_set+0x1a>
    7d32:	f3bf 8f5b 	dmb	ish
	}

	atomic_set_bit_to(bt_mesh.flags, BT_MESH_BEACON, beacon);

	if (beacon) {
		bt_mesh_beacon_enable();
    7d36:	f000 ba75 	b.w	8224 <bt_mesh_beacon_enable>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7d3a:	e853 2f00 	ldrex	r2, [r3]
    7d3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    7d42:	e843 2100 	strex	r1, r2, [r3]
    7d46:	2900      	cmp	r1, #0
    7d48:	d1f7      	bne.n	7d3a <bt_mesh_beacon_set+0x32>
    7d4a:	f3bf 8f5b 	dmb	ish
	} else {
		bt_mesh_beacon_disable();
    7d4e:	f000 ba7b 	b.w	8248 <bt_mesh_beacon_disable>

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
	}
}
    7d52:	4770      	bx	lr
    7d54:	20001128 	.word	0x20001128

00007d58 <bt_mesh_beacon_enabled>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7d58:	4b04      	ldr	r3, [pc, #16]	; (7d6c <bt_mesh_beacon_enabled+0x14>)
    7d5a:	f3bf 8f5b 	dmb	ish
    7d5e:	6818      	ldr	r0, [r3, #0]
    7d60:	f3bf 8f5b 	dmb	ish

bool bt_mesh_beacon_enabled(void)
{
	return atomic_test_bit(bt_mesh.flags, BT_MESH_BEACON);
}
    7d64:	f3c0 10c0 	ubfx	r0, r0, #7, #1
    7d68:	4770      	bx	lr
    7d6a:	bf00      	nop
    7d6c:	20001128 	.word	0x20001128

00007d70 <bt_mesh_default_ttl_set>:
	return feature_get(BT_MESH_GATT_PROXY);
}

int bt_mesh_default_ttl_set(uint8_t default_ttl)
{
	if (default_ttl == 1 || default_ttl > BT_MESH_TTL_MAX) {
    7d70:	2801      	cmp	r0, #1
    7d72:	d00a      	beq.n	7d8a <bt_mesh_default_ttl_set+0x1a>
    7d74:	0603      	lsls	r3, r0, #24
    7d76:	d408      	bmi.n	7d8a <bt_mesh_default_ttl_set+0x1a>
		return -EINVAL;
	}

	if (default_ttl == bt_mesh.default_ttl) {
    7d78:	4b05      	ldr	r3, [pc, #20]	; (7d90 <bt_mesh_default_ttl_set+0x20>)
    7d7a:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
    7d7e:	4282      	cmp	r2, r0
    7d80:	d001      	beq.n	7d86 <bt_mesh_default_ttl_set+0x16>
		return 0;
	}

	bt_mesh.default_ttl = default_ttl;
    7d82:	f883 0027 	strb.w	r0, [r3, #39]	; 0x27
		return 0;
    7d86:	2000      	movs	r0, #0
	    atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
	}

	return 0;
}
    7d88:	4770      	bx	lr
		return -EINVAL;
    7d8a:	f06f 0015 	mvn.w	r0, #21
    7d8e:	4770      	bx	lr
    7d90:	20001120 	.word	0x20001120

00007d94 <bt_mesh_default_ttl_get>:

uint8_t bt_mesh_default_ttl_get(void)
{
	return bt_mesh.default_ttl;
}
    7d94:	4b01      	ldr	r3, [pc, #4]	; (7d9c <bt_mesh_default_ttl_get+0x8>)
    7d96:	f893 0027 	ldrb.w	r0, [r3, #39]	; 0x27
    7d9a:	4770      	bx	lr
    7d9c:	20001120 	.word	0x20001120

00007da0 <bt_mesh_net_transmit_set>:
	return feature_get(BT_MESH_FRIEND);
}

void bt_mesh_net_transmit_set(uint8_t xmit)
{
	if (bt_mesh.net_xmit == xmit) {
    7da0:	4b03      	ldr	r3, [pc, #12]	; (7db0 <bt_mesh_net_transmit_set+0x10>)
    7da2:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
    7da6:	4282      	cmp	r2, r0
		return;
	}

	bt_mesh.net_xmit = xmit;
    7da8:	bf18      	it	ne
    7daa:	f883 0025 	strbne.w	r0, [r3, #37]	; 0x25

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
	}
}
    7dae:	4770      	bx	lr
    7db0:	20001120 	.word	0x20001120

00007db4 <bt_mesh_net_transmit_get>:

uint8_t bt_mesh_net_transmit_get(void)
{
	return bt_mesh.net_xmit;
}
    7db4:	4b01      	ldr	r3, [pc, #4]	; (7dbc <bt_mesh_net_transmit_get+0x8>)
    7db6:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
    7dba:	4770      	bx	lr
    7dbc:	20001120 	.word	0x20001120

00007dc0 <bt_mesh_relay_set>:
	if (state != BT_MESH_FEATURE_DISABLED &&
    7dc0:	2801      	cmp	r0, #1

int bt_mesh_relay_set(enum bt_mesh_feat_state relay, uint8_t xmit)
{
    7dc2:	b510      	push	{r4, lr}
	if (state != BT_MESH_FEATURE_DISABLED &&
    7dc4:	d831      	bhi.n	7e2a <bt_mesh_relay_set+0x6a>
    7dc6:	f3bf 8f5b 	dmb	ish
    7dca:	4b19      	ldr	r3, [pc, #100]	; (7e30 <bt_mesh_relay_set+0x70>)
    7dcc:	461a      	mov	r2, r3
	    (state == BT_MESH_FEATURE_ENABLED)) {
    7dce:	f000 0001 	and.w	r0, r0, #1
    7dd2:	f852 4908 	ldr.w	r4, [r2], #-8
    7dd6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_mesh.flags, feature_flag) ==
    7dda:	f3c4 1480 	ubfx	r4, r4, #6, #1
    7dde:	42a0      	cmp	r0, r4
    7de0:	d01c      	beq.n	7e1c <bt_mesh_relay_set+0x5c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7de2:	f3bf 8f5b 	dmb	ish
    7de6:	b180      	cbz	r0, 7e0a <bt_mesh_relay_set+0x4a>
    7de8:	e853 0f00 	ldrex	r0, [r3]
    7dec:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    7df0:	e843 0400 	strex	r4, r0, [r3]
    7df4:	2c00      	cmp	r4, #0
    7df6:	d1f7      	bne.n	7de8 <bt_mesh_relay_set+0x28>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7df8:	f3bf 8f5b 	dmb	ish
	if (err == -EALREADY && bt_mesh.relay_xmit == xmit) {
		return -EALREADY;
	}

	bt_mesh.relay_xmit = xmit;
	bt_mesh_hb_feature_changed(BT_MESH_FEAT_RELAY);
    7dfc:	2001      	movs	r0, #1
	bt_mesh.relay_xmit = xmit;
    7dfe:	f882 1026 	strb.w	r1, [r2, #38]	; 0x26
	bt_mesh_hb_feature_changed(BT_MESH_FEAT_RELAY);
    7e02:	f002 f9b3 	bl	a16c <bt_mesh_hb_feature_changed>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
	}

	return 0;
    7e06:	2000      	movs	r0, #0
}
    7e08:	bd10      	pop	{r4, pc}
    7e0a:	e853 0f00 	ldrex	r0, [r3]
    7e0e:	f020 0040 	bic.w	r0, r0, #64	; 0x40
    7e12:	e843 0400 	strex	r4, r0, [r3]
    7e16:	2c00      	cmp	r4, #0
    7e18:	d0ee      	beq.n	7df8 <bt_mesh_relay_set+0x38>
    7e1a:	e7f6      	b.n	7e0a <bt_mesh_relay_set+0x4a>
	if (err == -EALREADY && bt_mesh.relay_xmit == xmit) {
    7e1c:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
    7e20:	428b      	cmp	r3, r1
    7e22:	d1eb      	bne.n	7dfc <bt_mesh_relay_set+0x3c>
		return -EALREADY;
    7e24:	f06f 0077 	mvn.w	r0, #119	; 0x77
    7e28:	e7ee      	b.n	7e08 <bt_mesh_relay_set+0x48>
		return err;
    7e2a:	f06f 0015 	mvn.w	r0, #21
    7e2e:	e7eb      	b.n	7e08 <bt_mesh_relay_set+0x48>
    7e30:	20001128 	.word	0x20001128

00007e34 <bt_mesh_relay_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7e34:	4b04      	ldr	r3, [pc, #16]	; (7e48 <bt_mesh_relay_get+0x14>)
    7e36:	f3bf 8f5b 	dmb	ish
    7e3a:	6818      	ldr	r0, [r3, #0]
    7e3c:	f3bf 8f5b 	dmb	ish

enum bt_mesh_feat_state bt_mesh_relay_get(void)
{
	return feature_get(BT_MESH_RELAY);
}
    7e40:	f3c0 1080 	ubfx	r0, r0, #6, #1
    7e44:	4770      	bx	lr
    7e46:	bf00      	nop
    7e48:	20001128 	.word	0x20001128

00007e4c <bt_mesh_relay_retransmit_get>:
	if (!IS_ENABLED(CONFIG_BT_MESH_RELAY)) {
		return 0;
	}

	return bt_mesh.relay_xmit;
}
    7e4c:	4b01      	ldr	r3, [pc, #4]	; (7e54 <bt_mesh_relay_retransmit_get+0x8>)
    7e4e:	f893 0026 	ldrb.w	r0, [r3, #38]	; 0x26
    7e52:	4770      	bx	lr
    7e54:	20001120 	.word	0x20001120

00007e58 <bt_mesh_cfg_default_set>:
}

void bt_mesh_cfg_default_set(void)
{
	bt_mesh.default_ttl = CONFIG_BT_MESH_DEFAULT_TTL;
	bt_mesh.net_xmit =
    7e58:	4b10      	ldr	r3, [pc, #64]	; (7e9c <bt_mesh_cfg_default_set+0x44>)
    7e5a:	220a      	movs	r2, #10
    7e5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		BT_MESH_TRANSMIT(CONFIG_BT_MESH_NETWORK_TRANSMIT_COUNT,
				 CONFIG_BT_MESH_NETWORK_TRANSMIT_INTERVAL);

#if defined(CONFIG_BT_MESH_RELAY)
	bt_mesh.relay_xmit =
    7e60:	f240 720a 	movw	r2, #1802	; 0x70a
    7e64:	84da      	strh	r2, [r3, #38]	; 0x26
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7e66:	3308      	adds	r3, #8
    7e68:	f3bf 8f5b 	dmb	ish
    7e6c:	e853 2f00 	ldrex	r2, [r3]
    7e70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    7e74:	e843 2100 	strex	r1, r2, [r3]
    7e78:	2900      	cmp	r1, #0
    7e7a:	d1f7      	bne.n	7e6c <bt_mesh_cfg_default_set+0x14>
    7e7c:	f3bf 8f5b 	dmb	ish
    7e80:	f3bf 8f5b 	dmb	ish
    7e84:	e853 2f00 	ldrex	r2, [r3]
    7e88:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    7e8c:	e843 2100 	strex	r1, r2, [r3]
    7e90:	2900      	cmp	r1, #0
    7e92:	d1f7      	bne.n	7e84 <bt_mesh_cfg_default_set+0x2c>
    7e94:	f3bf 8f5b 	dmb	ish
	}

	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND_ENABLED)) {
		atomic_set_bit(bt_mesh.flags, BT_MESH_FRIEND);
	}
}
    7e98:	4770      	bx	lr
    7e9a:	bf00      	nop
    7e9c:	20001120 	.word	0x20001120

00007ea0 <bt_mesh_adv_create>:
}

struct net_buf *bt_mesh_adv_create(enum bt_mesh_adv_type type,
				   enum bt_mesh_adv_tag tag,
				   uint8_t xmit, k_timeout_t timeout)
{
    7ea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7ea4:	4b18      	ldr	r3, [pc, #96]	; (7f08 <bt_mesh_adv_create+0x68>)
    7ea6:	f3bf 8f5b 	dmb	ish
    7eaa:	681b      	ldr	r3, [r3, #0]
    7eac:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_SUSPENDED)) {
    7eb0:	f3c3 0940 	ubfx	r9, r3, #1, #1
    7eb4:	079b      	lsls	r3, r3, #30
{
    7eb6:	4680      	mov	r8, r0
    7eb8:	460c      	mov	r4, r1
    7eba:	4617      	mov	r7, r2
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_SUSPENDED)) {
    7ebc:	d421      	bmi.n	7f02 <bt_mesh_adv_create+0x62>
	return net_buf_alloc_fixed(pool, timeout);
    7ebe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    7ec2:	4812      	ldr	r0, [pc, #72]	; (7f0c <bt_mesh_adv_create+0x6c>)
    7ec4:	f015 f819 	bl	1cefa <net_buf_alloc_fixed>
	if (!buf) {
    7ec8:	4606      	mov	r6, r0
    7eca:	b1b8      	cbz	r0, 7efc <bt_mesh_adv_create+0x5c>
	adv = get_id(net_buf_id(buf));
    7ecc:	f00a f924 	bl	12118 <net_buf_id>
	return &adv_pool[id];
    7ed0:	4d0f      	ldr	r5, [pc, #60]	; (7f10 <bt_mesh_adv_create+0x70>)
    7ed2:	220c      	movs	r2, #12
    7ed4:	fb02 5500 	mla	r5, r2, r0, r5
	BT_MESH_ADV(buf) = adv;
    7ed8:	6175      	str	r5, [r6, #20]
	(void)memset(adv, 0, sizeof(*adv));
    7eda:	4649      	mov	r1, r9
    7edc:	4628      	mov	r0, r5
    7ede:	f00f f9c4 	bl	1726a <memset>
	adv->type         = type;
    7ee2:	0124      	lsls	r4, r4, #4
    7ee4:	7a2b      	ldrb	r3, [r5, #8]
	adv->xmit         = xmit;
    7ee6:	726f      	strb	r7, [r5, #9]
	adv->type         = type;
    7ee8:	f004 0470 	and.w	r4, r4, #112	; 0x70
    7eec:	f008 0803 	and.w	r8, r8, #3
    7ef0:	ea44 0408 	orr.w	r4, r4, r8
    7ef4:	f023 0373 	bic.w	r3, r3, #115	; 0x73
    7ef8:	431c      	orrs	r4, r3
    7efa:	722c      	strb	r4, [r5, #8]
	return bt_mesh_adv_create_from_pool(&adv_buf_pool, adv_alloc, type,
					    tag, xmit, timeout);
}
    7efc:	4630      	mov	r0, r6
    7efe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return NULL;
    7f02:	2600      	movs	r6, #0
	return bt_mesh_adv_create_from_pool(&adv_buf_pool, adv_alloc, type,
    7f04:	e7fa      	b.n	7efc <bt_mesh_adv_create+0x5c>
    7f06:	bf00      	nop
    7f08:	20001128 	.word	0x20001128
    7f0c:	20000b98 	.word	0x20000b98
    7f10:	200019d4 	.word	0x200019d4

00007f14 <bt_mesh_adv_buf_get>:
		return NULL;
	}
}
#else /* !CONFIG_BT_MESH_RELAY_ADV_SETS */
struct net_buf *bt_mesh_adv_buf_get(k_timeout_t timeout)
{
    7f14:	4602      	mov	r2, r0
    7f16:	460b      	mov	r3, r1
	return net_buf_get(&bt_mesh_adv_queue, timeout);
    7f18:	4801      	ldr	r0, [pc, #4]	; (7f20 <bt_mesh_adv_buf_get+0xc>)
    7f1a:	f014 bff3 	b.w	1cf04 <net_buf_get>
    7f1e:	bf00      	nop
    7f20:	20000b24 	.word	0x20000b24

00007f24 <bt_mesh_adv_send>:

}

void bt_mesh_adv_send(struct net_buf *buf, const struct bt_mesh_send_cb *cb,
		      void *cb_data)
{
    7f24:	b510      	push	{r4, lr}
	BT_DBG("type 0x%02x len %u: %s", BT_MESH_ADV(buf)->type, buf->len,
	       bt_hex(buf->data, buf->len));

	BT_MESH_ADV(buf)->cb = cb;
    7f26:	6944      	ldr	r4, [r0, #20]
	BT_MESH_ADV(buf)->cb_data = cb_data;
    7f28:	e9c4 1200 	strd	r1, r2, [r4]
	BT_MESH_ADV(buf)->busy = 1U;
    7f2c:	6942      	ldr	r2, [r0, #20]
    7f2e:	7a13      	ldrb	r3, [r2, #8]
    7f30:	f043 0308 	orr.w	r3, r3, #8
    7f34:	7213      	strb	r3, [r2, #8]
	} else {
		net_buf_put(&bt_mesh_relay_queue, net_buf_ref(buf));
		bt_mesh_adv_buf_relay_ready();
	}
#else /* !CONFIG_BT_MESH_RELAY_ADV_SETS */
	net_buf_put(&bt_mesh_adv_queue, net_buf_ref(buf));
    7f36:	f015 f816 	bl	1cf66 <net_buf_ref>
    7f3a:	4601      	mov	r1, r0
    7f3c:	4803      	ldr	r0, [pc, #12]	; (7f4c <bt_mesh_adv_send+0x28>)
    7f3e:	f015 f805 	bl	1cf4c <net_buf_put>
	bt_mesh_adv_buf_local_ready();
#endif /* CONFIG_BT_MESH_RELAY_ADV_SETS */
}
    7f42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_mesh_adv_buf_local_ready();
    7f46:	f013 bd9b 	b.w	1ba80 <bt_mesh_adv_buf_local_ready>
    7f4a:	bf00      	nop
    7f4c:	20000b24 	.word	0x20000b24

00007f50 <bt_mesh_scan_enable>:
		net_buf_simple_pull(buf, len);
	}
}

int bt_mesh_scan_enable(void)
{
    7f50:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct bt_le_scan_param scan_param = {
    7f52:	2100      	movs	r1, #0
    7f54:	2214      	movs	r2, #20
    7f56:	a801      	add	r0, sp, #4
    7f58:	f00f f987 	bl	1726a <memset>
    7f5c:	f04f 1330 	mov.w	r3, #3145776	; 0x300030
			.window     = MESH_SCAN_WINDOW };
	int err;

	BT_DBG("");

	err = bt_le_scan_start(&scan_param, bt_mesh_scan_cb);
    7f60:	4906      	ldr	r1, [pc, #24]	; (7f7c <bt_mesh_scan_enable+0x2c>)
	struct bt_le_scan_param scan_param = {
    7f62:	9303      	str	r3, [sp, #12]
	err = bt_le_scan_start(&scan_param, bt_mesh_scan_cb);
    7f64:	a801      	add	r0, sp, #4
    7f66:	f7fd fed1 	bl	5d0c <bt_le_scan_start>
	if (err && err != -EALREADY) {
    7f6a:	b118      	cbz	r0, 7f74 <bt_mesh_scan_enable+0x24>
		BT_ERR("starting scan failed (err %d)", err);
		return err;
	}

	return 0;
    7f6c:	f110 0f78 	cmn.w	r0, #120	; 0x78
    7f70:	bf08      	it	eq
    7f72:	2000      	moveq	r0, #0
}
    7f74:	b007      	add	sp, #28
    7f76:	f85d fb04 	ldr.w	pc, [sp], #4
    7f7a:	bf00      	nop
    7f7c:	00019439 	.word	0x00019439

00007f80 <beacon_send>:

	bt_mesh_subnet_foreach(sub_update_beacon_observation);
}

static void beacon_send(struct k_work *work)
{
    7f80:	b510      	push	{r4, lr}
	BT_DBG("");

	if (bt_mesh_is_provisioned()) {
    7f82:	f7ff fe5f 	bl	7c44 <bt_mesh_is_provisioned>
    7f86:	b1f8      	cbz	r0, 7fc8 <beacon_send+0x48>
		if (!bt_mesh_beacon_enabled() &&
    7f88:	f7ff fee6 	bl	7d58 <bt_mesh_beacon_enabled>
    7f8c:	b1a0      	cbz	r0, 7fb8 <beacon_send+0x38>
	first_half = !first_half;
    7f8e:	4a0f      	ldr	r2, [pc, #60]	; (7fcc <beacon_send+0x4c>)
    7f90:	7813      	ldrb	r3, [r2, #0]
    7f92:	f083 0301 	eor.w	r3, r3, #1
    7f96:	7013      	strb	r3, [r2, #0]
	if (first_half) {
    7f98:	b913      	cbnz	r3, 7fa0 <beacon_send+0x20>
	bt_mesh_subnet_foreach(sub_update_beacon_observation);
    7f9a:	480d      	ldr	r0, [pc, #52]	; (7fd0 <beacon_send+0x50>)
    7f9c:	f000 feda 	bl	8d54 <bt_mesh_subnet_foreach>
		    !atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_INITIATOR)) {
			return;
		}

		update_beacon_observation();
		(void)bt_mesh_subnet_find(secure_beacon_send, NULL);
    7fa0:	480c      	ldr	r0, [pc, #48]	; (7fd4 <beacon_send+0x54>)
    7fa2:	2100      	movs	r1, #0
    7fa4:	f000 fec4 	bl	8d30 <bt_mesh_subnet_find>
		}

		k_work_schedule(&beacon_timer, K_SECONDS(CONFIG_BT_MESH_UNPROV_BEACON_INT));
	}

}
    7fa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_work_schedule(&beacon_timer, PROVISIONED_INTERVAL);
    7fac:	480a      	ldr	r0, [pc, #40]	; (7fd8 <beacon_send+0x58>)
    7fae:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    7fb2:	2300      	movs	r3, #0
    7fb4:	f00d bd54 	b.w	15a60 <k_work_schedule>
    7fb8:	4b08      	ldr	r3, [pc, #32]	; (7fdc <beacon_send+0x5c>)
    7fba:	f3bf 8f5b 	dmb	ish
    7fbe:	681b      	ldr	r3, [r3, #0]
    7fc0:	f3bf 8f5b 	dmb	ish
		if (!bt_mesh_beacon_enabled() &&
    7fc4:	071b      	lsls	r3, r3, #28
    7fc6:	d4e2      	bmi.n	7f8e <beacon_send+0xe>
}
    7fc8:	bd10      	pop	{r4, pc}
    7fca:	bf00      	nop
    7fcc:	20002b2c 	.word	0x20002b2c
    7fd0:	000194bd 	.word	0x000194bd
    7fd4:	00008035 	.word	0x00008035
    7fd8:	200010f0 	.word	0x200010f0
    7fdc:	20001128 	.word	0x20001128

00007fe0 <bt_mesh_beacon_create>:
{
    7fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7fe2:	460c      	mov	r4, r1
    7fe4:	4605      	mov	r5, r0
	uint8_t flags = bt_mesh_net_flags(sub);
    7fe6:	f000 fde3 	bl	8bb0 <bt_mesh_net_flags>
	net_buf_simple_add_u8(buf, BEACON_TYPE_SECURE);
    7fea:	2101      	movs	r1, #1
	uint8_t flags = bt_mesh_net_flags(sub);
    7fec:	4607      	mov	r7, r0
	net_buf_simple_add_u8(buf, BEACON_TYPE_SECURE);
    7fee:	4620      	mov	r0, r4
    7ff0:	f014 fffa 	bl	1cfe8 <net_buf_simple_add_u8>
	keys = &sub->keys[SUBNET_KEY_TX_IDX(sub)];
    7ff4:	7fae      	ldrb	r6, [r5, #30]
    7ff6:	1eb3      	subs	r3, r6, #2
    7ff8:	425e      	negs	r6, r3
	net_buf_simple_add_u8(buf, flags);
    7ffa:	4639      	mov	r1, r7
    7ffc:	4620      	mov	r0, r4
	keys = &sub->keys[SUBNET_KEY_TX_IDX(sub)];
    7ffe:	415e      	adcs	r6, r3
	net_buf_simple_add_u8(buf, flags);
    8000:	f014 fff2 	bl	1cfe8 <net_buf_simple_add_u8>
	net_buf_simple_add_mem(buf, keys->net_id, 8);
    8004:	214a      	movs	r1, #74	; 0x4a
    8006:	fb01 5106 	mla	r1, r1, r6, r5
    800a:	2208      	movs	r2, #8
    800c:	315e      	adds	r1, #94	; 0x5e
    800e:	4620      	mov	r0, r4
    8010:	f014 ffe1 	bl	1cfd6 <net_buf_simple_add_mem>
	net_buf_simple_add_be32(buf, bt_mesh.iv_index);
    8014:	4b06      	ldr	r3, [pc, #24]	; (8030 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x30>)
    8016:	4620      	mov	r0, r4
    8018:	6819      	ldr	r1, [r3, #0]
    801a:	f015 f819 	bl	1d050 <net_buf_simple_add_be32>
	net_buf_simple_add_mem(buf, sub->auth, 8);
    801e:	f105 0124 	add.w	r1, r5, #36	; 0x24
    8022:	4620      	mov	r0, r4
    8024:	2208      	movs	r2, #8
}
    8026:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	net_buf_simple_add_mem(buf, sub->auth, 8);
    802a:	f014 bfd4 	b.w	1cfd6 <net_buf_simple_add_mem>
    802e:	bf00      	nop
    8030:	20001120 	.word	0x20001120

00008034 <secure_beacon_send>:
{
    8034:	b537      	push	{r0, r1, r2, r4, r5, lr}
    8036:	4604      	mov	r4, r0
	return z_impl_k_uptime_ticks();
    8038:	f016 fd09 	bl	1ea4e <z_impl_k_uptime_ticks>
			return ((t * to_hz + off) / from_hz);
    803c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8040:	fba0 3002 	umull	r3, r0, r0, r2
    8044:	fb02 0001 	mla	r0, r2, r1, r0
    8048:	0bdb      	lsrs	r3, r3, #15
	time_diff = now - sub->beacon_sent;
    804a:	6822      	ldr	r2, [r4, #0]
    804c:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
    8050:	1a9b      	subs	r3, r3, r2
	if (time_diff < (600 * MSEC_PER_SEC) &&
    8052:	4a15      	ldr	r2, [pc, #84]	; (80a8 <secure_beacon_send+0x74>)
    8054:	4293      	cmp	r3, r2
    8056:	d809      	bhi.n	806c <secure_beacon_send+0x38>
		time_diff < BEACON_THRESHOLD(sub)) {
    8058:	7922      	ldrb	r2, [r4, #4]
    805a:	f242 7110 	movw	r1, #10000	; 0x2710
    805e:	fb02 1101 	mla	r1, r2, r1, r1
    8062:	f5a1 519c 	sub.w	r1, r1, #4992	; 0x1380
    8066:	3908      	subs	r1, #8
	if (time_diff < (600 * MSEC_PER_SEC) &&
    8068:	4299      	cmp	r1, r3
    806a:	d817      	bhi.n	809c <secure_beacon_send+0x68>
				 PROV_XMIT, K_NO_WAIT);
    806c:	2200      	movs	r2, #0
    806e:	2300      	movs	r3, #0
	buf = bt_mesh_adv_create(BT_MESH_ADV_BEACON, BT_MESH_LOCAL_ADV,
    8070:	e9cd 2300 	strd	r2, r3, [sp]
    8074:	2101      	movs	r1, #1
    8076:	2208      	movs	r2, #8
    8078:	2002      	movs	r0, #2
    807a:	f7ff ff11 	bl	7ea0 <bt_mesh_adv_create>
	if (!buf) {
    807e:	4605      	mov	r5, r0
    8080:	b178      	cbz	r0, 80a2 <secure_beacon_send+0x6e>
	bt_mesh_beacon_create(sub, &buf->b);
    8082:	f100 0108 	add.w	r1, r0, #8
    8086:	4620      	mov	r0, r4
    8088:	f7ff ffaa 	bl	7fe0 <bt_mesh_beacon_create>
	bt_mesh_adv_send(buf, &send_cb, sub);
    808c:	4628      	mov	r0, r5
    808e:	4907      	ldr	r1, [pc, #28]	; (80ac <secure_beacon_send+0x78>)
    8090:	4622      	mov	r2, r4
    8092:	f7ff ff47 	bl	7f24 <bt_mesh_adv_send>
	net_buf_unref(buf);
    8096:	4628      	mov	r0, r5
    8098:	f00a f8fa 	bl	12290 <net_buf_unref>
		return false;
    809c:	2000      	movs	r0, #0
}
    809e:	b003      	add	sp, #12
    80a0:	bd30      	pop	{r4, r5, pc}
		return true; /* Bail out */
    80a2:	2001      	movs	r0, #1
    80a4:	e7fb      	b.n	809e <secure_beacon_send+0x6a>
    80a6:	bf00      	nop
    80a8:	000927bf 	.word	0x000927bf
    80ac:	0001f694 	.word	0x0001f694

000080b0 <bt_mesh_beacon_update>:
		break;
	}
}

void bt_mesh_beacon_update(struct bt_mesh_subnet *sub)
{
    80b0:	b523      	push	{r0, r1, r5, lr}
    80b2:	4605      	mov	r5, r0
	uint8_t flags = bt_mesh_net_flags(sub);
    80b4:	f000 fd7c 	bl	8bb0 <bt_mesh_net_flags>
	struct bt_mesh_subnet_keys *keys;
	int err;

	keys = &sub->keys[SUBNET_KEY_TX_IDX(sub)];
    80b8:	7fab      	ldrb	r3, [r5, #30]
    80ba:	1e9a      	subs	r2, r3, #2
    80bc:	4253      	negs	r3, r2
    80be:	4153      	adcs	r3, r2
	uint8_t flags = bt_mesh_net_flags(sub);
    80c0:	4601      	mov	r1, r0

	BT_DBG("NetIndex 0x%03x Using %s key", sub->net_idx,
	       SUBNET_KEY_TX_IDX(sub) ? "new" : "current");
	BT_DBG("flags 0x%02x, IVI 0x%08x", flags, bt_mesh.iv_index);

	err = bt_mesh_beacon_auth(keys->beacon, flags, keys->net_id,
    80c2:	204a      	movs	r0, #74	; 0x4a
    80c4:	4343      	muls	r3, r0
    80c6:	f103 025e 	add.w	r2, r3, #94	; 0x5e
    80ca:	f103 0066 	add.w	r0, r3, #102	; 0x66
				   bt_mesh.iv_index, sub->auth);
    80ce:	f105 0324 	add.w	r3, r5, #36	; 0x24
	err = bt_mesh_beacon_auth(keys->beacon, flags, keys->net_id,
    80d2:	9300      	str	r3, [sp, #0]
    80d4:	4b03      	ldr	r3, [pc, #12]	; (80e4 <bt_mesh_beacon_update+0x34>)
    80d6:	442a      	add	r2, r5
    80d8:	681b      	ldr	r3, [r3, #0]
    80da:	4428      	add	r0, r5
    80dc:	f011 fe6d 	bl	19dba <bt_mesh_beacon_auth>
	if (err) {
		BT_ERR("Failed updating net beacon for 0x%03x", sub->net_idx);
	}
}
    80e0:	b002      	add	sp, #8
    80e2:	bd20      	pop	{r5, pc}
    80e4:	20001120 	.word	0x20001120

000080e8 <bt_mesh_beacon_init>:
	.evt_handler = subnet_evt,
};

void bt_mesh_beacon_init(void)
{
	k_work_init_delayable(&beacon_timer, beacon_send);
    80e8:	4901      	ldr	r1, [pc, #4]	; (80f0 <bt_mesh_beacon_init+0x8>)
    80ea:	4802      	ldr	r0, [pc, #8]	; (80f4 <bt_mesh_beacon_init+0xc>)
    80ec:	f016 bb21 	b.w	1e732 <k_work_init_delayable>
    80f0:	00007f81 	.word	0x00007f81
    80f4:	200010f0 	.word	0x200010f0

000080f8 <bt_mesh_beacon_ivu_initiator>:
    80f8:	4b0d      	ldr	r3, [pc, #52]	; (8130 <bt_mesh_beacon_ivu_initiator+0x38>)
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    80fa:	f3bf 8f5b 	dmb	ish
    80fe:	b170      	cbz	r0, 811e <bt_mesh_beacon_ivu_initiator+0x26>
    8100:	e853 2f00 	ldrex	r2, [r3]
    8104:	f042 0208 	orr.w	r2, r2, #8
    8108:	e843 2100 	strex	r1, r2, [r3]
    810c:	2900      	cmp	r1, #0
    810e:	d1f7      	bne.n	8100 <bt_mesh_beacon_ivu_initiator+0x8>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8110:	f3bf 8f5b 	dmb	ish
	 * An alternative solution would be to check whether beacons are enabled
	 * here, and cancel if not. As the cancel operation may fail, we would
	 * still have to implement an early exit mechanism, so we might as well
	 * just use this every time.
	 */
	k_work_schedule(&beacon_timer, K_NO_WAIT);
    8114:	4807      	ldr	r0, [pc, #28]	; (8134 <bt_mesh_beacon_ivu_initiator+0x3c>)
    8116:	2200      	movs	r2, #0
    8118:	2300      	movs	r3, #0
    811a:	f00d bca1 	b.w	15a60 <k_work_schedule>
    811e:	e853 2f00 	ldrex	r2, [r3]
    8122:	f022 0208 	bic.w	r2, r2, #8
    8126:	e843 2100 	strex	r1, r2, [r3]
    812a:	2900      	cmp	r1, #0
    812c:	d0f0      	beq.n	8110 <bt_mesh_beacon_ivu_initiator+0x18>
    812e:	e7f6      	b.n	811e <bt_mesh_beacon_ivu_initiator+0x26>
    8130:	20001128 	.word	0x20001128
    8134:	200010f0 	.word	0x200010f0

00008138 <bt_mesh_beacon_recv>:
{
    8138:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (buf->len < 1) {
    813a:	8883      	ldrh	r3, [r0, #4]
{
    813c:	4605      	mov	r5, r0
	if (buf->len < 1) {
    813e:	2b00      	cmp	r3, #0
    8140:	d067      	beq.n	8212 <bt_mesh_beacon_recv+0xda>
	type = net_buf_simple_pull_u8(buf);
    8142:	f014 ffcd 	bl	1d0e0 <net_buf_simple_pull_u8>
	switch (type) {
    8146:	2801      	cmp	r0, #1
    8148:	d163      	bne.n	8212 <bt_mesh_beacon_recv+0xda>
	if (buf->len < 21) {
    814a:	88ab      	ldrh	r3, [r5, #4]
    814c:	2b14      	cmp	r3, #20
    814e:	d960      	bls.n	8212 <bt_mesh_beacon_recv+0xda>
	sub = bt_mesh_subnet_find(beacon_cache_match, buf->data);
    8150:	6829      	ldr	r1, [r5, #0]
    8152:	4831      	ldr	r0, [pc, #196]	; (8218 <bt_mesh_beacon_recv+0xe0>)
    8154:	f000 fdec 	bl	8d30 <bt_mesh_subnet_find>
	if (sub) {
    8158:	4604      	mov	r4, r0
    815a:	2800      	cmp	r0, #0
    815c:	d151      	bne.n	8202 <bt_mesh_beacon_recv+0xca>
	params.flags = net_buf_simple_pull_u8(buf);
    815e:	4628      	mov	r0, r5
	data = buf->data;
    8160:	682e      	ldr	r6, [r5, #0]
	params.flags = net_buf_simple_pull_u8(buf);
    8162:	f014 ffbd 	bl	1d0e0 <net_buf_simple_pull_u8>
	params.net_id = net_buf_simple_pull_mem(buf, 8);
    8166:	2108      	movs	r1, #8
	params.flags = net_buf_simple_pull_u8(buf);
    8168:	f88d 000c 	strb.w	r0, [sp, #12]
	params.net_id = net_buf_simple_pull_mem(buf, 8);
    816c:	4628      	mov	r0, r5
    816e:	f014 ffaf 	bl	1d0d0 <net_buf_simple_pull_mem>
    8172:	9000      	str	r0, [sp, #0]
	params.iv_index = net_buf_simple_pull_be32(buf);
    8174:	4628      	mov	r0, r5
    8176:	f014 ffd5 	bl	1d124 <net_buf_simple_pull_be32>
	params.auth = buf->data;
    817a:	682b      	ldr	r3, [r5, #0]
	params.iv_index = net_buf_simple_pull_be32(buf);
    817c:	9002      	str	r0, [sp, #8]
	sub = bt_mesh_subnet_find(subnet_by_id, &params);
    817e:	4669      	mov	r1, sp
    8180:	4826      	ldr	r0, [pc, #152]	; (821c <bt_mesh_beacon_recv+0xe4>)
	params.auth = buf->data;
    8182:	9301      	str	r3, [sp, #4]
	sub = bt_mesh_subnet_find(subnet_by_id, &params);
    8184:	f000 fdd4 	bl	8d30 <bt_mesh_subnet_find>
	if (!sub) {
    8188:	4604      	mov	r4, r0
    818a:	2800      	cmp	r0, #0
    818c:	d041      	beq.n	8212 <bt_mesh_beacon_recv+0xda>
	if (sub->kr_phase == BT_MESH_KR_PHASE_2 && !params.new_key) {
    818e:	7f83      	ldrb	r3, [r0, #30]
    8190:	2b02      	cmp	r3, #2
    8192:	d103      	bne.n	819c <bt_mesh_beacon_recv+0x64>
    8194:	f89d 300d 	ldrb.w	r3, [sp, #13]
    8198:	2b00      	cmp	r3, #0
    819a:	d03a      	beq.n	8212 <bt_mesh_beacon_recv+0xda>
	memcpy(sub->beacon_cache, data, 21);
    819c:	2215      	movs	r2, #21
    819e:	4631      	mov	r1, r6
    81a0:	1da0      	adds	r0, r4, #6
    81a2:	f00f f857 	bl	17254 <memcpy>
	bt_mesh_kr_update(sub, BT_MESH_KEY_REFRESH(params.flags),
    81a6:	f89d 100c 	ldrb.w	r1, [sp, #12]
    81aa:	f89d 200d 	ldrb.w	r2, [sp, #13]
    81ae:	4620      	mov	r0, r4
    81b0:	f001 0101 	and.w	r1, r1, #1
    81b4:	f011 fa26 	bl	19604 <bt_mesh_kr_update>
	if (bt_mesh_subnet_get(BT_MESH_KEY_PRIMARY) &&
    81b8:	2000      	movs	r0, #0
    81ba:	f000 fd53 	bl	8c64 <bt_mesh_subnet_get>
    81be:	b108      	cbz	r0, 81c4 <bt_mesh_beacon_recv+0x8c>
    81c0:	8ba3      	ldrh	r3, [r4, #28]
    81c2:	b9f3      	cbnz	r3, 8202 <bt_mesh_beacon_recv+0xca>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    81c4:	f3bf 8f5b 	dmb	ish
    81c8:	4b15      	ldr	r3, [pc, #84]	; (8220 <bt_mesh_beacon_recv+0xe8>)
    81ca:	681a      	ldr	r2, [r3, #0]
    81cc:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_INITIATOR) &&
    81d0:	0712      	lsls	r2, r2, #28
    81d2:	d50f      	bpl.n	81f4 <bt_mesh_beacon_recv+0xbc>
    81d4:	f3bf 8f5b 	dmb	ish
    81d8:	681a      	ldr	r2, [r3, #0]
    81da:	f3bf 8f5b 	dmb	ish
	     BT_MESH_IV_UPDATE(params.flags))) {
    81de:	f89d 300c 	ldrb.w	r3, [sp, #12]
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_INITIATOR) &&
    81e2:	f3c2 0280 	ubfx	r2, r2, #2, #1
	     BT_MESH_IV_UPDATE(params.flags))) {
    81e6:	f3c3 0340 	ubfx	r3, r3, #1, #1
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_INITIATOR) &&
    81ea:	429a      	cmp	r2, r3
    81ec:	d102      	bne.n	81f4 <bt_mesh_beacon_recv+0xbc>
		bt_mesh_beacon_ivu_initiator(false);
    81ee:	2000      	movs	r0, #0
    81f0:	f7ff ff82 	bl	80f8 <bt_mesh_beacon_ivu_initiator>
	bt_mesh_net_iv_update(params.iv_index, BT_MESH_IV_UPDATE(params.flags));
    81f4:	f89d 100c 	ldrb.w	r1, [sp, #12]
    81f8:	9802      	ldr	r0, [sp, #8]
    81fa:	f3c1 0140 	ubfx	r1, r1, #1, #1
    81fe:	f000 f957 	bl	84b0 <bt_mesh_net_iv_update>
	if (bt_mesh_beacon_enabled() &&
    8202:	f7ff fda9 	bl	7d58 <bt_mesh_beacon_enabled>
    8206:	b120      	cbz	r0, 8212 <bt_mesh_beacon_recv+0xda>
	    sub->beacons_cur < 0xff) {
    8208:	7963      	ldrb	r3, [r4, #5]
	if (bt_mesh_beacon_enabled() &&
    820a:	2bff      	cmp	r3, #255	; 0xff
		sub->beacons_cur++;
    820c:	bf1c      	itt	ne
    820e:	3301      	addne	r3, #1
    8210:	7163      	strbne	r3, [r4, #5]
}
    8212:	b004      	add	sp, #16
    8214:	bd70      	pop	{r4, r5, r6, pc}
    8216:	bf00      	nop
    8218:	000194c7 	.word	0x000194c7
    821c:	000194d9 	.word	0x000194d9
    8220:	20001128 	.word	0x20001128

00008224 <bt_mesh_beacon_enable>:

	bt_mesh_beacon_update(sub);
}

void bt_mesh_beacon_enable(void)
{
    8224:	b510      	push	{r4, lr}
	if (bt_mesh_is_provisioned()) {
    8226:	f7ff fd0d 	bl	7c44 <bt_mesh_is_provisioned>
    822a:	b110      	cbz	r0, 8232 <bt_mesh_beacon_enable+0xe>
		bt_mesh_subnet_foreach(subnet_beacon_enable);
    822c:	4804      	ldr	r0, [pc, #16]	; (8240 <bt_mesh_beacon_enable+0x1c>)
    822e:	f000 fd91 	bl	8d54 <bt_mesh_subnet_foreach>
	}

	k_work_reschedule(&beacon_timer, K_NO_WAIT);
}
    8232:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_reschedule(&beacon_timer, K_NO_WAIT);
    8236:	4803      	ldr	r0, [pc, #12]	; (8244 <bt_mesh_beacon_enable+0x20>)
    8238:	2200      	movs	r2, #0
    823a:	2300      	movs	r3, #0
    823c:	f00d bc44 	b.w	15ac8 <k_work_reschedule>
    8240:	0001955d 	.word	0x0001955d
    8244:	200010f0 	.word	0x200010f0

00008248 <bt_mesh_beacon_disable>:
    8248:	4b05      	ldr	r3, [pc, #20]	; (8260 <bt_mesh_beacon_disable+0x18>)
    824a:	f3bf 8f5b 	dmb	ish
    824e:	681b      	ldr	r3, [r3, #0]
    8250:	f3bf 8f5b 	dmb	ish

void bt_mesh_beacon_disable(void)
{
	if (!atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_INITIATOR)) {
    8254:	071b      	lsls	r3, r3, #28
    8256:	d402      	bmi.n	825e <bt_mesh_beacon_disable+0x16>
		/* If this fails, we'll do an early exit in the work handler. */
		(void)k_work_cancel_delayable(&beacon_timer);
    8258:	4802      	ldr	r0, [pc, #8]	; (8264 <bt_mesh_beacon_disable+0x1c>)
    825a:	f016 ba78 	b.w	1e74e <k_work_cancel_delayable>
	}
}
    825e:	4770      	bx	lr
    8260:	20001128 	.word	0x20001128
    8264:	200010f0 	.word	0x200010f0

00008268 <net_decrypt>:
}

static bool net_decrypt(struct bt_mesh_net_rx *rx, struct net_buf_simple *in,
			struct net_buf_simple *out,
			const struct bt_mesh_net_cred *cred)
{
    8268:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    826c:	461e      	mov	r6, r3
	bool proxy = (rx->net_if == BT_MESH_NET_IF_PROXY_CFG);

	if (NID(in->data) != cred->nid) {
    826e:	680b      	ldr	r3, [r1, #0]
{
    8270:	4614      	mov	r4, r2
	if (NID(in->data) != cred->nid) {
    8272:	781a      	ldrb	r2, [r3, #0]
{
    8274:	4605      	mov	r5, r0
	if (NID(in->data) != cred->nid) {
    8276:	7830      	ldrb	r0, [r6, #0]
    8278:	f002 037f 	and.w	r3, r2, #127	; 0x7f
    827c:	4298      	cmp	r0, r3
    827e:	d002      	beq.n	8286 <net_decrypt+0x1e>
		return false;
    8280:	2000      	movs	r0, #0

	BT_DBG("src 0x%04x", rx->ctx.addr);

	return bt_mesh_net_decrypt(cred->enc, out, BT_MESH_NET_IVI_RX(rx),
				   proxy) == 0;
}
    8282:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	rx->old_iv = (IVI(in->data) != (bt_mesh.iv_index & 0x01));
    8286:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8350 <net_decrypt+0xe8>
	bool proxy = (rx->net_if == BT_MESH_NET_IF_PROXY_CFG);
    828a:	7d2f      	ldrb	r7, [r5, #20]
	rx->old_iv = (IVI(in->data) != (bt_mesh.iv_index & 0x01));
    828c:	f8d8 3000 	ldr.w	r3, [r8]
    8290:	f003 0301 	and.w	r3, r3, #1
    8294:	ea83 13d2 	eor.w	r3, r3, r2, lsr #7
    8298:	463a      	mov	r2, r7
    829a:	f363 0200 	bfi	r2, r3, #0, #1
	buf->len  = 0U;
    829e:	2300      	movs	r3, #0
    82a0:	752a      	strb	r2, [r5, #20]
    82a2:	80a3      	strh	r3, [r4, #4]
	buf->data = buf->__buf;
    82a4:	68a3      	ldr	r3, [r4, #8]
    82a6:	6023      	str	r3, [r4, #0]
	net_buf_simple_add_mem(out, in->data, in->len);
    82a8:	888a      	ldrh	r2, [r1, #4]
    82aa:	6809      	ldr	r1, [r1, #0]
    82ac:	4620      	mov	r0, r4
    82ae:	f014 fe92 	bl	1cfd6 <net_buf_simple_add_mem>
	if (bt_mesh_net_obfuscate(out->data, BT_MESH_NET_IVI_RX(rx),
    82b2:	7d2b      	ldrb	r3, [r5, #20]
    82b4:	f8d8 1000 	ldr.w	r1, [r8]
    82b8:	6820      	ldr	r0, [r4, #0]
    82ba:	f003 0301 	and.w	r3, r3, #1
    82be:	f106 0211 	add.w	r2, r6, #17
    82c2:	1ac9      	subs	r1, r1, r3
    82c4:	f002 f84c 	bl	a360 <bt_mesh_net_obfuscate>
    82c8:	2800      	cmp	r0, #0
    82ca:	d1d9      	bne.n	8280 <net_decrypt+0x18>
	return ((uint16_t)src[0] << 8) | src[1];
    82cc:	6823      	ldr	r3, [r4, #0]
    82ce:	f8b3 2005 	ldrh.w	r2, [r3, #5]
    82d2:	ba52      	rev16	r2, r2
    82d4:	b290      	uxth	r0, r2
	rx->ctx.addr = SRC(out->data);
    82d6:	812a      	strh	r2, [r5, #8]
	if (!BT_MESH_ADDR_IS_UNICAST(rx->ctx.addr)) {
    82d8:	b212      	sxth	r2, r2
    82da:	2a00      	cmp	r2, #0
    82dc:	ddd0      	ble.n	8280 <net_decrypt+0x18>
	if (bt_mesh_has_addr(rx->ctx.addr)) {
    82de:	f002 f9fd 	bl	a6dc <bt_mesh_has_addr>
    82e2:	2800      	cmp	r0, #0
    82e4:	d1cc      	bne.n	8280 <net_decrypt+0x18>
	if (rx->net_if == BT_MESH_NET_IF_ADV && msg_cache_match(out)) {
    82e6:	7d2d      	ldrb	r5, [r5, #20]
    82e8:	f015 0130 	ands.w	r1, r5, #48	; 0x30
    82ec:	d11d      	bne.n	832a <net_decrypt+0xc2>
		if (msg_cache[i].src == SRC(pdu->data) &&
    82ee:	6823      	ldr	r3, [r4, #0]
    82f0:	f8df b060 	ldr.w	fp, [pc, #96]	; 8354 <net_decrypt+0xec>
    82f4:	f8b3 9005 	ldrh.w	r9, [r3, #5]
    82f8:	fa99 f999 	rev16.w	r9, r9
    82fc:	fa1f f989 	uxth.w	r9, r9
		    msg_cache[i].seq == (SEQ(pdu->data) & BIT_MASK(17))) {
    8300:	f103 0a02 	add.w	sl, r3, #2
		if (msg_cache[i].src == SRC(pdu->data) &&
    8304:	f83b 3021 	ldrh.w	r3, [fp, r1, lsl #2]
    8308:	f3c3 030e 	ubfx	r3, r3, #0, #15
    830c:	454b      	cmp	r3, r9
    830e:	d109      	bne.n	8324 <net_decrypt+0xbc>
		    msg_cache[i].seq == (SEQ(pdu->data) & BIT_MASK(17))) {
    8310:	4650      	mov	r0, sl
    8312:	f011 f927 	bl	19564 <sys_get_be24>
    8316:	f85b 3021 	ldr.w	r3, [fp, r1, lsl #2]
    831a:	f3c0 0010 	ubfx	r0, r0, #0, #17
		if (msg_cache[i].src == SRC(pdu->data) &&
    831e:	ebb0 3fd3 	cmp.w	r0, r3, lsr #15
    8322:	d0ad      	beq.n	8280 <net_decrypt+0x18>
	for (i = 0U; i < ARRAY_SIZE(msg_cache); i++) {
    8324:	3101      	adds	r1, #1
    8326:	290a      	cmp	r1, #10
    8328:	d1ec      	bne.n	8304 <net_decrypt+0x9c>
	bool proxy = (rx->net_if == BT_MESH_NET_IF_PROXY_CFG);
    832a:	f007 0330 	and.w	r3, r7, #48	; 0x30
	return bt_mesh_net_decrypt(cred->enc, out, BT_MESH_NET_IVI_RX(rx),
    832e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    8332:	f8d8 2000 	ldr.w	r2, [r8]
    8336:	424b      	negs	r3, r1
    8338:	f005 0501 	and.w	r5, r5, #1
    833c:	414b      	adcs	r3, r1
    833e:	1b52      	subs	r2, r2, r5
    8340:	4621      	mov	r1, r4
    8342:	1c70      	adds	r0, r6, #1
    8344:	f011 fcae 	bl	19ca4 <bt_mesh_net_decrypt>
				   proxy) == 0;
    8348:	fab0 f080 	clz	r0, r0
    834c:	0940      	lsrs	r0, r0, #5
    834e:	e798      	b.n	8282 <net_decrypt+0x1a>
    8350:	20001120 	.word	0x20001120
    8354:	20001a78 	.word	0x20001a78

00008358 <bt_mesh_net_local>:
{
    8358:	b5f0      	push	{r4, r5, r6, r7, lr}
	return list->head;
    835a:	4e2d      	ldr	r6, [pc, #180]	; (8410 <bt_mesh_net_local+0xb8>)
		k_mem_slab_free(&loopback_buf_pool, (void **)&buf);
    835c:	4d2d      	ldr	r5, [pc, #180]	; (8414 <bt_mesh_net_local+0xbc>)
{
    835e:	b08b      	sub	sp, #44	; 0x2c
    8360:	69f4      	ldr	r4, [r6, #28]
Z_GENLIST_GET(slist, snode)
    8362:	2c00      	cmp	r4, #0
    8364:	d052      	beq.n	840c <bt_mesh_net_local+0xb4>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    8366:	6a32      	ldr	r2, [r6, #32]
	return node->next;
    8368:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    836a:	61f3      	str	r3, [r6, #28]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    836c:	4294      	cmp	r4, r2
		struct bt_mesh_net_rx rx = {
    836e:	f04f 0100 	mov.w	r1, #0
    8372:	f04f 0210 	mov.w	r2, #16
    8376:	a806      	add	r0, sp, #24
	list->tail = node;
    8378:	bf08      	it	eq
    837a:	6233      	streq	r3, [r6, #32]
		struct loopback_buf *buf = CONTAINER_OF(node, struct loopback_buf, node);
    837c:	9400      	str	r4, [sp, #0]
		struct bt_mesh_net_rx rx = {
    837e:	f00e ff74 	bl	1726a <memset>
			.sub = buf->sub,
    8382:	6867      	ldr	r7, [r4, #4]
		struct bt_mesh_net_rx rx = {
    8384:	9704      	str	r7, [sp, #16]
    8386:	8bbb      	ldrh	r3, [r7, #28]
    8388:	f8ad 3014 	strh.w	r3, [sp, #20]
    838c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    8390:	f8ad 3016 	strh.w	r3, [sp, #22]
    8394:	89e3      	ldrh	r3, [r4, #14]
    8396:	ba5b      	rev16	r3, r3
    8398:	f8ad 3018 	strh.w	r3, [sp, #24]
    839c:	8a23      	ldrh	r3, [r4, #16]
    839e:	ba5b      	rev16	r3, r3
    83a0:	f8ad 301a 	strh.w	r3, [sp, #26]
				.recv_ttl = TTL(buf->data),
    83a4:	7aa1      	ldrb	r1, [r4, #10]
    83a6:	f001 037f 	and.w	r3, r1, #127	; 0x7f
		struct bt_mesh_net_rx rx = {
    83aa:	f88d 301d 	strb.w	r3, [sp, #29]
			.seq = SEQ(buf->data),
    83ae:	f104 000b 	add.w	r0, r4, #11
		struct bt_mesh_net_rx rx = {
    83b2:	2301      	movs	r3, #1
    83b4:	f88d 301f 	strb.w	r3, [sp, #31]
			.seq = SEQ(buf->data),
    83b8:	f011 f8d4 	bl	19564 <sys_get_be24>
			.old_iv = (IVI(buf->data) != (bt_mesh.iv_index & 0x01)),
    83bc:	6833      	ldr	r3, [r6, #0]
		struct bt_mesh_net_rx rx = {
    83be:	9008      	str	r0, [sp, #32]
			.old_iv = (IVI(buf->data) != (bt_mesh.iv_index & 0x01)),
    83c0:	7a62      	ldrb	r2, [r4, #9]
    83c2:	f003 0301 	and.w	r3, r3, #1
		struct bt_mesh_net_rx rx = {
    83c6:	ea83 13d2 	eor.w	r3, r3, r2, lsr #7
			.new_key = SUBNET_KEY_TX_IDX(buf->sub),
    83ca:	7fba      	ldrb	r2, [r7, #30]
    83cc:	1e90      	subs	r0, r2, #2
    83ce:	4242      	negs	r2, r0
    83d0:	4142      	adcs	r2, r0
		struct bt_mesh_net_rx rx = {
    83d2:	f043 0350 	orr.w	r3, r3, #80	; 0x50
    83d6:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
    83da:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
			.ctl = CTL(buf->data),
    83de:	09c9      	lsrs	r1, r1, #7
		struct bt_mesh_net_rx rx = {
    83e0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
    83e4:	f022 027b 	bic.w	r2, r2, #123	; 0x7b
    83e8:	4313      	orrs	r3, r2
    83ea:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		net_buf_simple_init_with_data(&sbuf, buf->data, buf->len);
    83ee:	7a22      	ldrb	r2, [r4, #8]
    83f0:	f104 0109 	add.w	r1, r4, #9
    83f4:	a801      	add	r0, sp, #4
    83f6:	f014 fd9f 	bl	1cf38 <net_buf_simple_init_with_data>
		(void)bt_mesh_trans_recv(&sbuf, &rx);
    83fa:	a904      	add	r1, sp, #16
    83fc:	a801      	add	r0, sp, #4
    83fe:	f001 fa5b 	bl	98b8 <bt_mesh_trans_recv>
		k_mem_slab_free(&loopback_buf_pool, (void **)&buf);
    8402:	4669      	mov	r1, sp
    8404:	4628      	mov	r0, r5
    8406:	f015 ffd6 	bl	1e3b6 <k_mem_slab_free>
    840a:	e7a9      	b.n	8360 <bt_mesh_net_local+0x8>
}
    840c:	b00b      	add	sp, #44	; 0x2c
    840e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8410:	20001120 	.word	0x20001120
    8414:	20000ab8 	.word	0x20000ab8

00008418 <atomic_get.constprop.0>:
    8418:	4b03      	ldr	r3, [pc, #12]	; (8428 <atomic_get.constprop.0+0x10>)
    841a:	f3bf 8f5b 	dmb	ish
    841e:	6898      	ldr	r0, [r3, #8]
    8420:	f3bf 8f5b 	dmb	ish
}
    8424:	4770      	bx	lr
    8426:	bf00      	nop
    8428:	20001120 	.word	0x20001120

0000842c <atomic_set_bit_to.constprop.0>:
    842c:	4b0b      	ldr	r3, [pc, #44]	; (845c <atomic_set_bit_to.constprop.0+0x30>)
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    842e:	f3bf 8f5b 	dmb	ish
    8432:	b150      	cbz	r0, 844a <atomic_set_bit_to.constprop.0+0x1e>
    8434:	e853 2f00 	ldrex	r2, [r3]
    8438:	f042 0204 	orr.w	r2, r2, #4
    843c:	e843 2100 	strex	r1, r2, [r3]
    8440:	2900      	cmp	r1, #0
    8442:	d1f7      	bne.n	8434 <atomic_set_bit_to.constprop.0+0x8>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8444:	f3bf 8f5b 	dmb	ish
	}
}
    8448:	4770      	bx	lr
    844a:	e853 2f00 	ldrex	r2, [r3]
    844e:	f022 0204 	bic.w	r2, r2, #4
    8452:	e843 2100 	strex	r1, r2, [r3]
    8456:	2900      	cmp	r1, #0
    8458:	d0f4      	beq.n	8444 <atomic_set_bit_to.constprop.0+0x18>
    845a:	e7f6      	b.n	844a <atomic_set_bit_to.constprop.0+0x1e>
    845c:	20001128 	.word	0x20001128

00008460 <bt_mesh_net_create>:
{
    8460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8462:	460d      	mov	r5, r1
    8464:	461e      	mov	r6, r3
	if (BT_MESH_KEY_REFRESH(flags)) {
    8466:	f015 0301 	ands.w	r3, r5, #1
{
    846a:	4611      	mov	r1, r2
		err = bt_mesh_subnet_set(idx, BT_MESH_KR_PHASE_2, NULL, key);
    846c:	bf1d      	ittte	ne
    846e:	4613      	movne	r3, r2
    8470:	2102      	movne	r1, #2
    8472:	2200      	movne	r2, #0
		err = bt_mesh_subnet_set(idx, BT_MESH_KR_NORMAL, key, NULL);
    8474:	4619      	moveq	r1, r3
    8476:	f000 fc29 	bl	8ccc <bt_mesh_subnet_set>
    847a:	4604      	mov	r4, r0
	if (err) {
    847c:	b980      	cbnz	r0, 84a0 <bt_mesh_net_create+0x40>
	(void)memset(msg_cache, 0, sizeof(msg_cache));
    847e:	4601      	mov	r1, r0
    8480:	2228      	movs	r2, #40	; 0x28
    8482:	4808      	ldr	r0, [pc, #32]	; (84a4 <bt_mesh_net_create+0x44>)
	bt_mesh.iv_index = iv_index;
    8484:	4f08      	ldr	r7, [pc, #32]	; (84a8 <bt_mesh_net_create+0x48>)
	(void)memset(msg_cache, 0, sizeof(msg_cache));
    8486:	f00e fef0 	bl	1726a <memset>
	msg_cache_next = 0U;
    848a:	4b08      	ldr	r3, [pc, #32]	; (84ac <bt_mesh_net_create+0x4c>)
	bt_mesh.iv_index = iv_index;
    848c:	603e      	str	r6, [r7, #0]
	atomic_set_bit_to(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS,
    848e:	f3c5 0040 	ubfx	r0, r5, #1, #1
	msg_cache_next = 0U;
    8492:	801c      	strh	r4, [r3, #0]
	atomic_set_bit_to(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS,
    8494:	f7ff ffca 	bl	842c <atomic_set_bit_to.constprop.0>
	if (BT_MESH_IV_UPDATE(flags)) {
    8498:	b110      	cbz	r0, 84a0 <bt_mesh_net_create+0x40>
		bt_mesh.ivu_duration = BT_MESH_IVU_MIN_HOURS;
    849a:	2360      	movs	r3, #96	; 0x60
    849c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
}
    84a0:	4620      	mov	r0, r4
    84a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    84a4:	20001a78 	.word	0x20001a78
    84a8:	20001120 	.word	0x20001120
    84ac:	20002b10 	.word	0x20002b10

000084b0 <bt_mesh_net_iv_update>:
{
    84b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    84b2:	4606      	mov	r6, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    84b4:	f7ff ffb0 	bl	8418 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS)) {
    84b8:	f010 0f04 	tst.w	r0, #4
    84bc:	4c27      	ldr	r4, [pc, #156]	; (855c <bt_mesh_net_iv_update+0xac>)
{
    84be:	460d      	mov	r5, r1
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    84c0:	f3c0 0380 	ubfx	r3, r0, #2, #1
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS)) {
    84c4:	d005      	beq.n	84d2 <bt_mesh_net_iv_update+0x22>
		if (iv_index != bt_mesh.iv_index) {
    84c6:	6823      	ldr	r3, [r4, #0]
    84c8:	42b3      	cmp	r3, r6
    84ca:	d100      	bne.n	84ce <bt_mesh_net_iv_update+0x1e>
		if (iv_update) {
    84cc:	b339      	cbz	r1, 851e <bt_mesh_net_iv_update+0x6e>
			return false;
    84ce:	2300      	movs	r3, #0
    84d0:	e023      	b.n	851a <bt_mesh_net_iv_update+0x6a>
		if (iv_index == bt_mesh.iv_index) {
    84d2:	6822      	ldr	r2, [r4, #0]
		if (iv_index < bt_mesh.iv_index ||
    84d4:	42b2      	cmp	r2, r6
    84d6:	d220      	bcs.n	851a <bt_mesh_net_iv_update+0x6a>
		    iv_index > bt_mesh.iv_index + 42) {
    84d8:	f102 012a 	add.w	r1, r2, #42	; 0x2a
		if (iv_index < bt_mesh.iv_index ||
    84dc:	42b1      	cmp	r1, r6
    84de:	d31c      	bcc.n	851a <bt_mesh_net_iv_update+0x6a>
		if ((iv_index > bt_mesh.iv_index + 1) ||
    84e0:	3201      	adds	r2, #1
    84e2:	42b2      	cmp	r2, r6
    84e4:	d301      	bcc.n	84ea <bt_mesh_net_iv_update+0x3a>
    84e6:	d11a      	bne.n	851e <bt_mesh_net_iv_update+0x6e>
		    (iv_index == bt_mesh.iv_index + 1 && !iv_update)) {
    84e8:	b9cd      	cbnz	r5, 851e <bt_mesh_net_iv_update+0x6e>
			if (ivi_was_recovered) {
    84ea:	4a1d      	ldr	r2, [pc, #116]	; (8560 <bt_mesh_net_iv_update+0xb0>)
    84ec:	7817      	ldrb	r7, [r2, #0]
    84ee:	b9a7      	cbnz	r7, 851a <bt_mesh_net_iv_update+0x6a>
			ivi_was_recovered = true;
    84f0:	2301      	movs	r3, #1
    84f2:	7013      	strb	r3, [r2, #0]
			bt_mesh_rpl_clear();
    84f4:	f001 fc68 	bl	9dc8 <bt_mesh_rpl_clear>
			bt_mesh.seq = 0U;
    84f8:	e9c4 6700 	strd	r6, r7, [r4]
	atomic_set_bit_to(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS, iv_update);
    84fc:	4628      	mov	r0, r5
    84fe:	f7ff ff95 	bl	842c <atomic_set_bit_to.constprop.0>
	bt_mesh.ivu_duration = 0U;
    8502:	2300      	movs	r3, #0
	k_work_reschedule(&bt_mesh.ivu_timer, BT_MESH_IVU_TIMEOUT);
    8504:	4a17      	ldr	r2, [pc, #92]	; (8564 <bt_mesh_net_iv_update+0xb4>)
	bt_mesh.ivu_duration = 0U;
    8506:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	k_work_reschedule(&bt_mesh.ivu_timer, BT_MESH_IVU_TIMEOUT);
    850a:	4817      	ldr	r0, [pc, #92]	; (8568 <bt_mesh_net_iv_update+0xb8>)
    850c:	2300      	movs	r3, #0
    850e:	f00d fadb 	bl	15ac8 <k_work_reschedule>
	bt_mesh_subnet_foreach(bt_mesh_beacon_update);
    8512:	4816      	ldr	r0, [pc, #88]	; (856c <bt_mesh_net_iv_update+0xbc>)
    8514:	f000 fc1e 	bl	8d54 <bt_mesh_subnet_foreach>
	return true;
    8518:	2301      	movs	r3, #1
}
    851a:	4618      	mov	r0, r3
    851c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (bt_mesh.ivu_duration < BT_MESH_IVU_MIN_HOURS) {
    851e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    8522:	2b5f      	cmp	r3, #95	; 0x5f
    8524:	d9d3      	bls.n	84ce <bt_mesh_net_iv_update+0x1e>
	if (!iv_update && bt_mesh_tx_in_progress()) {
    8526:	b985      	cbnz	r5, 854a <bt_mesh_net_iv_update+0x9a>
    8528:	f001 f914 	bl	9754 <bt_mesh_tx_in_progress>
    852c:	b1a0      	cbz	r0, 8558 <bt_mesh_net_iv_update+0xa8>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    852e:	f3bf 8f5b 	dmb	ish
    8532:	4b0f      	ldr	r3, [pc, #60]	; (8570 <bt_mesh_net_iv_update+0xc0>)
    8534:	e853 2f00 	ldrex	r2, [r3]
    8538:	f042 0220 	orr.w	r2, r2, #32
    853c:	e843 2100 	strex	r1, r2, [r3]
    8540:	2900      	cmp	r1, #0
    8542:	d1f7      	bne.n	8534 <bt_mesh_net_iv_update+0x84>
    8544:	f3bf 8f5b 	dmb	ish
    8548:	e7c1      	b.n	84ce <bt_mesh_net_iv_update+0x1e>
		bt_mesh.iv_index = iv_index;
    854a:	6026      	str	r6, [r4, #0]
		bt_mesh_rpl_reset();
    854c:	f001 fc44 	bl	9dd8 <bt_mesh_rpl_reset>
		ivi_was_recovered = false;
    8550:	4b03      	ldr	r3, [pc, #12]	; (8560 <bt_mesh_net_iv_update+0xb0>)
    8552:	2200      	movs	r2, #0
    8554:	701a      	strb	r2, [r3, #0]
    8556:	e7d1      	b.n	84fc <bt_mesh_net_iv_update+0x4c>
		bt_mesh.seq = 0U;
    8558:	6065      	str	r5, [r4, #4]
    855a:	e7cf      	b.n	84fc <bt_mesh_net_iv_update+0x4c>
    855c:	20001120 	.word	0x20001120
    8560:	20002b2d 	.word	0x20002b2d
    8564:	a8c00000 	.word	0xa8c00000
    8568:	20001148 	.word	0x20001148
    856c:	000080b1 	.word	0x000080b1
    8570:	20001128 	.word	0x20001128

00008574 <ivu_refresh>:
		bt_mesh_net_relay(&buf, &rx);
	}
}

static void ivu_refresh(struct k_work *work)
{
    8574:	b510      	push	{r4, lr}
	if (!bt_mesh_is_provisioned()) {
    8576:	f7ff fb65 	bl	7c44 <bt_mesh_is_provisioned>
    857a:	b300      	cbz	r0, 85be <ivu_refresh+0x4a>
		return;
	}

	bt_mesh.ivu_duration = MIN(UINT8_MAX,
    857c:	4c10      	ldr	r4, [pc, #64]	; (85c0 <ivu_refresh+0x4c>)
    857e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    8582:	2be7      	cmp	r3, #231	; 0xe7
    8584:	bf28      	it	cs
    8586:	23e7      	movcs	r3, #231	; 0xe7
    8588:	3318      	adds	r3, #24
    858a:	b2db      	uxtb	r3, r3
	BT_DBG("%s for %u hour%s",
	       atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS) ?
	       "IVU in Progress" : "IVU Normal mode",
	       bt_mesh.ivu_duration, bt_mesh.ivu_duration == 1U ? "" : "s");

	if (bt_mesh.ivu_duration < BT_MESH_IVU_MIN_HOURS) {
    858c:	2b5f      	cmp	r3, #95	; 0x5f
	bt_mesh.ivu_duration = MIN(UINT8_MAX,
    858e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	if (bt_mesh.ivu_duration < BT_MESH_IVU_MIN_HOURS) {
    8592:	d807      	bhi.n	85a4 <ivu_refresh+0x30>
		if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
			store_iv(true);
		}

		k_work_reschedule(&bt_mesh.ivu_timer, BT_MESH_IVU_TIMEOUT);
    8594:	f104 0028 	add.w	r0, r4, #40	; 0x28
    8598:	4a0a      	ldr	r2, [pc, #40]	; (85c4 <ivu_refresh+0x50>)
		bt_mesh_beacon_ivu_initiator(true);
		bt_mesh_net_iv_update(bt_mesh.iv_index, false);
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		store_iv(true);
	}
}
    859a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_work_reschedule(&bt_mesh.ivu_timer, BT_MESH_IVU_TIMEOUT);
    859e:	2300      	movs	r3, #0
    85a0:	f00d ba92 	b.w	15ac8 <k_work_reschedule>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    85a4:	f7ff ff38 	bl	8418 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS)) {
    85a8:	0743      	lsls	r3, r0, #29
    85aa:	d508      	bpl.n	85be <ivu_refresh+0x4a>
		bt_mesh_beacon_ivu_initiator(true);
    85ac:	2001      	movs	r0, #1
    85ae:	f7ff fda3 	bl	80f8 <bt_mesh_beacon_ivu_initiator>
		bt_mesh_net_iv_update(bt_mesh.iv_index, false);
    85b2:	6820      	ldr	r0, [r4, #0]
    85b4:	2100      	movs	r1, #0
}
    85b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_mesh_net_iv_update(bt_mesh.iv_index, false);
    85ba:	f7ff bf79 	b.w	84b0 <bt_mesh_net_iv_update>
}
    85be:	bd10      	pop	{r4, pc}
    85c0:	20001120 	.word	0x20001120
    85c4:	a8c00000 	.word	0xa8c00000

000085c8 <bt_mesh_next_seq>:
{
    85c8:	b538      	push	{r3, r4, r5, lr}
	uint32_t seq = bt_mesh.seq++;
    85ca:	4c0e      	ldr	r4, [pc, #56]	; (8604 <bt_mesh_next_seq+0x3c>)
    85cc:	6865      	ldr	r5, [r4, #4]
    85ce:	1c6b      	adds	r3, r5, #1
    85d0:	6063      	str	r3, [r4, #4]
    85d2:	f7ff ff21 	bl	8418 <atomic_get.constprop.0>
    85d6:	4603      	mov	r3, r0
	if (!atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS) &&
    85d8:	075b      	lsls	r3, r3, #29
    85da:	f3c0 0080 	ubfx	r0, r0, #2, #1
    85de:	d40e      	bmi.n	85fe <bt_mesh_next_seq+0x36>
    85e0:	6863      	ldr	r3, [r4, #4]
    85e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    85e6:	d90a      	bls.n	85fe <bt_mesh_next_seq+0x36>
	    bt_mesh_subnet_get(BT_MESH_KEY_PRIMARY)) {
    85e8:	f000 fb3c 	bl	8c64 <bt_mesh_subnet_get>
	    bt_mesh.seq > IV_UPDATE_SEQ_LIMIT &&
    85ec:	b138      	cbz	r0, 85fe <bt_mesh_next_seq+0x36>
		bt_mesh_beacon_ivu_initiator(true);
    85ee:	2001      	movs	r0, #1
    85f0:	f7ff fd82 	bl	80f8 <bt_mesh_beacon_ivu_initiator>
		bt_mesh_net_iv_update(bt_mesh.iv_index + 1, true);
    85f4:	6820      	ldr	r0, [r4, #0]
    85f6:	2101      	movs	r1, #1
    85f8:	4408      	add	r0, r1
    85fa:	f7ff ff59 	bl	84b0 <bt_mesh_net_iv_update>
}
    85fe:	4628      	mov	r0, r5
    8600:	bd38      	pop	{r3, r4, r5, pc}
    8602:	bf00      	nop
    8604:	20001120 	.word	0x20001120

00008608 <net_header_encode>:
{
    8608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const bool ctl = (tx->ctx->app_idx == BT_MESH_KEY_UNUSED);
    860a:	6843      	ldr	r3, [r0, #4]
    860c:	885f      	ldrh	r7, [r3, #2]
	if (ctl && net_buf_simple_tailroom(buf) < 8) {
    860e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    8612:	429f      	cmp	r7, r3
{
    8614:	4605      	mov	r5, r0
    8616:	460e      	mov	r6, r1
    8618:	4614      	mov	r4, r2
	if (ctl && net_buf_simple_tailroom(buf) < 8) {
    861a:	d007      	beq.n	862c <net_header_encode+0x24>
	} else if (net_buf_simple_tailroom(buf) < 4) {
    861c:	4620      	mov	r0, r4
    861e:	f014 fd8e 	bl	1d13e <net_buf_simple_tailroom>
    8622:	2803      	cmp	r0, #3
    8624:	d808      	bhi.n	8638 <net_header_encode+0x30>
		return -EINVAL;
    8626:	f06f 0015 	mvn.w	r0, #21
}
    862a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (ctl && net_buf_simple_tailroom(buf) < 8) {
    862c:	4610      	mov	r0, r2
    862e:	f014 fd86 	bl	1d13e <net_buf_simple_tailroom>
    8632:	2807      	cmp	r0, #7
    8634:	d8f2      	bhi.n	861c <net_header_encode+0x14>
    8636:	e7f6      	b.n	8626 <net_header_encode+0x1e>
	net_buf_simple_push_be16(buf, tx->ctx->addr);
    8638:	686b      	ldr	r3, [r5, #4]
    863a:	4620      	mov	r0, r4
    863c:	8899      	ldrh	r1, [r3, #4]
    863e:	f014 fd1a 	bl	1d076 <net_buf_simple_push_be16>
	net_buf_simple_push_be16(buf, tx->src);
    8642:	8929      	ldrh	r1, [r5, #8]
    8644:	4620      	mov	r0, r4
    8646:	f014 fd16 	bl	1d076 <net_buf_simple_push_be16>
	net_buf_simple_push_be24(buf, bt_mesh_next_seq());
    864a:	f7ff ffbd 	bl	85c8 <bt_mesh_next_seq>
    864e:	4601      	mov	r1, r0
    8650:	4620      	mov	r0, r4
    8652:	f014 fd25 	bl	1d0a0 <net_buf_simple_push_be24>
	if (ctl) {
    8656:	f64f 73ff 	movw	r3, #65535	; 0xffff
    865a:	429f      	cmp	r7, r3
    865c:	686b      	ldr	r3, [r5, #4]
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl | 0x80);
    865e:	7ad9      	ldrb	r1, [r3, #11]
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl);
    8660:	4620      	mov	r0, r4
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl | 0x80);
    8662:	bf08      	it	eq
    8664:	f041 0180 	orreq.w	r1, r1, #128	; 0x80
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl);
    8668:	f014 fd11 	bl	1d08e <net_buf_simple_push_u8>
	net_buf_simple_push_u8(buf, (nid | (BT_MESH_NET_IVI_TX & 1) << 7));
    866c:	4b07      	ldr	r3, [pc, #28]	; (868c <net_header_encode+0x84>)
    866e:	7819      	ldrb	r1, [r3, #0]
    8670:	f7ff fed2 	bl	8418 <atomic_get.constprop.0>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    8674:	f3c0 0080 	ubfx	r0, r0, #2, #1
    8678:	1a09      	subs	r1, r1, r0
    867a:	ea46 11c1 	orr.w	r1, r6, r1, lsl #7
    867e:	4620      	mov	r0, r4
    8680:	b2c9      	uxtb	r1, r1
    8682:	f014 fd04 	bl	1d08e <net_buf_simple_push_u8>
	return 0;
    8686:	2000      	movs	r0, #0
    8688:	e7cf      	b.n	862a <net_header_encode+0x22>
    868a:	bf00      	nop
    868c:	20001120 	.word	0x20001120

00008690 <bt_mesh_net_send>:
{
    8690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8694:	461f      	mov	r7, r3
	tx->friend_cred = 0U;
    8696:	7ac3      	ldrb	r3, [r0, #11]
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
    8698:	f8d0 8000 	ldr.w	r8, [r0]
	tx->friend_cred = 0U;
    869c:	f36f 0300 	bfc	r3, #0, #1
    86a0:	72c3      	strb	r3, [r0, #11]
{
    86a2:	460d      	mov	r5, r1
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
    86a4:	f898 101e 	ldrb.w	r1, [r8, #30]
{
    86a8:	4616      	mov	r6, r2
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
    86aa:	1e8a      	subs	r2, r1, #2
{
    86ac:	b085      	sub	sp, #20
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
    86ae:	4253      	negs	r3, r2
    86b0:	4153      	adcs	r3, r2
    86b2:	9300      	str	r3, [sp, #0]
	err = net_header_encode(tx, cred->nid, &buf->b);
    86b4:	9a00      	ldr	r2, [sp, #0]
    86b6:	234a      	movs	r3, #74	; 0x4a
    86b8:	fb03 8302 	mla	r3, r3, r2, r8
    86bc:	f105 0908 	add.w	r9, r5, #8
    86c0:	f893 103d 	ldrb.w	r1, [r3, #61]	; 0x3d
    86c4:	464a      	mov	r2, r9
{
    86c6:	4604      	mov	r4, r0
	err = net_header_encode(tx, cred->nid, &buf->b);
    86c8:	f7ff ff9e 	bl	8608 <net_header_encode>
	if (err) {
    86cc:	4683      	mov	fp, r0
    86ce:	2800      	cmp	r0, #0
    86d0:	d16a      	bne.n	87a8 <bt_mesh_net_send+0x118>
	if (bt_mesh_fixed_group_match(tx->ctx->addr) ||
    86d2:	6863      	ldr	r3, [r4, #4]
    86d4:	8898      	ldrh	r0, [r3, #4]
    86d6:	f010 fe80 	bl	193da <bt_mesh_fixed_group_match>
    86da:	b170      	cbz	r0, 86fa <bt_mesh_net_send+0x6a>
		err = loopback(tx, buf->data, buf->len);
    86dc:	68ab      	ldr	r3, [r5, #8]
    86de:	9301      	str	r3, [sp, #4]
	err = k_mem_slab_alloc(&loopback_buf_pool, (void **)&buf, K_NO_WAIT);
    86e0:	4835      	ldr	r0, [pc, #212]	; (87b8 <bt_mesh_net_send+0x128>)
		err = loopback(tx, buf->data, buf->len);
    86e2:	f8b5 a00c 	ldrh.w	sl, [r5, #12]
	err = k_mem_slab_alloc(&loopback_buf_pool, (void **)&buf, K_NO_WAIT);
    86e6:	2200      	movs	r2, #0
    86e8:	2300      	movs	r3, #0
    86ea:	a903      	add	r1, sp, #12
    86ec:	f00c feac 	bl	15448 <k_mem_slab_alloc>
	if (err) {
    86f0:	4683      	mov	fp, r0
    86f2:	b178      	cbz	r0, 8714 <bt_mesh_net_send+0x84>
		return -ENOMEM;
    86f4:	f06f 0b0b 	mvn.w	fp, #11
    86f8:	e021      	b.n	873e <bt_mesh_net_send+0xae>
	    bt_mesh_has_addr(tx->ctx->addr)) {
    86fa:	6863      	ldr	r3, [r4, #4]
    86fc:	8898      	ldrh	r0, [r3, #4]
    86fe:	f001 ffed 	bl	a6dc <bt_mesh_has_addr>
	if (bt_mesh_fixed_group_match(tx->ctx->addr) ||
    8702:	2800      	cmp	r0, #0
    8704:	d1ea      	bne.n	86dc <bt_mesh_net_send+0x4c>
	if (tx->ctx->send_ttl == 1U) {
    8706:	6863      	ldr	r3, [r4, #4]
    8708:	7adb      	ldrb	r3, [r3, #11]
    870a:	2b01      	cmp	r3, #1
    870c:	d11f      	bne.n	874e <bt_mesh_net_send+0xbe>
		err = -EINVAL;
    870e:	f06f 0b15 	mvn.w	fp, #21
    8712:	e049      	b.n	87a8 <bt_mesh_net_send+0x118>
	buf->sub = tx->sub;
    8714:	9803      	ldr	r0, [sp, #12]
    8716:	6822      	ldr	r2, [r4, #0]
    8718:	6042      	str	r2, [r0, #4]
	(void)memcpy(buf->data, data, len);
    871a:	9901      	ldr	r1, [sp, #4]
    871c:	4652      	mov	r2, sl
    871e:	3009      	adds	r0, #9
    8720:	f00e fd98 	bl	17254 <memcpy>
	buf->len = len;
    8724:	9a03      	ldr	r2, [sp, #12]
	return list->tail;
    8726:	4925      	ldr	r1, [pc, #148]	; (87bc <bt_mesh_net_send+0x12c>)
    8728:	f882 a008 	strb.w	sl, [r2, #8]
    872c:	6a08      	ldr	r0, [r1, #32]
	parent->next = child;
    872e:	f8c2 b000 	str.w	fp, [r2]
Z_GENLIST_APPEND(slist, snode)
    8732:	bb38      	cbnz	r0, 8784 <bt_mesh_net_send+0xf4>
	list->head = node;
    8734:	e9c1 2207 	strd	r2, r2, [r1, #28]
	k_work_submit(&bt_mesh.local_work);
    8738:	4821      	ldr	r0, [pc, #132]	; (87c0 <bt_mesh_net_send+0x130>)
    873a:	f00d f929 	bl	15990 <k_work_submit>
		if (BT_MESH_ADDR_IS_UNICAST(tx->ctx->addr) ||
    873e:	6862      	ldr	r2, [r4, #4]
    8740:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
    8744:	2900      	cmp	r1, #0
    8746:	dc20      	bgt.n	878a <bt_mesh_net_send+0xfa>
    8748:	7ad2      	ldrb	r2, [r2, #11]
    874a:	2a01      	cmp	r2, #1
    874c:	d01d      	beq.n	878a <bt_mesh_net_send+0xfa>
	err = net_encrypt(&buf->b, cred, BT_MESH_NET_IVI_TX, false);
    874e:	4b1b      	ldr	r3, [pc, #108]	; (87bc <bt_mesh_net_send+0x12c>)
    8750:	681a      	ldr	r2, [r3, #0]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    8752:	f7ff fe61 	bl	8418 <atomic_get.constprop.0>
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
    8756:	9b00      	ldr	r3, [sp, #0]
    8758:	214a      	movs	r1, #74	; 0x4a
	err = net_encrypt(&buf->b, cred, BT_MESH_NET_IVI_TX, false);
    875a:	f3c0 0080 	ubfx	r0, r0, #2, #1
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
    875e:	fb01 8103 	mla	r1, r1, r3, r8
	err = net_encrypt(&buf->b, cred, BT_MESH_NET_IVI_TX, false);
    8762:	1a12      	subs	r2, r2, r0
    8764:	2300      	movs	r3, #0
    8766:	313d      	adds	r1, #61	; 0x3d
    8768:	4648      	mov	r0, r9
    876a:	f010 ff03 	bl	19574 <net_encrypt>
	if (err) {
    876e:	4683      	mov	fp, r0
    8770:	b9d0      	cbnz	r0, 87a8 <bt_mesh_net_send+0x118>
	BT_MESH_ADV(buf)->cb = cb;
    8772:	696a      	ldr	r2, [r5, #20]
	bt_mesh_adv_send(buf, cb, cb_data);
    8774:	4631      	mov	r1, r6
	BT_MESH_ADV(buf)->cb_data = cb_data;
    8776:	e9c2 6700 	strd	r6, r7, [r2]
	bt_mesh_adv_send(buf, cb, cb_data);
    877a:	4628      	mov	r0, r5
    877c:	463a      	mov	r2, r7
    877e:	f7ff fbd1 	bl	7f24 <bt_mesh_adv_send>
    8782:	e011      	b.n	87a8 <bt_mesh_net_send+0x118>
	parent->next = child;
    8784:	6002      	str	r2, [r0, #0]
	list->tail = node;
    8786:	620a      	str	r2, [r1, #32]
}
    8788:	e7d6      	b.n	8738 <bt_mesh_net_send+0xa8>
			if (!err) {
    878a:	f1bb 0f00 	cmp.w	fp, #0
    878e:	d10b      	bne.n	87a8 <bt_mesh_net_send+0x118>
void bt_mesh_net_settings_commit(void);

static inline void send_cb_finalize(const struct bt_mesh_send_cb *cb,
				    void *cb_data)
{
	if (!cb) {
    8790:	b156      	cbz	r6, 87a8 <bt_mesh_net_send+0x118>
		return;
	}

	if (cb->start) {
    8792:	6834      	ldr	r4, [r6, #0]
    8794:	b11c      	cbz	r4, 879e <bt_mesh_net_send+0x10e>
		cb->start(0, 0, cb_data);
    8796:	463a      	mov	r2, r7
    8798:	4659      	mov	r1, fp
    879a:	4658      	mov	r0, fp
    879c:	47a0      	blx	r4
	}

	if (cb->end) {
    879e:	6872      	ldr	r2, [r6, #4]
    87a0:	b112      	cbz	r2, 87a8 <bt_mesh_net_send+0x118>
		cb->end(0, cb_data);
    87a2:	4639      	mov	r1, r7
    87a4:	2000      	movs	r0, #0
    87a6:	4790      	blx	r2
	net_buf_unref(buf);
    87a8:	4628      	mov	r0, r5
    87aa:	f009 fd71 	bl	12290 <net_buf_unref>
}
    87ae:	4658      	mov	r0, fp
    87b0:	b005      	add	sp, #20
    87b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    87b6:	bf00      	nop
    87b8:	20000ab8 	.word	0x20000ab8
    87bc:	20001120 	.word	0x20001120
    87c0:	2000112c 	.word	0x2000112c

000087c4 <bt_mesh_net_loopback_clear>:
{
    87c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	list->tail = NULL;
    87c8:	2400      	movs	r4, #0
	return list->head;
    87ca:	4d14      	ldr	r5, [pc, #80]	; (881c <bt_mesh_net_loopback_clear+0x58>)
			k_mem_slab_free(&loopback_buf_pool, (void **)&buf);
    87cc:	f8df 9050 	ldr.w	r9, [pc, #80]	; 8820 <bt_mesh_net_loopback_clear+0x5c>
{
    87d0:	4606      	mov	r6, r0
	list->head = NULL;
    87d2:	4627      	mov	r7, r4
		if (net_idx == BT_MESH_KEY_ANY || net_idx == buf->sub->net_idx) {
    87d4:	f64f 78ff 	movw	r8, #65535	; 0xffff
	return list->head;
    87d8:	69eb      	ldr	r3, [r5, #28]
Z_GENLIST_GET(slist, snode)
    87da:	b95b      	cbnz	r3, 87f4 <bt_mesh_net_loopback_clear+0x30>
	bt_mesh.local_queue = new_list;
    87dc:	e9c5 7407 	strd	r7, r4, [r5, #28]
}
    87e0:	b003      	add	sp, #12
    87e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	parent->next = child;
    87e6:	2200      	movs	r2, #0
    87e8:	601a      	str	r2, [r3, #0]
Z_GENLIST_APPEND(slist, snode)
    87ea:	b10c      	cbz	r4, 87f0 <bt_mesh_net_loopback_clear+0x2c>
	parent->next = child;
    87ec:	6023      	str	r3, [r4, #0]
}
    87ee:	e013      	b.n	8818 <bt_mesh_net_loopback_clear+0x54>
	list->head = node;
    87f0:	461f      	mov	r7, r3
    87f2:	e011      	b.n	8818 <bt_mesh_net_loopback_clear+0x54>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    87f4:	6a29      	ldr	r1, [r5, #32]
	return node->next;
    87f6:	681a      	ldr	r2, [r3, #0]
	list->head = node;
    87f8:	61ea      	str	r2, [r5, #28]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    87fa:	428b      	cmp	r3, r1
	list->tail = node;
    87fc:	bf08      	it	eq
    87fe:	622a      	streq	r2, [r5, #32]
		if (net_idx == BT_MESH_KEY_ANY || net_idx == buf->sub->net_idx) {
    8800:	4546      	cmp	r6, r8
		struct loopback_buf *buf = CONTAINER_OF(node, struct loopback_buf, node);
    8802:	9301      	str	r3, [sp, #4]
		if (net_idx == BT_MESH_KEY_ANY || net_idx == buf->sub->net_idx) {
    8804:	d003      	beq.n	880e <bt_mesh_net_loopback_clear+0x4a>
    8806:	685a      	ldr	r2, [r3, #4]
    8808:	8b92      	ldrh	r2, [r2, #28]
    880a:	42b2      	cmp	r2, r6
    880c:	d1eb      	bne.n	87e6 <bt_mesh_net_loopback_clear+0x22>
			k_mem_slab_free(&loopback_buf_pool, (void **)&buf);
    880e:	a901      	add	r1, sp, #4
    8810:	4648      	mov	r0, r9
    8812:	f015 fdd0 	bl	1e3b6 <k_mem_slab_free>
    8816:	4623      	mov	r3, r4
    8818:	461c      	mov	r4, r3
    881a:	e7dd      	b.n	87d8 <bt_mesh_net_loopback_clear+0x14>
    881c:	20001120 	.word	0x20001120
    8820:	20000ab8 	.word	0x20000ab8

00008824 <bt_mesh_net_decode>:
{
    8824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8828:	4698      	mov	r8, r3
	if (in->len < BT_MESH_NET_MIN_PDU_LEN) {
    882a:	8883      	ldrh	r3, [r0, #4]
{
    882c:	4614      	mov	r4, r2
	if (in->len < BT_MESH_NET_MIN_PDU_LEN) {
    882e:	f1a3 0212 	sub.w	r2, r3, #18
    8832:	2a0b      	cmp	r2, #11
{
    8834:	460e      	mov	r6, r1
	if (in->len < BT_MESH_NET_MIN_PDU_LEN) {
    8836:	d875      	bhi.n	8924 <bt_mesh_net_decode+0x100>
	if (net_if == BT_MESH_NET_IF_ADV && check_dup(in)) {
    8838:	bb91      	cbnz	r1, 88a0 <bt_mesh_net_decode+0x7c>
	return buf->data + buf->len;
    883a:	6805      	ldr	r5, [r0, #0]
    883c:	441d      	add	r5, r3
    883e:	f815 7c07 	ldrb.w	r7, [r5, #-7]
    8842:	f815 3c08 	ldrb.w	r3, [r5, #-8]
    8846:	f815 2c06 	ldrb.w	r2, [r5, #-6]
	return ((uint32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
    884a:	ea47 2303 	orr.w	r3, r7, r3, lsl #8
	return ((uint16_t)src[0] << 8) | src[1];
    884e:	f815 7c05 	ldrb.w	r7, [r5, #-5]
	return ((uint32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
    8852:	ea47 2702 	orr.w	r7, r7, r2, lsl #8
    8856:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
	return ((uint16_t)src[0] << 8) | src[1];
    885a:	f815 2c04 	ldrb.w	r2, [r5, #-4]
    885e:	f815 3c03 	ldrb.w	r3, [r5, #-3]
	return ((uint32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
    8862:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	return ((uint16_t)src[0] << 8) | src[1];
    8866:	f815 2c02 	ldrb.w	r2, [r5, #-2]
    886a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
	return ((uint32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
    886e:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
    8872:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    8876:	4b30      	ldr	r3, [pc, #192]	; (8938 <bt_mesh_net_decode+0x114>)
	val = sys_get_be32(tail - 4) ^ sys_get_be32(tail - 8);
    8878:	407d      	eors	r5, r7
	for (i = 0; i < ARRAY_SIZE(dup_cache); i++) {
    887a:	460a      	mov	r2, r1
    887c:	461f      	mov	r7, r3
		if (dup_cache[i] == val) {
    887e:	f853 1b04 	ldr.w	r1, [r3], #4
    8882:	428d      	cmp	r5, r1
    8884:	d04e      	beq.n	8924 <bt_mesh_net_decode+0x100>
	for (i = 0; i < ARRAY_SIZE(dup_cache); i++) {
    8886:	3201      	adds	r2, #1
    8888:	2a0a      	cmp	r2, #10
    888a:	d1f8      	bne.n	887e <bt_mesh_net_decode+0x5a>
	dup_cache[dup_cache_next++] = val;
    888c:	492b      	ldr	r1, [pc, #172]	; (893c <bt_mesh_net_decode+0x118>)
    888e:	680b      	ldr	r3, [r1, #0]
    8890:	f847 5023 	str.w	r5, [r7, r3, lsl #2]
    8894:	1c5d      	adds	r5, r3, #1
	dup_cache_next %= ARRAY_SIZE(dup_cache);
    8896:	fb95 f3f2 	sdiv	r3, r5, r2
    889a:	fb02 5513 	mls	r5, r2, r3, r5
    889e:	600d      	str	r5, [r1, #0]
	rx->net_if = net_if;
    88a0:	7d23      	ldrb	r3, [r4, #20]
    88a2:	f366 1305 	bfi	r3, r6, #4, #2
    88a6:	7523      	strb	r3, [r4, #20]
	if (!bt_mesh_net_cred_find(rx, in, out, net_decrypt)) {
    88a8:	4601      	mov	r1, r0
    88aa:	4b25      	ldr	r3, [pc, #148]	; (8940 <bt_mesh_net_decode+0x11c>)
    88ac:	4642      	mov	r2, r8
    88ae:	4620      	mov	r0, r4
    88b0:	f000 fa6c 	bl	8d8c <bt_mesh_net_cred_find>
    88b4:	2800      	cmp	r0, #0
    88b6:	d038      	beq.n	892a <bt_mesh_net_decode+0x106>
	rx->ctx.recv_ttl = TTL(out->data);
    88b8:	f8d8 1000 	ldr.w	r1, [r8]
	rx->ctl = CTL(out->data);
    88bc:	7d22      	ldrb	r2, [r4, #20]
	rx->ctx.app_idx = BT_MESH_KEY_UNUSED;
    88be:	f64f 73ff 	movw	r3, #65535	; 0xffff
    88c2:	80e3      	strh	r3, [r4, #6]
	rx->ctx.recv_ttl = TTL(out->data);
    88c4:	784b      	ldrb	r3, [r1, #1]
    88c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    88ca:	7363      	strb	r3, [r4, #13]
	if (rx->ctx.recv_ttl == 0U) {
    88cc:	3b00      	subs	r3, #0
    88ce:	bf18      	it	ne
    88d0:	2301      	movne	r3, #1
    88d2:	425b      	negs	r3, r3
    88d4:	73e3      	strb	r3, [r4, #15]
	rx->ctl = CTL(out->data);
    88d6:	784b      	ldrb	r3, [r1, #1]
    88d8:	09db      	lsrs	r3, r3, #7
    88da:	f363 02c3 	bfi	r2, r3, #3, #1
    88de:	7522      	strb	r2, [r4, #20]
	rx->seq = SEQ(out->data);
    88e0:	1c88      	adds	r0, r1, #2
    88e2:	f010 fe3f 	bl	19564 <sys_get_be24>
    88e6:	6120      	str	r0, [r4, #16]
	return ((uint16_t)src[0] << 8) | src[1];
    88e8:	f8b1 3007 	ldrh.w	r3, [r1, #7]
	if (net_if != BT_MESH_NET_IF_PROXY_CFG &&
    88ec:	2e03      	cmp	r6, #3
    88ee:	ba5b      	rev16	r3, r3
    88f0:	b29a      	uxth	r2, r3
	rx->ctx.recv_dst = DST(out->data);
    88f2:	8163      	strh	r3, [r4, #10]
	if (net_if != BT_MESH_NET_IF_PROXY_CFG &&
    88f4:	d000      	beq.n	88f8 <bt_mesh_net_decode+0xd4>
    88f6:	b1da      	cbz	r2, 8930 <bt_mesh_net_decode+0x10c>
	msg_cache[rx->msg_cache_idx].src = rx->ctx.addr;
    88f8:	8922      	ldrh	r2, [r4, #8]
	rx->msg_cache_idx = msg_cache_next++;
    88fa:	4912      	ldr	r1, [pc, #72]	; (8944 <bt_mesh_net_decode+0x120>)
	msg_cache[rx->msg_cache_idx].src = rx->ctx.addr;
    88fc:	f3c2 020e 	ubfx	r2, r2, #0, #15
	rx->msg_cache_idx = msg_cache_next++;
    8900:	880b      	ldrh	r3, [r1, #0]
    8902:	82e3      	strh	r3, [r4, #22]
	msg_cache[rx->msg_cache_idx].src = rx->ctx.addr;
    8904:	ea42 30c0 	orr.w	r0, r2, r0, lsl #15
    8908:	4a0f      	ldr	r2, [pc, #60]	; (8948 <bt_mesh_net_decode+0x124>)
    890a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	rx->msg_cache_idx = msg_cache_next++;
    890e:	3301      	adds	r3, #1
	msg_cache_next %= ARRAY_SIZE(msg_cache);
    8910:	b29b      	uxth	r3, r3
    8912:	220a      	movs	r2, #10
    8914:	fbb3 f0f2 	udiv	r0, r3, r2
    8918:	fb02 3310 	mls	r3, r2, r0, r3
    891c:	800b      	strh	r3, [r1, #0]
	return 0;
    891e:	2000      	movs	r0, #0
}
    8920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EINVAL;
    8924:	f06f 0015 	mvn.w	r0, #21
    8928:	e7fa      	b.n	8920 <bt_mesh_net_decode+0xfc>
		return -ENOENT;
    892a:	f06f 0001 	mvn.w	r0, #1
    892e:	e7f7      	b.n	8920 <bt_mesh_net_decode+0xfc>
		return -EBADMSG;
    8930:	f06f 004c 	mvn.w	r0, #76	; 0x4c
    8934:	e7f4      	b.n	8920 <bt_mesh_net_decode+0xfc>
    8936:	bf00      	nop
    8938:	20001a4c 	.word	0x20001a4c
    893c:	20001a74 	.word	0x20001a74
    8940:	00008269 	.word	0x00008269
    8944:	20002b10 	.word	0x20002b10
    8948:	20001a78 	.word	0x20001a78

0000894c <bt_mesh_net_recv>:
{
    894c:	b570      	push	{r4, r5, r6, lr}
    894e:	b094      	sub	sp, #80	; 0x50
	NET_BUF_SIMPLE_DEFINE(buf, BT_MESH_NET_MAX_PDU_LEN);
    8950:	ab0c      	add	r3, sp, #48	; 0x30
{
    8952:	4615      	mov	r5, r2
	NET_BUF_SIMPLE_DEFINE(buf, BT_MESH_NET_MAX_PDU_LEN);
    8954:	f44f 12e8 	mov.w	r2, #1900544	; 0x1d0000
    8958:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct bt_mesh_net_rx rx = { .ctx.recv_rssi = rssi };
    895c:	2218      	movs	r2, #24
{
    895e:	460e      	mov	r6, r1
    8960:	4604      	mov	r4, r0
	struct bt_mesh_net_rx rx = { .ctx.recv_rssi = rssi };
    8962:	2100      	movs	r1, #0
    8964:	eb0d 0002 	add.w	r0, sp, r2
	NET_BUF_SIMPLE_DEFINE(buf, BT_MESH_NET_MAX_PDU_LEN);
    8968:	9303      	str	r3, [sp, #12]
	struct bt_mesh_net_rx rx = { .ctx.recv_rssi = rssi };
    896a:	f00e fc7e 	bl	1726a <memset>
    896e:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
	if (!bt_mesh_is_provisioned()) {
    8972:	f7ff f967 	bl	7c44 <bt_mesh_is_provisioned>
    8976:	2800      	cmp	r0, #0
    8978:	d058      	beq.n	8a2c <bt_mesh_net_recv+0xe0>
	if (bt_mesh_net_decode(data, net_if, &rx, &buf)) {
    897a:	ab03      	add	r3, sp, #12
    897c:	aa06      	add	r2, sp, #24
    897e:	4629      	mov	r1, r5
    8980:	4620      	mov	r0, r4
    8982:	f7ff ff4f 	bl	8824 <bt_mesh_net_decode>
    8986:	2800      	cmp	r0, #0
    8988:	d150      	bne.n	8a2c <bt_mesh_net_recv+0xe0>
	state->offset = net_buf_simple_headroom(buf);
    898a:	a803      	add	r0, sp, #12
    898c:	f014 fbd3 	bl	1d136 <net_buf_simple_headroom>
    8990:	4604      	mov	r4, r0
	rx.local_match = (bt_mesh_fixed_group_match(rx.ctx.recv_dst) ||
    8992:	f8bd 0022 	ldrh.w	r0, [sp, #34]	; 0x22
	state->len = buf->len;
    8996:	f8bd 5010 	ldrh.w	r5, [sp, #16]
    899a:	f010 fd1e 	bl	193da <bt_mesh_fixed_group_match>
    899e:	2800      	cmp	r0, #0
    89a0:	d13e      	bne.n	8a20 <bt_mesh_net_recv+0xd4>
			  bt_mesh_has_addr(rx.ctx.recv_dst));
    89a2:	f8bd 0022 	ldrh.w	r0, [sp, #34]	; 0x22
    89a6:	f001 fe99 	bl	a6dc <bt_mesh_has_addr>
	rx.local_match = (bt_mesh_fixed_group_match(rx.ctx.recv_dst) ||
    89aa:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
	if (bt_mesh_trans_recv(&buf, &rx) == -EAGAIN) {
    89ae:	a906      	add	r1, sp, #24
	rx.local_match = (bt_mesh_fixed_group_match(rx.ctx.recv_dst) ||
    89b0:	f360 1386 	bfi	r3, r0, #6, #1
	if (bt_mesh_trans_recv(&buf, &rx) == -EAGAIN) {
    89b4:	a803      	add	r0, sp, #12
	rx.local_match = (bt_mesh_fixed_group_match(rx.ctx.recv_dst) ||
    89b6:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	if (bt_mesh_trans_recv(&buf, &rx) == -EAGAIN) {
    89ba:	f000 ff7d 	bl	98b8 <bt_mesh_trans_recv>
    89be:	300b      	adds	r0, #11
    89c0:	d10a      	bne.n	89d8 <bt_mesh_net_recv+0x8c>
		msg_cache[rx.msg_cache_idx].src = BT_MESH_ADDR_UNASSIGNED;
    89c2:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
    89c6:	4a4d      	ldr	r2, [pc, #308]	; (8afc <bt_mesh_net_recv+0x1b0>)
    89c8:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
    89cc:	f36f 010e 	bfc	r1, #0, #15
    89d0:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
		msg_cache_next = rx.msg_cache_idx;
    89d4:	4a4a      	ldr	r2, [pc, #296]	; (8b00 <bt_mesh_net_recv+0x1b4>)
    89d6:	8013      	strh	r3, [r2, #0]
	if (!BT_MESH_ADDR_IS_UNICAST(rx.ctx.recv_dst) ||
    89d8:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
    89dc:	2b00      	cmp	r3, #0
    89de:	dd04      	ble.n	89ea <bt_mesh_net_recv+0x9e>
	    (!rx.local_match && !rx.friend_match)) {
    89e0:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
	if (!BT_MESH_ADDR_IS_UNICAST(rx.ctx.recv_dst) ||
    89e4:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    89e8:	d120      	bne.n	8a2c <bt_mesh_net_recv+0xe0>
	buf->data = buf->__buf + state->offset;
    89ea:	9805      	ldr	r0, [sp, #20]
	if (rx->ctx.recv_ttl <= 1U) {
    89ec:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
	buf->len = state->len;
    89f0:	f8ad 5010 	strh.w	r5, [sp, #16]
	buf->data = buf->__buf + state->offset;
    89f4:	fa10 f484 	uxtah	r4, r0, r4
    89f8:	2b01      	cmp	r3, #1
    89fa:	9403      	str	r4, [sp, #12]
    89fc:	d916      	bls.n	8a2c <bt_mesh_net_recv+0xe0>
	if (rx->net_if == BT_MESH_NET_IF_ADV &&
    89fe:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    8a02:	f013 0f34 	tst.w	r3, #52	; 0x34
    8a06:	d108      	bne.n	8a1a <bt_mesh_net_recv+0xce>
	    bt_mesh_relay_get() != BT_MESH_RELAY_ENABLED &&
    8a08:	f7ff fa14 	bl	7e34 <bt_mesh_relay_get>
	    !rx->friend_cred &&
    8a0c:	2801      	cmp	r0, #1
    8a0e:	d109      	bne.n	8a24 <bt_mesh_net_recv+0xd8>
	if (rx->net_if == BT_MESH_NET_IF_ADV && !rx->friend_cred) {
    8a10:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    8a14:	f013 0f34 	tst.w	r3, #52	; 0x34
    8a18:	d00a      	beq.n	8a30 <bt_mesh_net_recv+0xe4>
		transmit = bt_mesh_net_transmit_get();
    8a1a:	f7ff f9cb 	bl	7db4 <bt_mesh_net_transmit_get>
    8a1e:	e009      	b.n	8a34 <bt_mesh_net_recv+0xe8>
	rx.local_match = (bt_mesh_fixed_group_match(rx.ctx.recv_dst) ||
    8a20:	2001      	movs	r0, #1
    8a22:	e7c2      	b.n	89aa <bt_mesh_net_recv+0x5e>
	    bt_mesh_gatt_proxy_get() != BT_MESH_GATT_PROXY_ENABLED) {
    8a24:	f010 fcd2 	bl	193cc <bt_mesh_gatt_proxy_get>
	    bt_mesh_relay_get() != BT_MESH_RELAY_ENABLED &&
    8a28:	2801      	cmp	r0, #1
    8a2a:	d0f1      	beq.n	8a10 <bt_mesh_net_recv+0xc4>
}
    8a2c:	b014      	add	sp, #80	; 0x50
    8a2e:	bd70      	pop	{r4, r5, r6, pc}
		transmit = bt_mesh_relay_retransmit_get();
    8a30:	f7ff fa0c 	bl	7e4c <bt_mesh_relay_retransmit_get>
		transmit = bt_mesh_net_transmit_get();
    8a34:	4602      	mov	r2, r0
				 transmit, K_NO_WAIT);
    8a36:	2100      	movs	r1, #0
    8a38:	2000      	movs	r0, #0
	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA, BT_MESH_RELAY_ADV,
    8a3a:	e9cd 0100 	strd	r0, r1, [sp]
    8a3e:	2102      	movs	r1, #2
    8a40:	2001      	movs	r0, #1
    8a42:	f7ff fa2d 	bl	7ea0 <bt_mesh_adv_create>
	if (!buf) {
    8a46:	4604      	mov	r4, r0
    8a48:	2800      	cmp	r0, #0
    8a4a:	d0ef      	beq.n	8a2c <bt_mesh_net_recv+0xe0>
	sbuf->data[1] &= 0x80;
    8a4c:	9a03      	ldr	r2, [sp, #12]
    8a4e:	7853      	ldrb	r3, [r2, #1]
    8a50:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    8a54:	7053      	strb	r3, [r2, #1]
	sbuf->data[1] |= rx->ctx.recv_ttl - 1U;
    8a56:	9a03      	ldr	r2, [sp, #12]
    8a58:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    8a5c:	7851      	ldrb	r1, [r2, #1]
    8a5e:	3b01      	subs	r3, #1
    8a60:	430b      	orrs	r3, r1
    8a62:	7053      	strb	r3, [r2, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
    8a64:	f100 0508 	add.w	r5, r0, #8
    8a68:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    8a6c:	9903      	ldr	r1, [sp, #12]
    8a6e:	4628      	mov	r0, r5
    8a70:	f014 fab1 	bl	1cfd6 <net_buf_simple_add_mem>
	cred = &rx->sub->keys[SUBNET_KEY_TX_IDX(rx->sub)].msg;
    8a74:	9a06      	ldr	r2, [sp, #24]
	if (rx->friend_cred) {
    8a76:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
	cred = &rx->sub->keys[SUBNET_KEY_TX_IDX(rx->sub)].msg;
    8a7a:	7f93      	ldrb	r3, [r2, #30]
    8a7c:	1e99      	subs	r1, r3, #2
    8a7e:	424b      	negs	r3, r1
    8a80:	414b      	adcs	r3, r1
    8a82:	214a      	movs	r1, #74	; 0x4a
    8a84:	434b      	muls	r3, r1
    8a86:	f103 013d 	add.w	r1, r3, #61	; 0x3d
	if (rx->friend_cred) {
    8a8a:	0740      	lsls	r0, r0, #29
	cred = &rx->sub->keys[SUBNET_KEY_TX_IDX(rx->sub)].msg;
    8a8c:	4411      	add	r1, r2
	if (rx->friend_cred) {
    8a8e:	d50b      	bpl.n	8aa8 <bt_mesh_net_recv+0x15c>
		buf->data[0] &= 0x80; /* Clear everything except IVI */
    8a90:	68a6      	ldr	r6, [r4, #8]
    8a92:	7830      	ldrb	r0, [r6, #0]
    8a94:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
    8a98:	7030      	strb	r0, [r6, #0]
		buf->data[0] |= cred->nid;
    8a9a:	68a0      	ldr	r0, [r4, #8]
    8a9c:	4413      	add	r3, r2
    8a9e:	7802      	ldrb	r2, [r0, #0]
    8aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    8aa4:	4313      	orrs	r3, r2
    8aa6:	7003      	strb	r3, [r0, #0]
	if (net_encrypt(&buf->b, cred, BT_MESH_NET_IVI_RX(rx), false)) {
    8aa8:	4b16      	ldr	r3, [pc, #88]	; (8b04 <bt_mesh_net_recv+0x1b8>)
    8aaa:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
    8aae:	6818      	ldr	r0, [r3, #0]
    8ab0:	f002 0201 	and.w	r2, r2, #1
    8ab4:	1a82      	subs	r2, r0, r2
    8ab6:	2300      	movs	r3, #0
    8ab8:	4628      	mov	r0, r5
    8aba:	f010 fd5b 	bl	19574 <net_encrypt>
    8abe:	b9b0      	cbnz	r0, 8aee <bt_mesh_net_recv+0x1a2>
	if (relay_to_adv(rx->net_if) || rx->friend_cred) {
    8ac0:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
	switch (net_if) {
    8ac4:	f013 0f30 	tst.w	r3, #48	; 0x30
	if (relay_to_adv(rx->net_if) || rx->friend_cred) {
    8ac8:	f3c3 1201 	ubfx	r2, r3, #4, #2
	switch (net_if) {
    8acc:	d006      	beq.n	8adc <bt_mesh_net_recv+0x190>
    8ace:	2a02      	cmp	r2, #2
    8ad0:	d011      	beq.n	8af6 <bt_mesh_net_recv+0x1aa>
	if (relay_to_adv(rx->net_if) || rx->friend_cred) {
    8ad2:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    8ad6:	075b      	lsls	r3, r3, #29
    8ad8:	d404      	bmi.n	8ae4 <bt_mesh_net_recv+0x198>
done:
    8ada:	e008      	b.n	8aee <bt_mesh_net_recv+0x1a2>
		return (bt_mesh_relay_get() == BT_MESH_RELAY_ENABLED);
    8adc:	f7ff f9aa 	bl	7e34 <bt_mesh_relay_get>
	if (relay_to_adv(rx->net_if) || rx->friend_cred) {
    8ae0:	2801      	cmp	r0, #1
    8ae2:	d1f6      	bne.n	8ad2 <bt_mesh_net_recv+0x186>
		bt_mesh_adv_send(buf, NULL, NULL);
    8ae4:	2200      	movs	r2, #0
    8ae6:	4611      	mov	r1, r2
    8ae8:	4620      	mov	r0, r4
    8aea:	f7ff fa1b 	bl	7f24 <bt_mesh_adv_send>
	net_buf_unref(buf);
    8aee:	4620      	mov	r0, r4
    8af0:	f009 fbce 	bl	12290 <net_buf_unref>
    8af4:	e79a      	b.n	8a2c <bt_mesh_net_recv+0xe0>
		return (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED);
    8af6:	f010 fc69 	bl	193cc <bt_mesh_gatt_proxy_get>
    8afa:	e7f1      	b.n	8ae0 <bt_mesh_net_recv+0x194>
    8afc:	20001a78 	.word	0x20001a78
    8b00:	20002b10 	.word	0x20002b10
    8b04:	20001120 	.word	0x20001120

00008b08 <bt_mesh_net_init>:

void bt_mesh_net_init(void)
{
    8b08:	b510      	push	{r4, lr}
	k_work_init_delayable(&bt_mesh.ivu_timer, ivu_refresh);
    8b0a:	4c06      	ldr	r4, [pc, #24]	; (8b24 <bt_mesh_net_init+0x1c>)
    8b0c:	4906      	ldr	r1, [pc, #24]	; (8b28 <bt_mesh_net_init+0x20>)
    8b0e:	f104 0028 	add.w	r0, r4, #40	; 0x28
    8b12:	f015 fe0e 	bl	1e732 <k_work_init_delayable>

	k_work_init(&bt_mesh.local_work, bt_mesh_net_local);
    8b16:	f104 000c 	add.w	r0, r4, #12
    8b1a:	4904      	ldr	r1, [pc, #16]	; (8b2c <bt_mesh_net_init+0x24>)
}
    8b1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init(&bt_mesh.local_work, bt_mesh_net_local);
    8b20:	f015 bdd1 	b.w	1e6c6 <k_work_init>
    8b24:	20001120 	.word	0x20001120
    8b28:	00008575 	.word	0x00008575
    8b2c:	00008359 	.word	0x00008359

00008b30 <subnet_evt>:
		.net_idx = BT_MESH_KEY_UNUSED,
	},
};

static void subnet_evt(struct bt_mesh_subnet *sub, enum bt_mesh_key_evt evt)
{
    8b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	STRUCT_SECTION_FOREACH(bt_mesh_subnet_cb, cb) {
    8b32:	4c06      	ldr	r4, [pc, #24]	; (8b4c <subnet_evt+0x1c>)
    8b34:	4f06      	ldr	r7, [pc, #24]	; (8b50 <subnet_evt+0x20>)
{
    8b36:	4605      	mov	r5, r0
    8b38:	460e      	mov	r6, r1
	STRUCT_SECTION_FOREACH(bt_mesh_subnet_cb, cb) {
    8b3a:	42bc      	cmp	r4, r7
    8b3c:	d300      	bcc.n	8b40 <subnet_evt+0x10>
		cb->evt_handler(sub, evt);
	}
}
    8b3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		cb->evt_handler(sub, evt);
    8b40:	f854 3b04 	ldr.w	r3, [r4], #4
    8b44:	4631      	mov	r1, r6
    8b46:	4628      	mov	r0, r5
    8b48:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_mesh_subnet_cb, cb) {
    8b4a:	e7f6      	b.n	8b3a <subnet_evt+0xa>
    8b4c:	0001f170 	.word	0x0001f170
    8b50:	0001f178 	.word	0x0001f178

00008b54 <net_keys_create>:
	return bt_mesh_k2(key, p, p_len, &cred->nid, cred->enc, cred->privacy);
}

static int net_keys_create(struct bt_mesh_subnet_keys *keys,
			   const uint8_t key[16])
{
    8b54:	b530      	push	{r4, r5, lr}
    8b56:	b085      	sub	sp, #20
	uint8_t p = 0;
    8b58:	2300      	movs	r3, #0
    8b5a:	f88d 300f 	strb.w	r3, [sp, #15]
	return bt_mesh_k2(key, p, p_len, &cred->nid, cred->enc, cred->privacy);
    8b5e:	f100 0322 	add.w	r3, r0, #34	; 0x22
{
    8b62:	460d      	mov	r5, r1
	return bt_mesh_k2(key, p, p_len, &cred->nid, cred->enc, cred->privacy);
    8b64:	9301      	str	r3, [sp, #4]
    8b66:	f100 0312 	add.w	r3, r0, #18
{
    8b6a:	4604      	mov	r4, r0
	return bt_mesh_k2(key, p, p_len, &cred->nid, cred->enc, cred->privacy);
    8b6c:	9300      	str	r3, [sp, #0]
    8b6e:	2201      	movs	r2, #1
    8b70:	f100 0311 	add.w	r3, r0, #17
    8b74:	f10d 010f 	add.w	r1, sp, #15
    8b78:	4628      	mov	r0, r5
    8b7a:	f001 fb2d 	bl	a1d8 <bt_mesh_k2>
	int err;

	err = msg_cred_create(&keys->msg, &p, 1, key);
	if (err) {
    8b7e:	b998      	cbnz	r0, 8ba8 <net_keys_create+0x54>
		BT_ERR("Unable to generate NID, EncKey & PrivacyKey");
		return err;
	}

	memcpy(keys->net, key, 16);
    8b80:	4629      	mov	r1, r5
    8b82:	2210      	movs	r2, #16
    8b84:	1c60      	adds	r0, r4, #1
    8b86:	f00e fb65 	bl	17254 <memcpy>

	BT_DBG("NID 0x%02x EncKey %s", keys->msg.nid,
	       bt_hex(keys->msg.enc, 16));
	BT_DBG("PrivacyKey %s", bt_hex(keys->msg.privacy, 16));

	err = bt_mesh_k3(key, keys->net_id);
    8b8a:	f104 0132 	add.w	r1, r4, #50	; 0x32
    8b8e:	4628      	mov	r0, r5
    8b90:	f001 fb7a 	bl	a288 <bt_mesh_k3>
	if (err) {
    8b94:	b940      	cbnz	r0, 8ba8 <net_keys_create+0x54>
}

static inline int bt_mesh_beacon_key(const uint8_t net_key[16],
				     uint8_t beacon_key[16])
{
	return bt_mesh_id128(net_key, "nkbk", beacon_key);
    8b96:	4905      	ldr	r1, [pc, #20]	; (8bac <net_keys_create+0x58>)
    8b98:	f104 023a 	add.w	r2, r4, #58	; 0x3a
    8b9c:	4628      	mov	r0, r5
    8b9e:	f001 fbc9 	bl	a334 <bt_mesh_id128>

	BT_DBG("IdentityKey %s", bt_hex(keys->identity, 16));
#endif /* GATT_PROXY */

	err = bt_mesh_beacon_key(key, keys->beacon);
	if (err) {
    8ba2:	b908      	cbnz	r0, 8ba8 <net_keys_create+0x54>
		return err;
	}

	BT_DBG("BeaconKey %s", bt_hex(keys->beacon, 16));

	keys->valid = 1U;
    8ba4:	2301      	movs	r3, #1
    8ba6:	7023      	strb	r3, [r4, #0]

	return 0;
}
    8ba8:	b005      	add	sp, #20
    8baa:	bd30      	pop	{r4, r5, pc}
    8bac:	00020346 	.word	0x00020346

00008bb0 <bt_mesh_net_flags>:
	if (sub && (sub->kr_phase == BT_MESH_KR_PHASE_2)) {
    8bb0:	b118      	cbz	r0, 8bba <bt_mesh_net_flags+0xa>
    8bb2:	7f80      	ldrb	r0, [r0, #30]
	uint8_t flags = 0x00;
    8bb4:	1e82      	subs	r2, r0, #2
    8bb6:	4250      	negs	r0, r2
    8bb8:	4150      	adcs	r0, r2
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    8bba:	4b05      	ldr	r3, [pc, #20]	; (8bd0 <bt_mesh_net_flags+0x20>)
    8bbc:	f3bf 8f5b 	dmb	ish
    8bc0:	681b      	ldr	r3, [r3, #0]
    8bc2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS)) {
    8bc6:	075b      	lsls	r3, r3, #29
		flags |= BT_MESH_NET_FLAG_IVU;
    8bc8:	bf48      	it	mi
    8bca:	f040 0002 	orrmi.w	r0, r0, #2
}
    8bce:	4770      	bx	lr
    8bd0:	20001128 	.word	0x20001128

00008bd4 <bt_mesh_subnet_add>:

uint8_t bt_mesh_subnet_add(uint16_t net_idx, const uint8_t key[16])
{
    8bd4:	b570      	push	{r4, r5, r6, lr}
		if (subnets[i].net_idx == net_idx) {
    8bd6:	4d14      	ldr	r5, [pc, #80]	; (8c28 <bt_mesh_subnet_add+0x54>)
    8bd8:	8bab      	ldrh	r3, [r5, #28]
{
    8bda:	4606      	mov	r6, r0
		if (subnets[i].net_idx == net_idx) {
    8bdc:	429e      	cmp	r6, r3
{
    8bde:	4608      	mov	r0, r1
		if (subnets[i].net_idx == net_idx) {
    8be0:	d00b      	beq.n	8bfa <bt_mesh_subnet_add+0x26>
		if (!sub && subnets[i].net_idx == BT_MESH_KEY_UNUSED) {
    8be2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    8be6:	4293      	cmp	r3, r2
    8be8:	d11b      	bne.n	8c22 <bt_mesh_subnet_add+0x4e>
		}

		return STATUS_SUCCESS;
	}

	err = net_keys_create(&sub->keys[0], key);
    8bea:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    8bee:	f7ff ffb1 	bl	8b54 <net_keys_create>
	if (err) {
    8bf2:	4604      	mov	r4, r0
    8bf4:	b158      	cbz	r0, 8c0e <bt_mesh_subnet_add+0x3a>
		return STATUS_UNSPECIFIED;
    8bf6:	2010      	movs	r0, #16
    8bf8:	e008      	b.n	8c0c <bt_mesh_subnet_add+0x38>
		if (memcmp(key, sub->keys[0].net, 16)) {
    8bfa:	2210      	movs	r2, #16
    8bfc:	f105 012d 	add.w	r1, r5, #45	; 0x2d
    8c00:	f00e fb17 	bl	17232 <memcmp>
		return STATUS_SUCCESS;
    8c04:	2800      	cmp	r0, #0
    8c06:	bf14      	ite	ne
    8c08:	2006      	movne	r0, #6
    8c0a:	2000      	moveq	r0, #0
		BT_DBG("Storing NetKey persistently");
		bt_mesh_subnet_store(sub->net_idx);
	}

	return STATUS_SUCCESS;
}
    8c0c:	bd70      	pop	{r4, r5, r6, pc}
	sub->kr_phase = BT_MESH_KR_NORMAL;
    8c0e:	f44f 7300 	mov.w	r3, #512	; 0x200
	subnet_evt(sub, BT_MESH_KEY_ADDED);
    8c12:	4601      	mov	r1, r0
    8c14:	4628      	mov	r0, r5
	sub->net_idx = net_idx;
    8c16:	83ae      	strh	r6, [r5, #28]
	sub->kr_phase = BT_MESH_KR_NORMAL;
    8c18:	83eb      	strh	r3, [r5, #30]
	subnet_evt(sub, BT_MESH_KEY_ADDED);
    8c1a:	f7ff ff89 	bl	8b30 <subnet_evt>
	return STATUS_SUCCESS;
    8c1e:	4620      	mov	r0, r4
    8c20:	e7f4      	b.n	8c0c <bt_mesh_subnet_add+0x38>
		return STATUS_INSUFF_RESOURCES;
    8c22:	2005      	movs	r0, #5
    8c24:	e7f2      	b.n	8c0c <bt_mesh_subnet_add+0x38>
    8c26:	bf00      	nop
    8c28:	2000031c 	.word	0x2000031c

00008c2c <bt_mesh_subnets_get>:

	return STATUS_SUCCESS;
}

ssize_t bt_mesh_subnets_get(uint16_t net_idxs[], size_t max, off_t skip)
{
    8c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
	size_t count = 0;

	for (int i = 0; i < ARRAY_SIZE(subnets); i++) {
    8c2e:	2300      	movs	r3, #0
		struct bt_mesh_subnet *sub = &subnets[i];

		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    8c30:	4e0b      	ldr	r6, [pc, #44]	; (8c60 <bt_mesh_subnets_get+0x34>)
{
    8c32:	4604      	mov	r4, r0
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    8c34:	f64f 77ff 	movw	r7, #65535	; 0xffff
	size_t count = 0;
    8c38:	4618      	mov	r0, r3
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    8c3a:	8bb5      	ldrh	r5, [r6, #28]
	for (int i = 0; i < ARRAY_SIZE(subnets); i++) {
    8c3c:	b103      	cbz	r3, 8c40 <bt_mesh_subnets_get+0x14>

		net_idxs[count++] = sub->net_idx;
	}

	return count;
}
    8c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    8c40:	42bd      	cmp	r5, r7
    8c42:	d0fc      	beq.n	8c3e <bt_mesh_subnets_get+0x12>
		if (skip) {
    8c44:	b112      	cbz	r2, 8c4c <bt_mesh_subnets_get+0x20>
			skip--;
    8c46:	3a01      	subs	r2, #1
		net_idxs[count++] = sub->net_idx;
    8c48:	2301      	movs	r3, #1
    8c4a:	e7f6      	b.n	8c3a <bt_mesh_subnets_get+0xe>
		if (count >= max) {
    8c4c:	4288      	cmp	r0, r1
    8c4e:	d203      	bcs.n	8c58 <bt_mesh_subnets_get+0x2c>
		net_idxs[count++] = sub->net_idx;
    8c50:	f824 5010 	strh.w	r5, [r4, r0, lsl #1]
    8c54:	3001      	adds	r0, #1
    8c56:	e7f7      	b.n	8c48 <bt_mesh_subnets_get+0x1c>
			return -ENOMEM;
    8c58:	f06f 000b 	mvn.w	r0, #11
    8c5c:	e7ef      	b.n	8c3e <bt_mesh_subnets_get+0x12>
    8c5e:	bf00      	nop
    8c60:	2000031c 	.word	0x2000031c

00008c64 <bt_mesh_subnet_get>:
struct bt_mesh_subnet *bt_mesh_subnet_get(uint16_t net_idx)
{
	for (int i = 0; i < ARRAY_SIZE(subnets); i++) {
		struct bt_mesh_subnet *sub = &subnets[i];

		if (sub->net_idx == net_idx) {
    8c64:	4b03      	ldr	r3, [pc, #12]	; (8c74 <bt_mesh_subnet_get+0x10>)
    8c66:	8b9a      	ldrh	r2, [r3, #28]
			return sub;
		}
	}

	return NULL;
}
    8c68:	4282      	cmp	r2, r0
    8c6a:	bf0c      	ite	eq
    8c6c:	4618      	moveq	r0, r3
    8c6e:	2000      	movne	r0, #0
    8c70:	4770      	bx	lr
    8c72:	bf00      	nop
    8c74:	2000031c 	.word	0x2000031c

00008c78 <bt_mesh_subnet_kr_phase_set>:
{
    8c78:	b537      	push	{r0, r1, r2, r4, r5, lr}
	const uint8_t valid_transitions[] = {
    8c7a:	4b13      	ldr	r3, [pc, #76]	; (8cc8 <bt_mesh_subnet_kr_phase_set+0x50>)
    8c7c:	881a      	ldrh	r2, [r3, #0]
    8c7e:	789b      	ldrb	r3, [r3, #2]
    8c80:	f8ad 2004 	strh.w	r2, [sp, #4]
    8c84:	f88d 3006 	strb.w	r3, [sp, #6]
	sub = bt_mesh_subnet_get(net_idx);
    8c88:	f7ff ffec 	bl	8c64 <bt_mesh_subnet_get>
{
    8c8c:	460c      	mov	r4, r1
	if (!sub) {
    8c8e:	4605      	mov	r5, r0
    8c90:	b918      	cbnz	r0, 8c9a <bt_mesh_subnet_kr_phase_set+0x22>
		*phase = 0x00;
    8c92:	7008      	strb	r0, [r1, #0]
		return STATUS_INVALID_NETKEY;
    8c94:	2004      	movs	r0, #4
}
    8c96:	b003      	add	sp, #12
    8c98:	bd30      	pop	{r4, r5, pc}
	if (*phase == sub->kr_phase) {
    8c9a:	7809      	ldrb	r1, [r1, #0]
    8c9c:	7f83      	ldrb	r3, [r0, #30]
    8c9e:	4299      	cmp	r1, r3
    8ca0:	d00c      	beq.n	8cbc <bt_mesh_subnet_kr_phase_set+0x44>
	if (sub->kr_phase < ARRAY_SIZE(valid_transitions) &&
    8ca2:	2b02      	cmp	r3, #2
    8ca4:	d80c      	bhi.n	8cc0 <bt_mesh_subnet_kr_phase_set+0x48>
	    valid_transitions[sub->kr_phase] & BIT(*phase)) {
    8ca6:	aa02      	add	r2, sp, #8
    8ca8:	441a      	add	r2, r3
    8caa:	f812 2c04 	ldrb.w	r2, [r2, #-4]
	if (sub->kr_phase < ARRAY_SIZE(valid_transitions) &&
    8cae:	40ca      	lsrs	r2, r1
    8cb0:	07d2      	lsls	r2, r2, #31
    8cb2:	d505      	bpl.n	8cc0 <bt_mesh_subnet_kr_phase_set+0x48>
		key_refresh(sub, *phase);
    8cb4:	f010 fc70 	bl	19598 <key_refresh>
		*phase = sub->kr_phase;
    8cb8:	7fab      	ldrb	r3, [r5, #30]
    8cba:	7023      	strb	r3, [r4, #0]
		return STATUS_SUCCESS;
    8cbc:	2000      	movs	r0, #0
    8cbe:	e7ea      	b.n	8c96 <bt_mesh_subnet_kr_phase_set+0x1e>
	*phase = sub->kr_phase;
    8cc0:	7023      	strb	r3, [r4, #0]
	return STATUS_CANNOT_UPDATE;
    8cc2:	200b      	movs	r0, #11
    8cc4:	e7e7      	b.n	8c96 <bt_mesh_subnet_kr_phase_set+0x1e>
    8cc6:	bf00      	nop
    8cc8:	0002034b 	.word	0x0002034b

00008ccc <bt_mesh_subnet_set>:

int bt_mesh_subnet_set(uint16_t net_idx, uint8_t kr_phase,
		       const uint8_t old_key[16], const uint8_t new_key[16])
{
    8ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (subnets[i].net_idx == net_idx) {
    8cce:	4c16      	ldr	r4, [pc, #88]	; (8d28 <bt_mesh_subnet_set+0x5c>)
{
    8cd0:	461d      	mov	r5, r3
		if (subnets[i].net_idx == net_idx) {
    8cd2:	8ba3      	ldrh	r3, [r4, #28]
    8cd4:	4298      	cmp	r0, r3
{
    8cd6:	460f      	mov	r7, r1
    8cd8:	4606      	mov	r6, r0
    8cda:	4611      	mov	r1, r2
		if (subnets[i].net_idx == net_idx) {
    8cdc:	d01e      	beq.n	8d1c <bt_mesh_subnet_set+0x50>
		if (!sub && subnets[i].net_idx == BT_MESH_KEY_UNUSED) {
    8cde:	f64f 72ff 	movw	r2, #65535	; 0xffff
    8ce2:	4293      	cmp	r3, r2
    8ce4:	d11d      	bne.n	8d22 <bt_mesh_subnet_set+0x56>
	if (sub->net_idx == net_idx) {
		return -EALREADY;
	}

	for (int i = 0; i < ARRAY_SIZE(keys); i++) {
		if (!keys[i]) {
    8ce6:	b949      	cbnz	r1, 8cfc <bt_mesh_subnet_set+0x30>
    8ce8:	b98d      	cbnz	r5, 8d0e <bt_mesh_subnet_set+0x42>
	} else {
		sub->node_id = BT_MESH_NODE_IDENTITY_NOT_SUPPORTED;
	}

	/* Make sure we have valid beacon data to be sent */
	bt_mesh_beacon_update(sub);
    8cea:	480f      	ldr	r0, [pc, #60]	; (8d28 <bt_mesh_subnet_set+0x5c>)
	sub->net_idx = net_idx;
    8cec:	83a6      	strh	r6, [r4, #28]
		sub->node_id = BT_MESH_NODE_IDENTITY_NOT_SUPPORTED;
    8cee:	2302      	movs	r3, #2
	sub->kr_phase = kr_phase;
    8cf0:	77a7      	strb	r7, [r4, #30]
		sub->node_id = BT_MESH_NODE_IDENTITY_NOT_SUPPORTED;
    8cf2:	77e3      	strb	r3, [r4, #31]
	bt_mesh_beacon_update(sub);
    8cf4:	f7ff f9dc 	bl	80b0 <bt_mesh_beacon_update>

	return 0;
    8cf8:	2000      	movs	r0, #0
    8cfa:	e007      	b.n	8d0c <bt_mesh_subnet_set+0x40>
		if (net_keys_create(&sub->keys[i], keys[i])) {
    8cfc:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    8d00:	f7ff ff28 	bl	8b54 <net_keys_create>
    8d04:	2800      	cmp	r0, #0
    8d06:	d0ef      	beq.n	8ce8 <bt_mesh_subnet_set+0x1c>
			return -EIO;
    8d08:	f06f 0004 	mvn.w	r0, #4
}
    8d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (net_keys_create(&sub->keys[i], keys[i])) {
    8d0e:	4807      	ldr	r0, [pc, #28]	; (8d2c <bt_mesh_subnet_set+0x60>)
    8d10:	4629      	mov	r1, r5
    8d12:	f7ff ff1f 	bl	8b54 <net_keys_create>
    8d16:	2800      	cmp	r0, #0
    8d18:	d0e7      	beq.n	8cea <bt_mesh_subnet_set+0x1e>
    8d1a:	e7f5      	b.n	8d08 <bt_mesh_subnet_set+0x3c>
		return -EALREADY;
    8d1c:	f06f 0077 	mvn.w	r0, #119	; 0x77
    8d20:	e7f4      	b.n	8d0c <bt_mesh_subnet_set+0x40>
		return -ENOMEM;
    8d22:	f06f 000b 	mvn.w	r0, #11
    8d26:	e7f1      	b.n	8d0c <bt_mesh_subnet_set+0x40>
    8d28:	2000031c 	.word	0x2000031c
    8d2c:	20000392 	.word	0x20000392

00008d30 <bt_mesh_subnet_find>:

struct bt_mesh_subnet *bt_mesh_subnet_find(bool (*cb)(struct bt_mesh_subnet *sub, void *cb_data),
					   void *cb_data)
{
    8d30:	4603      	mov	r3, r0
	for (int i = 0; i < ARRAY_SIZE(subnets); i++) {
		if (subnets[i].net_idx == BT_MESH_KEY_UNUSED) {
    8d32:	4807      	ldr	r0, [pc, #28]	; (8d50 <bt_mesh_subnet_find+0x20>)
{
    8d34:	b510      	push	{r4, lr}
		if (subnets[i].net_idx == BT_MESH_KEY_UNUSED) {
    8d36:	8b84      	ldrh	r4, [r0, #28]
    8d38:	f64f 72ff 	movw	r2, #65535	; 0xffff
    8d3c:	4294      	cmp	r4, r2
    8d3e:	d005      	beq.n	8d4c <bt_mesh_subnet_find+0x1c>
			continue;
		}

		if (!cb || cb(&subnets[i], cb_data)) {
    8d40:	b90b      	cbnz	r3, 8d46 <bt_mesh_subnet_find+0x16>
			return &subnets[i];
    8d42:	4803      	ldr	r0, [pc, #12]	; (8d50 <bt_mesh_subnet_find+0x20>)
		}
	}

	return NULL;
}
    8d44:	bd10      	pop	{r4, pc}
		if (!cb || cb(&subnets[i], cb_data)) {
    8d46:	4798      	blx	r3
    8d48:	2800      	cmp	r0, #0
    8d4a:	d1fa      	bne.n	8d42 <bt_mesh_subnet_find+0x12>
	return NULL;
    8d4c:	2000      	movs	r0, #0
    8d4e:	e7f9      	b.n	8d44 <bt_mesh_subnet_find+0x14>
    8d50:	2000031c 	.word	0x2000031c

00008d54 <bt_mesh_subnet_foreach>:

size_t bt_mesh_subnet_foreach(void (*cb)(struct bt_mesh_subnet *sub))
{
    8d54:	b508      	push	{r3, lr}
    8d56:	4603      	mov	r3, r0
	size_t count = 0;

	for (int i = 0; i < ARRAY_SIZE(subnets); i++) {
		if (subnets[i].net_idx == BT_MESH_KEY_UNUSED) {
    8d58:	4805      	ldr	r0, [pc, #20]	; (8d70 <bt_mesh_subnet_foreach+0x1c>)
    8d5a:	8b81      	ldrh	r1, [r0, #28]
    8d5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    8d60:	4291      	cmp	r1, r2
    8d62:	d002      	beq.n	8d6a <bt_mesh_subnet_foreach+0x16>
			continue;
		}

		cb(&subnets[i]);
    8d64:	4798      	blx	r3
		count++;
    8d66:	2001      	movs	r0, #1
	}

	return count;
}
    8d68:	bd08      	pop	{r3, pc}
    8d6a:	2000      	movs	r0, #0
	return count;
    8d6c:	e7fc      	b.n	8d68 <bt_mesh_subnet_foreach+0x14>
    8d6e:	bf00      	nop
    8d70:	2000031c 	.word	0x2000031c

00008d74 <bt_mesh_net_keys_reset>:
	 * are associated with each net key.
	 */
	for (i = 0; i < ARRAY_SIZE(subnets); i++) {
		struct bt_mesh_subnet *sub = &subnets[i];

		if (sub->net_idx != BT_MESH_KEY_UNUSED) {
    8d74:	4804      	ldr	r0, [pc, #16]	; (8d88 <bt_mesh_net_keys_reset+0x14>)
    8d76:	8b82      	ldrh	r2, [r0, #28]
    8d78:	f64f 73ff 	movw	r3, #65535	; 0xffff
    8d7c:	429a      	cmp	r2, r3
    8d7e:	d001      	beq.n	8d84 <bt_mesh_net_keys_reset+0x10>
			subnet_del(sub);
    8d80:	f010 bc2e 	b.w	195e0 <subnet_del>
		}
	}
}
    8d84:	4770      	bx	lr
    8d86:	bf00      	nop
    8d88:	2000031c 	.word	0x2000031c

00008d8c <bt_mesh_net_cred_find>:
			   struct net_buf_simple *out,
			   bool (*cb)(struct bt_mesh_net_rx *rx,
				      struct net_buf_simple *in,
				      struct net_buf_simple *out,
				      const struct bt_mesh_net_cred *cred))
{
    8d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8d8e:	461d      	mov	r5, r3
		}
	}
#endif

	for (i = 0; i < ARRAY_SIZE(subnets); i++) {
		rx->sub = &subnets[i];
    8d90:	4b16      	ldr	r3, [pc, #88]	; (8dec <bt_mesh_net_cred_find+0x60>)
    8d92:	6003      	str	r3, [r0, #0]
		if (rx->sub->net_idx == BT_MESH_KEY_UNUSED) {
    8d94:	f8b3 e01c 	ldrh.w	lr, [r3, #28]
    8d98:	f64f 7cff 	movw	ip, #65535	; 0xffff
    8d9c:	45e6      	cmp	lr, ip
{
    8d9e:	4604      	mov	r4, r0
    8da0:	460e      	mov	r6, r1
    8da2:	4617      	mov	r7, r2
		if (rx->sub->net_idx == BT_MESH_KEY_UNUSED) {
    8da4:	d01f      	beq.n	8de6 <bt_mesh_net_cred_find+0x5a>
			continue;
		}

		for (j = 0; j < ARRAY_SIZE(rx->sub->keys); j++) {
			if (!rx->sub->keys[j].valid) {
    8da6:	f893 c02c 	ldrb.w	ip, [r3, #44]	; 0x2c
    8daa:	f1bc 0f00 	cmp.w	ip, #0
    8dae:	d002      	beq.n	8db6 <bt_mesh_net_cred_find+0x2a>
				continue;
			}

			if (cb(rx, in, out, &rx->sub->keys[j].msg)) {
    8db0:	333d      	adds	r3, #61	; 0x3d
    8db2:	47a8      	blx	r5
    8db4:	b9a8      	cbnz	r0, 8de2 <bt_mesh_net_cred_find+0x56>
			if (!rx->sub->keys[j].valid) {
    8db6:	6823      	ldr	r3, [r4, #0]
    8db8:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
    8dbc:	b19a      	cbz	r2, 8de6 <bt_mesh_net_cred_find+0x5a>
			if (cb(rx, in, out, &rx->sub->keys[j].msg)) {
    8dbe:	3387      	adds	r3, #135	; 0x87
    8dc0:	463a      	mov	r2, r7
    8dc2:	4631      	mov	r1, r6
    8dc4:	4620      	mov	r0, r4
    8dc6:	47a8      	blx	r5
    8dc8:	b168      	cbz	r0, 8de6 <bt_mesh_net_cred_find+0x5a>
		for (j = 0; j < ARRAY_SIZE(rx->sub->keys); j++) {
    8dca:	2201      	movs	r2, #1
				rx->new_key = (j > 0);
    8dcc:	7d23      	ldrb	r3, [r4, #20]
    8dce:	f023 0306 	bic.w	r3, r3, #6
    8dd2:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
    8dd6:	7523      	strb	r3, [r4, #20]
				rx->friend_cred = 0U;
				rx->ctx.net_idx = rx->sub->net_idx;
    8dd8:	6823      	ldr	r3, [r4, #0]
    8dda:	8b9b      	ldrh	r3, [r3, #28]
    8ddc:	80a3      	strh	r3, [r4, #4]
				return true;
    8dde:	2001      	movs	r0, #1
			}
		}
	}

	return false;
}
    8de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		for (j = 0; j < ARRAY_SIZE(rx->sub->keys); j++) {
    8de2:	2200      	movs	r2, #0
    8de4:	e7f2      	b.n	8dcc <bt_mesh_net_cred_find+0x40>
	return false;
    8de6:	2000      	movs	r0, #0
    8de8:	e7fa      	b.n	8de0 <bt_mesh_net_cred_find+0x54>
    8dea:	bf00      	nop
    8dec:	2000031c 	.word	0x2000031c

00008df0 <app_key_evt>:

	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_APP_KEYS_PENDING);
}

static void app_key_evt(struct app_key *app, enum bt_mesh_key_evt evt)
{
    8df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	STRUCT_SECTION_FOREACH(bt_mesh_app_key_cb, cb) {
    8df2:	4d07      	ldr	r5, [pc, #28]	; (8e10 <app_key_evt+0x20>)
    8df4:	4f07      	ldr	r7, [pc, #28]	; (8e14 <app_key_evt+0x24>)
{
    8df6:	4604      	mov	r4, r0
    8df8:	460e      	mov	r6, r1
	STRUCT_SECTION_FOREACH(bt_mesh_app_key_cb, cb) {
    8dfa:	42bd      	cmp	r5, r7
    8dfc:	d300      	bcc.n	8e00 <app_key_evt+0x10>
		cb->evt_handler(app->app_idx, app->net_idx, evt);
	}
}
    8dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		cb->evt_handler(app->app_idx, app->net_idx, evt);
    8e00:	f855 3b04 	ldr.w	r3, [r5], #4
    8e04:	8821      	ldrh	r1, [r4, #0]
    8e06:	8860      	ldrh	r0, [r4, #2]
    8e08:	4632      	mov	r2, r6
    8e0a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_mesh_app_key_cb, cb) {
    8e0c:	e7f5      	b.n	8dfa <app_key_evt+0xa>
    8e0e:	bf00      	nop
    8e10:	0001f178 	.word	0x0001f178
    8e14:	0001f17c 	.word	0x0001f17c

00008e18 <subnet_evt>:
	return BT_MESH_KEY_UNUSED;
}

static void subnet_evt(struct bt_mesh_subnet *sub, enum bt_mesh_key_evt evt)
{
	if (evt == BT_MESH_KEY_UPDATED || evt == BT_MESH_KEY_ADDED) {
    8e18:	f011 0ffd 	tst.w	r1, #253	; 0xfd
{
    8e1c:	b538      	push	{r3, r4, r5, lr}
    8e1e:	460d      	mov	r5, r1
	if (evt == BT_MESH_KEY_UPDATED || evt == BT_MESH_KEY_ADDED) {
    8e20:	d11f      	bne.n	8e62 <subnet_evt+0x4a>
			app_key_revoke(app);
		} else if (evt == BT_MESH_KEY_SWAPPED && app->updated) {
			app_key_evt(app, BT_MESH_KEY_SWAPPED);
		}
	}
}
    8e22:	bd38      	pop	{r3, r4, r5, pc}
		} else if (evt == BT_MESH_KEY_REVOKED) {
    8e24:	2d04      	cmp	r5, #4
    8e26:	d116      	bne.n	8e56 <subnet_evt+0x3e>
	if (!app->updated) {
    8e28:	7923      	ldrb	r3, [r4, #4]
    8e2a:	2b00      	cmp	r3, #0
    8e2c:	d0f9      	beq.n	8e22 <subnet_evt+0xa>
	memcpy(&app->keys[0], &app->keys[1], sizeof(app->keys[0]));
    8e2e:	2211      	movs	r2, #17
    8e30:	f104 0116 	add.w	r1, r4, #22
    8e34:	1d60      	adds	r0, r4, #5
    8e36:	f00e fa0d 	bl	17254 <memcpy>
	memset(&app->keys[1], 0, sizeof(app->keys[1]));
    8e3a:	2100      	movs	r1, #0
    8e3c:	2211      	movs	r2, #17
    8e3e:	f104 0016 	add.w	r0, r4, #22
    8e42:	f00e fa12 	bl	1726a <memset>
	app->updated = false;
    8e46:	2300      	movs	r3, #0
    8e48:	7123      	strb	r3, [r4, #4]
	app_key_evt(app, BT_MESH_KEY_REVOKED);
    8e4a:	4629      	mov	r1, r5
			app_key_evt(app, BT_MESH_KEY_SWAPPED);
    8e4c:	4620      	mov	r0, r4
}
    8e4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			app_key_evt(app, BT_MESH_KEY_SWAPPED);
    8e52:	f7ff bfcd 	b.w	8df0 <app_key_evt>
		} else if (evt == BT_MESH_KEY_SWAPPED && app->updated) {
    8e56:	2d03      	cmp	r5, #3
    8e58:	d1e3      	bne.n	8e22 <subnet_evt+0xa>
    8e5a:	7923      	ldrb	r3, [r4, #4]
    8e5c:	2b00      	cmp	r3, #0
    8e5e:	d0e0      	beq.n	8e22 <subnet_evt+0xa>
    8e60:	e7f4      	b.n	8e4c <subnet_evt+0x34>
		if (app->app_idx == BT_MESH_KEY_UNUSED) {
    8e62:	4c08      	ldr	r4, [pc, #32]	; (8e84 <subnet_evt+0x6c>)
    8e64:	8862      	ldrh	r2, [r4, #2]
    8e66:	f64f 73ff 	movw	r3, #65535	; 0xffff
    8e6a:	429a      	cmp	r2, r3
    8e6c:	d0d9      	beq.n	8e22 <subnet_evt+0xa>
		if (app->net_idx != sub->net_idx) {
    8e6e:	8822      	ldrh	r2, [r4, #0]
    8e70:	8b83      	ldrh	r3, [r0, #28]
    8e72:	429a      	cmp	r2, r3
    8e74:	d1d5      	bne.n	8e22 <subnet_evt+0xa>
		if (evt == BT_MESH_KEY_DELETED) {
    8e76:	2d01      	cmp	r5, #1
    8e78:	d1d4      	bne.n	8e24 <subnet_evt+0xc>
			app_key_del(app);
    8e7a:	4620      	mov	r0, r4
}
    8e7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			app_key_del(app);
    8e80:	f010 bc34 	b.w	196ec <app_key_del>
    8e84:	200009dc 	.word	0x200009dc

00008e88 <bt_mesh_app_key_add>:
{
    8e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8e8c:	4680      	mov	r8, r0
	if (!bt_mesh_subnet_get(net_idx)) {
    8e8e:	4608      	mov	r0, r1
{
    8e90:	460f      	mov	r7, r1
    8e92:	4616      	mov	r6, r2
	if (!bt_mesh_subnet_get(net_idx)) {
    8e94:	f7ff fee6 	bl	8c64 <bt_mesh_subnet_get>
    8e98:	b370      	cbz	r0, 8ef8 <bt_mesh_app_key_add+0x70>
		if (apps[i].app_idx == app_idx) {
    8e9a:	4d18      	ldr	r5, [pc, #96]	; (8efc <bt_mesh_app_key_add+0x74>)
    8e9c:	886b      	ldrh	r3, [r5, #2]
    8e9e:	4598      	cmp	r8, r3
    8ea0:	d00b      	beq.n	8eba <bt_mesh_app_key_add+0x32>
		if (!app && apps[i].app_idx == BT_MESH_KEY_UNUSED) {
    8ea2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    8ea6:	4293      	cmp	r3, r2
    8ea8:	d124      	bne.n	8ef4 <bt_mesh_app_key_add+0x6c>
			const uint8_t net_id[8], uint32_t iv_index,
			uint8_t auth[8]);

static inline int bt_mesh_app_id(const uint8_t app_key[16], uint8_t app_id[1])
{
	return bt_mesh_k4(app_key, app_id);
    8eaa:	1d69      	adds	r1, r5, #5
    8eac:	4630      	mov	r0, r6
    8eae:	f001 fa19 	bl	a2e4 <bt_mesh_k4>
	if (bt_mesh_app_id(key, &app->keys[0].id)) {
    8eb2:	4604      	mov	r4, r0
    8eb4:	b178      	cbz	r0, 8ed6 <bt_mesh_app_key_add+0x4e>
		return STATUS_CANNOT_SET;
    8eb6:	200f      	movs	r0, #15
    8eb8:	e00b      	b.n	8ed2 <bt_mesh_app_key_add+0x4a>
		if (app->net_idx != net_idx) {
    8eba:	882b      	ldrh	r3, [r5, #0]
    8ebc:	42bb      	cmp	r3, r7
    8ebe:	d11b      	bne.n	8ef8 <bt_mesh_app_key_add+0x70>
		if (memcmp(key, app->keys[0].val, 16)) {
    8ec0:	2210      	movs	r2, #16
    8ec2:	1da9      	adds	r1, r5, #6
    8ec4:	4630      	mov	r0, r6
    8ec6:	f00e f9b4 	bl	17232 <memcmp>
		return STATUS_SUCCESS;
    8eca:	2800      	cmp	r0, #0
    8ecc:	bf14      	ite	ne
    8ece:	2006      	movne	r0, #6
    8ed0:	2000      	moveq	r0, #0
}
    8ed2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	app->updated = false;
    8ed6:	7128      	strb	r0, [r5, #4]
	memcpy(app->keys[0].val, key, 16);
    8ed8:	2210      	movs	r2, #16
    8eda:	4631      	mov	r1, r6
    8edc:	1da8      	adds	r0, r5, #6
	app->net_idx = net_idx;
    8ede:	802f      	strh	r7, [r5, #0]
	app->app_idx = app_idx;
    8ee0:	f8a5 8002 	strh.w	r8, [r5, #2]
	memcpy(app->keys[0].val, key, 16);
    8ee4:	f00e f9b6 	bl	17254 <memcpy>
	app_key_evt(app, BT_MESH_KEY_ADDED);
    8ee8:	4628      	mov	r0, r5
    8eea:	4621      	mov	r1, r4
    8eec:	f7ff ff80 	bl	8df0 <app_key_evt>
	return STATUS_SUCCESS;
    8ef0:	4620      	mov	r0, r4
    8ef2:	e7ee      	b.n	8ed2 <bt_mesh_app_key_add+0x4a>
		return STATUS_INSUFF_RESOURCES;
    8ef4:	2005      	movs	r0, #5
    8ef6:	e7ec      	b.n	8ed2 <bt_mesh_app_key_add+0x4a>
		return STATUS_INVALID_NETKEY;
    8ef8:	2004      	movs	r0, #4
    8efa:	e7ea      	b.n	8ed2 <bt_mesh_app_key_add+0x4a>
    8efc:	200009dc 	.word	0x200009dc

00008f00 <bt_mesh_app_key_update>:
{
    8f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (apps[i].app_idx == app_idx) {
    8f02:	4e1c      	ldr	r6, [pc, #112]	; (8f74 <bt_mesh_app_key_update+0x74>)
    8f04:	8873      	ldrh	r3, [r6, #2]
    8f06:	4283      	cmp	r3, r0
{
    8f08:	4615      	mov	r5, r2
		if (apps[i].app_idx == app_idx) {
    8f0a:	d12d      	bne.n	8f68 <bt_mesh_app_key_update+0x68>
	if (net_idx != BT_MESH_KEY_UNUSED && app->net_idx != net_idx) {
    8f0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    8f10:	4299      	cmp	r1, r3
    8f12:	8830      	ldrh	r0, [r6, #0]
    8f14:	d001      	beq.n	8f1a <bt_mesh_app_key_update+0x1a>
    8f16:	4288      	cmp	r0, r1
    8f18:	d128      	bne.n	8f6c <bt_mesh_app_key_update+0x6c>
	sub = bt_mesh_subnet_get(app->net_idx);
    8f1a:	f7ff fea3 	bl	8c64 <bt_mesh_subnet_get>
	if (!sub) {
    8f1e:	b338      	cbz	r0, 8f70 <bt_mesh_app_key_update+0x70>
	if (sub->kr_phase != BT_MESH_KR_PHASE_1) {
    8f20:	7f87      	ldrb	r7, [r0, #30]
    8f22:	2f01      	cmp	r7, #1
    8f24:	d001      	beq.n	8f2a <bt_mesh_app_key_update+0x2a>
		return STATUS_CANNOT_UPDATE;
    8f26:	200b      	movs	r0, #11
}
    8f28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (app->updated) {
    8f2a:	7933      	ldrb	r3, [r6, #4]
    8f2c:	b14b      	cbz	r3, 8f42 <bt_mesh_app_key_update+0x42>
		if (memcmp(app->keys[1].val, key, 16)) {
    8f2e:	4812      	ldr	r0, [pc, #72]	; (8f78 <bt_mesh_app_key_update+0x78>)
    8f30:	2210      	movs	r2, #16
    8f32:	4629      	mov	r1, r5
    8f34:	f00e f97d 	bl	17232 <memcmp>
		return STATUS_SUCCESS;
    8f38:	2800      	cmp	r0, #0
    8f3a:	bf14      	ite	ne
    8f3c:	2006      	movne	r0, #6
    8f3e:	2000      	moveq	r0, #0
    8f40:	e7f2      	b.n	8f28 <bt_mesh_app_key_update+0x28>
    8f42:	490e      	ldr	r1, [pc, #56]	; (8f7c <bt_mesh_app_key_update+0x7c>)
    8f44:	4628      	mov	r0, r5
    8f46:	f001 f9cd 	bl	a2e4 <bt_mesh_k4>
	if (bt_mesh_app_id(key, &app->keys[1].id)) {
    8f4a:	4604      	mov	r4, r0
    8f4c:	2800      	cmp	r0, #0
    8f4e:	d1ea      	bne.n	8f26 <bt_mesh_app_key_update+0x26>
	memcpy(app->keys[1].val, key, 16);
    8f50:	2210      	movs	r2, #16
    8f52:	4629      	mov	r1, r5
    8f54:	4808      	ldr	r0, [pc, #32]	; (8f78 <bt_mesh_app_key_update+0x78>)
	app->updated = true;
    8f56:	7137      	strb	r7, [r6, #4]
	memcpy(app->keys[1].val, key, 16);
    8f58:	f00e f97c 	bl	17254 <memcpy>
	app_key_evt(app, BT_MESH_KEY_UPDATED);
    8f5c:	4805      	ldr	r0, [pc, #20]	; (8f74 <bt_mesh_app_key_update+0x74>)
    8f5e:	2102      	movs	r1, #2
    8f60:	f7ff ff46 	bl	8df0 <app_key_evt>
	return STATUS_SUCCESS;
    8f64:	4620      	mov	r0, r4
    8f66:	e7df      	b.n	8f28 <bt_mesh_app_key_update+0x28>
		return STATUS_INVALID_APPKEY;
    8f68:	2003      	movs	r0, #3
    8f6a:	e7dd      	b.n	8f28 <bt_mesh_app_key_update+0x28>
		return STATUS_INVALID_BINDING;
    8f6c:	2011      	movs	r0, #17
    8f6e:	e7db      	b.n	8f28 <bt_mesh_app_key_update+0x28>
		return STATUS_INVALID_NETKEY;
    8f70:	2004      	movs	r0, #4
    8f72:	e7d9      	b.n	8f28 <bt_mesh_app_key_update+0x28>
    8f74:	200009dc 	.word	0x200009dc
    8f78:	200009f3 	.word	0x200009f3
    8f7c:	200009f2 	.word	0x200009f2

00008f80 <bt_mesh_app_key_del>:
{
    8f80:	b538      	push	{r3, r4, r5, lr}
	if (net_idx != BT_MESH_KEY_UNUSED && !bt_mesh_subnet_get(net_idx)) {
    8f82:	f64f 73ff 	movw	r3, #65535	; 0xffff
    8f86:	4299      	cmp	r1, r3
{
    8f88:	4605      	mov	r5, r0
    8f8a:	460c      	mov	r4, r1
	if (net_idx != BT_MESH_KEY_UNUSED && !bt_mesh_subnet_get(net_idx)) {
    8f8c:	d105      	bne.n	8f9a <bt_mesh_app_key_del+0x1a>
		if (apps[i].app_idx == app_idx) {
    8f8e:	4b0d      	ldr	r3, [pc, #52]	; (8fc4 <bt_mesh_app_key_del+0x44>)
    8f90:	885a      	ldrh	r2, [r3, #2]
    8f92:	42aa      	cmp	r2, r5
    8f94:	d008      	beq.n	8fa8 <bt_mesh_app_key_del+0x28>
	return STATUS_SUCCESS;
    8f96:	2000      	movs	r0, #0
}
    8f98:	bd38      	pop	{r3, r4, r5, pc}
	if (net_idx != BT_MESH_KEY_UNUSED && !bt_mesh_subnet_get(net_idx)) {
    8f9a:	4608      	mov	r0, r1
    8f9c:	f7ff fe62 	bl	8c64 <bt_mesh_subnet_get>
    8fa0:	2800      	cmp	r0, #0
    8fa2:	d1f4      	bne.n	8f8e <bt_mesh_app_key_del+0xe>
		return STATUS_INVALID_NETKEY;
    8fa4:	2004      	movs	r0, #4
    8fa6:	e7f7      	b.n	8f98 <bt_mesh_app_key_del+0x18>
	if (net_idx != BT_MESH_KEY_UNUSED && net_idx != app->net_idx) {
    8fa8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    8fac:	4294      	cmp	r4, r2
    8fae:	d002      	beq.n	8fb6 <bt_mesh_app_key_del+0x36>
    8fb0:	881b      	ldrh	r3, [r3, #0]
    8fb2:	42a3      	cmp	r3, r4
    8fb4:	d103      	bne.n	8fbe <bt_mesh_app_key_del+0x3e>
	app_key_del(app);
    8fb6:	4803      	ldr	r0, [pc, #12]	; (8fc4 <bt_mesh_app_key_del+0x44>)
    8fb8:	f010 fb98 	bl	196ec <app_key_del>
    8fbc:	e7eb      	b.n	8f96 <bt_mesh_app_key_del+0x16>
		return STATUS_INVALID_BINDING;
    8fbe:	2011      	movs	r0, #17
    8fc0:	e7ea      	b.n	8f98 <bt_mesh_app_key_del+0x18>
    8fc2:	bf00      	nop
    8fc4:	200009dc 	.word	0x200009dc

00008fc8 <bt_mesh_app_key_exists>:
		if (apps[i].app_idx == app_idx) {
    8fc8:	4b02      	ldr	r3, [pc, #8]	; (8fd4 <bt_mesh_app_key_exists+0xc>)
    8fca:	885b      	ldrh	r3, [r3, #2]
}
    8fcc:	1a1b      	subs	r3, r3, r0
    8fce:	4258      	negs	r0, r3
    8fd0:	4158      	adcs	r0, r3
    8fd2:	4770      	bx	lr
    8fd4:	200009dc 	.word	0x200009dc

00008fd8 <bt_mesh_app_keys_get>:
{
    8fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (int i = 0; i < ARRAY_SIZE(apps); i++) {
    8fda:	2500      	movs	r5, #0
		if (app->app_idx == BT_MESH_KEY_UNUSED) {
    8fdc:	4f0d      	ldr	r7, [pc, #52]	; (9014 <bt_mesh_app_keys_get+0x3c>)
{
    8fde:	4604      	mov	r4, r0
		if (app->app_idx == BT_MESH_KEY_UNUSED) {
    8fe0:	f64f 7cff 	movw	ip, #65535	; 0xffff
	size_t count = 0;
    8fe4:	4628      	mov	r0, r5
		if (app->app_idx == BT_MESH_KEY_UNUSED) {
    8fe6:	887e      	ldrh	r6, [r7, #2]
	for (int i = 0; i < ARRAY_SIZE(apps); i++) {
    8fe8:	b105      	cbz	r5, 8fec <bt_mesh_app_keys_get+0x14>
}
    8fea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (app->app_idx == BT_MESH_KEY_UNUSED) {
    8fec:	4566      	cmp	r6, ip
    8fee:	d0fc      	beq.n	8fea <bt_mesh_app_keys_get+0x12>
		if (net_idx != BT_MESH_KEY_ANY && app->net_idx != net_idx) {
    8ff0:	4564      	cmp	r4, ip
    8ff2:	d002      	beq.n	8ffa <bt_mesh_app_keys_get+0x22>
    8ff4:	883d      	ldrh	r5, [r7, #0]
    8ff6:	42a5      	cmp	r5, r4
    8ff8:	d101      	bne.n	8ffe <bt_mesh_app_keys_get+0x26>
		if (skip) {
    8ffa:	b113      	cbz	r3, 9002 <bt_mesh_app_keys_get+0x2a>
			skip--;
    8ffc:	3b01      	subs	r3, #1
		app_idxs[count++] = app->app_idx;
    8ffe:	2501      	movs	r5, #1
    9000:	e7f1      	b.n	8fe6 <bt_mesh_app_keys_get+0xe>
		if (count >= max) {
    9002:	4290      	cmp	r0, r2
    9004:	d203      	bcs.n	900e <bt_mesh_app_keys_get+0x36>
		app_idxs[count++] = app->app_idx;
    9006:	f821 6010 	strh.w	r6, [r1, r0, lsl #1]
    900a:	3001      	adds	r0, #1
    900c:	e7f7      	b.n	8ffe <bt_mesh_app_keys_get+0x26>
			return -ENOMEM;
    900e:	f06f 000b 	mvn.w	r0, #11
    9012:	e7ea      	b.n	8fea <bt_mesh_app_keys_get+0x12>
    9014:	200009dc 	.word	0x200009dc

00009018 <bt_mesh_keys_resolve>:
{
    9018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    901a:	4615      	mov	r5, r2
	if (BT_MESH_IS_DEV_KEY(ctx->app_idx)) {
    901c:	8842      	ldrh	r2, [r0, #2]
{
    901e:	461e      	mov	r6, r3
	if (BT_MESH_IS_DEV_KEY(ctx->app_idx)) {
    9020:	1cd3      	adds	r3, r2, #3
    9022:	b29b      	uxth	r3, r3
    9024:	2b01      	cmp	r3, #1
{
    9026:	4604      	mov	r4, r0
    9028:	460f      	mov	r7, r1
	if (BT_MESH_IS_DEV_KEY(ctx->app_idx)) {
    902a:	d906      	bls.n	903a <bt_mesh_keys_resolve+0x22>
		if (apps[i].app_idx == app_idx) {
    902c:	4c19      	ldr	r4, [pc, #100]	; (9094 <bt_mesh_keys_resolve+0x7c>)
    902e:	8863      	ldrh	r3, [r4, #2]
    9030:	4293      	cmp	r3, r2
    9032:	d018      	beq.n	9066 <bt_mesh_keys_resolve+0x4e>
		return -EINVAL;
    9034:	f06f 0015 	mvn.w	r0, #21
}
    9038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*sub = bt_mesh_subnet_get(ctx->net_idx);
    903a:	8800      	ldrh	r0, [r0, #0]
    903c:	f7ff fe12 	bl	8c64 <bt_mesh_subnet_get>
    9040:	6038      	str	r0, [r7, #0]
		if (!*sub) {
    9042:	2800      	cmp	r0, #0
    9044:	d0f6      	beq.n	9034 <bt_mesh_keys_resolve+0x1c>
		if (ctx->app_idx == BT_MESH_KEY_DEV_REMOTE &&
    9046:	8862      	ldrh	r2, [r4, #2]
    9048:	f64f 73fd 	movw	r3, #65533	; 0xfffd
    904c:	429a      	cmp	r2, r3
    904e:	d004      	beq.n	905a <bt_mesh_keys_resolve+0x42>
			*app_key = bt_mesh.dev_key;
    9050:	4b11      	ldr	r3, [pc, #68]	; (9098 <bt_mesh_keys_resolve+0x80>)
    9052:	602b      	str	r3, [r5, #0]
		*aid = 0;
    9054:	2000      	movs	r0, #0
    9056:	7030      	strb	r0, [r6, #0]
		return 0;
    9058:	e7ee      	b.n	9038 <bt_mesh_keys_resolve+0x20>
		    !bt_mesh_has_addr(ctx->addr)) {
    905a:	88a0      	ldrh	r0, [r4, #4]
    905c:	f001 fb3e 	bl	a6dc <bt_mesh_has_addr>
		if (ctx->app_idx == BT_MESH_KEY_DEV_REMOTE &&
    9060:	2800      	cmp	r0, #0
    9062:	d1f5      	bne.n	9050 <bt_mesh_keys_resolve+0x38>
    9064:	e7e6      	b.n	9034 <bt_mesh_keys_resolve+0x1c>
	*sub = bt_mesh_subnet_get(app->net_idx);
    9066:	8820      	ldrh	r0, [r4, #0]
    9068:	f7ff fdfc 	bl	8c64 <bt_mesh_subnet_get>
    906c:	6038      	str	r0, [r7, #0]
	if (!*sub) {
    906e:	2800      	cmp	r0, #0
    9070:	d0e0      	beq.n	9034 <bt_mesh_keys_resolve+0x1c>
	if ((*sub)->kr_phase == BT_MESH_KR_PHASE_2 && app->updated) {
    9072:	7f83      	ldrb	r3, [r0, #30]
    9074:	2b02      	cmp	r3, #2
    9076:	d107      	bne.n	9088 <bt_mesh_keys_resolve+0x70>
    9078:	7923      	ldrb	r3, [r4, #4]
    907a:	b12b      	cbz	r3, 9088 <bt_mesh_keys_resolve+0x70>
		*aid = app->keys[1].id;
    907c:	7da3      	ldrb	r3, [r4, #22]
    907e:	7033      	strb	r3, [r6, #0]
		*app_key = app->keys[1].val;
    9080:	3417      	adds	r4, #23
    9082:	602c      	str	r4, [r5, #0]
	return 0;
    9084:	2000      	movs	r0, #0
    9086:	e7d7      	b.n	9038 <bt_mesh_keys_resolve+0x20>
		*aid = app->keys[0].id;
    9088:	7963      	ldrb	r3, [r4, #5]
    908a:	7033      	strb	r3, [r6, #0]
		*app_key = app->keys[0].val;
    908c:	4b03      	ldr	r3, [pc, #12]	; (909c <bt_mesh_keys_resolve+0x84>)
    908e:	602b      	str	r3, [r5, #0]
    9090:	e7f8      	b.n	9084 <bt_mesh_keys_resolve+0x6c>
    9092:	bf00      	nop
    9094:	200009dc 	.word	0x200009dc
    9098:	20001178 	.word	0x20001178
    909c:	200009e2 	.word	0x200009e2

000090a0 <bt_mesh_app_key_find>:
{
    90a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    90a2:	4604      	mov	r4, r0
    90a4:	4610      	mov	r0, r2
    90a6:	9a06      	ldr	r2, [sp, #24]
	if (dev_key) {
    90a8:	b174      	cbz	r4, 90c8 <bt_mesh_app_key_find+0x28>
		if (BT_MESH_ADDR_IS_UNICAST(rx->ctx.recv_dst)) {
    90aa:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
    90ae:	2900      	cmp	r1, #0
    90b0:	dd02      	ble.n	90b8 <bt_mesh_app_key_find+0x18>
			err = cb(rx, bt_mesh.dev_key, cb_data);
    90b2:	4914      	ldr	r1, [pc, #80]	; (9104 <bt_mesh_app_key_find+0x64>)
    90b4:	4798      	blx	r3
			if (!err) {
    90b6:	b120      	cbz	r0, 90c2 <bt_mesh_app_key_find+0x22>
		return BT_MESH_KEY_UNUSED;
    90b8:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
    90bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			cred = &app->keys[0];
    90be:	1d65      	adds	r5, r4, #5
    90c0:	e017      	b.n	90f2 <bt_mesh_app_key_find+0x52>
				return BT_MESH_KEY_DEV_LOCAL;
    90c2:	f64f 70fe 	movw	r0, #65534	; 0xfffe
    90c6:	e7f9      	b.n	90bc <bt_mesh_app_key_find+0x1c>
		if (app->app_idx == BT_MESH_KEY_UNUSED) {
    90c8:	4c0f      	ldr	r4, [pc, #60]	; (9108 <bt_mesh_app_key_find+0x68>)
    90ca:	8866      	ldrh	r6, [r4, #2]
    90cc:	f64f 75ff 	movw	r5, #65535	; 0xffff
    90d0:	42ae      	cmp	r6, r5
    90d2:	d0f1      	beq.n	90b8 <bt_mesh_app_key_find+0x18>
		if (app->net_idx != rx->sub->net_idx) {
    90d4:	6805      	ldr	r5, [r0, #0]
    90d6:	8826      	ldrh	r6, [r4, #0]
    90d8:	8bad      	ldrh	r5, [r5, #28]
    90da:	42ae      	cmp	r6, r5
    90dc:	d1ec      	bne.n	90b8 <bt_mesh_app_key_find+0x18>
		if (rx->new_key && app->updated) {
    90de:	7d05      	ldrb	r5, [r0, #20]
    90e0:	07ad      	lsls	r5, r5, #30
    90e2:	d5ec      	bpl.n	90be <bt_mesh_app_key_find+0x1e>
    90e4:	7927      	ldrb	r7, [r4, #4]
			cred = &app->keys[1];
    90e6:	1d65      	adds	r5, r4, #5
    90e8:	f104 0616 	add.w	r6, r4, #22
    90ec:	2f00      	cmp	r7, #0
    90ee:	bf18      	it	ne
    90f0:	4635      	movne	r5, r6
		if (cred->id != aid) {
    90f2:	782e      	ldrb	r6, [r5, #0]
    90f4:	428e      	cmp	r6, r1
    90f6:	d1df      	bne.n	90b8 <bt_mesh_app_key_find+0x18>
		err = cb(rx, cred->val, cb_data);
    90f8:	1c69      	adds	r1, r5, #1
    90fa:	4798      	blx	r3
		if (err) {
    90fc:	2800      	cmp	r0, #0
    90fe:	d1db      	bne.n	90b8 <bt_mesh_app_key_find+0x18>
		return app->app_idx;
    9100:	8860      	ldrh	r0, [r4, #2]
    9102:	e7db      	b.n	90bc <bt_mesh_app_key_find+0x1c>
    9104:	20001178 	.word	0x20001178
    9108:	200009dc 	.word	0x200009dc

0000910c <bt_mesh_app_keys_reset>:
void bt_mesh_app_keys_reset(void)
{
	for (int i = 0; i < ARRAY_SIZE(apps); i++) {
		struct app_key *app = &apps[i];

		if (app->app_idx != BT_MESH_KEY_UNUSED) {
    910c:	4804      	ldr	r0, [pc, #16]	; (9120 <bt_mesh_app_keys_reset+0x14>)
    910e:	8842      	ldrh	r2, [r0, #2]
    9110:	f64f 73ff 	movw	r3, #65535	; 0xffff
    9114:	429a      	cmp	r2, r3
    9116:	d001      	beq.n	911c <bt_mesh_app_keys_reset+0x10>
			app_key_del(app);
    9118:	f010 bae8 	b.w	196ec <app_key_del>
		}
	}
}
    911c:	4770      	bx	lr
    911e:	bf00      	nop
    9120:	200009dc 	.word	0x200009dc

00009124 <sdu_recv>:
}

static int sdu_recv(struct bt_mesh_net_rx *rx, uint8_t hdr, uint8_t aszmic,
		    struct net_buf_simple *buf, struct net_buf_simple *sdu,
		    struct seg_rx *seg)
{
    9124:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    9128:	4604      	mov	r4, r0
    912a:	b08b      	sub	sp, #44	; 0x2c
    912c:	460d      	mov	r5, r1
    912e:	4691      	mov	r9, r2
    9130:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	struct decrypt_ctx ctx = {
    9134:	2210      	movs	r2, #16
    9136:	2100      	movs	r1, #0
    9138:	a803      	add	r0, sp, #12
{
    913a:	4698      	mov	r8, r3
	struct decrypt_ctx ctx = {
    913c:	f00e f895 	bl	1726a <memset>
    9140:	8923      	ldrh	r3, [r4, #8]
    9142:	f8ad 300a 	strh.w	r3, [sp, #10]
		.crypto = {
			.dev_key = !AKF(&hdr),
    9146:	ea6f 1095 	mvn.w	r0, r5, lsr #6
	struct decrypt_ctx ctx = {
    914a:	8963      	ldrh	r3, [r4, #10]
    914c:	f88d 9009 	strb.w	r9, [sp, #9]
			.dev_key = !AKF(&hdr),
    9150:	f000 0001 	and.w	r0, r0, #1
	struct decrypt_ctx ctx = {
    9154:	f88d 0008 	strb.w	r0, [sp, #8]
    9158:	f8ad 300c 	strh.w	r3, [sp, #12]
    915c:	b317      	cbz	r7, 91a4 <sdu_recv+0x80>
    915e:	693a      	ldr	r2, [r7, #16]
    9160:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
			.aszmic = aszmic,
			.src = rx->ctx.addr,
			.dst = rx->ctx.recv_dst,
			.seq_num = seg ? (seg->seq_auth & 0xffffff) : rx->seq,
			.iv_index = BT_MESH_NET_IVI_RX(rx),
    9164:	7d23      	ldrb	r3, [r4, #20]
	struct decrypt_ctx ctx = {
    9166:	9204      	str	r2, [sp, #16]
			.iv_index = BT_MESH_NET_IVI_RX(rx),
    9168:	f003 0201 	and.w	r2, r3, #1
    916c:	4b0e      	ldr	r3, [pc, #56]	; (91a8 <sdu_recv+0x84>)
	struct decrypt_ctx ctx = {
    916e:	9709      	str	r7, [sp, #36]	; 0x24
			.iv_index = BT_MESH_NET_IVI_RX(rx),
    9170:	681b      	ldr	r3, [r3, #0]
    9172:	1a9b      	subs	r3, r3, r2
	struct decrypt_ctx ctx = {
    9174:	9305      	str	r3, [sp, #20]

	if (BT_MESH_ADDR_IS_VIRTUAL(rx->ctx.recv_dst)) {
		ctx.crypto.ad = bt_mesh_va_label_get(rx->ctx.recv_dst);
	}

	rx->ctx.app_idx = bt_mesh_app_key_find(ctx.crypto.dev_key, AID(&hdr),
    9176:	ab02      	add	r3, sp, #8
    9178:	9300      	str	r3, [sp, #0]
    917a:	4622      	mov	r2, r4
    917c:	4b0b      	ldr	r3, [pc, #44]	; (91ac <sdu_recv+0x88>)
    917e:	f005 013f 	and.w	r1, r5, #63	; 0x3f
	struct decrypt_ctx ctx = {
    9182:	e9cd 8607 	strd	r8, r6, [sp, #28]
	rx->ctx.app_idx = bt_mesh_app_key_find(ctx.crypto.dev_key, AID(&hdr),
    9186:	f7ff ff8b 	bl	90a0 <bt_mesh_app_key_find>
					       rx, sdu_try_decrypt, &ctx);
	if (rx->ctx.app_idx == BT_MESH_KEY_UNUSED) {
    918a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    918e:	4298      	cmp	r0, r3
	rx->ctx.app_idx = bt_mesh_app_key_find(ctx.crypto.dev_key, AID(&hdr),
    9190:	80e0      	strh	r0, [r4, #6]
	if (rx->ctx.app_idx == BT_MESH_KEY_UNUSED) {
    9192:	d003      	beq.n	919c <sdu_recv+0x78>
		return 0;
	}

	BT_DBG("Decrypted (AppIdx: 0x%03x)", rx->ctx.app_idx);

	bt_mesh_model_recv(rx, sdu);
    9194:	4631      	mov	r1, r6
    9196:	4620      	mov	r0, r4
    9198:	f001 faf8 	bl	a78c <bt_mesh_model_recv>

	return 0;
}
    919c:	2000      	movs	r0, #0
    919e:	b00b      	add	sp, #44	; 0x2c
    91a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	struct decrypt_ctx ctx = {
    91a4:	6922      	ldr	r2, [r4, #16]
    91a6:	e7dd      	b.n	9164 <sdu_recv+0x40>
    91a8:	20001120 	.word	0x20001120
    91ac:	000197a5 	.word	0x000197a5

000091b0 <seg_rx_reset>:
	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_ACK, buf, sizeof(buf),
				NULL, NULL);
}

static void seg_rx_reset(struct seg_rx *rx, bool full_reset)
{
    91b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    91b4:	4604      	mov	r4, r0
	BT_DBG("rx %p", rx);

	/* If this fails, the handler will exit early on the next execution, as
	 * it checks rx->in_use.
	 */
	(void)k_work_cancel_delayable(&rx->ack);
    91b6:	3030      	adds	r0, #48	; 0x30
{
    91b8:	460f      	mov	r7, r1
	(void)k_work_cancel_delayable(&rx->ack);
    91ba:	f015 fac8 	bl	1e74e <k_work_cancel_delayable>
		BT_WARN("Clearing incomplete buffers from Friend queue");
		bt_mesh_friend_clear_incomplete(rx->sub, rx->src, rx->dst,
						&rx->seq_auth);
	}

	for (i = 0; i <= rx->seg_n; i++) {
    91be:	2500      	movs	r5, #0
		if (!rx->seg[i]) {
			continue;
		}

		k_mem_slab_free(&segs, &rx->seg[i]);
    91c0:	f8df 803c 	ldr.w	r8, [pc, #60]	; 9200 <seg_rx_reset+0x50>
    91c4:	1d26      	adds	r6, r4, #4
		rx->seg[i] = NULL;
    91c6:	46a9      	mov	r9, r5
		if (!rx->seg[i]) {
    91c8:	4631      	mov	r1, r6
    91ca:	3604      	adds	r6, #4
    91cc:	680b      	ldr	r3, [r1, #0]
    91ce:	b123      	cbz	r3, 91da <seg_rx_reset+0x2a>
		k_mem_slab_free(&segs, &rx->seg[i]);
    91d0:	4640      	mov	r0, r8
    91d2:	f015 f8f0 	bl	1e3b6 <k_mem_slab_free>
		rx->seg[i] = NULL;
    91d6:	f846 9c04 	str.w	r9, [r6, #-4]
	for (i = 0; i <= rx->seg_n; i++) {
    91da:	7fe3      	ldrb	r3, [r4, #31]
    91dc:	3501      	adds	r5, #1
    91de:	f003 021f 	and.w	r2, r3, #31
    91e2:	4295      	cmp	r5, r2
    91e4:	ddf0      	ble.n	91c8 <seg_rx_reset+0x18>
	}

	rx->in_use = 0U;
    91e6:	f36f 1386 	bfc	r3, #6, #1
    91ea:	77e3      	strb	r3, [r4, #31]

	/* We don't always reset these values since we need to be able to
	 * send an ack if we receive a segment after we've already received
	 * the full SDU.
	 */
	if (full_reset) {
    91ec:	b137      	cbz	r7, 91fc <seg_rx_reset+0x4c>
		rx->seq_auth = 0U;
    91ee:	2000      	movs	r0, #0
    91f0:	2100      	movs	r1, #0
    91f2:	e9c4 0104 	strd	r0, r1, [r4, #16]
		rx->sub = NULL;
    91f6:	2300      	movs	r3, #0
    91f8:	6023      	str	r3, [r4, #0]
		rx->src = BT_MESH_ADDR_UNASSIGNED;
    91fa:	61a3      	str	r3, [r4, #24]
		rx->dst = BT_MESH_ADDR_UNASSIGNED;
	}
}
    91fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9200:	20000af0 	.word	0x20000af0

00009204 <seg_tx_reset>:
{
    9204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9208:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable(&tx->retransmit);
    920a:	3030      	adds	r0, #48	; 0x30
    920c:	f015 fa9f 	bl	1e74e <k_work_cancel_delayable>
	tx->cb = NULL;
    9210:	2500      	movs	r5, #0
	tx->blocked = false;
    9212:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
	k_mem_slab_free(&segs, (void **)&tx->seg[seg_idx]);
    9216:	4f20      	ldr	r7, [pc, #128]	; (9298 <seg_tx_reset+0x94>)
	tx->sub = NULL;
    9218:	6025      	str	r5, [r4, #0]
	tx->seq_auth = 0U;
    921a:	2000      	movs	r0, #0
    921c:	2100      	movs	r1, #0
	tx->cb_data = NULL;
    921e:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
	tx->seq_auth = 0U;
    9222:	e9c4 0104 	strd	r0, r1, [r4, #16]
	tx->blocked = false;
    9226:	f365 0200 	bfi	r2, r5, #0, #1
	tx->src = BT_MESH_ADDR_UNASSIGNED;
    922a:	61a5      	str	r5, [r4, #24]
	tx->blocked = false;
    922c:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
	for (i = 0; i <= tx->seg_n && tx->nack_count; i++) {
    9230:	1d26      	adds	r6, r4, #4
	tx->seg[seg_idx] = NULL;
    9232:	46a8      	mov	r8, r5
	for (i = 0; i <= tx->seg_n && tx->nack_count; i++) {
    9234:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    9238:	b19b      	cbz	r3, 9262 <seg_tx_reset+0x5e>
		if (!tx->seg[i]) {
    923a:	6833      	ldr	r3, [r6, #0]
    923c:	b153      	cbz	r3, 9254 <seg_tx_reset+0x50>
	k_mem_slab_free(&segs, (void **)&tx->seg[seg_idx]);
    923e:	4631      	mov	r1, r6
    9240:	4638      	mov	r0, r7
    9242:	f015 f8b8 	bl	1e3b6 <k_mem_slab_free>
	tx->seg[seg_idx] = NULL;
    9246:	f8c6 8000 	str.w	r8, [r6]
	tx->nack_count--;
    924a:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    924e:	3b01      	subs	r3, #1
    9250:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	for (i = 0; i <= tx->seg_n && tx->nack_count; i++) {
    9254:	f894 3020 	ldrb.w	r3, [r4, #32]
    9258:	3501      	adds	r5, #1
    925a:	42ab      	cmp	r3, r5
    925c:	f106 0604 	add.w	r6, r6, #4
    9260:	dae8      	bge.n	9234 <seg_tx_reset+0x30>
	tx->nack_count = 0;
    9262:	2100      	movs	r1, #0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    9264:	4b0d      	ldr	r3, [pc, #52]	; (929c <seg_tx_reset+0x98>)
    9266:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    926a:	f3bf 8f5b 	dmb	ish
    926e:	e853 2f00 	ldrex	r2, [r3]
    9272:	f022 0020 	bic.w	r0, r2, #32
    9276:	e843 0400 	strex	r4, r0, [r3]
    927a:	2c00      	cmp	r4, #0
    927c:	d1f7      	bne.n	926e <seg_tx_reset+0x6a>
    927e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_mesh.flags, BT_MESH_IVU_PENDING)) {
    9282:	0692      	lsls	r2, r2, #26
    9284:	d505      	bpl.n	9292 <seg_tx_reset+0x8e>
}
    9286:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_mesh_net_iv_update(bt_mesh.iv_index, false);
    928a:	f853 0c08 	ldr.w	r0, [r3, #-8]
    928e:	f7ff b90f 	b.w	84b0 <bt_mesh_net_iv_update>
}
    9292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9296:	bf00      	nop
    9298:	20000af0 	.word	0x20000af0
    929c:	20001128 	.word	0x20001128

000092a0 <seg_tx_complete>:
{
    92a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    92a4:	4604      	mov	r4, r0
	void *cb_data = tx->cb_data;
    92a6:	e9d0 670a 	ldrd	r6, r7, [r0, #40]	; 0x28
		if (&seg_tx[i] != tx &&
    92aa:	4813      	ldr	r0, [pc, #76]	; (92f8 <seg_tx_complete+0x58>)
    92ac:	4284      	cmp	r4, r0
{
    92ae:	460d      	mov	r5, r1
		if (&seg_tx[i] != tx &&
    92b0:	d014      	beq.n	92dc <seg_tx_complete+0x3c>
		    seg_tx[i].blocked &&
    92b2:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
		if (&seg_tx[i] != tx &&
    92b6:	07da      	lsls	r2, r3, #31
    92b8:	d510      	bpl.n	92dc <seg_tx_complete+0x3c>
	return (tx->src == src) && (tx->dst == dst);
    92ba:	8b01      	ldrh	r1, [r0, #24]
    92bc:	8b22      	ldrh	r2, [r4, #24]
    92be:	4291      	cmp	r1, r2
    92c0:	d10c      	bne.n	92dc <seg_tx_complete+0x3c>
    92c2:	8b41      	ldrh	r1, [r0, #26]
    92c4:	8b62      	ldrh	r2, [r4, #26]
    92c6:	4291      	cmp	r1, r2
    92c8:	d108      	bne.n	92dc <seg_tx_complete+0x3c>
		blocked->blocked = false;
    92ca:	f36f 0300 	bfc	r3, #0, #1
    92ce:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
		k_work_reschedule(&blocked->retransmit, K_NO_WAIT);
    92d2:	2200      	movs	r2, #0
    92d4:	2300      	movs	r3, #0
    92d6:	3030      	adds	r0, #48	; 0x30
    92d8:	f00c fbf6 	bl	15ac8 <k_work_reschedule>
	seg_tx_reset(tx);
    92dc:	4620      	mov	r0, r4
    92de:	f7ff ff91 	bl	9204 <seg_tx_reset>
	if (cb && cb->end) {
    92e2:	b136      	cbz	r6, 92f2 <seg_tx_complete+0x52>
    92e4:	6873      	ldr	r3, [r6, #4]
    92e6:	b123      	cbz	r3, 92f2 <seg_tx_complete+0x52>
		cb->end(err, cb_data);
    92e8:	4639      	mov	r1, r7
    92ea:	4628      	mov	r0, r5
}
    92ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb->end(err, cb_data);
    92f0:	4718      	bx	r3
}
    92f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    92f6:	bf00      	nop
    92f8:	200011e8 	.word	0x200011e8

000092fc <seg_tx_send_unacked>:
{
    92fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!tx->nack_count) {
    9300:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
{
    9304:	b08b      	sub	sp, #44	; 0x2c
    9306:	4604      	mov	r4, r0
	if (!tx->nack_count) {
    9308:	b383      	cbz	r3, 936c <seg_tx_send_unacked+0x70>
		.net_idx = tx->sub->net_idx,
    930a:	6801      	ldr	r1, [r0, #0]
	struct bt_mesh_net_tx net_tx = {
    930c:	9107      	str	r1, [sp, #28]
	struct bt_mesh_msg_ctx ctx = {
    930e:	2300      	movs	r3, #0
    9310:	2501      	movs	r5, #1
    9312:	f8cd 3016 	str.w	r3, [sp, #22]
    9316:	8b8b      	ldrh	r3, [r1, #28]
    9318:	f8ad 3010 	strh.w	r3, [sp, #16]
	struct bt_mesh_net_tx net_tx = {
    931c:	a904      	add	r1, sp, #16
	struct bt_mesh_msg_ctx ctx = {
    931e:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
    9322:	f88d 501a 	strb.w	r5, [sp, #26]
	struct bt_mesh_net_tx net_tx = {
    9326:	9108      	str	r1, [sp, #32]
	struct bt_mesh_msg_ctx ctx = {
    9328:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
	struct bt_mesh_net_tx net_tx = {
    932c:	8b01      	ldrh	r1, [r0, #24]
	struct bt_mesh_msg_ctx ctx = {
    932e:	f88d 501b 	strb.w	r5, [sp, #27]
	struct bt_mesh_net_tx net_tx = {
    9332:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
    9336:	7f85      	ldrb	r5, [r0, #30]
    9338:	7fc1      	ldrb	r1, [r0, #31]
    933a:	f88d 1026 	strb.w	r1, [sp, #38]	; 0x26
		.friend_cred = tx->friend_cred,
    933e:	f3c3 1140 	ubfx	r1, r3, #5, #1
	struct bt_mesh_net_tx net_tx = {
    9342:	ea41 0185 	orr.w	r1, r1, r5, lsl #2
	struct bt_mesh_msg_ctx ctx = {
    9346:	f343 0240 	sbfx	r2, r3, #1, #1
	struct bt_mesh_net_tx net_tx = {
    934a:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
	if (!tx->attempts) {
    934e:	f890 1023 	ldrb.w	r1, [r0, #35]	; 0x23
	struct bt_mesh_msg_ctx ctx = {
    9352:	f8ad 2012 	strh.w	r2, [sp, #18]
		.addr = tx->dst,
    9356:	8b42      	ldrh	r2, [r0, #26]
	struct bt_mesh_msg_ctx ctx = {
    9358:	f8ad 2014 	strh.w	r2, [sp, #20]
	if (!tx->attempts) {
    935c:	b949      	cbnz	r1, 9372 <seg_tx_send_unacked+0x76>
		if (BT_MESH_ADDR_IS_UNICAST(tx->dst)) {
    935e:	b212      	sxth	r2, r2
    9360:	2a00      	cmp	r2, #0
			seg_tx_complete(tx, -ETIMEDOUT);
    9362:	bfc8      	it	gt
    9364:	f06f 0173 	mvngt.w	r1, #115	; 0x73
			seg_tx_complete(tx, 0);
    9368:	f7ff ff9a 	bl	92a0 <seg_tx_complete>
}
    936c:	b00b      	add	sp, #44	; 0x2c
    936e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	tx->sending = 1U;
    9372:	f043 0310 	orr.w	r3, r3, #16
		err = bt_mesh_net_send(&net_tx, seg, &seg_sent_cb, tx);
    9376:	f8df a144 	ldr.w	sl, [pc, #324]	; 94bc <seg_tx_send_unacked+0x1c0>
	tx->sending = 1U;
    937a:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
					 tx->xmit, BUF_TIMEOUT);
    937e:	f04f 0800 	mov.w	r8, #0
    9382:	f04f 0900 	mov.w	r9, #0
	for (; tx->seg_o <= tx->seg_n; tx->seg_o++) {
    9386:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    938a:	f894 2020 	ldrb.w	r2, [r4, #32]
    938e:	429a      	cmp	r2, r3
    9390:	d208      	bcs.n	93a4 <seg_tx_send_unacked+0xa8>
	tx->seg_o = 0U;
    9392:	2300      	movs	r3, #0
    9394:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	tx->attempts--;
    9398:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
    939c:	3b01      	subs	r3, #1
    939e:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
    93a2:	e064      	b.n	946e <seg_tx_send_unacked+0x172>
		if (!tx->seg[tx->seg_o]) {
    93a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    93a8:	685b      	ldr	r3, [r3, #4]
    93aa:	b92b      	cbnz	r3, 93b8 <seg_tx_send_unacked+0xbc>
	for (; tx->seg_o <= tx->seg_n; tx->seg_o++) {
    93ac:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    93b0:	3301      	adds	r3, #1
    93b2:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    93b6:	e7e6      	b.n	9386 <seg_tx_send_unacked+0x8a>
		seg = bt_mesh_adv_create(BT_MESH_ADV_DATA, BT_MESH_LOCAL_ADV,
    93b8:	2101      	movs	r1, #1
    93ba:	e9cd 8900 	strd	r8, r9, [sp]
    93be:	7fe2      	ldrb	r2, [r4, #31]
    93c0:	4608      	mov	r0, r1
    93c2:	f7fe fd6d 	bl	7ea0 <bt_mesh_adv_create>
		if (!seg) {
    93c6:	4607      	mov	r7, r0
    93c8:	2800      	cmp	r0, #0
    93ca:	d050      	beq.n	946e <seg_tx_send_unacked+0x172>
	net_buf_simple_reserve(&buf->b, reserve);
    93cc:	f100 0508 	add.w	r5, r0, #8
    93d0:	2109      	movs	r1, #9
    93d2:	4628      	mov	r0, r5
    93d4:	f013 fdb6 	bl	1cf44 <net_buf_simple_reserve>
	uint8_t len = MIN(seg_len(tx->ctl), tx->len - (seg_len(tx->ctl) * seg_o));
    93d8:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
		seg_tx_buf_build(tx, tx->seg_o, &seg->b);
    93dc:	f894 6021 	ldrb.w	r6, [r4, #33]	; 0x21
	uint16_t seq_zero = tx->seq_auth & TRANS_SEQ_ZERO_MASK;
    93e0:	f8b4 b010 	ldrh.w	fp, [r4, #16]
	net_buf_simple_add_u8(buf, tx->hdr);
    93e4:	7fa1      	ldrb	r1, [r4, #30]
		return BT_MESH_APP_SEG_SDU_MAX;
    93e6:	f013 0f02 	tst.w	r3, #2
	uint8_t len = MIN(seg_len(tx->ctl), tx->len - (seg_len(tx->ctl) * seg_o));
    93ea:	8ba3      	ldrh	r3, [r4, #28]
		return BT_MESH_APP_SEG_SDU_MAX;
    93ec:	bf14      	ite	ne
    93ee:	2208      	movne	r2, #8
    93f0:	220c      	moveq	r2, #12
	uint8_t len = MIN(seg_len(tx->ctl), tx->len - (seg_len(tx->ctl) * seg_o));
    93f2:	fb02 3316 	mls	r3, r2, r6, r3
    93f6:	429a      	cmp	r2, r3
    93f8:	bfa8      	it	ge
    93fa:	b2da      	uxtbge	r2, r3
	net_buf_simple_add_u8(buf, tx->hdr);
    93fc:	4628      	mov	r0, r5
    93fe:	9203      	str	r2, [sp, #12]
    9400:	f013 fdf2 	bl	1cfe8 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, (tx->aszmic << 7) | seq_zero >> 6);
    9404:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
	uint16_t seq_zero = tx->seq_auth & TRANS_SEQ_ZERO_MASK;
    9408:	f3cb 0b0c 	ubfx	fp, fp, #0, #13
	net_buf_simple_add_u8(buf, (tx->aszmic << 7) | seq_zero >> 6);
    940c:	f3c3 0380 	ubfx	r3, r3, #2, #1
    9410:	ea4f 119b 	mov.w	r1, fp, lsr #6
    9414:	ea41 11c3 	orr.w	r1, r1, r3, lsl #7
    9418:	4628      	mov	r0, r5
    941a:	f013 fde5 	bl	1cfe8 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, (((seq_zero & 0x3f) << 2) | (seg_o >> 3)));
    941e:	08f1      	lsrs	r1, r6, #3
    9420:	ea41 018b 	orr.w	r1, r1, fp, lsl #2
    9424:	b2c9      	uxtb	r1, r1
    9426:	4628      	mov	r0, r5
    9428:	f013 fdde 	bl	1cfe8 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, ((seg_o & 0x07) << 5) | tx->seg_n);
    942c:	f894 1020 	ldrb.w	r1, [r4, #32]
    9430:	ea41 1146 	orr.w	r1, r1, r6, lsl #5
	net_buf_simple_add_mem(buf, tx->seg[seg_o], len);
    9434:	eb04 0686 	add.w	r6, r4, r6, lsl #2
	net_buf_simple_add_u8(buf, ((seg_o & 0x07) << 5) | tx->seg_n);
    9438:	b2c9      	uxtb	r1, r1
    943a:	4628      	mov	r0, r5
    943c:	f013 fdd4 	bl	1cfe8 <net_buf_simple_add_u8>
	net_buf_simple_add_mem(buf, tx->seg[seg_o], len);
    9440:	9a03      	ldr	r2, [sp, #12]
    9442:	6871      	ldr	r1, [r6, #4]
    9444:	4628      	mov	r0, r5
    9446:	f013 fdc6 	bl	1cfd6 <net_buf_simple_add_mem>
		tx->seg_pending++;
    944a:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
    944e:	3301      	adds	r3, #1
    9450:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
		err = bt_mesh_net_send(&net_tx, seg, &seg_sent_cb, tx);
    9454:	4652      	mov	r2, sl
    9456:	4623      	mov	r3, r4
    9458:	4639      	mov	r1, r7
    945a:	a807      	add	r0, sp, #28
    945c:	f7ff f918 	bl	8690 <bt_mesh_net_send>
		if (err) {
    9460:	2800      	cmp	r0, #0
    9462:	d0a3      	beq.n	93ac <seg_tx_send_unacked+0xb0>
			tx->seg_pending--;
    9464:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
    9468:	3b01      	subs	r3, #1
    946a:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	if (!tx->seg_pending) {
    946e:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
    9472:	b9e1      	cbnz	r1, 94ae <seg_tx_send_unacked+0x1b2>
				  K_MSEC(SEG_RETRANSMIT_TIMEOUT(tx)));
    9474:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
    9478:	2b00      	cmp	r3, #0
    947a:	bfc4      	itt	gt
    947c:	f894 2024 	ldrbgt.w	r2, [r4, #36]	; 0x24
    9480:	f44f 73c8 	movgt.w	r3, #400	; 0x190
    9484:	f04f 0032 	mov.w	r0, #50	; 0x32
    9488:	bfc8      	it	gt
    948a:	fb00 3002 	mlagt	r0, r0, r2, r3
    948e:	03c0      	lsls	r0, r0, #15
    9490:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    9494:	2300      	movs	r3, #0
    9496:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    949a:	03c9      	lsls	r1, r1, #15
    949c:	f7f7 fa8e 	bl	9bc <__aeabi_uldivmod>
		k_work_reschedule(&tx->retransmit,
    94a0:	f104 0530 	add.w	r5, r4, #48	; 0x30
    94a4:	4602      	mov	r2, r0
    94a6:	460b      	mov	r3, r1
    94a8:	4628      	mov	r0, r5
    94aa:	f00c fb0d 	bl	15ac8 <k_work_reschedule>
	tx->sending = 0U;
    94ae:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
    94b2:	f36f 1304 	bfc	r3, #4, #1
    94b6:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
    94ba:	e757      	b.n	936c <seg_tx_send_unacked+0x70>
    94bc:	0001f69c 	.word	0x0001f69c

000094c0 <ctl_recv>:
{
    94c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	switch (ctl_op) {
    94c4:	f011 077f 	ands.w	r7, r1, #127	; 0x7f
{
    94c8:	4681      	mov	r9, r0
    94ca:	4614      	mov	r4, r2
    94cc:	4698      	mov	r8, r3
	switch (ctl_op) {
    94ce:	d00a      	beq.n	94e6 <ctl_recv+0x26>
    94d0:	2f0a      	cmp	r7, #10
    94d2:	f000 8082 	beq.w	95da <ctl_recv+0x11a>
	if (!rx->local_match) {
    94d6:	7d03      	ldrb	r3, [r0, #20]
		return 0;
    94d8:	f013 0f40 	tst.w	r3, #64	; 0x40
    94dc:	bf14      	ite	ne
    94de:	f06f 0701 	mvnne.w	r7, #1
    94e2:	2700      	moveq	r7, #0
    94e4:	e004      	b.n	94f0 <ctl_recv+0x30>
	if (buf->len < 6) {
    94e6:	8893      	ldrh	r3, [r2, #4]
    94e8:	2b05      	cmp	r3, #5
    94ea:	d804      	bhi.n	94f6 <ctl_recv+0x36>
		return -EINVAL;
    94ec:	f06f 0715 	mvn.w	r7, #21
}
    94f0:	4638      	mov	r0, r7
    94f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	seq_zero = net_buf_simple_pull_be16(buf);
    94f6:	4610      	mov	r0, r2
    94f8:	f013 fe02 	bl	1d100 <net_buf_simple_pull_be16>
	seq_zero = (seq_zero >> 2) & TRANS_SEQ_ZERO_MASK;
    94fc:	f3c0 068f 	ubfx	r6, r0, #2, #16
	obo = seq_zero >> 15;
    9500:	f3c0 3acf 	ubfx	sl, r0, #15, #16
	ack = net_buf_simple_pull_be32(buf);
    9504:	4620      	mov	r0, r4
		if ((tx->seq_auth & TRANS_SEQ_ZERO_MASK) != seq_zero) {
    9506:	4c37      	ldr	r4, [pc, #220]	; (95e4 <ctl_recv+0x124>)
	ack = net_buf_simple_pull_be32(buf);
    9508:	f013 fe0c 	bl	1d124 <net_buf_simple_pull_be32>
		if ((tx->seq_auth & TRANS_SEQ_ZERO_MASK) != seq_zero) {
    950c:	e9d4 3c04 	ldrd	r3, ip, [r4, #16]
	ack = net_buf_simple_pull_be32(buf);
    9510:	4605      	mov	r5, r0
		if ((tx->seq_auth & TRANS_SEQ_ZERO_MASK) != seq_zero) {
    9512:	f3c3 020c 	ubfx	r2, r3, #0, #13
    9516:	f3c6 000c 	ubfx	r0, r6, #0, #13
    951a:	42bf      	cmp	r7, r7
    951c:	bf08      	it	eq
    951e:	4282      	cmpeq	r2, r0
	tx = seg_tx_lookup(seq_zero, obo, rx->ctx.addr);
    9520:	f8b9 1008 	ldrh.w	r1, [r9, #8]
		if ((tx->seq_auth & TRANS_SEQ_ZERO_MASK) != seq_zero) {
    9524:	d1e2      	bne.n	94ec <ctl_recv+0x2c>
		if (tx->dst == addr) {
    9526:	8b62      	ldrh	r2, [r4, #26]
    9528:	428a      	cmp	r2, r1
    952a:	d00a      	beq.n	9542 <ctl_recv+0x82>
		if (obo && tx->nack_count == tx->seg_n + 1) {
    952c:	f1ba 0f00 	cmp.w	sl, #0
    9530:	d0dc      	beq.n	94ec <ctl_recv+0x2c>
    9532:	f894 2020 	ldrb.w	r2, [r4, #32]
    9536:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
    953a:	3201      	adds	r2, #1
    953c:	4290      	cmp	r0, r2
    953e:	d1d5      	bne.n	94ec <ctl_recv+0x2c>
			tx->dst = addr;
    9540:	8361      	strh	r1, [r4, #26]
	if (!BT_MESH_ADDR_IS_UNICAST(tx->dst)) {
    9542:	f9b4 201a 	ldrsh.w	r2, [r4, #26]
    9546:	2a00      	cmp	r2, #0
    9548:	ddd0      	ble.n	94ec <ctl_recv+0x2c>
	*seq_auth = tx->seq_auth;
    954a:	e9c8 3c00 	strd	r3, ip, [r8]
	if (!ack) {
    954e:	b935      	cbnz	r5, 955e <ctl_recv+0x9e>
		seg_tx_complete(tx, -ECANCELED);
    9550:	4824      	ldr	r0, [pc, #144]	; (95e4 <ctl_recv+0x124>)
    9552:	f06f 018b 	mvn.w	r1, #139	; 0x8b
    9556:	f7ff fea3 	bl	92a0 <seg_tx_complete>
		return 0;
    955a:	462f      	mov	r7, r5
    955c:	e7c8      	b.n	94f0 <ctl_recv+0x30>
	if (find_msb_set(ack) - 1 > tx->seg_n) {
    955e:	f894 2020 	ldrb.w	r2, [r4, #32]
{
	if (op == 0) {
		return 0;
	}

	return 32 - __builtin_clz(op);
    9562:	fab5 f385 	clz	r3, r5
    9566:	f1c3 031f 	rsb	r3, r3, #31
    956a:	4293      	cmp	r3, r2
    956c:	d8be      	bhi.n	94ec <ctl_recv+0x2c>
	k_mem_slab_free(&segs, (void **)&tx->seg[seg_idx]);
    956e:	f8df a078 	ldr.w	sl, [pc, #120]	; 95e8 <ctl_recv+0x128>
	tx->seg[seg_idx] = NULL;
    9572:	f04f 0800 	mov.w	r8, #0
		ack &= ~BIT(bit - 1);
    9576:	f04f 0901 	mov.w	r9, #1
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS
	return __builtin_ffs(op);
    957a:	2d00      	cmp	r5, #0
    957c:	fa95 f6a5 	rbit	r6, r5
    9580:	fab6 f686 	clz	r6, r6
    9584:	bf08      	it	eq
    9586:	f04f 36ff 	moveq.w	r6, #4294967295	; 0xffffffff
	while ((bit = find_lsb_set(ack))) {
    958a:	1c77      	adds	r7, r6, #1
    958c:	d108      	bne.n	95a0 <ctl_recv+0xe0>
	if (tx->nack_count) {
    958e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    9592:	b1eb      	cbz	r3, 95d0 <ctl_recv+0x110>
		k_work_reschedule(&tx->retransmit, K_NO_WAIT);
    9594:	2200      	movs	r2, #0
    9596:	2300      	movs	r3, #0
    9598:	4814      	ldr	r0, [pc, #80]	; (95ec <ctl_recv+0x12c>)
    959a:	f00c fa95 	bl	15ac8 <k_work_reschedule>
    959e:	e7a7      	b.n	94f0 <ctl_recv+0x30>
		if (tx->seg[bit - 1]) {
    95a0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
    95a4:	685b      	ldr	r3, [r3, #4]
    95a6:	b173      	cbz	r3, 95c6 <ctl_recv+0x106>
	k_mem_slab_free(&segs, (void **)&tx->seg[seg_idx]);
    95a8:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    95ac:	4650      	mov	r0, sl
    95ae:	f014 ff02 	bl	1e3b6 <k_mem_slab_free>
    95b2:	b2f3      	uxtb	r3, r6
	tx->seg[seg_idx] = NULL;
    95b4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    95b8:	f8c3 8004 	str.w	r8, [r3, #4]
	tx->nack_count--;
    95bc:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    95c0:	3b01      	subs	r3, #1
    95c2:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
		ack &= ~BIT(bit - 1);
    95c6:	fa09 f606 	lsl.w	r6, r9, r6
    95ca:	ea25 0506 	bic.w	r5, r5, r6
    95ce:	e7d4      	b.n	957a <ctl_recv+0xba>
		seg_tx_complete(tx, 0);
    95d0:	4804      	ldr	r0, [pc, #16]	; (95e4 <ctl_recv+0x124>)
    95d2:	4639      	mov	r1, r7
    95d4:	f7ff fe64 	bl	92a0 <seg_tx_complete>
    95d8:	e78a      	b.n	94f0 <ctl_recv+0x30>
}
    95da:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return bt_mesh_hb_recv(rx, buf);
    95de:	4611      	mov	r1, r2
    95e0:	f000 bcc4 	b.w	9f6c <bt_mesh_hb_recv>
    95e4:	200011e8 	.word	0x200011e8
    95e8:	20000af0 	.word	0x20000af0
    95ec:	20001218 	.word	0x20001218

000095f0 <send_seg>:
{
    95f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if (seg_tx[i].nack_count) {
    95f4:	4c54      	ldr	r4, [pc, #336]	; (9748 <send_seg+0x158>)
{
    95f6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
		if (seg_tx[i].nack_count) {
    95f8:	f894 e022 	ldrb.w	lr, [r4, #34]	; 0x22
			blocked |= seg_tx_blocks(&seg_tx[i], net_tx->src,
    95fc:	f8b0 c008 	ldrh.w	ip, [r0, #8]
{
    9600:	460d      	mov	r5, r1
						 net_tx->ctx->addr);
    9602:	6841      	ldr	r1, [r0, #4]
			blocked |= seg_tx_blocks(&seg_tx[i], net_tx->src,
    9604:	888f      	ldrh	r7, [r1, #4]
		if (seg_tx[i].nack_count) {
    9606:	f1be 0f00 	cmp.w	lr, #0
    960a:	f040 809a 	bne.w	9742 <send_seg+0x152>
	if (ctl_op) {
    960e:	2e00      	cmp	r6, #0
    9610:	d063      	beq.n	96da <send_seg+0xea>
		tx->hdr = TRANS_CTL_HDR(*ctl_op, 1);
    9612:	7831      	ldrb	r1, [r6, #0]
    9614:	f061 017f 	orn	r1, r1, #127	; 0x7f
		tx->hdr = SEG_HDR(1, net_tx->aid);
    9618:	77a1      	strb	r1, [r4, #30]
	tx->src = net_tx->src;
    961a:	f8a4 c018 	strh.w	ip, [r4, #24]
	tx->seg_n = (sdu->len - 1) / seg_len(!!ctl_op);
    961e:	f8b5 c004 	ldrh.w	ip, [r5, #4]
	tx->dst = net_tx->ctx->addr;
    9622:	8367      	strh	r7, [r4, #26]
		return BT_MESH_APP_SEG_SDU_MAX;
    9624:	2e00      	cmp	r6, #0
	tx->seg_n = (sdu->len - 1) / seg_len(!!ctl_op);
    9626:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
		return BT_MESH_APP_SEG_SDU_MAX;
    962a:	bf14      	ite	ne
    962c:	2608      	movne	r6, #8
    962e:	260c      	moveq	r6, #12
	tx->seg_n = (sdu->len - 1) / seg_len(!!ctl_op);
    9630:	fb91 f1f6 	sdiv	r1, r1, r6
    9634:	b2c9      	uxtb	r1, r1
    9636:	f884 1020 	strb.w	r1, [r4, #32]
	tx->len = sdu->len;
    963a:	f8a4 c01c 	strh.w	ip, [r4, #28]
	tx->seg_o = 0;
    963e:	f04f 0700 	mov.w	r7, #0
	tx->seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_TX, bt_mesh.seq);
    9642:	f8df c108 	ldr.w	ip, [pc, #264]	; 974c <send_seg+0x15c>
	tx->seg_o = 0;
    9646:	f884 7021 	strb.w	r7, [r4, #33]	; 0x21
	tx->nack_count = tx->seg_n + 1;
    964a:	f101 0101 	add.w	r1, r1, #1
    964e:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
	tx->seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_TX, bt_mesh.seq);
    9652:	f8dc 1000 	ldr.w	r1, [ip]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9656:	f3bf 8f5b 	dmb	ish
    965a:	f8dc e008 	ldr.w	lr, [ip, #8]
    965e:	f3bf 8f5b 	dmb	ish
    9662:	f3ce 0e80 	ubfx	lr, lr, #2, #1
    9666:	f8dc c004 	ldr.w	ip, [ip, #4]
		err = k_mem_slab_alloc(&segs, &buf, BUF_TIMEOUT);
    966a:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 9750 <send_seg+0x160>
	tx->seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_TX, bt_mesh.seq);
    966e:	eba1 010e 	sub.w	r1, r1, lr
    9672:	ea4f 2e11 	mov.w	lr, r1, lsr #8
    9676:	ea4c 6101 	orr.w	r1, ip, r1, lsl #24
    967a:	e9c4 1e04 	strd	r1, lr, [r4, #16]
	tx->sub = net_tx->sub;
    967e:	6801      	ldr	r1, [r0, #0]
    9680:	6021      	str	r1, [r4, #0]
	tx->cb_data = cb_data;
    9682:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
	tx->attempts = SEG_RETRANSMIT_ATTEMPTS;
    9686:	f04f 0304 	mov.w	r3, #4
    968a:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	tx->xmit = net_tx->xmit;
    968e:	7a83      	ldrb	r3, [r0, #10]
    9690:	77e3      	strb	r3, [r4, #31]
	tx->aszmic = net_tx->aszmic;
    9692:	7ac2      	ldrb	r2, [r0, #11]
	tx->seg_pending = 0;
    9694:	f884 7025 	strb.w	r7, [r4, #37]	; 0x25
	tx->aszmic = net_tx->aszmic;
    9698:	f3c2 0340 	ubfx	r3, r2, #1, #1
	tx->ctl = !!ctl_op;
    969c:	bf14      	ite	ne
    969e:	2101      	movne	r1, #1
    96a0:	4639      	moveq	r1, r7
	tx->blocked = blocked;
    96a2:	009b      	lsls	r3, r3, #2
	tx->friend_cred = net_tx->friend_cred;
    96a4:	f002 0201 	and.w	r2, r2, #1
	tx->blocked = blocked;
    96a8:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    96ac:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
    96b0:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
    96b4:	f022 022f 	bic.w	r2, r2, #47	; 0x2f
    96b8:	4313      	orrs	r3, r2
    96ba:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	tx->ttl = net_tx->ctx->send_ttl;
    96be:	6843      	ldr	r3, [r0, #4]
    96c0:	7adb      	ldrb	r3, [r3, #11]
    96c2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	for (seg_o = 0U; sdu->len; seg_o++) {
    96c6:	f8b5 8004 	ldrh.w	r8, [r5, #4]
    96ca:	f1b8 0f00 	cmp.w	r8, #0
    96ce:	d110      	bne.n	96f2 <send_seg+0x102>
	seg_tx_send_unacked(tx);
    96d0:	481d      	ldr	r0, [pc, #116]	; (9748 <send_seg+0x158>)
    96d2:	f7ff fe13 	bl	92fc <seg_tx_send_unacked>
	return 0;
    96d6:	4640      	mov	r0, r8
    96d8:	e019      	b.n	970e <send_seg+0x11e>
	} else if (BT_MESH_IS_DEV_KEY(net_tx->ctx->app_idx)) {
    96da:	8849      	ldrh	r1, [r1, #2]
    96dc:	3103      	adds	r1, #3
    96de:	b289      	uxth	r1, r1
    96e0:	2901      	cmp	r1, #1
		tx->hdr = SEG_HDR(1, net_tx->aid);
    96e2:	bf85      	ittet	hi
    96e4:	7ac1      	ldrbhi	r1, [r0, #11]
    96e6:	f3c1 0185 	ubfxhi	r1, r1, #2, #6
		tx->hdr = SEG_HDR(0, 0);
    96ea:	2180      	movls	r1, #128	; 0x80
		tx->hdr = SEG_HDR(1, net_tx->aid);
    96ec:	f061 013f 	ornhi	r1, r1, #63	; 0x3f
    96f0:	e792      	b.n	9618 <send_seg+0x28>
		err = k_mem_slab_alloc(&segs, &buf, BUF_TIMEOUT);
    96f2:	2200      	movs	r2, #0
    96f4:	2300      	movs	r3, #0
    96f6:	a901      	add	r1, sp, #4
    96f8:	4648      	mov	r0, r9
    96fa:	f00b fea5 	bl	15448 <k_mem_slab_alloc>
		if (err) {
    96fe:	f107 0a01 	add.w	sl, r7, #1
    9702:	b138      	cbz	r0, 9714 <send_seg+0x124>
			seg_tx_reset(tx);
    9704:	4810      	ldr	r0, [pc, #64]	; (9748 <send_seg+0x158>)
    9706:	f7ff fd7d 	bl	9204 <seg_tx_reset>
			return -ENOBUFS;
    970a:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    970e:	b003      	add	sp, #12
    9710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memcpy(buf, net_buf_simple_pull_mem(sdu, len), len);
    9714:	f8b5 8004 	ldrh.w	r8, [r5, #4]
    9718:	f8dd b004 	ldr.w	fp, [sp, #4]
    971c:	45b0      	cmp	r8, r6
    971e:	bf28      	it	cs
    9720:	46b0      	movcs	r8, r6
    9722:	4641      	mov	r1, r8
    9724:	4628      	mov	r0, r5
    9726:	f013 fcd3 	bl	1d0d0 <net_buf_simple_pull_mem>
		tx->seg[seg_o] = buf;
    972a:	b2ff      	uxtb	r7, r7
		memcpy(buf, net_buf_simple_pull_mem(sdu, len), len);
    972c:	4601      	mov	r1, r0
		tx->seg[seg_o] = buf;
    972e:	eb04 0787 	add.w	r7, r4, r7, lsl #2
		memcpy(buf, net_buf_simple_pull_mem(sdu, len), len);
    9732:	4642      	mov	r2, r8
    9734:	4658      	mov	r0, fp
    9736:	f00d fd8d 	bl	17254 <memcpy>
		tx->seg[seg_o] = buf;
    973a:	9b01      	ldr	r3, [sp, #4]
    973c:	607b      	str	r3, [r7, #4]
	for (seg_o = 0U; sdu->len; seg_o++) {
    973e:	4657      	mov	r7, sl
    9740:	e7c1      	b.n	96c6 <send_seg+0xd6>
		return -EBUSY;
    9742:	f06f 000f 	mvn.w	r0, #15
    9746:	e7e2      	b.n	970e <send_seg+0x11e>
    9748:	200011e8 	.word	0x200011e8
    974c:	20001120 	.word	0x20001120
    9750:	20000af0 	.word	0x20000af0

00009754 <bt_mesh_tx_in_progress>:
		if (seg_tx[i].nack_count) {
    9754:	4b03      	ldr	r3, [pc, #12]	; (9764 <bt_mesh_tx_in_progress+0x10>)
    9756:	f893 0022 	ldrb.w	r0, [r3, #34]	; 0x22
}
    975a:	3800      	subs	r0, #0
    975c:	bf18      	it	ne
    975e:	2001      	movne	r0, #1
    9760:	4770      	bx	lr
    9762:	bf00      	nop
    9764:	200011e8 	.word	0x200011e8

00009768 <bt_mesh_trans_send>:
{
    9768:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    976c:	461f      	mov	r7, r3
	if (msg->len < 1) {
    976e:	888b      	ldrh	r3, [r1, #4]
{
    9770:	b08b      	sub	sp, #44	; 0x2c
    9772:	4604      	mov	r4, r0
    9774:	460d      	mov	r5, r1
    9776:	4616      	mov	r6, r2
	if (msg->len < 1) {
    9778:	b923      	cbnz	r3, 9784 <bt_mesh_trans_send+0x1c>
		return -EINVAL;
    977a:	f06f 0015 	mvn.w	r0, #21
}
    977e:	b00b      	add	sp, #44	; 0x2c
    9780:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (msg->len > BT_MESH_TX_SDU_MAX - BT_MESH_MIC_SHORT) {
    9784:	2b20      	cmp	r3, #32
    9786:	f200 8092 	bhi.w	98ae <bt_mesh_trans_send+0x146>
	if (net_buf_simple_tailroom(msg) < BT_MESH_MIC_SHORT) {
    978a:	4608      	mov	r0, r1
    978c:	f013 fcd7 	bl	1d13e <net_buf_simple_tailroom>
    9790:	2803      	cmp	r0, #3
    9792:	d9f2      	bls.n	977a <bt_mesh_trans_send+0x12>
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
    9794:	f8d4 8004 	ldr.w	r8, [r4, #4]
    9798:	f898 300b 	ldrb.w	r3, [r8, #11]
    979c:	2bff      	cmp	r3, #255	; 0xff
    979e:	d17b      	bne.n	9898 <bt_mesh_trans_send+0x130>
		tx->ctx->send_ttl = bt_mesh_default_ttl_get();
    97a0:	f7fe faf8 	bl	7d94 <bt_mesh_default_ttl_get>
    97a4:	f888 000b 	strb.w	r0, [r8, #11]
	if (msg->len > BT_MESH_SDU_UNSEG_MAX) {
    97a8:	88ab      	ldrh	r3, [r5, #4]
		tx->ctx->send_rel = true;
    97aa:	6860      	ldr	r0, [r4, #4]
	if (msg->len > BT_MESH_SDU_UNSEG_MAX) {
    97ac:	2b0b      	cmp	r3, #11
		tx->ctx->send_rel = true;
    97ae:	bf84      	itt	hi
    97b0:	2301      	movhi	r3, #1
    97b2:	7283      	strbhi	r3, [r0, #10]
	if (tx->ctx->addr == BT_MESH_ADDR_UNASSIGNED ||
    97b4:	8883      	ldrh	r3, [r0, #4]
    97b6:	2b00      	cmp	r3, #0
    97b8:	d0df      	beq.n	977a <bt_mesh_trans_send+0x12>
    97ba:	b21b      	sxth	r3, r3
    97bc:	2b00      	cmp	r3, #0
    97be:	dc04      	bgt.n	97ca <bt_mesh_trans_send+0x62>
	     BT_MESH_IS_DEV_KEY(tx->ctx->app_idx))) {
    97c0:	8843      	ldrh	r3, [r0, #2]
    97c2:	3303      	adds	r3, #3
	    (!BT_MESH_ADDR_IS_UNICAST(tx->ctx->addr) &&
    97c4:	b29b      	uxth	r3, r3
    97c6:	2b01      	cmp	r3, #1
    97c8:	d9d7      	bls.n	977a <bt_mesh_trans_send+0x12>
	err = bt_mesh_keys_resolve(tx->ctx, &tx->sub, &key, &aid);
    97ca:	f10d 030f 	add.w	r3, sp, #15
    97ce:	aa04      	add	r2, sp, #16
    97d0:	4621      	mov	r1, r4
    97d2:	f7ff fc21 	bl	9018 <bt_mesh_keys_resolve>
	if (err) {
    97d6:	2800      	cmp	r0, #0
    97d8:	d1d1      	bne.n	977e <bt_mesh_trans_send+0x16>
	tx->xmit = bt_mesh_net_transmit_get();
    97da:	f7fe faeb 	bl	7db4 <bt_mesh_net_transmit_get>
	tx->aid = aid;
    97de:	7ae3      	ldrb	r3, [r4, #11]
    97e0:	f89d 200f 	ldrb.w	r2, [sp, #15]
	tx->xmit = bt_mesh_net_transmit_get();
    97e4:	72a0      	strb	r0, [r4, #10]
	tx->aid = aid;
    97e6:	f362 0387 	bfi	r3, r2, #2, #6
    97ea:	72e3      	strb	r3, [r4, #11]
	if (!tx->ctx->send_rel || net_buf_simple_tailroom(msg) < 8) {
    97ec:	6863      	ldr	r3, [r4, #4]
    97ee:	f893 800a 	ldrb.w	r8, [r3, #10]
    97f2:	f1b8 0f00 	cmp.w	r8, #0
    97f6:	d008      	beq.n	980a <bt_mesh_trans_send+0xa2>
    97f8:	4628      	mov	r0, r5
    97fa:	f013 fca0 	bl	1d13e <net_buf_simple_tailroom>
    97fe:	2807      	cmp	r0, #7
    9800:	bf94      	ite	ls
    9802:	f04f 0800 	movls.w	r8, #0
    9806:	f04f 0801 	movhi.w	r8, #1
    980a:	7ae3      	ldrb	r3, [r4, #11]
	err = trans_encrypt(tx, key, msg);
    980c:	f8dd 9010 	ldr.w	r9, [sp, #16]
    9810:	f368 0341 	bfi	r3, r8, #1, #1
    9814:	72e3      	strb	r3, [r4, #11]
	struct bt_mesh_app_crypto_ctx crypto = {
    9816:	2210      	movs	r2, #16
    9818:	2100      	movs	r1, #0
    981a:	a806      	add	r0, sp, #24
    981c:	f00d fd25 	bl	1726a <memset>
		.dev_key = BT_MESH_IS_DEV_KEY(tx->ctx->app_idx),
    9820:	6863      	ldr	r3, [r4, #4]
	struct bt_mesh_app_crypto_ctx crypto = {
    9822:	8922      	ldrh	r2, [r4, #8]
		.dev_key = BT_MESH_IS_DEV_KEY(tx->ctx->app_idx),
    9824:	8859      	ldrh	r1, [r3, #2]
	struct bt_mesh_app_crypto_ctx crypto = {
    9826:	f8ad 2016 	strh.w	r2, [sp, #22]
		.dev_key = BT_MESH_IS_DEV_KEY(tx->ctx->app_idx),
    982a:	3103      	adds	r1, #3
    982c:	b289      	uxth	r1, r1
		.seq_num = bt_mesh.seq,
    982e:	4a21      	ldr	r2, [pc, #132]	; (98b4 <bt_mesh_trans_send+0x14c>)
	struct bt_mesh_app_crypto_ctx crypto = {
    9830:	889b      	ldrh	r3, [r3, #4]
    9832:	f8ad 3018 	strh.w	r3, [sp, #24]
		.dev_key = BT_MESH_IS_DEV_KEY(tx->ctx->app_idx),
    9836:	2901      	cmp	r1, #1
	struct bt_mesh_app_crypto_ctx crypto = {
    9838:	6853      	ldr	r3, [r2, #4]
    983a:	9307      	str	r3, [sp, #28]
		.dev_key = BT_MESH_IS_DEV_KEY(tx->ctx->app_idx),
    983c:	bf8c      	ite	hi
    983e:	2100      	movhi	r1, #0
    9840:	2101      	movls	r1, #1
    9842:	f88d 1014 	strb.w	r1, [sp, #20]
	struct bt_mesh_app_crypto_ctx crypto = {
    9846:	f88d 8015 	strb.w	r8, [sp, #21]
		.iv_index = BT_MESH_NET_IVI_TX,
    984a:	6813      	ldr	r3, [r2, #0]
    984c:	f3bf 8f5b 	dmb	ish
    9850:	6892      	ldr	r2, [r2, #8]
    9852:	f3bf 8f5b 	dmb	ish
    9856:	f3c2 0280 	ubfx	r2, r2, #2, #1
    985a:	1a9b      	subs	r3, r3, r2
	struct bt_mesh_app_crypto_ctx crypto = {
    985c:	9308      	str	r3, [sp, #32]
	if (BT_MESH_ADDR_IS_VIRTUAL(tx->ctx->addr)) {
    985e:	6863      	ldr	r3, [r4, #4]
    9860:	889b      	ldrh	r3, [r3, #4]
    9862:	f483 4300 	eor.w	r3, r3, #32768	; 0x8000
    9866:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
		crypto.ad = bt_mesh_va_label_get(tx->ctx->addr);
    986a:	bf38      	it	cc
    986c:	2300      	movcc	r3, #0
	return bt_mesh_app_encrypt(key, &crypto, msg);
    986e:	462a      	mov	r2, r5
    9870:	a905      	add	r1, sp, #20
    9872:	4648      	mov	r0, r9
		crypto.ad = bt_mesh_va_label_get(tx->ctx->addr);
    9874:	bf38      	it	cc
    9876:	9309      	strcc	r3, [sp, #36]	; 0x24
	return bt_mesh_app_encrypt(key, &crypto, msg);
    9878:	f010 fa4f 	bl	19d1a <bt_mesh_app_encrypt>
	if (err) {
    987c:	2800      	cmp	r0, #0
    987e:	f47f af7e 	bne.w	977e <bt_mesh_trans_send+0x16>
	if (tx->ctx->send_rel) {
    9882:	6863      	ldr	r3, [r4, #4]
    9884:	7a9b      	ldrb	r3, [r3, #10]
		err = send_seg(tx, msg, cb, cb_data, NULL);
    9886:	9000      	str	r0, [sp, #0]
	if (tx->ctx->send_rel) {
    9888:	b153      	cbz	r3, 98a0 <bt_mesh_trans_send+0x138>
		err = send_seg(tx, msg, cb, cb_data, NULL);
    988a:	463b      	mov	r3, r7
    988c:	4632      	mov	r2, r6
    988e:	4629      	mov	r1, r5
    9890:	4620      	mov	r0, r4
    9892:	f7ff fead 	bl	95f0 <send_seg>
    9896:	e772      	b.n	977e <bt_mesh_trans_send+0x16>
	} else if (tx->ctx->send_ttl > BT_MESH_TTL_MAX) {
    9898:	061b      	lsls	r3, r3, #24
    989a:	f53f af6e 	bmi.w	977a <bt_mesh_trans_send+0x12>
    989e:	e783      	b.n	97a8 <bt_mesh_trans_send+0x40>
		err = send_unseg(tx, msg, cb, cb_data, NULL);
    98a0:	463b      	mov	r3, r7
    98a2:	4632      	mov	r2, r6
    98a4:	4629      	mov	r1, r5
    98a6:	4620      	mov	r0, r4
    98a8:	f00f ffe8 	bl	1987c <send_unseg>
    98ac:	e767      	b.n	977e <bt_mesh_trans_send+0x16>
		return -EMSGSIZE;
    98ae:	f06f 0079 	mvn.w	r0, #121	; 0x79
    98b2:	e764      	b.n	977e <bt_mesh_trans_send+0x16>
    98b4:	20001120 	.word	0x20001120

000098b8 <bt_mesh_trans_recv>:

	return err;
}

int bt_mesh_trans_recv(struct net_buf_simple *buf, struct bt_mesh_net_rx *rx)
{
    98b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint64_t seq_auth = TRANS_SEQ_AUTH_NVAL;
    98bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
    98c0:	b095      	sub	sp, #84	; 0x54
	uint64_t seq_auth = TRANS_SEQ_AUTH_NVAL;
    98c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    98c6:	e9cd 2308 	strd	r2, r3, [sp, #32]

	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND)) {
		rx->friend_match = bt_mesh_friend_match(rx->sub->net_idx,
							rx->ctx.recv_dst);
	} else {
		rx->friend_match = false;
    98ca:	7d0b      	ldrb	r3, [r1, #20]
    98cc:	f36f 13c7 	bfc	r3, #7, #1
{
    98d0:	4606      	mov	r6, r0
		rx->friend_match = false;
    98d2:	750b      	strb	r3, [r1, #20]
{
    98d4:	460c      	mov	r4, r1

	BT_DBG("src 0x%04x dst 0x%04x seq 0x%08x friend_match %u",
	       rx->ctx.addr, rx->ctx.recv_dst, rx->seq, rx->friend_match);

	/* Remove network headers */
	net_buf_simple_pull(buf, BT_MESH_NET_HDR_LEN);
    98d6:	2109      	movs	r1, #9
    98d8:	f013 fbf2 	bl	1d0c0 <net_buf_simple_pull>
	state->offset = net_buf_simple_headroom(buf);
    98dc:	4630      	mov	r0, r6
    98de:	f013 fc2a 	bl	1d136 <net_buf_simple_headroom>
	/* Save the app-level state so the buffer can later be placed in
	 * the Friend Queue.
	 */
	net_buf_simple_save(buf, &state);

	if (SEG(buf->data)) {
    98e2:	f8d6 9000 	ldr.w	r9, [r6]
	state->len = buf->len;
    98e6:	f8b6 b004 	ldrh.w	fp, [r6, #4]
    98ea:	f999 3000 	ldrsb.w	r3, [r9]
	state->offset = net_buf_simple_headroom(buf);
    98ee:	9005      	str	r0, [sp, #20]
    98f0:	2b00      	cmp	r3, #0
    98f2:	f280 8195 	bge.w	9c20 <bt_mesh_trans_recv+0x368>
		/* Segmented messages must match a local element or an
		 * LPN of this Friend.
		 */
		if (!rx->local_match && !rx->friend_match) {
    98f6:	f894 a014 	ldrb.w	sl, [r4, #20]
    98fa:	f01a 00c0 	ands.w	r0, sl, #192	; 0xc0
    98fe:	f000 81b7 	beq.w	9c70 <bt_mesh_trans_recv+0x3b8>
	struct bt_mesh_rpl *rpl = NULL;
    9902:	2300      	movs	r3, #0
	if (buf->len < 5) {
    9904:	f1bb 0f04 	cmp.w	fp, #4
	struct bt_mesh_rpl *rpl = NULL;
    9908:	9307      	str	r3, [sp, #28]
	if (buf->len < 5) {
    990a:	d802      	bhi.n	9912 <bt_mesh_trans_recv+0x5a>
		return -EINVAL;
    990c:	f06f 0a15 	mvn.w	sl, #21
    9910:	e1e6      	b.n	9ce0 <bt_mesh_trans_recv+0x428>
	if (bt_mesh_rpl_check(net_rx, &rpl)) {
    9912:	a907      	add	r1, sp, #28
    9914:	4620      	mov	r0, r4
    9916:	f000 fa19 	bl	9d4c <bt_mesh_rpl_check>
    991a:	2800      	cmp	r0, #0
    991c:	d1f6      	bne.n	990c <bt_mesh_trans_recv+0x54>
	net_buf_simple_pull(buf, 1);
    991e:	2101      	movs	r1, #1
    9920:	4630      	mov	r0, r6
    9922:	f013 fbcd 	bl	1d0c0 <net_buf_simple_pull>
	seq_zero = net_buf_simple_pull_be16(buf);
    9926:	4630      	mov	r0, r6
    9928:	f013 fbea 	bl	1d100 <net_buf_simple_pull_be16>
	seg_o = (seq_zero & 0x03) << 3;
    992c:	00c7      	lsls	r7, r0, #3
	seq_zero = (seq_zero >> 2) & TRANS_SEQ_ZERO_MASK;
    992e:	f3c0 058c 	ubfx	r5, r0, #2, #13
	seg_n = net_buf_simple_pull_u8(buf);
    9932:	4630      	mov	r0, r6
    9934:	f013 fbd4 	bl	1d0e0 <net_buf_simple_pull_u8>
	seg_o = (seq_zero & 0x03) << 3;
    9938:	f007 0718 	and.w	r7, r7, #24
	seg_o |= seg_n >> 5;
    993c:	ea47 1750 	orr.w	r7, r7, r0, lsr #5
	seg_n &= 0x1f;
    9940:	f000 0a1f 	and.w	sl, r0, #31
	seg_o |= seg_n >> 5;
    9944:	b2ff      	uxtb	r7, r7
	if (seg_o > seg_n) {
    9946:	4557      	cmp	r7, sl
	seg_n &= 0x1f;
    9948:	46d0      	mov	r8, sl
	if (seg_o > seg_n) {
    994a:	d8df      	bhi.n	990c <bt_mesh_trans_recv+0x54>
	*seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_RX(net_rx),
    994c:	6922      	ldr	r2, [r4, #16]
    994e:	48af      	ldr	r0, [pc, #700]	; (9c0c <bt_mesh_trans_recv+0x354>)
    9950:	7d23      	ldrb	r3, [r4, #20]
    9952:	6800      	ldr	r0, [r0, #0]
    9954:	1b55      	subs	r5, r2, r5
    9956:	f3c5 050c 	ubfx	r5, r5, #0, #13
    995a:	f003 0101 	and.w	r1, r3, #1
    995e:	1a41      	subs	r1, r0, r1
    9960:	eba2 0c05 	sub.w	ip, r2, r5
    9964:	ea4c 6c01 	orr.w	ip, ip, r1, lsl #24
		if (rx->src != net_rx->ctx.addr ||
    9968:	4da9      	ldr	r5, [pc, #676]	; (9c10 <bt_mesh_trans_recv+0x358>)
	auth_seqnum = *seq_auth & BIT_MASK(24);
    996a:	f02c 427f 	bic.w	r2, ip, #4278190080	; 0xff000000
	*seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_RX(net_rx),
    996e:	0a08      	lsrs	r0, r1, #8
	auth_seqnum = *seq_auth & BIT_MASK(24);
    9970:	9204      	str	r2, [sp, #16]
		if (rx->src != net_rx->ctx.addr ||
    9972:	69a9      	ldr	r1, [r5, #24]
    9974:	68a2      	ldr	r2, [r4, #8]
    9976:	4291      	cmp	r1, r2
	*seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_RX(net_rx),
    9978:	e9cd c008 	strd	ip, r0, [sp, #32]
		if (rx->src != net_rx->ctx.addr ||
    997c:	d10d      	bne.n	999a <bt_mesh_trans_recv+0xe2>
		if (rx->seq_auth >= *seq_auth) {
    997e:	e9d5 1204 	ldrd	r1, r2, [r5, #16]
    9982:	4561      	cmp	r1, ip
    9984:	eb72 0e00 	sbcs.w	lr, r2, r0
    9988:	f080 8174 	bcs.w	9c74 <bt_mesh_trans_recv+0x3bc>
		if (rx->in_use) {
    998c:	7feb      	ldrb	r3, [r5, #31]
    998e:	065a      	lsls	r2, r3, #25
    9990:	d503      	bpl.n	999a <bt_mesh_trans_recv+0xe2>
			seg_rx_reset(rx, true);
    9992:	2101      	movs	r1, #1
    9994:	4628      	mov	r0, r5
    9996:	f7ff fc0b 	bl	91b0 <seg_rx_reset>
	if (!sdu_len_is_ok(net_rx->ctl, seg_n)) {
    999a:	f1b8 0f02 	cmp.w	r8, #2
    999e:	d913      	bls.n	99c8 <bt_mesh_trans_recv+0x110>
			 net_rx->friend_match);
    99a0:	7d23      	ldrb	r3, [r4, #20]
		send_ack(net_rx->sub, net_rx->ctx.recv_dst, net_rx->ctx.addr,
    99a2:	8922      	ldrh	r2, [r4, #8]
    99a4:	8961      	ldrh	r1, [r4, #10]
    99a6:	6820      	ldr	r0, [r4, #0]
    99a8:	09db      	lsrs	r3, r3, #7
    99aa:	9302      	str	r3, [sp, #8]
    99ac:	2300      	movs	r3, #0
    99ae:	9301      	str	r3, [sp, #4]
    99b0:	ab08      	add	r3, sp, #32
    99b2:	9300      	str	r3, [sp, #0]
    99b4:	7be3      	ldrb	r3, [r4, #15]
    99b6:	f00f ffe4 	bl	19982 <send_ack.isra.0>
			return -EMSGSIZE;
    99ba:	f06f 0a79 	mvn.w	sl, #121	; 0x79
    99be:	e18f      	b.n	9ce0 <bt_mesh_trans_recv+0x428>
				bt_mesh_rpl_update(rpl, net_rx);
    99c0:	4621      	mov	r1, r4
    99c2:	f010 f88d 	bl	19ae0 <bt_mesh_rpl_update>
    99c6:	e189      	b.n	9cdc <bt_mesh_trans_recv+0x424>
	if (rpl && rpl->src && auth_seqnum <= rpl->seg &&
    99c8:	9b07      	ldr	r3, [sp, #28]
    99ca:	b18b      	cbz	r3, 99f0 <bt_mesh_trans_recv+0x138>
    99cc:	881a      	ldrh	r2, [r3, #0]
    99ce:	f3c2 020e 	ubfx	r2, r2, #0, #15
    99d2:	b16a      	cbz	r2, 99f0 <bt_mesh_trans_recv+0x138>
    99d4:	685a      	ldr	r2, [r3, #4]
    99d6:	9904      	ldr	r1, [sp, #16]
    99d8:	ebb1 2f12 	cmp.w	r1, r2, lsr #8
    99dc:	d808      	bhi.n	99f0 <bt_mesh_trans_recv+0x138>
    99de:	f993 3001 	ldrsb.w	r3, [r3, #1]
    99e2:	2b00      	cmp	r3, #0
    99e4:	f280 817a 	bge.w	9cdc <bt_mesh_trans_recv+0x424>
	    (!rpl->old_iv || net_rx->old_iv)) {
    99e8:	7d23      	ldrb	r3, [r4, #20]
    99ea:	07da      	lsls	r2, r3, #31
    99ec:	f100 8176 	bmi.w	9cdc <bt_mesh_trans_recv+0x424>
 *
 * @return Number of unallocated memory blocks.
 */
static inline uint32_t k_mem_slab_num_free_get(struct k_mem_slab *slab)
{
	return slab->num_blocks - slab->num_used;
    99f0:	4b88      	ldr	r3, [pc, #544]	; (9c14 <bt_mesh_trans_recv+0x35c>)
	if (k_mem_slab_num_free_get(&segs) < 1) {
    99f2:	689a      	ldr	r2, [r3, #8]
    99f4:	699b      	ldr	r3, [r3, #24]
    99f6:	429a      	cmp	r2, r3
    99f8:	d102      	bne.n	9a00 <bt_mesh_trans_recv+0x148>
		return -ENOMEM;
    99fa:	f06f 0a0b 	mvn.w	sl, #11
    99fe:	e16f      	b.n	9ce0 <bt_mesh_trans_recv+0x428>
		if (rx->in_use) {
    9a00:	7fe9      	ldrb	r1, [r5, #31]
    9a02:	f011 0040 	ands.w	r0, r1, #64	; 0x40
    9a06:	d1f8      	bne.n	99fa <bt_mesh_trans_recv+0x142>
		rx->sub = net_rx->sub;
    9a08:	6823      	ldr	r3, [r4, #0]
		rx->ctl = net_rx->ctl;
    9a0a:	f894 c014 	ldrb.w	ip, [r4, #20]
		rx->sub = net_rx->sub;
    9a0e:	602b      	str	r3, [r5, #0]
		rx->seq_auth = *seq_auth;
    9a10:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
		rx->ctl = net_rx->ctl;
    9a14:	f3cc 0cc0 	ubfx	ip, ip, #3, #1
		rx->seg_n = seg_n;
    9a18:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
		rx->seq_auth = *seq_auth;
    9a1c:	e9c5 2304 	strd	r2, r3, [r5, #16]
		rx->seg_n = seg_n;
    9a20:	ea4a 1a4c 	orr.w	sl, sl, ip, lsl #5
    9a24:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
    9a28:	ea4a 0101 	orr.w	r1, sl, r1
    9a2c:	77e9      	strb	r1, [r5, #31]
		rx->hdr = *hdr;
    9a2e:	f899 3000 	ldrb.w	r3, [r9]
    9a32:	77ab      	strb	r3, [r5, #30]
		rx->ttl = net_rx->ctx.send_ttl;
    9a34:	7be3      	ldrb	r3, [r4, #15]
    9a36:	f885 3020 	strb.w	r3, [r5, #32]
		rx->src = net_rx->ctx.addr;
    9a3a:	8923      	ldrh	r3, [r4, #8]
    9a3c:	832b      	strh	r3, [r5, #24]
		rx->dst = net_rx->ctx.recv_dst;
    9a3e:	8963      	ldrh	r3, [r4, #10]
    9a40:	836b      	strh	r3, [r5, #26]
	rx->obo = net_rx->friend_match;
    9a42:	7d23      	ldrb	r3, [r4, #20]
		rx->block = 0U;
    9a44:	6268      	str	r0, [r5, #36]	; 0x24
	rx->obo = net_rx->friend_match;
    9a46:	b2ca      	uxtb	r2, r1
    9a48:	09db      	lsrs	r3, r3, #7
    9a4a:	f363 12c7 	bfi	r2, r3, #7, #1
    9a4e:	77ea      	strb	r2, [r5, #31]
	if (BIT(seg_o) & rx->block) {
    9a50:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 9c10 <bt_mesh_trans_recv+0x358>
    9a54:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
    9a58:	40fb      	lsrs	r3, r7
    9a5a:	f013 0201 	ands.w	r2, r3, #1
    9a5e:	f040 813d 	bne.w	9cdc <bt_mesh_trans_recv+0x424>
		rx->len = seg_n * seg_len(rx->ctl) + buf->len;
    9a62:	f89a 101f 	ldrb.w	r1, [sl, #31]
    9a66:	88b3      	ldrh	r3, [r6, #4]
	if (seg_o == seg_n) {
    9a68:	4547      	cmp	r7, r8
		rx->len = seg_n * seg_len(rx->ctl) + buf->len;
    9a6a:	f3c1 1040 	ubfx	r0, r1, #5, #1
	if (seg_o == seg_n) {
    9a6e:	d148      	bne.n	9b02 <bt_mesh_trans_recv+0x24a>
		return BT_MESH_APP_SEG_SDU_MAX;
    9a70:	2800      	cmp	r0, #0
    9a72:	bf14      	ite	ne
    9a74:	2008      	movne	r0, #8
    9a76:	200c      	moveq	r0, #12
		rx->len = seg_n * seg_len(rx->ctl) + buf->len;
    9a78:	fb00 3307 	mla	r3, r0, r7, r3
    9a7c:	b29b      	uxth	r3, r3
		if (rx->len > BT_MESH_RX_SDU_MAX) {
    9a7e:	2b24      	cmp	r3, #36	; 0x24
		rx->len = seg_n * seg_len(rx->ctl) + buf->len;
    9a80:	f8aa 301c 	strh.w	r3, [sl, #28]
		if (rx->len > BT_MESH_RX_SDU_MAX) {
    9a84:	d82d      	bhi.n	9ae2 <bt_mesh_trans_recv+0x22a>
    9a86:	f014 ffe2 	bl	1ea4e <z_impl_k_uptime_ticks>
    9a8a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    9a8e:	fba0 0302 	umull	r0, r3, r0, r2
    9a92:	fb02 3301 	mla	r3, r2, r1, r3
    9a96:	0bc0      	lsrs	r0, r0, #15
    9a98:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return (uint32_t)k_uptime_get();
    9a9c:	62a8      	str	r0, [r5, #40]	; 0x28
		int32_t timeout = ack_timeout(rx);
    9a9e:	485c      	ldr	r0, [pc, #368]	; (9c10 <bt_mesh_trans_recv+0x358>)
    9aa0:	f00f fe62 	bl	19768 <ack_timeout>
		k_work_schedule(&rx->ack, K_MSEC(timeout));
    9aa4:	ea20 71e0 	bic.w	r1, r0, r0, asr #31
    9aa8:	f240 30e7 	movw	r0, #999	; 0x3e7
    9aac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    9ab0:	2300      	movs	r3, #0
    9ab2:	eb00 30c1 	add.w	r0, r0, r1, lsl #15
    9ab6:	1449      	asrs	r1, r1, #17
    9ab8:	f7f6 ff80 	bl	9bc <__aeabi_uldivmod>
    9abc:	4602      	mov	r2, r0
    9abe:	460b      	mov	r3, r1
    9ac0:	4855      	ldr	r0, [pc, #340]	; (9c18 <bt_mesh_trans_recv+0x360>)
    9ac2:	f00b ffcd 	bl	15a60 <k_work_schedule>
	err = k_mem_slab_alloc(&segs, &rx->seg[seg_o], K_NO_WAIT);
    9ac6:	1c79      	adds	r1, r7, #1
    9ac8:	b2c9      	uxtb	r1, r1
    9aca:	4852      	ldr	r0, [pc, #328]	; (9c14 <bt_mesh_trans_recv+0x35c>)
    9acc:	2200      	movs	r2, #0
    9ace:	2300      	movs	r3, #0
    9ad0:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    9ad4:	f00b fcb8 	bl	15448 <k_mem_slab_alloc>
	if (err) {
    9ad8:	4682      	mov	sl, r0
    9ada:	b1c8      	cbz	r0, 9b10 <bt_mesh_trans_recv+0x258>
		return -ENOBUFS;
    9adc:	f06f 0a68 	mvn.w	sl, #104	; 0x68
    9ae0:	e0fe      	b.n	9ce0 <bt_mesh_trans_recv+0x428>
			send_ack(net_rx->sub, net_rx->ctx.recv_dst,
    9ae2:	ab08      	add	r3, sp, #32
    9ae4:	09c9      	lsrs	r1, r1, #7
    9ae6:	e9cd 2101 	strd	r2, r1, [sp, #4]
    9aea:	6820      	ldr	r0, [r4, #0]
    9aec:	8961      	ldrh	r1, [r4, #10]
    9aee:	9300      	str	r3, [sp, #0]
    9af0:	8922      	ldrh	r2, [r4, #8]
    9af2:	7be3      	ldrb	r3, [r4, #15]
    9af4:	f00f ff45 	bl	19982 <send_ack.isra.0>
			seg_rx_reset(rx, true);
    9af8:	2101      	movs	r1, #1
    9afa:	4650      	mov	r0, sl
    9afc:	f7ff fb58 	bl	91b0 <seg_rx_reset>
    9b00:	e75b      	b.n	99ba <bt_mesh_trans_recv+0x102>
		return BT_MESH_APP_SEG_SDU_MAX;
    9b02:	2800      	cmp	r0, #0
		if (buf->len != seg_len(rx->ctl)) {
    9b04:	bf14      	ite	ne
    9b06:	2208      	movne	r2, #8
    9b08:	220c      	moveq	r2, #12
    9b0a:	429a      	cmp	r2, r3
    9b0c:	d0bb      	beq.n	9a86 <bt_mesh_trans_recv+0x1ce>
    9b0e:	e6fd      	b.n	990c <bt_mesh_trans_recv+0x54>
	memcpy(rx->seg[seg_o], buf->data, buf->len);
    9b10:	eb05 0387 	add.w	r3, r5, r7, lsl #2
    9b14:	88b2      	ldrh	r2, [r6, #4]
    9b16:	6858      	ldr	r0, [r3, #4]
    9b18:	6831      	ldr	r1, [r6, #0]
    9b1a:	f00d fb9b 	bl	17254 <memcpy>
	rx->block |= BIT(seg_o);
    9b1e:	2301      	movs	r3, #1
    9b20:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	if (rx->block != BLOCK_COMPLETE(seg_n)) {
    9b22:	4498      	add	r8, r3
	rx->block |= BIT(seg_o);
    9b24:	fa03 f707 	lsl.w	r7, r3, r7
	if (rx->block != BLOCK_COMPLETE(seg_n)) {
    9b28:	fa03 f308 	lsl.w	r3, r3, r8
	rx->block |= BIT(seg_o);
    9b2c:	4317      	orrs	r7, r2
	if (rx->block != BLOCK_COMPLETE(seg_n)) {
    9b2e:	3b01      	subs	r3, #1
    9b30:	429f      	cmp	r7, r3
	rx->block |= BIT(seg_o);
    9b32:	626f      	str	r7, [r5, #36]	; 0x24
	if (rx->block != BLOCK_COMPLETE(seg_n)) {
    9b34:	f040 80d4 	bne.w	9ce0 <bt_mesh_trans_recv+0x428>
	if (rpl) {
    9b38:	9807      	ldr	r0, [sp, #28]
    9b3a:	b168      	cbz	r0, 9b58 <bt_mesh_trans_recv+0x2a0>
		bt_mesh_rpl_update(rpl, net_rx);
    9b3c:	4621      	mov	r1, r4
    9b3e:	f00f ffcf 	bl	19ae0 <bt_mesh_rpl_update>
		rpl->seg = MAX(rpl->seg, auth_seqnum);
    9b42:	9907      	ldr	r1, [sp, #28]
    9b44:	9804      	ldr	r0, [sp, #16]
    9b46:	684b      	ldr	r3, [r1, #4]
    9b48:	f3c3 2217 	ubfx	r2, r3, #8, #24
    9b4c:	4282      	cmp	r2, r0
    9b4e:	bf38      	it	cc
    9b50:	4602      	movcc	r2, r0
    9b52:	f362 231f 	bfi	r3, r2, #8, #24
    9b56:	604b      	str	r3, [r1, #4]
	(void)k_work_cancel_delayable(&rx->ack);
    9b58:	4d2d      	ldr	r5, [pc, #180]	; (9c10 <bt_mesh_trans_recv+0x358>)
    9b5a:	f105 0030 	add.w	r0, r5, #48	; 0x30
    9b5e:	f014 fdf6 	bl	1e74e <k_work_cancel_delayable>
		 net_rx->ctx.send_ttl, seq_auth, rx->block, rx->obo);
    9b62:	7feb      	ldrb	r3, [r5, #31]
	send_ack(net_rx->sub, net_rx->ctx.recv_dst, net_rx->ctx.addr,
    9b64:	8922      	ldrh	r2, [r4, #8]
    9b66:	8961      	ldrh	r1, [r4, #10]
    9b68:	6820      	ldr	r0, [r4, #0]
    9b6a:	09db      	lsrs	r3, r3, #7
    9b6c:	9302      	str	r3, [sp, #8]
    9b6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    9b70:	9301      	str	r3, [sp, #4]
    9b72:	af08      	add	r7, sp, #32
    9b74:	7be3      	ldrb	r3, [r4, #15]
    9b76:	9700      	str	r7, [sp, #0]
    9b78:	f00f ff03 	bl	19982 <send_ack.isra.0>
	if (net_rx->ctl) {
    9b7c:	7d23      	ldrb	r3, [r4, #20]
    9b7e:	071b      	lsls	r3, r3, #28
    9b80:	d517      	bpl.n	9bb2 <bt_mesh_trans_recv+0x2fa>
		NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_RX_CTL_MAX);
    9b82:	ab0e      	add	r3, sp, #56	; 0x38
    9b84:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
    9b88:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		seg_rx_assemble(rx, &sdu, 0U);
    9b8c:	a90b      	add	r1, sp, #44	; 0x2c
    9b8e:	2200      	movs	r2, #0
    9b90:	4628      	mov	r0, r5
		NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_RX_CTL_MAX);
    9b92:	930b      	str	r3, [sp, #44]	; 0x2c
		seg_rx_assemble(rx, &sdu, 0U);
    9b94:	f00f fdba 	bl	1970c <seg_rx_assemble>
		err = ctl_recv(net_rx, *hdr, &sdu, seq_auth);
    9b98:	f899 1000 	ldrb.w	r1, [r9]
    9b9c:	463b      	mov	r3, r7
    9b9e:	aa0b      	add	r2, sp, #44	; 0x2c
    9ba0:	4620      	mov	r0, r4
    9ba2:	f7ff fc8d 	bl	94c0 <ctl_recv>
		err = sdu_recv(net_rx, *hdr, ASZMIC(hdr), &seg_buf, &sdu, rx);
    9ba6:	4682      	mov	sl, r0
	seg_rx_reset(rx, false);
    9ba8:	4819      	ldr	r0, [pc, #100]	; (9c10 <bt_mesh_trans_recv+0x358>)
    9baa:	2100      	movs	r1, #0
    9bac:	f7ff fb00 	bl	91b0 <seg_rx_reset>
	return err;
    9bb0:	e096      	b.n	9ce0 <bt_mesh_trans_recv+0x428>
	} else if (rx->len < 1 + APP_MIC_LEN(ASZMIC(hdr))) {
    9bb2:	f899 3001 	ldrb.w	r3, [r9, #1]
    9bb6:	8baa      	ldrh	r2, [r5, #28]
    9bb8:	09db      	lsrs	r3, r3, #7
    9bba:	bf14      	ite	ne
    9bbc:	2309      	movne	r3, #9
    9bbe:	2305      	moveq	r3, #5
    9bc0:	429a      	cmp	r2, r3
    9bc2:	db20      	blt.n	9c06 <bt_mesh_trans_recv+0x34e>
	if (!buf->__buf) {
    9bc4:	4b15      	ldr	r3, [pc, #84]	; (9c1c <bt_mesh_trans_recv+0x364>)
    9bc6:	6899      	ldr	r1, [r3, #8]
    9bc8:	b911      	cbnz	r1, 9bd0 <bt_mesh_trans_recv+0x318>
		buf->__buf = (uint8_t *)buf + sizeof(*buf);
    9bca:	f103 010c 	add.w	r1, r3, #12
    9bce:	6099      	str	r1, [r3, #8]
	buf->data = buf->__buf + reserve_head;
    9bd0:	6899      	ldr	r1, [r3, #8]
    9bd2:	6019      	str	r1, [r3, #0]
	buf->len = 0U;
    9bd4:	2000      	movs	r0, #0
    9bd6:	8098      	strh	r0, [r3, #4]
			&sdu, seg_buf.data, rx->len - APP_MIC_LEN(ASZMIC(hdr)));
    9bd8:	f899 3001 	ldrb.w	r3, [r9, #1]
    9bdc:	09db      	lsrs	r3, r3, #7
    9bde:	bf14      	ite	ne
    9be0:	2308      	movne	r3, #8
    9be2:	2304      	moveq	r3, #4
		net_buf_simple_init_with_data(
    9be4:	af0e      	add	r7, sp, #56	; 0x38
    9be6:	1ad2      	subs	r2, r2, r3
    9be8:	4638      	mov	r0, r7
    9bea:	f013 f9a5 	bl	1cf38 <net_buf_simple_init_with_data>
		err = sdu_recv(net_rx, *hdr, ASZMIC(hdr), &seg_buf, &sdu, rx);
    9bee:	f899 2001 	ldrb.w	r2, [r9, #1]
    9bf2:	f899 1000 	ldrb.w	r1, [r9]
    9bf6:	4b09      	ldr	r3, [pc, #36]	; (9c1c <bt_mesh_trans_recv+0x364>)
    9bf8:	e9cd 7500 	strd	r7, r5, [sp]
    9bfc:	09d2      	lsrs	r2, r2, #7
    9bfe:	4620      	mov	r0, r4
    9c00:	f7ff fa90 	bl	9124 <sdu_recv>
    9c04:	e7cf      	b.n	9ba6 <bt_mesh_trans_recv+0x2ee>
		err = -EINVAL;
    9c06:	f06f 0a15 	mvn.w	sl, #21
    9c0a:	e7cd      	b.n	9ba8 <bt_mesh_trans_recv+0x2f0>
    9c0c:	20001120 	.word	0x20001120
    9c10:	20001188 	.word	0x20001188
    9c14:	20000af0 	.word	0x20000af0
    9c18:	200011b8 	.word	0x200011b8
    9c1c:	200003e8 	.word	0x200003e8
	if (buf->len < 1) {
    9c20:	f1bb 0f00 	cmp.w	fp, #0
    9c24:	f43f ae72 	beq.w	990c <bt_mesh_trans_recv+0x54>
	if (bt_mesh_rpl_check(rx, NULL)) {
    9c28:	2100      	movs	r1, #0
    9c2a:	4620      	mov	r0, r4
    9c2c:	f000 f88e 	bl	9d4c <bt_mesh_rpl_check>
    9c30:	2800      	cmp	r0, #0
    9c32:	f47f ae6b 	bne.w	990c <bt_mesh_trans_recv+0x54>
	hdr = net_buf_simple_pull_u8(buf);
    9c36:	4630      	mov	r0, r6
    9c38:	f013 fa52 	bl	1d0e0 <net_buf_simple_pull_u8>
	if (rx->ctl) {
    9c3c:	7d22      	ldrb	r2, [r4, #20]
    9c3e:	f012 0208 	ands.w	r2, r2, #8
	hdr = net_buf_simple_pull_u8(buf);
    9c42:	4601      	mov	r1, r0
	if (rx->ctl) {
    9c44:	d006      	beq.n	9c54 <bt_mesh_trans_recv+0x39c>
		return ctl_recv(rx, hdr, buf, seq_auth);
    9c46:	ab08      	add	r3, sp, #32
    9c48:	4632      	mov	r2, r6
    9c4a:	4620      	mov	r0, r4
    9c4c:	f7ff fc38 	bl	94c0 <ctl_recv>
	return sdu_recv(rx, hdr, 0, buf, &sdu, NULL);
    9c50:	4682      	mov	sl, r0
    9c52:	e045      	b.n	9ce0 <bt_mesh_trans_recv+0x428>
	if (buf->len < 1 + APP_MIC_LEN(0)) {
    9c54:	88b3      	ldrh	r3, [r6, #4]
    9c56:	2b04      	cmp	r3, #4
    9c58:	f67f ae58 	bls.w	990c <bt_mesh_trans_recv+0x54>
	buf->len -= APP_MIC_LEN(0);
    9c5c:	3b04      	subs	r3, #4
    9c5e:	80b3      	strh	r3, [r6, #4]
	return sdu_recv(rx, hdr, 0, buf, &sdu, NULL);
    9c60:	4b25      	ldr	r3, [pc, #148]	; (9cf8 <bt_mesh_trans_recv+0x440>)
    9c62:	9300      	str	r3, [sp, #0]
    9c64:	9201      	str	r2, [sp, #4]
    9c66:	4633      	mov	r3, r6
    9c68:	4620      	mov	r0, r4
    9c6a:	f7ff fa5b 	bl	9124 <sdu_recv>
    9c6e:	e7ef      	b.n	9c50 <bt_mesh_trans_recv+0x398>
			return 0;
    9c70:	4682      	mov	sl, r0
    9c72:	e03c      	b.n	9cee <bt_mesh_trans_recv+0x436>
		if (rx->seq_auth > *seq_auth) {
    9c74:	458c      	cmp	ip, r1
    9c76:	eb70 0202 	sbcs.w	r2, r0, r2
    9c7a:	f4ff ae47 	bcc.w	990c <bt_mesh_trans_recv+0x54>
	if (rx->hdr != *hdr || rx->seg_n != seg_n) {
    9c7e:	f899 1000 	ldrb.w	r1, [r9]
    9c82:	7faa      	ldrb	r2, [r5, #30]
    9c84:	4291      	cmp	r1, r2
    9c86:	f47f ae41 	bne.w	990c <bt_mesh_trans_recv+0x54>
    9c8a:	7fea      	ldrb	r2, [r5, #31]
    9c8c:	f002 021f 	and.w	r2, r2, #31
    9c90:	4542      	cmp	r2, r8
    9c92:	f47f ae3b 	bne.w	990c <bt_mesh_trans_recv+0x54>
	if (rx->ctl != net_rx->ctl) {
    9c96:	4819      	ldr	r0, [pc, #100]	; (9cfc <bt_mesh_trans_recv+0x444>)
    9c98:	7fc1      	ldrb	r1, [r0, #31]
    9c9a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    9c9e:	f3c1 1c40 	ubfx	ip, r1, #5, #1
    9ca2:	459c      	cmp	ip, r3
    9ca4:	f47f ae32 	bne.w	990c <bt_mesh_trans_recv+0x54>
		if (rx->in_use) {
    9ca8:	064b      	lsls	r3, r1, #25
    9caa:	f53f aed1 	bmi.w	9a50 <bt_mesh_trans_recv+0x198>
		if (rx->block == BLOCK_COMPLETE(rx->seg_n)) {
    9cae:	3201      	adds	r2, #1
    9cb0:	2301      	movs	r3, #1
    9cb2:	6a40      	ldr	r0, [r0, #36]	; 0x24
    9cb4:	4093      	lsls	r3, r2
    9cb6:	3b01      	subs	r3, #1
    9cb8:	4283      	cmp	r3, r0
    9cba:	f47f ae27 	bne.w	990c <bt_mesh_trans_recv+0x54>
			send_ack(net_rx->sub, net_rx->ctx.recv_dst,
    9cbe:	09c9      	lsrs	r1, r1, #7
    9cc0:	e9cd 3101 	strd	r3, r1, [sp, #4]
    9cc4:	ab08      	add	r3, sp, #32
    9cc6:	6820      	ldr	r0, [r4, #0]
    9cc8:	9300      	str	r3, [sp, #0]
    9cca:	8922      	ldrh	r2, [r4, #8]
    9ccc:	7be3      	ldrb	r3, [r4, #15]
    9cce:	8961      	ldrh	r1, [r4, #10]
    9cd0:	f00f fe57 	bl	19982 <send_ack.isra.0>
			if (rpl) {
    9cd4:	9807      	ldr	r0, [sp, #28]
    9cd6:	2800      	cmp	r0, #0
    9cd8:	f47f ae72 	bne.w	99c0 <bt_mesh_trans_recv+0x108>
			return -EALREADY;
    9cdc:	f06f 0a77 	mvn.w	sl, #119	; 0x77
	buf->data = buf->__buf + state->offset;
    9ce0:	68b0      	ldr	r0, [r6, #8]
    9ce2:	9b05      	ldr	r3, [sp, #20]
	buf->len = state->len;
    9ce4:	f8a6 b004 	strh.w	fp, [r6, #4]
	buf->data = buf->__buf + state->offset;
    9ce8:	fa10 f083 	uxtah	r0, r0, r3
    9cec:	6030      	str	r0, [r6, #0]
						  seg_count, buf);
		}
	}

	return err;
}
    9cee:	4650      	mov	r0, sl
    9cf0:	b015      	add	sp, #84	; 0x54
    9cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9cf6:	bf00      	nop
    9cf8:	200003dc 	.word	0x200003dc
    9cfc:	20001188 	.word	0x20001188

00009d00 <bt_mesh_rx_reset>:
	int i;

	BT_DBG("");

	for (i = 0; i < ARRAY_SIZE(seg_rx); i++) {
		seg_rx_reset(&seg_rx[i], true);
    9d00:	4801      	ldr	r0, [pc, #4]	; (9d08 <bt_mesh_rx_reset+0x8>)
    9d02:	2101      	movs	r1, #1
    9d04:	f7ff ba54 	b.w	91b0 <seg_rx_reset>
    9d08:	20001188 	.word	0x20001188

00009d0c <bt_mesh_trans_reset>:
{
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_VA_PENDING);
}

void bt_mesh_trans_reset(void)
{
    9d0c:	b508      	push	{r3, lr}
	int i;

	bt_mesh_rx_reset();
    9d0e:	f7ff fff7 	bl	9d00 <bt_mesh_rx_reset>

	BT_DBG("");

	for (i = 0; i < ARRAY_SIZE(seg_tx); i++) {
		seg_tx_reset(&seg_tx[i]);
    9d12:	4803      	ldr	r0, [pc, #12]	; (9d20 <bt_mesh_trans_reset+0x14>)
    9d14:	f7ff fa76 	bl	9204 <seg_tx_reset>
	bt_mesh_rpl_clear();

	if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		store_va_label();
	}
}
    9d18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_mesh_rpl_clear();
    9d1c:	f000 b854 	b.w	9dc8 <bt_mesh_rpl_clear>
    9d20:	200011e8 	.word	0x200011e8

00009d24 <bt_mesh_trans_init>:

void bt_mesh_trans_init(void)
{
    9d24:	b508      	push	{r3, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(seg_tx); i++) {
		k_work_init_delayable(&seg_tx[i].retransmit, seg_retransmit);
    9d26:	4905      	ldr	r1, [pc, #20]	; (9d3c <bt_mesh_trans_init+0x18>)
    9d28:	4805      	ldr	r0, [pc, #20]	; (9d40 <bt_mesh_trans_init+0x1c>)
    9d2a:	f014 fd02 	bl	1e732 <k_work_init_delayable>
	}

	for (i = 0; i < ARRAY_SIZE(seg_rx); i++) {
		k_work_init_delayable(&seg_rx[i].ack, seg_ack);
	}
}
    9d2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		k_work_init_delayable(&seg_rx[i].ack, seg_ack);
    9d32:	4904      	ldr	r1, [pc, #16]	; (9d44 <bt_mesh_trans_init+0x20>)
    9d34:	4804      	ldr	r0, [pc, #16]	; (9d48 <bt_mesh_trans_init+0x24>)
    9d36:	f014 bcfc 	b.w	1e732 <k_work_init_delayable>
    9d3a:	bf00      	nop
    9d3c:	00019877 	.word	0x00019877
    9d40:	20001218 	.word	0x20001218
    9d44:	00019a19 	.word	0x00019a19
    9d48:	200011b8 	.word	0x200011b8

00009d4c <bt_mesh_rpl_check>:
 * updated (needed for segmented messages), whereas if a NULL match is given
 * the RPL is immediately updated (used for unsegmented messages).
 */
bool bt_mesh_rpl_check(struct bt_mesh_net_rx *rx,
		struct bt_mesh_rpl **match)
{
    9d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i;

	/* Don't bother checking messages from ourselves */
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
    9d4e:	7d06      	ldrb	r6, [r0, #20]
    9d50:	f006 0330 	and.w	r3, r6, #48	; 0x30
    9d54:	2b10      	cmp	r3, #16
{
    9d56:	4605      	mov	r5, r0
    9d58:	460c      	mov	r4, r1
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
    9d5a:	d00c      	beq.n	9d76 <bt_mesh_rpl_check+0x2a>
		return false;
	}

	/* The RPL is used only for the local node */
	if (!rx->local_match) {
    9d5c:	f016 0040 	ands.w	r0, r6, #64	; 0x40
    9d60:	d00a      	beq.n	9d78 <bt_mesh_rpl_check+0x2c>
    9d62:	4818      	ldr	r0, [pc, #96]	; (9dc4 <bt_mesh_rpl_check+0x78>)
		return false;
	}

	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
    9d64:	2200      	movs	r2, #0
    9d66:	4601      	mov	r1, r0
		struct bt_mesh_rpl *rpl = &replay_list[i];

		/* Empty slot */
		if (!rpl->src) {
    9d68:	f831 7032 	ldrh.w	r7, [r1, r2, lsl #3]
    9d6c:	f3c7 030e 	ubfx	r3, r7, #0, #15
    9d70:	b91b      	cbnz	r3, 9d7a <bt_mesh_rpl_check+0x2e>
				return true;
			}

			if ((!rx->old_iv && rpl->old_iv) ||
			    rpl->seq < rx->seq) {
				if (match) {
    9d72:	b1ec      	cbz	r4, 9db0 <bt_mesh_rpl_check+0x64>
					*match = rpl;
    9d74:	6020      	str	r0, [r4, #0]
				} else {
					bt_mesh_rpl_update(rpl, rx);
				}

				return false;
    9d76:	2000      	movs	r0, #0
		}
	}

	BT_ERR("RPL is full!");
	return true;
}
    9d78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (rpl->src == rx->ctx.addr) {
    9d7a:	892b      	ldrh	r3, [r5, #8]
    9d7c:	f3c7 070e 	ubfx	r7, r7, #0, #15
    9d80:	429f      	cmp	r7, r3
    9d82:	d119      	bne.n	9db8 <bt_mesh_rpl_check+0x6c>
			if (rx->old_iv && !rpl->old_iv) {
    9d84:	00d7      	lsls	r7, r2, #3
    9d86:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
    9d8a:	f992 3001 	ldrsb.w	r3, [r2, #1]
    9d8e:	07f2      	lsls	r2, r6, #31
    9d90:	d503      	bpl.n	9d9a <bt_mesh_rpl_check+0x4e>
    9d92:	2b00      	cmp	r3, #0
    9d94:	db03      	blt.n	9d9e <bt_mesh_rpl_check+0x52>
				return true;
    9d96:	2001      	movs	r0, #1
    9d98:	e7ee      	b.n	9d78 <bt_mesh_rpl_check+0x2c>
			if ((!rx->old_iv && rpl->old_iv) ||
    9d9a:	2b00      	cmp	r3, #0
    9d9c:	dbe9      	blt.n	9d72 <bt_mesh_rpl_check+0x26>
			    rpl->seq < rx->seq) {
    9d9e:	4439      	add	r1, r7
    9da0:	790a      	ldrb	r2, [r1, #4]
    9da2:	884b      	ldrh	r3, [r1, #2]
    9da4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
			if ((!rx->old_iv && rpl->old_iv) ||
    9da8:	692a      	ldr	r2, [r5, #16]
    9daa:	4293      	cmp	r3, r2
    9dac:	d2f3      	bcs.n	9d96 <bt_mesh_rpl_check+0x4a>
    9dae:	e7e0      	b.n	9d72 <bt_mesh_rpl_check+0x26>
					bt_mesh_rpl_update(rpl, rx);
    9db0:	4629      	mov	r1, r5
    9db2:	f00f fe95 	bl	19ae0 <bt_mesh_rpl_update>
    9db6:	e7de      	b.n	9d76 <bt_mesh_rpl_check+0x2a>
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
    9db8:	3201      	adds	r2, #1
    9dba:	2a0a      	cmp	r2, #10
    9dbc:	f100 0008 	add.w	r0, r0, #8
    9dc0:	d1d2      	bne.n	9d68 <bt_mesh_rpl_check+0x1c>
    9dc2:	e7e8      	b.n	9d96 <bt_mesh_rpl_check+0x4a>
    9dc4:	20001248 	.word	0x20001248

00009dc8 <bt_mesh_rpl_clear>:
	BT_DBG("");

	if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		schedule_rpl_clear();
	} else {
		(void)memset(replay_list, 0, sizeof(replay_list));
    9dc8:	4802      	ldr	r0, [pc, #8]	; (9dd4 <bt_mesh_rpl_clear+0xc>)
    9dca:	2250      	movs	r2, #80	; 0x50
    9dcc:	2100      	movs	r1, #0
    9dce:	f00d ba4c 	b.w	1726a <memset>
    9dd2:	bf00      	nop
    9dd4:	20001248 	.word	0x20001248

00009dd8 <bt_mesh_rpl_reset>:

	return NULL;
}

void bt_mesh_rpl_reset(void)
{
    9dd8:	b570      	push	{r4, r5, r6, lr}
    9dda:	4d0f      	ldr	r5, [pc, #60]	; (9e18 <bt_mesh_rpl_reset+0x40>)
	int i;

	/* Discard "old old" IV Index entries from RPL and flag
	 * any other ones (which are valid) as old.
	 */
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
    9ddc:	2400      	movs	r4, #0
    9dde:	462e      	mov	r6, r5
		struct bt_mesh_rpl *rpl = &replay_list[i];

		if (rpl->src) {
    9de0:	f836 3034 	ldrh.w	r3, [r6, r4, lsl #3]
    9de4:	f3c3 030e 	ubfx	r3, r3, #0, #15
    9de8:	b153      	cbz	r3, 9e00 <bt_mesh_rpl_reset+0x28>
			if (rpl->old_iv) {
    9dea:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
    9dee:	f993 2001 	ldrsb.w	r2, [r3, #1]
    9df2:	2a00      	cmp	r2, #0
    9df4:	da0a      	bge.n	9e0c <bt_mesh_rpl_reset+0x34>
				if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
					clear_rpl(rpl);
				} else {
					(void)memset(rpl, 0, sizeof(*rpl));
    9df6:	2208      	movs	r2, #8
    9df8:	2100      	movs	r1, #0
    9dfa:	4628      	mov	r0, r5
    9dfc:	f00d fa35 	bl	1726a <memset>
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
    9e00:	3401      	adds	r4, #1
    9e02:	2c0a      	cmp	r4, #10
    9e04:	f105 0508 	add.w	r5, r5, #8
    9e08:	d1ea      	bne.n	9de0 <bt_mesh_rpl_reset+0x8>
					schedule_rpl_store(rpl, true);
				}
			}
		}
	}
}
    9e0a:	bd70      	pop	{r4, r5, r6, pc}
				rpl->old_iv = true;
    9e0c:	785a      	ldrb	r2, [r3, #1]
    9e0e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    9e12:	705a      	strb	r2, [r3, #1]
				if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
    9e14:	e7f4      	b.n	9e00 <bt_mesh_rpl_reset+0x28>
    9e16:	bf00      	nop
    9e18:	20001248 	.word	0x20001248

00009e1c <sub_end>:
		}
	}
}

static void sub_end(struct k_work *work)
{
    9e1c:	b570      	push	{r4, r5, r6, lr}
	sub.remaining = 0;
    9e1e:	4d07      	ldr	r5, [pc, #28]	; (9e3c <sub_end+0x20>)
	STRUCT_SECTION_FOREACH(bt_mesh_hb_cb, cb) {
    9e20:	4c07      	ldr	r4, [pc, #28]	; (9e40 <sub_end+0x24>)
    9e22:	4e08      	ldr	r6, [pc, #32]	; (9e44 <sub_end+0x28>)
	sub.remaining = 0;
    9e24:	2300      	movs	r3, #0
    9e26:	606b      	str	r3, [r5, #4]
	STRUCT_SECTION_FOREACH(bt_mesh_hb_cb, cb) {
    9e28:	42b4      	cmp	r4, r6
    9e2a:	d300      	bcc.n	9e2e <sub_end+0x12>
	notify_sub_end();
}
    9e2c:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->sub_end) {
    9e2e:	6863      	ldr	r3, [r4, #4]
    9e30:	b10b      	cbz	r3, 9e36 <sub_end+0x1a>
			cb->sub_end(&sub);
    9e32:	4628      	mov	r0, r5
    9e34:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_mesh_hb_cb, cb) {
    9e36:	3408      	adds	r4, #8
    9e38:	e7f6      	b.n	9e28 <sub_end+0xc>
    9e3a:	bf00      	nop
    9e3c:	20001ab0 	.word	0x20001ab0
    9e40:	0001f17c 	.word	0x0001f17c
    9e44:	0001f17c 	.word	0x0001f17c

00009e48 <hb_publish_end_cb>:
{
    9e48:	b570      	push	{r4, r5, r6, lr}
	if (pub.period && pub.count > 1) {
    9e4a:	4d11      	ldr	r5, [pc, #68]	; (9e90 <hb_publish_end_cb+0x48>)
    9e4c:	68ec      	ldr	r4, [r5, #12]
    9e4e:	b1b4      	cbz	r4, 9e7e <hb_publish_end_cb+0x36>
    9e50:	886b      	ldrh	r3, [r5, #2]
    9e52:	2b01      	cmp	r3, #1
    9e54:	d913      	bls.n	9e7e <hb_publish_end_cb+0x36>
		k_work_reschedule(&pub_timer, K_SECONDS(pub.period));
    9e56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    9e5a:	435c      	muls	r4, r3
    9e5c:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    9e60:	f240 30e7 	movw	r0, #999	; 0x3e7
    9e64:	2100      	movs	r1, #0
    9e66:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    9e6a:	2300      	movs	r3, #0
    9e6c:	fbe4 0106 	umlal	r0, r1, r4, r6
    9e70:	f7f6 fda4 	bl	9bc <__aeabi_uldivmod>
    9e74:	4602      	mov	r2, r0
    9e76:	460b      	mov	r3, r1
    9e78:	4806      	ldr	r0, [pc, #24]	; (9e94 <hb_publish_end_cb+0x4c>)
    9e7a:	f00b fe25 	bl	15ac8 <k_work_reschedule>
	if (pub.count != 0xffff) {
    9e7e:	886b      	ldrh	r3, [r5, #2]
    9e80:	f64f 72ff 	movw	r2, #65535	; 0xffff
    9e84:	4293      	cmp	r3, r2
		pub.count--;
    9e86:	bf1c      	itt	ne
    9e88:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
    9e8c:	806b      	strhne	r3, [r5, #2]
}
    9e8e:	bd70      	pop	{r4, r5, r6, pc}
    9e90:	20001aa0 	.word	0x20001aa0
    9e94:	20001298 	.word	0x20001298

00009e98 <heartbeat_send.constprop.0>:

static int heartbeat_send(const struct bt_mesh_send_cb *cb, void *cb_data)
    9e98:	b530      	push	{r4, r5, lr}
	struct __packed {
		uint8_t init_ttl;
		uint16_t feat;
	} hb;
	struct bt_mesh_msg_ctx ctx = {
		.net_idx = pub.net_idx,
    9e9a:	4c26      	ldr	r4, [pc, #152]	; (9f34 <heartbeat_send.constprop.0+0x9c>)
static int heartbeat_send(const struct bt_mesh_send_cb *cb, void *cb_data)
    9e9c:	b08b      	sub	sp, #44	; 0x2c
	struct bt_mesh_msg_ctx ctx = {
    9e9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    9ea2:	f8ad 2012 	strh.w	r2, [sp, #18]
    9ea6:	8822      	ldrh	r2, [r4, #0]
    9ea8:	f8ad 2014 	strh.w	r2, [sp, #20]
    9eac:	2300      	movs	r3, #0
    9eae:	7922      	ldrb	r2, [r4, #4]
    9eb0:	f88d 201b 	strb.w	r2, [sp, #27]
static int heartbeat_send(const struct bt_mesh_send_cb *cb, void *cb_data)
    9eb4:	4605      	mov	r5, r0
		.net_idx = pub.net_idx,
    9eb6:	8920      	ldrh	r0, [r4, #8]
	struct bt_mesh_msg_ctx ctx = {
    9eb8:	f8cd 3016 	str.w	r3, [sp, #22]
		.app_idx = BT_MESH_KEY_UNUSED,
		.addr = pub.dst,
		.send_ttl = pub.ttl,
	};
	struct bt_mesh_net_tx tx = {
    9ebc:	e9cd 3307 	strd	r3, r3, [sp, #28]
	struct bt_mesh_msg_ctx ctx = {
    9ec0:	f88d 301a 	strb.w	r3, [sp, #26]
	struct bt_mesh_net_tx tx = {
    9ec4:	9309      	str	r3, [sp, #36]	; 0x24
	struct bt_mesh_msg_ctx ctx = {
    9ec6:	f8ad 0010 	strh.w	r0, [sp, #16]
		.sub = bt_mesh_subnet_get(pub.net_idx),
    9eca:	f7fe fecb 	bl	8c64 <bt_mesh_subnet_get>
	struct bt_mesh_net_tx tx = {
    9ece:	ab04      	add	r3, sp, #16
    9ed0:	9308      	str	r3, [sp, #32]
    9ed2:	9007      	str	r0, [sp, #28]
		.ctx = &ctx,
		.src = bt_mesh_primary_addr(),
    9ed4:	f000 fbe8 	bl	a6a8 <bt_mesh_primary_addr>
	struct bt_mesh_net_tx tx = {
    9ed8:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
		.xmit = bt_mesh_net_transmit_get(),
    9edc:	f7fd ff6a 	bl	7db4 <bt_mesh_net_transmit_get>
	struct bt_mesh_net_tx tx = {
    9ee0:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
	};

	/* Do nothing if heartbeat publication is not enabled or the subnet is
	 * removed.
	 */
	if (!tx.sub || pub.dst == BT_MESH_ADDR_UNASSIGNED) {
    9ee4:	9807      	ldr	r0, [sp, #28]
    9ee6:	b310      	cbz	r0, 9f2e <heartbeat_send.constprop.0+0x96>
    9ee8:	8820      	ldrh	r0, [r4, #0]
    9eea:	b300      	cbz	r0, 9f2e <heartbeat_send.constprop.0+0x96>
		return 0;
	}

	hb.init_ttl = pub.ttl;
    9eec:	7923      	ldrb	r3, [r4, #4]
    9eee:	f88d 300c 	strb.w	r3, [sp, #12]

	if (bt_mesh_relay_get() == BT_MESH_RELAY_ENABLED) {
    9ef2:	f7fd ff9f 	bl	7e34 <bt_mesh_relay_get>
	uint16_t feat = 0U;
    9ef6:	1e43      	subs	r3, r0, #1
    9ef8:	425c      	negs	r4, r3
    9efa:	415c      	adcs	r4, r3
		feat |= BT_MESH_FEAT_RELAY;
	}

	if (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED) {
    9efc:	f00f fa66 	bl	193cc <bt_mesh_gatt_proxy_get>
    9f00:	2801      	cmp	r0, #1
		feat |= BT_MESH_FEAT_PROXY;
    9f02:	bf08      	it	eq
    9f04:	f044 0402 	orreq.w	r4, r4, #2
	}

	if (bt_mesh_friend_get() == BT_MESH_FRIEND_ENABLED) {
    9f08:	f00f fa65 	bl	193d6 <bt_mesh_friend_get>
    9f0c:	2801      	cmp	r0, #1

	hb.feat = sys_cpu_to_be16(feat);

	BT_DBG("InitTTL %u feat 0x%04x", pub.ttl, feat);

	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_HEARTBEAT, &hb, sizeof(hb),
    9f0e:	f04f 0300 	mov.w	r3, #0
		feat |= BT_MESH_FEAT_FRIEND;
    9f12:	bf08      	it	eq
    9f14:	f044 0404 	orreq.w	r4, r4, #4
	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_HEARTBEAT, &hb, sizeof(hb),
    9f18:	e9cd 5300 	strd	r5, r3, [sp]
	hb.feat = sys_cpu_to_be16(feat);
    9f1c:	0224      	lsls	r4, r4, #8
	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_HEARTBEAT, &hb, sizeof(hb),
    9f1e:	2303      	movs	r3, #3
    9f20:	aa03      	add	r2, sp, #12
    9f22:	210a      	movs	r1, #10
    9f24:	a807      	add	r0, sp, #28
	hb.feat = sys_cpu_to_be16(feat);
    9f26:	f8ad 400d 	strh.w	r4, [sp, #13]
	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_HEARTBEAT, &hb, sizeof(hb),
    9f2a:	f00f fce9 	bl	19900 <bt_mesh_ctl_send>
				cb, cb_data);
}
    9f2e:	b00b      	add	sp, #44	; 0x2c
    9f30:	bd30      	pop	{r4, r5, pc}
    9f32:	bf00      	nop
    9f34:	20001aa0 	.word	0x20001aa0

00009f38 <hb_publish>:
		hb_publish_end_cb(err, cb_data);
	}
}

static void hb_publish(struct k_work *work)
{
    9f38:	b510      	push	{r4, lr}
	int err;

	BT_DBG("hb_pub.count: %u", pub.count);

	/* Fast exit if disabled or expired */
	if (pub.period == 0U || pub.count == 0U) {
    9f3a:	4c0a      	ldr	r4, [pc, #40]	; (9f64 <hb_publish+0x2c>)
    9f3c:	68e3      	ldr	r3, [r4, #12]
    9f3e:	b133      	cbz	r3, 9f4e <hb_publish+0x16>
    9f40:	8863      	ldrh	r3, [r4, #2]
    9f42:	b123      	cbz	r3, 9f4e <hb_publish+0x16>
		return;
	}

	sub = bt_mesh_subnet_get(pub.net_idx);
    9f44:	8920      	ldrh	r0, [r4, #8]
    9f46:	f7fe fe8d 	bl	8c64 <bt_mesh_subnet_get>
	if (!sub) {
    9f4a:	b908      	cbnz	r0, 9f50 <hb_publish+0x18>
		BT_ERR("No matching subnet for idx 0x%02x", pub.net_idx);
		pub.dst = BT_MESH_ADDR_UNASSIGNED;
    9f4c:	8020      	strh	r0, [r4, #0]

	err = heartbeat_send(&publish_cb, NULL);
	if (err) {
		hb_publish_end_cb(err, NULL);
	}
}
    9f4e:	bd10      	pop	{r4, pc}
	err = heartbeat_send(&publish_cb, NULL);
    9f50:	4805      	ldr	r0, [pc, #20]	; (9f68 <hb_publish+0x30>)
    9f52:	f7ff ffa1 	bl	9e98 <heartbeat_send.constprop.0>
	if (err) {
    9f56:	2800      	cmp	r0, #0
    9f58:	d0f9      	beq.n	9f4e <hb_publish+0x16>
}
    9f5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		hb_publish_end_cb(err, NULL);
    9f5e:	2100      	movs	r1, #0
    9f60:	f7ff bf72 	b.w	9e48 <hb_publish_end_cb>
    9f64:	20001aa0 	.word	0x20001aa0
    9f68:	0001f6a4 	.word	0x0001f6a4

00009f6c <bt_mesh_hb_recv>:
int bt_mesh_hb_recv(struct bt_mesh_net_rx *rx, struct net_buf_simple *buf)
{
	uint8_t init_ttl, hops;
	uint16_t feat;

	if (buf->len < 3) {
    9f6c:	888b      	ldrh	r3, [r1, #4]
    9f6e:	2b02      	cmp	r3, #2
{
    9f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9f74:	4607      	mov	r7, r0
    9f76:	460d      	mov	r5, r1
	if (buf->len < 3) {
    9f78:	d949      	bls.n	a00e <bt_mesh_hb_recv+0xa2>
		BT_ERR("Too short heartbeat message");
		return -EINVAL;
	}

	init_ttl = (net_buf_simple_pull_u8(buf) & 0x7f);
    9f7a:	4608      	mov	r0, r1
    9f7c:	f013 f8b0 	bl	1d0e0 <net_buf_simple_pull_u8>
	feat = net_buf_simple_pull_be16(buf);

	hops = (init_ttl - rx->ctx.recv_ttl + 1);

	if (rx->ctx.addr != sub.src || rx->ctx.recv_dst != sub.dst) {
    9f80:	4e24      	ldr	r6, [pc, #144]	; (a014 <bt_mesh_hb_recv+0xa8>)
	init_ttl = (net_buf_simple_pull_u8(buf) & 0x7f);
    9f82:	4604      	mov	r4, r0
	feat = net_buf_simple_pull_be16(buf);
    9f84:	4628      	mov	r0, r5
    9f86:	f013 f8bb 	bl	1d100 <net_buf_simple_pull_be16>
	if (rx->ctx.addr != sub.src || rx->ctx.recv_dst != sub.dst) {
    9f8a:	68ba      	ldr	r2, [r7, #8]
    9f8c:	68b3      	ldr	r3, [r6, #8]
    9f8e:	429a      	cmp	r2, r3
	feat = net_buf_simple_pull_be16(buf);
    9f90:	4605      	mov	r5, r0
	if (rx->ctx.addr != sub.src || rx->ctx.recv_dst != sub.dst) {
    9f92:	d002      	beq.n	9f9a <bt_mesh_hb_recv+0x2e>
		BT_DBG("No subscription for received heartbeat");
		return 0;
    9f94:	2000      	movs	r0, #0
	       (hops == 1U) ? "" : "s", feat);

	notify_recv(hops, feat);

	return 0;
}
    9f96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return k_work_delayable_busy_get(dwork) != 0;
    9f9a:	481f      	ldr	r0, [pc, #124]	; (a018 <bt_mesh_hb_recv+0xac>)
	hops = (init_ttl - rx->ctx.recv_ttl + 1);
    9f9c:	7b7f      	ldrb	r7, [r7, #13]
    9f9e:	f014 fbd4 	bl	1e74a <k_work_delayable_busy_get>
	if (!k_work_delayable_is_pending(&sub_timer)) {
    9fa2:	2800      	cmp	r0, #0
    9fa4:	d0f6      	beq.n	9f94 <bt_mesh_hb_recv+0x28>
	init_ttl = (net_buf_simple_pull_u8(buf) & 0x7f);
    9fa6:	f004 047f 	and.w	r4, r4, #127	; 0x7f
	hops = (init_ttl - rx->ctx.recv_ttl + 1);
    9faa:	f1c7 0701 	rsb	r7, r7, #1
	sub.min_hops = MIN(sub.min_hops, hops);
    9fae:	7bb3      	ldrb	r3, [r6, #14]
	hops = (init_ttl - rx->ctx.recv_ttl + 1);
    9fb0:	443c      	add	r4, r7
    9fb2:	b2e4      	uxtb	r4, r4
	sub.min_hops = MIN(sub.min_hops, hops);
    9fb4:	42a3      	cmp	r3, r4
    9fb6:	bf28      	it	cs
    9fb8:	4623      	movcs	r3, r4
    9fba:	73b3      	strb	r3, [r6, #14]
	sub.max_hops = MAX(sub.max_hops, hops);
    9fbc:	7bf3      	ldrb	r3, [r6, #15]
    9fbe:	42a3      	cmp	r3, r4
    9fc0:	bf38      	it	cc
    9fc2:	4623      	movcc	r3, r4
    9fc4:	73f3      	strb	r3, [r6, #15]
	if (sub.count < 0xffff) {
    9fc6:	89b3      	ldrh	r3, [r6, #12]
    9fc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    9fcc:	4293      	cmp	r3, r2
		sub.count++;
    9fce:	bf1c      	itt	ne
    9fd0:	3301      	addne	r3, #1
    9fd2:	81b3      	strhne	r3, [r6, #12]
	if (sub.dst == BT_MESH_ADDR_UNASSIGNED) {
    9fd4:	8973      	ldrh	r3, [r6, #10]
    9fd6:	b15b      	cbz	r3, 9ff0 <bt_mesh_hb_recv+0x84>
	return z_timeout_remaining(&dwork->timeout);
    9fd8:	4810      	ldr	r0, [pc, #64]	; (a01c <bt_mesh_hb_recv+0xb0>)
    9fda:	f014 fcfa 	bl	1e9d2 <z_timeout_remaining>
			return (uint32_t)((t * to_hz + off) / from_hz);
    9fde:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    9fe2:	fba0 3002 	umull	r3, r0, r0, r2
    9fe6:	0bdb      	lsrs	r3, r3, #15
    9fe8:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
	return rem_ms / MSEC_PER_SEC;
    9fec:	fbb3 f3f2 	udiv	r3, r3, r2
	sub.remaining = sub_remaining();
    9ff0:	6073      	str	r3, [r6, #4]
	STRUCT_SECTION_FOREACH(bt_mesh_hb_cb, cb) {
    9ff2:	4f0b      	ldr	r7, [pc, #44]	; (a020 <bt_mesh_hb_recv+0xb4>)
    9ff4:	4e0b      	ldr	r6, [pc, #44]	; (a024 <bt_mesh_hb_recv+0xb8>)
			cb->recv(&sub, hops, feat);
    9ff6:	f8df 801c 	ldr.w	r8, [pc, #28]	; a014 <bt_mesh_hb_recv+0xa8>
	STRUCT_SECTION_FOREACH(bt_mesh_hb_cb, cb) {
    9ffa:	42be      	cmp	r6, r7
    9ffc:	d2ca      	bcs.n	9f94 <bt_mesh_hb_recv+0x28>
		if (cb->recv) {
    9ffe:	6833      	ldr	r3, [r6, #0]
    a000:	b11b      	cbz	r3, a00a <bt_mesh_hb_recv+0x9e>
			cb->recv(&sub, hops, feat);
    a002:	462a      	mov	r2, r5
    a004:	4621      	mov	r1, r4
    a006:	4640      	mov	r0, r8
    a008:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_mesh_hb_cb, cb) {
    a00a:	3608      	adds	r6, #8
    a00c:	e7f5      	b.n	9ffa <bt_mesh_hb_recv+0x8e>
		return -EINVAL;
    a00e:	f06f 0015 	mvn.w	r0, #21
    a012:	e7c0      	b.n	9f96 <bt_mesh_hb_recv+0x2a>
    a014:	20001ab0 	.word	0x20001ab0
    a018:	200012c8 	.word	0x200012c8
    a01c:	200012d8 	.word	0x200012d8
    a020:	0001f17c 	.word	0x0001f17c
    a024:	0001f17c 	.word	0x0001f17c

0000a028 <bt_mesh_hb_pub_set>:
	 */
	(void)k_work_cancel_delayable(&pub_timer);
}

uint8_t bt_mesh_hb_pub_set(struct bt_mesh_hb_pub *new_pub)
{
    a028:	b538      	push	{r3, r4, r5, lr}
	if (!new_pub || new_pub->dst == BT_MESH_ADDR_UNASSIGNED) {
    a02a:	4604      	mov	r4, r0
    a02c:	b108      	cbz	r0, a032 <bt_mesh_hb_pub_set+0xa>
    a02e:	8803      	ldrh	r3, [r0, #0]
    a030:	b94b      	cbnz	r3, a046 <bt_mesh_hb_pub_set+0x1e>
	pub.dst = BT_MESH_ADDR_UNASSIGNED;
    a032:	4b11      	ldr	r3, [pc, #68]	; (a078 <bt_mesh_hb_pub_set+0x50>)
	(void)k_work_cancel_delayable(&pub_timer);
    a034:	4811      	ldr	r0, [pc, #68]	; (a07c <bt_mesh_hb_pub_set+0x54>)
	pub.dst = BT_MESH_ADDR_UNASSIGNED;
    a036:	2400      	movs	r4, #0
    a038:	601c      	str	r4, [r3, #0]
	pub.ttl = 0U;
    a03a:	711c      	strb	r4, [r3, #4]
	pub.period = 0U;
    a03c:	60dc      	str	r4, [r3, #12]
	(void)k_work_cancel_delayable(&pub_timer);
    a03e:	f014 fb86 	bl	1e74e <k_work_cancel_delayable>
    a042:	2000      	movs	r0, #0
		bt_mesh_settings_store_schedule(
					BT_MESH_SETTINGS_HB_PUB_PENDING);
	}

	return STATUS_SUCCESS;
}
    a044:	bd38      	pop	{r3, r4, r5, pc}
	if (!bt_mesh_subnet_get(new_pub->net_idx)) {
    a046:	8900      	ldrh	r0, [r0, #8]
    a048:	f7fe fe0c 	bl	8c64 <bt_mesh_subnet_get>
    a04c:	b190      	cbz	r0, a074 <bt_mesh_hb_pub_set+0x4c>
	new_pub->feat &= BT_MESH_FEAT_SUPPORTED;
    a04e:	88e3      	ldrh	r3, [r4, #6]
	pub = *new_pub;
    a050:	4d09      	ldr	r5, [pc, #36]	; (a078 <bt_mesh_hb_pub_set+0x50>)
	new_pub->feat &= BT_MESH_FEAT_SUPPORTED;
    a052:	f003 030f 	and.w	r3, r3, #15
    a056:	80e3      	strh	r3, [r4, #6]
	pub = *new_pub;
    a058:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    a05c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	if (!bt_mesh_is_provisioned()) {
    a060:	f7fd fdf0 	bl	7c44 <bt_mesh_is_provisioned>
    a064:	2800      	cmp	r0, #0
    a066:	d0ec      	beq.n	a042 <bt_mesh_hb_pub_set+0x1a>
	k_work_reschedule(&pub_timer, K_NO_WAIT);
    a068:	2200      	movs	r2, #0
    a06a:	2300      	movs	r3, #0
    a06c:	4803      	ldr	r0, [pc, #12]	; (a07c <bt_mesh_hb_pub_set+0x54>)
    a06e:	f00b fd2b 	bl	15ac8 <k_work_reschedule>
	return STATUS_SUCCESS;
    a072:	e7e6      	b.n	a042 <bt_mesh_hb_pub_set+0x1a>
		return STATUS_INVALID_NETKEY;
    a074:	2004      	movs	r0, #4
    a076:	e7e5      	b.n	a044 <bt_mesh_hb_pub_set+0x1c>
    a078:	20001aa0 	.word	0x20001aa0
    a07c:	20001298 	.word	0x20001298

0000a080 <bt_mesh_hb_pub_get>:

void bt_mesh_hb_pub_get(struct bt_mesh_hb_pub *get)
{
	*get = pub;
    a080:	4b03      	ldr	r3, [pc, #12]	; (a090 <bt_mesh_hb_pub_get+0x10>)
{
    a082:	b510      	push	{r4, lr}
    a084:	4604      	mov	r4, r0
	*get = pub;
    a086:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    a088:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    a08c:	bd10      	pop	{r4, pc}
    a08e:	bf00      	nop
    a090:	20001aa0 	.word	0x20001aa0

0000a094 <bt_mesh_hb_sub_set>:

uint8_t bt_mesh_hb_sub_set(uint16_t src, uint16_t dst, uint32_t period)
{
	if (src != BT_MESH_ADDR_UNASSIGNED && !BT_MESH_ADDR_IS_UNICAST(src)) {
    a094:	0403      	lsls	r3, r0, #16
{
    a096:	b570      	push	{r4, r5, r6, lr}
    a098:	4606      	mov	r6, r0
    a09a:	460c      	mov	r4, r1
    a09c:	4615      	mov	r5, r2
	if (src != BT_MESH_ADDR_UNASSIGNED && !BT_MESH_ADDR_IS_UNICAST(src)) {
    a09e:	d501      	bpl.n	a0a4 <bt_mesh_hb_sub_set+0x10>
		BT_WARN("Prohibited source address");
		return STATUS_INVALID_ADDRESS;
    a0a0:	2001      	movs	r0, #1
	 * configuration disables the subscription.
	 */
	k_work_reschedule(&sub_timer, K_SECONDS(sub.period));

	return STATUS_SUCCESS;
}
    a0a2:	bd70      	pop	{r4, r5, r6, pc}
	if (BT_MESH_ADDR_IS_VIRTUAL(dst) || BT_MESH_ADDR_IS_RFU(dst) ||
    a0a4:	f481 4300 	eor.w	r3, r1, #32768	; 0x8000
    a0a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    a0ac:	d3f8      	bcc.n	a0a0 <bt_mesh_hb_sub_set+0xc>
    a0ae:	f501 7380 	add.w	r3, r1, #256	; 0x100
    a0b2:	b29b      	uxth	r3, r3
    a0b4:	2bfb      	cmp	r3, #251	; 0xfb
    a0b6:	d9f3      	bls.n	a0a0 <bt_mesh_hb_sub_set+0xc>
    a0b8:	b20b      	sxth	r3, r1
    a0ba:	2b00      	cmp	r3, #0
    a0bc:	dc04      	bgt.n	a0c8 <bt_mesh_hb_sub_set+0x34>
	if (period > (1U << 16)) {
    a0be:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
    a0c2:	d906      	bls.n	a0d2 <bt_mesh_hb_sub_set+0x3e>
		return STATUS_CANNOT_SET;
    a0c4:	200f      	movs	r0, #15
    a0c6:	e7ec      	b.n	a0a2 <bt_mesh_hb_sub_set+0xe>
	    (BT_MESH_ADDR_IS_UNICAST(dst) && dst != bt_mesh_primary_addr())) {
    a0c8:	f000 faee 	bl	a6a8 <bt_mesh_primary_addr>
    a0cc:	42a0      	cmp	r0, r4
    a0ce:	d1e7      	bne.n	a0a0 <bt_mesh_hb_sub_set+0xc>
    a0d0:	e7f5      	b.n	a0be <bt_mesh_hb_sub_set+0x2a>
	if (src == BT_MESH_ADDR_UNASSIGNED || dst == BT_MESH_ADDR_UNASSIGNED) {
    a0d2:	4b13      	ldr	r3, [pc, #76]	; (a120 <bt_mesh_hb_sub_set+0x8c>)
    a0d4:	b106      	cbz	r6, a0d8 <bt_mesh_hb_sub_set+0x44>
    a0d6:	b9dc      	cbnz	r4, a110 <bt_mesh_hb_sub_set+0x7c>
		sub.src = BT_MESH_ADDR_UNASSIGNED;
    a0d8:	2200      	movs	r2, #0
		sub.count = 0U;
    a0da:	e9c3 2202 	strd	r2, r2, [r3, #8]
		sub.period = 0U;
    a0de:	601a      	str	r2, [r3, #0]
	k_work_reschedule(&sub_timer, K_SECONDS(sub.period));
    a0e0:	681d      	ldr	r5, [r3, #0]
			return ((t * to_hz + off) / from_hz);
    a0e2:	2400      	movs	r4, #0
    a0e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    a0e8:	435d      	muls	r5, r3
    a0ea:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    a0ee:	f240 30e7 	movw	r0, #999	; 0x3e7
    a0f2:	4621      	mov	r1, r4
    a0f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    a0f8:	2300      	movs	r3, #0
    a0fa:	fbe5 0106 	umlal	r0, r1, r5, r6
    a0fe:	f7f6 fc5d 	bl	9bc <__aeabi_uldivmod>
    a102:	4602      	mov	r2, r0
    a104:	460b      	mov	r3, r1
    a106:	4807      	ldr	r0, [pc, #28]	; (a124 <bt_mesh_hb_sub_set+0x90>)
    a108:	f00b fcde 	bl	15ac8 <k_work_reschedule>
	return STATUS_SUCCESS;
    a10c:	4620      	mov	r0, r4
    a10e:	e7c8      	b.n	a0a2 <bt_mesh_hb_sub_set+0xe>
	} else if (period) {
    a110:	b125      	cbz	r5, a11c <bt_mesh_hb_sub_set+0x88>
		sub.count = 0U;
    a112:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
		sub.src = src;
    a116:	811e      	strh	r6, [r3, #8]
		sub.dst = dst;
    a118:	815c      	strh	r4, [r3, #10]
		sub.count = 0U;
    a11a:	60da      	str	r2, [r3, #12]
		sub.period = 0U;
    a11c:	601d      	str	r5, [r3, #0]
    a11e:	e7df      	b.n	a0e0 <bt_mesh_hb_sub_set+0x4c>
    a120:	20001ab0 	.word	0x20001ab0
    a124:	200012c8 	.word	0x200012c8

0000a128 <bt_mesh_hb_sub_reset_count>:

void bt_mesh_hb_sub_reset_count(void)
{
	sub.count = 0;
    a128:	4b01      	ldr	r3, [pc, #4]	; (a130 <bt_mesh_hb_sub_reset_count+0x8>)
    a12a:	2200      	movs	r2, #0
    a12c:	819a      	strh	r2, [r3, #12]
}
    a12e:	4770      	bx	lr
    a130:	20001ab0 	.word	0x20001ab0

0000a134 <bt_mesh_hb_sub_get>:

void bt_mesh_hb_sub_get(struct bt_mesh_hb_sub *get)
{
    a134:	b538      	push	{r3, r4, r5, lr}
	*get = sub;
    a136:	4d0b      	ldr	r5, [pc, #44]	; (a164 <bt_mesh_hb_sub_get+0x30>)
{
    a138:	4604      	mov	r4, r0
	*get = sub;
    a13a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    a13e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (sub.dst == BT_MESH_ADDR_UNASSIGNED) {
    a142:	896b      	ldrh	r3, [r5, #10]
    a144:	b15b      	cbz	r3, a15e <bt_mesh_hb_sub_get+0x2a>
    a146:	4808      	ldr	r0, [pc, #32]	; (a168 <bt_mesh_hb_sub_get+0x34>)
    a148:	f014 fc43 	bl	1e9d2 <z_timeout_remaining>
			return (uint32_t)((t * to_hz + off) / from_hz);
    a14c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    a150:	fba0 3002 	umull	r3, r0, r0, r2
    a154:	0bdb      	lsrs	r3, r3, #15
    a156:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
	return rem_ms / MSEC_PER_SEC;
    a15a:	fbb3 f3f2 	udiv	r3, r3, r2
	get->remaining = sub_remaining();
    a15e:	6063      	str	r3, [r4, #4]
}
    a160:	bd38      	pop	{r3, r4, r5, pc}
    a162:	bf00      	nop
    a164:	20001ab0 	.word	0x20001ab0
    a168:	200012d8 	.word	0x200012d8

0000a16c <bt_mesh_hb_feature_changed>:

void bt_mesh_hb_feature_changed(uint16_t features)
{
	if (pub.dst == BT_MESH_ADDR_UNASSIGNED) {
    a16c:	4b04      	ldr	r3, [pc, #16]	; (a180 <bt_mesh_hb_feature_changed+0x14>)
    a16e:	881a      	ldrh	r2, [r3, #0]
    a170:	b12a      	cbz	r2, a17e <bt_mesh_hb_feature_changed+0x12>
		return;
	}

	if (!(pub.feat & features)) {
    a172:	88db      	ldrh	r3, [r3, #6]
    a174:	4218      	tst	r0, r3
    a176:	d002      	beq.n	a17e <bt_mesh_hb_feature_changed+0x12>
		return;
	}

	heartbeat_send(NULL, NULL);
    a178:	2000      	movs	r0, #0
    a17a:	f7ff be8d 	b.w	9e98 <heartbeat_send.constprop.0>
}
    a17e:	4770      	bx	lr
    a180:	20001aa0 	.word	0x20001aa0

0000a184 <bt_mesh_hb_init>:

void bt_mesh_hb_init(void)
{
    a184:	b508      	push	{r3, lr}
	pub.net_idx = BT_MESH_KEY_UNUSED;
    a186:	4b07      	ldr	r3, [pc, #28]	; (a1a4 <bt_mesh_hb_init+0x20>)
	k_work_init_delayable(&pub_timer, hb_publish);
    a188:	4907      	ldr	r1, [pc, #28]	; (a1a8 <bt_mesh_hb_init+0x24>)
    a18a:	4808      	ldr	r0, [pc, #32]	; (a1ac <bt_mesh_hb_init+0x28>)
	pub.net_idx = BT_MESH_KEY_UNUSED;
    a18c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    a190:	811a      	strh	r2, [r3, #8]
	k_work_init_delayable(&pub_timer, hb_publish);
    a192:	f014 face 	bl	1e732 <k_work_init_delayable>
	k_work_init_delayable(&sub_timer, sub_end);
}
    a196:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_work_init_delayable(&sub_timer, sub_end);
    a19a:	4905      	ldr	r1, [pc, #20]	; (a1b0 <bt_mesh_hb_init+0x2c>)
    a19c:	4805      	ldr	r0, [pc, #20]	; (a1b4 <bt_mesh_hb_init+0x30>)
    a19e:	f014 bac8 	b.w	1e732 <k_work_init_delayable>
    a1a2:	bf00      	nop
    a1a4:	20001aa0 	.word	0x20001aa0
    a1a8:	00009f39 	.word	0x00009f39
    a1ac:	20001298 	.word	0x20001298
    a1b0:	00009e1d 	.word	0x00009e1d
    a1b4:	200012c8 	.word	0x200012c8

0000a1b8 <bt_mesh_hb_start>:

void bt_mesh_hb_start(void)
{
	if (pub.count && pub.period) {
    a1b8:	4b05      	ldr	r3, [pc, #20]	; (a1d0 <bt_mesh_hb_start+0x18>)
    a1ba:	885a      	ldrh	r2, [r3, #2]
    a1bc:	b132      	cbz	r2, a1cc <bt_mesh_hb_start+0x14>
    a1be:	68db      	ldr	r3, [r3, #12]
    a1c0:	b123      	cbz	r3, a1cc <bt_mesh_hb_start+0x14>
		BT_DBG("Starting heartbeat publication");
		k_work_reschedule(&pub_timer, K_NO_WAIT);
    a1c2:	4804      	ldr	r0, [pc, #16]	; (a1d4 <bt_mesh_hb_start+0x1c>)
    a1c4:	2200      	movs	r2, #0
    a1c6:	2300      	movs	r3, #0
    a1c8:	f00b bc7e 	b.w	15ac8 <k_work_reschedule>
	}
}
    a1cc:	4770      	bx	lr
    a1ce:	bf00      	nop
    a1d0:	20001aa0 	.word	0x20001aa0
    a1d4:	20001298 	.word	0x20001298

0000a1d8 <bt_mesh_k2>:
	return bt_mesh_aes_cmac_one(okm, info, strlen(info), okm);
}

int bt_mesh_k2(const uint8_t n[16], const uint8_t *p, size_t p_len,
	       uint8_t net_id[1], uint8_t enc_key[16], uint8_t priv_key[16])
{
    a1d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    a1da:	b095      	sub	sp, #84	; 0x54
    a1dc:	4604      	mov	r4, r0
    a1de:	460f      	mov	r7, r1
	int err;

	BT_DBG("n %s", bt_hex(n, 16));
	BT_DBG("p %s", bt_hex(p, p_len));

	err = bt_mesh_s1("smk2", salt);
    a1e0:	4828      	ldr	r0, [pc, #160]	; (a284 <bt_mesh_k2+0xac>)
    a1e2:	a902      	add	r1, sp, #8
{
    a1e4:	4615      	mov	r5, r2
    a1e6:	461e      	mov	r6, r3
	err = bt_mesh_s1("smk2", salt);
    a1e8:	f00f fcef 	bl	19bca <bt_mesh_s1>
	if (err) {
    a1ec:	2800      	cmp	r0, #0
    a1ee:	d146      	bne.n	a27e <bt_mesh_k2+0xa6>
		return err;
	}

	err = bt_mesh_aes_cmac_one(salt, n, 16, t);
    a1f0:	4621      	mov	r1, r4
    a1f2:	ab0a      	add	r3, sp, #40	; 0x28
    a1f4:	2210      	movs	r2, #16
    a1f6:	a802      	add	r0, sp, #8
    a1f8:	f00f fcdd 	bl	19bb6 <bt_mesh_aes_cmac_one>
	if (err) {
    a1fc:	4604      	mov	r4, r0
    a1fe:	2800      	cmp	r0, #0
    a200:	d13a      	bne.n	a278 <bt_mesh_k2+0xa0>
		return err;
	}

	pad = 0x01;
    a202:	2301      	movs	r3, #1

	sg[0].data = NULL;
	sg[0].len  = 0;
	sg[1].data = p;
	sg[1].len  = p_len;
    a204:	e9cd 7510 	strd	r7, r5, [sp, #64]	; 0x40
	sg[2].data = &pad;
    a208:	f10d 0207 	add.w	r2, sp, #7
	sg[2].len  = sizeof(pad);

	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
    a20c:	ad06      	add	r5, sp, #24
	sg[2].len  = sizeof(pad);
    a20e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
	sg[0].len  = 0;
    a212:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
	pad = 0x01;
    a216:	f88d 3007 	strb.w	r3, [sp, #7]
	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
    a21a:	2203      	movs	r2, #3
    a21c:	462b      	mov	r3, r5
    a21e:	a90e      	add	r1, sp, #56	; 0x38
    a220:	a80a      	add	r0, sp, #40	; 0x28
    a222:	f00f fca6 	bl	19b72 <bt_mesh_aes_cmac>
	if (err) {
    a226:	4604      	mov	r4, r0
    a228:	bb30      	cbnz	r0, a278 <bt_mesh_k2+0xa0>
		return err;
	}

	net_id[0] = out[15] & 0x7f;
    a22a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27

	sg[0].data = out;
    a22e:	950e      	str	r5, [sp, #56]	; 0x38
	net_id[0] = out[15] & 0x7f;
    a230:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    a234:	7033      	strb	r3, [r6, #0]
	sg[0].len  = sizeof(out);
	pad = 0x02;
    a236:	2302      	movs	r3, #2
    a238:	f88d 3007 	strb.w	r3, [sp, #7]
	sg[0].len  = sizeof(out);
    a23c:	2610      	movs	r6, #16

	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
    a23e:	462b      	mov	r3, r5
    a240:	2203      	movs	r2, #3
    a242:	a90e      	add	r1, sp, #56	; 0x38
    a244:	a80a      	add	r0, sp, #40	; 0x28
	sg[0].len  = sizeof(out);
    a246:	960f      	str	r6, [sp, #60]	; 0x3c
	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
    a248:	f00f fc93 	bl	19b72 <bt_mesh_aes_cmac>
	if (err) {
    a24c:	4604      	mov	r4, r0
    a24e:	b998      	cbnz	r0, a278 <bt_mesh_k2+0xa0>
		return err;
	}

	memcpy(enc_key, out, 16);
    a250:	4632      	mov	r2, r6
    a252:	4629      	mov	r1, r5
    a254:	981a      	ldr	r0, [sp, #104]	; 0x68
    a256:	f00c fffd 	bl	17254 <memcpy>

	pad = 0x03;
    a25a:	2203      	movs	r2, #3

	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
    a25c:	462b      	mov	r3, r5
    a25e:	a90e      	add	r1, sp, #56	; 0x38
    a260:	a80a      	add	r0, sp, #40	; 0x28
	pad = 0x03;
    a262:	f88d 2007 	strb.w	r2, [sp, #7]
	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
    a266:	f00f fc84 	bl	19b72 <bt_mesh_aes_cmac>
	if (err) {
    a26a:	4604      	mov	r4, r0
    a26c:	b920      	cbnz	r0, a278 <bt_mesh_k2+0xa0>
		return err;
	}

	memcpy(priv_key, out, 16);
    a26e:	981b      	ldr	r0, [sp, #108]	; 0x6c
    a270:	4632      	mov	r2, r6
    a272:	4629      	mov	r1, r5
    a274:	f00c ffee 	bl	17254 <memcpy>

	BT_DBG("NID 0x%02x enc_key %s", net_id[0], bt_hex(enc_key, 16));
	BT_DBG("priv_key %s", bt_hex(priv_key, 16));

	return 0;
}
    a278:	4620      	mov	r0, r4
    a27a:	b015      	add	sp, #84	; 0x54
    a27c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return err;
    a27e:	2401      	movs	r4, #1
    a280:	e7fa      	b.n	a278 <bt_mesh_k2+0xa0>
    a282:	bf00      	nop
    a284:	0002034f 	.word	0x0002034f

0000a288 <bt_mesh_k3>:

int bt_mesh_k3(const uint8_t n[16], uint8_t out[8])
{
    a288:	b530      	push	{r4, r5, lr}
	uint8_t id64[] = { 'i', 'd', '6', '4', 0x01 };
    a28a:	4b14      	ldr	r3, [pc, #80]	; (a2dc <bt_mesh_k3+0x54>)
{
    a28c:	b08b      	sub	sp, #44	; 0x2c
    a28e:	4604      	mov	r4, r0
	uint8_t id64[] = { 'i', 'd', '6', '4', 0x01 };
    a290:	6818      	ldr	r0, [r3, #0]
    a292:	9000      	str	r0, [sp, #0]
    a294:	791b      	ldrb	r3, [r3, #4]
	uint8_t tmp[16];
	uint8_t t[16];
	int err;

	err = bt_mesh_s1("smk3", tmp);
    a296:	4812      	ldr	r0, [pc, #72]	; (a2e0 <bt_mesh_k3+0x58>)
	uint8_t id64[] = { 'i', 'd', '6', '4', 0x01 };
    a298:	f88d 3004 	strb.w	r3, [sp, #4]
{
    a29c:	460d      	mov	r5, r1
	err = bt_mesh_s1("smk3", tmp);
    a29e:	a902      	add	r1, sp, #8
    a2a0:	f00f fc93 	bl	19bca <bt_mesh_s1>
	if (err) {
    a2a4:	b9b8      	cbnz	r0, a2d6 <bt_mesh_k3+0x4e>
		return err;
	}

	err = bt_mesh_aes_cmac_one(tmp, n, 16, t);
    a2a6:	4621      	mov	r1, r4
    a2a8:	ab06      	add	r3, sp, #24
    a2aa:	2210      	movs	r2, #16
    a2ac:	a802      	add	r0, sp, #8
    a2ae:	f00f fc82 	bl	19bb6 <bt_mesh_aes_cmac_one>
	if (err) {
    a2b2:	4604      	mov	r4, r0
    a2b4:	b960      	cbnz	r0, a2d0 <bt_mesh_k3+0x48>
		return err;
	}

	err = bt_mesh_aes_cmac_one(t, id64, sizeof(id64), tmp);
    a2b6:	ab02      	add	r3, sp, #8
    a2b8:	2205      	movs	r2, #5
    a2ba:	4669      	mov	r1, sp
    a2bc:	a806      	add	r0, sp, #24
    a2be:	f00f fc7a 	bl	19bb6 <bt_mesh_aes_cmac_one>
	if (err) {
    a2c2:	4604      	mov	r4, r0
    a2c4:	b920      	cbnz	r0, a2d0 <bt_mesh_k3+0x48>
		return err;
	}

	memcpy(out, tmp + 8, 8);
    a2c6:	2208      	movs	r2, #8
    a2c8:	a904      	add	r1, sp, #16
    a2ca:	4628      	mov	r0, r5
    a2cc:	f00c ffc2 	bl	17254 <memcpy>

	return 0;
}
    a2d0:	4620      	mov	r0, r4
    a2d2:	b00b      	add	sp, #44	; 0x2c
    a2d4:	bd30      	pop	{r4, r5, pc}
		return err;
    a2d6:	2401      	movs	r4, #1
    a2d8:	e7fa      	b.n	a2d0 <bt_mesh_k3+0x48>
    a2da:	bf00      	nop
    a2dc:	00020359 	.word	0x00020359
    a2e0:	00020354 	.word	0x00020354

0000a2e4 <bt_mesh_k4>:

int bt_mesh_k4(const uint8_t n[16], uint8_t out[1])
{
    a2e4:	b530      	push	{r4, r5, lr}
    a2e6:	b08b      	sub	sp, #44	; 0x2c
	uint8_t id6[] = { 'i', 'd', '6', 0x01 };
    a2e8:	4b10      	ldr	r3, [pc, #64]	; (a32c <bt_mesh_k4+0x48>)
    a2ea:	9301      	str	r3, [sp, #4]
{
    a2ec:	4605      	mov	r5, r0
    a2ee:	460c      	mov	r4, r1
	uint8_t tmp[16];
	uint8_t t[16];
	int err;

	err = bt_mesh_s1("smk4", tmp);
    a2f0:	480f      	ldr	r0, [pc, #60]	; (a330 <bt_mesh_k4+0x4c>)
    a2f2:	a902      	add	r1, sp, #8
    a2f4:	f00f fc69 	bl	19bca <bt_mesh_s1>
	if (err) {
    a2f8:	b9a8      	cbnz	r0, a326 <bt_mesh_k4+0x42>
		return err;
	}

	err = bt_mesh_aes_cmac_one(tmp, n, 16, t);
    a2fa:	ab06      	add	r3, sp, #24
    a2fc:	2210      	movs	r2, #16
    a2fe:	4629      	mov	r1, r5
    a300:	a802      	add	r0, sp, #8
    a302:	f00f fc58 	bl	19bb6 <bt_mesh_aes_cmac_one>
	if (err) {
    a306:	b960      	cbnz	r0, a322 <bt_mesh_k4+0x3e>
		return err;
	}

	err = bt_mesh_aes_cmac_one(t, id6, sizeof(id6), tmp);
    a308:	2204      	movs	r2, #4
    a30a:	ab02      	add	r3, sp, #8
    a30c:	eb0d 0102 	add.w	r1, sp, r2
    a310:	a806      	add	r0, sp, #24
    a312:	f00f fc50 	bl	19bb6 <bt_mesh_aes_cmac_one>
	if (err) {
    a316:	b920      	cbnz	r0, a322 <bt_mesh_k4+0x3e>
		return err;
	}

	out[0] = tmp[15] & BIT_MASK(6);
    a318:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a31c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    a320:	7023      	strb	r3, [r4, #0]

	return 0;
}
    a322:	b00b      	add	sp, #44	; 0x2c
    a324:	bd30      	pop	{r4, r5, pc}
		return err;
    a326:	2001      	movs	r0, #1
    a328:	e7fb      	b.n	a322 <bt_mesh_k4+0x3e>
    a32a:	bf00      	nop
    a32c:	01366469 	.word	0x01366469
    a330:	0002035f 	.word	0x0002035f

0000a334 <bt_mesh_id128>:

int bt_mesh_id128(const uint8_t n[16], const char *s, uint8_t out[16])
{
    a334:	b530      	push	{r4, r5, lr}
    a336:	b087      	sub	sp, #28
    a338:	4604      	mov	r4, r0
    a33a:	4608      	mov	r0, r1
	const char *id128 = "id128\x01";
	uint8_t salt[16];
	int err;

	err = bt_mesh_s1(s, salt);
    a33c:	a902      	add	r1, sp, #8
{
    a33e:	4615      	mov	r5, r2
	err = bt_mesh_s1(s, salt);
    a340:	f00f fc43 	bl	19bca <bt_mesh_s1>
	if (err) {
    a344:	b940      	cbnz	r0, a358 <bt_mesh_id128+0x24>
		return err;
	}

	return bt_mesh_k1(n, 16, salt, id128, out);
    a346:	4b05      	ldr	r3, [pc, #20]	; (a35c <bt_mesh_id128+0x28>)
    a348:	9500      	str	r5, [sp, #0]
    a34a:	aa02      	add	r2, sp, #8
    a34c:	2110      	movs	r1, #16
    a34e:	4620      	mov	r0, r4
    a350:	f00f fc51 	bl	19bf6 <bt_mesh_k1>
}
    a354:	b007      	add	sp, #28
    a356:	bd30      	pop	{r4, r5, pc}
		return err;
    a358:	2001      	movs	r0, #1
    a35a:	e7fb      	b.n	a354 <bt_mesh_id128+0x20>
    a35c:	00020364 	.word	0x00020364

0000a360 <bt_mesh_net_obfuscate>:
	sys_put_be32(iv_index, &nonce[9]);
}

int bt_mesh_net_obfuscate(uint8_t *pdu, uint32_t iv_index,
			  const uint8_t privacy_key[16])
{
    a360:	b570      	push	{r4, r5, r6, lr}
	uint8_t priv_rand[16] = { 0x00, 0x00, 0x00, 0x00, 0x00, };
    a362:	4b18      	ldr	r3, [pc, #96]	; (a3c4 <bt_mesh_net_obfuscate+0x64>)
{
    a364:	b088      	sub	sp, #32
    a366:	4604      	mov	r4, r0
    a368:	460e      	mov	r6, r1
	uint8_t priv_rand[16] = { 0x00, 0x00, 0x00, 0x00, 0x00, };
    a36a:	6818      	ldr	r0, [r3, #0]
    a36c:	889b      	ldrh	r3, [r3, #4]
    a36e:	9000      	str	r0, [sp, #0]
    a370:	f8ad 3004 	strh.w	r3, [sp, #4]
	uint8_t tmp[16];
	int err, i;

	BT_DBG("IVIndex %u, PrivacyKey %s", iv_index, bt_hex(privacy_key, 16));

	sys_put_be32(iv_index, &priv_rand[5]);
    a374:	f10d 0105 	add.w	r1, sp, #5
	uint8_t priv_rand[16] = { 0x00, 0x00, 0x00, 0x00, 0x00, };
    a378:	2300      	movs	r3, #0
	sys_put_be32(iv_index, &priv_rand[5]);
    a37a:	4630      	mov	r0, r6
{
    a37c:	4615      	mov	r5, r2
	uint8_t priv_rand[16] = { 0x00, 0x00, 0x00, 0x00, 0x00, };
    a37e:	f8cd 3006 	str.w	r3, [sp, #6]
    a382:	f8cd 300a 	str.w	r3, [sp, #10]
    a386:	f8ad 300e 	strh.w	r3, [sp, #14]
	sys_put_be32(iv_index, &priv_rand[5]);
    a38a:	f00f fbc9 	bl	19b20 <sys_put_be32>
	memcpy(&priv_rand[9], &pdu[7], 7);
    a38e:	2207      	movs	r2, #7
    a390:	18a1      	adds	r1, r4, r2
    a392:	f10d 0009 	add.w	r0, sp, #9
    a396:	f00c ff5d 	bl	17254 <memcpy>

	BT_DBG("PrivacyRandom %s", bt_hex(priv_rand, 16));

	err = bt_encrypt_be(privacy_key, priv_rand, tmp);
    a39a:	aa04      	add	r2, sp, #16
    a39c:	4669      	mov	r1, sp
    a39e:	4628      	mov	r0, r5
    a3a0:	f011 ff16 	bl	1c1d0 <bt_encrypt_be>
	if (err) {
    a3a4:	b958      	cbnz	r0, a3be <bt_mesh_net_obfuscate+0x5e>
    a3a6:	4623      	mov	r3, r4
    a3a8:	aa04      	add	r2, sp, #16
    a3aa:	3406      	adds	r4, #6
		return err;
	}

	for (i = 0; i < 6; i++) {
		pdu[1 + i] ^= tmp[i];
    a3ac:	f813 5f01 	ldrb.w	r5, [r3, #1]!
    a3b0:	f812 1b01 	ldrb.w	r1, [r2], #1
	for (i = 0; i < 6; i++) {
    a3b4:	42a3      	cmp	r3, r4
		pdu[1 + i] ^= tmp[i];
    a3b6:	ea81 0105 	eor.w	r1, r1, r5
    a3ba:	7019      	strb	r1, [r3, #0]
	for (i = 0; i < 6; i++) {
    a3bc:	d1f6      	bne.n	a3ac <bt_mesh_net_obfuscate+0x4c>
	}

	return 0;
}
    a3be:	b008      	add	sp, #32
    a3c0:	bd70      	pop	{r4, r5, r6, pc}
    a3c2:	bf00      	nop
    a3c4:	0001f288 	.word	0x0001f288

0000a3c8 <mod_init>:
}
#endif

static void mod_init(struct bt_mesh_model *mod, struct bt_mesh_elem *elem,
		     bool vnd, bool primary, void *user_data)
{
    a3c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a3cc:	9d06      	ldr	r5, [sp, #24]
	int i;
	int *err = user_data;

	if (*err) {
    a3ce:	682f      	ldr	r7, [r5, #0]
{
    a3d0:	4604      	mov	r4, r0
    a3d2:	460e      	mov	r6, r1
    a3d4:	4690      	mov	r8, r2
	if (*err) {
    a3d6:	b9f7      	cbnz	r7, a416 <mod_init+0x4e>
		return;
	}

	if (mod->pub) {
    a3d8:	6880      	ldr	r0, [r0, #8]
    a3da:	b120      	cbz	r0, a3e6 <mod_init+0x1e>
		mod->pub->mod = mod;
    a3dc:	f840 4b18 	str.w	r4, [r0], #24
		k_work_init_delayable(&mod->pub->timer, mod_publish);
    a3e0:	491a      	ldr	r1, [pc, #104]	; (a44c <mod_init+0x84>)
    a3e2:	f014 f9a6 	bl	1e732 <k_work_init_delayable>
	}

	for (i = 0; i < ARRAY_SIZE(mod->keys); i++) {
		mod->keys[i] = BT_MESH_KEY_UNUSED;
    a3e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    a3ea:	81a3      	strh	r3, [r4, #12]
	}

	mod->elem_idx = elem - dev_comp->elem;
    a3ec:	4b18      	ldr	r3, [pc, #96]	; (a450 <mod_init+0x88>)
    a3ee:	681b      	ldr	r3, [r3, #0]
    a3f0:	68db      	ldr	r3, [r3, #12]
    a3f2:	1af3      	subs	r3, r6, r3
    a3f4:	111b      	asrs	r3, r3, #4
    a3f6:	7123      	strb	r3, [r4, #4]
	if (vnd) {
    a3f8:	f1b8 0f00 	cmp.w	r8, #0
    a3fc:	d017      	beq.n	a42e <mod_init+0x66>
		mod->mod_idx = mod - elem->vnd_models;
    a3fe:	68f3      	ldr	r3, [r6, #12]
    a400:	1ae3      	subs	r3, r4, r3
    a402:	115b      	asrs	r3, r3, #5
    a404:	7163      	strb	r3, [r4, #5]
	for (op = mod->op; op->func; op++) {
    a406:	6963      	ldr	r3, [r4, #20]
    a408:	330c      	adds	r3, #12
    a40a:	f853 2c04 	ldr.w	r2, [r3, #-4]
    a40e:	4619      	mov	r1, r3
    a410:	b91a      	cbnz	r2, a41a <mod_init+0x52>

		if (IS_ENABLED(CONFIG_BT_MESH_MODEL_VND_MSG_CID_FORCE)) {
			*err = bt_mesh_vnd_mod_msg_cid_check(mod);
    a412:	602f      	str	r7, [r5, #0]
			if (*err) {
    a414:	b17f      	cbz	r7, a436 <mod_init+0x6e>
	}

	if (mod->cb && mod->cb->init) {
		*err = mod->cb->init(mod);
	}
}
    a416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cid == mod->vnd.company) {
    a41a:	8820      	ldrh	r0, [r4, #0]
    a41c:	f831 2c0c 	ldrh.w	r2, [r1, #-12]
    a420:	4290      	cmp	r0, r2
    a422:	f103 030c 	add.w	r3, r3, #12
    a426:	d0f0      	beq.n	a40a <mod_init+0x42>
		return -EINVAL;
    a428:	f06f 0715 	mvn.w	r7, #21
    a42c:	e7f1      	b.n	a412 <mod_init+0x4a>
		mod->mod_idx = mod - elem->models;
    a42e:	68b3      	ldr	r3, [r6, #8]
    a430:	1ae3      	subs	r3, r4, r3
    a432:	115b      	asrs	r3, r3, #5
    a434:	7163      	strb	r3, [r4, #5]
	if (mod->cb && mod->cb->init) {
    a436:	69a3      	ldr	r3, [r4, #24]
    a438:	2b00      	cmp	r3, #0
    a43a:	d0ec      	beq.n	a416 <mod_init+0x4e>
    a43c:	689b      	ldr	r3, [r3, #8]
    a43e:	2b00      	cmp	r3, #0
    a440:	d0e9      	beq.n	a416 <mod_init+0x4e>
		*err = mod->cb->init(mod);
    a442:	4620      	mov	r0, r4
    a444:	4798      	blx	r3
    a446:	6028      	str	r0, [r5, #0]
    a448:	e7e5      	b.n	a416 <mod_init+0x4e>
    a44a:	bf00      	nop
    a44c:	0000a525 	.word	0x0000a525
    a450:	20001ac0 	.word	0x20001ac0

0000a454 <bt_mesh_model_foreach>:
{
    a454:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	for (i = 0; i < dev_comp->elem_count; i++) {
    a458:	f8df 9068 	ldr.w	r9, [pc, #104]	; a4c4 <bt_mesh_model_foreach+0x70>
{
    a45c:	4606      	mov	r6, r0
    a45e:	460f      	mov	r7, r1
	for (i = 0; i < dev_comp->elem_count; i++) {
    a460:	2500      	movs	r5, #0
    a462:	f8d9 3000 	ldr.w	r3, [r9]
    a466:	689a      	ldr	r2, [r3, #8]
    a468:	42aa      	cmp	r2, r5
    a46a:	d802      	bhi.n	a472 <bt_mesh_model_foreach+0x1e>
}
    a46c:	b003      	add	sp, #12
    a46e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		struct bt_mesh_elem *elem = &dev_comp->elem[i];
    a472:	68dc      	ldr	r4, [r3, #12]
		for (j = 0; j < elem->model_count; j++) {
    a474:	f04f 0800 	mov.w	r8, #0
		struct bt_mesh_elem *elem = &dev_comp->elem[i];
    a478:	eb04 1405 	add.w	r4, r4, r5, lsl #4
		for (j = 0; j < elem->model_count; j++) {
    a47c:	7923      	ldrb	r3, [r4, #4]
    a47e:	4543      	cmp	r3, r8
    a480:	dc06      	bgt.n	a490 <bt_mesh_model_foreach+0x3c>
		for (j = 0; j < elem->vnd_model_count; j++) {
    a482:	f04f 0800 	mov.w	r8, #0
    a486:	7963      	ldrb	r3, [r4, #5]
    a488:	4543      	cmp	r3, r8
    a48a:	dc0e      	bgt.n	a4aa <bt_mesh_model_foreach+0x56>
	for (i = 0; i < dev_comp->elem_count; i++) {
    a48c:	3501      	adds	r5, #1
    a48e:	e7e8      	b.n	a462 <bt_mesh_model_foreach+0xe>
			struct bt_mesh_model *model = &elem->models[j];
    a490:	68a0      	ldr	r0, [r4, #8]
			func(model, elem, false, i == 0, user_data);
    a492:	9700      	str	r7, [sp, #0]
    a494:	fab5 f385 	clz	r3, r5
    a498:	eb00 1048 	add.w	r0, r0, r8, lsl #5
    a49c:	095b      	lsrs	r3, r3, #5
    a49e:	2200      	movs	r2, #0
    a4a0:	4621      	mov	r1, r4
    a4a2:	47b0      	blx	r6
		for (j = 0; j < elem->model_count; j++) {
    a4a4:	f108 0801 	add.w	r8, r8, #1
    a4a8:	e7e8      	b.n	a47c <bt_mesh_model_foreach+0x28>
			struct bt_mesh_model *model = &elem->vnd_models[j];
    a4aa:	68e0      	ldr	r0, [r4, #12]
			func(model, elem, true, i == 0, user_data);
    a4ac:	9700      	str	r7, [sp, #0]
    a4ae:	fab5 f385 	clz	r3, r5
    a4b2:	eb00 1048 	add.w	r0, r0, r8, lsl #5
    a4b6:	095b      	lsrs	r3, r3, #5
    a4b8:	2201      	movs	r2, #1
    a4ba:	4621      	mov	r1, r4
    a4bc:	47b0      	blx	r6
		for (j = 0; j < elem->vnd_model_count; j++) {
    a4be:	f108 0801 	add.w	r8, r8, #1
    a4c2:	e7e0      	b.n	a486 <bt_mesh_model_foreach+0x32>
    a4c4:	20001ac0 	.word	0x20001ac0

0000a4c8 <bt_mesh_model_pub_period_get>:
	if (!mod->pub) {
    a4c8:	6883      	ldr	r3, [r0, #8]
    a4ca:	b1eb      	cbz	r3, a508 <bt_mesh_model_pub_period_get+0x40>
	switch (mod->pub->period >> 6) {
    a4cc:	7a98      	ldrb	r0, [r3, #10]
    a4ce:	0982      	lsrs	r2, r0, #6
    a4d0:	2a02      	cmp	r2, #2
    a4d2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    a4d6:	d012      	beq.n	a4fe <bt_mesh_model_pub_period_get+0x36>
    a4d8:	2a03      	cmp	r2, #3
    a4da:	d013      	beq.n	a504 <bt_mesh_model_pub_period_get+0x3c>
    a4dc:	2a01      	cmp	r2, #1
    a4de:	d00a      	beq.n	a4f6 <bt_mesh_model_pub_period_get+0x2e>
		period = (mod->pub->period & BIT_MASK(6)) * 100U;
    a4e0:	2264      	movs	r2, #100	; 0x64
    a4e2:	fb10 f002 	smulbb	r0, r0, r2
	if (mod->pub->fast_period) {
    a4e6:	79da      	ldrb	r2, [r3, #7]
    a4e8:	0652      	lsls	r2, r2, #25
    a4ea:	d50e      	bpl.n	a50a <bt_mesh_model_pub_period_get+0x42>
		return period >> mod->pub->period_div;
    a4ec:	7adb      	ldrb	r3, [r3, #11]
    a4ee:	f003 030f 	and.w	r3, r3, #15
    a4f2:	4118      	asrs	r0, r3
    a4f4:	4770      	bx	lr
		period = (mod->pub->period & BIT_MASK(6)) * MSEC_PER_SEC;
    a4f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
		period = (mod->pub->period & BIT_MASK(6)) * 600U * MSEC_PER_SEC;
    a4fa:	4350      	muls	r0, r2
		break;
    a4fc:	e7f3      	b.n	a4e6 <bt_mesh_model_pub_period_get+0x1e>
		period = (mod->pub->period & BIT_MASK(6)) * 10U * MSEC_PER_SEC;
    a4fe:	f242 7210 	movw	r2, #10000	; 0x2710
    a502:	e7fa      	b.n	a4fa <bt_mesh_model_pub_period_get+0x32>
		period = (mod->pub->period & BIT_MASK(6)) * 600U * MSEC_PER_SEC;
    a504:	4a01      	ldr	r2, [pc, #4]	; (a50c <bt_mesh_model_pub_period_get+0x44>)
    a506:	e7f8      	b.n	a4fa <bt_mesh_model_pub_period_get+0x32>
		return 0;
    a508:	4618      	mov	r0, r3
}
    a50a:	4770      	bx	lr
    a50c:	000927c0 	.word	0x000927c0

0000a510 <bt_mesh_model_elem>:
	return &dev_comp->elem[mod->elem_idx];
    a510:	4b03      	ldr	r3, [pc, #12]	; (a520 <bt_mesh_model_elem+0x10>)
    a512:	7900      	ldrb	r0, [r0, #4]
    a514:	681b      	ldr	r3, [r3, #0]
    a516:	68db      	ldr	r3, [r3, #12]
}
    a518:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    a51c:	4770      	bx	lr
    a51e:	bf00      	nop
    a520:	20001ac0 	.word	0x20001ac0

0000a524 <mod_publish>:
{
    a524:	b570      	push	{r4, r5, r6, lr}
	if (pub->addr == BT_MESH_ADDR_UNASSIGNED ||
    a526:	f830 3c14 	ldrh.w	r3, [r0, #-20]
{
    a52a:	b092      	sub	sp, #72	; 0x48
    a52c:	4604      	mov	r4, r0
	if (pub->addr == BT_MESH_ADDR_UNASSIGNED ||
    a52e:	2b00      	cmp	r3, #0
    a530:	d07f      	beq.n	a632 <mod_publish+0x10e>
    a532:	f3bf 8f5b 	dmb	ish
    a536:	4b40      	ldr	r3, [pc, #256]	; (a638 <mod_publish+0x114>)
    a538:	681b      	ldr	r3, [r3, #0]
    a53a:	f3bf 8f5b 	dmb	ish
    a53e:	079b      	lsls	r3, r3, #30
    a540:	d477      	bmi.n	a632 <mod_publish+0x10e>
	if (pub->count) {
    a542:	f814 3c0d 	ldrb.w	r3, [r4, #-13]
		    bt_mesh_model_pub_is_retransmission(pub->mod)) {
    a546:	f850 0c18 	ldr.w	r0, [r0, #-24]
	if (pub->count) {
    a54a:	f013 06f0 	ands.w	r6, r3, #240	; 0xf0
    a54e:	d016      	beq.n	a57e <mod_publish+0x5a>
		pub->count--;
    a550:	33f0      	adds	r3, #240	; 0xf0
    a552:	f804 3c0d 	strb.w	r3, [r4, #-13]
		if (pub->retr_update && pub->update &&
    a556:	f914 3c11 	ldrsb.w	r3, [r4, #-17]
    a55a:	2b00      	cmp	r3, #0
    a55c:	da2f      	bge.n	a5be <mod_publish+0x9a>
    a55e:	f854 2c04 	ldr.w	r2, [r4, #-4]
    a562:	b362      	cbz	r2, a5be <mod_publish+0x9a>
    a564:	6883      	ldr	r3, [r0, #8]
 *
 * @return true if this is a retransmission, false if this is a first publication.
 */
static inline bool bt_mesh_model_pub_is_retransmission(const struct bt_mesh_model *model)
{
	return model->pub->count != BT_MESH_PUB_TRANSMIT_COUNT(model->pub->retransmit);
    a566:	7ad9      	ldrb	r1, [r3, #11]
    a568:	7a5b      	ldrb	r3, [r3, #9]
    a56a:	f003 0307 	and.w	r3, r3, #7
    a56e:	ebb3 1f11 	cmp.w	r3, r1, lsr #4
    a572:	d024      	beq.n	a5be <mod_publish+0x9a>
			err = pub->update(pub->mod);
    a574:	4790      	blx	r2
			if (err) {
    a576:	b310      	cbz	r0, a5be <mod_publish+0x9a>
		publish_sent(err, pub->mod);
    a578:	f854 1c18 	ldr.w	r1, [r4, #-24]
    a57c:	e01a      	b.n	a5b4 <mod_publish+0x90>
	pub->count = BT_MESH_PUB_TRANSMIT_COUNT(pub->retransmit);
    a57e:	f814 2c0f 	ldrb.w	r2, [r4, #-15]
    a582:	f002 0207 	and.w	r2, r2, #7
    a586:	f362 1307 	bfi	r3, r2, #4, #4
    a58a:	f804 3c0d 	strb.w	r3, [r4, #-13]
	if (!pub->update) {
    a58e:	f854 3c04 	ldr.w	r3, [r4, #-4]
    a592:	b1a3      	cbz	r3, a5be <mod_publish+0x9a>
	err = pub->update(pub->mod);
    a594:	4798      	blx	r3
    a596:	4605      	mov	r5, r0
	pub->period_start = k_uptime_get_32();
    a598:	f00f fc31 	bl	19dfe <k_uptime_get_32>
    a59c:	f844 0c0c 	str.w	r0, [r4, #-12]
	if (err) {
    a5a0:	b16d      	cbz	r5, a5be <mod_publish+0x9a>
		pub->count = 0;
    a5a2:	f814 3c0d 	ldrb.w	r3, [r4, #-13]
		publish_sent(err, pub->mod);
    a5a6:	f854 1c18 	ldr.w	r1, [r4, #-24]
		pub->count = 0;
    a5aa:	f366 1307 	bfi	r3, r6, #4, #4
    a5ae:	f804 3c0d 	strb.w	r3, [r4, #-13]
		publish_sent(err, pub->mod);
    a5b2:	4628      	mov	r0, r5
}
    a5b4:	b012      	add	sp, #72	; 0x48
    a5b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		publish_sent(err, pub->mod);
    a5ba:	f00f bc47 	b.w	19e4c <publish_sent>
	err = publish_transmit(pub->mod);
    a5be:	f854 5c18 	ldr.w	r5, [r4, #-24]
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
    a5c2:	ab09      	add	r3, sp, #36	; 0x24
    a5c4:	f44f 1210 	mov.w	r2, #2359296	; 0x240000
    a5c8:	e9cd 2301 	strd	r2, r3, [sp, #4]
	struct bt_mesh_model_pub *pub = mod->pub;
    a5cc:	68aa      	ldr	r2, [r5, #8]
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
    a5ce:	9300      	str	r3, [sp, #0]
		.app_idx = pub->key,
    a5d0:	88d0      	ldrh	r0, [r2, #6]
	struct bt_mesh_msg_ctx ctx = {
    a5d2:	2100      	movs	r1, #0
    a5d4:	e9cd 1103 	strd	r1, r1, [sp, #12]
		.app_idx = pub->key,
    a5d8:	f3c0 000b 	ubfx	r0, r0, #0, #12
	struct bt_mesh_msg_ctx ctx = {
    a5dc:	f8cd 1013 	str.w	r1, [sp, #19]
    a5e0:	f8ad 000e 	strh.w	r0, [sp, #14]
    a5e4:	8890      	ldrh	r0, [r2, #4]
    a5e6:	f8ad 0010 	strh.w	r0, [sp, #16]
    a5ea:	7a10      	ldrb	r0, [r2, #8]
    a5ec:	f88d 0017 	strb.w	r0, [sp, #23]
    a5f0:	ab03      	add	r3, sp, #12
		.src = bt_mesh_model_elem(mod)->addr,
    a5f2:	4628      	mov	r0, r5
	struct bt_mesh_net_tx tx = {
    a5f4:	e9cd 3107 	strd	r3, r1, [sp, #28]
    a5f8:	9106      	str	r1, [sp, #24]
		.src = bt_mesh_model_elem(mod)->addr,
    a5fa:	f7ff ff89 	bl	a510 <bt_mesh_model_elem>
	struct bt_mesh_net_tx tx = {
    a5fe:	8803      	ldrh	r3, [r0, #0]
    a600:	f8ad 3020 	strh.w	r3, [sp, #32]
		.friend_cred = pub->cred,
    a604:	79d3      	ldrb	r3, [r2, #7]
	struct bt_mesh_net_tx tx = {
    a606:	f89d 1023 	ldrb.w	r1, [sp, #35]	; 0x23
		.friend_cred = pub->cred,
    a60a:	f3c3 1300 	ubfx	r3, r3, #4, #1
	struct bt_mesh_net_tx tx = {
    a60e:	f363 0100 	bfi	r1, r3, #0, #1
	net_buf_simple_add_mem(&sdu, pub->msg->data, pub->msg->len);
    a612:	6913      	ldr	r3, [r2, #16]
	struct bt_mesh_net_tx tx = {
    a614:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
	net_buf_simple_add_mem(&sdu, pub->msg->data, pub->msg->len);
    a618:	889a      	ldrh	r2, [r3, #4]
    a61a:	6819      	ldr	r1, [r3, #0]
    a61c:	4668      	mov	r0, sp
    a61e:	f012 fcda 	bl	1cfd6 <net_buf_simple_add_mem>
	return bt_mesh_trans_send(&tx, &sdu, &pub_sent_cb, mod);
    a622:	4a06      	ldr	r2, [pc, #24]	; (a63c <mod_publish+0x118>)
    a624:	462b      	mov	r3, r5
    a626:	4669      	mov	r1, sp
    a628:	a806      	add	r0, sp, #24
    a62a:	f7ff f89d 	bl	9768 <bt_mesh_trans_send>
	if (err) {
    a62e:	2800      	cmp	r0, #0
    a630:	d1a2      	bne.n	a578 <mod_publish+0x54>
}
    a632:	b012      	add	sp, #72	; 0x48
    a634:	bd70      	pop	{r4, r5, r6, pc}
    a636:	bf00      	nop
    a638:	20001128 	.word	0x20001128
    a63c:	0001f6ac 	.word	0x0001f6ac

0000a640 <bt_mesh_comp_register>:

int bt_mesh_comp_register(const struct bt_mesh_comp *comp)
{
    a640:	b507      	push	{r0, r1, r2, lr}
	int err;

	/* There must be at least one element */
	if (!comp || !comp->elem_count) {
    a642:	b168      	cbz	r0, a660 <bt_mesh_comp_register+0x20>
    a644:	6883      	ldr	r3, [r0, #8]
    a646:	b15b      	cbz	r3, a660 <bt_mesh_comp_register+0x20>
		return -EINVAL;
	}

	dev_comp = comp;
    a648:	4b07      	ldr	r3, [pc, #28]	; (a668 <bt_mesh_comp_register+0x28>)

	err = 0;
	bt_mesh_model_foreach(mod_init, &err);
    a64a:	a901      	add	r1, sp, #4
	dev_comp = comp;
    a64c:	6018      	str	r0, [r3, #0]
	bt_mesh_model_foreach(mod_init, &err);
    a64e:	4807      	ldr	r0, [pc, #28]	; (a66c <bt_mesh_comp_register+0x2c>)
	err = 0;
    a650:	2300      	movs	r3, #0
    a652:	9301      	str	r3, [sp, #4]
	bt_mesh_model_foreach(mod_init, &err);
    a654:	f7ff fefe 	bl	a454 <bt_mesh_model_foreach>

	return err;
    a658:	9801      	ldr	r0, [sp, #4]
}
    a65a:	b003      	add	sp, #12
    a65c:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
    a660:	f06f 0015 	mvn.w	r0, #21
    a664:	e7f9      	b.n	a65a <bt_mesh_comp_register+0x1a>
    a666:	bf00      	nop
    a668:	20001ac0 	.word	0x20001ac0
    a66c:	0000a3c9 	.word	0x0000a3c9

0000a670 <bt_mesh_comp_provision>:

void bt_mesh_comp_provision(uint16_t addr)
{
	int i;

	dev_primary_addr = addr;
    a670:	4b08      	ldr	r3, [pc, #32]	; (a694 <bt_mesh_comp_provision+0x24>)
{
    a672:	b570      	push	{r4, r5, r6, lr}
	dev_primary_addr = addr;
    a674:	8018      	strh	r0, [r3, #0]

	BT_DBG("addr 0x%04x elem_count %zu", addr, dev_comp->elem_count);

	for (i = 0; i < dev_comp->elem_count; i++) {
    a676:	4b08      	ldr	r3, [pc, #32]	; (a698 <bt_mesh_comp_provision+0x28>)
    a678:	6819      	ldr	r1, [r3, #0]
    a67a:	688c      	ldr	r4, [r1, #8]
    a67c:	2300      	movs	r3, #0
    a67e:	18c2      	adds	r2, r0, r3
    a680:	42a3      	cmp	r3, r4
    a682:	b292      	uxth	r2, r2
    a684:	d100      	bne.n	a688 <bt_mesh_comp_provision+0x18>
		elem->addr = addr++;

		BT_DBG("addr 0x%04x mod_count %u vnd_mod_count %u",
		       elem->addr, elem->model_count, elem->vnd_model_count);
	}
}
    a686:	bd70      	pop	{r4, r5, r6, pc}
		elem->addr = addr++;
    a688:	011d      	lsls	r5, r3, #4
    a68a:	68ce      	ldr	r6, [r1, #12]
	for (i = 0; i < dev_comp->elem_count; i++) {
    a68c:	3301      	adds	r3, #1
		elem->addr = addr++;
    a68e:	5372      	strh	r2, [r6, r5]
	for (i = 0; i < dev_comp->elem_count; i++) {
    a690:	e7f5      	b.n	a67e <bt_mesh_comp_provision+0xe>
    a692:	bf00      	nop
    a694:	20002b12 	.word	0x20002b12
    a698:	20001ac0 	.word	0x20001ac0

0000a69c <bt_mesh_comp_unprovision>:

void bt_mesh_comp_unprovision(void)
{
	BT_DBG("");

	dev_primary_addr = BT_MESH_ADDR_UNASSIGNED;
    a69c:	4b01      	ldr	r3, [pc, #4]	; (a6a4 <bt_mesh_comp_unprovision+0x8>)
    a69e:	2200      	movs	r2, #0
    a6a0:	801a      	strh	r2, [r3, #0]
}
    a6a2:	4770      	bx	lr
    a6a4:	20002b12 	.word	0x20002b12

0000a6a8 <bt_mesh_primary_addr>:

uint16_t bt_mesh_primary_addr(void)
{
	return dev_primary_addr;
}
    a6a8:	4b01      	ldr	r3, [pc, #4]	; (a6b0 <bt_mesh_primary_addr+0x8>)
    a6aa:	8818      	ldrh	r0, [r3, #0]
    a6ac:	4770      	bx	lr
    a6ae:	bf00      	nop
    a6b0:	20002b12 	.word	0x20002b12

0000a6b4 <bt_mesh_elem_find>:

struct bt_mesh_elem *bt_mesh_elem_find(uint16_t addr)
{
	uint16_t index;

	if (!BT_MESH_ADDR_IS_UNICAST(addr)) {
    a6b4:	b203      	sxth	r3, r0
    a6b6:	2b00      	cmp	r3, #0
    a6b8:	dd0b      	ble.n	a6d2 <bt_mesh_elem_find+0x1e>
		return NULL;
	}

	index = addr - dev_comp->elem[0].addr;
    a6ba:	4b07      	ldr	r3, [pc, #28]	; (a6d8 <bt_mesh_elem_find+0x24>)
    a6bc:	681a      	ldr	r2, [r3, #0]
    a6be:	68d3      	ldr	r3, [r2, #12]
	if (index >= dev_comp->elem_count) {
    a6c0:	6892      	ldr	r2, [r2, #8]
	index = addr - dev_comp->elem[0].addr;
    a6c2:	8819      	ldrh	r1, [r3, #0]
    a6c4:	1a40      	subs	r0, r0, r1
	if (index >= dev_comp->elem_count) {
    a6c6:	b280      	uxth	r0, r0
    a6c8:	4290      	cmp	r0, r2
    a6ca:	d202      	bcs.n	a6d2 <bt_mesh_elem_find+0x1e>
		return NULL;
	}

	return &dev_comp->elem[index];
    a6cc:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    a6d0:	4770      	bx	lr
		return NULL;
    a6d2:	2000      	movs	r0, #0
}
    a6d4:	4770      	bx	lr
    a6d6:	bf00      	nop
    a6d8:	20001ac0 	.word	0x20001ac0

0000a6dc <bt_mesh_has_addr>:

bool bt_mesh_has_addr(uint16_t addr)
{
	uint16_t index;

	if (BT_MESH_ADDR_IS_UNICAST(addr)) {
    a6dc:	b202      	sxth	r2, r0
    a6de:	2a00      	cmp	r2, #0
{
    a6e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a6e2:	4603      	mov	r3, r0
	if (BT_MESH_ADDR_IS_UNICAST(addr)) {
    a6e4:	dc08      	bgt.n	a6f8 <bt_mesh_has_addr+0x1c>

	if (IS_ENABLED(CONFIG_BT_MESH_ACCESS_LAYER_MSG) && msg_cb) {
		return true;
	}

	for (index = 0; index < dev_comp->elem_count; index++) {
    a6e6:	4a1b      	ldr	r2, [pc, #108]	; (a754 <bt_mesh_has_addr+0x78>)
    a6e8:	6815      	ldr	r5, [r2, #0]
    a6ea:	68ae      	ldr	r6, [r5, #8]
    a6ec:	2400      	movs	r4, #0
    a6ee:	b2a2      	uxth	r2, r4
    a6f0:	4296      	cmp	r6, r2
    a6f2:	d807      	bhi.n	a704 <bt_mesh_has_addr+0x28>
		if (bt_mesh_elem_find_group(elem, addr)) {
			return true;
		}
	}

	return false;
    a6f4:	2000      	movs	r0, #0
    a6f6:	e004      	b.n	a702 <bt_mesh_has_addr+0x26>
		return bt_mesh_elem_find(addr) != NULL;
    a6f8:	f7ff ffdc 	bl	a6b4 <bt_mesh_elem_find>
    a6fc:	3800      	subs	r0, #0
    a6fe:	bf18      	it	ne
    a700:	2001      	movne	r0, #1
}
    a702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		struct bt_mesh_elem *elem = &dev_comp->elem[index];
    a704:	68e9      	ldr	r1, [r5, #12]
    a706:	eb01 1202 	add.w	r2, r1, r2, lsl #4
	for (i = 0; i < elem->model_count; i++) {
    a70a:	2100      	movs	r1, #0
    a70c:	7917      	ldrb	r7, [r2, #4]
    a70e:	42b9      	cmp	r1, r7
    a710:	db05      	blt.n	a71e <bt_mesh_has_addr+0x42>
	for (i = 0; i < elem->vnd_model_count; i++) {
    a712:	7957      	ldrb	r7, [r2, #5]
    a714:	2100      	movs	r1, #0
    a716:	42b9      	cmp	r1, r7
    a718:	db0d      	blt.n	a736 <bt_mesh_has_addr+0x5a>
	for (index = 0; index < dev_comp->elem_count; index++) {
    a71a:	3401      	adds	r4, #1
    a71c:	e7e7      	b.n	a6ee <bt_mesh_has_addr+0x12>
		model = &elem->models[i];
    a71e:	6890      	ldr	r0, [r2, #8]
    a720:	eb00 1041 	add.w	r0, r0, r1, lsl #5
		if (mod->groups[i] == addr) {
    a724:	f8b0 c00e 	ldrh.w	ip, [r0, #14]
    a728:	459c      	cmp	ip, r3
    a72a:	d010      	beq.n	a74e <bt_mesh_has_addr+0x72>
    a72c:	8a00      	ldrh	r0, [r0, #16]
    a72e:	4298      	cmp	r0, r3
    a730:	d00d      	beq.n	a74e <bt_mesh_has_addr+0x72>
	for (i = 0; i < elem->model_count; i++) {
    a732:	3101      	adds	r1, #1
    a734:	e7eb      	b.n	a70e <bt_mesh_has_addr+0x32>
		model = &elem->vnd_models[i];
    a736:	68d0      	ldr	r0, [r2, #12]
    a738:	eb00 1041 	add.w	r0, r0, r1, lsl #5
		if (mod->groups[i] == addr) {
    a73c:	f8b0 c00e 	ldrh.w	ip, [r0, #14]
    a740:	459c      	cmp	ip, r3
    a742:	d004      	beq.n	a74e <bt_mesh_has_addr+0x72>
    a744:	8a00      	ldrh	r0, [r0, #16]
    a746:	4298      	cmp	r0, r3
    a748:	d001      	beq.n	a74e <bt_mesh_has_addr+0x72>
	for (i = 0; i < elem->vnd_model_count; i++) {
    a74a:	3101      	adds	r1, #1
    a74c:	e7e3      	b.n	a716 <bt_mesh_has_addr+0x3a>
			return true;
    a74e:	2001      	movs	r0, #1
    a750:	e7d7      	b.n	a702 <bt_mesh_has_addr+0x26>
    a752:	bf00      	nop
    a754:	20001ac0 	.word	0x20001ac0

0000a758 <bt_mesh_comp_get>:
}

const struct bt_mesh_comp *bt_mesh_comp_get(void)
{
	return dev_comp;
}
    a758:	4b01      	ldr	r3, [pc, #4]	; (a760 <bt_mesh_comp_get+0x8>)
    a75a:	6818      	ldr	r0, [r3, #0]
    a75c:	4770      	bx	lr
    a75e:	bf00      	nop
    a760:	20001ac0 	.word	0x20001ac0

0000a764 <bt_mesh_model_find_group>:
{
    a764:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    a766:	4604      	mov	r4, r0
	struct find_group_visitor_ctx ctx = {
    a768:	2300      	movs	r3, #0
		.mod = *mod,
    a76a:	6800      	ldr	r0, [r0, #0]
	struct find_group_visitor_ctx ctx = {
    a76c:	f8ad 100c 	strh.w	r1, [sp, #12]
	bt_mesh_model_extensions_walk(*mod, find_group_mod_visitor, &ctx);
    a770:	aa01      	add	r2, sp, #4
    a772:	4905      	ldr	r1, [pc, #20]	; (a788 <bt_mesh_model_find_group+0x24>)
	struct find_group_visitor_ctx ctx = {
    a774:	9301      	str	r3, [sp, #4]
    a776:	9002      	str	r0, [sp, #8]
	bt_mesh_model_extensions_walk(*mod, find_group_mod_visitor, &ctx);
    a778:	f00f fc1a 	bl	19fb0 <bt_mesh_model_extensions_walk>
	*mod = ctx.mod;
    a77c:	9b02      	ldr	r3, [sp, #8]
}
    a77e:	9801      	ldr	r0, [sp, #4]
	*mod = ctx.mod;
    a780:	6023      	str	r3, [r4, #0]
}
    a782:	b004      	add	sp, #16
    a784:	bd10      	pop	{r4, pc}
    a786:	bf00      	nop
    a788:	00019e19 	.word	0x00019e19

0000a78c <bt_mesh_model_recv>:
{
    a78c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (buf->data[0] >> 6) {
    a790:	680b      	ldr	r3, [r1, #0]
    a792:	781b      	ldrb	r3, [r3, #0]
{
    a794:	4689      	mov	r9, r1
	switch (buf->data[0] >> 6) {
    a796:	0999      	lsrs	r1, r3, #6
    a798:	2902      	cmp	r1, #2
{
    a79a:	b085      	sub	sp, #20
    a79c:	4606      	mov	r6, r0
	switch (buf->data[0] >> 6) {
    a79e:	d013      	beq.n	a7c8 <bt_mesh_model_recv+0x3c>
    a7a0:	2903      	cmp	r1, #3
    a7a2:	d019      	beq.n	a7d8 <bt_mesh_model_recv+0x4c>
		if (buf->data[0] == 0x7f) {
    a7a4:	2b7f      	cmp	r3, #127	; 0x7f
    a7a6:	d00c      	beq.n	a7c2 <bt_mesh_model_recv+0x36>
		*opcode = net_buf_simple_pull_u8(buf);
    a7a8:	4648      	mov	r0, r9
    a7aa:	f012 fc99 	bl	1d0e0 <net_buf_simple_pull_u8>
		*opcode = net_buf_simple_pull_be16(buf);
    a7ae:	4605      	mov	r5, r0
		return 0;
    a7b0:	b2ab      	uxth	r3, r5
	for (i = 0; i < dev_comp->elem_count; i++) {
    a7b2:	f04f 0800 	mov.w	r8, #0
    a7b6:	9301      	str	r3, [sp, #4]
    a7b8:	4b46      	ldr	r3, [pc, #280]	; (a8d4 <bt_mesh_model_recv+0x148>)
    a7ba:	681b      	ldr	r3, [r3, #0]
    a7bc:	6899      	ldr	r1, [r3, #8]
    a7be:	4541      	cmp	r1, r8
    a7c0:	d818      	bhi.n	a7f4 <bt_mesh_model_recv+0x68>
}
    a7c2:	b005      	add	sp, #20
    a7c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (buf->len < 2) {
    a7c8:	f8b9 3004 	ldrh.w	r3, [r9, #4]
    a7cc:	2b01      	cmp	r3, #1
    a7ce:	d9f8      	bls.n	a7c2 <bt_mesh_model_recv+0x36>
		*opcode = net_buf_simple_pull_be16(buf);
    a7d0:	4648      	mov	r0, r9
    a7d2:	f012 fc95 	bl	1d100 <net_buf_simple_pull_be16>
    a7d6:	e7ea      	b.n	a7ae <bt_mesh_model_recv+0x22>
		if (buf->len < 3) {
    a7d8:	f8b9 3004 	ldrh.w	r3, [r9, #4]
    a7dc:	2b02      	cmp	r3, #2
    a7de:	d9f0      	bls.n	a7c2 <bt_mesh_model_recv+0x36>
		*opcode = net_buf_simple_pull_u8(buf) << 16;
    a7e0:	4648      	mov	r0, r9
    a7e2:	f012 fc7d 	bl	1d0e0 <net_buf_simple_pull_u8>
    a7e6:	4605      	mov	r5, r0
		*opcode |= net_buf_simple_pull_le16(buf);
    a7e8:	4648      	mov	r0, r9
    a7ea:	f012 fc81 	bl	1d0f0 <net_buf_simple_pull_le16>
    a7ee:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
		return 0;
    a7f2:	e7dd      	b.n	a7b0 <bt_mesh_model_recv+0x24>
		op = find_op(&dev_comp->elem[i], opcode, &model);
    a7f4:	68df      	ldr	r7, [r3, #12]
    a7f6:	eb07 1308 	add.w	r3, r7, r8, lsl #4
		models = elem->vnd_models;
    a7fa:	e9d3 1402 	ldrd	r1, r4, [r3, #8]
	if (BT_MESH_MODEL_OP_LEN(opcode) < 3) {
    a7fe:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
		count = elem->model_count;
    a802:	bf33      	iteet	cc
    a804:	791b      	ldrbcc	r3, [r3, #4]
		count = elem->vnd_model_count;
    a806:	795b      	ldrbcs	r3, [r3, #5]
    a808:	f8dd c004 	ldrcs.w	ip, [sp, #4]
		models = elem->models;
    a80c:	460c      	movcc	r4, r1
	uint32_t cid = UINT32_MAX;
    a80e:	bf38      	it	cc
    a810:	f04f 3cff 	movcc.w	ip, #4294967295	; 0xffffffff
	for (i = 0U; i < count; i++) {
    a814:	eb04 1143 	add.w	r1, r4, r3, lsl #5
    a818:	42a1      	cmp	r1, r4
    a81a:	d102      	bne.n	a822 <bt_mesh_model_recv+0x96>
	for (i = 0; i < dev_comp->elem_count; i++) {
    a81c:	f108 0801 	add.w	r8, r8, #1
    a820:	e7ca      	b.n	a7b8 <bt_mesh_model_recv+0x2c>
		if (IS_ENABLED(CONFIG_BT_MESH_MODEL_VND_MSG_CID_FORCE) &&
    a822:	f1bc 3fff 	cmp.w	ip, #4294967295	; 0xffffffff
    a826:	d002      	beq.n	a82e <bt_mesh_model_recv+0xa2>
		     cid != models[i].vnd.company) {
    a828:	8823      	ldrh	r3, [r4, #0]
		     cid != UINT32_MAX &&
    a82a:	459c      	cmp	ip, r3
    a82c:	d104      	bne.n	a838 <bt_mesh_model_recv+0xac>
		for (op = (*model)->op; op->func; op++) {
    a82e:	f8d4 a014 	ldr.w	sl, [r4, #20]
    a832:	f8da 0008 	ldr.w	r0, [sl, #8]
    a836:	b908      	cbnz	r0, a83c <bt_mesh_model_recv+0xb0>
	for (i = 0U; i < count; i++) {
    a838:	3420      	adds	r4, #32
    a83a:	e7ed      	b.n	a818 <bt_mesh_model_recv+0x8c>
			if (op->opcode == opcode) {
    a83c:	f8da 0000 	ldr.w	r0, [sl]
    a840:	4285      	cmp	r5, r0
    a842:	d016      	beq.n	a872 <bt_mesh_model_recv+0xe6>
		for (op = (*model)->op; op->func; op++) {
    a844:	f10a 0a0c 	add.w	sl, sl, #12
    a848:	e7f3      	b.n	a832 <bt_mesh_model_recv+0xa6>
	} else if (BT_MESH_ADDR_IS_GROUP(dst) || BT_MESH_ADDR_IS_VIRTUAL(dst)) {
    a84a:	f481 4000 	eor.w	r0, r1, #32768	; 0x8000
    a84e:	f5b0 4ffe 	cmp.w	r0, #32512	; 0x7f00
    a852:	d806      	bhi.n	a862 <bt_mesh_model_recv+0xd6>
		return !!bt_mesh_model_find_group(&mod, dst);
    a854:	a803      	add	r0, sp, #12
    a856:	f7ff ff85 	bl	a764 <bt_mesh_model_find_group>
    a85a:	3800      	subs	r0, #0
    a85c:	bf18      	it	ne
    a85e:	2001      	movne	r0, #1
    a860:	e019      	b.n	a896 <bt_mesh_model_recv+0x10a>
	return mod->elem_idx == 0;
    a862:	7920      	ldrb	r0, [r4, #4]
    a864:	fab0 f080 	clz	r0, r0
    a868:	0940      	lsrs	r0, r0, #5
    a86a:	e014      	b.n	a896 <bt_mesh_model_recv+0x10a>
		} else if ((op->len < 0) && (buf->len != (size_t)(-op->len))) {
    a86c:	42c8      	cmn	r0, r1
    a86e:	d01c      	beq.n	a8aa <bt_mesh_model_recv+0x11e>
    a870:	e7d4      	b.n	a81c <bt_mesh_model_recv+0x90>
		if (!bt_mesh_model_has_key(model, rx->ctx.app_idx)) {
    a872:	88f1      	ldrh	r1, [r6, #6]
    a874:	4620      	mov	r0, r4
    a876:	f00f fb48 	bl	19f0a <bt_mesh_model_has_key>
    a87a:	2800      	cmp	r0, #0
    a87c:	d0ce      	beq.n	a81c <bt_mesh_model_recv+0x90>
	if (BT_MESH_ADDR_IS_UNICAST(dst)) {
    a87e:	f9b6 000a 	ldrsh.w	r0, [r6, #10]
		if (!model_has_dst(model, rx->ctx.recv_dst)) {
    a882:	8971      	ldrh	r1, [r6, #10]
    a884:	9403      	str	r4, [sp, #12]
	if (BT_MESH_ADDR_IS_UNICAST(dst)) {
    a886:	2800      	cmp	r0, #0
    a888:	dddf      	ble.n	a84a <bt_mesh_model_recv+0xbe>
		return (dev_comp->elem[mod->elem_idx].addr == dst);
    a88a:	7920      	ldrb	r0, [r4, #4]
    a88c:	0100      	lsls	r0, r0, #4
    a88e:	5a38      	ldrh	r0, [r7, r0]
    a890:	1a43      	subs	r3, r0, r1
    a892:	4258      	negs	r0, r3
    a894:	4158      	adcs	r0, r3
		if (!model_has_dst(model, rx->ctx.recv_dst)) {
    a896:	2800      	cmp	r0, #0
    a898:	d0c0      	beq.n	a81c <bt_mesh_model_recv+0x90>
		if ((op->len >= 0) && (buf->len < (size_t)op->len)) {
    a89a:	f8da 1004 	ldr.w	r1, [sl, #4]
    a89e:	f8b9 0004 	ldrh.w	r0, [r9, #4]
    a8a2:	2900      	cmp	r1, #0
    a8a4:	dbe2      	blt.n	a86c <bt_mesh_model_recv+0xe0>
    a8a6:	4281      	cmp	r1, r0
    a8a8:	d8b8      	bhi.n	a81c <bt_mesh_model_recv+0x90>
	state->offset = net_buf_simple_headroom(buf);
    a8aa:	4648      	mov	r0, r9
    a8ac:	f012 fc43 	bl	1d136 <net_buf_simple_headroom>
		(void)op->func(model, &rx->ctx, buf);
    a8b0:	f8da 3008 	ldr.w	r3, [sl, #8]
	state->len = buf->len;
    a8b4:	f8b9 b004 	ldrh.w	fp, [r9, #4]
	state->offset = net_buf_simple_headroom(buf);
    a8b8:	4607      	mov	r7, r0
    a8ba:	464a      	mov	r2, r9
    a8bc:	1d31      	adds	r1, r6, #4
    a8be:	4620      	mov	r0, r4
    a8c0:	4798      	blx	r3
	buf->data = buf->__buf + state->offset;
    a8c2:	f8d9 0008 	ldr.w	r0, [r9, #8]
	buf->len = state->len;
    a8c6:	f8a9 b004 	strh.w	fp, [r9, #4]
	buf->data = buf->__buf + state->offset;
    a8ca:	fa10 f787 	uxtah	r7, r0, r7
    a8ce:	f8c9 7000 	str.w	r7, [r9]
	buf->len = state->len;
    a8d2:	e7a3      	b.n	a81c <bt_mesh_model_recv+0x90>
    a8d4:	20001ac0 	.word	0x20001ac0

0000a8d8 <app_key_evt>:
	mod_unbind(mod, *app_idx, true);
}

static void app_key_evt(uint16_t app_idx, uint16_t net_idx,
			enum bt_mesh_key_evt evt)
{
    a8d8:	b507      	push	{r0, r1, r2, lr}
	if (evt == BT_MESH_KEY_DELETED) {
    a8da:	2a01      	cmp	r2, #1
{
    a8dc:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (evt == BT_MESH_KEY_DELETED) {
    a8e0:	d104      	bne.n	a8ec <app_key_evt+0x14>
		bt_mesh_model_foreach(&mod_app_key_del, &app_idx);
    a8e2:	4804      	ldr	r0, [pc, #16]	; (a8f4 <app_key_evt+0x1c>)
    a8e4:	f10d 0106 	add.w	r1, sp, #6
    a8e8:	f7ff fdb4 	bl	a454 <bt_mesh_model_foreach>
	}
}
    a8ec:	b003      	add	sp, #12
    a8ee:	f85d fb04 	ldr.w	pc, [sp], #4
    a8f2:	bf00      	nop
    a8f4:	0001b139 	.word	0x0001b139

0000a8f8 <node_reset>:
	bt_mesh_reset();
}

static int node_reset(struct bt_mesh_model *model, struct bt_mesh_msg_ctx *ctx,
		      struct net_buf_simple *buf)
{
    a8f8:	b570      	push	{r4, r5, r6, lr}
    a8fa:	b088      	sub	sp, #32
	static const struct bt_mesh_send_cb reset_cb = {
		.start = reset_send_start,
		.end = reset_send_end,
	};

	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NODE_RESET_STATUS, 0);
    a8fc:	ab03      	add	r3, sp, #12
{
    a8fe:	4604      	mov	r4, r0
    a900:	460d      	mov	r5, r1
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NODE_RESET_STATUS, 0);
    a902:	f44f 22c0 	mov.w	r2, #393216	; 0x60000

	BT_DBG("net_idx 0x%04x app_idx 0x%04x src 0x%04x len %u: %s",
	       ctx->net_idx, ctx->app_idx, ctx->addr, buf->len,
	       bt_hex(buf->data, buf->len));

	bt_mesh_model_msg_init(&msg, OP_NODE_RESET_STATUS);
    a906:	a805      	add	r0, sp, #20

	if (bt_mesh_model_send(model, ctx, &msg, &reset_cb, NULL)) {
    a908:	2600      	movs	r6, #0
	bt_mesh_model_msg_init(&msg, OP_NODE_RESET_STATUS);
    a90a:	f248 014a 	movw	r1, #32842	; 0x804a
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NODE_RESET_STATUS, 0);
    a90e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    a912:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_NODE_RESET_STATUS);
    a914:	f00f fb4f 	bl	19fb6 <bt_mesh_model_msg_init>
	if (bt_mesh_model_send(model, ctx, &msg, &reset_cb, NULL)) {
    a918:	4b04      	ldr	r3, [pc, #16]	; (a92c <node_reset+0x34>)
    a91a:	9600      	str	r6, [sp, #0]
    a91c:	aa05      	add	r2, sp, #20
    a91e:	4629      	mov	r1, r5
    a920:	4620      	mov	r0, r4
    a922:	f00f fb04 	bl	19f2e <bt_mesh_model_send>
		BT_ERR("Unable to send Node Reset Status");
	}

	return 0;
}
    a926:	4630      	mov	r0, r6
    a928:	b008      	add	sp, #32
    a92a:	bd70      	pop	{r4, r5, r6, pc}
    a92c:	0001f904 	.word	0x0001f904

0000a930 <mod_sub_get_vnd>:
{
    a930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a934:	4614      	mov	r4, r2
    a936:	b090      	sub	sp, #64	; 0x40
	NET_BUF_SIMPLE_DEFINE(msg, BT_MESH_TX_SDU_MAX);
    a938:	ab07      	add	r3, sp, #28
    a93a:	f44f 1210 	mov.w	r2, #2359296	; 0x240000
{
    a93e:	4681      	mov	r9, r0
	addr = net_buf_simple_pull_le16(buf);
    a940:	4620      	mov	r0, r4
	NET_BUF_SIMPLE_DEFINE(msg, BT_MESH_TX_SDU_MAX);
    a942:	e9cd 2305 	strd	r2, r3, [sp, #20]
    a946:	9304      	str	r3, [sp, #16]
{
    a948:	468a      	mov	sl, r1
	addr = net_buf_simple_pull_le16(buf);
    a94a:	f012 fbd1 	bl	1d0f0 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(addr)) {
    a94e:	b203      	sxth	r3, r0
    a950:	2b00      	cmp	r3, #0
	addr = net_buf_simple_pull_le16(buf);
    a952:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(addr)) {
    a954:	dd50      	ble.n	a9f8 <mod_sub_get_vnd+0xc8>
	company = net_buf_simple_pull_le16(buf);
    a956:	4620      	mov	r0, r4
    a958:	f012 fbca 	bl	1d0f0 <net_buf_simple_pull_le16>
    a95c:	4607      	mov	r7, r0
	id = net_buf_simple_pull_le16(buf);
    a95e:	4620      	mov	r0, r4
    a960:	f012 fbc6 	bl	1d0f0 <net_buf_simple_pull_le16>
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_LIST_VND);
    a964:	ac04      	add	r4, sp, #16
	id = net_buf_simple_pull_le16(buf);
    a966:	4606      	mov	r6, r0
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_LIST_VND);
    a968:	f248 012c 	movw	r1, #32812	; 0x802c
    a96c:	4620      	mov	r0, r4
    a96e:	f00f fb22 	bl	19fb6 <bt_mesh_model_msg_init>
	elem = bt_mesh_elem_find(addr);
    a972:	4628      	mov	r0, r5
    a974:	f7ff fe9e 	bl	a6b4 <bt_mesh_elem_find>
	if (!elem) {
    a978:	b9d8      	cbnz	r0, a9b2 <mod_sub_get_vnd+0x82>
		net_buf_simple_add_u8(&msg, STATUS_INVALID_ADDRESS);
    a97a:	2101      	movs	r1, #1
		net_buf_simple_add_u8(&msg, STATUS_INVALID_MODEL);
    a97c:	4620      	mov	r0, r4
    a97e:	f012 fb33 	bl	1cfe8 <net_buf_simple_add_u8>
		net_buf_simple_add_le16(&msg, addr);
    a982:	4629      	mov	r1, r5
    a984:	4620      	mov	r0, r4
    a986:	f012 fb37 	bl	1cff8 <net_buf_simple_add_le16>
		net_buf_simple_add_le16(&msg, company);
    a98a:	4639      	mov	r1, r7
    a98c:	4620      	mov	r0, r4
    a98e:	f012 fb33 	bl	1cff8 <net_buf_simple_add_le16>
		net_buf_simple_add_le16(&msg, id);
    a992:	4631      	mov	r1, r6
    a994:	4620      	mov	r0, r4
    a996:	f012 fb2f 	bl	1cff8 <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
    a99a:	2500      	movs	r5, #0
    a99c:	9500      	str	r5, [sp, #0]
    a99e:	462b      	mov	r3, r5
    a9a0:	4622      	mov	r2, r4
    a9a2:	4651      	mov	r1, sl
    a9a4:	4648      	mov	r0, r9
    a9a6:	f00f fac2 	bl	19f2e <bt_mesh_model_send>
	return 0;
    a9aa:	4628      	mov	r0, r5
}
    a9ac:	b010      	add	sp, #64	; 0x40
    a9ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	mod = bt_mesh_model_find_vnd(elem, company, id);
    a9b2:	4632      	mov	r2, r6
    a9b4:	4639      	mov	r1, r7
    a9b6:	f00f fad3 	bl	19f60 <bt_mesh_model_find_vnd>
	if (!mod) {
    a9ba:	4680      	mov	r8, r0
    a9bc:	b908      	cbnz	r0, a9c2 <mod_sub_get_vnd+0x92>
		net_buf_simple_add_u8(&msg, STATUS_INVALID_MODEL);
    a9be:	2102      	movs	r1, #2
    a9c0:	e7dc      	b.n	a97c <mod_sub_get_vnd+0x4c>
	net_buf_simple_add_u8(&msg, STATUS_SUCCESS);
    a9c2:	2100      	movs	r1, #0
    a9c4:	4620      	mov	r0, r4
    a9c6:	f012 fb0f 	bl	1cfe8 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, addr);
    a9ca:	4629      	mov	r1, r5
    a9cc:	4620      	mov	r0, r4
    a9ce:	f012 fb13 	bl	1cff8 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, company);
    a9d2:	4639      	mov	r1, r7
    a9d4:	4620      	mov	r0, r4
    a9d6:	f012 fb0f 	bl	1cff8 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, id);
    a9da:	4631      	mov	r1, r6
    a9dc:	4620      	mov	r0, r4
    a9de:	f012 fb0b 	bl	1cff8 <net_buf_simple_add_le16>
	visit_ctx.msg = &msg;
    a9e2:	9403      	str	r4, [sp, #12]
	visit_ctx.elem_idx = mod->elem_idx;
    a9e4:	f898 3004 	ldrb.w	r3, [r8, #4]
	bt_mesh_model_extensions_walk(mod, mod_sub_list_visitor, &visit_ctx);
    a9e8:	4905      	ldr	r1, [pc, #20]	; (aa00 <mod_sub_get_vnd+0xd0>)
	visit_ctx.elem_idx = mod->elem_idx;
    a9ea:	f8ad 3008 	strh.w	r3, [sp, #8]
	bt_mesh_model_extensions_walk(mod, mod_sub_list_visitor, &visit_ctx);
    a9ee:	aa02      	add	r2, sp, #8
    a9f0:	4640      	mov	r0, r8
    a9f2:	f00f fadd 	bl	19fb0 <bt_mesh_model_extensions_walk>
    a9f6:	e7d0      	b.n	a99a <mod_sub_get_vnd+0x6a>
		return -EINVAL;
    a9f8:	f06f 0015 	mvn.w	r0, #21
    a9fc:	e7d6      	b.n	a9ac <mod_sub_get_vnd+0x7c>
    a9fe:	bf00      	nop
    aa00:	0001ae29 	.word	0x0001ae29

0000aa04 <mod_sub_get>:
{
    aa04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    aa08:	4614      	mov	r4, r2
    aa0a:	b091      	sub	sp, #68	; 0x44
	NET_BUF_SIMPLE_DEFINE(msg, BT_MESH_TX_SDU_MAX);
    aa0c:	ab07      	add	r3, sp, #28
    aa0e:	f44f 1210 	mov.w	r2, #2359296	; 0x240000
{
    aa12:	4680      	mov	r8, r0
	addr = net_buf_simple_pull_le16(buf);
    aa14:	4620      	mov	r0, r4
	NET_BUF_SIMPLE_DEFINE(msg, BT_MESH_TX_SDU_MAX);
    aa16:	e9cd 2305 	strd	r2, r3, [sp, #20]
    aa1a:	9304      	str	r3, [sp, #16]
{
    aa1c:	4689      	mov	r9, r1
	addr = net_buf_simple_pull_le16(buf);
    aa1e:	f012 fb67 	bl	1d0f0 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(addr)) {
    aa22:	b203      	sxth	r3, r0
    aa24:	2b00      	cmp	r3, #0
	addr = net_buf_simple_pull_le16(buf);
    aa26:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(addr)) {
    aa28:	dd42      	ble.n	aab0 <mod_sub_get+0xac>
	id = net_buf_simple_pull_le16(buf);
    aa2a:	4620      	mov	r0, r4
    aa2c:	f012 fb60 	bl	1d0f0 <net_buf_simple_pull_le16>
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_LIST);
    aa30:	ac04      	add	r4, sp, #16
	id = net_buf_simple_pull_le16(buf);
    aa32:	4606      	mov	r6, r0
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_LIST);
    aa34:	f248 012a 	movw	r1, #32810	; 0x802a
    aa38:	4620      	mov	r0, r4
    aa3a:	f00f fabc 	bl	19fb6 <bt_mesh_model_msg_init>
	elem = bt_mesh_elem_find(addr);
    aa3e:	4628      	mov	r0, r5
    aa40:	f7ff fe38 	bl	a6b4 <bt_mesh_elem_find>
	if (!elem) {
    aa44:	b9b8      	cbnz	r0, aa76 <mod_sub_get+0x72>
		net_buf_simple_add_u8(&msg, STATUS_INVALID_ADDRESS);
    aa46:	2101      	movs	r1, #1
		net_buf_simple_add_u8(&msg, STATUS_INVALID_MODEL);
    aa48:	4620      	mov	r0, r4
    aa4a:	f012 facd 	bl	1cfe8 <net_buf_simple_add_u8>
		net_buf_simple_add_le16(&msg, addr);
    aa4e:	4629      	mov	r1, r5
    aa50:	4620      	mov	r0, r4
    aa52:	f012 fad1 	bl	1cff8 <net_buf_simple_add_le16>
		net_buf_simple_add_le16(&msg, id);
    aa56:	4631      	mov	r1, r6
    aa58:	4620      	mov	r0, r4
    aa5a:	f012 facd 	bl	1cff8 <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
    aa5e:	2500      	movs	r5, #0
    aa60:	9500      	str	r5, [sp, #0]
    aa62:	462b      	mov	r3, r5
    aa64:	4622      	mov	r2, r4
    aa66:	4649      	mov	r1, r9
    aa68:	4640      	mov	r0, r8
    aa6a:	f00f fa60 	bl	19f2e <bt_mesh_model_send>
	return 0;
    aa6e:	4628      	mov	r0, r5
}
    aa70:	b011      	add	sp, #68	; 0x44
    aa72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	mod = bt_mesh_model_find(elem, id);
    aa76:	4631      	mov	r1, r6
    aa78:	f00f fa87 	bl	19f8a <bt_mesh_model_find>
	if (!mod) {
    aa7c:	4607      	mov	r7, r0
    aa7e:	b908      	cbnz	r0, aa84 <mod_sub_get+0x80>
		net_buf_simple_add_u8(&msg, STATUS_INVALID_MODEL);
    aa80:	2102      	movs	r1, #2
    aa82:	e7e1      	b.n	aa48 <mod_sub_get+0x44>
	net_buf_simple_add_u8(&msg, STATUS_SUCCESS);
    aa84:	2100      	movs	r1, #0
    aa86:	4620      	mov	r0, r4
    aa88:	f012 faae 	bl	1cfe8 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, addr);
    aa8c:	4629      	mov	r1, r5
    aa8e:	4620      	mov	r0, r4
    aa90:	f012 fab2 	bl	1cff8 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, id);
    aa94:	4631      	mov	r1, r6
    aa96:	4620      	mov	r0, r4
    aa98:	f012 faae 	bl	1cff8 <net_buf_simple_add_le16>
	visit_ctx.msg = &msg;
    aa9c:	9403      	str	r4, [sp, #12]
	visit_ctx.elem_idx = mod->elem_idx;
    aa9e:	793b      	ldrb	r3, [r7, #4]
	bt_mesh_model_extensions_walk(mod, mod_sub_list_visitor, &visit_ctx);
    aaa0:	4905      	ldr	r1, [pc, #20]	; (aab8 <mod_sub_get+0xb4>)
	visit_ctx.elem_idx = mod->elem_idx;
    aaa2:	f8ad 3008 	strh.w	r3, [sp, #8]
	bt_mesh_model_extensions_walk(mod, mod_sub_list_visitor, &visit_ctx);
    aaa6:	aa02      	add	r2, sp, #8
    aaa8:	4638      	mov	r0, r7
    aaaa:	f00f fa81 	bl	19fb0 <bt_mesh_model_extensions_walk>
    aaae:	e7d6      	b.n	aa5e <mod_sub_get+0x5a>
		return -EINVAL;
    aab0:	f06f 0015 	mvn.w	r0, #21
    aab4:	e7dc      	b.n	aa70 <mod_sub_get+0x6c>
    aab6:	bf00      	nop
    aab8:	0001ae29 	.word	0x0001ae29

0000aabc <mod_sub_del_all>:
{
    aabc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((buf->len != 4U) && (buf->len != 6U)) {
    aac0:	8893      	ldrh	r3, [r2, #4]
    aac2:	f023 0302 	bic.w	r3, r3, #2
    aac6:	b29b      	uxth	r3, r3
    aac8:	2b04      	cmp	r3, #4
{
    aaca:	b086      	sub	sp, #24
    aacc:	4606      	mov	r6, r0
    aace:	460f      	mov	r7, r1
    aad0:	4614      	mov	r4, r2
	if ((buf->len != 4U) && (buf->len != 6U)) {
    aad2:	d12e      	bne.n	ab32 <mod_sub_del_all+0x76>
	elem_addr = net_buf_simple_pull_le16(buf);
    aad4:	4610      	mov	r0, r2
    aad6:	f012 fb0b 	bl	1d0f0 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
    aada:	b203      	sxth	r3, r0
    aadc:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
    aade:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
    aae0:	dd2a      	ble.n	ab38 <mod_sub_del_all+0x7c>
	mod_id = buf->data;
    aae2:	f8d4 8000 	ldr.w	r8, [r4]
	elem = bt_mesh_elem_find(elem_addr);
    aae6:	f7ff fde5 	bl	a6b4 <bt_mesh_elem_find>
	if (!elem) {
    aaea:	b9a0      	cbnz	r0, ab16 <mod_sub_del_all+0x5a>
		vnd = (buf->len == 4U);
    aaec:	88a3      	ldrh	r3, [r4, #4]
    aaee:	1f1a      	subs	r2, r3, #4
    aaf0:	4253      	negs	r3, r2
    aaf2:	4153      	adcs	r3, r2
    aaf4:	f88d 3017 	strb.w	r3, [sp, #23]
		status = STATUS_INVALID_ADDRESS;
    aaf8:	2201      	movs	r2, #1
	return send_mod_sub_status(model, ctx, status, elem_addr,
    aafa:	f89d 3017 	ldrb.w	r3, [sp, #23]
    aafe:	e9cd 8301 	strd	r8, r3, [sp, #4]
    ab02:	2300      	movs	r3, #0
    ab04:	9300      	str	r3, [sp, #0]
    ab06:	4639      	mov	r1, r7
    ab08:	462b      	mov	r3, r5
    ab0a:	4630      	mov	r0, r6
    ab0c:	f00f fbd7 	bl	1a2be <send_mod_sub_status>
}
    ab10:	b006      	add	sp, #24
    ab12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	mod = get_model(elem, buf, &vnd);
    ab16:	f10d 0217 	add.w	r2, sp, #23
    ab1a:	4621      	mov	r1, r4
    ab1c:	f00f ff49 	bl	1a9b2 <get_model>
	if (!mod) {
    ab20:	b128      	cbz	r0, ab2e <mod_sub_del_all+0x72>
	bt_mesh_model_extensions_walk(mod, mod_sub_clear_visitor, NULL);
    ab22:	2200      	movs	r2, #0
    ab24:	4906      	ldr	r1, [pc, #24]	; (ab40 <mod_sub_del_all+0x84>)
    ab26:	f00f fa43 	bl	19fb0 <bt_mesh_model_extensions_walk>
	status = STATUS_SUCCESS;
    ab2a:	2200      	movs	r2, #0
    ab2c:	e7e5      	b.n	aafa <mod_sub_del_all+0x3e>
		status = STATUS_INVALID_MODEL;
    ab2e:	2202      	movs	r2, #2
    ab30:	e7e3      	b.n	aafa <mod_sub_del_all+0x3e>
		return -EMSGSIZE;
    ab32:	f06f 0079 	mvn.w	r0, #121	; 0x79
    ab36:	e7eb      	b.n	ab10 <mod_sub_del_all+0x54>
		return -EINVAL;
    ab38:	f06f 0015 	mvn.w	r0, #21
    ab3c:	e7e8      	b.n	ab10 <mod_sub_del_all+0x54>
    ab3e:	bf00      	nop
    ab40:	0001b461 	.word	0x0001b461

0000ab44 <mod_sub_overwrite>:
{
    ab44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if ((buf->len != 6U) && (buf->len != 8U)) {
    ab48:	8893      	ldrh	r3, [r2, #4]
    ab4a:	2b06      	cmp	r3, #6
{
    ab4c:	b087      	sub	sp, #28
    ab4e:	4607      	mov	r7, r0
    ab50:	4688      	mov	r8, r1
    ab52:	4614      	mov	r4, r2
	if ((buf->len != 6U) && (buf->len != 8U)) {
    ab54:	d001      	beq.n	ab5a <mod_sub_overwrite+0x16>
    ab56:	2b08      	cmp	r3, #8
    ab58:	d13a      	bne.n	abd0 <mod_sub_overwrite+0x8c>
	elem_addr = net_buf_simple_pull_le16(buf);
    ab5a:	4620      	mov	r0, r4
    ab5c:	f012 fac8 	bl	1d0f0 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
    ab60:	b203      	sxth	r3, r0
    ab62:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
    ab64:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
    ab66:	dd36      	ble.n	abd6 <mod_sub_overwrite+0x92>
	sub_addr = net_buf_simple_pull_le16(buf);
    ab68:	4620      	mov	r0, r4
    ab6a:	f012 fac1 	bl	1d0f0 <net_buf_simple_pull_le16>
    ab6e:	4606      	mov	r6, r0
	elem = bt_mesh_elem_find(elem_addr);
    ab70:	4628      	mov	r0, r5
	mod_id = buf->data;
    ab72:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
    ab76:	f7ff fd9d 	bl	a6b4 <bt_mesh_elem_find>
	if (!elem) {
    ab7a:	b938      	cbnz	r0, ab8c <mod_sub_overwrite+0x48>
		vnd = (buf->len == 4U);
    ab7c:	88a3      	ldrh	r3, [r4, #4]
    ab7e:	1f1a      	subs	r2, r3, #4
    ab80:	4253      	negs	r3, r2
    ab82:	4153      	adcs	r3, r2
    ab84:	f88d 3017 	strb.w	r3, [sp, #23]
		status = STATUS_INVALID_ADDRESS;
    ab88:	2201      	movs	r2, #1
    ab8a:	e012      	b.n	abb2 <mod_sub_overwrite+0x6e>
	mod = get_model(elem, buf, &vnd);
    ab8c:	4621      	mov	r1, r4
    ab8e:	f10d 0217 	add.w	r2, sp, #23
    ab92:	f00f ff0e 	bl	1a9b2 <get_model>
	if (!mod) {
    ab96:	4604      	mov	r4, r0
    ab98:	b1c0      	cbz	r0, abcc <mod_sub_overwrite+0x88>
	if (!BT_MESH_ADDR_IS_GROUP(sub_addr)) {
    ab9a:	f506 4380 	add.w	r3, r6, #16384	; 0x4000
    ab9e:	b29b      	uxth	r3, r3
    aba0:	f5b3 5f7c 	cmp.w	r3, #16128	; 0x3f00
    aba4:	d8f0      	bhi.n	ab88 <mod_sub_overwrite+0x44>
		bt_mesh_model_extensions_walk(mod, mod_sub_clear_visitor, NULL);
    aba6:	2200      	movs	r2, #0
    aba8:	490c      	ldr	r1, [pc, #48]	; (abdc <mod_sub_overwrite+0x98>)
    abaa:	f00f fa01 	bl	19fb0 <bt_mesh_model_extensions_walk>
		mod->groups[0] = sub_addr;
    abae:	81e6      	strh	r6, [r4, #14]
		status = STATUS_SUCCESS;
    abb0:	2200      	movs	r2, #0
	return send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
    abb2:	f89d 3017 	ldrb.w	r3, [sp, #23]
    abb6:	9600      	str	r6, [sp, #0]
    abb8:	e9cd 9301 	strd	r9, r3, [sp, #4]
    abbc:	4641      	mov	r1, r8
    abbe:	462b      	mov	r3, r5
    abc0:	4638      	mov	r0, r7
    abc2:	f00f fb7c 	bl	1a2be <send_mod_sub_status>
}
    abc6:	b007      	add	sp, #28
    abc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		status = STATUS_INVALID_MODEL;
    abcc:	2202      	movs	r2, #2
    abce:	e7f0      	b.n	abb2 <mod_sub_overwrite+0x6e>
		return -EMSGSIZE;
    abd0:	f06f 0079 	mvn.w	r0, #121	; 0x79
    abd4:	e7f7      	b.n	abc6 <mod_sub_overwrite+0x82>
		return -EINVAL;
    abd6:	f06f 0015 	mvn.w	r0, #21
    abda:	e7f4      	b.n	abc6 <mod_sub_overwrite+0x82>
    abdc:	0001b461 	.word	0x0001b461

0000abe0 <mod_sub_va_overwrite>:
{
    abe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    abe4:	b086      	sub	sp, #24
	uint16_t elem_addr, sub_addr = BT_MESH_ADDR_UNASSIGNED;
    abe6:	2300      	movs	r3, #0
    abe8:	f8ad 3016 	strh.w	r3, [sp, #22]
	if ((buf->len != 20U) && (buf->len != 22U)) {
    abec:	8893      	ldrh	r3, [r2, #4]
    abee:	f023 0302 	bic.w	r3, r3, #2
    abf2:	b29b      	uxth	r3, r3
    abf4:	2b14      	cmp	r3, #20
{
    abf6:	4607      	mov	r7, r0
    abf8:	4688      	mov	r8, r1
    abfa:	4614      	mov	r4, r2
	if ((buf->len != 20U) && (buf->len != 22U)) {
    abfc:	d142      	bne.n	ac84 <mod_sub_va_overwrite+0xa4>
	elem_addr = net_buf_simple_pull_le16(buf);
    abfe:	4610      	mov	r0, r2
    ac00:	f012 fa76 	bl	1d0f0 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
    ac04:	b203      	sxth	r3, r0
    ac06:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
    ac08:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
    ac0a:	dd3e      	ble.n	ac8a <mod_sub_va_overwrite+0xaa>
	label_uuid = net_buf_simple_pull_mem(buf, 16);
    ac0c:	2110      	movs	r1, #16
    ac0e:	4620      	mov	r0, r4
    ac10:	f012 fa5e 	bl	1d0d0 <net_buf_simple_pull_mem>
    ac14:	4682      	mov	sl, r0
	elem = bt_mesh_elem_find(elem_addr);
    ac16:	4628      	mov	r0, r5
	mod_id = buf->data;
    ac18:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
    ac1c:	f7ff fd4a 	bl	a6b4 <bt_mesh_elem_find>
	if (!elem) {
    ac20:	b9b0      	cbnz	r0, ac50 <mod_sub_va_overwrite+0x70>
		vnd = (buf->len == 4U);
    ac22:	88a3      	ldrh	r3, [r4, #4]
    ac24:	1f1a      	subs	r2, r3, #4
    ac26:	4253      	negs	r3, r2
    ac28:	4153      	adcs	r3, r2
    ac2a:	f88d 3015 	strb.w	r3, [sp, #21]
		status = STATUS_INVALID_ADDRESS;
    ac2e:	2401      	movs	r4, #1
	return send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
    ac30:	f89d 3015 	ldrb.w	r3, [sp, #21]
    ac34:	e9cd 9301 	strd	r9, r3, [sp, #4]
    ac38:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    ac3c:	9300      	str	r3, [sp, #0]
    ac3e:	4622      	mov	r2, r4
    ac40:	462b      	mov	r3, r5
    ac42:	4641      	mov	r1, r8
    ac44:	4638      	mov	r0, r7
    ac46:	f00f fb3a 	bl	1a2be <send_mod_sub_status>
}
    ac4a:	b006      	add	sp, #24
    ac4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	mod = get_model(elem, buf, &vnd);
    ac50:	f10d 0215 	add.w	r2, sp, #21
    ac54:	4621      	mov	r1, r4
    ac56:	f00f feac 	bl	1a9b2 <get_model>
	if (!mod) {
    ac5a:	4606      	mov	r6, r0
    ac5c:	b180      	cbz	r0, ac80 <mod_sub_va_overwrite+0xa0>
		status = bt_mesh_va_add(label_uuid, &sub_addr);
    ac5e:	f10d 0116 	add.w	r1, sp, #22
    ac62:	4650      	mov	r0, sl
    ac64:	f00e ff36 	bl	19ad4 <bt_mesh_va_add>
		if (status == STATUS_SUCCESS) {
    ac68:	4604      	mov	r4, r0
    ac6a:	2800      	cmp	r0, #0
    ac6c:	d1e0      	bne.n	ac30 <mod_sub_va_overwrite+0x50>
			bt_mesh_model_extensions_walk(mod, mod_sub_clear_visitor, NULL);
    ac6e:	4602      	mov	r2, r0
    ac70:	4907      	ldr	r1, [pc, #28]	; (ac90 <mod_sub_va_overwrite+0xb0>)
    ac72:	4630      	mov	r0, r6
    ac74:	f00f f99c 	bl	19fb0 <bt_mesh_model_extensions_walk>
			mod->groups[0] = sub_addr;
    ac78:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    ac7c:	81f3      	strh	r3, [r6, #14]
			if (IS_ENABLED(CONFIG_BT_MESH_LOW_POWER)) {
    ac7e:	e7d7      	b.n	ac30 <mod_sub_va_overwrite+0x50>
		status = STATUS_INVALID_MODEL;
    ac80:	2402      	movs	r4, #2
    ac82:	e7d5      	b.n	ac30 <mod_sub_va_overwrite+0x50>
		return -EMSGSIZE;
    ac84:	f06f 0079 	mvn.w	r0, #121	; 0x79
    ac88:	e7df      	b.n	ac4a <mod_sub_va_overwrite+0x6a>
		return -EINVAL;
    ac8a:	f06f 0015 	mvn.w	r0, #21
    ac8e:	e7dc      	b.n	ac4a <mod_sub_va_overwrite+0x6a>
    ac90:	0001b461 	.word	0x0001b461

0000ac94 <bt_mesh_model_reset>:
	}
}

void bt_mesh_model_reset(void)
{
	bt_mesh_model_foreach(mod_reset, NULL);
    ac94:	4801      	ldr	r0, [pc, #4]	; (ac9c <bt_mesh_model_reset+0x8>)
    ac96:	2100      	movs	r1, #0
    ac98:	f7ff bbdc 	b.w	a454 <bt_mesh_model_foreach>
    ac9c:	0001b447 	.word	0x0001b447

0000aca0 <health_srv_init>:
		srv->cb->attn_off(srv->model);
	}
}

static int health_srv_init(struct bt_mesh_model *model)
{
    aca0:	b538      	push	{r3, r4, r5, lr}
	struct bt_mesh_health_srv *srv = model->user_data;
    aca2:	69c5      	ldr	r5, [r0, #28]
{
    aca4:	4604      	mov	r4, r0

	if (!srv) {
    aca6:	b175      	cbz	r5, acc6 <health_srv_init+0x26>
		BT_ERR("No Health Server context provided");
		return -EINVAL;
	}

	if (!model->pub) {
    aca8:	6883      	ldr	r3, [r0, #8]
    acaa:	b163      	cbz	r3, acc6 <health_srv_init+0x26>
		BT_ERR("Health Server has no publication support");
		return -EINVAL;
	}

	model->pub->update = health_pub_update;
    acac:	4a08      	ldr	r2, [pc, #32]	; (acd0 <health_srv_init+0x30>)

	k_work_init_delayable(&srv->attn_timer, attention_off);
    acae:	4909      	ldr	r1, [pc, #36]	; (acd4 <health_srv_init+0x34>)
	model->pub->update = health_pub_update;
    acb0:	615a      	str	r2, [r3, #20]
	k_work_init_delayable(&srv->attn_timer, attention_off);
    acb2:	f105 0008 	add.w	r0, r5, #8
    acb6:	f013 fd3c 	bl	1e732 <k_work_init_delayable>

	srv->model = model;
    acba:	602c      	str	r4, [r5, #0]

	if (bt_mesh_model_in_primary(model)) {
    acbc:	7920      	ldrb	r0, [r4, #4]
    acbe:	b928      	cbnz	r0, accc <health_srv_init+0x2c>
		health_srv = srv;
    acc0:	4b05      	ldr	r3, [pc, #20]	; (acd8 <health_srv_init+0x38>)
    acc2:	601d      	str	r5, [r3, #0]
	}

	return 0;
}
    acc4:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    acc6:	f06f 0015 	mvn.w	r0, #21
    acca:	e7fb      	b.n	acc4 <health_srv_init+0x24>
	return 0;
    accc:	2000      	movs	r0, #0
    acce:	e7f9      	b.n	acc4 <health_srv_init+0x24>
    acd0:	0001b9a3 	.word	0x0001b9a3
    acd4:	0001b6f7 	.word	0x0001b6f7
    acd8:	20001ac4 	.word	0x20001ac4

0000acdc <bt_mesh_attention>:
const struct bt_mesh_model_cb bt_mesh_health_srv_cb = {
	.init = health_srv_init,
};

void bt_mesh_attention(struct bt_mesh_model *model, uint8_t time)
{
    acdc:	b570      	push	{r4, r5, r6, lr}
    acde:	460c      	mov	r4, r1
	struct bt_mesh_health_srv *srv;

	if (!model) {
    ace0:	bb00      	cbnz	r0, ad24 <bt_mesh_attention+0x48>
		srv = health_srv;
    ace2:	4b12      	ldr	r3, [pc, #72]	; (ad2c <bt_mesh_attention+0x50>)
    ace4:	681d      	ldr	r5, [r3, #0]
		if (!srv) {
    ace6:	b1fd      	cbz	r5, ad28 <bt_mesh_attention+0x4c>
			BT_WARN("No Health Server available");
			return;
		}

		model = srv->model;
    ace8:	6828      	ldr	r0, [r5, #0]
	} else {
		srv = model->user_data;
	}

	if ((time > 0) && srv->cb && srv->cb->attn_on) {
    acea:	b124      	cbz	r4, acf6 <bt_mesh_attention+0x1a>
    acec:	686b      	ldr	r3, [r5, #4]
    acee:	b113      	cbz	r3, acf6 <bt_mesh_attention+0x1a>
    acf0:	691b      	ldr	r3, [r3, #16]
    acf2:	b103      	cbz	r3, acf6 <bt_mesh_attention+0x1a>
		srv->cb->attn_on(model);
    acf4:	4798      	blx	r3
	}

	k_work_reschedule(&srv->attn_timer, K_SECONDS(time));
    acf6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    acfa:	434c      	muls	r4, r1
			return ((t * to_hz + off) / from_hz);
    acfc:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    ad00:	f240 30e7 	movw	r0, #999	; 0x3e7
    ad04:	2100      	movs	r1, #0
    ad06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ad0a:	2300      	movs	r3, #0
    ad0c:	fbe4 0106 	umlal	r0, r1, r4, r6
    ad10:	f7f5 fe54 	bl	9bc <__aeabi_uldivmod>
    ad14:	4602      	mov	r2, r0
    ad16:	460b      	mov	r3, r1
    ad18:	f105 0008 	add.w	r0, r5, #8
}
    ad1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&srv->attn_timer, K_SECONDS(time));
    ad20:	f00a bed2 	b.w	15ac8 <k_work_reschedule>
		srv = model->user_data;
    ad24:	69c5      	ldr	r5, [r0, #28]
    ad26:	e7e0      	b.n	acea <bt_mesh_attention+0xe>
}
    ad28:	bd70      	pop	{r4, r5, r6, pc}
    ad2a:	bf00      	nop
    ad2c:	20001ac4 	.word	0x20001ac4

0000ad30 <adv_thread>:

	BT_DBG("Advertising stopped (%u ms)", (uint32_t) k_uptime_delta(&time));
}

static void adv_thread(void *p1, void *p2, void *p3)
{
    ad30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
		((bt_dev.hci_version >= BT_HCI_VERSION_5_0) ?
    ad34:	4e41      	ldr	r6, [pc, #260]	; (ae3c <adv_thread+0x10c>)
	ad.type = bt_mesh_adv_type[BT_MESH_ADV(buf)->type];
    ad36:	4f42      	ldr	r7, [pc, #264]	; (ae40 <adv_thread+0x110>)
{
    ad38:	b08b      	sub	sp, #44	; 0x2c

				buf = bt_mesh_adv_buf_get(SYS_TIMEOUT_MS(adv_timeout));
				bt_le_adv_stop();
			}
		} else {
			buf = bt_mesh_adv_buf_get(K_FOREVER);
    ad3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    ad3e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ad42:	f7fd f8e7 	bl	7f14 <bt_mesh_adv_buf_get>
		}

		if (!buf) {
    ad46:	4604      	mov	r4, r0
    ad48:	2800      	cmp	r0, #0
    ad4a:	d0f6      	beq.n	ad3a <adv_thread+0xa>
			continue;
		}

		/* busy == 0 means this was canceled */
		if (BT_MESH_ADV(buf)->busy) {
    ad4c:	6942      	ldr	r2, [r0, #20]
    ad4e:	7a13      	ldrb	r3, [r2, #8]
    ad50:	0719      	lsls	r1, r3, #28
    ad52:	d566      	bpl.n	ae22 <adv_thread+0xf2>
			BT_MESH_ADV(buf)->busy = 0U;
    ad54:	f36f 03c3 	bfc	r3, #3, #1
    ad58:	7213      	strb	r3, [r2, #8]
			       ADV_INT_FAST_MS :
    ad5a:	f896 3068 	ldrb.w	r3, [r6, #104]	; 0x68
	struct bt_le_adv_param param = {};
    ad5e:	2214      	movs	r2, #20
			       ADV_INT_FAST_MS :
    ad60:	2b08      	cmp	r3, #8
	struct bt_le_adv_param param = {};
    ad62:	eb0d 0002 	add.w	r0, sp, r2
    ad66:	f04f 0100 	mov.w	r1, #0
			       ADV_INT_FAST_MS :
    ad6a:	bf8c      	ite	hi
    ad6c:	f04f 0814 	movhi.w	r8, #20
    ad70:	f04f 0864 	movls.w	r8, #100	; 0x64
	struct bt_le_adv_param param = {};
    ad74:	f00c fa79 	bl	1726a <memset>
	adv_int = MAX(adv_int_min,
    ad78:	6961      	ldr	r1, [r4, #20]
    ad7a:	7a4d      	ldrb	r5, [r1, #9]
    ad7c:	08ea      	lsrs	r2, r5, #3
    ad7e:	1c53      	adds	r3, r2, #1
    ad80:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    ad84:	ebb8 0f42 	cmp.w	r8, r2, lsl #1
    ad88:	bfda      	itte	le
    ad8a:	4613      	movle	r3, r2
    ad8c:	005b      	lslle	r3, r3, #1
    ad8e:	fa1f f388 	uxthgt.w	r3, r8
	duration = adv_int +
    ad92:	f005 0207 	and.w	r2, r5, #7
    ad96:	f103 050a 	add.w	r5, r3, #10
    ad9a:	fb02 5505 	mla	r5, r2, r5, r5
	ad.type = bt_mesh_adv_type[BT_MESH_ADV(buf)->type];
    ad9e:	7a0a      	ldrb	r2, [r1, #8]
    ada0:	f002 0203 	and.w	r2, r2, #3
	duration = adv_int +
    ada4:	441d      	add	r5, r3
	ad.type = bt_mesh_adv_type[BT_MESH_ADV(buf)->type];
    ada6:	5cba      	ldrb	r2, [r7, r2]
    ada8:	f88d 200c 	strb.w	r2, [sp, #12]
	ad.data_len = buf->len;
    adac:	89a2      	ldrh	r2, [r4, #12]
    adae:	f88d 200d 	strb.w	r2, [sp, #13]
	ad.data = buf->data;
    adb2:	68a2      	ldr	r2, [r4, #8]
    adb4:	9204      	str	r2, [sp, #16]
	duration = adv_int +
    adb6:	b2ad      	uxth	r5, r5
	param.interval_min = BT_MESH_ADV_SCAN_UNIT(adv_int);
    adb8:	2205      	movs	r2, #5
    adba:	00db      	lsls	r3, r3, #3
    adbc:	fbb3 f3f2 	udiv	r3, r3, r2
	param.interval_max = param.interval_min;
    adc0:	e9cd 3307 	strd	r3, r3, [sp, #28]
    adc4:	f013 fe43 	bl	1ea4e <z_impl_k_uptime_ticks>
	err = bt_le_adv_start(&param, &ad, 1, NULL, 0);
    adc8:	2300      	movs	r3, #0
    adca:	9300      	str	r3, [sp, #0]
    adcc:	2201      	movs	r2, #1
    adce:	a903      	add	r1, sp, #12
    add0:	a805      	add	r0, sp, #20
    add2:	f7fa fdc3 	bl	595c <bt_le_adv_start>
	bt_mesh_adv_send_start(duration, err, BT_MESH_ADV(buf));
    add6:	f8d4 9014 	ldr.w	r9, [r4, #20]
			   const struct bt_data *sd, size_t sd_len);

static inline void bt_mesh_adv_send_start(uint16_t duration, int err,
					  struct bt_mesh_adv *adv)
{
	if (!adv->started) {
    adda:	f899 3008 	ldrb.w	r3, [r9, #8]
    adde:	075a      	lsls	r2, r3, #29
	err = bt_le_adv_start(&param, &ad, 1, NULL, 0);
    ade0:	4680      	mov	r8, r0
    ade2:	d428      	bmi.n	ae36 <adv_thread+0x106>
		adv->started = 1;
    ade4:	f043 0304 	orr.w	r3, r3, #4
    ade8:	f889 3008 	strb.w	r3, [r9, #8]

		if (adv->cb && adv->cb->start) {
    adec:	f8d9 3000 	ldr.w	r3, [r9]
    adf0:	b133      	cbz	r3, ae00 <adv_thread+0xd0>
    adf2:	681b      	ldr	r3, [r3, #0]
    adf4:	b123      	cbz	r3, ae00 <adv_thread+0xd0>
			adv->cb->start(duration, err, adv->cb_data);
    adf6:	4601      	mov	r1, r0
    adf8:	f8d9 2004 	ldr.w	r2, [r9, #4]
    adfc:	4628      	mov	r0, r5
    adfe:	4798      	blx	r3
		}

		if (err) {
    ae00:	f1b8 0f00 	cmp.w	r8, #0
    ae04:	d113      	bne.n	ae2e <adv_thread+0xfe>
    ae06:	f240 30e7 	movw	r0, #999	; 0x3e7
    ae0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ae0e:	2300      	movs	r3, #0
    ae10:	eb00 30c5 	add.w	r0, r0, r5, lsl #15
    ae14:	2100      	movs	r1, #0
    ae16:	f7f5 fdd1 	bl	9bc <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
    ae1a:	f00b f8e9 	bl	15ff0 <z_impl_k_sleep>
	err = bt_le_adv_stop();
    ae1e:	f7fa fdcf 	bl	59c0 <bt_le_adv_stop>
			adv_send(buf);
		}

		net_buf_unref(buf);
    ae22:	4620      	mov	r0, r4
    ae24:	f007 fa34 	bl	12290 <net_buf_unref>
	z_impl_k_yield();
    ae28:	f00b f85a 	bl	15ee0 <z_impl_k_yield>
}
    ae2c:	e785      	b.n	ad3a <adv_thread+0xa>
			adv->cb = NULL;
    ae2e:	2300      	movs	r3, #0
    ae30:	f8c9 3000 	str.w	r3, [r9]
	if (err) {
    ae34:	e7f5      	b.n	ae22 <adv_thread+0xf2>
    ae36:	2800      	cmp	r0, #0
    ae38:	d1f3      	bne.n	ae22 <adv_thread+0xf2>
    ae3a:	e7e4      	b.n	ae06 <adv_thread+0xd6>
    ae3c:	20000080 	.word	0x20000080
    ae40:	00020342 	.word	0x00020342

0000ae44 <bt_mesh_adv_init>:
{
	bt_mesh_adv_buf_get_cancel();
}

void bt_mesh_adv_init(void)
{
    ae44:	b510      	push	{r4, lr}
    ae46:	b088      	sub	sp, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    ae48:	4c0e      	ldr	r4, [pc, #56]	; (ae84 <bt_mesh_adv_init+0x40>)
    ae4a:	490f      	ldr	r1, [pc, #60]	; (ae88 <bt_mesh_adv_init+0x44>)
    ae4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ae50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ae54:	e9cd 2306 	strd	r2, r3, [sp, #24]
    ae58:	2300      	movs	r3, #0
    ae5a:	f06f 0208 	mvn.w	r2, #8
    ae5e:	e9cd 2303 	strd	r2, r3, [sp, #12]
    ae62:	e9cd 3301 	strd	r3, r3, [sp, #4]
    ae66:	9300      	str	r3, [sp, #0]
    ae68:	f44f 7240 	mov.w	r2, #768	; 0x300
    ae6c:	4b07      	ldr	r3, [pc, #28]	; (ae8c <bt_mesh_adv_init+0x48>)
    ae6e:	4620      	mov	r0, r4
    ae70:	f00a fb4a 	bl	15508 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    ae74:	4906      	ldr	r1, [pc, #24]	; (ae90 <bt_mesh_adv_init+0x4c>)
    ae76:	4620      	mov	r0, r4
	k_thread_create(&adv_thread_data, adv_thread_stack,
			K_KERNEL_STACK_SIZEOF(adv_thread_stack), adv_thread,
			NULL, NULL, NULL, K_PRIO_COOP(CONFIG_BT_MESH_ADV_PRIO),
			0, K_FOREVER);
	k_thread_name_set(&adv_thread_data, "BT Mesh adv");
}
    ae78:	b008      	add	sp, #32
    ae7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ae7e:	f013 bac9 	b.w	1e414 <z_impl_k_thread_name_set>
    ae82:	bf00      	nop
    ae84:	200012f8 	.word	0x200012f8
    ae88:	20003680 	.word	0x20003680
    ae8c:	0000ad31 	.word	0x0000ad31
    ae90:	0002036b 	.word	0x0002036b

0000ae94 <bt_mesh_adv_enable>:

int bt_mesh_adv_enable(void)
{
    ae94:	b508      	push	{r3, lr}
	z_impl_k_thread_start(thread);
    ae96:	4802      	ldr	r0, [pc, #8]	; (aea0 <bt_mesh_adv_enable+0xc>)
    ae98:	f013 fabf 	bl	1e41a <z_impl_k_thread_start>
	k_thread_start(&adv_thread_data);
	return 0;
}
    ae9c:	2000      	movs	r0, #0
    ae9e:	bd08      	pop	{r3, pc}
    aea0:	200012f8 	.word	0x200012f8

0000aea4 <mayfly_init>:
#if defined(MAYFLY_UT)
static uint8_t _state;
#endif /* MAYFLY_UT */

void mayfly_init(void)
{
    aea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (callee_id--) {
		uint8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(&mfl[callee_id][caller_id],
    aea8:	4f11      	ldr	r7, [pc, #68]	; (aef0 <mayfly_init+0x4c>)
    aeaa:	f8df a048 	ldr.w	sl, [pc, #72]	; aef4 <mayfly_init+0x50>
	callee_id = MAYFLY_CALLEE_COUNT;
    aeae:	2404      	movs	r4, #4
	while (callee_id--) {
    aeb0:	3c01      	subs	r4, #1
    aeb2:	b2e4      	uxtb	r4, r4
    aeb4:	2cff      	cmp	r4, #255	; 0xff
    aeb6:	d018      	beq.n	aeea <mayfly_init+0x46>
    aeb8:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    aebc:	ea4f 0984 	mov.w	r9, r4, lsl #2
    aec0:	0136      	lsls	r6, r6, #4
		caller_id = MAYFLY_CALLER_COUNT;
    aec2:	2504      	movs	r5, #4
    aec4:	f04f 080c 	mov.w	r8, #12
    aec8:	e00a      	b.n	aee0 <mayfly_init+0x3c>
			memq_init(&mfl[callee_id][caller_id],
    aeca:	fb18 6105 	smlabb	r1, r8, r5, r6
    aece:	1d0a      	adds	r2, r1, #4
    aed0:	eb05 0009 	add.w	r0, r5, r9
    aed4:	443a      	add	r2, r7
    aed6:	4439      	add	r1, r7
    aed8:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
    aedc:	f010 fe49 	bl	1bb72 <memq_init>
		while (caller_id--) {
    aee0:	3d01      	subs	r5, #1
    aee2:	b2ed      	uxtb	r5, r5
    aee4:	2dff      	cmp	r5, #255	; 0xff
    aee6:	d1f0      	bne.n	aeca <mayfly_init+0x26>
    aee8:	e7e2      	b.n	aeb0 <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
    aeea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    aeee:	bf00      	nop
    aef0:	20001b48 	.word	0x20001b48
    aef4:	20001ac8 	.word	0x20001ac8

0000aef8 <mayfly_enable>:

void mayfly_enable(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
    aef8:	b4f0      	push	{r4, r5, r6, r7}
    aefa:	4b14      	ldr	r3, [pc, #80]	; (af4c <mayfly_enable+0x54>)
    aefc:	4607      	mov	r7, r0
    aefe:	460e      	mov	r6, r1
    af00:	f04f 0c0c 	mov.w	ip, #12
    af04:	2430      	movs	r4, #48	; 0x30
	if (enable) {
    af06:	b17a      	cbz	r2, af28 <mayfly_enable+0x30>
		if (mft[callee_id][caller_id].enable_req ==
    af08:	fb04 f501 	mul.w	r5, r4, r1
    af0c:	fb0c 5500 	mla	r5, ip, r0, r5
    af10:	442b      	add	r3, r5
    af12:	7a59      	ldrb	r1, [r3, #9]
    af14:	7a18      	ldrb	r0, [r3, #8]
    af16:	4281      	cmp	r1, r0
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    af18:	bf04      	itt	eq
    af1a:	3101      	addeq	r1, #1
    af1c:	7219      	strbeq	r1, [r3, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    af1e:	4638      	mov	r0, r7
    af20:	4631      	mov	r1, r6

			/* pend the callee for execution */
			mayfly_pend(caller_id, callee_id);
		}
	}
}
    af22:	bcf0      	pop	{r4, r5, r6, r7}
		mayfly_enable_cb(caller_id, callee_id, enable);
    af24:	f006 bffe 	b.w	11f24 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    af28:	434c      	muls	r4, r1
    af2a:	fb0c 4400 	mla	r4, ip, r0, r4
    af2e:	4423      	add	r3, r4
    af30:	7a9c      	ldrb	r4, [r3, #10]
    af32:	7ada      	ldrb	r2, [r3, #11]
    af34:	42a2      	cmp	r2, r4
    af36:	d107      	bne.n	af48 <mayfly_enable+0x50>
			mft[callee_id][caller_id].disable_req++;
    af38:	3201      	adds	r2, #1
    af3a:	729a      	strb	r2, [r3, #10]
			mfp[callee_id] = 1U;
    af3c:	4b04      	ldr	r3, [pc, #16]	; (af50 <mayfly_enable+0x58>)
    af3e:	2201      	movs	r2, #1
    af40:	545a      	strb	r2, [r3, r1]
}
    af42:	bcf0      	pop	{r4, r5, r6, r7}
			mayfly_pend(caller_id, callee_id);
    af44:	f007 b82e 	b.w	11fa4 <mayfly_pend>
}
    af48:	bcf0      	pop	{r4, r5, r6, r7}
    af4a:	4770      	bx	lr
    af4c:	20001b48 	.word	0x20001b48
    af50:	20002b2e 	.word	0x20002b2e

0000af54 <mayfly_enqueue>:

uint32_t mayfly_enqueue(uint8_t caller_id, uint8_t callee_id, uint8_t chain,
			struct mayfly *m)
{
    af54:	b570      	push	{r4, r5, r6, lr}
    af56:	4606      	mov	r6, r0
    af58:	460d      	mov	r5, r1
    af5a:	461c      	mov	r4, r3
	uint8_t state;
	uint8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    af5c:	b1a2      	cbz	r2, af88 <mayfly_enqueue+0x34>
    af5e:	2301      	movs	r3, #1
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
    af60:	7862      	ldrb	r2, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    af62:	7820      	ldrb	r0, [r4, #0]
    af64:	1a80      	subs	r0, r0, r2
	if (state != 0U) {
    af66:	f010 0003 	ands.w	r0, r0, #3
    af6a:	d02c      	beq.n	afc6 <mayfly_enqueue+0x72>
		if (chain) {
    af6c:	b31b      	cbz	r3, afb6 <mayfly_enqueue+0x62>
			if (state != 1U) {
    af6e:	2801      	cmp	r0, #1
    af70:	d028      	beq.n	afc4 <mayfly_enqueue+0x70>
				/* mark as ready in queue */
				m->_req = ack + 1;
    af72:	3201      	adds	r2, #1
    af74:	b2d2      	uxtb	r2, r2
    af76:	7022      	strb	r2, [r4, #0]
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);

mayfly_enqueue_pend:
	/* set mayfly callee pending */
	mfp[callee_id] = 1U;
    af78:	4b1c      	ldr	r3, [pc, #112]	; (afec <mayfly_enqueue+0x98>)
    af7a:	2201      	movs	r2, #1
    af7c:	555a      	strb	r2, [r3, r5]

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    af7e:	4629      	mov	r1, r5
    af80:	4630      	mov	r0, r6
    af82:	f007 f80f 	bl	11fa4 <mayfly_pend>
    af86:	e01c      	b.n	afc2 <mayfly_enqueue+0x6e>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    af88:	f011 fef9 	bl	1cd7e <mayfly_prio_is_equal>
    af8c:	2800      	cmp	r0, #0
    af8e:	d0e6      	beq.n	af5e <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
    af90:	4629      	mov	r1, r5
    af92:	4630      	mov	r0, r6
    af94:	f006 ffe6 	bl	11f64 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    af98:	2800      	cmp	r0, #0
    af9a:	d0e0      	beq.n	af5e <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
    af9c:	2330      	movs	r3, #48	; 0x30
    af9e:	220c      	movs	r2, #12
    afa0:	436b      	muls	r3, r5
    afa2:	fb02 3306 	mla	r3, r2, r6, r3
    afa6:	4a12      	ldr	r2, [pc, #72]	; (aff0 <mayfly_enqueue+0x9c>)
    afa8:	441a      	add	r2, r3
		!mayfly_is_enabled(caller_id, callee_id) ||
    afaa:	7a93      	ldrb	r3, [r2, #10]
    afac:	7ad2      	ldrb	r2, [r2, #11]
    afae:	1a9b      	subs	r3, r3, r2
    afb0:	bf18      	it	ne
    afb2:	2301      	movne	r3, #1
    afb4:	e7d4      	b.n	af60 <mayfly_enqueue+0xc>
		m->_req = ack + 2;
    afb6:	3202      	adds	r2, #2
    afb8:	b2d2      	uxtb	r2, r2
    afba:	7022      	strb	r2, [r4, #0]
		m->fp(m->param);
    afbc:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
    afc0:	4798      	blx	r3

	return 0;
    afc2:	2000      	movs	r0, #0
}
    afc4:	bd70      	pop	{r4, r5, r6, pc}
	if (!chain) {
    afc6:	2b00      	cmp	r3, #0
    afc8:	d0f8      	beq.n	afbc <mayfly_enqueue+0x68>
	m->_req = ack + 1;
    afca:	3201      	adds	r2, #1
    afcc:	b2d2      	uxtb	r2, r2
    afce:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    afd0:	2304      	movs	r3, #4
    afd2:	2230      	movs	r2, #48	; 0x30
    afd4:	fb12 3205 	smlabb	r2, r2, r5, r3
    afd8:	230c      	movs	r3, #12
    afda:	fb13 2306 	smlabb	r3, r3, r6, r2
    afde:	4a04      	ldr	r2, [pc, #16]	; (aff0 <mayfly_enqueue+0x9c>)
    afe0:	6860      	ldr	r0, [r4, #4]
    afe2:	441a      	add	r2, r3
    afe4:	4621      	mov	r1, r4
    afe6:	f010 fdd2 	bl	1bb8e <memq_enqueue>
    afea:	e7c5      	b.n	af78 <mayfly_enqueue+0x24>
    afec:	20002b2e 	.word	0x20002b2e
    aff0:	20001b48 	.word	0x20001b48

0000aff4 <mayfly_run>:
		}
	}
}

void mayfly_run(uint8_t callee_id)
{
    aff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t disable = 0U;
	uint8_t enable = 0U;
	uint8_t caller_id;

	if (!mfp[callee_id]) {
    aff8:	4b55      	ldr	r3, [pc, #340]	; (b150 <mayfly_run+0x15c>)
    affa:	5c1a      	ldrb	r2, [r3, r0]
{
    affc:	b089      	sub	sp, #36	; 0x24
    affe:	4604      	mov	r4, r0
	if (!mfp[callee_id]) {
    b000:	2a00      	cmp	r2, #0
    b002:	f000 809e 	beq.w	b142 <mayfly_run+0x14e>
		return;
	}
	mfp[callee_id] = 0U;
    b006:	f04f 0800 	mov.w	r8, #0
    b00a:	f803 8000 	strb.w	r8, [r3, r0]

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
    b00e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    b012:	011b      	lsls	r3, r3, #4
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    b014:	4e4f      	ldr	r6, [pc, #316]	; (b154 <mayfly_run+0x160>)
    b016:	9304      	str	r3, [sp, #16]
    b018:	2504      	movs	r5, #4
    b01a:	233c      	movs	r3, #60	; 0x3c
    b01c:	fb13 5300 	smlabb	r3, r3, r0, r5
    b020:	18f3      	adds	r3, r6, r3
    b022:	9303      	str	r3, [sp, #12]
	uint8_t disable = 0U;
    b024:	46c3      	mov	fp, r8
	while (caller_id--) {
    b026:	3d01      	subs	r5, #1
    b028:	b2ed      	uxtb	r5, r5
    b02a:	2dff      	cmp	r5, #255	; 0xff
    b02c:	d10f      	bne.n	b04e <mayfly_run+0x5a>
			mft[callee_id][caller_id].enable_ack =
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    b02e:	f1bb 0f00 	cmp.w	fp, #0
    b032:	f000 8086 	beq.w	b142 <mayfly_run+0x14e>
    b036:	f1b8 0f00 	cmp.w	r8, #0
    b03a:	f040 8082 	bne.w	b142 <mayfly_run+0x14e>
		mayfly_enable_cb(callee_id, callee_id, 0);
    b03e:	4642      	mov	r2, r8
    b040:	4621      	mov	r1, r4
    b042:	4620      	mov	r0, r4
	}
}
    b044:	b009      	add	sp, #36	; 0x24
    b046:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		mayfly_enable_cb(callee_id, callee_id, 0);
    b04a:	f006 bf6b 	b.w	11f24 <mayfly_enable_cb>
		struct mayfly *m = 0;
    b04e:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
    b050:	f04f 090c 	mov.w	r9, #12
		struct mayfly *m = 0;
    b054:	9307      	str	r3, [sp, #28]
		link = memq_peek(mft[callee_id][caller_id].head,
    b056:	fb09 fa05 	mul.w	sl, r9, r5
    b05a:	2330      	movs	r3, #48	; 0x30
    b05c:	fb03 a304 	mla	r3, r3, r4, sl
    b060:	18f1      	adds	r1, r6, r3
    b062:	58f0      	ldr	r0, [r6, r3]
    b064:	6849      	ldr	r1, [r1, #4]
    b066:	aa07      	add	r2, sp, #28
    b068:	f010 fd98 	bl	1bb9c <memq_peek>
		memq_dequeue(mft[callee_id][caller_id].tail,
    b06c:	9b04      	ldr	r3, [sp, #16]
    b06e:	fb19 3905 	smlabb	r9, r9, r5, r3
    b072:	eb06 0309 	add.w	r3, r6, r9
		link = memq_peek(mft[callee_id][caller_id].head,
    b076:	4607      	mov	r7, r0
		memq_dequeue(mft[callee_id][caller_id].tail,
    b078:	9302      	str	r3, [sp, #8]
		while (link) {
    b07a:	2f00      	cmp	r7, #0
    b07c:	d043      	beq.n	b106 <mayfly_run+0x112>
			state = (m->_req - m->_ack) & 0x03;
    b07e:	9b07      	ldr	r3, [sp, #28]
    b080:	f893 9000 	ldrb.w	r9, [r3]
    b084:	785a      	ldrb	r2, [r3, #1]
    b086:	eba9 0902 	sub.w	r9, r9, r2
    b08a:	f009 0903 	and.w	r9, r9, #3
			if (state == 1U) {
    b08e:	f1b9 0f01 	cmp.w	r9, #1
    b092:	d104      	bne.n	b09e <mayfly_run+0xaa>
				m->_ack--;
    b094:	3a01      	subs	r2, #1
    b096:	705a      	strb	r2, [r3, #1]
				m->fp(m->param);
    b098:	e9d3 0202 	ldrd	r0, r2, [r3, #8]
    b09c:	4790      	blx	r2
			dequeue(callee_id, caller_id, link, m);
    b09e:	9b07      	ldr	r3, [sp, #28]
	if (((req - m->_ack) & 0x03) != 1U) {
    b0a0:	9305      	str	r3, [sp, #20]
	req = m->_req;
    b0a2:	781a      	ldrb	r2, [r3, #0]
    b0a4:	b2d1      	uxtb	r1, r2
    b0a6:	9101      	str	r1, [sp, #4]
	if (((req - m->_ack) & 0x03) != 1U) {
    b0a8:	7859      	ldrb	r1, [r3, #1]
    b0aa:	1a52      	subs	r2, r2, r1
    b0ac:	f002 0203 	and.w	r2, r2, #3
    b0b0:	2a01      	cmp	r2, #1
    b0b2:	d019      	beq.n	b0e8 <mayfly_run+0xf4>
		memq_dequeue(mft[callee_id][caller_id].tail,
    b0b4:	2030      	movs	r0, #48	; 0x30
    b0b6:	fb00 a004 	mla	r0, r0, r4, sl
    b0ba:	4430      	add	r0, r6
    b0bc:	9902      	ldr	r1, [sp, #8]
    b0be:	6840      	ldr	r0, [r0, #4]
    b0c0:	2200      	movs	r2, #0
    b0c2:	f010 fd73 	bl	1bbac <memq_dequeue>
		m->_link = link;
    b0c6:	9b05      	ldr	r3, [sp, #20]
		m->_ack = req;
    b0c8:	9a01      	ldr	r2, [sp, #4]
		ack = m->_ack;
    b0ca:	7859      	ldrb	r1, [r3, #1]
		m->_ack = req;
    b0cc:	705a      	strb	r2, [r3, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
    b0ce:	781a      	ldrb	r2, [r3, #0]
		m->_link = link;
    b0d0:	605f      	str	r7, [r3, #4]
		if (((m->_req - ack) & 0x03) == 1U) {
    b0d2:	1a52      	subs	r2, r2, r1
    b0d4:	f002 0203 	and.w	r2, r2, #3
    b0d8:	2a01      	cmp	r2, #1
    b0da:	d105      	bne.n	b0e8 <mayfly_run+0xf4>
			m->_ack = ack;
    b0dc:	7059      	strb	r1, [r3, #1]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    b0de:	9a03      	ldr	r2, [sp, #12]
    b0e0:	4619      	mov	r1, r3
    b0e2:	4638      	mov	r0, r7
    b0e4:	f010 fd53 	bl	1bb8e <memq_enqueue>
			link = memq_peek(mft[callee_id][caller_id].head,
    b0e8:	2330      	movs	r3, #48	; 0x30
    b0ea:	fb03 a304 	mla	r3, r3, r4, sl
    b0ee:	18f1      	adds	r1, r6, r3
    b0f0:	58f0      	ldr	r0, [r6, r3]
    b0f2:	6849      	ldr	r1, [r1, #4]
    b0f4:	aa07      	add	r2, sp, #28
    b0f6:	f010 fd51 	bl	1bb9c <memq_peek>
			if (state == 1U) {
    b0fa:	f1b9 0f01 	cmp.w	r9, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    b0fe:	4607      	mov	r7, r0
			if (state == 1U) {
    b100:	d1bb      	bne.n	b07a <mayfly_run+0x86>
				if (caller_id || link) {
    b102:	b9bd      	cbnz	r5, b134 <mayfly_run+0x140>
    b104:	b9b0      	cbnz	r0, b134 <mayfly_run+0x140>
		if (mft[callee_id][caller_id].disable_req !=
    b106:	2230      	movs	r2, #48	; 0x30
    b108:	210c      	movs	r1, #12
    b10a:	4362      	muls	r2, r4
    b10c:	fb01 2205 	mla	r2, r1, r5, r2
    b110:	4432      	add	r2, r6
    b112:	7a93      	ldrb	r3, [r2, #10]
    b114:	7ad0      	ldrb	r0, [r2, #11]
    b116:	4298      	cmp	r0, r3
    b118:	d116      	bne.n	b148 <mayfly_run+0x154>
		if (mft[callee_id][caller_id].enable_req !=
    b11a:	2330      	movs	r3, #48	; 0x30
    b11c:	4363      	muls	r3, r4
    b11e:	fb01 3305 	mla	r3, r1, r5, r3
    b122:	4433      	add	r3, r6
    b124:	7a1a      	ldrb	r2, [r3, #8]
    b126:	7a59      	ldrb	r1, [r3, #9]
    b128:	4291      	cmp	r1, r2
			mft[callee_id][caller_id].enable_ack =
    b12a:	bf1c      	itt	ne
    b12c:	725a      	strbne	r2, [r3, #9]
			enable = 1U;
    b12e:	f04f 0801 	movne.w	r8, #1
    b132:	e778      	b.n	b026 <mayfly_run+0x32>
					mfp[callee_id] = 1U;
    b134:	4b06      	ldr	r3, [pc, #24]	; (b150 <mayfly_run+0x15c>)
    b136:	2201      	movs	r2, #1
    b138:	551a      	strb	r2, [r3, r4]
					mayfly_pend(callee_id, callee_id);
    b13a:	4621      	mov	r1, r4
    b13c:	4620      	mov	r0, r4
    b13e:	f006 ff31 	bl	11fa4 <mayfly_pend>
}
    b142:	b009      	add	sp, #36	; 0x24
    b144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mft[callee_id][caller_id].disable_ack =
    b148:	72d3      	strb	r3, [r2, #11]
			disable = 1U;
    b14a:	f04f 0b01 	mov.w	fp, #1
    b14e:	e7e4      	b.n	b11a <mayfly_run+0x126>
    b150:	20002b2e 	.word	0x20002b2e
    b154:	20001b48 	.word	0x20001b48

0000b158 <ticker_job>:
 * @param param Pointer to ticker instance
 *
 * @internal
 */
void ticker_job(void *param)
{
    b158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t flag_compare_update;

	DEBUG_TICKER_JOB(1);

	/* Defer job, as worker is running */
	if (instance->worker_trigger) {
    b15c:	7fc3      	ldrb	r3, [r0, #31]
{
    b15e:	b08b      	sub	sp, #44	; 0x2c
    b160:	4604      	mov	r4, r0
	if (instance->worker_trigger) {
    b162:	2b00      	cmp	r3, #0
    b164:	f040 83bd 	bne.w	b8e2 <ticker_job+0x78a>
		DEBUG_TICKER_JOB(0);
		return;
	}

	/* Defer job, as job is already running */
	if (instance->job_guard) {
    b168:	7f82      	ldrb	r2, [r0, #30]
    b16a:	b14a      	cbz	r2, b180 <ticker_job+0x28>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_JOB, 1,
    b16c:	6a45      	ldr	r5, [r0, #36]	; 0x24
    b16e:	4603      	mov	r3, r0
    b170:	2201      	movs	r2, #1
    b172:	2104      	movs	r1, #4
	/* Permit worker to run */
	instance->job_guard = 0U;

	/* trigger worker if deferred */
	if (instance->worker_trigger) {
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    b174:	2004      	movs	r0, #4
    b176:	46ac      	mov	ip, r5
				   instance);
	}

	DEBUG_TICKER_JOB(0);
}
    b178:	b00b      	add	sp, #44	; 0x2c
    b17a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    b17e:	4760      	bx	ip
	ticks_previous = instance->ticks_current;
    b180:	6943      	ldr	r3, [r0, #20]
    b182:	9304      	str	r3, [sp, #16]
	instance->job_guard = 1U;
    b184:	2101      	movs	r1, #1
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    b186:	7a83      	ldrb	r3, [r0, #10]
	instance->job_guard = 1U;
    b188:	7781      	strb	r1, [r0, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    b18a:	7ac0      	ldrb	r0, [r0, #11]
    b18c:	4298      	cmp	r0, r3
    b18e:	d057      	beq.n	b240 <ticker_job+0xe8>
	uint8_t idx = *ticks_elapsed_index + 1;
    b190:	440b      	add	r3, r1
    b192:	b2db      	uxtb	r3, r3
		idx = 0U;
    b194:	2b02      	cmp	r3, #2
    b196:	bf08      	it	eq
    b198:	2300      	moveq	r3, #0
	*ticks_elapsed_index = idx;
    b19a:	72a3      	strb	r3, [r4, #10]
		ticks_elapsed =
    b19c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
		flag_elapsed = 1U;
    b1a0:	9101      	str	r1, [sp, #4]
		ticks_elapsed =
    b1a2:	68db      	ldr	r3, [r3, #12]
    b1a4:	9300      	str	r3, [sp, #0]
		instance->ticks_current += ticks_elapsed;
    b1a6:	9a00      	ldr	r2, [sp, #0]
    b1a8:	9b04      	ldr	r3, [sp, #16]
    b1aa:	4413      	add	r3, r2
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
    b1ac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    b1b0:	6163      	str	r3, [r4, #20]
	ticker_id_old_head = instance->ticker_id_head;
    b1b2:	7f63      	ldrb	r3, [r4, #29]
    b1b4:	9303      	str	r3, [sp, #12]
	node = &instance->nodes[0];
    b1b6:	6823      	ldr	r3, [r4, #0]
    b1b8:	9302      	str	r3, [sp, #8]
	users = &instance->users[0];
    b1ba:	6863      	ldr	r3, [r4, #4]
    b1bc:	9308      	str	r3, [sp, #32]
	while (count_user--) {
    b1be:	7a63      	ldrb	r3, [r4, #9]
    b1c0:	3b01      	subs	r3, #1
    b1c2:	fa5f fb83 	uxtb.w	fp, r3
	pending = 0U;
    b1c6:	2300      	movs	r3, #0
    b1c8:	9305      	str	r3, [sp, #20]
	insert_head = TICKER_NULL;
    b1ca:	f04f 09ff 	mov.w	r9, #255	; 0xff
	while (count_user--) {
    b1ce:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
    b1d2:	d138      	bne.n	b246 <ticker_job+0xee>
	if (instance->ticker_id_head != ticker_id_old_head) {
    b1d4:	7f63      	ldrb	r3, [r4, #29]
		flag_compare_update = 1U;
    b1d6:	9a03      	ldr	r2, [sp, #12]
    b1d8:	1a9b      	subs	r3, r3, r2
    b1da:	bf18      	it	ne
    b1dc:	2301      	movne	r3, #1
    b1de:	9302      	str	r3, [sp, #8]
	if (flag_elapsed) {
    b1e0:	9b01      	ldr	r3, [sp, #4]
    b1e2:	2b00      	cmp	r3, #0
    b1e4:	f000 8223 	beq.w	b62e <ticker_job+0x4d6>
	ticks_now = cntr_cnt_get();
    b1e8:	f006 faf4 	bl	117d4 <cntr_cnt_get>
 * @param ticks_now Highest tick count (now)
 * @param ticks_old Tick count to subtract from ticks_now
 */
uint32_t ticker_ticks_diff_get(uint32_t ticks_now, uint32_t ticks_old)
{
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    b1ec:	9b04      	ldr	r3, [sp, #16]
	while (instance->ticker_id_head != TICKER_NULL) {
    b1ee:	9f00      	ldr	r7, [sp, #0]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    b1f0:	eba0 0b03 	sub.w	fp, r0, r3
	node = &instance->nodes[0];
    b1f4:	6823      	ldr	r3, [r4, #0]
    b1f6:	9306      	str	r3, [sp, #24]
	ticks_expired = 0U;
    b1f8:	2300      	movs	r3, #0
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    b1fa:	f02b 4b7f 	bic.w	fp, fp, #4278190080	; 0xff000000
	ticks_expired = 0U;
    b1fe:	9307      	str	r3, [sp, #28]
	while (instance->ticker_id_head != TICKER_NULL) {
    b200:	7f66      	ldrb	r6, [r4, #29]
    b202:	2eff      	cmp	r6, #255	; 0xff
    b204:	d00d      	beq.n	b222 <ticker_job+0xca>
		ticker = &node[id_expired];
    b206:	b235      	sxth	r5, r6
    b208:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    b20c:	012b      	lsls	r3, r5, #4
    b20e:	9308      	str	r3, [sp, #32]
    b210:	9b06      	ldr	r3, [sp, #24]
    b212:	eb03 1505 	add.w	r5, r3, r5, lsl #4
		ticks_to_expire = ticker->ticks_to_expire;
    b216:	68ab      	ldr	r3, [r5, #8]
		if (ticks_elapsed < ticks_to_expire) {
    b218:	42bb      	cmp	r3, r7
    b21a:	f240 80c8 	bls.w	b3ae <ticker_job+0x256>
			ticker->ticks_to_expire -= ticks_elapsed;
    b21e:	1bdb      	subs	r3, r3, r7
    b220:	60ab      	str	r3, [r5, #8]
			flag_compare_update = 1U;
    b222:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
    b226:	9903      	ldr	r1, [sp, #12]
		ticker_job_list_insert(instance, insert_head);
    b228:	4620      	mov	r0, r4
			flag_compare_update = 1U;
    b22a:	42b1      	cmp	r1, r6
    b22c:	bf18      	it	ne
    b22e:	4613      	movne	r3, r2
		ticker_job_list_insert(instance, insert_head);
    b230:	4649      	mov	r1, r9
			flag_compare_update = 1U;
    b232:	9302      	str	r3, [sp, #8]
		ticker_job_list_insert(instance, insert_head);
    b234:	f010 fd2d 	bl	1bc92 <ticker_job_list_insert>
	nodes = &instance->nodes[0];
    b238:	6825      	ldr	r5, [r4, #0]
	uint8_t  rescheduled = 0U;
    b23a:	2300      	movs	r3, #0
		ticker_id_head = instance->ticker_id_head;
    b23c:	7f67      	ldrb	r7, [r4, #29]
		while (ticker_id_head != TICKER_NULL) {
    b23e:	e16b      	b.n	b518 <ticker_job+0x3c0>
		flag_elapsed = 0U;
    b240:	9201      	str	r2, [sp, #4]
		ticks_elapsed = 0U;
    b242:	9200      	str	r2, [sp, #0]
    b244:	e7b5      	b.n	b1b2 <ticker_job+0x5a>
		user = &users[count_user];
    b246:	9b08      	ldr	r3, [sp, #32]
    b248:	eb03 08cb 	add.w	r8, r3, fp, lsl #3
		user_ops = &user->user_op[0];
    b24c:	f8d8 3004 	ldr.w	r3, [r8, #4]
    b250:	9306      	str	r3, [sp, #24]
		while (user->middle != user->last) {
    b252:	f898 1003 	ldrb.w	r1, [r8, #3]
			user_op = &user_ops[user->middle];
    b256:	2034      	movs	r0, #52	; 0x34
		while (user->middle != user->last) {
    b258:	f898 7002 	ldrb.w	r7, [r8, #2]
    b25c:	428f      	cmp	r7, r1
    b25e:	f000 82da 	beq.w	b816 <ticker_job+0x6be>
			user_op = &user_ops[user->middle];
    b262:	9b06      	ldr	r3, [sp, #24]
			if (middle == user->count_user_op) {
    b264:	f898 5000 	ldrb.w	r5, [r8]
			user_op = &user_ops[user->middle];
    b268:	fb17 f200 	smulbb	r2, r7, r0
    b26c:	189e      	adds	r6, r3, r2
			middle = user->middle + 1;
    b26e:	1c7b      	adds	r3, r7, #1
    b270:	b2db      	uxtb	r3, r3
				middle = 0U;
    b272:	429d      	cmp	r5, r3
    b274:	bf08      	it	eq
    b276:	2300      	moveq	r3, #0
			user->middle = middle;
    b278:	f888 3002 	strb.w	r3, [r8, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    b27c:	9b06      	ldr	r3, [sp, #24]
    b27e:	5c9a      	ldrb	r2, [r3, r2]
    b280:	2a04      	cmp	r2, #4
    b282:	d9e9      	bls.n	b258 <ticker_job+0x100>
			ticker = &node[user_op->id];
    b284:	7871      	ldrb	r1, [r6, #1]
    b286:	eb01 0541 	add.w	r5, r1, r1, lsl #1
    b28a:	012b      	lsls	r3, r5, #4
    b28c:	9309      	str	r3, [sp, #36]	; 0x24
    b28e:	9b02      	ldr	r3, [sp, #8]
    b290:	eb03 1505 	add.w	r5, r3, r5, lsl #4
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
    b294:	2a08      	cmp	r2, #8
			state = (ticker->req - ticker->ack) & 0xff;
    b296:	786b      	ldrb	r3, [r5, #1]
    b298:	78a8      	ldrb	r0, [r5, #2]
    b29a:	eba3 0300 	sub.w	r3, r3, r0
    b29e:	b2db      	uxtb	r3, r3
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
    b2a0:	d818      	bhi.n	b2d4 <ticker_job+0x17c>
    b2a2:	b1bb      	cbz	r3, b2d4 <ticker_job+0x17c>
			    (state == 0U) ||
    b2a4:	2a05      	cmp	r2, #5
    b2a6:	f040 82a9 	bne.w	b7fc <ticker_job+0x6a4>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
    b2aa:	6872      	ldr	r2, [r6, #4]
    b2ac:	2a00      	cmp	r2, #0
    b2ae:	f040 82b7 	bne.w	b820 <ticker_job+0x6c8>
			     (user_op->params.update.ticks_drift_plus == 0U) &&
    b2b2:	68b2      	ldr	r2, [r6, #8]
    b2b4:	2a00      	cmp	r2, #0
    b2b6:	f040 82b3 	bne.w	b820 <ticker_job+0x6c8>
			     (user_op->params.update.ticks_drift_minus == 0U) &&
    b2ba:	68f2      	ldr	r2, [r6, #12]
    b2bc:	2a00      	cmp	r2, #0
    b2be:	f040 82af 	bne.w	b820 <ticker_job+0x6c8>
			     (user_op->params.update.ticks_slot_plus == 0U) &&
    b2c2:	6932      	ldr	r2, [r6, #16]
    b2c4:	2a00      	cmp	r2, #0
    b2c6:	f040 82ab 	bne.w	b820 <ticker_job+0x6c8>
			     (user_op->params.update.lazy == 0U) &&
    b2ca:	6972      	ldr	r2, [r6, #20]
    b2cc:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    b2d0:	f040 82a6 	bne.w	b820 <ticker_job+0x6c8>
				ticker_job_op_cb(user_op,
    b2d4:	2101      	movs	r1, #1
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    b2d6:	4630      	mov	r0, r6
    b2d8:	f010 fcd1 	bl	1bc7e <ticker_job_op_cb>
}
    b2dc:	e7b9      	b.n	b252 <ticker_job+0xfa>
	if ((ticker->remainder_current >= BIT(31)) ||
    b2de:	6a69      	ldr	r1, [r5, #36]	; 0x24
    b2e0:	4f91      	ldr	r7, [pc, #580]	; (b528 <ticker_job+0x3d0>)
    b2e2:	f8df a248 	ldr.w	sl, [pc, #584]	; b52c <ticker_job+0x3d4>
    b2e6:	19cf      	adds	r7, r1, r7
    b2e8:	4557      	cmp	r7, sl
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
    b2ea:	bf81      	itttt	hi
    b2ec:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
    b2f0:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
    b2f4:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
    b2f8:	6269      	strhi	r1, [r5, #36]	; 0x24
	ticker->remainder_current -= ticker->remainder_periodic;
    b2fa:	e9d5 1708 	ldrd	r1, r7, [r5, #32]
		decrement++;
    b2fe:	bf8c      	ite	hi
    b300:	f04f 0a01 	movhi.w	sl, #1
	uint8_t decrement = 0U;
    b304:	f04f 0a00 	movls.w	sl, #0
	ticker->remainder_current -= ticker->remainder_periodic;
    b308:	1a79      	subs	r1, r7, r1
			ticks_to_expire -= ticker->ticks_periodic +
    b30a:	4482      	add	sl, r0
			ticker->lazy_current--;
    b30c:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
	ticker->remainder_current -= ticker->remainder_periodic;
    b310:	6269      	str	r1, [r5, #36]	; 0x24
			ticks_to_expire -= ticker->ticks_periodic +
    b312:	eba3 030a 	sub.w	r3, r3, sl
			ticker->lazy_current--;
    b316:	f8a5 e01e 	strh.w	lr, [r5, #30]
    b31a:	e2a7      	b.n	b86c <ticker_job+0x714>
	ticker->remainder_current += ticker->remainder_periodic;
    b31c:	e9d5 1708 	ldrd	r1, r7, [r5, #32]
    b320:	4439      	add	r1, r7
	if ((ticker->remainder_current < BIT(31)) &&
    b322:	4f81      	ldr	r7, [pc, #516]	; (b528 <ticker_job+0x3d0>)
    b324:	f8df a204 	ldr.w	sl, [pc, #516]	; b52c <ticker_job+0x3d4>
    b328:	19cf      	adds	r7, r1, r7
    b32a:	4557      	cmp	r7, sl
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    b32c:	bf9d      	ittte	ls
    b32e:	f1a1 71e8 	subls.w	r1, r1, #30408704	; 0x1d00000
    b332:	f5a1 31d4 	subls.w	r1, r1, #108544	; 0x1a800
    b336:	f5a1 71a5 	subls.w	r1, r1, #330	; 0x14a
	ticker->remainder_current += ticker->remainder_periodic;
    b33a:	6269      	strhi	r1, [r5, #36]	; 0x24
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    b33c:	bf96      	itet	ls
    b33e:	6269      	strls	r1, [r5, #36]	; 0x24
	return 0;
    b340:	2100      	movhi	r1, #0
		return 1;
    b342:	2101      	movls	r1, #1
			ticks_to_expire += ticker->ticks_periodic +
    b344:	4401      	add	r1, r0
			ticker->lazy_current++;
    b346:	f10e 0e01 	add.w	lr, lr, #1
			ticks_to_expire += ticker->ticks_periodic +
    b34a:	440b      	add	r3, r1
			ticker->lazy_current++;
    b34c:	f8a5 e01e 	strh.w	lr, [r5, #30]
    b350:	e293      	b.n	b87a <ticker_job+0x722>
		if (user_op->op != TICKER_USER_OP_TYPE_YIELD_ABS) {
    b352:	2a06      	cmp	r2, #6
    b354:	d005      	beq.n	b362 <ticker_job+0x20a>
			ticker->ticks_to_expire = ticker_dequeue(instance,
    b356:	4620      	mov	r0, r4
    b358:	f010 fc48 	bl	1bbec <ticker_dequeue>
			ticker->req = ticker->ack;
    b35c:	78ab      	ldrb	r3, [r5, #2]
			ticker->ticks_to_expire = ticker_dequeue(instance,
    b35e:	60a8      	str	r0, [r5, #8]
			ticker->req = ticker->ack;
    b360:	706b      	strb	r3, [r5, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    b362:	7f22      	ldrb	r2, [r4, #28]
    b364:	7873      	ldrb	r3, [r6, #1]
    b366:	429a      	cmp	r2, r3
    b368:	f040 82b9 	bne.w	b8de <ticker_job+0x786>
			instance->ticker_id_slot_previous = TICKER_NULL;
    b36c:	23ff      	movs	r3, #255	; 0xff
    b36e:	7723      	strb	r3, [r4, #28]
			if ((user_op->op == TICKER_USER_OP_TYPE_YIELD_ABS) ||
    b370:	7833      	ldrb	r3, [r6, #0]
    b372:	2b06      	cmp	r3, #6
    b374:	d001      	beq.n	b37a <ticker_job+0x222>
    b376:	2b08      	cmp	r3, #8
    b378:	d10d      	bne.n	b396 <ticker_job+0x23e>
				ticks_at_yield =
    b37a:	6870      	ldr	r0, [r6, #4]
			ticks_current = instance->ticks_current;
    b37c:	6963      	ldr	r3, [r4, #20]
			if (!((ticks_at_yield - ticks_current) &
    b37e:	1ac2      	subs	r2, r0, r3
    b380:	0211      	lsls	r1, r2, #8
    b382:	d40b      	bmi.n	b39c <ticker_job+0x244>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    b384:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
				ticks_used = ticks_elapsed +
    b388:	9a00      	ldr	r2, [sp, #0]
    b38a:	4413      	add	r3, r2
			if (instance->ticks_slot_previous > ticks_used) {
    b38c:	69a2      	ldr	r2, [r4, #24]
    b38e:	429a      	cmp	r2, r3
				instance->ticks_slot_previous = ticks_used;
    b390:	bf88      	it	hi
    b392:	61a3      	strhi	r3, [r4, #24]
    b394:	e2a3      	b.n	b8de <ticker_job+0x786>
				ticks_at_yield = cntr_cnt_get();
    b396:	f006 fa1d 	bl	117d4 <cntr_cnt_get>
    b39a:	e7ef      	b.n	b37c <ticker_job+0x224>
				if (ticks_elapsed > ticks_used) {
    b39c:	9a00      	ldr	r2, [sp, #0]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    b39e:	1a1b      	subs	r3, r3, r0
    b3a0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				if (ticks_elapsed > ticks_used) {
    b3a4:	429a      	cmp	r2, r3
					ticks_used = ticks_elapsed -
    b3a6:	bf8c      	ite	hi
    b3a8:	1ad3      	subhi	r3, r2, r3
					ticks_used = 0;
    b3aa:	2300      	movls	r3, #0
    b3ac:	e7ee      	b.n	b38c <ticker_job+0x234>
		ticks_expired += ticks_to_expire;
    b3ae:	9a07      	ldr	r2, [sp, #28]
		skip_collision = (ticker->lazy_current != 0U);
    b3b0:	f8b5 c01e 	ldrh.w	ip, [r5, #30]
		ticks_expired += ticks_to_expire;
    b3b4:	441a      	add	r2, r3
    b3b6:	9207      	str	r2, [sp, #28]
		if (instance->ticks_slot_previous > ticks_to_expire) {
    b3b8:	69a2      	ldr	r2, [r4, #24]
    b3ba:	4293      	cmp	r3, r2
		ticks_elapsed -= ticks_to_expire;
    b3bc:	eba7 0703 	sub.w	r7, r7, r3
		ticks_latency -= ticks_to_expire;
    b3c0:	ebab 0b03 	sub.w	fp, fp, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    b3c4:	bf25      	ittet	cs
    b3c6:	23ff      	movcs	r3, #255	; 0xff
    b3c8:	7723      	strbcs	r3, [r4, #28]
			instance->ticks_slot_previous -= ticks_to_expire;
    b3ca:	1ad3      	subcc	r3, r2, r3
			instance->ticks_slot_previous = 0U;
    b3cc:	2300      	movcs	r3, #0
    b3ce:	61a3      	str	r3, [r4, #24]
		state = (ticker->req - ticker->ack) & 0xff;
    b3d0:	78a9      	ldrb	r1, [r5, #2]
    b3d2:	786b      	ldrb	r3, [r5, #1]
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
    b3d4:	69a8      	ldr	r0, [r5, #24]
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
    b3d6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
		state = (ticker->req - ticker->ack) & 0xff;
    b3d8:	1a5b      	subs	r3, r3, r1
    b3da:	b2db      	uxtb	r3, r3
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
    b3dc:	b160      	cbz	r0, b3f8 <ticker_job+0x2a0>
    b3de:	2b02      	cmp	r3, #2
    b3e0:	d10a      	bne.n	b3f8 <ticker_job+0x2a0>
    b3e2:	f1bc 0f00 	cmp.w	ip, #0
    b3e6:	d107      	bne.n	b3f8 <ticker_job+0x2a0>
    b3e8:	b122      	cbz	r2, b3f4 <ticker_job+0x29c>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
    b3ea:	f892 e008 	ldrb.w	lr, [r2, #8]
    b3ee:	f1be 0f01 	cmp.w	lr, #1
    b3f2:	d001      	beq.n	b3f8 <ticker_job+0x2a0>
			instance->ticker_id_slot_previous = id_expired;
    b3f4:	7726      	strb	r6, [r4, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
    b3f6:	61a0      	str	r0, [r4, #24]
		ticker->ticks_to_expire = 0U;
    b3f8:	2000      	movs	r0, #0
    b3fa:	60a8      	str	r0, [r5, #8]
		instance->ticker_id_head = ticker->next;
    b3fc:	f8dd e020 	ldr.w	lr, [sp, #32]
    b400:	9806      	ldr	r0, [sp, #24]
    b402:	f810 000e 	ldrb.w	r0, [r0, lr]
    b406:	7760      	strb	r0, [r4, #29]
		if ((ticker->ticks_periodic != 0U) ||
    b408:	f8d5 e004 	ldr.w	lr, [r5, #4]
    b40c:	f1be 0f00 	cmp.w	lr, #0
    b410:	d119      	bne.n	b446 <ticker_job+0x2ee>
    b412:	2a00      	cmp	r2, #0
    b414:	d063      	beq.n	b4de <ticker_job+0x386>
		    TICKER_RESCHEDULE_PENDING(ticker)) {
    b416:	7a10      	ldrb	r0, [r2, #8]
    b418:	2801      	cmp	r0, #1
    b41a:	d160      	bne.n	b4de <ticker_job+0x386>
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
    b41c:	7a13      	ldrb	r3, [r2, #8]
    b41e:	2b01      	cmp	r3, #1
    b420:	d113      	bne.n	b44a <ticker_job+0x2f2>
				ticker->ticks_to_expire = ticks_elapsed;
    b422:	60af      	str	r7, [r5, #8]
				ticker->req = ticker->ack;
    b424:	7069      	strb	r1, [r5, #1]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    b426:	9b04      	ldr	r3, [sp, #16]
    b428:	9a07      	ldr	r2, [sp, #28]
    b42a:	6961      	ldr	r1, [r4, #20]
    b42c:	189a      	adds	r2, r3, r2
    b42e:	4628      	mov	r0, r5
    b430:	f010 fc07 	bl	1bc42 <ticks_to_expire_prep>
			ticker->next = *insert_head;
    b434:	9b06      	ldr	r3, [sp, #24]
    b436:	9a08      	ldr	r2, [sp, #32]
    b438:	f803 9002 	strb.w	r9, [r3, r2]
			ticker->req++;
    b43c:	786b      	ldrb	r3, [r5, #1]
    b43e:	3301      	adds	r3, #1
    b440:	706b      	strb	r3, [r5, #1]
			ticker->req = ticker->ack;
    b442:	46b1      	mov	r9, r6
    b444:	e6dc      	b.n	b200 <ticker_job+0xa8>
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
    b446:	2a00      	cmp	r2, #0
    b448:	d1e8      	bne.n	b41c <ticker_job+0x2c4>
				if (!ticker->lazy_current) {
    b44a:	f1bc 0f00 	cmp.w	ip, #0
    b44e:	d124      	bne.n	b49a <ticker_job+0x342>
					lazy_periodic = ticker->lazy_periodic;
    b450:	8ba8      	ldrh	r0, [r5, #28]
				while (count--) {
    b452:	4680      	mov	r8, r0
				ticks_to_expire = 0U;
    b454:	2200      	movs	r2, #0
	ticker->remainder_current += ticker->remainder_periodic;
    b456:	e9d5 1308 	ldrd	r1, r3, [r5, #32]
    b45a:	440b      	add	r3, r1
	if ((ticker->remainder_current < BIT(31)) &&
    b45c:	4932      	ldr	r1, [pc, #200]	; (b528 <ticker_job+0x3d0>)
    b45e:	f8df a0cc 	ldr.w	sl, [pc, #204]	; b52c <ticker_job+0x3d4>
    b462:	1859      	adds	r1, r3, r1
    b464:	4551      	cmp	r1, sl
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    b466:	bf9f      	itttt	ls
    b468:	f1a3 73e8 	subls.w	r3, r3, #30408704	; 0x1d00000
    b46c:	f5a3 33d4 	subls.w	r3, r3, #108544	; 0x1a800
    b470:	f5a3 73a5 	subls.w	r3, r3, #330	; 0x14a
    b474:	626b      	strls	r3, [r5, #36]	; 0x24
		return 1;
    b476:	bf92      	itee	ls
    b478:	9b01      	ldrls	r3, [sp, #4]
	ticker->remainder_current += ticker->remainder_periodic;
    b47a:	626b      	strhi	r3, [r5, #36]	; 0x24
	return 0;
    b47c:	2300      	movhi	r3, #0
					ticks_to_expire +=
    b47e:	4473      	add	r3, lr
				while (count--) {
    b480:	f1b8 0801 	subs.w	r8, r8, #1
					ticks_to_expire +=
    b484:	441a      	add	r2, r3
				while (count--) {
    b486:	d2e6      	bcs.n	b456 <ticker_job+0x2fe>
				} else if (!ticker->must_expire) {
    b488:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
    b48c:	b32b      	cbz	r3, b4da <ticker_job+0x382>
				lazy = 0U;
    b48e:	2300      	movs	r3, #0
				ticker->lazy_current += (lazy_periodic + lazy);
    b490:	4460      	add	r0, ip
    b492:	4418      	add	r0, r3
				ticker->ticks_to_expire = ticks_to_expire;
    b494:	60aa      	str	r2, [r5, #8]
				ticker->lazy_current += (lazy_periodic + lazy);
    b496:	83e8      	strh	r0, [r5, #30]
    b498:	e7c5      	b.n	b426 <ticker_job+0x2ce>
					ticker->req = ticker->ack;
    b49a:	7069      	strb	r1, [r5, #1]
					lazy_periodic = 0U;
    b49c:	2000      	movs	r0, #0
    b49e:	e7d8      	b.n	b452 <ticker_job+0x2fa>
	ticker->remainder_current += ticker->remainder_periodic;
    b4a0:	e9d5 1308 	ldrd	r1, r3, [r5, #32]
    b4a4:	440b      	add	r3, r1
	if ((ticker->remainder_current < BIT(31)) &&
    b4a6:	4920      	ldr	r1, [pc, #128]	; (b528 <ticker_job+0x3d0>)
    b4a8:	f8df a080 	ldr.w	sl, [pc, #128]	; b52c <ticker_job+0x3d4>
    b4ac:	1859      	adds	r1, r3, r1
    b4ae:	4551      	cmp	r1, sl
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    b4b0:	bf9f      	itttt	ls
    b4b2:	f1a3 73e8 	subls.w	r3, r3, #30408704	; 0x1d00000
    b4b6:	f5a3 33d4 	subls.w	r3, r3, #108544	; 0x1a800
    b4ba:	f5a3 73a5 	subls.w	r3, r3, #330	; 0x14a
    b4be:	626b      	strls	r3, [r5, #36]	; 0x24
		return 1;
    b4c0:	bf92      	itee	ls
    b4c2:	9b01      	ldrls	r3, [sp, #4]
	ticker->remainder_current += ticker->remainder_periodic;
    b4c4:	626b      	strhi	r3, [r5, #36]	; 0x24
	return 0;
    b4c6:	2300      	movhi	r3, #0
						ticks_to_expire +=
    b4c8:	4473      	add	r3, lr
    b4ca:	441a      	add	r2, r3
						lazy++;
    b4cc:	f108 0801 	add.w	r8, r8, #1
					while (ticks_to_expire <
    b4d0:	4593      	cmp	fp, r2
    b4d2:	fa1f f388 	uxth.w	r3, r8
    b4d6:	d8e3      	bhi.n	b4a0 <ticker_job+0x348>
    b4d8:	e7da      	b.n	b490 <ticker_job+0x338>
    b4da:	4698      	mov	r8, r3
    b4dc:	e7f8      	b.n	b4d0 <ticker_job+0x378>
			if (state && ((state == 1U) || skip_collision) &&
    b4de:	b14b      	cbz	r3, b4f4 <ticker_job+0x39c>
    b4e0:	2b01      	cmp	r3, #1
    b4e2:	d002      	beq.n	b4ea <ticker_job+0x392>
    b4e4:	f1bc 0f00 	cmp.w	ip, #0
    b4e8:	d004      	beq.n	b4f4 <ticker_job+0x39c>
			    ticker->fp_op_func) {
    b4ea:	6a2b      	ldr	r3, [r5, #32]
			if (state && ((state == 1U) || skip_collision) &&
    b4ec:	b113      	cbz	r3, b4f4 <ticker_job+0x39c>
				ticker->fp_op_func(TICKER_STATUS_FAILURE,
    b4ee:	6a69      	ldr	r1, [r5, #36]	; 0x24
    b4f0:	2001      	movs	r0, #1
    b4f2:	4798      	blx	r3
			ticker->req = ticker->ack;
    b4f4:	78ab      	ldrb	r3, [r5, #2]
    b4f6:	706b      	strb	r3, [r5, #1]
    b4f8:	464e      	mov	r6, r9
    b4fa:	e7a2      	b.n	b442 <ticker_job+0x2ea>
			ticker = &nodes[ticker_id_head];
    b4fc:	eb07 0247 	add.w	r2, r7, r7, lsl #1
    b500:	0111      	lsls	r1, r2, #4
    b502:	eb05 1202 	add.w	r2, r5, r2, lsl #4
			ext_data = ticker->ext_data;
    b506:	f815 e001 	ldrb.w	lr, [r5, r1]
    b50a:	6a96      	ldr	r6, [r2, #40]	; 0x28
			if (ext_data && ext_data->reschedule_state ==
    b50c:	b11e      	cbz	r6, b516 <ticker_job+0x3be>
    b50e:	7a31      	ldrb	r1, [r6, #8]
    b510:	2901      	cmp	r1, #1
    b512:	f000 816d 	beq.w	b7f0 <ticker_job+0x698>
			ticker_id_head = ticker->next;
    b516:	4677      	mov	r7, lr
		while (ticker_id_head != TICKER_NULL) {
    b518:	2fff      	cmp	r7, #255	; 0xff
    b51a:	d1ef      	bne.n	b4fc <ticker_job+0x3a4>
			flag_compare_update = 1U;
    b51c:	2b00      	cmp	r3, #0
    b51e:	9a02      	ldr	r2, [sp, #8]
    b520:	bf18      	it	ne
    b522:	461a      	movne	r2, r3
    b524:	9202      	str	r2, [sp, #8]
    b526:	e086      	b.n	b636 <ticker_job+0x4de>
    b528:	ff172b5a 	.word	0xff172b5a
    b52c:	7f172b59 	.word	0x7f172b59
			instance->ticks_slot_previous > ticks_elapsed) {
    b530:	69a0      	ldr	r0, [r4, #24]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
    b532:	9b00      	ldr	r3, [sp, #0]
    b534:	4283      	cmp	r3, r0
    b536:	f080 815f 	bcs.w	b7f8 <ticker_job+0x6a0>
			window_start_ticks = instance->ticks_slot_previous -
    b53a:	1ac3      	subs	r3, r0, r3
		window_start_ticks = 0U;
    b53c:	9301      	str	r3, [sp, #4]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    b53e:	e9d6 3a00 	ldrd	r3, sl, [r6]
    b542:	459a      	cmp	sl, r3
    b544:	d25b      	bcs.n	b5fe <ticker_job+0x4a6>
			ticks_slot_window = ext_data->ticks_slot_window -
    b546:	f04f 0c00 	mov.w	ip, #0
    b54a:	eba3 0b0a 	sub.w	fp, r3, sl
		ticker_id_iter = nodes[ticker_id_head].next;
    b54e:	4671      	mov	r1, lr
			ticks_slot_window = ext_data->ticks_slot_window -
    b550:	4663      	mov	r3, ip
		while (ticker_id_iter != TICKER_NULL &&
    b552:	29ff      	cmp	r1, #255	; 0xff
    b554:	d006      	beq.n	b564 <ticker_job+0x40c>
		       ticks_start_offset + ticker->ticks_slot <=
    b556:	f8d2 8018 	ldr.w	r8, [r2, #24]
    b55a:	eb0c 0008 	add.w	r0, ip, r8
		while (ticker_id_iter != TICKER_NULL &&
    b55e:	4583      	cmp	fp, r0
		       ticks_start_offset + ticker->ticks_slot <=
    b560:	9006      	str	r0, [sp, #24]
		while (ticker_id_iter != TICKER_NULL &&
    b562:	d21c      	bcs.n	b59e <ticker_job+0x446>
		ticker->ext_data->ticks_drift += ticks_to_expire -
    b564:	6891      	ldr	r1, [r2, #8]
    b566:	ebaa 0101 	sub.w	r1, sl, r1
    b56a:	4419      	add	r1, r3
    b56c:	6071      	str	r1, [r6, #4]
		ticker->ticks_to_expire = ticks_to_expire;
    b56e:	6093      	str	r3, [r2, #8]
		ticker_id_iter = nodes[ticker_id_head].next;
    b570:	4671      	mov	r1, lr
		ticker_id_prev = TICKER_NULL;
    b572:	23ff      	movs	r3, #255	; 0xff
		while (ticker_id_iter != TICKER_NULL) {
    b574:	29ff      	cmp	r1, #255	; 0xff
    b576:	d047      	beq.n	b608 <ticker_job+0x4b0>
			node = &nodes[ticker_id_iter];
    b578:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    b57c:	ea4f 1900 	mov.w	r9, r0, lsl #4
    b580:	eb05 1000 	add.w	r0, r5, r0, lsl #4
			if (ticker->ticks_to_expire > node->ticks_to_expire) {
    b584:	f8d2 8008 	ldr.w	r8, [r2, #8]
    b588:	f8d0 c008 	ldr.w	ip, [r0, #8]
    b58c:	45e0      	cmp	r8, ip
    b58e:	d938      	bls.n	b602 <ticker_job+0x4aa>
				ticker->ticks_to_expire -=
    b590:	eba8 030c 	sub.w	r3, r8, ip
    b594:	6093      	str	r3, [r2, #8]
			ticker_id_iter = node->next;
    b596:	460b      	mov	r3, r1
    b598:	f815 1009 	ldrb.w	r1, [r5, r9]
    b59c:	e7ea      	b.n	b574 <ticker_job+0x41c>
			node = &nodes[ticker_id_iter];
    b59e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    b5a2:	0108      	lsls	r0, r1, #4
    b5a4:	eb05 1101 	add.w	r1, r5, r1, lsl #4
    b5a8:	9004      	str	r0, [sp, #16]
			if (node->ext_data &&
    b5aa:	f8d1 9028 	ldr.w	r9, [r1, #40]	; 0x28
    b5ae:	f1b9 0f00 	cmp.w	r9, #0
    b5b2:	d007      	beq.n	b5c4 <ticker_job+0x46c>
    b5b4:	f899 9008 	ldrb.w	r9, [r9, #8]
    b5b8:	f1b9 0f01 	cmp.w	r9, #1
    b5bc:	d102      	bne.n	b5c4 <ticker_job+0x46c>
				ticker_id_iter = node->next;
    b5be:	4601      	mov	r1, r0
			ticker_id_iter = node->next;
    b5c0:	5c69      	ldrb	r1, [r5, r1]
    b5c2:	e7c6      	b.n	b552 <ticker_job+0x3fa>
			if (node->ticks_to_expire >
    b5c4:	f8d1 9008 	ldr.w	r9, [r1, #8]
    b5c8:	f1b9 0f04 	cmp.w	r9, #4
    b5cc:	d90e      	bls.n	b5ec <ticker_job+0x494>
					MIN(ticks_slot_window,
    b5ce:	f1ac 0304 	sub.w	r3, ip, #4
    b5d2:	444b      	add	r3, r9
				window_end_ticks =
    b5d4:	455b      	cmp	r3, fp
			if (window_end_ticks > ticks_start_offset +
    b5d6:	9806      	ldr	r0, [sp, #24]
				window_end_ticks =
    b5d8:	bf28      	it	cs
    b5da:	465b      	movcs	r3, fp
			if (window_end_ticks > ticks_start_offset +
    b5dc:	4283      	cmp	r3, r0
    b5de:	d905      	bls.n	b5ec <ticker_job+0x494>
			if (ticks_to_expire != 0U &&
    b5e0:	ebb3 0308 	subs.w	r3, r3, r8
    b5e4:	d002      	beq.n	b5ec <ticker_job+0x494>
    b5e6:	9801      	ldr	r0, [sp, #4]
    b5e8:	4283      	cmp	r3, r0
    b5ea:	d2bb      	bcs.n	b564 <ticker_job+0x40c>
			window_start_ticks  = node->ticks_to_expire +
    b5ec:	6988      	ldr	r0, [r1, #24]
			ticker_id_iter = node->next;
    b5ee:	9904      	ldr	r1, [sp, #16]
			window_start_ticks  = node->ticks_to_expire +
    b5f0:	eb00 0309 	add.w	r3, r0, r9
    b5f4:	9301      	str	r3, [sp, #4]
			ticks_start_offset += node->ticks_to_expire;
    b5f6:	44cc      	add	ip, r9
			ticks_to_expire     = ticks_slot_window -
    b5f8:	ebab 0308 	sub.w	r3, fp, r8
			ticker_id_iter = node->next;
    b5fc:	e7e0      	b.n	b5c0 <ticker_job+0x468>
    b5fe:	2300      	movs	r3, #0
    b600:	e7b0      	b.n	b564 <ticker_job+0x40c>
				node->ticks_to_expire -=
    b602:	ebac 0108 	sub.w	r1, ip, r8
    b606:	6081      	str	r1, [r0, #8]
		if (ticker_id_prev != TICKER_NULL) {
    b608:	2bff      	cmp	r3, #255	; 0xff
    b60a:	d008      	beq.n	b61e <ticker_job+0x4c6>
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
    b60c:	b21b      	sxth	r3, r3
    b60e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    b612:	011b      	lsls	r3, r3, #4
			instance->ticker_id_head = nodes[ticker_id_head].next;
    b614:	f884 e01d 	strb.w	lr, [r4, #29]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
    b618:	5ce9      	ldrb	r1, [r5, r3]
    b61a:	7011      	strb	r1, [r2, #0]
			nodes[ticker_id_prev].next = ticker_id_head;
    b61c:	54ef      	strb	r7, [r5, r3]
		ticker->lazy_current--;
    b61e:	8bd3      	ldrh	r3, [r2, #30]
    b620:	3b01      	subs	r3, #1
    b622:	83d3      	strh	r3, [r2, #30]
		ext_data->reschedule_state =
    b624:	f04f 0302 	mov.w	r3, #2
    b628:	7233      	strb	r3, [r6, #8]
		rescheduled  = 1U;
    b62a:	2301      	movs	r3, #1
    b62c:	e606      	b.n	b23c <ticker_job+0xe4>
		ticker_job_list_insert(instance, insert_head);
    b62e:	4649      	mov	r1, r9
    b630:	4620      	mov	r0, r4
    b632:	f010 fb2e 	bl	1bc92 <ticker_job_list_insert>
	if (instance->ticker_id_head != ticker_id_old_head) {
    b636:	7f63      	ldrb	r3, [r4, #29]
    b638:	9a03      	ldr	r2, [sp, #12]
    b63a:	4293      	cmp	r3, r2
	if (!pending) {
    b63c:	9b05      	ldr	r3, [sp, #20]
	if (instance->ticker_id_head != ticker_id_old_head) {
    b63e:	f040 80d1 	bne.w	b7e4 <ticker_job+0x68c>
	if (!pending) {
    b642:	b93b      	cbnz	r3, b654 <ticker_job+0x4fc>
	users = &instance->users[0];
    b644:	7a65      	ldrb	r5, [r4, #9]
    b646:	6863      	ldr	r3, [r4, #4]
    b648:	9300      	str	r3, [sp, #0]
	while (count_user--) {
    b64a:	3d01      	subs	r5, #1
    b64c:	b2ed      	uxtb	r5, r5
		uop->status = TICKER_STATUS_SUCCESS;
    b64e:	2700      	movs	r7, #0
	while (count_user--) {
    b650:	2dff      	cmp	r5, #255	; 0xff
    b652:	d116      	bne.n	b682 <ticker_job+0x52a>
	if (flag_compare_update) {
    b654:	9b02      	ldr	r3, [sp, #8]
    b656:	b14b      	cbz	r3, b66c <ticker_job+0x514>
	if (instance->ticker_id_head == TICKER_NULL) {
    b658:	7f63      	ldrb	r3, [r4, #29]
    b65a:	2bff      	cmp	r3, #255	; 0xff
    b65c:	d179      	bne.n	b752 <ticker_job+0x5fa>
		if (cntr_stop() == 0) {
    b65e:	f006 f893 	bl	11788 <cntr_stop>
    b662:	b918      	cbnz	r0, b66c <ticker_job+0x514>
			instance->ticks_slot_previous = 0U;
    b664:	61a0      	str	r0, [r4, #24]
			instance->ticks_current = cntr_cnt_get();
    b666:	f006 f8b5 	bl	117d4 <cntr_cnt_get>
    b66a:	6160      	str	r0, [r4, #20]
	instance->job_guard = 0U;
    b66c:	2300      	movs	r3, #0
    b66e:	77a3      	strb	r3, [r4, #30]
	if (instance->worker_trigger) {
    b670:	7fe3      	ldrb	r3, [r4, #31]
    b672:	2b00      	cmp	r3, #0
    b674:	f000 8135 	beq.w	b8e2 <ticker_job+0x78a>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    b678:	6a65      	ldr	r5, [r4, #36]	; 0x24
    b67a:	4623      	mov	r3, r4
    b67c:	2201      	movs	r2, #1
    b67e:	2103      	movs	r1, #3
    b680:	e578      	b.n	b174 <ticker_job+0x1c>
		user = &users[count_user];
    b682:	9b00      	ldr	r3, [sp, #0]
    b684:	eb03 06c5 	add.w	r6, r3, r5, lsl #3
		user_op = &user->user_op[0];
    b688:	f8d6 8004 	ldr.w	r8, [r6, #4]
		while (user->first != user->last) {
    b68c:	7873      	ldrb	r3, [r6, #1]
    b68e:	78f2      	ldrb	r2, [r6, #3]
    b690:	429a      	cmp	r2, r3
    b692:	d102      	bne.n	b69a <ticker_job+0x542>
    b694:	3d01      	subs	r5, #1
    b696:	b2ed      	uxtb	r5, r5
    b698:	e7da      	b.n	b650 <ticker_job+0x4f8>
			ticker_job_op_inquire(instance, &user_op[user->first]);
    b69a:	2234      	movs	r2, #52	; 0x34
    b69c:	fb13 f202 	smulbb	r2, r3, r2
    b6a0:	eb08 0302 	add.w	r3, r8, r2
	switch (uop->op) {
    b6a4:	f818 2002 	ldrb.w	r2, [r8, r2]
    b6a8:	2a02      	cmp	r2, #2
    b6aa:	d012      	beq.n	b6d2 <ticker_job+0x57a>
    b6ac:	2a03      	cmp	r2, #3
    b6ae:	d040      	beq.n	b732 <ticker_job+0x5da>
    b6b0:	2a01      	cmp	r2, #1
    b6b2:	d105      	bne.n	b6c0 <ticker_job+0x568>
			uop->status = TICKER_STATUS_SUCCESS;
    b6b4:	629f      	str	r7, [r3, #40]	; 0x28
		fp_op_func = uop->fp_op_func;
    b6b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	if (fp_op_func) {
    b6b8:	b112      	cbz	r2, b6c0 <ticker_job+0x568>
		fp_op_func(uop->status, uop->op_context);
    b6ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
    b6bc:	6a98      	ldr	r0, [r3, #40]	; 0x28
    b6be:	4790      	blx	r2
			first = user->first + 1;
    b6c0:	7873      	ldrb	r3, [r6, #1]
			if (first == user->count_user_op) {
    b6c2:	7832      	ldrb	r2, [r6, #0]
			first = user->first + 1;
    b6c4:	3301      	adds	r3, #1
    b6c6:	b2db      	uxtb	r3, r3
				first = 0U;
    b6c8:	429a      	cmp	r2, r3
    b6ca:	bf08      	it	eq
    b6cc:	2300      	moveq	r3, #0
			user->first = first;
    b6ce:	7073      	strb	r3, [r6, #1]
    b6d0:	e7dc      	b.n	b68c <ticker_job+0x534>
		ticker_by_next_slot_get(instance,
    b6d2:	e9d3 9001 	ldrd	r9, r0, [r3, #4]
	_ticker_id_head = *ticker_id_head;
    b6d6:	f899 2000 	ldrb.w	r2, [r9]
		ticker_by_next_slot_get(instance,
    b6da:	f8d3 e00c 	ldr.w	lr, [r3, #12]
	node = instance->nodes;
    b6de:	f8d4 c000 	ldr.w	ip, [r4]
	    (*ticks_current != instance->ticks_current)) {
    b6e2:	6961      	ldr	r1, [r4, #20]
	if ((_ticker_id_head == TICKER_NULL) ||
    b6e4:	2aff      	cmp	r2, #255	; 0xff
    b6e6:	d003      	beq.n	b6f0 <ticker_job+0x598>
    b6e8:	f8d0 a000 	ldr.w	sl, [r0]
    b6ec:	4551      	cmp	r1, sl
    b6ee:	d009      	beq.n	b704 <ticker_job+0x5ac>
		_ticker_id_head = instance->ticker_id_head;
    b6f0:	7f62      	ldrb	r2, [r4, #29]
		*ticks_current = instance->ticks_current;
    b6f2:	6001      	str	r1, [r0, #0]
		_ticks_to_expire = 0U;
    b6f4:	2000      	movs	r0, #0
	while (_ticker_id_head != TICKER_NULL) {
    b6f6:	2aff      	cmp	r2, #255	; 0xff
    b6f8:	d10c      	bne.n	b714 <ticker_job+0x5bc>
	*ticker_id_head = _ticker_id_head;
    b6fa:	f889 2000 	strb.w	r2, [r9]
	*ticks_to_expire = _ticks_to_expire;
    b6fe:	f8ce 0000 	str.w	r0, [lr]
}
    b702:	e7d7      	b.n	b6b4 <ticker_job+0x55c>
		ticker = &node[_ticker_id_head];
    b704:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    b708:	0112      	lsls	r2, r2, #4
	_ticks_to_expire = *ticks_to_expire;
    b70a:	f8de 0000 	ldr.w	r0, [lr]
		_ticker_id_head = ticker->next;
    b70e:	f81c 2002 	ldrb.w	r2, [ip, r2]
    b712:	e7f0      	b.n	b6f6 <ticker_job+0x59e>
		ticker = &node[_ticker_id_head];
    b714:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    b718:	ea4f 1b01 	mov.w	fp, r1, lsl #4
    b71c:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
		_ticks_to_expire += ticker->ticks_to_expire;
    b720:	f8d1 a008 	ldr.w	sl, [r1, #8]
			if (ticker->ticks_slot) {
    b724:	6989      	ldr	r1, [r1, #24]
		_ticks_to_expire += ticker->ticks_to_expire;
    b726:	4450      	add	r0, sl
			if (ticker->ticks_slot) {
    b728:	2900      	cmp	r1, #0
    b72a:	d1e6      	bne.n	b6fa <ticker_job+0x5a2>
		_ticker_id_head = ticker->next;
    b72c:	f81c 200b 	ldrb.w	r2, [ip, fp]
    b730:	e7e1      	b.n	b6f6 <ticker_job+0x59e>
		if (uop->id < instance->count_node) {
    b732:	785a      	ldrb	r2, [r3, #1]
    b734:	7a21      	ldrb	r1, [r4, #8]
    b736:	4291      	cmp	r1, r2
    b738:	d908      	bls.n	b74c <ticker_job+0x5f4>
			node[uop->id].priority =
    b73a:	6821      	ldr	r1, [r4, #0]
    b73c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    b740:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    b744:	7919      	ldrb	r1, [r3, #4]
    b746:	f882 102d 	strb.w	r1, [r2, #45]	; 0x2d
    b74a:	e7b3      	b.n	b6b4 <ticker_job+0x55c>
			uop->status = TICKER_STATUS_FAILURE;
    b74c:	2201      	movs	r2, #1
    b74e:	629a      	str	r2, [r3, #40]	; 0x28
    b750:	e7b1      	b.n	b6b6 <ticker_job+0x55e>
	if (ticker_id_old_head == TICKER_NULL) {
    b752:	9b03      	ldr	r3, [sp, #12]
    b754:	2bff      	cmp	r3, #255	; 0xff
    b756:	d106      	bne.n	b766 <ticker_job+0x60e>
		ticks_current = cntr_cnt_get();
    b758:	f006 f83c 	bl	117d4 <cntr_cnt_get>
    b75c:	4605      	mov	r5, r0
		if (cntr_start() == 0) {
    b75e:	f006 f805 	bl	1176c <cntr_start>
    b762:	b900      	cbnz	r0, b766 <ticker_job+0x60e>
			instance->ticks_current = ticks_current;
    b764:	6165      	str	r5, [r4, #20]
	ticker = &instance->nodes[instance->ticker_id_head];
    b766:	7f63      	ldrb	r3, [r4, #29]
	ticks_to_expire = ticker->ticks_to_expire;
    b768:	6822      	ldr	r2, [r4, #0]
		LL_ASSERT(i);
    b76a:	f8df 817c 	ldr.w	r8, [pc, #380]	; b8e8 <ticker_job+0x790>
    b76e:	f8df 917c 	ldr.w	r9, [pc, #380]	; b8ec <ticker_job+0x794>
    b772:	f8df a17c 	ldr.w	sl, [pc, #380]	; b8f0 <ticker_job+0x798>
	ticker = &instance->nodes[instance->ticker_id_head];
    b776:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	ticks_to_expire = ticker->ticks_to_expire;
    b77a:	eb02 1303 	add.w	r3, r2, r3, lsl #4
	i = 10U;
    b77e:	260a      	movs	r6, #10
	ticks_to_expire = ticker->ticks_to_expire;
    b780:	689f      	ldr	r7, [r3, #8]
		ctr = cntr_cnt_get();
    b782:	f006 f827 	bl	117d4 <cntr_cnt_get>
		cc = instance->ticks_current;
    b786:	6965      	ldr	r5, [r4, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    b788:	1b43      	subs	r3, r0, r5
    b78a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
    b78e:	3303      	adds	r3, #3
		cc += MAX(ticks_elapsed, ticks_to_expire);
    b790:	42bb      	cmp	r3, r7
    b792:	bf2c      	ite	cs
    b794:	18ed      	addcs	r5, r5, r3
    b796:	19ed      	addcc	r5, r5, r7
		cc &= HAL_TICKER_CNTR_MASK;
    b798:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
		instance->trigger_set_cb(cc);
    b79c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
		ctr = cntr_cnt_get();
    b79e:	4683      	mov	fp, r0
		instance->trigger_set_cb(cc);
    b7a0:	4628      	mov	r0, r5
    b7a2:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
    b7a4:	f006 f816 	bl	117d4 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    b7a8:	eba0 030b 	sub.w	r3, r0, fp
    b7ac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    b7b0:	eba5 050b 	sub.w	r5, r5, fp
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
    b7b4:	3303      	adds	r3, #3
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    b7b6:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
		  ticker_ticks_diff_get(cc, ctr));
    b7ba:	42ab      	cmp	r3, r5
		i--;
    b7bc:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
		  ticker_ticks_diff_get(cc, ctr));
    b7c0:	f67f af54 	bls.w	b66c <ticker_job+0x514>
		LL_ASSERT(i);
    b7c4:	2e00      	cmp	r6, #0
    b7c6:	d1dc      	bne.n	b782 <ticker_job+0x62a>
    b7c8:	f640 133e 	movw	r3, #2366	; 0x93e
    b7cc:	4642      	mov	r2, r8
    b7ce:	4649      	mov	r1, r9
    b7d0:	4650      	mov	r0, sl
    b7d2:	f00a ff12 	bl	165fa <printk>
    b7d6:	4040      	eors	r0, r0
    b7d8:	f380 8811 	msr	BASEPRI, r0
    b7dc:	f04f 0003 	mov.w	r0, #3
    b7e0:	df02      	svc	2
    b7e2:	e7ce      	b.n	b782 <ticker_job+0x62a>
	if (!pending) {
    b7e4:	2b00      	cmp	r3, #0
    b7e6:	f47f af37 	bne.w	b658 <ticker_job+0x500>
		flag_compare_update = 1U;
    b7ea:	2301      	movs	r3, #1
    b7ec:	9302      	str	r3, [sp, #8]
    b7ee:	e729      	b.n	b644 <ticker_job+0x4ec>
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
    b7f0:	7f23      	ldrb	r3, [r4, #28]
    b7f2:	2bff      	cmp	r3, #255	; 0xff
    b7f4:	f47f ae9c 	bne.w	b530 <ticker_job+0x3d8>
		window_start_ticks = 0U;
    b7f8:	2300      	movs	r3, #0
    b7fa:	e69f      	b.n	b53c <ticker_job+0x3e4>
			if (state == 1U) {
    b7fc:	2b01      	cmp	r3, #1
    b7fe:	f43f ada8 	beq.w	b352 <ticker_job+0x1fa>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    b802:	2104      	movs	r1, #4
    b804:	4623      	mov	r3, r4
    b806:	6a65      	ldr	r5, [r4, #36]	; 0x24
    b808:	2201      	movs	r2, #1
    b80a:	4608      	mov	r0, r1
    b80c:	47a8      	blx	r5
				pending = 1U;
    b80e:	2301      	movs	r3, #1
				user->middle = prev;
    b810:	f888 7002 	strb.w	r7, [r8, #2]
				pending = 1U;
    b814:	9305      	str	r3, [sp, #20]
    b816:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
    b81a:	fa5f fb83 	uxtb.w	fp, r3
    b81e:	e4d6      	b.n	b1ce <ticker_job+0x76>
			if (state == 1U) {
    b820:	2b01      	cmp	r3, #1
    b822:	d1ee      	bne.n	b802 <ticker_job+0x6aa>
		ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    b824:	4620      	mov	r0, r4
    b826:	f010 f9e1 	bl	1bbec <ticker_dequeue>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    b82a:	6963      	ldr	r3, [r4, #20]
		ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    b82c:	60a8      	str	r0, [r5, #8]
    b82e:	4607      	mov	r7, r0
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    b830:	9307      	str	r3, [sp, #28]
	ticks_now = cntr_cnt_get();
    b832:	f005 ffcf 	bl	117d4 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    b836:	9b07      	ldr	r3, [sp, #28]
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    b838:	9900      	ldr	r1, [sp, #0]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    b83a:	1ac3      	subs	r3, r0, r3
    b83c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    b840:	440b      	add	r3, r1
	if (ticks_to_expire > ticks_elapsed) {
    b842:	429f      	cmp	r7, r3
		ticker->ticks_to_expire_minus += ticks_elapsed -
    b844:	bf98      	it	ls
    b846:	6969      	ldrls	r1, [r5, #20]
	ticks_now = cntr_cnt_get();
    b848:	4602      	mov	r2, r0
		ticker->ticks_to_expire_minus += ticks_elapsed -
    b84a:	bf98      	it	ls
    b84c:	1bc9      	subls	r1, r1, r7
	if ((ticker->ticks_periodic != 0U) &&
    b84e:	6868      	ldr	r0, [r5, #4]
		ticker->ticks_to_expire_minus += ticks_elapsed -
    b850:	bf9b      	ittet	ls
    b852:	185b      	addls	r3, r3, r1
    b854:	616b      	strls	r3, [r5, #20]
		ticks_to_expire -= ticks_elapsed;
    b856:	1afb      	subhi	r3, r7, r3
		ticks_to_expire = 0U;
    b858:	2300      	movls	r3, #0
	if ((ticker->ticks_periodic != 0U) &&
    b85a:	b1a8      	cbz	r0, b888 <ticker_job+0x730>
	    (user_op->params.update.lazy != 0U)) {
    b85c:	8ab1      	ldrh	r1, [r6, #20]
	if ((ticker->ticks_periodic != 0U) &&
    b85e:	b199      	cbz	r1, b888 <ticker_job+0x730>
		user_op->params.update.lazy--;
    b860:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
    b864:	fa1f fc8c 	uxth.w	ip, ip
    b868:	f8a6 c014 	strh.w	ip, [r6, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    b86c:	4298      	cmp	r0, r3
		       (ticker->lazy_current > user_op->params.update.lazy)) {
    b86e:	f8b5 e01e 	ldrh.w	lr, [r5, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    b872:	d202      	bcs.n	b87a <ticker_job+0x722>
    b874:	45e6      	cmp	lr, ip
    b876:	f63f ad32 	bhi.w	b2de <ticker_job+0x186>
		while (ticker->lazy_current < user_op->params.update.lazy) {
    b87a:	f8b5 e01e 	ldrh.w	lr, [r5, #30]
    b87e:	45f4      	cmp	ip, lr
    b880:	f63f ad4c 	bhi.w	b31c <ticker_job+0x1c4>
		ticker->lazy_periodic = user_op->params.update.lazy;
    b884:	f8a5 c01c 	strh.w	ip, [r5, #28]
				  user_op->params.update.ticks_drift_plus;
    b888:	6871      	ldr	r1, [r6, #4]
				user_op->params.update.ticks_drift_minus;
    b88a:	68b0      	ldr	r0, [r6, #8]
	struct ticker_ext *ext_data = ticker->ext_data;
    b88c:	6aaf      	ldr	r7, [r5, #40]	; 0x28
	ticker->ticks_to_expire = ticks_to_expire +
    b88e:	440b      	add	r3, r1
    b890:	60ab      	str	r3, [r5, #8]
	ticker->ticks_to_expire_minus +=
    b892:	696b      	ldr	r3, [r5, #20]
    b894:	4403      	add	r3, r0
    b896:	616b      	str	r3, [r5, #20]
	if (ext_data && ext_data->ticks_slot_window != 0U) {
    b898:	b11f      	cbz	r7, b8a2 <ticker_job+0x74a>
    b89a:	683b      	ldr	r3, [r7, #0]
    b89c:	b10b      	cbz	r3, b8a2 <ticker_job+0x74a>
			user_op->params.update.ticks_drift_plus -
    b89e:	1a09      	subs	r1, r1, r0
		ext_data->ticks_drift =
    b8a0:	6079      	str	r1, [r7, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    b8a2:	9907      	ldr	r1, [sp, #28]
    b8a4:	4628      	mov	r0, r5
    b8a6:	f010 f9cc 	bl	1bc42 <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    b8aa:	68f2      	ldr	r2, [r6, #12]
    b8ac:	69ab      	ldr	r3, [r5, #24]
    b8ae:	4413      	add	r3, r2
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    b8b0:	6932      	ldr	r2, [r6, #16]
    b8b2:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    b8b4:	bf8c      	ite	hi
    b8b6:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0U;
    b8b8:	2300      	movls	r3, #0
    b8ba:	61ab      	str	r3, [r5, #24]
	if (user_op->params.update.force != 0U) {
    b8bc:	7db3      	ldrb	r3, [r6, #22]
    b8be:	b103      	cbz	r3, b8c2 <ticker_job+0x76a>
		ticker->force = user_op->params.update.force;
    b8c0:	70eb      	strb	r3, [r5, #3]
	if (user_op->params.update.must_expire) {
    b8c2:	7df3      	ldrb	r3, [r6, #23]
    b8c4:	b113      	cbz	r3, b8cc <ticker_job+0x774>
		ticker->must_expire = (user_op->params.update.must_expire - 1);
    b8c6:	3b01      	subs	r3, #1
    b8c8:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
	ticker->next = *insert_head;
    b8cc:	9b02      	ldr	r3, [sp, #8]
    b8ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
    b8d0:	f803 9002 	strb.w	r9, [r3, r2]
		ticker->req++;
    b8d4:	786b      	ldrb	r3, [r5, #1]
	*insert_head = user_op->id;
    b8d6:	f896 9001 	ldrb.w	r9, [r6, #1]
		ticker->req++;
    b8da:	3301      	adds	r3, #1
    b8dc:	706b      	strb	r3, [r5, #1]
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    b8de:	2100      	movs	r1, #0
    b8e0:	e4f9      	b.n	b2d6 <ticker_job+0x17e>
}
    b8e2:	b00b      	add	sp, #44	; 0x2c
    b8e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b8e8:	00020377 	.word	0x00020377
    b8ec:	000203fe 	.word	0x000203fe
    b8f0:	0002023c 	.word	0x0002023c

0000b8f4 <ticker_init>:
{
    b8f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    b8f6:	9f05      	ldr	r7, [sp, #20]
    b8f8:	f89d 5018 	ldrb.w	r5, [sp, #24]
    b8fc:	f8dd c01c 	ldr.w	ip, [sp, #28]
	if (instance_index >= TICKER_INSTANCE_MAX) {
    b900:	b108      	cbz	r0, b906 <ticker_init+0x12>
		return TICKER_STATUS_FAILURE;
    b902:	2001      	movs	r0, #1
}
    b904:	bdf0      	pop	{r4, r5, r6, r7, pc}
	instance->count_node = count_node;
    b906:	4c18      	ldr	r4, [pc, #96]	; (b968 <ticker_init+0x74>)
    b908:	7221      	strb	r1, [r4, #8]
	instance->nodes = node;
    b90a:	6022      	str	r2, [r4, #0]
	while (count_node--) {
    b90c:	3901      	subs	r1, #1
    b90e:	b2c9      	uxtb	r1, r1
    b910:	29ff      	cmp	r1, #255	; 0xff
    b912:	d116      	bne.n	b942 <ticker_init+0x4e>
	instance->count_user = count_user;
    b914:	7263      	strb	r3, [r4, #9]
	instance->users = user;
    b916:	6067      	str	r7, [r4, #4]
		user_op_ += users[count_user].count_user_op;
    b918:	2234      	movs	r2, #52	; 0x34
	while (count_user--) {
    b91a:	3b01      	subs	r3, #1
    b91c:	b2db      	uxtb	r3, r3
    b91e:	2bff      	cmp	r3, #255	; 0xff
    b920:	d116      	bne.n	b950 <ticker_init+0x5c>
	if (count_op) {
    b922:	2d00      	cmp	r5, #0
    b924:	d1ed      	bne.n	b902 <ticker_init+0xe>
	instance->caller_id_get_cb = caller_id_get_cb;
    b926:	9b08      	ldr	r3, [sp, #32]
    b928:	6223      	str	r3, [r4, #32]
	instance->sched_cb = sched_cb;
    b92a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b92c:	6263      	str	r3, [r4, #36]	; 0x24
	instance->trigger_set_cb = trigger_set_cb;
    b92e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b930:	62a3      	str	r3, [r4, #40]	; 0x28
	instance->ticker_id_slot_previous = TICKER_NULL;
    b932:	f64f 73ff 	movw	r3, #65535	; 0xffff
	instance->ticks_slot_previous = 0U;
    b936:	e9c4 5505 	strd	r5, r5, [r4, #20]
	instance->ticker_id_slot_previous = TICKER_NULL;
    b93a:	83a3      	strh	r3, [r4, #28]
	instance->ticks_elapsed_first = 0U;
    b93c:	8165      	strh	r5, [r4, #10]
	return TICKER_STATUS_SUCCESS;
    b93e:	4628      	mov	r0, r5
    b940:	e7e0      	b.n	b904 <ticker_init+0x10>
		instance->nodes[count_node].priority = 0;
    b942:	eb01 0641 	add.w	r6, r1, r1, lsl #1
    b946:	eb02 1606 	add.w	r6, r2, r6, lsl #4
    b94a:	f886 002d 	strb.w	r0, [r6, #45]	; 0x2d
    b94e:	e7dd      	b.n	b90c <ticker_init+0x18>
		users[count_user].user_op = user_op_;
    b950:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
    b954:	f8c1 c004 	str.w	ip, [r1, #4]
		user_op_ += users[count_user].count_user_op;
    b958:	f817 0033 	ldrb.w	r0, [r7, r3, lsl #3]
		count_op -= users[count_user].count_user_op;
    b95c:	1a2d      	subs	r5, r5, r0
		user_op_ += users[count_user].count_user_op;
    b95e:	fb00 cc02 	mla	ip, r0, r2, ip
		count_op -= users[count_user].count_user_op;
    b962:	b2ed      	uxtb	r5, r5
    b964:	e7d9      	b.n	b91a <ticker_init+0x26>
    b966:	bf00      	nop
    b968:	20001c08 	.word	0x20001c08

0000b96c <ticker_is_initialized>:
	return !!(_instance[instance_index].count_node);
    b96c:	4b04      	ldr	r3, [pc, #16]	; (b980 <ticker_is_initialized+0x14>)
    b96e:	222c      	movs	r2, #44	; 0x2c
    b970:	fb02 3300 	mla	r3, r2, r0, r3
    b974:	7a18      	ldrb	r0, [r3, #8]
}
    b976:	3800      	subs	r0, #0
    b978:	bf18      	it	ne
    b97a:	2001      	movne	r0, #1
    b97c:	4770      	bx	lr
    b97e:	bf00      	nop
    b980:	20001c08 	.word	0x20001c08

0000b984 <ticker_trigger>:
	if (instance->sched_cb) {
    b984:	4b07      	ldr	r3, [pc, #28]	; (b9a4 <ticker_trigger+0x20>)
    b986:	222c      	movs	r2, #44	; 0x2c
    b988:	fb02 3100 	mla	r1, r2, r0, r3
{
    b98c:	b410      	push	{r4}
	if (instance->sched_cb) {
    b98e:	6a4c      	ldr	r4, [r1, #36]	; 0x24
    b990:	b134      	cbz	r4, b9a0 <ticker_trigger+0x1c>
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    b992:	460b      	mov	r3, r1
    b994:	46a4      	mov	ip, r4
    b996:	2201      	movs	r2, #1
}
    b998:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    b99a:	2103      	movs	r1, #3
    b99c:	2002      	movs	r0, #2
    b99e:	4760      	bx	ip
}
    b9a0:	bc10      	pop	{r4}
    b9a2:	4770      	bx	lr
    b9a4:	20001c08 	.word	0x20001c08

0000b9a8 <ticker_start_ext>:
{
    b9a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b9ac:	4606      	mov	r6, r0
    b9ae:	4608      	mov	r0, r1
    b9b0:	4611      	mov	r1, r2
    b9b2:	461a      	mov	r2, r3
	struct ticker_instance *instance = &_instance[instance_index];
    b9b4:	4b22      	ldr	r3, [pc, #136]	; (ba40 <ticker_start_ext+0x98>)
    b9b6:	242c      	movs	r4, #44	; 0x2c
    b9b8:	fb06 3904 	mla	r9, r6, r4, r3
	user = &instance->users[user_id];
    b9bc:	f8d9 3004 	ldr.w	r3, [r9, #4]
    b9c0:	eb03 0cc0 	add.w	ip, r3, r0, lsl #3
	if (last >= user->count_user_op) {
    b9c4:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
	last = user->last + 1;
    b9c8:	f89c 7003 	ldrb.w	r7, [ip, #3]
    b9cc:	1c7d      	adds	r5, r7, #1
    b9ce:	b2ed      	uxtb	r5, r5
		last = 0U;
    b9d0:	42ab      	cmp	r3, r5
    b9d2:	bf98      	it	ls
    b9d4:	2500      	movls	r5, #0
	if (last == user->first) {
    b9d6:	f89c 3001 	ldrb.w	r3, [ip, #1]
    b9da:	42ab      	cmp	r3, r5
    b9dc:	d02e      	beq.n	ba3c <ticker_start_ext+0x94>
	user_op = &user->user_op[user->last];
    b9de:	2334      	movs	r3, #52	; 0x34
    b9e0:	fb17 f703 	smulbb	r7, r7, r3
    b9e4:	f8dc 3004 	ldr.w	r3, [ip, #4]
	user_op->op = TICKER_USER_OP_TYPE_START;
    b9e8:	f04f 0804 	mov.w	r8, #4
	user_op = &user->user_op[user->last];
    b9ec:	19dc      	adds	r4, r3, r7
	user_op->op = TICKER_USER_OP_TYPE_START;
    b9ee:	f803 8007 	strb.w	r8, [r3, r7]
	user_op->params.start.ticks_first = ticks_first;
    b9f2:	9b08      	ldr	r3, [sp, #32]
    b9f4:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    b9f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b9f8:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    b9fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b9fc:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    b9fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ba00:	61a3      	str	r3, [r4, #24]
	user_op->params.start.lazy = lazy;
    ba02:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    ba06:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.ext_data = ext_data;
    ba08:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ba0a:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->params.start.fp_timeout_func = fp_timeout_func;
    ba0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ba0e:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
    ba10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ba12:	6223      	str	r3, [r4, #32]
	user_op->status = TICKER_STATUS_BUSY;
    ba14:	2302      	movs	r3, #2
    ba16:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->fp_op_func = fp_op_func;
    ba18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ba1a:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
    ba1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
    ba1e:	7061      	strb	r1, [r4, #1]
	user_op->params.start.ticks_at_start = ticks_anchor;
    ba20:	6062      	str	r2, [r4, #4]
	user_op->op_context = op_context;
    ba22:	6323      	str	r3, [r4, #48]	; 0x30
	user->last = last;
    ba24:	f88c 5003 	strb.w	r5, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    ba28:	e9d9 3508 	ldrd	r3, r5, [r9, #32]
    ba2c:	4798      	blx	r3
    ba2e:	464b      	mov	r3, r9
    ba30:	2200      	movs	r2, #0
    ba32:	4641      	mov	r1, r8
    ba34:	47a8      	blx	r5
	return user_op->status;
    ba36:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
    ba38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
    ba3c:	2001      	movs	r0, #1
    ba3e:	e7fb      	b.n	ba38 <ticker_start_ext+0x90>
    ba40:	20001c08 	.word	0x20001c08

0000ba44 <ticker_update_ext>:
{
    ba44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    ba48:	4c23      	ldr	r4, [pc, #140]	; (bad8 <ticker_update_ext+0x94>)
{
    ba4a:	4606      	mov	r6, r0
    ba4c:	4608      	mov	r0, r1
    ba4e:	4611      	mov	r1, r2
	struct ticker_instance *instance = &_instance[instance_index];
    ba50:	222c      	movs	r2, #44	; 0x2c
    ba52:	fb06 4802 	mla	r8, r6, r2, r4
	user = &instance->users[user_id];
    ba56:	f8d8 4004 	ldr.w	r4, [r8, #4]
    ba5a:	eb04 0cc0 	add.w	ip, r4, r0, lsl #3
	if (last >= user->count_user_op) {
    ba5e:	f814 2030 	ldrb.w	r2, [r4, r0, lsl #3]
	last = user->last + 1;
    ba62:	f89c 7003 	ldrb.w	r7, [ip, #3]
    ba66:	1c7d      	adds	r5, r7, #1
    ba68:	b2ed      	uxtb	r5, r5
		last = 0U;
    ba6a:	42aa      	cmp	r2, r5
    ba6c:	bf98      	it	ls
    ba6e:	2500      	movls	r5, #0
	if (last == user->first) {
    ba70:	f89c 2001 	ldrb.w	r2, [ip, #1]
    ba74:	42aa      	cmp	r2, r5
    ba76:	d02c      	beq.n	bad2 <ticker_update_ext+0x8e>
	user_op = &user->user_op[user->last];
    ba78:	2234      	movs	r2, #52	; 0x34
    ba7a:	fb17 f702 	smulbb	r7, r7, r2
    ba7e:	f8dc 2004 	ldr.w	r2, [ip, #4]
    ba82:	19d4      	adds	r4, r2, r7
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    ba84:	f04f 0e05 	mov.w	lr, #5
    ba88:	f802 e007 	strb.w	lr, [r2, r7]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    ba8c:	6063      	str	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    ba8e:	9b06      	ldr	r3, [sp, #24]
    ba90:	60a3      	str	r3, [r4, #8]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    ba92:	9b07      	ldr	r3, [sp, #28]
    ba94:	60e3      	str	r3, [r4, #12]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    ba96:	9b08      	ldr	r3, [sp, #32]
    ba98:	6123      	str	r3, [r4, #16]
	user_op->params.update.lazy = lazy;
    ba9a:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    ba9e:	82a3      	strh	r3, [r4, #20]
	user_op->params.update.force = force;
    baa0:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    baa4:	75a3      	strb	r3, [r4, #22]
	user_op->params.update.must_expire = must_expire;
    baa6:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    baaa:	75e3      	strb	r3, [r4, #23]
	user_op->status = TICKER_STATUS_BUSY;
    baac:	2302      	movs	r3, #2
    baae:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->fp_op_func = fp_op_func;
    bab0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    bab2:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
    bab4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	user_op->id = ticker_id;
    bab6:	7061      	strb	r1, [r4, #1]
	user_op->op_context = op_context;
    bab8:	6323      	str	r3, [r4, #48]	; 0x30
	user->last = last;
    baba:	f88c 5003 	strb.w	r5, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    babe:	e9d8 3508 	ldrd	r3, r5, [r8, #32]
    bac2:	4798      	blx	r3
    bac4:	4643      	mov	r3, r8
    bac6:	2200      	movs	r2, #0
    bac8:	2104      	movs	r1, #4
    baca:	47a8      	blx	r5
	return user_op->status;
    bacc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
    bace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
    bad2:	2001      	movs	r0, #1
    bad4:	e7fb      	b.n	bace <ticker_update_ext+0x8a>
    bad6:	bf00      	nop
    bad8:	20001c08 	.word	0x20001c08

0000badc <ticker_stop>:
{
    badc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    bae0:	4c1a      	ldr	r4, [pc, #104]	; (bb4c <ticker_stop+0x70>)
{
    bae2:	4605      	mov	r5, r0
    bae4:	4608      	mov	r0, r1
    bae6:	4611      	mov	r1, r2
	struct ticker_instance *instance = &_instance[instance_index];
    bae8:	222c      	movs	r2, #44	; 0x2c
    baea:	fb05 4902 	mla	r9, r5, r2, r4
	user = &instance->users[user_id];
    baee:	f8d9 2004 	ldr.w	r2, [r9, #4]
    baf2:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
	if (last >= user->count_user_op) {
    baf6:	f812 2030 	ldrb.w	r2, [r2, r0, lsl #3]
	last = user->last + 1;
    bafa:	78fe      	ldrb	r6, [r7, #3]
    bafc:	1c74      	adds	r4, r6, #1
    bafe:	b2e4      	uxtb	r4, r4
		last = 0U;
    bb00:	42a2      	cmp	r2, r4
    bb02:	bf98      	it	ls
    bb04:	2400      	movls	r4, #0
	if (last == user->first) {
    bb06:	787a      	ldrb	r2, [r7, #1]
    bb08:	42a2      	cmp	r2, r4
    bb0a:	d01d      	beq.n	bb48 <ticker_stop+0x6c>
	user_op = &user->user_op[user->last];
    bb0c:	2234      	movs	r2, #52	; 0x34
    bb0e:	fb16 f602 	smulbb	r6, r6, r2
    bb12:	687a      	ldr	r2, [r7, #4]
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    bb14:	f04f 0c07 	mov.w	ip, #7
    bb18:	f802 c006 	strb.w	ip, [r2, r6]
	user_op = &user->user_op[user->last];
    bb1c:	eb02 0806 	add.w	r8, r2, r6
	user_op->status = TICKER_STATUS_BUSY;
    bb20:	2202      	movs	r2, #2
	user_op->fp_op_func = fp_op_func;
    bb22:	e9c8 230a 	strd	r2, r3, [r8, #40]	; 0x28
	user_op->op_context = op_context;
    bb26:	9b08      	ldr	r3, [sp, #32]
	user_op->id = ticker_id;
    bb28:	f888 1001 	strb.w	r1, [r8, #1]
	user_op->op_context = op_context;
    bb2c:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
	user->last = last;
    bb30:	70fc      	strb	r4, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    bb32:	e9d9 3408 	ldrd	r3, r4, [r9, #32]
    bb36:	4798      	blx	r3
    bb38:	464b      	mov	r3, r9
    bb3a:	2200      	movs	r2, #0
    bb3c:	2104      	movs	r1, #4
    bb3e:	47a0      	blx	r4
	return user_op->status;
    bb40:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
}
    bb44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
    bb48:	2001      	movs	r0, #1
    bb4a:	e7fb      	b.n	bb44 <ticker_stop+0x68>
    bb4c:	20001c08 	.word	0x20001c08

0000bb50 <ll_addr_set>:

static uint8_t pub_addr[BDADDR_SIZE];
static uint8_t rnd_addr[BDADDR_SIZE];

uint8_t ll_addr_set(uint8_t addr_type, uint8_t const *const bdaddr)
{
    bb50:	b570      	push	{r4, r5, r6, lr}
    bb52:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_BROADCASTER)) {
#if defined(CONFIG_BT_CTLR_ADV_EXT)
		if (ull_adv_is_enabled(0) && !ll_adv_cmds_is_ext()) {
#else /* !CONFIG_BT_CTLR_ADV_EXT */
		if (ull_adv_is_enabled(0)) {
    bb54:	2000      	movs	r0, #0
{
    bb56:	460d      	mov	r5, r1
		if (ull_adv_is_enabled(0)) {
    bb58:	f010 fbf9 	bl	1c34e <ull_adv_is_enabled>
    bb5c:	b110      	cbz	r0, bb64 <ll_addr_set+0x14>
#endif /* !CONFIG_BT_CTLR_ADV_EXT */
			return BT_HCI_ERR_CMD_DISALLOWED;
    bb5e:	240c      	movs	r4, #12
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
}
    bb60:	4620      	mov	r0, r4
    bb62:	bd70      	pop	{r4, r5, r6, pc}
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
    bb64:	f010 fce8 	bl	1c538 <ull_scan_is_enabled>
	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
    bb68:	f010 0606 	ands.w	r6, r0, #6
    bb6c:	d1f7      	bne.n	bb5e <ll_addr_set+0xe>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    bb6e:	2206      	movs	r2, #6
    bb70:	4629      	mov	r1, r5
	if (addr_type) {
    bb72:	b124      	cbz	r4, bb7e <ll_addr_set+0x2e>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    bb74:	4804      	ldr	r0, [pc, #16]	; (bb88 <ll_addr_set+0x38>)
    bb76:	f00b fb6d 	bl	17254 <memcpy>
	return 0;
    bb7a:	4634      	mov	r4, r6
    bb7c:	e7f0      	b.n	bb60 <ll_addr_set+0x10>
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    bb7e:	4803      	ldr	r0, [pc, #12]	; (bb8c <ll_addr_set+0x3c>)
    bb80:	f00b fb68 	bl	17254 <memcpy>
    bb84:	e7ec      	b.n	bb60 <ll_addr_set+0x10>
    bb86:	bf00      	nop
    bb88:	20002b38 	.word	0x20002b38
    bb8c:	20002b32 	.word	0x20002b32

0000bb90 <ll_addr_get>:

uint8_t *ll_addr_get(uint8_t addr_type)
{
	if (addr_type > BT_ADDR_LE_RANDOM) {
    bb90:	2801      	cmp	r0, #1
{
    bb92:	4602      	mov	r2, r0
	if (addr_type > BT_ADDR_LE_RANDOM) {
    bb94:	d805      	bhi.n	bba2 <ll_addr_get+0x12>
		return NULL;
	}

	if (addr_type) {
		return rnd_addr;
    bb96:	4b04      	ldr	r3, [pc, #16]	; (bba8 <ll_addr_get+0x18>)
    bb98:	4804      	ldr	r0, [pc, #16]	; (bbac <ll_addr_get+0x1c>)
    bb9a:	2a00      	cmp	r2, #0
    bb9c:	bf08      	it	eq
    bb9e:	4618      	moveq	r0, r3
    bba0:	4770      	bx	lr
		return NULL;
    bba2:	2000      	movs	r0, #0
	}

	return pub_addr;
}
    bba4:	4770      	bx	lr
    bba6:	bf00      	nop
    bba8:	20002b32 	.word	0x20002b32
    bbac:	20002b38 	.word	0x20002b38

0000bbb0 <hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int hci_driver_init(const struct device *unused)
{
    bbb0:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    bbb2:	4802      	ldr	r0, [pc, #8]	; (bbbc <hci_driver_init+0xc>)
    bbb4:	f7f9 f8d4 	bl	4d60 <bt_hci_driver_register>

	return 0;
}
    bbb8:	2000      	movs	r0, #0
    bbba:	bd08      	pop	{r3, pc}
    bbbc:	0001f9ac 	.word	0x0001f9ac

0000bbc0 <hci_driver_send>:
	if (!buf->len) {
    bbc0:	8983      	ldrh	r3, [r0, #12]
{
    bbc2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bbc4:	4605      	mov	r5, r0
	if (!buf->len) {
    bbc6:	b33b      	cbz	r3, bc18 <hci_driver_send+0x58>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    bbc8:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
    bbca:	b18b      	cbz	r3, bbf0 <hci_driver_send+0x30>
    bbcc:	2b02      	cmp	r3, #2
    bbce:	d123      	bne.n	bc18 <hci_driver_send+0x58>
	err = hci_acl_handle(buf, &evt);
    bbd0:	a901      	add	r1, sp, #4
    bbd2:	f000 fc77 	bl	c4c4 <hci_acl_handle>
    bbd6:	4604      	mov	r4, r0
	if (evt) {
    bbd8:	9801      	ldr	r0, [sp, #4]
    bbda:	b108      	cbz	r0, bbe0 <hci_driver_send+0x20>
		bt_recv_prio(evt);
    bbdc:	f7f9 f8a2 	bl	4d24 <bt_recv_prio>
	if (!err) {
    bbe0:	b91c      	cbnz	r4, bbea <hci_driver_send+0x2a>
		net_buf_unref(buf);
    bbe2:	4628      	mov	r0, r5
    bbe4:	f006 fb54 	bl	12290 <net_buf_unref>
    bbe8:	2400      	movs	r4, #0
}
    bbea:	4620      	mov	r0, r4
    bbec:	b003      	add	sp, #12
    bbee:	bd30      	pop	{r4, r5, pc}
	evt = hci_cmd_handle(buf, (void **) &node_rx);
    bbf0:	a901      	add	r1, sp, #4
	struct node_rx_pdu *node_rx = NULL;
    bbf2:	9301      	str	r3, [sp, #4]
	evt = hci_cmd_handle(buf, (void **) &node_rx);
    bbf4:	f000 f9fc 	bl	bff0 <hci_cmd_handle>
	if (evt) {
    bbf8:	2800      	cmp	r0, #0
    bbfa:	d0f2      	beq.n	bbe2 <hci_driver_send+0x22>
		bt_recv_prio(evt);
    bbfc:	f7f9 f892 	bl	4d24 <bt_recv_prio>
		if (node_rx) {
    bc00:	9c01      	ldr	r4, [sp, #4]
    bc02:	2c00      	cmp	r4, #0
    bc04:	d0ed      	beq.n	bbe2 <hci_driver_send+0x22>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    bc06:	4620      	mov	r0, r4
    bc08:	f000 feb2 	bl	c970 <hci_get_class>
    bc0c:	7160      	strb	r0, [r4, #5]
			k_fifo_put(&recv_fifo, node_rx);
    bc0e:	9901      	ldr	r1, [sp, #4]
    bc10:	4803      	ldr	r0, [pc, #12]	; (bc20 <hci_driver_send+0x60>)
    bc12:	f012 fc87 	bl	1e524 <k_queue_append>
	if (!err) {
    bc16:	e7e4      	b.n	bbe2 <hci_driver_send+0x22>
	switch (type) {
    bc18:	f06f 0415 	mvn.w	r4, #21
    bc1c:	e7e5      	b.n	bbea <hci_driver_send+0x2a>
    bc1e:	bf00      	nop
    bc20:	20000b54 	.word	0x20000b54

0000bc24 <recv_thread>:
{
    bc24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return z_impl_k_queue_get(queue, timeout);
    bc26:	4e2f      	ldr	r6, [pc, #188]	; (bce4 <recv_thread+0xc0>)
	struct net_buf *buf = NULL;
    bc28:	2700      	movs	r7, #0
    bc2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    bc2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    bc32:	4630      	mov	r0, r6
    bc34:	f009 fd0c 	bl	15650 <z_impl_k_queue_get>
		if (node_rx && !buf) {
    bc38:	2800      	cmp	r0, #0
    bc3a:	d0f6      	beq.n	bc2a <recv_thread+0x6>
	uint8_t class = node_rx->hdr.user_meta;
    bc3c:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
    bc3e:	9001      	str	r0, [sp, #4]
	switch (class) {
    bc40:	2b04      	cmp	r3, #4
    bc42:	d826      	bhi.n	bc92 <recv_thread+0x6e>
    bc44:	b33b      	cbz	r3, bc96 <recv_thread+0x72>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    bc46:	2b02      	cmp	r3, #2
    bc48:	d134      	bne.n	bcb4 <recv_thread+0x90>
			buf = bt_buf_get_evt(BT_HCI_EVT_UNKNOWN, true,
    bc4a:	2200      	movs	r2, #0
    bc4c:	2300      	movs	r3, #0
    bc4e:	2101      	movs	r1, #1
    bc50:	2000      	movs	r0, #0
    bc52:	f7f8 fc09 	bl	4468 <bt_buf_get_evt>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    bc56:	4604      	mov	r4, r0
		if (buf) {
    bc58:	b118      	cbz	r0, bc62 <recv_thread+0x3e>
			hci_evt_encode(node_rx, buf);
    bc5a:	4601      	mov	r1, r0
    bc5c:	9801      	ldr	r0, [sp, #4]
    bc5e:	f000 fcf3 	bl	c648 <hci_evt_encode>
	node_rx->hdr.next = NULL;
    bc62:	9b01      	ldr	r3, [sp, #4]
	ll_rx_mem_release((void **)&node_rx);
    bc64:	a801      	add	r0, sp, #4
	node_rx->hdr.next = NULL;
    bc66:	601f      	str	r7, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    bc68:	f001 f8f6 	bl	ce58 <ll_rx_mem_release>
		while (buf) {
    bc6c:	2c00      	cmp	r4, #0
    bc6e:	d0dc      	beq.n	bc2a <recv_thread+0x6>
			frag = net_buf_ref(buf);
    bc70:	4620      	mov	r0, r4
    bc72:	f011 f978 	bl	1cf66 <net_buf_ref>
			buf = net_buf_frag_del(NULL, buf);
    bc76:	4621      	mov	r1, r4
			frag = net_buf_ref(buf);
    bc78:	4605      	mov	r5, r0
			buf = net_buf_frag_del(NULL, buf);
    bc7a:	2000      	movs	r0, #0
    bc7c:	f011 f999 	bl	1cfb2 <net_buf_frag_del>
			if (frag->len) {
    bc80:	89ab      	ldrh	r3, [r5, #12]
			buf = net_buf_frag_del(NULL, buf);
    bc82:	4604      	mov	r4, r0
				bt_recv(frag);
    bc84:	4628      	mov	r0, r5
			if (frag->len) {
    bc86:	b353      	cbz	r3, bcde <recv_thread+0xba>
				bt_recv(frag);
    bc88:	f7f8 ffc8 	bl	4c1c <bt_recv>
	z_impl_k_yield();
    bc8c:	f00a f928 	bl	15ee0 <z_impl_k_yield>
}
    bc90:	e7ec      	b.n	bc6c <recv_thread+0x48>
	switch (class) {
    bc92:	2b05      	cmp	r3, #5
    bc94:	d016      	beq.n	bcc4 <recv_thread+0xa0>
		LL_ASSERT(0);
    bc96:	4a14      	ldr	r2, [pc, #80]	; (bce8 <recv_thread+0xc4>)
    bc98:	4914      	ldr	r1, [pc, #80]	; (bcec <recv_thread+0xc8>)
    bc9a:	4815      	ldr	r0, [pc, #84]	; (bcf0 <recv_thread+0xcc>)
    bc9c:	f44f 73cd 	mov.w	r3, #410	; 0x19a
    bca0:	f00a fcab 	bl	165fa <printk>
    bca4:	4040      	eors	r0, r0
    bca6:	f380 8811 	msr	BASEPRI, r0
    bcaa:	f04f 0003 	mov.w	r0, #3
    bcae:	df02      	svc	2
	struct net_buf *buf = NULL;
    bcb0:	2400      	movs	r4, #0
		break;
    bcb2:	e7d6      	b.n	bc62 <recv_thread+0x3e>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    bcb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    bcb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    bcbc:	2001      	movs	r0, #1
    bcbe:	f7f8 fba9 	bl	4414 <bt_buf_get_rx>
    bcc2:	e7c8      	b.n	bc56 <recv_thread+0x32>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    bcc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    bcc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    bccc:	2003      	movs	r0, #3
    bcce:	f7f8 fba1 	bl	4414 <bt_buf_get_rx>
    bcd2:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
    bcd4:	4601      	mov	r1, r0
    bcd6:	9801      	ldr	r0, [sp, #4]
    bcd8:	f000 fc7c 	bl	c5d4 <hci_acl_encode>
		break;
    bcdc:	e7c1      	b.n	bc62 <recv_thread+0x3e>
				net_buf_unref(frag);
    bcde:	f006 fad7 	bl	12290 <net_buf_unref>
    bce2:	e7d3      	b.n	bc8c <recv_thread+0x68>
    bce4:	20000b54 	.word	0x20000b54
    bce8:	000203b6 	.word	0x000203b6
    bcec:	00020e86 	.word	0x00020e86
    bcf0:	0002023c 	.word	0x0002023c

0000bcf4 <prio_recv_thread>:
{
    bcf4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
    bcf8:	4e2b      	ldr	r6, [pc, #172]	; (bda8 <prio_recv_thread+0xb4>)
				k_fifo_put(&recv_fifo, node_rx);
    bcfa:	4f2c      	ldr	r7, [pc, #176]	; (bdac <prio_recv_thread+0xb8>)
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
    bcfc:	f10d 0102 	add.w	r1, sp, #2
    bd00:	a801      	add	r0, sp, #4
    bd02:	f000 ffa7 	bl	cc54 <ll_rx_get>
    bd06:	4604      	mov	r4, r0
    bd08:	2800      	cmp	r0, #0
    bd0a:	d139      	bne.n	bd80 <prio_recv_thread+0x8c>
		if (node_rx) {
    bd0c:	9b01      	ldr	r3, [sp, #4]
    bd0e:	b37b      	cbz	r3, bd70 <prio_recv_thread+0x7c>
			ll_rx_dequeue();
    bd10:	f000 fffa 	bl	cd08 <ll_rx_dequeue>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    bd14:	9d01      	ldr	r5, [sp, #4]
    bd16:	4628      	mov	r0, r5
    bd18:	f000 fe2a 	bl	c970 <hci_get_class>
    bd1c:	7168      	strb	r0, [r5, #5]
			buf = process_prio_evt(node_rx, &evt_flags);
    bd1e:	9d01      	ldr	r5, [sp, #4]
	if (node_rx->hdr.user_meta == HCI_CLASS_EVT_CONNECTION) {
    bd20:	796b      	ldrb	r3, [r5, #5]
    bd22:	2b03      	cmp	r3, #3
    bd24:	d11d      	bne.n	bd62 <prio_recv_thread+0x6e>
		if (node_rx->hdr.type == NODE_RX_TYPE_TERMINATE) {
    bd26:	792b      	ldrb	r3, [r5, #4]
    bd28:	2b17      	cmp	r3, #23
    bd2a:	d11a      	bne.n	bd62 <prio_recv_thread+0x6e>
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
    bd2c:	4621      	mov	r1, r4
    bd2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    bd32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    bd36:	2005      	movs	r0, #5
		handle = node_rx->hdr.handle;
    bd38:	f8b5 8006 	ldrh.w	r8, [r5, #6]
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
    bd3c:	f7f8 fb94 	bl	4468 <bt_buf_get_evt>
			hci_disconn_complete_encode(pdu_data, handle, buf);
    bd40:	4641      	mov	r1, r8
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
    bd42:	4604      	mov	r4, r0
			hci_disconn_complete_encode(pdu_data, handle, buf);
    bd44:	4602      	mov	r2, r0
    bd46:	f105 001c 	add.w	r0, r5, #28
    bd4a:	f000 fc1d 	bl	c588 <hci_disconn_complete_encode>
			hci_disconn_complete_process(handle);
    bd4e:	4640      	mov	r0, r8
    bd50:	f000 fc38 	bl	c5c4 <hci_disconn_complete_process>
			if (buf) {
    bd54:	b12c      	cbz	r4, bd62 <prio_recv_thread+0x6e>
				bt_recv_prio(buf);
    bd56:	4620      	mov	r0, r4
    bd58:	f7f8 ffe4 	bl	4d24 <bt_recv_prio>
					net_buf_unref(buf);
    bd5c:	4620      	mov	r0, r4
    bd5e:	f006 fa97 	bl	12290 <net_buf_unref>
				k_fifo_put(&recv_fifo, node_rx);
    bd62:	9901      	ldr	r1, [sp, #4]
    bd64:	4638      	mov	r0, r7
    bd66:	f012 fbdd 	bl	1e524 <k_queue_append>
		if (iso_received || node_rx) {
    bd6a:	9b01      	ldr	r3, [sp, #4]
    bd6c:	2b00      	cmp	r3, #0
    bd6e:	d1c5      	bne.n	bcfc <prio_recv_thread+0x8>
    bd70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    bd74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    bd78:	4630      	mov	r0, r6
    bd7a:	f009 fcc3 	bl	15704 <z_impl_k_sem_take>
		BT_DBG("sem taken");
    bd7e:	e7bd      	b.n	bcfc <prio_recv_thread+0x8>
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    bd80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    bd84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    bd88:	2100      	movs	r1, #0
    bd8a:	2013      	movs	r0, #19
    bd8c:	f7f8 fb6c 	bl	4468 <bt_buf_get_evt>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    bd90:	f8bd 1002 	ldrh.w	r1, [sp, #2]
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    bd94:	4605      	mov	r5, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    bd96:	4622      	mov	r2, r4
    bd98:	f010 fa01 	bl	1c19e <hci_num_cmplt_encode>
			bt_recv_prio(buf);
    bd9c:	4628      	mov	r0, r5
    bd9e:	f7f8 ffc1 	bl	4d24 <bt_recv_prio>
	z_impl_k_yield();
    bda2:	f00a f89d 	bl	15ee0 <z_impl_k_yield>
    bda6:	e7a9      	b.n	bcfc <prio_recv_thread+0x8>
    bda8:	20000b0c 	.word	0x20000b0c
    bdac:	20000b54 	.word	0x20000b54

0000bdb0 <hci_driver_open>:
{
    bdb0:	b5d0      	push	{r4, r6, r7, lr}
	err = ll_init(&sem_prio_recv);
    bdb2:	481a      	ldr	r0, [pc, #104]	; (be1c <hci_driver_open+0x6c>)
{
    bdb4:	b088      	sub	sp, #32
	err = ll_init(&sem_prio_recv);
    bdb6:	f001 fcaf 	bl	d718 <ll_init>
	if (err) {
    bdba:	4604      	mov	r4, r0
    bdbc:	bb58      	cbnz	r0, be16 <hci_driver_open+0x66>
	hci_init(NULL);
    bdbe:	f000 fded 	bl	c99c <hci_init>
	k_thread_create(&prio_recv_thread_data, prio_recv_thread_stack,
    bdc2:	2600      	movs	r6, #0
    bdc4:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    bdc6:	f06f 0309 	mvn.w	r3, #9
    bdca:	e9cd 4302 	strd	r4, r3, [sp, #8]
    bdce:	e9cd 6706 	strd	r6, r7, [sp, #24]
    bdd2:	e9cd 4400 	strd	r4, r4, [sp]
    bdd6:	4b12      	ldr	r3, [pc, #72]	; (be20 <hci_driver_open+0x70>)
    bdd8:	4912      	ldr	r1, [pc, #72]	; (be24 <hci_driver_open+0x74>)
    bdda:	9404      	str	r4, [sp, #16]
    bddc:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    bde0:	4811      	ldr	r0, [pc, #68]	; (be28 <hci_driver_open+0x78>)
    bde2:	f009 fb91 	bl	15508 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    bde6:	4911      	ldr	r1, [pc, #68]	; (be2c <hci_driver_open+0x7c>)
    bde8:	480f      	ldr	r0, [pc, #60]	; (be28 <hci_driver_open+0x78>)
    bdea:	f012 fb13 	bl	1e414 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    bdee:	f06f 0307 	mvn.w	r3, #7
    bdf2:	e9cd 4302 	strd	r4, r3, [sp, #8]
    bdf6:	e9cd 6706 	strd	r6, r7, [sp, #24]
    bdfa:	e9cd 4400 	strd	r4, r4, [sp]
    bdfe:	4b0c      	ldr	r3, [pc, #48]	; (be30 <hci_driver_open+0x80>)
    be00:	490c      	ldr	r1, [pc, #48]	; (be34 <hci_driver_open+0x84>)
    be02:	9404      	str	r4, [sp, #16]
    be04:	f44f 6200 	mov.w	r2, #2048	; 0x800
    be08:	480b      	ldr	r0, [pc, #44]	; (be38 <hci_driver_open+0x88>)
    be0a:	f009 fb7d 	bl	15508 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    be0e:	490b      	ldr	r1, [pc, #44]	; (be3c <hci_driver_open+0x8c>)
    be10:	4809      	ldr	r0, [pc, #36]	; (be38 <hci_driver_open+0x88>)
    be12:	f012 faff 	bl	1e414 <z_impl_k_thread_name_set>
}
    be16:	4620      	mov	r0, r4
    be18:	b008      	add	sp, #32
    be1a:	bdd0      	pop	{r4, r6, r7, pc}
    be1c:	20000b0c 	.word	0x20000b0c
    be20:	0000bcf5 	.word	0x0000bcf5
    be24:	200039a0 	.word	0x200039a0
    be28:	20001378 	.word	0x20001378
    be2c:	000203f6 	.word	0x000203f6
    be30:	0000bc25 	.word	0x0000bc25
    be34:	20003b80 	.word	0x20003b80
    be38:	200013f8 	.word	0x200013f8
    be3c:	00020400 	.word	0x00020400

0000be40 <cmd_complete_status>:
{
	return bt_hci_cmd_status_create(_opcode, status);
}

static struct net_buf *cmd_complete_status(uint8_t status)
{
    be40:	b538      	push	{r3, r4, r5, lr}
	struct net_buf *buf;
	struct bt_hci_evt_cc_status *ccst;

	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    be42:	4b07      	ldr	r3, [pc, #28]	; (be60 <cmd_complete_status+0x20>)
{
    be44:	4605      	mov	r5, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    be46:	2101      	movs	r1, #1
    be48:	8818      	ldrh	r0, [r3, #0]
    be4a:	f00b fe52 	bl	17af2 <bt_hci_cmd_complete_create>
	return net_buf_simple_add(&buf->b, len);
    be4e:	2101      	movs	r1, #1
    be50:	4604      	mov	r4, r0
    be52:	3008      	adds	r0, #8
    be54:	f011 f8b9 	bl	1cfca <net_buf_simple_add>
	ccst = net_buf_add(buf, sizeof(*ccst));
	ccst->status = status;
    be58:	7005      	strb	r5, [r0, #0]

	return buf;
}
    be5a:	4620      	mov	r0, r4
    be5c:	bd38      	pop	{r3, r4, r5, pc}
    be5e:	bf00      	nop
    be60:	20002b14 	.word	0x20002b14

0000be64 <cmd_status>:
	return bt_hci_cmd_status_create(_opcode, status);
    be64:	4b02      	ldr	r3, [pc, #8]	; (be70 <cmd_status+0xc>)
{
    be66:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    be68:	8818      	ldrh	r0, [r3, #0]
    be6a:	f00b be54 	b.w	17b16 <bt_hci_cmd_status_create>
    be6e:	bf00      	nop
    be70:	20002b14 	.word	0x20002b14

0000be74 <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(uint8_t status, struct pdu_data *pdu_data,
				    uint16_t handle, struct net_buf *buf)
{
    be74:	b570      	push	{r4, r5, r6, lr}
    be76:	4604      	mov	r4, r0
    be78:	4618      	mov	r0, r3
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    be7a:	4b0f      	ldr	r3, [pc, #60]	; (beb8 <le_remote_feat_complete+0x44>)
    be7c:	685b      	ldr	r3, [r3, #4]
{
    be7e:	4616      	mov	r6, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    be80:	009a      	lsls	r2, r3, #2
{
    be82:	460d      	mov	r5, r1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    be84:	d517      	bpl.n	beb6 <le_remote_feat_complete+0x42>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    be86:	4b0d      	ldr	r3, [pc, #52]	; (bebc <le_remote_feat_complete+0x48>)
    be88:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    be8a:	071b      	lsls	r3, r3, #28
    be8c:	d513      	bpl.n	beb6 <le_remote_feat_complete+0x42>
		return;
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    be8e:	220b      	movs	r2, #11
    be90:	2104      	movs	r1, #4
    be92:	f010 f968 	bl	1c166 <meta_evt>

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
	if (!status) {
		memcpy(&sep->features[0],
    be96:	2208      	movs	r2, #8
	sep->status = status;
    be98:	7004      	strb	r4, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    be9a:	f8a0 6001 	strh.w	r6, [r0, #1]
	if (!status) {
    be9e:	3003      	adds	r0, #3
    bea0:	b924      	cbnz	r4, beac <le_remote_feat_complete+0x38>
		memcpy(&sep->features[0],
    bea2:	1d29      	adds	r1, r5, #4
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
    bea4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(&sep->features[0],
    bea8:	f00b b9d4 	b.w	17254 <memcpy>
}
    beac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
    beb0:	2100      	movs	r1, #0
    beb2:	f00b b9da 	b.w	1726a <memset>
}
    beb6:	bd70      	pop	{r4, r5, r6, pc}
    beb8:	200001d0 	.word	0x200001d0
    bebc:	200001d8 	.word	0x200001d8

0000bec0 <hci_cmd_complete>:
{
    bec0:	b538      	push	{r3, r4, r5, lr}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    bec2:	4b06      	ldr	r3, [pc, #24]	; (bedc <hci_cmd_complete+0x1c>)
{
    bec4:	4605      	mov	r5, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    bec6:	8818      	ldrh	r0, [r3, #0]
{
    bec8:	460c      	mov	r4, r1
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    beca:	f00b fe12 	bl	17af2 <bt_hci_cmd_complete_create>
    bece:	4621      	mov	r1, r4
    bed0:	6028      	str	r0, [r5, #0]
}
    bed2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    bed6:	3008      	adds	r0, #8
    bed8:	f011 b877 	b.w	1cfca <net_buf_simple_add>
    bedc:	20002b14 	.word	0x20002b14

0000bee0 <hci_vendor_cmd_handle_common>:
{
    bee0:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (ocf) {
    bee2:	3801      	subs	r0, #1
{
    bee4:	b087      	sub	sp, #28
    bee6:	4614      	mov	r4, r2
	switch (ocf) {
    bee8:	2809      	cmp	r0, #9
    beea:	d87c      	bhi.n	bfe6 <hci_vendor_cmd_handle_common+0x106>
    beec:	e8df f000 	tbb	[pc, r0]
    bef0:	7b321b05 	.word	0x7b321b05
    bef4:	3e7b597b 	.word	0x3e7b597b
    bef8:	6f62      	.short	0x6f62
	rp = hci_cmd_complete(evt, sizeof(*rp));
    befa:	210d      	movs	r1, #13
    befc:	4610      	mov	r0, r2
    befe:	f7ff ffdf 	bl	bec0 <hci_cmd_complete>
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
    bf02:	2302      	movs	r3, #2
	rp->status = 0x00;
    bf04:	2100      	movs	r1, #0
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
    bf06:	7043      	strb	r3, [r0, #1]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
    bf08:	70c3      	strb	r3, [r0, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    bf0a:	2303      	movs	r3, #3
	rp->status = 0x00;
    bf0c:	7001      	strb	r1, [r0, #0]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
    bf0e:	7081      	strb	r1, [r0, #2]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
    bf10:	7101      	strb	r1, [r0, #4]
	rp->fw_variant = 0U;
    bf12:	7141      	strb	r1, [r0, #5]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    bf14:	7183      	strb	r3, [r0, #6]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
    bf16:	71c1      	strb	r1, [r0, #7]
    bf18:	7201      	strb	r1, [r0, #8]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
    bf1a:	7241      	strb	r1, [r0, #9]
    bf1c:	7281      	strb	r1, [r0, #10]
    bf1e:	72c1      	strb	r1, [r0, #11]
    bf20:	7301      	strb	r1, [r0, #12]
	return 0;
    bf22:	2400      	movs	r4, #0
}
    bf24:	e013      	b.n	bf4e <hci_vendor_cmd_handle_common+0x6e>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    bf26:	2141      	movs	r1, #65	; 0x41
    bf28:	4610      	mov	r0, r2
    bf2a:	f7ff ffc9 	bl	bec0 <hci_cmd_complete>
	rp->status = 0x00;
    bf2e:	2400      	movs	r4, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    bf30:	4605      	mov	r5, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    bf32:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    bf34:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    bf38:	4621      	mov	r1, r4
    bf3a:	f00b f996 	bl	1726a <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
    bf3e:	786b      	ldrb	r3, [r5, #1]
    bf40:	f063 0358 	orn	r3, r3, #88	; 0x58
    bf44:	706b      	strb	r3, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    bf46:	78ab      	ldrb	r3, [r5, #2]
    bf48:	f043 0303 	orr.w	r3, r3, #3
    bf4c:	70ab      	strb	r3, [r5, #2]
}
    bf4e:	4620      	mov	r0, r4
    bf50:	b007      	add	sp, #28
    bf52:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
    bf54:	2109      	movs	r1, #9
    bf56:	4610      	mov	r0, r2
    bf58:	f7ff ffb2 	bl	bec0 <hci_cmd_complete>
	rp->status = 0x00;
    bf5c:	2400      	movs	r4, #0
    bf5e:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    bf62:	2208      	movs	r2, #8
    bf64:	4621      	mov	r1, r4
    bf66:	f00b f980 	bl	1726a <memset>
}
    bf6a:	e7f0      	b.n	bf4e <hci_vendor_cmd_handle_common+0x6e>
	const char build_info[] = HCI_VS_BUILD_INFO;
    bf6c:	4b1f      	ldr	r3, [pc, #124]	; (bfec <hci_vendor_cmd_handle_common+0x10c>)
    bf6e:	aa01      	add	r2, sp, #4
    bf70:	f103 0710 	add.w	r7, r3, #16
    bf74:	4616      	mov	r6, r2
    bf76:	6818      	ldr	r0, [r3, #0]
    bf78:	6859      	ldr	r1, [r3, #4]
    bf7a:	4615      	mov	r5, r2
    bf7c:	c503      	stmia	r5!, {r0, r1}
    bf7e:	3308      	adds	r3, #8
    bf80:	42bb      	cmp	r3, r7
    bf82:	462a      	mov	r2, r5
    bf84:	d1f7      	bne.n	bf76 <hci_vendor_cmd_handle_common+0x96>
    bf86:	781b      	ldrb	r3, [r3, #0]
    bf88:	702b      	strb	r3, [r5, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    bf8a:	2112      	movs	r1, #18
    bf8c:	4620      	mov	r0, r4
    bf8e:	f7ff ff97 	bl	bec0 <hci_cmd_complete>
	rp->status = 0x00;
    bf92:	2400      	movs	r4, #0
    bf94:	f800 4b01 	strb.w	r4, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
    bf98:	2211      	movs	r2, #17
    bf9a:	4631      	mov	r1, r6
    bf9c:	f00b f95a 	bl	17254 <memcpy>
}
    bfa0:	e7d5      	b.n	bf4e <hci_vendor_cmd_handle_common+0x6e>
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    bfa2:	6889      	ldr	r1, [r1, #8]
    bfa4:	2000      	movs	r0, #0
    bfa6:	f7ff fdd3 	bl	bb50 <ll_addr_set>
	*evt = cmd_complete_status(0x00);
    bfaa:	2000      	movs	r0, #0
    bfac:	f7ff ff48 	bl	be40 <cmd_complete_status>
    bfb0:	6020      	str	r0, [r4, #0]
    bfb2:	e7b6      	b.n	bf22 <hci_vendor_cmd_handle_common+0x42>
	rp = hci_cmd_complete(evt, sizeof(*rp) +
    bfb4:	2118      	movs	r1, #24
    bfb6:	4610      	mov	r0, r2
    bfb8:	f7ff ff82 	bl	bec0 <hci_cmd_complete>
	rp->status = 0x00;
    bfbc:	2400      	movs	r4, #0
	rp = hci_cmd_complete(evt, sizeof(*rp) +
    bfbe:	4605      	mov	r5, r0
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
    bfc0:	2101      	movs	r1, #1
	rp->status = 0x00;
    bfc2:	f800 4b02 	strb.w	r4, [r0], #2
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
    bfc6:	f010 fef8 	bl	1cdba <hci_vendor_read_static_addr>
    bfca:	7068      	strb	r0, [r5, #1]
}
    bfcc:	e7bf      	b.n	bf4e <hci_vendor_cmd_handle_common+0x6e>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    bfce:	2121      	movs	r1, #33	; 0x21
    bfd0:	4610      	mov	r0, r2
    bfd2:	f7ff ff75 	bl	bec0 <hci_cmd_complete>
	rp->status = 0x00;
    bfd6:	4601      	mov	r1, r0
    bfd8:	2400      	movs	r4, #0
    bfda:	f801 4b11 	strb.w	r4, [r1], #17
	hci_vendor_read_key_hierarchy_roots(rp->ir, rp->er);
    bfde:	3001      	adds	r0, #1
    bfe0:	f010 ff41 	bl	1ce66 <hci_vendor_read_key_hierarchy_roots>
}
    bfe4:	e7b3      	b.n	bf4e <hci_vendor_cmd_handle_common+0x6e>
	switch (ocf) {
    bfe6:	f06f 0415 	mvn.w	r4, #21
    bfea:	e7b0      	b.n	bf4e <hci_vendor_cmd_handle_common+0x6e>
    bfec:	00020411 	.word	0x00020411

0000bff0 <hci_cmd_handle>:
{
    bff0:	b5f0      	push	{r4, r5, r6, r7, lr}
    bff2:	b08b      	sub	sp, #44	; 0x2c
	struct net_buf *evt = NULL;
    bff4:	2300      	movs	r3, #0
    bff6:	9305      	str	r3, [sp, #20]
	if (cmd->len < sizeof(*chdr)) {
    bff8:	8983      	ldrh	r3, [r0, #12]
    bffa:	2b02      	cmp	r3, #2
{
    bffc:	4604      	mov	r4, r0
	if (cmd->len < sizeof(*chdr)) {
    bffe:	d802      	bhi.n	c006 <hci_cmd_handle+0x16>
		return NULL;
    c000:	2000      	movs	r0, #0
}
    c002:	b00b      	add	sp, #44	; 0x2c
    c004:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
    c006:	2103      	movs	r1, #3
    c008:	3008      	adds	r0, #8
    c00a:	f011 f861 	bl	1d0d0 <net_buf_simple_pull_mem>
	if (cmd->len < chdr->param_len) {
    c00e:	89a2      	ldrh	r2, [r4, #12]
    c010:	7883      	ldrb	r3, [r0, #2]
    c012:	429a      	cmp	r2, r3
    c014:	d3f4      	bcc.n	c000 <hci_cmd_handle+0x10>
	_opcode = sys_le16_to_cpu(chdr->opcode);
    c016:	8803      	ldrh	r3, [r0, #0]
    c018:	4ac8      	ldr	r2, [pc, #800]	; (c33c <hci_cmd_handle+0x34c>)
	ocf = BT_OCF(_opcode);
    c01a:	f3c3 0009 	ubfx	r0, r3, #0, #10
	_opcode = sys_le16_to_cpu(chdr->opcode);
    c01e:	8013      	strh	r3, [r2, #0]
	switch (BT_OGF(_opcode)) {
    c020:	f3c3 2385 	ubfx	r3, r3, #10, #6
    c024:	2b08      	cmp	r3, #8
    c026:	d80d      	bhi.n	c044 <hci_cmd_handle+0x54>
    c028:	b17b      	cbz	r3, c04a <hci_cmd_handle+0x5a>
    c02a:	3b01      	subs	r3, #1
    c02c:	2b07      	cmp	r3, #7
    c02e:	d80c      	bhi.n	c04a <hci_cmd_handle+0x5a>
    c030:	e8df f013 	tbh	[pc, r3, lsl #1]
    c034:	000b000d 	.word	0x000b000d
    c038:	005d001e 	.word	0x005d001e
    c03c:	000b000b 	.word	0x000b000b
    c040:	00e4000b 	.word	0x00e4000b
    c044:	2b3f      	cmp	r3, #63	; 0x3f
    c046:	f000 8234 	beq.w	c4b2 <hci_cmd_handle+0x4c2>
		evt = cmd_status(BT_HCI_ERR_UNKNOWN_CMD);
    c04a:	2001      	movs	r0, #1
    c04c:	e00d      	b.n	c06a <hci_cmd_handle+0x7a>
	switch (ocf) {
    c04e:	2806      	cmp	r0, #6
    c050:	d006      	beq.n	c060 <hci_cmd_handle+0x70>
    c052:	281d      	cmp	r0, #29
    c054:	d1f9      	bne.n	c04a <hci_cmd_handle+0x5a>
	handle = sys_le16_to_cpu(cmd->handle);
    c056:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
    c058:	8818      	ldrh	r0, [r3, #0]
    c05a:	f010 fb98 	bl	1c78e <ll_version_ind_send>
	*evt = cmd_status(status);
    c05e:	e004      	b.n	c06a <hci_cmd_handle+0x7a>
	struct bt_hci_cp_disconnect *cmd = (void *)buf->data;
    c060:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
    c062:	7899      	ldrb	r1, [r3, #2]
    c064:	8818      	ldrh	r0, [r3, #0]
    c066:	f002 fb5d 	bl	e724 <ll_terminate_ind_send>
		evt = cmd_status(BT_HCI_ERR_UNKNOWN_CMD);
    c06a:	f7ff fefb 	bl	be64 <cmd_status>
    c06e:	e022      	b.n	c0b6 <hci_cmd_handle+0xc6>
	switch (ocf) {
    c070:	282d      	cmp	r0, #45	; 0x2d
    c072:	d029      	beq.n	c0c8 <hci_cmd_handle+0xd8>
    c074:	d81a      	bhi.n	c0ac <hci_cmd_handle+0xbc>
    c076:	2801      	cmp	r0, #1
    c078:	d01f      	beq.n	c0ba <hci_cmd_handle+0xca>
    c07a:	2803      	cmp	r0, #3
    c07c:	d1e5      	bne.n	c04a <hci_cmd_handle+0x5a>
	event_mask = DEFAULT_EVENT_MASK;
    c07e:	4bb0      	ldr	r3, [pc, #704]	; (c340 <hci_cmd_handle+0x350>)
    c080:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c084:	f641 71ff 	movw	r1, #8191	; 0x1fff
    c088:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    c08c:	4bad      	ldr	r3, [pc, #692]	; (c344 <hci_cmd_handle+0x354>)
    c08e:	201f      	movs	r0, #31
    c090:	2100      	movs	r1, #0
    c092:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
    c096:	f001 fbaf 	bl	d7f8 <ll_reset>
		*evt = cmd_complete_status(0x00);
    c09a:	2000      	movs	r0, #0
    c09c:	f7ff fed0 	bl	be40 <cmd_complete_status>
	conn_count = 0U;
    c0a0:	4ba9      	ldr	r3, [pc, #676]	; (c348 <hci_cmd_handle+0x358>)
		*evt = cmd_complete_status(0x00);
    c0a2:	9005      	str	r0, [sp, #20]
	conn_count = 0U;
    c0a4:	2200      	movs	r2, #0
    c0a6:	601a      	str	r2, [r3, #0]
	return evt;
    c0a8:	9805      	ldr	r0, [sp, #20]
    c0aa:	e7aa      	b.n	c002 <hci_cmd_handle+0x12>
	switch (ocf) {
    c0ac:	2863      	cmp	r0, #99	; 0x63
    c0ae:	d1cc      	bne.n	c04a <hci_cmd_handle+0x5a>
	*evt = cmd_complete_status(0x00);
    c0b0:	2000      	movs	r0, #0
	*evt = cmd_complete_status(status);
    c0b2:	f7ff fec5 	bl	be40 <cmd_complete_status>
		evt = cmd_status(BT_HCI_ERR_UNKNOWN_CMD);
    c0b6:	9005      	str	r0, [sp, #20]
    c0b8:	e7f6      	b.n	c0a8 <hci_cmd_handle+0xb8>
	event_mask = sys_get_le64(cmd->events);
    c0ba:	68a0      	ldr	r0, [r4, #8]
    c0bc:	f010 f86b 	bl	1c196 <sys_get_le64>
    c0c0:	4b9f      	ldr	r3, [pc, #636]	; (c340 <hci_cmd_handle+0x350>)
	le_event_mask = sys_get_le64(cmd->events);
    c0c2:	e9c3 0100 	strd	r0, r1, [r3]
    c0c6:	e7f3      	b.n	c0b0 <hci_cmd_handle+0xc0>
	struct bt_hci_cp_read_tx_power_level *cmd = (void *)buf->data;
    c0c8:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    c0ca:	2104      	movs	r1, #4
    c0cc:	a805      	add	r0, sp, #20
	handle = sys_le16_to_cpu(cmd->handle);
    c0ce:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
    c0d0:	789f      	ldrb	r7, [r3, #2]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    c0d2:	f7ff fef5 	bl	bec0 <hci_cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    c0d6:	b2ae      	uxth	r6, r5
	rp = hci_cmd_complete(evt, sizeof(*rp));
    c0d8:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(BT_HCI_VS_LL_HANDLE_TYPE_CONN,
    c0da:	1cc3      	adds	r3, r0, #3
    c0dc:	463a      	mov	r2, r7
    c0de:	4631      	mov	r1, r6
    c0e0:	2002      	movs	r0, #2
    c0e2:	f010 f82d 	bl	1c140 <ll_tx_pwr_lvl_get>
	rp->status = status;
    c0e6:	7020      	strb	r0, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
    c0e8:	f8a4 5001 	strh.w	r5, [r4, #1]
	if (err == -EINVAL) {
    c0ec:	e7dc      	b.n	c0a8 <hci_cmd_handle+0xb8>
	switch (ocf) {
    c0ee:	3801      	subs	r0, #1
    c0f0:	2808      	cmp	r0, #8
    c0f2:	d8aa      	bhi.n	c04a <hci_cmd_handle+0x5a>
    c0f4:	a301      	add	r3, pc, #4	; (adr r3, c0fc <hci_cmd_handle+0x10c>)
    c0f6:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
    c0fa:	bf00      	nop
    c0fc:	0000c121 	.word	0x0000c121
    c100:	0000c14b 	.word	0x0000c14b
    c104:	0000c1cb 	.word	0x0000c1cb
    c108:	0000c04b 	.word	0x0000c04b
    c10c:	0000c04b 	.word	0x0000c04b
    c110:	0000c04b 	.word	0x0000c04b
    c114:	0000c04b 	.word	0x0000c04b
    c118:	0000c04b 	.word	0x0000c04b
    c11c:	0000c1e7 	.word	0x0000c1e7
	rp = hci_cmd_complete(evt, sizeof(*rp));
    c120:	2109      	movs	r1, #9
    c122:	a805      	add	r0, sp, #20
    c124:	f7ff fecc 	bl	bec0 <hci_cmd_complete>
	rp->status = 0x00;
    c128:	2300      	movs	r3, #0
    c12a:	7003      	strb	r3, [r0, #0]
	rp->hci_revision = sys_cpu_to_le16(0);
    c12c:	7083      	strb	r3, [r0, #2]
    c12e:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
    c130:	f06f 030e 	mvn.w	r3, #14
	rp->hci_version = LL_VERSION_NUMBER;
    c134:	220c      	movs	r2, #12
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
    c136:	7143      	strb	r3, [r0, #5]
    c138:	2305      	movs	r3, #5
    c13a:	7183      	strb	r3, [r0, #6]
	rp->hci_version = LL_VERSION_NUMBER;
    c13c:	7042      	strb	r2, [r0, #1]
	rp->lmp_version = LL_VERSION_NUMBER;
    c13e:	7102      	strb	r2, [r0, #4]
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
    c140:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	dst[0] = val;
    c144:	71c3      	strb	r3, [r0, #7]
	dst[1] = val >> 8;
    c146:	7203      	strb	r3, [r0, #8]
	if (err == -EINVAL) {
    c148:	e7ae      	b.n	c0a8 <hci_cmd_handle+0xb8>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    c14a:	2141      	movs	r1, #65	; 0x41
    c14c:	a805      	add	r0, sp, #20
    c14e:	f7ff feb7 	bl	bec0 <hci_cmd_complete>
	rp->status = 0x00;
    c152:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    c154:	4604      	mov	r4, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    c156:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    c158:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    c15c:	f00b f885 	bl	1726a <memset>
	rp->commands[5] |= BIT(6) | BIT(7);
    c160:	79a3      	ldrb	r3, [r4, #6]
	rp->commands[26] |= BIT(6) | BIT(7);
    c162:	7ee2      	ldrb	r2, [r4, #27]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
    c164:	7ea1      	ldrb	r1, [r4, #26]
	rp->commands[28] |= BIT(3);
    c166:	7f60      	ldrb	r0, [r4, #29]
	rp->commands[5] |= BIT(6) | BIT(7);
    c168:	f063 033f 	orn	r3, r3, #63	; 0x3f
    c16c:	71a3      	strb	r3, [r4, #6]
	rp->commands[10] |= BIT(2);
    c16e:	7ae3      	ldrb	r3, [r4, #11]
    c170:	f043 0304 	orr.w	r3, r3, #4
    c174:	72e3      	strb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
    c176:	7be3      	ldrb	r3, [r4, #15]
    c178:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    c17c:	73e3      	strb	r3, [r4, #15]
	rp->commands[15] |= BIT(1);
    c17e:	7c23      	ldrb	r3, [r4, #16]
    c180:	f043 0302 	orr.w	r3, r3, #2
    c184:	7423      	strb	r3, [r4, #16]
	rp->commands[22] |= BIT(2);
    c186:	7de3      	ldrb	r3, [r4, #23]
    c188:	f043 0304 	orr.w	r3, r3, #4
    c18c:	75e3      	strb	r3, [r4, #23]
	rp->commands[27] |= BIT(0) | BIT(1);
    c18e:	7f23      	ldrb	r3, [r4, #28]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
    c190:	f063 0308 	orn	r3, r3, #8
    c194:	7723      	strb	r3, [r4, #28]
	rp->commands[33] |= BIT(4) | BIT(5);
    c196:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
	rp->commands[26] |= BIT(2) | BIT(3);
    c19a:	f062 0230 	orn	r2, r2, #48	; 0x30
	rp->commands[33] |= BIT(4) | BIT(5);
    c19e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
	rp->commands[26] |= BIT(2) | BIT(3);
    c1a2:	76e2      	strb	r2, [r4, #27]
	rp->commands[33] |= BIT(4) | BIT(5);
    c1a4:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	rp->commands[0] |= BIT(5);
    c1a8:	7862      	ldrb	r2, [r4, #1]
	rp->commands[38] |= BIT(7);
    c1aa:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[28] |= BIT(3);
    c1ae:	f040 0008 	orr.w	r0, r0, #8
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    c1b2:	f061 0108 	orn	r1, r1, #8
	rp->commands[0] |= BIT(5);
    c1b6:	f042 0220 	orr.w	r2, r2, #32
	rp->commands[38] |= BIT(7);
    c1ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[28] |= BIT(3);
    c1be:	7760      	strb	r0, [r4, #29]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    c1c0:	76a1      	strb	r1, [r4, #26]
	rp->commands[0] |= BIT(5);
    c1c2:	7062      	strb	r2, [r4, #1]
	rp->commands[38] |= BIT(7);
    c1c4:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	if (err == -EINVAL) {
    c1c8:	e76e      	b.n	c0a8 <hci_cmd_handle+0xb8>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    c1ca:	2109      	movs	r1, #9
    c1cc:	a805      	add	r0, sp, #20
    c1ce:	f7ff fe77 	bl	bec0 <hci_cmd_complete>
	rp->status = 0x00;
    c1d2:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    c1d4:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    c1d6:	2208      	movs	r2, #8
	rp->status = 0x00;
    c1d8:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    c1dc:	f00b f845 	bl	1726a <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    c1e0:	2360      	movs	r3, #96	; 0x60
    c1e2:	7163      	strb	r3, [r4, #5]
	if (err == -EINVAL) {
    c1e4:	e760      	b.n	c0a8 <hci_cmd_handle+0xb8>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    c1e6:	2107      	movs	r1, #7
    c1e8:	a805      	add	r0, sp, #20
    c1ea:	f7ff fe69 	bl	bec0 <hci_cmd_complete>
    c1ee:	4601      	mov	r1, r0
	rp->status = 0x00;
    c1f0:	2000      	movs	r0, #0
    c1f2:	f801 0b01 	strb.w	r0, [r1], #1
	(void)ll_addr_read(0, &rp->bdaddr.val[0]);
    c1f6:	f00f ff96 	bl	1c126 <ll_addr_read>
	if (err == -EINVAL) {
    c1fa:	e755      	b.n	c0a8 <hci_cmd_handle+0xb8>
	switch (ocf) {
    c1fc:	2821      	cmp	r0, #33	; 0x21
    c1fe:	d84b      	bhi.n	c298 <hci_cmd_handle+0x2a8>
    c200:	2800      	cmp	r0, #0
    c202:	f43f af22 	beq.w	c04a <hci_cmd_handle+0x5a>
    c206:	3801      	subs	r0, #1
    c208:	2820      	cmp	r0, #32
    c20a:	f63f af1e 	bhi.w	c04a <hci_cmd_handle+0x5a>
    c20e:	a301      	add	r3, pc, #4	; (adr r3, c214 <hci_cmd_handle+0x224>)
    c210:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
    c214:	0000c2b7 	.word	0x0000c2b7
    c218:	0000c2c1 	.word	0x0000c2c1
    c21c:	0000c2d9 	.word	0x0000c2d9
    c220:	0000c04b 	.word	0x0000c04b
    c224:	0000c315 	.word	0x0000c315
    c228:	0000c3bf 	.word	0x0000c3bf
    c22c:	0000c3db 	.word	0x0000c3db
    c230:	0000c3eb 	.word	0x0000c3eb
    c234:	0000c3f7 	.word	0x0000c3f7
    c238:	0000c403 	.word	0x0000c403
    c23c:	0000c40d 	.word	0x0000c40d
    c240:	0000c425 	.word	0x0000c425
    c244:	0000c04b 	.word	0x0000c04b
    c248:	0000c04b 	.word	0x0000c04b
    c24c:	0000c31f 	.word	0x0000c31f
    c250:	0000c335 	.word	0x0000c335
    c254:	0000c34d 	.word	0x0000c34d
    c258:	0000c355 	.word	0x0000c355
    c25c:	0000c459 	.word	0x0000c459
    c260:	0000c04b 	.word	0x0000c04b
    c264:	0000c435 	.word	0x0000c435
    c268:	0000c44f 	.word	0x0000c44f
    c26c:	0000c35d 	.word	0x0000c35d
    c270:	0000c383 	.word	0x0000c383
    c274:	0000c04b 	.word	0x0000c04b
    c278:	0000c04b 	.word	0x0000c04b
    c27c:	0000c04b 	.word	0x0000c04b
    c280:	0000c399 	.word	0x0000c399
    c284:	0000c04b 	.word	0x0000c04b
    c288:	0000c04b 	.word	0x0000c04b
    c28c:	0000c04b 	.word	0x0000c04b
    c290:	0000c475 	.word	0x0000c475
    c294:	0000c4a3 	.word	0x0000c4a3
    c298:	284b      	cmp	r0, #75	; 0x4b
    c29a:	f47f aed6 	bne.w	c04a <hci_cmd_handle+0x5a>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    c29e:	2103      	movs	r1, #3
    c2a0:	a805      	add	r0, sp, #20
    c2a2:	f7ff fe0d 	bl	bec0 <hci_cmd_complete>
	rp->status = 0x00;
    c2a6:	4601      	mov	r1, r0
    c2a8:	2300      	movs	r3, #0
    c2aa:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    c2ae:	3001      	adds	r0, #1
    c2b0:	f00f ff55 	bl	1c15e <ll_tx_pwr_get>
	if (err == -EINVAL) {
    c2b4:	e6f8      	b.n	c0a8 <hci_cmd_handle+0xb8>
	le_event_mask = sys_get_le64(cmd->events);
    c2b6:	68a0      	ldr	r0, [r4, #8]
    c2b8:	f00f ff6d 	bl	1c196 <sys_get_le64>
    c2bc:	4b21      	ldr	r3, [pc, #132]	; (c344 <hci_cmd_handle+0x354>)
    c2be:	e700      	b.n	c0c2 <hci_cmd_handle+0xd2>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    c2c0:	2104      	movs	r1, #4
    c2c2:	a805      	add	r0, sp, #20
    c2c4:	f7ff fdfc 	bl	bec0 <hci_cmd_complete>
	rp->status = 0x00;
    c2c8:	2300      	movs	r3, #0
    c2ca:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(LL_LENGTH_OCTETS_TX_MAX);
    c2cc:	221b      	movs	r2, #27
    c2ce:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = CONFIG_BT_BUF_ACL_TX_COUNT;
    c2d0:	2303      	movs	r3, #3
	rp->le_max_len = sys_cpu_to_le16(LL_LENGTH_OCTETS_TX_MAX);
    c2d2:	7042      	strb	r2, [r0, #1]
	rp->le_max_num = CONFIG_BT_BUF_ACL_TX_COUNT;
    c2d4:	70c3      	strb	r3, [r0, #3]
	if (err == -EINVAL) {
    c2d6:	e6e7      	b.n	c0a8 <hci_cmd_handle+0xb8>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    c2d8:	2109      	movs	r1, #9
    c2da:	a805      	add	r0, sp, #20
    c2dc:	f7ff fdf0 	bl	bec0 <hci_cmd_complete>
	rp->status = 0x00;
    c2e0:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    c2e2:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    c2e4:	2208      	movs	r2, #8
	rp->status = 0x00;
    c2e6:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    c2ea:	f00a ffbe 	bl	1726a <memset>
	sys_put_le64(ll_feat_get(), rp->features);
    c2ee:	f00f ff74 	bl	1c1da <ll_feat_get>
    c2f2:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
    c2f6:	7060      	strb	r0, [r4, #1]
	dst[1] = val >> 8;
    c2f8:	70a3      	strb	r3, [r4, #2]
	sys_put_le16(val >> 16, &dst[2]);
    c2fa:	0c00      	lsrs	r0, r0, #16
	dst[1] = val >> 8;
    c2fc:	f3c1 2307 	ubfx	r3, r1, #8, #8
	dst[0] = val;
    c300:	7161      	strb	r1, [r4, #5]
	sys_put_le16(val >> 16, &dst[2]);
    c302:	0c09      	lsrs	r1, r1, #16
	dst[0] = val;
    c304:	70e0      	strb	r0, [r4, #3]
    c306:	71e1      	strb	r1, [r4, #7]
	dst[1] = val >> 8;
    c308:	0a00      	lsrs	r0, r0, #8
    c30a:	0a09      	lsrs	r1, r1, #8
    c30c:	7120      	strb	r0, [r4, #4]
    c30e:	71a3      	strb	r3, [r4, #6]
    c310:	7221      	strb	r1, [r4, #8]
	if (err == -EINVAL) {
    c312:	e6c9      	b.n	c0a8 <hci_cmd_handle+0xb8>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
    c314:	68a1      	ldr	r1, [r4, #8]
    c316:	2001      	movs	r0, #1
    c318:	f7ff fc1a 	bl	bb50 <ll_addr_set>
	*evt = cmd_complete_status(status);
    c31c:	e6c9      	b.n	c0b2 <hci_cmd_handle+0xc2>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    c31e:	2102      	movs	r1, #2
    c320:	a805      	add	r0, sp, #20
    c322:	f7ff fdcd 	bl	bec0 <hci_cmd_complete>
	rp->status = 0x00;
    c326:	2300      	movs	r3, #0
    c328:	7003      	strb	r3, [r0, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    c32a:	4604      	mov	r4, r0
	rp->fal_size = ll_fal_size_get();
    c32c:	f010 fab1 	bl	1c892 <ll_fal_size_get>
    c330:	7060      	strb	r0, [r4, #1]
	if (err == -EINVAL) {
    c332:	e6b9      	b.n	c0a8 <hci_cmd_handle+0xb8>
	status = ll_fal_clear();
    c334:	f003 fa88 	bl	f848 <ll_fal_clear>
	*evt = cmd_complete_status(status);
    c338:	e6bb      	b.n	c0b2 <hci_cmd_handle+0xc2>
    c33a:	bf00      	nop
    c33c:	20002b14 	.word	0x20002b14
    c340:	200001d0 	.word	0x200001d0
    c344:	200001d8 	.word	0x200001d8
    c348:	20001c34 	.word	0x20001c34
	status = ll_fal_add(&cmd->addr);
    c34c:	68a0      	ldr	r0, [r4, #8]
    c34e:	f003 fa8d 	bl	f86c <ll_fal_add>
	*evt = cmd_complete_status(status);
    c352:	e6ae      	b.n	c0b2 <hci_cmd_handle+0xc2>
	status = ll_fal_remove(&cmd->addr);
    c354:	68a0      	ldr	r0, [r4, #8]
    c356:	f003 fabb 	bl	f8d0 <ll_fal_remove>
	*evt = cmd_complete_status(status);
    c35a:	e6aa      	b.n	c0b2 <hci_cmd_handle+0xc2>
	struct bt_hci_cp_le_encrypt *cmd = (void *)buf->data;
    c35c:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    c35e:	aa06      	add	r2, sp, #24
    c360:	2300      	movs	r3, #0
    c362:	f100 0110 	add.w	r1, r0, #16
    c366:	f010 fcbc 	bl	1cce2 <ecb_encrypt>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    c36a:	2111      	movs	r1, #17
    c36c:	a805      	add	r0, sp, #20
    c36e:	f7ff fda7 	bl	bec0 <hci_cmd_complete>
	rp->status = 0x00;
    c372:	2300      	movs	r3, #0
    c374:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
    c378:	2210      	movs	r2, #16
    c37a:	a906      	add	r1, sp, #24
    c37c:	f00a ff6a 	bl	17254 <memcpy>
	if (err == -EINVAL) {
    c380:	e692      	b.n	c0a8 <hci_cmd_handle+0xb8>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    c382:	2109      	movs	r1, #9
    c384:	a805      	add	r0, sp, #20
    c386:	f7ff fd9b 	bl	bec0 <hci_cmd_complete>
	rp->status = 0x00;
    c38a:	2300      	movs	r3, #0
    c38c:	f800 3b01 	strb.w	r3, [r0], #1
	lll_csrand_get(rp->rand, count);
    c390:	2108      	movs	r1, #8
    c392:	f003 fd13 	bl	fdbc <lll_csrand_get>
	if (err == -EINVAL) {
    c396:	e687      	b.n	c0a8 <hci_cmd_handle+0xb8>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    c398:	2109      	movs	r1, #9
    c39a:	a805      	add	r0, sp, #20
    c39c:	f7ff fd90 	bl	bec0 <hci_cmd_complete>
	dst[0] = val;
    c3a0:	22bf      	movs	r2, #191	; 0xbf
    c3a2:	7042      	strb	r2, [r0, #1]
	dst[1] = val >> 8;
    c3a4:	22ff      	movs	r2, #255	; 0xff
    c3a6:	7082      	strb	r2, [r0, #2]
	dst[0] = val;
    c3a8:	2230      	movs	r2, #48	; 0x30
    c3aa:	70c2      	strb	r2, [r0, #3]
	dst[1] = val >> 8;
    c3ac:	22ec      	movs	r2, #236	; 0xec
    c3ae:	7102      	strb	r2, [r0, #4]
	dst[0] = val;
    c3b0:	22c0      	movs	r2, #192	; 0xc0
	rp->status = 0x00;
    c3b2:	2300      	movs	r3, #0
    c3b4:	7142      	strb	r2, [r0, #5]
	dst[1] = val >> 8;
    c3b6:	2201      	movs	r2, #1
    c3b8:	7003      	strb	r3, [r0, #0]
    c3ba:	7182      	strb	r2, [r0, #6]
    c3bc:	e6c2      	b.n	c144 <hci_cmd_handle+0x154>
	struct bt_hci_cp_le_set_adv_param *cmd = (void *)buf->data;
    c3be:	68a4      	ldr	r4, [r4, #8]
	status = ll_adv_params_set(min_interval, cmd->type,
    c3c0:	7ba5      	ldrb	r5, [r4, #14]
    c3c2:	79a3      	ldrb	r3, [r4, #6]
    c3c4:	7962      	ldrb	r2, [r4, #5]
    c3c6:	7921      	ldrb	r1, [r4, #4]
    c3c8:	8820      	ldrh	r0, [r4, #0]
    c3ca:	9502      	str	r5, [sp, #8]
    c3cc:	7b65      	ldrb	r5, [r4, #13]
    c3ce:	9501      	str	r5, [sp, #4]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
    c3d0:	3407      	adds	r4, #7
	status = ll_adv_params_set(min_interval, cmd->type,
    c3d2:	9400      	str	r4, [sp, #0]
    c3d4:	f001 fd2e 	bl	de34 <ll_adv_params_set>
	*evt = cmd_complete_status(status);
    c3d8:	e66b      	b.n	c0b2 <hci_cmd_handle+0xc2>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    c3da:	2102      	movs	r1, #2
    c3dc:	a805      	add	r0, sp, #20
    c3de:	f7ff fd6f 	bl	bec0 <hci_cmd_complete>
	rp->status = 0x00;
    c3e2:	2300      	movs	r3, #0
    c3e4:	7003      	strb	r3, [r0, #0]
	rp->tx_power_level = 0;
    c3e6:	7043      	strb	r3, [r0, #1]
	if (err == -EINVAL) {
    c3e8:	e65e      	b.n	c0a8 <hci_cmd_handle+0xb8>
	status = ll_adv_data_set(cmd->len, &cmd->data[0]);
    c3ea:	68a1      	ldr	r1, [r4, #8]
    c3ec:	f811 0b01 	ldrb.w	r0, [r1], #1
    c3f0:	f001 feb2 	bl	e158 <ll_adv_data_set>
	*evt = cmd_complete_status(status);
    c3f4:	e65d      	b.n	c0b2 <hci_cmd_handle+0xc2>
	status = ll_adv_scan_rsp_set(cmd->len, &cmd->data[0]);
    c3f6:	68a1      	ldr	r1, [r4, #8]
    c3f8:	f811 0b01 	ldrb.w	r0, [r1], #1
    c3fc:	f001 feb4 	bl	e168 <ll_adv_scan_rsp_set>
	*evt = cmd_complete_status(status);
    c400:	e657      	b.n	c0b2 <hci_cmd_handle+0xc2>
	status = ll_adv_enable(cmd->enable);
    c402:	68a3      	ldr	r3, [r4, #8]
    c404:	7818      	ldrb	r0, [r3, #0]
    c406:	f7f4 fd4b 	bl	ea0 <ll_adv_enable>
	*evt = cmd_complete_status(status);
    c40a:	e652      	b.n	c0b2 <hci_cmd_handle+0xc2>
	struct bt_hci_cp_le_set_scan_param *cmd = (void *)buf->data;
    c40c:	68a4      	ldr	r4, [r4, #8]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
    c40e:	7963      	ldrb	r3, [r4, #5]
    c410:	f8b4 2003 	ldrh.w	r2, [r4, #3]
    c414:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    c418:	7820      	ldrb	r0, [r4, #0]
    c41a:	79a4      	ldrb	r4, [r4, #6]
    c41c:	9400      	str	r4, [sp, #0]
    c41e:	f7f4 ffb7 	bl	1390 <ll_scan_params_set>
	*evt = cmd_complete_status(status);
    c422:	e646      	b.n	c0b2 <hci_cmd_handle+0xc2>
	status = ll_scan_enable(cmd->enable);
    c424:	68a3      	ldr	r3, [r4, #8]
    c426:	7818      	ldrb	r0, [r3, #0]
    c428:	f010 f866 	bl	1c4f8 <ll_scan_enable>
		status = BT_HCI_ERR_SUCCESS;
    c42c:	280c      	cmp	r0, #12
	*evt = cmd_complete_status(status);
    c42e:	bf08      	it	eq
    c430:	2000      	moveq	r0, #0
    c432:	e63e      	b.n	c0b2 <hci_cmd_handle+0xc2>
	handle = sys_le16_to_cpu(cmd->handle);
    c434:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    c436:	2108      	movs	r1, #8
    c438:	a805      	add	r0, sp, #20
	handle = sys_le16_to_cpu(cmd->handle);
    c43a:	881d      	ldrh	r5, [r3, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    c43c:	f7ff fd40 	bl	bec0 <hci_cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    c440:	b2ae      	uxth	r6, r5
	rp = hci_cmd_complete(evt, sizeof(*rp));
    c442:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
    c444:	1cc1      	adds	r1, r0, #3
    c446:	4630      	mov	r0, r6
    c448:	f010 f96f 	bl	1c72a <ll_chm_get>
    c44c:	e64b      	b.n	c0e6 <hci_cmd_handle+0xf6>
	handle = sys_le16_to_cpu(cmd->handle);
    c44e:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
    c450:	8818      	ldrh	r0, [r3, #0]
    c452:	f010 f981 	bl	1c758 <ll_feature_req_send>
	*evt = cmd_status(status);
    c456:	e608      	b.n	c06a <hci_cmd_handle+0x7a>
	struct hci_cp_le_conn_update *cmd = (void *)buf->data;
    c458:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_min,
    c45a:	8911      	ldrh	r1, [r2, #8]
    c45c:	8853      	ldrh	r3, [r2, #2]
    c45e:	8810      	ldrh	r0, [r2, #0]
    c460:	9102      	str	r1, [sp, #8]
    c462:	88d1      	ldrh	r1, [r2, #6]
    c464:	9101      	str	r1, [sp, #4]
    c466:	8892      	ldrh	r2, [r2, #4]
    c468:	9200      	str	r2, [sp, #0]
    c46a:	2200      	movs	r2, #0
    c46c:	4611      	mov	r1, r2
    c46e:	f010 f8d7 	bl	1c620 <ll_conn_update>
	*evt = cmd_status(status);
    c472:	e5fa      	b.n	c06a <hci_cmd_handle+0x7a>
	struct bt_hci_cp_le_conn_param_req_reply *cmd = (void *)buf->data;
    c474:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
    c476:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    c478:	8815      	ldrh	r5, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
    c47a:	8853      	ldrh	r3, [r2, #2]
    c47c:	9102      	str	r1, [sp, #8]
    c47e:	88d1      	ldrh	r1, [r2, #6]
    c480:	9101      	str	r1, [sp, #4]
    c482:	8892      	ldrh	r2, [r2, #4]
    c484:	9200      	str	r2, [sp, #0]
    c486:	2200      	movs	r2, #0
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
    c488:	2102      	movs	r1, #2
    c48a:	b2a8      	uxth	r0, r5
    c48c:	f010 f8c8 	bl	1c620 <ll_conn_update>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    c490:	2103      	movs	r1, #3
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
    c492:	4604      	mov	r4, r0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    c494:	a805      	add	r0, sp, #20
    c496:	f7ff fd13 	bl	bec0 <hci_cmd_complete>
	rp->status = status;
    c49a:	7004      	strb	r4, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    c49c:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (err == -EINVAL) {
    c4a0:	e602      	b.n	c0a8 <hci_cmd_handle+0xb8>
	struct bt_hci_cp_le_conn_param_req_neg_reply *cmd = (void *)buf->data;
    c4a2:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    c4a4:	881d      	ldrh	r5, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
    c4a6:	789a      	ldrb	r2, [r3, #2]
    c4a8:	2300      	movs	r3, #0
    c4aa:	e9cd 3301 	strd	r3, r3, [sp, #4]
    c4ae:	9300      	str	r3, [sp, #0]
    c4b0:	e7ea      	b.n	c488 <hci_cmd_handle+0x498>

/* Map vendor command handler directly to common implementation */
inline int hci_vendor_cmd_handle(uint16_t ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	return hci_vendor_cmd_handle_common(ocf, cmd, evt);
    c4b2:	aa05      	add	r2, sp, #20
    c4b4:	4621      	mov	r1, r4
    c4b6:	f7ff fd13 	bl	bee0 <hci_vendor_cmd_handle_common>
	if (err == -EINVAL) {
    c4ba:	3016      	adds	r0, #22
    c4bc:	f43f adc5 	beq.w	c04a <hci_cmd_handle+0x5a>
    c4c0:	e5f2      	b.n	c0a8 <hci_cmd_handle+0xb8>
    c4c2:	bf00      	nop

0000c4c4 <hci_acl_handle>:
{
    c4c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	*evt = NULL;
    c4c8:	2300      	movs	r3, #0
    c4ca:	600b      	str	r3, [r1, #0]
	if (buf->len < sizeof(*acl)) {
    c4cc:	8983      	ldrh	r3, [r0, #12]
    c4ce:	2b03      	cmp	r3, #3
{
    c4d0:	4605      	mov	r5, r0
    c4d2:	460e      	mov	r6, r1
	if (buf->len < sizeof(*acl)) {
    c4d4:	d802      	bhi.n	c4dc <hci_acl_handle+0x18>
		return -EINVAL;
    c4d6:	f06f 0015 	mvn.w	r0, #21
    c4da:	e017      	b.n	c50c <hci_acl_handle+0x48>
    c4dc:	2104      	movs	r1, #4
    c4de:	3008      	adds	r0, #8
    c4e0:	f010 fdf6 	bl	1d0d0 <net_buf_simple_pull_mem>
	if (buf->len < len) {
    c4e4:	89ab      	ldrh	r3, [r5, #12]
	len = sys_le16_to_cpu(acl->len);
    c4e6:	8847      	ldrh	r7, [r0, #2]
	handle = sys_le16_to_cpu(acl->handle);
    c4e8:	f8b0 9000 	ldrh.w	r9, [r0]
	if (buf->len < len) {
    c4ec:	42bb      	cmp	r3, r7
    c4ee:	d3f2      	bcc.n	c4d6 <hci_acl_handle+0x12>
	if (len > LL_LENGTH_OCTETS_TX_MAX) {
    c4f0:	2f1b      	cmp	r7, #27
    c4f2:	d8f0      	bhi.n	c4d6 <hci_acl_handle+0x12>
	node_tx = ll_tx_mem_acquire();
    c4f4:	f002 f8d2 	bl	e69c <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
    c4f8:	ea4f 3819 	mov.w	r8, r9, lsr #12
	if (!node_tx) {
    c4fc:	4604      	mov	r4, r0
    c4fe:	b9f0      	cbnz	r0, c53e <hci_acl_handle+0x7a>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
    c500:	4b20      	ldr	r3, [pc, #128]	; (c584 <hci_acl_handle+0xc0>)
    c502:	681b      	ldr	r3, [r3, #0]
    c504:	019b      	lsls	r3, r3, #6
    c506:	d403      	bmi.n	c510 <hci_acl_handle+0x4c>
		return -ENOBUFS;
    c508:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    c50c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    c510:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    c514:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c518:	2001      	movs	r0, #1
    c51a:	f7f7 ff7b 	bl	4414 <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
    c51e:	2102      	movs	r1, #2
    c520:	6030      	str	r0, [r6, #0]
    c522:	3008      	adds	r0, #8
    c524:	f010 fd51 	bl	1cfca <net_buf_simple_add>
	hdr->len = len;
    c528:	2401      	movs	r4, #1
	hdr->evt = evt;
    c52a:	231a      	movs	r3, #26
    c52c:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    c52e:	7044      	strb	r4, [r0, #1]
    c530:	6830      	ldr	r0, [r6, #0]
    c532:	4621      	mov	r1, r4
    c534:	3008      	adds	r0, #8
    c536:	f010 fd48 	bl	1cfca <net_buf_simple_add>
	ep->link_type = BT_OVERFLOW_LINK_ACL;
    c53a:	7004      	strb	r4, [r0, #0]
    c53c:	e7e4      	b.n	c508 <hci_acl_handle+0x44>
	if (bt_acl_flags_bc(flags) != BT_ACL_POINT_TO_POINT) {
    c53e:	ea5f 0398 	movs.w	r3, r8, lsr #2
    c542:	d1c8      	bne.n	c4d6 <hci_acl_handle+0x12>
	switch (bt_acl_flags_pb(flags)) {
    c544:	f1b8 0f00 	cmp.w	r8, #0
    c548:	d006      	beq.n	c558 <hci_acl_handle+0x94>
    c54a:	f1b8 0f01 	cmp.w	r8, #1
    c54e:	d1c2      	bne.n	c4d6 <hci_acl_handle+0x12>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    c550:	7903      	ldrb	r3, [r0, #4]
    c552:	f368 0301 	bfi	r3, r8, #0, #2
    c556:	e003      	b.n	c560 <hci_acl_handle+0x9c>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
    c558:	7903      	ldrb	r3, [r0, #4]
    c55a:	2202      	movs	r2, #2
    c55c:	f362 0301 	bfi	r3, r2, #0, #2
	pdu_data->len = len;
    c560:	7167      	strb	r7, [r4, #5]
	memcpy(&pdu_data->lldata[0], buf->data, len);
    c562:	68a9      	ldr	r1, [r5, #8]
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    c564:	7123      	strb	r3, [r4, #4]
	memcpy(&pdu_data->lldata[0], buf->data, len);
    c566:	463a      	mov	r2, r7
    c568:	1de0      	adds	r0, r4, #7
    c56a:	f00a fe73 	bl	17254 <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
    c56e:	4621      	mov	r1, r4
    c570:	f3c9 000b 	ubfx	r0, r9, #0, #12
    c574:	f002 f89e 	bl	e6b4 <ll_tx_mem_enqueue>
    c578:	2800      	cmp	r0, #0
    c57a:	d0c7      	beq.n	c50c <hci_acl_handle+0x48>
		ll_tx_mem_release(node_tx);
    c57c:	4620      	mov	r0, r4
    c57e:	f002 f893 	bl	e6a8 <ll_tx_mem_release>
    c582:	e7a8      	b.n	c4d6 <hci_acl_handle+0x12>
    c584:	200001d0 	.word	0x200001d0

0000c588 <hci_disconn_complete_encode>:
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    c588:	4b0d      	ldr	r3, [pc, #52]	; (c5c0 <hci_disconn_complete_encode+0x38>)
    c58a:	681b      	ldr	r3, [r3, #0]
    c58c:	06db      	lsls	r3, r3, #27
{
    c58e:	b570      	push	{r4, r5, r6, lr}
    c590:	4605      	mov	r5, r0
    c592:	460e      	mov	r6, r1
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    c594:	d512      	bpl.n	c5bc <hci_disconn_complete_encode+0x34>
    c596:	f102 0408 	add.w	r4, r2, #8
    c59a:	2102      	movs	r1, #2
    c59c:	4620      	mov	r0, r4
    c59e:	f010 fd14 	bl	1cfca <net_buf_simple_add>
	hdr->evt = evt;
    c5a2:	2305      	movs	r3, #5
	hdr->len = len;
    c5a4:	2104      	movs	r1, #4
	hdr->evt = evt;
    c5a6:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    c5a8:	7041      	strb	r1, [r0, #1]
    c5aa:	4620      	mov	r0, r4
    c5ac:	f010 fd0d 	bl	1cfca <net_buf_simple_add>
	ep->status = 0x00;
    c5b0:	2300      	movs	r3, #0
    c5b2:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    c5b4:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((uint8_t *)pdu_data);
    c5b8:	782b      	ldrb	r3, [r5, #0]
    c5ba:	70c3      	strb	r3, [r0, #3]
}
    c5bc:	bd70      	pop	{r4, r5, r6, pc}
    c5be:	bf00      	nop
    c5c0:	200001d0 	.word	0x200001d0

0000c5c4 <hci_disconn_complete_process>:
	conn_count--;
    c5c4:	4a02      	ldr	r2, [pc, #8]	; (c5d0 <hci_disconn_complete_process+0xc>)
    c5c6:	6813      	ldr	r3, [r2, #0]
    c5c8:	3b01      	subs	r3, #1
    c5ca:	6013      	str	r3, [r2, #0]
}
    c5cc:	4770      	bx	lr
    c5ce:	bf00      	nop
    c5d0:	20001c34 	.word	0x20001c34

0000c5d4 <hci_acl_encode>:
	uint16_t handle;
	uint8_t *data;

	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
    c5d4:	7f03      	ldrb	r3, [r0, #28]
    c5d6:	f003 0303 	and.w	r3, r3, #3
    c5da:	3b01      	subs	r3, #1
    c5dc:	2b01      	cmp	r3, #1
{
    c5de:	b570      	push	{r4, r5, r6, lr}
    c5e0:	4604      	mov	r4, r0
	switch (pdu_data->ll_id) {
    c5e2:	d81c      	bhi.n	c61e <hci_acl_encode+0x4a>
    c5e4:	f101 0508 	add.w	r5, r1, #8
	handle = node_rx->hdr.handle;
    c5e8:	88c6      	ldrh	r6, [r0, #6]
    c5ea:	2104      	movs	r1, #4
    c5ec:	4628      	mov	r0, r5
    c5ee:	f010 fcec 	bl	1cfca <net_buf_simple_add>
	case PDU_DATA_LLID_DATA_CONTINUE:
	case PDU_DATA_LLID_DATA_START:
		acl = (void *)net_buf_add(buf, sizeof(*acl));
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    c5f2:	7f23      	ldrb	r3, [r4, #28]
    c5f4:	f003 0303 	and.w	r3, r3, #3
    c5f8:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
    c5fa:	bf0c      	ite	eq
    c5fc:	f446 5600 	orreq.w	r6, r6, #8192	; 0x2000
		} else {
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
    c600:	f446 5680 	orrne.w	r6, r6, #4096	; 0x1000
		}
		acl->handle = sys_cpu_to_le16(handle_flags);
    c604:	8006      	strh	r6, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
    c606:	7f61      	ldrb	r1, [r4, #29]
    c608:	8041      	strh	r1, [r0, #2]
    c60a:	4628      	mov	r0, r5
    c60c:	f010 fcdd 	bl	1cfca <net_buf_simple_add>
		data = (void *)net_buf_add(buf, pdu_data->len);
		memcpy(data, pdu_data->lldata, pdu_data->len);
    c610:	7f62      	ldrb	r2, [r4, #29]
    c612:	f104 011f 	add.w	r1, r4, #31

	default:
		LL_ASSERT(0);
		break;
	}
}
    c616:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
    c61a:	f00a be1b 	b.w	17254 <memcpy>
		LL_ASSERT(0);
    c61e:	4a07      	ldr	r2, [pc, #28]	; (c63c <hci_acl_encode+0x68>)
    c620:	4907      	ldr	r1, [pc, #28]	; (c640 <hci_acl_encode+0x6c>)
    c622:	4808      	ldr	r0, [pc, #32]	; (c644 <hci_acl_encode+0x70>)
    c624:	f641 53bb 	movw	r3, #7611	; 0x1dbb
    c628:	f009 ffe7 	bl	165fa <printk>
    c62c:	4040      	eors	r0, r0
    c62e:	f380 8811 	msr	BASEPRI, r0
    c632:	f04f 0003 	mov.w	r0, #3
    c636:	df02      	svc	2
}
    c638:	bd70      	pop	{r4, r5, r6, pc}
    c63a:	bf00      	nop
    c63c:	00020422 	.word	0x00020422
    c640:	00020e86 	.word	0x00020e86
    c644:	0002023c 	.word	0x0002023c

0000c648 <hci_evt_encode>:
#endif /* CONFIG_BT_CONN */

void hci_evt_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
    c648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct pdu_data *pdu_data = (void *)node_rx->pdu;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    c64c:	7903      	ldrb	r3, [r0, #4]
	handle = node_rx->hdr.handle;
    c64e:	88c7      	ldrh	r7, [r0, #6]
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    c650:	2b03      	cmp	r3, #3
{
    c652:	b086      	sub	sp, #24
    c654:	4604      	mov	r4, r0
    c656:	460e      	mov	r6, r1
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
    c658:	f100 081c 	add.w	r8, r0, #28
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    c65c:	f000 811e 	beq.w	c89c <hci_evt_encode+0x254>
	switch (node_rx->hdr.type) {
    c660:	2b17      	cmp	r3, #23
    c662:	f000 8113 	beq.w	c88c <hci_evt_encode+0x244>
    c666:	d812      	bhi.n	c68e <hci_evt_encode+0x46>
    c668:	2b05      	cmp	r3, #5
    c66a:	d03e      	beq.n	c6ea <hci_evt_encode+0xa2>
    c66c:	2b16      	cmp	r3, #22
    c66e:	f000 80bf 	beq.w	c7f0 <hci_evt_encode+0x1a8>
		LL_ASSERT(0);
    c672:	f641 43af 	movw	r3, #7343	; 0x1caf
		LL_ASSERT(0);
    c676:	4ab4      	ldr	r2, [pc, #720]	; (c948 <hci_evt_encode+0x300>)
    c678:	49b4      	ldr	r1, [pc, #720]	; (c94c <hci_evt_encode+0x304>)
    c67a:	48b5      	ldr	r0, [pc, #724]	; (c950 <hci_evt_encode+0x308>)
    c67c:	f009 ffbd 	bl	165fa <printk>
    c680:	4040      	eors	r0, r0
    c682:	f380 8811 	msr	BASEPRI, r0
    c686:	f04f 0003 	mov.w	r0, #3
    c68a:	df02      	svc	2
		encode_control(node_rx, pdu_data, buf);
	} else if (IS_ENABLED(CONFIG_BT_CONN)) {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    c68c:	e078      	b.n	c780 <hci_evt_encode+0x138>
	switch (node_rx->hdr.type) {
    c68e:	2b18      	cmp	r3, #24
    c690:	d1ef      	bne.n	c672 <hci_evt_encode+0x2a>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    c692:	4bb0      	ldr	r3, [pc, #704]	; (c954 <hci_evt_encode+0x30c>)
    c694:	685b      	ldr	r3, [r3, #4]
    c696:	0098      	lsls	r0, r3, #2
    c698:	d572      	bpl.n	c780 <hci_evt_encode+0x138>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
    c69a:	4baf      	ldr	r3, [pc, #700]	; (c958 <hci_evt_encode+0x310>)
    c69c:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    c69e:	0759      	lsls	r1, r3, #29
    c6a0:	d56e      	bpl.n	c780 <hci_evt_encode+0x138>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
    c6a2:	2209      	movs	r2, #9
    c6a4:	2103      	movs	r1, #3
    c6a6:	4630      	mov	r0, r6
    c6a8:	f00f fd5d 	bl	1c166 <meta_evt>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
    c6ac:	f018 0f01 	tst.w	r8, #1
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
    c6b0:	4605      	mov	r5, r0
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
    c6b2:	d00c      	beq.n	c6ce <hci_evt_encode+0x86>
    c6b4:	4aa4      	ldr	r2, [pc, #656]	; (c948 <hci_evt_encode+0x300>)
    c6b6:	49a9      	ldr	r1, [pc, #676]	; (c95c <hci_evt_encode+0x314>)
    c6b8:	48a5      	ldr	r0, [pc, #660]	; (c950 <hci_evt_encode+0x308>)
    c6ba:	f641 337a 	movw	r3, #7034	; 0x1b7a
    c6be:	f009 ff9c 	bl	165fa <printk>
    c6c2:	4040      	eors	r0, r0
    c6c4:	f380 8811 	msr	BASEPRI, r0
    c6c8:	f04f 0003 	mov.w	r0, #3
    c6cc:	df02      	svc	2
	sep->status = cu->status;
    c6ce:	7f23      	ldrb	r3, [r4, #28]
    c6d0:	702b      	strb	r3, [r5, #0]
	sep->interval = sys_cpu_to_le16(cu->interval);
    c6d2:	8be3      	ldrh	r3, [r4, #30]
    c6d4:	f8a5 3003 	strh.w	r3, [r5, #3]
	sep->latency = sys_cpu_to_le16(cu->latency);
    c6d8:	8c23      	ldrh	r3, [r4, #32]
    c6da:	f8a5 3005 	strh.w	r3, [r5, #5]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
    c6de:	8c63      	ldrh	r3, [r4, #34]	; 0x22
	sep->handle = sys_cpu_to_le16(handle);
    c6e0:	f8a5 7001 	strh.w	r7, [r5, #1]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
    c6e4:	f8a5 3007 	strh.w	r3, [r5, #7]
    c6e8:	e04a      	b.n	c780 <hci_evt_encode+0x138>
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    c6ea:	4b9d      	ldr	r3, [pc, #628]	; (c960 <hci_evt_encode+0x318>)
	rssi = -(node_rx->hdr.rx_ftr.rssi);
    c6ec:	7e27      	ldrb	r7, [r4, #24]
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    c6ee:	6818      	ldr	r0, [r3, #0]
    c6f0:	889a      	ldrh	r2, [r3, #4]
    c6f2:	799b      	ldrb	r3, [r3, #6]
    c6f4:	f88d 3016 	strb.w	r3, [sp, #22]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    c6f8:	4b96      	ldr	r3, [pc, #600]	; (c954 <hci_evt_encode+0x30c>)
	direct_report = node_rx->hdr.rx_ftr.direct;
    c6fa:	7e65      	ldrb	r5, [r4, #25]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    c6fc:	685b      	ldr	r3, [r3, #4]
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    c6fe:	9004      	str	r0, [sp, #16]
	rssi = -(node_rx->hdr.rx_ftr.rssi);
    c700:	427f      	negs	r7, r7
	if (direct_report) {
    c702:	f015 0501 	ands.w	r5, r5, #1
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    c706:	f8ad 2014 	strh.w	r2, [sp, #20]
	rssi = -(node_rx->hdr.rx_ftr.rssi);
    c70a:	b27f      	sxtb	r7, r7
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    c70c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
	if (direct_report) {
    c710:	d039      	beq.n	c786 <hci_evt_encode+0x13e>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    c712:	2b00      	cmp	r3, #0
    c714:	d034      	beq.n	c780 <hci_evt_encode+0x138>
	    !(le_event_mask & BT_EVT_MASK_LE_DIRECT_ADV_REPORT)) {
    c716:	4b90      	ldr	r3, [pc, #576]	; (c958 <hci_evt_encode+0x310>)
    c718:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    c71a:	0559      	lsls	r1, r3, #21
    c71c:	d530      	bpl.n	c780 <hci_evt_encode+0x138>
	LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
    c71e:	7f23      	ldrb	r3, [r4, #28]
    c720:	f003 030f 	and.w	r3, r3, #15
    c724:	2b01      	cmp	r3, #1
    c726:	d00c      	beq.n	c742 <hci_evt_encode+0xfa>
    c728:	4a87      	ldr	r2, [pc, #540]	; (c948 <hci_evt_encode+0x300>)
    c72a:	498e      	ldr	r1, [pc, #568]	; (c964 <hci_evt_encode+0x31c>)
    c72c:	4888      	ldr	r0, [pc, #544]	; (c950 <hci_evt_encode+0x308>)
    c72e:	f241 435a 	movw	r3, #5210	; 0x145a
    c732:	f009 ff62 	bl	165fa <printk>
    c736:	4040      	eors	r0, r0
    c738:	f380 8811 	msr	BASEPRI, r0
    c73c:	f04f 0003 	mov.w	r0, #3
    c740:	df02      	svc	2
	drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    c742:	2211      	movs	r2, #17
    c744:	210b      	movs	r1, #11
    c746:	4630      	mov	r0, r6
    c748:	f00f fd0d 	bl	1c166 <meta_evt>
	drp->num_reports = 1U;
    c74c:	2301      	movs	r3, #1
    c74e:	7003      	strb	r3, [r0, #0]
	dir_info->evt_type = BT_HCI_ADV_DIRECT_IND;
    c750:	7043      	strb	r3, [r0, #1]
		dir_info->addr.type = adv->tx_addr;
    c752:	7f23      	ldrb	r3, [r4, #28]
    c754:	f3c3 1380 	ubfx	r3, r3, #6, #1
	drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    c758:	4605      	mov	r5, r0
		dir_info->addr.type = adv->tx_addr;
    c75a:	7083      	strb	r3, [r0, #2]
		memcpy(&dir_info->addr.a.val[0], &adv->direct_ind.adv_addr[0],
    c75c:	2206      	movs	r2, #6
    c75e:	f104 011e 	add.w	r1, r4, #30
    c762:	3003      	adds	r0, #3
    c764:	f00a fd76 	bl	17254 <memcpy>
	dir_info->dir_addr.type = adv->rx_addr;
    c768:	7f23      	ldrb	r3, [r4, #28]
    c76a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    c76e:	726b      	strb	r3, [r5, #9]
	memcpy(&dir_info->dir_addr.a.val[0],
    c770:	2206      	movs	r2, #6
    c772:	f104 0124 	add.w	r1, r4, #36	; 0x24
    c776:	f105 000a 	add.w	r0, r5, #10
    c77a:	f00a fd6b 	bl	17254 <memcpy>
	dir_info->rssi = rssi;
    c77e:	742f      	strb	r7, [r5, #16]
}
    c780:	b006      	add	sp, #24
    c782:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    c786:	2b00      	cmp	r3, #0
    c788:	d0fa      	beq.n	c780 <hci_evt_encode+0x138>
	    !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) {
    c78a:	4b73      	ldr	r3, [pc, #460]	; (c958 <hci_evt_encode+0x310>)
    c78c:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    c78e:	079a      	lsls	r2, r3, #30
    c790:	d5f6      	bpl.n	c780 <hci_evt_encode+0x138>
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    c792:	7f23      	ldrb	r3, [r4, #28]
    c794:	f003 030f 	and.w	r3, r3, #15
    c798:	2b01      	cmp	r3, #1
		data_len = (adv->len - BDADDR_SIZE);
    c79a:	bf1e      	ittt	ne
    c79c:	7f65      	ldrbne	r5, [r4, #29]
    c79e:	3d06      	subne	r5, #6
    c7a0:	b2ed      	uxtbne	r5, r5
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    c7a2:	f105 020b 	add.w	r2, r5, #11
    c7a6:	b2d2      	uxtb	r2, r2
    c7a8:	2102      	movs	r1, #2
    c7aa:	4630      	mov	r0, r6
    c7ac:	f00f fcdb 	bl	1c166 <meta_evt>
	sep->num_reports = 1U;
    c7b0:	2301      	movs	r3, #1
    c7b2:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
    c7b4:	7f23      	ldrb	r3, [r4, #28]
    c7b6:	aa06      	add	r2, sp, #24
    c7b8:	f003 030f 	and.w	r3, r3, #15
    c7bc:	4413      	add	r3, r2
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    c7be:	4606      	mov	r6, r0
	adv_info->evt_type = c_adv_type[adv->type];
    c7c0:	f813 3c08 	ldrb.w	r3, [r3, #-8]
    c7c4:	7043      	strb	r3, [r0, #1]
		adv_info->addr.type = adv->tx_addr;
    c7c6:	7f23      	ldrb	r3, [r4, #28]
    c7c8:	f3c3 1380 	ubfx	r3, r3, #6, #1
    c7cc:	7083      	strb	r3, [r0, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
    c7ce:	2206      	movs	r2, #6
    c7d0:	f104 011e 	add.w	r1, r4, #30
    c7d4:	3003      	adds	r0, #3
    c7d6:	f00a fd3d 	bl	17254 <memcpy>
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    c7da:	360a      	adds	r6, #10
	adv_info->length = data_len;
    c7dc:	f806 5c01 	strb.w	r5, [r6, #-1]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    c7e0:	462a      	mov	r2, r5
    c7e2:	f104 0124 	add.w	r1, r4, #36	; 0x24
    c7e6:	4630      	mov	r0, r6
    c7e8:	f00a fd34 	bl	17254 <memcpy>
	*prssi = rssi;
    c7ec:	5577      	strb	r7, [r6, r5]
    c7ee:	e7c7      	b.n	c780 <hci_evt_encode+0x138>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    c7f0:	f018 0f01 	tst.w	r8, #1
    c7f4:	d00c      	beq.n	c810 <hci_evt_encode+0x1c8>
    c7f6:	4a54      	ldr	r2, [pc, #336]	; (c948 <hci_evt_encode+0x300>)
    c7f8:	495b      	ldr	r1, [pc, #364]	; (c968 <hci_evt_encode+0x320>)
    c7fa:	4855      	ldr	r0, [pc, #340]	; (c950 <hci_evt_encode+0x308>)
    c7fc:	f641 23f5 	movw	r3, #6901	; 0x1af5
    c800:	f009 fefb 	bl	165fa <printk>
    c804:	4040      	eors	r0, r0
    c806:	f380 8811 	msr	BASEPRI, r0
    c80a:	f04f 0003 	mov.w	r0, #3
    c80e:	df02      	svc	2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    c810:	4b50      	ldr	r3, [pc, #320]	; (c954 <hci_evt_encode+0x30c>)
    c812:	685b      	ldr	r3, [r3, #4]
    c814:	009b      	lsls	r3, r3, #2
    c816:	d5b3      	bpl.n	c780 <hci_evt_encode+0x138>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    c818:	4b4f      	ldr	r3, [pc, #316]	; (c958 <hci_evt_encode+0x310>)
    c81a:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    c81c:	07dd      	lsls	r5, r3, #31
    c81e:	d5af      	bpl.n	c780 <hci_evt_encode+0x138>
	status = cc->status;
    c820:	f894 801c 	ldrb.w	r8, [r4, #28]
	if (!status) {
    c824:	f1b8 0f00 	cmp.w	r8, #0
    c828:	d103      	bne.n	c832 <hci_evt_encode+0x1ea>
		conn_count++;
    c82a:	4a50      	ldr	r2, [pc, #320]	; (c96c <hci_evt_encode+0x324>)
    c82c:	6813      	ldr	r3, [r2, #0]
    c82e:	3301      	adds	r3, #1
    c830:	6013      	str	r3, [r2, #0]
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    c832:	2212      	movs	r2, #18
    c834:	2101      	movs	r1, #1
    c836:	4630      	mov	r0, r6
    c838:	f00f fc95 	bl	1c166 <meta_evt>
    c83c:	4605      	mov	r5, r0
	if (status) {
    c83e:	f1b8 0f00 	cmp.w	r8, #0
    c842:	d006      	beq.n	c852 <hci_evt_encode+0x20a>
		(void)memset(lecc, 0x00, sizeof(*lecc));
    c844:	2212      	movs	r2, #18
    c846:	2100      	movs	r1, #0
    c848:	f00a fd0f 	bl	1726a <memset>
		lecc->status = status;
    c84c:	f885 8000 	strb.w	r8, [r5]
		return;
    c850:	e796      	b.n	c780 <hci_evt_encode+0x138>
	lecc->status = 0x00;
    c852:	f880 8000 	strb.w	r8, [r0]
	lecc->handle = sys_cpu_to_le16(handle);
    c856:	f8a0 7001 	strh.w	r7, [r0, #1]
	lecc->role = cc->role;
    c85a:	7f63      	ldrb	r3, [r4, #29]
    c85c:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = cc->peer_addr_type & 0x1;
    c85e:	7fa3      	ldrb	r3, [r4, #30]
    c860:	f003 0301 	and.w	r3, r3, #1
    c864:	7103      	strb	r3, [r0, #4]
	memcpy(&lecc->peer_addr.a.val[0], &cc->peer_addr[0], BDADDR_SIZE);
    c866:	2206      	movs	r2, #6
    c868:	f104 011f 	add.w	r1, r4, #31
    c86c:	3005      	adds	r0, #5
    c86e:	f00a fcf1 	bl	17254 <memcpy>
	lecc->interval = sys_cpu_to_le16(cc->interval);
    c872:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    c874:	f8a5 300b 	strh.w	r3, [r5, #11]
	lecc->latency = sys_cpu_to_le16(cc->latency);
    c878:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    c87a:	f8a5 300d 	strh.w	r3, [r5, #13]
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
    c87e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    c880:	f8a5 300f 	strh.w	r3, [r5, #15]
	lecc->clock_accuracy = cc->sca;
    c884:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    c888:	746b      	strb	r3, [r5, #17]
    c88a:	e779      	b.n	c780 <hci_evt_encode+0x138>
		hci_disconn_complete_encode(pdu_data, handle, buf);
    c88c:	460a      	mov	r2, r1
    c88e:	4640      	mov	r0, r8
    c890:	4639      	mov	r1, r7
}
    c892:	b006      	add	sp, #24
    c894:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		hci_disconn_complete_encode(pdu_data, handle, buf);
    c898:	f7ff be76 	b.w	c588 <hci_disconn_complete_encode>
	switch (pdu_data->llctrl.opcode) {
    c89c:	7fc3      	ldrb	r3, [r0, #31]
    c89e:	3b07      	subs	r3, #7
    c8a0:	2b0a      	cmp	r3, #10
    c8a2:	d84d      	bhi.n	c940 <hci_evt_encode+0x2f8>
    c8a4:	a201      	add	r2, pc, #4	; (adr r2, c8ac <hci_evt_encode+0x264>)
    c8a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c8aa:	bf00      	nop
    c8ac:	0000c92d 	.word	0x0000c92d
    c8b0:	0000c941 	.word	0x0000c941
    c8b4:	0000c8d9 	.word	0x0000c8d9
    c8b8:	0000c941 	.word	0x0000c941
    c8bc:	0000c941 	.word	0x0000c941
    c8c0:	0000c941 	.word	0x0000c941
    c8c4:	0000c941 	.word	0x0000c941
    c8c8:	0000c941 	.word	0x0000c941
    c8cc:	0000c8eb 	.word	0x0000c8eb
    c8d0:	0000c941 	.word	0x0000c941
    c8d4:	0000c781 	.word	0x0000c781
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    c8d8:	460b      	mov	r3, r1
    c8da:	463a      	mov	r2, r7
    c8dc:	4641      	mov	r1, r8
    c8de:	2000      	movs	r0, #0
}
    c8e0:	b006      	add	sp, #24
    c8e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    c8e6:	f7ff bac5 	b.w	be74 <le_remote_feat_complete>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    c8ea:	4b1a      	ldr	r3, [pc, #104]	; (c954 <hci_evt_encode+0x30c>)
    c8ec:	685b      	ldr	r3, [r3, #4]
    c8ee:	009a      	lsls	r2, r3, #2
    c8f0:	d503      	bpl.n	c8fa <hci_evt_encode+0x2b2>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
    c8f2:	4b19      	ldr	r3, [pc, #100]	; (c958 <hci_evt_encode+0x310>)
    c8f4:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    c8f6:	069b      	lsls	r3, r3, #26
    c8f8:	d409      	bmi.n	c90e <hci_evt_encode+0x2c6>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE, 0,
    c8fa:	2300      	movs	r3, #0
    c8fc:	e9cd 3301 	strd	r3, r3, [sp, #4]
    c900:	9300      	str	r3, [sp, #0]
    c902:	221a      	movs	r2, #26
    c904:	2102      	movs	r1, #2
    c906:	4638      	mov	r0, r7
    c908:	f00f fe8a 	bl	1c620 <ll_conn_update>
		return;
    c90c:	e738      	b.n	c780 <hci_evt_encode+0x138>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
    c90e:	220a      	movs	r2, #10
    c910:	2106      	movs	r1, #6
    c912:	4630      	mov	r0, r6
    c914:	f00f fc27 	bl	1c166 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    c918:	8007      	strh	r7, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
    c91a:	8c23      	ldrh	r3, [r4, #32]
    c91c:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
    c91e:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    c920:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
    c922:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    c924:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
    c926:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    c928:	8103      	strh	r3, [r0, #8]
    c92a:	e729      	b.n	c780 <hci_evt_encode+0x138>
	switch (pdu_data->llctrl.unknown_rsp.type) {
    c92c:	f890 3020 	ldrb.w	r3, [r0, #32]
    c930:	2b0e      	cmp	r3, #14
    c932:	f47f af25 	bne.w	c780 <hci_evt_encode+0x138>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    c936:	460b      	mov	r3, r1
    c938:	463a      	mov	r2, r7
    c93a:	2100      	movs	r1, #0
    c93c:	201a      	movs	r0, #26
    c93e:	e7cf      	b.n	c8e0 <hci_evt_encode+0x298>
		LL_ASSERT(0);
    c940:	f641 538f 	movw	r3, #7567	; 0x1d8f
    c944:	e697      	b.n	c676 <hci_evt_encode+0x2e>
    c946:	bf00      	nop
    c948:	00020422 	.word	0x00020422
    c94c:	00020e86 	.word	0x00020e86
    c950:	0002023c 	.word	0x0002023c
    c954:	200001d0 	.word	0x200001d0
    c958:	200001d8 	.word	0x200001d8
    c95c:	000204ba 	.word	0x000204ba
    c960:	0001f298 	.word	0x0001f298
    c964:	0002045b 	.word	0x0002045b
    c968:	00020480 	.word	0x00020480
    c96c:	20001c34 	.word	0x20001c34

0000c970 <hci_get_class>:
{
#if defined(CONFIG_BT_CONN)
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
#endif

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    c970:	7903      	ldrb	r3, [r0, #4]
    c972:	2b03      	cmp	r3, #3
    c974:	d006      	beq.n	c984 <hci_get_class+0x14>

		switch (node_rx->hdr.type) {
    c976:	3b05      	subs	r3, #5
    c978:	b2db      	uxtb	r3, r3
    c97a:	2b13      	cmp	r3, #19
    c97c:	d80a      	bhi.n	c994 <hci_get_class+0x24>
    c97e:	4a06      	ldr	r2, [pc, #24]	; (c998 <hci_get_class+0x28>)
    c980:	5cd0      	ldrb	r0, [r2, r3]
    c982:	4770      	bx	lr
		default:
			return HCI_CLASS_NONE;
		}

#if defined(CONFIG_BT_CONN)
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    c984:	7f03      	ldrb	r3, [r0, #28]
    c986:	f003 0303 	and.w	r3, r3, #3
		return HCI_CLASS_EVT_LLCP;
	} else {
		return HCI_CLASS_ACL_DATA;
    c98a:	2b03      	cmp	r3, #3
    c98c:	bf0c      	ite	eq
    c98e:	2004      	moveq	r0, #4
    c990:	2005      	movne	r0, #5
    c992:	4770      	bx	lr
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    c994:	2000      	movs	r0, #0
#else
	} else {
		return HCI_CLASS_NONE;
	}
#endif
}
    c996:	4770      	bx	lr
    c998:	000204f4 	.word	0x000204f4

0000c99c <hci_init>:
	event_mask = DEFAULT_EVENT_MASK;
    c99c:	4b07      	ldr	r3, [pc, #28]	; (c9bc <hci_init+0x20>)
    c99e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c9a2:	f641 71ff 	movw	r1, #8191	; 0x1fff
    c9a6:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    c9aa:	4b05      	ldr	r3, [pc, #20]	; (c9c0 <hci_init+0x24>)
    c9ac:	201f      	movs	r0, #31
    c9ae:	2100      	movs	r1, #0
    c9b0:	e9c3 0100 	strd	r0, r1, [r3]
	conn_count = 0U;
    c9b4:	4b03      	ldr	r3, [pc, #12]	; (c9c4 <hci_init+0x28>)
    c9b6:	2200      	movs	r2, #0
    c9b8:	601a      	str	r2, [r3, #0]
{
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
    c9ba:	4770      	bx	lr
    c9bc:	200001d0 	.word	0x200001d0
    c9c0:	200001d8 	.word	0x200001d8
    c9c4:	20001c34 	.word	0x20001c34

0000c9c8 <ll_rx_link_inc_quota>:
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    c9c8:	2801      	cmp	r0, #1
{
    c9ca:	b538      	push	{r3, r4, r5, lr}
    c9cc:	4d0b      	ldr	r5, [pc, #44]	; (c9fc <ll_rx_link_inc_quota+0x34>)
    c9ce:	4604      	mov	r4, r0
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    c9d0:	d10f      	bne.n	c9f2 <ll_rx_link_inc_quota+0x2a>
    c9d2:	782b      	ldrb	r3, [r5, #0]
    c9d4:	2b04      	cmp	r3, #4
    c9d6:	d90c      	bls.n	c9f2 <ll_rx_link_inc_quota+0x2a>
    c9d8:	4a09      	ldr	r2, [pc, #36]	; (ca00 <ll_rx_link_inc_quota+0x38>)
    c9da:	490a      	ldr	r1, [pc, #40]	; (ca04 <ll_rx_link_inc_quota+0x3c>)
    c9dc:	480a      	ldr	r0, [pc, #40]	; (ca08 <ll_rx_link_inc_quota+0x40>)
    c9de:	f240 6306 	movw	r3, #1542	; 0x606
    c9e2:	f009 fe0a 	bl	165fa <printk>
    c9e6:	4040      	eors	r0, r0
    c9e8:	f380 8811 	msr	BASEPRI, r0
    c9ec:	f04f 0003 	mov.w	r0, #3
    c9f0:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
    c9f2:	7828      	ldrb	r0, [r5, #0]
    c9f4:	4404      	add	r4, r0
    c9f6:	702c      	strb	r4, [r5, #0]
}
    c9f8:	bd38      	pop	{r3, r4, r5, pc}
    c9fa:	bf00      	nop
    c9fc:	20001c9c 	.word	0x20001c9c
    ca00:	00020508 	.word	0x00020508
    ca04:	00020543 	.word	0x00020543
    ca08:	0002023c 	.word	0x0002023c

0000ca0c <perform_lll_reset>:

	return 0;
}

static void perform_lll_reset(void *param)
{
    ca0c:	b510      	push	{r4, lr}
    ca0e:	4604      	mov	r4, r0
	int err;

	/* Reset LLL */
	err = lll_reset();
    ca10:	f00f ff57 	bl	1c8c2 <lll_reset>
	LL_ASSERT(!err);
    ca14:	b160      	cbz	r0, ca30 <perform_lll_reset+0x24>
    ca16:	4a21      	ldr	r2, [pc, #132]	; (ca9c <perform_lll_reset+0x90>)
    ca18:	4921      	ldr	r1, [pc, #132]	; (caa0 <perform_lll_reset+0x94>)
    ca1a:	4822      	ldr	r0, [pc, #136]	; (caa4 <perform_lll_reset+0x98>)
    ca1c:	f640 0324 	movw	r3, #2084	; 0x824
    ca20:	f009 fdeb 	bl	165fa <printk>
    ca24:	4040      	eors	r0, r0
    ca26:	f380 8811 	msr	BASEPRI, r0
    ca2a:	f04f 0003 	mov.w	r0, #3
    ca2e:	df02      	svc	2

#if defined(CONFIG_BT_BROADCASTER)
	/* Reset adv state */
	err = lll_adv_reset();
    ca30:	f00f ffa4 	bl	1c97c <lll_adv_reset>
	LL_ASSERT(!err);
    ca34:	b160      	cbz	r0, ca50 <perform_lll_reset+0x44>
    ca36:	4a19      	ldr	r2, [pc, #100]	; (ca9c <perform_lll_reset+0x90>)
    ca38:	4919      	ldr	r1, [pc, #100]	; (caa0 <perform_lll_reset+0x94>)
    ca3a:	481a      	ldr	r0, [pc, #104]	; (caa4 <perform_lll_reset+0x98>)
    ca3c:	f640 0329 	movw	r3, #2089	; 0x829
    ca40:	f009 fddb 	bl	165fa <printk>
    ca44:	4040      	eors	r0, r0
    ca46:	f380 8811 	msr	BASEPRI, r0
    ca4a:	f04f 0003 	mov.w	r0, #3
    ca4e:	df02      	svc	2
#endif /* CONFIG_BT_BROADCASTER */

#if defined(CONFIG_BT_OBSERVER)
	/* Reset scan state */
	err = lll_scan_reset();
    ca50:	f010 f8b8 	bl	1cbc4 <lll_scan_reset>
	LL_ASSERT(!err);
    ca54:	b160      	cbz	r0, ca70 <perform_lll_reset+0x64>
    ca56:	4a11      	ldr	r2, [pc, #68]	; (ca9c <perform_lll_reset+0x90>)
    ca58:	4911      	ldr	r1, [pc, #68]	; (caa0 <perform_lll_reset+0x94>)
    ca5a:	4812      	ldr	r0, [pc, #72]	; (caa4 <perform_lll_reset+0x98>)
    ca5c:	f640 032f 	movw	r3, #2095	; 0x82f
    ca60:	f009 fdcb 	bl	165fa <printk>
    ca64:	4040      	eors	r0, r0
    ca66:	f380 8811 	msr	BASEPRI, r0
    ca6a:	f04f 0003 	mov.w	r0, #3
    ca6e:	df02      	svc	2
#endif /* CONFIG_BT_OBSERVER */

#if defined(CONFIG_BT_CONN)
	/* Reset conn role */
	err = lll_conn_reset();
    ca70:	f010 f8b4 	bl	1cbdc <lll_conn_reset>
	LL_ASSERT(!err);
    ca74:	b160      	cbz	r0, ca90 <perform_lll_reset+0x84>
    ca76:	4a09      	ldr	r2, [pc, #36]	; (ca9c <perform_lll_reset+0x90>)
    ca78:	4909      	ldr	r1, [pc, #36]	; (caa0 <perform_lll_reset+0x94>)
    ca7a:	480a      	ldr	r0, [pc, #40]	; (caa4 <perform_lll_reset+0x98>)
    ca7c:	f640 0335 	movw	r3, #2101	; 0x835
    ca80:	f009 fdbb 	bl	165fa <printk>
    ca84:	4040      	eors	r0, r0
    ca86:	f380 8811 	msr	BASEPRI, r0
    ca8a:	f04f 0003 	mov.w	r0, #3
    ca8e:	df02      	svc	2
	z_impl_k_sem_give(sem);
    ca90:	4620      	mov	r0, r4
#endif /* CONFIG_BT_CTLR_DF */

#if !defined(CONFIG_BT_CTLR_ZLI)
	k_sem_give(param);
#endif /* !CONFIG_BT_CTLR_ZLI */
}
    ca92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ca96:	f008 be0f 	b.w	156b8 <z_impl_k_sem_give>
    ca9a:	bf00      	nop
    ca9c:	00020508 	.word	0x00020508
    caa0:	0002057d 	.word	0x0002057d
    caa4:	0002023c 	.word	0x0002023c

0000caa8 <rx_alloc>:
{
	return m;
}

static inline void rx_alloc(uint8_t max)
{
    caa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint8_t idx;

	if (max > mem_link_rx.quota_pdu) {
    caac:	4e34      	ldr	r6, [pc, #208]	; (cb80 <rx_alloc+0xd8>)
		max = mem_link_rx.quota_pdu;
	}

	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    caae:	f8df 90d4 	ldr.w	r9, [pc, #212]	; cb84 <rx_alloc+0xdc>
    cab2:	46b0      	mov	r8, r6
    cab4:	f818 7b04 	ldrb.w	r7, [r8], #4
    cab8:	4287      	cmp	r7, r0
    caba:	bf28      	it	cs
    cabc:	4607      	movcs	r7, r0
    cabe:	2f00      	cmp	r7, #0
    cac0:	d05b      	beq.n	cb7a <rx_alloc+0xd2>
 */
static inline bool mfifo_enqueue_idx_get(uint8_t count, uint8_t first, uint8_t last,
					 uint8_t *idx)
{
	/* Non-destructive: Advance write-index modulo 'count' */
	last = last + 1;
    cac2:	f899 4003 	ldrb.w	r4, [r9, #3]
	if (last == count) {
    cac6:	f899 2001 	ldrb.w	r2, [r9, #1]
    caca:	f899 3002 	ldrb.w	r3, [r9, #2]
	last = last + 1;
    cace:	3401      	adds	r4, #1
    cad0:	b2e4      	uxtb	r4, r4
		last = 0U;
    cad2:	42a2      	cmp	r2, r4
    cad4:	bf08      	it	eq
    cad6:	2400      	moveq	r4, #0
	 * We want to maintain the invariant of emptiness defined by
	 * first == last, but we just advanced a copy of the write-index before
	 * and may have wrapped. So if first == last the queue is full and we
	 * can not continue
	 */
	if (last == first) {
    cad8:	42a3      	cmp	r3, r4
    cada:	d148      	bne.n	cb6e <rx_alloc+0xc6>

	/* Replenish the ULL to LL/HCI free Rx PDU queue after LLL to ULL free
	 * Rx PDU queue has been filled.
	 */
	while (mem_link_rx.quota_pdu &&
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    cadc:	f8df 80a8 	ldr.w	r8, [pc, #168]	; cb88 <rx_alloc+0xe0>
		memq_link_t *link;
		struct node_rx_hdr *rx;

		link = mem_acquire(&mem_link_rx.free);
    cae0:	4f2a      	ldr	r7, [pc, #168]	; (cb8c <rx_alloc+0xe4>)
	while (mem_link_rx.quota_pdu &&
    cae2:	7833      	ldrb	r3, [r6, #0]
    cae4:	2b00      	cmp	r3, #0
    cae6:	d048      	beq.n	cb7a <rx_alloc+0xd2>
	last = last + 1;
    cae8:	f898 4003 	ldrb.w	r4, [r8, #3]
	if (last == count) {
    caec:	f898 2001 	ldrb.w	r2, [r8, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    caf0:	f898 3002 	ldrb.w	r3, [r8, #2]
	last = last + 1;
    caf4:	3401      	adds	r4, #1
    caf6:	b2e4      	uxtb	r4, r4
		last = 0U;
    caf8:	42a2      	cmp	r2, r4
    cafa:	bf08      	it	eq
    cafc:	2400      	moveq	r4, #0
	if (last == first) {
    cafe:	429c      	cmp	r4, r3
    cb00:	d03b      	beq.n	cb7a <rx_alloc+0xd2>
		link = mem_acquire(&mem_link_rx.free);
    cb02:	4638      	mov	r0, r7
    cb04:	f00e ffe5 	bl	1bad2 <mem_acquire>
		if (!link) {
    cb08:	4605      	mov	r5, r0
    cb0a:	2800      	cmp	r0, #0
    cb0c:	d035      	beq.n	cb7a <rx_alloc+0xd2>
			return;
		}

		rx = mem_acquire(&mem_pdu_rx.free);
    cb0e:	4820      	ldr	r0, [pc, #128]	; (cb90 <rx_alloc+0xe8>)
    cb10:	f00e ffdf 	bl	1bad2 <mem_acquire>
		if (!rx) {
    cb14:	b1a0      	cbz	r0, cb40 <rx_alloc+0x98>
			mem_release(link, &mem_link_rx.free);
			return;
		}

		link->mem = NULL;
    cb16:	2300      	movs	r3, #0
    cb18:	606b      	str	r3, [r5, #4]
		rx->link = link;
    cb1a:	6005      	str	r5, [r0, #0]
 */
static inline void mfifo_by_idx_enqueue(uint8_t *fifo, uint8_t size, uint8_t idx,
					void *mem, uint8_t *last)
{
	/* API 2: fifo is array of void-ptrs */
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    cb1c:	f898 2003 	ldrb.w	r2, [r8, #3]
    cb20:	f898 3000 	ldrb.w	r3, [r8]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    cb24:	fb02 8303 	mla	r3, r2, r3, r8
    cb28:	6058      	str	r0, [r3, #4]

		MFIFO_BY_IDX_ENQUEUE(ll_pdu_rx_free, idx, rx);

		ll_rx_link_inc_quota(-1);
    cb2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

	cpu_dmb(); /* Ensure data accesses are synchronized */
	*last = idx; /* Commit: Update write index */
    cb2e:	f888 4003 	strb.w	r4, [r8, #3]
    cb32:	f7ff ff49 	bl	c9c8 <ll_rx_link_inc_quota>
    cb36:	e7d4      	b.n	cae2 <rx_alloc+0x3a>
		rx = mem_acquire(&mem_pdu_rx.free);
    cb38:	4815      	ldr	r0, [pc, #84]	; (cb90 <rx_alloc+0xe8>)
    cb3a:	f00e ffca 	bl	1bad2 <mem_acquire>
		if (!rx) {
    cb3e:	b928      	cbnz	r0, cb4c <rx_alloc+0xa4>
			mem_release(link, &mem_link_rx.free);
    cb40:	4628      	mov	r0, r5
    cb42:	4912      	ldr	r1, [pc, #72]	; (cb8c <rx_alloc+0xe4>)
	}
#endif /* CONFIG_BT_CONN */
}
    cb44:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			mem_release(link, &mem_link_rx.free);
    cb48:	f00e bfdc 	b.w	1bb04 <mem_release>
		rx->link = link;
    cb4c:	6005      	str	r5, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    cb4e:	f899 2003 	ldrb.w	r2, [r9, #3]
    cb52:	f899 3000 	ldrb.w	r3, [r9]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    cb56:	fb02 9303 	mla	r3, r2, r3, r9
    cb5a:	6058      	str	r0, [r3, #4]
		ll_rx_link_inc_quota(-1);
    cb5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		max--;
    cb60:	3f01      	subs	r7, #1
	*last = idx; /* Commit: Update write index */
    cb62:	f889 4003 	strb.w	r4, [r9, #3]
    cb66:	b2ff      	uxtb	r7, r7
		ll_rx_link_inc_quota(-1);
    cb68:	f7ff ff2e 	bl	c9c8 <ll_rx_link_inc_quota>
		max--;
    cb6c:	e7a7      	b.n	cabe <rx_alloc+0x16>
		link = mem_acquire(&mem_link_rx.free);
    cb6e:	4640      	mov	r0, r8
    cb70:	f00e ffaf 	bl	1bad2 <mem_acquire>
		if (!link) {
    cb74:	4605      	mov	r5, r0
    cb76:	2800      	cmp	r0, #0
    cb78:	d1de      	bne.n	cb38 <rx_alloc+0x90>
}
    cb7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    cb7e:	bf00      	nop
    cb80:	20001c9c 	.word	0x20001c9c
    cb84:	200004f0 	.word	0x200004f0
    cb88:	200004e4 	.word	0x200004e4
    cb8c:	20001ca0 	.word	0x20001ca0
    cb90:	20001cec 	.word	0x20001cec

0000cb94 <tx_cmplt_get>:
}
#endif /* CONFIG_BT_CTLR_LOW_LAT_ULL */

#if defined(CONFIG_BT_CONN)
static uint8_t tx_cmplt_get(uint16_t *handle, uint8_t *first, uint8_t last)
{
    cb94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cb98:	460c      	mov	r4, r1
	struct lll_tx *tx;
	uint8_t cmplt;

	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
    cb9a:	4e29      	ldr	r6, [pc, #164]	; (cc40 <tx_cmplt_get+0xac>)
					   uint8_t first, uint8_t last, uint8_t *idx)
{
	void *p;
	uint8_t i;

	if (*idx >= count) {
    cb9c:	7823      	ldrb	r3, [r4, #0]
    cb9e:	7871      	ldrb	r1, [r6, #1]
    cba0:	428b      	cmp	r3, r1
    cba2:	bf28      	it	cs
    cba4:	78b3      	ldrbcs	r3, [r6, #2]
{
    cba6:	4607      	mov	r7, r0
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
    cba8:	7830      	ldrb	r0, [r6, #0]
		*idx = first;
    cbaa:	bf28      	it	cs
    cbac:	7023      	strbcs	r3, [r4, #0]
	}

	if (*idx == last) {
    cbae:	7823      	ldrb	r3, [r4, #0]
    cbb0:	429a      	cmp	r2, r3
{
    cbb2:	4691      	mov	r9, r2
    cbb4:	d042      	beq.n	cc3c <tx_cmplt_get+0xa8>
		return NULL;
	}

	i = *idx + 1;
    cbb6:	1c5a      	adds	r2, r3, #1
    cbb8:	b2d2      	uxtb	r2, r2
	if (i == count) {
		i = 0U;
	}

	p = (void *)(fifo + (*idx) * size);
    cbba:	f8df 8088 	ldr.w	r8, [pc, #136]	; cc44 <tx_cmplt_get+0xb0>
    cbbe:	fb13 f300 	smulbb	r3, r3, r0
		i = 0U;
    cbc2:	4291      	cmp	r1, r2
    cbc4:	bf08      	it	eq
    cbc6:	2200      	moveq	r2, #0

	*idx = i;
    cbc8:	7022      	strb	r2, [r4, #0]
	p = (void *)(fifo + (*idx) * size);
    cbca:	eb08 0c03 	add.w	ip, r8, r3
				    first);
	if (!tx) {
		return 0;
	}

	*handle = tx->handle;
    cbce:	f838 3003 	ldrh.w	r3, [r8, r3]
    cbd2:	803b      	strh	r3, [r7, #0]
	cmplt = 0U;
    cbd4:	2500      	movs	r5, #0
	do {
		struct node_tx *node_tx;
		struct pdu_data *p;

		node_tx = tx->node;
    cbd6:	f8dc 0004 	ldr.w	r0, [ip, #4]
		p = (void *)node_tx->pdu;
		if (!node_tx || (node_tx == (void *)1) ||
    cbda:	2801      	cmp	r0, #1
		    (((uint32_t)node_tx & ~3) &&
    cbdc:	f020 0203 	bic.w	r2, r0, #3
		if (!node_tx || (node_tx == (void *)1) ||
    cbe0:	d906      	bls.n	cbf0 <tx_cmplt_get+0x5c>
    cbe2:	b34a      	cbz	r2, cc38 <tx_cmplt_get+0xa4>
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
    cbe4:	7903      	ldrb	r3, [r0, #4]
    cbe6:	f003 0303 	and.w	r3, r3, #3
		    (((uint32_t)node_tx & ~3) &&
    cbea:	3b01      	subs	r3, #1
    cbec:	2b01      	cmp	r3, #1
    cbee:	d823      	bhi.n	cc38 <tx_cmplt_get+0xa4>
		      p->ll_id == PDU_DATA_LLID_DATA_CONTINUE))) {
			/* data packet, hence count num cmplt */
			tx->node = (void *)1;
			cmplt++;
    cbf0:	3501      	adds	r5, #1
    cbf2:	b2ed      	uxtb	r5, r5
			tx->node = (void *)1;
    cbf4:	2301      	movs	r3, #1
    cbf6:	f8cc 3004 	str.w	r3, [ip, #4]
		} else {
			/* ctrl packet or flushed, hence dont count num cmplt */
			tx->node = (void *)2;
		}

		if (((uint32_t)node_tx & ~3)) {
    cbfa:	b10a      	cbz	r2, cc00 <tx_cmplt_get+0x6c>
			ll_tx_mem_release(node_tx);
    cbfc:	f001 fd54 	bl	e6a8 <ll_tx_mem_release>
	if (*idx >= count) {
    cc00:	7823      	ldrb	r3, [r4, #0]
		}

		tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
    cc02:	7872      	ldrb	r2, [r6, #1]
    cc04:	7830      	ldrb	r0, [r6, #0]
    cc06:	4293      	cmp	r3, r2
    cc08:	bf24      	itt	cs
    cc0a:	78b3      	ldrbcs	r3, [r6, #2]
		*idx = first;
    cc0c:	7023      	strbcs	r3, [r4, #0]
	if (*idx == last) {
    cc0e:	7823      	ldrb	r3, [r4, #0]
    cc10:	4599      	cmp	r9, r3
    cc12:	d00e      	beq.n	cc32 <tx_cmplt_get+0x9e>
	i = *idx + 1;
    cc14:	1c59      	adds	r1, r3, #1
    cc16:	b2c9      	uxtb	r1, r1
		i = 0U;
    cc18:	428a      	cmp	r2, r1
    cc1a:	bf08      	it	eq
    cc1c:	2100      	moveq	r1, #0
	p = (void *)(fifo + (*idx) * size);
    cc1e:	fb13 f300 	smulbb	r3, r3, r0
	*idx = i;
    cc22:	7021      	strb	r1, [r4, #0]
					    mfifo_tx_ack.n, mfifo_tx_ack.f,
					    last, first);
	} while (tx && tx->handle == *handle);
    cc24:	f838 2003 	ldrh.w	r2, [r8, r3]
	p = (void *)(fifo + (*idx) * size);
    cc28:	eb08 0c03 	add.w	ip, r8, r3
    cc2c:	883b      	ldrh	r3, [r7, #0]
    cc2e:	429a      	cmp	r2, r3
    cc30:	d0d1      	beq.n	cbd6 <tx_cmplt_get+0x42>

	return cmplt;
}
    cc32:	4628      	mov	r0, r5
    cc34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			tx->node = (void *)2;
    cc38:	2302      	movs	r3, #2
    cc3a:	e7dc      	b.n	cbf6 <tx_cmplt_get+0x62>
		return 0;
    cc3c:	2500      	movs	r5, #0
    cc3e:	e7f8      	b.n	cc32 <tx_cmplt_get+0x9e>
    cc40:	2000060c 	.word	0x2000060c
    cc44:	20000610 	.word	0x20000610

0000cc48 <ull_ticker_status_give>:
	*((uint32_t volatile *)param) = status;
    cc48:	6008      	str	r0, [r1, #0]
    cc4a:	4801      	ldr	r0, [pc, #4]	; (cc50 <ull_ticker_status_give+0x8>)
    cc4c:	f008 bd34 	b.w	156b8 <z_impl_k_sem_give>
    cc50:	20001ee8 	.word	0x20001ee8

0000cc54 <ll_rx_get>:
{
    cc54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
    cc58:	4f26      	ldr	r7, [pc, #152]	; (ccf4 <ll_rx_get+0xa0>)
    cc5a:	f8df 809c 	ldr.w	r8, [pc, #156]	; ccf8 <ll_rx_get+0xa4>
{
    cc5e:	4605      	mov	r5, r0
    cc60:	460c      	mov	r4, r1
	*node_rx = NULL;
    cc62:	2300      	movs	r3, #0
    cc64:	602b      	str	r3, [r5, #0]
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
    cc66:	e9d7 0100 	ldrd	r0, r1, [r7]
    cc6a:	aa01      	add	r2, sp, #4
    cc6c:	f00e ff96 	bl	1bb9c <memq_peek>
	if (link) {
    cc70:	4606      	mov	r6, r0
    cc72:	2800      	cmp	r0, #0
    cc74:	d036      	beq.n	cce4 <ll_rx_get+0x90>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
    cc76:	9b01      	ldr	r3, [sp, #4]
    cc78:	4920      	ldr	r1, [pc, #128]	; (ccfc <ll_rx_get+0xa8>)
    cc7a:	781a      	ldrb	r2, [r3, #0]
    cc7c:	4620      	mov	r0, r4
    cc7e:	f7ff ff89 	bl	cb94 <tx_cmplt_get>
		if (!cmplt) {
    cc82:	bb60      	cbnz	r0, ccde <ll_rx_get+0x8a>
			f = mfifo_tx_ack.f;
    cc84:	f898 3002 	ldrb.w	r3, [r8, #2]
    cc88:	f88d 3001 	strb.w	r3, [sp, #1]
				cmplt_curr = tx_cmplt_get(&h, &f,
    cc8c:	f898 2003 	ldrb.w	r2, [r8, #3]
    cc90:	4681      	mov	r9, r0
    cc92:	f10d 0101 	add.w	r1, sp, #1
    cc96:	f10d 0002 	add.w	r0, sp, #2
    cc9a:	f7ff ff7b 	bl	cb94 <tx_cmplt_get>
			} while ((cmplt_prev != 0U) ||
    cc9e:	ea49 0200 	orr.w	r2, r9, r0
    cca2:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    cca6:	d1f1      	bne.n	cc8c <ll_rx_get+0x38>
			} else if (rx->type == NODE_RX_TYPE_RELEASE) {
    cca8:	9b01      	ldr	r3, [sp, #4]
    ccaa:	f893 9004 	ldrb.w	r9, [r3, #4]
    ccae:	f1b9 0f01 	cmp.w	r9, #1
    ccb2:	d112      	bne.n	ccda <ll_rx_get+0x86>
				(void)memq_dequeue(memq_ll_rx.tail,
    ccb4:	4639      	mov	r1, r7
    ccb6:	6878      	ldr	r0, [r7, #4]
    ccb8:	f00e ff78 	bl	1bbac <memq_dequeue>
				mem_release(link, &mem_link_rx.free);
    ccbc:	4910      	ldr	r1, [pc, #64]	; (cd00 <ll_rx_get+0xac>)
    ccbe:	4630      	mov	r0, r6
    ccc0:	f00e ff20 	bl	1bb04 <mem_release>
				ll_rx_link_inc_quota(1);
    ccc4:	4648      	mov	r0, r9
    ccc6:	f7ff fe7f 	bl	c9c8 <ll_rx_link_inc_quota>
				mem_release(rx, &mem_pdu_rx.free);
    ccca:	9801      	ldr	r0, [sp, #4]
    cccc:	490d      	ldr	r1, [pc, #52]	; (cd04 <ll_rx_get+0xb0>)
    ccce:	f00e ff19 	bl	1bb04 <mem_release>
				rx_alloc(1);
    ccd2:	4648      	mov	r0, r9
    ccd4:	f7ff fee8 	bl	caa8 <rx_alloc>
				goto ll_rx_get_again;
    ccd8:	e7c3      	b.n	cc62 <ll_rx_get+0xe>
			*node_rx = rx;
    ccda:	602b      	str	r3, [r5, #0]
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
    ccdc:	4610      	mov	r0, r2
}
    ccde:	b003      	add	sp, #12
    cce0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, mfifo_tx_ack.l);
    cce4:	f898 2003 	ldrb.w	r2, [r8, #3]
    cce8:	4904      	ldr	r1, [pc, #16]	; (ccfc <ll_rx_get+0xa8>)
    ccea:	4620      	mov	r0, r4
    ccec:	f7ff ff52 	bl	cb94 <tx_cmplt_get>
    ccf0:	e7f5      	b.n	ccde <ll_rx_get+0x8a>
    ccf2:	bf00      	nop
    ccf4:	20001ecc 	.word	0x20001ecc
    ccf8:	2000060c 	.word	0x2000060c
    ccfc:	2000060e 	.word	0x2000060e
    cd00:	20001ca0 	.word	0x20001ca0
    cd04:	20001cec 	.word	0x20001cec

0000cd08 <ll_rx_dequeue>:
{
    cd08:	b573      	push	{r0, r1, r4, r5, r6, lr}
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
    cd0a:	4948      	ldr	r1, [pc, #288]	; (ce2c <ll_rx_dequeue+0x124>)
	struct node_rx_hdr *rx = NULL;
    cd0c:	2300      	movs	r3, #0
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
    cd0e:	6848      	ldr	r0, [r1, #4]
	struct node_rx_hdr *rx = NULL;
    cd10:	9301      	str	r3, [sp, #4]
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
    cd12:	aa01      	add	r2, sp, #4
    cd14:	f00e ff4a 	bl	1bbac <memq_dequeue>
	LL_ASSERT(link);
    cd18:	4604      	mov	r4, r0
    cd1a:	b960      	cbnz	r0, cd36 <ll_rx_dequeue+0x2e>
    cd1c:	4a44      	ldr	r2, [pc, #272]	; (ce30 <ll_rx_dequeue+0x128>)
    cd1e:	4945      	ldr	r1, [pc, #276]	; (ce34 <ll_rx_dequeue+0x12c>)
    cd20:	4845      	ldr	r0, [pc, #276]	; (ce38 <ll_rx_dequeue+0x130>)
    cd22:	f240 33a1 	movw	r3, #929	; 0x3a1
    cd26:	f009 fc68 	bl	165fa <printk>
    cd2a:	4040      	eors	r0, r0
    cd2c:	f380 8811 	msr	BASEPRI, r0
    cd30:	f04f 0003 	mov.w	r0, #3
    cd34:	df02      	svc	2
	mem_release(link, &mem_link_rx.free);
    cd36:	4941      	ldr	r1, [pc, #260]	; (ce3c <ll_rx_dequeue+0x134>)
    cd38:	4620      	mov	r0, r4
    cd3a:	f00e fee3 	bl	1bb04 <mem_release>
	switch (rx->type) {
    cd3e:	9b01      	ldr	r3, [sp, #4]
    cd40:	7919      	ldrb	r1, [r3, #4]
    cd42:	291b      	cmp	r1, #27
    cd44:	d86f      	bhi.n	ce26 <ll_rx_dequeue+0x11e>
    cd46:	483e      	ldr	r0, [pc, #248]	; (ce40 <ll_rx_dequeue+0x138>)
    cd48:	2201      	movs	r2, #1
    cd4a:	408a      	lsls	r2, r1
    cd4c:	4202      	tst	r2, r0
    cd4e:	d15a      	bne.n	ce06 <ll_rx_dequeue+0xfe>
    cd50:	0252      	lsls	r2, r2, #9
    cd52:	d568      	bpl.n	ce26 <ll_rx_dequeue+0x11e>
		} else if ((cc->status == BT_HCI_ERR_ADV_TIMEOUT) || cc->role) {
    cd54:	7f1a      	ldrb	r2, [r3, #28]
    cd56:	2a3c      	cmp	r2, #60	; 0x3c
    cd58:	d002      	beq.n	cd60 <ll_rx_dequeue+0x58>
    cd5a:	7f59      	ldrb	r1, [r3, #29]
    cd5c:	2900      	cmp	r1, #0
    cd5e:	d04d      	beq.n	cdfc <ll_rx_dequeue+0xf4>
			lll = ftr->param;
    cd60:	689e      	ldr	r6, [r3, #8]
			if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
    cd62:	2a3c      	cmp	r2, #60	; 0x3c
			adv = HDR_LLL2ULL(lll);
    cd64:	6835      	ldr	r5, [r6, #0]
			if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
    cd66:	d140      	bne.n	cdea <ll_rx_dequeue+0xe2>
				conn_lll = lll->conn;
    cd68:	6874      	ldr	r4, [r6, #4]
				LL_ASSERT(conn_lll);
    cd6a:	b964      	cbnz	r4, cd86 <ll_rx_dequeue+0x7e>
    cd6c:	4a30      	ldr	r2, [pc, #192]	; (ce30 <ll_rx_dequeue+0x128>)
    cd6e:	4935      	ldr	r1, [pc, #212]	; (ce44 <ll_rx_dequeue+0x13c>)
    cd70:	4831      	ldr	r0, [pc, #196]	; (ce38 <ll_rx_dequeue+0x130>)
    cd72:	f240 4317 	movw	r3, #1047	; 0x417
    cd76:	f009 fc40 	bl	165fa <printk>
    cd7a:	4040      	eors	r0, r0
    cd7c:	f380 8811 	msr	BASEPRI, r0
    cd80:	f04f 0003 	mov.w	r0, #3
    cd84:	df02      	svc	2
				lll->conn = NULL;
    cd86:	2300      	movs	r3, #0
    cd88:	6073      	str	r3, [r6, #4]
				LL_ASSERT(!conn_lll->link_tx_free);
    cd8a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    cd8c:	b163      	cbz	r3, cda8 <ll_rx_dequeue+0xa0>
    cd8e:	4a28      	ldr	r2, [pc, #160]	; (ce30 <ll_rx_dequeue+0x128>)
    cd90:	492d      	ldr	r1, [pc, #180]	; (ce48 <ll_rx_dequeue+0x140>)
    cd92:	4829      	ldr	r0, [pc, #164]	; (ce38 <ll_rx_dequeue+0x130>)
    cd94:	f240 431a 	movw	r3, #1050	; 0x41a
    cd98:	f009 fc2f 	bl	165fa <printk>
    cd9c:	4040      	eors	r0, r0
    cd9e:	f380 8811 	msr	BASEPRI, r0
    cda2:	f04f 0003 	mov.w	r0, #3
    cda6:	df02      	svc	2
				link = memq_deinit(&conn_lll->memq_tx.head,
    cda8:	f104 0140 	add.w	r1, r4, #64	; 0x40
    cdac:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    cdb0:	f00e fee2 	bl	1bb78 <memq_deinit>
				LL_ASSERT(link);
    cdb4:	4606      	mov	r6, r0
    cdb6:	b960      	cbnz	r0, cdd2 <ll_rx_dequeue+0xca>
    cdb8:	4a1d      	ldr	r2, [pc, #116]	; (ce30 <ll_rx_dequeue+0x128>)
    cdba:	491e      	ldr	r1, [pc, #120]	; (ce34 <ll_rx_dequeue+0x12c>)
    cdbc:	481e      	ldr	r0, [pc, #120]	; (ce38 <ll_rx_dequeue+0x130>)
    cdbe:	f240 431d 	movw	r3, #1053	; 0x41d
    cdc2:	f009 fc1a 	bl	165fa <printk>
    cdc6:	4040      	eors	r0, r0
    cdc8:	f380 8811 	msr	BASEPRI, r0
    cdcc:	f04f 0003 	mov.w	r0, #3
    cdd0:	df02      	svc	2
				ll_conn_release(conn);
    cdd2:	6820      	ldr	r0, [r4, #0]
				conn_lll->link_tx_free = link;
    cdd4:	64e6      	str	r6, [r4, #76]	; 0x4c
				ll_conn_release(conn);
    cdd6:	f001 fbdd 	bl	e594 <ll_conn_release>
			adv->is_enabled = 0U;
    cdda:	f895 306a 	ldrb.w	r3, [r5, #106]	; 0x6a
    cdde:	f36f 0300 	bfc	r3, #0, #1
    cde2:	f885 306a 	strb.w	r3, [r5, #106]	; 0x6a
}
    cde6:	b002      	add	sp, #8
    cde8:	bd70      	pop	{r4, r5, r6, pc}
				if (adv->node_rx_cc_free) {
    cdea:	6e68      	ldr	r0, [r5, #100]	; 0x64
    cdec:	2800      	cmp	r0, #0
    cdee:	d0f4      	beq.n	cdda <ll_rx_dequeue+0xd2>
					adv->node_rx_cc_free = NULL;
    cdf0:	2300      	movs	r3, #0
					mem_release(rx_free, &mem_pdu_rx.free);
    cdf2:	4916      	ldr	r1, [pc, #88]	; (ce4c <ll_rx_dequeue+0x144>)
					adv->node_rx_cc_free = NULL;
    cdf4:	666b      	str	r3, [r5, #100]	; 0x64
					mem_release(rx_free, &mem_pdu_rx.free);
    cdf6:	f00e fe85 	bl	1bb04 <mem_release>
    cdfa:	e7ee      	b.n	cdda <ll_rx_dequeue+0xd2>
			LL_ASSERT(0);
    cdfc:	f240 4354 	movw	r3, #1108	; 0x454
		LL_ASSERT(0);
    ce00:	4a0b      	ldr	r2, [pc, #44]	; (ce30 <ll_rx_dequeue+0x128>)
    ce02:	4913      	ldr	r1, [pc, #76]	; (ce50 <ll_rx_dequeue+0x148>)
    ce04:	e005      	b.n	ce12 <ll_rx_dequeue+0x10a>
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
    ce06:	2900      	cmp	r1, #0
    ce08:	d1ed      	bne.n	cde6 <ll_rx_dequeue+0xde>
    ce0a:	4a09      	ldr	r2, [pc, #36]	; (ce30 <ll_rx_dequeue+0x128>)
    ce0c:	4911      	ldr	r1, [pc, #68]	; (ce54 <ll_rx_dequeue+0x14c>)
    ce0e:	f240 43c3 	movw	r3, #1219	; 0x4c3
		LL_ASSERT(0);
    ce12:	4809      	ldr	r0, [pc, #36]	; (ce38 <ll_rx_dequeue+0x130>)
    ce14:	f009 fbf1 	bl	165fa <printk>
    ce18:	4040      	eors	r0, r0
    ce1a:	f380 8811 	msr	BASEPRI, r0
    ce1e:	f04f 0003 	mov.w	r0, #3
    ce22:	df02      	svc	2
}
    ce24:	e7df      	b.n	cde6 <ll_rx_dequeue+0xde>
		LL_ASSERT(0);
    ce26:	f240 43c7 	movw	r3, #1223	; 0x4c7
    ce2a:	e7e9      	b.n	ce00 <ll_rx_dequeue+0xf8>
    ce2c:	20001ecc 	.word	0x20001ecc
    ce30:	00020508 	.word	0x00020508
    ce34:	0002091f 	.word	0x0002091f
    ce38:	0002023c 	.word	0x0002023c
    ce3c:	20001ca0 	.word	0x20001ca0
    ce40:	0b800029 	.word	0x0b800029
    ce44:	00020582 	.word	0x00020582
    ce48:	0002058b 	.word	0x0002058b
    ce4c:	20001cec 	.word	0x20001cec
    ce50:	00020e86 	.word	0x00020e86
    ce54:	000205a3 	.word	0x000205a3

0000ce58 <ll_rx_mem_release>:
{
    ce58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx = *node_rx;
    ce5c:	6804      	ldr	r4, [r0, #0]
			LL_ASSERT(0);
    ce5e:	4d4a      	ldr	r5, [pc, #296]	; (cf88 <ll_rx_mem_release+0x130>)
    ce60:	f8df 8128 	ldr.w	r8, [pc, #296]	; cf8c <ll_rx_mem_release+0x134>
    ce64:	4e4a      	ldr	r6, [pc, #296]	; (cf90 <ll_rx_mem_release+0x138>)
{
    ce66:	4607      	mov	r7, r0
	while (rx) {
    ce68:	b92c      	cbnz	r4, ce76 <ll_rx_mem_release+0x1e>
	*node_rx = rx;
    ce6a:	603c      	str	r4, [r7, #0]
	rx_alloc(UINT8_MAX);
    ce6c:	20ff      	movs	r0, #255	; 0xff
}
    ce6e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx_alloc(UINT8_MAX);
    ce72:	f7ff be19 	b.w	caa8 <rx_alloc>
		switch (rx_free->type) {
    ce76:	7923      	ldrb	r3, [r4, #4]
		rx = rx->next;
    ce78:	f8d4 9000 	ldr.w	r9, [r4]
		switch (rx_free->type) {
    ce7c:	2b05      	cmp	r3, #5
    ce7e:	d813      	bhi.n	cea8 <ll_rx_mem_release+0x50>
    ce80:	2201      	movs	r2, #1
    ce82:	fa02 f303 	lsl.w	r3, r2, r3
    ce86:	f013 0f29 	tst.w	r3, #41	; 0x29
    ce8a:	d13a      	bne.n	cf02 <ll_rx_mem_release+0xaa>
			LL_ASSERT(0);
    ce8c:	f240 53fa 	movw	r3, #1530	; 0x5fa
    ce90:	462a      	mov	r2, r5
    ce92:	4641      	mov	r1, r8
    ce94:	4630      	mov	r0, r6
    ce96:	f009 fbb0 	bl	165fa <printk>
    ce9a:	4040      	eors	r0, r0
    ce9c:	f380 8811 	msr	BASEPRI, r0
    cea0:	f04f 0003 	mov.w	r0, #3
    cea4:	df02      	svc	2
			break;
    cea6:	e01c      	b.n	cee2 <ll_rx_mem_release+0x8a>
		switch (rx_free->type) {
    cea8:	3b16      	subs	r3, #22
    ceaa:	b2da      	uxtb	r2, r3
    ceac:	2a05      	cmp	r2, #5
    ceae:	d8ed      	bhi.n	ce8c <ll_rx_mem_release+0x34>
    ceb0:	2b05      	cmp	r3, #5
    ceb2:	d8eb      	bhi.n	ce8c <ll_rx_mem_release+0x34>
    ceb4:	a201      	add	r2, pc, #4	; (adr r2, cebc <ll_rx_mem_release+0x64>)
    ceb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ceba:	bf00      	nop
    cebc:	0000ced5 	.word	0x0000ced5
    cec0:	0000cf29 	.word	0x0000cf29
    cec4:	0000cf03 	.word	0x0000cf03
    cec8:	0000cf03 	.word	0x0000cf03
    cecc:	0000ce8d 	.word	0x0000ce8d
    ced0:	0000cf03 	.word	0x0000cf03
			} else if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
    ced4:	7f23      	ldrb	r3, [r4, #28]
    ced6:	2b3c      	cmp	r3, #60	; 0x3c
    ced8:	d105      	bne.n	cee6 <ll_rx_mem_release+0x8e>
			mem_release(rx_free, &mem_pdu_rx.free);
    ceda:	492e      	ldr	r1, [pc, #184]	; (cf94 <ll_rx_mem_release+0x13c>)
    cedc:	4620      	mov	r0, r4
    cede:	f00e fe11 	bl	1bb04 <mem_release>
{
    cee2:	464c      	mov	r4, r9
    cee4:	e7c0      	b.n	ce68 <ll_rx_mem_release+0x10>
				LL_ASSERT(!cc->status);
    cee6:	b163      	cbz	r3, cf02 <ll_rx_mem_release+0xaa>
    cee8:	492b      	ldr	r1, [pc, #172]	; (cf98 <ll_rx_mem_release+0x140>)
    ceea:	f240 532b 	movw	r3, #1323	; 0x52b
    ceee:	462a      	mov	r2, r5
    cef0:	4630      	mov	r0, r6
    cef2:	f009 fb82 	bl	165fa <printk>
    cef6:	4040      	eors	r0, r0
    cef8:	f380 8811 	msr	BASEPRI, r0
    cefc:	f04f 0003 	mov.w	r0, #3
    cf00:	df02      	svc	2
			LL_ASSERT(rx_free->type != NODE_RX_TYPE_NONE);
    cf02:	7923      	ldrb	r3, [r4, #4]
    cf04:	b963      	cbnz	r3, cf20 <ll_rx_mem_release+0xc8>
    cf06:	4925      	ldr	r1, [pc, #148]	; (cf9c <ll_rx_mem_release+0x144>)
    cf08:	f240 537d 	movw	r3, #1405	; 0x57d
    cf0c:	462a      	mov	r2, r5
    cf0e:	4630      	mov	r0, r6
    cf10:	f009 fb73 	bl	165fa <printk>
    cf14:	4040      	eors	r0, r0
    cf16:	f380 8811 	msr	BASEPRI, r0
    cf1a:	f04f 0003 	mov.w	r0, #3
    cf1e:	df02      	svc	2
			ll_rx_link_inc_quota(1);
    cf20:	2001      	movs	r0, #1
    cf22:	f7ff fd51 	bl	c9c8 <ll_rx_link_inc_quota>
    cf26:	e7d8      	b.n	ceda <ll_rx_mem_release+0x82>
			if (IS_ACL_HANDLE(rx_free->handle)) {
    cf28:	88e0      	ldrh	r0, [r4, #6]
    cf2a:	2800      	cmp	r0, #0
    cf2c:	d1d9      	bne.n	cee2 <ll_rx_mem_release+0x8a>
				conn = ll_conn_get(rx_free->handle);
    cf2e:	f001 fbad 	bl	e68c <ll_conn_get>
				LL_ASSERT(!conn->lll.link_tx_free);
    cf32:	6e83      	ldr	r3, [r0, #104]	; 0x68
				conn = ll_conn_get(rx_free->handle);
    cf34:	4604      	mov	r4, r0
				LL_ASSERT(!conn->lll.link_tx_free);
    cf36:	b163      	cbz	r3, cf52 <ll_rx_mem_release+0xfa>
    cf38:	4919      	ldr	r1, [pc, #100]	; (cfa0 <ll_rx_mem_release+0x148>)
    cf3a:	f240 53ec 	movw	r3, #1516	; 0x5ec
    cf3e:	462a      	mov	r2, r5
    cf40:	4630      	mov	r0, r6
    cf42:	f009 fb5a 	bl	165fa <printk>
    cf46:	4040      	eors	r0, r0
    cf48:	f380 8811 	msr	BASEPRI, r0
    cf4c:	f04f 0003 	mov.w	r0, #3
    cf50:	df02      	svc	2
				link = memq_deinit(&conn->lll.memq_tx.head,
    cf52:	f104 015c 	add.w	r1, r4, #92	; 0x5c
    cf56:	f104 0058 	add.w	r0, r4, #88	; 0x58
    cf5a:	f00e fe0d 	bl	1bb78 <memq_deinit>
				LL_ASSERT(link);
    cf5e:	4682      	mov	sl, r0
    cf60:	b960      	cbnz	r0, cf7c <ll_rx_mem_release+0x124>
    cf62:	4910      	ldr	r1, [pc, #64]	; (cfa4 <ll_rx_mem_release+0x14c>)
    cf64:	f240 53ef 	movw	r3, #1519	; 0x5ef
    cf68:	462a      	mov	r2, r5
    cf6a:	4630      	mov	r0, r6
    cf6c:	f009 fb45 	bl	165fa <printk>
    cf70:	4040      	eors	r0, r0
    cf72:	f380 8811 	msr	BASEPRI, r0
    cf76:	f04f 0003 	mov.w	r0, #3
    cf7a:	df02      	svc	2
				conn->lll.link_tx_free = link;
    cf7c:	f8c4 a068 	str.w	sl, [r4, #104]	; 0x68
				ll_conn_release(conn);
    cf80:	4620      	mov	r0, r4
    cf82:	f001 fb07 	bl	e594 <ll_conn_release>
    cf86:	e7ac      	b.n	cee2 <ll_rx_mem_release+0x8a>
    cf88:	00020508 	.word	0x00020508
    cf8c:	00020e86 	.word	0x00020e86
    cf90:	0002023c 	.word	0x0002023c
    cf94:	20001cec 	.word	0x20001cec
    cf98:	000205c1 	.word	0x000205c1
    cf9c:	000205cd 	.word	0x000205cd
    cfa0:	000205f0 	.word	0x000205f0
    cfa4:	0002091f 	.word	0x0002091f

0000cfa8 <ll_rx_link_alloc>:
	return mem_acquire(&mem_link_rx.free);
    cfa8:	4801      	ldr	r0, [pc, #4]	; (cfb0 <ll_rx_link_alloc+0x8>)
    cfaa:	f00e bd92 	b.w	1bad2 <mem_acquire>
    cfae:	bf00      	nop
    cfb0:	20001ca0 	.word	0x20001ca0

0000cfb4 <ll_rx_link_release>:
	mem_release(link, &mem_link_rx.free);
    cfb4:	4901      	ldr	r1, [pc, #4]	; (cfbc <ll_rx_link_release+0x8>)
    cfb6:	f00e bda5 	b.w	1bb04 <mem_release>
    cfba:	bf00      	nop
    cfbc:	20001ca0 	.word	0x20001ca0

0000cfc0 <ll_rx_alloc>:
	return mem_acquire(&mem_pdu_rx.free);
    cfc0:	4801      	ldr	r0, [pc, #4]	; (cfc8 <ll_rx_alloc+0x8>)
    cfc2:	f00e bd86 	b.w	1bad2 <mem_acquire>
    cfc6:	bf00      	nop
    cfc8:	20001cec 	.word	0x20001cec

0000cfcc <ll_rx_release>:
	mem_release(node_rx, &mem_pdu_rx.free);
    cfcc:	4901      	ldr	r1, [pc, #4]	; (cfd4 <ll_rx_release+0x8>)
    cfce:	f00e bd99 	b.w	1bb04 <mem_release>
    cfd2:	bf00      	nop
    cfd4:	20001cec 	.word	0x20001cec

0000cfd8 <ll_rx_put>:
	rx_hdr->ack_last = mfifo_tx_ack.l;
    cfd8:	4b02      	ldr	r3, [pc, #8]	; (cfe4 <ll_rx_put+0xc>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    cfda:	4a03      	ldr	r2, [pc, #12]	; (cfe8 <ll_rx_put+0x10>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
    cfdc:	78db      	ldrb	r3, [r3, #3]
    cfde:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    cfe0:	f00e bdd5 	b.w	1bb8e <memq_enqueue>
    cfe4:	2000060c 	.word	0x2000060c
    cfe8:	20001ed0 	.word	0x20001ed0

0000cfec <ll_rx_sched>:
	k_sem_give(sem_recv);
    cfec:	4b01      	ldr	r3, [pc, #4]	; (cff4 <ll_rx_sched+0x8>)
    cfee:	6818      	ldr	r0, [r3, #0]
    cff0:	f008 bb62 	b.w	156b8 <z_impl_k_sem_give>
    cff4:	20001ee4 	.word	0x20001ee4

0000cff8 <rx_demux>:
{
    cff8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
    cffa:	4c3c      	ldr	r4, [pc, #240]	; (d0ec <rx_demux+0xf4>)
#if defined(CONFIG_BT_CTLR_USER_EXT)
		/* Try proprietary demuxing */
		rx_demux_rx_proprietary(link, rx, memq_ull_rx.tail,
					&memq_ull_rx.head);
#else
		LL_ASSERT(0);
    cffc:	4e3c      	ldr	r6, [pc, #240]	; (d0f0 <rx_demux+0xf8>)
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
    cffe:	e9d4 0100 	ldrd	r0, r1, [r4]
    d002:	aa01      	add	r2, sp, #4
    d004:	f00e fdca 	bl	1bb9c <memq_peek>
		if (link) {
    d008:	4605      	mov	r5, r0
    d00a:	2800      	cmp	r0, #0
    d00c:	d05d      	beq.n	d0ca <rx_demux+0xd2>
			LL_ASSERT(rx);
    d00e:	9b01      	ldr	r3, [sp, #4]
    d010:	b963      	cbnz	r3, d02c <rx_demux+0x34>
    d012:	4938      	ldr	r1, [pc, #224]	; (d0f4 <rx_demux+0xfc>)
    d014:	4838      	ldr	r0, [pc, #224]	; (d0f8 <rx_demux+0x100>)
    d016:	f44f 630b 	mov.w	r3, #2224	; 0x8b0
    d01a:	4632      	mov	r2, r6
    d01c:	f009 faed 	bl	165fa <printk>
    d020:	4040      	eors	r0, r0
    d022:	f380 8811 	msr	BASEPRI, r0
    d026:	f04f 0003 	mov.w	r0, #3
    d02a:	df02      	svc	2
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
    d02c:	9b01      	ldr	r3, [sp, #4]
    d02e:	aa02      	add	r2, sp, #8
    d030:	7818      	ldrb	r0, [r3, #0]
    d032:	f10d 0102 	add.w	r1, sp, #2
    d036:	f002 fa61 	bl	f4fc <ull_conn_ack_by_last_peek>
			if (link_tx) {
    d03a:	4602      	mov	r2, r0
    d03c:	9801      	ldr	r0, [sp, #4]
    d03e:	b132      	cbz	r2, d04e <rx_demux+0x56>
				rx_demux_conn_tx_ack(rx->ack_last, handle,
    d040:	9b02      	ldr	r3, [sp, #8]
    d042:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    d046:	7800      	ldrb	r0, [r0, #0]
				rx_demux_conn_tx_ack(ack_last, handle,
    d048:	f00f f8cc 	bl	1c1e4 <rx_demux_conn_tx_ack>
	} while (link);
    d04c:	e7d7      	b.n	cffe <rx_demux+0x6>
				nack = rx_demux_rx(link, rx);
    d04e:	9003      	str	r0, [sp, #12]
	switch (rx->type) {
    d050:	7903      	ldrb	r3, [r0, #4]
    d052:	2b05      	cmp	r3, #5
    d054:	d016      	beq.n	d084 <rx_demux+0x8c>
    d056:	d811      	bhi.n	d07c <rx_demux+0x84>
    d058:	2b01      	cmp	r3, #1
    d05a:	d013      	beq.n	d084 <rx_demux+0x8c>
    d05c:	2b03      	cmp	r3, #3
    d05e:	d021      	beq.n	d0a4 <rx_demux+0xac>
		LL_ASSERT(0);
    d060:	4926      	ldr	r1, [pc, #152]	; (d0fc <rx_demux+0x104>)
    d062:	4825      	ldr	r0, [pc, #148]	; (d0f8 <rx_demux+0x100>)
    d064:	f640 13ff 	movw	r3, #2559	; 0x9ff
    d068:	4632      	mov	r2, r6
    d06a:	f009 fac6 	bl	165fa <printk>
    d06e:	4040      	eors	r0, r0
    d070:	f380 8811 	msr	BASEPRI, r0
    d074:	f04f 0003 	mov.w	r0, #3
    d078:	df02      	svc	2
			if (nack) {
    d07a:	e7c0      	b.n	cffe <rx_demux+0x6>
	switch (rx->type) {
    d07c:	2b16      	cmp	r3, #22
    d07e:	d008      	beq.n	d092 <rx_demux+0x9a>
    d080:	2b17      	cmp	r3, #23
    d082:	d1ed      	bne.n	d060 <rx_demux+0x68>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
    d084:	4621      	mov	r1, r4
    d086:	6860      	ldr	r0, [r4, #4]
    d088:	2200      	movs	r2, #0
    d08a:	f00e fd8f 	bl	1bbac <memq_dequeue>
		ll_rx_put(link, rx);
    d08e:	9903      	ldr	r1, [sp, #12]
    d090:	e015      	b.n	d0be <rx_demux+0xc6>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
    d092:	4621      	mov	r1, r4
    d094:	6860      	ldr	r0, [r4, #4]
    d096:	f00e fd89 	bl	1bbac <memq_dequeue>
		ull_conn_setup(link, rx);
    d09a:	9903      	ldr	r1, [sp, #12]
    d09c:	4628      	mov	r0, r5
    d09e:	f001 fba7 	bl	e7f0 <ull_conn_setup>
			if (nack) {
    d0a2:	e7ac      	b.n	cffe <rx_demux+0x6>
		nack = ull_conn_rx(link, (void *)&rx);
    d0a4:	a903      	add	r1, sp, #12
    d0a6:	4628      	mov	r0, r5
    d0a8:	f001 fbca 	bl	e840 <ull_conn_rx>
		if (nack) {
    d0ac:	4602      	mov	r2, r0
    d0ae:	b9d0      	cbnz	r0, d0e6 <rx_demux+0xee>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
    d0b0:	4621      	mov	r1, r4
    d0b2:	6860      	ldr	r0, [r4, #4]
    d0b4:	f00e fd7a 	bl	1bbac <memq_dequeue>
		if (rx) {
    d0b8:	9903      	ldr	r1, [sp, #12]
    d0ba:	2900      	cmp	r1, #0
    d0bc:	d09f      	beq.n	cffe <rx_demux+0x6>
		ll_rx_put(link, rx);
    d0be:	4628      	mov	r0, r5
    d0c0:	f7ff ff8a 	bl	cfd8 <ll_rx_put>
		ll_rx_sched();
    d0c4:	f7ff ff92 	bl	cfec <ll_rx_sched>
			if (nack) {
    d0c8:	e799      	b.n	cffe <rx_demux+0x6>
			link = ull_conn_ack_peek(&ack_last, &handle, &node_tx);
    d0ca:	aa03      	add	r2, sp, #12
    d0cc:	a902      	add	r1, sp, #8
    d0ce:	f10d 0002 	add.w	r0, sp, #2
    d0d2:	f002 f9fd 	bl	f4d0 <ull_conn_ack_peek>
			if (link) {
    d0d6:	4602      	mov	r2, r0
    d0d8:	b128      	cbz	r0, d0e6 <rx_demux+0xee>
				rx_demux_conn_tx_ack(ack_last, handle,
    d0da:	9b03      	ldr	r3, [sp, #12]
    d0dc:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    d0e0:	f89d 0002 	ldrb.w	r0, [sp, #2]
    d0e4:	e7b0      	b.n	d048 <rx_demux+0x50>
}
    d0e6:	b004      	add	sp, #16
    d0e8:	bd70      	pop	{r4, r5, r6, pc}
    d0ea:	bf00      	nop
    d0ec:	20001edc 	.word	0x20001edc
    d0f0:	00020508 	.word	0x00020508
    d0f4:	00020c22 	.word	0x00020c22
    d0f8:	0002023c 	.word	0x0002023c
    d0fc:	00020e86 	.word	0x00020e86

0000d100 <ll_pdu_rx_alloc_peek>:
{
    d100:	b510      	push	{r4, lr}
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
    d102:	4a0a      	ldr	r2, [pc, #40]	; (d12c <ll_pdu_rx_alloc_peek+0x2c>)
    d104:	7891      	ldrb	r1, [r2, #2]
    d106:	78d4      	ldrb	r4, [r2, #3]
    d108:	7853      	ldrb	r3, [r2, #1]
	if (last >= first) {
    d10a:	42a1      	cmp	r1, r4
		return count - first + last;
    d10c:	bf8a      	itet	hi
    d10e:	191b      	addhi	r3, r3, r4
		return last - first;
    d110:	1a63      	subls	r3, r4, r1
		return count - first + last;
    d112:	1a5b      	subhi	r3, r3, r1
    d114:	b2db      	uxtb	r3, r3
    d116:	4298      	cmp	r0, r3
    d118:	d806      	bhi.n	d128 <ll_pdu_rx_alloc_peek+0x28>
	if (first == last) {
    d11a:	42a1      	cmp	r1, r4
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
    d11c:	7813      	ldrb	r3, [r2, #0]
    d11e:	d003      	beq.n	d128 <ll_pdu_rx_alloc_peek+0x28>
	return *((void **)(fifo + first * size));
    d120:	fb01 2203 	mla	r2, r1, r3, r2
    d124:	6850      	ldr	r0, [r2, #4]
}
    d126:	bd10      	pop	{r4, pc}
		return NULL;
    d128:	2000      	movs	r0, #0
    d12a:	e7fc      	b.n	d126 <ll_pdu_rx_alloc_peek+0x26>
    d12c:	200004e4 	.word	0x200004e4

0000d130 <ll_pdu_rx_alloc>:
{
    d130:	b510      	push	{r4, lr}
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
    d132:	4a09      	ldr	r2, [pc, #36]	; (d158 <ll_pdu_rx_alloc+0x28>)
 * @return              Head buffer; or NULL if queue was empty
 */
static inline void *mfifo_dequeue(uint8_t *fifo, uint8_t size, uint8_t count,
				  uint8_t last, uint8_t *first)
{
	uint8_t _first = *first; /* Copy read-index */
    d134:	7893      	ldrb	r3, [r2, #2]
	void *mem;

	/* Queue is empty if first == last */
	if (_first == last) {
    d136:	78d0      	ldrb	r0, [r2, #3]
    d138:	7811      	ldrb	r1, [r2, #0]
    d13a:	7854      	ldrb	r4, [r2, #1]
    d13c:	4298      	cmp	r0, r3
    d13e:	d009      	beq.n	d154 <ll_pdu_rx_alloc+0x24>
	}

	/* Obtain address of head buffer.
	 * API 2: fifo is array of void-ptrs
	 */
	mem = *((void **)(fifo + _first * size));
    d140:	fb03 2101 	mla	r1, r3, r1, r2

	/* Circular buffer increment read-index modulo 'count' */
	_first += 1U;
    d144:	3301      	adds	r3, #1
    d146:	b2db      	uxtb	r3, r3
	if (_first == count) {
		_first = 0U;
    d148:	429c      	cmp	r4, r3
    d14a:	bf08      	it	eq
    d14c:	2300      	moveq	r3, #0
	mem = *((void **)(fifo + _first * size));
    d14e:	6848      	ldr	r0, [r1, #4]
	}

	*first = _first; /* Write back read-index */
    d150:	7093      	strb	r3, [r2, #2]
}
    d152:	bd10      	pop	{r4, pc}
		return NULL;
    d154:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
    d156:	e7fc      	b.n	d152 <ll_pdu_rx_alloc+0x22>
    d158:	200004e4 	.word	0x200004e4

0000d15c <ll_tx_ack_put>:
{
    d15c:	b570      	push	{r4, r5, r6, lr}
	idx = MFIFO_ENQUEUE_GET(tx_ack, (void **)&tx);
    d15e:	4a12      	ldr	r2, [pc, #72]	; (d1a8 <ll_tx_ack_put+0x4c>)
    d160:	78d6      	ldrb	r6, [r2, #3]
	if (last == count) {
    d162:	7855      	ldrb	r5, [r2, #1]
    d164:	7894      	ldrb	r4, [r2, #2]
	last = last + 1;
    d166:	1c73      	adds	r3, r6, #1
    d168:	b2db      	uxtb	r3, r3
		last = 0U;
    d16a:	429d      	cmp	r5, r3
    d16c:	bf08      	it	eq
    d16e:	2300      	moveq	r3, #0
	if (last == first) {
    d170:	429c      	cmp	r4, r3
    d172:	d10f      	bne.n	d194 <ll_tx_ack_put+0x38>
	LL_ASSERT(tx);
    d174:	4a0d      	ldr	r2, [pc, #52]	; (d1ac <ll_tx_ack_put+0x50>)
    d176:	490e      	ldr	r1, [pc, #56]	; (d1b0 <ll_tx_ack_put+0x54>)
    d178:	480e      	ldr	r0, [pc, #56]	; (d1b4 <ll_tx_ack_put+0x58>)
    d17a:	f240 634e 	movw	r3, #1614	; 0x64e
    d17e:	f009 fa3c 	bl	165fa <printk>
    d182:	4040      	eors	r0, r0
    d184:	f380 8811 	msr	BASEPRI, r0
    d188:	f04f 0003 	mov.w	r0, #3
    d18c:	df02      	svc	2
	tx->handle = handle;
    d18e:	2300      	movs	r3, #0
    d190:	801b      	strh	r3, [r3, #0]
    d192:	deff      	udf	#255	; 0xff
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    d194:	4615      	mov	r5, r2
    d196:	f815 4b04 	ldrb.w	r4, [r5], #4
    d19a:	fb14 f406 	smulbb	r4, r4, r6
    d19e:	192e      	adds	r6, r5, r4
    d1a0:	5328      	strh	r0, [r5, r4]
	tx->node = node_tx;
    d1a2:	6071      	str	r1, [r6, #4]
	*last = idx; /* Commit: Update write index */
    d1a4:	70d3      	strb	r3, [r2, #3]
}
    d1a6:	bd70      	pop	{r4, r5, r6, pc}
    d1a8:	2000060c 	.word	0x2000060c
    d1ac:	00020508 	.word	0x00020508
    d1b0:	000208e7 	.word	0x000208e7
    d1b4:	0002023c 	.word	0x0002023c

0000d1b8 <ll_radio_state_abort>:
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
    d1b8:	2200      	movs	r2, #0
{
    d1ba:	b508      	push	{r3, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
    d1bc:	4611      	mov	r1, r2
    d1be:	4b09      	ldr	r3, [pc, #36]	; (d1e4 <ll_radio_state_abort+0x2c>)
    d1c0:	2001      	movs	r0, #1
    d1c2:	f7fd fec7 	bl	af54 <mayfly_enqueue>
	LL_ASSERT(!ret);
    d1c6:	b160      	cbz	r0, d1e2 <ll_radio_state_abort+0x2a>
    d1c8:	4a07      	ldr	r2, [pc, #28]	; (d1e8 <ll_radio_state_abort+0x30>)
    d1ca:	4908      	ldr	r1, [pc, #32]	; (d1ec <ll_radio_state_abort+0x34>)
    d1cc:	4808      	ldr	r0, [pc, #32]	; (d1f0 <ll_radio_state_abort+0x38>)
    d1ce:	f240 6366 	movw	r3, #1638	; 0x666
    d1d2:	f009 fa12 	bl	165fa <printk>
    d1d6:	4040      	eors	r0, r0
    d1d8:	f380 8811 	msr	BASEPRI, r0
    d1dc:	f04f 0003 	mov.w	r0, #3
    d1e0:	df02      	svc	2
}
    d1e2:	bd08      	pop	{r3, pc}
    d1e4:	20000680 	.word	0x20000680
    d1e8:	00020508 	.word	0x00020508
    d1ec:	00020608 	.word	0x00020608
    d1f0:	0002023c 	.word	0x0002023c

0000d1f4 <ull_ticker_status_take>:
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    d1f4:	f030 0302 	bics.w	r3, r0, #2
{
    d1f8:	b510      	push	{r4, lr}
    d1fa:	460c      	mov	r4, r1
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    d1fc:	d00f      	beq.n	d21e <ull_ticker_status_take+0x2a>
    d1fe:	680b      	ldr	r3, [r1, #0]
    d200:	2b02      	cmp	r3, #2
    d202:	d10c      	bne.n	d21e <ull_ticker_status_take+0x2a>
    d204:	4a0a      	ldr	r2, [pc, #40]	; (d230 <ull_ticker_status_take+0x3c>)
    d206:	490b      	ldr	r1, [pc, #44]	; (d234 <ull_ticker_status_take+0x40>)
    d208:	480b      	ldr	r0, [pc, #44]	; (d238 <ull_ticker_status_take+0x44>)
    d20a:	f240 6382 	movw	r3, #1666	; 0x682
    d20e:	f009 f9f4 	bl	165fa <printk>
    d212:	4040      	eors	r0, r0
    d214:	f380 8811 	msr	BASEPRI, r0
    d218:	f04f 0003 	mov.w	r0, #3
    d21c:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    d21e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    d222:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d226:	4805      	ldr	r0, [pc, #20]	; (d23c <ull_ticker_status_take+0x48>)
    d228:	f008 fa6c 	bl	15704 <z_impl_k_sem_take>
	return *ret_cb;
    d22c:	6820      	ldr	r0, [r4, #0]
}
    d22e:	bd10      	pop	{r4, pc}
    d230:	00020508 	.word	0x00020508
    d234:	0002060d 	.word	0x0002060d
    d238:	0002023c 	.word	0x0002023c
    d23c:	20001ee8 	.word	0x20001ee8

0000d240 <ull_disable_mark>:
	if (!*m) {
    d240:	4b02      	ldr	r3, [pc, #8]	; (d24c <ull_disable_mark+0xc>)
    d242:	681a      	ldr	r2, [r3, #0]
    d244:	b902      	cbnz	r2, d248 <ull_disable_mark+0x8>
		*m = param;
    d246:	6018      	str	r0, [r3, #0]
}
    d248:	6818      	ldr	r0, [r3, #0]
    d24a:	4770      	bx	lr
    d24c:	20001c68 	.word	0x20001c68

0000d250 <ull_disable_unmark>:
	if (*m && *m == param) {
    d250:	4a05      	ldr	r2, [pc, #20]	; (d268 <ull_disable_unmark+0x18>)
{
    d252:	4603      	mov	r3, r0
	if (*m && *m == param) {
    d254:	6810      	ldr	r0, [r2, #0]
    d256:	b130      	cbz	r0, d266 <ull_disable_unmark+0x16>
    d258:	4283      	cmp	r3, r0
    d25a:	f04f 0300 	mov.w	r3, #0
    d25e:	d101      	bne.n	d264 <ull_disable_unmark+0x14>
		*m = NULL;
    d260:	6013      	str	r3, [r2, #0]
		return param;
    d262:	4770      	bx	lr
	return NULL;
    d264:	4618      	mov	r0, r3
}
    d266:	4770      	bx	lr
    d268:	20001c68 	.word	0x20001c68

0000d26c <ull_disable_mark_get>:
}
    d26c:	4b01      	ldr	r3, [pc, #4]	; (d274 <ull_disable_mark_get+0x8>)
    d26e:	6818      	ldr	r0, [r3, #0]
    d270:	4770      	bx	lr
    d272:	bf00      	nop
    d274:	20001c68 	.word	0x20001c68

0000d278 <ull_update_mark>:
	if (!*m) {
    d278:	4b02      	ldr	r3, [pc, #8]	; (d284 <ull_update_mark+0xc>)
    d27a:	681a      	ldr	r2, [r3, #0]
    d27c:	b902      	cbnz	r2, d280 <ull_update_mark+0x8>
		*m = param;
    d27e:	6018      	str	r0, [r3, #0]
}
    d280:	6818      	ldr	r0, [r3, #0]
    d282:	4770      	bx	lr
    d284:	20001c6c 	.word	0x20001c6c

0000d288 <ull_update_unmark>:
	if (*m && *m == param) {
    d288:	4a05      	ldr	r2, [pc, #20]	; (d2a0 <ull_update_unmark+0x18>)
{
    d28a:	4603      	mov	r3, r0
	if (*m && *m == param) {
    d28c:	6810      	ldr	r0, [r2, #0]
    d28e:	b130      	cbz	r0, d29e <ull_update_unmark+0x16>
    d290:	4283      	cmp	r3, r0
    d292:	f04f 0300 	mov.w	r3, #0
    d296:	d101      	bne.n	d29c <ull_update_unmark+0x14>
		*m = NULL;
    d298:	6013      	str	r3, [r2, #0]
		return param;
    d29a:	4770      	bx	lr
	return NULL;
    d29c:	4618      	mov	r0, r3
}
    d29e:	4770      	bx	lr
    d2a0:	20001c6c 	.word	0x20001c6c

0000d2a4 <ull_update_mark_get>:
}
    d2a4:	4b01      	ldr	r3, [pc, #4]	; (d2ac <ull_update_mark_get+0x8>)
    d2a6:	6818      	ldr	r0, [r3, #0]
    d2a8:	4770      	bx	lr
    d2aa:	bf00      	nop
    d2ac:	20001c6c 	.word	0x20001c6c

0000d2b0 <ull_disable>:
{
    d2b0:	b530      	push	{r4, r5, lr}
	hdr = HDR_LLL2ULL(lll);
    d2b2:	6805      	ldr	r5, [r0, #0]
	return hdr->ref;
    d2b4:	782b      	ldrb	r3, [r5, #0]
{
    d2b6:	b087      	sub	sp, #28
    d2b8:	4604      	mov	r4, r0
	if (!ull_ref_get(hdr)) {
    d2ba:	b91b      	cbnz	r3, d2c4 <ull_disable+0x14>
		return -EALREADY;
    d2bc:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
    d2c0:	b007      	add	sp, #28
    d2c2:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_sem_init(sem, initial_count, limit);
    d2c4:	2201      	movs	r2, #1
    d2c6:	2100      	movs	r1, #0
    d2c8:	4668      	mov	r0, sp
    d2ca:	f011 f97c 	bl	1e5c6 <z_impl_k_sem_init>
	hdr->disabled_cb = disabled_cb;
    d2ce:	4b12      	ldr	r3, [pc, #72]	; (d318 <ull_disable+0x68>)
    d2d0:	616b      	str	r3, [r5, #20]
    d2d2:	782b      	ldrb	r3, [r5, #0]
	hdr->disabled_param = &sem;
    d2d4:	f8c5 d018 	str.w	sp, [r5, #24]
	if (!ull_ref_get(hdr)) {
    d2d8:	2b00      	cmp	r3, #0
    d2da:	d0ef      	beq.n	d2bc <ull_disable+0xc>
	mfy.param = lll;
    d2dc:	4b0f      	ldr	r3, [pc, #60]	; (d31c <ull_disable+0x6c>)
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
    d2de:	2200      	movs	r2, #0
    d2e0:	4611      	mov	r1, r2
    d2e2:	2003      	movs	r0, #3
	mfy.param = lll;
    d2e4:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
    d2e6:	f7fd fe35 	bl	af54 <mayfly_enqueue>
	LL_ASSERT(!ret);
    d2ea:	b160      	cbz	r0, d306 <ull_disable+0x56>
    d2ec:	4a0c      	ldr	r2, [pc, #48]	; (d320 <ull_disable+0x70>)
    d2ee:	490d      	ldr	r1, [pc, #52]	; (d324 <ull_disable+0x74>)
    d2f0:	480d      	ldr	r0, [pc, #52]	; (d328 <ull_disable+0x78>)
    d2f2:	f240 63ff 	movw	r3, #1791	; 0x6ff
    d2f6:	f009 f980 	bl	165fa <printk>
    d2fa:	4040      	eors	r0, r0
    d2fc:	f380 8811 	msr	BASEPRI, r0
    d300:	f04f 0003 	mov.w	r0, #3
    d304:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    d306:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    d30a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d30e:	4668      	mov	r0, sp
    d310:	f008 f9f8 	bl	15704 <z_impl_k_sem_take>
	return k_sem_take(&sem, K_FOREVER);
    d314:	e7d4      	b.n	d2c0 <ull_disable+0x10>
    d316:	bf00      	nop
    d318:	0001c1e1 	.word	0x0001c1e1
    d31c:	20000670 	.word	0x20000670
    d320:	00020508 	.word	0x00020508
    d324:	00020608 	.word	0x00020608
    d328:	0002023c 	.word	0x0002023c

0000d32c <ull_ticker_stop_with_mark>:
{
    d32c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d32e:	4606      	mov	r6, r0
    d330:	b085      	sub	sp, #20
	mark = ull_disable_mark(param);
    d332:	4608      	mov	r0, r1
{
    d334:	4614      	mov	r4, r2
	mark = ull_disable_mark(param);
    d336:	f7ff ff83 	bl	d240 <ull_disable_mark>
	if (mark != param) {
    d33a:	4281      	cmp	r1, r0
{
    d33c:	460d      	mov	r5, r1
	if (mark != param) {
    d33e:	d004      	beq.n	d34a <ull_ticker_stop_with_mark+0x1e>
		return -ENOLCK;
    d340:	f06f 042d 	mvn.w	r4, #45	; 0x2d
}
    d344:	4620      	mov	r0, r4
    d346:	b005      	add	sp, #20
    d348:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret_cb = TICKER_STATUS_BUSY;
    d34a:	2302      	movs	r3, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    d34c:	af03      	add	r7, sp, #12
	ret_cb = TICKER_STATUS_BUSY;
    d34e:	9303      	str	r3, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    d350:	2103      	movs	r1, #3
    d352:	4b11      	ldr	r3, [pc, #68]	; (d398 <ull_ticker_stop_with_mark+0x6c>)
    d354:	9700      	str	r7, [sp, #0]
    d356:	4632      	mov	r2, r6
    d358:	2000      	movs	r0, #0
    d35a:	f7fe fbbf 	bl	badc <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
    d35e:	4639      	mov	r1, r7
    d360:	f7ff ff48 	bl	d1f4 <ull_ticker_status_take>
	if (ret) {
    d364:	b138      	cbz	r0, d376 <ull_ticker_stop_with_mark+0x4a>
		mark = ull_disable_unmark(param);
    d366:	4628      	mov	r0, r5
    d368:	f7ff ff72 	bl	d250 <ull_disable_unmark>
		if (mark != param) {
    d36c:	4285      	cmp	r5, r0
    d36e:	d1e7      	bne.n	d340 <ull_ticker_stop_with_mark+0x14>
		return -EALREADY;
    d370:	f06f 0477 	mvn.w	r4, #119	; 0x77
    d374:	e7e6      	b.n	d344 <ull_ticker_stop_with_mark+0x18>
	err = ull_disable(lll_disable);
    d376:	4620      	mov	r0, r4
    d378:	f7ff ff9a 	bl	d2b0 <ull_disable>
    d37c:	4604      	mov	r4, r0
	mark = ull_disable_unmark(param);
    d37e:	4628      	mov	r0, r5
    d380:	f7ff ff66 	bl	d250 <ull_disable_unmark>
	if (mark != param) {
    d384:	4285      	cmp	r5, r0
    d386:	d1db      	bne.n	d340 <ull_ticker_stop_with_mark+0x14>
	if (err && (err != -EALREADY)) {
    d388:	2c00      	cmp	r4, #0
    d38a:	d0db      	beq.n	d344 <ull_ticker_stop_with_mark+0x18>
	return 0;
    d38c:	f114 0f78 	cmn.w	r4, #120	; 0x78
    d390:	bf08      	it	eq
    d392:	2400      	moveq	r4, #0
    d394:	e7d6      	b.n	d344 <ull_ticker_stop_with_mark+0x18>
    d396:	bf00      	nop
    d398:	0000cc49 	.word	0x0000cc49

0000d39c <ull_pdu_rx_alloc_peek>:
{
    d39c:	b510      	push	{r4, lr}
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
    d39e:	4a0a      	ldr	r2, [pc, #40]	; (d3c8 <ull_pdu_rx_alloc_peek+0x2c>)
    d3a0:	7891      	ldrb	r1, [r2, #2]
    d3a2:	78d4      	ldrb	r4, [r2, #3]
    d3a4:	7853      	ldrb	r3, [r2, #1]
	if (last >= first) {
    d3a6:	42a1      	cmp	r1, r4
		return count - first + last;
    d3a8:	bf8a      	itet	hi
    d3aa:	191b      	addhi	r3, r3, r4
		return last - first;
    d3ac:	1a63      	subls	r3, r4, r1
		return count - first + last;
    d3ae:	1a5b      	subhi	r3, r3, r1
    d3b0:	b2db      	uxtb	r3, r3
    d3b2:	4298      	cmp	r0, r3
    d3b4:	d806      	bhi.n	d3c4 <ull_pdu_rx_alloc_peek+0x28>
	if (first == last) {
    d3b6:	42a1      	cmp	r1, r4
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
    d3b8:	7813      	ldrb	r3, [r2, #0]
    d3ba:	d003      	beq.n	d3c4 <ull_pdu_rx_alloc_peek+0x28>
	return *((void **)(fifo + first * size));
    d3bc:	fb01 2203 	mla	r2, r1, r3, r2
    d3c0:	6850      	ldr	r0, [r2, #4]
}
    d3c2:	bd10      	pop	{r4, pc}
		return NULL;
    d3c4:	2000      	movs	r0, #0
    d3c6:	e7fc      	b.n	d3c2 <ull_pdu_rx_alloc_peek+0x26>
    d3c8:	200004f0 	.word	0x200004f0

0000d3cc <ull_pdu_rx_alloc>:
{
    d3cc:	b510      	push	{r4, lr}
	return MFIFO_DEQUEUE(pdu_rx_free);
    d3ce:	4a09      	ldr	r2, [pc, #36]	; (d3f4 <ull_pdu_rx_alloc+0x28>)
	uint8_t _first = *first; /* Copy read-index */
    d3d0:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
    d3d2:	78d0      	ldrb	r0, [r2, #3]
    d3d4:	7811      	ldrb	r1, [r2, #0]
    d3d6:	7854      	ldrb	r4, [r2, #1]
    d3d8:	4298      	cmp	r0, r3
    d3da:	d009      	beq.n	d3f0 <ull_pdu_rx_alloc+0x24>
	mem = *((void **)(fifo + _first * size));
    d3dc:	fb03 2101 	mla	r1, r3, r1, r2
	_first += 1U;
    d3e0:	3301      	adds	r3, #1
    d3e2:	b2db      	uxtb	r3, r3
		_first = 0U;
    d3e4:	429c      	cmp	r4, r3
    d3e6:	bf08      	it	eq
    d3e8:	2300      	moveq	r3, #0
	mem = *((void **)(fifo + _first * size));
    d3ea:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
    d3ec:	7093      	strb	r3, [r2, #2]
}
    d3ee:	bd10      	pop	{r4, pc}
		return NULL;
    d3f0:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(pdu_rx_free);
    d3f2:	e7fc      	b.n	d3ee <ull_pdu_rx_alloc+0x22>
    d3f4:	200004f0 	.word	0x200004f0

0000d3f8 <ull_rx_put>:
{
    d3f8:	b538      	push	{r3, r4, r5, lr}
    d3fa:	460c      	mov	r4, r1
    d3fc:	4605      	mov	r5, r0
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
    d3fe:	f002 f861 	bl	f4c4 <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
    d402:	4621      	mov	r1, r4
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
    d404:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
    d406:	4a03      	ldr	r2, [pc, #12]	; (d414 <ull_rx_put+0x1c>)
    d408:	4628      	mov	r0, r5
}
    d40a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memq_enqueue(link, rx, &memq_ull_rx.tail);
    d40e:	f00e bbbe 	b.w	1bb8e <memq_enqueue>
    d412:	bf00      	nop
    d414:	20001ee0 	.word	0x20001ee0

0000d418 <ull_rx_sched>:
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
    d418:	2201      	movs	r2, #1
    d41a:	4b02      	ldr	r3, [pc, #8]	; (d424 <ull_rx_sched+0xc>)
    d41c:	4611      	mov	r1, r2
    d41e:	2000      	movs	r0, #0
    d420:	f7fd bd98 	b.w	af54 <mayfly_enqueue>
    d424:	20000660 	.word	0x20000660

0000d428 <ull_rx_put_done>:
	memq_enqueue(link, done, &memq_ull_done.tail);
    d428:	4a01      	ldr	r2, [pc, #4]	; (d430 <ull_rx_put_done+0x8>)
    d42a:	f00e bbb0 	b.w	1bb8e <memq_enqueue>
    d42e:	bf00      	nop
    d430:	20001ed8 	.word	0x20001ed8

0000d434 <ull_rx_sched_done>:
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
    d434:	2201      	movs	r2, #1
    d436:	4b02      	ldr	r3, [pc, #8]	; (d440 <ull_rx_sched_done+0xc>)
    d438:	4611      	mov	r1, r2
    d43a:	2000      	movs	r0, #0
    d43c:	f7fd bd8a 	b.w	af54 <mayfly_enqueue>
    d440:	20000650 	.word	0x20000650

0000d444 <ull_prepare_enqueue>:
{
    d444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
    d448:	4e14      	ldr	r6, [pc, #80]	; (d49c <ull_prepare_enqueue+0x58>)
{
    d44a:	4699      	mov	r9, r3
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
    d44c:	78f3      	ldrb	r3, [r6, #3]
	if (last == count) {
    d44e:	7874      	ldrb	r4, [r6, #1]
	last = last + 1;
    d450:	1c5d      	adds	r5, r3, #1
{
    d452:	4680      	mov	r8, r0
    d454:	b2ed      	uxtb	r5, r5
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
    d456:	78b0      	ldrb	r0, [r6, #2]
		last = 0U;
    d458:	42ac      	cmp	r4, r5
    d45a:	bf08      	it	eq
    d45c:	2500      	moveq	r5, #0
	if (last == first) {
    d45e:	42a8      	cmp	r0, r5
{
    d460:	460f      	mov	r7, r1
    d462:	4611      	mov	r1, r2
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
    d464:	7832      	ldrb	r2, [r6, #0]
    d466:	d016      	beq.n	d496 <ull_prepare_enqueue+0x52>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    d468:	1d34      	adds	r4, r6, #4
    d46a:	fb03 4402 	mla	r4, r3, r2, r4
	memcpy(&e->prepare_param, prepare_param, sizeof(e->prepare_param));
    d46e:	4620      	mov	r0, r4
    d470:	2210      	movs	r2, #16
    d472:	f009 feef 	bl	17254 <memcpy>
	e->is_resume = is_resume;
    d476:	7f23      	ldrb	r3, [r4, #28]
    d478:	f89d 2020 	ldrb.w	r2, [sp, #32]
	e->abort_cb = abort_cb;
    d47c:	61a7      	str	r7, [r4, #24]
	e->is_resume = is_resume;
    d47e:	f002 0201 	and.w	r2, r2, #1
    d482:	f023 0303 	bic.w	r3, r3, #3
    d486:	4313      	orrs	r3, r2
	e->is_abort_cb = is_abort_cb;
    d488:	e9c4 9804 	strd	r9, r8, [r4, #16]
	e->is_resume = is_resume;
    d48c:	7723      	strb	r3, [r4, #28]
	*last = idx; /* Commit: Update write index */
    d48e:	70f5      	strb	r5, [r6, #3]
}
    d490:	4620      	mov	r0, r4
    d492:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return NULL;
    d496:	2400      	movs	r4, #0
    d498:	e7fa      	b.n	d490 <ull_prepare_enqueue+0x4c>
    d49a:	bf00      	nop
    d49c:	20000508 	.word	0x20000508

0000d4a0 <ull_prepare_dequeue_get>:
	return MFIFO_DEQUEUE_GET(prep);
    d4a0:	4b05      	ldr	r3, [pc, #20]	; (d4b8 <ull_prepare_dequeue_get+0x18>)
    d4a2:	7898      	ldrb	r0, [r3, #2]
	if (first == last) {
    d4a4:	78d9      	ldrb	r1, [r3, #3]
    d4a6:	781a      	ldrb	r2, [r3, #0]
    d4a8:	4281      	cmp	r1, r0
	return (void *)(fifo + first * size);
    d4aa:	bf1a      	itte	ne
    d4ac:	3304      	addne	r3, #4
    d4ae:	fb00 3002 	mlane	r0, r0, r2, r3
		return NULL;
    d4b2:	2000      	moveq	r0, #0
}
    d4b4:	4770      	bx	lr
    d4b6:	bf00      	nop
    d4b8:	20000508 	.word	0x20000508

0000d4bc <ull_prepare_dequeue_iter>:
{
    d4bc:	b530      	push	{r4, r5, lr}
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
    d4be:	4a0c      	ldr	r2, [pc, #48]	; (d4f0 <ull_prepare_dequeue_iter+0x34>)
{
    d4c0:	4603      	mov	r3, r0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
    d4c2:	7854      	ldrb	r4, [r2, #1]
	if (*idx >= count) {
    d4c4:	7819      	ldrb	r1, [r3, #0]
    d4c6:	78d0      	ldrb	r0, [r2, #3]
    d4c8:	7815      	ldrb	r5, [r2, #0]
    d4ca:	42a1      	cmp	r1, r4
    d4cc:	bf24      	itt	cs
    d4ce:	7892      	ldrbcs	r2, [r2, #2]
		*idx = first;
    d4d0:	701a      	strbcs	r2, [r3, #0]
	if (*idx == last) {
    d4d2:	7819      	ldrb	r1, [r3, #0]
    d4d4:	4288      	cmp	r0, r1
    d4d6:	d009      	beq.n	d4ec <ull_prepare_dequeue_iter+0x30>
	i = *idx + 1;
    d4d8:	1c4a      	adds	r2, r1, #1
	p = (void *)(fifo + (*idx) * size);
    d4da:	4806      	ldr	r0, [pc, #24]	; (d4f4 <ull_prepare_dequeue_iter+0x38>)
	i = *idx + 1;
    d4dc:	b2d2      	uxtb	r2, r2
		i = 0U;
    d4de:	4294      	cmp	r4, r2
    d4e0:	bf08      	it	eq
    d4e2:	2200      	moveq	r2, #0
	p = (void *)(fifo + (*idx) * size);
    d4e4:	fb01 0005 	mla	r0, r1, r5, r0
	*idx = i;
    d4e8:	701a      	strb	r2, [r3, #0]
}
    d4ea:	bd30      	pop	{r4, r5, pc}
		return NULL;
    d4ec:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
    d4ee:	e7fc      	b.n	d4ea <ull_prepare_dequeue_iter+0x2e>
    d4f0:	20000508 	.word	0x20000508
    d4f4:	2000050c 	.word	0x2000050c

0000d4f8 <ull_prepare_dequeue>:
{
    d4f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d4fc:	4605      	mov	r5, r0
	next = ull_prepare_dequeue_get();
    d4fe:	f7ff ffcf 	bl	d4a0 <ull_prepare_dequeue_get>
			mfy.param = next;
    d502:	4f1c      	ldr	r7, [pc, #112]	; (d574 <ull_prepare_dequeue+0x7c>)
		MFIFO_DEQUEUE(prep);
    d504:	4c1c      	ldr	r4, [pc, #112]	; (d578 <ull_prepare_dequeue+0x80>)
	while (next) {
    d506:	2800      	cmp	r0, #0
    d508:	d031      	beq.n	d56e <ull_prepare_dequeue+0x76>
		uint8_t is_aborted = next->is_aborted;
    d50a:	7f03      	ldrb	r3, [r0, #28]
		if (!is_aborted) {
    d50c:	079a      	lsls	r2, r3, #30
		uint8_t is_aborted = next->is_aborted;
    d50e:	f3c3 0640 	ubfx	r6, r3, #1, #1
		uint8_t is_resume = next->is_resume;
    d512:	f003 0801 	and.w	r8, r3, #1
		if (!is_aborted) {
    d516:	d414      	bmi.n	d542 <ull_prepare_dequeue+0x4a>
			mfy.param = next;
    d518:	60b8      	str	r0, [r7, #8]
			ret = mayfly_enqueue(caller_id, TICKER_USER_ID_LLL, 0,
    d51a:	4b16      	ldr	r3, [pc, #88]	; (d574 <ull_prepare_dequeue+0x7c>)
    d51c:	4632      	mov	r2, r6
    d51e:	4631      	mov	r1, r6
    d520:	4628      	mov	r0, r5
    d522:	f7fd fd17 	bl	af54 <mayfly_enqueue>
			LL_ASSERT(!ret);
    d526:	b160      	cbz	r0, d542 <ull_prepare_dequeue+0x4a>
    d528:	4a14      	ldr	r2, [pc, #80]	; (d57c <ull_prepare_dequeue+0x84>)
    d52a:	4915      	ldr	r1, [pc, #84]	; (d580 <ull_prepare_dequeue+0x88>)
    d52c:	4815      	ldr	r0, [pc, #84]	; (d584 <ull_prepare_dequeue+0x8c>)
    d52e:	f240 7376 	movw	r3, #1910	; 0x776
    d532:	f009 f862 	bl	165fa <printk>
    d536:	4040      	eors	r0, r0
    d538:	f380 8811 	msr	BASEPRI, r0
    d53c:	f04f 0003 	mov.w	r0, #3
    d540:	df02      	svc	2
	uint8_t _first = *first; /* Copy read-index */
    d542:	78a3      	ldrb	r3, [r4, #2]
	if (_first == last) {
    d544:	78e1      	ldrb	r1, [r4, #3]
		MFIFO_DEQUEUE(prep);
    d546:	7862      	ldrb	r2, [r4, #1]
    d548:	4299      	cmp	r1, r3
    d54a:	d005      	beq.n	d558 <ull_prepare_dequeue+0x60>
	_first += 1U;
    d54c:	3301      	adds	r3, #1
    d54e:	b2db      	uxtb	r3, r3
		_first = 0U;
    d550:	429a      	cmp	r2, r3
    d552:	bf08      	it	eq
    d554:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
    d556:	70a3      	strb	r3, [r4, #2]
		next = ull_prepare_dequeue_get();
    d558:	f7ff ffa2 	bl	d4a0 <ull_prepare_dequeue_get>
		if (!next || (!is_aborted && (!is_resume || next->is_resume))) {
    d55c:	b138      	cbz	r0, d56e <ull_prepare_dequeue+0x76>
    d55e:	2e00      	cmp	r6, #0
    d560:	d1d1      	bne.n	d506 <ull_prepare_dequeue+0xe>
    d562:	f1b8 0f00 	cmp.w	r8, #0
    d566:	d002      	beq.n	d56e <ull_prepare_dequeue+0x76>
    d568:	7f03      	ldrb	r3, [r0, #28]
    d56a:	07db      	lsls	r3, r3, #31
    d56c:	d5cb      	bpl.n	d506 <ull_prepare_dequeue+0xe>
}
    d56e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d572:	bf00      	nop
    d574:	20000630 	.word	0x20000630
    d578:	20000508 	.word	0x20000508
    d57c:	00020508 	.word	0x00020508
    d580:	00020608 	.word	0x00020608
    d584:	0002023c 	.word	0x0002023c

0000d588 <ull_event_done_extra_get>:
	evdone = MFIFO_DEQUEUE_PEEK(done);
    d588:	4b06      	ldr	r3, [pc, #24]	; (d5a4 <ull_event_done_extra_get+0x1c>)
    d58a:	789a      	ldrb	r2, [r3, #2]
	if (first == last) {
    d58c:	78d8      	ldrb	r0, [r3, #3]
    d58e:	7819      	ldrb	r1, [r3, #0]
    d590:	4290      	cmp	r0, r2
    d592:	d005      	beq.n	d5a0 <ull_event_done_extra_get+0x18>
	return *((void **)(fifo + first * size));
    d594:	fb02 3301 	mla	r3, r2, r1, r3
    d598:	6858      	ldr	r0, [r3, #4]
	if (!evdone) {
    d59a:	b110      	cbz	r0, d5a2 <ull_event_done_extra_get+0x1a>
	return &evdone->extra;
    d59c:	3020      	adds	r0, #32
    d59e:	4770      	bx	lr
		return NULL;
    d5a0:	2000      	movs	r0, #0
}
    d5a2:	4770      	bx	lr
    d5a4:	200004cc 	.word	0x200004cc

0000d5a8 <ull_event_done>:
{
    d5a8:	b538      	push	{r3, r4, r5, lr}
	evdone = MFIFO_DEQUEUE(done);
    d5aa:	4a10      	ldr	r2, [pc, #64]	; (d5ec <ull_event_done+0x44>)
	uint8_t _first = *first; /* Copy read-index */
    d5ac:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
    d5ae:	78d4      	ldrb	r4, [r2, #3]
    d5b0:	7855      	ldrb	r5, [r2, #1]
    d5b2:	429c      	cmp	r4, r3
{
    d5b4:	4601      	mov	r1, r0
	evdone = MFIFO_DEQUEUE(done);
    d5b6:	7810      	ldrb	r0, [r2, #0]
    d5b8:	d016      	beq.n	d5e8 <ull_event_done+0x40>
	mem = *((void **)(fifo + _first * size));
    d5ba:	fb03 2000 	mla	r0, r3, r0, r2
	_first += 1U;
    d5be:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
    d5c0:	6844      	ldr	r4, [r0, #4]
	_first += 1U;
    d5c2:	b2db      	uxtb	r3, r3
		_first = 0U;
    d5c4:	429d      	cmp	r5, r3
    d5c6:	bf08      	it	eq
    d5c8:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
    d5ca:	7093      	strb	r3, [r2, #2]
	if (!evdone) {
    d5cc:	b154      	cbz	r4, d5e4 <ull_event_done+0x3c>
	evdone->hdr.link = NULL;
    d5ce:	2300      	movs	r3, #0
	link = evdone->hdr.link;
    d5d0:	6820      	ldr	r0, [r4, #0]
	evdone->hdr.link = NULL;
    d5d2:	6023      	str	r3, [r4, #0]
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
    d5d4:	2302      	movs	r3, #2
    d5d6:	7123      	strb	r3, [r4, #4]
	evdone->param = param;
    d5d8:	61e1      	str	r1, [r4, #28]
	ull_rx_put_done(link, evdone);
    d5da:	4621      	mov	r1, r4
    d5dc:	f7ff ff24 	bl	d428 <ull_rx_put_done>
	ull_rx_sched_done();
    d5e0:	f7ff ff28 	bl	d434 <ull_rx_sched_done>
}
    d5e4:	4620      	mov	r0, r4
    d5e6:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
    d5e8:	2400      	movs	r4, #0
    d5ea:	e7fb      	b.n	d5e4 <ull_event_done+0x3c>
    d5ec:	200004cc 	.word	0x200004cc

0000d5f0 <init_reset>:
{
    d5f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	RXFIFO_INIT_ALLOC(done);
    d5f2:	4c3d      	ldr	r4, [pc, #244]	; (d6e8 <init_reset+0xf8>)
    d5f4:	4d3d      	ldr	r5, [pc, #244]	; (d6ec <init_reset+0xfc>)
    d5f6:	79a2      	ldrb	r2, [r4, #6]
    d5f8:	88a1      	ldrh	r1, [r4, #4]
    d5fa:	4e3d      	ldr	r6, [pc, #244]	; (d6f0 <init_reset+0x100>)
    d5fc:	2300      	movs	r3, #0
    d5fe:	f104 0008 	add.w	r0, r4, #8
    d602:	806b      	strh	r3, [r5, #2]
    d604:	4623      	mov	r3, r4
    d606:	f00e fa3c 	bl	1ba82 <mem_init>
    d60a:	79a1      	ldrb	r1, [r4, #6]
    d60c:	79e2      	ldrb	r2, [r4, #7]
    d60e:	4633      	mov	r3, r6
    d610:	440a      	add	r2, r1
    d612:	1d30      	adds	r0, r6, #4
    d614:	2108      	movs	r1, #8
    d616:	f00e fa34 	bl	1ba82 <mem_init>
    d61a:	462a      	mov	r2, r5
    d61c:	79a3      	ldrb	r3, [r4, #6]
    d61e:	f812 0b04 	ldrb.w	r0, [r2], #4
    d622:	7869      	ldrb	r1, [r5, #1]
    d624:	e9cd 2400 	strd	r2, r4, [sp]
    d628:	e9cd 6302 	strd	r6, r3, [sp, #8]
    d62c:	78aa      	ldrb	r2, [r5, #2]
    d62e:	1ceb      	adds	r3, r5, #3
    d630:	f00e fdfb 	bl	1c22a <ull_rxfifo_alloc>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
    d634:	4b2f      	ldr	r3, [pc, #188]	; (d6f4 <init_reset+0x104>)
    d636:	2207      	movs	r2, #7
    d638:	1d18      	adds	r0, r3, #4
    d63a:	2144      	movs	r1, #68	; 0x44
    d63c:	f00e fa21 	bl	1ba82 <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
    d640:	4b2d      	ldr	r3, [pc, #180]	; (d6f8 <init_reset+0x108>)
    d642:	2209      	movs	r2, #9
    d644:	1d18      	adds	r0, r3, #4
    d646:	2108      	movs	r1, #8
    d648:	f00e fa1b 	bl	1ba82 <mem_init>
	link = mem_acquire(&mem_link_rx.free);
    d64c:	482a      	ldr	r0, [pc, #168]	; (d6f8 <init_reset+0x108>)
    d64e:	f00e fa40 	bl	1bad2 <mem_acquire>
	LL_ASSERT(link);
    d652:	4604      	mov	r4, r0
    d654:	b960      	cbnz	r0, d670 <init_reset+0x80>
    d656:	4a29      	ldr	r2, [pc, #164]	; (d6fc <init_reset+0x10c>)
    d658:	4929      	ldr	r1, [pc, #164]	; (d700 <init_reset+0x110>)
    d65a:	482a      	ldr	r0, [pc, #168]	; (d704 <init_reset+0x114>)
    d65c:	f640 0302 	movw	r3, #2050	; 0x802
    d660:	f008 ffcb 	bl	165fa <printk>
    d664:	4040      	eors	r0, r0
    d666:	f380 8811 	msr	BASEPRI, r0
    d66a:	f04f 0003 	mov.w	r0, #3
    d66e:	df02      	svc	2
	MEMQ_INIT(ull_rx, link);
    d670:	4a25      	ldr	r2, [pc, #148]	; (d708 <init_reset+0x118>)
    d672:	4620      	mov	r0, r4
    d674:	1f11      	subs	r1, r2, #4
    d676:	f00e fa7c 	bl	1bb72 <memq_init>
	link = mem_acquire(&mem_link_done.free);
    d67a:	481d      	ldr	r0, [pc, #116]	; (d6f0 <init_reset+0x100>)
    d67c:	f00e fa29 	bl	1bad2 <mem_acquire>
	LL_ASSERT(link);
    d680:	4604      	mov	r4, r0
    d682:	b960      	cbnz	r0, d69e <init_reset+0xae>
    d684:	4a1d      	ldr	r2, [pc, #116]	; (d6fc <init_reset+0x10c>)
    d686:	491e      	ldr	r1, [pc, #120]	; (d700 <init_reset+0x110>)
    d688:	481e      	ldr	r0, [pc, #120]	; (d704 <init_reset+0x114>)
    d68a:	f640 030a 	movw	r3, #2058	; 0x80a
    d68e:	f008 ffb4 	bl	165fa <printk>
    d692:	4040      	eors	r0, r0
    d694:	f380 8811 	msr	BASEPRI, r0
    d698:	f04f 0003 	mov.w	r0, #3
    d69c:	df02      	svc	2
	MEMQ_INIT(ull_done, link);
    d69e:	4a1b      	ldr	r2, [pc, #108]	; (d70c <init_reset+0x11c>)
    d6a0:	4620      	mov	r0, r4
    d6a2:	1f11      	subs	r1, r2, #4
    d6a4:	f00e fa65 	bl	1bb72 <memq_init>
	link = mem_acquire(&mem_link_rx.free);
    d6a8:	4813      	ldr	r0, [pc, #76]	; (d6f8 <init_reset+0x108>)
    d6aa:	f00e fa12 	bl	1bad2 <mem_acquire>
	LL_ASSERT(link);
    d6ae:	4604      	mov	r4, r0
    d6b0:	b960      	cbnz	r0, d6cc <init_reset+0xdc>
    d6b2:	4a12      	ldr	r2, [pc, #72]	; (d6fc <init_reset+0x10c>)
    d6b4:	4912      	ldr	r1, [pc, #72]	; (d700 <init_reset+0x110>)
    d6b6:	4813      	ldr	r0, [pc, #76]	; (d704 <init_reset+0x114>)
    d6b8:	f640 0312 	movw	r3, #2066	; 0x812
    d6bc:	f008 ff9d 	bl	165fa <printk>
    d6c0:	4040      	eors	r0, r0
    d6c2:	f380 8811 	msr	BASEPRI, r0
    d6c6:	f04f 0003 	mov.w	r0, #3
    d6ca:	df02      	svc	2
	MEMQ_INIT(ll_rx, link);
    d6cc:	4a10      	ldr	r2, [pc, #64]	; (d710 <init_reset+0x120>)
    d6ce:	4620      	mov	r0, r4
    d6d0:	1f11      	subs	r1, r2, #4
    d6d2:	f00e fa4e 	bl	1bb72 <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
    d6d6:	4b0f      	ldr	r3, [pc, #60]	; (d714 <init_reset+0x124>)
    d6d8:	2205      	movs	r2, #5
	rx_alloc(UINT8_MAX);
    d6da:	20ff      	movs	r0, #255	; 0xff
	mem_link_rx.quota_pdu = RX_CNT;
    d6dc:	701a      	strb	r2, [r3, #0]
	rx_alloc(UINT8_MAX);
    d6de:	f7ff f9e3 	bl	caa8 <rx_alloc>
}
    d6e2:	2000      	movs	r0, #0
    d6e4:	b004      	add	sp, #16
    d6e6:	bd70      	pop	{r4, r5, r6, pc}
    d6e8:	200003f4 	.word	0x200003f4
    d6ec:	200004cc 	.word	0x200004cc
    d6f0:	20001c70 	.word	0x20001c70
    d6f4:	20001cec 	.word	0x20001cec
    d6f8:	20001ca0 	.word	0x20001ca0
    d6fc:	00020508 	.word	0x00020508
    d700:	0002091f 	.word	0x0002091f
    d704:	0002023c 	.word	0x0002023c
    d708:	20001ee0 	.word	0x20001ee0
    d70c:	20001ed8 	.word	0x20001ed8
    d710:	20001ed0 	.word	0x20001ed0
    d714:	20001c9c 	.word	0x20001c9c

0000d718 <ll_init>:
{
    d718:	b510      	push	{r4, lr}
	sem_recv = sem_rx;
    d71a:	4b2c      	ldr	r3, [pc, #176]	; (d7cc <ll_init+0xb4>)
{
    d71c:	b086      	sub	sp, #24
	sem_recv = sem_rx;
    d71e:	6018      	str	r0, [r3, #0]
	cntr_init();
    d720:	f004 f816 	bl	11750 <cntr_init>
	mayfly_init();
    d724:	f7fd fbbe 	bl	aea4 <mayfly_init>
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
    d728:	4a29      	ldr	r2, [pc, #164]	; (d7d0 <ll_init+0xb8>)
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
    d72a:	2105      	movs	r1, #5
    d72c:	7211      	strb	r1, [r2, #8]
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
    d72e:	2102      	movs	r1, #2
    d730:	7411      	strb	r1, [r2, #16]
	ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_THREAD_OPS;
    d732:	7611      	strb	r1, [r2, #24]
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
    d734:	2304      	movs	r3, #4
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    d736:	4927      	ldr	r1, [pc, #156]	; (d7d4 <ll_init+0xbc>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
    d738:	7013      	strb	r3, [r2, #0]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    d73a:	9105      	str	r1, [sp, #20]
    d73c:	4926      	ldr	r1, [pc, #152]	; (d7d8 <ll_init+0xc0>)
    d73e:	9104      	str	r1, [sp, #16]
    d740:	4926      	ldr	r1, [pc, #152]	; (d7dc <ll_init+0xc4>)
    d742:	9103      	str	r1, [sp, #12]
    d744:	4926      	ldr	r1, [pc, #152]	; (d7e0 <ll_init+0xc8>)
    d746:	9102      	str	r1, [sp, #8]
    d748:	210d      	movs	r1, #13
    d74a:	e9cd 2100 	strd	r2, r1, [sp]
    d74e:	2000      	movs	r0, #0
    d750:	4a24      	ldr	r2, [pc, #144]	; (d7e4 <ll_init+0xcc>)
    d752:	2108      	movs	r1, #8
    d754:	f7fe f8ce 	bl	b8f4 <ticker_init>
	LL_ASSERT(!err);
    d758:	b160      	cbz	r0, d774 <ll_init+0x5c>
    d75a:	4a23      	ldr	r2, [pc, #140]	; (d7e8 <ll_init+0xd0>)
    d75c:	4923      	ldr	r1, [pc, #140]	; (d7ec <ll_init+0xd4>)
    d75e:	4824      	ldr	r0, [pc, #144]	; (d7f0 <ll_init+0xd8>)
    d760:	f240 230d 	movw	r3, #525	; 0x20d
    d764:	f008 ff49 	bl	165fa <printk>
    d768:	4040      	eors	r0, r0
    d76a:	f380 8811 	msr	BASEPRI, r0
    d76e:	f04f 0003 	mov.w	r0, #3
    d772:	df02      	svc	2
	return z_impl_k_sem_init(sem, initial_count, limit);
    d774:	2201      	movs	r2, #1
    d776:	2100      	movs	r1, #0
    d778:	481e      	ldr	r0, [pc, #120]	; (d7f4 <ll_init+0xdc>)
    d77a:	f010 ff24 	bl	1e5c6 <z_impl_k_sem_init>
	err = lll_init();
    d77e:	f002 fae9 	bl	fd54 <lll_init>
	if (err) {
    d782:	4604      	mov	r4, r0
    d784:	b9f0      	cbnz	r0, d7c4 <ll_init+0xac>
	err = init_reset();
    d786:	f7ff ff33 	bl	d5f0 <init_reset>
	if (err) {
    d78a:	4604      	mov	r4, r0
    d78c:	b9d0      	cbnz	r0, d7c4 <ll_init+0xac>
	err = lll_adv_init();
    d78e:	f002 fe37 	bl	10400 <lll_adv_init>
	if (err) {
    d792:	4604      	mov	r4, r0
    d794:	b9b0      	cbnz	r0, d7c4 <ll_init+0xac>
	err = ull_adv_init();
    d796:	f00e fdd3 	bl	1c340 <ull_adv_init>
	if (err) {
    d79a:	4604      	mov	r4, r0
    d79c:	b990      	cbnz	r0, d7c4 <ll_init+0xac>
	err = lll_scan_init();
    d79e:	f00f fa0f 	bl	1cbc0 <lll_scan_init>
	if (err) {
    d7a2:	4604      	mov	r4, r0
    d7a4:	b970      	cbnz	r0, d7c4 <ll_init+0xac>
	err = ull_scan_init();
    d7a6:	f00e fe8c 	bl	1c4c2 <ull_scan_init>
	if (err) {
    d7aa:	4604      	mov	r4, r0
    d7ac:	b950      	cbnz	r0, d7c4 <ll_init+0xac>
	err = lll_conn_init();
    d7ae:	f00f fa0b 	bl	1cbc8 <lll_conn_init>
	if (err) {
    d7b2:	4604      	mov	r4, r0
    d7b4:	b930      	cbnz	r0, d7c4 <ll_init+0xac>
	err = ull_conn_init();
    d7b6:	f00f f805 	bl	1c7c4 <ull_conn_init>
	if (err) {
    d7ba:	4604      	mov	r4, r0
    d7bc:	b910      	cbnz	r0, d7c4 <ll_init+0xac>
		ull_filter_reset(true);
    d7be:	2001      	movs	r0, #1
    d7c0:	f002 f8b2 	bl	f928 <ull_filter_reset>
}
    d7c4:	4620      	mov	r0, r4
    d7c6:	b006      	add	sp, #24
    d7c8:	bd10      	pop	{r4, pc}
    d7ca:	bf00      	nop
    d7cc:	20001ee4 	.word	0x20001ee4
    d7d0:	20002324 	.word	0x20002324
    d7d4:	0001cda1 	.word	0x0001cda1
    d7d8:	00012049 	.word	0x00012049
    d7dc:	00011ff1 	.word	0x00011ff1
    d7e0:	20002080 	.word	0x20002080
    d7e4:	20001f00 	.word	0x20001f00
    d7e8:	00020508 	.word	0x00020508
    d7ec:	0002057d 	.word	0x0002057d
    d7f0:	0002023c 	.word	0x0002023c
    d7f4:	20001ee8 	.word	0x20001ee8

0000d7f8 <ll_reset>:
{
    d7f8:	b510      	push	{r4, lr}
    d7fa:	b086      	sub	sp, #24
	err = ull_adv_reset();
    d7fc:	f00e fda2 	bl	1c344 <ull_adv_reset>
	LL_ASSERT(!err);
    d800:	b160      	cbz	r0, d81c <ll_reset+0x24>
    d802:	4a3e      	ldr	r2, [pc, #248]	; (d8fc <ll_reset+0x104>)
    d804:	493e      	ldr	r1, [pc, #248]	; (d900 <ll_reset+0x108>)
    d806:	483f      	ldr	r0, [pc, #252]	; (d904 <ll_reset+0x10c>)
    d808:	f240 23ad 	movw	r3, #685	; 0x2ad
    d80c:	f008 fef5 	bl	165fa <printk>
    d810:	4040      	eors	r0, r0
    d812:	f380 8811 	msr	BASEPRI, r0
    d816:	f04f 0003 	mov.w	r0, #3
    d81a:	df02      	svc	2
	err = ull_scan_reset();
    d81c:	f00e fe67 	bl	1c4ee <ull_scan_reset>
	LL_ASSERT(!err);
    d820:	b160      	cbz	r0, d83c <ll_reset+0x44>
    d822:	4a36      	ldr	r2, [pc, #216]	; (d8fc <ll_reset+0x104>)
    d824:	4936      	ldr	r1, [pc, #216]	; (d900 <ll_reset+0x108>)
    d826:	4837      	ldr	r0, [pc, #220]	; (d904 <ll_reset+0x10c>)
    d828:	f240 23b3 	movw	r3, #691	; 0x2b3
    d82c:	f008 fee5 	bl	165fa <printk>
    d830:	4040      	eors	r0, r0
    d832:	f380 8811 	msr	BASEPRI, r0
    d836:	f04f 0003 	mov.w	r0, #3
    d83a:	df02      	svc	2
	err = ull_conn_reset();
    d83c:	f000 ffa2 	bl	e784 <ull_conn_reset>
	LL_ASSERT(!err);
    d840:	b160      	cbz	r0, d85c <ll_reset+0x64>
    d842:	4a2e      	ldr	r2, [pc, #184]	; (d8fc <ll_reset+0x104>)
    d844:	492e      	ldr	r1, [pc, #184]	; (d900 <ll_reset+0x108>)
    d846:	482f      	ldr	r0, [pc, #188]	; (d904 <ll_reset+0x10c>)
    d848:	f240 23de 	movw	r3, #734	; 0x2de
    d84c:	f008 fed5 	bl	165fa <printk>
    d850:	4040      	eors	r0, r0
    d852:	f380 8811 	msr	BASEPRI, r0
    d856:	f04f 0003 	mov.w	r0, #3
    d85a:	df02      	svc	2
	MFIFO_INIT(tx_ack);
    d85c:	4b2a      	ldr	r3, [pc, #168]	; (d908 <ll_reset+0x110>)
    d85e:	2400      	movs	r4, #0
    d860:	805c      	strh	r4, [r3, #2]
		ull_filter_reset(false);
    d862:	4620      	mov	r0, r4
    d864:	f002 f860 	bl	f928 <ull_filter_reset>
	MFIFO_INIT(prep);
    d868:	4b28      	ldr	r3, [pc, #160]	; (d90c <ll_reset+0x114>)
    d86a:	805c      	strh	r4, [r3, #2]
	MFIFO_INIT(pdu_rx_free);
    d86c:	4b28      	ldr	r3, [pc, #160]	; (d910 <ll_reset+0x118>)
    d86e:	805c      	strh	r4, [r3, #2]
	MFIFO_INIT(ll_pdu_rx_free);
    d870:	4b28      	ldr	r3, [pc, #160]	; (d914 <ll_reset+0x11c>)
    d872:	805c      	strh	r4, [r3, #2]
    d874:	2201      	movs	r2, #1
    d876:	4621      	mov	r1, r4
    d878:	4668      	mov	r0, sp
    d87a:	f010 fea4 	bl	1e5c6 <z_impl_k_sem_init>
		mfy.param = &sem;
    d87e:	4b26      	ldr	r3, [pc, #152]	; (d918 <ll_reset+0x120>)
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
    d880:	4622      	mov	r2, r4
    d882:	4621      	mov	r1, r4
    d884:	2003      	movs	r0, #3
		mfy.param = &sem;
    d886:	f8c3 d008 	str.w	sp, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
    d88a:	f7fd fb63 	bl	af54 <mayfly_enqueue>
		LL_ASSERT(!retval);
    d88e:	b160      	cbz	r0, d8aa <ll_reset+0xb2>
    d890:	4a1a      	ldr	r2, [pc, #104]	; (d8fc <ll_reset+0x104>)
    d892:	4922      	ldr	r1, [pc, #136]	; (d91c <ll_reset+0x124>)
    d894:	481b      	ldr	r0, [pc, #108]	; (d904 <ll_reset+0x10c>)
    d896:	f240 330d 	movw	r3, #781	; 0x30d
    d89a:	f008 feae 	bl	165fa <printk>
    d89e:	4040      	eors	r0, r0
    d8a0:	f380 8811 	msr	BASEPRI, r0
    d8a4:	f04f 0003 	mov.w	r0, #3
    d8a8:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    d8aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    d8ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d8b2:	4668      	mov	r0, sp
    d8b4:	f007 ff26 	bl	15704 <z_impl_k_sem_take>
	err = ull_adv_reset_finalize();
    d8b8:	f000 fb7a 	bl	dfb0 <ull_adv_reset_finalize>
	LL_ASSERT(!err);
    d8bc:	b160      	cbz	r0, d8d8 <ll_reset+0xe0>
    d8be:	4a0f      	ldr	r2, [pc, #60]	; (d8fc <ll_reset+0x104>)
    d8c0:	490f      	ldr	r1, [pc, #60]	; (d900 <ll_reset+0x108>)
    d8c2:	4810      	ldr	r0, [pc, #64]	; (d904 <ll_reset+0x10c>)
    d8c4:	f240 331a 	movw	r3, #794	; 0x31a
    d8c8:	f008 fe97 	bl	165fa <printk>
    d8cc:	4040      	eors	r0, r0
    d8ce:	f380 8811 	msr	BASEPRI, r0
    d8d2:	f04f 0003 	mov.w	r0, #3
    d8d6:	df02      	svc	2
	err = init_reset();
    d8d8:	f7ff fe8a 	bl	d5f0 <init_reset>
	LL_ASSERT(!err);
    d8dc:	b160      	cbz	r0, d8f8 <ll_reset+0x100>
    d8de:	4a07      	ldr	r2, [pc, #28]	; (d8fc <ll_reset+0x104>)
    d8e0:	4907      	ldr	r1, [pc, #28]	; (d900 <ll_reset+0x108>)
    d8e2:	4808      	ldr	r0, [pc, #32]	; (d904 <ll_reset+0x10c>)
    d8e4:	f240 3327 	movw	r3, #807	; 0x327
    d8e8:	f008 fe87 	bl	165fa <printk>
    d8ec:	4040      	eors	r0, r0
    d8ee:	f380 8811 	msr	BASEPRI, r0
    d8f2:	f04f 0003 	mov.w	r0, #3
    d8f6:	df02      	svc	2
}
    d8f8:	b006      	add	sp, #24
    d8fa:	bd10      	pop	{r4, pc}
    d8fc:	00020508 	.word	0x00020508
    d900:	0002057d 	.word	0x0002057d
    d904:	0002023c 	.word	0x0002023c
    d908:	2000060c 	.word	0x2000060c
    d90c:	20000508 	.word	0x20000508
    d910:	200004f0 	.word	0x200004f0
    d914:	200004e4 	.word	0x200004e4
    d918:	20000640 	.word	0x20000640
    d91c:	0002062a 	.word	0x0002062a

0000d920 <ull_done>:
{
    d920:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
		break;
	}

	/* Release done */
	done->extra.type = 0U;
	release = RXFIFO_RELEASE(done, link, done);
    d924:	4f33      	ldr	r7, [pc, #204]	; (d9f4 <ull_done+0xd4>)
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
    d926:	4e34      	ldr	r6, [pc, #208]	; (d9f8 <ull_done+0xd8>)
{
    d928:	b087      	sub	sp, #28
	release = RXFIFO_RELEASE(done, link, done);
    d92a:	f107 0904 	add.w	r9, r7, #4
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
    d92e:	e9d6 0100 	ldrd	r0, r1, [r6]
    d932:	aa05      	add	r2, sp, #20
    d934:	f00e f932 	bl	1bb9c <memq_peek>
		if (link) {
    d938:	4680      	mov	r8, r0
    d93a:	2800      	cmp	r0, #0
    d93c:	d057      	beq.n	d9ee <ull_done+0xce>
			(void)memq_dequeue(memq_ull_done.tail,
    d93e:	6870      	ldr	r0, [r6, #4]
    d940:	2200      	movs	r2, #0
    d942:	4631      	mov	r1, r6
    d944:	f00e f932 	bl	1bbac <memq_dequeue>
			rx_demux_event_done(link, done);
    d948:	9d05      	ldr	r5, [sp, #20]
	ull_hdr = done->param;
    d94a:	69ec      	ldr	r4, [r5, #28]
	if (ull_hdr) {
    d94c:	b194      	cbz	r4, d974 <ull_done+0x54>
    d94e:	7823      	ldrb	r3, [r4, #0]
		LL_ASSERT(ull_ref_get(ull_hdr));
    d950:	b963      	cbnz	r3, d96c <ull_done+0x4c>
    d952:	4a2a      	ldr	r2, [pc, #168]	; (d9fc <ull_done+0xdc>)
    d954:	492a      	ldr	r1, [pc, #168]	; (da00 <ull_done+0xe0>)
    d956:	482b      	ldr	r0, [pc, #172]	; (da04 <ull_done+0xe4>)
    d958:	f640 2312 	movw	r3, #2578	; 0xa12
    d95c:	f008 fe4d 	bl	165fa <printk>
    d960:	4040      	eors	r0, r0
    d962:	f380 8811 	msr	BASEPRI, r0
    d966:	f04f 0003 	mov.w	r0, #3
    d96a:	df02      	svc	2
	return hdr->ref--;
    d96c:	7823      	ldrb	r3, [r4, #0]
    d96e:	3b01      	subs	r3, #1
    d970:	b2db      	uxtb	r3, r3
    d972:	7023      	strb	r3, [r4, #0]
	switch (done->extra.type) {
    d974:	f895 3020 	ldrb.w	r3, [r5, #32]
    d978:	b123      	cbz	r3, d984 <ull_done+0x64>
    d97a:	2b01      	cmp	r3, #1
    d97c:	d129      	bne.n	d9d2 <ull_done+0xb2>
		ull_conn_done(done);
    d97e:	4628      	mov	r0, r5
    d980:	f001 fc6a 	bl	f258 <ull_conn_done>
	done->extra.type = 0U;
    d984:	2300      	movs	r3, #0
    d986:	f885 3020 	strb.w	r3, [r5, #32]
	release = RXFIFO_RELEASE(done, link, done);
    d98a:	78ba      	ldrb	r2, [r7, #2]
    d98c:	4b1e      	ldr	r3, [pc, #120]	; (da08 <ull_done+0xe8>)
    d98e:	7879      	ldrb	r1, [r7, #1]
    d990:	7838      	ldrb	r0, [r7, #0]
    d992:	f8cd 9000 	str.w	r9, [sp]
    d996:	e9cd 8501 	strd	r8, r5, [sp, #4]
    d99a:	f00e fc7e 	bl	1c29a <ull_rxfifo_release>
	LL_ASSERT(release == done);
    d99e:	4285      	cmp	r5, r0
    d9a0:	d00c      	beq.n	d9bc <ull_done+0x9c>
    d9a2:	4a16      	ldr	r2, [pc, #88]	; (d9fc <ull_done+0xdc>)
    d9a4:	4919      	ldr	r1, [pc, #100]	; (da0c <ull_done+0xec>)
    d9a6:	4817      	ldr	r0, [pc, #92]	; (da04 <ull_done+0xe4>)
    d9a8:	f44f 6327 	mov.w	r3, #2672	; 0xa70
    d9ac:	f008 fe25 	bl	165fa <printk>
    d9b0:	4040      	eors	r0, r0
    d9b2:	f380 8811 	msr	BASEPRI, r0
    d9b6:	f04f 0003 	mov.w	r0, #3
    d9ba:	df02      	svc	2
	/* LLL done synchronize count */
	lll_done_ull_inc();
#endif /* CONFIG_BT_CTLR_LOW_LAT_ULL_DONE */

	/* If disable initiated, signal the semaphore */
	if (ull_hdr && !ull_ref_get(ull_hdr) && ull_hdr->disabled_cb) {
    d9bc:	2c00      	cmp	r4, #0
    d9be:	d0b6      	beq.n	d92e <ull_done+0xe>
	return hdr->ref;
    d9c0:	7823      	ldrb	r3, [r4, #0]
    d9c2:	2b00      	cmp	r3, #0
    d9c4:	d1b3      	bne.n	d92e <ull_done+0xe>
    d9c6:	6963      	ldr	r3, [r4, #20]
    d9c8:	2b00      	cmp	r3, #0
    d9ca:	d0b0      	beq.n	d92e <ull_done+0xe>
		ull_hdr->disabled_cb(ull_hdr->disabled_param);
    d9cc:	69a0      	ldr	r0, [r4, #24]
    d9ce:	4798      	blx	r3
    d9d0:	e7ad      	b.n	d92e <ull_done+0xe>
		LL_ASSERT(0);
    d9d2:	4a0a      	ldr	r2, [pc, #40]	; (d9fc <ull_done+0xdc>)
    d9d4:	490e      	ldr	r1, [pc, #56]	; (da10 <ull_done+0xf0>)
    d9d6:	480b      	ldr	r0, [pc, #44]	; (da04 <ull_done+0xe4>)
    d9d8:	f640 2369 	movw	r3, #2665	; 0xa69
    d9dc:	f008 fe0d 	bl	165fa <printk>
    d9e0:	4040      	eors	r0, r0
    d9e2:	f380 8811 	msr	BASEPRI, r0
    d9e6:	f04f 0003 	mov.w	r0, #3
    d9ea:	df02      	svc	2
		break;
    d9ec:	e7ca      	b.n	d984 <ull_done+0x64>
}
    d9ee:	b007      	add	sp, #28
    d9f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d9f4:	200004cc 	.word	0x200004cc
    d9f8:	20001ed4 	.word	0x20001ed4
    d9fc:	00020508 	.word	0x00020508
    da00:	00020632 	.word	0x00020632
    da04:	0002023c 	.word	0x0002023c
    da08:	200004cf 	.word	0x200004cf
    da0c:	00020647 	.word	0x00020647
    da10:	00020e86 	.word	0x00020e86

0000da14 <lll_resume>:
	return lll_prepare_resolve(is_abort_cb, abort_cb, prepare_cb,
				   prepare_param, 0, 0);
}

void lll_resume(void *param)
{
    da14:	b507      	push	{r0, r1, r2, lr}
	struct lll_event *next;
	int ret;

	next = param;
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
    da16:	2201      	movs	r2, #1
    da18:	9201      	str	r2, [sp, #4]
				  next->prepare_cb, &next->prepare_param,
				  next->is_resume, 1);
    da1a:	7f02      	ldrb	r2, [r0, #28]
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
    da1c:	f002 0201 	and.w	r2, r2, #1
    da20:	9200      	str	r2, [sp, #0]
    da22:	6902      	ldr	r2, [r0, #16]
{
    da24:	4603      	mov	r3, r0
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
    da26:	e9d0 0105 	ldrd	r0, r1, [r0, #20]
    da2a:	f002 fb05 	bl	10038 <lll_prepare_resolve>
	LL_ASSERT(!ret || ret == -EINPROGRESS);
    da2e:	b168      	cbz	r0, da4c <lll_resume+0x38>
    da30:	3077      	adds	r0, #119	; 0x77
    da32:	d00b      	beq.n	da4c <lll_resume+0x38>
    da34:	4a07      	ldr	r2, [pc, #28]	; (da54 <lll_resume+0x40>)
    da36:	4908      	ldr	r1, [pc, #32]	; (da58 <lll_resume+0x44>)
    da38:	4808      	ldr	r0, [pc, #32]	; (da5c <lll_resume+0x48>)
    da3a:	234f      	movs	r3, #79	; 0x4f
    da3c:	f008 fddd 	bl	165fa <printk>
    da40:	4040      	eors	r0, r0
    da42:	f380 8811 	msr	BASEPRI, r0
    da46:	f04f 0003 	mov.w	r0, #3
    da4a:	df02      	svc	2
}
    da4c:	b003      	add	sp, #12
    da4e:	f85d fb04 	ldr.w	pc, [sp], #4
    da52:	bf00      	nop
    da54:	00020657 	.word	0x00020657
    da58:	00020699 	.word	0x00020699
    da5c:	0002023c 	.word	0x0002023c

0000da60 <ticker_stop_cb>:
{
    da60:	b537      	push	{r0, r1, r2, r4, r5, lr}
    da62:	9d07      	ldr	r5, [sp, #28]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    da64:	4a17      	ldr	r2, [pc, #92]	; (dac4 <ticker_stop_cb+0x64>)
    da66:	236c      	movs	r3, #108	; 0x6c
    da68:	1aaa      	subs	r2, r5, r2
    da6a:	fbb2 f2f3 	udiv	r2, r2, r3
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
    da6e:	f012 04ff 	ands.w	r4, r2, #255	; 0xff
    da72:	d00c      	beq.n	da8e <ticker_stop_cb+0x2e>
    da74:	4a14      	ldr	r2, [pc, #80]	; (dac8 <ticker_stop_cb+0x68>)
    da76:	4915      	ldr	r1, [pc, #84]	; (dacc <ticker_stop_cb+0x6c>)
    da78:	4815      	ldr	r0, [pc, #84]	; (dad0 <ticker_stop_cb+0x70>)
    da7a:	f640 03cd 	movw	r3, #2253	; 0x8cd
    da7e:	f008 fdbc 	bl	165fa <printk>
    da82:	4040      	eors	r0, r0
    da84:	f380 8811 	msr	BASEPRI, r0
    da88:	f04f 0003 	mov.w	r0, #3
    da8c:	df02      	svc	2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    da8e:	1ca2      	adds	r2, r4, #2
    da90:	4b10      	ldr	r3, [pc, #64]	; (dad4 <ticker_stop_cb+0x74>)
    da92:	9500      	str	r5, [sp, #0]
    da94:	b2d2      	uxtb	r2, r2
    da96:	2101      	movs	r1, #1
    da98:	2000      	movs	r0, #0
    da9a:	f7fe f81f 	bl	badc <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    da9e:	f030 0302 	bics.w	r3, r0, #2
    daa2:	d00c      	beq.n	dabe <ticker_stop_cb+0x5e>
    daa4:	4a08      	ldr	r2, [pc, #32]	; (dac8 <ticker_stop_cb+0x68>)
    daa6:	490c      	ldr	r1, [pc, #48]	; (dad8 <ticker_stop_cb+0x78>)
    daa8:	4809      	ldr	r0, [pc, #36]	; (dad0 <ticker_stop_cb+0x70>)
    daaa:	f640 03d2 	movw	r3, #2258	; 0x8d2
    daae:	f008 fda4 	bl	165fa <printk>
    dab2:	4040      	eors	r0, r0
    dab4:	f380 8811 	msr	BASEPRI, r0
    dab8:	f04f 0003 	mov.w	r0, #3
    dabc:	df02      	svc	2
}
    dabe:	b003      	add	sp, #12
    dac0:	bd30      	pop	{r4, r5, pc}
    dac2:	bf00      	nop
    dac4:	2000235c 	.word	0x2000235c
    dac8:	000206ad 	.word	0x000206ad
    dacc:	000206ec 	.word	0x000206ec
    dad0:	0002023c 	.word	0x0002023c
    dad4:	0000dbe1 	.word	0x0000dbe1
    dad8:	000206f7 	.word	0x000206f7

0000dadc <disabled_cb>:
{
    dadc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	adv = ((struct lll_hdr *)param)->parent;
    dade:	6805      	ldr	r5, [r0, #0]
	LL_ASSERT(adv->link_cc_free);
    dae0:	6e2b      	ldr	r3, [r5, #96]	; 0x60
{
    dae2:	4606      	mov	r6, r0
	LL_ASSERT(adv->link_cc_free);
    dae4:	b963      	cbnz	r3, db00 <disabled_cb+0x24>
    dae6:	4a1b      	ldr	r2, [pc, #108]	; (db54 <disabled_cb+0x78>)
    dae8:	491b      	ldr	r1, [pc, #108]	; (db58 <disabled_cb+0x7c>)
    daea:	481c      	ldr	r0, [pc, #112]	; (db5c <disabled_cb+0x80>)
    daec:	f640 131a 	movw	r3, #2330	; 0x91a
    daf0:	f008 fd83 	bl	165fa <printk>
    daf4:	4040      	eors	r0, r0
    daf6:	f380 8811 	msr	BASEPRI, r0
    dafa:	f04f 0003 	mov.w	r0, #3
    dafe:	df02      	svc	2
	adv->link_cc_free = NULL;
    db00:	2300      	movs	r3, #0
	link = adv->link_cc_free;
    db02:	6e2f      	ldr	r7, [r5, #96]	; 0x60
	adv->link_cc_free = NULL;
    db04:	662b      	str	r3, [r5, #96]	; 0x60
	LL_ASSERT(adv->node_rx_cc_free);
    db06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    db08:	b963      	cbnz	r3, db24 <disabled_cb+0x48>
    db0a:	4a12      	ldr	r2, [pc, #72]	; (db54 <disabled_cb+0x78>)
    db0c:	4914      	ldr	r1, [pc, #80]	; (db60 <disabled_cb+0x84>)
    db0e:	4813      	ldr	r0, [pc, #76]	; (db5c <disabled_cb+0x80>)
    db10:	f640 131e 	movw	r3, #2334	; 0x91e
    db14:	f008 fd71 	bl	165fa <printk>
    db18:	4040      	eors	r0, r0
    db1a:	f380 8811 	msr	BASEPRI, r0
    db1e:	f04f 0003 	mov.w	r0, #3
    db22:	df02      	svc	2
	rx = adv->node_rx_cc_free;
    db24:	6e6c      	ldr	r4, [r5, #100]	; 0x64
	adv->node_rx_cc_free = NULL;
    db26:	2100      	movs	r1, #0
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    db28:	2316      	movs	r3, #22
	adv->node_rx_cc_free = NULL;
    db2a:	6669      	str	r1, [r5, #100]	; 0x64
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    db2c:	7123      	strb	r3, [r4, #4]
	rx->hdr.handle = 0xffff;
    db2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    db32:	80e3      	strh	r3, [r4, #6]
	memset(cc, 0x00, sizeof(struct node_rx_cc));
    db34:	2212      	movs	r2, #18
    db36:	f104 001c 	add.w	r0, r4, #28
    db3a:	f009 fb96 	bl	1726a <memset>
	cc->status = BT_HCI_ERR_ADV_TIMEOUT;
    db3e:	233c      	movs	r3, #60	; 0x3c
    db40:	7723      	strb	r3, [r4, #28]
	rx->hdr.rx_ftr.param = param;
    db42:	60a6      	str	r6, [r4, #8]
	ll_rx_put(link, rx);
    db44:	4621      	mov	r1, r4
    db46:	4638      	mov	r0, r7
    db48:	f7ff fa46 	bl	cfd8 <ll_rx_put>
}
    db4c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ll_rx_sched();
    db50:	f7ff ba4c 	b.w	cfec <ll_rx_sched>
    db54:	000206ad 	.word	0x000206ad
    db58:	00020710 	.word	0x00020710
    db5c:	0002023c 	.word	0x0002023c
    db60:	00020722 	.word	0x00020722

0000db64 <conn_release>:
{
    db64:	b570      	push	{r4, r5, r6, lr}
	struct lll_conn *lll = adv->lll.conn;
    db66:	6a05      	ldr	r5, [r0, #32]
	LL_ASSERT(!lll->link_tx_free);
    db68:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
{
    db6a:	4604      	mov	r4, r0
	LL_ASSERT(!lll->link_tx_free);
    db6c:	b163      	cbz	r3, db88 <conn_release+0x24>
    db6e:	4a18      	ldr	r2, [pc, #96]	; (dbd0 <conn_release+0x6c>)
    db70:	4918      	ldr	r1, [pc, #96]	; (dbd4 <conn_release+0x70>)
    db72:	4819      	ldr	r0, [pc, #100]	; (dbd8 <conn_release+0x74>)
    db74:	f640 1348 	movw	r3, #2376	; 0x948
    db78:	f008 fd3f 	bl	165fa <printk>
    db7c:	4040      	eors	r0, r0
    db7e:	f380 8811 	msr	BASEPRI, r0
    db82:	f04f 0003 	mov.w	r0, #3
    db86:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
    db88:	f105 0140 	add.w	r1, r5, #64	; 0x40
    db8c:	f105 003c 	add.w	r0, r5, #60	; 0x3c
    db90:	f00d fff2 	bl	1bb78 <memq_deinit>
	LL_ASSERT(link);
    db94:	4606      	mov	r6, r0
    db96:	b960      	cbnz	r0, dbb2 <conn_release+0x4e>
    db98:	4a0d      	ldr	r2, [pc, #52]	; (dbd0 <conn_release+0x6c>)
    db9a:	4910      	ldr	r1, [pc, #64]	; (dbdc <conn_release+0x78>)
    db9c:	480e      	ldr	r0, [pc, #56]	; (dbd8 <conn_release+0x74>)
    db9e:	f640 134a 	movw	r3, #2378	; 0x94a
    dba2:	f008 fd2a 	bl	165fa <printk>
    dba6:	4040      	eors	r0, r0
    dba8:	f380 8811 	msr	BASEPRI, r0
    dbac:	f04f 0003 	mov.w	r0, #3
    dbb0:	df02      	svc	2
	ll_conn_release(lll->hdr.parent);
    dbb2:	6828      	ldr	r0, [r5, #0]
	lll->link_tx_free = link;
    dbb4:	64ee      	str	r6, [r5, #76]	; 0x4c
	adv->lll.conn = NULL;
    dbb6:	2500      	movs	r5, #0
	ll_conn_release(lll->hdr.parent);
    dbb8:	f000 fcec 	bl	e594 <ll_conn_release>
	ll_rx_release(adv->node_rx_cc_free);
    dbbc:	6e60      	ldr	r0, [r4, #100]	; 0x64
	adv->lll.conn = NULL;
    dbbe:	6225      	str	r5, [r4, #32]
	ll_rx_release(adv->node_rx_cc_free);
    dbc0:	f7ff fa04 	bl	cfcc <ll_rx_release>
	ll_rx_link_release(adv->link_cc_free);
    dbc4:	6e20      	ldr	r0, [r4, #96]	; 0x60
	adv->node_rx_cc_free = NULL;
    dbc6:	6665      	str	r5, [r4, #100]	; 0x64
	ll_rx_link_release(adv->link_cc_free);
    dbc8:	f7ff f9f4 	bl	cfb4 <ll_rx_link_release>
	adv->link_cc_free = NULL;
    dbcc:	6625      	str	r5, [r4, #96]	; 0x60
}
    dbce:	bd70      	pop	{r4, r5, r6, pc}
    dbd0:	000206ad 	.word	0x000206ad
    dbd4:	00020737 	.word	0x00020737
    dbd8:	0002023c 	.word	0x0002023c
    dbdc:	0002091f 	.word	0x0002091f

0000dbe0 <ticker_stop_op_cb>:
{
    dbe0:	b508      	push	{r3, lr}
	if (status != TICKER_STATUS_SUCCESS) {
    dbe2:	4602      	mov	r2, r0
    dbe4:	b998      	cbnz	r0, dc0e <ticker_stop_op_cb+0x2e>
	mfy.param = param;
    dbe6:	4b0a      	ldr	r3, [pc, #40]	; (dc10 <ticker_stop_op_cb+0x30>)
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
    dbe8:	2002      	movs	r0, #2
	mfy.param = param;
    dbea:	6099      	str	r1, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
    dbec:	2101      	movs	r1, #1
    dbee:	f7fd f9b1 	bl	af54 <mayfly_enqueue>
	LL_ASSERT(!ret);
    dbf2:	b160      	cbz	r0, dc0e <ticker_stop_op_cb+0x2e>
    dbf4:	4a07      	ldr	r2, [pc, #28]	; (dc14 <ticker_stop_op_cb+0x34>)
    dbf6:	4908      	ldr	r1, [pc, #32]	; (dc18 <ticker_stop_op_cb+0x38>)
    dbf8:	4808      	ldr	r0, [pc, #32]	; (dc1c <ticker_stop_op_cb+0x3c>)
    dbfa:	f640 03ee 	movw	r3, #2286	; 0x8ee
    dbfe:	f008 fcfc 	bl	165fa <printk>
    dc02:	4040      	eors	r0, r0
    dc04:	f380 8811 	msr	BASEPRI, r0
    dc08:	f04f 0003 	mov.w	r0, #3
    dc0c:	df02      	svc	2
}
    dc0e:	bd08      	pop	{r3, pc}
    dc10:	200006b0 	.word	0x200006b0
    dc14:	000206ad 	.word	0x000206ad
    dc18:	00020608 	.word	0x00020608
    dc1c:	0002023c 	.word	0x0002023c

0000dc20 <adv_disable>:
{
    dc20:	b538      	push	{r3, r4, r5, lr}
    dc22:	4604      	mov	r4, r0
    dc24:	f810 3b1c 	ldrb.w	r3, [r0], #28
	if (ull_ref_get(hdr)) {
    dc28:	b34b      	cbz	r3, dc7e <adv_disable+0x5e>
		mfy.param = &adv->lll;
    dc2a:	4d17      	ldr	r5, [pc, #92]	; (dc88 <adv_disable+0x68>)
		LL_ASSERT(!hdr->disabled_cb);
    dc2c:	6963      	ldr	r3, [r4, #20]
		mfy.param = &adv->lll;
    dc2e:	60a8      	str	r0, [r5, #8]
		LL_ASSERT(!hdr->disabled_cb);
    dc30:	b163      	cbz	r3, dc4c <adv_disable+0x2c>
    dc32:	4a16      	ldr	r2, [pc, #88]	; (dc8c <adv_disable+0x6c>)
    dc34:	4916      	ldr	r1, [pc, #88]	; (dc90 <adv_disable+0x70>)
    dc36:	4817      	ldr	r0, [pc, #92]	; (dc94 <adv_disable+0x74>)
    dc38:	f640 1303 	movw	r3, #2307	; 0x903
    dc3c:	f008 fcdd 	bl	165fa <printk>
    dc40:	4040      	eors	r0, r0
    dc42:	f380 8811 	msr	BASEPRI, r0
    dc46:	f04f 0003 	mov.w	r0, #3
    dc4a:	df02      	svc	2
		hdr->disabled_param = mfy.param;
    dc4c:	68ab      	ldr	r3, [r5, #8]
    dc4e:	61a3      	str	r3, [r4, #24]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    dc50:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
    dc52:	4b11      	ldr	r3, [pc, #68]	; (dc98 <adv_disable+0x78>)
    dc54:	6163      	str	r3, [r4, #20]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    dc56:	4611      	mov	r1, r2
    dc58:	4b0b      	ldr	r3, [pc, #44]	; (dc88 <adv_disable+0x68>)
    dc5a:	2001      	movs	r0, #1
    dc5c:	f7fd f97a 	bl	af54 <mayfly_enqueue>
		LL_ASSERT(!ret);
    dc60:	b160      	cbz	r0, dc7c <adv_disable+0x5c>
    dc62:	4a0a      	ldr	r2, [pc, #40]	; (dc8c <adv_disable+0x6c>)
    dc64:	490d      	ldr	r1, [pc, #52]	; (dc9c <adv_disable+0x7c>)
    dc66:	480b      	ldr	r0, [pc, #44]	; (dc94 <adv_disable+0x74>)
    dc68:	f640 130a 	movw	r3, #2314	; 0x90a
    dc6c:	f008 fcc5 	bl	165fa <printk>
    dc70:	4040      	eors	r0, r0
    dc72:	f380 8811 	msr	BASEPRI, r0
    dc76:	f04f 0003 	mov.w	r0, #3
    dc7a:	df02      	svc	2
}
    dc7c:	bd38      	pop	{r3, r4, r5, pc}
    dc7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		disabled_cb(&adv->lll);
    dc82:	f7ff bf2b 	b.w	dadc <disabled_cb>
    dc86:	bf00      	nop
    dc88:	200006a0 	.word	0x200006a0
    dc8c:	000206ad 	.word	0x000206ad
    dc90:	0002074a 	.word	0x0002074a
    dc94:	0002023c 	.word	0x0002023c
    dc98:	0000dadd 	.word	0x0000dadd
    dc9c:	00020608 	.word	0x00020608

0000dca0 <ticker_update_op_cb>:
{
    dca0:	b510      	push	{r4, lr}
    dca2:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
    dca4:	b180      	cbz	r0, dcc8 <ticker_update_op_cb+0x28>
    dca6:	f7ff fae1 	bl	d26c <ull_disable_mark_get>
    dcaa:	4284      	cmp	r4, r0
    dcac:	d00c      	beq.n	dcc8 <ticker_update_op_cb+0x28>
    dcae:	4a07      	ldr	r2, [pc, #28]	; (dccc <ticker_update_op_cb+0x2c>)
    dcb0:	4907      	ldr	r1, [pc, #28]	; (dcd0 <ticker_update_op_cb+0x30>)
    dcb2:	4808      	ldr	r0, [pc, #32]	; (dcd4 <ticker_update_op_cb+0x34>)
    dcb4:	f640 03bf 	movw	r3, #2239	; 0x8bf
    dcb8:	f008 fc9f 	bl	165fa <printk>
    dcbc:	4040      	eors	r0, r0
    dcbe:	f380 8811 	msr	BASEPRI, r0
    dcc2:	f04f 0003 	mov.w	r0, #3
    dcc6:	df02      	svc	2
}
    dcc8:	bd10      	pop	{r4, pc}
    dcca:	bf00      	nop
    dccc:	000206ad 	.word	0x000206ad
    dcd0:	0002075c 	.word	0x0002075c
    dcd4:	0002023c 	.word	0x0002023c

0000dcd8 <init_reset>:
{
    dcd8:	b510      	push	{r4, lr}
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
    dcda:	4c13      	ldr	r4, [pc, #76]	; (dd28 <init_reset+0x50>)
    dcdc:	f104 0028 	add.w	r0, r4, #40	; 0x28
    dce0:	f002 fba6 	bl	10430 <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
    dce4:	f104 0034 	add.w	r0, r4, #52	; 0x34
    dce8:	f002 fba2 	bl	10430 <lll_adv_data_init>
	pdu->len = BDADDR_SIZE;
}

static void init_set(struct ll_adv_set *adv)
{
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
    dcec:	f44f 6300 	mov.w	r3, #2048	; 0x800
    dcf0:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
#if defined(CONFIG_BT_CTLR_PRIVACY)
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
#endif /* CONFIG_BT_CTLR_PRIVACY */
	adv->lll.chan_map = BT_LE_ADV_CHAN_MAP_ALL;
    dcf4:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    dcf6:	f423 7343 	bic.w	r3, r3, #780	; 0x30c
    dcfa:	f023 0302 	bic.w	r3, r3, #2
    dcfe:	f043 030e 	orr.w	r3, r3, #14
    dd02:	84a3      	strh	r3, [r4, #36]	; 0x24
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    dd04:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    dd08:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	pdu->len = BDADDR_SIZE;
    dd0c:	2206      	movs	r2, #6
    dd0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	pdu->type = pdu_type;
    dd10:	2000      	movs	r0, #0
	pdu->len = BDADDR_SIZE;
    dd12:	705a      	strb	r2, [r3, #1]
	pdu->type = pdu_type;
    dd14:	7018      	strb	r0, [r3, #0]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    dd16:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
    dd1a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    dd1e:	2104      	movs	r1, #4
    dd20:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	pdu->len = BDADDR_SIZE;
    dd22:	705a      	strb	r2, [r3, #1]
	pdu->type = pdu_type;
    dd24:	7019      	strb	r1, [r3, #0]
}
    dd26:	bd10      	pop	{r4, pc}
    dd28:	2000235c 	.word	0x2000235c

0000dd2c <ticker_cb>:
{
    dd2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    dd2e:	461c      	mov	r4, r3
    dd30:	b08b      	sub	sp, #44	; 0x2c
	if (IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) ||
    dd32:	f64f 73ff 	movw	r3, #65535	; 0xffff
    dd36:	429c      	cmp	r4, r3
{
    dd38:	9d11      	ldr	r5, [sp, #68]	; 0x44
    dd3a:	4607      	mov	r7, r0
    dd3c:	4616      	mov	r6, r2
	if (IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) ||
    dd3e:	d030      	beq.n	dda2 <ticker_cb+0x76>
	return ++hdr->ref;
    dd40:	7829      	ldrb	r1, [r5, #0]
    dd42:	3101      	adds	r1, #1
    dd44:	b2c9      	uxtb	r1, r1
    dd46:	7029      	strb	r1, [r5, #0]
		LL_ASSERT(ref);
    dd48:	b961      	cbnz	r1, dd64 <ticker_cb+0x38>
    dd4a:	4a31      	ldr	r2, [pc, #196]	; (de10 <ticker_cb+0xe4>)
    dd4c:	4931      	ldr	r1, [pc, #196]	; (de14 <ticker_cb+0xe8>)
    dd4e:	4832      	ldr	r0, [pc, #200]	; (de18 <ticker_cb+0xec>)
    dd50:	f640 0385 	movw	r3, #2181	; 0x885
    dd54:	f008 fc51 	bl	165fa <printk>
    dd58:	4040      	eors	r0, r0
    dd5a:	f380 8811 	msr	BASEPRI, r0
    dd5e:	f04f 0003 	mov.w	r0, #3
    dd62:	df02      	svc	2
		p.ticks_at_expire = ticks_at_expire;
    dd64:	492d      	ldr	r1, [pc, #180]	; (de1c <ticker_cb+0xf0>)
		p.force = force;
    dd66:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    dd6a:	728b      	strb	r3, [r1, #10]
	lll = &adv->lll;
    dd6c:	f105 031c 	add.w	r3, r5, #28
		p.param = lll;
    dd70:	60cb      	str	r3, [r1, #12]
		mfy.param = &p;
    dd72:	4b2b      	ldr	r3, [pc, #172]	; (de20 <ticker_cb+0xf4>)
		p.lazy = lazy;
    dd74:	810c      	strh	r4, [r1, #8]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    dd76:	2200      	movs	r2, #0
		p.remainder = remainder;
    dd78:	e9c1 7600 	strd	r7, r6, [r1]
		mfy.param = &p;
    dd7c:	6099      	str	r1, [r3, #8]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    dd7e:	2001      	movs	r0, #1
    dd80:	4611      	mov	r1, r2
    dd82:	f7fd f8e7 	bl	af54 <mayfly_enqueue>
		LL_ASSERT(!ret);
    dd86:	b160      	cbz	r0, dda2 <ticker_cb+0x76>
    dd88:	4a21      	ldr	r2, [pc, #132]	; (de10 <ticker_cb+0xe4>)
    dd8a:	4926      	ldr	r1, [pc, #152]	; (de24 <ticker_cb+0xf8>)
    dd8c:	4822      	ldr	r0, [pc, #136]	; (de18 <ticker_cb+0xec>)
    dd8e:	f640 0392 	movw	r3, #2194	; 0x892
    dd92:	f008 fc32 	bl	165fa <printk>
    dd96:	4040      	eors	r0, r0
    dd98:	f380 8811 	msr	BASEPRI, r0
    dd9c:	f04f 0003 	mov.w	r0, #3
    dda0:	df02      	svc	2
	if (!lll->is_hdcd)
    dda2:	f895 4024 	ldrb.w	r4, [r5, #36]	; 0x24
    dda6:	f014 0401 	ands.w	r4, r4, #1
    ddaa:	d12f      	bne.n	de0c <ticker_cb+0xe0>
	lll_rand_isr_get(&random_delay, sizeof(random_delay));
    ddac:	2104      	movs	r1, #4
    ddae:	a809      	add	r0, sp, #36	; 0x24
    ddb0:	f00e fd85 	bl	1c8be <lll_rand_isr_get>
	random_delay %= ticks_delay_window;
    ddb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    ddb6:	9506      	str	r5, [sp, #24]
	random_delay %= ticks_delay_window;
    ddb8:	f240 1247 	movw	r2, #327	; 0x147
    ddbc:	fbb3 f1f2 	udiv	r1, r3, r2
    ddc0:	fb02 3311 	mls	r3, r2, r1, r3
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    ddc4:	4a18      	ldr	r2, [pc, #96]	; (de28 <ticker_cb+0xfc>)
    ddc6:	216c      	movs	r1, #108	; 0x6c
    ddc8:	1aaa      	subs	r2, r5, r2
    ddca:	fbb2 f2f1 	udiv	r2, r2, r1
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    ddce:	4917      	ldr	r1, [pc, #92]	; (de2c <ticker_cb+0x100>)
    ddd0:	3202      	adds	r2, #2
	random_delay += (ticks_delay_window_offset + 1);
    ddd2:	3301      	adds	r3, #1
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    ddd4:	e9cd 4104 	strd	r4, r1, [sp, #16]
    ddd8:	e9cd 4402 	strd	r4, r4, [sp, #8]
    dddc:	e9cd 4400 	strd	r4, r4, [sp]
    dde0:	b2d2      	uxtb	r2, r2
    dde2:	2101      	movs	r1, #1
    dde4:	4620      	mov	r0, r4
	random_delay += (ticks_delay_window_offset + 1);
    dde6:	9309      	str	r3, [sp, #36]	; 0x24
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    dde8:	f00e f97f 	bl	1c0ea <ticker_update>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    ddec:	f030 0302 	bics.w	r3, r0, #2
    ddf0:	d00c      	beq.n	de0c <ticker_cb+0xe0>
    ddf2:	4a07      	ldr	r2, [pc, #28]	; (de10 <ticker_cb+0xe4>)
    ddf4:	490e      	ldr	r1, [pc, #56]	; (de30 <ticker_cb+0x104>)
    ddf6:	4808      	ldr	r0, [pc, #32]	; (de18 <ticker_cb+0xec>)
    ddf8:	f240 732c 	movw	r3, #1836	; 0x72c
    ddfc:	f008 fbfd 	bl	165fa <printk>
    de00:	4040      	eors	r0, r0
    de02:	f380 8811 	msr	BASEPRI, r0
    de06:	f04f 0003 	mov.w	r0, #3
    de0a:	df02      	svc	2
}
    de0c:	b00b      	add	sp, #44	; 0x2c
    de0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    de10:	000206ad 	.word	0x000206ad
    de14:	0002078b 	.word	0x0002078b
    de18:	0002023c 	.word	0x0002023c
    de1c:	200023d4 	.word	0x200023d4
    de20:	20000690 	.word	0x20000690
    de24:	00020608 	.word	0x00020608
    de28:	2000235c 	.word	0x2000235c
    de2c:	0000dca1 	.word	0x0000dca1
    de30:	000206f7 	.word	0x000206f7

0000de34 <ll_adv_params_set>:
{
    de34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!adv || adv->is_enabled) {
    de38:	4d57      	ldr	r5, [pc, #348]	; (df98 <ll_adv_params_set+0x164>)
{
    de3a:	4698      	mov	r8, r3
	if (!adv || adv->is_enabled) {
    de3c:	f895 606a 	ldrb.w	r6, [r5, #106]	; 0x6a
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    de40:	4b56      	ldr	r3, [pc, #344]	; (df9c <ll_adv_params_set+0x168>)
{
    de42:	4604      	mov	r4, r0
	if (!adv || adv->is_enabled) {
    de44:	f016 0601 	ands.w	r6, r6, #1
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    de48:	6818      	ldr	r0, [r3, #0]
    de4a:	791b      	ldrb	r3, [r3, #4]
    de4c:	9000      	str	r0, [sp, #0]
{
    de4e:	4617      	mov	r7, r2
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    de50:	f88d 3004 	strb.w	r3, [sp, #4]
	if (!adv || adv->is_enabled) {
    de54:	f040 809d 	bne.w	df92 <ll_adv_params_set+0x15e>
		adv->interval = 0;
    de58:	2901      	cmp	r1, #1
    de5a:	bf08      	it	eq
    de5c:	2400      	moveq	r4, #0
    de5e:	f8a5 4068 	strh.w	r4, [r5, #104]	; 0x68
	adv->lll.chan_map = chan_map;
    de62:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
    de66:	f004 0303 	and.w	r3, r4, #3
    de6a:	f89d 4034 	ldrb.w	r4, [sp, #52]	; 0x34
    de6e:	f004 0407 	and.w	r4, r4, #7
    de72:	0064      	lsls	r4, r4, #1
    de74:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    de78:	8cab      	ldrh	r3, [r5, #36]	; 0x24
    de7a:	f423 7343 	bic.w	r3, r3, #780	; 0x30c
    de7e:	f023 0302 	bic.w	r3, r3, #2
    de82:	431c      	orrs	r4, r3
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    de84:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
    de88:	84ac      	strh	r4, [r5, #36]	; 0x24
    de8a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    de8e:	ea4f 1a87 	mov.w	sl, r7, lsl #6
    de92:	6adc      	ldr	r4, [r3, #44]	; 0x2c
	pdu->type = pdu_adv_type[adv_type];
    de94:	ab02      	add	r3, sp, #8
    de96:	4419      	add	r1, r3
	pdu_type_prev = pdu->type;
    de98:	7822      	ldrb	r2, [r4, #0]
	pdu->type = pdu_adv_type[adv_type];
    de9a:	f811 3c08 	ldrb.w	r3, [r1, #-8]
	pdu_type_prev = pdu->type;
    de9e:	f002 090f 	and.w	r9, r2, #15
	pdu->type = pdu_adv_type[adv_type];
    dea2:	f003 030f 	and.w	r3, r3, #15
    dea6:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
    deaa:	4313      	orrs	r3, r2
    deac:	7023      	strb	r3, [r4, #0]
	if (((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
    deae:	f003 030f 	and.w	r3, r3, #15
    deb2:	2b01      	cmp	r3, #1
    deb4:	d137      	bne.n	df26 <ll_adv_params_set+0xf2>
	    (pdu_type_prev != PDU_ADV_TYPE_DIRECT_IND) &&
    deb6:	f1b9 0f01 	cmp.w	r9, #1
    deba:	f104 0b08 	add.w	fp, r4, #8
    debe:	d003      	beq.n	dec8 <ll_adv_params_set+0x94>
		if (pdu->len == 0U) {
    dec0:	7863      	ldrb	r3, [r4, #1]
    dec2:	b99b      	cbnz	r3, deec <ll_adv_params_set+0xb8>
			adv->ad_data_backup.len = 0U;
    dec4:	f885 6040 	strb.w	r6, [r5, #64]	; 0x40
		pdu->tx_addr = own_addr_type & 0x1;
    dec8:	f00a 0340 	and.w	r3, sl, #64	; 0x40
    decc:	ea43 18c8 	orr.w	r8, r3, r8, lsl #7
    ded0:	7823      	ldrb	r3, [r4, #0]
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
    ded2:	990c      	ldr	r1, [sp, #48]	; 0x30
		pdu->tx_addr = own_addr_type & 0x1;
    ded4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    ded8:	ea48 0803 	orr.w	r8, r8, r3
    dedc:	f884 8000 	strb.w	r8, [r4]
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
    dee0:	2206      	movs	r2, #6
    dee2:	4658      	mov	r0, fp
    dee4:	f009 f9b6 	bl	17254 <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
    dee8:	230c      	movs	r3, #12
    deea:	e027      	b.n	df3c <ll_adv_params_set+0x108>
			LL_ASSERT(pdu->len >=
    deec:	2b05      	cmp	r3, #5
    deee:	d80c      	bhi.n	df0a <ll_adv_params_set+0xd6>
    def0:	4a2b      	ldr	r2, [pc, #172]	; (dfa0 <ll_adv_params_set+0x16c>)
    def2:	492c      	ldr	r1, [pc, #176]	; (dfa4 <ll_adv_params_set+0x170>)
    def4:	482c      	ldr	r0, [pc, #176]	; (dfa8 <ll_adv_params_set+0x174>)
    def6:	f44f 73ce 	mov.w	r3, #412	; 0x19c
    defa:	f008 fb7e 	bl	165fa <printk>
    defe:	4040      	eors	r0, r0
    df00:	f380 8811 	msr	BASEPRI, r0
    df04:	f04f 0003 	mov.w	r0, #3
    df08:	df02      	svc	2
			adv->ad_data_backup.len = pdu->len -
    df0a:	7862      	ldrb	r2, [r4, #1]
			memcpy(adv->ad_data_backup.data, pdu->adv_ind.data,
    df0c:	4827      	ldr	r0, [pc, #156]	; (dfac <ll_adv_params_set+0x178>)
			adv->ad_data_backup.len = pdu->len -
    df0e:	3a06      	subs	r2, #6
    df10:	b2d2      	uxtb	r2, r2
    df12:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
			memcpy(adv->ad_data_backup.data, pdu->adv_ind.data,
    df16:	4659      	mov	r1, fp
    df18:	f009 f99c 	bl	17254 <memcpy>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    df1c:	7823      	ldrb	r3, [r4, #0]
    df1e:	f003 030f 	and.w	r3, r3, #15
    df22:	2b01      	cmp	r3, #1
    df24:	d0d0      	beq.n	dec8 <ll_adv_params_set+0x94>
	} else if (pdu->len == 0) {
    df26:	7862      	ldrb	r2, [r4, #1]
		pdu->tx_addr = own_addr_type & 0x1;
    df28:	f007 0701 	and.w	r7, r7, #1
	} else if (pdu->len == 0) {
    df2c:	b942      	cbnz	r2, df40 <ll_adv_params_set+0x10c>
		pdu->tx_addr = own_addr_type & 0x1;
    df2e:	7823      	ldrb	r3, [r4, #0]
    df30:	f367 1386 	bfi	r3, r7, #6, #1
		pdu->rx_addr = 0;
    df34:	f362 13c7 	bfi	r3, r2, #7, #1
    df38:	7023      	strb	r3, [r4, #0]
		pdu->len = BDADDR_SIZE;
    df3a:	2306      	movs	r3, #6
		pdu->len = sizeof(struct pdu_adv_direct_ind);
    df3c:	7063      	strb	r3, [r4, #1]
    df3e:	e013      	b.n	df68 <ll_adv_params_set+0x134>
		if (((pdu_type_prev == PDU_ADV_TYPE_DIRECT_IND) ||
    df40:	f1b9 0f01 	cmp.w	r9, #1
    df44:	d10a      	bne.n	df5c <ll_adv_params_set+0x128>
			memcpy(pdu->adv_ind.data, adv->ad_data_backup.data,
    df46:	f895 2040 	ldrb.w	r2, [r5, #64]	; 0x40
    df4a:	4918      	ldr	r1, [pc, #96]	; (dfac <ll_adv_params_set+0x178>)
    df4c:	f104 0008 	add.w	r0, r4, #8
    df50:	f009 f980 	bl	17254 <memcpy>
			pdu->len = offsetof(struct pdu_adv_adv_ind, data) +
    df54:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    df58:	3306      	adds	r3, #6
    df5a:	7063      	strb	r3, [r4, #1]
		pdu->tx_addr = own_addr_type & 0x1;
    df5c:	7823      	ldrb	r3, [r4, #0]
    df5e:	f367 1386 	bfi	r3, r7, #6, #1
		pdu->rx_addr = 0;
    df62:	f36f 13c7 	bfc	r3, #7, #1
    df66:	7023      	strb	r3, [r4, #0]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    df68:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
    df6c:	61ed      	str	r5, [r5, #28]
    df6e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    df72:	f00a 0a40 	and.w	sl, sl, #64	; 0x40
    df76:	6bab      	ldr	r3, [r5, #56]	; 0x38
		if (pdu->len == 0) {
    df78:	785a      	ldrb	r2, [r3, #1]
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    df7a:	f04a 0a04 	orr.w	sl, sl, #4
    df7e:	f883 a000 	strb.w	sl, [r3]
		if (pdu->len == 0) {
    df82:	b912      	cbnz	r2, df8a <ll_adv_params_set+0x156>
			pdu->len = BDADDR_SIZE;
    df84:	2106      	movs	r1, #6
    df86:	7059      	strb	r1, [r3, #1]
	return 0;
    df88:	4616      	mov	r6, r2
}
    df8a:	4630      	mov	r0, r6
    df8c:	b003      	add	sp, #12
    df8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    df92:	260c      	movs	r6, #12
    df94:	e7f9      	b.n	df8a <ll_adv_params_set+0x156>
    df96:	bf00      	nop
    df98:	2000235c 	.word	0x2000235c
    df9c:	0001f29f 	.word	0x0001f29f
    dfa0:	000206ad 	.word	0x000206ad
    dfa4:	0002078f 	.word	0x0002078f
    dfa8:	0002023c 	.word	0x0002023c
    dfac:	2000239d 	.word	0x2000239d

0000dfb0 <ull_adv_reset_finalize>:
{
    dfb0:	b510      	push	{r4, lr}
		lll_adv_data_reset(&lll->adv_data);
    dfb2:	4c06      	ldr	r4, [pc, #24]	; (dfcc <ull_adv_reset_finalize+0x1c>)
    dfb4:	f104 0028 	add.w	r0, r4, #40	; 0x28
    dfb8:	f00e fce2 	bl	1c980 <lll_adv_data_reset>
		lll_adv_data_reset(&lll->scan_rsp);
    dfbc:	f104 0034 	add.w	r0, r4, #52	; 0x34
    dfc0:	f00e fcde 	bl	1c980 <lll_adv_data_reset>
}
    dfc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	err = init_reset();
    dfc8:	f7ff be86 	b.w	dcd8 <init_reset>
    dfcc:	2000235c 	.word	0x2000235c

0000dfd0 <ull_adv_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    dfd0:	4b03      	ldr	r3, [pc, #12]	; (dfe0 <ull_adv_handle_get+0x10>)
    dfd2:	1ac0      	subs	r0, r0, r3
    dfd4:	236c      	movs	r3, #108	; 0x6c
    dfd6:	fbb0 f0f3 	udiv	r0, r0, r3
}
    dfda:	b280      	uxth	r0, r0
    dfdc:	4770      	bx	lr
    dfde:	bf00      	nop
    dfe0:	2000235c 	.word	0x2000235c

0000dfe4 <ull_adv_lll_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    dfe4:	6800      	ldr	r0, [r0, #0]
    dfe6:	4b03      	ldr	r3, [pc, #12]	; (dff4 <ull_adv_lll_handle_get+0x10>)
    dfe8:	1ac0      	subs	r0, r0, r3
    dfea:	236c      	movs	r3, #108	; 0x6c
    dfec:	fbb0 f0f3 	udiv	r0, r0, r3
}
    dff0:	b280      	uxth	r0, r0
    dff2:	4770      	bx	lr
    dff4:	2000235c 	.word	0x2000235c

0000dff8 <ull_adv_is_enabled_get>:
	if (handle >= BT_CTLR_ADV_SET) {
    dff8:	b938      	cbnz	r0, e00a <ull_adv_is_enabled_get+0x12>
	if (!adv || !adv->is_enabled) {
    dffa:	4805      	ldr	r0, [pc, #20]	; (e010 <ull_adv_is_enabled_get+0x18>)
    dffc:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
	return &ll_adv[handle];
    e000:	f013 0f01 	tst.w	r3, #1
    e004:	bf08      	it	eq
    e006:	2000      	moveq	r0, #0
    e008:	4770      	bx	lr
		return NULL;
    e00a:	2000      	movs	r0, #0
}
    e00c:	4770      	bx	lr
    e00e:	bf00      	nop
    e010:	2000235c 	.word	0x2000235c

0000e014 <disable.constprop.0>:
static inline uint8_t disable(uint8_t handle)
    e014:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	adv = ull_adv_is_enabled_get(handle);
    e016:	2000      	movs	r0, #0
    e018:	f7ff ffee 	bl	dff8 <ull_adv_is_enabled_get>
	if (!adv) {
    e01c:	4604      	mov	r4, r0
    e01e:	2800      	cmp	r0, #0
    e020:	d037      	beq.n	e092 <disable.constprop.0+0x7e>
	if (adv->lll.conn) {
    e022:	6a03      	ldr	r3, [r0, #32]
    e024:	bb4b      	cbnz	r3, e07a <disable.constprop.0+0x66>
	mark = ull_disable_mark(adv);
    e026:	4620      	mov	r0, r4
    e028:	f7ff f90a 	bl	d240 <ull_disable_mark>
	LL_ASSERT(mark == adv);
    e02c:	4284      	cmp	r4, r0
    e02e:	d132      	bne.n	e096 <disable.constprop.0+0x82>
	if (adv->lll.is_hdcd) {
    e030:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    e034:	07db      	lsls	r3, r3, #31
    e036:	d53c      	bpl.n	e0b2 <disable.constprop.0+0x9e>
		ret_cb = TICKER_STATUS_BUSY;
    e038:	2302      	movs	r3, #2
    e03a:	9303      	str	r3, [sp, #12]
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    e03c:	ab03      	add	r3, sp, #12
    e03e:	9300      	str	r3, [sp, #0]
    e040:	2103      	movs	r1, #3
    e042:	4b40      	ldr	r3, [pc, #256]	; (e144 <disable.constprop.0+0x130>)
    e044:	2201      	movs	r2, #1
    e046:	2000      	movs	r0, #0
    e048:	f7fd fd48 	bl	badc <ticker_stop>
		ret = ull_ticker_status_take(ret, &ret_cb);
    e04c:	a903      	add	r1, sp, #12
    e04e:	f7ff f8d1 	bl	d1f4 <ull_ticker_status_take>
		if (ret) {
    e052:	b370      	cbz	r0, e0b2 <disable.constprop.0+0x9e>
			mark = ull_disable_unmark(adv);
    e054:	4620      	mov	r0, r4
    e056:	f7ff f8fb 	bl	d250 <ull_disable_unmark>
			LL_ASSERT(mark == adv);
    e05a:	4284      	cmp	r4, r0
    e05c:	d018      	beq.n	e090 <disable.constprop.0+0x7c>
    e05e:	f640 230a 	movw	r3, #2570	; 0xa0a
		LL_ASSERT(mark == adv);
    e062:	4a39      	ldr	r2, [pc, #228]	; (e148 <disable.constprop.0+0x134>)
    e064:	4939      	ldr	r1, [pc, #228]	; (e14c <disable.constprop.0+0x138>)
    e066:	483a      	ldr	r0, [pc, #232]	; (e150 <disable.constprop.0+0x13c>)
    e068:	f008 fac7 	bl	165fa <printk>
    e06c:	4040      	eors	r0, r0
    e06e:	f380 8811 	msr	BASEPRI, r0
    e072:	f04f 0003 	mov.w	r0, #3
    e076:	df02      	svc	2
    e078:	e00a      	b.n	e090 <disable.constprop.0+0x7c>
		adv->lll.conn->periph.cancelled = 1U;
    e07a:	f893 2020 	ldrb.w	r2, [r3, #32]
    e07e:	f042 0202 	orr.w	r2, r2, #2
    e082:	f883 2020 	strb.w	r2, [r3, #32]
		if (unlikely(adv->lll.conn->periph.initiated)) {
    e086:	6a03      	ldr	r3, [r0, #32]
    e088:	f893 3020 	ldrb.w	r3, [r3, #32]
    e08c:	07da      	lsls	r2, r3, #31
    e08e:	d5ca      	bpl.n	e026 <disable.constprop.0+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
    e090:	200c      	movs	r0, #12
}
    e092:	b004      	add	sp, #16
    e094:	bd10      	pop	{r4, pc}
	LL_ASSERT(mark == adv);
    e096:	4a2c      	ldr	r2, [pc, #176]	; (e148 <disable.constprop.0+0x134>)
    e098:	492c      	ldr	r1, [pc, #176]	; (e14c <disable.constprop.0+0x138>)
    e09a:	482d      	ldr	r0, [pc, #180]	; (e150 <disable.constprop.0+0x13c>)
    e09c:	f640 13ff 	movw	r3, #2559	; 0x9ff
    e0a0:	f008 faab 	bl	165fa <printk>
    e0a4:	4040      	eors	r0, r0
    e0a6:	f380 8811 	msr	BASEPRI, r0
    e0aa:	f04f 0003 	mov.w	r0, #3
    e0ae:	df02      	svc	2
    e0b0:	e7be      	b.n	e030 <disable.constprop.0+0x1c>
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    e0b2:	ab03      	add	r3, sp, #12
	ret_cb = TICKER_STATUS_BUSY;
    e0b4:	2202      	movs	r2, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    e0b6:	9300      	str	r3, [sp, #0]
    e0b8:	2103      	movs	r1, #3
    e0ba:	4b22      	ldr	r3, [pc, #136]	; (e144 <disable.constprop.0+0x130>)
	ret_cb = TICKER_STATUS_BUSY;
    e0bc:	9203      	str	r2, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    e0be:	2000      	movs	r0, #0
    e0c0:	f7fd fd0c 	bl	badc <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
    e0c4:	a903      	add	r1, sp, #12
    e0c6:	f7ff f895 	bl	d1f4 <ull_ticker_status_take>
	if (ret) {
    e0ca:	b138      	cbz	r0, e0dc <disable.constprop.0+0xc8>
		mark = ull_disable_unmark(adv);
    e0cc:	4620      	mov	r0, r4
    e0ce:	f7ff f8bf 	bl	d250 <ull_disable_unmark>
		LL_ASSERT(mark == adv);
    e0d2:	4284      	cmp	r4, r0
    e0d4:	d0dc      	beq.n	e090 <disable.constprop.0+0x7c>
    e0d6:	f640 2318 	movw	r3, #2584	; 0xa18
    e0da:	e7c2      	b.n	e062 <disable.constprop.0+0x4e>
	err = ull_disable(&adv->lll);
    e0dc:	f104 001c 	add.w	r0, r4, #28
    e0e0:	f7ff f8e6 	bl	d2b0 <ull_disable>
	LL_ASSERT(!err || (err == -EALREADY));
    e0e4:	b170      	cbz	r0, e104 <disable.constprop.0+0xf0>
    e0e6:	3078      	adds	r0, #120	; 0x78
    e0e8:	d00c      	beq.n	e104 <disable.constprop.0+0xf0>
    e0ea:	4a17      	ldr	r2, [pc, #92]	; (e148 <disable.constprop.0+0x134>)
    e0ec:	4919      	ldr	r1, [pc, #100]	; (e154 <disable.constprop.0+0x140>)
    e0ee:	4818      	ldr	r0, [pc, #96]	; (e150 <disable.constprop.0+0x13c>)
    e0f0:	f640 231e 	movw	r3, #2590	; 0xa1e
    e0f4:	f008 fa81 	bl	165fa <printk>
    e0f8:	4040      	eors	r0, r0
    e0fa:	f380 8811 	msr	BASEPRI, r0
    e0fe:	f04f 0003 	mov.w	r0, #3
    e102:	df02      	svc	2
	mark = ull_disable_unmark(adv);
    e104:	4620      	mov	r0, r4
    e106:	f7ff f8a3 	bl	d250 <ull_disable_unmark>
	LL_ASSERT(mark == adv);
    e10a:	4284      	cmp	r4, r0
    e10c:	d00c      	beq.n	e128 <disable.constprop.0+0x114>
    e10e:	4a0e      	ldr	r2, [pc, #56]	; (e148 <disable.constprop.0+0x134>)
    e110:	490e      	ldr	r1, [pc, #56]	; (e14c <disable.constprop.0+0x138>)
    e112:	480f      	ldr	r0, [pc, #60]	; (e150 <disable.constprop.0+0x13c>)
    e114:	f640 2321 	movw	r3, #2593	; 0xa21
    e118:	f008 fa6f 	bl	165fa <printk>
    e11c:	4040      	eors	r0, r0
    e11e:	f380 8811 	msr	BASEPRI, r0
    e122:	f04f 0003 	mov.w	r0, #3
    e126:	df02      	svc	2
	if (adv->lll.conn) {
    e128:	6a23      	ldr	r3, [r4, #32]
    e12a:	b113      	cbz	r3, e132 <disable.constprop.0+0x11e>
		conn_release(adv);
    e12c:	4620      	mov	r0, r4
    e12e:	f7ff fd19 	bl	db64 <conn_release>
	adv->is_enabled = 0U;
    e132:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
    e136:	f36f 0300 	bfc	r3, #0, #1
    e13a:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
	return 0;
    e13e:	2000      	movs	r0, #0
    e140:	e7a7      	b.n	e092 <disable.constprop.0+0x7e>
    e142:	bf00      	nop
    e144:	0000cc49 	.word	0x0000cc49
    e148:	000206ad 	.word	0x000206ad
    e14c:	000207cd 	.word	0x000207cd
    e150:	0002023c 	.word	0x0002023c
    e154:	000207d9 	.word	0x000207d9

0000e158 <ll_adv_data_set>:
{
    e158:	460a      	mov	r2, r1
	return ull_adv_data_set(adv, len, data);
    e15a:	4601      	mov	r1, r0
    e15c:	4801      	ldr	r0, [pc, #4]	; (e164 <ll_adv_data_set+0xc>)
    e15e:	f00e b915 	b.w	1c38c <ull_adv_data_set>
    e162:	bf00      	nop
    e164:	2000235c 	.word	0x2000235c

0000e168 <ll_adv_scan_rsp_set>:
{
    e168:	460a      	mov	r2, r1
	return ull_scan_rsp_set(adv, len, data);
    e16a:	4601      	mov	r1, r0
    e16c:	4801      	ldr	r0, [pc, #4]	; (e174 <ll_adv_scan_rsp_set+0xc>)
    e16e:	f00e b960 	b.w	1c432 <ull_scan_rsp_set>
    e172:	bf00      	nop
    e174:	2000235c 	.word	0x2000235c

0000e178 <ticker_cb>:
}

static void ticker_cb(uint32_t ticks_at_expire, uint32_t ticks_drift,
		      uint32_t remainder, uint16_t lazy, uint8_t force,
		      void *param)
{
    e178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e17a:	461d      	mov	r5, r3
    e17c:	9b07      	ldr	r3, [sp, #28]
	uint8_t ref;

	DEBUG_RADIO_PREPARE_O(1);

	scan = param;
	lll = &scan->lll;
    e17e:	461c      	mov	r4, r3
{
    e180:	4607      	mov	r7, r0
    e182:	f814 1b1c 	ldrb.w	r1, [r4], #28
    e186:	3101      	adds	r1, #1
    e188:	b2c9      	uxtb	r1, r1
    e18a:	4616      	mov	r6, r2
    e18c:	7019      	strb	r1, [r3, #0]

	/* Increment prepare reference count */
	ref = ull_ref_inc(&scan->ull);
	LL_ASSERT(ref);
    e18e:	b961      	cbnz	r1, e1aa <ticker_cb+0x32>
    e190:	4a15      	ldr	r2, [pc, #84]	; (e1e8 <ticker_cb+0x70>)
    e192:	4916      	ldr	r1, [pc, #88]	; (e1ec <ticker_cb+0x74>)
    e194:	4816      	ldr	r0, [pc, #88]	; (e1f0 <ticker_cb+0x78>)
    e196:	f240 23db 	movw	r3, #731	; 0x2db
    e19a:	f008 fa2e 	bl	165fa <printk>
    e19e:	4040      	eors	r0, r0
    e1a0:	f380 8811 	msr	BASEPRI, r0
    e1a4:	f04f 0003 	mov.w	r0, #3
    e1a8:	df02      	svc	2

	/* Append timing parameters */
	p.ticks_at_expire = ticks_at_expire;
    e1aa:	4912      	ldr	r1, [pc, #72]	; (e1f4 <ticker_cb+0x7c>)
	p.remainder = remainder;
	p.lazy = lazy;
	p.param = lll;
	p.force = force;
    e1ac:	f89d 3018 	ldrb.w	r3, [sp, #24]
    e1b0:	728b      	strb	r3, [r1, #10]
	mfy.param = &p;
    e1b2:	4b11      	ldr	r3, [pc, #68]	; (e1f8 <ticker_cb+0x80>)
	p.lazy = lazy;
    e1b4:	810d      	strh	r5, [r1, #8]

	/* Kick LLL prepare */
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
    e1b6:	2200      	movs	r2, #0
	p.remainder = remainder;
    e1b8:	e9c1 7600 	strd	r7, r6, [r1]
	p.param = lll;
    e1bc:	60cc      	str	r4, [r1, #12]
	mfy.param = &p;
    e1be:	6099      	str	r1, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
    e1c0:	2001      	movs	r0, #1
    e1c2:	4611      	mov	r1, r2
    e1c4:	f7fc fec6 	bl	af54 <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
    e1c8:	b160      	cbz	r0, e1e4 <ticker_cb+0x6c>
    e1ca:	4a07      	ldr	r2, [pc, #28]	; (e1e8 <ticker_cb+0x70>)
    e1cc:	490b      	ldr	r1, [pc, #44]	; (e1fc <ticker_cb+0x84>)
    e1ce:	4808      	ldr	r0, [pc, #32]	; (e1f0 <ticker_cb+0x78>)
    e1d0:	f44f 733a 	mov.w	r3, #744	; 0x2e8
    e1d4:	f008 fa11 	bl	165fa <printk>
    e1d8:	4040      	eors	r0, r0
    e1da:	f380 8811 	msr	BASEPRI, r0
    e1de:	f04f 0003 	mov.w	r0, #3
    e1e2:	df02      	svc	2
			  (ret == TICKER_STATUS_BUSY));
	}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	DEBUG_RADIO_PREPARE_O(1);
}
    e1e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e1e6:	bf00      	nop
    e1e8:	000207ef 	.word	0x000207ef
    e1ec:	0002078b 	.word	0x0002078b
    e1f0:	0002023c 	.word	0x0002023c
    e1f4:	20002420 	.word	0x20002420
    e1f8:	200006c0 	.word	0x200006c0
    e1fc:	00020608 	.word	0x00020608

0000e200 <ull_scan_disable>:
	err = ull_ticker_stop_with_mark(TICKER_ID_SCAN_BASE + handle,
    e200:	3004      	adds	r0, #4
{
    e202:	b508      	push	{r3, lr}
	err = ull_ticker_stop_with_mark(TICKER_ID_SCAN_BASE + handle,
    e204:	f101 021c 	add.w	r2, r1, #28
    e208:	b2c0      	uxtb	r0, r0
    e20a:	f7ff f88f 	bl	d32c <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
    e20e:	b178      	cbz	r0, e230 <ull_scan_disable+0x30>
    e210:	3078      	adds	r0, #120	; 0x78
    e212:	d00c      	beq.n	e22e <ull_scan_disable+0x2e>
    e214:	4a07      	ldr	r2, [pc, #28]	; (e234 <ull_scan_disable+0x34>)
    e216:	4908      	ldr	r1, [pc, #32]	; (e238 <ull_scan_disable+0x38>)
    e218:	4808      	ldr	r0, [pc, #32]	; (e23c <ull_scan_disable+0x3c>)
    e21a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
    e21e:	f008 f9ec 	bl	165fa <printk>
    e222:	4040      	eors	r0, r0
    e224:	f380 8811 	msr	BASEPRI, r0
    e228:	f04f 0003 	mov.w	r0, #3
    e22c:	df02      	svc	2
		return BT_HCI_ERR_CMD_DISALLOWED;
    e22e:	200c      	movs	r0, #12
}
    e230:	bd08      	pop	{r3, pc}
    e232:	bf00      	nop
    e234:	000207ef 	.word	0x000207ef
    e238:	0002082f 	.word	0x0002082f
    e23c:	0002023c 	.word	0x0002023c

0000e240 <ull_scan_lll_handle_get>:
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
    e240:	6800      	ldr	r0, [r0, #0]
    e242:	4b03      	ldr	r3, [pc, #12]	; (e250 <ull_scan_lll_handle_get+0x10>)
    e244:	1ac0      	subs	r0, r0, r3
    e246:	2334      	movs	r3, #52	; 0x34
    e248:	fbb0 f0f3 	udiv	r0, r0, r3
}
    e24c:	b2c0      	uxtb	r0, r0
    e24e:	4770      	bx	lr
    e250:	200023ec 	.word	0x200023ec

0000e254 <ull_scan_is_enabled_get>:
	if (handle >= BT_CTLR_SCAN_SET) {
    e254:	b938      	cbnz	r0, e266 <ull_scan_is_enabled_get+0x12>
	if (!scan || !scan->is_enabled) {
    e256:	4805      	ldr	r0, [pc, #20]	; (e26c <ull_scan_is_enabled_get+0x18>)
    e258:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
	return &ll_scan[handle];
    e25c:	f013 0f01 	tst.w	r3, #1
    e260:	bf08      	it	eq
    e262:	2000      	moveq	r0, #0
    e264:	4770      	bx	lr
		return NULL;
    e266:	2000      	movs	r0, #0
}
    e268:	4770      	bx	lr
    e26a:	bf00      	nop
    e26c:	200023ec 	.word	0x200023ec

0000e270 <ull_scan_is_disabled_get>:
	if (!scan || scan->is_enabled) {
    e270:	4a04      	ldr	r2, [pc, #16]	; (e284 <ull_scan_is_disabled_get+0x14>)
    e272:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
    e276:	f003 0301 	and.w	r3, r3, #1
		return NULL;
    e27a:	4303      	orrs	r3, r0
}
    e27c:	bf0c      	ite	eq
    e27e:	4610      	moveq	r0, r2
    e280:	2000      	movne	r0, #0
    e282:	4770      	bx	lr
    e284:	200023ec 	.word	0x200023ec

0000e288 <cpr_active_check_and_set>:
	if (!conn_upd_curr) {
    e288:	4b02      	ldr	r3, [pc, #8]	; (e294 <cpr_active_check_and_set+0xc>)
    e28a:	681a      	ldr	r2, [r3, #0]
    e28c:	b902      	cbnz	r2, e290 <cpr_active_check_and_set+0x8>
		conn_upd_curr = conn;
    e28e:	6018      	str	r0, [r3, #0]
}
    e290:	4770      	bx	lr
    e292:	bf00      	nop
    e294:	20002434 	.word	0x20002434

0000e298 <ctrl_tx_rsp_mem_acquire>:
{
    e298:	b538      	push	{r3, r4, r5, lr}
	if (conn->common.txn_lock) {
    e29a:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
    e29e:	079b      	lsls	r3, r3, #30
{
    e2a0:	4604      	mov	r4, r0
    e2a2:	4615      	mov	r5, r2
	if (conn->common.txn_lock) {
    e2a4:	d504      	bpl.n	e2b0 <ctrl_tx_rsp_mem_acquire+0x18>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
    e2a6:	2301      	movs	r3, #1
		*err = 0U;
    e2a8:	2000      	movs	r0, #0
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
    e2aa:	710b      	strb	r3, [r1, #4]
		*err = 0U;
    e2ac:	6010      	str	r0, [r2, #0]
}
    e2ae:	bd38      	pop	{r3, r4, r5, pc}
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    e2b0:	4807      	ldr	r0, [pc, #28]	; (e2d0 <ctrl_tx_rsp_mem_acquire+0x38>)
    e2b2:	f00d fc0e 	bl	1bad2 <mem_acquire>
	if (!tx) {
    e2b6:	b918      	cbnz	r0, e2c0 <ctrl_tx_rsp_mem_acquire+0x28>
		*err = -ENOBUFS;
    e2b8:	f06f 0368 	mvn.w	r3, #104	; 0x68
    e2bc:	602b      	str	r3, [r5, #0]
		return NULL;
    e2be:	e7f6      	b.n	e2ae <ctrl_tx_rsp_mem_acquire+0x16>
	conn->common.txn_lock = 1U;
    e2c0:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
    e2c4:	f043 0302 	orr.w	r3, r3, #2
    e2c8:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
	return tx;
    e2cc:	e7ef      	b.n	e2ae <ctrl_tx_rsp_mem_acquire+0x16>
    e2ce:	bf00      	nop
    e2d0:	200024c8 	.word	0x200024c8

0000e2d4 <init_reset>:
{
    e2d4:	b508      	push	{r3, lr}
	mem_init(conn_pool, sizeof(struct ll_conn),
    e2d6:	480d      	ldr	r0, [pc, #52]	; (e30c <init_reset+0x38>)
    e2d8:	4b0d      	ldr	r3, [pc, #52]	; (e310 <init_reset+0x3c>)
    e2da:	2201      	movs	r2, #1
    e2dc:	f44f 719c 	mov.w	r1, #312	; 0x138
    e2e0:	f00d fbcf 	bl	1ba82 <mem_init>
	mem_init(mem_conn_tx.pool, CONN_TX_BUF_SIZE, CONFIG_BT_BUF_ACL_TX_COUNT,
    e2e4:	4b0b      	ldr	r3, [pc, #44]	; (e314 <init_reset+0x40>)
    e2e6:	2203      	movs	r2, #3
    e2e8:	1d18      	adds	r0, r3, #4
    e2ea:	2124      	movs	r1, #36	; 0x24
    e2ec:	f00d fbc9 	bl	1ba82 <mem_init>
	mem_init(mem_conn_tx_ctrl.pool, CONN_TX_CTRL_BUF_SIZE,
    e2f0:	4b09      	ldr	r3, [pc, #36]	; (e318 <init_reset+0x44>)
    e2f2:	2204      	movs	r2, #4
    e2f4:	1898      	adds	r0, r3, r2
    e2f6:	212c      	movs	r1, #44	; 0x2c
    e2f8:	f00d fbc3 	bl	1ba82 <mem_init>
	mem_init(mem_link_tx.pool, sizeof(memq_link_t),
    e2fc:	4b07      	ldr	r3, [pc, #28]	; (e31c <init_reset+0x48>)
    e2fe:	2207      	movs	r2, #7
    e300:	1d18      	adds	r0, r3, #4
    e302:	2108      	movs	r1, #8
    e304:	f00d fbbd 	bl	1ba82 <mem_init>
}
    e308:	2000      	movs	r0, #0
    e30a:	bd08      	pop	{r3, pc}
    e30c:	20001478 	.word	0x20001478
    e310:	20002430 	.word	0x20002430
    e314:	20002458 	.word	0x20002458
    e318:	200024c8 	.word	0x200024c8
    e31c:	2000257c 	.word	0x2000257c

0000e320 <ticker_stop_op_cb>:
{
    e320:	b510      	push	{r4, lr}
    e322:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    e324:	b160      	cbz	r0, e340 <ticker_stop_op_cb+0x20>
    e326:	4a11      	ldr	r2, [pc, #68]	; (e36c <ticker_stop_op_cb+0x4c>)
    e328:	4911      	ldr	r1, [pc, #68]	; (e370 <ticker_stop_op_cb+0x50>)
    e32a:	4812      	ldr	r0, [pc, #72]	; (e374 <ticker_stop_op_cb+0x54>)
    e32c:	f640 137a 	movw	r3, #2426	; 0x97a
    e330:	f008 f963 	bl	165fa <printk>
    e334:	4040      	eors	r0, r0
    e336:	f380 8811 	msr	BASEPRI, r0
    e33a:	f04f 0003 	mov.w	r0, #3
    e33e:	df02      	svc	2
	mfy.param = param;
    e340:	4b0d      	ldr	r3, [pc, #52]	; (e378 <ticker_stop_op_cb+0x58>)
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
    e342:	2200      	movs	r2, #0
    e344:	2101      	movs	r1, #1
    e346:	2002      	movs	r0, #2
	mfy.param = param;
    e348:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
    e34a:	f7fc fe03 	bl	af54 <mayfly_enqueue>
	LL_ASSERT(!ret);
    e34e:	b160      	cbz	r0, e36a <ticker_stop_op_cb+0x4a>
    e350:	4a06      	ldr	r2, [pc, #24]	; (e36c <ticker_stop_op_cb+0x4c>)
    e352:	490a      	ldr	r1, [pc, #40]	; (e37c <ticker_stop_op_cb+0x5c>)
    e354:	4807      	ldr	r0, [pc, #28]	; (e374 <ticker_stop_op_cb+0x54>)
    e356:	f44f 6318 	mov.w	r3, #2432	; 0x980
    e35a:	f008 f94e 	bl	165fa <printk>
    e35e:	4040      	eors	r0, r0
    e360:	f380 8811 	msr	BASEPRI, r0
    e364:	f04f 0003 	mov.w	r0, #3
    e368:	df02      	svc	2
}
    e36a:	bd10      	pop	{r4, pc}
    e36c:	00020847 	.word	0x00020847
    e370:	00020a0f 	.word	0x00020a0f
    e374:	0002023c 	.word	0x0002023c
    e378:	20000758 	.word	0x20000758
    e37c:	00020608 	.word	0x00020608

0000e380 <disabled_cb>:
{
    e380:	b508      	push	{r3, lr}
	mfy.param = param;
    e382:	4b0b      	ldr	r3, [pc, #44]	; (e3b0 <disabled_cb+0x30>)
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    e384:	2200      	movs	r2, #0
	mfy.param = param;
    e386:	6098      	str	r0, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    e388:	4611      	mov	r1, r2
    e38a:	2001      	movs	r0, #1
    e38c:	f7fc fde2 	bl	af54 <mayfly_enqueue>
	LL_ASSERT(!ret);
    e390:	b160      	cbz	r0, e3ac <disabled_cb+0x2c>
    e392:	4a08      	ldr	r2, [pc, #32]	; (e3b4 <disabled_cb+0x34>)
    e394:	4908      	ldr	r1, [pc, #32]	; (e3b8 <disabled_cb+0x38>)
    e396:	4809      	ldr	r0, [pc, #36]	; (e3bc <disabled_cb+0x3c>)
    e398:	f640 13ac 	movw	r3, #2476	; 0x9ac
    e39c:	f008 f92d 	bl	165fa <printk>
    e3a0:	4040      	eors	r0, r0
    e3a2:	f380 8811 	msr	BASEPRI, r0
    e3a6:	f04f 0003 	mov.w	r0, #3
    e3aa:	df02      	svc	2
}
    e3ac:	bd08      	pop	{r3, pc}
    e3ae:	bf00      	nop
    e3b0:	20000738 	.word	0x20000738
    e3b4:	00020847 	.word	0x00020847
    e3b8:	00020608 	.word	0x00020608
    e3bc:	0002023c 	.word	0x0002023c

0000e3c0 <conn_disable>:
{
    e3c0:	b538      	push	{r3, r4, r5, lr}
    e3c2:	4604      	mov	r4, r0
	return hdr->ref;
    e3c4:	f810 3b1c 	ldrb.w	r3, [r0], #28
	if (ull_ref_get(hdr)) {
    e3c8:	b34b      	cbz	r3, e41e <conn_disable+0x5e>
		mfy.param = &conn->lll;
    e3ca:	4d17      	ldr	r5, [pc, #92]	; (e428 <conn_disable+0x68>)
		LL_ASSERT(!hdr->disabled_cb);
    e3cc:	6963      	ldr	r3, [r4, #20]
		mfy.param = &conn->lll;
    e3ce:	60a8      	str	r0, [r5, #8]
		LL_ASSERT(!hdr->disabled_cb);
    e3d0:	b163      	cbz	r3, e3ec <conn_disable+0x2c>
    e3d2:	4a16      	ldr	r2, [pc, #88]	; (e42c <conn_disable+0x6c>)
    e3d4:	4916      	ldr	r1, [pc, #88]	; (e430 <conn_disable+0x70>)
    e3d6:	4817      	ldr	r0, [pc, #92]	; (e434 <conn_disable+0x74>)
    e3d8:	f640 1395 	movw	r3, #2453	; 0x995
    e3dc:	f008 f90d 	bl	165fa <printk>
    e3e0:	4040      	eors	r0, r0
    e3e2:	f380 8811 	msr	BASEPRI, r0
    e3e6:	f04f 0003 	mov.w	r0, #3
    e3ea:	df02      	svc	2
		hdr->disabled_param = mfy.param;
    e3ec:	68ab      	ldr	r3, [r5, #8]
    e3ee:	61a3      	str	r3, [r4, #24]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    e3f0:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
    e3f2:	4b11      	ldr	r3, [pc, #68]	; (e438 <conn_disable+0x78>)
    e3f4:	6163      	str	r3, [r4, #20]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    e3f6:	4611      	mov	r1, r2
    e3f8:	4b0b      	ldr	r3, [pc, #44]	; (e428 <conn_disable+0x68>)
    e3fa:	2001      	movs	r0, #1
    e3fc:	f7fc fdaa 	bl	af54 <mayfly_enqueue>
		LL_ASSERT(!ret);
    e400:	b160      	cbz	r0, e41c <conn_disable+0x5c>
    e402:	4a0a      	ldr	r2, [pc, #40]	; (e42c <conn_disable+0x6c>)
    e404:	490d      	ldr	r1, [pc, #52]	; (e43c <conn_disable+0x7c>)
    e406:	480b      	ldr	r0, [pc, #44]	; (e434 <conn_disable+0x74>)
    e408:	f640 139c 	movw	r3, #2460	; 0x99c
    e40c:	f008 f8f5 	bl	165fa <printk>
    e410:	4040      	eors	r0, r0
    e412:	f380 8811 	msr	BASEPRI, r0
    e416:	f04f 0003 	mov.w	r0, #3
    e41a:	df02      	svc	2
}
    e41c:	bd38      	pop	{r3, r4, r5, pc}
    e41e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		disabled_cb(&conn->lll);
    e422:	f7ff bfad 	b.w	e380 <disabled_cb>
    e426:	bf00      	nop
    e428:	20000748 	.word	0x20000748
    e42c:	00020847 	.word	0x00020847
    e430:	0002074a 	.word	0x0002074a
    e434:	0002023c 	.word	0x0002023c
    e438:	0000e381 	.word	0x0000e381
    e43c:	00020608 	.word	0x00020608

0000e440 <conn_setup_adv_scan_disabled_cb>:
{
    e440:	b508      	push	{r3, lr}
	lll = *((struct lll_conn **)((uint8_t *)ftr->param +
    e442:	6883      	ldr	r3, [r0, #8]
    e444:	685a      	ldr	r2, [r3, #4]
	switch (lll->role) {
    e446:	7f53      	ldrb	r3, [r2, #29]
    e448:	09db      	lsrs	r3, r3, #7
{
    e44a:	4601      	mov	r1, r0
	switch (lll->role) {
    e44c:	d004      	beq.n	e458 <conn_setup_adv_scan_disabled_cb+0x18>
}
    e44e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		ull_periph_setup(rx, ftr, lll);
    e452:	3108      	adds	r1, #8
    e454:	f7f3 bca0 	b.w	1d98 <ull_periph_setup>
		LL_ASSERT(0);
    e458:	4a06      	ldr	r2, [pc, #24]	; (e474 <conn_setup_adv_scan_disabled_cb+0x34>)
    e45a:	4907      	ldr	r1, [pc, #28]	; (e478 <conn_setup_adv_scan_disabled_cb+0x38>)
    e45c:	4807      	ldr	r0, [pc, #28]	; (e47c <conn_setup_adv_scan_disabled_cb+0x3c>)
    e45e:	f640 03d5 	movw	r3, #2261	; 0x8d5
    e462:	f008 f8ca 	bl	165fa <printk>
    e466:	4040      	eors	r0, r0
    e468:	f380 8811 	msr	BASEPRI, r0
    e46c:	f04f 0003 	mov.w	r0, #3
    e470:	df02      	svc	2
}
    e472:	bd08      	pop	{r3, pc}
    e474:	00020847 	.word	0x00020847
    e478:	00020e86 	.word	0x00020e86
    e47c:	0002023c 	.word	0x0002023c

0000e480 <ticker_start_conn_op_cb>:
{
    e480:	b510      	push	{r4, lr}
    e482:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    e484:	b160      	cbz	r0, e4a0 <ticker_start_conn_op_cb+0x20>
    e486:	4a10      	ldr	r2, [pc, #64]	; (e4c8 <ticker_start_conn_op_cb+0x48>)
    e488:	4910      	ldr	r1, [pc, #64]	; (e4cc <ticker_start_conn_op_cb+0x4c>)
    e48a:	4811      	ldr	r0, [pc, #68]	; (e4d0 <ticker_start_conn_op_cb+0x50>)
    e48c:	f640 03b4 	movw	r3, #2228	; 0x8b4
    e490:	f008 f8b3 	bl	165fa <printk>
    e494:	4040      	eors	r0, r0
    e496:	f380 8811 	msr	BASEPRI, r0
    e49a:	f04f 0003 	mov.w	r0, #3
    e49e:	df02      	svc	2
	p = ull_update_unmark(param);
    e4a0:	4620      	mov	r0, r4
    e4a2:	f7fe fef1 	bl	d288 <ull_update_unmark>
	LL_ASSERT(p == param);
    e4a6:	4284      	cmp	r4, r0
    e4a8:	d00c      	beq.n	e4c4 <ticker_start_conn_op_cb+0x44>
    e4aa:	4a07      	ldr	r2, [pc, #28]	; (e4c8 <ticker_start_conn_op_cb+0x48>)
    e4ac:	4909      	ldr	r1, [pc, #36]	; (e4d4 <ticker_start_conn_op_cb+0x54>)
    e4ae:	4808      	ldr	r0, [pc, #32]	; (e4d0 <ticker_start_conn_op_cb+0x50>)
    e4b0:	f640 03b7 	movw	r3, #2231	; 0x8b7
    e4b4:	f008 f8a1 	bl	165fa <printk>
    e4b8:	4040      	eors	r0, r0
    e4ba:	f380 8811 	msr	BASEPRI, r0
    e4be:	f04f 0003 	mov.w	r0, #3
    e4c2:	df02      	svc	2
}
    e4c4:	bd10      	pop	{r4, pc}
    e4c6:	bf00      	nop
    e4c8:	00020847 	.word	0x00020847
    e4cc:	00020a0f 	.word	0x00020a0f
    e4d0:	0002023c 	.word	0x0002023c
    e4d4:	00020887 	.word	0x00020887

0000e4d8 <ticker_stop_conn_op_cb>:
{
    e4d8:	b510      	push	{r4, lr}
    e4da:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    e4dc:	b160      	cbz	r0, e4f8 <ticker_stop_conn_op_cb+0x20>
    e4de:	4a10      	ldr	r2, [pc, #64]	; (e520 <ticker_stop_conn_op_cb+0x48>)
    e4e0:	4910      	ldr	r1, [pc, #64]	; (e524 <ticker_stop_conn_op_cb+0x4c>)
    e4e2:	4811      	ldr	r0, [pc, #68]	; (e528 <ticker_stop_conn_op_cb+0x50>)
    e4e4:	f640 03aa 	movw	r3, #2218	; 0x8aa
    e4e8:	f008 f887 	bl	165fa <printk>
    e4ec:	4040      	eors	r0, r0
    e4ee:	f380 8811 	msr	BASEPRI, r0
    e4f2:	f04f 0003 	mov.w	r0, #3
    e4f6:	df02      	svc	2
	p = ull_update_mark(param);
    e4f8:	4620      	mov	r0, r4
    e4fa:	f7fe febd 	bl	d278 <ull_update_mark>
	LL_ASSERT(p == param);
    e4fe:	4284      	cmp	r4, r0
    e500:	d00c      	beq.n	e51c <ticker_stop_conn_op_cb+0x44>
    e502:	4a07      	ldr	r2, [pc, #28]	; (e520 <ticker_stop_conn_op_cb+0x48>)
    e504:	4909      	ldr	r1, [pc, #36]	; (e52c <ticker_stop_conn_op_cb+0x54>)
    e506:	4808      	ldr	r0, [pc, #32]	; (e528 <ticker_stop_conn_op_cb+0x50>)
    e508:	f640 03ad 	movw	r3, #2221	; 0x8ad
    e50c:	f008 f875 	bl	165fa <printk>
    e510:	4040      	eors	r0, r0
    e512:	f380 8811 	msr	BASEPRI, r0
    e516:	f04f 0003 	mov.w	r0, #3
    e51a:	df02      	svc	2
}
    e51c:	bd10      	pop	{r4, pc}
    e51e:	bf00      	nop
    e520:	00020847 	.word	0x00020847
    e524:	00020a0f 	.word	0x00020a0f
    e528:	0002023c 	.word	0x0002023c
    e52c:	00020887 	.word	0x00020887

0000e530 <ticker_update_conn_op_cb>:
{
    e530:	b510      	push	{r4, lr}
    e532:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
    e534:	b1a0      	cbz	r0, e560 <ticker_update_conn_op_cb+0x30>
    e536:	f7fe feb5 	bl	d2a4 <ull_update_mark_get>
    e53a:	4284      	cmp	r4, r0
    e53c:	d010      	beq.n	e560 <ticker_update_conn_op_cb+0x30>
    e53e:	f7fe fe95 	bl	d26c <ull_disable_mark_get>
    e542:	4284      	cmp	r4, r0
    e544:	d00c      	beq.n	e560 <ticker_update_conn_op_cb+0x30>
    e546:	4a07      	ldr	r2, [pc, #28]	; (e564 <ticker_update_conn_op_cb+0x34>)
    e548:	4907      	ldr	r1, [pc, #28]	; (e568 <ticker_update_conn_op_cb+0x38>)
    e54a:	4808      	ldr	r0, [pc, #32]	; (e56c <ticker_update_conn_op_cb+0x3c>)
    e54c:	f640 03a1 	movw	r3, #2209	; 0x8a1
    e550:	f008 f853 	bl	165fa <printk>
    e554:	4040      	eors	r0, r0
    e556:	f380 8811 	msr	BASEPRI, r0
    e55a:	f04f 0003 	mov.w	r0, #3
    e55e:	df02      	svc	2
}
    e560:	bd10      	pop	{r4, pc}
    e562:	bf00      	nop
    e564:	00020847 	.word	0x00020847
    e568:	00020892 	.word	0x00020892
    e56c:	0002023c 	.word	0x0002023c

0000e570 <feat_get>:
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    e570:	6841      	ldr	r1, [r0, #4]
    e572:	6803      	ldr	r3, [r0, #0]

	feat = sys_get_le64(features) | ~LL_FEAT_BIT_MASK_VALID;
	feat &= LL_FEAT_BIT_MASK;

	return feat;
}
    e574:	4803      	ldr	r0, [pc, #12]	; (e584 <feat_get+0x14>)
	feat &= LL_FEAT_BIT_MASK;
    e576:	f001 01ff 	and.w	r1, r1, #255	; 0xff
}
    e57a:	4318      	orrs	r0, r3
    e57c:	f041 0110 	orr.w	r1, r1, #16
    e580:	4770      	bx	lr
    e582:	bf00      	nop
    e584:	087830d0 	.word	0x087830d0

0000e588 <ll_conn_acquire>:
	return mem_acquire(&conn_free);
    e588:	4801      	ldr	r0, [pc, #4]	; (e590 <ll_conn_acquire+0x8>)
    e58a:	f00d baa2 	b.w	1bad2 <mem_acquire>
    e58e:	bf00      	nop
    e590:	20002430 	.word	0x20002430

0000e594 <ll_conn_release>:
	mem_release(conn, &conn_free);
    e594:	4901      	ldr	r1, [pc, #4]	; (e59c <ll_conn_release+0x8>)
    e596:	f00d bab5 	b.w	1bb04 <mem_release>
    e59a:	bf00      	nop
    e59c:	20002430 	.word	0x20002430

0000e5a0 <ll_conn_handle_get>:
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
    e5a0:	4902      	ldr	r1, [pc, #8]	; (e5ac <ll_conn_handle_get+0xc>)
    e5a2:	f44f 729c 	mov.w	r2, #312	; 0x138
    e5a6:	f00d bac5 	b.w	1bb34 <mem_index_get>
    e5aa:	bf00      	nop
    e5ac:	20001478 	.word	0x20001478

0000e5b0 <tx_lll_flush>:
{
    e5b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	conn = HDR_LLL2ULL(lll);
    e5b4:	6806      	ldr	r6, [r0, #0]
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
    e5b6:	4d30      	ldr	r5, [pc, #192]	; (e678 <tx_lll_flush+0xc8>)
{
    e5b8:	4604      	mov	r4, r0
	handle = ll_conn_handle_get(conn);
    e5ba:	4630      	mov	r0, r6
    e5bc:	f7ff fff0 	bl	e5a0 <ll_conn_handle_get>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
    e5c0:	f104 073c 	add.w	r7, r4, #60	; 0x3c
	lll_conn_flush(handle, lll);
    e5c4:	4621      	mov	r1, r4
    e5c6:	f00e fb0b 	bl	1cbe0 <lll_conn_flush>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
    e5ca:	6c20      	ldr	r0, [r4, #64]	; 0x40
    e5cc:	aa01      	add	r2, sp, #4
    e5ce:	4639      	mov	r1, r7
    e5d0:	f00d faec 	bl	1bbac <memq_dequeue>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    e5d4:	f105 0804 	add.w	r8, r5, #4
	while (link) {
    e5d8:	b9f0      	cbnz	r0, e618 <tx_lll_flush+0x68>
	LL_ASSERT(rx->hdr.link);
    e5da:	f8d6 30d4 	ldr.w	r3, [r6, #212]	; 0xd4
	rx = (void *)&conn->llcp_terminate.node_rx;
    e5de:	f106 04d4 	add.w	r4, r6, #212	; 0xd4
	LL_ASSERT(rx->hdr.link);
    e5e2:	b963      	cbnz	r3, e5fe <tx_lll_flush+0x4e>
    e5e4:	4a25      	ldr	r2, [pc, #148]	; (e67c <tx_lll_flush+0xcc>)
    e5e6:	4926      	ldr	r1, [pc, #152]	; (e680 <tx_lll_flush+0xd0>)
    e5e8:	4826      	ldr	r0, [pc, #152]	; (e684 <tx_lll_flush+0xd4>)
    e5ea:	f640 13da 	movw	r3, #2522	; 0x9da
    e5ee:	f008 f804 	bl	165fa <printk>
    e5f2:	4040      	eors	r0, r0
    e5f4:	f380 8811 	msr	BASEPRI, r0
    e5f8:	f04f 0003 	mov.w	r0, #3
    e5fc:	df02      	svc	2
	rx->hdr.link = NULL;
    e5fe:	2300      	movs	r3, #0
	link = rx->hdr.link;
    e600:	f8d6 00d4 	ldr.w	r0, [r6, #212]	; 0xd4
	rx->hdr.link = NULL;
    e604:	f8c6 30d4 	str.w	r3, [r6, #212]	; 0xd4
	ull_rx_put(link, rx);
    e608:	4621      	mov	r1, r4
    e60a:	f7fe fef5 	bl	d3f8 <ull_rx_put>
	ull_rx_sched();
    e60e:	f7fe ff03 	bl	d418 <ull_rx_sched>
}
    e612:	b002      	add	sp, #8
    e614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
    e618:	78ea      	ldrb	r2, [r5, #3]
	if (last == count) {
    e61a:	f895 c001 	ldrb.w	ip, [r5, #1]
    e61e:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
    e620:	1c51      	adds	r1, r2, #1
    e622:	b2c9      	uxtb	r1, r1
		last = 0U;
    e624:	458c      	cmp	ip, r1
    e626:	bf08      	it	eq
    e628:	2100      	moveq	r1, #0
	if (last == first) {
    e62a:	428b      	cmp	r3, r1
    e62c:	d10f      	bne.n	e64e <tx_lll_flush+0x9e>
		LL_ASSERT(lll_tx);
    e62e:	4a13      	ldr	r2, [pc, #76]	; (e67c <tx_lll_flush+0xcc>)
    e630:	4915      	ldr	r1, [pc, #84]	; (e688 <tx_lll_flush+0xd8>)
    e632:	4814      	ldr	r0, [pc, #80]	; (e684 <tx_lll_flush+0xd4>)
    e634:	f640 13c6 	movw	r3, #2502	; 0x9c6
    e638:	f007 ffdf 	bl	165fa <printk>
    e63c:	4040      	eors	r0, r0
    e63e:	f380 8811 	msr	BASEPRI, r0
    e642:	f04f 0003 	mov.w	r0, #3
    e646:	df02      	svc	2
		lll_tx->handle = LLL_HANDLE_INVALID;
    e648:	2300      	movs	r3, #0
    e64a:	801b      	strh	r3, [r3, #0]
    e64c:	deff      	udf	#255	; 0xff
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    e64e:	782b      	ldrb	r3, [r5, #0]
    e650:	fb13 f302 	smulbb	r3, r3, r2
    e654:	f64f 7cff 	movw	ip, #65535	; 0xffff
    e658:	f828 c003 	strh.w	ip, [r8, r3]
    e65c:	eb08 0203 	add.w	r2, r8, r3
		lll_tx->node = tx;
    e660:	9b01      	ldr	r3, [sp, #4]
    e662:	6053      	str	r3, [r2, #4]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
    e664:	681a      	ldr	r2, [r3, #0]
    e666:	6002      	str	r2, [r0, #0]
		tx->next = link;
    e668:	6018      	str	r0, [r3, #0]
	*last = idx; /* Commit: Update write index */
    e66a:	70e9      	strb	r1, [r5, #3]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
    e66c:	6c20      	ldr	r0, [r4, #64]	; 0x40
    e66e:	aa01      	add	r2, sp, #4
    e670:	4639      	mov	r1, r7
    e672:	f00d fa9b 	bl	1bbac <memq_dequeue>
    e676:	e7af      	b.n	e5d8 <tx_lll_flush+0x28>
    e678:	200006d0 	.word	0x200006d0
    e67c:	00020847 	.word	0x00020847
    e680:	00020917 	.word	0x00020917
    e684:	0002023c 	.word	0x0002023c
    e688:	000208e3 	.word	0x000208e3

0000e68c <ll_conn_get>:
{
    e68c:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    e68e:	f44f 719c 	mov.w	r1, #312	; 0x138
    e692:	4801      	ldr	r0, [pc, #4]	; (e698 <ll_conn_get+0xc>)
    e694:	f00d ba4b 	b.w	1bb2e <mem_get>
    e698:	20001478 	.word	0x20001478

0000e69c <ll_tx_mem_acquire>:
	return mem_acquire(&mem_conn_tx.free);
    e69c:	4801      	ldr	r0, [pc, #4]	; (e6a4 <ll_tx_mem_acquire+0x8>)
    e69e:	f00d ba18 	b.w	1bad2 <mem_acquire>
    e6a2:	bf00      	nop
    e6a4:	20002458 	.word	0x20002458

0000e6a8 <ll_tx_mem_release>:
	mem_release(tx, &mem_conn_tx.free);
    e6a8:	4901      	ldr	r1, [pc, #4]	; (e6b0 <ll_tx_mem_release+0x8>)
    e6aa:	f00d ba2b 	b.w	1bb04 <mem_release>
    e6ae:	bf00      	nop
    e6b0:	20002458 	.word	0x20002458

0000e6b4 <ll_tx_mem_enqueue>:
{
    e6b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e6b6:	4606      	mov	r6, r0
    e6b8:	460f      	mov	r7, r1
	conn = ll_connected_get(handle);
    e6ba:	f00d ffa9 	bl	1c610 <ll_connected_get>
	if (!conn) {
    e6be:	4604      	mov	r4, r0
    e6c0:	b330      	cbz	r0, e710 <ll_tx_mem_enqueue+0x5c>
	idx = MFIFO_ENQUEUE_GET(conn_tx, (void **) &lll_tx);
    e6c2:	4a16      	ldr	r2, [pc, #88]	; (e71c <ll_tx_mem_enqueue+0x68>)
    e6c4:	78d5      	ldrb	r5, [r2, #3]
	if (last == count) {
    e6c6:	f892 c001 	ldrb.w	ip, [r2, #1]
    e6ca:	7891      	ldrb	r1, [r2, #2]
    e6cc:	7810      	ldrb	r0, [r2, #0]
	last = last + 1;
    e6ce:	1c6b      	adds	r3, r5, #1
    e6d0:	b2db      	uxtb	r3, r3
		last = 0U;
    e6d2:	459c      	cmp	ip, r3
    e6d4:	bf08      	it	eq
    e6d6:	2300      	moveq	r3, #0
	if (last == first) {
    e6d8:	4299      	cmp	r1, r3
    e6da:	d01c      	beq.n	e716 <ll_tx_mem_enqueue+0x62>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    e6dc:	1d11      	adds	r1, r2, #4
    e6de:	fb15 f500 	smulbb	r5, r5, r0
    e6e2:	1948      	adds	r0, r1, r5
	lll_tx->handle = handle;
    e6e4:	534e      	strh	r6, [r1, r5]
	lll_tx->node = tx;
    e6e6:	6047      	str	r7, [r0, #4]
	*last = idx; /* Commit: Update write index */
    e6e8:	70d3      	strb	r3, [r2, #3]
    e6ea:	7823      	ldrb	r3, [r4, #0]
	if (ull_ref_get(&conn->ull)) {
    e6ec:	b133      	cbz	r3, e6fc <ll_tx_mem_enqueue+0x48>
		mfy.param = conn;
    e6ee:	4b0c      	ldr	r3, [pc, #48]	; (e720 <ll_tx_mem_enqueue+0x6c>)
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
    e6f0:	2200      	movs	r2, #0
    e6f2:	2101      	movs	r1, #1
    e6f4:	2003      	movs	r0, #3
		mfy.param = conn;
    e6f6:	609c      	str	r4, [r3, #8]
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
    e6f8:	f7fc fc2c 	bl	af54 <mayfly_enqueue>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
    e6fc:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    e700:	2b00      	cmp	r3, #0
    e702:	da03      	bge.n	e70c <ll_tx_mem_enqueue+0x58>
		ull_periph_latency_cancel(conn, handle);
    e704:	4631      	mov	r1, r6
    e706:	4620      	mov	r0, r4
    e708:	f001 f866 	bl	f7d8 <ull_periph_latency_cancel>
	return 0;
    e70c:	2000      	movs	r0, #0
    e70e:	e001      	b.n	e714 <ll_tx_mem_enqueue+0x60>
		return -EINVAL;
    e710:	f06f 0015 	mvn.w	r0, #21
}
    e714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
    e716:	f06f 0068 	mvn.w	r0, #104	; 0x68
    e71a:	e7fb      	b.n	e714 <ll_tx_mem_enqueue+0x60>
    e71c:	20000714 	.word	0x20000714
    e720:	20000768 	.word	0x20000768

0000e724 <ll_terminate_ind_send>:
{
    e724:	b538      	push	{r3, r4, r5, lr}
    e726:	4605      	mov	r5, r0
    e728:	460c      	mov	r4, r1
	conn = ll_connected_get(handle);
    e72a:	f00d ff71 	bl	1c610 <ll_connected_get>
	if (!conn) {
    e72e:	b310      	cbz	r0, e776 <ll_terminate_ind_send+0x52>
	if (conn->llcp_terminate.req != conn->llcp_terminate.ack) {
    e730:	f890 30d0 	ldrb.w	r3, [r0, #208]	; 0xd0
    e734:	f890 20d1 	ldrb.w	r2, [r0, #209]	; 0xd1
    e738:	429a      	cmp	r2, r3
    e73a:	d11e      	bne.n	e77a <ll_terminate_ind_send+0x56>
	switch (reason) {
    e73c:	2c1a      	cmp	r4, #26
    e73e:	d808      	bhi.n	e752 <ll_terminate_ind_send+0x2e>
    e740:	2c04      	cmp	r4, #4
    e742:	d904      	bls.n	e74e <ll_terminate_ind_send+0x2a>
    e744:	490e      	ldr	r1, [pc, #56]	; (e780 <ll_terminate_ind_send+0x5c>)
    e746:	2201      	movs	r2, #1
    e748:	40a2      	lsls	r2, r4
    e74a:	420a      	tst	r2, r1
    e74c:	d105      	bne.n	e75a <ll_terminate_ind_send+0x36>
    e74e:	2012      	movs	r0, #18
    e750:	e012      	b.n	e778 <ll_terminate_ind_send+0x54>
    e752:	2c29      	cmp	r4, #41	; 0x29
    e754:	d001      	beq.n	e75a <ll_terminate_ind_send+0x36>
    e756:	2c3b      	cmp	r4, #59	; 0x3b
    e758:	d1f9      	bne.n	e74e <ll_terminate_ind_send+0x2a>
	conn->llcp_terminate.req++; /* (req - ack) == 1, TERM_REQ */
    e75a:	3301      	adds	r3, #1
    e75c:	f880 30d0 	strb.w	r3, [r0, #208]	; 0xd0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
    e760:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
	conn->llcp_terminate.reason_own = reason;
    e764:	f880 40d2 	strb.w	r4, [r0, #210]	; 0xd2
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
    e768:	2b00      	cmp	r3, #0
    e76a:	da02      	bge.n	e772 <ll_terminate_ind_send+0x4e>
		ull_periph_latency_cancel(conn, handle);
    e76c:	4629      	mov	r1, r5
    e76e:	f001 f833 	bl	f7d8 <ull_periph_latency_cancel>
	return 0;
    e772:	2000      	movs	r0, #0
    e774:	e000      	b.n	e778 <ll_terminate_ind_send+0x54>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    e776:	2002      	movs	r0, #2
}
    e778:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    e77a:	200c      	movs	r0, #12
    e77c:	e7fc      	b.n	e778 <ll_terminate_ind_send+0x54>
    e77e:	bf00      	nop
    e780:	04380020 	.word	0x04380020

0000e784 <ull_conn_reset>:
{
    e784:	b510      	push	{r4, lr}
	conn = ll_conn_get(handle);
    e786:	2000      	movs	r0, #0
    e788:	f7ff ff80 	bl	e68c <ll_conn_get>
    e78c:	4604      	mov	r4, r0
	err = ull_ticker_stop_with_mark(TICKER_ID_CONN_BASE + handle,
    e78e:	f100 021c 	add.w	r2, r0, #28
    e792:	4601      	mov	r1, r0
    e794:	2005      	movs	r0, #5
    e796:	f7fe fdc9 	bl	d32c <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
    e79a:	b170      	cbz	r0, e7ba <ull_conn_reset+0x36>
    e79c:	3078      	adds	r0, #120	; 0x78
    e79e:	d00c      	beq.n	e7ba <ull_conn_reset+0x36>
    e7a0:	4a0d      	ldr	r2, [pc, #52]	; (e7d8 <ull_conn_reset+0x54>)
    e7a2:	490e      	ldr	r1, [pc, #56]	; (e7dc <ull_conn_reset+0x58>)
    e7a4:	480e      	ldr	r0, [pc, #56]	; (e7e0 <ull_conn_reset+0x5c>)
    e7a6:	f640 03e3 	movw	r3, #2275	; 0x8e3
    e7aa:	f007 ff26 	bl	165fa <printk>
    e7ae:	4040      	eors	r0, r0
    e7b0:	f380 8811 	msr	BASEPRI, r0
    e7b4:	f04f 0003 	mov.w	r0, #3
    e7b8:	df02      	svc	2
	MFIFO_INIT(conn_tx);
    e7ba:	4a0a      	ldr	r2, [pc, #40]	; (e7e4 <ull_conn_reset+0x60>)
	conn->lll.handle = LLL_HANDLE_INVALID;
    e7bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e7c0:	8523      	strh	r3, [r4, #40]	; 0x28
	conn->lll.link_tx_free = NULL;
    e7c2:	2300      	movs	r3, #0
	MFIFO_INIT(conn_tx);
    e7c4:	8053      	strh	r3, [r2, #2]
	MFIFO_INIT(conn_ack);
    e7c6:	4a08      	ldr	r2, [pc, #32]	; (e7e8 <ull_conn_reset+0x64>)
	conn->lll.link_tx_free = NULL;
    e7c8:	66a3      	str	r3, [r4, #104]	; 0x68
	MFIFO_INIT(conn_ack);
    e7ca:	8053      	strh	r3, [r2, #2]
	conn_upd_curr = NULL;
    e7cc:	4a07      	ldr	r2, [pc, #28]	; (e7ec <ull_conn_reset+0x68>)
}
    e7ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	conn_upd_curr = NULL;
    e7d2:	6013      	str	r3, [r2, #0]
	err = init_reset();
    e7d4:	f7ff bd7e 	b.w	e2d4 <init_reset>
    e7d8:	00020847 	.word	0x00020847
    e7dc:	0002082f 	.word	0x0002082f
    e7e0:	0002023c 	.word	0x0002023c
    e7e4:	20000714 	.word	0x20000714
    e7e8:	200006d0 	.word	0x200006d0
    e7ec:	20002434 	.word	0x20002434

0000e7f0 <ull_conn_setup>:
{
    e7f0:	b538      	push	{r3, r4, r5, lr}
	hdr = HDR_LLL2ULL(ftr->param);
    e7f2:	688b      	ldr	r3, [r1, #8]
	rx->link = rx_link;
    e7f4:	6008      	str	r0, [r1, #0]
	hdr = HDR_LLL2ULL(ftr->param);
    e7f6:	681d      	ldr	r5, [r3, #0]
    e7f8:	782b      	ldrb	r3, [r5, #0]
{
    e7fa:	460c      	mov	r4, r1
	if (ull_ref_get(hdr)) {
    e7fc:	b193      	cbz	r3, e824 <ull_conn_setup+0x34>
		LL_ASSERT(!hdr->disabled_cb);
    e7fe:	696b      	ldr	r3, [r5, #20]
    e800:	b163      	cbz	r3, e81c <ull_conn_setup+0x2c>
    e802:	4a0b      	ldr	r2, [pc, #44]	; (e830 <ull_conn_setup+0x40>)
    e804:	490b      	ldr	r1, [pc, #44]	; (e834 <ull_conn_setup+0x44>)
    e806:	480c      	ldr	r0, [pc, #48]	; (e838 <ull_conn_setup+0x48>)
    e808:	f240 33ed 	movw	r3, #1005	; 0x3ed
    e80c:	f007 fef5 	bl	165fa <printk>
    e810:	4040      	eors	r0, r0
    e812:	f380 8811 	msr	BASEPRI, r0
    e816:	f04f 0003 	mov.w	r0, #3
    e81a:	df02      	svc	2
		hdr->disabled_cb = conn_setup_adv_scan_disabled_cb;
    e81c:	4b07      	ldr	r3, [pc, #28]	; (e83c <ull_conn_setup+0x4c>)
		hdr->disabled_param = rx;
    e81e:	61ac      	str	r4, [r5, #24]
		hdr->disabled_cb = conn_setup_adv_scan_disabled_cb;
    e820:	616b      	str	r3, [r5, #20]
}
    e822:	bd38      	pop	{r3, r4, r5, pc}
    e824:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		conn_setup_adv_scan_disabled_cb(rx);
    e828:	4608      	mov	r0, r1
    e82a:	f7ff be09 	b.w	e440 <conn_setup_adv_scan_disabled_cb>
    e82e:	bf00      	nop
    e830:	00020847 	.word	0x00020847
    e834:	0002074a 	.word	0x0002074a
    e838:	0002023c 	.word	0x0002023c
    e83c:	0000e441 	.word	0x0000e441

0000e840 <ull_conn_rx>:
	conn = ll_connected_get((*rx)->hdr.handle);
    e840:	680b      	ldr	r3, [r1, #0]
{
    e842:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    e846:	4607      	mov	r7, r0
	conn = ll_connected_get((*rx)->hdr.handle);
    e848:	88d8      	ldrh	r0, [r3, #6]
{
    e84a:	460e      	mov	r6, r1
	conn = ll_connected_get((*rx)->hdr.handle);
    e84c:	f00d fee0 	bl	1c610 <ll_connected_get>
	if (!conn) {
    e850:	6835      	ldr	r5, [r6, #0]
    e852:	4604      	mov	r4, r0
    e854:	b910      	cbnz	r0, e85c <ull_conn_rx+0x1c>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
    e856:	2301      	movs	r3, #1
    e858:	712b      	strb	r3, [r5, #4]
	return 0;
    e85a:	e007      	b.n	e86c <ull_conn_rx+0x2c>
	switch (pdu_rx->ll_id) {
    e85c:	7f28      	ldrb	r0, [r5, #28]
    e85e:	f000 0003 	and.w	r0, r0, #3
    e862:	2803      	cmp	r0, #3
    e864:	d004      	beq.n	e870 <ull_conn_rx+0x30>
    e866:	2800      	cmp	r0, #0
    e868:	f000 83a9 	beq.w	efbe <ull_conn_rx+0x77e>
    e86c:	2000      	movs	r0, #0
    e86e:	e14a      	b.n	eb06 <ull_conn_rx+0x2c6>
			  struct pdu_data *pdu_rx, struct ll_conn *conn)
{
	int nack = 0;
	uint8_t opcode;

	opcode = pdu_rx->llctrl.opcode;
    e870:	f895 801f 	ldrb.w	r8, [r5, #31]
	pdu_rx = (void *)(*rx)->pdu;
    e874:	f105 021c 	add.w	r2, r5, #28

		return 0;
	}
#endif /* CONFIG_BT_CTLR_LE_ENC */

	switch (opcode) {
    e878:	f1b8 0f11 	cmp.w	r8, #17
    e87c:	f200 83c4 	bhi.w	f008 <ull_conn_rx+0x7c8>
    e880:	e8df f018 	tbh	[pc, r8, lsl #1]
    e884:	00830012 	.word	0x00830012
    e888:	03c200b3 	.word	0x03c200b3
    e88c:	03c203c2 	.word	0x03c203c2
    e890:	033a03c2 	.word	0x033a03c2
    e894:	011400bc 	.word	0x011400bc
    e898:	03c203c2 	.word	0x03c203c2
    e89c:	03c20144 	.word	0x03c20144
    e8a0:	019503c2 	.word	0x019503c2
    e8a4:	02e203c2 	.word	0x02e203c2
#if defined(CONFIG_BT_PERIPHERAL)
	case PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND:
	{
		uint8_t err;

		if (!conn->lll.role ||
    e8a8:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    e8ac:	2b00      	cmp	r3, #0
    e8ae:	f280 83ab 	bge.w	f008 <ull_conn_rx+0x7c8>
    e8b2:	7f6b      	ldrb	r3, [r5, #29]
    e8b4:	2b0c      	cmp	r3, #12
    e8b6:	f040 83a7 	bne.w	f008 <ull_conn_rx+0x7c8>
	instant = sys_le16_to_cpu(pdu->llctrl.conn_update_ind.instant);
    e8ba:	f8b5 1029 	ldrh.w	r1, [r5, #41]	; 0x29
	if (((instant - conn->lll.event_counter) & 0xFFFF) > 0x7FFF) {
    e8be:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    e8c0:	1acb      	subs	r3, r1, r3
    e8c2:	041b      	lsls	r3, r3, #16
    e8c4:	d503      	bpl.n	e8ce <ull_conn_rx+0x8e>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
    e8c6:	2301      	movs	r3, #1
    e8c8:	712b      	strb	r3, [r5, #4]
		err = BT_HCI_ERR_INSTANT_PASSED;
    e8ca:	2328      	movs	r3, #40	; 0x28
    e8cc:	e00b      	b.n	e8e6 <ull_conn_rx+0xa6>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    e8ce:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
    e8d2:	f894 2089 	ldrb.w	r2, [r4, #137]	; 0x89
    e8d6:	1a9b      	subs	r3, r3, r2
    e8d8:	f003 0303 	and.w	r3, r3, #3
    e8dc:	2b02      	cmp	r3, #2
    e8de:	d105      	bne.n	e8ec <ull_conn_rx+0xac>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
    e8e0:	2301      	movs	r3, #1
    e8e2:	712b      	strb	r3, [r5, #4]
		err = BT_HCI_ERR_DIFF_TRANS_COLLISION;
    e8e4:	232a      	movs	r3, #42	; 0x2a
			goto ull_conn_rx_unknown_rsp_send;
		}

		err = chan_map_upd_recv(conn, *rx, pdu_rx);
		if (err) {
			conn->llcp_terminate.reason_final = err;
    e8e6:	f884 30d3 	strb.w	r3, [r4, #211]	; 0xd3
    e8ea:	e7bf      	b.n	e86c <ull_conn_rx+0x2c>
	cpr_active_check_and_set(conn);
    e8ec:	4620      	mov	r0, r4
    e8ee:	f7ff fccb 	bl	e288 <cpr_active_check_and_set>
	conn->llcp_cu.win_size = pdu->llctrl.conn_update_ind.win_size;
    e8f2:	f895 3020 	ldrb.w	r3, [r5, #32]
    e8f6:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.win_offset) *
    e8fa:	f8b5 3021 	ldrh.w	r3, [r5, #33]	; 0x21
    e8fe:	f240 42e2 	movw	r2, #1250	; 0x4e2
    e902:	4353      	muls	r3, r2
	conn->llcp_cu.win_offset_us =
    e904:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.interval);
    e908:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
    e90c:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    e910:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp_cu.interval =
    e914:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.latency);
    e918:	f895 2026 	ldrb.w	r2, [r5, #38]	; 0x26
    e91c:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
    e920:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp_cu.latency =
    e924:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
    e928:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
    e92c:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
	conn->llcp.conn_upd.instant = instant;
    e930:	f8a4 108c 	strh.w	r1, [r4, #140]	; 0x8c
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
    e934:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp_cu.timeout =
    e938:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    e93c:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
    e940:	f023 030f 	bic.w	r3, r3, #15
    e944:	f043 0308 	orr.w	r3, r3, #8
    e948:	f884 309e 	strb.w	r3, [r4, #158]	; 0x9e
	conn->llcp_cu.ack--;
    e94c:	f894 309d 	ldrb.w	r3, [r4, #157]	; 0x9d
    e950:	3b01      	subs	r3, #1
    e952:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
	link->mem = conn->llcp_rx;
    e956:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    e95a:	607b      	str	r3, [r7, #4]
	(*rx)->hdr.link = link;
    e95c:	6833      	ldr	r3, [r6, #0]
    e95e:	601f      	str	r7, [r3, #0]
	conn->llcp_rx = *rx;
    e960:	6833      	ldr	r3, [r6, #0]
    e962:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*rx = NULL;
    e966:	2300      	movs	r3, #0
    e968:	6033      	str	r3, [r6, #0]
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    e96a:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
    e96e:	f894 30f5 	ldrb.w	r3, [r4, #245]	; 0xf5
    e972:	4293      	cmp	r3, r2
    e974:	d007      	beq.n	e986 <ull_conn_rx+0x146>
	    ((conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) ||
    e976:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    e97a:	f003 030e 	and.w	r3, r3, #14
    e97e:	2b04      	cmp	r3, #4
    e980:	d101      	bne.n	e986 <ull_conn_rx+0x146>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    e982:	f884 20f5 	strb.w	r2, [r4, #245]	; 0xf5
				break;
			}
		}

		/* Procedure complete */
		conn->procedure_expire = 0U;
    e986:	2000      	movs	r0, #0
    e988:	e0bb      	b.n	eb02 <ull_conn_rx+0x2c2>
		if (!conn->lll.role ||
    e98a:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    e98e:	2b00      	cmp	r3, #0
    e990:	f280 833a 	bge.w	f008 <ull_conn_rx+0x7c8>
    e994:	7f6b      	ldrb	r3, [r5, #29]
    e996:	2b08      	cmp	r3, #8
    e998:	f040 8336 	bne.w	f008 <ull_conn_rx+0x7c8>
	instant = sys_le16_to_cpu(pdu->llctrl.chan_map_ind.instant);
    e99c:	f8b5 6025 	ldrh.w	r6, [r5, #37]	; 0x25
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
    e9a0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    e9a2:	1af3      	subs	r3, r6, r3
    e9a4:	041f      	lsls	r7, r3, #16
    e9a6:	d48e      	bmi.n	e8c6 <ull_conn_rx+0x86>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    e9a8:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
    e9ac:	f894 2089 	ldrb.w	r2, [r4, #137]	; 0x89
    e9b0:	1a9b      	subs	r3, r3, r2
    e9b2:	f003 0303 	and.w	r3, r3, #3
    e9b6:	2b02      	cmp	r3, #2
    e9b8:	d092      	beq.n	e8e0 <ull_conn_rx+0xa0>
	memcpy(&conn->llcp.chan_map.chm[0], &pdu->llctrl.chan_map_ind.chm[0],
    e9ba:	2205      	movs	r2, #5
    e9bc:	f105 0120 	add.w	r1, r5, #32
    e9c0:	f104 008d 	add.w	r0, r4, #141	; 0x8d
    e9c4:	f008 fc46 	bl	17254 <memcpy>
	conn->llcp.chan_map.initiate = 0U;
    e9c8:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
	conn->llcp.chan_map.instant = instant;
    e9cc:	f8a4 6092 	strh.w	r6, [r4, #146]	; 0x92
	conn->llcp.chan_map.initiate = 0U;
    e9d0:	f36f 0300 	bfc	r3, #0, #1
    e9d4:	f884 308c 	strb.w	r3, [r4, #140]	; 0x8c
	conn->llcp_type = LLCP_CHAN_MAP;
    e9d8:	2302      	movs	r3, #2
    e9da:	f884 308a 	strb.w	r3, [r4, #138]	; 0x8a
	conn->llcp_ack -= 2U;
    e9de:	f894 3089 	ldrb.w	r3, [r4, #137]	; 0x89
    e9e2:	3b02      	subs	r3, #2
    e9e4:	f884 3089 	strb.w	r3, [r4, #137]	; 0x89
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
    e9e8:	e735      	b.n	e856 <ull_conn_rx+0x16>
		if (PDU_DATA_LLCTRL_LEN(terminate_ind) != pdu_rx->len) {
    e9ea:	7f6b      	ldrb	r3, [r5, #29]
    e9ec:	2b02      	cmp	r3, #2
    e9ee:	f040 830b 	bne.w	f008 <ull_conn_rx+0x7c8>
	conn->llcp_terminate.reason_final =
    e9f2:	f895 3020 	ldrb.w	r3, [r5, #32]
    e9f6:	f884 30d3 	strb.w	r3, [r4, #211]	; 0xd3
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
    e9fa:	e72c      	b.n	e856 <ull_conn_rx+0x16>
		if (!conn->lll.role ||
    e9fc:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    ea00:	2b00      	cmp	r3, #0
    ea02:	f280 8301 	bge.w	f008 <ull_conn_rx+0x7c8>
    ea06:	f895 901d 	ldrb.w	r9, [r5, #29]
    ea0a:	f1b9 0f09 	cmp.w	r9, #9
    ea0e:	f040 82fb 	bne.w	f008 <ull_conn_rx+0x7c8>
	tx = ctrl_tx_rsp_mem_acquire(conn, rx, &err);
    ea12:	aa01      	add	r2, sp, #4
    ea14:	4629      	mov	r1, r5
    ea16:	4620      	mov	r0, r4
    ea18:	f7ff fc3e 	bl	e298 <ctrl_tx_rsp_mem_acquire>
	if (!tx) {
    ea1c:	4606      	mov	r6, r0
    ea1e:	b908      	cbnz	r0, ea24 <ull_conn_rx+0x1e4>
		return err;
    ea20:	9801      	ldr	r0, [sp, #4]
    ea22:	e070      	b.n	eb06 <ull_conn_rx+0x2c6>
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
    ea24:	f105 0720 	add.w	r7, r5, #32
    ea28:	4638      	mov	r0, r7
    ea2a:	f7ff fda1 	bl	e570 <feat_get>
    ea2e:	e9d4 232e 	ldrd	r2, r3, [r4, #184]	; 0xb8
    ea32:	4002      	ands	r2, r0
    ea34:	400b      	ands	r3, r1
    ea36:	e9c4 232e 	strd	r2, r3, [r4, #184]	; 0xb8
		feat_land_octet0(feat_get(&req->features[0]), ll_feat_get());
    ea3a:	4638      	mov	r0, r7
    ea3c:	f7ff fd98 	bl	e570 <feat_get>
    ea40:	4607      	mov	r7, r0
    ea42:	4688      	mov	r8, r1
    ea44:	f00d fbc9 	bl	1c1da <ll_feat_get>
	conn->common.fex_valid = 1U;
    ea48:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
	feat_result = feat_to_keep & feat_octet0;
    ea4c:	4038      	ands	r0, r7
	conn->common.fex_valid = 1U;
    ea4e:	f043 0301 	orr.w	r3, r3, #1
    ea52:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
	feat_result &= 0xFF;
    ea56:	f000 00ff 	and.w	r0, r0, #255	; 0xff
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    ea5a:	7933      	ldrb	r3, [r6, #4]
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
    ea5c:	f027 07ff 	bic.w	r7, r7, #255	; 0xff
    ea60:	f008 01ff 	and.w	r1, r8, #255	; 0xff
    ea64:	4307      	orrs	r7, r0
	conn->llcp_feature.features_peer =
    ea66:	e9c4 7130 	strd	r7, r1, [r4, #192]	; 0xc0
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    ea6a:	f043 0303 	orr.w	r3, r3, #3
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
    ea6e:	f106 0708 	add.w	r7, r6, #8
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    ea72:	7133      	strb	r3, [r6, #4]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
    ea74:	2208      	movs	r2, #8
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    ea76:	f886 9005 	strb.w	r9, [r6, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    ea7a:	f886 9007 	strb.w	r9, [r6, #7]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
    ea7e:	2100      	movs	r1, #0
    ea80:	4638      	mov	r0, r7
    ea82:	f008 fbf2 	bl	1726a <memset>
	feat = feat_land_octet0(ll_feat_get(),
    ea86:	f00d fba8 	bl	1c1da <ll_feat_get>
	feat_result = feat_to_keep & feat_octet0;
    ea8a:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
    ea8e:	4003      	ands	r3, r0
	feat_result &= 0xFF;
    ea90:	f003 03ff 	and.w	r3, r3, #255	; 0xff
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
    ea94:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
	sys_put_le64(feat, pdu_tx->llctrl.feature_rsp.features);
    ea98:	4318      	orrs	r0, r3
    ea9a:	463a      	mov	r2, r7
    ea9c:	b2c9      	uxtb	r1, r1
    ea9e:	f00d fd63 	bl	1c568 <sys_put_le64>
	ctrl_tx_sec_enqueue(conn, tx);
    eaa2:	4631      	mov	r1, r6
    eaa4:	4620      	mov	r0, r4
    eaa6:	f00d fd70 	bl	1c58a <ctrl_tx_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
    eaaa:	e6d4      	b.n	e856 <ull_conn_rx+0x16>
		if ((!IS_ENABLED(CONFIG_BT_CTLR_PER_INIT_FEAT_XCHG) &&
    eaac:	7f6b      	ldrb	r3, [r5, #29]
    eaae:	2b09      	cmp	r3, #9
    eab0:	f040 82aa 	bne.w	f008 <ull_conn_rx+0x7c8>
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
    eab4:	3520      	adds	r5, #32
    eab6:	4628      	mov	r0, r5
    eab8:	f7ff fd5a 	bl	e570 <feat_get>
    eabc:	e9d4 232e 	ldrd	r2, r3, [r4, #184]	; 0xb8
    eac0:	400b      	ands	r3, r1
    eac2:	4002      	ands	r2, r0
    eac4:	e9c4 232e 	strd	r2, r3, [r4, #184]	; 0xb8
		feat_land_octet0(feat_get(&rsp->features[0]), ll_feat_get());
    eac8:	4628      	mov	r0, r5
    eaca:	f7ff fd51 	bl	e570 <feat_get>
    eace:	4605      	mov	r5, r0
    ead0:	460e      	mov	r6, r1
    ead2:	f00d fb82 	bl	1c1da <ll_feat_get>
	feat_result = feat_to_keep & feat_octet0;
    ead6:	ea05 0300 	and.w	r3, r5, r0
	feat_result &= 0xFF;
    eada:	f003 03ff 	and.w	r3, r3, #255	; 0xff
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
    eade:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
    eae2:	431d      	orrs	r5, r3
	conn->common.fex_valid = 1U;
    eae4:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
    eae8:	f006 06ff 	and.w	r6, r6, #255	; 0xff
	conn->common.fex_valid = 1U;
    eaec:	f043 0301 	orr.w	r3, r3, #1
	conn->llcp_feature.features_peer =
    eaf0:	e9c4 5630 	strd	r5, r6, [r4, #192]	; 0xc0
	conn->common.fex_valid = 1U;
    eaf4:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
	conn->llcp_feature.ack = conn->llcp_feature.req;
    eaf8:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
    eafc:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
	feat_result &= 0xFF;
    eb00:	2000      	movs	r0, #0
	conn->procedure_expire = 0U;
    eb02:	f8a4 0078 	strh.w	r0, [r4, #120]	; 0x78
}
    eb06:	b003      	add	sp, #12
    eb08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (PDU_DATA_LLCTRL_LEN(version_ind) != pdu_rx->len) {
    eb0c:	7f6e      	ldrb	r6, [r5, #29]
    eb0e:	2e06      	cmp	r6, #6
    eb10:	f040 827a 	bne.w	f008 <ull_conn_rx+0x7c8>
	if (!conn->llcp_version.tx) {
    eb14:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
    eb18:	07d8      	lsls	r0, r3, #31
    eb1a:	d43d      	bmi.n	eb98 <ull_conn_rx+0x358>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    eb1c:	48c8      	ldr	r0, [pc, #800]	; (ee40 <ull_conn_rx+0x600>)
    eb1e:	f00c ffd8 	bl	1bad2 <mem_acquire>
		if (!tx) {
    eb22:	4601      	mov	r1, r0
    eb24:	2800      	cmp	r0, #0
    eb26:	f000 8286 	beq.w	f036 <ull_conn_rx+0x7f6>
		conn->llcp_version.tx = 1U;
    eb2a:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
    eb2e:	f043 0301 	orr.w	r3, r3, #1
    eb32:	f884 30ca 	strb.w	r3, [r4, #202]	; 0xca
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    eb36:	7903      	ldrb	r3, [r0, #4]
		pdu_tx->len =
    eb38:	7146      	strb	r6, [r0, #5]
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    eb3a:	f043 0303 	orr.w	r3, r3, #3
    eb3e:	7103      	strb	r3, [r0, #4]
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    eb40:	230c      	movs	r3, #12
    eb42:	71c3      	strb	r3, [r0, #7]
		v->version_number = LL_VERSION_NUMBER;
    eb44:	7203      	strb	r3, [r0, #8]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
    eb46:	f06f 030e 	mvn.w	r3, #14
    eb4a:	7243      	strb	r3, [r0, #9]
    eb4c:	2305      	movs	r3, #5
    eb4e:	7283      	strb	r3, [r0, #10]
		v->sub_version_number =
    eb50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    eb54:	72c3      	strb	r3, [r0, #11]
    eb56:	7303      	strb	r3, [r0, #12]
		ctrl_tx_sec_enqueue(conn, tx);
    eb58:	4620      	mov	r0, r4
    eb5a:	f00d fd16 	bl	1c58a <ctrl_tx_enqueue>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
    eb5e:	2301      	movs	r3, #1
    eb60:	712b      	strb	r3, [r5, #4]
	conn->llcp_version.version_number = v->version_number;
    eb62:	f895 3020 	ldrb.w	r3, [r5, #32]
    eb66:	f884 30cb 	strb.w	r3, [r4, #203]	; 0xcb
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
    eb6a:	f895 2022 	ldrb.w	r2, [r5, #34]	; 0x22
    eb6e:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
    eb72:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    eb76:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
		sys_le16_to_cpu(v->sub_version_number);
    eb7a:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    eb7e:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
    eb82:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp_version.sub_version_number =
    eb86:	f8a4 30ce 	strh.w	r3, [r4, #206]	; 0xce
	conn->llcp_version.rx = 1U;
    eb8a:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
    eb8e:	f043 0302 	orr.w	r3, r3, #2
    eb92:	f884 30ca 	strb.w	r3, [r4, #202]	; 0xca
	return 0;
    eb96:	e669      	b.n	e86c <ull_conn_rx+0x2c>
	} else if (!conn->llcp_version.rx) {
    eb98:	f013 0302 	ands.w	r3, r3, #2
    eb9c:	f47f ae5b 	bne.w	e856 <ull_conn_rx+0x16>
		conn->llcp_version.ack = conn->llcp_version.req;
    eba0:	f894 20c8 	ldrb.w	r2, [r4, #200]	; 0xc8
    eba4:	f884 20c9 	strb.w	r2, [r4, #201]	; 0xc9
		conn->procedure_expire = 0U;
    eba8:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
    ebac:	e7d9      	b.n	eb62 <ull_conn_rx+0x322>
		if (PDU_DATA_LLCTRL_LEN(conn_param_req) != pdu_rx->len) {
    ebae:	7f6b      	ldrb	r3, [r5, #29]
    ebb0:	2b18      	cmp	r3, #24
    ebb2:	f040 8229 	bne.w	f008 <ull_conn_rx+0x7c8>
	return conn_upd_curr && (conn_upd_curr != conn);
    ebb6:	4ba3      	ldr	r3, [pc, #652]	; (ee44 <ull_conn_rx+0x604>)
    ebb8:	681b      	ldr	r3, [r3, #0]
    ebba:	b14b      	cbz	r3, ebd0 <ull_conn_rx+0x390>
		if (cpr_active_is_set(conn)) {
    ebbc:	429c      	cmp	r4, r3
    ebbe:	d007      	beq.n	ebd0 <ull_conn_rx+0x390>
			nack = reject_ext_ind_send(conn, *rx,
    ebc0:	2220      	movs	r2, #32
				nack = reject_ext_ind_send(conn, *rx,
    ebc2:	4629      	mov	r1, r5
    ebc4:	4620      	mov	r0, r4
}
    ebc6:	b003      	add	sp, #12
    ebc8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
				nack = reject_ext_ind_send(conn, *rx,
    ebcc:	f00d bd02 	b.w	1c5d4 <reject_ext_ind_send.constprop.0>
		if (!conn->lll.role) {
    ebd0:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
					conn->llcp_conn_param.ack) &&
    ebd4:	f894 10f5 	ldrb.w	r1, [r4, #245]	; 0xf5
			if ((conn->llcp_conn_param.req !=
    ebd8:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
		if (!conn->lll.role) {
    ebdc:	2a00      	cmp	r2, #0
    ebde:	f2c0 80a9 	blt.w	ed34 <ull_conn_rx+0x4f4>
			if ((conn->llcp_conn_param.req !=
    ebe2:	4299      	cmp	r1, r3
    ebe4:	d00a      	beq.n	ebfc <ull_conn_rx+0x3bc>
			    ((conn->llcp_conn_param.state ==
    ebe6:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
					conn->llcp_conn_param.ack) &&
    ebea:	f013 0f0b 	tst.w	r3, #11
    ebee:	d003      	beq.n	ebf8 <ull_conn_rx+0x3b8>
			      LLCP_CPR_STATE_RSP_WAIT) ||
    ebf0:	f003 030f 	and.w	r3, r3, #15
    ebf4:	2b06      	cmp	r3, #6
    ebf6:	d101      	bne.n	ebfc <ull_conn_rx+0x3bc>
				nack = reject_ext_ind_send(conn, *rx,
    ebf8:	2223      	movs	r2, #35	; 0x23
    ebfa:	e7e2      	b.n	ebc2 <ull_conn_rx+0x382>
			} else if (((conn->llcp_req - conn->llcp_ack) &
    ebfc:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
    ec00:	f894 2089 	ldrb.w	r2, [r4, #137]	; 0x89
    ec04:	1a9b      	subs	r3, r3, r2
    ec06:	f003 0303 	and.w	r3, r3, #3
    ec0a:	2b02      	cmp	r3, #2
    ec0c:	d101      	bne.n	ec12 <ull_conn_rx+0x3d2>
				nack = reject_ext_ind_send(conn, *rx,
    ec0e:	222a      	movs	r2, #42	; 0x2a
    ec10:	e7d7      	b.n	ebc2 <ull_conn_rx+0x382>
				uint16_t interval_min =
    ec12:	f8b5 8020 	ldrh.w	r8, [r5, #32]
    ec16:	fa1f f388 	uxth.w	r3, r8
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
    ec1a:	2b05      	cmp	r3, #5
    ec1c:	d922      	bls.n	ec64 <ull_conn_rx+0x424>
				uint16_t interval_max =
    ec1e:	f8b5 e022 	ldrh.w	lr, [r5, #34]	; 0x22
    ec22:	fa1f f08e 	uxth.w	r0, lr
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
    ec26:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
    ec2a:	d81b      	bhi.n	ec64 <ull_conn_rx+0x424>
				    (interval_max > 3200) ||
    ec2c:	4283      	cmp	r3, r0
    ec2e:	d819      	bhi.n	ec64 <ull_conn_rx+0x424>
				uint16_t latency =
    ec30:	f8b5 c024 	ldrh.w	ip, [r5, #36]	; 0x24
    ec34:	fa1f f68c 	uxth.w	r6, ip
				    (interval_min > interval_max) ||
    ec38:	f5b6 7ffa 	cmp.w	r6, #500	; 0x1f4
    ec3c:	d212      	bcs.n	ec64 <ull_conn_rx+0x424>
				uint16_t timeout =
    ec3e:	8cef      	ldrh	r7, [r5, #38]	; 0x26
    ec40:	b2bb      	uxth	r3, r7
				    (latency > 499) ||
    ec42:	f1a3 020a 	sub.w	r2, r3, #10
    ec46:	b292      	uxth	r2, r2
    ec48:	f640 4976 	movw	r9, #3190	; 0xc76
    ec4c:	454a      	cmp	r2, r9
    ec4e:	d809      	bhi.n	ec64 <ull_conn_rx+0x424>
				     ((latency + 1) * interval_max)) ||
    ec50:	1c72      	adds	r2, r6, #1
    ec52:	b292      	uxth	r2, r2
    ec54:	4342      	muls	r2, r0
				    (timeout > 3200) ||
    ec56:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
    ec5a:	d203      	bcs.n	ec64 <ull_conn_rx+0x424>
					cpr->preferred_periodicity;
    ec5c:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
				     ((latency + 1) * interval_max)) ||
    ec60:	4290      	cmp	r0, r2
    ec62:	d201      	bcs.n	ec68 <ull_conn_rx+0x428>
				nack = reject_ext_ind_send(conn, *rx,
    ec64:	221e      	movs	r2, #30
    ec66:	e7ac      	b.n	ebc2 <ull_conn_rx+0x382>
				conn->llcp_conn_param.interval_min =
    ec68:	f8a4 80f8 	strh.w	r8, [r4, #248]	; 0xf8
				conn->llcp_conn_param.interval_max =
    ec6c:	f8a4 e0fa 	strh.w	lr, [r4, #250]	; 0xfa
				conn->llcp_conn_param.latency =	latency;
    ec70:	f8a4 c0fc 	strh.w	ip, [r4, #252]	; 0xfc
				conn->llcp_conn_param.timeout =	timeout;
    ec74:	f8a4 70fe 	strh.w	r7, [r4, #254]	; 0xfe
				conn->llcp_conn_param.preferred_periodicity =
    ec78:	f884 2100 	strb.w	r2, [r4, #256]	; 0x100
					sys_le16_to_cpu(cpr->reference_conn_event_count);
    ec7c:	f895 702a 	ldrb.w	r7, [r5, #42]	; 0x2a
    ec80:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
    ec84:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
    ec88:	f8a4 2102 	strh.w	r2, [r4, #258]	; 0x102
					sys_le16_to_cpu(cpr->offset0);
    ec8c:	f895 702c 	ldrb.w	r7, [r5, #44]	; 0x2c
    ec90:	f895 202b 	ldrb.w	r2, [r5, #43]	; 0x2b
    ec94:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
				conn->llcp_conn_param.offset0 =
    ec98:	f8a4 2104 	strh.w	r2, [r4, #260]	; 0x104
					sys_le16_to_cpu(cpr->offset1);
    ec9c:	f895 702e 	ldrb.w	r7, [r5, #46]	; 0x2e
    eca0:	f895 202d 	ldrb.w	r2, [r5, #45]	; 0x2d
    eca4:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
				conn->llcp_conn_param.offset1 =
    eca8:	f8a4 2106 	strh.w	r2, [r4, #262]	; 0x106
					sys_le16_to_cpu(cpr->offset2);
    ecac:	f895 7030 	ldrb.w	r7, [r5, #48]	; 0x30
    ecb0:	f895 202f 	ldrb.w	r2, [r5, #47]	; 0x2f
    ecb4:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
				conn->llcp_conn_param.offset2 =
    ecb8:	f8a4 2108 	strh.w	r2, [r4, #264]	; 0x108
					sys_le16_to_cpu(cpr->offset3);
    ecbc:	f895 7032 	ldrb.w	r7, [r5, #50]	; 0x32
    ecc0:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
    ecc4:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
				conn->llcp_conn_param.offset3 =
    ecc8:	f8a4 210a 	strh.w	r2, [r4, #266]	; 0x10a
					sys_le16_to_cpu(cpr->offset4);
    eccc:	f895 7034 	ldrb.w	r7, [r5, #52]	; 0x34
    ecd0:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
    ecd4:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
				conn->llcp_conn_param.offset4 =
    ecd8:	f8a4 210c 	strh.w	r2, [r4, #268]	; 0x10c
					sys_le16_to_cpu(cpr->offset5);
    ecdc:	f895 2035 	ldrb.w	r2, [r5, #53]	; 0x35
    ece0:	f895 7036 	ldrb.w	r7, [r5, #54]	; 0x36
    ece4:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
				conn->llcp_conn_param.offset5 =
    ece8:	f8a4 210e 	strh.w	r2, [r4, #270]	; 0x10e
				     lll->interval) ||
    ecec:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
				if ((conn->llcp_conn_param.interval_max !=
    ecee:	4290      	cmp	r0, r2
			if ((conn->llcp_conn_param.interval_max !=
    ecf0:	d112      	bne.n	ed18 <ull_conn_rx+0x4d8>
			     lll->interval) ||
    ecf2:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
    ecf4:	42b0      	cmp	r0, r6
    ecf6:	d10f      	bne.n	ed18 <ull_conn_rx+0x4d8>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
    ecf8:	f240 40e2 	movw	r0, #1250	; 0x4e2
    ecfc:	4342      	muls	r2, r0
    ecfe:	f242 7010 	movw	r0, #10000	; 0x2710
    ed02:	fb00 2303 	mla	r3, r0, r3, r2
    ed06:	3b01      	subs	r3, #1
    ed08:	fbb3 f3f2 	udiv	r3, r3, r2
			    (conn->llcp_conn_param.latency != lll->latency) ||
    ed0c:	f8b4 2072 	ldrh.w	r2, [r4, #114]	; 0x72
    ed10:	b29b      	uxth	r3, r3
    ed12:	429a      	cmp	r2, r3
    ed14:	f000 8088 	beq.w	ee28 <ull_conn_rx+0x5e8>
				conn->llcp_conn_param.state =
    ed18:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
    ed1c:	2203      	movs	r2, #3
    ed1e:	f362 0303 	bfi	r3, r2, #0, #4
    ed22:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
			conn->llcp_conn_param.ack--;
    ed26:	3901      	subs	r1, #1
    ed28:	f884 10f5 	strb.w	r1, [r4, #245]	; 0xf5
			cpr_active_check_and_set(conn);
    ed2c:	4620      	mov	r0, r4
    ed2e:	f7ff faab 	bl	e288 <cpr_active_check_and_set>
    ed32:	e59b      	b.n	e86c <ull_conn_rx+0x2c>
		} else if ((conn->llcp_conn_param.req ==
    ed34:	4299      	cmp	r1, r3
    ed36:	d005      	beq.n	ed44 <ull_conn_rx+0x504>
			    conn->llcp_conn_param.ack) ||
    ed38:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
    ed3c:	f013 0f0b 	tst.w	r3, #11
    ed40:	f47f ad89 	bne.w	e856 <ull_conn_rx+0x16>
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
    ed44:	f8b5 8020 	ldrh.w	r8, [r5, #32]
    ed48:	fa1f f388 	uxth.w	r3, r8
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
    ed4c:	2b05      	cmp	r3, #5
    ed4e:	d989      	bls.n	ec64 <ull_conn_rx+0x424>
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
    ed50:	f8b5 e022 	ldrh.w	lr, [r5, #34]	; 0x22
    ed54:	fa1f f28e 	uxth.w	r2, lr
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
    ed58:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
    ed5c:	d882      	bhi.n	ec64 <ull_conn_rx+0x424>
			    (interval_max > 3200) ||
    ed5e:	4293      	cmp	r3, r2
    ed60:	d880      	bhi.n	ec64 <ull_conn_rx+0x424>
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
    ed62:	f8b5 c024 	ldrh.w	ip, [r5, #36]	; 0x24
    ed66:	fa1f f68c 	uxth.w	r6, ip
			    (interval_min > interval_max) ||
    ed6a:	f5b6 7ffa 	cmp.w	r6, #500	; 0x1f4
    ed6e:	f4bf af79 	bcs.w	ec64 <ull_conn_rx+0x424>
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
    ed72:	8cef      	ldrh	r7, [r5, #38]	; 0x26
    ed74:	b2bb      	uxth	r3, r7
			    (latency > 499) ||
    ed76:	f1a3 000a 	sub.w	r0, r3, #10
    ed7a:	b280      	uxth	r0, r0
    ed7c:	f640 4976 	movw	r9, #3190	; 0xc76
    ed80:	4548      	cmp	r0, r9
    ed82:	f63f af6f 	bhi.w	ec64 <ull_conn_rx+0x424>
			     ((latency + 1) * interval_max)) ||
    ed86:	1c70      	adds	r0, r6, #1
    ed88:	b280      	uxth	r0, r0
    ed8a:	4350      	muls	r0, r2
			    (timeout < 10) || (timeout > 3200) ||
    ed8c:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
    ed90:	f4bf af68 	bcs.w	ec64 <ull_conn_rx+0x424>
				cpr->preferred_periodicity;
    ed94:	f895 0028 	ldrb.w	r0, [r5, #40]	; 0x28
			     ((latency + 1) * interval_max)) ||
    ed98:	4282      	cmp	r2, r0
    ed9a:	f4ff af63 	bcc.w	ec64 <ull_conn_rx+0x424>
			conn->llcp_conn_param.interval_min = interval_min;
    ed9e:	f8a4 80f8 	strh.w	r8, [r4, #248]	; 0xf8
			conn->llcp_conn_param.interval_max = interval_max;
    eda2:	f8a4 e0fa 	strh.w	lr, [r4, #250]	; 0xfa
			conn->llcp_conn_param.latency =	latency;
    eda6:	f8a4 c0fc 	strh.w	ip, [r4, #252]	; 0xfc
			conn->llcp_conn_param.timeout =	timeout;
    edaa:	f8a4 70fe 	strh.w	r7, [r4, #254]	; 0xfe
			conn->llcp_conn_param.preferred_periodicity =
    edae:	f884 0100 	strb.w	r0, [r4, #256]	; 0x100
				sys_le16_to_cpu(cpr->reference_conn_event_count);
    edb2:	f895 702a 	ldrb.w	r7, [r5, #42]	; 0x2a
    edb6:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    edba:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
    edbe:	f8a4 0102 	strh.w	r0, [r4, #258]	; 0x102
				sys_le16_to_cpu(cpr->offset0);
    edc2:	f895 702c 	ldrb.w	r7, [r5, #44]	; 0x2c
    edc6:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    edca:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
			conn->llcp_conn_param.offset0 =
    edce:	f8a4 0104 	strh.w	r0, [r4, #260]	; 0x104
				sys_le16_to_cpu(cpr->offset1);
    edd2:	f895 702e 	ldrb.w	r7, [r5, #46]	; 0x2e
    edd6:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    edda:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
			conn->llcp_conn_param.offset1 =
    edde:	f8a4 0106 	strh.w	r0, [r4, #262]	; 0x106
				sys_le16_to_cpu(cpr->offset2);
    ede2:	f895 7030 	ldrb.w	r7, [r5, #48]	; 0x30
    ede6:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    edea:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
			conn->llcp_conn_param.offset2 =
    edee:	f8a4 0108 	strh.w	r0, [r4, #264]	; 0x108
				sys_le16_to_cpu(cpr->offset3);
    edf2:	f895 7032 	ldrb.w	r7, [r5, #50]	; 0x32
    edf6:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    edfa:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
			conn->llcp_conn_param.offset3 =
    edfe:	f8a4 010a 	strh.w	r0, [r4, #266]	; 0x10a
				sys_le16_to_cpu(cpr->offset4);
    ee02:	f895 7034 	ldrb.w	r7, [r5, #52]	; 0x34
    ee06:	f895 0033 	ldrb.w	r0, [r5, #51]	; 0x33
    ee0a:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
			conn->llcp_conn_param.offset4 =
    ee0e:	f8a4 010c 	strh.w	r0, [r4, #268]	; 0x10c
				sys_le16_to_cpu(cpr->offset5);
    ee12:	f895 0035 	ldrb.w	r0, [r5, #53]	; 0x35
    ee16:	f895 7036 	ldrb.w	r7, [r5, #54]	; 0x36
    ee1a:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
			conn->llcp_conn_param.offset5 =
    ee1e:	f8a4 010e 	strh.w	r0, [r4, #270]	; 0x10e
			     lll->interval) ||
    ee22:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
			if ((conn->llcp_conn_param.interval_max !=
    ee24:	4282      	cmp	r2, r0
    ee26:	e763      	b.n	ecf0 <ull_conn_rx+0x4b0>
				conn->llcp_conn_param.state =
    ee28:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
    ee2c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    ee30:	f043 0301 	orr.w	r3, r3, #1
    ee34:	f8a4 30f6 	strh.w	r3, [r4, #246]	; 0xf6
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    ee38:	2301      	movs	r3, #1
    ee3a:	712b      	strb	r3, [r5, #4]
    ee3c:	e773      	b.n	ed26 <ull_conn_rx+0x4e6>
    ee3e:	bf00      	nop
    ee40:	200024c8 	.word	0x200024c8
    ee44:	20002434 	.word	0x20002434
		if (PDU_DATA_LLCTRL_LEN(reject_ext_ind) != pdu_rx->len) {
    ee48:	7f6b      	ldrb	r3, [r5, #29]
    ee4a:	2b03      	cmp	r3, #3
    ee4c:	f040 80dc 	bne.w	f008 <ull_conn_rx+0x7c8>
	switch (rej_ext_ind->reject_opcode) {
    ee50:	f895 3020 	ldrb.w	r3, [r5, #32]
    ee54:	2b0f      	cmp	r3, #15
    ee56:	f47f acfe 	bne.w	e856 <ull_conn_rx+0x16>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
    ee5a:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
    ee5e:	f894 10f5 	ldrb.w	r1, [r4, #245]	; 0xf5
    ee62:	4299      	cmp	r1, r3
    ee64:	f43f acf7 	beq.w	e856 <ull_conn_rx+0x16>
	if (!lll->role && (rej_ext_ind->error_code ==
    ee68:	f994 0039 	ldrsb.w	r0, [r4, #57]	; 0x39
    ee6c:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
    ee70:	2800      	cmp	r0, #0
    ee72:	f2c0 80e3 	blt.w	f03c <ull_conn_rx+0x7fc>
    ee76:	291a      	cmp	r1, #26
    ee78:	f040 80e6 	bne.w	f048 <ull_conn_rx+0x808>
		LL_ASSERT(conn->llcp_cu.req == conn->llcp_cu.ack);
    ee7c:	f894 209c 	ldrb.w	r2, [r4, #156]	; 0x9c
    ee80:	f894 309d 	ldrb.w	r3, [r4, #157]	; 0x9d
    ee84:	429a      	cmp	r2, r3
    ee86:	d00c      	beq.n	eea2 <ull_conn_rx+0x662>
    ee88:	4a89      	ldr	r2, [pc, #548]	; (f0b0 <ull_conn_rx+0x870>)
    ee8a:	498a      	ldr	r1, [pc, #552]	; (f0b4 <ull_conn_rx+0x874>)
    ee8c:	488a      	ldr	r0, [pc, #552]	; (f0b8 <ull_conn_rx+0x878>)
    ee8e:	f241 43af 	movw	r3, #5295	; 0x14af
    ee92:	f007 fbb2 	bl	165fa <printk>
    ee96:	4040      	eors	r0, r0
    ee98:	f380 8811 	msr	BASEPRI, r0
    ee9c:	f04f 0003 	mov.w	r0, #3
    eea0:	df02      	svc	2
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    eea2:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
    eea6:	2206      	movs	r2, #6
    eea8:	f362 0303 	bfi	r3, r2, #0, #4
		conn->llcp_cu.win_size = 1U;
    eeac:	2201      	movs	r2, #1
    eeae:	f884 20ac 	strb.w	r2, [r4, #172]	; 0xac
		conn->llcp_cu.win_offset_us = 0U;
    eeb2:	2200      	movs	r2, #0
    eeb4:	f8c4 20a8 	str.w	r2, [r4, #168]	; 0xa8
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
    eeb8:	f8b4 20fa 	ldrh.w	r2, [r4, #250]	; 0xfa
    eebc:	f8a4 20a0 	strh.w	r2, [r4, #160]	; 0xa0
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
    eec0:	f8b4 20fc 	ldrh.w	r2, [r4, #252]	; 0xfc
    eec4:	f8a4 20a2 	strh.w	r2, [r4, #162]	; 0xa2
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
    eec8:	f8b4 20fe 	ldrh.w	r2, [r4, #254]	; 0xfe
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    eecc:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
    eed0:	f8a4 20a4 	strh.w	r2, [r4, #164]	; 0xa4
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
    eed4:	f3c3 1300 	ubfx	r3, r3, #4, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
    eed8:	f894 209e 	ldrb.w	r2, [r4, #158]	; 0x9e
    eedc:	00db      	lsls	r3, r3, #3
    eede:	f043 0301 	orr.w	r3, r3, #1
    eee2:	f022 020f 	bic.w	r2, r2, #15
    eee6:	4313      	orrs	r3, r2
    eee8:	f884 309e 	strb.w	r3, [r4, #158]	; 0x9e
		conn->llcp_cu.ack--;
    eeec:	f894 309d 	ldrb.w	r3, [r4, #157]	; 0x9d
    eef0:	3b01      	subs	r3, #1
    eef2:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
	if (err) {
    eef6:	e4ae      	b.n	e856 <ull_conn_rx+0x16>
		if (PDU_DATA_LLCTRL_LEN(unknown_rsp) != pdu_rx->len) {
    eef8:	7f6b      	ldrb	r3, [r5, #29]
    eefa:	2b02      	cmp	r3, #2
    eefc:	f040 8084 	bne.w	f008 <ull_conn_rx+0x7c8>
			    conn->llcp_conn_param.req) &&
    ef00:	f894 10f4 	ldrb.w	r1, [r4, #244]	; 0xf4
		} else if ((conn->llcp_conn_param.ack !=
    ef04:	f894 30f5 	ldrb.w	r3, [r4, #245]	; 0xf5
    ef08:	428b      	cmp	r3, r1
    ef0a:	f43f ad3c 	beq.w	e986 <ull_conn_rx+0x146>
			    conn->llcp_conn_param.req) &&
    ef0e:	f895 3020 	ldrb.w	r3, [r5, #32]
    ef12:	2b0f      	cmp	r3, #15
    ef14:	f47f ad37 	bne.w	e986 <ull_conn_rx+0x146>
			conn->llcp_conn_param.disabled = 1U;
    ef18:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
    ef1c:	f043 0320 	orr.w	r3, r3, #32
    ef20:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
			if (!conn->lll.role) {
    ef24:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    ef28:	2b00      	cmp	r3, #0
    ef2a:	db3e      	blt.n	efaa <ull_conn_rx+0x76a>
				LL_ASSERT(conn->llcp_cu.req ==
    ef2c:	f894 209c 	ldrb.w	r2, [r4, #156]	; 0x9c
    ef30:	f894 309d 	ldrb.w	r3, [r4, #157]	; 0x9d
    ef34:	429a      	cmp	r2, r3
    ef36:	d00c      	beq.n	ef52 <ull_conn_rx+0x712>
    ef38:	4a5d      	ldr	r2, [pc, #372]	; (f0b0 <ull_conn_rx+0x870>)
    ef3a:	495e      	ldr	r1, [pc, #376]	; (f0b4 <ull_conn_rx+0x874>)
    ef3c:	485e      	ldr	r0, [pc, #376]	; (f0b8 <ull_conn_rx+0x878>)
    ef3e:	f641 33f5 	movw	r3, #7157	; 0x1bf5
    ef42:	f007 fb5a 	bl	165fa <printk>
    ef46:	4040      	eors	r0, r0
    ef48:	f380 8811 	msr	BASEPRI, r0
    ef4c:	f04f 0003 	mov.w	r0, #3
    ef50:	df02      	svc	2
				conn->llcp_conn_param.state =
    ef52:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
    ef56:	2206      	movs	r2, #6
    ef58:	f362 0303 	bfi	r3, r2, #0, #4
				conn->llcp_cu.interval =
    ef5c:	f8b4 20fa 	ldrh.w	r2, [r4, #250]	; 0xfa
    ef60:	f8a4 20a0 	strh.w	r2, [r4, #160]	; 0xa0
				conn->llcp_cu.latency =
    ef64:	f8b4 20fc 	ldrh.w	r2, [r4, #252]	; 0xfc
    ef68:	f8a4 20a2 	strh.w	r2, [r4, #162]	; 0xa2
				conn->llcp_cu.timeout =
    ef6c:	f8b4 20fe 	ldrh.w	r2, [r4, #254]	; 0xfe
				conn->llcp_conn_param.state =
    ef70:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
				conn->llcp_cu.timeout =
    ef74:	f8a4 20a4 	strh.w	r2, [r4, #164]	; 0xa4
				conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
    ef78:	f3c3 1300 	ubfx	r3, r3, #4, #1
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
    ef7c:	f894 209e 	ldrb.w	r2, [r4, #158]	; 0x9e
				conn->llcp_cu.win_size = 1U;
    ef80:	2101      	movs	r1, #1
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
    ef82:	00db      	lsls	r3, r3, #3
    ef84:	430b      	orrs	r3, r1
    ef86:	f022 020f 	bic.w	r2, r2, #15
    ef8a:	4313      	orrs	r3, r2
    ef8c:	f884 309e 	strb.w	r3, [r4, #158]	; 0x9e
				conn->llcp_cu.ack--;
    ef90:	f894 309d 	ldrb.w	r3, [r4, #157]	; 0x9d
				conn->llcp_cu.win_size = 1U;
    ef94:	f884 10ac 	strb.w	r1, [r4, #172]	; 0xac
				conn->llcp_cu.ack--;
    ef98:	3b01      	subs	r3, #1
    ef9a:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    ef9e:	6833      	ldr	r3, [r6, #0]
				conn->llcp_cu.win_offset_us = 0U;
    efa0:	2000      	movs	r0, #0
    efa2:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    efa6:	7119      	strb	r1, [r3, #4]
				break;
    efa8:	e5ad      	b.n	eb06 <ull_conn_rx+0x2c6>
	conn_upd_curr = NULL;
    efaa:	4b44      	ldr	r3, [pc, #272]	; (f0bc <ull_conn_rx+0x87c>)
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    efac:	f884 10f5 	strb.w	r1, [r4, #245]	; 0xf5
	conn_upd_curr = NULL;
    efb0:	2000      	movs	r0, #0
    efb2:	6018      	str	r0, [r3, #0]
			if (!conn->llcp_conn_param.cmd) {
    efb4:	f894 00f6 	ldrb.w	r0, [r4, #246]	; 0xf6
    efb8:	f010 0010 	ands.w	r0, r0, #16
    efbc:	d102      	bne.n	efc4 <ull_conn_rx+0x784>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    efbe:	2301      	movs	r3, #1
    efc0:	712b      	strb	r3, [r5, #4]
		break;
    efc2:	e5a0      	b.n	eb06 <ull_conn_rx+0x2c6>
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    efc4:	2318      	movs	r3, #24
    efc6:	712b      	strb	r3, [r5, #4]
			LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
    efc8:	07d3      	lsls	r3, r2, #31
    efca:	d50c      	bpl.n	efe6 <ull_conn_rx+0x7a6>
    efcc:	4a38      	ldr	r2, [pc, #224]	; (f0b0 <ull_conn_rx+0x870>)
    efce:	493c      	ldr	r1, [pc, #240]	; (f0c0 <ull_conn_rx+0x880>)
    efd0:	4839      	ldr	r0, [pc, #228]	; (f0b8 <ull_conn_rx+0x878>)
    efd2:	f641 4322 	movw	r3, #7202	; 0x1c22
    efd6:	f007 fb10 	bl	165fa <printk>
    efda:	4040      	eors	r0, r0
    efdc:	f380 8811 	msr	BASEPRI, r0
    efe0:	f04f 0003 	mov.w	r0, #3
    efe4:	df02      	svc	2
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    efe6:	231a      	movs	r3, #26
    efe8:	772b      	strb	r3, [r5, #28]
			cu->latency = lll->latency;
    efea:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
			cu->interval = lll->interval;
    efec:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
			cu->latency = lll->latency;
    efee:	842b      	strh	r3, [r5, #32]
			cu->timeout = conn->supervision_reload *
    eff0:	f8b4 3072 	ldrh.w	r3, [r4, #114]	; 0x72
			cu->interval = lll->interval;
    eff4:	83ea      	strh	r2, [r5, #30]
			cu->timeout = conn->supervision_reload *
    eff6:	4353      	muls	r3, r2
				      lll->interval * 125U / 1000;
    eff8:	227d      	movs	r2, #125	; 0x7d
    effa:	4353      	muls	r3, r2
    effc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f000:	fbb3 f3f2 	udiv	r3, r3, r2
			cu->timeout = conn->supervision_reload *
    f004:	846b      	strh	r3, [r5, #34]	; 0x22
			    PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ)) {
    f006:	e4be      	b.n	e986 <ull_conn_rx+0x146>
	tx = ctrl_tx_rsp_mem_acquire(conn, rx, &err);
    f008:	4629      	mov	r1, r5
    f00a:	aa01      	add	r2, sp, #4
    f00c:	4620      	mov	r0, r4
    f00e:	f7ff f943 	bl	e298 <ctrl_tx_rsp_mem_acquire>
	if (!tx) {
    f012:	4601      	mov	r1, r0
    f014:	2800      	cmp	r0, #0
    f016:	f43f ad03 	beq.w	ea20 <ull_conn_rx+0x1e0>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    f01a:	7903      	ldrb	r3, [r0, #4]
	pdu->llctrl.unknown_rsp.type = type;
    f01c:	f880 8008 	strb.w	r8, [r0, #8]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    f020:	f043 0303 	orr.w	r3, r3, #3
    f024:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
    f026:	2302      	movs	r3, #2
    f028:	7143      	strb	r3, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
    f02a:	2307      	movs	r3, #7
    f02c:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, tx);
    f02e:	4620      	mov	r0, r4
    f030:	f00d faab 	bl	1c58a <ctrl_tx_enqueue>
    f034:	e40f      	b.n	e856 <ull_conn_rx+0x16>
			return -ENOBUFS;
    f036:	f06f 0068 	mvn.w	r0, #104	; 0x68
    f03a:	e564      	b.n	eb06 <ull_conn_rx+0x2c6>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
    f03c:	2923      	cmp	r1, #35	; 0x23
    f03e:	d003      	beq.n	f048 <ull_conn_rx+0x808>
			conn->periph.ticks_to_offset =
    f040:	f8d4 1118 	ldr.w	r1, [r4, #280]	; 0x118
    f044:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
    f048:	f894 10f6 	ldrb.w	r1, [r4, #246]	; 0xf6
    f04c:	f001 000f 	and.w	r0, r1, #15
    f050:	2804      	cmp	r0, #4
    f052:	d106      	bne.n	f062 <ull_conn_rx+0x822>
	conn_upd_curr = NULL;
    f054:	4e19      	ldr	r6, [pc, #100]	; (f0bc <ull_conn_rx+0x87c>)
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    f056:	f884 30f5 	strb.w	r3, [r4, #245]	; 0xf5
	conn_upd_curr = NULL;
    f05a:	2000      	movs	r0, #0
    f05c:	6030      	str	r0, [r6, #0]
		conn->procedure_expire = 0U;
    f05e:	f8a4 0078 	strh.w	r0, [r4, #120]	; 0x78
	if (!conn->llcp_conn_param.cmd) {
    f062:	06c9      	lsls	r1, r1, #27
    f064:	f57f abf7 	bpl.w	e856 <ull_conn_rx+0x16>
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    f068:	2318      	movs	r3, #24
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
    f06a:	07d2      	lsls	r2, r2, #31
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    f06c:	712b      	strb	r3, [r5, #4]
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
    f06e:	d50c      	bpl.n	f08a <ull_conn_rx+0x84a>
    f070:	4a0f      	ldr	r2, [pc, #60]	; (f0b0 <ull_conn_rx+0x870>)
    f072:	4913      	ldr	r1, [pc, #76]	; (f0c0 <ull_conn_rx+0x880>)
    f074:	4810      	ldr	r0, [pc, #64]	; (f0b8 <ull_conn_rx+0x878>)
    f076:	f44f 53a7 	mov.w	r3, #5344	; 0x14e0
    f07a:	f007 fabe 	bl	165fa <printk>
    f07e:	4040      	eors	r0, r0
    f080:	f380 8811 	msr	BASEPRI, r0
    f084:	f04f 0003 	mov.w	r0, #3
    f088:	df02      	svc	2
	cu->status = rej_ext_ind->error_code;
    f08a:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
    f08e:	772b      	strb	r3, [r5, #28]
	cu->latency = lll->latency;
    f090:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
	cu->interval = lll->interval;
    f092:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
	cu->latency = lll->latency;
    f094:	842b      	strh	r3, [r5, #32]
	cu->timeout = conn->supervision_reload *
    f096:	f8b4 3072 	ldrh.w	r3, [r4, #114]	; 0x72
	cu->interval = lll->interval;
    f09a:	83ea      	strh	r2, [r5, #30]
	cu->timeout = conn->supervision_reload *
    f09c:	4353      	muls	r3, r2
		      lll->interval * 125U / 1000;
    f09e:	227d      	movs	r2, #125	; 0x7d
    f0a0:	4353      	muls	r3, r2
    f0a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f0a6:	fbb3 f3f2 	udiv	r3, r3, r2
	cu->timeout = conn->supervision_reload *
    f0aa:	846b      	strh	r3, [r5, #34]	; 0x22
	if (err) {
    f0ac:	f7ff bbde 	b.w	e86c <ull_conn_rx+0x2c>
    f0b0:	00020847 	.word	0x00020847
    f0b4:	000208ea 	.word	0x000208ea
    f0b8:	0002023c 	.word	0x0002023c
    f0bc:	20002434 	.word	0x20002434
    f0c0:	000204ba 	.word	0x000204ba

0000f0c4 <ull_conn_tx_demux>:
{
    f0c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
    f0c6:	4c1e      	ldr	r4, [pc, #120]	; (f140 <ull_conn_tx_demux+0x7c>)
{
    f0c8:	4605      	mov	r5, r0
	return (void *)(fifo + first * size);
    f0ca:	1d26      	adds	r6, r4, #4
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
    f0cc:	78a3      	ldrb	r3, [r4, #2]
	if (first == last) {
    f0ce:	78e1      	ldrb	r1, [r4, #3]
    f0d0:	7822      	ldrb	r2, [r4, #0]
    f0d2:	4299      	cmp	r1, r3
    f0d4:	d02a      	beq.n	f12c <ull_conn_tx_demux+0x68>
	return (void *)(fifo + first * size);
    f0d6:	fb13 f302 	smulbb	r3, r3, r2
    f0da:	18f7      	adds	r7, r6, r3
		conn = ll_connected_get(lll_tx->handle);
    f0dc:	5af0      	ldrh	r0, [r6, r3]
    f0de:	f00d fa97 	bl	1c610 <ll_connected_get>
		if (conn) {
    f0e2:	6879      	ldr	r1, [r7, #4]
    f0e4:	b318      	cbz	r0, f12e <ull_conn_tx_demux+0x6a>
			tx->next = NULL;
    f0e6:	2300      	movs	r3, #0
    f0e8:	600b      	str	r3, [r1, #0]
			if (!conn->tx_data) {
    f0ea:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
    f0ee:	b943      	cbnz	r3, f102 <ull_conn_tx_demux+0x3e>
				if (!conn->tx_head) {
    f0f0:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
				conn->tx_data = tx;
    f0f4:	f8c0 1128 	str.w	r1, [r0, #296]	; 0x128
				if (!conn->tx_head) {
    f0f8:	b91b      	cbnz	r3, f102 <ull_conn_tx_demux+0x3e>
					conn->tx_head = tx;
    f0fa:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
					conn->tx_data_last = NULL;
    f0fe:	f8c0 312c 	str.w	r3, [r0, #300]	; 0x12c
			if (conn->tx_data_last) {
    f102:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
    f106:	b103      	cbz	r3, f10a <ull_conn_tx_demux+0x46>
				conn->tx_data_last->next = tx;
    f108:	6019      	str	r1, [r3, #0]
			conn->tx_data_last = tx;
    f10a:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
	uint8_t _first = *first; /* Copy read-index */
    f10e:	78a3      	ldrb	r3, [r4, #2]
	if (_first == last) {
    f110:	78e1      	ldrb	r1, [r4, #3]
		MFIFO_DEQUEUE(conn_tx);
    f112:	7862      	ldrb	r2, [r4, #1]
    f114:	4299      	cmp	r1, r3
    f116:	d005      	beq.n	f124 <ull_conn_tx_demux+0x60>
	_first += 1U;
    f118:	3301      	adds	r3, #1
    f11a:	b2db      	uxtb	r3, r3
		_first = 0U;
    f11c:	429a      	cmp	r2, r3
    f11e:	bf08      	it	eq
    f120:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
    f122:	70a3      	strb	r3, [r4, #2]
	} while (--count);
    f124:	3d01      	subs	r5, #1
    f126:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    f12a:	d1cf      	bne.n	f0cc <ull_conn_tx_demux+0x8>
}
    f12c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			p->ll_id = PDU_DATA_LLID_RESV;
    f12e:	790b      	ldrb	r3, [r1, #4]
    f130:	f360 0301 	bfi	r3, r0, #0, #2
    f134:	710b      	strb	r3, [r1, #4]
			ll_tx_ack_put(LLL_HANDLE_INVALID, tx);
    f136:	f64f 70ff 	movw	r0, #65535	; 0xffff
    f13a:	f7fe f80f 	bl	d15c <ll_tx_ack_put>
    f13e:	e7e6      	b.n	f10e <ull_conn_tx_demux+0x4a>
    f140:	20000714 	.word	0x20000714

0000f144 <conn_cleanup>:
	if (conn == conn_upd_curr) {
    f144:	4b3d      	ldr	r3, [pc, #244]	; (f23c <conn_cleanup+0xf8>)
{
    f146:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (conn == conn_upd_curr) {
    f14a:	681a      	ldr	r2, [r3, #0]
	*((uint8_t *)rx->pdu) = reason;
    f14c:	f880 10f0 	strb.w	r1, [r0, #240]	; 0xf0
	if (conn == conn_upd_curr) {
    f150:	4290      	cmp	r0, r2
		conn_upd_curr = NULL;
    f152:	bf04      	itt	eq
    f154:	2200      	moveq	r2, #0
    f156:	601a      	streq	r2, [r3, #0]
	rx->hdr.handle = conn->lll.handle;
    f158:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    f15a:	f8a0 30da 	strh.w	r3, [r0, #218]	; 0xda
	rx = conn->llcp_rx;
    f15e:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    f162:	2317      	movs	r3, #23
{
    f164:	4604      	mov	r4, r0
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    f166:	f880 30d8 	strb.w	r3, [r0, #216]	; 0xd8
		hdr->type = NODE_RX_TYPE_RELEASE;
    f16a:	2501      	movs	r5, #1
	while (rx) {
    f16c:	bb49      	cbnz	r1, f1c2 <conn_cleanup+0x7e>
		link = mem_acquire(&mem_link_tx.free);
    f16e:	4f34      	ldr	r7, [pc, #208]	; (f240 <conn_cleanup+0xfc>)
		LL_ASSERT(link);
    f170:	f8df 80d0 	ldr.w	r8, [pc, #208]	; f244 <conn_cleanup+0x100>
    f174:	f8df 90d0 	ldr.w	r9, [pc, #208]	; f248 <conn_cleanup+0x104>
	while (conn->tx_head) {
    f178:	f8d4 511c 	ldr.w	r5, [r4, #284]	; 0x11c
    f17c:	bb45      	cbnz	r5, f1d0 <conn_cleanup+0x8c>
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    f17e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    f180:	4b32      	ldr	r3, [pc, #200]	; (f24c <conn_cleanup+0x108>)
    f182:	9400      	str	r4, [sp, #0]
    f184:	3205      	adds	r2, #5
    f186:	b2d2      	uxtb	r2, r2
    f188:	2101      	movs	r1, #1
    f18a:	4628      	mov	r0, r5
    f18c:	f7fc fca6 	bl	badc <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f190:	f030 0302 	bics.w	r3, r0, #2
    f194:	d00c      	beq.n	f1b0 <conn_cleanup+0x6c>
    f196:	4a2b      	ldr	r2, [pc, #172]	; (f244 <conn_cleanup+0x100>)
    f198:	492d      	ldr	r1, [pc, #180]	; (f250 <conn_cleanup+0x10c>)
    f19a:	482e      	ldr	r0, [pc, #184]	; (f254 <conn_cleanup+0x110>)
    f19c:	f640 1323 	movw	r3, #2339	; 0x923
    f1a0:	f007 fa2b 	bl	165fa <printk>
    f1a4:	4040      	eors	r0, r0
    f1a6:	f380 8811 	msr	BASEPRI, r0
    f1aa:	f04f 0003 	mov.w	r0, #3
    f1ae:	df02      	svc	2
	lll->handle = LLL_HANDLE_INVALID;
    f1b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ull_conn_tx_demux(UINT8_MAX);
    f1b4:	20ff      	movs	r0, #255	; 0xff
	lll->handle = LLL_HANDLE_INVALID;
    f1b6:	8523      	strh	r3, [r4, #40]	; 0x28
}
    f1b8:	b003      	add	sp, #12
    f1ba:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	ull_conn_tx_demux(UINT8_MAX);
    f1be:	f7ff bf81 	b.w	f0c4 <ull_conn_tx_demux>
		rx = hdr->link->mem;
    f1c2:	6808      	ldr	r0, [r1, #0]
    f1c4:	6846      	ldr	r6, [r0, #4]
		hdr->type = NODE_RX_TYPE_RELEASE;
    f1c6:	710d      	strb	r5, [r1, #4]
		ll_rx_put(hdr->link, hdr);
    f1c8:	f7fd ff06 	bl	cfd8 <ll_rx_put>
		rx = hdr->link->mem;
    f1cc:	4631      	mov	r1, r6
    f1ce:	e7cd      	b.n	f16c <conn_cleanup+0x28>
	if (conn->tx_head == conn->tx_ctrl) {
    f1d0:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
		conn->tx_head = conn->tx_head->next;
    f1d4:	682b      	ldr	r3, [r5, #0]
	if (conn->tx_head == conn->tx_ctrl) {
    f1d6:	4295      	cmp	r5, r2
    f1d8:	d124      	bne.n	f224 <conn_cleanup+0xe0>
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
    f1da:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
		conn->tx_head = conn->tx_head->next;
    f1de:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
    f1e2:	4295      	cmp	r5, r2
			conn->tx_ctrl = NULL;
    f1e4:	bf06      	itte	eq
    f1e6:	2300      	moveq	r3, #0
			conn->tx_ctrl_last = NULL;
    f1e8:	e9c4 3348 	strdeq	r3, r3, [r4, #288]	; 0x120
			conn->tx_ctrl = conn->tx_head;
    f1ec:	f8c4 3120 	strne.w	r3, [r4, #288]	; 0x120
		tx->next = tx;
    f1f0:	602d      	str	r5, [r5, #0]
		link = mem_acquire(&mem_link_tx.free);
    f1f2:	4638      	mov	r0, r7
    f1f4:	f00c fc6d 	bl	1bad2 <mem_acquire>
		LL_ASSERT(link);
    f1f8:	4606      	mov	r6, r0
    f1fa:	b960      	cbnz	r0, f216 <conn_cleanup+0xd2>
    f1fc:	4815      	ldr	r0, [pc, #84]	; (f254 <conn_cleanup+0x110>)
    f1fe:	f640 135e 	movw	r3, #2398	; 0x95e
    f202:	4642      	mov	r2, r8
    f204:	4649      	mov	r1, r9
    f206:	f007 f9f8 	bl	165fa <printk>
    f20a:	4040      	eors	r0, r0
    f20c:	f380 8811 	msr	BASEPRI, r0
    f210:	f04f 0003 	mov.w	r0, #3
    f214:	df02      	svc	2
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
    f216:	f104 025c 	add.w	r2, r4, #92	; 0x5c
    f21a:	4629      	mov	r1, r5
    f21c:	4630      	mov	r0, r6
    f21e:	f00c fcb6 	bl	1bb8e <memq_enqueue>
    f222:	e7a9      	b.n	f178 <conn_cleanup+0x34>
		if (conn->tx_head == conn->tx_data) {
    f224:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
		conn->tx_head = conn->tx_head->next;
    f228:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
		if (conn->tx_head == conn->tx_data) {
    f22c:	4295      	cmp	r5, r2
			conn->tx_data = conn->tx_data->next;
    f22e:	bf08      	it	eq
    f230:	f8c4 3128 	streq.w	r3, [r4, #296]	; 0x128
		tx->next = NULL;
    f234:	2300      	movs	r3, #0
    f236:	602b      	str	r3, [r5, #0]
    f238:	e7db      	b.n	f1f2 <conn_cleanup+0xae>
    f23a:	bf00      	nop
    f23c:	20002434 	.word	0x20002434
    f240:	2000257c 	.word	0x2000257c
    f244:	00020847 	.word	0x00020847
    f248:	0002091f 	.word	0x0002091f
    f24c:	0000e321 	.word	0x0000e321
    f250:	00020924 	.word	0x00020924
    f254:	0002023c 	.word	0x0002023c

0000f258 <ull_conn_done>:
{
    f258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	conn = CONTAINER_OF(done->param, struct ll_conn, ull);
    f25c:	69c4      	ldr	r4, [r0, #28]
	if (unlikely(lll->handle == LLL_HANDLE_INVALID)) {
    f25e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    f260:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f264:	429a      	cmp	r2, r3
{
    f266:	b08a      	sub	sp, #40	; 0x28
    f268:	4680      	mov	r8, r0
	if (unlikely(lll->handle == LLL_HANDLE_INVALID)) {
    f26a:	f000 80ba 	beq.w	f3e2 <__kernel_ram_size+0x82>
	reason_final = conn->llcp_terminate.reason_final;
    f26e:	f894 50d3 	ldrb.w	r5, [r4, #211]	; 0xd3
	if (reason_final && (
    f272:	b135      	cbz	r5, f282 <ull_conn_done+0x2a>
		conn_cleanup(conn, reason_final);
    f274:	4629      	mov	r1, r5
    f276:	4620      	mov	r0, r4
}
    f278:	b00a      	add	sp, #40	; 0x28
    f27a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		conn_cleanup(conn, reason_final);
    f27e:	f7ff bf61 	b.w	f144 <conn_cleanup>
	latency_event = lll->latency_event;
    f282:	8e27      	ldrh	r7, [r4, #48]	; 0x30
	if (done->extra.trx_cnt) {
    f284:	8c83      	ldrh	r3, [r0, #36]	; 0x24
	elapsed_event = latency_event + 1;
    f286:	1c7e      	adds	r6, r7, #1
	ticks_drift_minus = 0U;
    f288:	e9cd 5508 	strd	r5, r5, [sp, #32]
	elapsed_event = latency_event + 1;
    f28c:	b2b6      	uxth	r6, r6
	if (done->extra.trx_cnt) {
    f28e:	b17b      	cbz	r3, f2b0 <ull_conn_done+0x58>
		} else if (lll->role) {
    f290:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    f294:	2b00      	cmp	r3, #0
    f296:	da08      	bge.n	f2aa <ull_conn_done+0x52>
			ull_drift_ticks_get(done, &ticks_drift_plus,
    f298:	aa08      	add	r2, sp, #32
    f29a:	a909      	add	r1, sp, #36	; 0x24
    f29c:	f7f1 fdc4 	bl	e28 <ull_drift_ticks_get>
			if (!conn->tx_head) {
    f2a0:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
    f2a4:	b163      	cbz	r3, f2c0 <ull_conn_done+0x68>
				lll->latency_event = 0;
    f2a6:	2300      	movs	r3, #0
				lll->latency_event = lll->latency;
    f2a8:	8623      	strh	r3, [r4, #48]	; 0x30
		conn->connect_expire = 0U;
    f2aa:	2300      	movs	r3, #0
    f2ac:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
	if (done->extra.crc_valid) {
    f2b0:	f898 3026 	ldrb.w	r3, [r8, #38]	; 0x26
    f2b4:	07db      	lsls	r3, r3, #31
    f2b6:	d517      	bpl.n	f2e8 <ull_conn_done+0x90>
		conn->supervision_expire = 0U;
    f2b8:	2300      	movs	r3, #0
			conn->supervision_expire = conn->supervision_reload;
    f2ba:	f8a4 3074 	strh.w	r3, [r4, #116]	; 0x74
    f2be:	e01c      	b.n	f2fa <ull_conn_done+0xa2>
				ull_conn_tx_demux(UINT8_MAX);
    f2c0:	20ff      	movs	r0, #255	; 0xff
    f2c2:	f7ff feff 	bl	f0c4 <ull_conn_tx_demux>
			if (conn->tx_head || memq_peek(lll->memq_tx.head,
    f2c6:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
    f2ca:	2b00      	cmp	r3, #0
    f2cc:	d1eb      	bne.n	f2a6 <ull_conn_done+0x4e>
    f2ce:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    f2d2:	462a      	mov	r2, r5
    f2d4:	f00c fc62 	bl	1bb9c <memq_peek>
    f2d8:	2800      	cmp	r0, #0
    f2da:	d1e4      	bne.n	f2a6 <ull_conn_done+0x4e>
			} else if (lll->periph.latency_enabled) {
    f2dc:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    f2e0:	075a      	lsls	r2, r3, #29
    f2e2:	d5e2      	bpl.n	f2aa <ull_conn_done+0x52>
				lll->latency_event = lll->latency;
    f2e4:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    f2e6:	e7df      	b.n	f2a8 <ull_conn_done+0x50>
	else if (conn->connect_expire) {
    f2e8:	f8b4 3070 	ldrh.w	r3, [r4, #112]	; 0x70
    f2ec:	2b00      	cmp	r3, #0
    f2ee:	d07b      	beq.n	f3e8 <__kernel_ram_size+0x88>
		if (conn->connect_expire > elapsed_event) {
    f2f0:	42b3      	cmp	r3, r6
    f2f2:	d972      	bls.n	f3da <__kernel_ram_size+0x7a>
			conn->connect_expire -= elapsed_event;
    f2f4:	1b9b      	subs	r3, r3, r6
    f2f6:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
	if (conn->supervision_expire) {
    f2fa:	f8b4 3074 	ldrh.w	r3, [r4, #116]	; 0x74
    f2fe:	b1e3      	cbz	r3, f33a <ull_conn_done+0xe2>
		if (conn->supervision_expire > elapsed_event) {
    f300:	42b3      	cmp	r3, r6
    f302:	d978      	bls.n	f3f6 <__kernel_ram_size+0x96>
			conn->supervision_expire -= elapsed_event;
    f304:	1b9b      	subs	r3, r3, r6
    f306:	b29b      	uxth	r3, r3
			lll->latency_event = 0U;
    f308:	2200      	movs	r2, #0
			if (conn->supervision_expire <= 6U) {
    f30a:	2b06      	cmp	r3, #6
			conn->supervision_expire -= elapsed_event;
    f30c:	f8a4 3074 	strh.w	r3, [r4, #116]	; 0x74
			lll->latency_event = 0U;
    f310:	8622      	strh	r2, [r4, #48]	; 0x30
			if (conn->supervision_expire <= 6U) {
    f312:	d972      	bls.n	f3fa <__kernel_ram_size+0x9a>
			else if (lll->role) {
    f314:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    f318:	4293      	cmp	r3, r2
    f31a:	da0e      	bge.n	f33a <ull_conn_done+0xe2>
				if (latency_event) {
    f31c:	2f00      	cmp	r7, #0
    f31e:	d16c      	bne.n	f3fa <__kernel_ram_size+0x9a>
					force = conn->periph.force & 0x01;
    f320:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
					conn->periph.force >>= 1U;
    f324:	085a      	lsrs	r2, r3, #1
					if (force) {
    f326:	f013 0301 	ands.w	r3, r3, #1
						conn->periph.force |= BIT(31);
    f32a:	bf17      	itett	ne
    f32c:	f042 4200 	orrne.w	r2, r2, #2147483648	; 0x80000000
					conn->periph.force >>= 1U;
    f330:	f8c4 2080 	streq.w	r2, [r4, #128]	; 0x80
						conn->periph.force |= BIT(31);
    f334:	f8c4 2080 	strne.w	r2, [r4, #128]	; 0x80
					force = conn->periph.force & 0x01;
    f338:	461d      	movne	r5, r3
	if (conn->procedure_expire != 0U) {
    f33a:	f8b4 3078 	ldrh.w	r3, [r4, #120]	; 0x78
    f33e:	b123      	cbz	r3, f34a <ull_conn_done+0xf2>
		if (conn->procedure_expire > elapsed_event) {
    f340:	42b3      	cmp	r3, r6
    f342:	d95c      	bls.n	f3fe <__kernel_ram_size+0x9e>
			conn->procedure_expire -= elapsed_event;
    f344:	1b9b      	subs	r3, r3, r6
    f346:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
    f34a:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
    f34e:	f894 2089 	ldrb.w	r2, [r4, #137]	; 0x89
    f352:	1a9b      	subs	r3, r3, r2
    f354:	f003 0303 	and.w	r3, r3, #3
    f358:	2b02      	cmp	r3, #2
    f35a:	d104      	bne.n	f366 <__kernel_ram_size+0x6>
	     ((conn->llcp_type == LLCP_CONN_UPD) ||
    f35c:	f894 308a 	ldrb.w	r3, [r4, #138]	; 0x8a
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
    f360:	3b01      	subs	r3, #1
    f362:	2b01      	cmp	r3, #1
    f364:	d905      	bls.n	f372 <__kernel_ram_size+0x12>
	      (conn->llcp_type == LLCP_CHAN_MAP))) ||
    f366:	f894 209c 	ldrb.w	r2, [r4, #156]	; 0x9c
    f36a:	f894 309d 	ldrb.w	r3, [r4, #157]	; 0x9d
    f36e:	429a      	cmp	r2, r3
    f370:	d001      	beq.n	f376 <__kernel_ram_size+0x16>
		lll->latency_event = 0U;
    f372:	2300      	movs	r3, #0
    f374:	8623      	strh	r3, [r4, #48]	; 0x30
	if ((force) || (latency_event != lll->latency_event)) {
    f376:	8e21      	ldrh	r1, [r4, #48]	; 0x30
    f378:	b90d      	cbnz	r5, f37e <__kernel_ram_size+0x1e>
    f37a:	428f      	cmp	r7, r1
    f37c:	d041      	beq.n	f402 <__kernel_ram_size+0xa2>
		lazy = lll->latency_event + 1U;
    f37e:	3101      	adds	r1, #1
    f380:	b289      	uxth	r1, r1
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
    f382:	e9dd 7308 	ldrd	r7, r3, [sp, #32]
    f386:	ea53 0207 	orrs.w	r2, r3, r7
    f38a:	d101      	bne.n	f390 <__kernel_ram_size+0x30>
    f38c:	b901      	cbnz	r1, f390 <__kernel_ram_size+0x30>
    f38e:	b345      	cbz	r5, f3e2 <__kernel_ram_size+0x82>
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
    f390:	8d22      	ldrh	r2, [r4, #40]	; 0x28
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
    f392:	481d      	ldr	r0, [pc, #116]	; (f408 <__kernel_ram_size+0xa8>)
		struct ll_conn *conn = lll->hdr.parent;
    f394:	69e6      	ldr	r6, [r4, #28]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
    f396:	9606      	str	r6, [sp, #24]
    f398:	e9cd 5004 	strd	r5, r0, [sp, #16]
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
    f39c:	3205      	adds	r2, #5
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
    f39e:	2000      	movs	r0, #0
    f3a0:	9103      	str	r1, [sp, #12]
    f3a2:	e9cd 0001 	strd	r0, r0, [sp, #4]
    f3a6:	9700      	str	r7, [sp, #0]
    f3a8:	b2d2      	uxtb	r2, r2
    f3aa:	2101      	movs	r1, #1
    f3ac:	f00c fe9d 	bl	1c0ea <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f3b0:	f030 0302 	bics.w	r3, r0, #2
    f3b4:	d015      	beq.n	f3e2 <__kernel_ram_size+0x82>
    f3b6:	f7fd ff59 	bl	d26c <ull_disable_mark_get>
    f3ba:	4286      	cmp	r6, r0
    f3bc:	d011      	beq.n	f3e2 <__kernel_ram_size+0x82>
    f3be:	4a13      	ldr	r2, [pc, #76]	; (f40c <__kernel_ram_size+0xac>)
    f3c0:	4913      	ldr	r1, [pc, #76]	; (f410 <__kernel_ram_size+0xb0>)
    f3c2:	4814      	ldr	r0, [pc, #80]	; (f414 <__kernel_ram_size+0xb4>)
    f3c4:	f240 63cd 	movw	r3, #1741	; 0x6cd
    f3c8:	f007 f917 	bl	165fa <printk>
    f3cc:	4040      	eors	r0, r0
    f3ce:	f380 8811 	msr	BASEPRI, r0
    f3d2:	f04f 0003 	mov.w	r0, #3
    f3d6:	df02      	svc	2
    f3d8:	e003      	b.n	f3e2 <__kernel_ram_size+0x82>
			conn_cleanup(conn, BT_HCI_ERR_CONN_FAIL_TO_ESTAB);
    f3da:	213e      	movs	r1, #62	; 0x3e
			conn_cleanup(conn, BT_HCI_ERR_CONN_TIMEOUT);
    f3dc:	4620      	mov	r0, r4
    f3de:	f7ff feb1 	bl	f144 <conn_cleanup>
}
    f3e2:	b00a      	add	sp, #40	; 0x28
    f3e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!conn->supervision_expire) {
    f3e8:	f8b4 3074 	ldrh.w	r3, [r4, #116]	; 0x74
    f3ec:	2b00      	cmp	r3, #0
    f3ee:	d184      	bne.n	f2fa <ull_conn_done+0xa2>
			conn->supervision_expire = conn->supervision_reload;
    f3f0:	f8b4 3072 	ldrh.w	r3, [r4, #114]	; 0x72
    f3f4:	e761      	b.n	f2ba <ull_conn_done+0x62>
			conn_cleanup(conn, BT_HCI_ERR_CONN_TIMEOUT);
    f3f6:	2108      	movs	r1, #8
    f3f8:	e7f0      	b.n	f3dc <__kernel_ram_size+0x7c>
				force = 1U;
    f3fa:	2501      	movs	r5, #1
    f3fc:	e79d      	b.n	f33a <ull_conn_done+0xe2>
			conn_cleanup(conn, BT_HCI_ERR_LL_RESP_TIMEOUT);
    f3fe:	2122      	movs	r1, #34	; 0x22
    f400:	e7ec      	b.n	f3dc <__kernel_ram_size+0x7c>
	lazy = 0U;
    f402:	4629      	mov	r1, r5
    f404:	e7bd      	b.n	f382 <__kernel_ram_size+0x22>
    f406:	bf00      	nop
    f408:	0000e531 	.word	0x0000e531
    f40c:	00020847 	.word	0x00020847
    f410:	00020951 	.word	0x00020951
    f414:	0002023c 	.word	0x0002023c

0000f418 <ull_conn_tx_lll_enqueue>:
{
    f418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		link = mem_acquire(&mem_link_tx.free);
    f41c:	f8df 8088 	ldr.w	r8, [pc, #136]	; f4a8 <ull_conn_tx_lll_enqueue+0x90>
		LL_ASSERT(link);
    f420:	f8df 9088 	ldr.w	r9, [pc, #136]	; f4ac <ull_conn_tx_lll_enqueue+0x94>
    f424:	f8df a088 	ldr.w	sl, [pc, #136]	; f4b0 <ull_conn_tx_lll_enqueue+0x98>
{
    f428:	4604      	mov	r4, r0
    f42a:	460e      	mov	r6, r1
	while (conn->tx_head &&
    f42c:	f8d4 511c 	ldr.w	r5, [r4, #284]	; 0x11c
    f430:	b105      	cbz	r5, f434 <ull_conn_tx_lll_enqueue+0x1c>
		(!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
    f432:	b90e      	cbnz	r6, f438 <ull_conn_tx_lll_enqueue+0x20>
}
    f434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (conn->tx_head == conn->tx_ctrl) {
    f438:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
		conn->tx_head = conn->tx_head->next;
    f43c:	682b      	ldr	r3, [r5, #0]
	if (conn->tx_head == conn->tx_ctrl) {
    f43e:	4295      	cmp	r5, r2
    f440:	d126      	bne.n	f490 <ull_conn_tx_lll_enqueue+0x78>
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
    f442:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
		conn->tx_head = conn->tx_head->next;
    f446:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
    f44a:	4295      	cmp	r5, r2
			conn->tx_ctrl = NULL;
    f44c:	bf06      	itte	eq
    f44e:	2300      	moveq	r3, #0
			conn->tx_ctrl_last = NULL;
    f450:	e9c4 3348 	strdeq	r3, r3, [r4, #288]	; 0x120
			conn->tx_ctrl = conn->tx_head;
    f454:	f8c4 3120 	strne.w	r3, [r4, #288]	; 0x120
		tx->next = tx;
    f458:	602d      	str	r5, [r5, #0]
		link = mem_acquire(&mem_link_tx.free);
    f45a:	4640      	mov	r0, r8
    f45c:	f00c fb39 	bl	1bad2 <mem_acquire>
		LL_ASSERT(link);
    f460:	4607      	mov	r7, r0
    f462:	b960      	cbnz	r0, f47e <ull_conn_tx_lll_enqueue+0x66>
    f464:	4813      	ldr	r0, [pc, #76]	; (f4b4 <ull_conn_tx_lll_enqueue+0x9c>)
    f466:	f240 7326 	movw	r3, #1830	; 0x726
    f46a:	464a      	mov	r2, r9
    f46c:	4651      	mov	r1, sl
    f46e:	f007 f8c4 	bl	165fa <printk>
    f472:	4040      	eors	r0, r0
    f474:	f380 8811 	msr	BASEPRI, r0
    f478:	f04f 0003 	mov.w	r0, #3
    f47c:	df02      	svc	2
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
    f47e:	f104 025c 	add.w	r2, r4, #92	; 0x5c
    f482:	4629      	mov	r1, r5
    f484:	4638      	mov	r0, r7
    f486:	3e01      	subs	r6, #1
    f488:	f00c fb81 	bl	1bb8e <memq_enqueue>
    f48c:	b2f6      	uxtb	r6, r6
    f48e:	e7cd      	b.n	f42c <ull_conn_tx_lll_enqueue+0x14>
		if (conn->tx_head == conn->tx_data) {
    f490:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
		conn->tx_head = conn->tx_head->next;
    f494:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
		if (conn->tx_head == conn->tx_data) {
    f498:	4295      	cmp	r5, r2
			conn->tx_data = conn->tx_data->next;
    f49a:	bf08      	it	eq
    f49c:	f8c4 3128 	streq.w	r3, [r4, #296]	; 0x128
		tx->next = NULL;
    f4a0:	2300      	movs	r3, #0
    f4a2:	602b      	str	r3, [r5, #0]
    f4a4:	e7d9      	b.n	f45a <ull_conn_tx_lll_enqueue+0x42>
    f4a6:	bf00      	nop
    f4a8:	2000257c 	.word	0x2000257c
    f4ac:	00020847 	.word	0x00020847
    f4b0:	0002091f 	.word	0x0002091f
    f4b4:	0002023c 	.word	0x0002023c

0000f4b8 <ull_conn_link_tx_release>:
	mem_release(link, &mem_link_tx.free);
    f4b8:	4901      	ldr	r1, [pc, #4]	; (f4c0 <ull_conn_link_tx_release+0x8>)
    f4ba:	f00c bb23 	b.w	1bb04 <mem_release>
    f4be:	bf00      	nop
    f4c0:	2000257c 	.word	0x2000257c

0000f4c4 <ull_conn_ack_last_idx_get>:
}
    f4c4:	4b01      	ldr	r3, [pc, #4]	; (f4cc <ull_conn_ack_last_idx_get+0x8>)
    f4c6:	78d8      	ldrb	r0, [r3, #3]
    f4c8:	4770      	bx	lr
    f4ca:	bf00      	nop
    f4cc:	200006d0 	.word	0x200006d0

0000f4d0 <ull_conn_ack_peek>:
{
    f4d0:	b570      	push	{r4, r5, r6, lr}
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
    f4d2:	4b09      	ldr	r3, [pc, #36]	; (f4f8 <ull_conn_ack_peek+0x28>)
    f4d4:	789c      	ldrb	r4, [r3, #2]
    f4d6:	78dd      	ldrb	r5, [r3, #3]
    f4d8:	781e      	ldrb	r6, [r3, #0]
	if (first == last) {
    f4da:	42ac      	cmp	r4, r5
    f4dc:	d00a      	beq.n	f4f4 <ull_conn_ack_peek+0x24>
	return (void *)(fifo + first * size);
    f4de:	3304      	adds	r3, #4
    f4e0:	fb14 f406 	smulbb	r4, r4, r6
	*ack_last = mfifo_conn_ack.l;
    f4e4:	7005      	strb	r5, [r0, #0]
    f4e6:	191e      	adds	r6, r3, r4
	*handle = lll_tx->handle;
    f4e8:	5b1b      	ldrh	r3, [r3, r4]
    f4ea:	800b      	strh	r3, [r1, #0]
	*tx = lll_tx->node;
    f4ec:	6873      	ldr	r3, [r6, #4]
    f4ee:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
    f4f0:	6818      	ldr	r0, [r3, #0]
}
    f4f2:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
    f4f4:	2000      	movs	r0, #0
    f4f6:	e7fc      	b.n	f4f2 <ull_conn_ack_peek+0x22>
    f4f8:	200006d0 	.word	0x200006d0

0000f4fc <ull_conn_ack_by_last_peek>:
{
    f4fc:	b530      	push	{r4, r5, lr}
	lll_tx = mfifo_dequeue_get(mfifo_conn_ack.m, mfifo_conn_ack.s,
    f4fe:	4b08      	ldr	r3, [pc, #32]	; (f520 <ull_conn_ack_by_last_peek+0x24>)
    f500:	789c      	ldrb	r4, [r3, #2]
    f502:	781d      	ldrb	r5, [r3, #0]
	if (first == last) {
    f504:	4284      	cmp	r4, r0
    f506:	d009      	beq.n	f51c <ull_conn_ack_by_last_peek+0x20>
	return (void *)(fifo + first * size);
    f508:	3304      	adds	r3, #4
    f50a:	fb14 f405 	smulbb	r4, r4, r5
    f50e:	1918      	adds	r0, r3, r4
	*handle = lll_tx->handle;
    f510:	5b1b      	ldrh	r3, [r3, r4]
    f512:	800b      	strh	r3, [r1, #0]
	*tx = lll_tx->node;
    f514:	6843      	ldr	r3, [r0, #4]
    f516:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
    f518:	6818      	ldr	r0, [r3, #0]
}
    f51a:	bd30      	pop	{r4, r5, pc}
		return NULL;
    f51c:	2000      	movs	r0, #0
    f51e:	e7fc      	b.n	f51a <ull_conn_ack_by_last_peek+0x1e>
    f520:	200006d0 	.word	0x200006d0

0000f524 <ull_conn_ack_dequeue>:
{
    f524:	b510      	push	{r4, lr}
	return MFIFO_DEQUEUE(conn_ack);
    f526:	4a09      	ldr	r2, [pc, #36]	; (f54c <ull_conn_ack_dequeue+0x28>)
	uint8_t _first = *first; /* Copy read-index */
    f528:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
    f52a:	78d0      	ldrb	r0, [r2, #3]
    f52c:	7811      	ldrb	r1, [r2, #0]
    f52e:	7854      	ldrb	r4, [r2, #1]
    f530:	4298      	cmp	r0, r3
    f532:	d009      	beq.n	f548 <ull_conn_ack_dequeue+0x24>
	mem = *((void **)(fifo + _first * size));
    f534:	fb03 2101 	mla	r1, r3, r1, r2
	_first += 1U;
    f538:	3301      	adds	r3, #1
    f53a:	b2db      	uxtb	r3, r3
		_first = 0U;
    f53c:	429c      	cmp	r4, r3
    f53e:	bf08      	it	eq
    f540:	2300      	moveq	r3, #0
	mem = *((void **)(fifo + _first * size));
    f542:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
    f544:	7093      	strb	r3, [r2, #2]
}
    f546:	bd10      	pop	{r4, pc}
		return NULL;
    f548:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(conn_ack);
    f54a:	e7fc      	b.n	f546 <ull_conn_ack_dequeue+0x22>
    f54c:	200006d0 	.word	0x200006d0

0000f550 <ull_conn_lll_ack_enqueue>:
{
    f550:	b570      	push	{r4, r5, r6, lr}
	idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
    f552:	4a12      	ldr	r2, [pc, #72]	; (f59c <ull_conn_lll_ack_enqueue+0x4c>)
    f554:	78d6      	ldrb	r6, [r2, #3]
	if (last == count) {
    f556:	7855      	ldrb	r5, [r2, #1]
    f558:	7894      	ldrb	r4, [r2, #2]
	last = last + 1;
    f55a:	1c73      	adds	r3, r6, #1
    f55c:	b2db      	uxtb	r3, r3
		last = 0U;
    f55e:	429d      	cmp	r5, r3
    f560:	bf08      	it	eq
    f562:	2300      	moveq	r3, #0
	if (last == first) {
    f564:	429c      	cmp	r4, r3
    f566:	d10f      	bne.n	f588 <ull_conn_lll_ack_enqueue+0x38>
	LL_ASSERT(lll_tx);
    f568:	4a0d      	ldr	r2, [pc, #52]	; (f5a0 <ull_conn_lll_ack_enqueue+0x50>)
    f56a:	490e      	ldr	r1, [pc, #56]	; (f5a4 <ull_conn_lll_ack_enqueue+0x54>)
    f56c:	480e      	ldr	r0, [pc, #56]	; (f5a8 <ull_conn_lll_ack_enqueue+0x58>)
    f56e:	f240 7376 	movw	r3, #1910	; 0x776
    f572:	f007 f842 	bl	165fa <printk>
    f576:	4040      	eors	r0, r0
    f578:	f380 8811 	msr	BASEPRI, r0
    f57c:	f04f 0003 	mov.w	r0, #3
    f580:	df02      	svc	2
	lll_tx->handle = handle;
    f582:	2300      	movs	r3, #0
    f584:	801b      	strh	r3, [r3, #0]
    f586:	deff      	udf	#255	; 0xff
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    f588:	4615      	mov	r5, r2
    f58a:	f815 4b04 	ldrb.w	r4, [r5], #4
    f58e:	fb14 f406 	smulbb	r4, r4, r6
    f592:	192e      	adds	r6, r5, r4
    f594:	5328      	strh	r0, [r5, r4]
	lll_tx->node = tx;
    f596:	6071      	str	r1, [r6, #4]
	*last = idx; /* Commit: Update write index */
    f598:	70d3      	strb	r3, [r2, #3]
}
    f59a:	bd70      	pop	{r4, r5, r6, pc}
    f59c:	200006d0 	.word	0x200006d0
    f5a0:	00020847 	.word	0x00020847
    f5a4:	000208e3 	.word	0x000208e3
    f5a8:	0002023c 	.word	0x0002023c

0000f5ac <ull_conn_tx_ack>:
{
    f5ac:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(pdu_tx->len);
    f5ae:	7953      	ldrb	r3, [r2, #5]
{
    f5b0:	4605      	mov	r5, r0
    f5b2:	460e      	mov	r6, r1
    f5b4:	4614      	mov	r4, r2
	LL_ASSERT(pdu_tx->len);
    f5b6:	b963      	cbnz	r3, f5d2 <ull_conn_tx_ack+0x26>
    f5b8:	4a2c      	ldr	r2, [pc, #176]	; (f66c <ull_conn_tx_ack+0xc0>)
    f5ba:	492d      	ldr	r1, [pc, #180]	; (f670 <ull_conn_tx_ack+0xc4>)
    f5bc:	482d      	ldr	r0, [pc, #180]	; (f674 <ull_conn_tx_ack+0xc8>)
    f5be:	f240 7383 	movw	r3, #1923	; 0x783
    f5c2:	f007 f81a 	bl	165fa <printk>
    f5c6:	4040      	eors	r0, r0
    f5c8:	f380 8811 	msr	BASEPRI, r0
    f5cc:	f04f 0003 	mov.w	r0, #3
    f5d0:	df02      	svc	2
	if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
    f5d2:	7923      	ldrb	r3, [r4, #4]
    f5d4:	f003 0203 	and.w	r2, r3, #3
    f5d8:	2a03      	cmp	r2, #3
    f5da:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f5de:	d13e      	bne.n	f65e <ull_conn_tx_ack+0xb2>
		if (handle != LLL_HANDLE_INVALID) {
    f5e0:	4295      	cmp	r5, r2
    f5e2:	d008      	beq.n	f5f6 <ull_conn_tx_ack+0x4a>
			struct ll_conn *conn = ll_conn_get(handle);
    f5e4:	4628      	mov	r0, r5
    f5e6:	f7ff f851 	bl	e68c <ll_conn_get>
	switch (pdu_tx->llctrl.opcode) {
    f5ea:	79e3      	ldrb	r3, [r4, #7]
    f5ec:	2b07      	cmp	r3, #7
    f5ee:	d00f      	beq.n	f610 <ull_conn_tx_ack+0x64>
    f5f0:	d80a      	bhi.n	f608 <ull_conn_tx_ack+0x5c>
    f5f2:	2b02      	cmp	r3, #2
    f5f4:	d013      	beq.n	f61e <ull_conn_tx_ack+0x72>
		if (link->next == (void *)tx) {
    f5f6:	6833      	ldr	r3, [r6, #0]
    f5f8:	42a3      	cmp	r3, r4
    f5fa:	d11c      	bne.n	f636 <ull_conn_tx_ack+0x8a>
			mem_release(tx, &mem_conn_tx_ctrl.free);
    f5fc:	4620      	mov	r0, r4
    f5fe:	491e      	ldr	r1, [pc, #120]	; (f678 <ull_conn_tx_ack+0xcc>)
}
    f600:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			mem_release(tx, &mem_conn_tx_ctrl.free);
    f604:	f00c ba7e 	b.w	1bb04 <mem_release>
	switch (pdu_tx->llctrl.opcode) {
    f608:	2b09      	cmp	r3, #9
    f60a:	d001      	beq.n	f610 <ull_conn_tx_ack+0x64>
    f60c:	2b13      	cmp	r3, #19
    f60e:	d1f2      	bne.n	f5f6 <ull_conn_tx_ack+0x4a>
		conn->common.txn_lock = 0U;
    f610:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
    f614:	f36f 0341 	bfc	r3, #1, #1
    f618:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
		break;
    f61c:	e7eb      	b.n	f5f6 <ull_conn_tx_ack+0x4a>
		if (pdu_tx->llctrl.terminate_ind.error_code ==
    f61e:	7a23      	ldrb	r3, [r4, #8]
			conn->llcp_terminate.reason_final =
    f620:	2b13      	cmp	r3, #19
    f622:	bf08      	it	eq
    f624:	2316      	moveq	r3, #22
    f626:	f880 30d3 	strb.w	r3, [r0, #211]	; 0xd3
		conn->llcp_terminate.ack--;
    f62a:	f890 30d1 	ldrb.w	r3, [r0, #209]	; 0xd1
    f62e:	3b01      	subs	r3, #1
    f630:	f880 30d1 	strb.w	r3, [r0, #209]	; 0xd1
	break;
    f634:	e7df      	b.n	f5f6 <ull_conn_tx_ack+0x4a>
		LL_ASSERT(!link->next);
    f636:	b163      	cbz	r3, f652 <ull_conn_tx_ack+0xa6>
    f638:	4a0c      	ldr	r2, [pc, #48]	; (f66c <ull_conn_tx_ack+0xc0>)
    f63a:	4910      	ldr	r1, [pc, #64]	; (f67c <ull_conn_tx_ack+0xd0>)
    f63c:	480d      	ldr	r0, [pc, #52]	; (f674 <ull_conn_tx_ack+0xc8>)
    f63e:	f44f 63f4 	mov.w	r3, #1952	; 0x7a0
    f642:	f006 ffda 	bl	165fa <printk>
    f646:	4040      	eors	r0, r0
    f648:	f380 8811 	msr	BASEPRI, r0
    f64c:	f04f 0003 	mov.w	r0, #3
    f650:	df02      	svc	2
	ll_tx_ack_put(handle, tx);
    f652:	4621      	mov	r1, r4
    f654:	4628      	mov	r0, r5
}
    f656:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ll_tx_ack_put(handle, tx);
    f65a:	f7fd bd7f 	b.w	d15c <ll_tx_ack_put>
	} else if (handle == LLL_HANDLE_INVALID) {
    f65e:	4295      	cmp	r5, r2
		pdu_tx->ll_id = PDU_DATA_LLID_RESV;
    f660:	bf04      	itt	eq
    f662:	f36f 0301 	bfceq	r3, #0, #2
    f666:	7123      	strbeq	r3, [r4, #4]
    f668:	e7f3      	b.n	f652 <ull_conn_tx_ack+0xa6>
    f66a:	bf00      	nop
    f66c:	00020847 	.word	0x00020847
    f670:	000209aa 	.word	0x000209aa
    f674:	0002023c 	.word	0x0002023c
    f678:	200024c8 	.word	0x200024c8
    f67c:	000209b6 	.word	0x000209b6

0000f680 <ticker_update_latency_cancel_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
}

static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *param)
{
    f680:	b510      	push	{r4, lr}
    f682:	460c      	mov	r4, r1
	struct ll_conn *conn = param;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
    f684:	b160      	cbz	r0, f6a0 <ticker_update_latency_cancel_op_cb+0x20>
    f686:	4a0a      	ldr	r2, [pc, #40]	; (f6b0 <ticker_update_latency_cancel_op_cb+0x30>)
    f688:	490a      	ldr	r1, [pc, #40]	; (f6b4 <ticker_update_latency_cancel_op_cb+0x34>)
    f68a:	480b      	ldr	r0, [pc, #44]	; (f6b8 <ticker_update_latency_cancel_op_cb+0x38>)
    f68c:	f240 23af 	movw	r3, #687	; 0x2af
    f690:	f006 ffb3 	bl	165fa <printk>
    f694:	4040      	eors	r0, r0
    f696:	f380 8811 	msr	BASEPRI, r0
    f69a:	f04f 0003 	mov.w	r0, #3
    f69e:	df02      	svc	2

	conn->periph.latency_cancel = 0U;
    f6a0:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
    f6a4:	f36f 0382 	bfc	r3, #2, #1
    f6a8:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
}
    f6ac:	bd10      	pop	{r4, pc}
    f6ae:	bf00      	nop
    f6b0:	000209c2 	.word	0x000209c2
    f6b4:	00020a08 	.word	0x00020a08
    f6b8:	0002023c 	.word	0x0002023c

0000f6bc <ticker_op_cb>:
{
    f6bc:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    f6be:	b160      	cbz	r0, f6da <ticker_op_cb+0x1e>
    f6c0:	4a06      	ldr	r2, [pc, #24]	; (f6dc <ticker_op_cb+0x20>)
    f6c2:	4907      	ldr	r1, [pc, #28]	; (f6e0 <ticker_op_cb+0x24>)
    f6c4:	4807      	ldr	r0, [pc, #28]	; (f6e4 <ticker_op_cb+0x28>)
    f6c6:	f240 23a7 	movw	r3, #679	; 0x2a7
    f6ca:	f006 ff96 	bl	165fa <printk>
    f6ce:	4040      	eors	r0, r0
    f6d0:	f380 8811 	msr	BASEPRI, r0
    f6d4:	f04f 0003 	mov.w	r0, #3
    f6d8:	df02      	svc	2
}
    f6da:	bd08      	pop	{r3, pc}
    f6dc:	000209c2 	.word	0x000209c2
    f6e0:	00020a0f 	.word	0x00020a0f
    f6e4:	0002023c 	.word	0x0002023c

0000f6e8 <ticker_op_stop_adv_cb>:
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    f6e8:	2801      	cmp	r0, #1
{
    f6ea:	b510      	push	{r4, lr}
    f6ec:	460c      	mov	r4, r1
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    f6ee:	d110      	bne.n	f712 <ticker_op_stop_adv_cb+0x2a>
    f6f0:	f7fd fdbc 	bl	d26c <ull_disable_mark_get>
    f6f4:	4284      	cmp	r4, r0
    f6f6:	d00c      	beq.n	f712 <ticker_op_stop_adv_cb+0x2a>
    f6f8:	4a06      	ldr	r2, [pc, #24]	; (f714 <ticker_op_stop_adv_cb+0x2c>)
    f6fa:	4907      	ldr	r1, [pc, #28]	; (f718 <ticker_op_stop_adv_cb+0x30>)
    f6fc:	4807      	ldr	r0, [pc, #28]	; (f71c <ticker_op_stop_adv_cb+0x34>)
    f6fe:	f240 239f 	movw	r3, #671	; 0x29f
    f702:	f006 ff7a 	bl	165fa <printk>
    f706:	4040      	eors	r0, r0
    f708:	f380 8811 	msr	BASEPRI, r0
    f70c:	f04f 0003 	mov.w	r0, #3
    f710:	df02      	svc	2
}
    f712:	bd10      	pop	{r4, pc}
    f714:	000209c2 	.word	0x000209c2
    f718:	00020a1b 	.word	0x00020a1b
    f71c:	0002023c 	.word	0x0002023c

0000f720 <ull_periph_ticker_cb>:
{
    f720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f724:	9c09      	ldr	r4, [sp, #36]	; 0x24
    f726:	f89d 9020 	ldrb.w	r9, [sp, #32]
    f72a:	4690      	mov	r8, r2
	if (unlikely(conn->lll.handle == 0xFFFF)) {
    f72c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
{
    f72e:	461e      	mov	r6, r3
	if (unlikely(conn->lll.handle == 0xFFFF)) {
    f730:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f734:	429a      	cmp	r2, r3
{
    f736:	4607      	mov	r7, r0
	if (unlikely(conn->lll.handle == 0xFFFF)) {
    f738:	d03f      	beq.n	f7ba <ull_periph_ticker_cb+0x9a>
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
    f73a:	4601      	mov	r1, r0
    f73c:	4632      	mov	r2, r6
    f73e:	4620      	mov	r0, r4
    f740:	f7f1 fe5e 	bl	1400 <ull_conn_llcp>
		if (ret) {
    f744:	2800      	cmp	r0, #0
    f746:	d138      	bne.n	f7ba <ull_periph_ticker_cb+0x9a>
	return ++hdr->ref;
    f748:	7825      	ldrb	r5, [r4, #0]
    f74a:	3501      	adds	r5, #1
    f74c:	b2ed      	uxtb	r5, r5
    f74e:	7025      	strb	r5, [r4, #0]
	LL_ASSERT(ref);
    f750:	b965      	cbnz	r5, f76c <ull_periph_ticker_cb+0x4c>
    f752:	4a1b      	ldr	r2, [pc, #108]	; (f7c0 <ull_periph_ticker_cb+0xa0>)
    f754:	491b      	ldr	r1, [pc, #108]	; (f7c4 <ull_periph_ticker_cb+0xa4>)
    f756:	481c      	ldr	r0, [pc, #112]	; (f7c8 <ull_periph_ticker_cb+0xa8>)
    f758:	f240 231d 	movw	r3, #541	; 0x21d
    f75c:	f006 ff4d 	bl	165fa <printk>
    f760:	4040      	eors	r0, r0
    f762:	f380 8811 	msr	BASEPRI, r0
    f766:	f04f 0003 	mov.w	r0, #3
    f76a:	df02      	svc	2
	p.ticks_at_expire = ticks_at_expire;
    f76c:	4d17      	ldr	r5, [pc, #92]	; (f7cc <ull_periph_ticker_cb+0xac>)
	p.param = &conn->lll;
    f76e:	f104 031c 	add.w	r3, r4, #28
    f772:	60eb      	str	r3, [r5, #12]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
    f774:	2200      	movs	r2, #0
	mfy.param = &p;
    f776:	4b16      	ldr	r3, [pc, #88]	; (f7d0 <ull_periph_ticker_cb+0xb0>)
	p.lazy = lazy;
    f778:	812e      	strh	r6, [r5, #8]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
    f77a:	4611      	mov	r1, r2
    f77c:	2001      	movs	r0, #1
	p.remainder = remainder;
    f77e:	e9c5 7800 	strd	r7, r8, [r5]
	p.force = force;
    f782:	f885 900a 	strb.w	r9, [r5, #10]
	mfy.param = &p;
    f786:	609d      	str	r5, [r3, #8]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
    f788:	f7fb fbe4 	bl	af54 <mayfly_enqueue>
	LL_ASSERT(!err);
    f78c:	b160      	cbz	r0, f7a8 <ull_periph_ticker_cb+0x88>
    f78e:	4a0c      	ldr	r2, [pc, #48]	; (f7c0 <ull_periph_ticker_cb+0xa0>)
    f790:	4910      	ldr	r1, [pc, #64]	; (f7d4 <ull_periph_ticker_cb+0xb4>)
    f792:	480d      	ldr	r0, [pc, #52]	; (f7c8 <ull_periph_ticker_cb+0xa8>)
    f794:	f240 232a 	movw	r3, #554	; 0x22a
    f798:	f006 ff2f 	bl	165fa <printk>
    f79c:	4040      	eors	r0, r0
    f79e:	f380 8811 	msr	BASEPRI, r0
    f7a2:	f04f 0003 	mov.w	r0, #3
    f7a6:	df02      	svc	2
	ull_conn_tx_demux(UINT8_MAX);
    f7a8:	20ff      	movs	r0, #255	; 0xff
    f7aa:	f7ff fc8b 	bl	f0c4 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
    f7ae:	4620      	mov	r0, r4
    f7b0:	21ff      	movs	r1, #255	; 0xff
}
    f7b2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
    f7b6:	f7ff be2f 	b.w	f418 <ull_conn_tx_lll_enqueue>
}
    f7ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f7be:	bf00      	nop
    f7c0:	000209c2 	.word	0x000209c2
    f7c4:	0002078b 	.word	0x0002078b
    f7c8:	0002023c 	.word	0x0002023c
    f7cc:	200025c0 	.word	0x200025c0
    f7d0:	20000778 	.word	0x20000778
    f7d4:	0002057d 	.word	0x0002057d

0000f7d8 <ull_periph_latency_cancel>:
{
    f7d8:	b500      	push	{lr}
	if (conn->lll.latency_event && !conn->periph.latency_cancel) {
    f7da:	8e03      	ldrh	r3, [r0, #48]	; 0x30
{
    f7dc:	b089      	sub	sp, #36	; 0x24
	if (conn->lll.latency_event && !conn->periph.latency_cancel) {
    f7de:	b33b      	cbz	r3, f830 <ull_periph_latency_cancel+0x58>
    f7e0:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
    f7e4:	f012 0304 	ands.w	r3, r2, #4
    f7e8:	d122      	bne.n	f830 <ull_periph_latency_cancel+0x58>
		conn->periph.latency_cancel = 1U;
    f7ea:	f042 0204 	orr.w	r2, r2, #4
    f7ee:	f880 207c 	strb.w	r2, [r0, #124]	; 0x7c
			ticker_update(TICKER_INSTANCE_ID_CTLR,
    f7f2:	1d4a      	adds	r2, r1, #5
    f7f4:	4910      	ldr	r1, [pc, #64]	; (f838 <ull_periph_latency_cancel+0x60>)
    f7f6:	9006      	str	r0, [sp, #24]
    f7f8:	e9cd 3104 	strd	r3, r1, [sp, #16]
    f7fc:	2101      	movs	r1, #1
    f7fe:	e9cd 3102 	strd	r3, r1, [sp, #8]
    f802:	e9cd 3300 	strd	r3, r3, [sp]
    f806:	4618      	mov	r0, r3
    f808:	b2d2      	uxtb	r2, r2
    f80a:	2103      	movs	r1, #3
    f80c:	f00c fc6d 	bl	1c0ea <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f810:	f030 0302 	bics.w	r3, r0, #2
    f814:	d00c      	beq.n	f830 <ull_periph_latency_cancel+0x58>
    f816:	4a09      	ldr	r2, [pc, #36]	; (f83c <ull_periph_latency_cancel+0x64>)
    f818:	4909      	ldr	r1, [pc, #36]	; (f840 <ull_periph_latency_cancel+0x68>)
    f81a:	480a      	ldr	r0, [pc, #40]	; (f844 <ull_periph_latency_cancel+0x6c>)
    f81c:	f240 13e3 	movw	r3, #483	; 0x1e3
    f820:	f006 feeb 	bl	165fa <printk>
    f824:	4040      	eors	r0, r0
    f826:	f380 8811 	msr	BASEPRI, r0
    f82a:	f04f 0003 	mov.w	r0, #3
    f82e:	df02      	svc	2
}
    f830:	b009      	add	sp, #36	; 0x24
    f832:	f85d fb04 	ldr.w	pc, [sp], #4
    f836:	bf00      	nop
    f838:	0000f681 	.word	0x0000f681
    f83c:	000209c2 	.word	0x000209c2
    f840:	00020924 	.word	0x00020924
    f844:	0002023c 	.word	0x0002023c

0000f848 <ll_fal_clear>:
{
	return FAL_SIZE;
}

uint8_t ll_fal_clear(void)
{
    f848:	b508      	push	{r3, lr}
#if defined(CONFIG_BT_BROADCASTER)
	if (ull_adv_filter_pol_get(0)) {
    f84a:	2000      	movs	r0, #0
    f84c:	f00c fd86 	bl	1c35c <ull_adv_filter_pol_get>
    f850:	b108      	cbz	r0, f856 <ll_fal_clear+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
    f852:	200c      	movs	r0, #12
#else
	filter_clear(&fal_filter);
#endif /* CONFIG_BT_CTLR_PRIVACY */

	return 0;
}
    f854:	bd08      	pop	{r3, pc}
	if (ull_scan_filter_pol_get(0) & 0x1) {
    f856:	f00c fe7e 	bl	1c556 <ull_scan_filter_pol_get>
    f85a:	f010 0001 	ands.w	r0, r0, #1
    f85e:	d1f8      	bne.n	f852 <ll_fal_clear+0xa>
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
}

static void filter_clear(struct lll_filter *filter)
{
	filter->enable_bitmask = 0;
    f860:	4b01      	ldr	r3, [pc, #4]	; (f868 <ll_fal_clear+0x20>)
    f862:	7018      	strb	r0, [r3, #0]
	filter->addr_type_bitmask = 0;
    f864:	7058      	strb	r0, [r3, #1]
	return 0;
    f866:	e7f5      	b.n	f854 <ll_fal_clear+0xc>
    f868:	20002b3e 	.word	0x20002b3e

0000f86c <ll_fal_add>:
{
    f86c:	b570      	push	{r4, r5, r6, lr}
    f86e:	4604      	mov	r4, r0
	if (ull_adv_filter_pol_get(0)) {
    f870:	2000      	movs	r0, #0
    f872:	f00c fd73 	bl	1c35c <ull_adv_filter_pol_get>
    f876:	b108      	cbz	r0, f87c <ll_fal_add+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
    f878:	200c      	movs	r0, #12
}
    f87a:	bd70      	pop	{r4, r5, r6, pc}
	if (ull_scan_filter_pol_get(0) & 0x1) {
    f87c:	f00c fe6b 	bl	1c556 <ull_scan_filter_pol_get>
    f880:	f010 0001 	ands.w	r0, r0, #1
    f884:	d1f8      	bne.n	f878 <ll_fal_add+0xc>
	if (addr->type == ADDR_TYPE_ANON) {
    f886:	7823      	ldrb	r3, [r4, #0]
    f888:	2bff      	cmp	r3, #255	; 0xff
    f88a:	d0f6      	beq.n	f87a <ll_fal_add+0xe>
	return filter_add(&fal_filter, addr->type, addr->a.val);
    f88c:	1c61      	adds	r1, r4, #1
	if (filter->enable_bitmask == LLL_FILTER_BITMASK_ALL) {
    f88e:	4c0f      	ldr	r4, [pc, #60]	; (f8cc <ll_fal_add+0x60>)
    f890:	7822      	ldrb	r2, [r4, #0]
    f892:	2aff      	cmp	r2, #255	; 0xff
    f894:	d018      	beq.n	f8c8 <ll_fal_add+0x5c>
	     (filter->enable_bitmask & BIT(index));
    f896:	fa22 f500 	lsr.w	r5, r2, r0
	for (index = 0;
    f89a:	f015 0501 	ands.w	r5, r5, #1
    f89e:	d111      	bne.n	f8c4 <ll_fal_add+0x58>
	filter->enable_bitmask |= BIT(index);
    f8a0:	2601      	movs	r6, #1
    f8a2:	4086      	lsls	r6, r0
    f8a4:	4332      	orrs	r2, r6
    f8a6:	7022      	strb	r2, [r4, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    f8a8:	f003 0301 	and.w	r3, r3, #1
    f8ac:	7862      	ldrb	r2, [r4, #1]
    f8ae:	4083      	lsls	r3, r0
    f8b0:	4313      	orrs	r3, r2
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    f8b2:	2206      	movs	r2, #6
    f8b4:	fb02 4000 	mla	r0, r2, r0, r4
    f8b8:	3002      	adds	r0, #2
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    f8ba:	7063      	strb	r3, [r4, #1]
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    f8bc:	f007 fcca 	bl	17254 <memcpy>
	return filter_add(&fal_filter, addr->type, addr->a.val);
    f8c0:	b2e8      	uxtb	r0, r5
    f8c2:	e7da      	b.n	f87a <ll_fal_add+0xe>
	     index++) {
    f8c4:	3001      	adds	r0, #1
    f8c6:	e7e6      	b.n	f896 <ll_fal_add+0x2a>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    f8c8:	2507      	movs	r5, #7
    f8ca:	e7f9      	b.n	f8c0 <ll_fal_add+0x54>
    f8cc:	20002b3e 	.word	0x20002b3e

0000f8d0 <ll_fal_remove>:
{
    f8d0:	b538      	push	{r3, r4, r5, lr}
    f8d2:	4605      	mov	r5, r0
	if (ull_adv_filter_pol_get(0)) {
    f8d4:	2000      	movs	r0, #0
    f8d6:	f00c fd41 	bl	1c35c <ull_adv_filter_pol_get>
    f8da:	b108      	cbz	r0, f8e0 <ll_fal_remove+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
    f8dc:	200c      	movs	r0, #12
}
    f8de:	bd38      	pop	{r3, r4, r5, pc}
	if (ull_scan_filter_pol_get(0) & 0x1) {
    f8e0:	f00c fe39 	bl	1c556 <ull_scan_filter_pol_get>
    f8e4:	f010 0401 	ands.w	r4, r0, #1
    f8e8:	d1f8      	bne.n	f8dc <ll_fal_remove+0xc>
	if (addr->type == ADDR_TYPE_ANON) {
    f8ea:	7829      	ldrb	r1, [r5, #0]
    f8ec:	29ff      	cmp	r1, #255	; 0xff
    f8ee:	d017      	beq.n	f920 <ll_fal_remove+0x50>
	return filter_remove(&fal_filter, addr->type, addr->a.val);
    f8f0:	1c6a      	adds	r2, r5, #1
	if (!filter->enable_bitmask) {
    f8f2:	4d0c      	ldr	r5, [pc, #48]	; (f924 <ll_fal_remove+0x54>)
    f8f4:	782b      	ldrb	r3, [r5, #0]
    f8f6:	b913      	cbnz	r3, f8fe <ll_fal_remove+0x2e>
		return BT_HCI_ERR_INVALID_PARAM;
    f8f8:	2412      	movs	r4, #18
	return filter_remove(&fal_filter, addr->type, addr->a.val);
    f8fa:	b2e0      	uxtb	r0, r4
    f8fc:	e7ef      	b.n	f8de <ll_fal_remove+0xe>
    f8fe:	4628      	mov	r0, r5
    f900:	f00c ffa4 	bl	1c84c <filter_find.part.0>
	if (index == FILTER_IDX_NONE) {
    f904:	28ff      	cmp	r0, #255	; 0xff
    f906:	d0f7      	beq.n	f8f8 <ll_fal_remove+0x28>
	filter->enable_bitmask &= ~BIT(index);
    f908:	2301      	movs	r3, #1
    f90a:	fa03 f000 	lsl.w	r0, r3, r0
    f90e:	782b      	ldrb	r3, [r5, #0]
    f910:	ea23 0300 	bic.w	r3, r3, r0
    f914:	702b      	strb	r3, [r5, #0]
	filter->addr_type_bitmask &= ~BIT(index);
    f916:	786b      	ldrb	r3, [r5, #1]
    f918:	ea23 0000 	bic.w	r0, r3, r0
    f91c:	7068      	strb	r0, [r5, #1]
	return 0;
    f91e:	e7ec      	b.n	f8fa <ll_fal_remove+0x2a>
		return 0;
    f920:	4620      	mov	r0, r4
    f922:	e7dc      	b.n	f8de <ll_fal_remove+0xe>
    f924:	20002b3e 	.word	0x20002b3e

0000f928 <ull_filter_reset>:
	filter->enable_bitmask = 0;
    f928:	4b02      	ldr	r3, [pc, #8]	; (f934 <ull_filter_reset+0xc>)
    f92a:	2200      	movs	r2, #0
    f92c:	701a      	strb	r2, [r3, #0]
	filter->addr_type_bitmask = 0;
    f92e:	705a      	strb	r2, [r3, #1]
}
    f930:	4770      	bx	lr
    f932:	bf00      	nop
    f934:	20002b3e 	.word	0x20002b3e

0000f938 <ull_filter_lll_get>:
{
    f938:	b508      	push	{r3, lr}
	LL_ASSERT(filter);
    f93a:	b960      	cbnz	r0, f956 <ull_filter_lll_get+0x1e>
    f93c:	4a07      	ldr	r2, [pc, #28]	; (f95c <ull_filter_lll_get+0x24>)
    f93e:	4908      	ldr	r1, [pc, #32]	; (f960 <ull_filter_lll_get+0x28>)
    f940:	4808      	ldr	r0, [pc, #32]	; (f964 <ull_filter_lll_get+0x2c>)
    f942:	f240 2392 	movw	r3, #658	; 0x292
    f946:	f006 fe58 	bl	165fa <printk>
    f94a:	4040      	eors	r0, r0
    f94c:	f380 8811 	msr	BASEPRI, r0
    f950:	f04f 0003 	mov.w	r0, #3
    f954:	df02      	svc	2
}
    f956:	4804      	ldr	r0, [pc, #16]	; (f968 <ull_filter_lll_get+0x30>)
    f958:	bd08      	pop	{r3, pc}
    f95a:	bf00      	nop
    f95c:	00020a4a 	.word	0x00020a4a
    f960:	00020a8c 	.word	0x00020a8c
    f964:	0002023c 	.word	0x0002023c
    f968:	20002b3e 	.word	0x20002b3e

0000f96c <rtc0_nrf5_isr>:
	DEBUG_RADIO_ISR(0);
	return 1;
}

static void rtc0_nrf5_isr(const void *arg)
{
    f96c:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	lll_prof_enter_ull_high();

	/* On compare0 run ticker worker instance0 */
	if (NRF_RTC0->EVENTS_COMPARE[0]) {
    f96e:	4b08      	ldr	r3, [pc, #32]	; (f990 <rtc0_nrf5_isr+0x24>)
    f970:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
    f974:	b122      	cbz	r2, f980 <rtc0_nrf5_isr+0x14>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
    f976:	2000      	movs	r0, #0
    f978:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140

		ticker_trigger(0);
    f97c:	f7fc f802 	bl	b984 <ticker_trigger>
	}

	mayfly_run(TICKER_USER_ID_ULL_HIGH);
    f980:	2001      	movs	r0, #1
    f982:	f7fb fb37 	bl	aff4 <mayfly_run>

	lll_prof_exit_ull_low();
#endif

	DEBUG_TICKER_ISR(0);
}
    f986:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mayfly_run(TICKER_USER_ID_ULL_LOW);
    f98a:	2002      	movs	r0, #2
    f98c:	f7fb bb32 	b.w	aff4 <mayfly_run>
    f990:	4000b000 	.word	0x4000b000

0000f994 <ticker_stop_op_cb>:
static uint8_t preempt_stop_ack;
static uint8_t preempt_req;
static uint8_t volatile preempt_ack;

static void ticker_stop_op_cb(uint32_t status, void *param)
{
    f994:	b510      	push	{r4, lr}
	ARG_UNUSED(param);
	ARG_UNUSED(status);

	LL_ASSERT(preempt_stop_req != preempt_stop_ack);
    f996:	4b0d      	ldr	r3, [pc, #52]	; (f9cc <ticker_stop_op_cb+0x38>)
    f998:	4c0d      	ldr	r4, [pc, #52]	; (f9d0 <ticker_stop_op_cb+0x3c>)
    f99a:	781b      	ldrb	r3, [r3, #0]
    f99c:	7822      	ldrb	r2, [r4, #0]
    f99e:	429a      	cmp	r2, r3
    f9a0:	d10c      	bne.n	f9bc <ticker_stop_op_cb+0x28>
    f9a2:	4a0c      	ldr	r2, [pc, #48]	; (f9d4 <ticker_stop_op_cb+0x40>)
    f9a4:	490c      	ldr	r1, [pc, #48]	; (f9d8 <ticker_stop_op_cb+0x44>)
    f9a6:	480d      	ldr	r0, [pc, #52]	; (f9dc <ticker_stop_op_cb+0x48>)
    f9a8:	f240 3301 	movw	r3, #769	; 0x301
    f9ac:	f006 fe25 	bl	165fa <printk>
    f9b0:	4040      	eors	r0, r0
    f9b2:	f380 8811 	msr	BASEPRI, r0
    f9b6:	f04f 0003 	mov.w	r0, #3
    f9ba:	df02      	svc	2
	preempt_stop_ack++;
    f9bc:	7823      	ldrb	r3, [r4, #0]
    f9be:	3301      	adds	r3, #1
    f9c0:	7023      	strb	r3, [r4, #0]

	preempt_req = preempt_ack;
    f9c2:	4b07      	ldr	r3, [pc, #28]	; (f9e0 <ticker_stop_op_cb+0x4c>)
    f9c4:	781a      	ldrb	r2, [r3, #0]
    f9c6:	4b07      	ldr	r3, [pc, #28]	; (f9e4 <ticker_stop_op_cb+0x50>)
    f9c8:	701a      	strb	r2, [r3, #0]
}
    f9ca:	bd10      	pop	{r4, pc}
    f9cc:	20002b75 	.word	0x20002b75
    f9d0:	20002b74 	.word	0x20002b74
    f9d4:	00020a93 	.word	0x00020a93
    f9d8:	00020ad9 	.word	0x00020ad9
    f9dc:	0002023c 	.word	0x0002023c
    f9e0:	20002b70 	.word	0x20002b70
    f9e4:	20002b71 	.word	0x20002b71

0000f9e8 <ticker_start_op_cb>:

static void ticker_start_op_cb(uint32_t status, void *param)
{
    f9e8:	b510      	push	{r4, lr}
	ARG_UNUSED(param);
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    f9ea:	b160      	cbz	r0, fa06 <ticker_start_op_cb+0x1e>
    f9ec:	4a1c      	ldr	r2, [pc, #112]	; (fa60 <ticker_start_op_cb+0x78>)
    f9ee:	491d      	ldr	r1, [pc, #116]	; (fa64 <ticker_start_op_cb+0x7c>)
    f9f0:	481d      	ldr	r0, [pc, #116]	; (fa68 <ticker_start_op_cb+0x80>)
    f9f2:	f240 330a 	movw	r3, #778	; 0x30a
    f9f6:	f006 fe00 	bl	165fa <printk>
    f9fa:	4040      	eors	r0, r0
    f9fc:	f380 8811 	msr	BASEPRI, r0
    fa00:	f04f 0003 	mov.w	r0, #3
    fa04:	df02      	svc	2

	LL_ASSERT(preempt_start_req != preempt_start_ack);
    fa06:	4b19      	ldr	r3, [pc, #100]	; (fa6c <ticker_start_op_cb+0x84>)
    fa08:	4c19      	ldr	r4, [pc, #100]	; (fa70 <ticker_start_op_cb+0x88>)
    fa0a:	781b      	ldrb	r3, [r3, #0]
    fa0c:	7822      	ldrb	r2, [r4, #0]
    fa0e:	429a      	cmp	r2, r3
    fa10:	d10c      	bne.n	fa2c <ticker_start_op_cb+0x44>
    fa12:	4a13      	ldr	r2, [pc, #76]	; (fa60 <ticker_start_op_cb+0x78>)
    fa14:	4917      	ldr	r1, [pc, #92]	; (fa74 <ticker_start_op_cb+0x8c>)
    fa16:	4814      	ldr	r0, [pc, #80]	; (fa68 <ticker_start_op_cb+0x80>)
    fa18:	f44f 7343 	mov.w	r3, #780	; 0x30c
    fa1c:	f006 fded 	bl	165fa <printk>
    fa20:	4040      	eors	r0, r0
    fa22:	f380 8811 	msr	BASEPRI, r0
    fa26:	f04f 0003 	mov.w	r0, #3
    fa2a:	df02      	svc	2
	preempt_start_ack++;
    fa2c:	7823      	ldrb	r3, [r4, #0]
    fa2e:	3301      	adds	r3, #1
    fa30:	7023      	strb	r3, [r4, #0]

	LL_ASSERT(preempt_req == preempt_ack);
    fa32:	4b11      	ldr	r3, [pc, #68]	; (fa78 <ticker_start_op_cb+0x90>)
    fa34:	4c11      	ldr	r4, [pc, #68]	; (fa7c <ticker_start_op_cb+0x94>)
    fa36:	781b      	ldrb	r3, [r3, #0]
    fa38:	7822      	ldrb	r2, [r4, #0]
    fa3a:	429a      	cmp	r2, r3
    fa3c:	d00c      	beq.n	fa58 <ticker_start_op_cb+0x70>
    fa3e:	4a08      	ldr	r2, [pc, #32]	; (fa60 <ticker_start_op_cb+0x78>)
    fa40:	490f      	ldr	r1, [pc, #60]	; (fa80 <ticker_start_op_cb+0x98>)
    fa42:	4809      	ldr	r0, [pc, #36]	; (fa68 <ticker_start_op_cb+0x80>)
    fa44:	f240 330f 	movw	r3, #783	; 0x30f
    fa48:	f006 fdd7 	bl	165fa <printk>
    fa4c:	4040      	eors	r0, r0
    fa4e:	f380 8811 	msr	BASEPRI, r0
    fa52:	f04f 0003 	mov.w	r0, #3
    fa56:	df02      	svc	2
	preempt_req++;
    fa58:	7823      	ldrb	r3, [r4, #0]
    fa5a:	3301      	adds	r3, #1
    fa5c:	7023      	strb	r3, [r4, #0]
}
    fa5e:	bd10      	pop	{r4, pc}
    fa60:	00020a93 	.word	0x00020a93
    fa64:	00020a0f 	.word	0x00020a0f
    fa68:	0002023c 	.word	0x0002023c
    fa6c:	20002b73 	.word	0x20002b73
    fa70:	20002b72 	.word	0x20002b72
    fa74:	00020afe 	.word	0x00020afe
    fa78:	20002b70 	.word	0x20002b70
    fa7c:	20002b71 	.word	0x20002b71
    fa80:	00020b25 	.word	0x00020b25

0000fa84 <preempt_ticker_cb>:
}

static void preempt_ticker_cb(uint32_t ticks_at_expire, uint32_t ticks_drift,
			      uint32_t remainder, uint16_t lazy, uint8_t force,
			      void *param)
{
    fa84:	b510      	push	{r4, lr}
	static memq_link_t link;
	static struct mayfly mfy = {0, 0, &link, NULL, preempt};
	uint32_t ret;

	LL_ASSERT(preempt_ack != preempt_req);
    fa86:	4a17      	ldr	r2, [pc, #92]	; (fae4 <preempt_ticker_cb+0x60>)
    fa88:	4c17      	ldr	r4, [pc, #92]	; (fae8 <preempt_ticker_cb+0x64>)
    fa8a:	7812      	ldrb	r2, [r2, #0]
    fa8c:	7823      	ldrb	r3, [r4, #0]
    fa8e:	429a      	cmp	r2, r3
    fa90:	d10c      	bne.n	faac <preempt_ticker_cb+0x28>
    fa92:	4a16      	ldr	r2, [pc, #88]	; (faec <preempt_ticker_cb+0x68>)
    fa94:	4916      	ldr	r1, [pc, #88]	; (faf0 <preempt_ticker_cb+0x6c>)
    fa96:	4817      	ldr	r0, [pc, #92]	; (faf4 <preempt_ticker_cb+0x70>)
    fa98:	f44f 735c 	mov.w	r3, #880	; 0x370
    fa9c:	f006 fdad 	bl	165fa <printk>
    faa0:	4040      	eors	r0, r0
    faa2:	f380 8811 	msr	BASEPRI, r0
    faa6:	f04f 0003 	mov.w	r0, #3
    faaa:	df02      	svc	2
	preempt_ack++;
    faac:	7823      	ldrb	r3, [r4, #0]

	mfy.param = param;
    faae:	9a03      	ldr	r2, [sp, #12]
	preempt_ack++;
    fab0:	3301      	adds	r3, #1
    fab2:	b2db      	uxtb	r3, r3
    fab4:	7023      	strb	r3, [r4, #0]
	mfy.param = param;
    fab6:	4b10      	ldr	r3, [pc, #64]	; (faf8 <preempt_ticker_cb+0x74>)
    fab8:	609a      	str	r2, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
    faba:	2200      	movs	r2, #0
    fabc:	4611      	mov	r1, r2
    fabe:	2001      	movs	r0, #1
    fac0:	f7fb fa48 	bl	af54 <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
    fac4:	b160      	cbz	r0, fae0 <preempt_ticker_cb+0x5c>
    fac6:	4a09      	ldr	r2, [pc, #36]	; (faec <preempt_ticker_cb+0x68>)
    fac8:	490c      	ldr	r1, [pc, #48]	; (fafc <preempt_ticker_cb+0x78>)
    faca:	480a      	ldr	r0, [pc, #40]	; (faf4 <preempt_ticker_cb+0x70>)
    facc:	f240 3376 	movw	r3, #886	; 0x376
    fad0:	f006 fd93 	bl	165fa <printk>
    fad4:	4040      	eors	r0, r0
    fad6:	f380 8811 	msr	BASEPRI, r0
    fada:	f04f 0003 	mov.w	r0, #3
    fade:	df02      	svc	2
}
    fae0:	bd10      	pop	{r4, pc}
    fae2:	bf00      	nop
    fae4:	20002b71 	.word	0x20002b71
    fae8:	20002b70 	.word	0x20002b70
    faec:	00020a93 	.word	0x00020a93
    faf0:	00020b40 	.word	0x00020b40
    faf4:	0002023c 	.word	0x0002023c
    faf8:	20000788 	.word	0x20000788
    fafc:	00020608 	.word	0x00020608

0000fb00 <preempt_ticker_stop>:
{
    fb00:	b513      	push	{r0, r1, r4, lr}
	if ((preempt_stop_req != preempt_stop_ack) ||
    fb02:	4a17      	ldr	r2, [pc, #92]	; (fb60 <preempt_ticker_stop+0x60>)
    fb04:	4917      	ldr	r1, [pc, #92]	; (fb64 <preempt_ticker_stop+0x64>)
    fb06:	7813      	ldrb	r3, [r2, #0]
    fb08:	7809      	ldrb	r1, [r1, #0]
    fb0a:	4299      	cmp	r1, r3
    fb0c:	d003      	beq.n	fb16 <preempt_ticker_stop+0x16>
		return TICKER_STATUS_SUCCESS;
    fb0e:	2400      	movs	r4, #0
}
    fb10:	4620      	mov	r0, r4
    fb12:	b002      	add	sp, #8
    fb14:	bd10      	pop	{r4, pc}
	    (preempt_req == preempt_ack)) {
    fb16:	4b14      	ldr	r3, [pc, #80]	; (fb68 <preempt_ticker_stop+0x68>)
    fb18:	4914      	ldr	r1, [pc, #80]	; (fb6c <preempt_ticker_stop+0x6c>)
    fb1a:	781b      	ldrb	r3, [r3, #0]
	if ((preempt_stop_req != preempt_stop_ack) ||
    fb1c:	7809      	ldrb	r1, [r1, #0]
    fb1e:	4299      	cmp	r1, r3
    fb20:	d0f5      	beq.n	fb0e <preempt_ticker_stop+0xe>
	preempt_stop_req++;
    fb22:	7813      	ldrb	r3, [r2, #0]
    fb24:	3301      	adds	r3, #1
    fb26:	b2db      	uxtb	r3, r3
    fb28:	7013      	strb	r3, [r2, #0]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    fb2a:	2200      	movs	r2, #0
    fb2c:	4b10      	ldr	r3, [pc, #64]	; (fb70 <preempt_ticker_stop+0x70>)
    fb2e:	9200      	str	r2, [sp, #0]
    fb30:	4611      	mov	r1, r2
    fb32:	4610      	mov	r0, r2
    fb34:	f7fb ffd2 	bl	badc <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    fb38:	4604      	mov	r4, r0
    fb3a:	2800      	cmp	r0, #0
    fb3c:	d0e7      	beq.n	fb0e <preempt_ticker_stop+0xe>
    fb3e:	2802      	cmp	r0, #2
    fb40:	d0e6      	beq.n	fb10 <preempt_ticker_stop+0x10>
    fb42:	4a0c      	ldr	r2, [pc, #48]	; (fb74 <preempt_ticker_stop+0x74>)
    fb44:	490c      	ldr	r1, [pc, #48]	; (fb78 <preempt_ticker_stop+0x78>)
    fb46:	480d      	ldr	r0, [pc, #52]	; (fb7c <preempt_ticker_stop+0x7c>)
    fb48:	f240 3362 	movw	r3, #866	; 0x362
    fb4c:	f006 fd55 	bl	165fa <printk>
    fb50:	4040      	eors	r0, r0
    fb52:	f380 8811 	msr	BASEPRI, r0
    fb56:	f04f 0003 	mov.w	r0, #3
    fb5a:	df02      	svc	2
    fb5c:	e7d8      	b.n	fb10 <preempt_ticker_stop+0x10>
    fb5e:	bf00      	nop
    fb60:	20002b75 	.word	0x20002b75
    fb64:	20002b74 	.word	0x20002b74
    fb68:	20002b70 	.word	0x20002b70
    fb6c:	20002b71 	.word	0x20002b71
    fb70:	0000f995 	.word	0x0000f995
    fb74:	00020a93 	.word	0x00020a93
    fb78:	000206f7 	.word	0x000206f7
    fb7c:	0002023c 	.word	0x0002023c

0000fb80 <preempt_ticker_start>:
	ull = HDR_LLL2ULL(p->param);
    fb80:	68cb      	ldr	r3, [r1, #12]
    fb82:	681b      	ldr	r3, [r3, #0]
{
    fb84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	preempt_anchor = p->ticks_at_expire;
    fb88:	f8d1 8000 	ldr.w	r8, [r1]
	preempt_to = MAX(ull->ticks_active_to_start,
    fb8c:	68de      	ldr	r6, [r3, #12]
	if ((preempt_start_req != preempt_start_ack) ||
    fb8e:	f8df 90a4 	ldr.w	r9, [pc, #164]	; fc34 <preempt_ticker_start+0xb4>
{
    fb92:	460d      	mov	r5, r1
	preempt_to = MAX(ull->ticks_active_to_start,
    fb94:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
    fb98:	4291      	cmp	r1, r2
    fb9a:	bf2c      	ite	cs
    fb9c:	ebc6 0601 	rsbcs	r6, r6, r1
    fba0:	ebc6 0602 	rsbcc	r6, r6, r2
	if ((preempt_start_req != preempt_start_ack) ||
    fba4:	4a24      	ldr	r2, [pc, #144]	; (fc38 <preempt_ticker_start+0xb8>)
    fba6:	f899 3000 	ldrb.w	r3, [r9]
    fbaa:	7812      	ldrb	r2, [r2, #0]
    fbac:	429a      	cmp	r2, r3
{
    fbae:	b08a      	sub	sp, #40	; 0x28
    fbb0:	4604      	mov	r4, r0
	ticks_at_preempt_new = preempt_anchor + preempt_to;
    fbb2:	eb08 0706 	add.w	r7, r8, r6
	if ((preempt_start_req != preempt_start_ack) ||
    fbb6:	d105      	bne.n	fbc4 <preempt_ticker_start+0x44>
	    (preempt_req != preempt_ack)) {
    fbb8:	4b20      	ldr	r3, [pc, #128]	; (fc3c <preempt_ticker_start+0xbc>)
    fbba:	4a21      	ldr	r2, [pc, #132]	; (fc40 <preempt_ticker_start+0xc0>)
    fbbc:	781b      	ldrb	r3, [r3, #0]
	if ((preempt_start_req != preempt_start_ack) ||
    fbbe:	7812      	ldrb	r2, [r2, #0]
    fbc0:	429a      	cmp	r2, r3
    fbc2:	d018      	beq.n	fbf6 <preempt_ticker_start+0x76>
		if (!prev || prev->is_aborted ||
    fbc4:	2c00      	cmp	r4, #0
    fbc6:	d032      	beq.n	fc2e <preempt_ticker_start+0xae>
    fbc8:	7f23      	ldrb	r3, [r4, #28]
    fbca:	079b      	lsls	r3, r3, #30
    fbcc:	d42f      	bmi.n	fc2e <preempt_ticker_start+0xae>
		diff = ticks_at_preempt_new - ticks_at_preempt;
    fbce:	f8df a074 	ldr.w	sl, [pc, #116]	; fc44 <preempt_ticker_start+0xc4>
    fbd2:	f8da 2000 	ldr.w	r2, [sl]
    fbd6:	1aba      	subs	r2, r7, r2
		if (!prev || prev->is_aborted ||
    fbd8:	f412 0000 	ands.w	r0, r2, #8388608	; 0x800000
    fbdc:	d024      	beq.n	fc28 <preempt_ticker_start+0xa8>
		preempt_ticker_stop();
    fbde:	f7ff ff8f 	bl	fb00 <preempt_ticker_stop>
		prev->is_aborted = 1U;
    fbe2:	7f23      	ldrb	r3, [r4, #28]
		prev->abort_cb(&prev->prepare_param, prev->prepare_param.param);
    fbe4:	68e1      	ldr	r1, [r4, #12]
		ticks_at_preempt = ticks_at_preempt_new;
    fbe6:	f8ca 7000 	str.w	r7, [sl]
		prev->is_aborted = 1U;
    fbea:	f043 0302 	orr.w	r3, r3, #2
    fbee:	7723      	strb	r3, [r4, #28]
		prev->abort_cb(&prev->prepare_param, prev->prepare_param.param);
    fbf0:	4620      	mov	r0, r4
    fbf2:	69a3      	ldr	r3, [r4, #24]
    fbf4:	4798      	blx	r3
	preempt_start_req++;
    fbf6:	f899 2000 	ldrb.w	r2, [r9]
	ticks_at_preempt = ticks_at_preempt_new;
    fbfa:	4b12      	ldr	r3, [pc, #72]	; (fc44 <preempt_ticker_start+0xc4>)
	preempt_start_req++;
    fbfc:	3201      	adds	r2, #1
	ticks_at_preempt = ticks_at_preempt_new;
    fbfe:	601f      	str	r7, [r3, #0]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    fc00:	4b11      	ldr	r3, [pc, #68]	; (fc48 <preempt_ticker_start+0xc8>)
    fc02:	9508      	str	r5, [sp, #32]
	preempt_start_req++;
    fc04:	b2d2      	uxtb	r2, r2
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    fc06:	e9cd 5306 	strd	r5, r3, [sp, #24]
	preempt_start_req++;
    fc0a:	f889 2000 	strb.w	r2, [r9]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    fc0e:	4b0f      	ldr	r3, [pc, #60]	; (fc4c <preempt_ticker_start+0xcc>)
    fc10:	9305      	str	r3, [sp, #20]
    fc12:	2200      	movs	r2, #0
    fc14:	e9cd 2203 	strd	r2, r2, [sp, #12]
    fc18:	e9cd 2201 	strd	r2, r2, [sp, #4]
    fc1c:	9600      	str	r6, [sp, #0]
    fc1e:	4643      	mov	r3, r8
    fc20:	4611      	mov	r1, r2
    fc22:	4610      	mov	r0, r2
    fc24:	f00c fa46 	bl	1c0b4 <ticker_start>
}
    fc28:	b00a      	add	sp, #40	; 0x28
    fc2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			return TICKER_STATUS_SUCCESS;
    fc2e:	2000      	movs	r0, #0
    fc30:	e7fa      	b.n	fc28 <preempt_ticker_start+0xa8>
    fc32:	bf00      	nop
    fc34:	20002b73 	.word	0x20002b73
    fc38:	20002b72 	.word	0x20002b72
    fc3c:	20002b70 	.word	0x20002b70
    fc40:	20002b71 	.word	0x20002b71
    fc44:	200025e8 	.word	0x200025e8
    fc48:	0000f9e9 	.word	0x0000f9e9
    fc4c:	0000fa85 	.word	0x0000fa85

0000fc50 <preempt>:

static void preempt(void *param)
{
    fc50:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct lll_event *next;
	uint8_t idx;
	int err;

	/* No event to abort */
	if (!event.curr.abort_cb || !event.curr.param) {
    fc52:	4c3a      	ldr	r4, [pc, #232]	; (fd3c <preempt+0xec>)
    fc54:	68a3      	ldr	r3, [r4, #8]
{
    fc56:	b089      	sub	sp, #36	; 0x24
    fc58:	4605      	mov	r5, r0
	if (!event.curr.abort_cb || !event.curr.param) {
    fc5a:	2b00      	cmp	r3, #0
    fc5c:	d034      	beq.n	fcc8 <preempt+0x78>
    fc5e:	6823      	ldr	r3, [r4, #0]
    fc60:	2b00      	cmp	r3, #0
    fc62:	d031      	beq.n	fcc8 <preempt+0x78>
		return;
	}

	/* Check if any prepare in pipeline */
	idx = UINT8_MAX;
    fc64:	23ff      	movs	r3, #255	; 0xff
    fc66:	f88d 300a 	strb.w	r3, [sp, #10]
		return;
	}

	/* Find a prepare that is ready and not a resume */
	while (next && (next->is_aborted || next->is_resume)) {
		next = ull_prepare_dequeue_iter(&idx);
    fc6a:	f10d 000a 	add.w	r0, sp, #10
    fc6e:	f7fd fc25 	bl	d4bc <ull_prepare_dequeue_iter>
	while (next && (next->is_aborted || next->is_resume)) {
    fc72:	4601      	mov	r1, r0
    fc74:	b340      	cbz	r0, fcc8 <preempt+0x78>
    fc76:	7f06      	ldrb	r6, [r0, #28]
    fc78:	f016 0603 	ands.w	r6, r6, #3
    fc7c:	d1f5      	bne.n	fc6a <preempt+0x1a>
	if (!next) {
		return;
	}

	/* Preemptor not in pipeline */
	if (next != param) {
    fc7e:	4285      	cmp	r5, r0
    fc80:	d013      	beq.n	fcaa <preempt+0x5a>
		uint32_t ret;

		/* Start the preempt timeout */
		ret = preempt_ticker_start(NULL, next);
    fc82:	4630      	mov	r0, r6
    fc84:	f7ff ff7c 	bl	fb80 <preempt_ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    fc88:	f030 0302 	bics.w	r3, r0, #2
    fc8c:	d01c      	beq.n	fcc8 <preempt+0x78>
    fc8e:	4a2c      	ldr	r2, [pc, #176]	; (fd40 <preempt+0xf0>)
    fc90:	492c      	ldr	r1, [pc, #176]	; (fd44 <preempt+0xf4>)
    fc92:	f44f 7367 	mov.w	r3, #924	; 0x39c

		/* Enqueue as resume event */
		iter = resume_enqueue(resume_cb);
		LL_ASSERT(iter);
	} else {
		LL_ASSERT(err == -ECANCELED);
    fc96:	482c      	ldr	r0, [pc, #176]	; (fd48 <preempt+0xf8>)
    fc98:	f006 fcaf 	bl	165fa <printk>
    fc9c:	4040      	eors	r0, r0
    fc9e:	f380 8811 	msr	BASEPRI, r0
    fca2:	f04f 0003 	mov.w	r0, #3
    fca6:	df02      	svc	2
    fca8:	e00e      	b.n	fcc8 <preempt+0x78>
	err = event.curr.is_abort_cb(next->prepare_param.param,
    fcaa:	6863      	ldr	r3, [r4, #4]
    fcac:	6821      	ldr	r1, [r4, #0]
    fcae:	68e8      	ldr	r0, [r5, #12]
    fcb0:	aa03      	add	r2, sp, #12
    fcb2:	4798      	blx	r3
	if (!err) {
    fcb4:	4607      	mov	r7, r0
    fcb6:	b948      	cbnz	r0, fccc <preempt+0x7c>
		next->is_aborted = 1;
    fcb8:	7f2b      	ldrb	r3, [r5, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
    fcba:	68e9      	ldr	r1, [r5, #12]
		next->is_aborted = 1;
    fcbc:	f043 0302 	orr.w	r3, r3, #2
    fcc0:	772b      	strb	r3, [r5, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
    fcc2:	4628      	mov	r0, r5
    fcc4:	69ab      	ldr	r3, [r5, #24]
    fcc6:	4798      	blx	r3
	}
}
    fcc8:	b009      	add	sp, #36	; 0x24
    fcca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	event.curr.abort_cb(NULL, event.curr.param);
    fccc:	68a3      	ldr	r3, [r4, #8]
    fcce:	6821      	ldr	r1, [r4, #0]
    fcd0:	4630      	mov	r0, r6
    fcd2:	4798      	blx	r3
	if (err == -EAGAIN) {
    fcd4:	f117 0f0b 	cmn.w	r7, #11
    fcd8:	d129      	bne.n	fd2e <preempt+0xde>
		iter_idx = UINT8_MAX;
    fcda:	25ff      	movs	r5, #255	; 0xff
				iter_idx = UINT8_MAX;
    fcdc:	f88d 500b 	strb.w	r5, [sp, #11]
			iter = ull_prepare_dequeue_iter(&iter_idx);
    fce0:	f10d 000b 	add.w	r0, sp, #11
    fce4:	f7fd fbea 	bl	d4bc <ull_prepare_dequeue_iter>
		while (iter) {
    fce8:	b9a0      	cbnz	r0, fd14 <preempt+0xc4>
	prepare_param.param = event.curr.param;
    fcea:	6823      	ldr	r3, [r4, #0]
    fcec:	9307      	str	r3, [sp, #28]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
    fcee:	2301      	movs	r3, #1
	struct lll_prepare_param prepare_param = {0};
    fcf0:	e9cd 0004 	strd	r0, r0, [sp, #16]
    fcf4:	9006      	str	r0, [sp, #24]
	event.curr.param = NULL;
    fcf6:	6020      	str	r0, [r4, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
    fcf8:	9300      	str	r3, [sp, #0]
    fcfa:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
    fcfe:	9b03      	ldr	r3, [sp, #12]
    fd00:	aa04      	add	r2, sp, #16
    fd02:	f7fd fb9f 	bl	d444 <ull_prepare_enqueue>
		LL_ASSERT(iter);
    fd06:	2800      	cmp	r0, #0
    fd08:	d1de      	bne.n	fcc8 <preempt+0x78>
    fd0a:	4a0d      	ldr	r2, [pc, #52]	; (fd40 <preempt+0xf0>)
    fd0c:	490f      	ldr	r1, [pc, #60]	; (fd4c <preempt+0xfc>)
    fd0e:	f240 33ce 	movw	r3, #974	; 0x3ce
    fd12:	e7c0      	b.n	fc96 <preempt+0x46>
			if (!iter->is_aborted &&
    fd14:	7f03      	ldrb	r3, [r0, #28]
    fd16:	079a      	lsls	r2, r3, #30
    fd18:	d4e2      	bmi.n	fce0 <preempt+0x90>
			    event.curr.param == iter->prepare_param.param) {
    fd1a:	68c2      	ldr	r2, [r0, #12]
			if (!iter->is_aborted &&
    fd1c:	6821      	ldr	r1, [r4, #0]
    fd1e:	4291      	cmp	r1, r2
    fd20:	d1de      	bne.n	fce0 <preempt+0x90>
				iter->is_aborted = 1;
    fd22:	f043 0302 	orr.w	r3, r3, #2
    fd26:	7703      	strb	r3, [r0, #28]
				iter->abort_cb(&iter->prepare_param,
    fd28:	6983      	ldr	r3, [r0, #24]
    fd2a:	4798      	blx	r3
    fd2c:	e7d6      	b.n	fcdc <preempt+0x8c>
		LL_ASSERT(err == -ECANCELED);
    fd2e:	378c      	adds	r7, #140	; 0x8c
    fd30:	d0ca      	beq.n	fcc8 <preempt+0x78>
    fd32:	4a03      	ldr	r2, [pc, #12]	; (fd40 <preempt+0xf0>)
    fd34:	4906      	ldr	r1, [pc, #24]	; (fd50 <preempt+0x100>)
    fd36:	f44f 7374 	mov.w	r3, #976	; 0x3d0
    fd3a:	e7ac      	b.n	fc96 <preempt+0x46>
    fd3c:	200025d4 	.word	0x200025d4
    fd40:	00020a93 	.word	0x00020a93
    fd44:	000206f7 	.word	0x000206f7
    fd48:	0002023c 	.word	0x0002023c
    fd4c:	00020b5b 	.word	0x00020b5b
    fd50:	00020b60 	.word	0x00020b60

0000fd54 <lll_init>:
{
    fd54:	b510      	push	{r4, lr}
    fd56:	4816      	ldr	r0, [pc, #88]	; (fdb0 <lll_init+0x5c>)
    fd58:	f005 fa54 	bl	15204 <z_impl_device_get_binding>
	dev_entropy = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
    fd5c:	4b15      	ldr	r3, [pc, #84]	; (fdb4 <lll_init+0x60>)
    fd5e:	6018      	str	r0, [r3, #0]
	if (!dev_entropy) {
    fd60:	b310      	cbz	r0, fda8 <lll_init+0x54>
	event.curr.abort_cb = NULL;
    fd62:	4b15      	ldr	r3, [pc, #84]	; (fdb8 <lll_init+0x64>)
    fd64:	2400      	movs	r4, #0
    fd66:	609c      	str	r4, [r3, #8]
	err = lll_clock_init();
    fd68:	f000 fa34 	bl	101d4 <lll_clock_init>
	if (err < 0) {
    fd6c:	2800      	cmp	r0, #0
    fd6e:	db1a      	blt.n	fda6 <lll_init+0x52>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_BT_CTLR_LLL_PRIO,
    fd70:	4622      	mov	r2, r4
    fd72:	4621      	mov	r1, r4
    fd74:	2001      	movs	r0, #1
    fd76:	f7f3 ffa3 	bl	3cc0 <z_arm_irq_priority_set>
	IRQ_CONNECT(RTC0_IRQn, CONFIG_BT_CTLR_ULL_HIGH_PRIO,
    fd7a:	4622      	mov	r2, r4
    fd7c:	2101      	movs	r1, #1
    fd7e:	200b      	movs	r0, #11
    fd80:	f7f3 ff9e 	bl	3cc0 <z_arm_irq_priority_set>
	IRQ_CONNECT(HAL_SWI_RADIO_IRQ, CONFIG_BT_CTLR_LLL_PRIO,
    fd84:	4622      	mov	r2, r4
    fd86:	4621      	mov	r1, r4
    fd88:	2018      	movs	r0, #24
    fd8a:	f7f3 ff99 	bl	3cc0 <z_arm_irq_priority_set>
	irq_enable(RADIO_IRQn);
    fd8e:	2001      	movs	r0, #1
    fd90:	f7f3 ff64 	bl	3c5c <arch_irq_enable>
	irq_enable(RTC0_IRQn);
    fd94:	200b      	movs	r0, #11
    fd96:	f7f3 ff61 	bl	3c5c <arch_irq_enable>
	irq_enable(HAL_SWI_RADIO_IRQ);
    fd9a:	2018      	movs	r0, #24
    fd9c:	f7f3 ff5e 	bl	3c5c <arch_irq_enable>
	radio_setup();
    fda0:	f00c ffc0 	bl	1cd24 <radio_setup>
	return 0;
    fda4:	4620      	mov	r0, r4
}
    fda6:	bd10      	pop	{r4, pc}
		return -ENODEV;
    fda8:	f06f 0012 	mvn.w	r0, #18
    fdac:	e7fb      	b.n	fda6 <lll_init+0x52>
    fdae:	bf00      	nop
    fdb0:	00020b6c 	.word	0x00020b6c
    fdb4:	200025d0 	.word	0x200025d0
    fdb8:	200025d4 	.word	0x200025d4

0000fdbc <lll_csrand_get>:
	return entropy_get_entropy(dev_entropy, buf, len);
    fdbc:	4a05      	ldr	r2, [pc, #20]	; (fdd4 <lll_csrand_get+0x18>)
{
    fdbe:	b410      	push	{r4}
    fdc0:	4603      	mov	r3, r0
	return entropy_get_entropy(dev_entropy, buf, len);
    fdc2:	6810      	ldr	r0, [r2, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
    fdc4:	6882      	ldr	r2, [r0, #8]
    fdc6:	6814      	ldr	r4, [r2, #0]
    fdc8:	b28a      	uxth	r2, r1
    fdca:	4619      	mov	r1, r3
    fdcc:	4623      	mov	r3, r4
}
    fdce:	bc10      	pop	{r4}
    fdd0:	4718      	bx	r3
    fdd2:	bf00      	nop
    fdd4:	200025d0 	.word	0x200025d0

0000fdd8 <lll_csrand_isr_get>:
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
    fdd8:	4b08      	ldr	r3, [pc, #32]	; (fdfc <lll_csrand_isr_get+0x24>)
{
    fdda:	b430      	push	{r4, r5}
    fddc:	4604      	mov	r4, r0
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
    fdde:	6818      	ldr	r0, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
    fde0:	6883      	ldr	r3, [r0, #8]
    fde2:	685d      	ldr	r5, [r3, #4]
    fde4:	b28a      	uxth	r2, r1
    fde6:	b125      	cbz	r5, fdf2 <lll_csrand_isr_get+0x1a>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
    fde8:	4621      	mov	r1, r4
    fdea:	46ac      	mov	ip, r5
    fdec:	2300      	movs	r3, #0
}
    fdee:	bc30      	pop	{r4, r5}
    fdf0:	4760      	bx	ip
    fdf2:	f06f 0085 	mvn.w	r0, #133	; 0x85
    fdf6:	bc30      	pop	{r4, r5}
    fdf8:	4770      	bx	lr
    fdfa:	bf00      	nop
    fdfc:	200025d0 	.word	0x200025d0

0000fe00 <lll_disable>:
{
    fe00:	b537      	push	{r0, r1, r2, r4, r5, lr}
    fe02:	4b19      	ldr	r3, [pc, #100]	; (fe68 <lll_disable+0x68>)
	if (!param || (param == event.curr.param)) {
    fe04:	4604      	mov	r4, r0
    fe06:	b110      	cbz	r0, fe0e <lll_disable+0xe>
    fe08:	681a      	ldr	r2, [r3, #0]
    fe0a:	4282      	cmp	r2, r0
    fe0c:	d105      	bne.n	fe1a <lll_disable+0x1a>
		if (event.curr.abort_cb && event.curr.param) {
    fe0e:	689a      	ldr	r2, [r3, #8]
    fe10:	b16a      	cbz	r2, fe2e <lll_disable+0x2e>
    fe12:	6819      	ldr	r1, [r3, #0]
    fe14:	b159      	cbz	r1, fe2e <lll_disable+0x2e>
			event.curr.abort_cb(NULL, event.curr.param);
    fe16:	2000      	movs	r0, #0
    fe18:	4790      	blx	r2
		idx = UINT8_MAX;
    fe1a:	25ff      	movs	r5, #255	; 0xff
				idx = UINT8_MAX;
    fe1c:	f88d 5007 	strb.w	r5, [sp, #7]
			next = ull_prepare_dequeue_iter(&idx);
    fe20:	f10d 0007 	add.w	r0, sp, #7
    fe24:	f7fd fb4a 	bl	d4bc <ull_prepare_dequeue_iter>
		while (next) {
    fe28:	b980      	cbnz	r0, fe4c <lll_disable+0x4c>
}
    fe2a:	b003      	add	sp, #12
    fe2c:	bd30      	pop	{r4, r5, pc}
			LL_ASSERT(!param);
    fe2e:	2c00      	cmp	r4, #0
    fe30:	d0f3      	beq.n	fe1a <lll_disable+0x1a>
    fe32:	4a0e      	ldr	r2, [pc, #56]	; (fe6c <lll_disable+0x6c>)
    fe34:	490e      	ldr	r1, [pc, #56]	; (fe70 <lll_disable+0x70>)
    fe36:	480f      	ldr	r0, [pc, #60]	; (fe74 <lll_disable+0x74>)
    fe38:	23fd      	movs	r3, #253	; 0xfd
    fe3a:	f006 fbde 	bl	165fa <printk>
    fe3e:	4040      	eors	r0, r0
    fe40:	f380 8811 	msr	BASEPRI, r0
    fe44:	f04f 0003 	mov.w	r0, #3
    fe48:	df02      	svc	2
    fe4a:	e7e6      	b.n	fe1a <lll_disable+0x1a>
			if (!next->is_aborted &&
    fe4c:	7f03      	ldrb	r3, [r0, #28]
    fe4e:	079b      	lsls	r3, r3, #30
    fe50:	d4e6      	bmi.n	fe20 <lll_disable+0x20>
			    (!param || (param == next->prepare_param.param))) {
    fe52:	68c1      	ldr	r1, [r0, #12]
			if (!next->is_aborted &&
    fe54:	b10c      	cbz	r4, fe5a <lll_disable+0x5a>
			    (!param || (param == next->prepare_param.param))) {
    fe56:	428c      	cmp	r4, r1
    fe58:	d1e2      	bne.n	fe20 <lll_disable+0x20>
				next->is_aborted = 1;
    fe5a:	7f03      	ldrb	r3, [r0, #28]
    fe5c:	f043 0302 	orr.w	r3, r3, #2
    fe60:	7703      	strb	r3, [r0, #28]
				next->abort_cb(&next->prepare_param,
    fe62:	6983      	ldr	r3, [r0, #24]
    fe64:	4798      	blx	r3
    fe66:	e7d9      	b.n	fe1c <lll_disable+0x1c>
    fe68:	200025d4 	.word	0x200025d4
    fe6c:	00020a93 	.word	0x00020a93
    fe70:	00020b70 	.word	0x00020b70
    fe74:	0002023c 	.word	0x0002023c

0000fe78 <lll_done>:
{
    fe78:	b538      	push	{r3, r4, r5, lr}
    fe7a:	4604      	mov	r4, r0
	next = ull_prepare_dequeue_get();
    fe7c:	f7fd fb10 	bl	d4a0 <ull_prepare_dequeue_get>
	LL_ASSERT(!param || next);
    fe80:	b17c      	cbz	r4, fea2 <lll_done+0x2a>
    fe82:	b960      	cbnz	r0, fe9e <lll_done+0x26>
    fe84:	4a1d      	ldr	r2, [pc, #116]	; (fefc <lll_done+0x84>)
    fe86:	491e      	ldr	r1, [pc, #120]	; (ff00 <lll_done+0x88>)
    fe88:	481e      	ldr	r0, [pc, #120]	; (ff04 <lll_done+0x8c>)
    fe8a:	f240 1337 	movw	r3, #311	; 0x137
    fe8e:	f006 fbb4 	bl	165fa <printk>
    fe92:	4040      	eors	r0, r0
    fe94:	f380 8811 	msr	BASEPRI, r0
    fe98:	f04f 0003 	mov.w	r0, #3
    fe9c:	df02      	svc	2
			ull = HDR_LLL2ULL(param);
    fe9e:	6824      	ldr	r4, [r4, #0]
    fea0:	e015      	b.n	fece <lll_done+0x56>
		LL_ASSERT(event.curr.abort_cb);
    fea2:	4d19      	ldr	r5, [pc, #100]	; (ff08 <lll_done+0x90>)
    fea4:	68ab      	ldr	r3, [r5, #8]
    fea6:	b963      	cbnz	r3, fec2 <lll_done+0x4a>
    fea8:	4a14      	ldr	r2, [pc, #80]	; (fefc <lll_done+0x84>)
    feaa:	4918      	ldr	r1, [pc, #96]	; (ff0c <lll_done+0x94>)
    feac:	4815      	ldr	r0, [pc, #84]	; (ff04 <lll_done+0x8c>)
    feae:	f240 133d 	movw	r3, #317	; 0x13d
    feb2:	f006 fba2 	bl	165fa <printk>
    feb6:	4040      	eors	r0, r0
    feb8:	f380 8811 	msr	BASEPRI, r0
    febc:	f04f 0003 	mov.w	r0, #3
    fec0:	df02      	svc	2
		param = event.curr.param;
    fec2:	682c      	ldr	r4, [r5, #0]
		event.curr.abort_cb = NULL;
    fec4:	2300      	movs	r3, #0
    fec6:	60ab      	str	r3, [r5, #8]
		event.curr.param = NULL;
    fec8:	602b      	str	r3, [r5, #0]
		if (param) {
    feca:	2c00      	cmp	r4, #0
    fecc:	d1e7      	bne.n	fe9e <lll_done+0x26>
	ull_prepare_dequeue(TICKER_USER_ID_LLL);
    fece:	2000      	movs	r0, #0
    fed0:	f7fd fb12 	bl	d4f8 <ull_prepare_dequeue>
	evdone = ull_event_done(ull);
    fed4:	4620      	mov	r0, r4
    fed6:	f7fd fb67 	bl	d5a8 <ull_event_done>
	LL_ASSERT(evdone);
    feda:	b960      	cbnz	r0, fef6 <lll_done+0x7e>
    fedc:	4a07      	ldr	r2, [pc, #28]	; (fefc <lll_done+0x84>)
    fede:	490c      	ldr	r1, [pc, #48]	; (ff10 <lll_done+0x98>)
    fee0:	4808      	ldr	r0, [pc, #32]	; (ff04 <lll_done+0x8c>)
    fee2:	f240 136d 	movw	r3, #365	; 0x16d
    fee6:	f006 fb88 	bl	165fa <printk>
    feea:	4040      	eors	r0, r0
    feec:	f380 8811 	msr	BASEPRI, r0
    fef0:	f04f 0003 	mov.w	r0, #3
    fef4:	df02      	svc	2
}
    fef6:	2000      	movs	r0, #0
    fef8:	bd38      	pop	{r3, r4, r5, pc}
    fefa:	bf00      	nop
    fefc:	00020a93 	.word	0x00020a93
    ff00:	00020b77 	.word	0x00020b77
    ff04:	0002023c 	.word	0x0002023c
    ff08:	200025d4 	.word	0x200025d4
    ff0c:	00020b86 	.word	0x00020b86
    ff10:	00020b9a 	.word	0x00020b9a

0000ff14 <lll_is_done>:
	*is_resume = (param != event.curr.param);
    ff14:	4a05      	ldr	r2, [pc, #20]	; (ff2c <lll_is_done+0x18>)
    ff16:	6813      	ldr	r3, [r2, #0]
    ff18:	1a1b      	subs	r3, r3, r0
	return !event.curr.abort_cb;
    ff1a:	6890      	ldr	r0, [r2, #8]
	*is_resume = (param != event.curr.param);
    ff1c:	bf18      	it	ne
    ff1e:	2301      	movne	r3, #1
}
    ff20:	fab0 f080 	clz	r0, r0
	*is_resume = (param != event.curr.param);
    ff24:	700b      	strb	r3, [r1, #0]
}
    ff26:	0940      	lsrs	r0, r0, #5
    ff28:	4770      	bx	lr
    ff2a:	bf00      	nop
    ff2c:	200025d4 	.word	0x200025d4

0000ff30 <lll_chan_set>:
	switch (chan) {
    ff30:	2826      	cmp	r0, #38	; 0x26
{
    ff32:	b510      	push	{r4, lr}
    ff34:	4604      	mov	r4, r0
	switch (chan) {
    ff36:	d00b      	beq.n	ff50 <lll_chan_set+0x20>
    ff38:	2827      	cmp	r0, #39	; 0x27
    ff3a:	d00b      	beq.n	ff54 <lll_chan_set+0x24>
    ff3c:	2825      	cmp	r0, #37	; 0x25
    ff3e:	d10b      	bne.n	ff58 <lll_chan_set+0x28>
		radio_freq_chan_set(2);
    ff40:	2002      	movs	r0, #2
		radio_freq_chan_set(26);
    ff42:	f001 fcf7 	bl	11934 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
    ff46:	4620      	mov	r0, r4
}
    ff48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
    ff4c:	f001 bcf8 	b.w	11940 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
    ff50:	201a      	movs	r0, #26
    ff52:	e7f6      	b.n	ff42 <lll_chan_set+0x12>
		radio_freq_chan_set(80);
    ff54:	2050      	movs	r0, #80	; 0x50
    ff56:	e7f4      	b.n	ff42 <lll_chan_set+0x12>
		if (chan < 11) {
    ff58:	280a      	cmp	r0, #10
    ff5a:	d802      	bhi.n	ff62 <lll_chan_set+0x32>
			radio_freq_chan_set(4 + (chan * 2U));
    ff5c:	3002      	adds	r0, #2
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
    ff5e:	0040      	lsls	r0, r0, #1
    ff60:	e7ef      	b.n	ff42 <lll_chan_set+0x12>
		} else if (chan < 40) {
    ff62:	2827      	cmp	r0, #39	; 0x27
    ff64:	d801      	bhi.n	ff6a <lll_chan_set+0x3a>
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
    ff66:	3003      	adds	r0, #3
    ff68:	e7f9      	b.n	ff5e <lll_chan_set+0x2e>
			LL_ASSERT(0);
    ff6a:	4a07      	ldr	r2, [pc, #28]	; (ff88 <lll_chan_set+0x58>)
    ff6c:	4907      	ldr	r1, [pc, #28]	; (ff8c <lll_chan_set+0x5c>)
    ff6e:	4808      	ldr	r0, [pc, #32]	; (ff90 <lll_chan_set+0x60>)
    ff70:	f240 13df 	movw	r3, #479	; 0x1df
    ff74:	f006 fb41 	bl	165fa <printk>
    ff78:	4040      	eors	r0, r0
    ff7a:	f380 8811 	msr	BASEPRI, r0
    ff7e:	f04f 0003 	mov.w	r0, #3
    ff82:	df02      	svc	2
    ff84:	e7df      	b.n	ff46 <lll_chan_set+0x16>
    ff86:	bf00      	nop
    ff88:	00020a93 	.word	0x00020a93
    ff8c:	00020e86 	.word	0x00020e86
    ff90:	0002023c 	.word	0x0002023c

0000ff94 <lll_isr_cleanup>:
{
    ff94:	b508      	push	{r3, lr}
    ff96:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
    ff98:	480f      	ldr	r0, [pc, #60]	; (ffd8 <lll_isr_cleanup+0x44>)
    ff9a:	f001 fc71 	bl	11880 <radio_isr_set>
	if (!radio_is_idle()) {
    ff9e:	f001 fd69 	bl	11a74 <radio_is_idle>
    ffa2:	b908      	cbnz	r0, ffa8 <lll_isr_cleanup+0x14>
		radio_disable();
    ffa4:	f001 fd34 	bl	11a10 <radio_disable>
	radio_tmr_stop();
    ffa8:	f001 ff38 	bl	11e1c <radio_tmr_stop>
	err = lll_hfclock_off();
    ffac:	f000 f954 	bl	10258 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
    ffb0:	2800      	cmp	r0, #0
    ffb2:	da0c      	bge.n	ffce <lll_isr_cleanup+0x3a>
    ffb4:	4a09      	ldr	r2, [pc, #36]	; (ffdc <lll_isr_cleanup+0x48>)
    ffb6:	490a      	ldr	r1, [pc, #40]	; (ffe0 <lll_isr_cleanup+0x4c>)
    ffb8:	480a      	ldr	r0, [pc, #40]	; (ffe4 <lll_isr_cleanup+0x50>)
    ffba:	f240 2342 	movw	r3, #578	; 0x242
    ffbe:	f006 fb1c 	bl	165fa <printk>
    ffc2:	4040      	eors	r0, r0
    ffc4:	f380 8811 	msr	BASEPRI, r0
    ffc8:	f04f 0003 	mov.w	r0, #3
    ffcc:	df02      	svc	2
}
    ffce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
    ffd2:	2000      	movs	r0, #0
    ffd4:	f7ff bf50 	b.w	fe78 <lll_done>
    ffd8:	0001c89d 	.word	0x0001c89d
    ffdc:	00020a93 	.word	0x00020a93
    ffe0:	00020ba1 	.word	0x00020ba1
    ffe4:	0002023c 	.word	0x0002023c

0000ffe8 <lll_isr_early_abort>:
{
    ffe8:	b508      	push	{r3, lr}
    ffea:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
    ffec:	480e      	ldr	r0, [pc, #56]	; (10028 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x29>)
    ffee:	f001 fc47 	bl	11880 <radio_isr_set>
	if (!radio_is_idle()) {
    fff2:	f001 fd3f 	bl	11a74 <radio_is_idle>
    fff6:	b908      	cbnz	r0, fffc <lll_isr_early_abort+0x14>
		radio_disable();
    fff8:	f001 fd0a 	bl	11a10 <radio_disable>
	err = lll_hfclock_off();
    fffc:	f000 f92c 	bl	10258 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   10000:	2800      	cmp	r0, #0
   10002:	da0c      	bge.n	1001e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1f>
   10004:	4a09      	ldr	r2, [pc, #36]	; (1002c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2d>)
   10006:	490a      	ldr	r1, [pc, #40]	; (10030 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x31>)
   10008:	480a      	ldr	r0, [pc, #40]	; (10034 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x35>)
   1000a:	f240 2351 	movw	r3, #593	; 0x251
   1000e:	f006 faf4 	bl	165fa <printk>
   10012:	4040      	eors	r0, r0
   10014:	f380 8811 	msr	BASEPRI, r0
   10018:	f04f 0003 	mov.w	r0, #3
   1001c:	df02      	svc	2
}
   1001e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   10022:	2000      	movs	r0, #0
   10024:	f7ff bf28 	b.w	fe78 <lll_done>
   10028:	0001c89d 	.word	0x0001c89d
   1002c:	00020a93 	.word	0x00020a93
   10030:	00020ba1 	.word	0x00020ba1
   10034:	0002023c 	.word	0x0002023c

00010038 <lll_prepare_resolve>:
{
   10038:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1003c:	461d      	mov	r5, r3
   1003e:	f89d a030 	ldrb.w	sl, [sp, #48]	; 0x30
	idx = UINT8_MAX;
   10042:	23ff      	movs	r3, #255	; 0xff
{
   10044:	4681      	mov	r9, r0
   10046:	4688      	mov	r8, r1
   10048:	4616      	mov	r6, r2
	idx = UINT8_MAX;
   1004a:	f88d 300f 	strb.w	r3, [sp, #15]
		p = ull_prepare_dequeue_iter(&idx);
   1004e:	f10d 000f 	add.w	r0, sp, #15
   10052:	f7fd fa33 	bl	d4bc <ull_prepare_dequeue_iter>
   10056:	4604      	mov	r4, r0
	while (p && (p->is_aborted || p->is_resume)) {
   10058:	b110      	cbz	r0, 10060 <lll_prepare_resolve+0x28>
   1005a:	7f03      	ldrb	r3, [r0, #28]
   1005c:	079b      	lsls	r3, r3, #30
   1005e:	d1f6      	bne.n	1004e <lll_prepare_resolve+0x16>
	    event.curr.abort_cb ||
   10060:	4f41      	ldr	r7, [pc, #260]	; (10168 <lll_prepare_resolve+0x130>)
	if ((!is_dequeue && !is_done_sync()) ||
   10062:	68bb      	ldr	r3, [r7, #8]
   10064:	b923      	cbnz	r3, 10070 <lll_prepare_resolve+0x38>
	    event.curr.abort_cb ||
   10066:	2c00      	cmp	r4, #0
   10068:	d046      	beq.n	100f8 <lll_prepare_resolve+0xc0>
	    (p && is_resume)) {
   1006a:	f1ba 0f00 	cmp.w	sl, #0
   1006e:	d034      	beq.n	100da <lll_prepare_resolve+0xa2>
		next = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   10070:	462a      	mov	r2, r5
   10072:	f8cd a000 	str.w	sl, [sp]
   10076:	4633      	mov	r3, r6
   10078:	4641      	mov	r1, r8
   1007a:	4648      	mov	r0, r9
   1007c:	f7fd f9e2 	bl	d444 <ull_prepare_enqueue>
		LL_ASSERT(next);
   10080:	4605      	mov	r5, r0
   10082:	b960      	cbnz	r0, 1009e <lll_prepare_resolve+0x66>
   10084:	4a39      	ldr	r2, [pc, #228]	; (1016c <lll_prepare_resolve+0x134>)
   10086:	493a      	ldr	r1, [pc, #232]	; (10170 <lll_prepare_resolve+0x138>)
   10088:	483a      	ldr	r0, [pc, #232]	; (10174 <lll_prepare_resolve+0x13c>)
   1008a:	f240 238d 	movw	r3, #653	; 0x28d
   1008e:	f006 fab4 	bl	165fa <printk>
   10092:	4040      	eors	r0, r0
   10094:	f380 8811 	msr	BASEPRI, r0
   10098:	f04f 0003 	mov.w	r0, #3
   1009c:	df02      	svc	2
		if (is_resume) {
   1009e:	f1ba 0f00 	cmp.w	sl, #0
   100a2:	d005      	beq.n	100b0 <lll_prepare_resolve+0x78>
		return -EINPROGRESS;
   100a4:	f06f 0476 	mvn.w	r4, #118	; 0x76
}
   100a8:	4620      	mov	r0, r4
   100aa:	b004      	add	sp, #16
   100ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ret  = preempt_ticker_start(p, next);
   100b0:	4629      	mov	r1, r5
   100b2:	4620      	mov	r0, r4
   100b4:	f7ff fd64 	bl	fb80 <preempt_ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   100b8:	f030 0302 	bics.w	r3, r0, #2
   100bc:	d0f2      	beq.n	100a4 <lll_prepare_resolve+0x6c>
   100be:	4a2b      	ldr	r2, [pc, #172]	; (1016c <lll_prepare_resolve+0x134>)
   100c0:	492d      	ldr	r1, [pc, #180]	; (10178 <lll_prepare_resolve+0x140>)
   100c2:	482c      	ldr	r0, [pc, #176]	; (10174 <lll_prepare_resolve+0x13c>)
   100c4:	f44f 7326 	mov.w	r3, #664	; 0x298
   100c8:	f006 fa97 	bl	165fa <printk>
   100cc:	4040      	eors	r0, r0
   100ce:	f380 8811 	msr	BASEPRI, r0
   100d2:	f04f 0003 	mov.w	r0, #3
   100d6:	df02      	svc	2
   100d8:	e7e4      	b.n	100a4 <lll_prepare_resolve+0x6c>
	LL_ASSERT(!p || &p->prepare_param == prepare_param);
   100da:	42ac      	cmp	r4, r5
   100dc:	d00c      	beq.n	100f8 <lll_prepare_resolve+0xc0>
   100de:	4a23      	ldr	r2, [pc, #140]	; (1016c <lll_prepare_resolve+0x134>)
   100e0:	4926      	ldr	r1, [pc, #152]	; (1017c <lll_prepare_resolve+0x144>)
   100e2:	4824      	ldr	r0, [pc, #144]	; (10174 <lll_prepare_resolve+0x13c>)
   100e4:	f240 23be 	movw	r3, #702	; 0x2be
   100e8:	f006 fa87 	bl	165fa <printk>
   100ec:	4040      	eors	r0, r0
   100ee:	f380 8811 	msr	BASEPRI, r0
   100f2:	f04f 0003 	mov.w	r0, #3
   100f6:	df02      	svc	2
	event.curr.param = prepare_param->param;
   100f8:	68eb      	ldr	r3, [r5, #12]
	event.curr.abort_cb = abort_cb;
   100fa:	f8c7 8008 	str.w	r8, [r7, #8]
	event.curr.is_abort_cb = is_abort_cb;
   100fe:	e9c7 3900 	strd	r3, r9, [r7]
	err = prepare_cb(prepare_param);
   10102:	4628      	mov	r0, r5
   10104:	47b0      	blx	r6
   10106:	4604      	mov	r4, r0
	ret = preempt_ticker_stop();
   10108:	f7ff fcfa 	bl	fb00 <preempt_ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1010c:	f030 0302 	bics.w	r3, r0, #2
   10110:	d00c      	beq.n	1012c <lll_prepare_resolve+0xf4>
   10112:	4a16      	ldr	r2, [pc, #88]	; (1016c <lll_prepare_resolve+0x134>)
   10114:	4918      	ldr	r1, [pc, #96]	; (10178 <lll_prepare_resolve+0x140>)
   10116:	4817      	ldr	r0, [pc, #92]	; (10174 <lll_prepare_resolve+0x13c>)
   10118:	f240 23cb 	movw	r3, #715	; 0x2cb
   1011c:	f006 fa6d 	bl	165fa <printk>
   10120:	4040      	eors	r0, r0
   10122:	f380 8811 	msr	BASEPRI, r0
   10126:	f04f 0003 	mov.w	r0, #3
   1012a:	df02      	svc	2
		p = ull_prepare_dequeue_iter(&idx);
   1012c:	f10d 000f 	add.w	r0, sp, #15
   10130:	f7fd f9c4 	bl	d4bc <ull_prepare_dequeue_iter>
		if (!p) {
   10134:	4601      	mov	r1, r0
   10136:	2800      	cmp	r0, #0
   10138:	d0b6      	beq.n	100a8 <lll_prepare_resolve+0x70>
	} while (p->is_aborted || p->is_resume);
   1013a:	7f00      	ldrb	r0, [r0, #28]
   1013c:	f010 0003 	ands.w	r0, r0, #3
   10140:	d1f4      	bne.n	1012c <lll_prepare_resolve+0xf4>
	ret = preempt_ticker_start(NULL, p);
   10142:	f7ff fd1d 	bl	fb80 <preempt_ticker_start>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   10146:	f030 0302 	bics.w	r3, r0, #2
   1014a:	d0ad      	beq.n	100a8 <lll_prepare_resolve+0x70>
   1014c:	4a07      	ldr	r2, [pc, #28]	; (1016c <lll_prepare_resolve+0x134>)
   1014e:	490a      	ldr	r1, [pc, #40]	; (10178 <lll_prepare_resolve+0x140>)
   10150:	4808      	ldr	r0, [pc, #32]	; (10174 <lll_prepare_resolve+0x13c>)
   10152:	f44f 7336 	mov.w	r3, #728	; 0x2d8
   10156:	f006 fa50 	bl	165fa <printk>
   1015a:	4040      	eors	r0, r0
   1015c:	f380 8811 	msr	BASEPRI, r0
   10160:	f04f 0003 	mov.w	r0, #3
   10164:	df02      	svc	2
   10166:	e79f      	b.n	100a8 <lll_prepare_resolve+0x70>
   10168:	200025d4 	.word	0x200025d4
   1016c:	00020a93 	.word	0x00020a93
   10170:	00020b81 	.word	0x00020b81
   10174:	0002023c 	.word	0x0002023c
   10178:	000206f7 	.word	0x000206f7
   1017c:	00020baa 	.word	0x00020baa

00010180 <blocking_on>:

	k_sem_give(&clk_state->sem);
}

static int blocking_on(struct onoff_manager *mgr, uint32_t timeout)
{
   10180:	b570      	push	{r4, r5, r6, lr}
   10182:	4606      	mov	r6, r0
   10184:	b08a      	sub	sp, #40	; 0x28
   10186:	460d      	mov	r5, r1
	return z_impl_k_sem_init(sem, initial_count, limit);
   10188:	2201      	movs	r2, #1
   1018a:	2100      	movs	r1, #0
   1018c:	a804      	add	r0, sp, #16
   1018e:	f00e fa1a 	bl	1e5c6 <z_impl_k_sem_init>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
   10192:	4b0f      	ldr	r3, [pc, #60]	; (101d0 <blocking_on+0x50>)
   10194:	9301      	str	r3, [sp, #4]
   10196:	2400      	movs	r4, #0
   10198:	2303      	movs	r3, #3
	struct lll_clock_state state;
	int err;

	k_sem_init(&state.sem, 0, 1);
	sys_notify_init_callback(&state.cli.notify, clock_ready);
	err = onoff_request(mgr, &state.cli);
   1019a:	4669      	mov	r1, sp
   1019c:	4630      	mov	r0, r6
   1019e:	9403      	str	r4, [sp, #12]
   101a0:	9302      	str	r3, [sp, #8]
   101a2:	f006 fa99 	bl	166d8 <onoff_request>
	if (err < 0) {
   101a6:	2800      	cmp	r0, #0
   101a8:	db10      	blt.n	101cc <blocking_on+0x4c>
   101aa:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   101ae:	4621      	mov	r1, r4
   101b0:	f240 30e7 	movw	r0, #999	; 0x3e7
   101b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   101b8:	2300      	movs	r3, #0
   101ba:	fbe5 0106 	umlal	r0, r1, r5, r6
   101be:	f7f0 fbfd 	bl	9bc <__aeabi_uldivmod>
   101c2:	4602      	mov	r2, r0
   101c4:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   101c6:	a804      	add	r0, sp, #16
   101c8:	f005 fa9c 	bl	15704 <z_impl_k_sem_take>
		return err;
	}

	return k_sem_take(&state.sem, K_MSEC(timeout));
}
   101cc:	b00a      	add	sp, #40	; 0x28
   101ce:	bd70      	pop	{r4, r5, r6, pc}
   101d0:	0001c95b 	.word	0x0001c95b

000101d4 <lll_clock_init>:

int lll_clock_init(void)
{
   101d4:	b508      	push	{r3, lr}
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   101d6:	2001      	movs	r0, #1
   101d8:	f002 f996 	bl	12508 <z_nrf_clock_control_get_onoff>
	*notify = (struct sys_notify){
   101dc:	4904      	ldr	r1, [pc, #16]	; (101f0 <lll_clock_init+0x1c>)
   101de:	2300      	movs	r3, #0
   101e0:	604b      	str	r3, [r1, #4]
   101e2:	60cb      	str	r3, [r1, #12]
   101e4:	2301      	movs	r3, #1
   101e6:	608b      	str	r3, [r1, #8]

	sys_notify_init_spinwait(&lf_cli.notify);

	return onoff_request(mgr, &lf_cli);
}
   101e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return onoff_request(mgr, &lf_cli);
   101ec:	f006 ba74 	b.w	166d8 <onoff_request>
   101f0:	200025f0 	.word	0x200025f0

000101f4 <lll_clock_wait>:
{
	struct onoff_manager *mgr;
	static bool done;
	int err;

	if (done) {
   101f4:	4b0c      	ldr	r3, [pc, #48]	; (10228 <lll_clock_wait+0x34>)
   101f6:	781a      	ldrb	r2, [r3, #0]
{
   101f8:	b510      	push	{r4, lr}
	if (done) {
   101fa:	b10a      	cbz	r2, 10200 <lll_clock_wait+0xc>
		return 0;
   101fc:	2000      	movs	r0, #0
	if (err != ONOFF_STATE_ON) {
		return -EIO;
	}

	return 0;
}
   101fe:	bd10      	pop	{r4, pc}
	done = true;
   10200:	2001      	movs	r0, #1
   10202:	7018      	strb	r0, [r3, #0]
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   10204:	f002 f980 	bl	12508 <z_nrf_clock_control_get_onoff>
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   10208:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   1020c:	4604      	mov	r4, r0
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   1020e:	f7ff ffb7 	bl	10180 <blocking_on>
	if (err) {
   10212:	2800      	cmp	r0, #0
   10214:	d1f3      	bne.n	101fe <lll_clock_wait+0xa>
	err = onoff_release(mgr);
   10216:	4620      	mov	r0, r4
   10218:	f006 faa7 	bl	1676a <onoff_release>
	if (err != ONOFF_STATE_ON) {
   1021c:	2802      	cmp	r0, #2
   1021e:	d0ed      	beq.n	101fc <lll_clock_wait+0x8>
		return -EIO;
   10220:	f06f 0004 	mvn.w	r0, #4
   10224:	e7eb      	b.n	101fe <lll_clock_wait+0xa>
   10226:	bf00      	nop
   10228:	20002b76 	.word	0x20002b76

0001022c <lll_hfclock_on>:

int lll_hfclock_on(void)
{
   1022c:	b508      	push	{r3, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1022e:	4b09      	ldr	r3, [pc, #36]	; (10254 <lll_hfclock_on+0x28>)
   10230:	f3bf 8f5b 	dmb	ish
   10234:	e853 2f00 	ldrex	r2, [r3]
   10238:	1c51      	adds	r1, r2, #1
   1023a:	e843 1000 	strex	r0, r1, [r3]
   1023e:	2800      	cmp	r0, #0
   10240:	d1f8      	bne.n	10234 <lll_hfclock_on+0x8>
   10242:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&hf_refcnt) > 0) {
   10246:	2a00      	cmp	r2, #0
   10248:	dc01      	bgt.n	1024e <lll_hfclock_on+0x22>
		return 0;
	}

	z_nrf_clock_bt_ctlr_hf_request();
   1024a:	f002 f965 	bl	12518 <z_nrf_clock_bt_ctlr_hf_request>
	DEBUG_RADIO_XTAL(1);

	return 0;
}
   1024e:	2000      	movs	r0, #0
   10250:	bd08      	pop	{r3, pc}
   10252:	bf00      	nop
   10254:	200025ec 	.word	0x200025ec

00010258 <lll_hfclock_off>:

	return err;
}

int lll_hfclock_off(void)
{
   10258:	b508      	push	{r3, lr}
	if (hf_refcnt < 1) {
   1025a:	4b0c      	ldr	r3, [pc, #48]	; (1028c <lll_hfclock_off+0x34>)
   1025c:	681a      	ldr	r2, [r3, #0]
   1025e:	2a00      	cmp	r2, #0
   10260:	dd10      	ble.n	10284 <lll_hfclock_off+0x2c>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   10262:	f3bf 8f5b 	dmb	ish
   10266:	e853 2f00 	ldrex	r2, [r3]
   1026a:	1e51      	subs	r1, r2, #1
   1026c:	e843 1000 	strex	r0, r1, [r3]
   10270:	2800      	cmp	r0, #0
   10272:	d1f8      	bne.n	10266 <lll_hfclock_off+0xe>
   10274:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
	}

	if (atomic_dec(&hf_refcnt) > 1) {
   10278:	2a01      	cmp	r2, #1
   1027a:	dc01      	bgt.n	10280 <lll_hfclock_off+0x28>
		return 0;
	}

	z_nrf_clock_bt_ctlr_hf_release();
   1027c:	f002 f962 	bl	12544 <z_nrf_clock_bt_ctlr_hf_release>
		return 0;
   10280:	2000      	movs	r0, #0
   10282:	e001      	b.n	10288 <lll_hfclock_off+0x30>
		return -EALREADY;
   10284:	f06f 0077 	mvn.w	r0, #119	; 0x77
	DEBUG_RADIO_XTAL(0);

	return 0;
}
   10288:	bd08      	pop	{r3, pc}
   1028a:	bf00      	nop
   1028c:	200025ec 	.word	0x200025ec

00010290 <lll_clock_ppm_get>:
}

uint32_t lll_clock_ppm_get(uint8_t sca)
{
	return sca_ppm_lut[sca];
}
   10290:	4b01      	ldr	r3, [pc, #4]	; (10298 <lll_clock_ppm_get+0x8>)
   10292:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   10296:	4770      	bx	lr
   10298:	0001fc4c 	.word	0x0001fc4c

0001029c <isr_tx>:

	lll_done(param);
}

static void isr_tx(void *param)
{
   1029c:	b538      	push	{r3, r4, r5, lr}
   1029e:	4605      	mov	r5, r0
		lll_prof_latency_capture();
		node_rx_prof = lll_prof_reserve();
	}

	/* Clear radio tx status and events */
	lll_isr_tx_status_reset();
   102a0:	f00c fb35 	bl	1c90e <lll_isr_tx_status_reset>

	/* setup tIFS switching */
	radio_tmr_tifs_set(EVENT_IFS_US);
   102a4:	2096      	movs	r0, #150	; 0x96
   102a6:	f001 fd23 	bl	11cf0 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(phy_p, 0, phy_p, phy_flags);
   102aa:	2300      	movs	r3, #0
   102ac:	4618      	mov	r0, r3
   102ae:	461a      	mov	r2, r3
   102b0:	4619      	mov	r1, r3
   102b2:	f001 fc8b 	bl	11bcc <radio_switch_complete_and_tx>

	/* setup Rx buffer */
	node_rx = ull_pdu_rx_alloc_peek(1);
   102b6:	2001      	movs	r0, #1
   102b8:	f7fd f870 	bl	d39c <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   102bc:	4604      	mov	r4, r0
   102be:	b960      	cbnz	r0, 102da <isr_tx+0x3e>
   102c0:	4a1c      	ldr	r2, [pc, #112]	; (10334 <isr_tx+0x98>)
   102c2:	491d      	ldr	r1, [pc, #116]	; (10338 <isr_tx+0x9c>)
   102c4:	481d      	ldr	r0, [pc, #116]	; (1033c <isr_tx+0xa0>)
   102c6:	f240 4341 	movw	r3, #1089	; 0x441
   102ca:	f006 f996 	bl	165fa <printk>
   102ce:	4040      	eors	r0, r0
   102d0:	f380 8811 	msr	BASEPRI, r0
   102d4:	f04f 0003 	mov.w	r0, #3
   102d8:	df02      	svc	2
	radio_pkt_rx_set(node_rx->pdu);
   102da:	f104 001c 	add.w	r0, r4, #28
   102de:	f001 fb7f 	bl	119e0 <radio_pkt_rx_set>

	/* assert if radio packet ptr is not set and radio started rx */
	LL_ASSERT(!radio_is_ready());
   102e2:	f001 fbb3 	bl	11a4c <radio_is_ready>
   102e6:	b160      	cbz	r0, 10302 <isr_tx+0x66>
   102e8:	4a12      	ldr	r2, [pc, #72]	; (10334 <isr_tx+0x98>)
   102ea:	4915      	ldr	r1, [pc, #84]	; (10340 <isr_tx+0xa4>)
   102ec:	4813      	ldr	r0, [pc, #76]	; (1033c <isr_tx+0xa0>)
   102ee:	f240 4345 	movw	r3, #1093	; 0x445
   102f2:	f006 f982 	bl	165fa <printk>
   102f6:	4040      	eors	r0, r0
   102f8:	f380 8811 	msr	BASEPRI, r0
   102fc:	f04f 0003 	mov.w	r0, #3
   10300:	df02      	svc	2

	if (IS_ENABLED(CONFIG_BT_CTLR_PROFILE_ISR)) {
		lll_prof_cputime_capture();
	}

	radio_isr_set(isr_rx, param);
   10302:	4629      	mov	r1, r5
   10304:	480f      	ldr	r0, [pc, #60]	; (10344 <isr_tx+0xa8>)
   10306:	f001 fabb 	bl	11880 <radio_isr_set>
		radio_ar_configure(count, irks, 0);
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */

	/* +/- 2us active clock jitter, +1 us hcto compensation */
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1030a:	f001 fdd9 	bl	11ec0 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   1030e:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   10310:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   10312:	4608      	mov	r0, r1
   10314:	f00c fd2c 	bl	1cd70 <radio_rx_chain_delay_get>
	hcto += addr_us_get(phy_p);
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   10318:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   1031a:	4605      	mov	r5, r0
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   1031c:	4608      	mov	r0, r1
   1031e:	f00c fd23 	bl	1cd68 <radio_tx_chain_delay_get>
   10322:	442c      	add	r4, r5
   10324:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   10326:	1a20      	subs	r0, r4, r0
   10328:	f001 fd84 	bl	11e34 <radio_tmr_hcto_configure>
		/* NOTE: as scratch packet is used to receive, it is safe to
		 * generate profile event using rx nodes.
		 */
		lll_prof_reserve_send(node_rx_prof);
	}
}
   1032c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_tmr_end_capture();
   10330:	f001 bdb8 	b.w	11ea4 <radio_tmr_end_capture>
   10334:	00020bd3 	.word	0x00020bd3
   10338:	00020c1d 	.word	0x00020c1d
   1033c:	0002023c 	.word	0x0002023c
   10340:	00020c25 	.word	0x00020c25
   10344:	00010809 	.word	0x00010809

00010348 <is_abort_cb>:
	if (next != curr) {
   10348:	4281      	cmp	r1, r0
{
   1034a:	b508      	push	{r3, lr}
	if (next != curr) {
   1034c:	d018      	beq.n	10380 <is_abort_cb+0x38>
		} else if (lll->is_hdcd) {
   1034e:	7a0b      	ldrb	r3, [r1, #8]
   10350:	07db      	lsls	r3, r3, #31
   10352:	d522      	bpl.n	1039a <is_abort_cb+0x52>
			*resume_cb = resume_prepare_cb;
   10354:	4b12      	ldr	r3, [pc, #72]	; (103a0 <is_abort_cb+0x58>)
   10356:	6013      	str	r3, [r2, #0]
			err = lll_hfclock_on();
   10358:	f7ff ff68 	bl	1022c <lll_hfclock_on>
			LL_ASSERT(err >= 0);
   1035c:	2800      	cmp	r0, #0
   1035e:	da0c      	bge.n	1037a <is_abort_cb+0x32>
   10360:	4a10      	ldr	r2, [pc, #64]	; (103a4 <is_abort_cb+0x5c>)
   10362:	4911      	ldr	r1, [pc, #68]	; (103a8 <is_abort_cb+0x60>)
   10364:	4811      	ldr	r0, [pc, #68]	; (103ac <is_abort_cb+0x64>)
   10366:	f240 33fa 	movw	r3, #1018	; 0x3fa
   1036a:	f006 f946 	bl	165fa <printk>
   1036e:	4040      	eors	r0, r0
   10370:	f380 8811 	msr	BASEPRI, r0
   10374:	f04f 0003 	mov.w	r0, #3
   10378:	df02      	svc	2
   1037a:	f06f 000a 	mvn.w	r0, #10
   1037e:	e00b      	b.n	10398 <is_abort_cb+0x50>
	return (void *)lll->adv_data.pdu[lll->adv_data.first];
   10380:	7b0b      	ldrb	r3, [r1, #12]
   10382:	eb01 0183 	add.w	r1, r1, r3, lsl #2
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   10386:	690b      	ldr	r3, [r1, #16]
   10388:	781b      	ldrb	r3, [r3, #0]
   1038a:	f003 030f 	and.w	r3, r3, #15
		return 0;
   1038e:	2b01      	cmp	r3, #1
   10390:	bf14      	ite	ne
   10392:	f06f 008b 	mvnne.w	r0, #139	; 0x8b
   10396:	2000      	moveq	r0, #0
}
   10398:	bd08      	pop	{r3, pc}
			return -ECANCELED;
   1039a:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   1039e:	e7fb      	b.n	10398 <is_abort_cb+0x50>
   103a0:	0001ca11 	.word	0x0001ca11
   103a4:	00020bd3 	.word	0x00020bd3
   103a8:	00020ba1 	.word	0x00020ba1
   103ac:	0002023c 	.word	0x0002023c

000103b0 <abort_cb>:
{
   103b0:	b510      	push	{r4, lr}
   103b2:	460c      	mov	r4, r1
	if (!prepare_param) {
   103b4:	b930      	cbnz	r0, 103c4 <abort_cb+0x14>
		radio_isr_set(isr_abort, param);
   103b6:	480e      	ldr	r0, [pc, #56]	; (103f0 <abort_cb+0x40>)
   103b8:	f001 fa62 	bl	11880 <radio_isr_set>
}
   103bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   103c0:	f001 bb26 	b.w	11a10 <radio_disable>
	err = lll_hfclock_off();
   103c4:	f7ff ff48 	bl	10258 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   103c8:	2800      	cmp	r0, #0
   103ca:	da0c      	bge.n	103e6 <abort_cb+0x36>
   103cc:	4a09      	ldr	r2, [pc, #36]	; (103f4 <abort_cb+0x44>)
   103ce:	490a      	ldr	r1, [pc, #40]	; (103f8 <abort_cb+0x48>)
   103d0:	480a      	ldr	r0, [pc, #40]	; (103fc <abort_cb+0x4c>)
   103d2:	f44f 6384 	mov.w	r3, #1056	; 0x420
   103d6:	f006 f910 	bl	165fa <printk>
   103da:	4040      	eors	r0, r0
   103dc:	f380 8811 	msr	BASEPRI, r0
   103e0:	f04f 0003 	mov.w	r0, #3
   103e4:	df02      	svc	2
	lll_done(param);
   103e6:	4620      	mov	r0, r4
}
   103e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   103ec:	f7ff bd44 	b.w	fe78 <lll_done>
   103f0:	0001c967 	.word	0x0001c967
   103f4:	00020bd3 	.word	0x00020bd3
   103f8:	00020ba1 	.word	0x00020ba1
   103fc:	0002023c 	.word	0x0002023c

00010400 <lll_adv_init>:
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   10400:	4b08      	ldr	r3, [pc, #32]	; (10424 <lll_adv_init+0x24>)
   10402:	2204      	movs	r2, #4
{
   10404:	b510      	push	{r4, lr}
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   10406:	1898      	adds	r0, r3, r2
   10408:	2128      	movs	r1, #40	; 0x28
   1040a:	f00b fb3a 	bl	1ba82 <mem_init>
	MFIFO_INIT(pdu_free);
   1040e:	4b06      	ldr	r3, [pc, #24]	; (10428 <lll_adv_init+0x28>)
   10410:	2400      	movs	r4, #0
   10412:	805c      	strh	r4, [r3, #2]
	return z_impl_k_sem_init(sem, initial_count, limit);
   10414:	2202      	movs	r2, #2
   10416:	4621      	mov	r1, r4
   10418:	4804      	ldr	r0, [pc, #16]	; (1042c <lll_adv_init+0x2c>)
   1041a:	f00e f8d4 	bl	1e5c6 <z_impl_k_sem_init>
}
   1041e:	4620      	mov	r0, r4
   10420:	bd10      	pop	{r4, pc}
   10422:	bf00      	nop
   10424:	20002600 	.word	0x20002600
   10428:	20000798 	.word	0x20000798
   1042c:	200026a4 	.word	0x200026a4

00010430 <lll_adv_data_init>:
{
   10430:	b510      	push	{r4, lr}
   10432:	4604      	mov	r4, r0
	p = mem_acquire(&mem_pdu.free);
   10434:	4805      	ldr	r0, [pc, #20]	; (1044c <lll_adv_data_init+0x1c>)
   10436:	f00b fb4c 	bl	1bad2 <mem_acquire>
	if (!p) {
   1043a:	4603      	mov	r3, r0
   1043c:	b118      	cbz	r0, 10446 <lll_adv_data_init+0x16>
	p->len = 0U;
   1043e:	2000      	movs	r0, #0
   10440:	7058      	strb	r0, [r3, #1]
	pdu->pdu[0] = (void *)p;
   10442:	6063      	str	r3, [r4, #4]
}
   10444:	bd10      	pop	{r4, pc}
		return -ENOMEM;
   10446:	f06f 000b 	mvn.w	r0, #11
   1044a:	e7fb      	b.n	10444 <lll_adv_data_init+0x14>
   1044c:	20002600 	.word	0x20002600

00010450 <lll_adv_pdu_alloc_pdu_adv>:
{
   10450:	b538      	push	{r3, r4, r5, lr}
	p = MFIFO_DEQUEUE_PEEK(pdu_free);
   10452:	4c33      	ldr	r4, [pc, #204]	; (10520 <lll_adv_pdu_alloc_pdu_adv+0xd0>)
   10454:	78a2      	ldrb	r2, [r4, #2]
	if (first == last) {
   10456:	78e1      	ldrb	r1, [r4, #3]
   10458:	7823      	ldrb	r3, [r4, #0]
   1045a:	4291      	cmp	r1, r2
   1045c:	d023      	beq.n	104a6 <lll_adv_pdu_alloc_pdu_adv+0x56>
	return *((void **)(fifo + first * size));
   1045e:	fb02 4303 	mla	r3, r2, r3, r4
   10462:	685d      	ldr	r5, [r3, #4]
	if (p) {
   10464:	b1fd      	cbz	r5, 104a6 <lll_adv_pdu_alloc_pdu_adv+0x56>
	return z_impl_k_sem_take(sem, timeout);
   10466:	482f      	ldr	r0, [pc, #188]	; (10524 <lll_adv_pdu_alloc_pdu_adv+0xd4>)
   10468:	2200      	movs	r2, #0
   1046a:	2300      	movs	r3, #0
   1046c:	f005 f94a 	bl	15704 <z_impl_k_sem_take>
		LL_ASSERT(!err);
   10470:	b160      	cbz	r0, 1048c <lll_adv_pdu_alloc_pdu_adv+0x3c>
   10472:	4a2d      	ldr	r2, [pc, #180]	; (10528 <lll_adv_pdu_alloc_pdu_adv+0xd8>)
   10474:	492d      	ldr	r1, [pc, #180]	; (1052c <lll_adv_pdu_alloc_pdu_adv+0xdc>)
   10476:	482e      	ldr	r0, [pc, #184]	; (10530 <lll_adv_pdu_alloc_pdu_adv+0xe0>)
   10478:	f240 1397 	movw	r3, #407	; 0x197
   1047c:	f006 f8bd 	bl	165fa <printk>
   10480:	4040      	eors	r0, r0
   10482:	f380 8811 	msr	BASEPRI, r0
   10486:	f04f 0003 	mov.w	r0, #3
   1048a:	df02      	svc	2
	uint8_t _first = *first; /* Copy read-index */
   1048c:	78a3      	ldrb	r3, [r4, #2]
	if (_first == last) {
   1048e:	78e1      	ldrb	r1, [r4, #3]
		MFIFO_DEQUEUE(pdu_free);
   10490:	7862      	ldrb	r2, [r4, #1]
   10492:	4299      	cmp	r1, r3
   10494:	d005      	beq.n	104a2 <lll_adv_pdu_alloc_pdu_adv+0x52>
	_first += 1U;
   10496:	3301      	adds	r3, #1
   10498:	b2db      	uxtb	r3, r3
		_first = 0U;
   1049a:	429a      	cmp	r2, r3
   1049c:	bf08      	it	eq
   1049e:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   104a0:	70a3      	strb	r3, [r4, #2]
}
   104a2:	4628      	mov	r0, r5
   104a4:	bd38      	pop	{r3, r4, r5, pc}
	p = mem_acquire(&mem_pdu.free);
   104a6:	4823      	ldr	r0, [pc, #140]	; (10534 <lll_adv_pdu_alloc_pdu_adv+0xe4>)
   104a8:	f00b fb13 	bl	1bad2 <mem_acquire>
	if (p) {
   104ac:	4605      	mov	r5, r0
   104ae:	2800      	cmp	r0, #0
   104b0:	d1f7      	bne.n	104a2 <lll_adv_pdu_alloc_pdu_adv+0x52>
   104b2:	481c      	ldr	r0, [pc, #112]	; (10524 <lll_adv_pdu_alloc_pdu_adv+0xd4>)
   104b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   104b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   104bc:	f005 f922 	bl	15704 <z_impl_k_sem_take>
	LL_ASSERT(!err);
   104c0:	b160      	cbz	r0, 104dc <lll_adv_pdu_alloc_pdu_adv+0x8c>
   104c2:	4a19      	ldr	r2, [pc, #100]	; (10528 <lll_adv_pdu_alloc_pdu_adv+0xd8>)
   104c4:	4919      	ldr	r1, [pc, #100]	; (1052c <lll_adv_pdu_alloc_pdu_adv+0xdc>)
   104c6:	481a      	ldr	r0, [pc, #104]	; (10530 <lll_adv_pdu_alloc_pdu_adv+0xe0>)
   104c8:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
   104cc:	f006 f895 	bl	165fa <printk>
   104d0:	4040      	eors	r0, r0
   104d2:	f380 8811 	msr	BASEPRI, r0
   104d6:	f04f 0003 	mov.w	r0, #3
   104da:	df02      	svc	2
	uint8_t _first = *first; /* Copy read-index */
   104dc:	78a3      	ldrb	r3, [r4, #2]
	if (_first == last) {
   104de:	78e0      	ldrb	r0, [r4, #3]
	p = MFIFO_DEQUEUE(pdu_free);
   104e0:	7822      	ldrb	r2, [r4, #0]
   104e2:	7861      	ldrb	r1, [r4, #1]
   104e4:	4298      	cmp	r0, r3
   104e6:	d10d      	bne.n	10504 <lll_adv_pdu_alloc_pdu_adv+0xb4>
	LL_ASSERT(p);
   104e8:	4a0f      	ldr	r2, [pc, #60]	; (10528 <lll_adv_pdu_alloc_pdu_adv+0xd8>)
   104ea:	4913      	ldr	r1, [pc, #76]	; (10538 <lll_adv_pdu_alloc_pdu_adv+0xe8>)
   104ec:	4810      	ldr	r0, [pc, #64]	; (10530 <lll_adv_pdu_alloc_pdu_adv+0xe0>)
   104ee:	f240 13ad 	movw	r3, #429	; 0x1ad
   104f2:	f006 f882 	bl	165fa <printk>
   104f6:	4040      	eors	r0, r0
   104f8:	f380 8811 	msr	BASEPRI, r0
   104fc:	f04f 0003 	mov.w	r0, #3
   10500:	df02      	svc	2
   10502:	e7ce      	b.n	104a2 <lll_adv_pdu_alloc_pdu_adv+0x52>
	mem = *((void **)(fifo + _first * size));
   10504:	fb03 4202 	mla	r2, r3, r2, r4
	_first += 1U;
   10508:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   1050a:	6852      	ldr	r2, [r2, #4]
	_first += 1U;
   1050c:	b2db      	uxtb	r3, r3
		_first = 0U;
   1050e:	4299      	cmp	r1, r3
   10510:	bf08      	it	eq
   10512:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   10514:	70a3      	strb	r3, [r4, #2]
   10516:	2a00      	cmp	r2, #0
   10518:	d0e6      	beq.n	104e8 <lll_adv_pdu_alloc_pdu_adv+0x98>
   1051a:	4615      	mov	r5, r2
   1051c:	e7c1      	b.n	104a2 <lll_adv_pdu_alloc_pdu_adv+0x52>
   1051e:	bf00      	nop
   10520:	20000798 	.word	0x20000798
   10524:	200026a4 	.word	0x200026a4
   10528:	00020bd3 	.word	0x00020bd3
   1052c:	0002057d 	.word	0x0002057d
   10530:	0002023c 	.word	0x0002023c
   10534:	20002600 	.word	0x20002600
   10538:	00020c37 	.word	0x00020c37

0001053c <lll_adv_pdu_latest_get>:
{
   1053c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	first = pdu->first;
   1053e:	7803      	ldrb	r3, [r0, #0]
	if (first != pdu->last) {
   10540:	7842      	ldrb	r2, [r0, #1]
   10542:	429a      	cmp	r2, r3
{
   10544:	4605      	mov	r5, r0
   10546:	460e      	mov	r6, r1
	first = pdu->first;
   10548:	b2dc      	uxtb	r4, r3
	if (first != pdu->last) {
   1054a:	d022      	beq.n	10592 <lll_adv_pdu_latest_get+0x56>
			if (!MFIFO_ENQUEUE_IDX_GET(pdu_free, &free_idx)) {
   1054c:	4a13      	ldr	r2, [pc, #76]	; (1059c <lll_adv_pdu_latest_get+0x60>)
   1054e:	eb00 0784 	add.w	r7, r0, r4, lsl #2
   10552:	78d0      	ldrb	r0, [r2, #3]
	if (last == count) {
   10554:	f892 e001 	ldrb.w	lr, [r2, #1]
   10558:	f892 c002 	ldrb.w	ip, [r2, #2]
		p = pdu->pdu[pdu_idx];
   1055c:	6879      	ldr	r1, [r7, #4]
	last = last + 1;
   1055e:	1c43      	adds	r3, r0, #1
   10560:	b2db      	uxtb	r3, r3
		last = 0U;
   10562:	459e      	cmp	lr, r3
   10564:	bf08      	it	eq
   10566:	2300      	moveq	r3, #0
	if (last == first) {
   10568:	459c      	cmp	ip, r3
   1056a:	d009      	beq.n	10580 <lll_adv_pdu_latest_get+0x44>
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   1056c:	f892 c000 	ldrb.w	ip, [r2]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   10570:	fb0c 2000 	mla	r0, ip, r0, r2
   10574:	6041      	str	r1, [r0, #4]
	*last = idx; /* Commit: Update write index */
   10576:	70d3      	strb	r3, [r2, #3]
	z_impl_k_sem_give(sem);
   10578:	4809      	ldr	r0, [pc, #36]	; (105a0 <lll_adv_pdu_latest_get+0x64>)
   1057a:	f005 f89d 	bl	156b8 <z_impl_k_sem_give>
			p = next;
   1057e:	2100      	movs	r1, #0
		first += 1U;
   10580:	3401      	adds	r4, #1
   10582:	b2e4      	uxtb	r4, r4
			first = 0U;
   10584:	2c02      	cmp	r4, #2
   10586:	bf08      	it	eq
   10588:	2400      	moveq	r4, #0
		*is_modified = 1U;
   1058a:	2301      	movs	r3, #1
		pdu->pdu[pdu_idx] = p;
   1058c:	6079      	str	r1, [r7, #4]
		pdu->first = first;
   1058e:	702c      	strb	r4, [r5, #0]
		*is_modified = 1U;
   10590:	7033      	strb	r3, [r6, #0]
	return (void *)pdu->pdu[first];
   10592:	eb05 0484 	add.w	r4, r5, r4, lsl #2
}
   10596:	6860      	ldr	r0, [r4, #4]
   10598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1059a:	bf00      	nop
   1059c:	20000798 	.word	0x20000798
   105a0:	200026a4 	.word	0x200026a4

000105a4 <chan_prepare.isra.0>:
{
	struct pdu_adv *pdu;
	uint8_t chan;
	uint8_t upd;

	chan = find_lsb_set(lll->chan_map_curr);
   105a4:	7a03      	ldrb	r3, [r0, #8]
   105a6:	f3c3 1302 	ubfx	r3, r3, #4, #3
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   105aa:	b537      	push	{r0, r1, r2, r4, r5, lr}
   105ac:	2b00      	cmp	r3, #0
   105ae:	4604      	mov	r4, r0
   105b0:	fa93 f0a3 	rbit	r0, r3
   105b4:	fab0 f080 	clz	r0, r0
   105b8:	bf08      	it	eq
   105ba:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
	LL_ASSERT(chan);
   105be:	1c45      	adds	r5, r0, #1
   105c0:	d10c      	bne.n	105dc <chan_prepare.isra.0+0x38>
   105c2:	4a30      	ldr	r2, [pc, #192]	; (10684 <chan_prepare.isra.0+0xe0>)
   105c4:	4930      	ldr	r1, [pc, #192]	; (10688 <chan_prepare.isra.0+0xe4>)
   105c6:	4831      	ldr	r0, [pc, #196]	; (1068c <chan_prepare.isra.0+0xe8>)
   105c8:	f240 5337 	movw	r3, #1335	; 0x537
   105cc:	f006 f815 	bl	165fa <printk>
   105d0:	4040      	eors	r0, r0
   105d2:	f380 8811 	msr	BASEPRI, r0
   105d6:	f04f 0003 	mov.w	r0, #3
   105da:	df02      	svc	2

	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   105dc:	7a23      	ldrb	r3, [r4, #8]
   105de:	f3c3 1102 	ubfx	r1, r3, #4, #3
   105e2:	1e4a      	subs	r2, r1, #1
   105e4:	400a      	ands	r2, r1
   105e6:	f362 1306 	bfi	r3, r2, #4, #3

	lll_chan_set(36 + chan);
   105ea:	f105 0024 	add.w	r0, r5, #36	; 0x24
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   105ee:	7223      	strb	r3, [r4, #8]
	lll_chan_set(36 + chan);
   105f0:	f7ff fc9e 	bl	ff30 <lll_chan_set>

	/* FIXME: get latest only when primary PDU without Aux PDUs */
	upd = 0U;
   105f4:	2300      	movs	r3, #0
#endif /* CONFIG_BT_CTLR_ADV_EXT_PDU_EXTRA_DATA_MEMORY */

static inline struct pdu_adv *lll_adv_data_latest_get(struct lll_adv *lll,
						      uint8_t *is_modified)
{
	return lll_adv_pdu_latest_get(&lll->adv_data, is_modified);
   105f6:	f10d 0107 	add.w	r1, sp, #7
   105fa:	f104 000c 	add.w	r0, r4, #12
   105fe:	f88d 3007 	strb.w	r3, [sp, #7]
   10602:	f7ff ff9b 	bl	1053c <lll_adv_pdu_latest_get>
	pdu = lll_adv_data_latest_get(lll, &upd);
	LL_ASSERT(pdu);
   10606:	4605      	mov	r5, r0
   10608:	b960      	cbnz	r0, 10624 <chan_prepare.isra.0+0x80>
   1060a:	4a1e      	ldr	r2, [pc, #120]	; (10684 <chan_prepare.isra.0+0xe0>)
   1060c:	4920      	ldr	r1, [pc, #128]	; (10690 <chan_prepare.isra.0+0xec>)
   1060e:	481f      	ldr	r0, [pc, #124]	; (1068c <chan_prepare.isra.0+0xe8>)
   10610:	f44f 63a8 	mov.w	r3, #1344	; 0x540
   10614:	f005 fff1 	bl	165fa <printk>
   10618:	4040      	eors	r0, r0
   1061a:	f380 8811 	msr	BASEPRI, r0
   1061e:	f04f 0003 	mov.w	r0, #3
   10622:	df02      	svc	2

	radio_pkt_tx_set(pdu);
   10624:	4628      	mov	r0, r5
   10626:	f001 f9e1 	bl	119ec <radio_pkt_tx_set>

	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   1062a:	782b      	ldrb	r3, [r5, #0]
   1062c:	f003 030f 	and.w	r3, r3, #15
   10630:	2b02      	cmp	r3, #2
   10632:	d01f      	beq.n	10674 <chan_prepare.isra.0+0xd0>
}

static inline struct pdu_adv *lll_adv_scan_rsp_latest_get(struct lll_adv *lll,
							  uint8_t *is_modified)
{
	return lll_adv_pdu_latest_get(&lll->scan_rsp, is_modified);
   10634:	f10d 0107 	add.w	r1, sp, #7
   10638:	f104 0018 	add.w	r0, r4, #24
   1063c:	f7ff ff7e 	bl	1053c <lll_adv_pdu_latest_get>
	    (!IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) ||
	     (pdu->type != PDU_ADV_TYPE_EXT_IND))) {
		struct pdu_adv *scan_pdu;

		scan_pdu = lll_adv_scan_rsp_latest_get(lll, &upd);
		LL_ASSERT(scan_pdu);
   10640:	b960      	cbnz	r0, 1065c <chan_prepare.isra.0+0xb8>
   10642:	4a10      	ldr	r2, [pc, #64]	; (10684 <chan_prepare.isra.0+0xe0>)
   10644:	4913      	ldr	r1, [pc, #76]	; (10694 <chan_prepare.isra.0+0xf0>)
   10646:	4811      	ldr	r0, [pc, #68]	; (1068c <chan_prepare.isra.0+0xe8>)
   10648:	f240 534a 	movw	r3, #1354	; 0x54a
   1064c:	f005 ffd5 	bl	165fa <printk>
   10650:	4040      	eors	r0, r0
   10652:	f380 8811 	msr	BASEPRI, r0
   10656:	f04f 0003 	mov.w	r0, #3
   1065a:	df02      	svc	2
#else
		ARG_UNUSED(scan_pdu);
		ARG_UNUSED(upd);
#endif /* !CONFIG_BT_CTLR_PRIVACY */

		radio_isr_set(isr_tx, lll);
   1065c:	480e      	ldr	r0, [pc, #56]	; (10698 <chan_prepare.isra.0+0xf4>)
   1065e:	4621      	mov	r1, r4
   10660:	f001 f90e 	bl	11880 <radio_isr_set>
		radio_tmr_tifs_set(EVENT_IFS_US);
   10664:	2096      	movs	r0, #150	; 0x96
   10666:	f001 fb43 	bl	11cf0 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   1066a:	2000      	movs	r0, #0
   1066c:	f001 fa9a 	bl	11ba4 <radio_switch_complete_and_rx>
		radio_isr_set(isr_done, lll);
		radio_switch_complete_and_disable();
	}

	return pdu;
}
   10670:	b003      	add	sp, #12
   10672:	bd30      	pop	{r4, r5, pc}
		radio_isr_set(isr_done, lll);
   10674:	4809      	ldr	r0, [pc, #36]	; (1069c <chan_prepare.isra.0+0xf8>)
   10676:	4621      	mov	r1, r4
   10678:	f001 f902 	bl	11880 <radio_isr_set>
		radio_switch_complete_and_disable();
   1067c:	f001 faba 	bl	11bf4 <radio_switch_complete_and_disable>
	return pdu;
   10680:	e7f6      	b.n	10670 <chan_prepare.isra.0+0xcc>
   10682:	bf00      	nop
   10684:	00020bd3 	.word	0x00020bd3
   10688:	00020c39 	.word	0x00020c39
   1068c:	0002023c 	.word	0x0002023c
   10690:	00020c43 	.word	0x00020c43
   10694:	00020c3e 	.word	0x00020c3e
   10698:	0001029d 	.word	0x0001029d
   1069c:	0001c9c1 	.word	0x0001c9c1

000106a0 <prepare_cb>:
{
   106a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	lll = p->param;
   106a2:	68c4      	ldr	r4, [r0, #12]
	if (unlikely(lll->conn &&
   106a4:	6863      	ldr	r3, [r4, #4]
{
   106a6:	4605      	mov	r5, r0
	if (unlikely(lll->conn &&
   106a8:	b163      	cbz	r3, 106c4 <prepare_cb+0x24>
   106aa:	f893 3020 	ldrb.w	r3, [r3, #32]
   106ae:	079a      	lsls	r2, r3, #30
   106b0:	d008      	beq.n	106c4 <prepare_cb+0x24>
		radio_isr_set(lll_isr_early_abort, lll);
   106b2:	4831      	ldr	r0, [pc, #196]	; (10778 <prepare_cb+0xd8>)
   106b4:	4621      	mov	r1, r4
		radio_isr_set(isr_abort, lll);
   106b6:	f001 f8e3 	bl	11880 <radio_isr_set>
		radio_disable();
   106ba:	f001 f9a9 	bl	11a10 <radio_disable>
}
   106be:	2000      	movs	r0, #0
   106c0:	b003      	add	sp, #12
   106c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	radio_reset();
   106c4:	f001 f8fc 	bl	118c0 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   106c8:	2000      	movs	r0, #0
   106ca:	f001 f92d 	bl	11928 <radio_tx_power_set>
	radio_phy_set(0, 0);
   106ce:	2100      	movs	r1, #0
   106d0:	4608      	mov	r0, r1
   106d2:	f001 f919 	bl	11908 <radio_phy_set>
	radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, PDU_AC_LEG_PAYLOAD_SIZE_MAX,
   106d6:	2200      	movs	r2, #0
   106d8:	2125      	movs	r1, #37	; 0x25
   106da:	2008      	movs	r0, #8
   106dc:	f001 f95a 	bl	11994 <radio_pkt_configure>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   106e0:	4b26      	ldr	r3, [pc, #152]	; (1077c <prepare_cb+0xdc>)
   106e2:	9301      	str	r3, [sp, #4]
	radio_aa_set((uint8_t *)&aa);
   106e4:	a801      	add	r0, sp, #4
   106e6:	f001 f93d 	bl	11964 <radio_aa_set>
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   106ea:	4925      	ldr	r1, [pc, #148]	; (10780 <prepare_cb+0xe0>)
   106ec:	f240 605b 	movw	r0, #1627	; 0x65b
   106f0:	f001 f9ca 	bl	11a88 <radio_crc_configure>
	lll->chan_map_curr = lll->chan_map;
   106f4:	7a23      	ldrb	r3, [r4, #8]
   106f6:	f3c3 0242 	ubfx	r2, r3, #1, #3
   106fa:	f362 1306 	bfi	r3, r2, #4, #3
   106fe:	7223      	strb	r3, [r4, #8]
	pdu = chan_prepare(lll);
   10700:	4620      	mov	r0, r4
   10702:	f7ff ff4f 	bl	105a4 <chan_prepare.isra.0>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER_ACCEPT_LIST) && lll->filter_policy) {
   10706:	7a63      	ldrb	r3, [r4, #9]
   10708:	079b      	lsls	r3, r3, #30
   1070a:	d007      	beq.n	1071c <prepare_cb+0x7c>
		struct lll_filter *fal = ull_filter_lll_get(true);
   1070c:	2001      	movs	r0, #1
   1070e:	f7ff f913 	bl	f938 <ull_filter_lll_get>
		radio_filter_configure(fal->enable_bitmask,
   10712:	7841      	ldrb	r1, [r0, #1]
   10714:	1c82      	adds	r2, r0, #2
   10716:	7800      	ldrb	r0, [r0, #0]
   10718:	f001 fa9c 	bl	11c54 <radio_filter_configure>
	ull = HDR_LLL2ULL(lll);
   1071c:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   1071e:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   10720:	4638      	mov	r0, r7
   10722:	f00c f8d5 	bl	1c8d0 <lll_event_offset_get>
   10726:	4406      	add	r6, r0
	start_us = radio_tmr_start(1, ticks_at_start, remainder);
   10728:	686a      	ldr	r2, [r5, #4]
   1072a:	f106 0109 	add.w	r1, r6, #9
   1072e:	2001      	movs	r0, #1
   10730:	f001 faea 	bl	11d08 <radio_tmr_start>
	radio_tmr_end_capture();
   10734:	f001 fbb6 	bl	11ea4 <radio_tmr_end_capture>
				   ull_adv_lll_handle_get(lll)),
   10738:	4620      	mov	r0, r4
   1073a:	f7fd fc53 	bl	dfe4 <ull_adv_lll_handle_get>
	if (lll_preempt_calc(ull, (TICKER_ID_ADV_BASE +
   1073e:	1c81      	adds	r1, r0, #2
   10740:	4632      	mov	r2, r6
   10742:	b2c9      	uxtb	r1, r1
   10744:	4638      	mov	r0, r7
   10746:	f00c f8d1 	bl	1c8ec <lll_preempt_calc>
   1074a:	b110      	cbz	r0, 10752 <prepare_cb+0xb2>
		radio_isr_set(isr_abort, lll);
   1074c:	480d      	ldr	r0, [pc, #52]	; (10784 <prepare_cb+0xe4>)
   1074e:	4621      	mov	r1, r4
   10750:	e7b1      	b.n	106b6 <prepare_cb+0x16>
		ret = lll_prepare_done(lll);
   10752:	4620      	mov	r0, r4
   10754:	f00c f8b7 	bl	1c8c6 <lll_prepare_done>
		LL_ASSERT(!ret);
   10758:	2800      	cmp	r0, #0
   1075a:	d0b0      	beq.n	106be <prepare_cb+0x1e>
   1075c:	4a0a      	ldr	r2, [pc, #40]	; (10788 <prepare_cb+0xe8>)
   1075e:	490b      	ldr	r1, [pc, #44]	; (1078c <prepare_cb+0xec>)
   10760:	480b      	ldr	r0, [pc, #44]	; (10790 <prepare_cb+0xf0>)
   10762:	f240 33d1 	movw	r3, #977	; 0x3d1
   10766:	f005 ff48 	bl	165fa <printk>
   1076a:	4040      	eors	r0, r0
   1076c:	f380 8811 	msr	BASEPRI, r0
   10770:	f04f 0003 	mov.w	r0, #3
   10774:	df02      	svc	2
   10776:	e7a2      	b.n	106be <prepare_cb+0x1e>
   10778:	0000ffe9 	.word	0x0000ffe9
   1077c:	8e89bed6 	.word	0x8e89bed6
   10780:	00555555 	.word	0x00555555
   10784:	0001c967 	.word	0x0001c967
   10788:	00020bd3 	.word	0x00020bd3
   1078c:	00020608 	.word	0x00020608
   10790:	0002023c 	.word	0x0002023c

00010794 <lll_adv_prepare>:
{
   10794:	b513      	push	{r0, r1, r4, lr}
   10796:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   10798:	f7ff fd48 	bl	1022c <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   1079c:	2800      	cmp	r0, #0
   1079e:	da0c      	bge.n	107ba <lll_adv_prepare+0x26>
   107a0:	4a12      	ldr	r2, [pc, #72]	; (107ec <lll_adv_prepare+0x58>)
   107a2:	4913      	ldr	r1, [pc, #76]	; (107f0 <lll_adv_prepare+0x5c>)
   107a4:	4813      	ldr	r0, [pc, #76]	; (107f4 <lll_adv_prepare+0x60>)
   107a6:	f240 239a 	movw	r3, #666	; 0x29a
   107aa:	f005 ff26 	bl	165fa <printk>
   107ae:	4040      	eors	r0, r0
   107b0:	f380 8811 	msr	BASEPRI, r0
   107b4:	f04f 0003 	mov.w	r0, #3
   107b8:	df02      	svc	2
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   107ba:	4a0f      	ldr	r2, [pc, #60]	; (107f8 <lll_adv_prepare+0x64>)
   107bc:	490f      	ldr	r1, [pc, #60]	; (107fc <lll_adv_prepare+0x68>)
   107be:	4810      	ldr	r0, [pc, #64]	; (10800 <lll_adv_prepare+0x6c>)
   107c0:	9400      	str	r4, [sp, #0]
   107c2:	2300      	movs	r3, #0
   107c4:	f00b fd7f 	bl	1c2c6 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   107c8:	b170      	cbz	r0, 107e8 <lll_adv_prepare+0x54>
   107ca:	3077      	adds	r0, #119	; 0x77
   107cc:	d00c      	beq.n	107e8 <lll_adv_prepare+0x54>
   107ce:	4a07      	ldr	r2, [pc, #28]	; (107ec <lll_adv_prepare+0x58>)
   107d0:	490c      	ldr	r1, [pc, #48]	; (10804 <lll_adv_prepare+0x70>)
   107d2:	4808      	ldr	r0, [pc, #32]	; (107f4 <lll_adv_prepare+0x60>)
   107d4:	f240 239d 	movw	r3, #669	; 0x29d
   107d8:	f005 ff0f 	bl	165fa <printk>
   107dc:	4040      	eors	r0, r0
   107de:	f380 8811 	msr	BASEPRI, r0
   107e2:	f04f 0003 	mov.w	r0, #3
   107e6:	df02      	svc	2
}
   107e8:	b002      	add	sp, #8
   107ea:	bd10      	pop	{r4, pc}
   107ec:	00020bd3 	.word	0x00020bd3
   107f0:	00020ba1 	.word	0x00020ba1
   107f4:	0002023c 	.word	0x0002023c
   107f8:	000106a1 	.word	0x000106a1
   107fc:	000103b1 	.word	0x000103b1
   10800:	00010349 	.word	0x00010349
   10804:	00020c47 	.word	0x00020c47

00010808 <isr_rx>:
{
   10808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1080c:	b087      	sub	sp, #28
   1080e:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   10810:	f001 f926 	bl	11a60 <radio_is_done>
	if (trx_done) {
   10814:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
   10818:	d074      	beq.n	10904 <isr_rx+0xfc>
		crc_ok = radio_crc_is_valid();
   1081a:	f001 f941 	bl	11aa0 <radio_crc_is_valid>
   1081e:	b2c6      	uxtb	r6, r0
		devmatch_ok = radio_filter_has_match();
   10820:	f001 fa46 	bl	11cb0 <radio_filter_has_match>
   10824:	fa5f f880 	uxtb.w	r8, r0
		devmatch_id = radio_filter_match_get();
   10828:	f001 fa4c 	bl	11cc4 <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
   1082c:	f001 fb66 	bl	11efc <radio_ar_has_match>
		irkmatch_id = radio_ar_match_get();
   10830:	f001 fb4c 	bl	11ecc <radio_ar_match_get>
		rssi_ready = radio_rssi_is_ready();
   10834:	f001 fa04 	bl	11c40 <radio_rssi_is_ready>
	lll_isr_status_reset();
   10838:	f00c f879 	bl	1c92e <lll_isr_status_reset>
	if (!trx_done) {
   1083c:	2d00      	cmp	r5, #0
   1083e:	f000 80bf 	beq.w	109c0 <isr_rx+0x1b8>
	if (crc_ok) {
   10842:	2e00      	cmp	r6, #0
   10844:	f000 80bc 	beq.w	109c0 <isr_rx+0x1b8>
#if defined(CONFIG_BT_CTLR_PRIVACY)
	/* An IRK match implies address resolution enabled */
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
				    FILTER_IDX_NONE;
#else
	uint8_t rl_idx = FILTER_IDX_NONE;
   10848:	23ff      	movs	r3, #255	; 0xff
#endif /* CONFIG_BT_CTLR_PRIVACY */

	node_rx = ull_pdu_rx_alloc_peek(1);
   1084a:	2001      	movs	r0, #1
	uint8_t rl_idx = FILTER_IDX_NONE;
   1084c:	f88d 3017 	strb.w	r3, [sp, #23]
	node_rx = ull_pdu_rx_alloc_peek(1);
   10850:	f7fc fda4 	bl	d39c <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   10854:	4605      	mov	r5, r0
   10856:	b960      	cbnz	r0, 10872 <isr_rx+0x6a>
   10858:	4a5e      	ldr	r2, [pc, #376]	; (109d4 <isr_rx+0x1cc>)
   1085a:	495f      	ldr	r1, [pc, #380]	; (109d8 <isr_rx+0x1d0>)
   1085c:	485f      	ldr	r0, [pc, #380]	; (109dc <isr_rx+0x1d4>)
   1085e:	f240 537a 	movw	r3, #1402	; 0x57a
   10862:	f005 feca 	bl	165fa <printk>
   10866:	4040      	eors	r0, r0
   10868:	f380 8811 	msr	BASEPRI, r0
   1086c:	f04f 0003 	mov.w	r0, #3
   10870:	df02      	svc	2
   10872:	7b23      	ldrb	r3, [r4, #12]
   10874:	eb04 0383 	add.w	r3, r4, r3, lsl #2

	pdu_rx = (void *)node_rx->pdu;
   10878:	f105 0a1c 	add.w	sl, r5, #28
   1087c:	691e      	ldr	r6, [r3, #16]
	pdu_adv = lll_adv_data_curr_get(lll);

	addr = pdu_adv->adv_ind.addr;
   1087e:	46b1      	mov	r9, r6
	tx_addr = pdu_adv->tx_addr;
   10880:	f819 7b02 	ldrb.w	r7, [r9], #2

	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   10884:	f007 030f 	and.w	r3, r7, #15
   10888:	2b01      	cmp	r3, #1
	} else {
		tgt_addr = NULL;
	}
	rx_addr = pdu_adv->rx_addr;

	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   1088a:	7f2b      	ldrb	r3, [r5, #28]
   1088c:	f003 030f 	and.w	r3, r3, #15
		tgt_addr = pdu_adv->direct_ind.tgt_addr;
   10890:	bf0c      	ite	eq
   10892:	3608      	addeq	r6, #8
		tgt_addr = NULL;
   10894:	2600      	movne	r6, #0
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   10896:	2b03      	cmp	r3, #3
	tx_addr = pdu_adv->tx_addr;
   10898:	f3c7 1b80 	ubfx	fp, r7, #6, #1
	rx_addr = pdu_adv->rx_addr;
   1089c:	ea4f 17d7 	mov.w	r7, r7, lsr #7
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   108a0:	d133      	bne.n	1090a <isr_rx+0x102>
   108a2:	7f6b      	ldrb	r3, [r5, #29]
   108a4:	2b0c      	cmp	r3, #12
   108a6:	f040 808b 	bne.w	109c0 <isr_rx+0x1b8>
	    (pdu_rx->len == sizeof(struct pdu_adv_scan_req)) &&
   108aa:	2e00      	cmp	r6, #0
   108ac:	f040 8088 	bne.w	109c0 <isr_rx+0x1b8>
	    (tgt_addr == NULL) &&
	    lll_adv_scan_req_check(lll, pdu_rx, tx_addr, addr, devmatch_ok,
   108b0:	f10d 0317 	add.w	r3, sp, #23
   108b4:	e9cd 8300 	strd	r8, r3, [sp]
   108b8:	465a      	mov	r2, fp
   108ba:	464b      	mov	r3, r9
   108bc:	4651      	mov	r1, sl
   108be:	4620      	mov	r0, r4
   108c0:	f00c f8ba 	bl	1ca38 <lll_adv_scan_req_check>
	    (tgt_addr == NULL) &&
   108c4:	b308      	cbz	r0, 1090a <isr_rx+0x102>
				    &rl_idx)) {
		radio_isr_set(isr_done, lll);
   108c6:	4621      	mov	r1, r4
   108c8:	4845      	ldr	r0, [pc, #276]	; (109e0 <isr_rx+0x1d8>)
   108ca:	f000 ffd9 	bl	11880 <radio_isr_set>
		radio_switch_complete_and_disable();
   108ce:	f001 f991 	bl	11bf4 <radio_switch_complete_and_disable>
}

static inline struct pdu_adv *lll_adv_scan_rsp_curr_get(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.first];
   108d2:	7e20      	ldrb	r0, [r4, #24]
   108d4:	eb04 0480 	add.w	r4, r4, r0, lsl #2
		radio_pkt_tx_set(lll_adv_scan_rsp_curr_get(lll));
   108d8:	69e0      	ldr	r0, [r4, #28]
   108da:	f001 f887 	bl	119ec <radio_pkt_tx_set>

		/* assert if radio packet ptr is not set and radio started tx */
		LL_ASSERT(!radio_is_ready());
   108de:	f001 f8b5 	bl	11a4c <radio_is_ready>
   108e2:	b160      	cbz	r0, 108fe <isr_rx+0xf6>
   108e4:	4a3b      	ldr	r2, [pc, #236]	; (109d4 <isr_rx+0x1cc>)
   108e6:	493f      	ldr	r1, [pc, #252]	; (109e4 <isr_rx+0x1dc>)
   108e8:	483c      	ldr	r0, [pc, #240]	; (109dc <isr_rx+0x1d4>)
   108ea:	f240 5393 	movw	r3, #1427	; 0x593
   108ee:	f005 fe84 	bl	165fa <printk>
   108f2:	4040      	eors	r0, r0
   108f4:	f380 8811 	msr	BASEPRI, r0
   108f8:	f04f 0003 	mov.w	r0, #3
   108fc:	df02      	svc	2
}
   108fe:	b007      	add	sp, #28
   10900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0U;
   10904:	462e      	mov	r6, r5
   10906:	46a8      	mov	r8, r5
   10908:	e796      	b.n	10838 <isr_rx+0x30>
	 *       Under this race, peer central would get failed to establish
	 *       connection as the disconnect reason. This is an acceptable
	 *       outcome to keep the thread mode implementation simple when
	 *       disabling connectable advertising.
	 */
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   1090a:	7f2b      	ldrb	r3, [r5, #28]
   1090c:	f003 030f 	and.w	r3, r3, #15
   10910:	2b05      	cmp	r3, #5
   10912:	d155      	bne.n	109c0 <isr_rx+0x1b8>
   10914:	7f6b      	ldrb	r3, [r5, #29]
   10916:	2b22      	cmp	r3, #34	; 0x22
   10918:	d152      	bne.n	109c0 <isr_rx+0x1b8>
		   (pdu_rx->len == sizeof(struct pdu_adv_connect_ind)) &&
		   lll->conn && !lll->conn->periph.cancelled &&
   1091a:	6863      	ldr	r3, [r4, #4]
		   (pdu_rx->len == sizeof(struct pdu_adv_connect_ind)) &&
   1091c:	2b00      	cmp	r3, #0
   1091e:	d04f      	beq.n	109c0 <isr_rx+0x1b8>
		   lll->conn && !lll->conn->periph.cancelled &&
   10920:	f893 3020 	ldrb.w	r3, [r3, #32]
   10924:	079b      	lsls	r3, r3, #30
   10926:	d44b      	bmi.n	109c0 <isr_rx+0x1b8>
		   lll_adv_connect_ind_check(lll, pdu_rx, tx_addr, addr,
   10928:	f10d 0317 	add.w	r3, sp, #23
   1092c:	e9cd 8302 	strd	r8, r3, [sp, #8]
   10930:	e9cd 7600 	strd	r7, r6, [sp]
   10934:	464b      	mov	r3, r9
   10936:	465a      	mov	r2, fp
   10938:	4651      	mov	r1, sl
   1093a:	4620      	mov	r0, r4
   1093c:	f00c f894 	bl	1ca68 <lll_adv_connect_ind_check>
		   lll->conn && !lll->conn->periph.cancelled &&
   10940:	2800      	cmp	r0, #0
   10942:	d03d      	beq.n	109c0 <isr_rx+0x1b8>
		struct node_rx_pdu *rx;

		if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2)) {
			rx = ull_pdu_rx_alloc_peek(4);
		} else {
			rx = ull_pdu_rx_alloc_peek(3);
   10944:	2003      	movs	r0, #3
   10946:	f7fc fd29 	bl	d39c <ull_pdu_rx_alloc_peek>
		}

		if (!rx) {
   1094a:	2800      	cmp	r0, #0
   1094c:	d038      	beq.n	109c0 <isr_rx+0x1b8>
			return -ENOBUFS;
		}

		radio_isr_set(isr_abort, lll);
   1094e:	4826      	ldr	r0, [pc, #152]	; (109e8 <isr_rx+0x1e0>)
   10950:	4621      	mov	r1, r4
   10952:	f000 ff95 	bl	11880 <radio_isr_set>
		radio_disable();
   10956:	f001 f85b 	bl	11a10 <radio_disable>

		/* assert if radio started tx */
		LL_ASSERT(!radio_is_ready());
   1095a:	f001 f877 	bl	11a4c <radio_is_ready>
   1095e:	b160      	cbz	r0, 1097a <isr_rx+0x172>
   10960:	4a1c      	ldr	r2, [pc, #112]	; (109d4 <isr_rx+0x1cc>)
   10962:	4920      	ldr	r1, [pc, #128]	; (109e4 <isr_rx+0x1dc>)
   10964:	481d      	ldr	r0, [pc, #116]	; (109dc <isr_rx+0x1d4>)
   10966:	f240 53da 	movw	r3, #1498	; 0x5da
   1096a:	f005 fe46 	bl	165fa <printk>
   1096e:	4040      	eors	r0, r0
   10970:	f380 8811 	msr	BASEPRI, r0
   10974:	f04f 0003 	mov.w	r0, #3
   10978:	df02      	svc	2
			lll->conn->rssi_latest =  radio_rssi_get();
		}
#endif /* CONFIG_BT_CTLR_CONN_RSSI */

		/* Stop further LLL radio events */
		lll->conn->periph.initiated = 1;
   1097a:	6862      	ldr	r2, [r4, #4]
   1097c:	f892 3020 	ldrb.w	r3, [r2, #32]
   10980:	f043 0301 	orr.w	r3, r3, #1
   10984:	f882 3020 	strb.w	r3, [r2, #32]

		rx = ull_pdu_rx_alloc();
   10988:	f7fc fd20 	bl	d3cc <ull_pdu_rx_alloc>

		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   1098c:	2316      	movs	r3, #22
   1098e:	7103      	strb	r3, [r0, #4]
		rx->hdr.handle = 0xffff;
   10990:	f64f 73ff 	movw	r3, #65535	; 0xffff
   10994:	80c3      	strh	r3, [r0, #6]

		ftr = &(rx->hdr.rx_ftr);
		ftr->param = lll;
   10996:	6084      	str	r4, [r0, #8]
		rx = ull_pdu_rx_alloc();
   10998:	4605      	mov	r5, r0
		ftr->ticks_anchor = radio_tmr_start_get();
   1099a:	f001 fa39 	bl	11e10 <radio_tmr_start_get>
   1099e:	6128      	str	r0, [r5, #16]
		ftr->radio_end_us = radio_tmr_end_get() -
   109a0:	f001 fa88 	bl	11eb4 <radio_tmr_end_get>
				    radio_rx_chain_delay_get(0, 0);
   109a4:	2100      	movs	r1, #0
		ftr->radio_end_us = radio_tmr_end_get() -
   109a6:	4604      	mov	r4, r0
				    radio_rx_chain_delay_get(0, 0);
   109a8:	4608      	mov	r0, r1
   109aa:	f00c f9e1 	bl	1cd70 <radio_rx_chain_delay_get>
		ftr->radio_end_us = radio_tmr_end_get() -
   109ae:	1a24      	subs	r4, r4, r0

		if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2)) {
			ftr->extra = ull_pdu_rx_alloc();
		}

		ull_rx_put(rx->hdr.link, rx);
   109b0:	4629      	mov	r1, r5
   109b2:	6828      	ldr	r0, [r5, #0]
		ftr->radio_end_us = radio_tmr_end_get() -
   109b4:	616c      	str	r4, [r5, #20]
		ull_rx_put(rx->hdr.link, rx);
   109b6:	f7fc fd1f 	bl	d3f8 <ull_rx_put>
		ull_rx_sched();
   109ba:	f7fc fd2d 	bl	d418 <ull_rx_sched>
		if (!err) {
   109be:	e79e      	b.n	108fe <isr_rx+0xf6>
	radio_isr_set(isr_done, param);
   109c0:	4807      	ldr	r0, [pc, #28]	; (109e0 <isr_rx+0x1d8>)
   109c2:	4621      	mov	r1, r4
   109c4:	f000 ff5c 	bl	11880 <radio_isr_set>
}
   109c8:	b007      	add	sp, #28
   109ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	radio_disable();
   109ce:	f001 b81f 	b.w	11a10 <radio_disable>
   109d2:	bf00      	nop
   109d4:	00020bd3 	.word	0x00020bd3
   109d8:	00020c1d 	.word	0x00020c1d
   109dc:	0002023c 	.word	0x0002023c
   109e0:	0001c9c1 	.word	0x0001c9c1
   109e4:	00020c25 	.word	0x00020c25
   109e8:	0001c967 	.word	0x0001c967

000109ec <common_prepare_cb>:

	return common_prepare_cb(p, true);
}

static int common_prepare_cb(struct lll_prepare_param *p, bool is_resume)
{
   109ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t remainder;
	uint32_t aa;

	DEBUG_RADIO_START_O(1);

	lll = p->param;
   109f0:	68c4      	ldr	r4, [r0, #12]
		return 0;
	}
#endif /* CONFIG_BT_CENTRAL */

	/* Initialize scanning state */
	lll->state = 0U;
   109f2:	7923      	ldrb	r3, [r4, #4]
   109f4:	f36f 0300 	bfc	r3, #0, #1
{
   109f8:	b08c      	sub	sp, #48	; 0x30
	lll->state = 0U;
   109fa:	7123      	strb	r3, [r4, #4]
{
   109fc:	460d      	mov	r5, r1
   109fe:	4607      	mov	r7, r0

	radio_reset();
   10a00:	f000 ff5e 	bl	118c0 <radio_reset>

#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	radio_tx_power_set(lll->tx_pwr_lvl);
#else
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   10a04:	2000      	movs	r0, #0
   10a06:	f000 ff8f 	bl	11928 <radio_tx_power_set>
			    RADIO_PKT_CONF_PHY(lll->phy));

	lll->is_adv_ind = 0U;
	lll->is_aux_sched = 0U;
#else /* !CONFIG_BT_CTLR_ADV_EXT */
	radio_phy_set(0, 0);
   10a0a:	2100      	movs	r1, #0
   10a0c:	4608      	mov	r0, r1
   10a0e:	f000 ff7b 	bl	11908 <radio_phy_set>
	radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, PDU_AC_LEG_PAYLOAD_SIZE_MAX,
   10a12:	2200      	movs	r2, #0
   10a14:	2125      	movs	r1, #37	; 0x25
   10a16:	2008      	movs	r0, #8
   10a18:	f000 ffbc 	bl	11994 <radio_pkt_configure>
			    RADIO_PKT_CONF_PHY(RADIO_PKT_CONF_PHY_LEGACY));
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	node_rx = ull_pdu_rx_alloc_peek(1);
   10a1c:	2001      	movs	r0, #1
   10a1e:	f7fc fcbd 	bl	d39c <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   10a22:	4606      	mov	r6, r0
   10a24:	b960      	cbnz	r0, 10a40 <common_prepare_cb+0x54>
   10a26:	4a4e      	ldr	r2, [pc, #312]	; (10b60 <common_prepare_cb+0x174>)
   10a28:	494e      	ldr	r1, [pc, #312]	; (10b64 <common_prepare_cb+0x178>)
   10a2a:	484f      	ldr	r0, [pc, #316]	; (10b68 <common_prepare_cb+0x17c>)
   10a2c:	f240 138d 	movw	r3, #397	; 0x18d
   10a30:	f005 fde3 	bl	165fa <printk>
   10a34:	4040      	eors	r0, r0
   10a36:	f380 8811 	msr	BASEPRI, r0
   10a3a:	f04f 0003 	mov.w	r0, #3
   10a3e:	df02      	svc	2

	radio_pkt_rx_set(node_rx->pdu);
   10a40:	f106 001c 	add.w	r0, r6, #28
   10a44:	f000 ffcc 	bl	119e0 <radio_pkt_rx_set>

	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   10a48:	4b48      	ldr	r3, [pc, #288]	; (10b6c <common_prepare_cb+0x180>)
   10a4a:	930b      	str	r3, [sp, #44]	; 0x2c
	radio_aa_set((uint8_t *)&aa);
   10a4c:	a80b      	add	r0, sp, #44	; 0x2c
   10a4e:	f000 ff89 	bl	11964 <radio_aa_set>
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   10a52:	4947      	ldr	r1, [pc, #284]	; (10b70 <common_prepare_cb+0x184>)
   10a54:	f240 605b 	movw	r0, #1627	; 0x65b
   10a58:	f001 f816 	bl	11a88 <radio_crc_configure>
					PDU_AC_CRC_IV);

	lll_chan_set(37 + lll->chan);
   10a5c:	7920      	ldrb	r0, [r4, #4]
   10a5e:	f3c0 0041 	ubfx	r0, r0, #1, #2
   10a62:	3025      	adds	r0, #37	; 0x25
   10a64:	f7ff fa64 	bl	ff30 <lll_chan_set>

	radio_isr_set(isr_rx, lll);
   10a68:	4842      	ldr	r0, [pc, #264]	; (10b74 <common_prepare_cb+0x188>)
   10a6a:	4621      	mov	r1, r4
   10a6c:	f000 ff08 	bl	11880 <radio_isr_set>

	/* setup tIFS switching */
	if (0) {
	} else if (lll->type ||
   10a70:	7923      	ldrb	r3, [r4, #4]
   10a72:	069b      	lsls	r3, r3, #26
   10a74:	d539      	bpl.n	10aea <common_prepare_cb+0xfe>
#if defined(CONFIG_BT_CENTRAL)
		   lll->conn) {
#else /* !CONFIG_BT_CENTRAL */
		   0) {
#endif /* !CONFIG_BT_CENTRAL */
		radio_tmr_tifs_set(EVENT_IFS_US);
   10a76:	2096      	movs	r0, #150	; 0x96
   10a78:	f001 f93a 	bl	11cf0 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
   10a7c:	2300      	movs	r3, #0
   10a7e:	461a      	mov	r2, r3
   10a80:	4619      	mov	r1, r3
   10a82:	4618      	mov	r0, r3
   10a84:	f001 f8a2 	bl	11bcc <radio_switch_complete_and_tx>
		radio_ar_configure(count, irks, 0);
#endif
	} else
#endif /* CONFIG_BT_CTLR_PRIVACY */

	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER_ACCEPT_LIST) && lll->filter_policy) {
   10a88:	7923      	ldrb	r3, [r4, #4]
   10a8a:	f013 0f18 	tst.w	r3, #24
   10a8e:	d007      	beq.n	10aa0 <common_prepare_cb+0xb4>
		/* Setup Radio Filter */
		struct lll_filter *fal = ull_filter_lll_get(true);
   10a90:	2001      	movs	r0, #1
   10a92:	f7fe ff51 	bl	f938 <ull_filter_lll_get>

		radio_filter_configure(fal->enable_bitmask,
   10a96:	7841      	ldrb	r1, [r0, #1]
   10a98:	1c82      	adds	r2, r0, #2
   10a9a:	7800      	ldrb	r0, [r0, #0]
   10a9c:	f001 f8da 	bl	11c54 <radio_filter_configure>
				       fal->addr_type_bitmask,
				       (uint8_t *)fal->bdaddr);
	}

	ticks_at_event = p->ticks_at_expire;
	ull = HDR_LLL2ULL(lll);
   10aa0:	f8d4 8000 	ldr.w	r8, [r4]
	ticks_at_event = p->ticks_at_expire;
   10aa4:	683e      	ldr	r6, [r7, #0]
	ticks_at_event += lll_event_offset_get(ull);
   10aa6:	4640      	mov	r0, r8
   10aa8:	f00b ff12 	bl	1c8d0 <lll_event_offset_get>
   10aac:	4406      	add	r6, r0

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	remainder = p->remainder;
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   10aae:	687a      	ldr	r2, [r7, #4]
   10ab0:	f106 0109 	add.w	r1, r6, #9
   10ab4:	2000      	movs	r0, #0
   10ab6:	f001 f927 	bl	11d08 <radio_tmr_start>

	/* capture end of Rx-ed PDU, for initiator to calculate first
	 * central event or extended scan to schedule auxiliary channel
	 * reception.
	 */
	radio_tmr_end_capture();
   10aba:	f001 f9f3 	bl	11ea4 <radio_tmr_end_capture>

	/* scanner always measures RSSI */
	radio_rssi_measure();
   10abe:	f001 f8a7 	bl	11c10 <radio_rssi_measure>

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(ull, (TICKER_ID_SCAN_BASE +
				   ull_scan_lll_handle_get(lll)),
   10ac2:	4620      	mov	r0, r4
   10ac4:	f7fd fbbc 	bl	e240 <ull_scan_lll_handle_get>
	if (lll_preempt_calc(ull, (TICKER_ID_SCAN_BASE +
   10ac8:	1d01      	adds	r1, r0, #4
   10aca:	4632      	mov	r2, r6
   10acc:	b2c9      	uxtb	r1, r1
   10ace:	4640      	mov	r0, r8
   10ad0:	f00b ff0c 	bl	1c8ec <lll_preempt_calc>
   10ad4:	b160      	cbz	r0, 10af0 <common_prepare_cb+0x104>
			     ticks_at_event)) {
		radio_isr_set(isr_abort, lll);
   10ad6:	4828      	ldr	r0, [pc, #160]	; (10b78 <common_prepare_cb+0x18c>)
   10ad8:	4621      	mov	r1, r4
   10ada:	f000 fed1 	bl	11880 <radio_isr_set>
		radio_disable();
   10ade:	f000 ff97 	bl	11a10 <radio_disable>
	}

	DEBUG_RADIO_START_O(1);

	return 0;
}
   10ae2:	2000      	movs	r0, #0
   10ae4:	b00c      	add	sp, #48	; 0x30
   10ae6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		radio_switch_complete_and_disable();
   10aea:	f001 f883 	bl	11bf4 <radio_switch_complete_and_disable>
   10aee:	e7cb      	b.n	10a88 <common_prepare_cb+0x9c>
		if (!is_resume && lll->ticks_window) {
   10af0:	bb1d      	cbnz	r5, 10b3a <common_prepare_cb+0x14e>
   10af2:	6923      	ldr	r3, [r4, #16]
   10af4:	b30b      	cbz	r3, 10b3a <common_prepare_cb+0x14e>
			ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   10af6:	f44f 72fd 	mov.w	r2, #506	; 0x1fa
   10afa:	9208      	str	r2, [sp, #32]
   10afc:	4a1f      	ldr	r2, [pc, #124]	; (10b7c <common_prepare_cb+0x190>)
   10afe:	e9cd 4206 	strd	r4, r2, [sp, #24]
   10b02:	4a1f      	ldr	r2, [pc, #124]	; (10b80 <common_prepare_cb+0x194>)
   10b04:	e9cd 3500 	strd	r3, r5, [sp]
   10b08:	e9cd 5204 	strd	r5, r2, [sp, #16]
   10b0c:	4633      	mov	r3, r6
   10b0e:	e9cd 5502 	strd	r5, r5, [sp, #8]
   10b12:	2203      	movs	r2, #3
   10b14:	4629      	mov	r1, r5
   10b16:	f00b facd 	bl	1c0b4 <ticker_start>
			LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   10b1a:	f030 0302 	bics.w	r3, r0, #2
   10b1e:	d00c      	beq.n	10b3a <common_prepare_cb+0x14e>
   10b20:	4a0f      	ldr	r2, [pc, #60]	; (10b60 <common_prepare_cb+0x174>)
   10b22:	4918      	ldr	r1, [pc, #96]	; (10b84 <common_prepare_cb+0x198>)
   10b24:	4810      	ldr	r0, [pc, #64]	; (10b68 <common_prepare_cb+0x17c>)
   10b26:	f240 13fb 	movw	r3, #507	; 0x1fb
   10b2a:	f005 fd66 	bl	165fa <printk>
   10b2e:	4040      	eors	r0, r0
   10b30:	f380 8811 	msr	BASEPRI, r0
   10b34:	f04f 0003 	mov.w	r0, #3
   10b38:	df02      	svc	2
		ret = lll_prepare_done(lll);
   10b3a:	4620      	mov	r0, r4
   10b3c:	f00b fec3 	bl	1c8c6 <lll_prepare_done>
		LL_ASSERT(!ret);
   10b40:	2800      	cmp	r0, #0
   10b42:	d0ce      	beq.n	10ae2 <common_prepare_cb+0xf6>
   10b44:	4a06      	ldr	r2, [pc, #24]	; (10b60 <common_prepare_cb+0x174>)
   10b46:	4910      	ldr	r1, [pc, #64]	; (10b88 <common_prepare_cb+0x19c>)
   10b48:	4807      	ldr	r0, [pc, #28]	; (10b68 <common_prepare_cb+0x17c>)
   10b4a:	f44f 7305 	mov.w	r3, #532	; 0x214
   10b4e:	f005 fd54 	bl	165fa <printk>
   10b52:	4040      	eors	r0, r0
   10b54:	f380 8811 	msr	BASEPRI, r0
   10b58:	f04f 0003 	mov.w	r0, #3
   10b5c:	df02      	svc	2
   10b5e:	e7c0      	b.n	10ae2 <common_prepare_cb+0xf6>
   10b60:	00020c5b 	.word	0x00020c5b
   10b64:	00020c1d 	.word	0x00020c1d
   10b68:	0002023c 	.word	0x0002023c
   10b6c:	8e89bed6 	.word	0x8e89bed6
   10b70:	00555555 	.word	0x00555555
   10b74:	00010dc1 	.word	0x00010dc1
   10b78:	0001cae5 	.word	0x0001cae5
   10b7c:	00010ca5 	.word	0x00010ca5
   10b80:	00010d31 	.word	0x00010d31
   10b84:	000206f7 	.word	0x000206f7
   10b88:	00020608 	.word	0x00020608

00010b8c <isr_common_done>:

	radio_isr_set(isr_rx, param);
}

static void isr_common_done(void *param)
{
   10b8c:	b538      	push	{r3, r4, r5, lr}
   10b8e:	4604      	mov	r4, r0
	struct node_rx_pdu *node_rx;
	struct lll_scan *lll;

	/* Clear radio status and events */
	lll_isr_status_reset();
   10b90:	f00b fecd 	bl	1c92e <lll_isr_status_reset>

	/* Reset scanning state */
	lll = param;
	lll->state = 0U;
   10b94:	7923      	ldrb	r3, [r4, #4]
   10b96:	f36f 0300 	bfc	r3, #0, #1
   10b9a:	7123      	strb	r3, [r4, #4]
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	/* setup tIFS switching */
	if (0) {
		/* TODO: Add Rx-Rx switch usecase improvement in the future */
	} else if (lll->type ||
   10b9c:	069b      	lsls	r3, r3, #26
   10b9e:	d526      	bpl.n	10bee <isr_common_done+0x62>
#if defined(CONFIG_BT_CENTRAL)
		   lll->conn) {
#else /* !CONFIG_BT_CENTRAL */
		   0) {
#endif /* !CONFIG_BT_CENTRAL */
		radio_tmr_tifs_set(EVENT_IFS_US);
   10ba0:	2096      	movs	r0, #150	; 0x96
   10ba2:	f001 f8a5 	bl	11cf0 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
   10ba6:	2300      	movs	r3, #0
   10ba8:	461a      	mov	r2, r3
   10baa:	4619      	mov	r1, r3
   10bac:	4618      	mov	r0, r3
   10bae:	f001 f80d 	bl	11bcc <radio_switch_complete_and_tx>
	} else {
		radio_switch_complete_and_disable();
	}

	node_rx = ull_pdu_rx_alloc_peek(1);
   10bb2:	2001      	movs	r0, #1
   10bb4:	f7fc fbf2 	bl	d39c <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   10bb8:	4605      	mov	r5, r0
   10bba:	b960      	cbnz	r0, 10bd6 <isr_common_done+0x4a>
   10bbc:	4a0d      	ldr	r2, [pc, #52]	; (10bf4 <isr_common_done+0x68>)
   10bbe:	490e      	ldr	r1, [pc, #56]	; (10bf8 <isr_common_done+0x6c>)
   10bc0:	480e      	ldr	r0, [pc, #56]	; (10bfc <isr_common_done+0x70>)
   10bc2:	f44f 7352 	mov.w	r3, #840	; 0x348
   10bc6:	f005 fd18 	bl	165fa <printk>
   10bca:	4040      	eors	r0, r0
   10bcc:	f380 8811 	msr	BASEPRI, r0
   10bd0:	f04f 0003 	mov.w	r0, #3
   10bd4:	df02      	svc	2
	radio_pkt_rx_set(node_rx->pdu);
   10bd6:	f105 001c 	add.w	r0, r5, #28
   10bda:	f000 ff01 	bl	119e0 <radio_pkt_rx_set>
		radio_ar_configure(count, irks, 0);
#endif
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */

	radio_rssi_measure();
   10bde:	f001 f817 	bl	11c10 <radio_rssi_measure>

	radio_isr_set(isr_rx, param);
   10be2:	4621      	mov	r1, r4
   10be4:	4806      	ldr	r0, [pc, #24]	; (10c00 <isr_common_done+0x74>)
}
   10be6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_isr_set(isr_rx, param);
   10bea:	f000 be49 	b.w	11880 <radio_isr_set>
		radio_switch_complete_and_disable();
   10bee:	f001 f801 	bl	11bf4 <radio_switch_complete_and_disable>
   10bf2:	e7de      	b.n	10bb2 <isr_common_done+0x26>
   10bf4:	00020c5b 	.word	0x00020c5b
   10bf8:	00020c1d 	.word	0x00020c1d
   10bfc:	0002023c 	.word	0x0002023c
   10c00:	00010dc1 	.word	0x00010dc1

00010c04 <isr_tx>:
{
   10c04:	b570      	push	{r4, r5, r6, lr}
   10c06:	4605      	mov	r5, r0
	lll_isr_tx_status_reset();
   10c08:	f00b fe81 	bl	1c90e <lll_isr_tx_status_reset>
	radio_switch_complete_and_disable();
   10c0c:	f000 fff2 	bl	11bf4 <radio_switch_complete_and_disable>
	node_rx = ull_pdu_rx_alloc_peek(1);
   10c10:	2001      	movs	r0, #1
   10c12:	f7fc fbc3 	bl	d39c <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   10c16:	4604      	mov	r4, r0
   10c18:	b960      	cbnz	r0, 10c34 <isr_tx+0x30>
   10c1a:	4a1d      	ldr	r2, [pc, #116]	; (10c90 <isr_tx+0x8c>)
   10c1c:	491d      	ldr	r1, [pc, #116]	; (10c94 <isr_tx+0x90>)
   10c1e:	481e      	ldr	r0, [pc, #120]	; (10c98 <isr_tx+0x94>)
   10c20:	f240 3302 	movw	r3, #770	; 0x302
   10c24:	f005 fce9 	bl	165fa <printk>
   10c28:	4040      	eors	r0, r0
   10c2a:	f380 8811 	msr	BASEPRI, r0
   10c2e:	f04f 0003 	mov.w	r0, #3
   10c32:	df02      	svc	2
	radio_pkt_rx_set(node_rx->pdu);
   10c34:	f104 001c 	add.w	r0, r4, #28
   10c38:	f000 fed2 	bl	119e0 <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   10c3c:	f000 ff06 	bl	11a4c <radio_is_ready>
   10c40:	b160      	cbz	r0, 10c5c <isr_tx+0x58>
   10c42:	4a13      	ldr	r2, [pc, #76]	; (10c90 <isr_tx+0x8c>)
   10c44:	4915      	ldr	r1, [pc, #84]	; (10c9c <isr_tx+0x98>)
   10c46:	4814      	ldr	r0, [pc, #80]	; (10c98 <isr_tx+0x94>)
   10c48:	f240 3306 	movw	r3, #774	; 0x306
   10c4c:	f005 fcd5 	bl	165fa <printk>
   10c50:	4040      	eors	r0, r0
   10c52:	f380 8811 	msr	BASEPRI, r0
   10c56:	f04f 0003 	mov.w	r0, #3
   10c5a:	df02      	svc	2
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   10c5c:	f001 f930 	bl	11ec0 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(0, 0);
   10c60:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   10c62:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(0, 0);
   10c64:	4608      	mov	r0, r1
   10c66:	f00c f883 	bl	1cd70 <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(0, 0);
   10c6a:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(0, 0);
   10c6c:	4606      	mov	r6, r0
	hcto -= radio_tx_chain_delay_get(0, 0);
   10c6e:	4608      	mov	r0, r1
   10c70:	f00c f87a 	bl	1cd68 <radio_tx_chain_delay_get>
   10c74:	4434      	add	r4, r6
   10c76:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   10c78:	1a20      	subs	r0, r4, r0
   10c7a:	f001 f8db 	bl	11e34 <radio_tmr_hcto_configure>
	radio_rssi_measure();
   10c7e:	f000 ffc7 	bl	11c10 <radio_rssi_measure>
	radio_isr_set(isr_rx, param);
   10c82:	4629      	mov	r1, r5
   10c84:	4806      	ldr	r0, [pc, #24]	; (10ca0 <isr_tx+0x9c>)
}
   10c86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	radio_isr_set(isr_rx, param);
   10c8a:	f000 bdf9 	b.w	11880 <radio_isr_set>
   10c8e:	bf00      	nop
   10c90:	00020c5b 	.word	0x00020c5b
   10c94:	00020c1d 	.word	0x00020c1d
   10c98:	0002023c 	.word	0x0002023c
   10c9c:	00020c25 	.word	0x00020c25
   10ca0:	00010dc1 	.word	0x00010dc1

00010ca4 <ticker_op_start_cb>:
{
   10ca4:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   10ca6:	b160      	cbz	r0, 10cc2 <ticker_op_start_cb+0x1e>
   10ca8:	4a06      	ldr	r2, [pc, #24]	; (10cc4 <ticker_op_start_cb+0x20>)
   10caa:	4907      	ldr	r1, [pc, #28]	; (10cc8 <ticker_op_start_cb+0x24>)
   10cac:	4807      	ldr	r0, [pc, #28]	; (10ccc <ticker_op_start_cb+0x28>)
   10cae:	f44f 7324 	mov.w	r3, #656	; 0x290
   10cb2:	f005 fca2 	bl	165fa <printk>
   10cb6:	4040      	eors	r0, r0
   10cb8:	f380 8811 	msr	BASEPRI, r0
   10cbc:	f04f 0003 	mov.w	r0, #3
   10cc0:	df02      	svc	2
}
   10cc2:	bd08      	pop	{r3, pc}
   10cc4:	00020c5b 	.word	0x00020c5b
   10cc8:	00020a0f 	.word	0x00020a0f
   10ccc:	0002023c 	.word	0x0002023c

00010cd0 <is_abort_cb>:
	if (next != curr) {
   10cd0:	4281      	cmp	r1, r0
{
   10cd2:	b508      	push	{r3, lr}
	if (next != curr) {
   10cd4:	d017      	beq.n	10d06 <is_abort_cb+0x36>
			if (!lll->ticks_window) {
   10cd6:	690b      	ldr	r3, [r1, #16]
   10cd8:	b9e3      	cbnz	r3, 10d14 <is_abort_cb+0x44>
				*resume_cb = resume_prepare_cb;
   10cda:	4b10      	ldr	r3, [pc, #64]	; (10d1c <is_abort_cb+0x4c>)
   10cdc:	6013      	str	r3, [r2, #0]
				err = lll_hfclock_on();
   10cde:	f7ff faa5 	bl	1022c <lll_hfclock_on>
				LL_ASSERT(err >= 0);
   10ce2:	2800      	cmp	r0, #0
   10ce4:	da0c      	bge.n	10d00 <is_abort_cb+0x30>
   10ce6:	4a0e      	ldr	r2, [pc, #56]	; (10d20 <is_abort_cb+0x50>)
   10ce8:	490e      	ldr	r1, [pc, #56]	; (10d24 <is_abort_cb+0x54>)
   10cea:	480f      	ldr	r0, [pc, #60]	; (10d28 <is_abort_cb+0x58>)
   10cec:	f240 2332 	movw	r3, #562	; 0x232
   10cf0:	f005 fc83 	bl	165fa <printk>
   10cf4:	4040      	eors	r0, r0
   10cf6:	f380 8811 	msr	BASEPRI, r0
   10cfa:	f04f 0003 	mov.w	r0, #3
   10cfe:	df02      	svc	2
				return -EAGAIN;
   10d00:	f06f 000a 	mvn.w	r0, #10
   10d04:	e005      	b.n	10d12 <is_abort_cb+0x42>
		radio_isr_set(isr_window, lll);
   10d06:	4809      	ldr	r0, [pc, #36]	; (10d2c <is_abort_cb+0x5c>)
   10d08:	f000 fdba 	bl	11880 <radio_isr_set>
	radio_disable();
   10d0c:	f000 fe80 	bl	11a10 <radio_disable>
   10d10:	2000      	movs	r0, #0
}
   10d12:	bd08      	pop	{r3, pc}
			return -ECANCELED;
   10d14:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   10d18:	e7fb      	b.n	10d12 <is_abort_cb+0x42>
   10d1a:	bf00      	nop
   10d1c:	0001cb49 	.word	0x0001cb49
   10d20:	00020c5b 	.word	0x00020c5b
   10d24:	00020ba1 	.word	0x00020ba1
   10d28:	0002023c 	.word	0x0002023c
   10d2c:	0001cb0d 	.word	0x0001cb0d

00010d30 <ticker_stop_cb>:
{
   10d30:	b508      	push	{r3, lr}
	mfy.param = param;
   10d32:	4b0b      	ldr	r3, [pc, #44]	; (10d60 <ticker_stop_cb+0x30>)
   10d34:	9a03      	ldr	r2, [sp, #12]
   10d36:	609a      	str	r2, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   10d38:	2200      	movs	r2, #0
   10d3a:	4611      	mov	r1, r2
   10d3c:	2001      	movs	r0, #1
   10d3e:	f7fa f909 	bl	af54 <mayfly_enqueue>
	LL_ASSERT(!ret);
   10d42:	b160      	cbz	r0, 10d5e <ticker_stop_cb+0x2e>
   10d44:	4a07      	ldr	r2, [pc, #28]	; (10d64 <ticker_stop_cb+0x34>)
   10d46:	4908      	ldr	r1, [pc, #32]	; (10d68 <ticker_stop_cb+0x38>)
   10d48:	4808      	ldr	r0, [pc, #32]	; (10d6c <ticker_stop_cb+0x3c>)
   10d4a:	f240 2389 	movw	r3, #649	; 0x289
   10d4e:	f005 fc54 	bl	165fa <printk>
   10d52:	4040      	eors	r0, r0
   10d54:	f380 8811 	msr	BASEPRI, r0
   10d58:	f04f 0003 	mov.w	r0, #3
   10d5c:	df02      	svc	2
}
   10d5e:	bd08      	pop	{r3, pc}
   10d60:	200007a8 	.word	0x200007a8
   10d64:	00020c5b 	.word	0x00020c5b
   10d68:	00020608 	.word	0x00020608
   10d6c:	0002023c 	.word	0x0002023c

00010d70 <abort_cb>:
{
   10d70:	b510      	push	{r4, lr}
   10d72:	460c      	mov	r4, r1
	if (!prepare_param) {
   10d74:	b930      	cbnz	r0, 10d84 <abort_cb+0x14>
			radio_isr_set(isr_done_cleanup, param);
   10d76:	480e      	ldr	r0, [pc, #56]	; (10db0 <abort_cb+0x40>)
   10d78:	f000 fd82 	bl	11880 <radio_isr_set>
}
   10d7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			radio_disable();
   10d80:	f000 be46 	b.w	11a10 <radio_disable>
	err = lll_hfclock_off();
   10d84:	f7ff fa68 	bl	10258 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   10d88:	2800      	cmp	r0, #0
   10d8a:	da0c      	bge.n	10da6 <abort_cb+0x36>
   10d8c:	4a09      	ldr	r2, [pc, #36]	; (10db4 <abort_cb+0x44>)
   10d8e:	490a      	ldr	r1, [pc, #40]	; (10db8 <abort_cb+0x48>)
   10d90:	480a      	ldr	r0, [pc, #40]	; (10dbc <abort_cb+0x4c>)
   10d92:	f240 2379 	movw	r3, #633	; 0x279
   10d96:	f005 fc30 	bl	165fa <printk>
   10d9a:	4040      	eors	r0, r0
   10d9c:	f380 8811 	msr	BASEPRI, r0
   10da0:	f04f 0003 	mov.w	r0, #3
   10da4:	df02      	svc	2
	lll_done(param);
   10da6:	4620      	mov	r0, r4
}
   10da8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   10dac:	f7ff b864 	b.w	fe78 <lll_done>
   10db0:	0001cb73 	.word	0x0001cb73
   10db4:	00020c5b 	.word	0x00020c5b
   10db8:	00020ba1 	.word	0x00020ba1
   10dbc:	0002023c 	.word	0x0002023c

00010dc0 <isr_rx>:
{
   10dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10dc4:	4605      	mov	r5, r0
	trx_done = radio_is_done();
   10dc6:	f000 fe4b 	bl	11a60 <radio_is_done>
	if (trx_done) {
   10dca:	f010 04ff 	ands.w	r4, r0, #255	; 0xff
   10dce:	f000 80a3 	beq.w	10f18 <isr_rx+0x158>
		crc_ok = radio_crc_is_valid();
   10dd2:	f000 fe65 	bl	11aa0 <radio_crc_is_valid>
   10dd6:	fa5f f880 	uxtb.w	r8, r0
		devmatch_ok = radio_filter_has_match();
   10dda:	f000 ff69 	bl	11cb0 <radio_filter_has_match>
   10dde:	b2c6      	uxtb	r6, r0
		devmatch_id = radio_filter_match_get();
   10de0:	f000 ff70 	bl	11cc4 <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
   10de4:	f001 f88a 	bl	11efc <radio_ar_has_match>
		irkmatch_id = radio_ar_match_get();
   10de8:	f001 f870 	bl	11ecc <radio_ar_match_get>
		rssi_ready = radio_rssi_is_ready();
   10dec:	f000 ff28 	bl	11c40 <radio_rssi_is_ready>
   10df0:	b2c7      	uxtb	r7, r0
		phy_flags_rx = radio_phy_flags_rx_get();
   10df2:	f00b ffc2 	bl	1cd7a <radio_phy_flags_rx_get>
	lll_isr_status_reset();
   10df6:	f00b fd9a 	bl	1c92e <lll_isr_status_reset>
	if (!trx_done || !crc_ok) {
   10dfa:	2c00      	cmp	r4, #0
   10dfc:	f000 80c1 	beq.w	10f82 <isr_rx+0x1c2>
   10e00:	f1b8 0f00 	cmp.w	r8, #0
   10e04:	f000 80bd 	beq.w	10f82 <isr_rx+0x1c2>
	node_rx = ull_pdu_rx_alloc_peek(1);
   10e08:	2001      	movs	r0, #1
   10e0a:	f7fc fac7 	bl	d39c <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   10e0e:	4604      	mov	r4, r0
   10e10:	b960      	cbnz	r0, 10e2c <isr_rx+0x6c>
   10e12:	4a7e      	ldr	r2, [pc, #504]	; (1100c <isr_rx+0x24c>)
   10e14:	497e      	ldr	r1, [pc, #504]	; (11010 <isr_rx+0x250>)
   10e16:	487f      	ldr	r0, [pc, #508]	; (11014 <isr_rx+0x254>)
   10e18:	f240 23c3 	movw	r3, #707	; 0x2c3
   10e1c:	f005 fbed 	bl	165fa <printk>
   10e20:	4040      	eors	r0, r0
   10e22:	f380 8811 	msr	BASEPRI, r0
   10e26:	f04f 0003 	mov.w	r0, #3
   10e2a:	df02      	svc	2
	return ((lll->filter_policy & SCAN_FP_FILTER) == 0U) ||
   10e2c:	792a      	ldrb	r2, [r5, #4]
   10e2e:	0713      	lsls	r3, r2, #28
   10e30:	d502      	bpl.n	10e38 <isr_rx+0x78>
	if (has_adva &&
   10e32:	2e00      	cmp	r6, #0
   10e34:	f000 80a5 	beq.w	10f82 <isr_rx+0x1c2>

		return 0;
#endif /* CONFIG_BT_CENTRAL */

	/* Active scanner */
	} else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   10e38:	7f23      	ldrb	r3, [r4, #28]
   10e3a:	f013 010f 	ands.w	r1, r3, #15
   10e3e:	d002      	beq.n	10e46 <isr_rx+0x86>
   10e40:	2906      	cmp	r1, #6
   10e42:	f040 80e1 	bne.w	11008 <isr_rx+0x248>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
   10e46:	7f60      	ldrb	r0, [r4, #29]
   10e48:	2825      	cmp	r0, #37	; 0x25
   10e4a:	d86b      	bhi.n	10f24 <isr_rx+0x164>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind)) &&
		   lll->type &&
   10e4c:	0690      	lsls	r0, r2, #26
   10e4e:	d569      	bpl.n	10f24 <isr_rx+0x164>
		bt_addr_t *lrpa;
#endif /* CONFIG_BT_CTLR_PRIVACY */
		int err;

		/* setup tIFS switching */
		radio_tmr_tifs_set(EVENT_IFS_US);
   10e50:	2096      	movs	r0, #150	; 0x96
   10e52:	f000 ff4d 	bl	11cf0 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   10e56:	2000      	movs	r0, #0
   10e58:	f000 fea4 	bl	11ba4 <radio_switch_complete_and_rx>
			      uint8_t rl_idx, bool dir_report)
{
	struct node_rx_pdu *node_rx;
	int err = 0;

	node_rx = ull_pdu_rx_alloc_peek(3);
   10e5c:	2003      	movs	r0, #3
   10e5e:	f7fc fa9d 	bl	d39c <ull_pdu_rx_alloc_peek>
	if (!node_rx) {
   10e62:	4606      	mov	r6, r0
   10e64:	2800      	cmp	r0, #0
   10e66:	f000 808c 	beq.w	10f82 <isr_rx+0x1c2>
		return -ENOBUFS;
	}
	ull_pdu_rx_alloc();
   10e6a:	f7fc faaf 	bl	d3cc <ull_pdu_rx_alloc>

	/* Prepare the report (adv or scan resp) */
	node_rx->hdr.handle = 0xffff;
   10e6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   10e72:	80f3      	strh	r3, [r6, #6]
			}
			break;
		}
#endif /* CONFIG_BT_CTLR_ADV_EXT */
	} else {
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
   10e74:	2305      	movs	r3, #5
   10e76:	7133      	strb	r3, [r6, #4]
	}

	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
   10e78:	2f00      	cmp	r7, #0
   10e7a:	d051      	beq.n	10f20 <isr_rx+0x160>
   10e7c:	f000 fed2 	bl	11c24 <radio_rssi_get>
   10e80:	b2c0      	uxtb	r0, r0
#endif /* CONFIG_BT_CTLR_ADV_EXT */
#endif /* CONFIG_BT_CTLR_PRIVACY */

#if defined(CONFIG_BT_CTLR_EXT_SCAN_FP)
	/* save the directed adv report flag */
	node_rx->hdr.rx_ftr.direct = dir_report;
   10e82:	7e73      	ldrb	r3, [r6, #25]
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
   10e84:	7630      	strb	r0, [r6, #24]
	node_rx->hdr.rx_ftr.direct = dir_report;
   10e86:	f36f 0300 	bfc	r3, #0, #1
   10e8a:	7673      	strb	r3, [r6, #25]
		node_rx->hdr.rx_ftr.chan = _radio.scanner.chan - 1;
		node_rx->hdr.rx_ftr.ticks_anchor = _radio.ticks_anchor;
	}
#endif /* CONFIG_BT_CTLR_EXT_SCAN_FP */

	ull_rx_put(node_rx->hdr.link, node_rx);
   10e8c:	4631      	mov	r1, r6
   10e8e:	6830      	ldr	r0, [r6, #0]
   10e90:	f7fc fab2 	bl	d3f8 <ull_rx_put>
	ull_rx_sched();
   10e94:	f7fc fac0 	bl	d418 <ull_rx_sched>
		pdu_tx = (void *)radio_pkt_scratch_get();
   10e98:	f000 fe10 	bl	11abc <radio_pkt_scratch_get>
			pdu_tx->tx_addr = lll->init_addr_type;
   10e9c:	792b      	ldrb	r3, [r5, #4]
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
   10e9e:	7f22      	ldrb	r2, [r4, #28]
			pdu_tx->tx_addr = lll->init_addr_type;
   10ea0:	f3c3 1380 	ubfx	r3, r3, #6, #1
		pdu_tx->type = PDU_ADV_TYPE_SCAN_REQ;
   10ea4:	019b      	lsls	r3, r3, #6
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
   10ea6:	f3c2 1280 	ubfx	r2, r2, #6, #1
		pdu_tx->type = PDU_ADV_TYPE_SCAN_REQ;
   10eaa:	f043 0303 	orr.w	r3, r3, #3
   10eae:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
   10eb2:	7802      	ldrb	r2, [r0, #0]
   10eb4:	f002 0230 	and.w	r2, r2, #48	; 0x30
   10eb8:	4313      	orrs	r3, r2
   10eba:	7003      	strb	r3, [r0, #0]
		pdu_tx->len = sizeof(struct pdu_adv_scan_req);
   10ebc:	230c      	movs	r3, #12
   10ebe:	7043      	strb	r3, [r0, #1]
		pdu_tx = (void *)radio_pkt_scratch_get();
   10ec0:	4606      	mov	r6, r0
			memcpy(&pdu_tx->scan_req.scan_addr[0],
   10ec2:	2206      	movs	r2, #6
   10ec4:	1d69      	adds	r1, r5, #5
   10ec6:	3002      	adds	r0, #2
   10ec8:	f006 f9c4 	bl	17254 <memcpy>
		memcpy(&pdu_tx->scan_req.adv_addr[0],
   10ecc:	2206      	movs	r2, #6
   10ece:	f104 011e 	add.w	r1, r4, #30
   10ed2:	f106 0008 	add.w	r0, r6, #8
   10ed6:	f006 f9bd 	bl	17254 <memcpy>
		radio_pkt_tx_set(pdu_tx);
   10eda:	4630      	mov	r0, r6
   10edc:	f000 fd86 	bl	119ec <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   10ee0:	f000 fdb4 	bl	11a4c <radio_is_ready>
   10ee4:	b160      	cbz	r0, 10f00 <isr_rx+0x140>
   10ee6:	4a49      	ldr	r2, [pc, #292]	; (1100c <isr_rx+0x24c>)
   10ee8:	494b      	ldr	r1, [pc, #300]	; (11018 <isr_rx+0x258>)
   10eea:	484a      	ldr	r0, [pc, #296]	; (11014 <isr_rx+0x254>)
   10eec:	f240 5316 	movw	r3, #1302	; 0x516
   10ef0:	f005 fb83 	bl	165fa <printk>
   10ef4:	4040      	eors	r0, r0
   10ef6:	f380 8811 	msr	BASEPRI, r0
   10efa:	f04f 0003 	mov.w	r0, #3
   10efe:	df02      	svc	2
		radio_tmr_end_capture();
   10f00:	f000 ffd0 	bl	11ea4 <radio_tmr_end_capture>
		lll->state = 1U;
   10f04:	792b      	ldrb	r3, [r5, #4]
		radio_isr_set(isr_tx, lll);
   10f06:	4845      	ldr	r0, [pc, #276]	; (1101c <isr_rx+0x25c>)
		lll->state = 1U;
   10f08:	f043 0301 	orr.w	r3, r3, #1
   10f0c:	712b      	strb	r3, [r5, #4]
		radio_isr_set(isr_tx, lll);
   10f0e:	4629      	mov	r1, r5
}
   10f10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		radio_isr_set(isr_tx, lll);
   10f14:	f000 bcb4 	b.w	11880 <radio_isr_set>
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready =
   10f18:	46a0      	mov	r8, r4
   10f1a:	4627      	mov	r7, r4
   10f1c:	4626      	mov	r6, r4
   10f1e:	e76a      	b.n	10df6 <isr_rx+0x36>
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
   10f20:	207f      	movs	r0, #127	; 0x7f
   10f22:	e7ae      	b.n	10e82 <isr_rx+0xc2>
	else if (((((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   10f24:	f013 0f0d 	tst.w	r3, #13
   10f28:	d001      	beq.n	10f2e <isr_rx+0x16e>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
   10f2a:	2906      	cmp	r1, #6
   10f2c:	d122      	bne.n	10f74 <isr_rx+0x1b4>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
   10f2e:	7f60      	ldrb	r0, [r4, #29]
   10f30:	2825      	cmp	r0, #37	; 0x25
   10f32:	d81f      	bhi.n	10f74 <isr_rx+0x1b4>
	bool dir_report = false;
   10f34:	2600      	movs	r6, #0
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
   10f36:	7f63      	ldrb	r3, [r4, #29]
   10f38:	b31b      	cbz	r3, 10f82 <isr_rx+0x1c2>
	node_rx = ull_pdu_rx_alloc_peek(3);
   10f3a:	2003      	movs	r0, #3
   10f3c:	f7fc fa2e 	bl	d39c <ull_pdu_rx_alloc_peek>
	if (!node_rx) {
   10f40:	4604      	mov	r4, r0
   10f42:	b1f0      	cbz	r0, 10f82 <isr_rx+0x1c2>
	ull_pdu_rx_alloc();
   10f44:	f7fc fa42 	bl	d3cc <ull_pdu_rx_alloc>
	node_rx->hdr.handle = 0xffff;
   10f48:	f64f 73ff 	movw	r3, #65535	; 0xffff
   10f4c:	80e3      	strh	r3, [r4, #6]
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
   10f4e:	2305      	movs	r3, #5
   10f50:	7123      	strb	r3, [r4, #4]
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
   10f52:	2f00      	cmp	r7, #0
   10f54:	d056      	beq.n	11004 <isr_rx+0x244>
   10f56:	f000 fe65 	bl	11c24 <radio_rssi_get>
   10f5a:	b2c0      	uxtb	r0, r0
	node_rx->hdr.rx_ftr.direct = dir_report;
   10f5c:	7e63      	ldrb	r3, [r4, #25]
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
   10f5e:	7620      	strb	r0, [r4, #24]
	node_rx->hdr.rx_ftr.direct = dir_report;
   10f60:	f366 0300 	bfi	r3, r6, #0, #1
	ull_rx_put(node_rx->hdr.link, node_rx);
   10f64:	6820      	ldr	r0, [r4, #0]
	node_rx->hdr.rx_ftr.direct = dir_report;
   10f66:	7663      	strb	r3, [r4, #25]
	ull_rx_put(node_rx->hdr.link, node_rx);
   10f68:	4621      	mov	r1, r4
   10f6a:	f7fc fa45 	bl	d3f8 <ull_rx_put>
	ull_rx_sched();
   10f6e:	f7fc fa53 	bl	d418 <ull_rx_sched>
	if (!err) {
   10f72:	e006      	b.n	10f82 <isr_rx+0x1c2>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind))) ||
   10f74:	2901      	cmp	r1, #1
   10f76:	d00c      	beq.n	10f92 <isr_rx+0x1d2>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
   10f78:	7f23      	ldrb	r3, [r4, #28]
					rl_idx, &dir_report))) ||
   10f7a:	f003 030f 	and.w	r3, r3, #15
   10f7e:	2b04      	cmp	r3, #4
   10f80:	d028      	beq.n	10fd4 <isr_rx+0x214>
	radio_isr_set(isr_done, lll);
   10f82:	4629      	mov	r1, r5
   10f84:	4826      	ldr	r0, [pc, #152]	; (11020 <isr_rx+0x260>)
   10f86:	f000 fc7b 	bl	11880 <radio_isr_set>
}
   10f8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	radio_disable();
   10f8e:	f000 bd3f 	b.w	11a10 <radio_disable>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
   10f92:	7f61      	ldrb	r1, [r4, #29]
   10f94:	290c      	cmp	r1, #12
   10f96:	d1f4      	bne.n	10f82 <isr_rx+0x1c2>
		 !memcmp(lll->init_addr, addr, BDADDR_SIZE))) ||
   10f98:	f3c2 1280 	ubfx	r2, r2, #6, #1
   10f9c:	ebb2 1fd3 	cmp.w	r2, r3, lsr #7
		    isr_scan_tgta_check(lll, false, pdu_adv_rx->rx_addr,
   10fa0:	ea4f 16d3 	mov.w	r6, r3, lsr #7
		 !memcmp(lll->init_addr, addr, BDADDR_SIZE))) ||
   10fa4:	d00d      	beq.n	10fc2 <isr_rx+0x202>
	if (((lll->filter_policy & SCAN_FP_EXT) != 0U) && (addr_type != 0U) &&
   10fa6:	792b      	ldrb	r3, [r5, #4]
   10fa8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
   10fac:	079a      	lsls	r2, r3, #30
   10fae:	d5e3      	bpl.n	10f78 <isr_rx+0x1b8>
   10fb0:	2e00      	cmp	r6, #0
   10fb2:	d0e1      	beq.n	10f78 <isr_rx+0x1b8>
   10fb4:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   10fb8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   10fbc:	2b40      	cmp	r3, #64	; 0x40
   10fbe:	d1db      	bne.n	10f78 <isr_rx+0x1b8>
   10fc0:	e7b9      	b.n	10f36 <isr_rx+0x176>
		 !memcmp(lll->init_addr, addr, BDADDR_SIZE))) ||
   10fc2:	2206      	movs	r2, #6
   10fc4:	f104 0124 	add.w	r1, r4, #36	; 0x24
   10fc8:	1d68      	adds	r0, r5, #5
   10fca:	f006 f932 	bl	17232 <memcmp>
	return (((lll->init_addr_type == addr_type) &&
   10fce:	2800      	cmp	r0, #0
   10fd0:	d0b0      	beq.n	10f34 <isr_rx+0x174>
   10fd2:	e7e8      	b.n	10fa6 <isr_rx+0x1e6>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
   10fd4:	7f63      	ldrb	r3, [r4, #29]
   10fd6:	2b25      	cmp	r3, #37	; 0x25
   10fd8:	d8d3      	bhi.n	10f82 <isr_rx+0x1c2>
		   (lll->state != 0U) &&
   10fda:	792b      	ldrb	r3, [r5, #4]
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_scan_rsp)) &&
   10fdc:	07db      	lsls	r3, r3, #31
   10fde:	d5d0      	bpl.n	10f82 <isr_rx+0x1c2>
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
   10fe0:	f000 fd6c 	bl	11abc <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
   10fe4:	7f23      	ldrb	r3, [r4, #28]
   10fe6:	7802      	ldrb	r2, [r0, #0]
   10fe8:	f3c3 1380 	ubfx	r3, r3, #6, #1
   10fec:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   10ff0:	d1c7      	bne.n	10f82 <isr_rx+0x1c2>
		(memcmp(&sreq->scan_req.adv_addr[0],
   10ff2:	2206      	movs	r2, #6
   10ff4:	f104 011e 	add.w	r1, r4, #30
   10ff8:	3008      	adds	r0, #8
   10ffa:	f006 f91a 	bl	17232 <memcmp>
		   (lll->state != 0U) &&
   10ffe:	2800      	cmp	r0, #0
   11000:	d098      	beq.n	10f34 <isr_rx+0x174>
   11002:	e7be      	b.n	10f82 <isr_rx+0x1c2>
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
   11004:	207f      	movs	r0, #127	; 0x7f
   11006:	e7a9      	b.n	10f5c <isr_rx+0x19c>
	else if (((((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   11008:	2902      	cmp	r1, #2
   1100a:	e78f      	b.n	10f2c <isr_rx+0x16c>
   1100c:	00020c5b 	.word	0x00020c5b
   11010:	00020c1d 	.word	0x00020c1d
   11014:	0002023c 	.word	0x0002023c
   11018:	00020c25 	.word	0x00020c25
   1101c:	00010c05 	.word	0x00010c05
   11020:	0001cafb 	.word	0x0001cafb

00011024 <lll_scan_prepare>:
{
   11024:	b513      	push	{r0, r1, r4, lr}
   11026:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   11028:	f7ff f900 	bl	1022c <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   1102c:	2800      	cmp	r0, #0
   1102e:	da0b      	bge.n	11048 <lll_scan_prepare+0x24>
   11030:	4a11      	ldr	r2, [pc, #68]	; (11078 <lll_scan_prepare+0x54>)
   11032:	4912      	ldr	r1, [pc, #72]	; (1107c <lll_scan_prepare+0x58>)
   11034:	4812      	ldr	r0, [pc, #72]	; (11080 <lll_scan_prepare+0x5c>)
   11036:	2388      	movs	r3, #136	; 0x88
   11038:	f005 fadf 	bl	165fa <printk>
   1103c:	4040      	eors	r0, r0
   1103e:	f380 8811 	msr	BASEPRI, r0
   11042:	f04f 0003 	mov.w	r0, #3
   11046:	df02      	svc	2
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   11048:	4a0e      	ldr	r2, [pc, #56]	; (11084 <lll_scan_prepare+0x60>)
   1104a:	490f      	ldr	r1, [pc, #60]	; (11088 <lll_scan_prepare+0x64>)
   1104c:	480f      	ldr	r0, [pc, #60]	; (1108c <lll_scan_prepare+0x68>)
   1104e:	9400      	str	r4, [sp, #0]
   11050:	2300      	movs	r3, #0
   11052:	f00b f938 	bl	1c2c6 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   11056:	b168      	cbz	r0, 11074 <lll_scan_prepare+0x50>
   11058:	3077      	adds	r0, #119	; 0x77
   1105a:	d00b      	beq.n	11074 <lll_scan_prepare+0x50>
   1105c:	4a06      	ldr	r2, [pc, #24]	; (11078 <lll_scan_prepare+0x54>)
   1105e:	490c      	ldr	r1, [pc, #48]	; (11090 <lll_scan_prepare+0x6c>)
   11060:	4807      	ldr	r0, [pc, #28]	; (11080 <lll_scan_prepare+0x5c>)
   11062:	238b      	movs	r3, #139	; 0x8b
   11064:	f005 fac9 	bl	165fa <printk>
   11068:	4040      	eors	r0, r0
   1106a:	f380 8811 	msr	BASEPRI, r0
   1106e:	f04f 0003 	mov.w	r0, #3
   11072:	df02      	svc	2
}
   11074:	b002      	add	sp, #8
   11076:	bd10      	pop	{r4, pc}
   11078:	00020c5b 	.word	0x00020c5b
   1107c:	00020ba1 	.word	0x00020ba1
   11080:	0002023c 	.word	0x0002023c
   11084:	0001cadf 	.word	0x0001cadf
   11088:	00010d71 	.word	0x00010d71
   1108c:	00010cd1 	.word	0x00010cd1
   11090:	00020c47 	.word	0x00020c47

00011094 <isr_done>:
{
	return 0;
}

static void isr_done(void *param)
{
   11094:	b570      	push	{r4, r5, r6, lr}
   11096:	4605      	mov	r5, r0
	struct event_done_extra *e;

	lll_isr_status_reset();
   11098:	f00b fc49 	bl	1c92e <lll_isr_status_reset>

	e = ull_event_done_extra_get();
   1109c:	f7fc fa74 	bl	d588 <ull_event_done_extra_get>
	LL_ASSERT(e);
   110a0:	4604      	mov	r4, r0
   110a2:	b960      	cbnz	r0, 110be <isr_done+0x2a>
   110a4:	4a17      	ldr	r2, [pc, #92]	; (11104 <isr_done+0x70>)
   110a6:	4918      	ldr	r1, [pc, #96]	; (11108 <isr_done+0x74>)
   110a8:	4818      	ldr	r0, [pc, #96]	; (1110c <isr_done+0x78>)
   110aa:	f240 3317 	movw	r3, #791	; 0x317
   110ae:	f005 faa4 	bl	165fa <printk>
   110b2:	4040      	eors	r0, r0
   110b4:	f380 8811 	msr	BASEPRI, r0
   110b8:	f04f 0003 	mov.w	r0, #3
   110bc:	df02      	svc	2

	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   110be:	2301      	movs	r3, #1
	e->trx_cnt = trx_cnt;
	e->crc_valid = crc_valid;
   110c0:	4913      	ldr	r1, [pc, #76]	; (11110 <isr_done+0x7c>)
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   110c2:	7023      	strb	r3, [r4, #0]
	e->trx_cnt = trx_cnt;
   110c4:	4b13      	ldr	r3, [pc, #76]	; (11114 <isr_done+0x80>)
	e->crc_valid = crc_valid;
   110c6:	79a2      	ldrb	r2, [r4, #6]
   110c8:	7809      	ldrb	r1, [r1, #0]
	e->trx_cnt = trx_cnt;
   110ca:	881b      	ldrh	r3, [r3, #0]
   110cc:	80a3      	strh	r3, [r4, #4]
	e->crc_valid = crc_valid;
   110ce:	f361 0200 	bfi	r2, r1, #0, #1
   110d2:	71a2      	strb	r2, [r4, #6]
#if defined(CONFIG_BT_CTLR_LE_ENC)
	e->mic_state = mic_state;
#endif /* CONFIG_BT_CTLR_LE_ENC */

#if defined(CONFIG_BT_PERIPHERAL)
	if (trx_cnt) {
   110d4:	b18b      	cbz	r3, 110fa <isr_done+0x66>
		struct lll_conn *lll = param;

		if (lll->role) {
   110d6:	f995 301d 	ldrsb.w	r3, [r5, #29]
   110da:	2b00      	cmp	r3, #0
   110dc:	da0d      	bge.n	110fa <isr_done+0x66>
			preamble_to_addr_us =
				addr_us_get(0);
#endif /* !CONFIG_BT_CTLR_PHY */

			e->drift.start_to_address_actual_us =
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   110de:	f000 fed5 	bl	11e8c <radio_tmr_aa_restore>
   110e2:	4606      	mov	r6, r0
   110e4:	f000 fed8 	bl	11e98 <radio_tmr_ready_get>
			e->drift.window_widening_event_us =
   110e8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   110ea:	60e3      	str	r3, [r4, #12]
				lll->periph.window_widening_event_us;
			e->drift.preamble_to_addr_us = preamble_to_addr_us;
   110ec:	2328      	movs	r3, #40	; 0x28
   110ee:	6123      	str	r3, [r4, #16]
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   110f0:	1a36      	subs	r6, r6, r0

			/* Reset window widening, as anchor point sync-ed */
			lll->periph.window_widening_event_us = 0;
   110f2:	2300      	movs	r3, #0
			e->drift.start_to_address_actual_us =
   110f4:	60a6      	str	r6, [r4, #8]
			lll->periph.window_widening_event_us = 0;
   110f6:	632b      	str	r3, [r5, #48]	; 0x30
			lll->periph.window_size_event_us = 0;
   110f8:	63ab      	str	r3, [r5, #56]	; 0x38
		}
	}
#endif /* CONFIG_BT_PERIPHERAL */

	lll_isr_cleanup(param);
   110fa:	4628      	mov	r0, r5
}
   110fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	lll_isr_cleanup(param);
   11100:	f7fe bf48 	b.w	ff94 <lll_isr_cleanup>
   11104:	00020ca6 	.word	0x00020ca6
   11108:	00020720 	.word	0x00020720
   1110c:	0002023c 	.word	0x0002023c
   11110:	20002b78 	.word	0x20002b78
   11114:	20002b16 	.word	0x20002b16

00011118 <lll_conn_prepare_reset>:
	trx_cnt = 0U;
   11118:	4a03      	ldr	r2, [pc, #12]	; (11128 <lll_conn_prepare_reset+0x10>)
   1111a:	2300      	movs	r3, #0
   1111c:	8013      	strh	r3, [r2, #0]
	crc_valid = 0U;
   1111e:	4a03      	ldr	r2, [pc, #12]	; (1112c <lll_conn_prepare_reset+0x14>)
   11120:	7013      	strb	r3, [r2, #0]
	crc_expire = 0U;
   11122:	4a03      	ldr	r2, [pc, #12]	; (11130 <lll_conn_prepare_reset+0x18>)
   11124:	7013      	strb	r3, [r2, #0]
}
   11126:	4770      	bx	lr
   11128:	20002b16 	.word	0x20002b16
   1112c:	20002b78 	.word	0x20002b78
   11130:	20002b77 	.word	0x20002b77

00011134 <lll_conn_abort_cb>:
{
   11134:	b538      	push	{r3, r4, r5, lr}
   11136:	460d      	mov	r5, r1
	if (!prepare_param) {
   11138:	4604      	mov	r4, r0
   1113a:	b930      	cbnz	r0, 1114a <lll_conn_abort_cb+0x16>
		radio_isr_set(isr_done, param);
   1113c:	4810      	ldr	r0, [pc, #64]	; (11180 <lll_conn_abort_cb+0x4c>)
   1113e:	f000 fb9f 	bl	11880 <radio_isr_set>
}
   11142:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		radio_disable();
   11146:	f000 bc63 	b.w	11a10 <radio_disable>
	err = lll_hfclock_off();
   1114a:	f7ff f885 	bl	10258 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1114e:	2800      	cmp	r0, #0
   11150:	da0b      	bge.n	1116a <lll_conn_abort_cb+0x36>
   11152:	4a0c      	ldr	r2, [pc, #48]	; (11184 <lll_conn_abort_cb+0x50>)
   11154:	490c      	ldr	r1, [pc, #48]	; (11188 <lll_conn_abort_cb+0x54>)
   11156:	480d      	ldr	r0, [pc, #52]	; (1118c <lll_conn_abort_cb+0x58>)
   11158:	23aa      	movs	r3, #170	; 0xaa
   1115a:	f005 fa4e 	bl	165fa <printk>
   1115e:	4040      	eors	r0, r0
   11160:	f380 8811 	msr	BASEPRI, r0
   11164:	f04f 0003 	mov.w	r0, #3
   11168:	df02      	svc	2
	lll = prepare_param->param;
   1116a:	68e2      	ldr	r2, [r4, #12]
	lll->latency_prepare += (prepare_param->lazy + 1);
   1116c:	8923      	ldrh	r3, [r4, #8]
   1116e:	8a51      	ldrh	r1, [r2, #18]
   11170:	3301      	adds	r3, #1
   11172:	440b      	add	r3, r1
   11174:	8253      	strh	r3, [r2, #18]
	lll_done(param);
   11176:	4628      	mov	r0, r5
}
   11178:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lll_done(param);
   1117c:	f7fe be7c 	b.w	fe78 <lll_done>
   11180:	00011095 	.word	0x00011095
   11184:	00020ca6 	.word	0x00020ca6
   11188:	00020ba1 	.word	0x00020ba1
   1118c:	0002023c 	.word	0x0002023c

00011190 <lll_conn_rx_pkt_set>:
{
   11190:	b510      	push	{r4, lr}
	node_rx = ull_pdu_rx_alloc_peek(1);
   11192:	2001      	movs	r0, #1
   11194:	f7fc f902 	bl	d39c <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   11198:	4604      	mov	r4, r0
   1119a:	b960      	cbnz	r0, 111b6 <lll_conn_rx_pkt_set+0x26>
   1119c:	4a0d      	ldr	r2, [pc, #52]	; (111d4 <lll_conn_rx_pkt_set+0x44>)
   1119e:	490e      	ldr	r1, [pc, #56]	; (111d8 <lll_conn_rx_pkt_set+0x48>)
   111a0:	480e      	ldr	r0, [pc, #56]	; (111dc <lll_conn_rx_pkt_set+0x4c>)
   111a2:	f240 235a 	movw	r3, #602	; 0x25a
   111a6:	f005 fa28 	bl	165fa <printk>
   111aa:	4040      	eors	r0, r0
   111ac:	f380 8811 	msr	BASEPRI, r0
   111b0:	f04f 0003 	mov.w	r0, #3
   111b4:	df02      	svc	2
	radio_phy_set(phy, 0);
   111b6:	2100      	movs	r1, #0
   111b8:	4608      	mov	r0, r1
   111ba:	f000 fba5 	bl	11908 <radio_phy_set>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, max_rx_octets,
   111be:	2008      	movs	r0, #8
   111c0:	2201      	movs	r2, #1
   111c2:	211b      	movs	r1, #27
   111c4:	f000 fbe6 	bl	11994 <radio_pkt_configure>
		radio_pkt_rx_set(node_rx->pdu);
   111c8:	f104 001c 	add.w	r0, r4, #28
}
   111cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_pkt_rx_set(node_rx->pdu);
   111d0:	f000 bc06 	b.w	119e0 <radio_pkt_rx_set>
   111d4:	00020ca6 	.word	0x00020ca6
   111d8:	00020c1d 	.word	0x00020c1d
   111dc:	0002023c 	.word	0x0002023c

000111e0 <lll_conn_isr_tx>:
{
   111e0:	b570      	push	{r4, r5, r6, lr}
   111e2:	4605      	mov	r5, r0
	lll_isr_tx_status_reset();
   111e4:	f00b fb93 	bl	1c90e <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   111e8:	2096      	movs	r0, #150	; 0x96
   111ea:	f000 fd81 	bl	11cf0 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   111ee:	2300      	movs	r3, #0
   111f0:	4618      	mov	r0, r3
   111f2:	461a      	mov	r2, r3
   111f4:	4619      	mov	r1, r3
   111f6:	f000 fce9 	bl	11bcc <radio_switch_complete_and_tx>
	lll_conn_rx_pkt_set(lll);
   111fa:	4628      	mov	r0, r5
   111fc:	f7ff ffc8 	bl	11190 <lll_conn_rx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   11200:	f000 fc24 	bl	11a4c <radio_is_ready>
   11204:	b160      	cbz	r0, 11220 <lll_conn_isr_tx+0x40>
   11206:	4a12      	ldr	r2, [pc, #72]	; (11250 <lll_conn_isr_tx+0x70>)
   11208:	4912      	ldr	r1, [pc, #72]	; (11254 <lll_conn_isr_tx+0x74>)
   1120a:	4813      	ldr	r0, [pc, #76]	; (11258 <lll_conn_isr_tx+0x78>)
   1120c:	f240 2313 	movw	r3, #531	; 0x213
   11210:	f005 f9f3 	bl	165fa <printk>
   11214:	4040      	eors	r0, r0
   11216:	f380 8811 	msr	BASEPRI, r0
   1121a:	f04f 0003 	mov.w	r0, #3
   1121e:	df02      	svc	2
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + (EVENT_CLOCK_JITTER_US << 1) +
   11220:	f000 fe4e 	bl	11ec0 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(0, 0);
   11224:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + (EVENT_CLOCK_JITTER_US << 1) +
   11226:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(0, 0);
   11228:	4608      	mov	r0, r1
   1122a:	f00b fda1 	bl	1cd70 <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(0, 0);
   1122e:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(0, 0);
   11230:	4606      	mov	r6, r0
	hcto -= radio_tx_chain_delay_get(0, 0);
   11232:	4608      	mov	r0, r1
   11234:	f00b fd98 	bl	1cd68 <radio_tx_chain_delay_get>
   11238:	4434      	add	r4, r6
   1123a:	34cb      	adds	r4, #203	; 0xcb
	radio_tmr_hcto_configure(hcto);
   1123c:	1a20      	subs	r0, r4, r0
   1123e:	f000 fdf9 	bl	11e34 <radio_tmr_hcto_configure>
	radio_isr_set(lll_conn_isr_rx, param);
   11242:	4629      	mov	r1, r5
   11244:	4805      	ldr	r0, [pc, #20]	; (1125c <lll_conn_isr_tx+0x7c>)
}
   11246:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	radio_isr_set(lll_conn_isr_rx, param);
   1124a:	f000 bb19 	b.w	11880 <radio_isr_set>
   1124e:	bf00      	nop
   11250:	00020ca6 	.word	0x00020ca6
   11254:	00020c25 	.word	0x00020c25
   11258:	0002023c 	.word	0x0002023c
   1125c:	00011261 	.word	0x00011261

00011260 <lll_conn_isr_rx>:
{
   11260:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   11264:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   11266:	f000 fbfb 	bl	11a60 <radio_is_done>
	if (trx_done) {
   1126a:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
   1126e:	d010      	beq.n	11292 <lll_conn_isr_rx+0x32>
		crc_ok = radio_crc_is_valid();
   11270:	f000 fc16 	bl	11aa0 <radio_crc_is_valid>
   11274:	b2c7      	uxtb	r7, r0
		rssi_ready = radio_rssi_is_ready();
   11276:	f000 fce3 	bl	11c40 <radio_rssi_is_ready>
	lll_isr_rx_status_reset();
   1127a:	f00b fb4f 	bl	1c91c <lll_isr_rx_status_reset>
	if (!trx_done) {
   1127e:	b955      	cbnz	r5, 11296 <lll_conn_isr_rx+0x36>
		radio_isr_set(isr_done, param);
   11280:	489e      	ldr	r0, [pc, #632]	; (114fc <lll_conn_isr_rx+0x29c>)
   11282:	4621      	mov	r1, r4
   11284:	f000 fafc 	bl	11880 <radio_isr_set>
}
   11288:	b002      	add	sp, #8
   1128a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		radio_disable();
   1128e:	f000 bbbf 	b.w	11a10 <radio_disable>
		crc_ok = rssi_ready = 0U;
   11292:	462f      	mov	r7, r5
   11294:	e7f1      	b.n	1127a <lll_conn_isr_rx+0x1a>
	trx_cnt++;
   11296:	4a9a      	ldr	r2, [pc, #616]	; (11500 <lll_conn_isr_rx+0x2a0>)
   11298:	8813      	ldrh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   1129a:	2001      	movs	r0, #1
	trx_cnt++;
   1129c:	3301      	adds	r3, #1
   1129e:	8013      	strh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   112a0:	f7fc f87c 	bl	d39c <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   112a4:	4606      	mov	r6, r0
   112a6:	b958      	cbnz	r0, 112c0 <lll_conn_isr_rx+0x60>
   112a8:	4a96      	ldr	r2, [pc, #600]	; (11504 <lll_conn_isr_rx+0x2a4>)
   112aa:	4997      	ldr	r1, [pc, #604]	; (11508 <lll_conn_isr_rx+0x2a8>)
   112ac:	4897      	ldr	r0, [pc, #604]	; (1150c <lll_conn_isr_rx+0x2ac>)
   112ae:	23f2      	movs	r3, #242	; 0xf2
   112b0:	f005 f9a3 	bl	165fa <printk>
   112b4:	4040      	eors	r0, r0
   112b6:	f380 8811 	msr	BASEPRI, r0
   112ba:	f04f 0003 	mov.w	r0, #3
   112be:	df02      	svc	2
	if (crc_ok) {
   112c0:	f8df 824c 	ldr.w	r8, [pc, #588]	; 11510 <lll_conn_isr_rx+0x2b0>
   112c4:	2f00      	cmp	r7, #0
   112c6:	f000 80fa 	beq.w	114be <lll_conn_isr_rx+0x25e>
#elif !defined(HAL_RADIO_PDU_LEN_MAX)
#error "Undefined HAL_RADIO_PDU_LEN_MAX."
#endif

	/* Ack for tx-ed data */
	if (pdu_data_rx->nesn != lll->sn) {
   112ca:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
   112ce:	7f31      	ldrb	r1, [r6, #28]
   112d0:	f003 0201 	and.w	r2, r3, #1
   112d4:	f3c1 0180 	ubfx	r1, r1, #2, #1
   112d8:	4291      	cmp	r1, r2
   112da:	f000 80ab 	beq.w	11434 <lll_conn_isr_rx+0x1d4>
		struct pdu_data *pdu_data_tx;
		struct node_tx *tx;
		memq_link_t *link;

		/* Increment sequence number */
		lll->sn++;
   112de:	f082 0201 	eor.w	r2, r2, #1
   112e2:	f362 0300 	bfi	r3, r2, #0, #1
   112e6:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52

#if defined(CONFIG_BT_PERIPHERAL)
		/* First ack (and redundantly any other ack) enable use of
		 * peripheral latency.
		 */
		if (lll->role) {
   112ea:	f994 301d 	ldrsb.w	r3, [r4, #29]
   112ee:	2b00      	cmp	r3, #0
			lll->periph.latency_enabled = 1;
   112f0:	bfbe      	ittt	lt
   112f2:	f894 3020 	ldrblt.w	r3, [r4, #32]
   112f6:	f043 0304 	orrlt.w	r3, r3, #4
   112fa:	f884 3020 	strblt.w	r3, [r4, #32]
		}
#endif /* CONFIG_BT_PERIPHERAL */

		FORCE_MD_CNT_DEC();

		if (!lll->empty) {
   112fe:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
   11302:	f013 0504 	ands.w	r5, r3, #4
   11306:	f040 808f 	bne.w	11428 <lll_conn_isr_rx+0x1c8>
			link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail,
   1130a:	e9d4 010f 	ldrd	r0, r1, [r4, #60]	; 0x3c
   1130e:	aa01      	add	r2, sp, #4
   11310:	f00a fc44 	bl	1bb9c <memq_peek>
			}

			link = NULL;
		}

		if (link) {
   11314:	4681      	mov	r9, r0
   11316:	2800      	cmp	r0, #0
   11318:	f040 808f 	bne.w	1143a <lll_conn_isr_rx+0x1da>
			}
		}
	}

	/* process received data */
	if ((pdu_data_rx->sn == lll->nesn) &&
   1131c:	7f32      	ldrb	r2, [r6, #28]
   1131e:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
   11322:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   11326:	f3c3 0340 	ubfx	r3, r3, #1, #1
   1132a:	429a      	cmp	r2, r3
   1132c:	f000 80b3 	beq.w	11496 <lll_conn_isr_rx+0x236>
	is_rx_enqueue = 0U;
   11330:	f04f 0a00 	mov.w	sl, #0
		crc_valid = 1U;
   11334:	4b77      	ldr	r3, [pc, #476]	; (11514 <lll_conn_isr_rx+0x2b4>)
		crc_expire = 0U;
   11336:	2500      	movs	r5, #0
		crc_valid = 1U;
   11338:	2201      	movs	r2, #1
		crc_expire = 0U;
   1133a:	f888 5000 	strb.w	r5, [r8]
		crc_valid = 1U;
   1133e:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   11340:	a901      	add	r1, sp, #4
   11342:	4620      	mov	r0, r4
   11344:	f00b fc5d 	bl	1cc02 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   11348:	2d00      	cmp	r5, #0
   1134a:	f040 80cb 	bne.w	114e4 <lll_conn_isr_rx+0x284>
   1134e:	b157      	cbz	r7, 11366 <lll_conn_isr_rx+0x106>
   11350:	7f33      	ldrb	r3, [r6, #28]
   11352:	06d9      	lsls	r1, r3, #27
   11354:	d407      	bmi.n	11366 <lll_conn_isr_rx+0x106>
			      (pdu_data_tx->md == 0) &&
   11356:	9b01      	ldr	r3, [sp, #4]
   11358:	781a      	ldrb	r2, [r3, #0]
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1135a:	06d2      	lsls	r2, r2, #27
   1135c:	d403      	bmi.n	11366 <lll_conn_isr_rx+0x106>
			      (pdu_data_tx->md == 0) &&
   1135e:	785b      	ldrb	r3, [r3, #1]
   11360:	2b00      	cmp	r3, #0
   11362:	f000 80bf 	beq.w	114e4 <lll_conn_isr_rx+0x284>
		radio_tmr_tifs_set(EVENT_IFS_US);
   11366:	2096      	movs	r0, #150	; 0x96
   11368:	f000 fcc2 	bl	11cf0 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   1136c:	2000      	movs	r0, #0
   1136e:	f000 fc19 	bl	11ba4 <radio_switch_complete_and_rx>
		radio_isr_set(lll_conn_isr_tx, param);
   11372:	4869      	ldr	r0, [pc, #420]	; (11518 <lll_conn_isr_rx+0x2b8>)
   11374:	4621      	mov	r1, r4
   11376:	f000 fa83 	bl	11880 <radio_isr_set>
		radio_tmr_end_capture();
   1137a:	f000 fd93 	bl	11ea4 <radio_tmr_end_capture>
	pdu_data_tx->sn = lll->sn;
   1137e:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
   11382:	9901      	ldr	r1, [sp, #4]
   11384:	f3c3 0200 	ubfx	r2, r3, #0, #1
	pdu_data_tx->nesn = lll->nesn;
   11388:	f3c3 0340 	ubfx	r3, r3, #1, #1
   1138c:	009b      	lsls	r3, r3, #2
   1138e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   11392:	780a      	ldrb	r2, [r1, #0]
   11394:	f022 020c 	bic.w	r2, r2, #12
   11398:	4313      	orrs	r3, r2
   1139a:	700b      	strb	r3, [r1, #0]
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   1139c:	4620      	mov	r0, r4
   1139e:	f00b fc20 	bl	1cbe2 <lll_conn_tx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   113a2:	f000 fb53 	bl	11a4c <radio_is_ready>
   113a6:	b160      	cbz	r0, 113c2 <lll_conn_isr_rx+0x162>
   113a8:	4a56      	ldr	r2, [pc, #344]	; (11504 <lll_conn_isr_rx+0x2a4>)
   113aa:	495c      	ldr	r1, [pc, #368]	; (1151c <lll_conn_isr_rx+0x2bc>)
   113ac:	4857      	ldr	r0, [pc, #348]	; (1150c <lll_conn_isr_rx+0x2ac>)
   113ae:	f240 1369 	movw	r3, #361	; 0x169
   113b2:	f005 f922 	bl	165fa <printk>
   113b6:	4040      	eors	r0, r0
   113b8:	f380 8811 	msr	BASEPRI, r0
   113bc:	f04f 0003 	mov.w	r0, #3
   113c0:	df02      	svc	2
	if (!radio_tmr_aa_restore()) {
   113c2:	f000 fd63 	bl	11e8c <radio_tmr_aa_restore>
   113c6:	b918      	cbnz	r0, 113d0 <lll_conn_isr_rx+0x170>
		radio_tmr_aa_save(radio_tmr_aa_get());
   113c8:	f000 fd54 	bl	11e74 <radio_tmr_aa_get>
   113cc:	f000 fd58 	bl	11e80 <radio_tmr_aa_save>
	if (tx_release) {
   113d0:	f1b9 0f00 	cmp.w	r9, #0
   113d4:	f000 808d 	beq.w	114f2 <lll_conn_isr_rx+0x292>
		LL_ASSERT(lll->handle != 0xFFFF);
   113d8:	89a2      	ldrh	r2, [r4, #12]
   113da:	f64f 73ff 	movw	r3, #65535	; 0xffff
   113de:	429a      	cmp	r2, r3
   113e0:	d10c      	bne.n	113fc <lll_conn_isr_rx+0x19c>
   113e2:	4a48      	ldr	r2, [pc, #288]	; (11504 <lll_conn_isr_rx+0x2a4>)
   113e4:	494e      	ldr	r1, [pc, #312]	; (11520 <lll_conn_isr_rx+0x2c0>)
   113e6:	4849      	ldr	r0, [pc, #292]	; (1150c <lll_conn_isr_rx+0x2ac>)
   113e8:	f44f 73bc 	mov.w	r3, #376	; 0x178
   113ec:	f005 f905 	bl	165fa <printk>
   113f0:	4040      	eors	r0, r0
   113f2:	f380 8811 	msr	BASEPRI, r0
   113f6:	f04f 0003 	mov.w	r0, #3
   113fa:	df02      	svc	2
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   113fc:	89a0      	ldrh	r0, [r4, #12]
   113fe:	4649      	mov	r1, r9
   11400:	f7fe f8a6 	bl	f550 <ull_conn_lll_ack_enqueue>
	if (is_rx_enqueue) {
   11404:	f1ba 0f00 	cmp.w	sl, #0
   11408:	d009      	beq.n	1141e <lll_conn_isr_rx+0x1be>
		ull_pdu_rx_alloc();
   1140a:	f7fb ffdf 	bl	d3cc <ull_pdu_rx_alloc>
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   1140e:	2303      	movs	r3, #3
   11410:	7133      	strb	r3, [r6, #4]
		node_rx->hdr.handle = lll->handle;
   11412:	89a3      	ldrh	r3, [r4, #12]
		ull_rx_put(node_rx->hdr.link, node_rx);
   11414:	6830      	ldr	r0, [r6, #0]
		node_rx->hdr.handle = lll->handle;
   11416:	80f3      	strh	r3, [r6, #6]
		ull_rx_put(node_rx->hdr.link, node_rx);
   11418:	4631      	mov	r1, r6
   1141a:	f7fb ffed 	bl	d3f8 <ull_rx_put>
		ull_rx_sched();
   1141e:	f7fb fffb 	bl	d418 <ull_rx_sched>
}
   11422:	b002      	add	sp, #8
   11424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			lll->empty = 0;
   11428:	f36f 0382 	bfc	r3, #2, #1
   1142c:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
			pdu_data_tx = (void *)radio_pkt_empty_get();
   11430:	f000 fb40 	bl	11ab4 <radio_pkt_empty_get>
	tx_release = NULL;
   11434:	f04f 0900 	mov.w	r9, #0
   11438:	e770      	b.n	1131c <lll_conn_isr_rx+0xbc>
					       lll->packet_tx_head_offset);
   1143a:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
			pdu_data_tx_len = pdu_data_tx->len;
   1143e:	9a01      	ldr	r2, [sp, #4]
   11440:	441a      	add	r2, r3
			offset = lll->packet_tx_head_offset + pdu_data_tx_len;
   11442:	7952      	ldrb	r2, [r2, #5]
   11444:	4413      	add	r3, r2
			if (offset < lll->packet_tx_head_len) {
   11446:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
			offset = lll->packet_tx_head_offset + pdu_data_tx_len;
   1144a:	b2db      	uxtb	r3, r3
			if (offset < lll->packet_tx_head_len) {
   1144c:	4293      	cmp	r3, r2
   1144e:	d202      	bcs.n	11456 <lll_conn_isr_rx+0x1f6>
				lll->packet_tx_head_offset = offset;
   11450:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
   11454:	e7ee      	b.n	11434 <lll_conn_isr_rx+0x1d4>
			} else if (offset == lll->packet_tx_head_len) {
   11456:	d110      	bne.n	1147a <lll_conn_isr_rx+0x21a>
				memq_dequeue(lll->memq_tx.tail,
   11458:	462a      	mov	r2, r5
   1145a:	6c20      	ldr	r0, [r4, #64]	; 0x40
				lll->packet_tx_head_len = 0;
   1145c:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
				memq_dequeue(lll->memq_tx.tail,
   11460:	f104 013c 	add.w	r1, r4, #60	; 0x3c
   11464:	f00a fba2 	bl	1bbac <memq_dequeue>
				link->next = tx->next; /* Indicates ctrl or data
   11468:	9b01      	ldr	r3, [sp, #4]
   1146a:	681a      	ldr	r2, [r3, #0]
   1146c:	f8c9 2000 	str.w	r2, [r9]
				tx->next = link;
   11470:	f8c3 9000 	str.w	r9, [r3]
				*tx_release = tx;
   11474:	f8dd 9004 	ldr.w	r9, [sp, #4]
				FORCE_MD_CNT_SET();
   11478:	e750      	b.n	1131c <lll_conn_isr_rx+0xbc>
				LL_ASSERT(0);
   1147a:	4a22      	ldr	r2, [pc, #136]	; (11504 <lll_conn_isr_rx+0x2a4>)
   1147c:	4929      	ldr	r1, [pc, #164]	; (11524 <lll_conn_isr_rx+0x2c4>)
   1147e:	4823      	ldr	r0, [pc, #140]	; (1150c <lll_conn_isr_rx+0x2ac>)
   11480:	f240 33a3 	movw	r3, #931	; 0x3a3
   11484:	f005 f8b9 	bl	165fa <printk>
   11488:	4040      	eors	r0, r0
   1148a:	f380 8811 	msr	BASEPRI, r0
   1148e:	f04f 0003 	mov.w	r0, #3
   11492:	df02      	svc	2
   11494:	e7ce      	b.n	11434 <lll_conn_isr_rx+0x1d4>
	    /* check so that we will NEVER use the rx buffer reserved for empty
	     * packet and internal control enqueue
	     */
	    (ull_pdu_rx_alloc_peek(3) != 0)) {
   11496:	2003      	movs	r0, #3
   11498:	f7fb ff80 	bl	d39c <ull_pdu_rx_alloc_peek>
	if ((pdu_data_rx->sn == lll->nesn) &&
   1149c:	2800      	cmp	r0, #0
   1149e:	f43f af47 	beq.w	11330 <lll_conn_isr_rx+0xd0>
		/* Increment next expected serial number */
		lll->nesn++;
   114a2:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
   114a6:	f083 0302 	eor.w	r3, r3, #2
   114aa:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52

		if (pdu_data_rx->len != 0) {
   114ae:	f896 a01d 	ldrb.w	sl, [r6, #29]
	is_rx_enqueue = 0U;
   114b2:	f1ba 0a00 	subs.w	sl, sl, #0
   114b6:	bf18      	it	ne
   114b8:	f04f 0a01 	movne.w	sl, #1
   114bc:	e73a      	b.n	11334 <lll_conn_isr_rx+0xd4>
		if (crc_expire == 0U) {
   114be:	f898 3000 	ldrb.w	r3, [r8]
   114c2:	b913      	cbnz	r3, 114ca <lll_conn_isr_rx+0x26a>
			crc_expire = 2U;
   114c4:	2302      	movs	r3, #2
   114c6:	f888 3000 	strb.w	r3, [r8]
		crc_expire--;
   114ca:	f898 5000 	ldrb.w	r5, [r8]
   114ce:	3d01      	subs	r5, #1
   114d0:	b2ed      	uxtb	r5, r5
   114d2:	f888 5000 	strb.w	r5, [r8]
	is_rx_enqueue = 0U;
   114d6:	f04f 0a00 	mov.w	sl, #0
		is_done = (crc_expire == 0U);
   114da:	fab5 f585 	clz	r5, r5
   114de:	096d      	lsrs	r5, r5, #5
	tx_release = NULL;
   114e0:	46d1      	mov	r9, sl
   114e2:	e72d      	b.n	11340 <lll_conn_isr_rx+0xe0>
		radio_isr_set(isr_done, param);
   114e4:	4805      	ldr	r0, [pc, #20]	; (114fc <lll_conn_isr_rx+0x29c>)
   114e6:	4621      	mov	r1, r4
   114e8:	f000 f9ca 	bl	11880 <radio_isr_set>
			radio_switch_complete_and_disable();
   114ec:	f000 fb82 	bl	11bf4 <radio_switch_complete_and_disable>
   114f0:	e745      	b.n	1137e <lll_conn_isr_rx+0x11e>
	if (is_rx_enqueue) {
   114f2:	f1ba 0f00 	cmp.w	sl, #0
   114f6:	d094      	beq.n	11422 <lll_conn_isr_rx+0x1c2>
   114f8:	e787      	b.n	1140a <lll_conn_isr_rx+0x1aa>
   114fa:	bf00      	nop
   114fc:	00011095 	.word	0x00011095
   11500:	20002b16 	.word	0x20002b16
   11504:	00020ca6 	.word	0x00020ca6
   11508:	00020c1d 	.word	0x00020c1d
   1150c:	0002023c 	.word	0x0002023c
   11510:	20002b77 	.word	0x20002b77
   11514:	20002b78 	.word	0x20002b78
   11518:	000111e1 	.word	0x000111e1
   1151c:	00020c25 	.word	0x00020c25
   11520:	00020cf1 	.word	0x00020cf1
   11524:	00020e86 	.word	0x00020e86

00011528 <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *p)
{
   11528:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint32_t remainder;
	uint32_t hcto;

	DEBUG_RADIO_START_S(1);

	lll = p->param;
   1152c:	68c4      	ldr	r4, [r0, #12]

	/* Check if stopped (on disconnection between prepare and pre-empt)
	 */
	if (unlikely(lll->handle == 0xFFFF)) {
   1152e:	89a2      	ldrh	r2, [r4, #12]
   11530:	f64f 73ff 	movw	r3, #65535	; 0xffff
   11534:	429a      	cmp	r2, r3
{
   11536:	4606      	mov	r6, r0
	if (unlikely(lll->handle == 0xFFFF)) {
   11538:	d109      	bne.n	1154e <prepare_cb+0x26>
		radio_isr_set(lll_isr_early_abort, lll);
   1153a:	485c      	ldr	r0, [pc, #368]	; (116ac <prepare_cb+0x184>)
   1153c:	4621      	mov	r1, r4
#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(ull, (TICKER_ID_CONN_BASE + lll->handle),
			     ticks_at_event)) {
		radio_isr_set(lll_isr_abort, lll);
   1153e:	f000 f99f 	bl	11880 <radio_isr_set>
		radio_disable();
   11542:	f000 fa65 	bl	11a10 <radio_disable>
	}

	DEBUG_RADIO_START_S(1);

	return 0;
}
   11546:	2000      	movs	r0, #0
   11548:	b002      	add	sp, #8
   1154a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	lll_conn_prepare_reset();
   1154e:	f7ff fde3 	bl	11118 <lll_conn_prepare_reset>
	lll->latency_event = lll->latency_prepare + p->lazy;
   11552:	8933      	ldrh	r3, [r6, #8]
   11554:	8a62      	ldrh	r2, [r4, #18]
   11556:	441a      	add	r2, r3
	lll->event_counter = (event_counter + 1);
   11558:	8ae3      	ldrh	r3, [r4, #22]
	lll->latency_event = lll->latency_prepare + p->lazy;
   1155a:	b292      	uxth	r2, r2
	lll->event_counter = (event_counter + 1);
   1155c:	3301      	adds	r3, #1
   1155e:	4413      	add	r3, r2
   11560:	82e3      	strh	r3, [r4, #22]
	if (lll->data_chan_sel) {
   11562:	7f63      	ldrb	r3, [r4, #29]
	lll->latency_event = lll->latency_prepare + p->lazy;
   11564:	82a2      	strh	r2, [r4, #20]
	lll->latency_prepare = 0;
   11566:	2500      	movs	r5, #0
	if (lll->data_chan_sel) {
   11568:	0659      	lsls	r1, r3, #25
	lll->latency_prepare = 0;
   1156a:	8265      	strh	r5, [r4, #18]
	if (lll->data_chan_sel) {
   1156c:	d57e      	bpl.n	1166c <prepare_cb+0x144>
		LL_ASSERT(0);
   1156e:	4a50      	ldr	r2, [pc, #320]	; (116b0 <prepare_cb+0x188>)
   11570:	4950      	ldr	r1, [pc, #320]	; (116b4 <prepare_cb+0x18c>)
   11572:	4851      	ldr	r0, [pc, #324]	; (116b8 <prepare_cb+0x190>)
   11574:	2399      	movs	r3, #153	; 0x99
   11576:	f005 f840 	bl	165fa <printk>
   1157a:	4040      	eors	r0, r0
   1157c:	f380 8811 	msr	BASEPRI, r0
   11580:	f04f 0003 	mov.w	r0, #3
   11584:	df02      	svc	2
	lll->periph.window_widening_event_us +=
   11586:	e9d4 230b 	ldrd	r2, r3, [r4, #44]	; 0x2c
	    lll->periph.window_widening_max_us) {
   1158a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	lll->periph.window_widening_event_us +=
   1158c:	4413      	add	r3, r2
		lll->periph.window_widening_event_us =
   1158e:	4299      	cmp	r1, r3
   11590:	bf94      	ite	ls
   11592:	6321      	strls	r1, [r4, #48]	; 0x30
   11594:	6323      	strhi	r3, [r4, #48]	; 0x30
	lll->periph.window_size_event_us +=
   11596:	e9d4 130d 	ldrd	r1, r3, [r4, #52]	; 0x34
	lll->periph.window_widening_prepare_us = 0;
   1159a:	2200      	movs	r2, #0
	lll->periph.window_size_event_us +=
   1159c:	440b      	add	r3, r1
	lll->periph.window_size_prepare_us = 0;
   1159e:	e9c4 230d 	strd	r2, r3, [r4, #52]	; 0x34
	lll->periph.window_widening_prepare_us = 0;
   115a2:	62e2      	str	r2, [r4, #44]	; 0x2c
	if (!lll->empty) {
   115a4:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
   115a8:	f012 0204 	ands.w	r2, r2, #4
   115ac:	d10a      	bne.n	115c4 <prepare_cb+0x9c>
		link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, NULL);
   115ae:	e9d4 010f 	ldrd	r0, r1, [r4, #60]	; 0x3c
   115b2:	f00a faf3 	bl	1bb9c <memq_peek>
		if (!link) {
   115b6:	b928      	cbnz	r0, 115c4 <prepare_cb+0x9c>
			lll->empty = 1U;
   115b8:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
   115bc:	f043 0304 	orr.w	r3, r3, #4
   115c0:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
	radio_reset();
   115c4:	f000 f97c 	bl	118c0 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   115c8:	2000      	movs	r0, #0
   115ca:	f000 f9ad 	bl	11928 <radio_tx_power_set>
	lll_conn_rx_pkt_set(lll);
   115ce:	4620      	mov	r0, r4
   115d0:	f7ff fdde 	bl	11190 <lll_conn_rx_pkt_set>
	radio_aa_set(lll->access_addr);
   115d4:	1d20      	adds	r0, r4, #4
   115d6:	f000 f9c5 	bl	11964 <radio_aa_set>
	return ((uint32_t)src[2] << 16) | sys_get_le16(&src[0]);
   115da:	8923      	ldrh	r3, [r4, #8]
   115dc:	7aa1      	ldrb	r1, [r4, #10]
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   115de:	f240 605b 	movw	r0, #1627	; 0x65b
   115e2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   115e6:	f000 fa4f 	bl	11a88 <radio_crc_configure>
	lll_chan_set(data_chan_use);
   115ea:	4628      	mov	r0, r5
   115ec:	f7fe fca0 	bl	ff30 <lll_chan_set>
	radio_isr_set(lll_conn_isr_rx, lll);
   115f0:	4621      	mov	r1, r4
   115f2:	4832      	ldr	r0, [pc, #200]	; (116bc <prepare_cb+0x194>)
   115f4:	f000 f944 	bl	11880 <radio_isr_set>
	radio_tmr_tifs_set(EVENT_IFS_US);
   115f8:	2096      	movs	r0, #150	; 0x96
   115fa:	f000 fb79 	bl	11cf0 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
   115fe:	2300      	movs	r3, #0
   11600:	461a      	mov	r2, r3
   11602:	4619      	mov	r1, r3
   11604:	4618      	mov	r0, r3
   11606:	f000 fae1 	bl	11bcc <radio_switch_complete_and_tx>
	ull = HDR_LLL2ULL(lll);
   1160a:	f8d4 8000 	ldr.w	r8, [r4]
	ticks_at_event = p->ticks_at_expire;
   1160e:	6837      	ldr	r7, [r6, #0]
	ticks_at_event += lll_event_offset_get(ull);
   11610:	4640      	mov	r0, r8
   11612:	f00b f95d 	bl	1c8d0 <lll_event_offset_get>
   11616:	4407      	add	r7, r0
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   11618:	6872      	ldr	r2, [r6, #4]
   1161a:	f107 0109 	add.w	r1, r7, #9
   1161e:	2000      	movs	r0, #0
   11620:	f000 fb72 	bl	11d08 <radio_tmr_start>
   11624:	4605      	mov	r5, r0
	radio_tmr_aa_capture();
   11626:	f000 fc11 	bl	11e4c <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   1162a:	2000      	movs	r0, #0
   1162c:	f000 fc28 	bl	11e80 <radio_tmr_aa_save>
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
   11630:	6b26      	ldr	r6, [r4, #48]	; 0x30
   11632:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	hcto += radio_rx_ready_delay_get(0, 0);
   11634:	2100      	movs	r1, #0
   11636:	eb03 0346 	add.w	r3, r3, r6, lsl #1
   1163a:	4608      	mov	r0, r1
   1163c:	f103 0688 	add.w	r6, r3, #136	; 0x88
   11640:	f00b fb94 	bl	1cd6c <radio_rx_ready_delay_get>
	hcto += addr_us_get(0);
   11644:	4435      	add	r5, r6
	hcto += radio_rx_chain_delay_get(0, 0);
   11646:	2100      	movs	r1, #0
	hcto += addr_us_get(0);
   11648:	4405      	add	r5, r0
	hcto += radio_rx_chain_delay_get(0, 0);
   1164a:	4608      	mov	r0, r1
   1164c:	f00b fb90 	bl	1cd70 <radio_rx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   11650:	4428      	add	r0, r5
   11652:	f000 fbef 	bl	11e34 <radio_tmr_hcto_configure>
	if (lll_preempt_calc(ull, (TICKER_ID_CONN_BASE + lll->handle),
   11656:	89a1      	ldrh	r1, [r4, #12]
   11658:	3105      	adds	r1, #5
   1165a:	463a      	mov	r2, r7
   1165c:	b2c9      	uxtb	r1, r1
   1165e:	4640      	mov	r0, r8
   11660:	f00b f944 	bl	1c8ec <lll_preempt_calc>
   11664:	b170      	cbz	r0, 11684 <prepare_cb+0x15c>
		radio_isr_set(lll_isr_abort, lll);
   11666:	4816      	ldr	r0, [pc, #88]	; (116c0 <prepare_cb+0x198>)
   11668:	4621      	mov	r1, r4
   1166a:	e768      	b.n	1153e <prepare_cb+0x16>
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   1166c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   11670:	7fa1      	ldrb	r1, [r4, #30]
   11672:	9300      	str	r3, [sp, #0]
   11674:	f104 001f 	add.w	r0, r4, #31
   11678:	f104 0318 	add.w	r3, r4, #24
   1167c:	f00b f8b1 	bl	1c7e2 <lll_chan_sel_1>
   11680:	4605      	mov	r5, r0
   11682:	e780      	b.n	11586 <prepare_cb+0x5e>
		ret = lll_prepare_done(lll);
   11684:	4620      	mov	r0, r4
   11686:	f00b f91e 	bl	1c8c6 <lll_prepare_done>
		LL_ASSERT(!ret);
   1168a:	2800      	cmp	r0, #0
   1168c:	f43f af5b 	beq.w	11546 <prepare_cb+0x1e>
   11690:	4a07      	ldr	r2, [pc, #28]	; (116b0 <prepare_cb+0x188>)
   11692:	490c      	ldr	r1, [pc, #48]	; (116c4 <prepare_cb+0x19c>)
   11694:	4808      	ldr	r0, [pc, #32]	; (116b8 <prepare_cb+0x190>)
   11696:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   1169a:	f004 ffae 	bl	165fa <printk>
   1169e:	4040      	eors	r0, r0
   116a0:	f380 8811 	msr	BASEPRI, r0
   116a4:	f04f 0003 	mov.w	r0, #3
   116a8:	df02      	svc	2
   116aa:	e74c      	b.n	11546 <prepare_cb+0x1e>
   116ac:	0000ffe9 	.word	0x0000ffe9
   116b0:	00020d07 	.word	0x00020d07
   116b4:	00020e86 	.word	0x00020e86
   116b8:	0002023c 	.word	0x0002023c
   116bc:	00011261 	.word	0x00011261
   116c0:	0001c949 	.word	0x0001c949
   116c4:	00020608 	.word	0x00020608

000116c8 <lll_periph_prepare>:
{
   116c8:	b513      	push	{r0, r1, r4, lr}
   116ca:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   116cc:	f7fe fdae 	bl	1022c <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   116d0:	2800      	cmp	r0, #0
   116d2:	da0b      	bge.n	116ec <lll_periph_prepare+0x24>
   116d4:	4a17      	ldr	r2, [pc, #92]	; (11734 <lll_periph_prepare+0x6c>)
   116d6:	4918      	ldr	r1, [pc, #96]	; (11738 <lll_periph_prepare+0x70>)
   116d8:	4818      	ldr	r0, [pc, #96]	; (1173c <lll_periph_prepare+0x74>)
   116da:	234d      	movs	r3, #77	; 0x4d
   116dc:	f004 ff8d 	bl	165fa <printk>
   116e0:	4040      	eors	r0, r0
   116e2:	f380 8811 	msr	BASEPRI, r0
   116e6:	f04f 0003 	mov.w	r0, #3
   116ea:	df02      	svc	2
	lll = p->param;
   116ec:	68e2      	ldr	r2, [r4, #12]
	    lll->periph.window_widening_periodic_us * (p->lazy + 1);
   116ee:	8921      	ldrh	r1, [r4, #8]
   116f0:	6a53      	ldr	r3, [r2, #36]	; 0x24
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   116f2:	4813      	ldr	r0, [pc, #76]	; (11740 <lll_periph_prepare+0x78>)
	    lll->periph.window_widening_periodic_us * (p->lazy + 1);
   116f4:	fb01 3303 	mla	r3, r1, r3, r3
	lll->periph.window_widening_prepare_us +=
   116f8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   116fa:	440b      	add	r3, r1
	    lll->periph.window_widening_max_us) {
   116fc:	6a91      	ldr	r1, [r2, #40]	; 0x28
		lll->periph.window_widening_prepare_us =
   116fe:	4299      	cmp	r1, r3
   11700:	bf94      	ite	ls
   11702:	62d1      	strls	r1, [r2, #44]	; 0x2c
   11704:	62d3      	strhi	r3, [r2, #44]	; 0x2c
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   11706:	4a0f      	ldr	r2, [pc, #60]	; (11744 <lll_periph_prepare+0x7c>)
   11708:	490f      	ldr	r1, [pc, #60]	; (11748 <lll_periph_prepare+0x80>)
   1170a:	9400      	str	r4, [sp, #0]
   1170c:	2300      	movs	r3, #0
   1170e:	f00a fdda 	bl	1c2c6 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   11712:	b168      	cbz	r0, 11730 <lll_periph_prepare+0x68>
   11714:	3077      	adds	r0, #119	; 0x77
   11716:	d00b      	beq.n	11730 <lll_periph_prepare+0x68>
   11718:	4a06      	ldr	r2, [pc, #24]	; (11734 <lll_periph_prepare+0x6c>)
   1171a:	490c      	ldr	r1, [pc, #48]	; (1174c <lll_periph_prepare+0x84>)
   1171c:	4807      	ldr	r0, [pc, #28]	; (1173c <lll_periph_prepare+0x74>)
   1171e:	235e      	movs	r3, #94	; 0x5e
   11720:	f004 ff6b 	bl	165fa <printk>
   11724:	4040      	eors	r0, r0
   11726:	f380 8811 	msr	BASEPRI, r0
   1172a:	f04f 0003 	mov.w	r0, #3
   1172e:	df02      	svc	2
}
   11730:	b002      	add	sp, #8
   11732:	bd10      	pop	{r4, pc}
   11734:	00020d07 	.word	0x00020d07
   11738:	00020ba1 	.word	0x00020ba1
   1173c:	0002023c 	.word	0x0002023c
   11740:	0001c8cb 	.word	0x0001c8cb
   11744:	00011529 	.word	0x00011529
   11748:	00011135 	.word	0x00011135
   1174c:	00020c47 	.word	0x00020c47

00011750 <cntr_init>:

static uint8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   11750:	4b05      	ldr	r3, [pc, #20]	; (11768 <cntr_init+0x18>)
   11752:	2200      	movs	r2, #0
   11754:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   11758:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1175c:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->INTENSET = mask;
   11760:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk);
}
   11764:	4770      	bx	lr
   11766:	bf00      	nop
   11768:	4000b000 	.word	0x4000b000

0001176c <cntr_start>:

uint32_t cntr_start(void)
{
	if (_refcount++) {
   1176c:	4a04      	ldr	r2, [pc, #16]	; (11780 <cntr_start+0x14>)
   1176e:	7813      	ldrb	r3, [r2, #0]
   11770:	1c59      	adds	r1, r3, #1
   11772:	7011      	strb	r1, [r2, #0]
   11774:	2001      	movs	r0, #1
   11776:	b913      	cbnz	r3, 1177e <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   11778:	4a02      	ldr	r2, [pc, #8]	; (11784 <cntr_start+0x18>)
   1177a:	6010      	str	r0, [r2, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
   1177c:	4618      	mov	r0, r3
}
   1177e:	4770      	bx	lr
   11780:	20002b79 	.word	0x20002b79
   11784:	4000b000 	.word	0x4000b000

00011788 <cntr_stop>:

uint32_t cntr_stop(void)
{
   11788:	b510      	push	{r4, lr}
	LL_ASSERT(_refcount);
   1178a:	4c0d      	ldr	r4, [pc, #52]	; (117c0 <cntr_stop+0x38>)
   1178c:	7823      	ldrb	r3, [r4, #0]
   1178e:	b95b      	cbnz	r3, 117a8 <cntr_stop+0x20>
   11790:	4a0c      	ldr	r2, [pc, #48]	; (117c4 <cntr_stop+0x3c>)
   11792:	490d      	ldr	r1, [pc, #52]	; (117c8 <cntr_stop+0x40>)
   11794:	480d      	ldr	r0, [pc, #52]	; (117cc <cntr_stop+0x44>)
   11796:	232d      	movs	r3, #45	; 0x2d
   11798:	f004 ff2f 	bl	165fa <printk>
   1179c:	4040      	eors	r0, r0
   1179e:	f380 8811 	msr	BASEPRI, r0
   117a2:	f04f 0003 	mov.w	r0, #3
   117a6:	df02      	svc	2

	if (--_refcount) {
   117a8:	7820      	ldrb	r0, [r4, #0]
   117aa:	3801      	subs	r0, #1
   117ac:	b2c0      	uxtb	r0, r0
   117ae:	7020      	strb	r0, [r4, #0]
   117b0:	2301      	movs	r3, #1
   117b2:	b910      	cbnz	r0, 117ba <cntr_stop+0x32>
   117b4:	4a06      	ldr	r2, [pc, #24]	; (117d0 <cntr_stop+0x48>)
   117b6:	6053      	str	r3, [r2, #4]
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
}
   117b8:	bd10      	pop	{r4, pc}
		return 1;
   117ba:	4618      	mov	r0, r3
   117bc:	e7fc      	b.n	117b8 <cntr_stop+0x30>
   117be:	bf00      	nop
   117c0:	20002b79 	.word	0x20002b79
   117c4:	00020d58 	.word	0x00020d58
   117c8:	00020da4 	.word	0x00020da4
   117cc:	0002023c 	.word	0x0002023c
   117d0:	4000b000 	.word	0x4000b000

000117d4 <cntr_cnt_get>:
     return p_reg->COUNTER;
   117d4:	4b01      	ldr	r3, [pc, #4]	; (117dc <cntr_cnt_get+0x8>)
   117d6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

uint32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
   117da:	4770      	bx	lr
   117dc:	4000b000 	.word	0x4000b000

000117e0 <cntr_cmp_set>:
    p_reg->CC[ch] = cc_val;
   117e0:	4b02      	ldr	r3, [pc, #8]	; (117ec <cntr_cmp_set+0xc>)
   117e2:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   117e6:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(uint8_t cmp, uint32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
   117ea:	4770      	bx	lr
   117ec:	4000b000 	.word	0x4000b000

000117f0 <do_ecb>:

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   117f0:	4b10      	ldr	r3, [pc, #64]	; (11834 <do_ecb+0x44>)
	uint8_t clear_text[16];
	uint8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
   117f2:	b530      	push	{r4, r5, lr}
   117f4:	2201      	movs	r2, #1
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
   117f6:	2400      	movs	r4, #0
   117f8:	605a      	str	r2, [r3, #4]
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   117fa:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   117fe:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   11802:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
   11806:	601a      	str	r2, [r3, #0]
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   11808:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
   1180c:	b931      	cbnz	r1, 1181c <do_ecb+0x2c>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   1180e:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   11812:	b919      	cbnz	r1, 1181c <do_ecb+0x2c>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   11814:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   11818:	2900      	cmp	r1, #0
   1181a:	d1f5      	bne.n	11808 <do_ecb+0x18>
   1181c:	605a      	str	r2, [r3, #4]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   1181e:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
   11822:	2900      	cmp	r1, #0
   11824:	d1e8      	bne.n	117f8 <do_ecb+0x8>
   11826:	f8d3 5504 	ldr.w	r5, [r3, #1284]	; 0x504
   1182a:	2d00      	cmp	r5, #0
   1182c:	d0e4      	beq.n	117f8 <do_ecb+0x8>

	NRF_ECB->ECBDATAPTR = 0;
   1182e:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
}
   11832:	bd30      	pop	{r4, r5, pc}
   11834:	4000e000 	.word	0x4000e000

00011838 <hal_radio_enable_on_tick_ppi_config_and_enable>:
static inline void hal_radio_enable_on_tick_ppi_config_and_enable(uint8_t trx)
{
	/* No need to configure anything for the pre-programmed channels.
	 * Just enable and disable them accordingly.
	 */
	nrf_ppi_channels_disable(
   11838:	2800      	cmp	r0, #0
    p_reg->CHENSET = mask;
}

NRF_STATIC_INLINE void nrf_ppi_channels_disable(NRF_PPI_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
   1183a:	4b08      	ldr	r3, [pc, #32]	; (1185c <hal_radio_enable_on_tick_ppi_config_and_enable+0x24>)
   1183c:	bf14      	ite	ne
   1183e:	f44f 1200 	movne.w	r2, #2097152	; 0x200000
   11842:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
   11846:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
		NRF_PPI,
		trx ? BIT(HAL_RADIO_ENABLE_RX_ON_TICK_PPI)
		    : BIT(HAL_RADIO_ENABLE_TX_ON_TICK_PPI));
	nrf_ppi_channels_enable(
   1184a:	bf14      	ite	ne
   1184c:	f44f 1280 	movne.w	r2, #1048576	; 0x100000
   11850:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
    p_reg->CHENSET = mask;
   11854:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		NRF_PPI,
		trx ? BIT(HAL_RADIO_ENABLE_TX_ON_TICK_PPI)
		    : BIT(HAL_RADIO_ENABLE_RX_ON_TICK_PPI));
}
   11858:	4770      	bx	lr
   1185a:	bf00      	nop
   1185c:	4001f000 	.word	0x4001f000

00011860 <isr_radio>:
}
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

uint32_t radio_has_disabled(void)
{
	return (NRF_RADIO->EVENTS_DISABLED != 0);
   11860:	4b04      	ldr	r3, [pc, #16]	; (11874 <isr_radio+0x14>)
   11862:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (radio_has_disabled()) {
   11866:	b123      	cbz	r3, 11872 <isr_radio+0x12>
		isr_cb(isr_cb_param);
   11868:	4b03      	ldr	r3, [pc, #12]	; (11878 <isr_radio+0x18>)
   1186a:	4a04      	ldr	r2, [pc, #16]	; (1187c <isr_radio+0x1c>)
   1186c:	681b      	ldr	r3, [r3, #0]
   1186e:	6810      	ldr	r0, [r2, #0]
   11870:	4718      	bx	r3
}
   11872:	4770      	bx	lr
   11874:	40001000 	.word	0x40001000
   11878:	200027cc 	.word	0x200027cc
   1187c:	200027d0 	.word	0x200027d0

00011880 <radio_isr_set>:
{
   11880:	b538      	push	{r3, r4, r5, lr}
   11882:	4604      	mov	r4, r0
	irq_disable(RADIO_IRQn);
   11884:	2001      	movs	r0, #1
{
   11886:	460d      	mov	r5, r1
	irq_disable(RADIO_IRQn);
   11888:	f7f2 f9f8 	bl	3c7c <arch_irq_disable>
	isr_cb_param = param;
   1188c:	4b08      	ldr	r3, [pc, #32]	; (118b0 <radio_isr_set+0x30>)
   1188e:	601d      	str	r5, [r3, #0]
	isr_cb = cb;
   11890:	4b08      	ldr	r3, [pc, #32]	; (118b4 <radio_isr_set+0x34>)
   11892:	601c      	str	r4, [r3, #0]
    return p_reg->SHORTS;
}

NRF_STATIC_INLINE void nrf_radio_int_enable(NRF_RADIO_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   11894:	4b08      	ldr	r3, [pc, #32]	; (118b8 <radio_isr_set+0x38>)
   11896:	2210      	movs	r2, #16
   11898:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1189c:	4b07      	ldr	r3, [pc, #28]	; (118bc <radio_isr_set+0x3c>)
   1189e:	2202      	movs	r2, #2
   118a0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
   118a4:	2001      	movs	r0, #1
}
   118a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	irq_enable(RADIO_IRQn);
   118aa:	f7f2 b9d7 	b.w	3c5c <arch_irq_enable>
   118ae:	bf00      	nop
   118b0:	200027d0 	.word	0x200027d0
   118b4:	200027cc 	.word	0x200027cc
   118b8:	40001000 	.word	0x40001000
   118bc:	e000e100 	.word	0xe000e100

000118c0 <radio_reset>:
{
   118c0:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
   118c2:	2001      	movs	r0, #1
   118c4:	f7f2 f9da 	bl	3c7c <arch_irq_disable>
}
#endif

NRF_STATIC_INLINE void nrf_radio_power_set(NRF_RADIO_Type * p_reg, bool radio_power)
{
    p_reg->POWER = (radio_power ? RADIO_POWER_POWER_Enabled : RADIO_POWER_POWER_Disabled)
   118c8:	4a0d      	ldr	r2, [pc, #52]	; (11900 <radio_reset+0x40>)
   118ca:	2300      	movs	r3, #0
   118cc:	f8c2 3ffc 	str.w	r3, [r2, #4092]	; 0xffc
   118d0:	2301      	movs	r3, #1
   118d2:	f8c2 3ffc 	str.w	r3, [r2, #4092]	; 0xffc
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

static inline void hal_radio_reset(void)
{
	/* Anomalies 102, 106 and 107 */
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   118d6:	f8d2 3774 	ldr.w	r3, [r2, #1908]	; 0x774
					 0xfffffffe) | 0x01000000;
   118da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   118de:	f023 0301 	bic.w	r3, r3, #1
   118e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   118e6:	f8c2 3774 	str.w	r3, [r2, #1908]	; 0x774
static inline void hal_radio_sw_switch_ppi_group_setup(void)
{
	/* Include the appropriate PPI channels in the two PPI Groups. */
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || \
	!defined(CONFIG_HAS_HW_NRF_RADIO_BLE_CODED)
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   118ea:	4b06      	ldr	r3, [pc, #24]	; (11904 <radio_reset+0x44>)
   118ec:	f44f 5290 	mov.w	r2, #4608	; 0x1200
   118f0:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		BIT(HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) |
#if defined(CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE)
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PHYEND_DELAY_COMPENSATION_PPI(0)) |
#endif /* CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE */
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PPI(0));
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   118f4:	f44f 5210 	mov.w	r2, #9216	; 0x2400
   118f8:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
}
   118fc:	bd08      	pop	{r3, pc}
   118fe:	bf00      	nop
   11900:	40001000 	.word	0x40001000
   11904:	4001f000 	.word	0x4001f000

00011908 <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   11908:	4b06      	ldr	r3, [pc, #24]	; (11924 <radio_phy_set+0x1c>)
	default:
		mode = RADIO_MODE_MODE_Ble_1Mbit;
		break;

	case BIT(1):
		mode = RADIO_MODE_MODE_Ble_2Mbit;
   1190a:	2802      	cmp	r0, #2
   1190c:	bf14      	ite	ne
   1190e:	2203      	movne	r2, #3
   11910:	2204      	moveq	r2, #4
   11912:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   11916:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   1191a:	f042 0201 	orr.w	r2, r2, #1
   1191e:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
   11922:	4770      	bx	lr
   11924:	40001000 	.word	0x40001000

00011928 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = (uint32_t)power;
   11928:	4b01      	ldr	r3, [pc, #4]	; (11930 <radio_tx_power_set+0x8>)
   1192a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   1192e:	4770      	bx	lr
   11930:	40001000 	.word	0x40001000

00011934 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   11934:	4b01      	ldr	r3, [pc, #4]	; (1193c <radio_freq_chan_set+0x8>)
   11936:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
   1193a:	4770      	bx	lr
   1193c:	40001000 	.word	0x40001000

00011940 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   11940:	4b07      	ldr	r3, [pc, #28]	; (11960 <radio_whiten_iv_set+0x20>)
   11942:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   11946:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1194a:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   1194e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   11952:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   11956:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   1195a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   1195e:	4770      	bx	lr
   11960:	40001000 	.word	0x40001000

00011964 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   11964:	4a0a      	ldr	r2, [pc, #40]	; (11990 <radio_aa_set+0x2c>)
   11966:	2300      	movs	r3, #0
   11968:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   1196c:	2301      	movs	r3, #1
   1196e:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   11972:	78c3      	ldrb	r3, [r0, #3]
   11974:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   11978:	7843      	ldrb	r3, [r0, #1]
   1197a:	7881      	ldrb	r1, [r0, #2]
   1197c:	041b      	lsls	r3, r3, #16
   1197e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   11982:	7801      	ldrb	r1, [r0, #0]
   11984:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   11988:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
   1198c:	4770      	bx	lr
   1198e:	bf00      	nop
   11990:	40001000 	.word	0x40001000

00011994 <radio_pkt_configure>:
	switch (phy) {
   11994:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   11998:	2b02      	cmp	r3, #2
   1199a:	bf14      	ite	ne
   1199c:	2300      	movne	r3, #0
   1199e:	f04f 7380 	moveq.w	r3, #16777216	; 0x1000000
	if (pdu_type == RADIO_PKT_CONF_PDU_TYPE_DC) {
   119a2:	07d2      	lsls	r2, r2, #31
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   119a4:	bf48      	it	mi
   119a6:	f443 1380 	orrmi.w	r3, r3, #1048576	; 0x100000
		((((uint32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) & RADIO_PCNF0_LFLEN_Msk) |
   119aa:	f000 000f 	and.w	r0, r0, #15
		((((uint32_t)bits_s1) << RADIO_PCNF0_S1LEN_Pos) & RADIO_PCNF0_S1LEN_Msk) | extra;
   119ae:	4318      	orrs	r0, r3
	NRF_RADIO->PCNF0 =
   119b0:	4b09      	ldr	r3, [pc, #36]	; (119d8 <radio_pkt_configure+0x44>)
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   119b2:	4a0a      	ldr	r2, [pc, #40]	; (119dc <radio_pkt_configure+0x48>)
		((((uint32_t)bits_s1) << RADIO_PCNF0_S1LEN_Pos) & RADIO_PCNF0_S1LEN_Msk) | extra;
   119b4:	f440 7080 	orr.w	r0, r0, #256	; 0x100
	NRF_RADIO->PCNF0 =
   119b8:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   119bc:	f8d3 0518 	ldr.w	r0, [r3, #1304]	; 0x518
   119c0:	4002      	ands	r2, r0
   119c2:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |=
   119c6:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   119ca:	4311      	orrs	r1, r2
   119cc:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
   119d0:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
}
   119d4:	4770      	bx	lr
   119d6:	bf00      	nop
   119d8:	40001000 	.word	0x40001000
   119dc:	fef80000 	.word	0xfef80000

000119e0 <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (uint32_t)rx_packet;
   119e0:	4b01      	ldr	r3, [pc, #4]	; (119e8 <radio_pkt_rx_set+0x8>)
   119e2:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
   119e6:	4770      	bx	lr
   119e8:	40001000 	.word	0x40001000

000119ec <radio_pkt_tx_set>:
   119ec:	4b01      	ldr	r3, [pc, #4]	; (119f4 <radio_pkt_tx_set+0x8>)
   119ee:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   119f2:	4770      	bx	lr
   119f4:	40001000 	.word	0x40001000

000119f8 <radio_rx_enable>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   119f8:	4b01      	ldr	r3, [pc, #4]	; (11a00 <radio_rx_enable+0x8>)
   119fa:	2201      	movs	r2, #1
   119fc:	605a      	str	r2, [r3, #4]
}
   119fe:	4770      	bx	lr
   11a00:	40001000 	.word	0x40001000

00011a04 <radio_tx_enable>:
   11a04:	4b01      	ldr	r3, [pc, #4]	; (11a0c <radio_tx_enable+0x8>)
   11a06:	2201      	movs	r2, #1
   11a08:	601a      	str	r2, [r3, #0]
}
   11a0a:	4770      	bx	lr
   11a0c:	40001000 	.word	0x40001000

00011a10 <radio_disable>:
    p_reg->CHENCLR = mask;
   11a10:	4a07      	ldr	r2, [pc, #28]	; (11a30 <radio_disable+0x20>)
   11a12:	f44f 6310 	mov.w	r3, #2304	; 0x900
   11a16:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    p_reg->TASKS_CHG[(uint32_t) group].EN = 1UL;
}

NRF_STATIC_INLINE void nrf_ppi_group_disable(NRF_PPI_Type * p_reg, nrf_ppi_channel_group_t group)
{
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   11a1a:	2301      	movs	r3, #1
   11a1c:	6053      	str	r3, [r2, #4]
   11a1e:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
   11a20:	f5a2 32f0 	sub.w	r2, r2, #122880	; 0x1e000
   11a24:	2100      	movs	r1, #0
   11a26:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
   11a2a:	6113      	str	r3, [r2, #16]
}
   11a2c:	4770      	bx	lr
   11a2e:	bf00      	nop
   11a30:	4001f000 	.word	0x4001f000

00011a34 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   11a34:	4b04      	ldr	r3, [pc, #16]	; (11a48 <radio_status_reset+0x14>)
   11a36:	2200      	movs	r2, #0
   11a38:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   11a3c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   11a40:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   11a44:	4770      	bx	lr
   11a46:	bf00      	nop
   11a48:	40001000 	.word	0x40001000

00011a4c <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   11a4c:	4b03      	ldr	r3, [pc, #12]	; (11a5c <radio_is_ready+0x10>)
   11a4e:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   11a52:	3800      	subs	r0, #0
   11a54:	bf18      	it	ne
   11a56:	2001      	movne	r0, #1
   11a58:	4770      	bx	lr
   11a5a:	bf00      	nop
   11a5c:	40001000 	.word	0x40001000

00011a60 <radio_is_done>:
	return (NRF_RADIO->NRF_RADIO_TXRX_END_EVENT != 0);
   11a60:	4b03      	ldr	r3, [pc, #12]	; (11a70 <radio_is_done+0x10>)
   11a62:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   11a66:	3800      	subs	r0, #0
   11a68:	bf18      	it	ne
   11a6a:	2001      	movne	r0, #1
   11a6c:	4770      	bx	lr
   11a6e:	bf00      	nop
   11a70:	40001000 	.word	0x40001000

00011a74 <radio_is_idle>:
}

uint32_t radio_is_idle(void)
{
	return (NRF_RADIO->STATE == 0);
   11a74:	4b03      	ldr	r3, [pc, #12]	; (11a84 <radio_is_idle+0x10>)
   11a76:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   11a7a:	fab0 f080 	clz	r0, r0
   11a7e:	0940      	lsrs	r0, r0, #5
   11a80:	4770      	bx	lr
   11a82:	bf00      	nop
   11a84:	40001000 	.word	0x40001000

00011a88 <radio_crc_configure>:

void radio_crc_configure(uint32_t polynomial, uint32_t iv)
{
	NRF_RADIO->CRCCNF =
   11a88:	4b04      	ldr	r3, [pc, #16]	; (11a9c <radio_crc_configure+0x14>)
   11a8a:	f240 1203 	movw	r2, #259	; 0x103
   11a8e:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	    (((RADIO_CRCCNF_SKIPADDR_Skip) << RADIO_CRCCNF_SKIPADDR_Pos) &
	     RADIO_CRCCNF_SKIPADDR_Msk) |
	    (((RADIO_CRCCNF_LEN_Three) << RADIO_CRCCNF_LEN_Pos) &
	       RADIO_CRCCNF_LEN_Msk);
	NRF_RADIO->CRCPOLY = polynomial;
   11a92:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   11a96:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
   11a9a:	4770      	bx	lr
   11a9c:	40001000 	.word	0x40001000

00011aa0 <radio_crc_is_valid>:

uint32_t radio_crc_is_valid(void)
{
	return (NRF_RADIO->CRCSTATUS != 0);
   11aa0:	4b03      	ldr	r3, [pc, #12]	; (11ab0 <radio_crc_is_valid+0x10>)
   11aa2:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   11aa6:	3800      	subs	r0, #0
   11aa8:	bf18      	it	ne
   11aaa:	2001      	movne	r0, #1
   11aac:	4770      	bx	lr
   11aae:	bf00      	nop
   11ab0:	40001000 	.word	0x40001000

00011ab4 <radio_pkt_empty_get>:
				       PDU_AC_LL_SIZE_MAX)];

void *radio_pkt_empty_get(void)
{
	return _pkt_empty;
}
   11ab4:	4800      	ldr	r0, [pc, #0]	; (11ab8 <radio_pkt_empty_get+0x4>)
   11ab6:	4770      	bx	lr
   11ab8:	200026c4 	.word	0x200026c4

00011abc <radio_pkt_scratch_get>:

void *radio_pkt_scratch_get(void)
{
	return _pkt_scratch;
}
   11abc:	4800      	ldr	r0, [pc, #0]	; (11ac0 <radio_pkt_scratch_get+0x4>)
   11abe:	4770      	bx	lr
   11ac0:	200026c8 	.word	0x200026c8

00011ac4 <sw_switch>:
 *                         direction to next direction.
 */
void sw_switch(uint8_t dir_curr, uint8_t dir_next, uint8_t phy_curr, uint8_t flags_curr,
	       uint8_t phy_next, uint8_t flags_next,
	       enum radio_end_evt_delay_state end_evt_delay_en)
{
   11ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   11ac6:	4d31      	ldr	r5, [pc, #196]	; (11b8c <sw_switch+0xc8>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   11ac8:	4f31      	ldr	r7, [pc, #196]	; (11b90 <sw_switch+0xcc>)
   11aca:	782e      	ldrb	r6, [r5, #0]
   11acc:	f8df e0c4 	ldr.w	lr, [pc, #196]	; 11b94 <sw_switch+0xd0>
{
   11ad0:	f89d c014 	ldrb.w	ip, [sp, #20]
   11ad4:	f8c7 e568 	str.w	lr, [r7, #1384]	; 0x568
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   11ad8:	00f3      	lsls	r3, r6, #3
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   11ada:	f106 040c 	add.w	r4, r6, #12
   11ade:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   11ae2:	b2e4      	uxtb	r4, r4
   11ae4:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   11ae8:	00e4      	lsls	r4, r4, #3
   11aea:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
	nrf_ppi_event_endpoint_setup(
   11aee:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   11af2:	4b29      	ldr	r3, [pc, #164]	; (11b98 <sw_switch+0xd4>)
   11af4:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
   11af8:	eb03 0386 	add.w	r3, r3, r6, lsl #2

	/* NOTE: As constants are passed to dir_curr and dir_next, the
	 *       compiler should optimize out the redundant code path
	 *       during the optimization.
	 */
	if (dir_next == SW_SWITCH_TX) {
   11afc:	2901      	cmp	r1, #1
   11afe:	ea4f 0786 	mov.w	r7, r6, lsl #2
    p_reg->CH[(uint32_t) channel].EEP = eep;
   11b02:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
   11b06:	d13b      	bne.n	11b80 <sw_switch+0xbc>
		/* TX */

		/* Calculate delay with respect to current and next PHY.
		 */
		if (dir_curr == SW_SWITCH_TX) {
   11b08:	2801      	cmp	r0, #1
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_TXEN_TXIDLE_TX_1M_NS;
	case BIT(1):
		return HAL_RADIO_NRF52832_TXEN_TXIDLE_TX_2M_NS;
   11b0a:	f24a 035a 	movw	r3, #41050	; 0xa05a
   11b0e:	d126      	bne.n	11b5e <sw_switch+0x9a>
   11b10:	f649 4240 	movw	r2, #40000	; 0x9c40
   11b14:	f1bc 0f02 	cmp.w	ip, #2
   11b18:	bf08      	it	eq
   11b1a:	4613      	moveq	r3, r2
			delay = HAL_RADIO_NS2US_ROUND(
   11b1c:	f203 13f5 	addw	r3, r3, #501	; 0x1f5
			hal_radio_b2b_txen_on_sw_switch(ppi);
		} else {
			/* If RX PHY is LE Coded, calculate for S8 coding.
			 * Assumption being, S8 has higher delay.
			 */
			delay = HAL_RADIO_NS2US_ROUND(
   11b20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11b24:	fbb3 f3f2 	udiv	r3, r3, r2
    p_reg->CH[(uint32_t) channel].TEP = tep;
   11b28:	4a1c      	ldr	r2, [pc, #112]	; (11b9c <sw_switch+0xd8>)
   11b2a:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
		}
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay < SW_SWITCH_TIMER->CC[cc]) {
   11b2e:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
   11b32:	f502 4210 	add.w	r2, r2, #36864	; 0x9000
   11b36:	f8d2 1540 	ldr.w	r1, [r2, #1344]	; 0x540
   11b3a:	4299      	cmp	r1, r3
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
				 (SW_SWITCH_TIMER->CC[cc] - delay));
   11b3c:	bf8a      	itet	hi
   11b3e:	f8d2 1540 	ldrhi.w	r1, [r2, #1344]	; 0x540

NRF_STATIC_INLINE void nrf_timer_cc_set(NRF_TIMER_Type *       p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
   11b42:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   11b44:	1acb      	subhi	r3, r1, r3
   11b46:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    p_reg->CHENSET = mask;
   11b4a:	4b11      	ldr	r3, [pc, #68]	; (11b90 <sw_switch+0xcc>)
   11b4c:	f44f 6210 	mov.w	r2, #2304	; 0x900
   11b50:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	 */
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
#endif /* !CONFIG_SOC_SERIES_NRF53X */
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1U;
   11b54:	1c73      	adds	r3, r6, #1
	sw_tifs_toggle &= 1U;
   11b56:	f003 0301 	and.w	r3, r3, #1
   11b5a:	702b      	strb	r3, [r5, #0]
}
   11b5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11b5e:	f649 4140 	movw	r1, #40000	; 0x9c40
   11b62:	f1bc 0f02 	cmp.w	ip, #2
   11b66:	bf08      	it	eq
   11b68:	460b      	moveq	r3, r1
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_1M_NS;
	case BIT(1):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_2M_NS;
   11b6a:	f241 504a 	movw	r0, #5450	; 0x154a
   11b6e:	f242 41b8 	movw	r1, #9400	; 0x24b8
   11b72:	2a02      	cmp	r2, #2
   11b74:	bf08      	it	eq
   11b76:	4601      	moveq	r1, r0
			delay = HAL_RADIO_NS2US_ROUND(
   11b78:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
   11b7c:	440b      	add	r3, r1
   11b7e:	e7cf      	b.n	11b20 <sw_switch+0x5c>
    p_reg->CH[(uint32_t) channel].TEP = tep;
   11b80:	4b07      	ldr	r3, [pc, #28]	; (11ba0 <sw_switch+0xdc>)
   11b82:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
		delay = HAL_RADIO_NS2US_CEIL(
   11b86:	232d      	movs	r3, #45	; 0x2d
}
   11b88:	e7d1      	b.n	11b2e <sw_switch+0x6a>
   11b8a:	bf00      	nop
   11b8c:	20002b7a 	.word	0x20002b7a
   11b90:	4001f000 	.word	0x4001f000
   11b94:	4000110c 	.word	0x4000110c
   11b98:	40009140 	.word	0x40009140
   11b9c:	40001000 	.word	0x40001000
   11ba0:	40001004 	.word	0x40001004

00011ba4 <radio_switch_complete_and_rx>:
#endif /* CONFIG_BT_CTLR_TIFS_HW */

void radio_switch_complete_and_rx(uint8_t phy_rx)
{
   11ba4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   11ba6:	4b08      	ldr	r3, [pc, #32]	; (11bc8 <radio_switch_complete_and_rx+0x24>)
   11ba8:	2203      	movs	r2, #3
   11baa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* NOTE: As Tx chain delays are negligible constant values (~1 us)
	 *	 across nRF5x radios, sw_switch assumes the 1M chain delay for
	 *       calculations.
	 */
	sw_switch(SW_SWITCH_TX, SW_SWITCH_RX, SW_SWITCH_PHY_1M, SW_SWITCH_FLAGS_DONTCARE, phy_rx,
   11bae:	2300      	movs	r3, #0
   11bb0:	9000      	str	r0, [sp, #0]
   11bb2:	e9cd 3301 	strd	r3, r3, [sp, #4]
   11bb6:	461a      	mov	r2, r3
   11bb8:	4619      	mov	r1, r3
   11bba:	2001      	movs	r0, #1
   11bbc:	f7ff ff82 	bl	11ac4 <sw_switch>
		  SW_SWITCH_FLAGS_DONTCARE, END_EVT_DELAY_DISABLED);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   11bc0:	b005      	add	sp, #20
   11bc2:	f85d fb04 	ldr.w	pc, [sp], #4
   11bc6:	bf00      	nop
   11bc8:	40001000 	.word	0x40001000

00011bcc <radio_switch_complete_and_tx>:

void radio_switch_complete_and_tx(uint8_t phy_rx, uint8_t flags_rx,
				  uint8_t phy_tx, uint8_t flags_tx)
{
   11bcc:	b530      	push	{r4, r5, lr}
   11bce:	4604      	mov	r4, r0
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   11bd0:	4807      	ldr	r0, [pc, #28]	; (11bf0 <radio_switch_complete_and_tx+0x24>)
{
   11bd2:	b085      	sub	sp, #20
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   11bd4:	2503      	movs	r5, #3
   11bd6:	f8c0 5200 	str.w	r5, [r0, #512]	; 0x200

	sw_switch(SW_SWITCH_RX, SW_SWITCH_TX, phy_rx, flags_rx, phy_tx, flags_tx,
   11bda:	2000      	movs	r0, #0
   11bdc:	e9cd 3001 	strd	r3, r0, [sp, #4]
   11be0:	9200      	str	r2, [sp, #0]
   11be2:	460b      	mov	r3, r1
   11be4:	4622      	mov	r2, r4
   11be6:	2101      	movs	r1, #1
   11be8:	f7ff ff6c 	bl	11ac4 <sw_switch>
		  END_EVT_DELAY_DISABLED);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   11bec:	b005      	add	sp, #20
   11bee:	bd30      	pop	{r4, r5, pc}
   11bf0:	40001000 	.word	0x40001000

00011bf4 <radio_switch_complete_and_disable>:
void radio_switch_complete_and_disable(void)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);
#else /* CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = (RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE);
   11bf4:	4b05      	ldr	r3, [pc, #20]	; (11c0c <radio_switch_complete_and_disable+0x18>)
   11bf6:	2203      	movs	r2, #3
   11bf8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    p_reg->CHENCLR = mask;
   11bfc:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
   11c00:	f44f 6210 	mov.w	r2, #2304	; 0x900
   11c04:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	hal_radio_sw_switch_disable();
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   11c08:	4770      	bx	lr
   11c0a:	bf00      	nop
   11c0c:	40001000 	.word	0x40001000

00011c10 <radio_rssi_measure>:
#endif /* !CONFIG_BT_CTLR_PHY_CODED */
}

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
   11c10:	4a03      	ldr	r2, [pc, #12]	; (11c20 <radio_rssi_measure+0x10>)
   11c12:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   11c16:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   11c1a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	    (RADIO_SHORTS_ADDRESS_RSSISTART_Msk |
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}
   11c1e:	4770      	bx	lr
   11c20:	40001000 	.word	0x40001000

00011c24 <radio_rssi_get>:

uint32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
   11c24:	4b01      	ldr	r3, [pc, #4]	; (11c2c <radio_rssi_get+0x8>)
   11c26:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
   11c2a:	4770      	bx	lr
   11c2c:	40001000 	.word	0x40001000

00011c30 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   11c30:	4b02      	ldr	r3, [pc, #8]	; (11c3c <radio_rssi_status_reset+0xc>)
   11c32:	2200      	movs	r2, #0
   11c34:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
   11c38:	4770      	bx	lr
   11c3a:	bf00      	nop
   11c3c:	40001000 	.word	0x40001000

00011c40 <radio_rssi_is_ready>:

uint32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   11c40:	4b03      	ldr	r3, [pc, #12]	; (11c50 <radio_rssi_is_ready+0x10>)
   11c42:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   11c46:	3800      	subs	r0, #0
   11c48:	bf18      	it	ne
   11c4a:	2001      	movne	r0, #1
   11c4c:	4770      	bx	lr
   11c4e:	bf00      	nop
   11c50:	40001000 	.word	0x40001000

00011c54 <radio_filter_configure>:

void radio_filter_configure(uint8_t bitmask_enable, uint8_t bitmask_addr_type,
			    uint8_t *bdaddr)
{
   11c54:	b5f0      	push	{r4, r5, r6, r7, lr}
   11c56:	2400      	movs	r4, #0
   11c58:	2706      	movs	r7, #6
   11c5a:	fb07 f304 	mul.w	r3, r7, r4
   11c5e:	18d5      	adds	r5, r2, r3
	uint8_t index;

	for (index = 0U; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
			((uint32_t)bdaddr[2] << 16) |
			((uint32_t)bdaddr[1] << 8) |
   11c60:	58d6      	ldr	r6, [r2, r3]
   11c62:	00a3      	lsls	r3, r4, #2
   11c64:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   11c68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
	for (index = 0U; index < 8; index++) {
   11c6c:	3401      	adds	r4, #1
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   11c6e:	f8c3 6600 	str.w	r6, [r3, #1536]	; 0x600
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((uint32_t)bdaddr[5] << 8) | bdaddr[4];
   11c72:	88ad      	ldrh	r5, [r5, #4]
   11c74:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0U; index < 8; index++) {
   11c78:	2c08      	cmp	r4, #8
   11c7a:	d1ee      	bne.n	11c5a <radio_filter_configure+0x6>
		bdaddr += 6;
	}

	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   11c7c:	4b02      	ldr	r3, [pc, #8]	; (11c88 <radio_filter_configure+0x34>)
   11c7e:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
   11c82:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
   11c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11c88:	40001000 	.word	0x40001000

00011c8c <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   11c8c:	4a03      	ldr	r2, [pc, #12]	; (11c9c <radio_filter_disable+0x10>)
   11c8e:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   11c92:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   11c96:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   11c9a:	4770      	bx	lr
   11c9c:	40001000 	.word	0x40001000

00011ca0 <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   11ca0:	4b02      	ldr	r3, [pc, #8]	; (11cac <radio_filter_status_reset+0xc>)
   11ca2:	2200      	movs	r2, #0
   11ca4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   11ca8:	4770      	bx	lr
   11caa:	bf00      	nop
   11cac:	40001000 	.word	0x40001000

00011cb0 <radio_filter_has_match>:

uint32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   11cb0:	4b03      	ldr	r3, [pc, #12]	; (11cc0 <radio_filter_has_match+0x10>)
   11cb2:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   11cb6:	3800      	subs	r0, #0
   11cb8:	bf18      	it	ne
   11cba:	2001      	movne	r0, #1
   11cbc:	4770      	bx	lr
   11cbe:	bf00      	nop
   11cc0:	40001000 	.word	0x40001000

00011cc4 <radio_filter_match_get>:

uint32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   11cc4:	4b01      	ldr	r3, [pc, #4]	; (11ccc <radio_filter_match_get+0x8>)
   11cc6:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   11cca:	4770      	bx	lr
   11ccc:	40001000 	.word	0x40001000

00011cd0 <radio_tmr_status_reset>:
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   11cd0:	4b05      	ldr	r3, [pc, #20]	; (11ce8 <radio_tmr_status_reset+0x18>)
   11cd2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   11cd6:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
   11cda:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
   11cde:	4a03      	ldr	r2, [pc, #12]	; (11cec <radio_tmr_status_reset+0x1c>)
   11ce0:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
#endif /* CONFIG_BT_CTLR_PHY_CODED */
#if defined(CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE)
			BIT(HAL_SW_SWITCH_TIMER_PHYEND_DELAY_COMPENSATION_DISABLE_PPI) |
#endif /* CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE */
			BIT(HAL_TRIGGER_CRYPT_PPI));
}
   11ce4:	4770      	bx	lr
   11ce6:	bf00      	nop
   11ce8:	4000b000 	.word	0x4000b000
   11cec:	0e7000c0 	.word	0x0e7000c0

00011cf0 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(uint32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_set(SW_SWITCH_TIMER,
   11cf0:	4b03      	ldr	r3, [pc, #12]	; (11d00 <radio_tmr_tifs_set+0x10>)
   11cf2:	4a04      	ldr	r2, [pc, #16]	; (11d04 <radio_tmr_tifs_set+0x14>)
   11cf4:	781b      	ldrb	r3, [r3, #0]
   11cf6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   11cfa:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			 SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   11cfe:	4770      	bx	lr
   11d00:	20002b7a 	.word	0x20002b7a
   11d04:	40009000 	.word	0x40009000

00011d08 <radio_tmr_start>:

uint32_t radio_tmr_start(uint8_t trx, uint32_t ticks_start, uint32_t remainder)
{
   11d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   11d0a:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   11d0e:	4c2f      	ldr	r4, [pc, #188]	; (11dcc <radio_tmr_start+0xc4>)
   11d10:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   11d14:	42a3      	cmp	r3, r4
		ticks_start--;
		remainder += 30517578UL;
   11d16:	bf88      	it	hi
   11d18:	f102 72e8 	addhi.w	r2, r2, #30408704	; 0x1d00000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   11d1c:	4b2c      	ldr	r3, [pc, #176]	; (11dd0 <radio_tmr_start+0xc8>)
	}
	remainder /= 1000000UL;
   11d1e:	4c2d      	ldr	r4, [pc, #180]	; (11dd4 <radio_tmr_start+0xcc>)
		remainder += 30517578UL;
   11d20:	bf84      	itt	hi
   11d22:	f502 32d4 	addhi.w	r2, r2, #108544	; 0x1a800
   11d26:	f502 72a5 	addhi.w	r2, r2, #330	; 0x14a
   11d2a:	f04f 0501 	mov.w	r5, #1

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
   11d2e:	f04f 0600 	mov.w	r6, #0
	remainder /= 1000000UL;
   11d32:	fbb2 f4f4 	udiv	r4, r2, r4
	EVENT_TIMER->PRESCALER = 4;
   11d36:	f04f 0704 	mov.w	r7, #4
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   11d3a:	f04f 0202 	mov.w	r2, #2
   11d3e:	60dd      	str	r5, [r3, #12]
	EVENT_TIMER->MODE = 0;
   11d40:	f8c3 6504 	str.w	r6, [r3, #1284]	; 0x504
	EVENT_TIMER->PRESCALER = 4;
   11d44:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   11d48:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
   11d4c:	4a22      	ldr	r2, [pc, #136]	; (11dd8 <radio_tmr_start+0xd0>)
    p_reg->CC[cc_channel] = cc_value;
   11d4e:	f8c3 4540 	str.w	r4, [r3, #1344]	; 0x540
		ticks_start--;
   11d52:	bf88      	it	hi
   11d54:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
   11d58:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   11d5c:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   11d60:	f8c2 1344 	str.w	r1, [r2, #836]	; 0x344
    p_reg->CH[(uint32_t) channel].EEP = eep;
   11d64:	491d      	ldr	r1, [pc, #116]	; (11ddc <radio_tmr_start+0xd4>)
   11d66:	f502 72a4 	add.w	r2, r2, #328	; 0x148
   11d6a:	f8c1 2540 	str.w	r2, [r1, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   11d6e:	f8c1 3544 	str.w	r3, [r1, #1348]	; 0x544
    p_reg->CHENSET = mask;
   11d72:	2340      	movs	r3, #64	; 0x40
   11d74:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
	nrf_rtc_event_enable(NRF_RTC0, RTC_EVTENSET_COMPARE2_Msk);

	hal_event_timer_start_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_EVENT_TIMER_START_PPI));

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
   11d78:	f7ff fd5e 	bl	11838 <hal_radio_enable_on_tick_ppi_config_and_enable>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   11d7c:	4b18      	ldr	r3, [pc, #96]	; (11de0 <radio_tmr_start+0xd8>)
   11d7e:	60dd      	str	r5, [r3, #12]
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0U;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
   11d80:	f8c3 6504 	str.w	r6, [r3, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   11d84:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   11d88:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
   11d8c:	601d      	str	r5, [r3, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
   11d8e:	f5a3 43fd 	sub.w	r3, r3, #32384	; 0x7e80
   11d92:	3b74      	subs	r3, #116	; 0x74
   11d94:	f8c1 3550 	str.w	r3, [r1, #1360]	; 0x550
    p_reg->CH[(uint32_t) channel].TEP = tep;
   11d98:	f503 43fe 	add.w	r3, r3, #32512	; 0x7f00
   11d9c:	f8c1 3554 	str.w	r3, [r1, #1364]	; 0x554
    p_reg->CH[(uint32_t) channel].EEP = eep;
   11da0:	f503 739a 	add.w	r3, r3, #308	; 0x134
   11da4:	f8c1 3558 	str.w	r3, [r1, #1368]	; 0x558
    p_reg->CH[(uint32_t) channel].TEP = tep;
   11da8:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   11dac:	33c4      	adds	r3, #196	; 0xc4
   11dae:	f8c1 355c 	str.w	r3, [r1, #1372]	; 0x55c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   11db2:	f5a3 33af 	sub.w	r3, r3, #89600	; 0x15e00
   11db6:	3bc0      	subs	r3, #192	; 0xc0
   11db8:	f8c1 3560 	str.w	r3, [r1, #1376]	; 0x560
    p_reg->CH[(uint32_t) channel].TEP = tep;
   11dbc:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   11dc0:	33c8      	adds	r3, #200	; 0xc8
   11dc2:	f8c1 3564 	str.w	r3, [r1, #1380]	; 0x564
	 */
#endif /* CONFIG_BT_CTLR_PHY_CODED && CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
   11dc6:	4620      	mov	r0, r4
   11dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11dca:	bf00      	nop
   11dcc:	7ff0bdbf 	.word	0x7ff0bdbf
   11dd0:	40008000 	.word	0x40008000
   11dd4:	000f4240 	.word	0x000f4240
   11dd8:	4000b000 	.word	0x4000b000
   11ddc:	4001f000 	.word	0x4001f000
   11de0:	40009000 	.word	0x40009000

00011de4 <radio_tmr_start_now>:
#endif /* CONFIG_SOC_SERIES_NRF53X */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

uint32_t radio_tmr_start_now(uint8_t trx)
{
   11de4:	b510      	push	{r4, lr}
	uint32_t now, start;

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
   11de6:	f7ff fd27 	bl	11838 <hal_radio_enable_on_tick_ppi_config_and_enable>
   11dea:	4b08      	ldr	r3, [pc, #32]	; (11e0c <radio_tmr_start_now+0x28>)
   11dec:	2401      	movs	r4, #1
   11dee:	645c      	str	r4, [r3, #68]	; 0x44
#endif /* CONFIG_SOC_SERIES_NRF53X */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	/* Capture the current time */
	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CAPTURE1);
	now = EVENT_TIMER->CC[1];
   11df0:	f8d3 2544 	ldr.w	r2, [r3, #1348]	; 0x544
	start = now;
   11df4:	4611      	mov	r1, r2

	/* Setup PPI while determining the latency in doing so */
	do {
		/* Set start to be, now plus the determined latency */
		start = (now << 1) - start;
   11df6:	ebc1 0142 	rsb	r1, r1, r2, lsl #1

		/* Setup compare event with min. 1 us offset */
		nrf_timer_cc_set(EVENT_TIMER, 0, start + 1);
   11dfa:	1c48      	adds	r0, r1, #1
    p_reg->CC[cc_channel] = cc_value;
   11dfc:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   11e00:	645c      	str	r4, [r3, #68]	; 0x44

		/* Capture the current time */
		nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CAPTURE1);

		now = EVENT_TIMER->CC[1];
   11e02:	f8d3 2544 	ldr.w	r2, [r3, #1348]	; 0x544
	} while (now > start);
   11e06:	4291      	cmp	r1, r2
   11e08:	d3f5      	bcc.n	11df6 <radio_tmr_start_now+0x12>

	return start + 1;
}
   11e0a:	bd10      	pop	{r4, pc}
   11e0c:	40008000 	.word	0x40008000

00011e10 <radio_tmr_start_get>:
    return p_reg->CC[ch];
   11e10:	4b01      	ldr	r3, [pc, #4]	; (11e18 <radio_tmr_start_get+0x8>)
   11e12:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548

uint32_t radio_tmr_start_get(void)
{
	return nrf_rtc_cc_get(NRF_RTC0, 2);
}
   11e16:	4770      	bx	lr
   11e18:	4000b000 	.word	0x4000b000

00011e1c <radio_tmr_stop>:
   11e1c:	4a04      	ldr	r2, [pc, #16]	; (11e30 <radio_tmr_stop+0x14>)
   11e1e:	2301      	movs	r3, #1
   11e20:	6053      	str	r3, [r2, #4]
   11e22:	6113      	str	r3, [r2, #16]
   11e24:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   11e28:	6053      	str	r3, [r2, #4]
   11e2a:	6113      	str	r3, [r2, #16]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   11e2c:	4770      	bx	lr
   11e2e:	bf00      	nop
   11e30:	40008000 	.word	0x40008000

00011e34 <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
   11e34:	4b04      	ldr	r3, [pc, #16]	; (11e48 <radio_tmr_hcto_configure+0x14>)
   11e36:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->CHENSET = mask;
   11e3a:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
   11e3e:	f04f 6288 	mov.w	r2, #71303168	; 0x4400000
   11e42:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_disable_on_hcto_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI) |
		BIT(HAL_RADIO_DISABLE_ON_HCTO_PPI));
}
   11e46:	4770      	bx	lr
   11e48:	40008000 	.word	0x40008000

00011e4c <radio_tmr_aa_capture>:
    p_reg->CH[(uint32_t) channel].EEP = eep;
   11e4c:	4b06      	ldr	r3, [pc, #24]	; (11e68 <radio_tmr_aa_capture+0x1c>)
   11e4e:	4a07      	ldr	r2, [pc, #28]	; (11e6c <radio_tmr_aa_capture+0x20>)
   11e50:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    p_reg->CH[(uint32_t) channel].TEP = tep;
   11e54:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   11e58:	3240      	adds	r2, #64	; 0x40
   11e5a:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
    p_reg->CHENSET = mask;
   11e5e:	4a04      	ldr	r2, [pc, #16]	; (11e70 <radio_tmr_aa_capture+0x24>)
   11e60:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_ready_time_capture_ppi_config();
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_READY_TIME_CAPTURE_PPI) |
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI));
}
   11e64:	4770      	bx	lr
   11e66:	bf00      	nop
   11e68:	4001f000 	.word	0x4001f000
   11e6c:	40001100 	.word	0x40001100
   11e70:	04000080 	.word	0x04000080

00011e74 <radio_tmr_aa_get>:

uint32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   11e74:	4b01      	ldr	r3, [pc, #4]	; (11e7c <radio_tmr_aa_get+0x8>)
   11e76:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   11e7a:	4770      	bx	lr
   11e7c:	40008000 	.word	0x40008000

00011e80 <radio_tmr_aa_save>:

static uint32_t radio_tmr_aa;

void radio_tmr_aa_save(uint32_t aa)
{
	radio_tmr_aa = aa;
   11e80:	4b01      	ldr	r3, [pc, #4]	; (11e88 <radio_tmr_aa_save+0x8>)
   11e82:	6018      	str	r0, [r3, #0]
}
   11e84:	4770      	bx	lr
   11e86:	bf00      	nop
   11e88:	200027d4 	.word	0x200027d4

00011e8c <radio_tmr_aa_restore>:

uint32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
}
   11e8c:	4b01      	ldr	r3, [pc, #4]	; (11e94 <radio_tmr_aa_restore+0x8>)
   11e8e:	6818      	ldr	r0, [r3, #0]
   11e90:	4770      	bx	lr
   11e92:	bf00      	nop
   11e94:	200027d4 	.word	0x200027d4

00011e98 <radio_tmr_ready_get>:

uint32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   11e98:	4b01      	ldr	r3, [pc, #4]	; (11ea0 <radio_tmr_ready_get+0x8>)
   11e9a:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   11e9e:	4770      	bx	lr
   11ea0:	40008000 	.word	0x40008000

00011ea4 <radio_tmr_end_capture>:
   11ea4:	4b02      	ldr	r3, [pc, #8]	; (11eb0 <radio_tmr_end_capture+0xc>)
   11ea6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   11eaa:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_end_time_capture_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
#endif /* !CONFIG_SOC_SERIES_NRF53X ||
	* (CONFIG_SOC_SERIES_NRF53X && !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	*/
}
   11eae:	4770      	bx	lr
   11eb0:	4001f000 	.word	0x4001f000

00011eb4 <radio_tmr_end_get>:
uint32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   11eb4:	4b01      	ldr	r3, [pc, #4]	; (11ebc <radio_tmr_end_get+0x8>)
   11eb6:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
   11eba:	4770      	bx	lr
   11ebc:	40008000 	.word	0x40008000

00011ec0 <radio_tmr_tifs_base_get>:
   11ec0:	4b01      	ldr	r3, [pc, #4]	; (11ec8 <radio_tmr_tifs_base_get+0x8>)
   11ec2:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   11ec6:	4770      	bx	lr
   11ec8:	40008000 	.word	0x40008000

00011ecc <radio_ar_match_get>:
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_AAR_PPI));
}

uint32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   11ecc:	4b01      	ldr	r3, [pc, #4]	; (11ed4 <radio_ar_match_get+0x8>)
   11ece:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   11ed2:	4770      	bx	lr
   11ed4:	4000f000 	.word	0x4000f000

00011ed8 <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
   11ed8:	4a06      	ldr	r2, [pc, #24]	; (11ef4 <radio_ar_status_reset+0x1c>)
   11eda:	2300      	movs	r3, #0
   11edc:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

void radio_ar_status_reset(void)
{
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   11ee0:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
   11ee4:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    p_reg->CHENCLR = mask;
   11ee8:	4b03      	ldr	r3, [pc, #12]	; (11ef8 <radio_ar_status_reset+0x20>)
   11eea:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   11eee:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
			  AAR_ENABLE_ENABLE_Msk;

	hal_radio_nrf_ppi_channels_disable(BIT(HAL_TRIGGER_AAR_PPI));
}
   11ef2:	4770      	bx	lr
   11ef4:	40001000 	.word	0x40001000
   11ef8:	4001f000 	.word	0x4001f000

00011efc <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   11efc:	4b08      	ldr	r3, [pc, #32]	; (11f20 <radio_ar_has_match+0x24>)
   11efe:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

uint32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   11f02:	b160      	cbz	r0, 11f1e <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   11f04:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   11f08:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   11f0c:	b138      	cbz	r0, 11f1e <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   11f0e:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   11f12:	b120      	cbz	r0, 11f1e <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   11f14:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   11f18:	fab0 f080 	clz	r0, r0
   11f1c:	0940      	lsrs	r0, r0, #5
}
   11f1e:	4770      	bx	lr
   11f20:	40001000 	.word	0x40001000

00011f24 <mayfly_enable_cb>:

void mayfly_enable_cb(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   11f24:	2902      	cmp	r1, #2
{
   11f26:	b510      	push	{r4, lr}
   11f28:	4614      	mov	r4, r2
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   11f2a:	d00b      	beq.n	11f44 <mayfly_enable_cb+0x20>
   11f2c:	4a0a      	ldr	r2, [pc, #40]	; (11f58 <mayfly_enable_cb+0x34>)
   11f2e:	490b      	ldr	r1, [pc, #44]	; (11f5c <mayfly_enable_cb+0x38>)
   11f30:	480b      	ldr	r0, [pc, #44]	; (11f60 <mayfly_enable_cb+0x3c>)
   11f32:	231e      	movs	r3, #30
   11f34:	f004 fb61 	bl	165fa <printk>
   11f38:	4040      	eors	r0, r0
   11f3a:	f380 8811 	msr	BASEPRI, r0
   11f3e:	f04f 0003 	mov.w	r0, #3
   11f42:	df02      	svc	2

	if (enable) {
		irq_enable(HAL_SWI_JOB_IRQ);
   11f44:	200b      	movs	r0, #11
	if (enable) {
   11f46:	b11c      	cbz	r4, 11f50 <mayfly_enable_cb+0x2c>
	} else {
		irq_disable(HAL_SWI_JOB_IRQ);
	}
}
   11f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_enable(HAL_SWI_JOB_IRQ);
   11f4c:	f7f1 be86 	b.w	3c5c <arch_irq_enable>
}
   11f50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_disable(HAL_SWI_JOB_IRQ);
   11f54:	f7f1 be92 	b.w	3c7c <arch_irq_disable>
   11f58:	00020dae 	.word	0x00020dae
   11f5c:	00020dfc 	.word	0x00020dfc
   11f60:	0002023c 	.word	0x0002023c

00011f64 <mayfly_is_enabled>:

uint32_t mayfly_is_enabled(uint8_t caller_id, uint8_t callee_id)
{
   11f64:	b508      	push	{r3, lr}
	(void)caller_id;

	switch (callee_id) {
   11f66:	b181      	cbz	r1, 11f8a <mayfly_is_enabled+0x26>
   11f68:	3901      	subs	r1, #1
   11f6a:	2901      	cmp	r1, #1
   11f6c:	d912      	bls.n	11f94 <mayfly_is_enabled+0x30>

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(HAL_SWI_JOB_IRQ);

	default:
		LL_ASSERT(0);
   11f6e:	4a0a      	ldr	r2, [pc, #40]	; (11f98 <mayfly_is_enabled+0x34>)
   11f70:	490a      	ldr	r1, [pc, #40]	; (11f9c <mayfly_is_enabled+0x38>)
   11f72:	480b      	ldr	r0, [pc, #44]	; (11fa0 <mayfly_is_enabled+0x3c>)
   11f74:	2336      	movs	r3, #54	; 0x36
   11f76:	f004 fb40 	bl	165fa <printk>
   11f7a:	4040      	eors	r0, r0
   11f7c:	f380 8811 	msr	BASEPRI, r0
   11f80:	f04f 0003 	mov.w	r0, #3
   11f84:	df02      	svc	2
		break;
	}

	return 0;
}
   11f86:	2000      	movs	r0, #0
   11f88:	bd08      	pop	{r3, pc}
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);
   11f8a:	2018      	movs	r0, #24
}
   11f8c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		return irq_is_enabled(HAL_SWI_WORKER_IRQ);
   11f90:	f7f1 be88 	b.w	3ca4 <arch_irq_is_enabled>
   11f94:	200b      	movs	r0, #11
   11f96:	e7f9      	b.n	11f8c <mayfly_is_enabled+0x28>
   11f98:	00020dae 	.word	0x00020dae
   11f9c:	00020e86 	.word	0x00020e86
   11fa0:	0002023c 	.word	0x0002023c

00011fa4 <mayfly_pend>:

void mayfly_pend(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   11fa4:	2901      	cmp	r1, #1
{
   11fa6:	b508      	push	{r3, lr}
	switch (callee_id) {
   11fa8:	d008      	beq.n	11fbc <mayfly_pend+0x18>
   11faa:	2902      	cmp	r1, #2
   11fac:	d006      	beq.n	11fbc <mayfly_pend+0x18>
   11fae:	b949      	cbnz	r1, 11fc4 <mayfly_pend+0x20>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   11fb0:	4b0b      	ldr	r3, [pc, #44]	; (11fe0 <mayfly_pend+0x3c>)
   11fb2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   11fb6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

	default:
		LL_ASSERT(0);
		break;
	}
}
   11fba:	bd08      	pop	{r3, pc}
   11fbc:	4b08      	ldr	r3, [pc, #32]	; (11fe0 <mayfly_pend+0x3c>)
   11fbe:	f44f 6200 	mov.w	r2, #2048	; 0x800
   11fc2:	e7f8      	b.n	11fb6 <mayfly_pend+0x12>
		LL_ASSERT(0);
   11fc4:	4a07      	ldr	r2, [pc, #28]	; (11fe4 <mayfly_pend+0x40>)
   11fc6:	4908      	ldr	r1, [pc, #32]	; (11fe8 <mayfly_pend+0x44>)
   11fc8:	4808      	ldr	r0, [pc, #32]	; (11fec <mayfly_pend+0x48>)
   11fca:	2367      	movs	r3, #103	; 0x67
   11fcc:	f004 fb15 	bl	165fa <printk>
   11fd0:	4040      	eors	r0, r0
   11fd2:	f380 8811 	msr	BASEPRI, r0
   11fd6:	f04f 0003 	mov.w	r0, #3
   11fda:	df02      	svc	2
}
   11fdc:	e7ed      	b.n	11fba <mayfly_pend+0x16>
   11fde:	bf00      	nop
   11fe0:	e000e100 	.word	0xe000e100
   11fe4:	00020dae 	.word	0x00020dae
   11fe8:	00020e86 	.word	0x00020e86
   11fec:	0002023c 	.word	0x0002023c

00011ff0 <hal_ticker_instance0_caller_id_get>:

uint8_t hal_ticker_instance0_caller_id_get(uint8_t user_id)
{
	uint8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   11ff0:	2803      	cmp	r0, #3
{
   11ff2:	b510      	push	{r4, lr}
   11ff4:	4604      	mov	r4, r0
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   11ff6:	d90b      	bls.n	12010 <hal_ticker_instance0_caller_id_get+0x20>
   11ff8:	4a0e      	ldr	r2, [pc, #56]	; (12034 <hal_ticker_instance0_caller_id_get+0x44>)
   11ffa:	490f      	ldr	r1, [pc, #60]	; (12038 <hal_ticker_instance0_caller_id_get+0x48>)
   11ffc:	480f      	ldr	r0, [pc, #60]	; (1203c <hal_ticker_instance0_caller_id_get+0x4c>)
   11ffe:	232b      	movs	r3, #43	; 0x2b
   12000:	f004 fafb 	bl	165fa <printk>
   12004:	4040      	eors	r0, r0
   12006:	f380 8811 	msr	BASEPRI, r0
   1200a:	f04f 0003 	mov.w	r0, #3
   1200e:	df02      	svc	2

	caller_id = caller_id_lut[user_id];
   12010:	4b0b      	ldr	r3, [pc, #44]	; (12040 <hal_ticker_instance0_caller_id_get+0x50>)
   12012:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   12014:	b95c      	cbnz	r4, 1202e <hal_ticker_instance0_caller_id_get+0x3e>
   12016:	4a07      	ldr	r2, [pc, #28]	; (12034 <hal_ticker_instance0_caller_id_get+0x44>)
   12018:	490a      	ldr	r1, [pc, #40]	; (12044 <hal_ticker_instance0_caller_id_get+0x54>)
   1201a:	4808      	ldr	r0, [pc, #32]	; (1203c <hal_ticker_instance0_caller_id_get+0x4c>)
   1201c:	232e      	movs	r3, #46	; 0x2e
   1201e:	f004 faec 	bl	165fa <printk>
   12022:	4040      	eors	r0, r0
   12024:	f380 8811 	msr	BASEPRI, r0
   12028:	f04f 0003 	mov.w	r0, #3
   1202c:	df02      	svc	2

	return caller_id;
}
   1202e:	4620      	mov	r0, r4
   12030:	bd10      	pop	{r4, pc}
   12032:	bf00      	nop
   12034:	00020e0b 	.word	0x00020e0b
   12038:	00020e59 	.word	0x00020e59
   1203c:	0002023c 	.word	0x0002023c
   12040:	00020e88 	.word	0x00020e88
   12044:	00020e79 	.word	0x00020e79

00012048 <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   12048:	3801      	subs	r0, #1
{
   1204a:	b510      	push	{r4, lr}
   1204c:	461c      	mov	r4, r3
	switch (caller_id) {
   1204e:	2804      	cmp	r0, #4
   12050:	d845      	bhi.n	120de <hal_ticker_instance0_sched+0x96>
   12052:	e8df f000 	tbb	[pc, r0]
   12056:	1a03      	.short	0x1a03
   12058:	2c23      	.short	0x2c23
   1205a:	3b          	.byte	0x3b
   1205b:	00          	.byte	0x00
	case TICKER_CALL_ID_ISR:
		switch (callee_id) {
   1205c:	2904      	cmp	r1, #4
   1205e:	d107      	bne.n	12070 <hal_ticker_instance0_sched+0x28>
		{
			static memq_link_t link;
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_job};

			m.param = instance;
   12060:	4b20      	ldr	r3, [pc, #128]	; (120e4 <hal_ticker_instance0_sched+0x9c>)

			/* TODO: scheduler lock, if preemptive threads used */
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   12062:	2102      	movs	r1, #2
			m.param = instance;
   12064:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   12066:	2000      	movs	r0, #0

	default:
		LL_ASSERT(0);
		break;
	}
}
   12068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1206c:	f7f8 bf72 	b.w	af54 <mayfly_enqueue>
			LL_ASSERT(0);
   12070:	234e      	movs	r3, #78	; 0x4e
		LL_ASSERT(0);
   12072:	4a1d      	ldr	r2, [pc, #116]	; (120e8 <hal_ticker_instance0_sched+0xa0>)
   12074:	491d      	ldr	r1, [pc, #116]	; (120ec <hal_ticker_instance0_sched+0xa4>)
   12076:	481e      	ldr	r0, [pc, #120]	; (120f0 <hal_ticker_instance0_sched+0xa8>)
   12078:	f004 fabf 	bl	165fa <printk>
   1207c:	4040      	eors	r0, r0
   1207e:	f380 8811 	msr	BASEPRI, r0
   12082:	f04f 0003 	mov.w	r0, #3
   12086:	df02      	svc	2
}
   12088:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   1208a:	2903      	cmp	r1, #3
   1208c:	d104      	bne.n	12098 <hal_ticker_instance0_sched+0x50>
			m.param = instance;
   1208e:	4b19      	ldr	r3, [pc, #100]	; (120f4 <hal_ticker_instance0_sched+0xac>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   12090:	2101      	movs	r1, #1
			m.param = instance;
   12092:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   12094:	4608      	mov	r0, r1
   12096:	e7e7      	b.n	12068 <hal_ticker_instance0_sched+0x20>
			LL_ASSERT(0);
   12098:	2365      	movs	r3, #101	; 0x65
   1209a:	e7ea      	b.n	12072 <hal_ticker_instance0_sched+0x2a>
		switch (callee_id) {
   1209c:	2904      	cmp	r1, #4
   1209e:	d104      	bne.n	120aa <hal_ticker_instance0_sched+0x62>
			m.param = instance;
   120a0:	4b15      	ldr	r3, [pc, #84]	; (120f8 <hal_ticker_instance0_sched+0xb0>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   120a2:	2102      	movs	r1, #2
			m.param = instance;
   120a4:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   120a6:	2001      	movs	r0, #1
   120a8:	e7de      	b.n	12068 <hal_ticker_instance0_sched+0x20>
			LL_ASSERT(0);
   120aa:	237c      	movs	r3, #124	; 0x7c
   120ac:	e7e1      	b.n	12072 <hal_ticker_instance0_sched+0x2a>
		switch (callee_id) {
   120ae:	2903      	cmp	r1, #3
   120b0:	d003      	beq.n	120ba <hal_ticker_instance0_sched+0x72>
   120b2:	2904      	cmp	r1, #4
   120b4:	d006      	beq.n	120c4 <hal_ticker_instance0_sched+0x7c>
			LL_ASSERT(0);
   120b6:	23a2      	movs	r3, #162	; 0xa2
   120b8:	e7db      	b.n	12072 <hal_ticker_instance0_sched+0x2a>
			m.param = instance;
   120ba:	4b10      	ldr	r3, [pc, #64]	; (120fc <hal_ticker_instance0_sched+0xb4>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   120bc:	2101      	movs	r1, #1
			m.param = instance;
   120be:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   120c0:	2002      	movs	r0, #2
   120c2:	e7d1      	b.n	12068 <hal_ticker_instance0_sched+0x20>
			m.param = instance;
   120c4:	4b0e      	ldr	r3, [pc, #56]	; (12100 <hal_ticker_instance0_sched+0xb8>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   120c6:	2102      	movs	r1, #2
			m.param = instance;
   120c8:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   120ca:	e7e3      	b.n	12094 <hal_ticker_instance0_sched+0x4c>
		switch (callee_id) {
   120cc:	2904      	cmp	r1, #4
   120ce:	d104      	bne.n	120da <hal_ticker_instance0_sched+0x92>
			m.param = instance;
   120d0:	4b0c      	ldr	r3, [pc, #48]	; (12104 <hal_ticker_instance0_sched+0xbc>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   120d2:	2102      	movs	r1, #2
			m.param = instance;
   120d4:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   120d6:	2003      	movs	r0, #3
   120d8:	e7c6      	b.n	12068 <hal_ticker_instance0_sched+0x20>
			LL_ASSERT(0);
   120da:	23ba      	movs	r3, #186	; 0xba
   120dc:	e7c9      	b.n	12072 <hal_ticker_instance0_sched+0x2a>
		LL_ASSERT(0);
   120de:	23c0      	movs	r3, #192	; 0xc0
   120e0:	e7c7      	b.n	12072 <hal_ticker_instance0_sched+0x2a>
   120e2:	bf00      	nop
   120e4:	200007c8 	.word	0x200007c8
   120e8:	00020e0b 	.word	0x00020e0b
   120ec:	00020e86 	.word	0x00020e86
   120f0:	0002023c 	.word	0x0002023c
   120f4:	200007b8 	.word	0x200007b8
   120f8:	20000808 	.word	0x20000808
   120fc:	200007f8 	.word	0x200007f8
   12100:	200007e8 	.word	0x200007e8
   12104:	200007d8 	.word	0x200007d8

00012108 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   12108:	4b02      	ldr	r3, [pc, #8]	; (12114 <net_buf_pool_get+0xc>)
   1210a:	222c      	movs	r2, #44	; 0x2c
   1210c:	fb02 3000 	mla	r0, r2, r0, r3
   12110:	4770      	bx	lr
   12112:	bf00      	nop
   12114:	20000b6c 	.word	0x20000b6c

00012118 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   12118:	7982      	ldrb	r2, [r0, #6]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1211a:	4b06      	ldr	r3, [pc, #24]	; (12134 <net_buf_id+0x1c>)
   1211c:	212c      	movs	r1, #44	; 0x2c
   1211e:	fb01 3302 	mla	r3, r1, r2, r3
   12122:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   12124:	7f1b      	ldrb	r3, [r3, #28]
   12126:	3317      	adds	r3, #23
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   12128:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1212a:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   1212e:	fbb0 f0f3 	udiv	r0, r0, r3
   12132:	4770      	bx	lr
   12134:	20000b6c 	.word	0x20000b6c

00012138 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   12138:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1213a:	4b0a      	ldr	r3, [pc, #40]	; (12164 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1213c:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1213e:	242c      	movs	r4, #44	; 0x2c
   12140:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   12144:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   12146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   12148:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1214a:	6823      	ldr	r3, [r4, #0]
   1214c:	429a      	cmp	r2, r3
   1214e:	bf94      	ite	ls
   12150:	600a      	strls	r2, [r1, #0]
   12152:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   12154:	f7ff ffe0 	bl	12118 <net_buf_id>
   12158:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   1215c:	fb02 3000 	mla	r0, r2, r0, r3
   12160:	bd10      	pop	{r4, pc}
   12162:	bf00      	nop
   12164:	20000b6c 	.word	0x20000b6c

00012168 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   12168:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1216c:	4605      	mov	r5, r0
   1216e:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   12170:	4610      	mov	r0, r2
   12172:	4619      	mov	r1, r3
{
   12174:	4691      	mov	r9, r2
   12176:	4698      	mov	r8, r3
   12178:	4617      	mov	r7, r2
   1217a:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1217c:	f00c fc6d 	bl	1ea5a <sys_clock_timeout_end_calc>
   12180:	4682      	mov	sl, r0
   12182:	468b      	mov	fp, r1
	__asm__ volatile(
   12184:	f04f 0320 	mov.w	r3, #32
   12188:	f3ef 8111 	mrs	r1, BASEPRI
   1218c:	f383 8812 	msr	BASEPRI_MAX, r3
   12190:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   12194:	8b6b      	ldrh	r3, [r5, #26]
   12196:	2b00      	cmp	r3, #0
   12198:	d05a      	beq.n	12250 <net_buf_alloc_len+0xe8>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1219a:	8b2a      	ldrh	r2, [r5, #24]
   1219c:	429a      	cmp	r2, r3
   1219e:	d93e      	bls.n	1221e <net_buf_alloc_len+0xb6>
   121a0:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   121a2:	2200      	movs	r2, #0
   121a4:	2300      	movs	r3, #0
   121a6:	4628      	mov	r0, r5
   121a8:	f003 fa52 	bl	15650 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   121ac:	9900      	ldr	r1, [sp, #0]
   121ae:	4604      	mov	r4, r0
   121b0:	2800      	cmp	r0, #0
   121b2:	d034      	beq.n	1221e <net_buf_alloc_len+0xb6>
	__asm__ volatile(
   121b4:	f381 8811 	msr	BASEPRI, r1
   121b8:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   121bc:	9b01      	ldr	r3, [sp, #4]
   121be:	2b00      	cmp	r3, #0
   121c0:	d056      	beq.n	12270 <net_buf_alloc_len+0x108>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   121c2:	ea58 0309 	orrs.w	r3, r8, r9
   121c6:	d00f      	beq.n	121e8 <net_buf_alloc_len+0x80>
   121c8:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   121cc:	bf08      	it	eq
   121ce:	f1b9 3fff 	cmpeq.w	r9, #4294967295	; 0xffffffff
   121d2:	d009      	beq.n	121e8 <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   121d4:	f004 f900 	bl	163d8 <sys_clock_tick_get>
   121d8:	ebba 0700 	subs.w	r7, sl, r0
   121dc:	eb6b 0601 	sbc.w	r6, fp, r1
   121e0:	2e00      	cmp	r6, #0
   121e2:	bfbc      	itt	lt
   121e4:	2700      	movlt	r7, #0
   121e6:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   121e8:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   121ea:	f8df 809c 	ldr.w	r8, [pc, #156]	; 12288 <net_buf_alloc_len+0x120>
   121ee:	f04f 092c 	mov.w	r9, #44	; 0x2c
   121f2:	fb09 8303 	mla	r3, r9, r3, r8
   121f6:	463a      	mov	r2, r7
   121f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   121fa:	681b      	ldr	r3, [r3, #0]
   121fc:	a901      	add	r1, sp, #4
   121fe:	681d      	ldr	r5, [r3, #0]
   12200:	4620      	mov	r0, r4
   12202:	4633      	mov	r3, r6
   12204:	47a8      	blx	r5
   12206:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   12208:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1220a:	2800      	cmp	r0, #0
   1220c:	d131      	bne.n	12272 <net_buf_alloc_len+0x10a>
	k_lifo_put(&pool->free, buf);
   1220e:	79a0      	ldrb	r0, [r4, #6]
   12210:	4621      	mov	r1, r4
   12212:	fb00 8009 	mla	r0, r0, r9, r8
   12216:	f00c f990 	bl	1e53a <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1221a:	462c      	mov	r4, r5
}
   1221c:	e024      	b.n	12268 <net_buf_alloc_len+0x100>
		uninit_count = pool->uninit_count--;
   1221e:	8b68      	ldrh	r0, [r5, #26]
   12220:	1e43      	subs	r3, r0, #1
   12222:	836b      	strh	r3, [r5, #26]
   12224:	f381 8811 	msr	BASEPRI, r1
   12228:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1222c:	7f2a      	ldrb	r2, [r5, #28]
   1222e:	f102 0417 	add.w	r4, r2, #23
   12232:	f024 0303 	bic.w	r3, r4, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   12236:	8b2c      	ldrh	r4, [r5, #24]
   12238:	1a20      	subs	r0, r4, r0
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1223a:	6aac      	ldr	r4, [r5, #40]	; 0x28
   1223c:	fb00 4403 	mla	r4, r0, r3, r4
	return pool - _net_buf_pool_list;
   12240:	4811      	ldr	r0, [pc, #68]	; (12288 <net_buf_alloc_len+0x120>)
   12242:	4b12      	ldr	r3, [pc, #72]	; (1228c <net_buf_alloc_len+0x124>)
	buf->user_data_size = pool->user_data_size;
   12244:	71e2      	strb	r2, [r4, #7]
	return pool - _net_buf_pool_list;
   12246:	1a2d      	subs	r5, r5, r0
   12248:	10ad      	asrs	r5, r5, #2
   1224a:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   1224c:	71a5      	strb	r5, [r4, #6]
		goto success;
   1224e:	e7b5      	b.n	121bc <net_buf_alloc_len+0x54>
   12250:	f381 8811 	msr	BASEPRI, r1
   12254:	f3bf 8f6f 	isb	sy
   12258:	464a      	mov	r2, r9
   1225a:	4643      	mov	r3, r8
   1225c:	4628      	mov	r0, r5
   1225e:	f003 f9f7 	bl	15650 <z_impl_k_queue_get>
	if (!buf) {
   12262:	4604      	mov	r4, r0
   12264:	2800      	cmp	r0, #0
   12266:	d1a9      	bne.n	121bc <net_buf_alloc_len+0x54>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   12268:	4620      	mov	r0, r4
   1226a:	b003      	add	sp, #12
   1226c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
   12270:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   12272:	2300      	movs	r3, #0
	buf->ref   = 1U;
   12274:	2201      	movs	r2, #1
	buf->frags = NULL;
   12276:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   12278:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   1227a:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   1227c:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   1227e:	6923      	ldr	r3, [r4, #16]
   12280:	81e2      	strh	r2, [r4, #14]
   12282:	60a3      	str	r3, [r4, #8]
	return buf;
   12284:	e7f0      	b.n	12268 <net_buf_alloc_len+0x100>
   12286:	bf00      	nop
   12288:	20000b6c 	.word	0x20000b6c
   1228c:	ba2e8ba3 	.word	0xba2e8ba3

00012290 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   12290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12294:	4d16      	ldr	r5, [pc, #88]	; (122f0 <net_buf_unref+0x60>)
   12296:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   12298:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   1229a:	272c      	movs	r7, #44	; 0x2c
	while (buf) {
   1229c:	b90c      	cbnz	r4, 122a2 <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1229e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   122a2:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   122a4:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   122a8:	3b01      	subs	r3, #1
   122aa:	b2db      	uxtb	r3, r3
   122ac:	7123      	strb	r3, [r4, #4]
   122ae:	2b00      	cmp	r3, #0
   122b0:	d1f5      	bne.n	1229e <net_buf_unref+0xe>
		if (buf->__buf) {
   122b2:	6921      	ldr	r1, [r4, #16]
   122b4:	b159      	cbz	r1, 122ce <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   122b6:	7963      	ldrb	r3, [r4, #5]
   122b8:	079b      	lsls	r3, r3, #30
   122ba:	d407      	bmi.n	122cc <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   122bc:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   122be:	fb07 5303 	mla	r3, r7, r3, r5
   122c2:	4620      	mov	r0, r4
   122c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   122c6:	681b      	ldr	r3, [r3, #0]
   122c8:	689b      	ldr	r3, [r3, #8]
   122ca:	4798      	blx	r3
			buf->__buf = NULL;
   122cc:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   122ce:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   122d0:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   122d2:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   122d6:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   122d8:	6a1b      	ldr	r3, [r3, #32]
   122da:	b11b      	cbz	r3, 122e4 <net_buf_unref+0x54>
			pool->destroy(buf);
   122dc:	4620      	mov	r0, r4
   122de:	4798      	blx	r3
{
   122e0:	4644      	mov	r4, r8
   122e2:	e7db      	b.n	1229c <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   122e4:	4621      	mov	r1, r4
   122e6:	fb00 5007 	mla	r0, r0, r7, r5
   122ea:	f00c f926 	bl	1e53a <k_queue_prepend>
}
   122ee:	e7f7      	b.n	122e0 <net_buf_unref+0x50>
   122f0:	20000b6c 	.word	0x20000b6c

000122f4 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   122f4:	4b08      	ldr	r3, [pc, #32]	; (12318 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   122f6:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   122f8:	1ac3      	subs	r3, r0, r3
{
   122fa:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   122fc:	4907      	ldr	r1, [pc, #28]	; (1231c <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   122fe:	109b      	asrs	r3, r3, #2
{
   12300:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   12302:	4359      	muls	r1, r3
   12304:	4806      	ldr	r0, [pc, #24]	; (12320 <onoff_stop+0x2c>)
   12306:	2240      	movs	r2, #64	; 0x40
   12308:	f00a ff3d 	bl	1d186 <stop>
	notify(mgr, res);
   1230c:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1230e:	4601      	mov	r1, r0
	notify(mgr, res);
   12310:	4620      	mov	r0, r4
}
   12312:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   12316:	4718      	bx	r3
   12318:	20002818 	.word	0x20002818
   1231c:	b6db6db7 	.word	0xb6db6db7
   12320:	0001ee3c 	.word	0x0001ee3c

00012324 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   12324:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   12326:	4c0c      	ldr	r4, [pc, #48]	; (12358 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   12328:	4a0c      	ldr	r2, [pc, #48]	; (1235c <onoff_start+0x38>)
   1232a:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   1232c:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1232e:	9300      	str	r3, [sp, #0]
{
   12330:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   12332:	460b      	mov	r3, r1
   12334:	490a      	ldr	r1, [pc, #40]	; (12360 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
   12336:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   12338:	4361      	muls	r1, r4
{
   1233a:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1233c:	4809      	ldr	r0, [pc, #36]	; (12364 <onoff_start+0x40>)
   1233e:	f00a ff4e 	bl	1d1de <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   12342:	1e01      	subs	r1, r0, #0
   12344:	da05      	bge.n	12352 <onoff_start+0x2e>
		notify(mgr, err);
   12346:	4630      	mov	r0, r6
   12348:	462b      	mov	r3, r5
	}
}
   1234a:	b002      	add	sp, #8
   1234c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   12350:	4718      	bx	r3
}
   12352:	b002      	add	sp, #8
   12354:	bd70      	pop	{r4, r5, r6, pc}
   12356:	bf00      	nop
   12358:	20002818 	.word	0x20002818
   1235c:	0001d24f 	.word	0x0001d24f
   12360:	b6db6db7 	.word	0xb6db6db7
   12364:	0001ee3c 	.word	0x0001ee3c

00012368 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   12368:	2200      	movs	r2, #0
{
   1236a:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1236c:	2101      	movs	r1, #1
{
   1236e:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   12370:	4610      	mov	r0, r2
   12372:	f7f1 fca5 	bl	3cc0 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   12376:	2000      	movs	r0, #0
   12378:	f7f1 fc70 	bl	3c5c <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   1237c:	480f      	ldr	r0, [pc, #60]	; (123bc <clk_init+0x54>)
   1237e:	f001 ff4b 	bl	14218 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   12382:	4b0f      	ldr	r3, [pc, #60]	; (123c0 <clk_init+0x58>)
   12384:	4298      	cmp	r0, r3
   12386:	d115      	bne.n	123b4 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   12388:	f00b fecd 	bl	1e126 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   1238c:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   1238e:	490d      	ldr	r1, [pc, #52]	; (123c4 <clk_init+0x5c>)
   12390:	4630      	mov	r0, r6
   12392:	f004 f98e 	bl	166b2 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   12396:	2800      	cmp	r0, #0
   12398:	db0b      	blt.n	123b2 <clk_init+0x4a>
	struct nrf_clock_control_data *data = dev->data;
   1239a:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1239c:	4909      	ldr	r1, [pc, #36]	; (123c4 <clk_init+0x5c>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1239e:	2501      	movs	r5, #1
   123a0:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
   123a2:	f104 001c 	add.w	r0, r4, #28
   123a6:	f004 f984 	bl	166b2 <onoff_manager_init>
		if (err < 0) {
   123aa:	2800      	cmp	r0, #0
   123ac:	db01      	blt.n	123b2 <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   123ae:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   123b0:	2000      	movs	r0, #0
}
   123b2:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   123b4:	f06f 0004 	mvn.w	r0, #4
   123b8:	e7fb      	b.n	123b2 <clk_init+0x4a>
   123ba:	bf00      	nop
   123bc:	000123fd 	.word	0x000123fd
   123c0:	0bad0000 	.word	0x0bad0000
   123c4:	0001f9f4 	.word	0x0001f9f4

000123c8 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   123c8:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   123ca:	230c      	movs	r3, #12
   123cc:	4809      	ldr	r0, [pc, #36]	; (123f4 <clkstarted_handle.constprop.0+0x2c>)
   123ce:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   123d0:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   123d2:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   123d4:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
   123d8:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   123da:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   123dc:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   123de:	4418      	add	r0, r3
   123e0:	f00a febe 	bl	1d160 <set_on_state>
	if (callback) {
   123e4:	b12d      	cbz	r5, 123f2 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   123e6:	4632      	mov	r2, r6
   123e8:	462b      	mov	r3, r5
   123ea:	4803      	ldr	r0, [pc, #12]	; (123f8 <clkstarted_handle.constprop.0+0x30>)
}
   123ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   123f0:	4718      	bx	r3
}
   123f2:	bd70      	pop	{r4, r5, r6, pc}
   123f4:	20002818 	.word	0x20002818
   123f8:	0001ee3c 	.word	0x0001ee3c

000123fc <clock_event_handler>:
	switch (event) {
   123fc:	b110      	cbz	r0, 12404 <clock_event_handler+0x8>
   123fe:	2801      	cmp	r0, #1
   12400:	d004      	beq.n	1240c <clock_event_handler+0x10>
   12402:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   12404:	4b03      	ldr	r3, [pc, #12]	; (12414 <clock_event_handler+0x18>)
   12406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   12408:	075b      	lsls	r3, r3, #29
   1240a:	d101      	bne.n	12410 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1240c:	f7ff bfdc 	b.w	123c8 <clkstarted_handle.constprop.0>
}
   12410:	4770      	bx	lr
   12412:	bf00      	nop
   12414:	20002818 	.word	0x20002818

00012418 <generic_hfclk_start>:
{
   12418:	b508      	push	{r3, lr}
	__asm__ volatile(
   1241a:	f04f 0320 	mov.w	r3, #32
   1241e:	f3ef 8111 	mrs	r1, BASEPRI
   12422:	f383 8812 	msr	BASEPRI_MAX, r3
   12426:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1242a:	4a12      	ldr	r2, [pc, #72]	; (12474 <generic_hfclk_start+0x5c>)
   1242c:	6813      	ldr	r3, [r2, #0]
   1242e:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   12432:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   12436:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   12438:	d00c      	beq.n	12454 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1243a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1243e:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   12442:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   12446:	f013 0301 	ands.w	r3, r3, #1
   1244a:	d003      	beq.n	12454 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   1244c:	480a      	ldr	r0, [pc, #40]	; (12478 <generic_hfclk_start+0x60>)
   1244e:	f00a fe87 	bl	1d160 <set_on_state>
			already_started = true;
   12452:	2301      	movs	r3, #1
	__asm__ volatile(
   12454:	f381 8811 	msr	BASEPRI, r1
   12458:	f3bf 8f6f 	isb	sy
	if (already_started) {
   1245c:	b123      	cbz	r3, 12468 <generic_hfclk_start+0x50>
}
   1245e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   12462:	2000      	movs	r0, #0
   12464:	f7ff bfb0 	b.w	123c8 <clkstarted_handle.constprop.0>
}
   12468:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1246c:	2001      	movs	r0, #1
   1246e:	f001 bee3 	b.w	14238 <nrfx_clock_start>
   12472:	bf00      	nop
   12474:	20002868 	.word	0x20002868
   12478:	20002858 	.word	0x20002858

0001247c <api_blocking_start>:
{
   1247c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1247e:	2200      	movs	r2, #0
   12480:	2301      	movs	r3, #1
   12482:	e9cd 2302 	strd	r2, r3, [sp, #8]
   12486:	ab04      	add	r3, sp, #16
   12488:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1248c:	4a09      	ldr	r2, [pc, #36]	; (124b4 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1248e:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   12492:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   12494:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   12498:	f00a fed2 	bl	1d240 <api_start>
	if (err < 0) {
   1249c:	2800      	cmp	r0, #0
   1249e:	db05      	blt.n	124ac <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   124a0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   124a4:	2300      	movs	r3, #0
   124a6:	4668      	mov	r0, sp
   124a8:	f003 f92c 	bl	15704 <z_impl_k_sem_take>
}
   124ac:	b007      	add	sp, #28
   124ae:	f85d fb04 	ldr.w	pc, [sp], #4
   124b2:	bf00      	nop
   124b4:	0001d267 	.word	0x0001d267

000124b8 <lfclk_start>:
{
   124b8:	b510      	push	{r4, lr}
	if (!once) {
   124ba:	4c07      	ldr	r4, [pc, #28]	; (124d8 <lfclk_start+0x20>)
   124bc:	7823      	ldrb	r3, [r4, #0]
   124be:	b92b      	cbnz	r3, 124cc <lfclk_start+0x14>
	z_impl_k_busy_wait(usec_to_wait);
   124c0:	f44f 70a5 	mov.w	r0, #330	; 0x14a
   124c4:	f00c fac5 	bl	1ea52 <z_impl_k_busy_wait>
		once = true;
   124c8:	2301      	movs	r3, #1
   124ca:	7023      	strb	r3, [r4, #0]
}
   124cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   124d0:	2000      	movs	r0, #0
   124d2:	f001 beb1 	b.w	14238 <nrfx_clock_start>
   124d6:	bf00      	nop
   124d8:	20002b7b 	.word	0x20002b7b

000124dc <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   124dc:	4b09      	ldr	r3, [pc, #36]	; (12504 <generic_hfclk_stop+0x28>)
   124de:	f3bf 8f5b 	dmb	ish
   124e2:	e853 2f00 	ldrex	r2, [r3]
   124e6:	f022 0102 	bic.w	r1, r2, #2
   124ea:	e843 1000 	strex	r0, r1, [r3]
   124ee:	2800      	cmp	r0, #0
   124f0:	d1f7      	bne.n	124e2 <generic_hfclk_stop+0x6>
   124f2:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   124f6:	07d3      	lsls	r3, r2, #31
   124f8:	d402      	bmi.n	12500 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   124fa:	2001      	movs	r0, #1
   124fc:	f001 bee4 	b.w	142c8 <nrfx_clock_stop>
}
   12500:	4770      	bx	lr
   12502:	bf00      	nop
   12504:	20002868 	.word	0x20002868

00012508 <z_nrf_clock_control_get_onoff>:
}
   12508:	4a02      	ldr	r2, [pc, #8]	; (12514 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
   1250a:	b2c3      	uxtb	r3, r0
}
   1250c:	201c      	movs	r0, #28
   1250e:	fb03 2000 	mla	r0, r3, r0, r2
   12512:	4770      	bx	lr
   12514:	20002818 	.word	0x20002818

00012518 <z_nrf_clock_bt_ctlr_hf_request>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   12518:	4b09      	ldr	r3, [pc, #36]	; (12540 <z_nrf_clock_bt_ctlr_hf_request+0x28>)
   1251a:	f3bf 8f5b 	dmb	ish
   1251e:	e853 2f00 	ldrex	r2, [r3]
   12522:	f042 0101 	orr.w	r1, r2, #1
   12526:	e843 1000 	strex	r0, r1, [r3]
   1252a:	2800      	cmp	r0, #0
   1252c:	d1f7      	bne.n	1251e <z_nrf_clock_bt_ctlr_hf_request+0x6>
   1252e:	f3bf 8f5b 	dmb	ish
	if (atomic_or(&hfclk_users, HF_USER_BT) & HF_USER_GENERIC) {
   12532:	0793      	lsls	r3, r2, #30
   12534:	d402      	bmi.n	1253c <z_nrf_clock_bt_ctlr_hf_request+0x24>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   12536:	2001      	movs	r0, #1
   12538:	f001 be7e 	b.w	14238 <nrfx_clock_start>
}
   1253c:	4770      	bx	lr
   1253e:	bf00      	nop
   12540:	20002868 	.word	0x20002868

00012544 <z_nrf_clock_bt_ctlr_hf_release>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12544:	4b09      	ldr	r3, [pc, #36]	; (1256c <z_nrf_clock_bt_ctlr_hf_release+0x28>)
   12546:	f3bf 8f5b 	dmb	ish
   1254a:	e853 2f00 	ldrex	r2, [r3]
   1254e:	f022 0101 	bic.w	r1, r2, #1
   12552:	e843 1000 	strex	r0, r1, [r3]
   12556:	2800      	cmp	r0, #0
   12558:	d1f7      	bne.n	1254a <z_nrf_clock_bt_ctlr_hf_release+0x6>
   1255a:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_BT) & HF_USER_GENERIC) {
   1255e:	0793      	lsls	r3, r2, #30
   12560:	d402      	bmi.n	12568 <z_nrf_clock_bt_ctlr_hf_release+0x24>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   12562:	2001      	movs	r0, #1
   12564:	f001 beb0 	b.w	142c8 <nrfx_clock_stop>
}
   12568:	4770      	bx	lr
   1256a:	bf00      	nop
   1256c:	20002868 	.word	0x20002868

00012570 <z_nrf_clock_control_lf_on>:
{
   12570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   12574:	4939      	ldr	r1, [pc, #228]	; (1265c <z_nrf_clock_control_lf_on+0xec>)
   12576:	f3bf 8f5b 	dmb	ish
   1257a:	4607      	mov	r7, r0
   1257c:	2201      	movs	r2, #1
   1257e:	e851 3f00 	ldrex	r3, [r1]
   12582:	e841 2000 	strex	r0, r2, [r1]
   12586:	2800      	cmp	r0, #0
   12588:	d1f9      	bne.n	1257e <z_nrf_clock_control_lf_on+0xe>
   1258a:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   1258e:	b933      	cbnz	r3, 1259e <z_nrf_clock_control_lf_on+0x2e>
   12590:	4933      	ldr	r1, [pc, #204]	; (12660 <z_nrf_clock_control_lf_on+0xf0>)
		err = onoff_request(mgr, &cli);
   12592:	4834      	ldr	r0, [pc, #208]	; (12664 <z_nrf_clock_control_lf_on+0xf4>)
   12594:	604b      	str	r3, [r1, #4]
   12596:	60cb      	str	r3, [r1, #12]
   12598:	608a      	str	r2, [r1, #8]
   1259a:	f004 f89d 	bl	166d8 <onoff_request>
	switch (start_mode) {
   1259e:	1e7b      	subs	r3, r7, #1
   125a0:	2b01      	cmp	r3, #1
   125a2:	d82f      	bhi.n	12604 <z_nrf_clock_control_lf_on+0x94>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   125a4:	2f01      	cmp	r7, #1
   125a6:	d107      	bne.n	125b8 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   125a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   125ac:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   125b0:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   125b4:	2b01      	cmp	r3, #1
   125b6:	d025      	beq.n	12604 <z_nrf_clock_control_lf_on+0x94>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   125b8:	f00b ff26 	bl	1e408 <k_is_in_isr>
   125bc:	4604      	mov	r4, r0
   125be:	b918      	cbnz	r0, 125c8 <z_nrf_clock_control_lf_on+0x58>
	return !z_sys_post_kernel;
   125c0:	4b29      	ldr	r3, [pc, #164]	; (12668 <z_nrf_clock_control_lf_on+0xf8>)
	int key = isr_mode ? irq_lock() : 0;
   125c2:	781b      	ldrb	r3, [r3, #0]
   125c4:	2b00      	cmp	r3, #0
   125c6:	d141      	bne.n	1264c <z_nrf_clock_control_lf_on+0xdc>
	__asm__ volatile(
   125c8:	f04f 0320 	mov.w	r3, #32
   125cc:	f3ef 8611 	mrs	r6, BASEPRI
   125d0:	f383 8812 	msr	BASEPRI_MAX, r3
   125d4:	f3bf 8f6f 	isb	sy
   125d8:	2401      	movs	r4, #1
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   125da:	f8df 8090 	ldr.w	r8, [pc, #144]	; 1266c <z_nrf_clock_control_lf_on+0xfc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   125de:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   125e2:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   125e6:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
   125ea:	03d2      	lsls	r2, r2, #15
   125ec:	d50c      	bpl.n	12608 <z_nrf_clock_control_lf_on+0x98>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   125ee:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   125f2:	2b01      	cmp	r3, #1
   125f4:	d001      	beq.n	125fa <z_nrf_clock_control_lf_on+0x8a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   125f6:	2f01      	cmp	r7, #1
   125f8:	d106      	bne.n	12608 <z_nrf_clock_control_lf_on+0x98>
	if (isr_mode) {
   125fa:	b30c      	cbz	r4, 12640 <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
   125fc:	f386 8811 	msr	BASEPRI, r6
   12600:	f3bf 8f6f 	isb	sy
}
   12604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   12608:	b1ac      	cbz	r4, 12636 <z_nrf_clock_control_lf_on+0xc6>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1260a:	4630      	mov	r0, r6
   1260c:	f7f1 fb1c 	bl	3c48 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   12610:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   12614:	2b00      	cmp	r3, #0
   12616:	d1e4      	bne.n	125e2 <z_nrf_clock_control_lf_on+0x72>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   12618:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   1261c:	2a00      	cmp	r2, #0
   1261e:	d0e0      	beq.n	125e2 <z_nrf_clock_control_lf_on+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12620:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   12624:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   12628:	2301      	movs	r3, #1
   1262a:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
   1262e:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12632:	60ab      	str	r3, [r5, #8]
}
   12634:	e7d5      	b.n	125e2 <z_nrf_clock_control_lf_on+0x72>
	return z_impl_k_sleep(timeout);
   12636:	2100      	movs	r1, #0
   12638:	2021      	movs	r0, #33	; 0x21
   1263a:	f003 fcd9 	bl	15ff0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1263e:	e7e7      	b.n	12610 <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENSET = mask;
   12640:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   12644:	2202      	movs	r2, #2
   12646:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1264a:	e7db      	b.n	12604 <z_nrf_clock_control_lf_on+0x94>
    p_reg->INTENCLR = mask;
   1264c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   12650:	2202      	movs	r2, #2
   12652:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   12656:	4606      	mov	r6, r0
}
   12658:	e7bf      	b.n	125da <z_nrf_clock_control_lf_on+0x6a>
   1265a:	bf00      	nop
   1265c:	2000286c 	.word	0x2000286c
   12660:	20002808 	.word	0x20002808
   12664:	20002834 	.word	0x20002834
   12668:	20002fad 	.word	0x20002fad
   1266c:	e000e100 	.word	0xe000e100

00012670 <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
   12670:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
   12672:	4c04      	ldr	r4, [pc, #16]	; (12684 <rtt_console_init+0x14>)
   12674:	4620      	mov	r0, r4
   12676:	f7f0 f99b 	bl	29b0 <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
   1267a:	4620      	mov	r0, r4
   1267c:	f7f1 fe2e 	bl	42dc <__stdout_hook_install>

	return 0;
}
   12680:	2000      	movs	r0, #0
   12682:	bd10      	pop	{r4, pc}
   12684:	00012689 	.word	0x00012689

00012688 <rtt_console_out>:
{
   12688:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1268a:	4e14      	ldr	r6, [pc, #80]	; (126dc <rtt_console_out+0x54>)
	char c = (char)character;
   1268c:	f88d 0007 	strb.w	r0, [sp, #7]
{
   12690:	4604      	mov	r4, r0
	char c = (char)character;
   12692:	2503      	movs	r5, #3
		SEGGER_RTT_LOCK();
   12694:	f3ef 8711 	mrs	r7, BASEPRI
   12698:	f04f 0120 	mov.w	r1, #32
   1269c:	f381 8811 	msr	BASEPRI, r1
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
   126a0:	2201      	movs	r2, #1
   126a2:	f10d 0107 	add.w	r1, sp, #7
   126a6:	2000      	movs	r0, #0
   126a8:	f002 fd5c 	bl	15164 <SEGGER_RTT_WriteNoLock>
		SEGGER_RTT_UNLOCK();
   126ac:	f387 8811 	msr	BASEPRI, r7
		if (cnt) {
   126b0:	b120      	cbz	r0, 126bc <rtt_console_out+0x34>
			host_present = true;
   126b2:	2301      	movs	r3, #1
   126b4:	7033      	strb	r3, [r6, #0]
}
   126b6:	4620      	mov	r0, r4
   126b8:	b003      	add	sp, #12
   126ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (host_present) {
   126bc:	7833      	ldrb	r3, [r6, #0]
   126be:	2b00      	cmp	r3, #0
   126c0:	d0f9      	beq.n	126b6 <rtt_console_out+0x2e>
			if (max_cnt) {
   126c2:	3d01      	subs	r5, #1
   126c4:	d008      	beq.n	126d8 <rtt_console_out+0x50>
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
   126c6:	f00b fe9f 	bl	1e408 <k_is_in_isr>
   126ca:	2800      	cmp	r0, #0
   126cc:	d1e2      	bne.n	12694 <rtt_console_out+0xc>
   126ce:	2100      	movs	r1, #0
   126d0:	2042      	movs	r0, #66	; 0x42
   126d2:	f003 fc8d 	bl	15ff0 <z_impl_k_sleep>
		SEGGER_RTT_LOCK();
   126d6:	e7dd      	b.n	12694 <rtt_console_out+0xc>
				host_present = false;
   126d8:	7035      	strb	r5, [r6, #0]
   126da:	e7ec      	b.n	126b6 <rtt_console_out+0x2e>
   126dc:	20002b7c 	.word	0x20002b7c

000126e0 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   126e0:	b530      	push	{r4, r5, lr}
	return port->config;
   126e2:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   126e4:	7b04      	ldrb	r4, [r0, #12]
   126e6:	f001 051f 	and.w	r5, r1, #31
	nrfx_err_t err;

	if (mode == GPIO_INT_MODE_DISABLED) {
   126ea:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   126ee:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
   126f2:	b085      	sub	sp, #20
   126f4:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
   126f8:	d104      	bne.n	12704 <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
   126fa:	4628      	mov	r0, r5
   126fc:	f002 f882 	bl	14804 <nrfx_gpiote_trigger_disable>
		return -EIO;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
   12700:	2000      	movs	r0, #0
   12702:	e02e      	b.n	12762 <gpio_nrfx_pin_interrupt_configure+0x82>
	if (mode == GPIO_INT_MODE_LEVEL) {
   12704:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
   12708:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   1270c:	d12b      	bne.n	12766 <gpio_nrfx_pin_interrupt_configure+0x86>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   1270e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   12712:	bf0c      	ite	eq
   12714:	2304      	moveq	r3, #4
   12716:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
   12718:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   1271c:	6883      	ldr	r3, [r0, #8]
   1271e:	fa23 f101 	lsr.w	r1, r3, r1
   12722:	07c9      	lsls	r1, r1, #31
   12724:	d42b      	bmi.n	1277e <gpio_nrfx_pin_interrupt_configure+0x9e>
   12726:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   1272a:	d128      	bne.n	1277e <gpio_nrfx_pin_interrupt_configure+0x9e>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   1272c:	f005 031f 	and.w	r3, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   12730:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   12734:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   12738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1273c:	07db      	lsls	r3, r3, #31
   1273e:	d41e      	bmi.n	1277e <gpio_nrfx_pin_interrupt_configure+0x9e>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   12740:	f10d 0407 	add.w	r4, sp, #7
   12744:	4621      	mov	r1, r4
   12746:	4628      	mov	r0, r5
   12748:	f001 ffc4 	bl	146d4 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   1274c:	4b14      	ldr	r3, [pc, #80]	; (127a0 <gpio_nrfx_pin_interrupt_configure+0xc0>)
   1274e:	4298      	cmp	r0, r3
   12750:	d114      	bne.n	1277c <gpio_nrfx_pin_interrupt_configure+0x9c>
			err = nrfx_gpiote_channel_alloc(&ch);
   12752:	4620      	mov	r0, r4
   12754:	f002 f80c 	bl	14770 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   12758:	4b12      	ldr	r3, [pc, #72]	; (127a4 <gpio_nrfx_pin_interrupt_configure+0xc4>)
   1275a:	4298      	cmp	r0, r3
   1275c:	d00e      	beq.n	1277c <gpio_nrfx_pin_interrupt_configure+0x9c>
				return -ENOMEM;
   1275e:	f06f 000b 	mvn.w	r0, #11
}
   12762:	b005      	add	sp, #20
   12764:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   12766:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   1276a:	d005      	beq.n	12778 <gpio_nrfx_pin_interrupt_configure+0x98>
   1276c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   12770:	bf0c      	ite	eq
   12772:	2302      	moveq	r3, #2
   12774:	2301      	movne	r3, #1
   12776:	e7cf      	b.n	12718 <gpio_nrfx_pin_interrupt_configure+0x38>
   12778:	2303      	movs	r3, #3
   1277a:	e7cd      	b.n	12718 <gpio_nrfx_pin_interrupt_configure+0x38>
		trigger_config.p_in_channel = &ch;
   1277c:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1277e:	2300      	movs	r3, #0
   12780:	4619      	mov	r1, r3
   12782:	aa02      	add	r2, sp, #8
   12784:	4628      	mov	r0, r5
   12786:	f001 fe7d 	bl	14484 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1278a:	4b06      	ldr	r3, [pc, #24]	; (127a4 <gpio_nrfx_pin_interrupt_configure+0xc4>)
   1278c:	4298      	cmp	r0, r3
   1278e:	d104      	bne.n	1279a <gpio_nrfx_pin_interrupt_configure+0xba>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   12790:	2101      	movs	r1, #1
   12792:	4628      	mov	r0, r5
   12794:	f001 fff2 	bl	1477c <nrfx_gpiote_trigger_enable>
   12798:	e7b2      	b.n	12700 <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
   1279a:	f06f 0004 	mvn.w	r0, #4
   1279e:	e7e0      	b.n	12762 <gpio_nrfx_pin_interrupt_configure+0x82>
   127a0:	0bad0004 	.word	0x0bad0004
   127a4:	0bad0000 	.word	0x0bad0000

000127a8 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   127a8:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   127aa:	f001 ffd1 	bl	14750 <nrfx_gpiote_is_init>
   127ae:	4604      	mov	r4, r0
   127b0:	b968      	cbnz	r0, 127ce <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   127b2:	f001 ffa5 	bl	14700 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   127b6:	4b08      	ldr	r3, [pc, #32]	; (127d8 <gpio_nrfx_init+0x30>)
   127b8:	4298      	cmp	r0, r3
   127ba:	d10a      	bne.n	127d2 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   127bc:	4807      	ldr	r0, [pc, #28]	; (127dc <gpio_nrfx_init+0x34>)
   127be:	4621      	mov	r1, r4
   127c0:	f001 ff82 	bl	146c8 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   127c4:	4622      	mov	r2, r4
   127c6:	2105      	movs	r1, #5
   127c8:	2006      	movs	r0, #6
   127ca:	f7f1 fa79 	bl	3cc0 <z_arm_irq_priority_set>
		return 0;
   127ce:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   127d0:	bd10      	pop	{r4, pc}
		return -EIO;
   127d2:	f06f 0004 	mvn.w	r0, #4
   127d6:	e7fb      	b.n	127d0 <gpio_nrfx_init+0x28>
   127d8:	0bad0000 	.word	0x0bad0000
   127dc:	000127e1 	.word	0x000127e1

000127e0 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   127e0:	0943      	lsrs	r3, r0, #5
{
   127e2:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   127e4:	d110      	bne.n	12808 <nrfx_gpio_handler+0x28>
	return list->head;
   127e6:	4b09      	ldr	r3, [pc, #36]	; (1280c <nrfx_gpio_handler+0x2c>)
   127e8:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   127ea:	b169      	cbz	r1, 12808 <nrfx_gpio_handler+0x28>
	gpio_fire_callbacks(list, port, BIT(pin));
   127ec:	2501      	movs	r5, #1
	return node->next;
   127ee:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   127f0:	4e07      	ldr	r6, [pc, #28]	; (12810 <nrfx_gpio_handler+0x30>)
   127f2:	4085      	lsls	r5, r0
		if (cb->pin_mask & pins) {
   127f4:	688a      	ldr	r2, [r1, #8]
   127f6:	402a      	ands	r2, r5
   127f8:	d002      	beq.n	12800 <nrfx_gpio_handler+0x20>
			cb->handler(port, cb, cb->pin_mask & pins);
   127fa:	684b      	ldr	r3, [r1, #4]
   127fc:	4630      	mov	r0, r6
   127fe:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   12800:	b114      	cbz	r4, 12808 <nrfx_gpio_handler+0x28>
   12802:	4621      	mov	r1, r4
   12804:	6824      	ldr	r4, [r4, #0]
   12806:	e7f5      	b.n	127f4 <nrfx_gpio_handler+0x14>
}
   12808:	bd70      	pop	{r4, r5, r6, pc}
   1280a:	bf00      	nop
   1280c:	20002870 	.word	0x20002870
   12810:	0001ee54 	.word	0x0001ee54

00012814 <gpio_nrfx_pin_configure>:
{
   12814:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
   12818:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1281a:	7b3b      	ldrb	r3, [r7, #12]
   1281c:	f001 051f 	and.w	r5, r1, #31
{
   12820:	b085      	sub	sp, #20
   12822:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   12824:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
   12828:	4614      	mov	r4, r2
   1282a:	b9ca      	cbnz	r2, 12860 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
   1282c:	a902      	add	r1, sp, #8
   1282e:	4628      	mov	r0, r5
   12830:	f001 ff50 	bl	146d4 <nrfx_gpiote_channel_get>
   12834:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
   12836:	4628      	mov	r0, r5
   12838:	f002 f80c 	bl	14854 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
   1283c:	4b48      	ldr	r3, [pc, #288]	; (12960 <gpio_nrfx_pin_configure+0x14c>)
   1283e:	4298      	cmp	r0, r3
   12840:	d004      	beq.n	1284c <gpio_nrfx_pin_configure+0x38>
		return -EIO;
   12842:	f06f 0004 	mvn.w	r0, #4
}
   12846:	b005      	add	sp, #20
   12848:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
   1284c:	4284      	cmp	r4, r0
   1284e:	d105      	bne.n	1285c <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
   12850:	f89d 0008 	ldrb.w	r0, [sp, #8]
   12854:	f001 ff86 	bl	14764 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   12858:	42a0      	cmp	r0, r4
   1285a:	d1f2      	bne.n	12842 <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1285c:	2000      	movs	r0, #0
   1285e:	e7f2      	b.n	12846 <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
   12860:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
   12864:	f10d 0103 	add.w	r1, sp, #3
   12868:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
   1286a:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
   1286e:	f001 ff31 	bl	146d4 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   12872:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
   12874:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   12876:	aa02      	add	r2, sp, #8
   12878:	4649      	mov	r1, r9
   1287a:	4628      	mov	r0, r5
   1287c:	f001 fe02 	bl	14484 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   12880:	4b37      	ldr	r3, [pc, #220]	; (12960 <gpio_nrfx_pin_configure+0x14c>)
   12882:	4298      	cmp	r0, r3
   12884:	d002      	beq.n	1288c <gpio_nrfx_pin_configure+0x78>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   12886:	f06f 0015 	mvn.w	r0, #21
   1288a:	e7dc      	b.n	12846 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
   1288c:	4580      	cmp	r8, r0
   1288e:	d103      	bne.n	12898 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
   12890:	f89d 0003 	ldrb.w	r0, [sp, #3]
   12894:	f001 ff66 	bl	14764 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   12898:	05a3      	lsls	r3, r4, #22
   1289a:	d54e      	bpl.n	1293a <gpio_nrfx_pin_configure+0x126>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1289c:	4b31      	ldr	r3, [pc, #196]	; (12964 <gpio_nrfx_pin_configure+0x150>)
   1289e:	4a32      	ldr	r2, [pc, #200]	; (12968 <gpio_nrfx_pin_configure+0x154>)
   128a0:	4023      	ands	r3, r4
   128a2:	4293      	cmp	r3, r2
   128a4:	d03a      	beq.n	1291c <gpio_nrfx_pin_configure+0x108>
   128a6:	d80c      	bhi.n	128c2 <gpio_nrfx_pin_configure+0xae>
   128a8:	2b06      	cmp	r3, #6
   128aa:	d014      	beq.n	128d6 <gpio_nrfx_pin_configure+0xc2>
   128ac:	d804      	bhi.n	128b8 <gpio_nrfx_pin_configure+0xa4>
   128ae:	b193      	cbz	r3, 128d6 <gpio_nrfx_pin_configure+0xc2>
   128b0:	2b02      	cmp	r3, #2
   128b2:	d1e8      	bne.n	12886 <gpio_nrfx_pin_configure+0x72>
   128b4:	2304      	movs	r3, #4
   128b6:	e00e      	b.n	128d6 <gpio_nrfx_pin_configure+0xc2>
   128b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   128bc:	d1e3      	bne.n	12886 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
   128be:	2301      	movs	r3, #1
   128c0:	e009      	b.n	128d6 <gpio_nrfx_pin_configure+0xc2>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   128c2:	4a2a      	ldr	r2, [pc, #168]	; (1296c <gpio_nrfx_pin_configure+0x158>)
   128c4:	4293      	cmp	r3, r2
   128c6:	d02b      	beq.n	12920 <gpio_nrfx_pin_configure+0x10c>
   128c8:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   128cc:	d02a      	beq.n	12924 <gpio_nrfx_pin_configure+0x110>
   128ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   128d2:	d1d8      	bne.n	12886 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
   128d4:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
   128d6:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   128da:	f484 7380 	eor.w	r3, r4, #256	; 0x100
   128de:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
   128e2:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   128e4:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
   128e8:	bf54      	ite	pl
   128ea:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   128ee:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   128f0:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
   128f2:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   128f6:	d517      	bpl.n	12928 <gpio_nrfx_pin_configure+0x114>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   128f8:	687b      	ldr	r3, [r7, #4]
   128fa:	2101      	movs	r1, #1
   128fc:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
   12900:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   12904:	2200      	movs	r2, #0
   12906:	a901      	add	r1, sp, #4
   12908:	4628      	mov	r0, r5
   1290a:	f001 fe65 	bl	145d8 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1290e:	4b14      	ldr	r3, [pc, #80]	; (12960 <gpio_nrfx_pin_configure+0x14c>)
   12910:	4298      	cmp	r0, r3
   12912:	bf14      	ite	ne
   12914:	f06f 0015 	mvnne.w	r0, #21
   12918:	2000      	moveq	r0, #0
   1291a:	e794      	b.n	12846 <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
   1291c:	2307      	movs	r3, #7
   1291e:	e7da      	b.n	128d6 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_D0H1;
   12920:	2305      	movs	r3, #5
   12922:	e7d8      	b.n	128d6 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_H0H1;
   12924:	2303      	movs	r3, #3
   12926:	e7d6      	b.n	128d6 <gpio_nrfx_pin_configure+0xc2>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   12928:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   1292a:	bf41      	itttt	mi
   1292c:	687b      	ldrmi	r3, [r7, #4]
   1292e:	2101      	movmi	r1, #1
   12930:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
   12934:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
   12938:	e7e4      	b.n	12904 <gpio_nrfx_pin_configure+0xf0>
	if (flags & GPIO_PULL_UP) {
   1293a:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1293c:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   12940:	bf54      	ite	pl
   12942:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
   12946:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   12948:	461a      	mov	r2, r3
   1294a:	a901      	add	r1, sp, #4
   1294c:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
   1294e:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   12952:	f001 fd97 	bl	14484 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   12956:	4b02      	ldr	r3, [pc, #8]	; (12960 <gpio_nrfx_pin_configure+0x14c>)
   12958:	4298      	cmp	r0, r3
   1295a:	f43f af7f 	beq.w	1285c <gpio_nrfx_pin_configure+0x48>
   1295e:	e792      	b.n	12886 <gpio_nrfx_pin_configure+0x72>
   12960:	0bad0000 	.word	0x0bad0000
   12964:	00f00006 	.word	0x00f00006
   12968:	00100006 	.word	0x00100006
   1296c:	00400002 	.word	0x00400002

00012970 <i2c_nrfx_twim_recover_bus>:

	return 0;
}

static int i2c_nrfx_twim_recover_bus(const struct device *dev)
{
   12970:	b508      	push	{r3, lr}
	struct i2c_nrfx_twim_data *dev_data = dev->data;
   12972:	6903      	ldr	r3, [r0, #16]
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
   12974:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
   12978:	f002 fb76 	bl	15068 <nrfx_twi_twim_bus_recover>

	nrfx_err_t err = nrfx_twim_bus_recover(dev_data->twim_config.scl,
					       dev_data->twim_config.sda);

	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
   1297c:	4b03      	ldr	r3, [pc, #12]	; (1298c <i2c_nrfx_twim_recover_bus+0x1c>)
   1297e:	4298      	cmp	r0, r3
}
   12980:	bf14      	ite	ne
   12982:	f06f 000f 	mvnne.w	r0, #15
   12986:	2000      	moveq	r0, #0
   12988:	bd08      	pop	{r3, pc}
   1298a:	bf00      	nop
   1298c:	0bad0000 	.word	0x0bad0000

00012990 <init_twim>:
{
   12990:	b510      	push	{r4, lr}
	struct i2c_nrfx_twim_data *dev_data = dev->data;
   12992:	6904      	ldr	r4, [r0, #16]
	nrfx_err_t result = nrfx_twim_init(&dev_config->twim,
   12994:	4a08      	ldr	r2, [pc, #32]	; (129b8 <init_twim+0x28>)
   12996:	6840      	ldr	r0, [r0, #4]
   12998:	4623      	mov	r3, r4
   1299a:	f104 0130 	add.w	r1, r4, #48	; 0x30
   1299e:	f002 f921 	bl	14be4 <nrfx_twim_init>
	if (result != NRFX_SUCCESS) {
   129a2:	4b06      	ldr	r3, [pc, #24]	; (129bc <init_twim+0x2c>)
   129a4:	4298      	cmp	r0, r3
	dev_data->twim_initialized = true;
   129a6:	bf03      	ittte	eq
   129a8:	2301      	moveq	r3, #1
   129aa:	f884 3040 	strbeq.w	r3, [r4, #64]	; 0x40
	return 0;
   129ae:	2000      	moveq	r0, #0
		return -EIO;
   129b0:	f06f 0004 	mvnne.w	r0, #4
}
   129b4:	bd10      	pop	{r4, pc}
   129b6:	bf00      	nop
   129b8:	000129c1 	.word	0x000129c1
   129bc:	0bad0000 	.word	0x0bad0000

000129c0 <event_handler>:
	switch (p_event->type) {
   129c0:	7803      	ldrb	r3, [r0, #0]
   129c2:	2b01      	cmp	r3, #1
   129c4:	d008      	beq.n	129d8 <event_handler+0x18>
   129c6:	2b02      	cmp	r3, #2
   129c8:	d008      	beq.n	129dc <event_handler+0x1c>
   129ca:	b94b      	cbnz	r3, 129e0 <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
   129cc:	4b05      	ldr	r3, [pc, #20]	; (129e4 <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
   129ce:	644b      	str	r3, [r1, #68]	; 0x44
	z_impl_k_sem_give(sem);
   129d0:	f101 0018 	add.w	r0, r1, #24
   129d4:	f002 be70 	b.w	156b8 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   129d8:	4b03      	ldr	r3, [pc, #12]	; (129e8 <event_handler+0x28>)
   129da:	e7f8      	b.n	129ce <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   129dc:	4b03      	ldr	r3, [pc, #12]	; (129ec <event_handler+0x2c>)
   129de:	e7f6      	b.n	129ce <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
   129e0:	4b03      	ldr	r3, [pc, #12]	; (129f0 <event_handler+0x30>)
   129e2:	e7f4      	b.n	129ce <event_handler+0xe>
   129e4:	0bad0000 	.word	0x0bad0000
   129e8:	0bae0001 	.word	0x0bae0001
   129ec:	0bae0002 	.word	0x0bae0002
   129f0:	0bad0001 	.word	0x0bad0001

000129f4 <i2c_nrfx_twim_transfer>:
{
   129f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
   129f8:	6847      	ldr	r7, [r0, #4]
	struct i2c_nrfx_twim_data *dev_data = dev->data;
   129fa:	6906      	ldr	r6, [r0, #16]
{
   129fc:	b089      	sub	sp, #36	; 0x24
   129fe:	4698      	mov	r8, r3
   12a00:	4605      	mov	r5, r0
	uint16_t concat_buf_size = dev_config->concat_buf_size;
   12a02:	893b      	ldrh	r3, [r7, #8]
   12a04:	9300      	str	r3, [sp, #0]
{
   12a06:	460c      	mov	r4, r1
   12a08:	4693      	mov	fp, r2
	nrfx_twim_xfer_desc_t cur_xfer = {
   12a0a:	2100      	movs	r1, #0
   12a0c:	2214      	movs	r2, #20
   12a0e:	a803      	add	r0, sp, #12
	uint8_t *msg_buf = dev_data->msg_buf;
   12a10:	f8d6 9048 	ldr.w	r9, [r6, #72]	; 0x48
	nrfx_twim_xfer_desc_t cur_xfer = {
   12a14:	f004 fc29 	bl	1726a <memset>
	if (!dev_data->twim_initialized && init_twim(dev) < 0) {
   12a18:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
	nrfx_twim_xfer_desc_t cur_xfer = {
   12a1c:	f88d 800d 	strb.w	r8, [sp, #13]
	if (!dev_data->twim_initialized && init_twim(dev) < 0) {
   12a20:	b1bb      	cbz	r3, 12a52 <i2c_nrfx_twim_transfer+0x5e>
	return z_impl_k_sem_take(sem, timeout);
   12a22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12a26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12a2a:	4630      	mov	r0, r6
   12a2c:	f002 fe6a 	bl	15704 <z_impl_k_sem_take>
	k_sem_take(&dev_data->completion_sync, K_NO_WAIT);
   12a30:	f106 0a18 	add.w	sl, r6, #24
   12a34:	2200      	movs	r2, #0
   12a36:	2300      	movs	r3, #0
   12a38:	4650      	mov	r0, sl
   12a3a:	f002 fe63 	bl	15704 <z_impl_k_sem_take>
	nrfx_twim_enable(&dev_config->twim);
   12a3e:	4638      	mov	r0, r7
   12a40:	f002 f920 	bl	14c84 <nrfx_twim_enable>
	for (size_t i = 0; i < num_msgs; i++) {
   12a44:	f04f 0800 	mov.w	r8, #0
	uint16_t msg_buf_used = 0;
   12a48:	4645      	mov	r5, r8
	for (size_t i = 0; i < num_msgs; i++) {
   12a4a:	45d8      	cmp	r8, fp
   12a4c:	d309      	bcc.n	12a62 <i2c_nrfx_twim_transfer+0x6e>
   12a4e:	2400      	movs	r4, #0
   12a50:	e051      	b.n	12af6 <i2c_nrfx_twim_transfer+0x102>
	if (!dev_data->twim_initialized && init_twim(dev) < 0) {
   12a52:	4628      	mov	r0, r5
   12a54:	f7ff ff9c 	bl	12990 <init_twim>
   12a58:	2800      	cmp	r0, #0
   12a5a:	dae2      	bge.n	12a22 <i2c_nrfx_twim_transfer+0x2e>
		return -EIO;
   12a5c:	f06f 0404 	mvn.w	r4, #4
   12a60:	e04f      	b.n	12b02 <i2c_nrfx_twim_transfer+0x10e>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
   12a62:	7a21      	ldrb	r1, [r4, #8]
   12a64:	070a      	lsls	r2, r1, #28
   12a66:	f100 808f 	bmi.w	12b88 <i2c_nrfx_twim_transfer+0x194>
		bool concat_next = ((i + 1) < num_msgs)
   12a6a:	f108 0801 	add.w	r8, r8, #1
				&& ((msgs[i].flags & I2C_MSG_READ)
   12a6e:	45d8      	cmp	r8, fp
   12a70:	6862      	ldr	r2, [r4, #4]
   12a72:	d20a      	bcs.n	12a8a <i2c_nrfx_twim_transfer+0x96>
				&& !(msgs[i].flags & I2C_MSG_STOP)
   12a74:	078b      	lsls	r3, r1, #30
   12a76:	d408      	bmi.n	12a8a <i2c_nrfx_twim_transfer+0x96>
				&& !(msgs[i + 1].flags & I2C_MSG_RESTART)
   12a78:	7d23      	ldrb	r3, [r4, #20]
				    == (msgs[i + 1].flags & I2C_MSG_READ));
   12a7a:	ea81 0003 	eor.w	r0, r1, r3
				&& ((msgs[i].flags & I2C_MSG_READ)
   12a7e:	f000 0001 	and.w	r0, r0, #1
   12a82:	f003 0304 	and.w	r3, r3, #4
   12a86:	4303      	orrs	r3, r0
   12a88:	d016      	beq.n	12ab8 <i2c_nrfx_twim_transfer+0xc4>
		if (concat_next || (msg_buf_used != 0)) {
   12a8a:	b1bd      	cbz	r5, 12abc <i2c_nrfx_twim_transfer+0xc8>
				&& ((msgs[i].flags & I2C_MSG_READ)
   12a8c:	2300      	movs	r3, #0
			if ((msg_buf_used + msgs[i].len) > concat_buf_size) {
   12a8e:	f8dd c000 	ldr.w	ip, [sp]
   12a92:	18a8      	adds	r0, r5, r2
   12a94:	4560      	cmp	r0, ip
   12a96:	d87a      	bhi.n	12b8e <i2c_nrfx_twim_transfer+0x19a>
			if (!(msgs[i].flags & I2C_MSG_READ)) {
   12a98:	07c8      	lsls	r0, r1, #31
   12a9a:	d406      	bmi.n	12aaa <i2c_nrfx_twim_transfer+0xb6>
				memcpy(msg_buf + msg_buf_used,
   12a9c:	6821      	ldr	r1, [r4, #0]
   12a9e:	9301      	str	r3, [sp, #4]
   12aa0:	eb09 0005 	add.w	r0, r9, r5
   12aa4:	f004 fbd6 	bl	17254 <memcpy>
   12aa8:	9b01      	ldr	r3, [sp, #4]
			msg_buf_used += msgs[i].len;
   12aaa:	6862      	ldr	r2, [r4, #4]
   12aac:	4415      	add	r5, r2
   12aae:	b2ad      	uxth	r5, r5
		if (concat_next) {
   12ab0:	2b00      	cmp	r3, #0
   12ab2:	d037      	beq.n	12b24 <i2c_nrfx_twim_transfer+0x130>
   12ab4:	340c      	adds	r4, #12
   12ab6:	e7c8      	b.n	12a4a <i2c_nrfx_twim_transfer+0x56>
				&& ((msgs[i].flags & I2C_MSG_READ)
   12ab8:	2301      	movs	r3, #1
   12aba:	e7e8      	b.n	12a8e <i2c_nrfx_twim_transfer+0x9a>
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
   12abc:	07c9      	lsls	r1, r1, #31
   12abe:	d524      	bpl.n	12b0a <i2c_nrfx_twim_transfer+0x116>
			cur_xfer.p_primary_buf = msgs[i].buf;
   12ac0:	6823      	ldr	r3, [r4, #0]
   12ac2:	9306      	str	r3, [sp, #24]
			cur_xfer.primary_length = msgs[i].len;
   12ac4:	6863      	ldr	r3, [r4, #4]
   12ac6:	9304      	str	r3, [sp, #16]
   12ac8:	2500      	movs	r5, #0
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   12aca:	7a23      	ldrb	r3, [r4, #8]
			NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX;
   12acc:	f003 0201 	and.w	r2, r3, #1
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
   12ad0:	f013 0f02 	tst.w	r3, #2
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   12ad4:	f88d 200c 	strb.w	r2, [sp, #12]
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
   12ad8:	a903      	add	r1, sp, #12
   12ada:	bf0c      	ite	eq
   12adc:	2220      	moveq	r2, #32
   12ade:	2200      	movne	r2, #0
   12ae0:	4638      	mov	r0, r7
   12ae2:	f002 f933 	bl	14d4c <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
   12ae6:	4b2e      	ldr	r3, [pc, #184]	; (12ba0 <i2c_nrfx_twim_transfer+0x1ac>)
   12ae8:	4298      	cmp	r0, r3
   12aea:	d021      	beq.n	12b30 <i2c_nrfx_twim_transfer+0x13c>
			if (res == NRFX_ERROR_BUSY) {
   12aec:	330b      	adds	r3, #11
   12aee:	4298      	cmp	r0, r3
   12af0:	d053      	beq.n	12b9a <i2c_nrfx_twim_transfer+0x1a6>
			ret = -EIO;
   12af2:	f06f 0404 	mvn.w	r4, #4
	nrfx_twim_disable(&dev_config->twim);
   12af6:	4638      	mov	r0, r7
   12af8:	f002 f8d4 	bl	14ca4 <nrfx_twim_disable>
	z_impl_k_sem_give(sem);
   12afc:	4630      	mov	r0, r6
   12afe:	f002 fddb 	bl	156b8 <z_impl_k_sem_give>
}
   12b02:	4620      	mov	r0, r4
   12b04:	b009      	add	sp, #36	; 0x24
   12b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			   !nrfx_is_in_ram(msgs[i].buf)) {
   12b0a:	6821      	ldr	r1, [r4, #0]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   12b0c:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
   12b10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   12b14:	d0d4      	beq.n	12ac0 <i2c_nrfx_twim_transfer+0xcc>
			if (msgs[i].len > dev_config->flash_buf_max_size) {
   12b16:	897b      	ldrh	r3, [r7, #10]
   12b18:	4293      	cmp	r3, r2
   12b1a:	d33b      	bcc.n	12b94 <i2c_nrfx_twim_transfer+0x1a0>
			memcpy(msg_buf, msgs[i].buf, msgs[i].len);
   12b1c:	4648      	mov	r0, r9
   12b1e:	f004 fb99 	bl	17254 <memcpy>
			msg_buf_used = msgs[i].len;
   12b22:	88a5      	ldrh	r5, [r4, #4]
		if (msg_buf_used == 0) {
   12b24:	2d00      	cmp	r5, #0
   12b26:	d0cb      	beq.n	12ac0 <i2c_nrfx_twim_transfer+0xcc>
			cur_xfer.p_primary_buf = msg_buf;
   12b28:	f8cd 9018 	str.w	r9, [sp, #24]
			cur_xfer.primary_length = msg_buf_used;
   12b2c:	9504      	str	r5, [sp, #16]
   12b2e:	e7cc      	b.n	12aca <i2c_nrfx_twim_transfer+0xd6>
	return z_impl_k_sem_take(sem, timeout);
   12b30:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   12b34:	2300      	movs	r3, #0
   12b36:	4650      	mov	r0, sl
   12b38:	f002 fde4 	bl	15704 <z_impl_k_sem_take>
		if (ret != 0) {
   12b3c:	b138      	cbz	r0, 12b4e <i2c_nrfx_twim_transfer+0x15a>
			nrfx_twim_disable(&dev_config->twim);
   12b3e:	4638      	mov	r0, r7
   12b40:	f002 f8b0 	bl	14ca4 <nrfx_twim_disable>
   12b44:	e9d6 010c 	ldrd	r0, r1, [r6, #48]	; 0x30
   12b48:	f002 fa8e 	bl	15068 <nrfx_twi_twim_bus_recover>
   12b4c:	e7d1      	b.n	12af2 <i2c_nrfx_twim_transfer+0xfe>
		res = dev_data->res;
   12b4e:	6c73      	ldr	r3, [r6, #68]	; 0x44
		if (res != NRFX_SUCCESS) {
   12b50:	4a13      	ldr	r2, [pc, #76]	; (12ba0 <i2c_nrfx_twim_transfer+0x1ac>)
   12b52:	4293      	cmp	r3, r2
   12b54:	d1cd      	bne.n	12af2 <i2c_nrfx_twim_transfer+0xfe>
		if ((msgs[i].flags & I2C_MSG_READ)
   12b56:	7a23      	ldrb	r3, [r4, #8]
   12b58:	07db      	lsls	r3, r3, #31
   12b5a:	d401      	bmi.n	12b60 <i2c_nrfx_twim_transfer+0x16c>
		msg_buf_used = 0;
   12b5c:	2500      	movs	r5, #0
   12b5e:	e7a9      	b.n	12ab4 <i2c_nrfx_twim_transfer+0xc0>
		    && cur_xfer.p_primary_buf == msg_buf) {
   12b60:	9b06      	ldr	r3, [sp, #24]
   12b62:	4599      	cmp	r9, r3
   12b64:	d1fa      	bne.n	12b5c <i2c_nrfx_twim_transfer+0x168>
   12b66:	4623      	mov	r3, r4
   12b68:	e008      	b.n	12b7c <i2c_nrfx_twim_transfer+0x188>
				msg_buf_used -= msgs[j].len;
   12b6a:	1aa9      	subs	r1, r5, r2
				memcpy(msgs[j].buf,
   12b6c:	68d8      	ldr	r0, [r3, #12]
   12b6e:	9301      	str	r3, [sp, #4]
				msg_buf_used -= msgs[j].len;
   12b70:	b28d      	uxth	r5, r1
				memcpy(msgs[j].buf,
   12b72:	fa19 f181 	uxtah	r1, r9, r1
   12b76:	f004 fb6d 	bl	17254 <memcpy>
				j--;
   12b7a:	9b01      	ldr	r3, [sp, #4]
			while (msg_buf_used >= msgs[j].len) {
   12b7c:	685a      	ldr	r2, [r3, #4]
   12b7e:	4295      	cmp	r5, r2
   12b80:	f1a3 030c 	sub.w	r3, r3, #12
   12b84:	d2f1      	bcs.n	12b6a <i2c_nrfx_twim_transfer+0x176>
   12b86:	e7e9      	b.n	12b5c <i2c_nrfx_twim_transfer+0x168>
			ret = -ENOTSUP;
   12b88:	f06f 0485 	mvn.w	r4, #133	; 0x85
   12b8c:	e7b3      	b.n	12af6 <i2c_nrfx_twim_transfer+0x102>
				ret = -ENOSPC;
   12b8e:	f06f 041b 	mvn.w	r4, #27
   12b92:	e7b0      	b.n	12af6 <i2c_nrfx_twim_transfer+0x102>
				ret = -EINVAL;
   12b94:	f06f 0415 	mvn.w	r4, #21
   12b98:	e7ad      	b.n	12af6 <i2c_nrfx_twim_transfer+0x102>
				ret = -EBUSY;
   12b9a:	f06f 040f 	mvn.w	r4, #15
   12b9e:	e7aa      	b.n	12af6 <i2c_nrfx_twim_transfer+0x102>
   12ba0:	0bad0000 	.word	0x0bad0000

00012ba4 <ccs811_channel_get>:
{
	struct ccs811_data *drv_data = dev->data;
	const struct ccs811_result_type *rp = &drv_data->result;
	uint32_t uval;

	switch (chan) {
   12ba4:	391b      	subs	r1, #27
	struct ccs811_data *drv_data = dev->data;
   12ba6:	6903      	ldr	r3, [r0, #16]
	switch (chan) {
   12ba8:	2904      	cmp	r1, #4
   12baa:	d820      	bhi.n	12bee <ccs811_channel_get+0x4a>
   12bac:	e8df f001 	tbb	[pc, r1]
   12bb0:	0a1f0803 	.word	0x0a1f0803
   12bb4:	19          	.byte	0x19
   12bb5:	00          	.byte	0x00
	case SENSOR_CHAN_CO2:
		val->val1 = rp->co2;
   12bb6:	8a1b      	ldrh	r3, [r3, #16]
		val->val2 = 0;

		break;
	case SENSOR_CHAN_VOC:
		val->val1 = rp->voc;
   12bb8:	6013      	str	r3, [r2, #0]
		val->val2 = 0;
   12bba:	2000      	movs	r0, #0
   12bbc:	6050      	str	r0, [r2, #4]

		break;
   12bbe:	4770      	bx	lr
		val->val1 = rp->voc;
   12bc0:	8a5b      	ldrh	r3, [r3, #18]
   12bc2:	e7f9      	b.n	12bb8 <ccs811_channel_get+0x14>
	case SENSOR_CHAN_VOLTAGE:
		/*
		 * Raw ADC readings are contained in least significant 10 bits
		 */
		uval = ((rp->raw & CCS811_RAW_VOLTAGE_MSK)
			>> CCS811_RAW_VOLTAGE_POS) * CCS811_RAW_VOLTAGE_SCALE;
   12bc4:	8a9b      	ldrh	r3, [r3, #20]
		val->val1 = uval / 1000000U;
   12bc6:	480b      	ldr	r0, [pc, #44]	; (12bf4 <ccs811_channel_get+0x50>)
		uval = ((rp->raw & CCS811_RAW_VOLTAGE_MSK)
   12bc8:	f240 614c 	movw	r1, #1612	; 0x64c
			>> CCS811_RAW_VOLTAGE_POS) * CCS811_RAW_VOLTAGE_SCALE;
   12bcc:	f3c3 0309 	ubfx	r3, r3, #0, #10
		uval = ((rp->raw & CCS811_RAW_VOLTAGE_MSK)
   12bd0:	434b      	muls	r3, r1
		val->val1 = uval / 1000000U;
   12bd2:	fbb3 f1f0 	udiv	r1, r3, r0
		val->val2 = uval % 1000000;
   12bd6:	fb00 3311 	mls	r3, r0, r1, r3
		val->val1 = uval / 1000000U;
   12bda:	6011      	str	r1, [r2, #0]
		val->val2 = uval % 1000000;
   12bdc:	6053      	str	r3, [r2, #4]
		break;
	default:
		return -ENOTSUP;
	}

	return 0;
   12bde:	2000      	movs	r0, #0
		break;
   12be0:	4770      	bx	lr
			>> CCS811_RAW_CURRENT_POS) * CCS811_RAW_CURRENT_SCALE;
   12be2:	8a9b      	ldrh	r3, [r3, #20]
		val->val1 = uval / 1000000U;
   12be4:	2000      	movs	r0, #0
			>> CCS811_RAW_CURRENT_POS) * CCS811_RAW_CURRENT_SCALE;
   12be6:	0a9b      	lsrs	r3, r3, #10
		val->val2 = uval % 1000000;
   12be8:	e9c2 0300 	strd	r0, r3, [r2]
		break;
   12bec:	4770      	bx	lr
	switch (chan) {
   12bee:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   12bf2:	4770      	bx	lr
   12bf4:	000f4240 	.word	0x000f4240

00012bf8 <ccs811_init>:
}

#endif /* CONFIG_CCS811_TRIGGER */

static int ccs811_init(const struct device *dev)
{
   12bf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct ccs811_data *drv_data = dev->data;
   12bfa:	6904      	ldr	r4, [r0, #16]
	int status;
	uint16_t fw_ver;
	uint8_t cmd;
	uint8_t hw_id;

	*drv_data = (struct ccs811_data){ 0 };
   12bfc:	221c      	movs	r2, #28
   12bfe:	2100      	movs	r1, #0
   12c00:	4620      	mov	r0, r4
   12c02:	f004 fb32 	bl	1726a <memset>
   12c06:	485a      	ldr	r0, [pc, #360]	; (12d70 <ccs811_init+0x178>)
   12c08:	f002 fafc 	bl	15204 <z_impl_device_get_binding>
	drv_data->i2c = device_get_binding(DT_INST_BUS_LABEL(0));
   12c0c:	6020      	str	r0, [r4, #0]
	if (drv_data->i2c == NULL) {
   12c0e:	b920      	cbnz	r0, 12c1a <ccs811_init+0x22>
		LOG_ERR("Failed to get pointer to %s device!",
			DT_INST_BUS_LABEL(0));
		return -EINVAL;
   12c10:	f06f 0515 	mvn.w	r5, #21
#endif

out:
	set_wake(drv_data, false);
	return ret;
}
   12c14:	4628      	mov	r0, r5
   12c16:	b003      	add	sp, #12
   12c18:	bd30      	pop	{r4, r5, pc}
   12c1a:	4856      	ldr	r0, [pc, #344]	; (12d74 <ccs811_init+0x17c>)
   12c1c:	f002 faf2 	bl	15204 <z_impl_device_get_binding>
	drv_data->wake_gpio = device_get_binding(DT_INST_GPIO_LABEL(0, wake_gpios));
   12c20:	60e0      	str	r0, [r4, #12]
	if (drv_data->wake_gpio == NULL) {
   12c22:	2800      	cmp	r0, #0
   12c24:	d0f4      	beq.n	12c10 <ccs811_init+0x18>
	struct gpio_driver_data *data =
   12c26:	6902      	ldr	r2, [r0, #16]
	const struct gpio_driver_api *api =
   12c28:	6881      	ldr	r1, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   12c2a:	6813      	ldr	r3, [r2, #0]
   12c2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   12c30:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
   12c32:	680b      	ldr	r3, [r1, #0]
   12c34:	f640 2201 	movw	r2, #2561	; 0xa01
   12c38:	210c      	movs	r1, #12
   12c3a:	4798      	blx	r3
	set_wake(drv_data, true);
   12c3c:	68e0      	ldr	r0, [r4, #12]
   12c3e:	2101      	movs	r1, #1
   12c40:	f00a fdff 	bl	1d842 <set_wake.isra.0>
	k_msleep(1);
   12c44:	2001      	movs	r0, #1
   12c46:	f00a fdb5 	bl	1d7b4 <k_msleep.isra.0>
   12c4a:	484a      	ldr	r0, [pc, #296]	; (12d74 <ccs811_init+0x17c>)
   12c4c:	f002 fada 	bl	15204 <z_impl_device_get_binding>
	drv_data->reset_gpio = device_get_binding(DT_INST_GPIO_LABEL(0, reset_gpios));
   12c50:	60a0      	str	r0, [r4, #8]
	if (drv_data->reset_gpio == NULL) {
   12c52:	2800      	cmp	r0, #0
   12c54:	d0dc      	beq.n	12c10 <ccs811_init+0x18>
	struct gpio_driver_data *data =
   12c56:	6902      	ldr	r2, [r0, #16]
	const struct gpio_driver_api *api =
   12c58:	6881      	ldr	r1, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   12c5a:	6813      	ldr	r3, [r2, #0]
   12c5c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   12c60:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
   12c62:	680b      	ldr	r3, [r1, #0]
   12c64:	f240 6201 	movw	r2, #1537	; 0x601
   12c68:	210b      	movs	r1, #11
   12c6a:	4798      	blx	r3
	k_msleep(1);
   12c6c:	2001      	movs	r0, #1
   12c6e:	f00a fda1 	bl	1d7b4 <k_msleep.isra.0>
   12c72:	4841      	ldr	r0, [pc, #260]	; (12d78 <ccs811_init+0x180>)
   12c74:	f002 fac6 	bl	15204 <z_impl_device_get_binding>
	drv_data->irq_gpio = device_get_binding(DT_INST_GPIO_LABEL(0, irq_gpios));
   12c78:	6060      	str	r0, [r4, #4]
	if (drv_data->irq_gpio == NULL) {
   12c7a:	2800      	cmp	r0, #0
   12c7c:	d0c8      	beq.n	12c10 <ccs811_init+0x18>
	k_msleep(20);            /* t_START assuming recent power-on */
   12c7e:	2014      	movs	r0, #20
   12c80:	f00a fd98 	bl	1d7b4 <k_msleep.isra.0>
	gpio_pin_set(drv_data->reset_gpio, RESET_PIN, 1);
   12c84:	68a0      	ldr	r0, [r4, #8]
   12c86:	2201      	movs	r2, #1
   12c88:	210b      	movs	r1, #11
   12c8a:	f00a fd83 	bl	1d794 <gpio_pin_set.isra.0>
	z_impl_k_busy_wait(usec_to_wait);
   12c8e:	200f      	movs	r0, #15
   12c90:	f00b fedf 	bl	1ea52 <z_impl_k_busy_wait>
	gpio_pin_set(drv_data->reset_gpio, RESET_PIN, 0);
   12c94:	2200      	movs	r2, #0
   12c96:	210b      	movs	r1, #11
   12c98:	68a0      	ldr	r0, [r4, #8]
   12c9a:	f00a fd7b 	bl	1d794 <gpio_pin_set.isra.0>
	k_msleep(2);             /* t_START after reset */
   12c9e:	2002      	movs	r0, #2
   12ca0:	f00a fd88 	bl	1d7b4 <k_msleep.isra.0>
	ret = switch_to_app_mode(drv_data->i2c);
   12ca4:	6825      	ldr	r5, [r4, #0]
	status = fetch_status(i2c);
   12ca6:	4628      	mov	r0, r5
   12ca8:	f00a fda2 	bl	1d7f0 <fetch_status>
	if (status < 0) {
   12cac:	2800      	cmp	r0, #0
   12cae:	da06      	bge.n	12cbe <ccs811_init+0xc6>
		ret = -EIO;
   12cb0:	f06f 0504 	mvn.w	r5, #4
	set_wake(drv_data, false);
   12cb4:	68e0      	ldr	r0, [r4, #12]
   12cb6:	2100      	movs	r1, #0
   12cb8:	f00a fdc3 	bl	1d842 <set_wake.isra.0>
	return ret;
   12cbc:	e7aa      	b.n	12c14 <ccs811_init+0x1c>
	if (!(status & CCS811_STATUS_APP_VALID)) {
   12cbe:	06c1      	lsls	r1, r0, #27
   12cc0:	d516      	bpl.n	12cf0 <ccs811_init+0xf8>
	if (status & CCS811_STATUS_FW_MODE) {
   12cc2:	0602      	lsls	r2, r0, #24
   12cc4:	d417      	bmi.n	12cf6 <ccs811_init+0xfe>
	buf = CCS811_REG_APP_START;
   12cc6:	23f4      	movs	r3, #244	; 0xf4
	if (i2c_write(i2c, &buf, 1, DT_INST_REG_ADDR(0)) < 0) {
   12cc8:	2201      	movs	r2, #1
   12cca:	f10d 0106 	add.w	r1, sp, #6
   12cce:	4628      	mov	r0, r5
	buf = CCS811_REG_APP_START;
   12cd0:	f88d 3006 	strb.w	r3, [sp, #6]
	if (i2c_write(i2c, &buf, 1, DT_INST_REG_ADDR(0)) < 0) {
   12cd4:	f00a fd7e 	bl	1d7d4 <i2c_write.constprop.0>
   12cd8:	2800      	cmp	r0, #0
   12cda:	dbe9      	blt.n	12cb0 <ccs811_init+0xb8>
	k_msleep(1);             /* t_APP_START */
   12cdc:	2001      	movs	r0, #1
   12cde:	f00a fd69 	bl	1d7b4 <k_msleep.isra.0>
	status = fetch_status(i2c);
   12ce2:	4628      	mov	r0, r5
   12ce4:	f00a fd84 	bl	1d7f0 <fetch_status>
	if (status < 0) {
   12ce8:	2800      	cmp	r0, #0
   12cea:	dbe1      	blt.n	12cb0 <ccs811_init+0xb8>
	if (!(status & CCS811_STATUS_FW_MODE)) {
   12cec:	0603      	lsls	r3, r0, #24
   12cee:	d402      	bmi.n	12cf6 <ccs811_init+0xfe>
		ret = -EINVAL;
   12cf0:	f06f 0515 	mvn.w	r5, #21
   12cf4:	e7de      	b.n	12cb4 <ccs811_init+0xbc>
	if (i2c_reg_read_byte(drv_data->i2c, DT_INST_REG_ADDR(0),
   12cf6:	2320      	movs	r3, #32
   12cf8:	6820      	ldr	r0, [r4, #0]
   12cfa:	f88d 3006 	strb.w	r3, [sp, #6]
 */
static inline int i2c_reg_read_byte(const struct device *dev,
				    uint16_t dev_addr,
				    uint8_t reg_addr, uint8_t *value)
{
	return i2c_write_read(dev, dev_addr,
   12cfe:	f10d 0203 	add.w	r2, sp, #3
   12d02:	2301      	movs	r3, #1
   12d04:	f10d 0106 	add.w	r1, sp, #6
   12d08:	f00a fd2f 	bl	1d76a <i2c_write_read.constprop.0>
   12d0c:	2800      	cmp	r0, #0
   12d0e:	dbcf      	blt.n	12cb0 <ccs811_init+0xb8>
	if (hw_id != CCS881_HW_ID) {
   12d10:	f89d 3003 	ldrb.w	r3, [sp, #3]
   12d14:	2b81      	cmp	r3, #129	; 0x81
   12d16:	d1eb      	bne.n	12cf0 <ccs811_init+0xf8>
	cmd = CCS811_REG_FW_APP_VERSION;
   12d18:	2324      	movs	r3, #36	; 0x24
   12d1a:	f88d 3002 	strb.w	r3, [sp, #2]
	if (i2c_write_read(drv_data->i2c, DT_INST_REG_ADDR(0),
   12d1e:	2302      	movs	r3, #2
   12d20:	6820      	ldr	r0, [r4, #0]
   12d22:	f10d 0206 	add.w	r2, sp, #6
   12d26:	eb0d 0103 	add.w	r1, sp, r3
   12d2a:	f00a fd1e 	bl	1d76a <i2c_write_read.constprop.0>
   12d2e:	2800      	cmp	r0, #0
   12d30:	dbbe      	blt.n	12cb0 <ccs811_init+0xb8>
	fw_ver = sys_be16_to_cpu(fw_ver);
   12d32:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	if (i2c_reg_write_byte(drv_data->i2c, DT_INST_REG_ADDR(0),
   12d36:	6820      	ldr	r0, [r4, #0]
   12d38:	ba5b      	rev16	r3, r3
	fw_ver = sys_be16_to_cpu(fw_ver);
   12d3a:	f8ad 3006 	strh.w	r3, [sp, #6]
	drv_data->app_fw_ver = fw_ver >> 8U;
   12d3e:	f3c3 2307 	ubfx	r3, r3, #8, #8
   12d42:	7663      	strb	r3, [r4, #25]
 */
static inline int i2c_reg_write_byte(const struct device *dev,
				     uint16_t dev_addr,
				     uint8_t reg_addr, uint8_t value)
{
	uint8_t tx_buf[2] = {reg_addr, value};
   12d44:	2510      	movs	r5, #16
   12d46:	2301      	movs	r3, #1

	return i2c_write(dev, tx_buf, 2, dev_addr);
   12d48:	2202      	movs	r2, #2
   12d4a:	a901      	add	r1, sp, #4
	uint8_t tx_buf[2] = {reg_addr, value};
   12d4c:	f88d 3004 	strb.w	r3, [sp, #4]
   12d50:	f88d 5005 	strb.w	r5, [sp, #5]
	return i2c_write(dev, tx_buf, 2, dev_addr);
   12d54:	f00a fd3e 	bl	1d7d4 <i2c_write.constprop.0>
	if (i2c_reg_write_byte(drv_data->i2c, DT_INST_REG_ADDR(0),
   12d58:	2800      	cmp	r0, #0
   12d5a:	dba9      	blt.n	12cb0 <ccs811_init+0xb8>
	status = fetch_status(drv_data->i2c);
   12d5c:	6820      	ldr	r0, [r4, #0]
	drv_data->mode = meas_mode;
   12d5e:	7625      	strb	r5, [r4, #24]
	status = fetch_status(drv_data->i2c);
   12d60:	f00a fd46 	bl	1d7f0 <fetch_status>
	if (status < 0) {
   12d64:	2800      	cmp	r0, #0
   12d66:	dba3      	blt.n	12cb0 <ccs811_init+0xb8>
	if (status & CCS811_STATUS_ERROR) {
   12d68:	f010 0501 	ands.w	r5, r0, #1
   12d6c:	d0a2      	beq.n	12cb4 <ccs811_init+0xbc>
   12d6e:	e7bf      	b.n	12cf0 <ccs811_init+0xf8>
   12d70:	00020e92 	.word	0x00020e92
   12d74:	000201df 	.word	0x000201df
   12d78:	000201e7 	.word	0x000201e7

00012d7c <hts221_channel_get>:

	/*
	 * see "Interpreting humidity and temperature readings" document
	 * for more details
	 */
	if (chan == SENSOR_CHAN_AMBIENT_TEMP) {
   12d7c:	290d      	cmp	r1, #13
{
   12d7e:	b570      	push	{r4, r5, r6, lr}
	struct hts221_data *data = dev->data;
   12d80:	6900      	ldr	r0, [r0, #16]
	if (chan == SENSOR_CHAN_AMBIENT_TEMP) {
   12d82:	d120      	bne.n	12dc6 <hts221_channel_get+0x4a>
		conv_val = (int32_t)(data->t1_degc_x8 - data->t0_degc_x8) *
   12d84:	88c5      	ldrh	r5, [r0, #6]
			   (data->t_sample - data->t0_out) /
   12d86:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
		conv_val = (int32_t)(data->t1_degc_x8 - data->t0_degc_x8) *
   12d8a:	8903      	ldrh	r3, [r0, #8]
			   (data->t_sample - data->t0_out) /
   12d8c:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
			   (data->t1_out - data->t0_out) +
   12d90:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
		conv_val = (int32_t)(data->t1_degc_x8 - data->t0_degc_x8) *
   12d94:	1b5b      	subs	r3, r3, r5
			   (data->t_sample - data->t0_out) /
   12d96:	1ba4      	subs	r4, r4, r6
			   (data->t1_out - data->t0_out) +
   12d98:	1b89      	subs	r1, r1, r6
		conv_val = (int32_t)(data->t1_degc_x8 - data->t0_degc_x8) *
   12d9a:	4363      	muls	r3, r4
			   (data->t_sample - data->t0_out) /
   12d9c:	fb93 f3f1 	sdiv	r3, r3, r1
		conv_val = (int32_t)(data->t1_degc_x8 - data->t0_degc_x8) *
   12da0:	442b      	add	r3, r5
			   data->t0_degc_x8;

		/* convert temperature x8 to degrees Celsius */
		val->val1 = conv_val / 8;
   12da2:	2b00      	cmp	r3, #0
   12da4:	4619      	mov	r1, r3
   12da6:	bfb8      	it	lt
   12da8:	1dd9      	addlt	r1, r3, #7
   12daa:	10c9      	asrs	r1, r1, #3
   12dac:	6011      	str	r1, [r2, #0]
		val->val2 = (conv_val % 8) * (1000000 / 8);
   12dae:	4259      	negs	r1, r3
   12db0:	f001 0107 	and.w	r1, r1, #7
   12db4:	f003 0307 	and.w	r3, r3, #7
   12db8:	bf58      	it	pl
   12dba:	424b      	negpl	r3, r1
   12dbc:	4911      	ldr	r1, [pc, #68]	; (12e04 <hts221_channel_get+0x88>)
			   (data->h1_t0_out - data->h0_t0_out) +
			   data->h0_rh_x2;

		/* convert humidity x2 to percent */
		val->val1 = conv_val / 2;
		val->val2 = (conv_val % 2) * 500000;
   12dbe:	434b      	muls	r3, r1
   12dc0:	6053      	str	r3, [r2, #4]
	} else {
		return -ENOTSUP;
	}

	return 0;
   12dc2:	2000      	movs	r0, #0
}
   12dc4:	bd70      	pop	{r4, r5, r6, pc}
	} else if (chan == SENSOR_CHAN_HUMIDITY) {
   12dc6:	2910      	cmp	r1, #16
   12dc8:	d119      	bne.n	12dfe <hts221_channel_get+0x82>
		conv_val = (int32_t)(data->h1_rh_x2 - data->h0_rh_x2) *
   12dca:	7905      	ldrb	r5, [r0, #4]
			   (data->rh_sample - data->h0_t0_out) /
   12dcc:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
		conv_val = (int32_t)(data->h1_rh_x2 - data->h0_rh_x2) *
   12dd0:	7943      	ldrb	r3, [r0, #5]
			   (data->rh_sample - data->h0_t0_out) /
   12dd2:	f9b0 4000 	ldrsh.w	r4, [r0]
			   (data->h1_t0_out - data->h0_t0_out) +
   12dd6:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
		conv_val = (int32_t)(data->h1_rh_x2 - data->h0_rh_x2) *
   12dda:	1b5b      	subs	r3, r3, r5
			   (data->rh_sample - data->h0_t0_out) /
   12ddc:	1ba4      	subs	r4, r4, r6
			   (data->h1_t0_out - data->h0_t0_out) +
   12dde:	1b89      	subs	r1, r1, r6
		conv_val = (int32_t)(data->h1_rh_x2 - data->h0_rh_x2) *
   12de0:	4363      	muls	r3, r4
			   (data->rh_sample - data->h0_t0_out) /
   12de2:	fb93 f3f1 	sdiv	r3, r3, r1
		conv_val = (int32_t)(data->h1_rh_x2 - data->h0_rh_x2) *
   12de6:	442b      	add	r3, r5
		val->val1 = conv_val / 2;
   12de8:	eb03 71d3 	add.w	r1, r3, r3, lsr #31
   12dec:	1049      	asrs	r1, r1, #1
		val->val2 = (conv_val % 2) * 500000;
   12dee:	2b00      	cmp	r3, #0
   12df0:	f003 0301 	and.w	r3, r3, #1
		val->val1 = conv_val / 2;
   12df4:	6011      	str	r1, [r2, #0]
		val->val2 = (conv_val % 2) * 500000;
   12df6:	bfb8      	it	lt
   12df8:	425b      	neglt	r3, r3
   12dfa:	4903      	ldr	r1, [pc, #12]	; (12e08 <hts221_channel_get+0x8c>)
   12dfc:	e7df      	b.n	12dbe <hts221_channel_get+0x42>
		return -ENOTSUP;
   12dfe:	f06f 0085 	mvn.w	r0, #133	; 0x85
   12e02:	e7df      	b.n	12dc4 <hts221_channel_get+0x48>
   12e04:	0001e848 	.word	0x0001e848
   12e08:	0007a120 	.word	0x0007a120

00012e0c <hts221_init>:
	.sample_fetch = hts221_sample_fetch,
	.channel_get = hts221_channel_get,
};

int hts221_init(const struct device *dev)
{
   12e0c:	b530      	push	{r4, r5, lr}
	const struct hts221_config *cfg = dev->config;
	stmdev_ctx_t *ctx = (stmdev_ctx_t *)&cfg->ctx;
   12e0e:	6844      	ldr	r4, [r0, #4]
{
   12e10:	b087      	sub	sp, #28
   12e12:	4605      	mov	r5, r0
	uint8_t id, idx;
	int status;

	/* check chip ID */

	status = hts221_device_id_get(ctx, &id);
   12e14:	f10d 0107 	add.w	r1, sp, #7
   12e18:	4620      	mov	r0, r4
   12e1a:	f003 ff8d 	bl	16d38 <hts221_device_id_get>
	if (status < 0) {
   12e1e:	2800      	cmp	r0, #0
   12e20:	db05      	blt.n	12e2e <hts221_init+0x22>
		LOG_ERR("Failed to read chip ID.");
		return status;
	}

	if (id != HTS221_ID) {
   12e22:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12e26:	2bbc      	cmp	r3, #188	; 0xbc
   12e28:	d003      	beq.n	12e32 <hts221_init+0x26>
		LOG_ERR("Invalid chip ID.");
		return -EINVAL;
   12e2a:	f06f 0015 	mvn.w	r0, #21
#else
	LOG_INF("Cannot enable trigger without drdy-gpios");
#endif

	return 0;
}
   12e2e:	b007      	add	sp, #28
   12e30:	bd30      	pop	{r4, r5, pc}
		if (!strcmp(hts221_odrs[idx].str, CONFIG_HTS221_ODR)) {
   12e32:	492c      	ldr	r1, [pc, #176]	; (12ee4 <hts221_init+0xd8>)
   12e34:	4608      	mov	r0, r1
   12e36:	f004 f9f0 	bl	1721a <strcmp>
   12e3a:	b168      	cbz	r0, 12e58 <hts221_init+0x4c>
   12e3c:	4929      	ldr	r1, [pc, #164]	; (12ee4 <hts221_init+0xd8>)
   12e3e:	482a      	ldr	r0, [pc, #168]	; (12ee8 <hts221_init+0xdc>)
   12e40:	f004 f9eb 	bl	1721a <strcmp>
   12e44:	b138      	cbz	r0, 12e56 <hts221_init+0x4a>
   12e46:	4927      	ldr	r1, [pc, #156]	; (12ee4 <hts221_init+0xd8>)
   12e48:	4828      	ldr	r0, [pc, #160]	; (12eec <hts221_init+0xe0>)
   12e4a:	f004 f9e6 	bl	1721a <strcmp>
   12e4e:	2800      	cmp	r0, #0
   12e50:	d1eb      	bne.n	12e2a <hts221_init+0x1e>
   12e52:	2002      	movs	r0, #2
   12e54:	e000      	b.n	12e58 <hts221_init+0x4c>
   12e56:	2001      	movs	r0, #1
	status = hts221_data_rate_set(ctx, hts221_odrs[idx].odr);
   12e58:	4b25      	ldr	r3, [pc, #148]	; (12ef0 <hts221_init+0xe4>)
   12e5a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   12e5e:	7901      	ldrb	r1, [r0, #4]
   12e60:	4620      	mov	r0, r4
   12e62:	f003 ff3b 	bl	16cdc <hts221_data_rate_set>
	if (status < 0) {
   12e66:	2800      	cmp	r0, #0
   12e68:	dbe1      	blt.n	12e2e <hts221_init+0x22>
	status = hts221_block_data_update_set(ctx, 1);
   12e6a:	2101      	movs	r1, #1
   12e6c:	4620      	mov	r0, r4
   12e6e:	f003 ff4c 	bl	16d0a <hts221_block_data_update_set>
	if (status < 0) {
   12e72:	2800      	cmp	r0, #0
   12e74:	dbdb      	blt.n	12e2e <hts221_init+0x22>
	status = hts221_power_on_set(ctx, 1);
   12e76:	2101      	movs	r1, #1
   12e78:	4620      	mov	r0, r4
   12e7a:	f003 ff62 	bl	16d42 <hts221_power_on_set>
	if (status < 0) {
   12e7e:	2800      	cmp	r0, #0
   12e80:	dbd5      	blt.n	12e2e <hts221_init+0x22>
	return z_impl_k_sleep(timeout);
   12e82:	2100      	movs	r1, #0
   12e84:	2063      	movs	r0, #99	; 0x63
   12e86:	f003 f8b3 	bl	15ff0 <z_impl_k_sleep>
	status = hts221_read_reg(ctx, HTS221_H0_RH_X2 |
   12e8a:	6868      	ldr	r0, [r5, #4]
	struct hts221_data *data = dev->data;
   12e8c:	692c      	ldr	r4, [r5, #16]
	status = hts221_read_reg(ctx, HTS221_H0_RH_X2 |
   12e8e:	2310      	movs	r3, #16
   12e90:	aa02      	add	r2, sp, #8
   12e92:	21b0      	movs	r1, #176	; 0xb0
   12e94:	f003 ff16 	bl	16cc4 <hts221_read_reg>
	if (status < 0) {
   12e98:	2800      	cmp	r0, #0
   12e9a:	dbc8      	blt.n	12e2e <hts221_init+0x22>
	data->h0_rh_x2 = buf[0];
   12e9c:	f89d 3008 	ldrb.w	r3, [sp, #8]
   12ea0:	7123      	strb	r3, [r4, #4]
	data->h1_rh_x2 = buf[1];
   12ea2:	f89d 3009 	ldrb.w	r3, [sp, #9]
   12ea6:	7163      	strb	r3, [r4, #5]
	data->t0_degc_x8 = sys_le16_to_cpu(buf[2] | ((buf[5] & 0x3) << 8));
   12ea8:	f89d 300d 	ldrb.w	r3, [sp, #13]
   12eac:	021a      	lsls	r2, r3, #8
   12eae:	f402 7140 	and.w	r1, r2, #768	; 0x300
   12eb2:	f89d 200a 	ldrb.w	r2, [sp, #10]
   12eb6:	430a      	orrs	r2, r1
   12eb8:	80e2      	strh	r2, [r4, #6]
	data->t1_degc_x8 = sys_le16_to_cpu(buf[3] | ((buf[5] & 0xC) << 6));
   12eba:	019b      	lsls	r3, r3, #6
   12ebc:	f89d 200b 	ldrb.w	r2, [sp, #11]
   12ec0:	f403 7340 	and.w	r3, r3, #768	; 0x300
   12ec4:	4313      	orrs	r3, r2
   12ec6:	8123      	strh	r3, [r4, #8]
	data->h0_t0_out = sys_le16_to_cpu(buf[6] | (buf[7] << 8));
   12ec8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   12ecc:	8163      	strh	r3, [r4, #10]
	data->h1_t0_out = sys_le16_to_cpu(buf[10] | (buf[11] << 8));
   12ece:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   12ed2:	81a3      	strh	r3, [r4, #12]
	data->t0_out = sys_le16_to_cpu(buf[12] | (buf[13] << 8));
   12ed4:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   12ed8:	81e3      	strh	r3, [r4, #14]
	data->t1_out = sys_le16_to_cpu(buf[14] | (buf[15] << 8));
   12eda:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   12ede:	8223      	strh	r3, [r4, #16]
	return 0;
   12ee0:	2000      	movs	r0, #0
   12ee2:	e7a4      	b.n	12e2e <hts221_init+0x22>
   12ee4:	000206f5 	.word	0x000206f5
   12ee8:	00020e9e 	.word	0x00020e9e
   12eec:	00020ea0 	.word	0x00020ea0
   12ef0:	0001fae0 	.word	0x0001fae0

00012ef4 <lis2dh_channel_get>:
	struct lis2dh_data *lis2dh = dev->data;
   12ef4:	2903      	cmp	r1, #3
{
   12ef6:	b570      	push	{r4, r5, r6, lr}
	struct lis2dh_data *lis2dh = dev->data;
   12ef8:	6904      	ldr	r4, [r0, #16]
	switch (chan) {
   12efa:	d81c      	bhi.n	12f36 <lis2dh_channel_get+0x42>
   12efc:	4b0f      	ldr	r3, [pc, #60]	; (12f3c <lis2dh_channel_get+0x48>)
   12efe:	5658      	ldrsb	r0, [r3, r1]
   12f00:	4b0f      	ldr	r3, [pc, #60]	; (12f40 <lis2dh_channel_get+0x4c>)
   12f02:	565e      	ldrsb	r6, [r3, r1]
	val->val1 = converted_val / 1000000;
   12f04:	490f      	ldr	r1, [pc, #60]	; (12f44 <lis2dh_channel_get+0x50>)
	for (i = ofs_start; i <= ofs_end; i++, val++) {
   12f06:	42b0      	cmp	r0, r6
   12f08:	f102 0208 	add.w	r2, r2, #8
   12f0c:	dd01      	ble.n	12f12 <lis2dh_channel_get+0x1e>
	return 0;
   12f0e:	2000      	movs	r0, #0
}
   12f10:	bd70      	pop	{r4, r5, r6, pc}
		lis2dh_convert(lis2dh->sample.xyz[i], lis2dh->scale, val);
   12f12:	1d03      	adds	r3, r0, #4
   12f14:	eb04 0343 	add.w	r3, r4, r3, lsl #1
	converted_val = (raw_val >> 4) * scale;
   12f18:	6925      	ldr	r5, [r4, #16]
   12f1a:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
   12f1e:	111b      	asrs	r3, r3, #4
   12f20:	436b      	muls	r3, r5
	val->val1 = converted_val / 1000000;
   12f22:	fb93 f5f1 	sdiv	r5, r3, r1
	val->val2 = converted_val % 1000000;
   12f26:	fb01 3315 	mls	r3, r1, r5, r3
	val->val1 = converted_val / 1000000;
   12f2a:	f842 5c08 	str.w	r5, [r2, #-8]
	val->val2 = converted_val % 1000000;
   12f2e:	f842 3c04 	str.w	r3, [r2, #-4]
	for (i = ofs_start; i <= ofs_end; i++, val++) {
   12f32:	3001      	adds	r0, #1
   12f34:	e7e7      	b.n	12f06 <lis2dh_channel_get+0x12>
		return -ENOTSUP;
   12f36:	f06f 0085 	mvn.w	r0, #133	; 0x85
   12f3a:	e7e9      	b.n	12f10 <lis2dh_channel_get+0x1c>
   12f3c:	00020eb4 	.word	0x00020eb4
   12f40:	00020eb8 	.word	0x00020eb8
   12f44:	000f4240 	.word	0x000f4240

00012f48 <lis2dh_init>:
	.sample_fetch = lis2dh_sample_fetch,
	.channel_get = lis2dh_channel_get,
};

int lis2dh_init(const struct device *dev)
{
   12f48:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct lis2dh_data *lis2dh = dev->data;
	const struct lis2dh_config *cfg = dev->config;
   12f4a:	6846      	ldr	r6, [r0, #4]
	struct lis2dh_data *lis2dh = dev->data;
   12f4c:	6905      	ldr	r5, [r0, #16]
{
   12f4e:	4604      	mov	r4, r0
	int status;
	uint8_t id;
	uint8_t raw[6];

	lis2dh->bus = device_get_binding(cfg->bus_name);
   12f50:	6830      	ldr	r0, [r6, #0]
   12f52:	f002 f957 	bl	15204 <z_impl_device_get_binding>
   12f56:	6028      	str	r0, [r5, #0]
	if (!lis2dh->bus) {
   12f58:	b918      	cbnz	r0, 12f62 <lis2dh_init+0x1a>
		LOG_ERR("master not found: %s", cfg->bus_name);
		return -EINVAL;
   12f5a:	f06f 0015 	mvn.w	r0, #21

	/* enable accel measurements and set power mode and data rate */
	return lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_CTRL1,
					LIS2DH_ACCEL_EN_BITS | LIS2DH_LP_EN_BIT |
					LIS2DH_ODR_BITS);
}
   12f5e:	b004      	add	sp, #16
   12f60:	bd70      	pop	{r4, r5, r6, pc}
	cfg->bus_init(dev);
   12f62:	6873      	ldr	r3, [r6, #4]
   12f64:	4620      	mov	r0, r4
   12f66:	4798      	blx	r3
	status = lis2dh->hw_tf->read_reg(dev, LIS2DH_REG_WAI, &id);
   12f68:	686b      	ldr	r3, [r5, #4]
   12f6a:	f10d 0207 	add.w	r2, sp, #7
   12f6e:	689b      	ldr	r3, [r3, #8]
   12f70:	210f      	movs	r1, #15
   12f72:	4620      	mov	r0, r4
   12f74:	4798      	blx	r3
	if (status < 0) {
   12f76:	2800      	cmp	r0, #0
   12f78:	dbf1      	blt.n	12f5e <lis2dh_init+0x16>
	if (id != LIS2DH_CHIP_ID) {
   12f7a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12f7e:	2b33      	cmp	r3, #51	; 0x33
   12f80:	d1eb      	bne.n	12f5a <lis2dh_init+0x12>
	if (cfg->is_lsm303agr_dev) {
   12f82:	7ab3      	ldrb	r3, [r6, #10]
   12f84:	b15b      	cbz	r3, 12f9e <lis2dh_init+0x56>
		lis2dh_reg_val_to_scale[0] = ACCEL_SCALE(1563);
   12f86:	4b1d      	ldr	r3, [pc, #116]	; (12ffc <lis2dh_init+0xb4>)
		lis2dh_reg_val_to_scale[1] = ACCEL_SCALE(3126);
   12f88:	f644 1216 	movw	r2, #18710	; 0x4916
   12f8c:	f242 418b 	movw	r1, #9355	; 0x248b
   12f90:	e9c3 1200 	strd	r1, r2, [r3]
		lis2dh_reg_val_to_scale[3] = ACCEL_SCALE(18758);
   12f94:	4a1a      	ldr	r2, [pc, #104]	; (13000 <lis2dh_init+0xb8>)
   12f96:	f249 202d 	movw	r0, #37421	; 0x922d
   12f9a:	e9c3 0202 	strd	r0, r2, [r3, #8]
	if (cfg->disc_pull_up) {
   12f9e:	7af3      	ldrb	r3, [r6, #11]
   12fa0:	bb13      	cbnz	r3, 12fe8 <lis2dh_init+0xa0>
	(void)memset(raw, 0, sizeof(raw));
   12fa2:	2206      	movs	r2, #6
   12fa4:	2100      	movs	r1, #0
   12fa6:	a802      	add	r0, sp, #8
   12fa8:	f004 f95f 	bl	1726a <memset>
	raw[0] = LIS2DH_ACCEL_EN_BITS;
   12fac:	2307      	movs	r3, #7
   12fae:	f88d 3008 	strb.w	r3, [sp, #8]
	status = lis2dh->hw_tf->write_data(dev, LIS2DH_REG_CTRL1, raw,
   12fb2:	686b      	ldr	r3, [r5, #4]
   12fb4:	aa02      	add	r2, sp, #8
   12fb6:	685e      	ldr	r6, [r3, #4]
   12fb8:	2120      	movs	r1, #32
   12fba:	2306      	movs	r3, #6
   12fbc:	4620      	mov	r0, r4
   12fbe:	47b0      	blx	r6
	if (status < 0) {
   12fc0:	2800      	cmp	r0, #0
   12fc2:	dbcc      	blt.n	12f5e <lis2dh_init+0x16>
	lis2dh->scale = lis2dh_reg_val_to_scale[LIS2DH_FS_IDX];
   12fc4:	4b0d      	ldr	r3, [pc, #52]	; (12ffc <lis2dh_init+0xb4>)
   12fc6:	681b      	ldr	r3, [r3, #0]
   12fc8:	612b      	str	r3, [r5, #16]
	status = lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_CTRL4, LIS2DH_FS_BITS | LIS2DH_HR_BIT);
   12fca:	686b      	ldr	r3, [r5, #4]
   12fcc:	2200      	movs	r2, #0
   12fce:	68db      	ldr	r3, [r3, #12]
   12fd0:	2123      	movs	r1, #35	; 0x23
   12fd2:	4620      	mov	r0, r4
   12fd4:	4798      	blx	r3
	if (status < 0) {
   12fd6:	2800      	cmp	r0, #0
   12fd8:	dbc1      	blt.n	12f5e <lis2dh_init+0x16>
	return lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_CTRL1,
   12fda:	686b      	ldr	r3, [r5, #4]
   12fdc:	2247      	movs	r2, #71	; 0x47
   12fde:	68db      	ldr	r3, [r3, #12]
   12fe0:	2120      	movs	r1, #32
   12fe2:	4620      	mov	r0, r4
   12fe4:	4798      	blx	r3
   12fe6:	e7ba      	b.n	12f5e <lis2dh_init+0x16>
		status = lis2dh->hw_tf->update_reg(dev, LIS2DH_REG_CTRL0,
   12fe8:	686b      	ldr	r3, [r5, #4]
   12fea:	691e      	ldr	r6, [r3, #16]
   12fec:	2380      	movs	r3, #128	; 0x80
   12fee:	461a      	mov	r2, r3
   12ff0:	211e      	movs	r1, #30
   12ff2:	4620      	mov	r0, r4
   12ff4:	47b0      	blx	r6
		if (status < 0) {
   12ff6:	2800      	cmp	r0, #0
   12ff8:	dad3      	bge.n	12fa2 <lis2dh_init+0x5a>
   12ffa:	e7b0      	b.n	12f5e <lis2dh_init+0x16>
   12ffc:	200008e8 	.word	0x200008e8
   13000:	0001b694 	.word	0x0001b694

00013004 <lis2dh_i2c_init>:

int lis2dh_i2c_init(const struct device *dev)
{
	struct lis2dh_data *data = dev->data;

	data->hw_tf = &lis2dh_i2c_transfer_fn;
   13004:	6903      	ldr	r3, [r0, #16]
   13006:	4a02      	ldr	r2, [pc, #8]	; (13010 <lis2dh_i2c_init+0xc>)
   13008:	605a      	str	r2, [r3, #4]

	return 0;
}
   1300a:	2000      	movs	r0, #0
   1300c:	4770      	bx	lr
   1300e:	bf00      	nop
   13010:	0001fb18 	.word	0x0001fb18

00013014 <lps22hb_channel_get>:
			       enum sensor_channel chan,
			       struct sensor_value *val)
{
	struct lps22hb_data *data = dev->data;

	if (chan == SENSOR_CHAN_PRESS) {
   13014:	290e      	cmp	r1, #14
{
   13016:	b530      	push	{r4, r5, lr}
	struct lps22hb_data *data = dev->data;
   13018:	6903      	ldr	r3, [r0, #16]
	if (chan == SENSOR_CHAN_PRESS) {
   1301a:	d111      	bne.n	13040 <lps22hb_channel_get+0x2c>
		lps22hb_press_convert(val, data->sample_press);
   1301c:	6859      	ldr	r1, [r3, #4]
		(((int32_t)((raw_val) & 0x0FFF) * 100000L) >> 12);
   1301e:	4811      	ldr	r0, [pc, #68]	; (13064 <lps22hb_channel_get+0x50>)
	val->val1 = (raw_val >> 12) / 10;
   13020:	130b      	asrs	r3, r1, #12
   13022:	250a      	movs	r5, #10
		(((int32_t)((raw_val) & 0x0FFF) * 100000L) >> 12);
   13024:	f3c1 010b 	ubfx	r1, r1, #0, #12
	val->val1 = (raw_val >> 12) / 10;
   13028:	fb93 f4f5 	sdiv	r4, r3, r5
	val->val2 = (raw_val >> 12) % 10 * 100000 +
   1302c:	fb05 3314 	mls	r3, r5, r4, r3
		(((int32_t)((raw_val) & 0x0FFF) * 100000L) >> 12);
   13030:	4341      	muls	r1, r0
	val->val2 = (raw_val >> 12) % 10 * 100000 +
   13032:	4343      	muls	r3, r0
	val->val1 = (raw_val >> 12) / 10;
   13034:	6014      	str	r4, [r2, #0]
	val->val2 = (raw_val >> 12) % 10 * 100000 +
   13036:	eb03 3311 	add.w	r3, r3, r1, lsr #12
	val->val2 = ((int32_t)raw_val % 100) * 10000;
   1303a:	6053      	str	r3, [r2, #4]
		lps22hb_temp_convert(val, data->sample_temp);
	} else {
		return -ENOTSUP;
	}

	return 0;
   1303c:	2000      	movs	r0, #0
}
   1303e:	bd30      	pop	{r4, r5, pc}
	} else if (chan == SENSOR_CHAN_AMBIENT_TEMP) {
   13040:	290d      	cmp	r1, #13
   13042:	d10c      	bne.n	1305e <lps22hb_channel_get+0x4a>
		lps22hb_temp_convert(val, data->sample_temp);
   13044:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
	val->val1 = raw_val / 100;
   13048:	2064      	movs	r0, #100	; 0x64
   1304a:	fb93 f1f0 	sdiv	r1, r3, r0
	val->val2 = ((int32_t)raw_val % 100) * 10000;
   1304e:	fb00 3311 	mls	r3, r0, r1, r3
	val->val1 = raw_val / 100;
   13052:	6011      	str	r1, [r2, #0]
	val->val2 = ((int32_t)raw_val % 100) * 10000;
   13054:	f242 7110 	movw	r1, #10000	; 0x2710
   13058:	fb13 f301 	smulbb	r3, r3, r1
   1305c:	e7ed      	b.n	1303a <lps22hb_channel_get+0x26>
		return -ENOTSUP;
   1305e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   13062:	e7ec      	b.n	1303e <lps22hb_channel_get+0x2a>
   13064:	000186a0 	.word	0x000186a0

00013068 <regulator_fixed_init_onoff>:
	.enable = enable_onoff,
	.disable = disable_onoff,
};

static int regulator_fixed_init_onoff(const struct device *dev)
{
   13068:	b538      	push	{r3, r4, r5, lr}
	struct driver_data_onoff *data = dev->data;
   1306a:	6905      	ldr	r5, [r0, #16]
	int rc;

	data->dev = dev;
	rc = onoff_manager_init(&data->mgr, &transitions);
   1306c:	4908      	ldr	r1, [pc, #32]	; (13090 <regulator_fixed_init_onoff+0x28>)
{
   1306e:	4604      	mov	r4, r0
	data->dev = dev;
   13070:	4628      	mov	r0, r5
   13072:	f840 4b04 	str.w	r4, [r0], #4
	rc = onoff_manager_init(&data->mgr, &transitions);
   13076:	f003 fb1c 	bl	166b2 <onoff_manager_init>
	__ASSERT_NO_MSG(rc == 0);

#ifdef CONFIG_MULTITHREADING
	k_work_init_delayable(&data->dwork, onoff_worker);
   1307a:	4906      	ldr	r1, [pc, #24]	; (13094 <regulator_fixed_init_onoff+0x2c>)
   1307c:	f105 0020 	add.w	r0, r5, #32
   13080:	f00b fb57 	bl	1e732 <k_work_init_delayable>
#endif /* CONFIG_MULTITHREADING */

	rc = common_init(dev);
   13084:	6860      	ldr	r0, [r4, #4]
   13086:	f00a fed2 	bl	1de2e <common_init.isra.0>
	}

	LOG_INF("%s onoff: %d", dev->name, rc);

	return rc;
}
   1308a:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   1308e:	bd38      	pop	{r3, r4, r5, pc}
   13090:	0001fbd0 	.word	0x0001fbd0
   13094:	0001de99 	.word	0x0001de99

00013098 <finalize_transition>:
{
   13098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if ((rc >= 0) && (delay_us > 0)) {
   1309c:	1e1c      	subs	r4, r3, #0
{
   1309e:	4605      	mov	r5, r0
   130a0:	460f      	mov	r7, r1
   130a2:	4690      	mov	r8, r2
	if ((rc >= 0) && (delay_us > 0)) {
   130a4:	db10      	blt.n	130c8 <finalize_transition+0x30>
   130a6:	b17a      	cbz	r2, 130c8 <finalize_transition+0x30>
			return (uint32_t)((t * to_hz + off) / from_hz);
   130a8:	ea4f 4952 	mov.w	r9, r2, lsr #17
   130ac:	03d6      	lsls	r6, r2, #15
   130ae:	2300      	movs	r3, #0
   130b0:	4a14      	ldr	r2, [pc, #80]	; (13104 <finalize_transition+0x6c>)
   130b2:	4630      	mov	r0, r6
   130b4:	4649      	mov	r1, r9
   130b6:	f7ed fc81 	bl	9bc <__aeabi_uldivmod>
		    || k_is_pre_kernel()
   130ba:	b110      	cbz	r0, 130c2 <finalize_transition+0x2a>
	return !z_sys_post_kernel;
   130bc:	4b12      	ldr	r3, [pc, #72]	; (13108 <finalize_transition+0x70>)
   130be:	781b      	ldrb	r3, [r3, #0]
   130c0:	b943      	cbnz	r3, 130d4 <finalize_transition+0x3c>
	z_impl_k_busy_wait(usec_to_wait);
   130c2:	4640      	mov	r0, r8
   130c4:	f00b fcc5 	bl	1ea52 <z_impl_k_busy_wait>
	notify(&data->mgr, rc);
   130c8:	4621      	mov	r1, r4
   130ca:	1d28      	adds	r0, r5, #4
   130cc:	463b      	mov	r3, r7
}
   130ce:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	notify(&data->mgr, rc);
   130d2:	4718      	bx	r3
			return ((t * to_hz + off) / from_hz);
   130d4:	480d      	ldr	r0, [pc, #52]	; (1310c <finalize_transition+0x74>)
   130d6:	4a0b      	ldr	r2, [pc, #44]	; (13104 <finalize_transition+0x6c>)
			data->notify = notify;
   130d8:	652f      	str	r7, [r5, #80]	; 0x50
   130da:	1830      	adds	r0, r6, r0
			data->task = WORK_TASK_DELAY;
   130dc:	f04f 0303 	mov.w	r3, #3
   130e0:	f149 0100 	adc.w	r1, r9, #0
   130e4:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54
   130e8:	2300      	movs	r3, #0
   130ea:	f7ed fc67 	bl	9bc <__aeabi_uldivmod>
   130ee:	4602      	mov	r2, r0
   130f0:	460b      	mov	r3, r1
			rc = k_work_schedule(&data->dwork, K_USEC(delay_us));
   130f2:	f105 0020 	add.w	r0, r5, #32
   130f6:	f002 fcb3 	bl	15a60 <k_work_schedule>
			if (rc >= 0) {
   130fa:	1e04      	subs	r4, r0, #0
   130fc:	dbe4      	blt.n	130c8 <finalize_transition+0x30>
}
   130fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13102:	bf00      	nop
   13104:	000f4240 	.word	0x000f4240
   13108:	20002fad 	.word	0x20002fad
   1310c:	000f423f 	.word	0x000f423f

00013110 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   13110:	4b02      	ldr	r3, [pc, #8]	; (1311c <flash_nrf_pages_layout+0xc>)
   13112:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   13114:	2301      	movs	r3, #1
   13116:	6013      	str	r3, [r2, #0]
}
   13118:	4770      	bx	lr
   1311a:	bf00      	nop
   1311c:	200028fc 	.word	0x200028fc

00013120 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   13120:	4800      	ldr	r0, [pc, #0]	; (13124 <flash_nrf_get_parameters+0x4>)
   13122:	4770      	bx	lr
   13124:	0001fbf0 	.word	0x0001fbf0

00013128 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
   13128:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1312a:	2201      	movs	r2, #1
   1312c:	4611      	mov	r1, r2
   1312e:	4807      	ldr	r0, [pc, #28]	; (1314c <nrf_flash_init+0x24>)
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   13130:	4c07      	ldr	r4, [pc, #28]	; (13150 <nrf_flash_init+0x28>)
   13132:	f00b fa48 	bl	1e5c6 <z_impl_k_sem_init>
	nrf_flash_sync_init();
   13136:	f000 f941 	bl	133bc <nrf_flash_sync_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   1313a:	f00b f816 	bl	1e16a <nrfx_nvmc_flash_page_count_get>
   1313e:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   13140:	f00b f80f 	bl	1e162 <nrfx_nvmc_flash_page_size_get>
   13144:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
   13146:	2000      	movs	r0, #0
   13148:	bd10      	pop	{r4, pc}
   1314a:	bf00      	nop
   1314c:	20002904 	.word	0x20002904
   13150:	200028fc 	.word	0x200028fc

00013154 <flash_nrf_erase>:
{
   13154:	b5f0      	push	{r4, r5, r6, r7, lr}
   13156:	b087      	sub	sp, #28
   13158:	460e      	mov	r6, r1
   1315a:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1315c:	f00b f801 	bl	1e162 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   13160:	4629      	mov	r1, r5
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   13162:	4607      	mov	r7, r0
	if (is_regular_addr_valid(addr, size)) {
   13164:	4630      	mov	r0, r6
   13166:	f00a ff37 	bl	1dfd8 <is_regular_addr_valid>
   1316a:	b3c8      	cbz	r0, 131e0 <flash_nrf_erase+0x8c>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   1316c:	fbb6 f3f7 	udiv	r3, r6, r7
   13170:	fb07 6313 	mls	r3, r7, r3, r6
   13174:	bba3      	cbnz	r3, 131e0 <flash_nrf_erase+0x8c>
   13176:	fbb5 f4f7 	udiv	r4, r5, r7
   1317a:	fb07 5414 	mls	r4, r7, r4, r5
   1317e:	bb7c      	cbnz	r4, 131e0 <flash_nrf_erase+0x8c>
		if (!n_pages) {
   13180:	42bd      	cmp	r5, r7
   13182:	d322      	bcc.n	131ca <flash_nrf_erase+0x76>
	return z_impl_k_sem_take(sem, timeout);
   13184:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13188:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1318c:	4816      	ldr	r0, [pc, #88]	; (131e8 <flash_nrf_erase+0x94>)
   1318e:	f002 fab9 	bl	15704 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   13192:	f00a ff48 	bl	1e026 <nrf_flash_sync_is_required>
   13196:	ab02      	add	r3, sp, #8
   13198:	4601      	mov	r1, r0

#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE

static int erase_synchronously(uint32_t addr, uint32_t size)
{
	struct flash_context context = {
   1319a:	2210      	movs	r2, #16
	if (nrf_flash_sync_is_required()) {
   1319c:	b1c0      	cbz	r0, 131d0 <flash_nrf_erase+0x7c>
	struct flash_context context = {
   1319e:	4621      	mov	r1, r4
   131a0:	4618      	mov	r0, r3
   131a2:	f004 f862 	bl	1726a <memset>
   131a6:	2201      	movs	r2, #1
   131a8:	f88d 2014 	strb.w	r2, [sp, #20]
#if defined(CONFIG_SOC_FLASH_NRF_PARTIAL_ERASE)
		.flash_addr_next = addr
#endif
	};

	struct flash_op_desc flash_op_desc = {
   131ac:	4a0f      	ldr	r2, [pc, #60]	; (131ec <flash_nrf_erase+0x98>)
   131ae:	e9cd 2000 	strd	r2, r0, [sp]
		.handler = erase_op,
		.context = &context
	};

	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   131b2:	480f      	ldr	r0, [pc, #60]	; (131f0 <flash_nrf_erase+0x9c>)
	struct flash_context context = {
   131b4:	e9cd 6503 	strd	r6, r5, [sp, #12]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   131b8:	f000 f90a 	bl	133d0 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   131bc:	4668      	mov	r0, sp
   131be:	f7ef f817 	bl	21f0 <nrf_flash_sync_exe>
#if defined(CONFIG_SOC_FLASH_NRF_PARTIAL_ERASE)
		.flash_addr_next = addr
#endif
	};

	return	erase_op(&context);
   131c2:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   131c4:	4808      	ldr	r0, [pc, #32]	; (131e8 <flash_nrf_erase+0x94>)
   131c6:	f002 fa77 	bl	156b8 <z_impl_k_sem_give>
}
   131ca:	4620      	mov	r0, r4
   131cc:	b007      	add	sp, #28
   131ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct flash_context context = {
   131d0:	4618      	mov	r0, r3
   131d2:	f004 f84a 	bl	1726a <memset>
   131d6:	e9cd 6503 	strd	r6, r5, [sp, #12]
	return	erase_op(&context);
   131da:	f00a fed9 	bl	1df90 <erase_op>
   131de:	e7f0      	b.n	131c2 <flash_nrf_erase+0x6e>
		return -EINVAL;
   131e0:	f06f 0415 	mvn.w	r4, #21
   131e4:	e7f1      	b.n	131ca <flash_nrf_erase+0x76>
   131e6:	bf00      	nop
   131e8:	20002904 	.word	0x20002904
   131ec:	0001df91 	.word	0x0001df91
   131f0:	00015e64 	.word	0x00015e64

000131f4 <write_op>:
{
   131f4:	b538      	push	{r3, r4, r5, lr}
	if (w_ctx->enable_time_limit) {
   131f6:	7b03      	ldrb	r3, [r0, #12]
{
   131f8:	4604      	mov	r4, r0
	if (w_ctx->enable_time_limit) {
   131fa:	b10b      	cbz	r3, 13200 <write_op+0xc>
		nrf_flash_sync_get_timestamp_begin();
   131fc:	f000 f8f0 	bl	133e0 <nrf_flash_sync_get_timestamp_begin>
{
   13200:	2501      	movs	r5, #1
	while (w_ctx->len >= sizeof(uint32_t)) {
   13202:	68a3      	ldr	r3, [r4, #8]
   13204:	2b03      	cmp	r3, #3
   13206:	d806      	bhi.n	13216 <write_op+0x22>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   13208:	4a12      	ldr	r2, [pc, #72]	; (13254 <write_op+0x60>)
   1320a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   1320e:	07db      	lsls	r3, r3, #31
   13210:	d5fb      	bpl.n	1320a <write_op+0x16>
	return FLASH_OP_DONE;
   13212:	2000      	movs	r0, #0
}
   13214:	bd38      	pop	{r3, r4, r5, pc}
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
   13216:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   13218:	6860      	ldr	r0, [r4, #4]
   1321a:	6819      	ldr	r1, [r3, #0]
   1321c:	f001 fc10 	bl	14a40 <nrfx_nvmc_word_write>
	w_ctx->flash_addr += shift;
   13220:	6863      	ldr	r3, [r4, #4]
   13222:	3304      	adds	r3, #4
   13224:	6063      	str	r3, [r4, #4]
	w_ctx->data_addr += shift;
   13226:	6823      	ldr	r3, [r4, #0]
   13228:	3304      	adds	r3, #4
   1322a:	6023      	str	r3, [r4, #0]
	w_ctx->len -= shift;
   1322c:	68a3      	ldr	r3, [r4, #8]
   1322e:	3b04      	subs	r3, #4
   13230:	60a3      	str	r3, [r4, #8]
		if (w_ctx->enable_time_limit) {
   13232:	7b23      	ldrb	r3, [r4, #12]
		i++;
   13234:	3501      	adds	r5, #1
		if (w_ctx->enable_time_limit) {
   13236:	2b00      	cmp	r3, #0
   13238:	d0e3      	beq.n	13202 <write_op+0xe>
			if (nrf_flash_sync_check_time_limit(i)) {
   1323a:	4628      	mov	r0, r5
   1323c:	f7ef f854 	bl	22e8 <nrf_flash_sync_check_time_limit>
   13240:	2800      	cmp	r0, #0
   13242:	d0de      	beq.n	13202 <write_op+0xe>
   13244:	4a03      	ldr	r2, [pc, #12]	; (13254 <write_op+0x60>)
   13246:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   1324a:	07d9      	lsls	r1, r3, #31
   1324c:	d5fb      	bpl.n	13246 <write_op+0x52>
				return FLASH_OP_ONGOING;
   1324e:	2001      	movs	r0, #1
   13250:	e7e0      	b.n	13214 <write_op+0x20>
   13252:	bf00      	nop
   13254:	4001e000 	.word	0x4001e000

00013258 <flash_nrf_write>:
{
   13258:	b570      	push	{r4, r5, r6, lr}
   1325a:	460d      	mov	r5, r1
   1325c:	b086      	sub	sp, #24
	if (is_regular_addr_valid(addr, len)) {
   1325e:	4619      	mov	r1, r3
   13260:	4628      	mov	r0, r5
{
   13262:	4616      	mov	r6, r2
   13264:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   13266:	f00a feb7 	bl	1dfd8 <is_regular_addr_valid>
   1326a:	b360      	cbz	r0, 132c6 <flash_nrf_write+0x6e>
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   1326c:	ea45 0304 	orr.w	r3, r5, r4
   13270:	079b      	lsls	r3, r3, #30
   13272:	d128      	bne.n	132c6 <flash_nrf_write+0x6e>
	if (!len) {
   13274:	b1fc      	cbz	r4, 132b6 <flash_nrf_write+0x5e>
	return z_impl_k_sem_take(sem, timeout);
   13276:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1327a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1327e:	4813      	ldr	r0, [pc, #76]	; (132cc <flash_nrf_write+0x74>)
   13280:	f002 fa40 	bl	15704 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   13284:	f00a fecf 	bl	1e026 <nrf_flash_sync_is_required>
   13288:	4603      	mov	r3, r0
	struct flash_context context = {
   1328a:	e9cd 6502 	strd	r6, r5, [sp, #8]
   1328e:	a802      	add	r0, sp, #8
   13290:	9404      	str	r4, [sp, #16]
	if (nrf_flash_sync_is_required()) {
   13292:	b19b      	cbz	r3, 132bc <flash_nrf_write+0x64>
	struct flash_context context = {
   13294:	2301      	movs	r3, #1
   13296:	f88d 3014 	strb.w	r3, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   1329a:	4b0d      	ldr	r3, [pc, #52]	; (132d0 <flash_nrf_write+0x78>)
   1329c:	e9cd 3000 	strd	r3, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_WRITE);
   132a0:	f641 504c 	movw	r0, #7500	; 0x1d4c
   132a4:	f000 f894 	bl	133d0 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   132a8:	4668      	mov	r0, sp
   132aa:	f7ee ffa1 	bl	21f0 <nrf_flash_sync_exe>
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
		.enable_time_limit = 0 /* disable time limit */
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	};

	return write_op(&context);
   132ae:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   132b0:	4806      	ldr	r0, [pc, #24]	; (132cc <flash_nrf_write+0x74>)
   132b2:	f002 fa01 	bl	156b8 <z_impl_k_sem_give>
}
   132b6:	4620      	mov	r0, r4
   132b8:	b006      	add	sp, #24
   132ba:	bd70      	pop	{r4, r5, r6, pc}
	struct flash_context context = {
   132bc:	f88d 3014 	strb.w	r3, [sp, #20]
	return write_op(&context);
   132c0:	f7ff ff98 	bl	131f4 <write_op>
   132c4:	e7f3      	b.n	132ae <flash_nrf_write+0x56>
		return -EINVAL;
   132c6:	f06f 0415 	mvn.w	r4, #21
   132ca:	e7f4      	b.n	132b6 <flash_nrf_write+0x5e>
   132cc:	20002904 	.word	0x20002904
   132d0:	000131f5 	.word	0x000131f5

000132d4 <time_slot_callback_work>:
{
   132d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   132d6:	9b07      	ldr	r3, [sp, #28]
	rc = op_desc->handler(op_desc->context);
   132d8:	e9d3 2000 	ldrd	r2, r0, [r3]
   132dc:	4790      	blx	r2
	if (rc != FLASH_OP_ONGOING) {
   132de:	2801      	cmp	r0, #1
	rc = op_desc->handler(op_desc->context);
   132e0:	4604      	mov	r4, r0
	if (rc != FLASH_OP_ONGOING) {
   132e2:	d013      	beq.n	1330c <time_slot_callback_work+0x38>
		ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   132e4:	f10d 010f 	add.w	r1, sp, #15
   132e8:	f10d 000e 	add.w	r0, sp, #14
   132ec:	f008 ff98 	bl	1c220 <ll_timeslice_ticker_id_get>
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   132f0:	2300      	movs	r3, #0
   132f2:	9300      	str	r3, [sp, #0]
   132f4:	4619      	mov	r1, r3
   132f6:	f89d 200f 	ldrb.w	r2, [sp, #15]
   132fa:	f89d 000e 	ldrb.w	r0, [sp, #14]
   132fe:	f7f8 fbed 	bl	badc <ticker_stop>
		_ticker_sync_context.result = (rc == FLASH_OP_DONE) ? 0 : rc;
   13302:	4b03      	ldr	r3, [pc, #12]	; (13310 <time_slot_callback_work+0x3c>)
   13304:	60dc      	str	r4, [r3, #12]
   13306:	4803      	ldr	r0, [pc, #12]	; (13314 <time_slot_callback_work+0x40>)
   13308:	f002 f9d6 	bl	156b8 <z_impl_k_sem_give>
}
   1330c:	b004      	add	sp, #16
   1330e:	bd10      	pop	{r4, pc}
   13310:	2000291c 	.word	0x2000291c
   13314:	2000292c 	.word	0x2000292c

00013318 <time_slot_delay>:
{
   13318:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1331c:	b08d      	sub	sp, #52	; 0x34
   1331e:	4606      	mov	r6, r0
   13320:	460f      	mov	r7, r1
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   13322:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   13326:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
{
   1332a:	4690      	mov	r8, r2
   1332c:	4699      	mov	r9, r3
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   1332e:	f008 ff77 	bl	1c220 <ll_timeslice_ticker_id_get>
	err = ticker_start(instance_index, /* Radio instance ticker */
   13332:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   13336:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   1333a:	9700      	str	r7, [sp, #0]
   1333c:	2400      	movs	r4, #0
   1333e:	3501      	adds	r5, #1
   13340:	4633      	mov	r3, r6
   13342:	e9cd 4407 	strd	r4, r4, [sp, #28]
   13346:	e9cd 8905 	strd	r8, r9, [sp, #20]
   1334a:	e9cd 4403 	strd	r4, r4, [sp, #12]
   1334e:	e9cd 4401 	strd	r4, r4, [sp, #4]
   13352:	b2ea      	uxtb	r2, r5
   13354:	2101      	movs	r1, #1
   13356:	f008 fead 	bl	1c0b4 <ticker_start>
	if (err != TICKER_STATUS_SUCCESS && err != TICKER_STATUS_BUSY) {
   1335a:	f030 0302 	bics.w	r3, r0, #2
   1335e:	d00d      	beq.n	1337c <time_slot_delay+0x64>
		_ticker_sync_context.result = 0;
   13360:	4b08      	ldr	r3, [pc, #32]	; (13384 <time_slot_delay+0x6c>)
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   13362:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
		_ticker_sync_context.result = 0;
   13366:	60dc      	str	r4, [r3, #12]
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   13368:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   1336c:	9400      	str	r4, [sp, #0]
   1336e:	4623      	mov	r3, r4
   13370:	4621      	mov	r1, r4
   13372:	f7f8 fbb3 	bl	badc <ticker_stop>
   13376:	4804      	ldr	r0, [pc, #16]	; (13388 <time_slot_delay+0x70>)
   13378:	f002 f99e 	bl	156b8 <z_impl_k_sem_give>
}
   1337c:	b00d      	add	sp, #52	; 0x34
   1337e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   13382:	bf00      	nop
   13384:	2000291c 	.word	0x2000291c
   13388:	2000292c 	.word	0x2000292c

0001338c <time_slot_callback_prepare>:
	time_slot_delay(ticks_at_expire,
   1338c:	9b01      	ldr	r3, [sp, #4]
   1338e:	4a02      	ldr	r2, [pc, #8]	; (13398 <time_slot_callback_prepare+0xc>)
   13390:	2131      	movs	r1, #49	; 0x31
   13392:	f7ff bfc1 	b.w	13318 <time_slot_delay>
   13396:	bf00      	nop
   13398:	0001339d 	.word	0x0001339d

0001339c <time_slot_callback_abort>:
{
   1339c:	b570      	push	{r4, r5, r6, lr}
   1339e:	9d05      	ldr	r5, [sp, #20]
   133a0:	4604      	mov	r4, r0
	ll_radio_state_abort();
   133a2:	f7f9 ff09 	bl	d1b8 <ll_radio_state_abort>
	time_slot_delay(ticks_at_expire,
   133a6:	462b      	mov	r3, r5
   133a8:	4620      	mov	r0, r4
   133aa:	4a03      	ldr	r2, [pc, #12]	; (133b8 <time_slot_callback_abort+0x1c>)
}
   133ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	time_slot_delay(ticks_at_expire,
   133b0:	2106      	movs	r1, #6
   133b2:	f7ff bfb1 	b.w	13318 <time_slot_delay>
   133b6:	bf00      	nop
   133b8:	000132d5 	.word	0x000132d5

000133bc <nrf_flash_sync_init>:
{
   133bc:	b508      	push	{r3, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   133be:	2201      	movs	r2, #1
   133c0:	2100      	movs	r1, #0
   133c2:	4802      	ldr	r0, [pc, #8]	; (133cc <nrf_flash_sync_init+0x10>)
   133c4:	f00b f8ff 	bl	1e5c6 <z_impl_k_sem_init>
}
   133c8:	2000      	movs	r0, #0
   133ca:	bd08      	pop	{r3, pc}
   133cc:	2000292c 	.word	0x2000292c

000133d0 <nrf_flash_sync_set_context>:
	_ticker_sync_context.interval = duration - FLASH_SYNC_SWITCHING_TIME;
   133d0:	4b02      	ldr	r3, [pc, #8]	; (133dc <nrf_flash_sync_set_context+0xc>)
   133d2:	f2a0 62a4 	subw	r2, r0, #1700	; 0x6a4
	_ticker_sync_context.slot = duration;
   133d6:	e9c3 2000 	strd	r2, r0, [r3]
}
   133da:	4770      	bx	lr
   133dc:	2000291c 	.word	0x2000291c

000133e0 <nrf_flash_sync_get_timestamp_begin>:
{
   133e0:	b508      	push	{r3, lr}
	_ticker_sync_context.ticks_begin = ticker_ticks_now_get();
   133e2:	f008 fe9a 	bl	1c11a <ticker_ticks_now_get>
   133e6:	4b01      	ldr	r3, [pc, #4]	; (133ec <nrf_flash_sync_get_timestamp_begin+0xc>)
   133e8:	6098      	str	r0, [r3, #8]
}
   133ea:	bd08      	pop	{r3, pc}
   133ec:	2000291c 	.word	0x2000291c

000133f0 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   133f0:	b570      	push	{r4, r5, r6, lr}
		break;
	default:
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
   133f2:	794b      	ldrb	r3, [r1, #5]
   133f4:	2b01      	cmp	r3, #1
   133f6:	d120      	bne.n	1343a <uarte_nrfx_configure+0x4a>
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   133f8:	798b      	ldrb	r3, [r1, #6]
   133fa:	2b03      	cmp	r3, #3
   133fc:	d11d      	bne.n	1343a <uarte_nrfx_configure+0x4a>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   133fe:	79cc      	ldrb	r4, [r1, #7]
   13400:	b10c      	cbz	r4, 13406 <uarte_nrfx_configure+0x16>
   13402:	2c01      	cmp	r4, #1
   13404:	d119      	bne.n	1343a <uarte_nrfx_configure+0x4a>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   13406:	790a      	ldrb	r2, [r1, #4]
   13408:	b112      	cbz	r2, 13410 <uarte_nrfx_configure+0x20>
   1340a:	2a02      	cmp	r2, #2
   1340c:	d115      	bne.n	1343a <uarte_nrfx_configure+0x4a>
   1340e:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   13410:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   13412:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   13414:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   13418:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   1341a:	d062      	beq.n	134e2 <uarte_nrfx_configure+0xf2>
   1341c:	d82b      	bhi.n	13476 <uarte_nrfx_configure+0x86>
   1341e:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   13422:	d061      	beq.n	134e8 <uarte_nrfx_configure+0xf8>
   13424:	d814      	bhi.n	13450 <uarte_nrfx_configure+0x60>
   13426:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1342a:	d05f      	beq.n	134ec <uarte_nrfx_configure+0xfc>
   1342c:	d808      	bhi.n	13440 <uarte_nrfx_configure+0x50>
   1342e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   13432:	d05e      	beq.n	134f2 <uarte_nrfx_configure+0x102>
   13434:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   13438:	d05e      	beq.n	134f8 <uarte_nrfx_configure+0x108>
   1343a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1343e:	e04f      	b.n	134e0 <uarte_nrfx_configure+0xf0>
   13440:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   13444:	d05b      	beq.n	134fe <uarte_nrfx_configure+0x10e>
   13446:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1344a:	d1f6      	bne.n	1343a <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1344c:	4b36      	ldr	r3, [pc, #216]	; (13528 <uarte_nrfx_configure+0x138>)
   1344e:	e03c      	b.n	134ca <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   13450:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   13454:	d056      	beq.n	13504 <uarte_nrfx_configure+0x114>
   13456:	d807      	bhi.n	13468 <uarte_nrfx_configure+0x78>
   13458:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1345c:	d054      	beq.n	13508 <uarte_nrfx_configure+0x118>
   1345e:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   13462:	d1ea      	bne.n	1343a <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   13464:	4b31      	ldr	r3, [pc, #196]	; (1352c <uarte_nrfx_configure+0x13c>)
   13466:	e030      	b.n	134ca <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   13468:	f647 2612 	movw	r6, #31250	; 0x7a12
   1346c:	42b3      	cmp	r3, r6
   1346e:	d1e4      	bne.n	1343a <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   13470:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   13474:	e029      	b.n	134ca <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   13476:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1347a:	d047      	beq.n	1350c <uarte_nrfx_configure+0x11c>
   1347c:	d813      	bhi.n	134a6 <uarte_nrfx_configure+0xb6>
   1347e:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   13482:	d046      	beq.n	13512 <uarte_nrfx_configure+0x122>
   13484:	d809      	bhi.n	1349a <uarte_nrfx_configure+0xaa>
   13486:	f64d 26c0 	movw	r6, #56000	; 0xdac0
   1348a:	42b3      	cmp	r3, r6
   1348c:	d043      	beq.n	13516 <uarte_nrfx_configure+0x126>
   1348e:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   13492:	d1d2      	bne.n	1343a <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   13494:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   13498:	e017      	b.n	134ca <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   1349a:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1349e:	d1cc      	bne.n	1343a <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   134a0:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   134a4:	e011      	b.n	134ca <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   134a6:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   134aa:	d037      	beq.n	1351c <uarte_nrfx_configure+0x12c>
   134ac:	d808      	bhi.n	134c0 <uarte_nrfx_configure+0xd0>
   134ae:	4e20      	ldr	r6, [pc, #128]	; (13530 <uarte_nrfx_configure+0x140>)
   134b0:	42b3      	cmp	r3, r6
   134b2:	d036      	beq.n	13522 <uarte_nrfx_configure+0x132>
   134b4:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   134b8:	d1bf      	bne.n	1343a <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   134ba:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   134be:	e004      	b.n	134ca <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   134c0:	4e1c      	ldr	r6, [pc, #112]	; (13534 <uarte_nrfx_configure+0x144>)
   134c2:	42b3      	cmp	r3, r6
   134c4:	d1b9      	bne.n	1343a <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   134c6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   134ca:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   134cc:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
   134d0:	1d03      	adds	r3, r0, #4
   134d2:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
   134d4:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   134d6:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   134da:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   134de:	2000      	movs	r0, #0
}
   134e0:	bd70      	pop	{r4, r5, r6, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   134e2:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   134e6:	e7f0      	b.n	134ca <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   134e8:	4b13      	ldr	r3, [pc, #76]	; (13538 <uarte_nrfx_configure+0x148>)
   134ea:	e7ee      	b.n	134ca <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   134ec:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   134f0:	e7eb      	b.n	134ca <uarte_nrfx_configure+0xda>
		nrf_baudrate = 0x00014000;
   134f2:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   134f6:	e7e8      	b.n	134ca <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   134f8:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   134fc:	e7e5      	b.n	134ca <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   134fe:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   13502:	e7e2      	b.n	134ca <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   13504:	4b0d      	ldr	r3, [pc, #52]	; (1353c <uarte_nrfx_configure+0x14c>)
   13506:	e7e0      	b.n	134ca <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   13508:	4b0d      	ldr	r3, [pc, #52]	; (13540 <uarte_nrfx_configure+0x150>)
   1350a:	e7de      	b.n	134ca <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1350c:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   13510:	e7db      	b.n	134ca <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   13512:	4b0c      	ldr	r3, [pc, #48]	; (13544 <uarte_nrfx_configure+0x154>)
   13514:	e7d9      	b.n	134ca <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   13516:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1351a:	e7d6      	b.n	134ca <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1351c:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   13520:	e7d3      	b.n	134ca <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   13522:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   13526:	e7d0      	b.n	134ca <uarte_nrfx_configure+0xda>
   13528:	0013b000 	.word	0x0013b000
   1352c:	004ea000 	.word	0x004ea000
   13530:	0003d090 	.word	0x0003d090
   13534:	000f4240 	.word	0x000f4240
   13538:	00275000 	.word	0x00275000
   1353c:	0075c000 	.word	0x0075c000
   13540:	003af000 	.word	0x003af000
   13544:	013a9000 	.word	0x013a9000

00013548 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   13548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
   1354a:	6906      	ldr	r6, [r0, #16]
{
   1354c:	4605      	mov	r5, r0
   1354e:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   13550:	f00a ff5a 	bl	1e408 <k_is_in_isr>
   13554:	b910      	cbnz	r0, 1355c <uarte_nrfx_poll_out+0x14>
   13556:	4b2c      	ldr	r3, [pc, #176]	; (13608 <uarte_nrfx_poll_out+0xc0>)
	int key;

	if (isr_mode) {
   13558:	781b      	ldrb	r3, [r3, #0]
   1355a:	b983      	cbnz	r3, 1357e <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   1355c:	f04f 0320 	mov.w	r3, #32
   13560:	f3ef 8411 	mrs	r4, BASEPRI
   13564:	f383 8812 	msr	BASEPRI_MAX, r3
   13568:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   1356c:	6868      	ldr	r0, [r5, #4]
   1356e:	f00a fd7f 	bl	1e070 <is_tx_ready.isra.0>
   13572:	bb28      	cbnz	r0, 135c0 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
   13574:	f384 8811 	msr	BASEPRI, r4
   13578:	f3bf 8f6f 	isb	sy
}
   1357c:	e7ee      	b.n	1355c <uarte_nrfx_poll_out+0x14>
{
   1357e:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   13580:	6868      	ldr	r0, [r5, #4]
   13582:	f00a fd75 	bl	1e070 <is_tx_ready.isra.0>
   13586:	b970      	cbnz	r0, 135a6 <uarte_nrfx_poll_out+0x5e>
   13588:	2001      	movs	r0, #1
   1358a:	f00a fdca 	bl	1e122 <nrfx_busy_wait>
   1358e:	3c01      	subs	r4, #1
   13590:	d1f6      	bne.n	13580 <uarte_nrfx_poll_out+0x38>
	return z_impl_k_sleep(timeout);
   13592:	2100      	movs	r1, #0
   13594:	2021      	movs	r0, #33	; 0x21
   13596:	f002 fd2b 	bl	15ff0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1359a:	e7f0      	b.n	1357e <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   1359c:	f384 8811 	msr	BASEPRI, r4
   135a0:	f3bf 8f6f 	isb	sy
}
   135a4:	e7f5      	b.n	13592 <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
   135a6:	f04f 0320 	mov.w	r3, #32
   135aa:	f3ef 8411 	mrs	r4, BASEPRI
   135ae:	f383 8812 	msr	BASEPRI_MAX, r3
   135b2:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   135b6:	6868      	ldr	r0, [r5, #4]
   135b8:	f00a fd5a 	bl	1e070 <is_tx_ready.isra.0>
   135bc:	2800      	cmp	r0, #0
   135be:	d0ed      	beq.n	1359c <uarte_nrfx_poll_out+0x54>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
   135c0:	f806 7f10 	strb.w	r7, [r6, #16]!
	tx_start(dev, &data->char_out, 1);
   135c4:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
   135c6:	680b      	ldr	r3, [r1, #0]
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
   135c8:	2201      	movs	r2, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   135ca:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   135ce:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   135d2:	2200      	movs	r2, #0
   135d4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   135d8:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   135dc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   135e0:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   135e4:	684a      	ldr	r2, [r1, #4]
   135e6:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   135e8:	bf41      	itttt	mi
   135ea:	2208      	movmi	r2, #8
   135ec:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
   135f0:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
   135f4:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   135f8:	2201      	movs	r2, #1
   135fa:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
   135fc:	f384 8811 	msr	BASEPRI, r4
   13600:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   13604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13606:	bf00      	nop
   13608:	20002fad 	.word	0x20002fad

0001360c <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   1360c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13610:	2101      	movs	r1, #1
   13612:	4606      	mov	r6, r0
   13614:	2200      	movs	r2, #0
   13616:	2002      	movs	r0, #2
   13618:	f7f0 fb52 	bl	3cc0 <z_arm_irq_priority_set>
   1361c:	2002      	movs	r0, #2
   1361e:	f7f0 fb1d 	bl	3c5c <arch_irq_enable>
	const struct uarte_nrfx_config *config = dev->config;
   13622:	6877      	ldr	r7, [r6, #4]
	struct uarte_nrfx_data *data = dev->data;
   13624:	6935      	ldr	r5, [r6, #16]
	return config->uarte_regs;
   13626:	683c      	ldr	r4, [r7, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   13628:	2300      	movs	r3, #0
   1362a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	data->dev = dev;
   1362e:	602e      	str	r6, [r5, #0]
	uarte_nrfx_pins_configure(dev, false);
   13630:	6873      	ldr	r3, [r6, #4]
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   13632:	68d8      	ldr	r0, [r3, #12]
   13634:	1c41      	adds	r1, r0, #1
   13636:	d00c      	beq.n	13652 <uarte_0_init+0x46>
    *p_pin = pin_number & 0x1F;
   13638:	f000 021f 	and.w	r2, r0, #31
    p_reg->OUTSET = set_mask;
   1363c:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   13640:	2101      	movs	r1, #1
   13642:	4091      	lsls	r1, r2
    reg->PIN_CNF[pin_number] = cnf;
   13644:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    p_reg->OUTSET = set_mask;
   13648:	f8cc 1508 	str.w	r1, [ip, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
   1364c:	2103      	movs	r1, #3
   1364e:	f84c 1022 	str.w	r1, [ip, r2, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   13652:	6919      	ldr	r1, [r3, #16]
   13654:	1c4a      	adds	r2, r1, #1
   13656:	d010      	beq.n	1367a <uarte_0_init+0x6e>
			nrf_gpio_cfg_input(cfg->rx_pin,
   13658:	7f1a      	ldrb	r2, [r3, #28]
   1365a:	2a00      	cmp	r2, #0
    *p_pin = pin_number & 0x1F;
   1365c:	f001 021f 	and.w	r2, r1, #31
   13660:	bf14      	ite	ne
   13662:	f04f 0c03 	movne.w	ip, #3
   13666:	f04f 0c00 	moveq.w	ip, #0
    reg->PIN_CNF[pin_number] = cnf;
   1366a:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   1366e:	f04f 4ea0 	mov.w	lr, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   13672:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   13676:	f84e c022 	str.w	ip, [lr, r2, lsl #2]
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1367a:	f8d3 c014 	ldr.w	ip, [r3, #20]
   1367e:	f1bc 3fff 	cmp.w	ip, #4294967295	; 0xffffffff
   13682:	d00f      	beq.n	136a4 <uarte_0_init+0x98>
    *p_pin = pin_number & 0x1F;
   13684:	f00c 021f 	and.w	r2, ip, #31
    p_reg->OUTSET = set_mask;
   13688:	f04f 48a0 	mov.w	r8, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1368c:	f04f 0e01 	mov.w	lr, #1
   13690:	fa0e fe02 	lsl.w	lr, lr, r2
    reg->PIN_CNF[pin_number] = cnf;
   13694:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    p_reg->OUTSET = set_mask;
   13698:	f8c8 e508 	str.w	lr, [r8, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
   1369c:	f04f 0e03 	mov.w	lr, #3
   136a0:	f848 e022 	str.w	lr, [r8, r2, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   136a4:	f8d3 e018 	ldr.w	lr, [r3, #24]
   136a8:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
   136ac:	d010      	beq.n	136d0 <uarte_0_init+0xc4>
			nrf_gpio_cfg_input(cfg->cts_pin,
   136ae:	7f5a      	ldrb	r2, [r3, #29]
   136b0:	2a00      	cmp	r2, #0
    *p_pin = pin_number & 0x1F;
   136b2:	f00e 021f 	and.w	r2, lr, #31
   136b6:	bf14      	ite	ne
   136b8:	f04f 0803 	movne.w	r8, #3
   136bc:	f04f 0800 	moveq.w	r8, #0
    reg->PIN_CNF[pin_number] = cnf;
   136c0:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   136c4:	f04f 49a0 	mov.w	r9, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   136c8:	ea4f 0888 	mov.w	r8, r8, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   136cc:	f849 8022 	str.w	r8, [r9, r2, lsl #2]
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
   136d0:	681b      	ldr	r3, [r3, #0]
    p_reg->PSEL.TXD = pseltxd;
   136d2:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   136d6:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	err = uarte_nrfx_configure(dev, &data->uart_config);
   136da:	4630      	mov	r0, r6
    p_reg->PSEL.RTS = pselrts;
   136dc:	f8c3 c508 	str.w	ip, [r3, #1288]	; 0x508
   136e0:	1d29      	adds	r1, r5, #4
    p_reg->PSEL.CTS = pselcts;
   136e2:	f8c3 e510 	str.w	lr, [r3, #1296]	; 0x510
   136e6:	f7ff fe83 	bl	133f0 <uarte_nrfx_configure>
	if (err) {
   136ea:	4606      	mov	r6, r0
   136ec:	2800      	cmp	r0, #0
   136ee:	d143      	bne.n	13778 <uarte_0_init+0x16c>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   136f0:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   136f2:	0799      	lsls	r1, r3, #30
   136f4:	d519      	bpl.n	1372a <uarte_0_init+0x11e>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   136f6:	f105 0012 	add.w	r0, r5, #18
   136fa:	f001 f9af 	bl	14a5c <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   136fe:	4b21      	ldr	r3, [pc, #132]	; (13784 <uarte_0_init+0x178>)
   13700:	4298      	cmp	r0, r3
   13702:	d13c      	bne.n	1377e <uarte_0_init+0x172>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   13704:	7ca8      	ldrb	r0, [r5, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   13706:	00c3      	lsls	r3, r0, #3
   13708:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1370c:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   13710:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   13714:	f504 7190 	add.w	r1, r4, #288	; 0x120
    p_reg->CH[(uint32_t) channel].EEP = eep;
   13718:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1371c:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
   13720:	4a19      	ldr	r2, [pc, #100]	; (13788 <uarte_0_init+0x17c>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   13722:	2301      	movs	r3, #1
   13724:	4083      	lsls	r3, r0
   13726:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1372a:	2308      	movs	r3, #8
   1372c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   13730:	7a3b      	ldrb	r3, [r7, #8]
   13732:	b95b      	cbnz	r3, 1374c <uarte_0_init+0x140>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13734:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   13738:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   1373c:	f105 0311 	add.w	r3, r5, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   13740:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   13744:	2301      	movs	r3, #1
   13746:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1374a:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   1374c:	687b      	ldr	r3, [r7, #4]
   1374e:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   13750:	bf5c      	itt	pl
   13752:	f44f 7280 	movpl.w	r2, #256	; 0x100
   13756:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1375a:	06db      	lsls	r3, r3, #27
   1375c:	bf44      	itt	mi
   1375e:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   13762:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   13766:	3510      	adds	r5, #16
    p_reg->TXD.MAXCNT = length;
   13768:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1376a:	f8c4 5544 	str.w	r5, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1376e:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13772:	2301      	movs	r3, #1
   13774:	60a3      	str	r3, [r4, #8]
   13776:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   13778:	4630      	mov	r0, r6
   1377a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
   1377e:	f06f 0604 	mvn.w	r6, #4
UART_NRF_UARTE_DEVICE(0);
   13782:	e7f9      	b.n	13778 <uarte_0_init+0x16c>
   13784:	0bad0000 	.word	0x0bad0000
   13788:	4001f000 	.word	0x4001f000

0001378c <random_byte_get>:
	__asm__ volatile(
   1378c:	f04f 0320 	mov.w	r3, #32
   13790:	f3ef 8211 	mrs	r2, BASEPRI
   13794:	f383 8812 	msr	BASEPRI_MAX, r3
   13798:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1379c:	4b09      	ldr	r3, [pc, #36]	; (137c4 <random_byte_get+0x38>)
   1379e:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   137a2:	b161      	cbz	r1, 137be <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   137a4:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   137a6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   137aa:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   137ae:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   137b2:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   137b4:	f382 8811 	msr	BASEPRI, r2
   137b8:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   137bc:	4770      	bx	lr
	int retval = -EAGAIN;
   137be:	f06f 000a 	mvn.w	r0, #10
   137c2:	e7f7      	b.n	137b4 <random_byte_get+0x28>
   137c4:	4000d000 	.word	0x4000d000

000137c8 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   137c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   137ca:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   137cc:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   137ce:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   137d0:	f04f 0020 	mov.w	r0, #32
   137d4:	f3ef 8e11 	mrs	lr, BASEPRI
   137d8:	f380 8812 	msr	BASEPRI_MAX, r0
   137dc:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   137e0:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   137e2:	f893 c001 	ldrb.w	ip, [r3, #1]

	available = (last - first) & mask;
   137e6:	1ba4      	subs	r4, r4, r6
   137e8:	403c      	ands	r4, r7
	if (available < len) {
   137ea:	42a2      	cmp	r2, r4
		len = available;
   137ec:	bf88      	it	hi
   137ee:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   137f0:	18b0      	adds	r0, r6, r2
   137f2:	4038      	ands	r0, r7
	first = rngp->first_alloc;
   137f4:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   137f6:	7018      	strb	r0, [r3, #0]
	__asm__ volatile(
   137f8:	f38e 8811 	msr	BASEPRI, lr
   137fc:	f3bf 8f6f 	isb	sy
   13800:	1888      	adds	r0, r1, r2
	uint8_t *dst   = buf;
   13802:	460a      	mov	r2, r1
	irq_unlock(key);

	while (likely(len--)) {
   13804:	4290      	cmp	r0, r2
   13806:	d119      	bne.n	1383c <rng_pool_get+0x74>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   13808:	4566      	cmp	r6, ip
   1380a:	d10d      	bne.n	13828 <rng_pool_get+0x60>
	__asm__ volatile(
   1380c:	f04f 0520 	mov.w	r5, #32
   13810:	f3ef 8011 	mrs	r0, BASEPRI
   13814:	f385 8812 	msr	BASEPRI_MAX, r5
   13818:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1381c:	781d      	ldrb	r5, [r3, #0]
   1381e:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   13820:	f380 8811 	msr	BASEPRI, r0
   13824:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   13828:	1a52      	subs	r2, r2, r1
	available = available - len;
	if (available <= rngp->threshold) {
   1382a:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   1382c:	b290      	uxth	r0, r2
	available = available - len;
   1382e:	1a22      	subs	r2, r4, r0
	if (available <= rngp->threshold) {
   13830:	4293      	cmp	r3, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   13832:	bf22      	ittt	cs
   13834:	4b06      	ldrcs	r3, [pc, #24]	; (13850 <rng_pool_get+0x88>)
   13836:	2201      	movcs	r2, #1
   13838:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   1383a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   1383c:	eb03 0e05 	add.w	lr, r3, r5
		first = (first + 1) & mask;
   13840:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   13842:	f89e e005 	ldrb.w	lr, [lr, #5]
   13846:	f802 eb01 	strb.w	lr, [r2], #1
		first = (first + 1) & mask;
   1384a:	403d      	ands	r5, r7
   1384c:	e7da      	b.n	13804 <rng_pool_get+0x3c>
   1384e:	bf00      	nop
   13850:	4000d000 	.word	0x4000d000

00013854 <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   13854:	43db      	mvns	r3, r3
{
   13856:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1385a:	f013 0501 	ands.w	r5, r3, #1
{
   1385e:	460e      	mov	r6, r1
   13860:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   13862:	d004      	beq.n	1386e <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   13864:	4821      	ldr	r0, [pc, #132]	; (138ec <entropy_nrf5_get_entropy_isr+0x98>)
   13866:	f7ff ffaf 	bl	137c8 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   1386a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   1386e:	b3a2      	cbz	r2, 138da <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   13870:	f04f 0320 	mov.w	r3, #32
   13874:	f3ef 8811 	mrs	r8, BASEPRI
   13878:	f383 8812 	msr	BASEPRI_MAX, r3
   1387c:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   13880:	200d      	movs	r0, #13
   13882:	f7f0 fa0f 	bl	3ca4 <arch_irq_is_enabled>
   13886:	4607      	mov	r7, r0
		irq_disable(IRQN);
   13888:	200d      	movs	r0, #13
   1388a:	f7f0 f9f7 	bl	3c7c <arch_irq_disable>
	__asm__ volatile(
   1388e:	f388 8811 	msr	BASEPRI, r8
   13892:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   13896:	f8df 8058 	ldr.w	r8, [pc, #88]	; 138f0 <entropy_nrf5_get_entropy_isr+0x9c>
   1389a:	f8df 9058 	ldr.w	r9, [pc, #88]	; 138f4 <entropy_nrf5_get_entropy_isr+0xa0>
   1389e:	f8c8 5100 	str.w	r5, [r8, #256]	; 0x100
   138a2:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
   138a6:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   138aa:	2301      	movs	r3, #1
   138ac:	f8c8 3000 	str.w	r3, [r8]
   138b0:	4625      	mov	r5, r4
   138b2:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   138b6:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   138ba:	b183      	cbz	r3, 138de <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   138bc:	f7ff ff66 	bl	1378c <random_byte_get>
			if (byte < 0) {
   138c0:	1e03      	subs	r3, r0, #0
   138c2:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
   138c6:	dbf6      	blt.n	138b6 <entropy_nrf5_get_entropy_isr+0x62>
			buf[--len] = byte;
   138c8:	3d01      	subs	r5, #1
   138ca:	b2ad      	uxth	r5, r5
   138cc:	5573      	strb	r3, [r6, r5]
		} while (len);
   138ce:	2d00      	cmp	r5, #0
   138d0:	d1f1      	bne.n	138b6 <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   138d2:	b117      	cbz	r7, 138da <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   138d4:	200d      	movs	r0, #13
   138d6:	f7f0 f9c1 	bl	3c5c <arch_irq_enable>
	return cnt;
   138da:	4620      	mov	r0, r4
   138dc:	e7c5      	b.n	1386a <entropy_nrf5_get_entropy_isr+0x16>
  __ASM volatile ("dsb 0xF":::"memory");
   138de:	f3bf 8f4f 	dsb	sy
				__WFE();
   138e2:	bf20      	wfe
				__SEV();
   138e4:	bf40      	sev
				__WFE();
   138e6:	bf20      	wfe
   138e8:	e7e5      	b.n	138b6 <entropy_nrf5_get_entropy_isr+0x62>
   138ea:	bf00      	nop
   138ec:	20002974 	.word	0x20002974
   138f0:	4000d000 	.word	0x4000d000
   138f4:	e000e100 	.word	0xe000e100

000138f8 <entropy_nrf5_get_entropy>:
{
   138f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
   138fc:	4f13      	ldr	r7, [pc, #76]	; (1394c <entropy_nrf5_get_entropy+0x54>)
   138fe:	460d      	mov	r5, r1
   13900:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   13902:	f107 0845 	add.w	r8, r7, #69	; 0x45
   13906:	f107 0918 	add.w	r9, r7, #24
	while (len) {
   1390a:	b914      	cbnz	r4, 13912 <entropy_nrf5_get_entropy+0x1a>
}
   1390c:	4620      	mov	r0, r4
   1390e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13912:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13916:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1391a:	4638      	mov	r0, r7
   1391c:	f001 fef2 	bl	15704 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   13920:	4622      	mov	r2, r4
   13922:	4629      	mov	r1, r5
   13924:	4640      	mov	r0, r8
   13926:	f7ff ff4f 	bl	137c8 <rng_pool_get>
   1392a:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   1392c:	4638      	mov	r0, r7
   1392e:	f001 fec3 	bl	156b8 <z_impl_k_sem_give>
		if (bytes == 0U) {
   13932:	b93e      	cbnz	r6, 13944 <entropy_nrf5_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   13934:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13938:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1393c:	4648      	mov	r0, r9
   1393e:	f001 fee1 	bl	15704 <z_impl_k_sem_take>
			continue;
   13942:	e7e2      	b.n	1390a <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   13944:	1ba4      	subs	r4, r4, r6
   13946:	b2a4      	uxth	r4, r4
		buf += bytes;
   13948:	4435      	add	r5, r6
   1394a:	e7de      	b.n	1390a <entropy_nrf5_get_entropy+0x12>
   1394c:	20002944 	.word	0x20002944

00013950 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   13950:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   13952:	4c19      	ldr	r4, [pc, #100]	; (139b8 <entropy_nrf5_init+0x68>)
   13954:	2201      	movs	r2, #1
   13956:	4611      	mov	r1, r2
   13958:	4620      	mov	r0, r4
   1395a:	f00a fe34 	bl	1e5c6 <z_impl_k_sem_init>
   1395e:	2201      	movs	r2, #1
   13960:	2100      	movs	r1, #0
   13962:	f104 0018 	add.w	r0, r4, #24
   13966:	f00a fe2e 	bl	1e5c6 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   1396a:	f240 4307 	movw	r3, #1031	; 0x407
   1396e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   13972:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   13976:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   13978:	230c      	movs	r3, #12
   1397a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   1397e:	2500      	movs	r5, #0
}

NRF_STATIC_INLINE void nrf_rng_error_correction_enable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   13980:	4b0e      	ldr	r3, [pc, #56]	; (139bc <entropy_nrf5_init+0x6c>)
   13982:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   13986:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   1398a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1398e:	f042 0201 	orr.w	r2, r2, #1
   13992:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   13996:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   13998:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   1399c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   139a0:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   139a4:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   139a6:	6019      	str	r1, [r3, #0]
   139a8:	200d      	movs	r0, #13
   139aa:	f7f0 f989 	bl	3cc0 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   139ae:	200d      	movs	r0, #13
   139b0:	f7f0 f954 	bl	3c5c <arch_irq_enable>

	return 0;
}
   139b4:	4628      	mov	r0, r5
   139b6:	bd38      	pop	{r3, r4, r5, pc}
   139b8:	20002944 	.word	0x20002944
   139bc:	4000d000 	.word	0x4000d000

000139c0 <isr>:
{
   139c0:	b510      	push	{r4, lr}
	byte = random_byte_get();
   139c2:	f7ff fee3 	bl	1378c <random_byte_get>
	if (byte < 0) {
   139c6:	2800      	cmp	r0, #0
   139c8:	db20      	blt.n	13a0c <isr+0x4c>
	uint8_t last  = rngp->last;
   139ca:	4b17      	ldr	r3, [pc, #92]	; (13a28 <isr+0x68>)
   139cc:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   139d0:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   139d4:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   139d8:	1a51      	subs	r1, r2, r1
   139da:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   139de:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   139e0:	d10d      	bne.n	139fe <isr+0x3e>
	uint8_t last  = rngp->last;
   139e2:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   139e6:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   139ea:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   139ee:	1a51      	subs	r1, r2, r1
   139f0:	ea34 0101 	bics.w	r1, r4, r1
   139f4:	d10b      	bne.n	13a0e <isr+0x4e>
   139f6:	4b0d      	ldr	r3, [pc, #52]	; (13a2c <isr+0x6c>)
   139f8:	2201      	movs	r2, #1
   139fa:	605a      	str	r2, [r3, #4]
}
   139fc:	e00e      	b.n	13a1c <isr+0x5c>
	rngp->buffer[last] = byte;
   139fe:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   13a00:	3201      	adds	r2, #1
   13a02:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   13a04:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   13a08:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   13a0c:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   13a0e:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   13a10:	3201      	adds	r2, #1
   13a12:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   13a14:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   13a18:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   13a1c:	4804      	ldr	r0, [pc, #16]	; (13a30 <isr+0x70>)
}
   13a1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13a22:	f001 be49 	b.w	156b8 <z_impl_k_sem_give>
   13a26:	bf00      	nop
   13a28:	20002944 	.word	0x20002944
   13a2c:	4000d000 	.word	0x4000d000
   13a30:	2000295c 	.word	0x2000295c

00013a34 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
   13a34:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   13a36:	2301      	movs	r3, #1
   13a38:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13a3a:	4a11      	ldr	r2, [pc, #68]	; (13a80 <compare_int_lock+0x4c>)
   13a3c:	f3bf 8f5b 	dmb	ish
   13a40:	43dc      	mvns	r4, r3
   13a42:	e852 1f00 	ldrex	r1, [r2]
   13a46:	ea01 0c04 	and.w	ip, r1, r4
   13a4a:	e842 ce00 	strex	lr, ip, [r2]
   13a4e:	f1be 0f00 	cmp.w	lr, #0
   13a52:	d1f6      	bne.n	13a42 <compare_int_lock+0xe>
   13a54:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   13a58:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   13a5c:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
   13a60:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   13a64:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   13a68:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   13a6c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13a70:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   13a74:	420b      	tst	r3, r1
}
   13a76:	bf14      	ite	ne
   13a78:	2001      	movne	r0, #1
   13a7a:	2000      	moveq	r0, #0
   13a7c:	bd10      	pop	{r4, pc}
   13a7e:	bf00      	nop
   13a80:	2000299c 	.word	0x2000299c

00013a84 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   13a84:	4919      	ldr	r1, [pc, #100]	; (13aec <sys_clock_timeout_handler+0x68>)
{
   13a86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13a88:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   13a8a:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   13a8e:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   13a90:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   13a94:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   13a98:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   13a9a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   13a9e:	d222      	bcs.n	13ae6 <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   13aa0:	4b13      	ldr	r3, [pc, #76]	; (13af0 <sys_clock_timeout_handler+0x6c>)
   13aa2:	681b      	ldr	r3, [r3, #0]
   13aa4:	0a1a      	lsrs	r2, r3, #8
   13aa6:	061b      	lsls	r3, r3, #24
   13aa8:	195e      	adds	r6, r3, r5
   13aaa:	4b12      	ldr	r3, [pc, #72]	; (13af4 <sys_clock_timeout_handler+0x70>)
   13aac:	f142 0700 	adc.w	r7, r2, #0
   13ab0:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
   13ab4:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   13ab6:	f002 fc33 	bl	16320 <sys_clock_announce>
    return p_reg->CC[ch];
   13aba:	00a3      	lsls	r3, r4, #2
   13abc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   13ac0:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   13ac4:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   13ac8:	42aa      	cmp	r2, r5
   13aca:	d10b      	bne.n	13ae4 <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
   13acc:	b91e      	cbnz	r6, 13ad6 <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
   13ace:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   13ad2:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    p_reg->EVTENSET = mask;
   13ad6:	4b08      	ldr	r3, [pc, #32]	; (13af8 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   13ad8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   13adc:	fa00 f404 	lsl.w	r4, r0, r4
   13ae0:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   13ae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
   13ae6:	2600      	movs	r6, #0
   13ae8:	e7e5      	b.n	13ab6 <sys_clock_timeout_handler+0x32>
   13aea:	bf00      	nop
   13aec:	200016d0 	.word	0x200016d0
   13af0:	200029a0 	.word	0x200029a0
   13af4:	200016b8 	.word	0x200016b8
   13af8:	40011000 	.word	0x40011000

00013afc <compare_int_unlock>:
	if (key) {
   13afc:	b319      	cbz	r1, 13b46 <compare_int_unlock+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13afe:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
   13b02:	2301      	movs	r3, #1
   13b04:	4a10      	ldr	r2, [pc, #64]	; (13b48 <compare_int_unlock+0x4c>)
   13b06:	4083      	lsls	r3, r0
   13b08:	e852 1f00 	ldrex	r1, [r2]
   13b0c:	4319      	orrs	r1, r3
   13b0e:	e842 1c00 	strex	ip, r1, [r2]
   13b12:	f1bc 0f00 	cmp.w	ip, #0
   13b16:	d1f7      	bne.n	13b08 <compare_int_unlock+0xc>
   13b18:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   13b1c:	4a0b      	ldr	r2, [pc, #44]	; (13b4c <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   13b1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   13b22:	4083      	lsls	r3, r0
   13b24:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   13b28:	4b09      	ldr	r3, [pc, #36]	; (13b50 <compare_int_unlock+0x54>)
   13b2a:	f3bf 8f5b 	dmb	ish
   13b2e:	681b      	ldr	r3, [r3, #0]
   13b30:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   13b34:	fa23 f000 	lsr.w	r0, r3, r0
   13b38:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13b3a:	bf42      	ittt	mi
   13b3c:	4b05      	ldrmi	r3, [pc, #20]	; (13b54 <compare_int_unlock+0x58>)
   13b3e:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   13b42:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   13b46:	4770      	bx	lr
   13b48:	2000299c 	.word	0x2000299c
   13b4c:	40011000 	.word	0x40011000
   13b50:	20002998 	.word	0x20002998
   13b54:	e000e100 	.word	0xe000e100

00013b58 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   13b58:	4b0d      	ldr	r3, [pc, #52]	; (13b90 <z_nrf_rtc_timer_read+0x38>)
   13b5a:	6818      	ldr	r0, [r3, #0]
   13b5c:	0a01      	lsrs	r1, r0, #8
   13b5e:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   13b60:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   13b64:	4b0b      	ldr	r3, [pc, #44]	; (13b94 <z_nrf_rtc_timer_read+0x3c>)
   13b66:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   13b6a:	1818      	adds	r0, r3, r0
   13b6c:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   13b70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   13b74:	d20a      	bcs.n	13b8c <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   13b76:	4b08      	ldr	r3, [pc, #32]	; (13b98 <z_nrf_rtc_timer_read+0x40>)
   13b78:	e9d3 2300 	ldrd	r2, r3, [r3]
   13b7c:	4290      	cmp	r0, r2
   13b7e:	eb71 0303 	sbcs.w	r3, r1, r3
   13b82:	d203      	bcs.n	13b8c <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   13b84:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   13b88:	f141 0100 	adc.w	r1, r1, #0
}
   13b8c:	4770      	bx	lr
   13b8e:	bf00      	nop
   13b90:	200029a0 	.word	0x200029a0
   13b94:	40011000 	.word	0x40011000
   13b98:	200016b8 	.word	0x200016b8

00013b9c <compare_set>:
{
   13b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ba0:	b085      	sub	sp, #20
   13ba2:	4616      	mov	r6, r2
   13ba4:	4698      	mov	r8, r3
   13ba6:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
   13ba8:	f7ff ff44 	bl	13a34 <compare_int_lock>
   13bac:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   13bae:	f7ff ffd3 	bl	13b58 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   13bb2:	42b0      	cmp	r0, r6
   13bb4:	eb71 0308 	sbcs.w	r3, r1, r8
   13bb8:	d278      	bcs.n	13cac <compare_set+0x110>
		if (target_time - curr_time > COUNTER_SPAN) {
   13bba:	4b46      	ldr	r3, [pc, #280]	; (13cd4 <compare_set+0x138>)
   13bbc:	1a30      	subs	r0, r6, r0
   13bbe:	eb68 0101 	sbc.w	r1, r8, r1
   13bc2:	4298      	cmp	r0, r3
   13bc4:	f171 0300 	sbcs.w	r3, r1, #0
   13bc8:	f080 8081 	bcs.w	13cce <compare_set+0x132>
		if (target_time != cc_data[chan].target_time) {
   13bcc:	4b42      	ldr	r3, [pc, #264]	; (13cd8 <compare_set+0x13c>)
   13bce:	eb03 1305 	add.w	r3, r3, r5, lsl #4
   13bd2:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
   13bd6:	45d8      	cmp	r8, fp
   13bd8:	bf08      	it	eq
   13bda:	4556      	cmpeq	r6, sl
   13bdc:	d051      	beq.n	13c82 <compare_set+0xe6>
   13bde:	ea4f 0985 	mov.w	r9, r5, lsl #2
   13be2:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   13be6:	f105 0750 	add.w	r7, r5, #80	; 0x50
   13bea:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
   13bee:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   13bf0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   13bf4:	fa01 f305 	lsl.w	r3, r1, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   13bf8:	b2bf      	uxth	r7, r7
	return absolute_time & COUNTER_MAX;
   13bfa:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
   13bfe:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   13c02:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
   13c04:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   13c08:	4b34      	ldr	r3, [pc, #208]	; (13cdc <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   13c0a:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   13c0e:	4614      	mov	r4, r2
     return p_reg->COUNTER;
   13c10:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   13c14:	1a40      	subs	r0, r0, r1
   13c16:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   13c1a:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   13c1e:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   13c20:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
   13c24:	d107      	bne.n	13c36 <compare_set+0x9a>
   13c26:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
   13c2a:	2013      	movs	r0, #19
   13c2c:	f00a ff11 	bl	1ea52 <z_impl_k_busy_wait>
   13c30:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   13c34:	4b29      	ldr	r3, [pc, #164]	; (13cdc <compare_set+0x140>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   13c36:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
   13c3a:	eba4 000c 	sub.w	r0, r4, ip
   13c3e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
   13c42:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   13c46:	bf88      	it	hi
   13c48:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   13c4a:	2000      	movs	r0, #0
   13c4c:	6038      	str	r0, [r7, #0]
   13c4e:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
   13c50:	9801      	ldr	r0, [sp, #4]
   13c52:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   13c56:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   13c5a:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   13c5e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   13c62:	4281      	cmp	r1, r0
   13c64:	d006      	beq.n	13c74 <compare_set+0xd8>
	return (a - b) & COUNTER_MAX;
   13c66:	1a20      	subs	r0, r4, r0
   13c68:	3802      	subs	r0, #2
   13c6a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   13c6e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   13c72:	d819      	bhi.n	13ca8 <compare_set+0x10c>
	return (a - b) & COUNTER_MAX;
   13c74:	1aa4      	subs	r4, r4, r2
   13c76:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   13c7a:	eb14 0a06 	adds.w	sl, r4, r6
   13c7e:	f148 0b00 	adc.w	fp, r8, #0
	cc_data[chan].target_time = target_time;
   13c82:	4915      	ldr	r1, [pc, #84]	; (13cd8 <compare_set+0x13c>)
	cc_data[chan].callback = handler;
   13c84:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
   13c86:	012b      	lsls	r3, r5, #4
   13c88:	eb01 1205 	add.w	r2, r1, r5, lsl #4
   13c8c:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].callback = handler;
   13c90:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   13c92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   13c94:	6053      	str	r3, [r2, #4]
	return ret;
   13c96:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
   13c98:	4628      	mov	r0, r5
   13c9a:	9900      	ldr	r1, [sp, #0]
   13c9c:	f7ff ff2e 	bl	13afc <compare_int_unlock>
}
   13ca0:	4620      	mov	r0, r4
   13ca2:	b005      	add	sp, #20
   13ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ca8:	4620      	mov	r0, r4
   13caa:	e7b1      	b.n	13c10 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
   13cac:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13cae:	4a0c      	ldr	r2, [pc, #48]	; (13ce0 <compare_set+0x144>)
   13cb0:	f3bf 8f5b 	dmb	ish
   13cb4:	40ab      	lsls	r3, r5
   13cb6:	e852 1f00 	ldrex	r1, [r2]
   13cba:	4319      	orrs	r1, r3
   13cbc:	e842 1000 	strex	r0, r1, [r2]
   13cc0:	2800      	cmp	r0, #0
   13cc2:	d1f8      	bne.n	13cb6 <compare_set+0x11a>
   13cc4:	f3bf 8f5b 	dmb	ish
   13cc8:	46b2      	mov	sl, r6
   13cca:	46c3      	mov	fp, r8
   13ccc:	e7d9      	b.n	13c82 <compare_set+0xe6>
			return -EINVAL;
   13cce:	f06f 0415 	mvn.w	r4, #21
   13cd2:	e7e1      	b.n	13c98 <compare_set+0xfc>
   13cd4:	01000001 	.word	0x01000001
   13cd8:	200016c0 	.word	0x200016c0
   13cdc:	40011000 	.word	0x40011000
   13ce0:	20002998 	.word	0x20002998

00013ce4 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   13ce4:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   13ce6:	4b19      	ldr	r3, [pc, #100]	; (13d4c <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
   13ce8:	4d19      	ldr	r5, [pc, #100]	; (13d50 <sys_clock_driver_init+0x6c>)
   13cea:	2400      	movs	r4, #0
   13cec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13cf0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   13cf4:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   13cf8:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   13cfc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   13d00:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13d04:	4b13      	ldr	r3, [pc, #76]	; (13d54 <sys_clock_driver_init+0x70>)
   13d06:	2602      	movs	r6, #2
   13d08:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   13d0c:	2101      	movs	r1, #1
   13d0e:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   13d12:	2011      	movs	r0, #17
   13d14:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   13d18:	4622      	mov	r2, r4
   13d1a:	f7ef ffd1 	bl	3cc0 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   13d1e:	2011      	movs	r0, #17
   13d20:	f7ef ff9c 	bl	3c5c <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   13d24:	4a0c      	ldr	r2, [pc, #48]	; (13d58 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   13d26:	2301      	movs	r3, #1
   13d28:	60ab      	str	r3, [r5, #8]
   13d2a:	602b      	str	r3, [r5, #0]
   13d2c:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   13d2e:	4b0b      	ldr	r3, [pc, #44]	; (13d5c <sys_clock_driver_init+0x78>)
   13d30:	4a0b      	ldr	r2, [pc, #44]	; (13d60 <sys_clock_driver_init+0x7c>)
   13d32:	9300      	str	r3, [sp, #0]
   13d34:	9401      	str	r4, [sp, #4]
   13d36:	2300      	movs	r3, #0
   13d38:	4620      	mov	r0, r4
   13d3a:	f7ff ff2f 	bl	13b9c <compare_set>

	z_nrf_clock_control_lf_on(mode);
   13d3e:	4630      	mov	r0, r6
   13d40:	f7fe fc16 	bl	12570 <z_nrf_clock_control_lf_on>

	return 0;
}
   13d44:	4620      	mov	r0, r4
   13d46:	b002      	add	sp, #8
   13d48:	bd70      	pop	{r4, r5, r6, pc}
   13d4a:	bf00      	nop
   13d4c:	200016c0 	.word	0x200016c0
   13d50:	40011000 	.word	0x40011000
   13d54:	e000e100 	.word	0xe000e100
   13d58:	2000299c 	.word	0x2000299c
   13d5c:	00013a85 	.word	0x00013a85
   13d60:	007fffff 	.word	0x007fffff

00013d64 <rtc_nrf_isr>:
{
   13d64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
   13d68:	4c35      	ldr	r4, [pc, #212]	; (13e40 <rtc_nrf_isr+0xdc>)
   13d6a:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   13d6e:	079a      	lsls	r2, r3, #30
   13d70:	d50b      	bpl.n	13d8a <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13d72:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   13d76:	b143      	cbz	r3, 13d8a <rtc_nrf_isr+0x26>
		overflow_cnt++;
   13d78:	4a32      	ldr	r2, [pc, #200]	; (13e44 <rtc_nrf_isr+0xe0>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   13d7a:	2300      	movs	r3, #0
   13d7c:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   13d80:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   13d84:	6813      	ldr	r3, [r2, #0]
   13d86:	3301      	adds	r3, #1
   13d88:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   13d8a:	f04f 0320 	mov.w	r3, #32
   13d8e:	f3ef 8211 	mrs	r2, BASEPRI
   13d92:	f383 8812 	msr	BASEPRI_MAX, r3
   13d96:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
   13d9a:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   13d9e:	03db      	lsls	r3, r3, #15
   13da0:	d512      	bpl.n	13dc8 <rtc_nrf_isr+0x64>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13da2:	f3bf 8f5b 	dmb	ish
   13da6:	4b28      	ldr	r3, [pc, #160]	; (13e48 <rtc_nrf_isr+0xe4>)
   13da8:	e853 1f00 	ldrex	r1, [r3]
   13dac:	f021 0001 	bic.w	r0, r1, #1
   13db0:	e843 0600 	strex	r6, r0, [r3]
   13db4:	2e00      	cmp	r6, #0
   13db6:	d1f7      	bne.n	13da8 <rtc_nrf_isr+0x44>
   13db8:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   13dbc:	2900      	cmp	r1, #0
   13dbe:	d136      	bne.n	13e2e <rtc_nrf_isr+0xca>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13dc0:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		if (result) {
   13dc4:	2b00      	cmp	r3, #0
   13dc6:	d132      	bne.n	13e2e <rtc_nrf_isr+0xca>
{
   13dc8:	2300      	movs	r3, #0
	__asm__ volatile(
   13dca:	f382 8811 	msr	BASEPRI, r2
   13dce:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
   13dd2:	b34b      	cbz	r3, 13e28 <rtc_nrf_isr+0xc4>
		curr_time = z_nrf_rtc_timer_read();
   13dd4:	f7ff fec0 	bl	13b58 <z_nrf_rtc_timer_read>
	__asm__ volatile(
   13dd8:	f04f 0320 	mov.w	r3, #32
   13ddc:	f3ef 8c11 	mrs	ip, BASEPRI
   13de0:	f383 8812 	msr	BASEPRI_MAX, r3
   13de4:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   13de8:	4b18      	ldr	r3, [pc, #96]	; (13e4c <rtc_nrf_isr+0xe8>)
   13dea:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   13dee:	42b0      	cmp	r0, r6
   13df0:	eb71 0207 	sbcs.w	r2, r1, r7
   13df4:	f04f 0200 	mov.w	r2, #0
   13df8:	d320      	bcc.n	13e3c <rtc_nrf_isr+0xd8>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   13dfa:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   13dfe:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
   13e02:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   13e06:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
   13e0a:	601a      	str	r2, [r3, #0]
    p_reg->EVTENCLR = mask;
   13e0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   13e10:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
   13e14:	f38c 8811 	msr	BASEPRI, ip
   13e18:	f3bf 8f6f 	isb	sy
		if (handler) {
   13e1c:	b121      	cbz	r1, 13e28 <rtc_nrf_isr+0xc4>
			handler(chan, expire_time, user_context);
   13e1e:	9500      	str	r5, [sp, #0]
   13e20:	4632      	mov	r2, r6
   13e22:	463b      	mov	r3, r7
   13e24:	2000      	movs	r0, #0
   13e26:	4788      	blx	r1
}
   13e28:	b003      	add	sp, #12
   13e2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   13e2e:	2300      	movs	r3, #0
   13e30:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
   13e34:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   13e38:	2301      	movs	r3, #1
}
   13e3a:	e7c6      	b.n	13dca <rtc_nrf_isr+0x66>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   13e3c:	4611      	mov	r1, r2
   13e3e:	e7e9      	b.n	13e14 <rtc_nrf_isr+0xb0>
   13e40:	40011000 	.word	0x40011000
   13e44:	200029a0 	.word	0x200029a0
   13e48:	20002998 	.word	0x20002998
   13e4c:	200016c0 	.word	0x200016c0

00013e50 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   13e50:	1c43      	adds	r3, r0, #1
{
   13e52:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   13e54:	d021      	beq.n	13e9a <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   13e56:	2801      	cmp	r0, #1
   13e58:	dd21      	ble.n	13e9e <sys_clock_set_timeout+0x4e>
   13e5a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   13e5e:	da20      	bge.n	13ea2 <sys_clock_set_timeout+0x52>
   13e60:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   13e62:	f7ff fe79 	bl	13b58 <z_nrf_rtc_timer_read>
   13e66:	4b10      	ldr	r3, [pc, #64]	; (13ea8 <sys_clock_set_timeout+0x58>)
   13e68:	e9d3 1300 	ldrd	r1, r3, [r3]
   13e6c:	1a40      	subs	r0, r0, r1
		ticks = 0;
   13e6e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   13e72:	bf28      	it	cs
   13e74:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   13e76:	3001      	adds	r0, #1
   13e78:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
   13e7a:	480c      	ldr	r0, [pc, #48]	; (13eac <sys_clock_set_timeout+0x5c>)
   13e7c:	4282      	cmp	r2, r0
   13e7e:	bf28      	it	cs
   13e80:	4602      	movcs	r2, r0
   13e82:	1852      	adds	r2, r2, r1
   13e84:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   13e88:	4909      	ldr	r1, [pc, #36]	; (13eb0 <sys_clock_set_timeout+0x60>)
   13e8a:	9001      	str	r0, [sp, #4]
   13e8c:	9100      	str	r1, [sp, #0]
   13e8e:	f143 0300 	adc.w	r3, r3, #0
   13e92:	f7ff fe83 	bl	13b9c <compare_set>
}
   13e96:	b002      	add	sp, #8
   13e98:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   13e9a:	4804      	ldr	r0, [pc, #16]	; (13eac <sys_clock_set_timeout+0x5c>)
   13e9c:	e7e0      	b.n	13e60 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   13e9e:	2400      	movs	r4, #0
   13ea0:	e7df      	b.n	13e62 <sys_clock_set_timeout+0x12>
   13ea2:	4c02      	ldr	r4, [pc, #8]	; (13eac <sys_clock_set_timeout+0x5c>)
   13ea4:	e7dd      	b.n	13e62 <sys_clock_set_timeout+0x12>
   13ea6:	bf00      	nop
   13ea8:	200016d0 	.word	0x200016d0
   13eac:	007fffff 	.word	0x007fffff
   13eb0:	00013a85 	.word	0x00013a85

00013eb4 <sys_clock_elapsed>:
{
   13eb4:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   13eb6:	f7ff fe4f 	bl	13b58 <z_nrf_rtc_timer_read>
   13eba:	4b02      	ldr	r3, [pc, #8]	; (13ec4 <sys_clock_elapsed+0x10>)
   13ebc:	681b      	ldr	r3, [r3, #0]
}
   13ebe:	1ac0      	subs	r0, r0, r3
   13ec0:	bd08      	pop	{r3, pc}
   13ec2:	bf00      	nop
   13ec4:	200016d0 	.word	0x200016d0

00013ec8 <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   13ec8:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   13ecc:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   13ed0:	2a06      	cmp	r2, #6
   13ed2:	d109      	bne.n	13ee8 <nrf52_errata_16+0x20>
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   13ed4:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
   13ed8:	f3c3 1303 	ubfx	r3, r3, #4, #4
   13edc:	3b03      	subs	r3, #3
   13ede:	2b04      	cmp	r3, #4
   13ee0:	d802      	bhi.n	13ee8 <nrf52_errata_16+0x20>
   13ee2:	4a02      	ldr	r2, [pc, #8]	; (13eec <nrf52_errata_16+0x24>)
   13ee4:	5cd0      	ldrb	r0, [r2, r3]
   13ee6:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
   13ee8:	2000      	movs	r0, #0
    #endif
}
   13eea:	4770      	bx	lr
   13eec:	00020f26 	.word	0x00020f26

00013ef0 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   13ef0:	4a02      	ldr	r2, [pc, #8]	; (13efc <nvmc_wait+0xc>)
   13ef2:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   13ef6:	2b00      	cmp	r3, #0
   13ef8:	d0fb      	beq.n	13ef2 <nvmc_wait+0x2>
}
   13efa:	4770      	bx	lr
   13efc:	4001e000 	.word	0x4001e000

00013f00 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   13f00:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
   13f02:	f00a f8ff 	bl	1e104 <nrf52_errata_108>
   13f06:	b140      	cbz	r0, 13f1a <SystemInit+0x1a>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
   13f08:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   13f0c:	4a90      	ldr	r2, [pc, #576]	; (14150 <SystemInit+0x250>)
   13f0e:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
   13f12:	f3c3 2304 	ubfx	r3, r3, #8, #5
   13f16:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
   13f1a:	f7ff ffd5 	bl	13ec8 <nrf52_errata_16>
   13f1e:	b110      	cbz	r0, 13f26 <SystemInit+0x26>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
   13f20:	4b8c      	ldr	r3, [pc, #560]	; (14154 <SystemInit+0x254>)
   13f22:	4a8d      	ldr	r2, [pc, #564]	; (14158 <SystemInit+0x258>)
   13f24:	675a      	str	r2, [r3, #116]	; 0x74
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
   13f26:	f00a f8ed 	bl	1e104 <nrf52_errata_108>
   13f2a:	b148      	cbz	r0, 13f40 <SystemInit+0x40>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
   13f2c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   13f30:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   13f34:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
   13f38:	f3c3 3342 	ubfx	r3, r3, #13, #3
   13f3c:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
   13f40:	f7ff ffc2 	bl	13ec8 <nrf52_errata_16>
   13f44:	b130      	cbz	r0, 13f54 <SystemInit+0x54>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
   13f46:	4a85      	ldr	r2, [pc, #532]	; (1415c <SystemInit+0x25c>)
   13f48:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
   13f4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   13f50:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   13f54:	f00a f8d6 	bl	1e104 <nrf52_errata_108>
   13f58:	b140      	cbz	r0, 13f6c <SystemInit+0x6c>
            NRF_CLOCK->EVENTS_DONE = 0;
   13f5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   13f5e:	2200      	movs	r2, #0
   13f60:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   13f64:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   13f68:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
   13f6c:	f7ff ffac 	bl	13ec8 <nrf52_errata_16>
   13f70:	b120      	cbz	r0, 13f7c <SystemInit+0x7c>
            *(volatile uint32_t *)0x400005A0 = 0x3;
   13f72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   13f76:	2203      	movs	r2, #3
   13f78:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
   13f7c:	f7ff ffa4 	bl	13ec8 <nrf52_errata_16>
   13f80:	b160      	cbz	r0, 13f9c <SystemInit+0x9c>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
   13f82:	4b77      	ldr	r3, [pc, #476]	; (14160 <SystemInit+0x260>)
   13f84:	2205      	movs	r2, #5
   13f86:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
            *(volatile uint32_t *)0x40005688 = 0x00000001;
   13f8a:	2201      	movs	r2, #1
   13f8c:	f8c3 2688 	str.w	r2, [r3, #1672]	; 0x688
            *(volatile uint32_t *)0x40005618 = 0x00000000;
   13f90:	2200      	movs	r2, #0
   13f92:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
   13f96:	223f      	movs	r2, #63	; 0x3f
   13f98:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   13f9c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   13fa0:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   13fa4:	1c51      	adds	r1, r2, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   13fa6:	bf09      	itett	eq
   13fa8:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
   13fac:	f8d3 3134 	ldrne.w	r3, [r3, #308]	; 0x134
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   13fb0:	f893 2fe0 	ldrbeq.w	r2, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   13fb4:	f8d3 3fe8 	ldreq.w	r3, [r3, #4072]	; 0xfe8
   13fb8:	bf08      	it	eq
   13fba:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   13fbe:	2a06      	cmp	r2, #6
   13fc0:	d14d      	bne.n	1405e <SystemInit+0x15e>
            {
                switch(var2)
   13fc2:	3b03      	subs	r3, #3
   13fc4:	2b04      	cmp	r3, #4
   13fc6:	d803      	bhi.n	13fd0 <SystemInit+0xd0>
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   13fc8:	4a66      	ldr	r2, [pc, #408]	; (14164 <SystemInit+0x264>)
   13fca:	5cd3      	ldrb	r3, [r2, r3]
   13fcc:	2b00      	cmp	r3, #0
   13fce:	d046      	beq.n	1405e <SystemInit+0x15e>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   13fd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   13fd4:	4b64      	ldr	r3, [pc, #400]	; (14168 <SystemInit+0x268>)
   13fd6:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   13fda:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   13fde:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   13fe2:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   13fe6:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   13fea:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   13fee:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   13ff2:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   13ff6:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   13ffa:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   13ffe:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   14002:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   14006:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   1400a:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   1400e:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   14012:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   14016:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   1401a:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   1401e:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   14022:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   14026:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   1402a:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   1402e:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   14032:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   14036:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   1403a:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   1403e:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   14042:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   14046:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   1404a:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   1404e:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   14052:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   14056:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   1405a:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
   1405e:	f00a f851 	bl	1e104 <nrf52_errata_108>
   14062:	b148      	cbz	r0, 14078 <SystemInit+0x178>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
   14064:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   14068:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1406c:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   14070:	f003 034f 	and.w	r3, r3, #79	; 0x4f
   14074:	f8c2 3ee4 	str.w	r3, [r2, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   14078:	f00a f844 	bl	1e104 <nrf52_errata_108>
   1407c:	b148      	cbz	r0, 14092 <SystemInit+0x192>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   1407e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14082:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   14086:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   14088:	bf44      	itt	mi
   1408a:	f06f 0201 	mvnmi.w	r2, #1
   1408e:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   14092:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   14096:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1409a:	2a06      	cmp	r2, #6
   1409c:	d126      	bne.n	140ec <SystemInit+0x1ec>
            {
                switch(var2)
   1409e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   140a2:	3b03      	subs	r3, #3
   140a4:	2b04      	cmp	r3, #4
   140a6:	d802      	bhi.n	140ae <SystemInit+0x1ae>
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
   140a8:	4a30      	ldr	r2, [pc, #192]	; (1416c <SystemInit+0x26c>)
   140aa:	5cd3      	ldrb	r3, [r2, r3]
   140ac:	b163      	cbz	r3, 140c8 <SystemInit+0x1c8>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
   140ae:	4a30      	ldr	r2, [pc, #192]	; (14170 <SystemInit+0x270>)
   140b0:	f8d2 373c 	ldr.w	r3, [r2, #1852]	; 0x73c
   140b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   140b8:	f8c2 373c 	str.w	r3, [r2, #1852]	; 0x73c
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   140bc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   140c0:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   140c4:	2b06      	cmp	r3, #6
   140c6:	d111      	bne.n	140ec <SystemInit+0x1ec>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   140c8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   140cc:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   140d0:	3b03      	subs	r3, #3
   140d2:	2b04      	cmp	r3, #4
   140d4:	d802      	bhi.n	140dc <SystemInit+0x1dc>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   140d6:	4a27      	ldr	r2, [pc, #156]	; (14174 <SystemInit+0x274>)
   140d8:	5cd3      	ldrb	r3, [r2, r3]
   140da:	b13b      	cbz	r3, 140ec <SystemInit+0x1ec>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   140dc:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   140e0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   140e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   140e8:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   140ec:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   140f0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   140f4:	2a00      	cmp	r2, #0
   140f6:	db03      	blt.n	14100 <SystemInit+0x200>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   140f8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   140fc:	2b00      	cmp	r3, #0
   140fe:	da22      	bge.n	14146 <SystemInit+0x246>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   14100:	491d      	ldr	r1, [pc, #116]	; (14178 <SystemInit+0x278>)
   14102:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   14104:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   14108:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1410c:	2415      	movs	r4, #21
    nvmc_wait();
   1410e:	f7ff feef 	bl	13ef0 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   14112:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   14116:	f7ff feeb 	bl	13ef0 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   1411a:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   1411e:	f7ff fee7 	bl	13ef0 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   14122:	2300      	movs	r3, #0
   14124:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   14128:	f7ff fee2 	bl	13ef0 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   1412c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   14130:	490a      	ldr	r1, [pc, #40]	; (1415c <SystemInit+0x25c>)
   14132:	4b12      	ldr	r3, [pc, #72]	; (1417c <SystemInit+0x27c>)
   14134:	68ca      	ldr	r2, [r1, #12]
   14136:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1413a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1413c:	60cb      	str	r3, [r1, #12]
   1413e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   14142:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   14144:	e7fd      	b.n	14142 <SystemInit+0x242>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   14146:	4b0e      	ldr	r3, [pc, #56]	; (14180 <SystemInit+0x280>)
   14148:	4a0e      	ldr	r2, [pc, #56]	; (14184 <SystemInit+0x284>)
   1414a:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   1414c:	bd10      	pop	{r4, pc}
   1414e:	bf00      	nop
   14150:	40013000 	.word	0x40013000
   14154:	4007c000 	.word	0x4007c000
   14158:	baadf00d 	.word	0xbaadf00d
   1415c:	e000ed00 	.word	0xe000ed00
   14160:	40005000 	.word	0x40005000
   14164:	00020f17 	.word	0x00020f17
   14168:	4000c000 	.word	0x4000c000
   1416c:	00020f1c 	.word	0x00020f1c
   14170:	40001000 	.word	0x40001000
   14174:	00020f21 	.word	0x00020f21
   14178:	4001e000 	.word	0x4001e000
   1417c:	05fa0004 	.word	0x05fa0004
   14180:	2000090c 	.word	0x2000090c
   14184:	03d09000 	.word	0x03d09000

00014188 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   14188:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   1418a:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   1418c:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   1418e:	fab2 f382 	clz	r3, r2
   14192:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
   14196:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
   14198:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
   1419a:	d014      	beq.n	141c6 <nrfx_flag32_alloc+0x3e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1419c:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
   141a0:	fa05 f303 	lsl.w	r3, r5, r3
   141a4:	ea22 0303 	bic.w	r3, r2, r3
   141a8:	e850 6f00 	ldrex	r6, [r0]
   141ac:	4296      	cmp	r6, r2
   141ae:	d104      	bne.n	141ba <nrfx_flag32_alloc+0x32>
   141b0:	e840 3c00 	strex	ip, r3, [r0]
   141b4:	f1bc 0f00 	cmp.w	ip, #0
   141b8:	d1f6      	bne.n	141a8 <nrfx_flag32_alloc+0x20>
   141ba:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   141be:	d1e5      	bne.n	1418c <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
   141c0:	4802      	ldr	r0, [pc, #8]	; (141cc <nrfx_flag32_alloc+0x44>)
    *p_flag = idx;
   141c2:	700c      	strb	r4, [r1, #0]
}
   141c4:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
   141c6:	4802      	ldr	r0, [pc, #8]	; (141d0 <nrfx_flag32_alloc+0x48>)
   141c8:	e7fc      	b.n	141c4 <nrfx_flag32_alloc+0x3c>
   141ca:	bf00      	nop
   141cc:	0bad0000 	.word	0x0bad0000
   141d0:	0bad0002 	.word	0x0bad0002

000141d4 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   141d4:	6803      	ldr	r3, [r0, #0]
   141d6:	40cb      	lsrs	r3, r1
   141d8:	07db      	lsls	r3, r3, #31
{
   141da:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
   141dc:	d415      	bmi.n	1420a <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   141de:	2301      	movs	r3, #1
   141e0:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
   141e4:	6803      	ldr	r3, [r0, #0]
   141e6:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   141ea:	ea41 0203 	orr.w	r2, r1, r3
   141ee:	e850 4f00 	ldrex	r4, [r0]
   141f2:	429c      	cmp	r4, r3
   141f4:	d104      	bne.n	14200 <nrfx_flag32_free+0x2c>
   141f6:	e840 2c00 	strex	ip, r2, [r0]
   141fa:	f1bc 0f00 	cmp.w	ip, #0
   141fe:	d1f6      	bne.n	141ee <nrfx_flag32_free+0x1a>
   14200:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   14204:	d1ee      	bne.n	141e4 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
   14206:	4802      	ldr	r0, [pc, #8]	; (14210 <nrfx_flag32_free+0x3c>)
}
   14208:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1420a:	4802      	ldr	r0, [pc, #8]	; (14214 <nrfx_flag32_free+0x40>)
   1420c:	e7fc      	b.n	14208 <nrfx_flag32_free+0x34>
   1420e:	bf00      	nop
   14210:	0bad0000 	.word	0x0bad0000
   14214:	0bad0004 	.word	0x0bad0004

00014218 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   14218:	4b04      	ldr	r3, [pc, #16]	; (1422c <nrfx_clock_init+0x14>)
   1421a:	791a      	ldrb	r2, [r3, #4]
   1421c:	b922      	cbnz	r2, 14228 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   1421e:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   14220:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   14222:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   14224:	4802      	ldr	r0, [pc, #8]	; (14230 <nrfx_clock_init+0x18>)
   14226:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   14228:	4802      	ldr	r0, [pc, #8]	; (14234 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1422a:	4770      	bx	lr
   1422c:	200029a4 	.word	0x200029a4
   14230:	0bad0000 	.word	0x0bad0000
   14234:	0bad000c 	.word	0x0bad000c

00014238 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   14238:	b530      	push	{r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   1423a:	b110      	cbz	r0, 14242 <nrfx_clock_start+0xa>
   1423c:	2801      	cmp	r0, #1
   1423e:	d034      	beq.n	142aa <nrfx_clock_start+0x72>
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   14240:	bd30      	pop	{r4, r5, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   14242:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14246:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1424a:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   1424e:	03c9      	lsls	r1, r1, #15
   14250:	d529      	bpl.n	142a6 <nrfx_clock_start+0x6e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   14252:	f002 0203 	and.w	r2, r2, #3
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   14256:	2a01      	cmp	r2, #1
   14258:	d125      	bne.n	142a6 <nrfx_clock_start+0x6e>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1425a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1425e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14262:	2200      	movs	r2, #0
   14264:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   14268:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
   1426c:	2202      	movs	r2, #2
   1426e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    core_debug = CoreDebug->DEMCR;
   14272:	4a13      	ldr	r2, [pc, #76]	; (142c0 <nrfx_clock_start+0x88>)
   14274:	f8d2 00fc 	ldr.w	r0, [r2, #252]	; 0xfc
    CoreDebug->DEMCR = core_debug | CoreDebug_DEMCR_TRCENA_Msk;
   14278:	f040 7380 	orr.w	r3, r0, #16777216	; 0x1000000
   1427c:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    dwt_ctrl = DWT->CTRL;
   14280:	4b10      	ldr	r3, [pc, #64]	; (142c4 <nrfx_clock_start+0x8c>)
   14282:	681c      	ldr	r4, [r3, #0]
    DWT->CTRL = dwt_ctrl | DWT_CTRL_CYCCNTENA_Msk;
   14284:	f044 0101 	orr.w	r1, r4, #1
   14288:	6019      	str	r1, [r3, #0]
    cyccnt_inital = DWT->CYCCNT;
   1428a:	685d      	ldr	r5, [r3, #4]
    while ((DWT->CYCCNT - cyccnt_inital) < ANOMALY_132_DELAY_CYCLES)
   1428c:	6859      	ldr	r1, [r3, #4]
   1428e:	1b49      	subs	r1, r1, r5
   14290:	f5b1 5f0a 	cmp.w	r1, #8832	; 0x2280
   14294:	d3fa      	bcc.n	1428c <nrfx_clock_start+0x54>
    DWT->CTRL = dwt_ctrl;
   14296:	601c      	str	r4, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14298:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    CoreDebug->DEMCR = core_debug;
   1429c:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
   142a0:	2201      	movs	r2, #1
   142a2:	609a      	str	r2, [r3, #8]
}
   142a4:	e7cc      	b.n	14240 <nrfx_clock_start+0x8>
    p_reg->LFCLKSRC = (uint32_t)(source);
   142a6:	2200      	movs	r2, #0
   142a8:	e7d7      	b.n	1425a <nrfx_clock_start+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   142aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   142ae:	2200      	movs	r2, #0
   142b0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   142b4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   142b8:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   142bc:	6018      	str	r0, [r3, #0]
}
   142be:	e7bf      	b.n	14240 <nrfx_clock_start+0x8>
   142c0:	e000ed00 	.word	0xe000ed00
   142c4:	e0001000 	.word	0xe0001000

000142c8 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   142c8:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   142ca:	b110      	cbz	r0, 142d2 <nrfx_clock_stop+0xa>
   142cc:	2801      	cmp	r0, #1
   142ce:	d017      	beq.n	14300 <nrfx_clock_stop+0x38>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   142d0:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
   142d2:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   142d6:	2302      	movs	r3, #2
   142d8:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   142dc:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
   142e0:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   142e4:	2301      	movs	r3, #1
   142e6:	60e3      	str	r3, [r4, #12]
   142e8:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   142ec:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
   142f0:	03db      	lsls	r3, r3, #15
   142f2:	d5ed      	bpl.n	142d0 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   142f4:	2001      	movs	r0, #1
   142f6:	f009 ff14 	bl	1e122 <nrfx_busy_wait>
   142fa:	3d01      	subs	r5, #1
   142fc:	d1f6      	bne.n	142ec <nrfx_clock_stop+0x24>
   142fe:	e7e7      	b.n	142d0 <nrfx_clock_stop+0x8>
    p_reg->INTENCLR = mask;
   14300:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14304:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
   14306:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1430a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1430e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14312:	6060      	str	r0, [r4, #4]
   14314:	f242 7510 	movw	r5, #10000	; 0x2710
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   14318:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1431c:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
   14320:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   14322:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   14326:	d505      	bpl.n	14334 <nrfx_clock_stop+0x6c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   14328:	b123      	cbz	r3, 14334 <nrfx_clock_stop+0x6c>
   1432a:	2001      	movs	r0, #1
   1432c:	f009 fef9 	bl	1e122 <nrfx_busy_wait>
   14330:	3d01      	subs	r5, #1
   14332:	d1f1      	bne.n	14318 <nrfx_clock_stop+0x50>
            m_clock_cb.hfclk_started = false;
   14334:	4b01      	ldr	r3, [pc, #4]	; (1433c <nrfx_clock_stop+0x74>)
   14336:	2200      	movs	r2, #0
   14338:	715a      	strb	r2, [r3, #5]
   1433a:	e7c9      	b.n	142d0 <nrfx_clock_stop+0x8>
   1433c:	200029a4 	.word	0x200029a4

00014340 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   14340:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   14344:	b510      	push	{r4, lr}
   14346:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   1434a:	b16a      	cbz	r2, 14368 <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1434c:	2200      	movs	r2, #0
   1434e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   14352:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   14356:	2201      	movs	r2, #1
   14358:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
   1435c:	4b11      	ldr	r3, [pc, #68]	; (143a4 <nrfx_power_clock_irq_handler+0x64>)
   1435e:	7958      	ldrb	r0, [r3, #5]
   14360:	b910      	cbnz	r0, 14368 <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
   14362:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   14364:	681b      	ldr	r3, [r3, #0]
   14366:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   14368:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1436c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   14370:	b172      	cbz	r2, 14390 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14372:	2200      	movs	r2, #0
   14374:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   14378:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1437c:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   14380:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   14384:	0792      	lsls	r2, r2, #30
   14386:	d104      	bne.n	14392 <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
   14388:	2201      	movs	r2, #1
   1438a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1438e:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   14390:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   14392:	2202      	movs	r2, #2
   14394:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   14398:	4b02      	ldr	r3, [pc, #8]	; (143a4 <nrfx_power_clock_irq_handler+0x64>)
}
   1439a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1439e:	681b      	ldr	r3, [r3, #0]
   143a0:	2001      	movs	r0, #1
   143a2:	4718      	bx	r3
   143a4:	200029a4 	.word	0x200029a4

000143a8 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   143a8:	4b03      	ldr	r3, [pc, #12]	; (143b8 <pin_in_use_by_te+0x10>)
   143aa:	3008      	adds	r0, #8
   143ac:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   143b0:	f3c0 1040 	ubfx	r0, r0, #5, #1
   143b4:	4770      	bx	lr
   143b6:	bf00      	nop
   143b8:	20000910 	.word	0x20000910

000143bc <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   143bc:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   143be:	f100 0308 	add.w	r3, r0, #8
   143c2:	4c0c      	ldr	r4, [pc, #48]	; (143f4 <call_handler+0x38>)
   143c4:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   143c8:	05da      	lsls	r2, r3, #23
{
   143ca:	4605      	mov	r5, r0
   143cc:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   143ce:	d507      	bpl.n	143e0 <call_handler+0x24>
   143d0:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   143d4:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   143d8:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   143dc:	6852      	ldr	r2, [r2, #4]
   143de:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   143e0:	68a3      	ldr	r3, [r4, #8]
   143e2:	b12b      	cbz	r3, 143f0 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   143e4:	68e2      	ldr	r2, [r4, #12]
   143e6:	4631      	mov	r1, r6
   143e8:	4628      	mov	r0, r5
    }
}
   143ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   143ee:	4718      	bx	r3
}
   143f0:	bd70      	pop	{r4, r5, r6, pc}
   143f2:	bf00      	nop
   143f4:	20000910 	.word	0x20000910

000143f8 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   143f8:	4a12      	ldr	r2, [pc, #72]	; (14444 <release_handler+0x4c>)
   143fa:	3008      	adds	r0, #8
{
   143fc:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   143fe:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   14402:	05d9      	lsls	r1, r3, #23
   14404:	d51b      	bpl.n	1443e <release_handler+0x46>
   14406:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   1440a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1440e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   14412:	f102 0410 	add.w	r4, r2, #16
   14416:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   14418:	f834 3b02 	ldrh.w	r3, [r4], #2
   1441c:	f413 7f80 	tst.w	r3, #256	; 0x100
   14420:	d003      	beq.n	1442a <release_handler+0x32>
   14422:	f3c3 2343 	ubfx	r3, r3, #9, #4
   14426:	4299      	cmp	r1, r3
   14428:	d009      	beq.n	1443e <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1442a:	3001      	adds	r0, #1
   1442c:	2820      	cmp	r0, #32
   1442e:	d1f3      	bne.n	14418 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   14430:	2300      	movs	r3, #0
   14432:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   14436:	4804      	ldr	r0, [pc, #16]	; (14448 <release_handler+0x50>)
}
   14438:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1443a:	f7ff becb 	b.w	141d4 <nrfx_flag32_free>
}
   1443e:	bc10      	pop	{r4}
   14440:	4770      	bx	lr
   14442:	bf00      	nop
   14444:	20000910 	.word	0x20000910
   14448:	20000964 	.word	0x20000964

0001444c <pin_handler_trigger_uninit>:
{
   1444c:	b538      	push	{r3, r4, r5, lr}
   1444e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   14450:	f7ff ffaa 	bl	143a8 <pin_in_use_by_te>
   14454:	4c09      	ldr	r4, [pc, #36]	; (1447c <pin_handler_trigger_uninit+0x30>)
   14456:	f102 0508 	add.w	r5, r2, #8
   1445a:	b140      	cbz	r0, 1446e <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1445c:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   14460:	4907      	ldr	r1, [pc, #28]	; (14480 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   14462:	0b5b      	lsrs	r3, r3, #13
   14464:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   14468:	2000      	movs	r0, #0
   1446a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
   1446e:	4610      	mov	r0, r2
   14470:	f7ff ffc2 	bl	143f8 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   14474:	2300      	movs	r3, #0
   14476:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   1447a:	bd38      	pop	{r3, r4, r5, pc}
   1447c:	20000910 	.word	0x20000910
   14480:	40006000 	.word	0x40006000

00014484 <nrfx_gpiote_input_configure>:
{
   14484:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   14488:	4604      	mov	r4, r0
   1448a:	461e      	mov	r6, r3
    if (p_input_config)
   1448c:	b309      	cbz	r1, 144d2 <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1448e:	4f4d      	ldr	r7, [pc, #308]	; (145c4 <nrfx_gpiote_input_configure+0x140>)
   14490:	f100 0808 	add.w	r8, r0, #8
   14494:	f837 5018 	ldrh.w	r5, [r7, r8, lsl #1]
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   14498:	07ab      	lsls	r3, r5, #30
   1449a:	d506      	bpl.n	144aa <nrfx_gpiote_input_configure+0x26>
   1449c:	f7ff ff84 	bl	143a8 <pin_in_use_by_te>
        if (pin_is_task_output(pin))
   144a0:	b118      	cbz	r0, 144aa <nrfx_gpiote_input_configure+0x26>
            return NRFX_ERROR_INVALID_PARAM;
   144a2:	4849      	ldr	r0, [pc, #292]	; (145c8 <nrfx_gpiote_input_configure+0x144>)
}
   144a4:	b002      	add	sp, #8
   144a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *p_pin = pin_number & 0x1F;
   144aa:	f004 001f 	and.w	r0, r4, #31
   144ae:	0080      	lsls	r0, r0, #2
   144b0:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   144b4:	7809      	ldrb	r1, [r1, #0]
    uint32_t cnf = reg->PIN_CNF[pin_number];
   144b6:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   144ba:	f025 0502 	bic.w	r5, r5, #2
    cnf &= ~to_update;
   144be:	f023 030f 	bic.w	r3, r3, #15
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   144c2:	f045 0501 	orr.w	r5, r5, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   144c6:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
   144ca:	f827 5018 	strh.w	r5, [r7, r8, lsl #1]
    reg->PIN_CNF[pin_number] = cnf;
   144ce:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
    if (p_trigger_config)
   144d2:	b192      	cbz	r2, 144fa <nrfx_gpiote_input_configure+0x76>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   144d4:	4b3b      	ldr	r3, [pc, #236]	; (145c4 <nrfx_gpiote_input_configure+0x140>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   144d6:	7815      	ldrb	r5, [r2, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   144d8:	6852      	ldr	r2, [r2, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   144da:	f104 0008 	add.w	r0, r4, #8
   144de:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
   144e2:	078f      	lsls	r7, r1, #30
   144e4:	d50c      	bpl.n	14500 <nrfx_gpiote_input_configure+0x7c>
            if (use_evt)
   144e6:	2a00      	cmp	r2, #0
   144e8:	d1db      	bne.n	144a2 <nrfx_gpiote_input_configure+0x1e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   144ea:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
   144ee:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   144f2:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
   144f6:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
   144fa:	bbce      	cbnz	r6, 14570 <nrfx_gpiote_input_configure+0xec>
    return NRFX_SUCCESS;
   144fc:	4833      	ldr	r0, [pc, #204]	; (145cc <nrfx_gpiote_input_configure+0x148>)
   144fe:	e7d1      	b.n	144a4 <nrfx_gpiote_input_configure+0x20>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   14500:	f021 0120 	bic.w	r1, r1, #32
   14504:	04c9      	lsls	r1, r1, #19
   14506:	0cc9      	lsrs	r1, r1, #19
   14508:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
   1450c:	2a00      	cmp	r2, #0
   1450e:	d0ec      	beq.n	144ea <nrfx_gpiote_input_configure+0x66>
                if (!edge)
   14510:	2d03      	cmp	r5, #3
   14512:	d8c6      	bhi.n	144a2 <nrfx_gpiote_input_configure+0x1e>
                uint8_t ch = *p_trigger_config->p_in_channel;
   14514:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   14516:	b92d      	cbnz	r5, 14524 <nrfx_gpiote_input_configure+0xa0>
   14518:	4a2d      	ldr	r2, [pc, #180]	; (145d0 <nrfx_gpiote_input_configure+0x14c>)
   1451a:	f507 71a2 	add.w	r1, r7, #324	; 0x144
   1451e:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
   14522:	e7e2      	b.n	144ea <nrfx_gpiote_input_configure+0x66>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   14524:	00ba      	lsls	r2, r7, #2
   14526:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1452a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1452e:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
   14532:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   14536:	f02c 0c03 	bic.w	ip, ip, #3
   1453a:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1453e:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   14542:	f42c 3c47 	bic.w	ip, ip, #203776	; 0x31c00
   14546:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
   1454a:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1454e:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   14552:	ea4f 2c04 	mov.w	ip, r4, lsl #8
   14556:	f40c 5cf8 	and.w	ip, ip, #7936	; 0x1f00
   1455a:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
   1455e:	ea4c 0c0e 	orr.w	ip, ip, lr
   14562:	f041 0120 	orr.w	r1, r1, #32
   14566:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
   1456a:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
   1456e:	e7bc      	b.n	144ea <nrfx_gpiote_input_configure+0x66>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   14570:	e9d6 7600 	ldrd	r7, r6, [r6]
    release_handler(pin);
   14574:	4620      	mov	r0, r4
   14576:	f7ff ff3f 	bl	143f8 <release_handler>
    if (!handler)
   1457a:	2f00      	cmp	r7, #0
   1457c:	d0be      	beq.n	144fc <nrfx_gpiote_input_configure+0x78>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1457e:	4d11      	ldr	r5, [pc, #68]	; (145c4 <nrfx_gpiote_input_configure+0x140>)
   14580:	682b      	ldr	r3, [r5, #0]
   14582:	429f      	cmp	r7, r3
   14584:	d104      	bne.n	14590 <nrfx_gpiote_input_configure+0x10c>
   14586:	686b      	ldr	r3, [r5, #4]
   14588:	429e      	cmp	r6, r3
   1458a:	d101      	bne.n	14590 <nrfx_gpiote_input_configure+0x10c>
   1458c:	2200      	movs	r2, #0
   1458e:	e009      	b.n	145a4 <nrfx_gpiote_input_configure+0x120>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   14590:	4810      	ldr	r0, [pc, #64]	; (145d4 <nrfx_gpiote_input_configure+0x150>)
   14592:	f10d 0107 	add.w	r1, sp, #7
   14596:	f7ff fdf7 	bl	14188 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   1459a:	4b0c      	ldr	r3, [pc, #48]	; (145cc <nrfx_gpiote_input_configure+0x148>)
   1459c:	4298      	cmp	r0, r3
   1459e:	d181      	bne.n	144a4 <nrfx_gpiote_input_configure+0x20>
        handler_id = (int32_t)id;
   145a0:	f89d 2007 	ldrb.w	r2, [sp, #7]
    m_cb.handlers[handler_id].handler = handler;
   145a4:	f845 7032 	str.w	r7, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   145a8:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   145ac:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   145ae:	605e      	str	r6, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   145b0:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   145b4:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   145b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   145bc:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
   145c0:	e79c      	b.n	144fc <nrfx_gpiote_input_configure+0x78>
   145c2:	bf00      	nop
   145c4:	20000910 	.word	0x20000910
   145c8:	0bad0004 	.word	0x0bad0004
   145cc:	0bad0000 	.word	0x0bad0000
   145d0:	40006000 	.word	0x40006000
   145d4:	20000964 	.word	0x20000964

000145d8 <nrfx_gpiote_output_configure>:
{
   145d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   145da:	4604      	mov	r4, r0
    if (p_config)
   145dc:	b371      	cbz	r1, 1463c <nrfx_gpiote_output_configure+0x64>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   145de:	4e37      	ldr	r6, [pc, #220]	; (146bc <nrfx_gpiote_output_configure+0xe4>)
   145e0:	f100 0708 	add.w	r7, r0, #8
   145e4:	f836 5017 	ldrh.w	r5, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   145e8:	07ab      	lsls	r3, r5, #30
   145ea:	d404      	bmi.n	145f6 <nrfx_gpiote_output_configure+0x1e>
   145ec:	f7ff fedc 	bl	143a8 <pin_in_use_by_te>
   145f0:	b108      	cbz	r0, 145f6 <nrfx_gpiote_output_configure+0x1e>
    return NRFX_SUCCESS;
   145f2:	4833      	ldr	r0, [pc, #204]	; (146c0 <nrfx_gpiote_output_configure+0xe8>)
}
   145f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   145f6:	f015 0f1c 	tst.w	r5, #28
   145fa:	784b      	ldrb	r3, [r1, #1]
   145fc:	d001      	beq.n	14602 <nrfx_gpiote_output_configure+0x2a>
   145fe:	2b01      	cmp	r3, #1
   14600:	d0f7      	beq.n	145f2 <nrfx_gpiote_output_configure+0x1a>
    *p_pin = pin_number & 0x1F;
   14602:	f004 001f 	and.w	r0, r4, #31
   14606:	0080      	lsls	r0, r0, #2
   14608:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   1460c:	f891 e000 	ldrb.w	lr, [r1]
    uint32_t cnf = reg->PIN_CNF[pin_number];
   14610:	f8d0 c700 	ldr.w	ip, [r0, #1792]	; 0x700
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   14614:	7889      	ldrb	r1, [r1, #2]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   14616:	005b      	lsls	r3, r3, #1
    cnf &= ~to_update;
   14618:	f42c 6ce1 	bic.w	ip, ip, #1800	; 0x708
   1461c:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
   14620:	f02c 0c07 	bic.w	ip, ip, #7
   14624:	ea43 030c 	orr.w	r3, r3, ip
   14628:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   1462c:	f045 0503 	orr.w	r5, r5, #3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   14630:	f043 0301 	orr.w	r3, r3, #1
   14634:	f826 5017 	strh.w	r5, [r6, r7, lsl #1]
    reg->PIN_CNF[pin_number] = cnf;
   14638:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
    if (p_task_config)
   1463c:	b90a      	cbnz	r2, 14642 <nrfx_gpiote_output_configure+0x6a>
    return NRFX_SUCCESS;
   1463e:	4821      	ldr	r0, [pc, #132]	; (146c4 <nrfx_gpiote_output_configure+0xec>)
   14640:	e7d8      	b.n	145f4 <nrfx_gpiote_output_configure+0x1c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   14642:	4e1e      	ldr	r6, [pc, #120]	; (146bc <nrfx_gpiote_output_configure+0xe4>)
   14644:	f104 0708 	add.w	r7, r4, #8
   14648:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   1464c:	0783      	lsls	r3, r0, #30
   1464e:	d5d0      	bpl.n	145f2 <nrfx_gpiote_output_configure+0x1a>
        uint32_t ch = p_task_config->task_ch;
   14650:	f892 c000 	ldrb.w	ip, [r2]
    p_reg->CONFIG[idx] = 0;
   14654:	4661      	mov	r1, ip
   14656:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   14658:	f020 0020 	bic.w	r0, r0, #32
   1465c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   14660:	04c0      	lsls	r0, r0, #19
   14662:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   14666:	0cc0      	lsrs	r0, r0, #19
   14668:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   1466c:	2300      	movs	r3, #0
   1466e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   14672:	7855      	ldrb	r5, [r2, #1]
   14674:	2d00      	cmp	r5, #0
   14676:	d0e2      	beq.n	1463e <nrfx_gpiote_output_configure+0x66>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   14678:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   1467c:	7892      	ldrb	r2, [r2, #2]
   1467e:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
   14682:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   14686:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1468a:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   1468e:	0223      	lsls	r3, r4, #8
   14690:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   14694:	042d      	lsls	r5, r5, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   14696:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1469a:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   1469e:	0512      	lsls	r2, r2, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   146a0:	432b      	orrs	r3, r5
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   146a2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   146a6:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   146aa:	4313      	orrs	r3, r2
   146ac:	f040 0020 	orr.w	r0, r0, #32
   146b0:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   146b4:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   146b8:	e7c1      	b.n	1463e <nrfx_gpiote_output_configure+0x66>
   146ba:	bf00      	nop
   146bc:	20000910 	.word	0x20000910
   146c0:	0bad0004 	.word	0x0bad0004
   146c4:	0bad0000 	.word	0x0bad0000

000146c8 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   146c8:	4b01      	ldr	r3, [pc, #4]	; (146d0 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   146ca:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   146ce:	4770      	bx	lr
   146d0:	20000910 	.word	0x20000910

000146d4 <nrfx_gpiote_channel_get>:
{
   146d4:	b508      	push	{r3, lr}
   146d6:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   146d8:	f7ff fe66 	bl	143a8 <pin_in_use_by_te>
   146dc:	b138      	cbz	r0, 146ee <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   146de:	4b05      	ldr	r3, [pc, #20]	; (146f4 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
   146e0:	4805      	ldr	r0, [pc, #20]	; (146f8 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   146e2:	3208      	adds	r2, #8
   146e4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   146e8:	0b5b      	lsrs	r3, r3, #13
   146ea:	700b      	strb	r3, [r1, #0]
}
   146ec:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   146ee:	4803      	ldr	r0, [pc, #12]	; (146fc <nrfx_gpiote_channel_get+0x28>)
   146f0:	e7fc      	b.n	146ec <nrfx_gpiote_channel_get+0x18>
   146f2:	bf00      	nop
   146f4:	20000910 	.word	0x20000910
   146f8:	0bad0000 	.word	0x0bad0000
   146fc:	0bad0004 	.word	0x0bad0004

00014700 <nrfx_gpiote_init>:
{
   14700:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   14702:	4c0f      	ldr	r4, [pc, #60]	; (14740 <nrfx_gpiote_init+0x40>)
   14704:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
   14708:	b9bd      	cbnz	r5, 1473a <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   1470a:	2240      	movs	r2, #64	; 0x40
   1470c:	4629      	mov	r1, r5
   1470e:	f104 0010 	add.w	r0, r4, #16
   14712:	f002 fdaa 	bl	1726a <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   14716:	2006      	movs	r0, #6
   14718:	f7ef faa0 	bl	3c5c <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1471c:	4b09      	ldr	r3, [pc, #36]	; (14744 <nrfx_gpiote_init+0x44>)
    return err_code;
   1471e:	480a      	ldr	r0, [pc, #40]	; (14748 <nrfx_gpiote_init+0x48>)
   14720:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   14724:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   14728:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1472c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   14730:	2301      	movs	r3, #1
   14732:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   14736:	6563      	str	r3, [r4, #84]	; 0x54
}
   14738:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   1473a:	4804      	ldr	r0, [pc, #16]	; (1474c <nrfx_gpiote_init+0x4c>)
   1473c:	e7fc      	b.n	14738 <nrfx_gpiote_init+0x38>
   1473e:	bf00      	nop
   14740:	20000910 	.word	0x20000910
   14744:	40006000 	.word	0x40006000
   14748:	0bad0000 	.word	0x0bad0000
   1474c:	0bad0005 	.word	0x0bad0005

00014750 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   14750:	4b03      	ldr	r3, [pc, #12]	; (14760 <nrfx_gpiote_is_init+0x10>)
   14752:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
   14756:	3800      	subs	r0, #0
   14758:	bf18      	it	ne
   1475a:	2001      	movne	r0, #1
   1475c:	4770      	bx	lr
   1475e:	bf00      	nop
   14760:	20000910 	.word	0x20000910

00014764 <nrfx_gpiote_channel_free>:
{
   14764:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   14766:	4801      	ldr	r0, [pc, #4]	; (1476c <nrfx_gpiote_channel_free+0x8>)
   14768:	f7ff bd34 	b.w	141d4 <nrfx_flag32_free>
   1476c:	20000960 	.word	0x20000960

00014770 <nrfx_gpiote_channel_alloc>:
{
   14770:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   14772:	4801      	ldr	r0, [pc, #4]	; (14778 <nrfx_gpiote_channel_alloc+0x8>)
   14774:	f7ff bd08 	b.w	14188 <nrfx_flag32_alloc>
   14778:	20000960 	.word	0x20000960

0001477c <nrfx_gpiote_trigger_enable>:
{
   1477c:	b510      	push	{r4, lr}
   1477e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   14780:	f7ff fe12 	bl	143a8 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   14784:	f102 0408 	add.w	r4, r2, #8
   14788:	4b1c      	ldr	r3, [pc, #112]	; (147fc <nrfx_gpiote_trigger_enable+0x80>)
   1478a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1478e:	b1e0      	cbz	r0, 147ca <nrfx_gpiote_trigger_enable+0x4e>
   14790:	f013 0402 	ands.w	r4, r3, #2
   14794:	d119      	bne.n	147ca <nrfx_gpiote_trigger_enable+0x4e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   14796:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   14798:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
   1479a:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
   1479e:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
   147a2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   147a6:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   147aa:	6004      	str	r4, [r0, #0]
   147ac:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   147ae:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   147b2:	f040 0001 	orr.w	r0, r0, #1
   147b6:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   147ba:	b129      	cbz	r1, 147c8 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   147bc:	2201      	movs	r2, #1
   147be:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   147c2:	4a0f      	ldr	r2, [pc, #60]	; (14800 <nrfx_gpiote_trigger_enable+0x84>)
   147c4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   147c8:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   147ca:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   147ce:	2b04      	cmp	r3, #4
   147d0:	d010      	beq.n	147f4 <nrfx_gpiote_trigger_enable+0x78>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   147d2:	2b05      	cmp	r3, #5
   147d4:	d010      	beq.n	147f8 <nrfx_gpiote_trigger_enable+0x7c>
    return p_reg->IN;
   147d6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   147da:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    *p_pin = pin_number & 0x1F;
   147de:	f002 031f 	and.w	r3, r2, #31
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   147e2:	40d9      	lsrs	r1, r3
   147e4:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   147e8:	3102      	adds	r1, #2
}
   147ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   147ee:	4610      	mov	r0, r2
   147f0:	f009 bca3 	b.w	1e13a <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   147f4:	2103      	movs	r1, #3
   147f6:	e7f8      	b.n	147ea <nrfx_gpiote_trigger_enable+0x6e>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   147f8:	2102      	movs	r1, #2
   147fa:	e7f6      	b.n	147ea <nrfx_gpiote_trigger_enable+0x6e>
   147fc:	20000910 	.word	0x20000910
   14800:	40006000 	.word	0x40006000

00014804 <nrfx_gpiote_trigger_disable>:
{
   14804:	b508      	push	{r3, lr}
   14806:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   14808:	f7ff fdce 	bl	143a8 <pin_in_use_by_te>
   1480c:	b1c0      	cbz	r0, 14840 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1480e:	f102 0108 	add.w	r1, r2, #8
   14812:	4b0e      	ldr	r3, [pc, #56]	; (1484c <nrfx_gpiote_trigger_disable+0x48>)
   14814:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   14818:	0799      	lsls	r1, r3, #30
   1481a:	d411      	bmi.n	14840 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1481c:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   1481e:	2201      	movs	r2, #1
   14820:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   14822:	009b      	lsls	r3, r3, #2
   14824:	490a      	ldr	r1, [pc, #40]	; (14850 <nrfx_gpiote_trigger_disable+0x4c>)
   14826:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1482a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1482e:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   14832:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   14836:	f022 0203 	bic.w	r2, r2, #3
   1483a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   1483e:	bd08      	pop	{r3, pc}
   14840:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   14844:	2100      	movs	r1, #0
   14846:	4610      	mov	r0, r2
   14848:	f009 bc77 	b.w	1e13a <nrf_gpio_cfg_sense_set>
   1484c:	20000910 	.word	0x20000910
   14850:	40006000 	.word	0x40006000

00014854 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   14854:	4b0d      	ldr	r3, [pc, #52]	; (1488c <nrfx_gpiote_pin_uninit+0x38>)
   14856:	f100 0208 	add.w	r2, r0, #8
{
   1485a:	b510      	push	{r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1485c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   14860:	07db      	lsls	r3, r3, #31
{
   14862:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   14864:	d50f      	bpl.n	14886 <nrfx_gpiote_pin_uninit+0x32>
    nrfx_gpiote_trigger_disable(pin);
   14866:	f7ff ffcd 	bl	14804 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   1486a:	4620      	mov	r0, r4
    *p_pin = pin_number & 0x1F;
   1486c:	f004 041f 	and.w	r4, r4, #31
   14870:	f7ff fdec 	bl	1444c <pin_handler_trigger_uninit>
    reg->PIN_CNF[pin_number] = cnf;
   14874:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
   14878:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1487c:	2202      	movs	r2, #2
   1487e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   14882:	4803      	ldr	r0, [pc, #12]	; (14890 <nrfx_gpiote_pin_uninit+0x3c>)
}
   14884:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   14886:	4803      	ldr	r0, [pc, #12]	; (14894 <nrfx_gpiote_pin_uninit+0x40>)
   14888:	e7fc      	b.n	14884 <nrfx_gpiote_pin_uninit+0x30>
   1488a:	bf00      	nop
   1488c:	20000910 	.word	0x20000910
   14890:	0bad0000 	.word	0x0bad0000
   14894:	0bad0004 	.word	0x0bad0004

00014898 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   14898:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1489c:	4b4e      	ldr	r3, [pc, #312]	; (149d8 <nrfx_gpiote_irq_handler+0x140>)
    return p_reg->INTENSET & mask;
   1489e:	484f      	ldr	r0, [pc, #316]	; (149dc <nrfx_gpiote_irq_handler+0x144>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   148a0:	494f      	ldr	r1, [pc, #316]	; (149e0 <nrfx_gpiote_irq_handler+0x148>)
    uint32_t status = 0;
   148a2:	2500      	movs	r5, #0
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   148a4:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   148a6:	462c      	mov	r4, r5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   148a8:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   148aa:	b136      	cbz	r6, 148ba <nrfx_gpiote_irq_handler+0x22>
    return p_reg->INTENSET & mask;
   148ac:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
   148b0:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   148b2:	bf1e      	ittt	ne
   148b4:	601c      	strne	r4, [r3, #0]
   148b6:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   148b8:	4315      	orrne	r5, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   148ba:	3304      	adds	r3, #4
   148bc:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   148be:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   148c2:	d1f1      	bne.n	148a8 <nrfx_gpiote_irq_handler+0x10>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   148c4:	4b45      	ldr	r3, [pc, #276]	; (149dc <nrfx_gpiote_irq_handler+0x144>)
   148c6:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   148ca:	b1bb      	cbz	r3, 148fc <nrfx_gpiote_irq_handler+0x64>
        *p_masks = gpio_regs[i]->LATCH;
   148cc:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
   148d0:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
   148d4:	9301      	str	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
   148d6:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   148da:	af01      	add	r7, sp, #4
   148dc:	f04f 0801 	mov.w	r8, #1
            while (latch[i])
   148e0:	9c01      	ldr	r4, [sp, #4]
   148e2:	b96c      	cbnz	r4, 14900 <nrfx_gpiote_irq_handler+0x68>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   148e4:	4b3d      	ldr	r3, [pc, #244]	; (149dc <nrfx_gpiote_irq_handler+0x144>)
   148e6:	f8c3 417c 	str.w	r4, [r3, #380]	; 0x17c
   148ea:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   148ee:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
   148f2:	9301      	str	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
   148f4:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
        if (latch[port_idx])
   148f8:	2b00      	cmp	r3, #0
   148fa:	d1ee      	bne.n	148da <nrfx_gpiote_irq_handler+0x42>
        mask &= ~NRFX_BIT(ch);
   148fc:	2401      	movs	r4, #1
   148fe:	e066      	b.n	149ce <nrfx_gpiote_irq_handler+0x136>
                uint32_t pin = NRF_CTZ(latch[i]);
   14900:	fa94 f4a4 	rbit	r4, r4
   14904:	fab4 f484 	clz	r4, r4
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   14908:	4a36      	ldr	r2, [pc, #216]	; (149e4 <nrfx_gpiote_irq_handler+0x14c>)
   1490a:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   1490e:	08e0      	lsrs	r0, r4, #3
   14910:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    bit = BITMASK_RELBIT_GET(bit);
   14914:	f004 0307 	and.w	r3, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   14918:	fa08 f203 	lsl.w	r2, r8, r3
   1491c:	5c3b      	ldrb	r3, [r7, r0]
   1491e:	ea23 0302 	bic.w	r3, r3, r2
   14922:	543b      	strb	r3, [r7, r0]
   14924:	00a3      	lsls	r3, r4, #2
   14926:	f103 49a0 	add.w	r9, r3, #1342177280	; 0x50000000
   1492a:	f3c1 0a82 	ubfx	sl, r1, #2, #3
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1492e:	f8d9 2700 	ldr.w	r2, [r9, #1792]	; 0x700
    if (is_level(trigger))
   14932:	06cb      	lsls	r3, r1, #27
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   14934:	46d3      	mov	fp, sl
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   14936:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
   1493a:	d518      	bpl.n	1496e <nrfx_gpiote_irq_handler+0xd6>
        call_handler(pin, trigger);
   1493c:	4659      	mov	r1, fp
   1493e:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   14940:	fa5f fa82 	uxtb.w	sl, r2
   14944:	f7ff fd3a 	bl	143bc <call_handler>
   14948:	f8d9 3700 	ldr.w	r3, [r9, #1792]	; 0x700
        if (nrf_gpio_pin_sense_get(pin) == sense)
   1494c:	f3c3 4301 	ubfx	r3, r3, #16, #2
   14950:	459a      	cmp	sl, r3
   14952:	d107      	bne.n	14964 <nrfx_gpiote_irq_handler+0xcc>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   14954:	2100      	movs	r1, #0
   14956:	4620      	mov	r0, r4
   14958:	f009 fbef 	bl	1e13a <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   1495c:	4651      	mov	r1, sl
   1495e:	4620      	mov	r0, r4
   14960:	f009 fbeb 	bl	1e13a <nrf_gpio_cfg_sense_set>
    reg->LATCH = (1 << pin_number);
   14964:	fa08 f404 	lsl.w	r4, r8, r4
   14968:	f8c6 4520 	str.w	r4, [r6, #1312]	; 0x520
}
   1496c:	e7b8      	b.n	148e0 <nrfx_gpiote_irq_handler+0x48>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1496e:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
   14970:	bf0c      	ite	eq
   14972:	2103      	moveq	r1, #3
   14974:	2102      	movne	r1, #2
   14976:	4620      	mov	r0, r4
   14978:	f009 fbdf 	bl	1e13a <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1497c:	f1ba 0f03 	cmp.w	sl, #3
   14980:	d004      	beq.n	1498c <nrfx_gpiote_irq_handler+0xf4>
   14982:	2a02      	cmp	r2, #2
   14984:	d107      	bne.n	14996 <nrfx_gpiote_irq_handler+0xfe>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   14986:	f1ba 0f01 	cmp.w	sl, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   1498a:	d1eb      	bne.n	14964 <nrfx_gpiote_irq_handler+0xcc>
            call_handler(pin, trigger);
   1498c:	4659      	mov	r1, fp
   1498e:	4620      	mov	r0, r4
   14990:	f7ff fd14 	bl	143bc <call_handler>
   14994:	e7e6      	b.n	14964 <nrfx_gpiote_irq_handler+0xcc>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   14996:	2a03      	cmp	r2, #3
   14998:	d1e4      	bne.n	14964 <nrfx_gpiote_irq_handler+0xcc>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   1499a:	f1ba 0f02 	cmp.w	sl, #2
   1499e:	e7f4      	b.n	1498a <nrfx_gpiote_irq_handler+0xf2>
        uint32_t ch = NRF_CTZ(mask);
   149a0:	fa95 f3a5 	rbit	r3, r5
   149a4:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   149a8:	fa04 f203 	lsl.w	r2, r4, r3
   149ac:	009b      	lsls	r3, r3, #2
   149ae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   149b2:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   149b6:	ea25 0502 	bic.w	r5, r5, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   149ba:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   149be:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   149c2:	f3c0 2004 	ubfx	r0, r0, #8, #5
   149c6:	f3c1 4101 	ubfx	r1, r1, #16, #2
   149ca:	f7ff fcf7 	bl	143bc <call_handler>
    while (mask)
   149ce:	2d00      	cmp	r5, #0
   149d0:	d1e6      	bne.n	149a0 <nrfx_gpiote_irq_handler+0x108>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   149d2:	b003      	add	sp, #12
   149d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   149d8:	40006100 	.word	0x40006100
   149dc:	40006000 	.word	0x40006000
   149e0:	40006120 	.word	0x40006120
   149e4:	20000910 	.word	0x20000910

000149e8 <nvmc_word_write>:
   149e8:	4a04      	ldr	r2, [pc, #16]	; (149fc <nvmc_word_write+0x14>)
   149ea:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   149ee:	07db      	lsls	r3, r3, #31
   149f0:	d5fb      	bpl.n	149ea <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
   149f2:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   149f4:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   149f8:	4770      	bx	lr
   149fa:	bf00      	nop
   149fc:	4001e000 	.word	0x4001e000

00014a00 <nrfx_nvmc_page_erase>:
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
   14a00:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   14a04:	691a      	ldr	r2, [r3, #16]
    return !(addr % flash_page_size_get());
   14a06:	fbb0 f3f2 	udiv	r3, r0, r2
   14a0a:	fb02 0313 	mls	r3, r2, r3, r0

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
   14a0e:	b973      	cbnz	r3, 14a2e <nrfx_nvmc_page_erase+0x2e>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
   14a10:	4b08      	ldr	r3, [pc, #32]	; (14a34 <nrfx_nvmc_page_erase+0x34>)
   14a12:	2202      	movs	r2, #2
   14a14:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
   14a18:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   14a1c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   14a20:	07d2      	lsls	r2, r2, #31
   14a22:	d5fb      	bpl.n	14a1c <nrfx_nvmc_page_erase+0x1c>
    p_reg->CONFIG = (uint32_t)mode;
   14a24:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   14a26:	4804      	ldr	r0, [pc, #16]	; (14a38 <nrfx_nvmc_page_erase+0x38>)
   14a28:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   14a2c:	4770      	bx	lr
        return NRFX_ERROR_INVALID_ADDR;
   14a2e:	4803      	ldr	r0, [pc, #12]	; (14a3c <nrfx_nvmc_page_erase+0x3c>)
}
   14a30:	4770      	bx	lr
   14a32:	bf00      	nop
   14a34:	4001e000 	.word	0x4001e000
   14a38:	0bad0000 	.word	0x0bad0000
   14a3c:	0bad000a 	.word	0x0bad000a

00014a40 <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   14a40:	b510      	push	{r4, lr}
   14a42:	4c05      	ldr	r4, [pc, #20]	; (14a58 <nrfx_nvmc_word_write+0x18>)
   14a44:	2301      	movs	r3, #1
   14a46:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   14a4a:	f7ff ffcd 	bl	149e8 <nvmc_word_write>
   14a4e:	2300      	movs	r3, #0
   14a50:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504

    nvmc_readonly_mode_set();
}
   14a54:	bd10      	pop	{r4, pc}
   14a56:	bf00      	nop
   14a58:	4001e000 	.word	0x4001e000

00014a5c <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   14a5c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   14a5e:	4801      	ldr	r0, [pc, #4]	; (14a64 <nrfx_ppi_channel_alloc+0x8>)
   14a60:	f7ff bb92 	b.w	14188 <nrfx_flag32_alloc>
   14a64:	2000096c 	.word	0x2000096c

00014a68 <twim_irq_handler>:
{
    return nrf_twim_event_address_get(p_instance->p_twim, NRF_TWIM_EVENT_STOPPED);
}

static void twim_irq_handler(NRF_TWIM_Type * p_twim, twim_control_block_t * p_cb)
{
   14a68:	b5f0      	push	{r4, r5, r6, r7, lr}
}

NRF_STATIC_INLINE bool nrf_twim_event_check(NRF_TWIM_Type const * p_reg,
                                            nrf_twim_event_t      event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14a6a:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
   14a6e:	b087      	sub	sp, #28
   14a70:	4604      	mov	r4, r0
   14a72:	460d      	mov	r5, r1
    }
#endif

    NRFX_ASSERT(p_cb->handler);

    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   14a74:	b1f3      	cbz	r3, 14ab4 <twim_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14a76:	2300      	movs	r3, #0
   14a78:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
   14a7c:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14a80:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    {
        nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_ERROR);
        NRFX_LOG_DEBUG("TWIM: Event: %s.", EVT_TO_STR_TWIM(NRF_TWIM_EVENT_ERROR));
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   14a84:	b9b3      	cbnz	r3, 14ab4 <twim_irq_handler+0x4c>
        {
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
   14a86:	688b      	ldr	r3, [r1, #8]
}

NRF_STATIC_INLINE void nrf_twim_int_disable(NRF_TWIM_Type * p_reg,
                                            uint32_t mask)
{
    p_reg->INTENCLR = mask;
   14a88:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   14a8c:	2302      	movs	r3, #2
   14a8e:	608b      	str	r3, [r1, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   14a90:	688b      	ldr	r3, [r1, #8]
    p_reg->INTENSET = mask;
   14a92:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14a96:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160

            if (!(nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_LASTTX) &&
   14a9a:	b11b      	cbz	r3, 14aa4 <twim_irq_handler+0x3c>
    p_reg->SHORTS = mask;
}

NRF_STATIC_INLINE uint32_t nrf_twim_shorts_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->SHORTS;
   14a9c:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   14aa0:	059f      	lsls	r7, r3, #22
   14aa2:	d402      	bmi.n	14aaa <twim_irq_handler+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14aa4:	2301      	movs	r3, #1
   14aa6:	6223      	str	r3, [r4, #32]
   14aa8:	6163      	str	r3, [r4, #20]
            {
                nrf_twim_task_trigger(p_twim, NRF_TWIM_TASK_RESUME);
                nrf_twim_task_trigger(p_twim, NRF_TWIM_TASK_STOP);
            }

            p_cb->error = true;
   14aaa:	2301      	movs	r3, #1
   14aac:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e

    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
    {
        p_cb->handler(&event, p_cb->p_context);
    }
}
   14ab0:	b007      	add	sp, #28
   14ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14ab4:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   14ab8:	2b00      	cmp	r3, #0
   14aba:	d044      	beq.n	14b46 <twim_irq_handler+0xde>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14abc:	2300      	movs	r3, #0
   14abe:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   14ac2:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) && !p_cb->error)
   14ac6:	6a2b      	ldr	r3, [r5, #32]
   14ac8:	065e      	lsls	r6, r3, #25
   14aca:	d40a      	bmi.n	14ae2 <twim_irq_handler+0x7a>
   14acc:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   14ad0:	b93b      	cbnz	r3, 14ae2 <twim_irq_handler+0x7a>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
   14ad2:	4629      	mov	r1, r5
   14ad4:	4620      	mov	r0, r4
   14ad6:	f009 fb4c 	bl	1e172 <xfer_completeness_check>
   14ada:	f080 0001 	eor.w	r0, r0, #1
   14ade:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
   14ae2:	6a2b      	ldr	r3, [r5, #32]
   14ae4:	f013 0c04 	ands.w	ip, r3, #4
   14ae8:	d13e      	bne.n	14b68 <twim_irq_handler+0x100>
            event.xfer_desc = p_cb->xfer_desc;
   14aea:	f105 070c 	add.w	r7, r5, #12
   14aee:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   14af0:	ae01      	add	r6, sp, #4
   14af2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
            if (!p_cb->repeated || p_cb->error)
   14af4:	f895 e030 	ldrb.w	lr, [r5, #48]	; 0x30
            event.xfer_desc = p_cb->xfer_desc;
   14af8:	683b      	ldr	r3, [r7, #0]
   14afa:	f8c4 c160 	str.w	ip, [r4, #352]	; 0x160
   14afe:	6033      	str	r3, [r6, #0]
   14b00:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
   14b04:	f8c4 c15c 	str.w	ip, [r4, #348]	; 0x15c
   14b08:	f8d4 315c 	ldr.w	r3, [r4, #348]	; 0x15c
            if (!p_cb->repeated || p_cb->error)
   14b0c:	f1be 0f00 	cmp.w	lr, #0
   14b10:	d002      	beq.n	14b18 <twim_irq_handler+0xb0>
   14b12:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   14b16:	b33b      	cbz	r3, 14b68 <twim_irq_handler+0x100>
    p_reg->SHORTS = mask;
   14b18:	2300      	movs	r3, #0
   14b1a:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
                p_cb->int_mask = 0;
   14b1e:	60ab      	str	r3, [r5, #8]
    p_reg->INTENCLR = mask;
   14b20:	4b2e      	ldr	r3, [pc, #184]	; (14bdc <twim_irq_handler+0x174>)
   14b22:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   14b26:	f344 3307 	sbfx	r3, r4, #12, #8
  if ((int32_t)(IRQn) >= 0)
   14b2a:	2b00      	cmp	r3, #0
   14b2c:	ea4f 3214 	mov.w	r2, r4, lsr #12
   14b30:	db1a      	blt.n	14b68 <twim_irq_handler+0x100>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   14b32:	f002 011f 	and.w	r1, r2, #31
   14b36:	095b      	lsrs	r3, r3, #5
   14b38:	2201      	movs	r2, #1
   14b3a:	408a      	lsls	r2, r1
   14b3c:	3360      	adds	r3, #96	; 0x60
   14b3e:	4928      	ldr	r1, [pc, #160]	; (14be0 <twim_irq_handler+0x178>)
   14b40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14b44:	e010      	b.n	14b68 <twim_irq_handler+0x100>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14b46:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   14b4a:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
   14b4e:	7b2b      	ldrb	r3, [r5, #12]
   14b50:	bb23      	cbnz	r3, 14b9c <twim_irq_handler+0x134>
            event.xfer_desc = p_cb->xfer_desc;
   14b52:	f105 070c 	add.w	r7, r5, #12
   14b56:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   14b58:	ae01      	add	r6, sp, #4
   14b5a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   14b5c:	683b      	ldr	r3, [r7, #0]
   14b5e:	6033      	str	r3, [r6, #0]
            if (!p_cb->repeated)
   14b60:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   14b64:	2b00      	cmp	r3, #0
   14b66:	d0d8      	beq.n	14b1a <twim_irq_handler+0xb2>
    uint32_t error_source = p_reg->ERRORSRC;
   14b68:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   14b6c:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
   14b70:	0798      	lsls	r0, r3, #30
   14b72:	d525      	bpl.n	14bc0 <twim_irq_handler+0x158>
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
   14b74:	2301      	movs	r3, #1
        event.type = NRFX_TWIM_EVT_DONE;
   14b76:	f88d 3000 	strb.w	r3, [sp]
    if (!p_cb->repeated)
   14b7a:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   14b7e:	b90b      	cbnz	r3, 14b84 <twim_irq_handler+0x11c>
        p_cb->busy = false;
   14b80:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
   14b84:	6a2b      	ldr	r3, [r5, #32]
   14b86:	075b      	lsls	r3, r3, #29
   14b88:	d503      	bpl.n	14b92 <twim_irq_handler+0x12a>
   14b8a:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   14b8e:	2b00      	cmp	r3, #0
   14b90:	d08e      	beq.n	14ab0 <twim_irq_handler+0x48>
        p_cb->handler(&event, p_cb->p_context);
   14b92:	e9d5 3100 	ldrd	r3, r1, [r5]
   14b96:	4668      	mov	r0, sp
   14b98:	4798      	blx	r3
   14b9a:	e789      	b.n	14ab0 <twim_irq_handler+0x48>
    p_reg->SHORTS = mask;
   14b9c:	f44f 7300 	mov.w	r3, #512	; 0x200
   14ba0:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
   14ba4:	f240 2302 	movw	r3, #514	; 0x202
   14ba8:	60ab      	str	r3, [r5, #8]
    p_reg->INTENCLR = mask;
   14baa:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
   14bae:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   14bb2:	68ab      	ldr	r3, [r5, #8]
    p_reg->INTENSET = mask;
   14bb4:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14bb8:	2301      	movs	r3, #1
   14bba:	60a3      	str	r3, [r4, #8]
   14bbc:	6223      	str	r3, [r4, #32]
            return;
   14bbe:	e777      	b.n	14ab0 <twim_irq_handler+0x48>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
   14bc0:	0759      	lsls	r1, r3, #29
   14bc2:	d501      	bpl.n	14bc8 <twim_irq_handler+0x160>
        event.type = NRFX_TWIM_EVT_DATA_NACK;
   14bc4:	2302      	movs	r3, #2
   14bc6:	e7d6      	b.n	14b76 <twim_irq_handler+0x10e>
    else if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
   14bc8:	07da      	lsls	r2, r3, #31
   14bca:	d501      	bpl.n	14bd0 <twim_irq_handler+0x168>
        event.type = NRFX_TWIM_EVT_OVERRUN;
   14bcc:	2303      	movs	r3, #3
   14bce:	e7d2      	b.n	14b76 <twim_irq_handler+0x10e>
    else if (p_cb->error)
   14bd0:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   14bd4:	2b00      	cmp	r3, #0
   14bd6:	d0ce      	beq.n	14b76 <twim_irq_handler+0x10e>
        event.type = NRFX_TWIM_EVT_BUS_ERROR;
   14bd8:	2304      	movs	r3, #4
   14bda:	e7cc      	b.n	14b76 <twim_irq_handler+0x10e>
   14bdc:	019c0202 	.word	0x019c0202
   14be0:	e000e100 	.word	0xe000e100

00014be4 <nrfx_twim_init>:
{
   14be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   14be6:	7906      	ldrb	r6, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   14be8:	4d23      	ldr	r5, [pc, #140]	; (14c78 <nrfx_twim_init+0x94>)
   14bea:	f04f 0c34 	mov.w	ip, #52	; 0x34
   14bee:	fb0c fc06 	mul.w	ip, ip, r6
   14bf2:	eb05 040c 	add.w	r4, r5, ip
   14bf6:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
   14bfa:	2f00      	cmp	r7, #0
   14bfc:	d13a      	bne.n	14c74 <nrfx_twim_init+0x90>
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   14bfe:	6800      	ldr	r0, [r0, #0]
    p_cb->p_context       = p_context;
   14c00:	6063      	str	r3, [r4, #4]
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   14c02:	7b4b      	ldrb	r3, [r1, #13]
   14c04:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
   14c08:	7b8b      	ldrb	r3, [r1, #14]
    p_cb->int_mask        = 0;
   14c0a:	60a7      	str	r7, [r4, #8]
    p_cb->repeated        = false;
   14c0c:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
    p_cb->busy            = false;
   14c10:	f884 702f 	strb.w	r7, [r4, #47]	; 0x2f
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
   14c14:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    p_cb->handler         = event_handler;
   14c18:	f845 200c 	str.w	r2, [r5, ip]
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
   14c1c:	7bcc      	ldrb	r4, [r1, #15]
   14c1e:	b1b3      	cbz	r3, 14c4e <nrfx_twim_init+0x6a>
   14c20:	b92c      	cbnz	r4, 14c2e <nrfx_twim_init+0x4a>
        nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
   14c22:	e9d1 4300 	ldrd	r4, r3, [r1]
    p_reg->PSEL.SCL = scl_pin;
   14c26:	f8c0 4508 	str.w	r4, [r0, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
   14c2a:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
    nrf_twim_frequency_set(p_twim, (nrf_twim_frequency_t)p_config->frequency);
   14c2e:	688b      	ldr	r3, [r1, #8]
    p_reg->FREQUENCY = frequency;
   14c30:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
    if (p_cb->handler)
   14c34:	b11a      	cbz	r2, 14c3e <nrfx_twim_init+0x5a>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
   14c36:	f340 3007 	sbfx	r0, r0, #12, #8
   14c3a:	f7ef f80f 	bl	3c5c <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   14c3e:	2334      	movs	r3, #52	; 0x34
   14c40:	fb03 5506 	mla	r5, r3, r6, r5
    return err_code;
   14c44:	480d      	ldr	r0, [pc, #52]	; (14c7c <nrfx_twim_init+0x98>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   14c46:	2301      	movs	r3, #1
   14c48:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
   14c4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    *p_pin = pin_number & 0x1F;
   14c4e:	680b      	ldr	r3, [r1, #0]
   14c50:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
   14c54:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
   14c58:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   14c5c:	f240 6c0c 	movw	ip, #1548	; 0x60c
   14c60:	f847 c023 	str.w	ip, [r7, r3, lsl #2]
    *p_pin = pin_number & 0x1F;
   14c64:	684b      	ldr	r3, [r1, #4]
   14c66:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
   14c6a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   14c6e:	f847 c023 	str.w	ip, [r7, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
   14c72:	e7d5      	b.n	14c20 <nrfx_twim_init+0x3c>
        return err_code;
   14c74:	4802      	ldr	r0, [pc, #8]	; (14c80 <nrfx_twim_init+0x9c>)
   14c76:	e7e9      	b.n	14c4c <nrfx_twim_init+0x68>
   14c78:	200029ac 	.word	0x200029ac
   14c7c:	0bad0000 	.word	0x0bad0000
   14c80:	0bad0005 	.word	0x0bad0005

00014c84 <nrfx_twim_enable>:
    nrf_twim_enable(p_instance->p_twim);
   14c84:	6803      	ldr	r3, [r0, #0]
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   14c86:	7902      	ldrb	r2, [r0, #4]
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   14c88:	2106      	movs	r1, #6
   14c8a:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   14c8e:	4b04      	ldr	r3, [pc, #16]	; (14ca0 <nrfx_twim_enable+0x1c>)
   14c90:	2134      	movs	r1, #52	; 0x34
   14c92:	fb01 3302 	mla	r3, r1, r2, r3
   14c96:	2202      	movs	r2, #2
   14c98:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
   14c9c:	4770      	bx	lr
   14c9e:	bf00      	nop
   14ca0:	200029ac 	.word	0x200029ac

00014ca4 <nrfx_twim_disable>:
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   14ca4:	7901      	ldrb	r1, [r0, #4]
    p_cb->int_mask = 0;
   14ca6:	4b0c      	ldr	r3, [pc, #48]	; (14cd8 <nrfx_twim_disable+0x34>)
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   14ca8:	6802      	ldr	r2, [r0, #0]
    p_cb->int_mask = 0;
   14caa:	2034      	movs	r0, #52	; 0x34
   14cac:	fb00 3301 	mla	r3, r0, r1, r3
   14cb0:	2100      	movs	r1, #0
    p_reg->INTENCLR = mask;
   14cb2:	480a      	ldr	r0, [pc, #40]	; (14cdc <nrfx_twim_disable+0x38>)
   14cb4:	6099      	str	r1, [r3, #8]
   14cb6:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
   14cba:	f8d2 0200 	ldr.w	r0, [r2, #512]	; 0x200
   14cbe:	f420 50bc 	bic.w	r0, r0, #6016	; 0x1780
   14cc2:	f8c2 0200 	str.w	r0, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   14cc6:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   14cca:	2201      	movs	r2, #1
   14ccc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    p_cb->busy = false;
   14cd0:	f883 102f 	strb.w	r1, [r3, #47]	; 0x2f
}
   14cd4:	4770      	bx	lr
   14cd6:	bf00      	nop
   14cd8:	200029ac 	.word	0x200029ac
   14cdc:	019c0202 	.word	0x019c0202

00014ce0 <nrfx_twim_uninit>:
{
   14ce0:	b570      	push	{r4, r5, r6, lr}
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   14ce2:	7906      	ldrb	r6, [r0, #4]
    if (p_cb->handler)
   14ce4:	4d18      	ldr	r5, [pc, #96]	; (14d48 <nrfx_twim_uninit+0x68>)
   14ce6:	2334      	movs	r3, #52	; 0x34
   14ce8:	4373      	muls	r3, r6
{
   14cea:	4604      	mov	r4, r0
    if (p_cb->handler)
   14cec:	58eb      	ldr	r3, [r5, r3]
   14cee:	b123      	cbz	r3, 14cfa <nrfx_twim_uninit+0x1a>
   14cf0:	6800      	ldr	r0, [r0, #0]
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_twim));
   14cf2:	f340 3007 	sbfx	r0, r0, #12, #8
   14cf6:	f7ee ffc1 	bl	3c7c <arch_irq_disable>
    nrfx_twim_disable(p_instance);
   14cfa:	4620      	mov	r0, r4
   14cfc:	f7ff ffd2 	bl	14ca4 <nrfx_twim_disable>
    if (!p_cb->skip_gpio_cfg && !p_cb->hold_bus_uninit)
   14d00:	2334      	movs	r3, #52	; 0x34
   14d02:	fb03 5306 	mla	r3, r3, r6, r5
   14d06:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
   14d0a:	b9b2      	cbnz	r2, 14d3a <nrfx_twim_uninit+0x5a>
   14d0c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
   14d10:	b99b      	cbnz	r3, 14d3a <nrfx_twim_uninit+0x5a>
        nrf_gpio_cfg_default(nrf_twim_scl_pin_get(p_instance->p_twim));
   14d12:	6820      	ldr	r0, [r4, #0]
    return p_reg->PSEL.SCL;
   14d14:	f8d0 3508 	ldr.w	r3, [r0, #1288]	; 0x508
    *p_pin = pin_number & 0x1F;
   14d18:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
   14d1c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   14d20:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   14d24:	2102      	movs	r1, #2
   14d26:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    return p_reg->PSEL.SDA;
   14d2a:	f8d0 350c 	ldr.w	r3, [r0, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
   14d2e:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
   14d32:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   14d36:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
   14d3a:	2334      	movs	r3, #52	; 0x34
   14d3c:	fb03 5506 	mla	r5, r3, r6, r5
   14d40:	2300      	movs	r3, #0
   14d42:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
   14d46:	bd70      	pop	{r4, r5, r6, pc}
   14d48:	200029ac 	.word	0x200029ac

00014d4c <nrfx_twim_xfer>:
{
   14d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    p_cb->error = false;
   14d50:	f8df c2d0 	ldr.w	ip, [pc, #720]	; 15024 <nrfx_twim_xfer+0x2d8>
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   14d54:	f890 e004 	ldrb.w	lr, [r0, #4]
    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
   14d58:	6804      	ldr	r4, [r0, #0]
    p_cb->error = false;
   14d5a:	2334      	movs	r3, #52	; 0x34
   14d5c:	fb03 c30e 	mla	r3, r3, lr, ip
{
   14d60:	4617      	mov	r7, r2
    p_cb->error = false;
   14d62:	2200      	movs	r2, #0
   14d64:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
   14d68:	684b      	ldr	r3, [r1, #4]
{
   14d6a:	460d      	mov	r5, r1
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
   14d6c:	b14b      	cbz	r3, 14d82 <nrfx_twim_xfer+0x36>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   14d6e:	68cb      	ldr	r3, [r1, #12]
   14d70:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
   14d74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   14d78:	d003      	beq.n	14d82 <nrfx_twim_xfer+0x36>
        return err_code;
   14d7a:	4eab      	ldr	r6, [pc, #684]	; (15028 <nrfx_twim_xfer+0x2dc>)
}
   14d7c:	4630      	mov	r0, r6
   14d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (p_cb->busy)
   14d82:	2634      	movs	r6, #52	; 0x34
    p_reg->INTENCLR = mask;
   14d84:	4ba9      	ldr	r3, [pc, #676]	; (1502c <nrfx_twim_xfer+0x2e0>)
   14d86:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
   14d8a:	fb06 c60e 	mla	r6, r6, lr, ip
   14d8e:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
   14d92:	f003 0aff 	and.w	sl, r3, #255	; 0xff
   14d96:	b123      	cbz	r3, 14da2 <nrfx_twim_xfer+0x56>
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   14d98:	68b3      	ldr	r3, [r6, #8]
    p_reg->INTENSET = mask;
   14d9a:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
        return err_code;
   14d9e:	4ea4      	ldr	r6, [pc, #656]	; (15030 <nrfx_twim_xfer+0x2e4>)
   14da0:	e7ec      	b.n	14d7c <nrfx_twim_xfer+0x30>
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
   14da2:	f017 0f14 	tst.w	r7, #20
   14da6:	bf0c      	ite	eq
   14da8:	2301      	moveq	r3, #1
   14daa:	2300      	movne	r3, #0
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
   14dac:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
    p_cb->xfer_desc = *p_xfer_desc;
   14db0:	46a9      	mov	r9, r5
   14db2:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
   14db6:	f106 080c 	add.w	r8, r6, #12
   14dba:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
   14dbe:	f8d9 3000 	ldr.w	r3, [r9]
   14dc2:	f8c8 3000 	str.w	r3, [r8]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
   14dc6:	f3c7 1300 	ubfx	r3, r7, #4, #1
   14dca:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
    p_cb->flags = flags;
   14dce:	6237      	str	r7, [r6, #32]
    p_reg->ADDRESS = address;
   14dd0:	786b      	ldrb	r3, [r5, #1]
   14dd2:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14dd6:	f8c4 a104 	str.w	sl, [r4, #260]	; 0x104
   14dda:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   14dde:	f8c4 a124 	str.w	sl, [r4, #292]	; 0x124
   14de2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   14de6:	f8c4 a160 	str.w	sl, [r4, #352]	; 0x160
   14dea:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
   14dee:	f8c4 a148 	str.w	sl, [r4, #328]	; 0x148
   14df2:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
   14df6:	f017 0301 	ands.w	r3, r7, #1
    return p_reg->RXD.AMOUNT;
}

NRF_STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_ArrayList << TWIM_TXD_LIST_LIST_Pos;
   14dfa:	bf18      	it	ne
   14dfc:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_tx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
   14dfe:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
   14e02:	f017 0302 	ands.w	r3, r7, #2
}

NRF_STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_ArrayList << TWIM_RXD_LIST_LIST_Pos;
   14e06:	bf18      	it	ne
   14e08:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_Disabled << TWIM_RXD_LIST_LIST_Pos;
   14e0a:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    switch (p_xfer_desc->type)
   14e0e:	782a      	ldrb	r2, [r5, #0]
   14e10:	2a03      	cmp	r2, #3
   14e12:	f200 80b5 	bhi.w	14f80 <nrfx_twim_xfer+0x234>
   14e16:	e8df f002 	tbb	[pc, r2]
   14e1a:	a084      	.short	0xa084
   14e1c:	0269      	.short	0x0269
   14e1e:	692b      	ldr	r3, [r5, #16]
   14e20:	f003 4160 	and.w	r1, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   14e24:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
   14e28:	d1a7      	bne.n	14d7a <nrfx_twim_xfer+0x2e>
    p_reg->SHORTS = mask;
   14e2a:	f44f 7180 	mov.w	r1, #256	; 0x100
   14e2e:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   14e32:	68e8      	ldr	r0, [r5, #12]
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   14e34:	6869      	ldr	r1, [r5, #4]
   14e36:	f8c4 0544 	str.w	r0, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   14e3a:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14e3e:	2100      	movs	r1, #0
   14e40:	f8c4 1150 	str.w	r1, [r4, #336]	; 0x150
   14e44:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14e48:	2001      	movs	r0, #1
   14e4a:	6220      	str	r0, [r4, #32]
   14e4c:	60a0      	str	r0, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14e4e:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
   14e52:	2800      	cmp	r0, #0
   14e54:	d0fb      	beq.n	14e4e <nrfx_twim_xfer+0x102>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14e56:	f8c4 1150 	str.w	r1, [r4, #336]	; 0x150
   14e5a:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   14e5e:	68a9      	ldr	r1, [r5, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   14e60:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   14e64:	2334      	movs	r3, #52	; 0x34
   14e66:	fb03 c30e 	mla	r3, r3, lr, ip
    p_reg->TXD.MAXCNT = length;
   14e6a:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
   14e6e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   14e72:	6099      	str	r1, [r3, #8]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
   14e74:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
   14e76:	4e6f      	ldr	r6, [pc, #444]	; (15034 <nrfx_twim_xfer+0x2e8>)
    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
   14e78:	0739      	lsls	r1, r7, #28
   14e7a:	d406      	bmi.n	14e8a <nrfx_twim_xfer+0x13e>
   14e7c:	2a03      	cmp	r2, #3
   14e7e:	d004      	beq.n	14e8a <nrfx_twim_xfer+0x13e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14e80:	2201      	movs	r2, #1
   14e82:	50e2      	str	r2, [r4, r3]
        if (p_xfer_desc->primary_length == 0)
   14e84:	686b      	ldr	r3, [r5, #4]
   14e86:	b903      	cbnz	r3, 14e8a <nrfx_twim_xfer+0x13e>
   14e88:	6162      	str	r2, [r4, #20]
    if (p_cb->handler)
   14e8a:	2334      	movs	r3, #52	; 0x34
   14e8c:	fb03 f30e 	mul.w	r3, r3, lr
   14e90:	eb0c 0103 	add.w	r1, ip, r3
   14e94:	f85c 2003 	ldr.w	r2, [ip, r3]
   14e98:	2a00      	cmp	r2, #0
   14e9a:	d174      	bne.n	14f86 <nrfx_twim_xfer+0x23a>
                transmission_finished = true;
   14e9c:	2101      	movs	r1, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14e9e:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   14ea2:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   14ea6:	2800      	cmp	r0, #0
   14ea8:	f040 8088 	bne.w	14fbc <nrfx_twim_xfer+0x270>
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_SUSPENDED))
   14eac:	3b00      	subs	r3, #0
   14eae:	bf18      	it	ne
   14eb0:	2301      	movne	r3, #1
   14eb2:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   14eb6:	2800      	cmp	r0, #0
   14eb8:	f000 8086 	beq.w	14fc8 <nrfx_twim_xfer+0x27c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14ebc:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   14ec0:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14ec4:	f8d4 5160 	ldr.w	r5, [r4, #352]	; 0x160
    return p_reg->SHORTS;
   14ec8:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
                if (!(lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_STOP_MASK)))
   14ecc:	b115      	cbz	r5, 14ed4 <nrfx_twim_xfer+0x188>
   14ece:	f410 7f00 	tst.w	r0, #512	; 0x200
   14ed2:	d104      	bne.n	14ede <nrfx_twim_xfer+0x192>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14ed4:	6221      	str	r1, [r4, #32]
   14ed6:	6161      	str	r1, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   14ed8:	2d00      	cmp	r5, #0
   14eda:	d0e0      	beq.n	14e9e <nrfx_twim_xfer+0x152>
                    transmission_finished = false;
   14edc:	2300      	movs	r3, #0
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   14ede:	05c0      	lsls	r0, r0, #23
   14ee0:	d572      	bpl.n	14fc8 <nrfx_twim_xfer+0x27c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14ee2:	f8c4 2148 	str.w	r2, [r4, #328]	; 0x148
   14ee6:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
        } while (!transmission_finished);
   14eea:	e7d8      	b.n	14e9e <nrfx_twim_xfer+0x152>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   14eec:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   14eee:	68e9      	ldr	r1, [r5, #12]
   14ef0:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   14ef4:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   14ef8:	692b      	ldr	r3, [r5, #16]
   14efa:	f003 4160 	and.w	r1, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   14efe:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
   14f02:	f47f af3a 	bne.w	14d7a <nrfx_twim_xfer+0x2e>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   14f06:	68a9      	ldr	r1, [r5, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   14f08:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->SHORTS = mask;
   14f0c:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    p_reg->RXD.MAXCNT = length;
   14f10:	f8c4 1538 	str.w	r1, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   14f14:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   14f18:	2334      	movs	r3, #52	; 0x34
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   14f1a:	fb03 c30e 	mla	r3, r3, lr, ip
   14f1e:	2102      	movs	r1, #2
   14f20:	e012      	b.n	14f48 <nrfx_twim_xfer+0x1fc>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   14f22:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   14f24:	68e9      	ldr	r1, [r5, #12]
   14f26:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
   14f2a:	f017 0f20 	tst.w	r7, #32
    p_reg->TXD.MAXCNT = length;
   14f2e:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   14f32:	f04f 0334 	mov.w	r3, #52	; 0x34
   14f36:	d00b      	beq.n	14f50 <nrfx_twim_xfer+0x204>
    p_reg->SHORTS = mask;
   14f38:	f44f 7180 	mov.w	r1, #256	; 0x100
   14f3c:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   14f40:	fb03 c30e 	mla	r3, r3, lr, ip
   14f44:	f44f 2180 	mov.w	r1, #262144	; 0x40000
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   14f48:	6099      	str	r1, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14f4a:	2301      	movs	r3, #1
   14f4c:	6223      	str	r3, [r4, #32]
   14f4e:	e791      	b.n	14e74 <nrfx_twim_xfer+0x128>
    p_reg->SHORTS = mask;
   14f50:	f44f 7100 	mov.w	r1, #512	; 0x200
   14f54:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
   14f58:	e7df      	b.n	14f1a <nrfx_twim_xfer+0x1ce>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   14f5a:	686b      	ldr	r3, [r5, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   14f5c:	68e9      	ldr	r1, [r5, #12]
   14f5e:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   14f62:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   14f66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   14f6a:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   14f6e:	2334      	movs	r3, #52	; 0x34
   14f70:	fb03 c30e 	mla	r3, r3, lr, ip
   14f74:	2102      	movs	r1, #2
   14f76:	6099      	str	r1, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14f78:	2301      	movs	r3, #1
   14f7a:	6223      	str	r3, [r4, #32]
        start_task = NRF_TWIM_TASK_STARTRX;
   14f7c:	2300      	movs	r3, #0
   14f7e:	e77a      	b.n	14e76 <nrfx_twim_xfer+0x12a>
    switch (p_xfer_desc->type)
   14f80:	4e2d      	ldr	r6, [pc, #180]	; (15038 <nrfx_twim_xfer+0x2ec>)
   14f82:	2308      	movs	r3, #8
   14f84:	e778      	b.n	14e78 <nrfx_twim_xfer+0x12c>
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
   14f86:	077a      	lsls	r2, r7, #29
            p_cb->int_mask = 0;
   14f88:	bf44      	itt	mi
   14f8a:	2300      	movmi	r3, #0
   14f8c:	608b      	strmi	r3, [r1, #8]
        if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK))
   14f8e:	067b      	lsls	r3, r7, #25
   14f90:	d406      	bmi.n	14fa0 <nrfx_twim_xfer+0x254>
            p_cb->int_mask |= NRF_TWIM_INT_STOPPED_MASK;
   14f92:	2334      	movs	r3, #52	; 0x34
   14f94:	fb03 c30e 	mla	r3, r3, lr, ip
   14f98:	689a      	ldr	r2, [r3, #8]
   14f9a:	f042 0202 	orr.w	r2, r2, #2
   14f9e:	609a      	str	r2, [r3, #8]
        p_cb->int_mask |= NRF_TWIM_INT_ERROR_MASK;
   14fa0:	2334      	movs	r3, #52	; 0x34
   14fa2:	fb03 cc0e 	mla	ip, r3, lr, ip
   14fa6:	f8dc 3008 	ldr.w	r3, [ip, #8]
   14faa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   14fae:	f8cc 3008 	str.w	r3, [ip, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   14fb2:	f8dc 3008 	ldr.w	r3, [ip, #8]
    p_reg->INTENSET = mask;
   14fb6:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   14fba:	e6df      	b.n	14d7c <nrfx_twim_xfer+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14fbc:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   14fc0:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
                transmission_finished = true;
   14fc4:	2301      	movs	r3, #1
   14fc6:	e774      	b.n	14eb2 <nrfx_twim_xfer+0x166>
        } while (!transmission_finished);
   14fc8:	2b00      	cmp	r3, #0
   14fca:	f43f af68 	beq.w	14e9e <nrfx_twim_xfer+0x152>
        p_cb->busy = false;
   14fce:	2134      	movs	r1, #52	; 0x34
    uint32_t error_source = p_reg->ERRORSRC;
   14fd0:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   14fd4:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
   14fd8:	fb01 c20e 	mla	r2, r1, lr, ip
   14fdc:	2000      	movs	r0, #0
   14fde:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
        if (errorsrc)
   14fe2:	b18b      	cbz	r3, 15008 <nrfx_twim_xfer+0x2bc>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   14fe4:	4a15      	ldr	r2, [pc, #84]	; (1503c <nrfx_twim_xfer+0x2f0>)
   14fe6:	4e16      	ldr	r6, [pc, #88]	; (15040 <nrfx_twim_xfer+0x2f4>)
   14fe8:	f013 0f01 	tst.w	r3, #1
   14fec:	bf18      	it	ne
   14fee:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   14ff0:	f013 0f02 	tst.w	r3, #2
   14ff4:	f102 0201 	add.w	r2, r2, #1
   14ff8:	bf18      	it	ne
   14ffa:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   14ffc:	f013 0f04 	tst.w	r3, #4
   15000:	4b10      	ldr	r3, [pc, #64]	; (15044 <nrfx_twim_xfer+0x2f8>)
   15002:	bf18      	it	ne
   15004:	461e      	movne	r6, r3
   15006:	e6b9      	b.n	14d7c <nrfx_twim_xfer+0x30>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
   15008:	067b      	lsls	r3, r7, #25
   1500a:	f53f aeb7 	bmi.w	14d7c <nrfx_twim_xfer+0x30>
                !xfer_completeness_check(p_twim, p_cb))
   1500e:	fb0e c101 	mla	r1, lr, r1, ip
   15012:	4620      	mov	r0, r4
   15014:	f009 f8ad 	bl	1e172 <xfer_completeness_check>
                err_code = NRFX_ERROR_INTERNAL;
   15018:	4b09      	ldr	r3, [pc, #36]	; (15040 <nrfx_twim_xfer+0x2f4>)
   1501a:	2800      	cmp	r0, #0
   1501c:	bf08      	it	eq
   1501e:	461e      	moveq	r6, r3
   15020:	e6ac      	b.n	14d7c <nrfx_twim_xfer+0x30>
   15022:	bf00      	nop
   15024:	200029ac 	.word	0x200029ac
   15028:	0bad000a 	.word	0x0bad000a
   1502c:	019c0202 	.word	0x019c0202
   15030:	0bad000b 	.word	0x0bad000b
   15034:	0bad0000 	.word	0x0bad0000
   15038:	0bad0004 	.word	0x0bad0004
   1503c:	0bae0000 	.word	0x0bae0000
   15040:	0bad0001 	.word	0x0bad0001
   15044:	0bae0002 	.word	0x0bae0002

00015048 <nrfx_twim_0_irq_handler>:

#if NRFX_CHECK(NRFX_TWIM0_ENABLED)
void nrfx_twim_0_irq_handler(void)
{
    twim_irq_handler(NRF_TWIM0, &m_cb[NRFX_TWIM0_INST_IDX]);
   15048:	4901      	ldr	r1, [pc, #4]	; (15050 <nrfx_twim_0_irq_handler+0x8>)
   1504a:	4802      	ldr	r0, [pc, #8]	; (15054 <nrfx_twim_0_irq_handler+0xc>)
   1504c:	f7ff bd0c 	b.w	14a68 <twim_irq_handler>
   15050:	200029ac 	.word	0x200029ac
   15054:	40003000 	.word	0x40003000

00015058 <nrfx_twim_1_irq_handler>:
#endif

#if NRFX_CHECK(NRFX_TWIM1_ENABLED)
void nrfx_twim_1_irq_handler(void)
{
    twim_irq_handler(NRF_TWIM1, &m_cb[NRFX_TWIM1_INST_IDX]);
   15058:	4902      	ldr	r1, [pc, #8]	; (15064 <nrfx_twim_1_irq_handler+0xc>)
   1505a:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
   1505e:	f7ff bd03 	b.w	14a68 <twim_irq_handler>
   15062:	bf00      	nop
   15064:	200029e0 	.word	0x200029e0

00015068 <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
   15068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    *p_pin = pin_number & 0x1F;
   1506c:	f000 001f 	and.w	r0, r0, #31
   15070:	f001 061f 	and.w	r6, r1, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   15074:	2401      	movs	r4, #1
    p_reg->OUTSET = set_mask;
   15076:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1507a:	fa04 f800 	lsl.w	r8, r4, r0
    reg->PIN_CNF[pin_number] = cnf;
   1507e:	f506 72e0 	add.w	r2, r6, #448	; 0x1c0
   15082:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   15086:	f240 630d 	movw	r3, #1549	; 0x60d
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1508a:	40b4      	lsls	r4, r6
    p_reg->OUTSET = set_mask;
   1508c:	f8c5 8508 	str.w	r8, [r5, #1288]	; 0x508
   15090:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
   15094:	f845 3020 	str.w	r3, [r5, r0, lsl #2]
   15098:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
    nrf_gpio_pin_set(scl_pin);
    nrf_gpio_pin_set(sda_pin);

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
   1509c:	2004      	movs	r0, #4
   1509e:	f009 f840 	bl	1e122 <nrfx_busy_wait>
   150a2:	2709      	movs	r7, #9
    return p_reg->IN;
   150a4:	f8d5 3510 	ldr.w	r3, [r5, #1296]	; 0x510

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
   150a8:	421c      	tst	r4, r3
   150aa:	d10d      	bne.n	150c8 <nrfx_twi_twim_bus_recover+0x60>
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
   150ac:	2004      	movs	r0, #4
    p_reg->OUTCLR = clr_mask;
   150ae:	f8c5 850c 	str.w	r8, [r5, #1292]	; 0x50c
   150b2:	f009 f836 	bl	1e122 <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
   150b6:	3f01      	subs	r7, #1
    p_reg->OUTSET = set_mask;
   150b8:	f8c5 8508 	str.w	r8, [r5, #1288]	; 0x508
            nrf_gpio_pin_set(scl_pin);
            NRFX_DELAY_US(4);
   150bc:	2004      	movs	r0, #4
   150be:	f009 f830 	bl	1e122 <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
   150c2:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
   150c6:	d1ed      	bne.n	150a4 <nrfx_twi_twim_bus_recover+0x3c>
    p_reg->OUTCLR = clr_mask;
   150c8:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
   150cc:	2004      	movs	r0, #4
   150ce:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
   150d2:	f009 f826 	bl	1e122 <nrfx_busy_wait>
    p_reg->OUTSET = set_mask;
   150d6:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    nrf_gpio_pin_set(sda_pin);
    NRFX_DELAY_US(4);
   150da:	2004      	movs	r0, #4
   150dc:	f009 f821 	bl	1e122 <nrfx_busy_wait>
    return p_reg->IN;
   150e0:	f8d5 1510 	ldr.w	r1, [r5, #1296]	; 0x510

    if (nrf_gpio_pin_read(sda_pin))
   150e4:	4803      	ldr	r0, [pc, #12]	; (150f4 <nrfx_twi_twim_bus_recover+0x8c>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   150e6:	fa21 f606 	lsr.w	r6, r1, r6
   150ea:	f006 0601 	and.w	r6, r6, #1
   150ee:	1b80      	subs	r0, r0, r6
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
   150f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   150f4:	0bad0001 	.word	0x0bad0001

000150f8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   150f8:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   150fa:	4c14      	ldr	r4, [pc, #80]	; (1514c <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   150fc:	4a14      	ldr	r2, [pc, #80]	; (15150 <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   150fe:	4915      	ldr	r1, [pc, #84]	; (15154 <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   15100:	2303      	movs	r3, #3
   15102:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   15104:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   15106:	4b14      	ldr	r3, [pc, #80]	; (15158 <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
   15108:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1510a:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   1510c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   15110:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   15112:	2300      	movs	r3, #0
   15114:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   15116:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   15118:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
   1511a:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   1511c:	4a0f      	ldr	r2, [pc, #60]	; (1515c <_DoInit+0x64>)
   1511e:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
   15120:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   15122:	2210      	movs	r2, #16
   15124:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   15126:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   15128:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1512a:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   1512c:	f002 f85b 	bl	171e6 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   15130:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
   15134:	490a      	ldr	r1, [pc, #40]	; (15160 <_DoInit+0x68>)
   15136:	4620      	mov	r0, r4
   15138:	f002 f855 	bl	171e6 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   1513c:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
   15140:	2320      	movs	r3, #32
   15142:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   15144:	f3bf 8f5f 	dmb	sy
}
   15148:	bd10      	pop	{r4, pc}
   1514a:	bf00      	nop
   1514c:	20002a14 	.word	0x20002a14
   15150:	00020f2b 	.word	0x00020f2b
   15154:	00020f34 	.word	0x00020f34
   15158:	20002bad 	.word	0x20002bad
   1515c:	20002b9d 	.word	0x20002b9d
   15160:	00020f38 	.word	0x00020f38

00015164 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   15164:	b570      	push	{r4, r5, r6, lr}
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
   15166:	4b16      	ldr	r3, [pc, #88]	; (151c0 <SEGGER_RTT_WriteNoLock+0x5c>)
   15168:	2418      	movs	r4, #24
   1516a:	fb00 4504 	mla	r5, r0, r4, r4
   1516e:	441d      	add	r5, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
   15170:	fb04 3300 	mla	r3, r4, r0, r3
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   15174:	4616      	mov	r6, r2
  switch (pRing->Flags) {
   15176:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   15178:	2c01      	cmp	r4, #1
   1517a:	d00e      	beq.n	1519a <SEGGER_RTT_WriteNoLock+0x36>
   1517c:	2c02      	cmp	r4, #2
   1517e:	d018      	beq.n	151b2 <SEGGER_RTT_WriteNoLock+0x4e>
   15180:	b9e4      	cbnz	r4, 151bc <SEGGER_RTT_WriteNoLock+0x58>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
   15182:	4628      	mov	r0, r5
   15184:	f009 f825 	bl	1e1d2 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
   15188:	4286      	cmp	r6, r0
   1518a:	d804      	bhi.n	15196 <SEGGER_RTT_WriteNoLock+0x32>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
   1518c:	4632      	mov	r2, r6
   1518e:	4628      	mov	r0, r5
   15190:	f009 f828 	bl	1e1e4 <_WriteNoCheck>
   15194:	4634      	mov	r4, r6
  }
  //
  // Finish up.
  //
  return Status;
}
   15196:	4620      	mov	r0, r4
   15198:	bd70      	pop	{r4, r5, r6, pc}
    Avail = _GetAvailWriteSpace(pRing);
   1519a:	4628      	mov	r0, r5
   1519c:	f009 f819 	bl	1e1d2 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
   151a0:	4286      	cmp	r6, r0
   151a2:	4634      	mov	r4, r6
   151a4:	bf28      	it	cs
   151a6:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
   151a8:	4622      	mov	r2, r4
   151aa:	4628      	mov	r0, r5
   151ac:	f009 f81a 	bl	1e1e4 <_WriteNoCheck>
    break;
   151b0:	e7f1      	b.n	15196 <SEGGER_RTT_WriteNoLock+0x32>
    Status = _WriteBlocking(pRing, pData, NumBytes);
   151b2:	4628      	mov	r0, r5
}
   151b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
   151b8:	f009 b832 	b.w	1e220 <_WriteBlocking>
  switch (pRing->Flags) {
   151bc:	2400      	movs	r4, #0
  return Status;
   151be:	e7ea      	b.n	15196 <SEGGER_RTT_WriteNoLock+0x32>
   151c0:	20002a14 	.word	0x20002a14

000151c4 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   151c4:	4b0e      	ldr	r3, [pc, #56]	; (15200 <z_sys_init_run_level+0x3c>)
{
   151c6:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   151c8:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   151cc:	3001      	adds	r0, #1
   151ce:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   151d2:	42a6      	cmp	r6, r4
   151d4:	d800      	bhi.n	151d8 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   151d6:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   151d8:	e9d4 3500 	ldrd	r3, r5, [r4]
   151dc:	4628      	mov	r0, r5
   151de:	4798      	blx	r3
		if (dev != NULL) {
   151e0:	b165      	cbz	r5, 151fc <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
   151e2:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
   151e4:	b130      	cbz	r0, 151f4 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   151e6:	2800      	cmp	r0, #0
   151e8:	bfb8      	it	lt
   151ea:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   151ec:	28ff      	cmp	r0, #255	; 0xff
   151ee:	bfa8      	it	ge
   151f0:	20ff      	movge	r0, #255	; 0xff
   151f2:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   151f4:	785a      	ldrb	r2, [r3, #1]
   151f6:	f042 0201 	orr.w	r2, r2, #1
   151fa:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   151fc:	3408      	adds	r4, #8
   151fe:	e7e8      	b.n	151d2 <z_sys_init_run_level+0xe>
   15200:	0001fc34 	.word	0x0001fc34

00015204 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   15204:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   15206:	4605      	mov	r5, r0
   15208:	b910      	cbnz	r0, 15210 <z_impl_device_get_binding+0xc>
		return NULL;
   1520a:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   1520c:	4620      	mov	r0, r4
   1520e:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   15210:	7803      	ldrb	r3, [r0, #0]
   15212:	2b00      	cmp	r3, #0
   15214:	d0f9      	beq.n	1520a <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   15216:	4c0e      	ldr	r4, [pc, #56]	; (15250 <z_impl_device_get_binding+0x4c>)
   15218:	4e0e      	ldr	r6, [pc, #56]	; (15254 <z_impl_device_get_binding+0x50>)
   1521a:	42b4      	cmp	r4, r6
   1521c:	d108      	bne.n	15230 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
   1521e:	4c0c      	ldr	r4, [pc, #48]	; (15250 <z_impl_device_get_binding+0x4c>)
   15220:	42b4      	cmp	r4, r6
   15222:	d0f2      	beq.n	1520a <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   15224:	4620      	mov	r0, r4
   15226:	f009 f82f 	bl	1e288 <z_device_is_ready>
   1522a:	b950      	cbnz	r0, 15242 <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
   1522c:	3418      	adds	r4, #24
   1522e:	e7f7      	b.n	15220 <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
   15230:	4620      	mov	r0, r4
   15232:	f009 f829 	bl	1e288 <z_device_is_ready>
   15236:	b110      	cbz	r0, 1523e <z_impl_device_get_binding+0x3a>
   15238:	6823      	ldr	r3, [r4, #0]
   1523a:	42ab      	cmp	r3, r5
   1523c:	d0e6      	beq.n	1520c <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   1523e:	3418      	adds	r4, #24
   15240:	e7eb      	b.n	1521a <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   15242:	6821      	ldr	r1, [r4, #0]
   15244:	4628      	mov	r0, r5
   15246:	f001 ffe8 	bl	1721a <strcmp>
   1524a:	2800      	cmp	r0, #0
   1524c:	d1ee      	bne.n	1522c <z_impl_device_get_binding+0x28>
   1524e:	e7dd      	b.n	1520c <z_impl_device_get_binding+0x8>
   15250:	0001ee3c 	.word	0x0001ee3c
   15254:	0001f004 	.word	0x0001f004

00015258 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   15258:	b530      	push	{r4, r5, lr}
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
   1525a:	2300      	movs	r3, #0
{
   1525c:	b087      	sub	sp, #28
	z_setup_new_thread(thread, stack,
   1525e:	2201      	movs	r2, #1
   15260:	e9cd 2304 	strd	r2, r3, [sp, #16]
   15264:	220f      	movs	r2, #15
   15266:	e9cd 3202 	strd	r3, r2, [sp, #8]
   1526a:	9301      	str	r3, [sp, #4]
	struct k_thread *thread = &z_idle_threads[i];
   1526c:	4c0c      	ldr	r4, [pc, #48]	; (152a0 <init_idle_thread+0x48>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1526e:	4b0d      	ldr	r3, [pc, #52]	; (152a4 <init_idle_thread+0x4c>)
	z_setup_new_thread(thread, stack,
   15270:	490d      	ldr	r1, [pc, #52]	; (152a8 <init_idle_thread+0x50>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   15272:	2218      	movs	r2, #24
	struct k_thread *thread = &z_idle_threads[i];
   15274:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   15278:	fb02 3300 	mla	r3, r2, r0, r3
	z_setup_new_thread(thread, stack,
   1527c:	f44f 75b0 	mov.w	r5, #352	; 0x160
   15280:	9300      	str	r3, [sp, #0]
   15282:	fb05 1100 	mla	r1, r5, r0, r1
   15286:	4b09      	ldr	r3, [pc, #36]	; (152ac <init_idle_thread+0x54>)
   15288:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1528c:	4620      	mov	r0, r4
   1528e:	f000 f909 	bl	154a4 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   15292:	7b63      	ldrb	r3, [r4, #13]
   15294:	f023 0304 	bic.w	r3, r3, #4
   15298:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   1529a:	b007      	add	sp, #28
   1529c:	bd30      	pop	{r4, r5, pc}
   1529e:	bf00      	nop
   152a0:	200016d8 	.word	0x200016d8
   152a4:	20002abc 	.word	0x20002abc
   152a8:	200047c0 	.word	0x200047c0
   152ac:	00015619 	.word	0x00015619

000152b0 <bg_thread_main>:
{
   152b0:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   152b2:	4b0a      	ldr	r3, [pc, #40]	; (152dc <bg_thread_main+0x2c>)
   152b4:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   152b6:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   152b8:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   152ba:	f7ff ff83 	bl	151c4 <z_sys_init_run_level>
	boot_banner();
   152be:	f001 f947 	bl	16550 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   152c2:	2003      	movs	r0, #3
   152c4:	f7ff ff7e 	bl	151c4 <z_sys_init_run_level>
	z_init_static_threads();
   152c8:	f000 f94a 	bl	15560 <z_init_static_threads>
	main();
   152cc:	f7ed f9d8 	bl	2680 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   152d0:	4a03      	ldr	r2, [pc, #12]	; (152e0 <bg_thread_main+0x30>)
   152d2:	7b13      	ldrb	r3, [r2, #12]
   152d4:	f023 0301 	bic.w	r3, r3, #1
   152d8:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   152da:	bd08      	pop	{r3, pc}
   152dc:	20002fad 	.word	0x20002fad
   152e0:	20001758 	.word	0x20001758

000152e4 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   152e4:	4802      	ldr	r0, [pc, #8]	; (152f0 <z_bss_zero+0xc>)
   152e6:	4a03      	ldr	r2, [pc, #12]	; (152f4 <z_bss_zero+0x10>)
   152e8:	2100      	movs	r1, #0
   152ea:	1a12      	subs	r2, r2, r0
   152ec:	f001 bfbd 	b.w	1726a <memset>
   152f0:	20000ca0 	.word	0x20000ca0
   152f4:	20002fb0 	.word	0x20002fb0

000152f8 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   152f8:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   152fa:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 153c0 <z_cstart+0xc8>
   152fe:	b0a6      	sub	sp, #152	; 0x98
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   15300:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   15304:	4d2f      	ldr	r5, [pc, #188]	; (153c4 <z_cstart+0xcc>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
   15306:	4e30      	ldr	r6, [pc, #192]	; (153c8 <z_cstart+0xd0>)
   15308:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1530a:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 153cc <z_cstart+0xd4>
   1530e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   15312:	2400      	movs	r4, #0
   15314:	616b      	str	r3, [r5, #20]
   15316:	23e0      	movs	r3, #224	; 0xe0
   15318:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1531c:	77ec      	strb	r4, [r5, #31]
   1531e:	762c      	strb	r4, [r5, #24]
   15320:	766c      	strb	r4, [r5, #25]
   15322:	76ac      	strb	r4, [r5, #26]
   15324:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   15328:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1532a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1532e:	626b      	str	r3, [r5, #36]	; 0x24
   15330:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   15334:	f7ee fec4 	bl	40c0 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   15338:	f7ee fc72 	bl	3c20 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1533c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15340:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   15342:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   15344:	f7ee ff9a 	bl	427c <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   15348:	f7ee ff02 	bl	4150 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   1534c:	f240 1301 	movw	r3, #257	; 0x101
   15350:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   15354:	ab06      	add	r3, sp, #24
   15356:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   15358:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	dummy_thread->resource_pool = NULL;
   1535c:	9423      	str	r4, [sp, #140]	; 0x8c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   1535e:	f008 ff92 	bl	1e286 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   15362:	4620      	mov	r0, r4
   15364:	f7ff ff2e 	bl	151c4 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   15368:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
   1536a:	4d19      	ldr	r5, [pc, #100]	; (153d0 <z_cstart+0xd8>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1536c:	f7ff ff2a 	bl	151c4 <z_sys_init_run_level>
	z_sched_init();
   15370:	f000 fdaa 	bl	15ec8 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   15374:	4b17      	ldr	r3, [pc, #92]	; (153d4 <z_cstart+0xdc>)
   15376:	9305      	str	r3, [sp, #20]
   15378:	2301      	movs	r3, #1
   1537a:	4917      	ldr	r1, [pc, #92]	; (153d8 <z_cstart+0xe0>)
   1537c:	9400      	str	r4, [sp, #0]
   1537e:	e9cd 4303 	strd	r4, r3, [sp, #12]
   15382:	f44f 6280 	mov.w	r2, #1024	; 0x400
   15386:	464b      	mov	r3, r9
   15388:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1538c:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
   1538e:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   15390:	f000 f888 	bl	154a4 <z_setup_new_thread>
   15394:	7b6a      	ldrb	r2, [r5, #13]
   15396:	4607      	mov	r7, r0
   15398:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   1539c:	4628      	mov	r0, r5
   1539e:	736a      	strb	r2, [r5, #13]
   153a0:	f009 fa60 	bl	1e864 <z_ready_thread>
		init_idle_thread(i);
   153a4:	4620      	mov	r0, r4
   153a6:	f7ff ff57 	bl	15258 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   153aa:	4b0c      	ldr	r3, [pc, #48]	; (153dc <z_cstart+0xe4>)
   153ac:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   153ae:	464a      	mov	r2, r9
   153b0:	4639      	mov	r1, r7
   153b2:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
   153b4:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
   153b6:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   153ba:	f7ee fd55 	bl	3e68 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   153be:	bf00      	nop
   153c0:	20005140 	.word	0x20005140
   153c4:	e000ed00 	.word	0xe000ed00
   153c8:	20002abc 	.word	0x20002abc
   153cc:	000152b1 	.word	0x000152b1
   153d0:	20001758 	.word	0x20001758
   153d4:	00020f3f 	.word	0x00020f3f
   153d8:	200043a0 	.word	0x200043a0
   153dc:	200016d8 	.word	0x200016d8

000153e0 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   153e0:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   153e2:	4c06      	ldr	r4, [pc, #24]	; (153fc <statics_init+0x1c>)
   153e4:	4d06      	ldr	r5, [pc, #24]	; (15400 <statics_init+0x20>)
   153e6:	42ac      	cmp	r4, r5
   153e8:	d301      	bcc.n	153ee <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   153ea:	2000      	movs	r0, #0
   153ec:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   153ee:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   153f2:	4620      	mov	r0, r4
   153f4:	f008 ff79 	bl	1e2ea <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   153f8:	3414      	adds	r4, #20
   153fa:	e7f4      	b.n	153e6 <statics_init+0x6>
   153fc:	20000b0c 	.word	0x20000b0c
   15400:	20000b0c 	.word	0x20000b0c

00015404 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   15404:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   15406:	4b0e      	ldr	r3, [pc, #56]	; (15440 <init_mem_slab_module+0x3c>)
   15408:	4c0e      	ldr	r4, [pc, #56]	; (15444 <init_mem_slab_module+0x40>)
   1540a:	42a3      	cmp	r3, r4
   1540c:	d301      	bcc.n	15412 <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
   1540e:	2000      	movs	r0, #0
	return rc;
}
   15410:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   15412:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   15416:	ea41 0200 	orr.w	r2, r1, r0
   1541a:	f012 0203 	ands.w	r2, r2, #3
   1541e:	d10b      	bne.n	15438 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   15420:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   15422:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   15424:	42aa      	cmp	r2, r5
   15426:	d101      	bne.n	1542c <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   15428:	331c      	adds	r3, #28
   1542a:	e7ee      	b.n	1540a <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   1542c:	695e      	ldr	r6, [r3, #20]
   1542e:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   15430:	3201      	adds	r2, #1
		slab->free_list = p;
   15432:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   15434:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   15436:	e7f5      	b.n	15424 <init_mem_slab_module+0x20>
	return rc;
   15438:	f06f 0015 	mvn.w	r0, #21
   1543c:	e7e8      	b.n	15410 <init_mem_slab_module+0xc>
   1543e:	bf00      	nop
   15440:	20000a80 	.word	0x20000a80
   15444:	20000b0c 	.word	0x20000b0c

00015448 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   15448:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1544a:	460c      	mov	r4, r1
	__asm__ volatile(
   1544c:	f04f 0520 	mov.w	r5, #32
   15450:	f3ef 8111 	mrs	r1, BASEPRI
   15454:	f385 8812 	msr	BASEPRI_MAX, r5
   15458:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   1545c:	6945      	ldr	r5, [r0, #20]
   1545e:	b15d      	cbz	r5, 15478 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   15460:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   15462:	682b      	ldr	r3, [r5, #0]
   15464:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   15466:	6983      	ldr	r3, [r0, #24]
   15468:	3301      	adds	r3, #1
   1546a:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   1546c:	2000      	movs	r0, #0
	__asm__ volatile(
   1546e:	f381 8811 	msr	BASEPRI, r1
   15472:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   15476:	e011      	b.n	1549c <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   15478:	ea52 0c03 	orrs.w	ip, r2, r3
   1547c:	d103      	bne.n	15486 <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   1547e:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   15480:	f06f 000b 	mvn.w	r0, #11
   15484:	e7f3      	b.n	1546e <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   15486:	e9cd 2300 	strd	r2, r3, [sp]
   1548a:	4602      	mov	r2, r0
   1548c:	3008      	adds	r0, #8
   1548e:	f000 fcb9 	bl	15e04 <z_pend_curr>
		if (result == 0) {
   15492:	b918      	cbnz	r0, 1549c <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   15494:	4b02      	ldr	r3, [pc, #8]	; (154a0 <k_mem_slab_alloc+0x58>)
   15496:	689b      	ldr	r3, [r3, #8]
   15498:	695b      	ldr	r3, [r3, #20]
   1549a:	6023      	str	r3, [r4, #0]
}
   1549c:	b003      	add	sp, #12
   1549e:	bd30      	pop	{r4, r5, pc}
   154a0:	20002abc 	.word	0x20002abc

000154a4 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   154a4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   154a8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   154aa:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   154ac:	2604      	movs	r6, #4
   154ae:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   154b0:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   154b2:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   154b4:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
   154b8:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   154ba:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   154bc:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   154c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   154c2:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   154c4:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   154c8:	3720      	adds	r7, #32
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   154ca:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   154ce:	e9c0 761a 	strd	r7, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   154d2:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   154d4:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   154d6:	6705      	str	r5, [r0, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   154d8:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   154dc:	9202      	str	r2, [sp, #8]
   154de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   154e0:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   154e2:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   154e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   154e6:	9200      	str	r2, [sp, #0]
   154e8:	4642      	mov	r2, r8
{
   154ea:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   154ec:	f7ee fc8a 	bl	3e04 <arch_new_thread>
	if (!_current) {
   154f0:	4b04      	ldr	r3, [pc, #16]	; (15504 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
   154f2:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   154f4:	689b      	ldr	r3, [r3, #8]
   154f6:	b103      	cbz	r3, 154fa <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
   154f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   154fa:	6763      	str	r3, [r4, #116]	; 0x74
}
   154fc:	4640      	mov	r0, r8
   154fe:	b004      	add	sp, #16
   15500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15504:	20002abc 	.word	0x20002abc

00015508 <z_impl_k_thread_create>:
{
   15508:	b5f0      	push	{r4, r5, r6, r7, lr}
   1550a:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1550c:	2700      	movs	r7, #0
   1550e:	9705      	str	r7, [sp, #20]
   15510:	9f10      	ldr	r7, [sp, #64]	; 0x40
   15512:	9704      	str	r7, [sp, #16]
   15514:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   15516:	9703      	str	r7, [sp, #12]
   15518:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   1551a:	9702      	str	r7, [sp, #8]
{
   1551c:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   15520:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   15522:	9701      	str	r7, [sp, #4]
   15524:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   15526:	9700      	str	r7, [sp, #0]
{
   15528:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1552a:	f7ff ffbb 	bl	154a4 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1552e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   15532:	bf08      	it	eq
   15534:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   15538:	d005      	beq.n	15546 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1553a:	ea55 0306 	orrs.w	r3, r5, r6
   1553e:	d105      	bne.n	1554c <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   15540:	4620      	mov	r0, r4
   15542:	f000 fc03 	bl	15d4c <z_sched_start>
}
   15546:	4620      	mov	r0, r4
   15548:	b007      	add	sp, #28
   1554a:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1554c:	4903      	ldr	r1, [pc, #12]	; (1555c <z_impl_k_thread_create+0x54>)
   1554e:	4632      	mov	r2, r6
   15550:	462b      	mov	r3, r5
   15552:	f104 0018 	add.w	r0, r4, #24
   15556:	f000 fe69 	bl	1622c <z_add_timeout>
   1555a:	e7f4      	b.n	15546 <z_impl_k_thread_create+0x3e>
   1555c:	0001e885 	.word	0x0001e885

00015560 <z_init_static_threads>:
{
   15560:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15564:	4c29      	ldr	r4, [pc, #164]	; (1560c <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   15566:	4d2a      	ldr	r5, [pc, #168]	; (15610 <z_init_static_threads+0xb0>)
{
   15568:	b087      	sub	sp, #28
   1556a:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   1556c:	42ae      	cmp	r6, r5
   1556e:	f104 0430 	add.w	r4, r4, #48	; 0x30
   15572:	d30f      	bcc.n	15594 <z_init_static_threads+0x34>
	k_sched_lock();
   15574:	f000 fb06 	bl	15b84 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   15578:	4c24      	ldr	r4, [pc, #144]	; (1560c <z_init_static_threads+0xac>)
   1557a:	f8df 9098 	ldr.w	r9, [pc, #152]	; 15614 <z_init_static_threads+0xb4>
   1557e:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   15582:	f240 37e7 	movw	r7, #999	; 0x3e7
   15586:	42ac      	cmp	r4, r5
   15588:	d320      	bcc.n	155cc <z_init_static_threads+0x6c>
}
   1558a:	b007      	add	sp, #28
   1558c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   15590:	f000 bc7e 	b.w	15e90 <k_sched_unlock>
		z_setup_new_thread(
   15594:	f854 3c04 	ldr.w	r3, [r4, #-4]
   15598:	9305      	str	r3, [sp, #20]
   1559a:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1559e:	9304      	str	r3, [sp, #16]
   155a0:	f854 3c14 	ldr.w	r3, [r4, #-20]
   155a4:	9303      	str	r3, [sp, #12]
   155a6:	f854 3c18 	ldr.w	r3, [r4, #-24]
   155aa:	9302      	str	r3, [sp, #8]
   155ac:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   155b0:	9301      	str	r3, [sp, #4]
   155b2:	f854 3c20 	ldr.w	r3, [r4, #-32]
   155b6:	9300      	str	r3, [sp, #0]
   155b8:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   155bc:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   155c0:	f7ff ff70 	bl	154a4 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   155c4:	f854 3c30 	ldr.w	r3, [r4, #-48]
   155c8:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   155ca:	e7ce      	b.n	1556a <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   155cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   155ce:	1c5a      	adds	r2, r3, #1
   155d0:	d00d      	beq.n	155ee <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
   155d2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   155d6:	2100      	movs	r1, #0
   155d8:	4638      	mov	r0, r7
   155da:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   155de:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   155e2:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   155e6:	d104      	bne.n	155f2 <z_init_static_threads+0x92>
	z_sched_start(thread);
   155e8:	4640      	mov	r0, r8
   155ea:	f000 fbaf 	bl	15d4c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   155ee:	3430      	adds	r4, #48	; 0x30
   155f0:	e7c9      	b.n	15586 <z_init_static_threads+0x26>
   155f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   155f6:	2300      	movs	r3, #0
   155f8:	f7eb f9e0 	bl	9bc <__aeabi_uldivmod>
   155fc:	4602      	mov	r2, r0
   155fe:	460b      	mov	r3, r1
   15600:	f108 0018 	add.w	r0, r8, #24
   15604:	4649      	mov	r1, r9
   15606:	f000 fe11 	bl	1622c <z_add_timeout>
   1560a:	e7f0      	b.n	155ee <z_init_static_threads+0x8e>
   1560c:	20000a50 	.word	0x20000a50
   15610:	20000a80 	.word	0x20000a80
   15614:	0001e885 	.word	0x0001e885

00015618 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   15618:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   1561a:	4c0b      	ldr	r4, [pc, #44]	; (15648 <idle+0x30>)
	return !z_sys_post_kernel;
   1561c:	4d0b      	ldr	r5, [pc, #44]	; (1564c <idle+0x34>)
	__asm__ volatile(
   1561e:	f04f 0220 	mov.w	r2, #32
   15622:	f3ef 8311 	mrs	r3, BASEPRI
   15626:	f382 8812 	msr	BASEPRI_MAX, r2
   1562a:	f3bf 8f6f 	isb	sy
   1562e:	f009 f9e0 	bl	1e9f2 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   15632:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   15634:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   15636:	b913      	cbnz	r3, 1563e <idle+0x26>
	arch_cpu_idle();
   15638:	f7ee faf8 	bl	3c2c <arch_cpu_idle>
}
   1563c:	e7ef      	b.n	1561e <idle+0x6>
   1563e:	f7ee f9b9 	bl	39b4 <pm_system_suspend>
   15642:	2800      	cmp	r0, #0
   15644:	d1eb      	bne.n	1561e <idle+0x6>
   15646:	e7f7      	b.n	15638 <idle+0x20>
   15648:	20002abc 	.word	0x20002abc
   1564c:	20002fad 	.word	0x20002fad

00015650 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   15650:	b537      	push	{r0, r1, r2, r4, r5, lr}
   15652:	4611      	mov	r1, r2
   15654:	f04f 0220 	mov.w	r2, #32
   15658:	f3ef 8511 	mrs	r5, BASEPRI
   1565c:	f382 8812 	msr	BASEPRI_MAX, r2
   15660:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   15664:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   15666:	b19c      	cbz	r4, 15690 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   15668:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1566a:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1566c:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   15670:	4294      	cmp	r4, r2
	list->head = node;
   15672:	6003      	str	r3, [r0, #0]
	list->tail = node;
   15674:	bf08      	it	eq
   15676:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   15678:	2101      	movs	r1, #1
   1567a:	4620      	mov	r0, r4
   1567c:	f008 ff3a 	bl	1e4f4 <z_queue_node_peek>
   15680:	4604      	mov	r4, r0
	__asm__ volatile(
   15682:	f385 8811 	msr	BASEPRI, r5
   15686:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   1568a:	4620      	mov	r0, r4
   1568c:	b003      	add	sp, #12
   1568e:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   15690:	ea51 0203 	orrs.w	r2, r1, r3
   15694:	d0f5      	beq.n	15682 <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   15696:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1569a:	e9cd 1300 	strd	r1, r3, [sp]
   1569e:	4610      	mov	r0, r2
   156a0:	4629      	mov	r1, r5
   156a2:	f000 fbaf 	bl	15e04 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   156a6:	2800      	cmp	r0, #0
   156a8:	d1ef      	bne.n	1568a <z_impl_k_queue_get+0x3a>
   156aa:	4b02      	ldr	r3, [pc, #8]	; (156b4 <z_impl_k_queue_get+0x64>)
   156ac:	689b      	ldr	r3, [r3, #8]
   156ae:	695c      	ldr	r4, [r3, #20]
   156b0:	e7eb      	b.n	1568a <z_impl_k_queue_get+0x3a>
   156b2:	bf00      	nop
   156b4:	20002abc 	.word	0x20002abc

000156b8 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   156b8:	b538      	push	{r3, r4, r5, lr}
   156ba:	4604      	mov	r4, r0
	__asm__ volatile(
   156bc:	f04f 0320 	mov.w	r3, #32
   156c0:	f3ef 8511 	mrs	r5, BASEPRI
   156c4:	f383 8812 	msr	BASEPRI_MAX, r3
   156c8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   156cc:	f009 f926 	bl	1e91c <z_unpend_first_thread>

	if (thread != NULL) {
   156d0:	b148      	cbz	r0, 156e6 <z_impl_k_sem_give+0x2e>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   156d2:	2200      	movs	r2, #0
   156d4:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   156d6:	f009 f8c5 	bl	1e864 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   156da:	4629      	mov	r1, r5
   156dc:	4808      	ldr	r0, [pc, #32]	; (15700 <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   156de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   156e2:	f000 ba3d 	b.w	15b60 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   156e6:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   156ea:	429a      	cmp	r2, r3
   156ec:	bf18      	it	ne
   156ee:	3301      	addne	r3, #1
   156f0:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   156f2:	2102      	movs	r1, #2
   156f4:	f104 0010 	add.w	r0, r4, #16
   156f8:	f009 fb18 	bl	1ed2c <z_handle_obj_poll_events>
}
   156fc:	e7ed      	b.n	156da <z_impl_k_sem_give+0x22>
   156fe:	bf00      	nop
   15700:	20002fae 	.word	0x20002fae

00015704 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   15704:	b513      	push	{r0, r1, r4, lr}
   15706:	f04f 0420 	mov.w	r4, #32
   1570a:	f3ef 8111 	mrs	r1, BASEPRI
   1570e:	f384 8812 	msr	BASEPRI_MAX, r4
   15712:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   15716:	6884      	ldr	r4, [r0, #8]
   15718:	b144      	cbz	r4, 1572c <z_impl_k_sem_take+0x28>
		sem->count--;
   1571a:	3c01      	subs	r4, #1
   1571c:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   1571e:	f381 8811 	msr	BASEPRI, r1
   15722:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   15726:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   15728:	b002      	add	sp, #8
   1572a:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1572c:	ea52 0403 	orrs.w	r4, r2, r3
   15730:	d106      	bne.n	15740 <z_impl_k_sem_take+0x3c>
   15732:	f381 8811 	msr	BASEPRI, r1
   15736:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1573a:	f06f 000f 	mvn.w	r0, #15
   1573e:	e7f3      	b.n	15728 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   15740:	e9cd 2300 	strd	r2, r3, [sp]
   15744:	4602      	mov	r2, r0
   15746:	4802      	ldr	r0, [pc, #8]	; (15750 <z_impl_k_sem_take+0x4c>)
   15748:	f000 fb5c 	bl	15e04 <z_pend_curr>
	return ret;
   1574c:	e7ec      	b.n	15728 <z_impl_k_sem_take+0x24>
   1574e:	bf00      	nop
   15750:	20002fae 	.word	0x20002fae

00015754 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   15754:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   15756:	4b09      	ldr	r3, [pc, #36]	; (1577c <k_sys_work_q_init+0x28>)
   15758:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   1575a:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   1575c:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   1575e:	9300      	str	r3, [sp, #0]
   15760:	4907      	ldr	r1, [pc, #28]	; (15780 <k_sys_work_q_init+0x2c>)
   15762:	4808      	ldr	r0, [pc, #32]	; (15784 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   15764:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   15768:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1576c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   15770:	f000 f914 	bl	1599c <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   15774:	4620      	mov	r0, r4
   15776:	b004      	add	sp, #16
   15778:	bd10      	pop	{r4, pc}
   1577a:	bf00      	nop
   1577c:	00020f44 	.word	0x00020f44
   15780:	20005140 	.word	0x20005140
   15784:	200017d8 	.word	0x200017d8

00015788 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   15788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
   1578c:	4e47      	ldr	r6, [pc, #284]	; (158ac <work_queue_main+0x124>)
   1578e:	b085      	sub	sp, #20
   15790:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   15792:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   15796:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	__asm__ volatile(
   1579a:	f04f 0320 	mov.w	r3, #32
   1579e:	f3ef 8711 	mrs	r7, BASEPRI
   157a2:	f383 8812 	msr	BASEPRI_MAX, r3
   157a6:	f3bf 8f6f 	isb	sy
   157aa:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
   157ae:	b98d      	cbnz	r5, 157d4 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   157b0:	2102      	movs	r1, #2
   157b2:	f104 0098 	add.w	r0, r4, #152	; 0x98
   157b6:	f008 ff16 	bl	1e5e6 <flag_test_and_clear>
   157ba:	2800      	cmp	r0, #0
   157bc:	d135      	bne.n	1582a <work_queue_main+0xa2>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   157be:	2300      	movs	r3, #0
   157c0:	e9cd 8900 	strd	r8, r9, [sp]
   157c4:	9302      	str	r3, [sp, #8]
   157c6:	f104 0288 	add.w	r2, r4, #136	; 0x88
   157ca:	4639      	mov	r1, r7
   157cc:	4838      	ldr	r0, [pc, #224]	; (158b0 <work_queue_main+0x128>)
   157ce:	f000 fc91 	bl	160f4 <z_sched_wait>
			continue;
   157d2:	e7e2      	b.n	1579a <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   157d4:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
   157d8:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   157da:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   157de:	4295      	cmp	r5, r2
   157e0:	d101      	bne.n	157e6 <work_queue_main+0x5e>
	list->tail = node;
   157e2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   157e6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   157ea:	f043 0302 	orr.w	r3, r3, #2
   157ee:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   157f2:	68eb      	ldr	r3, [r5, #12]
   157f4:	f023 0304 	bic.w	r3, r3, #4
   157f8:	f043 0301 	orr.w	r3, r3, #1
   157fc:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   157fe:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   15800:	f387 8811 	msr	BASEPRI, r7
   15804:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   15808:	4628      	mov	r0, r5
   1580a:	4798      	blx	r3
	__asm__ volatile(
   1580c:	f04f 0320 	mov.w	r3, #32
   15810:	f3ef 8b11 	mrs	fp, BASEPRI
   15814:	f383 8812 	msr	BASEPRI_MAX, r3
   15818:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   1581c:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1581e:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   15820:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   15824:	d40b      	bmi.n	1583e <work_queue_main+0xb6>
	*flagp &= ~BIT(bit);
   15826:	60ea      	str	r2, [r5, #12]
   15828:	e00e      	b.n	15848 <work_queue_main+0xc0>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   1582a:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   1582e:	2200      	movs	r2, #0
   15830:	2101      	movs	r1, #1
   15832:	4628      	mov	r0, r5
   15834:	f009 f89a 	bl	1e96c <z_sched_wake>
   15838:	2800      	cmp	r0, #0
   1583a:	d1f8      	bne.n	1582e <work_queue_main+0xa6>
   1583c:	e7bf      	b.n	157be <work_queue_main+0x36>
	return list->head;
   1583e:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   15840:	f023 0303 	bic.w	r3, r3, #3
   15844:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   15846:	b970      	cbnz	r0, 15866 <work_queue_main+0xde>
	*flagp &= ~BIT(bit);
   15848:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   1584c:	f023 0302 	bic.w	r3, r3, #2
   15850:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   15854:	f38b 8811 	msr	BASEPRI, fp
   15858:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   1585c:	05d8      	lsls	r0, r3, #23
   1585e:	d49c      	bmi.n	1579a <work_queue_main+0x12>
	z_impl_k_yield();
   15860:	f000 fb3e 	bl	15ee0 <z_impl_k_yield>
}
   15864:	e799      	b.n	1579a <work_queue_main+0x12>
	return node->next;
   15866:	2700      	movs	r7, #0
   15868:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
   1586c:	463b      	mov	r3, r7
		if (wc->work == work) {
   1586e:	6842      	ldr	r2, [r0, #4]
   15870:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   15872:	4601      	mov	r1, r0
		if (wc->work == work) {
   15874:	d10c      	bne.n	15890 <work_queue_main+0x108>
	return node->next;
   15876:	6801      	ldr	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   15878:	b997      	cbnz	r7, 158a0 <work_queue_main+0x118>
   1587a:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   1587c:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   1587e:	4282      	cmp	r2, r0
   15880:	d100      	bne.n	15884 <work_queue_main+0xfc>
	list->tail = node;
   15882:	6071      	str	r1, [r6, #4]
	parent->next = child;
   15884:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   15888:	f7ff ff16 	bl	156b8 <z_impl_k_sem_give>
}
   1588c:	4639      	mov	r1, r7
   1588e:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   15890:	f1ba 0f00 	cmp.w	sl, #0
   15894:	d0d8      	beq.n	15848 <work_queue_main+0xc0>
	return node->next;
   15896:	4650      	mov	r0, sl
   15898:	460f      	mov	r7, r1
   1589a:	f8da a000 	ldr.w	sl, [sl]
   1589e:	e7e6      	b.n	1586e <work_queue_main+0xe6>
	return list->tail;
   158a0:	6872      	ldr	r2, [r6, #4]
	parent->next = child;
   158a2:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   158a4:	4290      	cmp	r0, r2
	list->tail = node;
   158a6:	bf08      	it	eq
   158a8:	6077      	streq	r7, [r6, #4]
}
   158aa:	e7eb      	b.n	15884 <work_queue_main+0xfc>
   158ac:	20002ae4 	.word	0x20002ae4
   158b0:	20002fae 	.word	0x20002fae

000158b4 <cancel_sync_locked>:
	return (*flagp & BIT(bit)) != 0U;
   158b4:	68c3      	ldr	r3, [r0, #12]
{
   158b6:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   158b8:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   158bc:	079b      	lsls	r3, r3, #30
{
   158be:	4605      	mov	r5, r0
   158c0:	460c      	mov	r4, r1
	if (ret) {
   158c2:	d50d      	bpl.n	158e0 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   158c4:	2201      	movs	r2, #1
   158c6:	2100      	movs	r1, #0
   158c8:	f104 0008 	add.w	r0, r4, #8
   158cc:	f008 fe7b 	bl	1e5c6 <z_impl_k_sem_init>
	parent->next = child;
   158d0:	2300      	movs	r3, #0
   158d2:	6023      	str	r3, [r4, #0]
	return list->tail;
   158d4:	4b05      	ldr	r3, [pc, #20]	; (158ec <cancel_sync_locked+0x38>)
	canceler->work = work;
   158d6:	6065      	str	r5, [r4, #4]
   158d8:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   158da:	b91a      	cbnz	r2, 158e4 <cancel_sync_locked+0x30>
	list->head = node;
   158dc:	e9c3 4400 	strd	r4, r4, [r3]
}
   158e0:	4630      	mov	r0, r6
   158e2:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   158e4:	6014      	str	r4, [r2, #0]
	list->tail = node;
   158e6:	605c      	str	r4, [r3, #4]
}
   158e8:	e7fa      	b.n	158e0 <cancel_sync_locked+0x2c>
   158ea:	bf00      	nop
   158ec:	20002ae4 	.word	0x20002ae4

000158f0 <submit_to_queue_locked>:
{
   158f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   158f2:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   158f4:	079a      	lsls	r2, r3, #30
{
   158f6:	4604      	mov	r4, r0
   158f8:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   158fa:	f3c3 0540 	ubfx	r5, r3, #1, #1
   158fe:	d41f      	bmi.n	15940 <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   15900:	075f      	lsls	r7, r3, #29
   15902:	d41f      	bmi.n	15944 <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
   15904:	680a      	ldr	r2, [r1, #0]
   15906:	b90a      	cbnz	r2, 1590c <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   15908:	6882      	ldr	r2, [r0, #8]
   1590a:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   1590c:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
   1590e:	bf44      	itt	mi
   15910:	68a3      	ldrmi	r3, [r4, #8]
   15912:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
   15914:	6837      	ldr	r7, [r6, #0]
			ret = 2;
   15916:	bf4c      	ite	mi
   15918:	2502      	movmi	r5, #2
		ret = 1;
   1591a:	2501      	movpl	r5, #1
	if (queue == NULL) {
   1591c:	b37f      	cbz	r7, 1597e <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1591e:	4b1b      	ldr	r3, [pc, #108]	; (1598c <submit_to_queue_locked+0x9c>)
   15920:	689b      	ldr	r3, [r3, #8]
   15922:	42bb      	cmp	r3, r7
   15924:	d111      	bne.n	1594a <submit_to_queue_locked+0x5a>
   15926:	f008 fd6f 	bl	1e408 <k_is_in_isr>
   1592a:	f080 0001 	eor.w	r0, r0, #1
   1592e:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
   15930:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   15934:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   15936:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1593a:	d523      	bpl.n	15984 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
   1593c:	b13a      	cbz	r2, 1594e <submit_to_queue_locked+0x5e>
   1593e:	b940      	cbnz	r0, 15952 <submit_to_queue_locked+0x62>
		ret = -EBUSY;
   15940:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   15944:	2300      	movs	r3, #0
   15946:	6033      	str	r3, [r6, #0]
	return ret;
   15948:	e013      	b.n	15972 <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1594a:	2000      	movs	r0, #0
   1594c:	e7f0      	b.n	15930 <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
   1594e:	071b      	lsls	r3, r3, #28
   15950:	d4f6      	bmi.n	15940 <submit_to_queue_locked+0x50>
	parent->next = child;
   15952:	2300      	movs	r3, #0
   15954:	6023      	str	r3, [r4, #0]
	return list->tail;
   15956:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   1595a:	b963      	cbnz	r3, 15976 <submit_to_queue_locked+0x86>
	list->head = node;
   1595c:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
   15960:	4638      	mov	r0, r7
   15962:	f008 fe59 	bl	1e618 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   15966:	68e3      	ldr	r3, [r4, #12]
   15968:	f043 0304 	orr.w	r3, r3, #4
   1596c:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   1596e:	6833      	ldr	r3, [r6, #0]
   15970:	60a3      	str	r3, [r4, #8]
}
   15972:	4628      	mov	r0, r5
   15974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   15976:	601c      	str	r4, [r3, #0]
	list->tail = node;
   15978:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
   1597c:	e7f0      	b.n	15960 <submit_to_queue_locked+0x70>
		return -EINVAL;
   1597e:	f06f 0515 	mvn.w	r5, #21
   15982:	e7df      	b.n	15944 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
   15984:	f06f 0512 	mvn.w	r5, #18
   15988:	e7dc      	b.n	15944 <submit_to_queue_locked+0x54>
   1598a:	bf00      	nop
   1598c:	20002abc 	.word	0x20002abc

00015990 <k_work_submit>:
{
   15990:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   15992:	4801      	ldr	r0, [pc, #4]	; (15998 <k_work_submit+0x8>)
   15994:	f008 beb0 	b.w	1e6f8 <k_work_submit_to_queue>
   15998:	200017d8 	.word	0x200017d8

0001599c <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   1599c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1599e:	b089      	sub	sp, #36	; 0x24
   159a0:	4604      	mov	r4, r0
	list->head = NULL;
   159a2:	2000      	movs	r0, #0
	list->tail = NULL;
   159a4:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   159a8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   159aa:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   159ae:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   159b2:	f104 0090 	add.w	r0, r4, #144	; 0x90
   159b6:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   159ba:	b31d      	cbz	r5, 15a04 <k_work_queue_start+0x68>
   159bc:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   159be:	2800      	cmp	r0, #0
   159c0:	f240 1001 	movw	r0, #257	; 0x101
   159c4:	bf08      	it	eq
   159c6:	2001      	moveq	r0, #1
	*flagp = flags;
   159c8:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   159cc:	2000      	movs	r0, #0
   159ce:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   159d2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   159d6:	e9cd 3003 	strd	r3, r0, [sp, #12]
   159da:	e9cd 0001 	strd	r0, r0, [sp, #4]
   159de:	e9cd 6706 	strd	r6, r7, [sp, #24]
   159e2:	4b09      	ldr	r3, [pc, #36]	; (15a08 <k_work_queue_start+0x6c>)
   159e4:	9400      	str	r4, [sp, #0]
   159e6:	4620      	mov	r0, r4
   159e8:	f7ff fd8e 	bl	15508 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   159ec:	b125      	cbz	r5, 159f8 <k_work_queue_start+0x5c>
   159ee:	6829      	ldr	r1, [r5, #0]
   159f0:	b111      	cbz	r1, 159f8 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   159f2:	4620      	mov	r0, r4
   159f4:	f008 fd0e 	bl	1e414 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   159f8:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   159fa:	b009      	add	sp, #36	; 0x24
   159fc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   15a00:	f008 bd0b 	b.w	1e41a <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   15a04:	2001      	movs	r0, #1
   15a06:	e7df      	b.n	159c8 <k_work_queue_start+0x2c>
   15a08:	00015789 	.word	0x00015789

00015a0c <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   15a0c:	b513      	push	{r0, r1, r4, lr}
   15a0e:	9001      	str	r0, [sp, #4]
   15a10:	4608      	mov	r0, r1
	__asm__ volatile(
   15a12:	f04f 0120 	mov.w	r1, #32
   15a16:	f3ef 8411 	mrs	r4, BASEPRI
   15a1a:	f381 8812 	msr	BASEPRI_MAX, r1
   15a1e:	f3bf 8f6f 	isb	sy
	return *flagp;
   15a22:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   15a24:	f011 0f0e 	tst.w	r1, #14
   15a28:	d116      	bne.n	15a58 <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   15a2a:	ea53 0c02 	orrs.w	ip, r3, r2
   15a2e:	d108      	bne.n	15a42 <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
   15a30:	a901      	add	r1, sp, #4
   15a32:	f7ff ff5d 	bl	158f0 <submit_to_queue_locked>
	__asm__ volatile(
   15a36:	f384 8811 	msr	BASEPRI, r4
   15a3a:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   15a3e:	b002      	add	sp, #8
   15a40:	bd10      	pop	{r4, pc}
	*flagp |= BIT(bit);
   15a42:	f041 0108 	orr.w	r1, r1, #8
   15a46:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   15a48:	9901      	ldr	r1, [sp, #4]
   15a4a:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   15a4c:	3010      	adds	r0, #16
   15a4e:	4903      	ldr	r1, [pc, #12]	; (15a5c <k_work_schedule_for_queue+0x50>)
   15a50:	f000 fbec 	bl	1622c <z_add_timeout>
	return ret;
   15a54:	2001      	movs	r0, #1
   15a56:	e7ee      	b.n	15a36 <k_work_schedule_for_queue+0x2a>
	int ret = 0;
   15a58:	2000      	movs	r0, #0
   15a5a:	e7ec      	b.n	15a36 <k_work_schedule_for_queue+0x2a>
   15a5c:	0001e689 	.word	0x0001e689

00015a60 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   15a60:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   15a62:	4801      	ldr	r0, [pc, #4]	; (15a68 <k_work_schedule+0x8>)
   15a64:	f7ff bfd2 	b.w	15a0c <k_work_schedule_for_queue>
   15a68:	200017d8 	.word	0x200017d8

00015a6c <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   15a6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   15a6e:	460c      	mov	r4, r1
   15a70:	9001      	str	r0, [sp, #4]
   15a72:	4616      	mov	r6, r2
   15a74:	461d      	mov	r5, r3
	__asm__ volatile(
   15a76:	f04f 0320 	mov.w	r3, #32
   15a7a:	f3ef 8711 	mrs	r7, BASEPRI
   15a7e:	f383 8812 	msr	BASEPRI_MAX, r3
   15a82:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   15a86:	4608      	mov	r0, r1
   15a88:	f008 fdb8 	bl	1e5fc <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   15a8c:	ea55 0306 	orrs.w	r3, r5, r6
   15a90:	d109      	bne.n	15aa6 <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   15a92:	a901      	add	r1, sp, #4
   15a94:	4620      	mov	r0, r4
   15a96:	f7ff ff2b 	bl	158f0 <submit_to_queue_locked>
	__asm__ volatile(
   15a9a:	f387 8811 	msr	BASEPRI, r7
   15a9e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   15aa2:	b003      	add	sp, #12
   15aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   15aa6:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   15aa8:	4906      	ldr	r1, [pc, #24]	; (15ac4 <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   15aaa:	f043 0308 	orr.w	r3, r3, #8
   15aae:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   15ab0:	9b01      	ldr	r3, [sp, #4]
   15ab2:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   15ab4:	f104 0010 	add.w	r0, r4, #16
   15ab8:	4632      	mov	r2, r6
   15aba:	462b      	mov	r3, r5
   15abc:	f000 fbb6 	bl	1622c <z_add_timeout>
	return ret;
   15ac0:	2001      	movs	r0, #1
   15ac2:	e7ea      	b.n	15a9a <k_work_reschedule_for_queue+0x2e>
   15ac4:	0001e689 	.word	0x0001e689

00015ac8 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   15ac8:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   15aca:	4801      	ldr	r0, [pc, #4]	; (15ad0 <k_work_reschedule+0x8>)
   15acc:	f7ff bfce 	b.w	15a6c <k_work_reschedule_for_queue>
   15ad0:	200017d8 	.word	0x200017d8

00015ad4 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   15ad4:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   15ad6:	4c08      	ldr	r4, [pc, #32]	; (15af8 <z_reset_time_slice+0x24>)
   15ad8:	6823      	ldr	r3, [r4, #0]
   15ada:	b15b      	cbz	r3, 15af4 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   15adc:	f7fe f9ea 	bl	13eb4 <sys_clock_elapsed>
   15ae0:	4603      	mov	r3, r0
   15ae2:	6820      	ldr	r0, [r4, #0]
   15ae4:	4a05      	ldr	r2, [pc, #20]	; (15afc <z_reset_time_slice+0x28>)
   15ae6:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   15ae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   15aec:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   15aee:	2100      	movs	r1, #0
   15af0:	f008 bf8f 	b.w	1ea12 <z_set_timeout_expiry>
}
   15af4:	bd10      	pop	{r4, pc}
   15af6:	bf00      	nop
   15af8:	20002af4 	.word	0x20002af4
   15afc:	20002abc 	.word	0x20002abc

00015b00 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   15b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15b02:	4604      	mov	r4, r0
   15b04:	460d      	mov	r5, r1
	__asm__ volatile(
   15b06:	f04f 0320 	mov.w	r3, #32
   15b0a:	f3ef 8611 	mrs	r6, BASEPRI
   15b0e:	f383 8812 	msr	BASEPRI_MAX, r3
   15b12:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   15b16:	4b0f      	ldr	r3, [pc, #60]	; (15b54 <k_sched_time_slice_set+0x54>)
   15b18:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   15b1a:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   15b1e:	f240 30e7 	movw	r0, #999	; 0x3e7
   15b22:	6119      	str	r1, [r3, #16]
   15b24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   15b28:	2300      	movs	r3, #0
   15b2a:	fbe4 0107 	umlal	r0, r1, r4, r7
   15b2e:	f7ea ff45 	bl	9bc <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   15b32:	2c00      	cmp	r4, #0
   15b34:	4b08      	ldr	r3, [pc, #32]	; (15b58 <k_sched_time_slice_set+0x58>)
   15b36:	dc09      	bgt.n	15b4c <k_sched_time_slice_set+0x4c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
   15b38:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   15b3a:	4b08      	ldr	r3, [pc, #32]	; (15b5c <k_sched_time_slice_set+0x5c>)
   15b3c:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   15b3e:	f7ff ffc9 	bl	15ad4 <z_reset_time_slice>
	__asm__ volatile(
   15b42:	f386 8811 	msr	BASEPRI, r6
   15b46:	f3bf 8f6f 	isb	sy
	}
}
   15b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
   15b4c:	2802      	cmp	r0, #2
   15b4e:	bfb8      	it	lt
   15b50:	2002      	movlt	r0, #2
   15b52:	e7f1      	b.n	15b38 <k_sched_time_slice_set+0x38>
   15b54:	20002abc 	.word	0x20002abc
   15b58:	20002af4 	.word	0x20002af4
   15b5c:	20002af0 	.word	0x20002af0

00015b60 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   15b60:	b949      	cbnz	r1, 15b76 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   15b62:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   15b66:	b930      	cbnz	r0, 15b76 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   15b68:	4b05      	ldr	r3, [pc, #20]	; (15b80 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   15b6a:	69da      	ldr	r2, [r3, #28]
   15b6c:	689b      	ldr	r3, [r3, #8]
   15b6e:	429a      	cmp	r2, r3
   15b70:	d001      	beq.n	15b76 <z_reschedule+0x16>
	ret = arch_swap(key);
   15b72:	f7ee b8f3 	b.w	3d5c <arch_swap>
   15b76:	f381 8811 	msr	BASEPRI, r1
   15b7a:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   15b7e:	4770      	bx	lr
   15b80:	20002abc 	.word	0x20002abc

00015b84 <k_sched_lock>:
	__asm__ volatile(
   15b84:	f04f 0320 	mov.w	r3, #32
   15b88:	f3ef 8111 	mrs	r1, BASEPRI
   15b8c:	f383 8812 	msr	BASEPRI_MAX, r3
   15b90:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   15b94:	4b04      	ldr	r3, [pc, #16]	; (15ba8 <k_sched_lock+0x24>)
   15b96:	689a      	ldr	r2, [r3, #8]
   15b98:	7bd3      	ldrb	r3, [r2, #15]
   15b9a:	3b01      	subs	r3, #1
   15b9c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   15b9e:	f381 8811 	msr	BASEPRI, r1
   15ba2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   15ba6:	4770      	bx	lr
   15ba8:	20002abc 	.word	0x20002abc

00015bac <update_cache>:
{
   15bac:	b538      	push	{r3, r4, r5, lr}
   15bae:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
   15bb0:	480c      	ldr	r0, [pc, #48]	; (15be4 <update_cache+0x38>)
   15bb2:	4d0d      	ldr	r5, [pc, #52]	; (15be8 <update_cache+0x3c>)
   15bb4:	f008 fe50 	bl	1e858 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   15bb8:	4604      	mov	r4, r0
   15bba:	b900      	cbnz	r0, 15bbe <update_cache+0x12>
   15bbc:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   15bbe:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   15bc0:	b94a      	cbnz	r2, 15bd6 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
   15bc2:	7b5a      	ldrb	r2, [r3, #13]
   15bc4:	06d2      	lsls	r2, r2, #27
   15bc6:	d106      	bne.n	15bd6 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   15bc8:	69a2      	ldr	r2, [r4, #24]
   15bca:	b922      	cbnz	r2, 15bd6 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
   15bcc:	89da      	ldrh	r2, [r3, #14]
   15bce:	2a7f      	cmp	r2, #127	; 0x7f
   15bd0:	d901      	bls.n	15bd6 <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
   15bd2:	61eb      	str	r3, [r5, #28]
}
   15bd4:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   15bd6:	429c      	cmp	r4, r3
   15bd8:	d001      	beq.n	15bde <update_cache+0x32>
			z_reset_time_slice();
   15bda:	f7ff ff7b 	bl	15ad4 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   15bde:	61ec      	str	r4, [r5, #28]
}
   15be0:	e7f8      	b.n	15bd4 <update_cache+0x28>
   15be2:	bf00      	nop
   15be4:	20002adc 	.word	0x20002adc
   15be8:	20002abc 	.word	0x20002abc

00015bec <move_thread_to_end_of_prio_q>:
{
   15bec:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   15bee:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   15bf2:	7b43      	ldrb	r3, [r0, #13]
   15bf4:	2a00      	cmp	r2, #0
{
   15bf6:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   15bf8:	da04      	bge.n	15c04 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   15bfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   15bfe:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   15c00:	f008 fde5 	bl	1e7ce <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   15c04:	7b4b      	ldrb	r3, [r1, #13]
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   15c06:	4a15      	ldr	r2, [pc, #84]	; (15c5c <move_thread_to_end_of_prio_q+0x70>)
   15c08:	f063 037f 	orn	r3, r3, #127	; 0x7f
   15c0c:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   15c0e:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15c12:	f102 0520 	add.w	r5, r2, #32
   15c16:	42ab      	cmp	r3, r5
   15c18:	d01b      	beq.n	15c52 <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   15c1a:	b1d3      	cbz	r3, 15c52 <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
   15c1c:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   15c20:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   15c24:	4286      	cmp	r6, r0
   15c26:	d00f      	beq.n	15c48 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
   15c28:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   15c2a:	2800      	cmp	r0, #0
   15c2c:	dd0c      	ble.n	15c48 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   15c2e:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   15c30:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   15c34:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   15c36:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   15c38:	6890      	ldr	r0, [r2, #8]
   15c3a:	1a43      	subs	r3, r0, r1
   15c3c:	4258      	negs	r0, r3
}
   15c3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   15c42:	4158      	adcs	r0, r3
   15c44:	f7ff bfb2 	b.w	15bac <update_cache>
	return (node == list->tail) ? NULL : node->next;
   15c48:	42a3      	cmp	r3, r4
   15c4a:	d002      	beq.n	15c52 <move_thread_to_end_of_prio_q+0x66>
   15c4c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   15c4e:	2b00      	cmp	r3, #0
   15c50:	d1e6      	bne.n	15c20 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
   15c52:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
   15c56:	6021      	str	r1, [r4, #0]
	list->tail = node;
   15c58:	6251      	str	r1, [r2, #36]	; 0x24
}
   15c5a:	e7ed      	b.n	15c38 <move_thread_to_end_of_prio_q+0x4c>
   15c5c:	20002abc 	.word	0x20002abc

00015c60 <z_time_slice>:
{
   15c60:	b538      	push	{r3, r4, r5, lr}
   15c62:	4601      	mov	r1, r0
	__asm__ volatile(
   15c64:	f04f 0320 	mov.w	r3, #32
   15c68:	f3ef 8411 	mrs	r4, BASEPRI
   15c6c:	f383 8812 	msr	BASEPRI_MAX, r3
   15c70:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   15c74:	4b15      	ldr	r3, [pc, #84]	; (15ccc <z_time_slice+0x6c>)
   15c76:	4a16      	ldr	r2, [pc, #88]	; (15cd0 <z_time_slice+0x70>)
   15c78:	6898      	ldr	r0, [r3, #8]
   15c7a:	6815      	ldr	r5, [r2, #0]
   15c7c:	42a8      	cmp	r0, r5
   15c7e:	d106      	bne.n	15c8e <z_time_slice+0x2e>
			z_reset_time_slice();
   15c80:	f7ff ff28 	bl	15ad4 <z_reset_time_slice>
	__asm__ volatile(
   15c84:	f384 8811 	msr	BASEPRI, r4
   15c88:	f3bf 8f6f 	isb	sy
}
   15c8c:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   15c8e:	2500      	movs	r5, #0
   15c90:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
   15c92:	4a10      	ldr	r2, [pc, #64]	; (15cd4 <z_time_slice+0x74>)
   15c94:	6812      	ldr	r2, [r2, #0]
   15c96:	b1ba      	cbz	r2, 15cc8 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
   15c98:	89c2      	ldrh	r2, [r0, #14]
   15c9a:	2a7f      	cmp	r2, #127	; 0x7f
   15c9c:	d814      	bhi.n	15cc8 <z_time_slice+0x68>
		&& !z_is_thread_prevented_from_running(thread)
   15c9e:	7b42      	ldrb	r2, [r0, #13]
   15ca0:	06d2      	lsls	r2, r2, #27
   15ca2:	d111      	bne.n	15cc8 <z_time_slice+0x68>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   15ca4:	4a0c      	ldr	r2, [pc, #48]	; (15cd8 <z_time_slice+0x78>)
   15ca6:	f990 500e 	ldrsb.w	r5, [r0, #14]
   15caa:	6812      	ldr	r2, [r2, #0]
   15cac:	4295      	cmp	r5, r2
   15cae:	db0b      	blt.n	15cc8 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
   15cb0:	4a0a      	ldr	r2, [pc, #40]	; (15cdc <z_time_slice+0x7c>)
   15cb2:	4290      	cmp	r0, r2
   15cb4:	d008      	beq.n	15cc8 <z_time_slice+0x68>
		if (ticks >= _current_cpu->slice_ticks) {
   15cb6:	691a      	ldr	r2, [r3, #16]
   15cb8:	428a      	cmp	r2, r1
   15cba:	dc02      	bgt.n	15cc2 <z_time_slice+0x62>
			move_thread_to_end_of_prio_q(_current);
   15cbc:	f7ff ff96 	bl	15bec <move_thread_to_end_of_prio_q>
   15cc0:	e7de      	b.n	15c80 <z_time_slice+0x20>
			_current_cpu->slice_ticks -= ticks;
   15cc2:	1a52      	subs	r2, r2, r1
		_current_cpu->slice_ticks = 0;
   15cc4:	611a      	str	r2, [r3, #16]
   15cc6:	e7dd      	b.n	15c84 <z_time_slice+0x24>
   15cc8:	2200      	movs	r2, #0
   15cca:	e7fb      	b.n	15cc4 <z_time_slice+0x64>
   15ccc:	20002abc 	.word	0x20002abc
   15cd0:	20002aec 	.word	0x20002aec
   15cd4:	20002af4 	.word	0x20002af4
   15cd8:	20002af0 	.word	0x20002af0
   15cdc:	200016d8 	.word	0x200016d8

00015ce0 <ready_thread>:
{
   15ce0:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   15ce2:	f990 200d 	ldrsb.w	r2, [r0, #13]
   15ce6:	7b43      	ldrb	r3, [r0, #13]
   15ce8:	2a00      	cmp	r2, #0
   15cea:	db2a      	blt.n	15d42 <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   15cec:	06da      	lsls	r2, r3, #27
   15cee:	d128      	bne.n	15d42 <ready_thread+0x62>
   15cf0:	6982      	ldr	r2, [r0, #24]
   15cf2:	bb32      	cbnz	r2, 15d42 <ready_thread+0x62>
	return list->head == list;
   15cf4:	4a14      	ldr	r2, [pc, #80]	; (15d48 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
   15cf6:	f063 037f 	orn	r3, r3, #127	; 0x7f
   15cfa:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
   15cfc:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15d00:	f102 0520 	add.w	r5, r2, #32
   15d04:	42ab      	cmp	r3, r5
   15d06:	d017      	beq.n	15d38 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   15d08:	b1b3      	cbz	r3, 15d38 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
   15d0a:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   15d0e:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   15d12:	428e      	cmp	r6, r1
   15d14:	d00b      	beq.n	15d2e <ready_thread+0x4e>
		return b2 - b1;
   15d16:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   15d18:	2900      	cmp	r1, #0
   15d1a:	dd08      	ble.n	15d2e <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
   15d1c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   15d1e:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   15d22:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   15d24:	6058      	str	r0, [r3, #4]
}
   15d26:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   15d28:	2000      	movs	r0, #0
   15d2a:	f7ff bf3f 	b.w	15bac <update_cache>
	return (node == list->tail) ? NULL : node->next;
   15d2e:	42a3      	cmp	r3, r4
   15d30:	d002      	beq.n	15d38 <ready_thread+0x58>
   15d32:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   15d34:	2b00      	cmp	r3, #0
   15d36:	d1ea      	bne.n	15d0e <ready_thread+0x2e>
	node->prev = tail;
   15d38:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
   15d3c:	6020      	str	r0, [r4, #0]
	list->tail = node;
   15d3e:	6250      	str	r0, [r2, #36]	; 0x24
}
   15d40:	e7f1      	b.n	15d26 <ready_thread+0x46>
}
   15d42:	bc70      	pop	{r4, r5, r6}
   15d44:	4770      	bx	lr
   15d46:	bf00      	nop
   15d48:	20002abc 	.word	0x20002abc

00015d4c <z_sched_start>:
{
   15d4c:	b510      	push	{r4, lr}
	__asm__ volatile(
   15d4e:	f04f 0220 	mov.w	r2, #32
   15d52:	f3ef 8411 	mrs	r4, BASEPRI
   15d56:	f382 8812 	msr	BASEPRI_MAX, r2
   15d5a:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   15d5e:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   15d60:	0751      	lsls	r1, r2, #29
   15d62:	d404      	bmi.n	15d6e <z_sched_start+0x22>
	__asm__ volatile(
   15d64:	f384 8811 	msr	BASEPRI, r4
   15d68:	f3bf 8f6f 	isb	sy
}
   15d6c:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   15d6e:	f022 0204 	bic.w	r2, r2, #4
   15d72:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   15d74:	f7ff ffb4 	bl	15ce0 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   15d78:	4621      	mov	r1, r4
   15d7a:	4802      	ldr	r0, [pc, #8]	; (15d84 <z_sched_start+0x38>)
}
   15d7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   15d80:	f7ff beee 	b.w	15b60 <z_reschedule>
   15d84:	20002fae 	.word	0x20002fae

00015d88 <unready_thread>:
{
   15d88:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   15d8a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   15d8e:	7b43      	ldrb	r3, [r0, #13]
   15d90:	2a00      	cmp	r2, #0
{
   15d92:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   15d94:	da04      	bge.n	15da0 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   15d96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   15d9a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   15d9c:	f008 fd17 	bl	1e7ce <sys_dlist_remove>
	update_cache(thread == _current);
   15da0:	4b04      	ldr	r3, [pc, #16]	; (15db4 <unready_thread+0x2c>)
   15da2:	6898      	ldr	r0, [r3, #8]
   15da4:	1a43      	subs	r3, r0, r1
   15da6:	4258      	negs	r0, r3
   15da8:	4158      	adcs	r0, r3
}
   15daa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   15dae:	f7ff befd 	b.w	15bac <update_cache>
   15db2:	bf00      	nop
   15db4:	20002abc 	.word	0x20002abc

00015db8 <pend>:
{
   15db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15dbc:	4606      	mov	r6, r0
   15dbe:	4615      	mov	r5, r2
   15dc0:	461c      	mov	r4, r3
	__asm__ volatile(
   15dc2:	f04f 0320 	mov.w	r3, #32
   15dc6:	f3ef 8711 	mrs	r7, BASEPRI
   15dca:	f383 8812 	msr	BASEPRI_MAX, r3
   15dce:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   15dd2:	f008 fd79 	bl	1e8c8 <add_to_waitq_locked>
	__asm__ volatile(
   15dd6:	f387 8811 	msr	BASEPRI, r7
   15dda:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   15dde:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   15de2:	bf08      	it	eq
   15de4:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
   15de8:	d008      	beq.n	15dfc <pend+0x44>
   15dea:	462a      	mov	r2, r5
   15dec:	4623      	mov	r3, r4
   15dee:	f106 0018 	add.w	r0, r6, #24
   15df2:	4903      	ldr	r1, [pc, #12]	; (15e00 <pend+0x48>)
}
   15df4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   15df8:	f000 ba18 	b.w	1622c <z_add_timeout>
   15dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15e00:	0001e885 	.word	0x0001e885

00015e04 <z_pend_curr>:
{
   15e04:	b510      	push	{r4, lr}
	pending_current = _current;
   15e06:	4b07      	ldr	r3, [pc, #28]	; (15e24 <z_pend_curr+0x20>)
   15e08:	6898      	ldr	r0, [r3, #8]
   15e0a:	4b07      	ldr	r3, [pc, #28]	; (15e28 <z_pend_curr+0x24>)
{
   15e0c:	460c      	mov	r4, r1
	pending_current = _current;
   15e0e:	6018      	str	r0, [r3, #0]
{
   15e10:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   15e12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   15e16:	f7ff ffcf 	bl	15db8 <pend>
   15e1a:	4620      	mov	r0, r4
}
   15e1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   15e20:	f7ed bf9c 	b.w	3d5c <arch_swap>
   15e24:	20002abc 	.word	0x20002abc
   15e28:	20002aec 	.word	0x20002aec

00015e2c <z_impl_k_thread_suspend>:
{
   15e2c:	b570      	push	{r4, r5, r6, lr}
   15e2e:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   15e30:	3018      	adds	r0, #24
   15e32:	f008 fdb8 	bl	1e9a6 <z_abort_timeout>
	__asm__ volatile(
   15e36:	f04f 0320 	mov.w	r3, #32
   15e3a:	f3ef 8611 	mrs	r6, BASEPRI
   15e3e:	f383 8812 	msr	BASEPRI_MAX, r3
   15e42:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   15e46:	f994 200d 	ldrsb.w	r2, [r4, #13]
   15e4a:	7b63      	ldrb	r3, [r4, #13]
   15e4c:	2a00      	cmp	r2, #0
   15e4e:	da05      	bge.n	15e5c <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   15e50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   15e54:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   15e56:	4620      	mov	r0, r4
   15e58:	f008 fcb9 	bl	1e7ce <sys_dlist_remove>
		update_cache(thread == _current);
   15e5c:	4d0b      	ldr	r5, [pc, #44]	; (15e8c <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   15e5e:	7b63      	ldrb	r3, [r4, #13]
   15e60:	68a8      	ldr	r0, [r5, #8]
   15e62:	f043 0310 	orr.w	r3, r3, #16
   15e66:	7363      	strb	r3, [r4, #13]
   15e68:	1b03      	subs	r3, r0, r4
   15e6a:	4258      	negs	r0, r3
   15e6c:	4158      	adcs	r0, r3
   15e6e:	f7ff fe9d 	bl	15bac <update_cache>
	__asm__ volatile(
   15e72:	f386 8811 	msr	BASEPRI, r6
   15e76:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   15e7a:	68ab      	ldr	r3, [r5, #8]
   15e7c:	42a3      	cmp	r3, r4
   15e7e:	d103      	bne.n	15e88 <z_impl_k_thread_suspend+0x5c>
}
   15e80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   15e84:	f008 bcde 	b.w	1e844 <z_reschedule_unlocked>
}
   15e88:	bd70      	pop	{r4, r5, r6, pc}
   15e8a:	bf00      	nop
   15e8c:	20002abc 	.word	0x20002abc

00015e90 <k_sched_unlock>:
{
   15e90:	b510      	push	{r4, lr}
	__asm__ volatile(
   15e92:	f04f 0320 	mov.w	r3, #32
   15e96:	f3ef 8411 	mrs	r4, BASEPRI
   15e9a:	f383 8812 	msr	BASEPRI_MAX, r3
   15e9e:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   15ea2:	4b08      	ldr	r3, [pc, #32]	; (15ec4 <k_sched_unlock+0x34>)
   15ea4:	689a      	ldr	r2, [r3, #8]
   15ea6:	7bd3      	ldrb	r3, [r2, #15]
   15ea8:	3301      	adds	r3, #1
   15eaa:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   15eac:	2000      	movs	r0, #0
   15eae:	f7ff fe7d 	bl	15bac <update_cache>
	__asm__ volatile(
   15eb2:	f384 8811 	msr	BASEPRI, r4
   15eb6:	f3bf 8f6f 	isb	sy
}
   15eba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   15ebe:	f008 bcc1 	b.w	1e844 <z_reschedule_unlocked>
   15ec2:	bf00      	nop
   15ec4:	20002abc 	.word	0x20002abc

00015ec8 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   15ec8:	4b04      	ldr	r3, [pc, #16]	; (15edc <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   15eca:	2100      	movs	r1, #0
   15ecc:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   15ed0:	e9c3 2208 	strd	r2, r2, [r3, #32]
   15ed4:	4608      	mov	r0, r1
   15ed6:	f7ff be13 	b.w	15b00 <k_sched_time_slice_set>
   15eda:	bf00      	nop
   15edc:	20002abc 	.word	0x20002abc

00015ee0 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   15ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   15ee2:	f04f 0320 	mov.w	r3, #32
   15ee6:	f3ef 8511 	mrs	r5, BASEPRI
   15eea:	f383 8812 	msr	BASEPRI_MAX, r3
   15eee:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   15ef2:	491a      	ldr	r1, [pc, #104]	; (15f5c <z_impl_k_yield+0x7c>)
   15ef4:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   15ef6:	7b43      	ldrb	r3, [r0, #13]
   15ef8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   15efc:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   15efe:	f008 fc66 	bl	1e7ce <sys_dlist_remove>
	}
	queue_thread(_current);
   15f02:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   15f04:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
   15f06:	4608      	mov	r0, r1
   15f08:	f062 027f 	orn	r2, r2, #127	; 0x7f
   15f0c:	735a      	strb	r2, [r3, #13]
   15f0e:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15f12:	4282      	cmp	r2, r0
   15f14:	d01c      	beq.n	15f50 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   15f16:	b1da      	cbz	r2, 15f50 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
   15f18:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	int32_t b1 = thread_1->base.prio;
   15f1a:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   15f1e:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
   15f22:	42a6      	cmp	r6, r4
   15f24:	d00f      	beq.n	15f46 <z_impl_k_yield+0x66>
		return b2 - b1;
   15f26:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   15f28:	2c00      	cmp	r4, #0
   15f2a:	dd0c      	ble.n	15f46 <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
   15f2c:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   15f2e:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   15f32:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   15f34:	6053      	str	r3, [r2, #4]
	update_cache(1);
   15f36:	2001      	movs	r0, #1
   15f38:	f7ff fe38 	bl	15bac <update_cache>
   15f3c:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   15f3e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   15f42:	f7ed bf0b 	b.w	3d5c <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   15f46:	42ba      	cmp	r2, r7
   15f48:	d002      	beq.n	15f50 <z_impl_k_yield+0x70>
   15f4a:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   15f4c:	2a00      	cmp	r2, #0
   15f4e:	d1e6      	bne.n	15f1e <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
   15f50:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	node->prev = tail;
   15f52:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
   15f56:	6013      	str	r3, [r2, #0]
	list->tail = node;
   15f58:	624b      	str	r3, [r1, #36]	; 0x24
}
   15f5a:	e7ec      	b.n	15f36 <z_impl_k_yield+0x56>
   15f5c:	20002abc 	.word	0x20002abc

00015f60 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   15f60:	ea50 0301 	orrs.w	r3, r0, r1
{
   15f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15f68:	4605      	mov	r5, r0
   15f6a:	460e      	mov	r6, r1
	if (ticks == 0) {
   15f6c:	d103      	bne.n	15f76 <z_tick_sleep+0x16>
	z_impl_k_yield();
   15f6e:	f7ff ffb7 	bl	15ee0 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
   15f72:	2000      	movs	r0, #0
   15f74:	e033      	b.n	15fde <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
   15f76:	f06f 0401 	mvn.w	r4, #1
   15f7a:	1a24      	subs	r4, r4, r0
   15f7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15f80:	eb63 0301 	sbc.w	r3, r3, r1
   15f84:	2c01      	cmp	r4, #1
   15f86:	f173 0300 	sbcs.w	r3, r3, #0
   15f8a:	da02      	bge.n	15f92 <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   15f8c:	f008 fd5b 	bl	1ea46 <sys_clock_tick_get_32>
   15f90:	1944      	adds	r4, r0, r5
   15f92:	f04f 0320 	mov.w	r3, #32
   15f96:	f3ef 8811 	mrs	r8, BASEPRI
   15f9a:	f383 8812 	msr	BASEPRI_MAX, r3
   15f9e:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   15fa2:	4f10      	ldr	r7, [pc, #64]	; (15fe4 <z_tick_sleep+0x84>)
   15fa4:	4b10      	ldr	r3, [pc, #64]	; (15fe8 <z_tick_sleep+0x88>)
   15fa6:	68b8      	ldr	r0, [r7, #8]
   15fa8:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   15faa:	f7ff feed 	bl	15d88 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   15fae:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   15fb0:	490e      	ldr	r1, [pc, #56]	; (15fec <z_tick_sleep+0x8c>)
   15fb2:	462a      	mov	r2, r5
   15fb4:	4633      	mov	r3, r6
   15fb6:	3018      	adds	r0, #24
   15fb8:	f000 f938 	bl	1622c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   15fbc:	68ba      	ldr	r2, [r7, #8]
   15fbe:	7b53      	ldrb	r3, [r2, #13]
   15fc0:	f043 0310 	orr.w	r3, r3, #16
   15fc4:	7353      	strb	r3, [r2, #13]
   15fc6:	4640      	mov	r0, r8
   15fc8:	f7ed fec8 	bl	3d5c <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   15fcc:	f008 fd3b 	bl	1ea46 <sys_clock_tick_get_32>
   15fd0:	1a20      	subs	r0, r4, r0
   15fd2:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   15fd6:	2801      	cmp	r0, #1
   15fd8:	f173 0300 	sbcs.w	r3, r3, #0
   15fdc:	dbc9      	blt.n	15f72 <z_tick_sleep+0x12>
}
   15fde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15fe2:	bf00      	nop
   15fe4:	20002abc 	.word	0x20002abc
   15fe8:	20002aec 	.word	0x20002aec
   15fec:	0001e885 	.word	0x0001e885

00015ff0 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   15ff0:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   15ff4:	bf08      	it	eq
   15ff6:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   15ffa:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   15ffc:	d106      	bne.n	1600c <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   15ffe:	4b08      	ldr	r3, [pc, #32]	; (16020 <z_impl_k_sleep+0x30>)
   16000:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   16002:	f7ff ff13 	bl	15e2c <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   16006:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   1600a:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   1600c:	f7ff ffa8 	bl	15f60 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   16010:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   16014:	fb80 0303 	smull	r0, r3, r0, r3
   16018:	0bc0      	lsrs	r0, r0, #15
   1601a:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   1601e:	e7f4      	b.n	1600a <z_impl_k_sleep+0x1a>
   16020:	20002abc 	.word	0x20002abc

00016024 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   16024:	4b01      	ldr	r3, [pc, #4]	; (1602c <z_impl_z_current_get+0x8>)
   16026:	6898      	ldr	r0, [r3, #8]
   16028:	4770      	bx	lr
   1602a:	bf00      	nop
   1602c:	20002abc 	.word	0x20002abc

00016030 <z_impl_k_is_preempt_thread>:
   16030:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
   16034:	b93b      	cbnz	r3, 16046 <z_impl_k_is_preempt_thread+0x16>
   16036:	4b05      	ldr	r3, [pc, #20]	; (1604c <z_impl_k_is_preempt_thread+0x1c>)
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   16038:	689b      	ldr	r3, [r3, #8]
	return !arch_is_in_isr() && is_preempt(_current);
   1603a:	89d8      	ldrh	r0, [r3, #14]
   1603c:	287f      	cmp	r0, #127	; 0x7f
   1603e:	bf8c      	ite	hi
   16040:	2000      	movhi	r0, #0
   16042:	2001      	movls	r0, #1
   16044:	4770      	bx	lr
   16046:	2000      	movs	r0, #0
}
   16048:	4770      	bx	lr
   1604a:	bf00      	nop
   1604c:	20002abc 	.word	0x20002abc

00016050 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   16050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16054:	4604      	mov	r4, r0
   16056:	f04f 0320 	mov.w	r3, #32
   1605a:	f3ef 8611 	mrs	r6, BASEPRI
   1605e:	f383 8812 	msr	BASEPRI_MAX, r3
   16062:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   16066:	7b43      	ldrb	r3, [r0, #13]
   16068:	071a      	lsls	r2, r3, #28
   1606a:	d505      	bpl.n	16078 <z_thread_abort+0x28>
	__asm__ volatile(
   1606c:	f386 8811 	msr	BASEPRI, r6
   16070:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   16074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   16078:	f023 0220 	bic.w	r2, r3, #32
   1607c:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   16080:	09d2      	lsrs	r2, r2, #7
   16082:	d120      	bne.n	160c6 <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   16084:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   16086:	68a3      	ldr	r3, [r4, #8]
   16088:	b113      	cbz	r3, 16090 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
   1608a:	4620      	mov	r0, r4
   1608c:	f008 fba7 	bl	1e7de <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   16090:	f104 0018 	add.w	r0, r4, #24
   16094:	f008 fc87 	bl	1e9a6 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   16098:	f104 0758 	add.w	r7, r4, #88	; 0x58
   1609c:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   160a0:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   160a2:	42bd      	cmp	r5, r7
   160a4:	d000      	beq.n	160a8 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   160a6:	b9b5      	cbnz	r5, 160d6 <z_thread_abort+0x86>
		update_cache(1);
   160a8:	2001      	movs	r0, #1
   160aa:	f7ff fd7f 	bl	15bac <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   160ae:	4b10      	ldr	r3, [pc, #64]	; (160f0 <z_thread_abort+0xa0>)
   160b0:	689b      	ldr	r3, [r3, #8]
   160b2:	42a3      	cmp	r3, r4
   160b4:	d1da      	bne.n	1606c <z_thread_abort+0x1c>
   160b6:	f3ef 8305 	mrs	r3, IPSR
   160ba:	2b00      	cmp	r3, #0
   160bc:	d1d6      	bne.n	1606c <z_thread_abort+0x1c>
   160be:	4630      	mov	r0, r6
   160c0:	f7ed fe4c 	bl	3d5c <arch_swap>
	return ret;
   160c4:	e7d2      	b.n	1606c <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   160c6:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   160ca:	f043 0308 	orr.w	r3, r3, #8
   160ce:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   160d0:	f008 fb7d 	bl	1e7ce <sys_dlist_remove>
}
   160d4:	e7d7      	b.n	16086 <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
   160d6:	4628      	mov	r0, r5
   160d8:	f008 fb81 	bl	1e7de <unpend_thread_no_timeout>
   160dc:	f105 0018 	add.w	r0, r5, #24
   160e0:	f008 fc61 	bl	1e9a6 <z_abort_timeout>
   160e4:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   160e8:	4628      	mov	r0, r5
   160ea:	f7ff fdf9 	bl	15ce0 <ready_thread>
   160ee:	e7d7      	b.n	160a0 <z_thread_abort+0x50>
   160f0:	20002abc 	.word	0x20002abc

000160f4 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   160f4:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   160f6:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   160fa:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   160fc:	e9cd 6700 	strd	r6, r7, [sp]
   16100:	f7ff fe80 	bl	15e04 <z_pend_curr>

	if (data != NULL) {
   16104:	b11c      	cbz	r4, 1610e <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   16106:	4b03      	ldr	r3, [pc, #12]	; (16114 <z_sched_wait+0x20>)
   16108:	689b      	ldr	r3, [r3, #8]
   1610a:	695b      	ldr	r3, [r3, #20]
   1610c:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   1610e:	b002      	add	sp, #8
   16110:	bdd0      	pop	{r4, r6, r7, pc}
   16112:	bf00      	nop
   16114:	20002abc 	.word	0x20002abc

00016118 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   16118:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
   1611a:	4806      	ldr	r0, [pc, #24]	; (16134 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
   1611c:	4a06      	ldr	r2, [pc, #24]	; (16138 <z_data_copy+0x20>)
   1611e:	4907      	ldr	r1, [pc, #28]	; (1613c <z_data_copy+0x24>)
   16120:	1a12      	subs	r2, r2, r0
   16122:	f001 f897 	bl	17254 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   16126:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
   1612a:	4a05      	ldr	r2, [pc, #20]	; (16140 <z_data_copy+0x28>)
   1612c:	4905      	ldr	r1, [pc, #20]	; (16144 <z_data_copy+0x2c>)
   1612e:	4806      	ldr	r0, [pc, #24]	; (16148 <z_data_copy+0x30>)
   16130:	f001 b890 	b.w	17254 <memcpy>
   16134:	20000000 	.word	0x20000000
   16138:	20000ca0 	.word	0x20000ca0
   1613c:	00020f84 	.word	0x00020f84
   16140:	00000000 	.word	0x00000000
   16144:	00020f84 	.word	0x00020f84
   16148:	20000000 	.word	0x20000000

0001614c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   1614c:	4b03      	ldr	r3, [pc, #12]	; (1615c <elapsed+0x10>)
   1614e:	681b      	ldr	r3, [r3, #0]
   16150:	b90b      	cbnz	r3, 16156 <elapsed+0xa>
   16152:	f7fd beaf 	b.w	13eb4 <sys_clock_elapsed>
}
   16156:	2000      	movs	r0, #0
   16158:	4770      	bx	lr
   1615a:	bf00      	nop
   1615c:	20002af8 	.word	0x20002af8

00016160 <next_timeout>:
	return list->head == list;
   16160:	4b10      	ldr	r3, [pc, #64]	; (161a4 <next_timeout+0x44>)

static int32_t next_timeout(void)
{
   16162:	b510      	push	{r4, lr}
   16164:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16166:	429c      	cmp	r4, r3
   16168:	bf08      	it	eq
   1616a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   1616c:	f7ff ffee 	bl	1614c <elapsed>
	int32_t ret;

	if ((to == NULL) ||
   16170:	b1a4      	cbz	r4, 1619c <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   16172:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   16176:	1a1b      	subs	r3, r3, r0
   16178:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
   1617c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   16180:	f170 0200 	sbcs.w	r2, r0, #0
   16184:	da0a      	bge.n	1619c <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
   16186:	2800      	cmp	r0, #0
   16188:	bfac      	ite	ge
   1618a:	4618      	movge	r0, r3
   1618c:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1618e:	4b06      	ldr	r3, [pc, #24]	; (161a8 <next_timeout+0x48>)
   16190:	691b      	ldr	r3, [r3, #16]
   16192:	b113      	cbz	r3, 1619a <next_timeout+0x3a>
   16194:	4298      	cmp	r0, r3
   16196:	bfa8      	it	ge
   16198:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1619a:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
   1619c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   161a0:	e7f5      	b.n	1618e <next_timeout+0x2e>
   161a2:	bf00      	nop
   161a4:	20000970 	.word	0x20000970
   161a8:	20002abc 	.word	0x20002abc

000161ac <remove_timeout>:
{
   161ac:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
   161ae:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   161b0:	b168      	cbz	r0, 161ce <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   161b2:	4a0a      	ldr	r2, [pc, #40]	; (161dc <remove_timeout+0x30>)
   161b4:	6852      	ldr	r2, [r2, #4]
   161b6:	4290      	cmp	r0, r2
   161b8:	d009      	beq.n	161ce <remove_timeout+0x22>
	if (next(t) != NULL) {
   161ba:	b143      	cbz	r3, 161ce <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   161bc:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   161c0:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   161c4:	1912      	adds	r2, r2, r4
   161c6:	eb41 0105 	adc.w	r1, r1, r5
   161ca:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   161ce:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   161d0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   161d2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   161d4:	2300      	movs	r3, #0
	node->prev = NULL;
   161d6:	e9c0 3300 	strd	r3, r3, [r0]
}
   161da:	bd30      	pop	{r4, r5, pc}
   161dc:	20000970 	.word	0x20000970

000161e0 <timeout_rem>:
	return ret;
}

/* must be locked */
static k_ticks_t timeout_rem(const struct _timeout *timeout)
{
   161e0:	b570      	push	{r4, r5, r6, lr}
	k_ticks_t ticks = 0;

	if (z_is_inactive_timeout(timeout)) {
   161e2:	6804      	ldr	r4, [r0, #0]
   161e4:	b1e4      	cbz	r4, 16220 <timeout_rem+0x40>
	return list->head == list;
   161e6:	4a10      	ldr	r2, [pc, #64]	; (16228 <timeout_rem+0x48>)
   161e8:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   161ea:	4293      	cmp	r3, r2
   161ec:	d015      	beq.n	1621a <timeout_rem+0x3a>
	return (node == list->tail) ? NULL : node->next;
   161ee:	2400      	movs	r4, #0
   161f0:	6851      	ldr	r1, [r2, #4]
   161f2:	4625      	mov	r5, r4
		return 0;
	}

	for (struct _timeout *t = first(); t != NULL; t = next(t)) {
   161f4:	b933      	cbnz	r3, 16204 <timeout_rem+0x24>
		if (timeout == t) {
			break;
		}
	}

	return ticks - elapsed();
   161f6:	f7ff ffa9 	bl	1614c <elapsed>
   161fa:	4601      	mov	r1, r0
   161fc:	1a20      	subs	r0, r4, r0
   161fe:	eb65 71e1 	sbc.w	r1, r5, r1, asr #31
}
   16202:	bd70      	pop	{r4, r5, r6, pc}
		ticks += t->dticks;
   16204:	e9d3 2604 	ldrd	r2, r6, [r3, #16]
   16208:	18a4      	adds	r4, r4, r2
   1620a:	eb45 0506 	adc.w	r5, r5, r6
		if (timeout == t) {
   1620e:	4283      	cmp	r3, r0
   16210:	d0f1      	beq.n	161f6 <timeout_rem+0x16>
   16212:	428b      	cmp	r3, r1
   16214:	d0ef      	beq.n	161f6 <timeout_rem+0x16>
   16216:	681b      	ldr	r3, [r3, #0]
   16218:	e7ec      	b.n	161f4 <timeout_rem+0x14>
   1621a:	2400      	movs	r4, #0
   1621c:	4625      	mov	r5, r4
   1621e:	e7ea      	b.n	161f6 <timeout_rem+0x16>
		return 0;
   16220:	4620      	mov	r0, r4
   16222:	4621      	mov	r1, r4
   16224:	e7ed      	b.n	16202 <timeout_rem+0x22>
   16226:	bf00      	nop
   16228:	20000970 	.word	0x20000970

0001622c <z_add_timeout>:
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1622c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   16230:	bf08      	it	eq
   16232:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   16236:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16238:	4604      	mov	r4, r0
   1623a:	461f      	mov	r7, r3
   1623c:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1623e:	d067      	beq.n	16310 <z_add_timeout+0xe4>
	to->fn = fn;
   16240:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   16242:	f04f 0320 	mov.w	r3, #32
   16246:	f3ef 8611 	mrs	r6, BASEPRI
   1624a:	f383 8812 	msr	BASEPRI_MAX, r3
   1624e:	f3bf 8f6f 	isb	sy
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   16252:	f06f 0201 	mvn.w	r2, #1
   16256:	1b53      	subs	r3, r2, r5
   16258:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   1625c:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   16260:	2b00      	cmp	r3, #0
   16262:	db1b      	blt.n	1629c <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   16264:	4b2b      	ldr	r3, [pc, #172]	; (16314 <z_add_timeout+0xe8>)
   16266:	e9d3 1300 	ldrd	r1, r3, [r3]
   1626a:	1a52      	subs	r2, r2, r1
   1626c:	eb6c 0303 	sbc.w	r3, ip, r3
   16270:	1b55      	subs	r5, r2, r5
			to->dticks = MAX(1, ticks);
   16272:	eb63 0307 	sbc.w	r3, r3, r7
   16276:	2d01      	cmp	r5, #1
   16278:	f173 0200 	sbcs.w	r2, r3, #0
   1627c:	bfbc      	itt	lt
   1627e:	2501      	movlt	r5, #1
   16280:	2300      	movlt	r3, #0
   16282:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
   16286:	4824      	ldr	r0, [pc, #144]	; (16318 <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
   16288:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1628c:	4283      	cmp	r3, r0
   1628e:	d118      	bne.n	162c2 <z_add_timeout+0x96>
	node->prev = tail;
   16290:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
   16294:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   16298:	6044      	str	r4, [r0, #4]
}
   1629a:	e026      	b.n	162ea <z_add_timeout+0xbe>
			to->dticks = timeout.ticks + 1 + elapsed();
   1629c:	f7ff ff56 	bl	1614c <elapsed>
   162a0:	3501      	adds	r5, #1
   162a2:	f147 0700 	adc.w	r7, r7, #0
   162a6:	182d      	adds	r5, r5, r0
   162a8:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
   162ac:	e9c4 5704 	strd	r5, r7, [r4, #16]
   162b0:	e7e9      	b.n	16286 <z_add_timeout+0x5a>
			to->dticks -= t->dticks;
   162b2:	1a52      	subs	r2, r2, r1
   162b4:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
   162b8:	459c      	cmp	ip, r3
   162ba:	e9c4 2504 	strd	r2, r5, [r4, #16]
   162be:	d0e7      	beq.n	16290 <z_add_timeout+0x64>
   162c0:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   162c2:	2b00      	cmp	r3, #0
   162c4:	d0e4      	beq.n	16290 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
   162c6:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
   162ca:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
   162ce:	428a      	cmp	r2, r1
   162d0:	eb75 0e07 	sbcs.w	lr, r5, r7
   162d4:	daed      	bge.n	162b2 <z_add_timeout+0x86>
				t->dticks -= to->dticks;
   162d6:	1a8a      	subs	r2, r1, r2
   162d8:	eb67 0505 	sbc.w	r5, r7, r5
   162dc:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   162e0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   162e2:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   162e6:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   162e8:	605c      	str	r4, [r3, #4]
	return list->head == list;
   162ea:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   162ec:	4283      	cmp	r3, r0
   162ee:	d00b      	beq.n	16308 <z_add_timeout+0xdc>
		if (to == first()) {
   162f0:	429c      	cmp	r4, r3
   162f2:	d109      	bne.n	16308 <z_add_timeout+0xdc>
			int32_t next_time = next_timeout();
   162f4:	f7ff ff34 	bl	16160 <next_timeout>
			if (next_time == 0 ||
   162f8:	b118      	cbz	r0, 16302 <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
   162fa:	4b08      	ldr	r3, [pc, #32]	; (1631c <z_add_timeout+0xf0>)
			if (next_time == 0 ||
   162fc:	691b      	ldr	r3, [r3, #16]
   162fe:	4283      	cmp	r3, r0
   16300:	d002      	beq.n	16308 <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
   16302:	2100      	movs	r1, #0
   16304:	f7fd fda4 	bl	13e50 <sys_clock_set_timeout>
	__asm__ volatile(
   16308:	f386 8811 	msr	BASEPRI, r6
   1630c:	f3bf 8f6f 	isb	sy
}
   16310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16312:	bf00      	nop
   16314:	20001878 	.word	0x20001878
   16318:	20000970 	.word	0x20000970
   1631c:	20002abc 	.word	0x20002abc

00016320 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   16320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16324:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   16326:	f7ff fc9b 	bl	15c60 <z_time_slice>
	__asm__ volatile(
   1632a:	f04f 0320 	mov.w	r3, #32
   1632e:	f3ef 8411 	mrs	r4, BASEPRI
   16332:	f383 8812 	msr	BASEPRI_MAX, r3
   16336:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1633a:	4e24      	ldr	r6, [pc, #144]	; (163cc <sys_clock_announce+0xac>)
	return list->head == list;
   1633c:	f8df 8090 	ldr.w	r8, [pc, #144]	; 163d0 <sys_clock_announce+0xb0>
   16340:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   16342:	4d24      	ldr	r5, [pc, #144]	; (163d4 <sys_clock_announce+0xb4>)
   16344:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   16348:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1634a:	4540      	cmp	r0, r8
		curr_tick += dt;
   1634c:	e9d5 1e00 	ldrd	r1, lr, [r5]
   16350:	ea4f 77e2 	mov.w	r7, r2, asr #31
   16354:	d00b      	beq.n	1636e <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   16356:	b150      	cbz	r0, 1636e <sys_clock_announce+0x4e>
   16358:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
   1635c:	429a      	cmp	r2, r3
   1635e:	eb77 090c 	sbcs.w	r9, r7, ip
   16362:	da16      	bge.n	16392 <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   16364:	1a9b      	subs	r3, r3, r2
   16366:	eb6c 0c07 	sbc.w	ip, ip, r7
   1636a:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
   1636e:	1852      	adds	r2, r2, r1
   16370:	eb4e 0707 	adc.w	r7, lr, r7
   16374:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
   16378:	2500      	movs	r5, #0
   1637a:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
   1637c:	f7ff fef0 	bl	16160 <next_timeout>
   16380:	4629      	mov	r1, r5
   16382:	f7fd fd65 	bl	13e50 <sys_clock_set_timeout>
	__asm__ volatile(
   16386:	f384 8811 	msr	BASEPRI, r4
   1638a:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1638e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   16392:	1859      	adds	r1, r3, r1
   16394:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
   16398:	1ad3      	subs	r3, r2, r3
   1639a:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   1639c:	2200      	movs	r2, #0
   1639e:	2300      	movs	r3, #0
   163a0:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
   163a4:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
   163a8:	f7ff ff00 	bl	161ac <remove_timeout>
   163ac:	f384 8811 	msr	BASEPRI, r4
   163b0:	f3bf 8f6f 	isb	sy
		t->fn(t);
   163b4:	6883      	ldr	r3, [r0, #8]
   163b6:	4798      	blx	r3
	__asm__ volatile(
   163b8:	f04f 0320 	mov.w	r3, #32
   163bc:	f3ef 8411 	mrs	r4, BASEPRI
   163c0:	f383 8812 	msr	BASEPRI_MAX, r3
   163c4:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   163c8:	e7bc      	b.n	16344 <sys_clock_announce+0x24>
   163ca:	bf00      	nop
   163cc:	20002af8 	.word	0x20002af8
   163d0:	20000970 	.word	0x20000970
   163d4:	20001878 	.word	0x20001878

000163d8 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   163d8:	b510      	push	{r4, lr}
   163da:	f04f 0320 	mov.w	r3, #32
   163de:	f3ef 8411 	mrs	r4, BASEPRI
   163e2:	f383 8812 	msr	BASEPRI_MAX, r3
   163e6:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   163ea:	f7fd fd63 	bl	13eb4 <sys_clock_elapsed>
   163ee:	4a05      	ldr	r2, [pc, #20]	; (16404 <sys_clock_tick_get+0x2c>)
   163f0:	e9d2 3100 	ldrd	r3, r1, [r2]
   163f4:	18c0      	adds	r0, r0, r3
   163f6:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
   163fa:	f384 8811 	msr	BASEPRI, r4
   163fe:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   16402:	bd10      	pop	{r4, pc}
   16404:	20001878 	.word	0x20001878

00016408 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   16408:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1640c:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   1640e:	4b29      	ldr	r3, [pc, #164]	; (164b4 <z_impl_k_poll+0xac>)
   16410:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   16412:	2301      	movs	r3, #1
   16414:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   16418:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   1641c:	ea52 0305 	orrs.w	r3, r2, r5
{
   16420:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   16422:	bf0c      	ite	eq
   16424:	2301      	moveq	r3, #1
   16426:	2300      	movne	r3, #0
   16428:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   1642c:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   1642e:	f008 fb6e 	bl	1eb0e <register_events>
   16432:	4681      	mov	r9, r0
	__asm__ volatile(
   16434:	f04f 0320 	mov.w	r3, #32
   16438:	f3ef 8a11 	mrs	sl, BASEPRI
   1643c:	f383 8812 	msr	BASEPRI_MAX, r3
   16440:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   16444:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   16448:	b964      	cbnz	r4, 16464 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   1644a:	4601      	mov	r1, r0
   1644c:	4652      	mov	r2, sl
   1644e:	4640      	mov	r0, r8
   16450:	f008 fc2e 	bl	1ecb0 <clear_event_registrations>
	__asm__ volatile(
   16454:	f38a 8811 	msr	BASEPRI, sl
   16458:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   1645c:	4620      	mov	r0, r4
   1645e:	b002      	add	sp, #8
   16460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   16464:	2300      	movs	r3, #0
   16466:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1646a:	ea56 0305 	orrs.w	r3, r6, r5
   1646e:	d106      	bne.n	1647e <z_impl_k_poll+0x76>
   16470:	f38a 8811 	msr	BASEPRI, sl
   16474:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   16478:	f06f 040a 	mvn.w	r4, #10
   1647c:	e7ee      	b.n	1645c <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1647e:	e9cd 6500 	strd	r6, r5, [sp]
   16482:	4a0d      	ldr	r2, [pc, #52]	; (164b8 <z_impl_k_poll+0xb0>)
   16484:	480d      	ldr	r0, [pc, #52]	; (164bc <z_impl_k_poll+0xb4>)
   16486:	4651      	mov	r1, sl
   16488:	f7ff fcbc 	bl	15e04 <z_pend_curr>
   1648c:	4604      	mov	r4, r0
	__asm__ volatile(
   1648e:	f04f 0320 	mov.w	r3, #32
   16492:	f3ef 8511 	mrs	r5, BASEPRI
   16496:	f383 8812 	msr	BASEPRI_MAX, r3
   1649a:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   1649e:	462a      	mov	r2, r5
   164a0:	4649      	mov	r1, r9
   164a2:	4640      	mov	r0, r8
   164a4:	f008 fc04 	bl	1ecb0 <clear_event_registrations>
	__asm__ volatile(
   164a8:	f385 8811 	msr	BASEPRI, r5
   164ac:	f3bf 8f6f 	isb	sy
	return swap_rc;
   164b0:	e7d4      	b.n	1645c <z_impl_k_poll+0x54>
   164b2:	bf00      	nop
   164b4:	20002abc 	.word	0x20002abc
   164b8:	20000978 	.word	0x20000978
   164bc:	20002fae 	.word	0x20002fae

000164c0 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   164c0:	b538      	push	{r3, r4, r5, lr}
   164c2:	4603      	mov	r3, r0
	__asm__ volatile(
   164c4:	f04f 0220 	mov.w	r2, #32
   164c8:	f3ef 8511 	mrs	r5, BASEPRI
   164cc:	f382 8812 	msr	BASEPRI_MAX, r2
   164d0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   164d4:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   164d6:	2101      	movs	r1, #1
   164d8:	6081      	str	r1, [r0, #8]
	return list->head == list;
   164da:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   164dc:	4283      	cmp	r3, r0
   164de:	d106      	bne.n	164ee <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   164e0:	f385 8811 	msr	BASEPRI, r5
   164e4:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   164e8:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   164ea:	4620      	mov	r0, r4
   164ec:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   164ee:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   164f2:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   164f4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   164f6:	2300      	movs	r3, #0
	node->prev = NULL;
   164f8:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   164fc:	f008 fb7e 	bl	1ebfc <signal_poll_event>
	z_reschedule(&lock, key);
   16500:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   16502:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   16504:	4801      	ldr	r0, [pc, #4]	; (1650c <z_impl_k_poll_signal_raise+0x4c>)
   16506:	f7ff fb2b 	bl	15b60 <z_reschedule>
	return rc;
   1650a:	e7ee      	b.n	164ea <z_impl_k_poll_signal_raise+0x2a>
   1650c:	20002fae 	.word	0x20002fae

00016510 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   16510:	b573      	push	{r0, r1, r4, r5, r6, lr}
   16512:	4606      	mov	r6, r0
   16514:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   16516:	f007 ff77 	bl	1e408 <k_is_in_isr>
   1651a:	b978      	cbnz	r0, 1653c <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   1651c:	4b0b      	ldr	r3, [pc, #44]	; (1654c <z_thread_aligned_alloc+0x3c>)
   1651e:	689b      	ldr	r3, [r3, #8]
   16520:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   16522:	b17c      	cbz	r4, 16544 <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   16524:	1d2a      	adds	r2, r5, #4
   16526:	d209      	bcs.n	1653c <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   16528:	2000      	movs	r0, #0
   1652a:	2100      	movs	r1, #0
   1652c:	e9cd 0100 	strd	r0, r1, [sp]
   16530:	f046 0104 	orr.w	r1, r6, #4
   16534:	4620      	mov	r0, r4
   16536:	f007 fee0 	bl	1e2fa <k_heap_aligned_alloc>
	if (mem == NULL) {
   1653a:	b908      	cbnz	r0, 16540 <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   1653c:	2400      	movs	r4, #0
	}

	return ret;
   1653e:	e001      	b.n	16544 <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
   16540:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   16542:	1d04      	adds	r4, r0, #4
}
   16544:	4620      	mov	r0, r4
   16546:	b002      	add	sp, #8
   16548:	bd70      	pop	{r4, r5, r6, pc}
   1654a:	bf00      	nop
   1654c:	20002abc 	.word	0x20002abc

00016550 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   16550:	4a02      	ldr	r2, [pc, #8]	; (1655c <boot_banner+0xc>)
   16552:	4903      	ldr	r1, [pc, #12]	; (16560 <boot_banner+0x10>)
   16554:	4803      	ldr	r0, [pc, #12]	; (16564 <boot_banner+0x14>)
   16556:	f000 b850 	b.w	165fa <printk>
   1655a:	bf00      	nop
   1655c:	0002035e 	.word	0x0002035e
   16560:	00020f4d 	.word	0x00020f4d
   16564:	00020f5b 	.word	0x00020f5b

00016568 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   16568:	4770      	bx	lr

0001656a <attention_off>:
	board_led_set(false);
   1656a:	2000      	movs	r0, #0
   1656c:	f7ec b900 	b.w	2770 <board_led_set>

00016570 <attention_on>:
	board_led_set(true);
   16570:	2001      	movs	r0, #1
   16572:	f7ec b8fd 	b.w	2770 <board_led_set>

00016576 <sensors_init>:
{
   16576:	b508      	push	{r3, lr}
    scu_ccs811_init();
   16578:	f7ec f990 	bl	289c <scu_ccs811_init>
    scu_hts221_init();
   1657c:	f7ec f9cc 	bl	2918 <scu_hts221_init>
    scu_lis2dh_init();
   16580:	f7ec f9e0 	bl	2944 <scu_lis2dh_init>
}    
   16584:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    scu_lps22hb_init();
   16588:	f7ec b9f4 	b.w	2974 <scu_lps22hb_init>

0001658c <button_cb>:
}
   1658c:	4770      	bx	lr

0001658e <sensor_sample_fetch>:
	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
   1658e:	6883      	ldr	r3, [r0, #8]
   16590:	2139      	movs	r1, #57	; 0x39
   16592:	68db      	ldr	r3, [r3, #12]
   16594:	4718      	bx	r3

00016596 <sensor_channel_get>:
	return api->channel_get(dev, chan, val);
   16596:	6883      	ldr	r3, [r0, #8]
   16598:	691b      	ldr	r3, [r3, #16]
   1659a:	4718      	bx	r3

0001659c <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   1659c:	4603      	mov	r3, r0
   1659e:	b140      	cbz	r0, 165b2 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   165a0:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   165a2:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   165a6:	2a02      	cmp	r2, #2
   165a8:	d006      	beq.n	165b8 <sys_notify_validate+0x1c>
   165aa:	2a03      	cmp	r2, #3
   165ac:	d004      	beq.n	165b8 <sys_notify_validate+0x1c>
   165ae:	2a01      	cmp	r2, #1
   165b0:	d005      	beq.n	165be <sys_notify_validate+0x22>
		return -EINVAL;
   165b2:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   165b6:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   165b8:	681a      	ldr	r2, [r3, #0]
   165ba:	2a00      	cmp	r2, #0
   165bc:	d0f9      	beq.n	165b2 <sys_notify_validate+0x16>
		notify->result = 0;
   165be:	2000      	movs	r0, #0
   165c0:	6098      	str	r0, [r3, #8]
   165c2:	4770      	bx	lr

000165c4 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   165c4:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   165c6:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   165ca:	2a02      	cmp	r2, #2
{
   165cc:	b510      	push	{r4, lr}
   165ce:	4603      	mov	r3, r0
	notify->result = res;
   165d0:	6081      	str	r1, [r0, #8]
	switch (method) {
   165d2:	d00a      	beq.n	165ea <sys_notify_finalize+0x26>
   165d4:	2a03      	cmp	r2, #3
   165d6:	d10b      	bne.n	165f0 <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   165d8:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   165da:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   165dc:	2200      	movs	r2, #0
   165de:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   165e0:	b108      	cbz	r0, 165e6 <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(sig, result);
   165e2:	f7ff ff6d 	bl	164c0 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   165e6:	4620      	mov	r0, r4
   165e8:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   165ea:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   165ec:	2400      	movs	r4, #0
		break;
   165ee:	e7f5      	b.n	165dc <sys_notify_finalize+0x18>
	switch (method) {
   165f0:	2400      	movs	r4, #0
   165f2:	4620      	mov	r0, r4
   165f4:	e7f2      	b.n	165dc <sys_notify_finalize+0x18>

000165f6 <arch_printk_char_out>:
}
   165f6:	2000      	movs	r0, #0
   165f8:	4770      	bx	lr

000165fa <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
   165fa:	b40f      	push	{r0, r1, r2, r3}
   165fc:	b507      	push	{r0, r1, r2, lr}
   165fe:	a904      	add	r1, sp, #16
   16600:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   16604:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   16606:	f7ec f9d9 	bl	29bc <vprintk>

	va_end(ap);
}
   1660a:	b003      	add	sp, #12
   1660c:	f85d eb04 	ldr.w	lr, [sp], #4
   16610:	b004      	add	sp, #16
   16612:	4770      	bx	lr

00016614 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   16614:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   16616:	f013 0307 	ands.w	r3, r3, #7
   1661a:	d105      	bne.n	16628 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   1661c:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   1661e:	2b00      	cmp	r3, #0
   16620:	bf0c      	ite	eq
   16622:	2000      	moveq	r0, #0
   16624:	2003      	movne	r0, #3
   16626:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   16628:	2b02      	cmp	r3, #2
   1662a:	d105      	bne.n	16638 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   1662c:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
   1662e:	2b00      	cmp	r3, #0
   16630:	bf14      	ite	ne
   16632:	2000      	movne	r0, #0
   16634:	2004      	moveq	r0, #4
   16636:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   16638:	2b01      	cmp	r3, #1
   1663a:	d105      	bne.n	16648 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   1663c:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   1663e:	2b00      	cmp	r3, #0
   16640:	bf0c      	ite	eq
   16642:	2000      	moveq	r0, #0
   16644:	2005      	movne	r0, #5
   16646:	4770      	bx	lr
	int evt = EVT_NOP;
   16648:	2000      	movs	r0, #0
}
   1664a:	4770      	bx	lr

0001664c <notify_one>:
{
   1664c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16650:	460d      	mov	r5, r1
   16652:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   16654:	4619      	mov	r1, r3
   16656:	1d28      	adds	r0, r5, #4
{
   16658:	4690      	mov	r8, r2
   1665a:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1665c:	f7ff ffb2 	bl	165c4 <sys_notify_finalize>
	if (cb) {
   16660:	4604      	mov	r4, r0
   16662:	b138      	cbz	r0, 16674 <notify_one+0x28>
		cb(mgr, cli, state, res);
   16664:	4633      	mov	r3, r6
   16666:	4642      	mov	r2, r8
   16668:	4629      	mov	r1, r5
   1666a:	4638      	mov	r0, r7
   1666c:	46a4      	mov	ip, r4
}
   1666e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   16672:	4760      	bx	ip
}
   16674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00016678 <transition_complete>:
{
   16678:	b410      	push	{r4}
	__asm__ volatile(
   1667a:	f04f 0420 	mov.w	r4, #32
   1667e:	f3ef 8211 	mrs	r2, BASEPRI
   16682:	f384 8812 	msr	BASEPRI_MAX, r4
   16686:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   1668a:	6141      	str	r1, [r0, #20]
}
   1668c:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   1668e:	2101      	movs	r1, #1
   16690:	f7ec b9a2 	b.w	29d8 <process_event>

00016694 <validate_args>:
{
   16694:	b510      	push	{r4, lr}
   16696:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   16698:	b140      	cbz	r0, 166ac <validate_args+0x18>
   1669a:	b139      	cbz	r1, 166ac <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   1669c:	1d08      	adds	r0, r1, #4
   1669e:	f7ff ff7d 	bl	1659c <sys_notify_validate>
	if ((rv == 0)
   166a2:	b928      	cbnz	r0, 166b0 <validate_args+0x1c>
	    && ((cli->notify.flags
   166a4:	68a3      	ldr	r3, [r4, #8]
   166a6:	f033 0303 	bics.w	r3, r3, #3
   166aa:	d001      	beq.n	166b0 <validate_args+0x1c>
		rv = -EINVAL;
   166ac:	f06f 0015 	mvn.w	r0, #21
}
   166b0:	bd10      	pop	{r4, pc}

000166b2 <onoff_manager_init>:
{
   166b2:	b538      	push	{r3, r4, r5, lr}
   166b4:	460c      	mov	r4, r1
	if ((mgr == NULL)
   166b6:	4605      	mov	r5, r0
   166b8:	b158      	cbz	r0, 166d2 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   166ba:	b151      	cbz	r1, 166d2 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   166bc:	680b      	ldr	r3, [r1, #0]
   166be:	b143      	cbz	r3, 166d2 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   166c0:	684b      	ldr	r3, [r1, #4]
   166c2:	b133      	cbz	r3, 166d2 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   166c4:	221c      	movs	r2, #28
   166c6:	2100      	movs	r1, #0
   166c8:	f000 fdcf 	bl	1726a <memset>
   166cc:	612c      	str	r4, [r5, #16]
	return 0;
   166ce:	2000      	movs	r0, #0
}
   166d0:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   166d2:	f06f 0015 	mvn.w	r0, #21
   166d6:	e7fb      	b.n	166d0 <onoff_manager_init+0x1e>

000166d8 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   166d8:	b570      	push	{r4, r5, r6, lr}
   166da:	4604      	mov	r4, r0
   166dc:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   166de:	f7ff ffd9 	bl	16694 <validate_args>

	if (rv < 0) {
   166e2:	1e05      	subs	r5, r0, #0
   166e4:	db31      	blt.n	1674a <onoff_request+0x72>
   166e6:	f04f 0320 	mov.w	r3, #32
   166ea:	f3ef 8111 	mrs	r1, BASEPRI
   166ee:	f383 8812 	msr	BASEPRI_MAX, r3
   166f2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   166f6:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   166f8:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   166fa:	f64f 75ff 	movw	r5, #65535	; 0xffff
   166fe:	42ab      	cmp	r3, r5
   16700:	f000 0207 	and.w	r2, r0, #7
   16704:	d02e      	beq.n	16764 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   16706:	2a02      	cmp	r2, #2
   16708:	d10e      	bne.n	16728 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   1670a:	3301      	adds	r3, #1
   1670c:	8363      	strh	r3, [r4, #26]
	rv = state;
   1670e:	4615      	mov	r5, r2
		notify = true;
   16710:	2301      	movs	r3, #1
	__asm__ volatile(
   16712:	f381 8811 	msr	BASEPRI, r1
   16716:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   1671a:	b1b3      	cbz	r3, 1674a <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   1671c:	2300      	movs	r3, #0
   1671e:	4631      	mov	r1, r6
   16720:	4620      	mov	r0, r4
   16722:	f7ff ff93 	bl	1664c <notify_one>
   16726:	e010      	b.n	1674a <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   16728:	0783      	lsls	r3, r0, #30
   1672a:	d001      	beq.n	16730 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   1672c:	2a06      	cmp	r2, #6
   1672e:	d10e      	bne.n	1674e <onoff_request+0x76>
	parent->next = child;
   16730:	2300      	movs	r3, #0
   16732:	6033      	str	r3, [r6, #0]
	return list->tail;
   16734:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   16736:	b993      	cbnz	r3, 1675e <onoff_request+0x86>
	list->head = node;
   16738:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   1673c:	4615      	mov	r5, r2
   1673e:	b962      	cbnz	r2, 1675a <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   16740:	460a      	mov	r2, r1
   16742:	4620      	mov	r0, r4
   16744:	2102      	movs	r1, #2
   16746:	f7ec f947 	bl	29d8 <process_event>
		}
	}

	return rv;
}
   1674a:	4628      	mov	r0, r5
   1674c:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   1674e:	2a05      	cmp	r2, #5
   16750:	bf0c      	ite	eq
   16752:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   16756:	f06f 0504 	mvnne.w	r5, #4
   1675a:	2300      	movs	r3, #0
   1675c:	e7d9      	b.n	16712 <onoff_request+0x3a>
	parent->next = child;
   1675e:	601e      	str	r6, [r3, #0]
	list->tail = node;
   16760:	6066      	str	r6, [r4, #4]
}
   16762:	e7eb      	b.n	1673c <onoff_request+0x64>
		rv = -EAGAIN;
   16764:	f06f 050a 	mvn.w	r5, #10
   16768:	e7f7      	b.n	1675a <onoff_request+0x82>

0001676a <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
   1676a:	b510      	push	{r4, lr}
	__asm__ volatile(
   1676c:	f04f 0320 	mov.w	r3, #32
   16770:	f3ef 8211 	mrs	r2, BASEPRI
   16774:	f383 8812 	msr	BASEPRI_MAX, r3
   16778:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1677c:	8b04      	ldrh	r4, [r0, #24]
   1677e:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
   16782:	2c02      	cmp	r4, #2
   16784:	d00a      	beq.n	1679c <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
   16786:	2c01      	cmp	r4, #1
   16788:	bf0c      	ite	eq
   1678a:	f06f 0004 	mvneq.w	r0, #4
   1678e:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
   16792:	f382 8811 	msr	BASEPRI, r2
   16796:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
   1679a:	e008      	b.n	167ae <onoff_release+0x44>
	mgr->refs -= 1U;
   1679c:	8b43      	ldrh	r3, [r0, #26]
   1679e:	3b01      	subs	r3, #1
   167a0:	b29b      	uxth	r3, r3
   167a2:	8343      	strh	r3, [r0, #26]
	if (stop) {
   167a4:	b923      	cbnz	r3, 167b0 <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
   167a6:	4621      	mov	r1, r4
   167a8:	f7ec f916 	bl	29d8 <process_event>
	int rv = state;
   167ac:	4620      	mov	r0, r4
}
   167ae:	bd10      	pop	{r4, pc}
	int rv = state;
   167b0:	4620      	mov	r0, r4
   167b2:	e7ee      	b.n	16792 <onoff_release+0x28>

000167b4 <onoff_sync_lock>:
	__asm__ volatile(
   167b4:	f04f 0220 	mov.w	r2, #32
   167b8:	f3ef 8311 	mrs	r3, BASEPRI
   167bc:	f382 8812 	msr	BASEPRI_MAX, r2
   167c0:	f3bf 8f6f 	isb	sy
int onoff_sync_lock(struct onoff_sync_service *srv,
		    k_spinlock_key_t *keyp)
{
	*keyp = k_spin_lock(&srv->lock);
	return srv->count;
}
   167c4:	6800      	ldr	r0, [r0, #0]
	*keyp = k_spin_lock(&srv->lock);
   167c6:	600b      	str	r3, [r1, #0]
}
   167c8:	4770      	bx	lr

000167ca <onoff_sync_finalize>:
int onoff_sync_finalize(struct onoff_sync_service *srv,
			k_spinlock_key_t key,
			struct onoff_client *cli,
			int res,
			bool on)
{
   167ca:	b538      	push	{r3, r4, r5, lr}

	/* Clear errors visible when locked.  If they are to be
	 * preserved the caller must finalize with the previous
	 * error code.
	 */
	if (srv->count < 0) {
   167cc:	6804      	ldr	r4, [r0, #0]
   167ce:	2c00      	cmp	r4, #0
		srv->count = 0;
   167d0:	bfbc      	itt	lt
   167d2:	2400      	movlt	r4, #0
   167d4:	6004      	strlt	r4, [r0, #0]
	}
	if (res < 0) {
   167d6:	2b00      	cmp	r3, #0
{
   167d8:	460d      	mov	r5, r1
   167da:	4611      	mov	r1, r2
   167dc:	f89d 2010 	ldrb.w	r2, [sp, #16]
	if (res < 0) {
   167e0:	da0c      	bge.n	167fc <onoff_sync_finalize+0x32>
		srv->count = res;
   167e2:	6003      	str	r3, [r0, #0]
		state = ONOFF_STATE_ERROR;
   167e4:	2201      	movs	r2, #1
		 * callbacks are used only when turning on don't
		 * bother changing it.
		 */
	}

	int rv = srv->count;
   167e6:	6804      	ldr	r4, [r0, #0]
	__asm__ volatile(
   167e8:	f385 8811 	msr	BASEPRI, r5
   167ec:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&srv->lock, key);

	if (cli) {
   167f0:	b111      	cbz	r1, 167f8 <onoff_sync_finalize+0x2e>
		/* Detect service mis-use: onoff does not callback on transition
		 * to off, so no client should have been passed.
		 */
		__ASSERT_NO_MSG(on);
		notify_one(NULL, cli, state, res);
   167f2:	2000      	movs	r0, #0
   167f4:	f7ff ff2a 	bl	1664c <notify_one>
	}

	return rv;
}
   167f8:	4620      	mov	r0, r4
   167fa:	bd38      	pop	{r3, r4, r5, pc}
		srv->count += 1;
   167fc:	6804      	ldr	r4, [r0, #0]
	} else if (on) {
   167fe:	b11a      	cbz	r2, 16808 <onoff_sync_finalize+0x3e>
		srv->count += 1;
   16800:	3401      	adds	r4, #1
		srv->count -= 1;
   16802:	6004      	str	r4, [r0, #0]
	uint32_t state = ONOFF_STATE_ON;
   16804:	2202      	movs	r2, #2
   16806:	e7ee      	b.n	167e6 <onoff_sync_finalize+0x1c>
		srv->count -= 1;
   16808:	3c01      	subs	r4, #1
   1680a:	e7fa      	b.n	16802 <onoff_sync_finalize+0x38>

0001680c <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1680c:	4604      	mov	r4, r0
   1680e:	b508      	push	{r3, lr}
   16810:	4608      	mov	r0, r1
   16812:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   16814:	461a      	mov	r2, r3
   16816:	47a0      	blx	r4
	return z_impl_z_current_get();
   16818:	f7ff fc04 	bl	16024 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   1681c:	f7ed fc86 	bl	412c <z_impl_k_thread_abort>

00016820 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   16820:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   16824:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   16826:	0840      	lsrs	r0, r0, #1
   16828:	4770      	bx	lr

0001682a <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   1682a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1682c:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   1682e:	f7ff fff7 	bl	16820 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   16832:	fab0 f080 	clz	r0, r0
   16836:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   1683a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   1683e:	00ca      	lsls	r2, r1, #3
   16840:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   16844:	1d17      	adds	r7, r2, #4
{
   16846:	460c      	mov	r4, r1
   16848:	3206      	adds	r2, #6
   1684a:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   1684c:	b956      	cbnz	r6, 16864 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   1684e:	2101      	movs	r1, #1
   16850:	fa01 f000 	lsl.w	r0, r1, r0
   16854:	68d9      	ldr	r1, [r3, #12]
   16856:	4301      	orrs	r1, r0
   16858:	60d9      	str	r1, [r3, #12]
		b->next = c;
   1685a:	f8cc 4010 	str.w	r4, [ip, #16]
   1685e:	53dd      	strh	r5, [r3, r7]
   16860:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   16862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   16864:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   16866:	3104      	adds	r1, #4
   16868:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   1686a:	53d8      	strh	r0, [r3, r7]
   1686c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   16870:	529e      	strh	r6, [r3, r2]
   16872:	80c5      	strh	r5, [r0, #6]
   16874:	525d      	strh	r5, [r3, r1]
   16876:	e7f4      	b.n	16862 <free_list_add+0x38>

00016878 <free_list_remove_bidx>:
{
   16878:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   1687a:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   1687e:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   16880:	4299      	cmp	r1, r3
   16882:	f102 0104 	add.w	r1, r2, #4
   16886:	d10a      	bne.n	1689e <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   16888:	2301      	movs	r3, #1
   1688a:	fa03 f202 	lsl.w	r2, r3, r2
   1688e:	68c3      	ldr	r3, [r0, #12]
   16890:	ea23 0302 	bic.w	r3, r3, r2
   16894:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   16896:	2300      	movs	r3, #0
   16898:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   1689c:	bd10      	pop	{r4, pc}
   1689e:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   168a0:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   168a4:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   168a8:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   168ac:	80cb      	strh	r3, [r1, #6]
   168ae:	8082      	strh	r2, [r0, #4]
}
   168b0:	e7f4      	b.n	1689c <free_list_remove_bidx+0x24>

000168b2 <free_list_remove>:
{
   168b2:	b508      	push	{r3, lr}
   168b4:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   168b6:	f7ff ffb3 	bl	16820 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   168ba:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   168be:	f1c2 021f 	rsb	r2, r2, #31
   168c2:	4618      	mov	r0, r3
}
   168c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   168c8:	f7ff bfd6 	b.w	16878 <free_list_remove_bidx>

000168cc <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   168cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   168d0:	fab1 f581 	clz	r5, r1
   168d4:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   168d8:	eb00 0789 	add.w	r7, r0, r9, lsl #2
{
   168dc:	4603      	mov	r3, r0
	if (b->next) {
   168de:	693a      	ldr	r2, [r7, #16]
{
   168e0:	460e      	mov	r6, r1
	if (b->next) {
   168e2:	b1c2      	cbz	r2, 16916 <alloc_chunk+0x4a>
   168e4:	f04f 0803 	mov.w	r8, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   168e8:	693c      	ldr	r4, [r7, #16]
			if (chunk_size(h, c) >= sz) {
   168ea:	4618      	mov	r0, r3
   168ec:	4621      	mov	r1, r4
   168ee:	f7ff ff97 	bl	16820 <chunk_size>
   168f2:	42b0      	cmp	r0, r6
   168f4:	d306      	bcc.n	16904 <alloc_chunk+0x38>
				free_list_remove_bidx(h, c, bi);
   168f6:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   168f8:	4618      	mov	r0, r3
   168fa:	f7ff ffbd 	bl	16878 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   168fe:	4620      	mov	r0, r4
   16900:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   16904:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
		} while (--i && b->next != first);
   16908:	f1b8 0801 	subs.w	r8, r8, #1
   1690c:	88c0      	ldrh	r0, [r0, #6]
			b->next = next_free_chunk(h, c);
   1690e:	6138      	str	r0, [r7, #16]
		} while (--i && b->next != first);
   16910:	d001      	beq.n	16916 <alloc_chunk+0x4a>
   16912:	4282      	cmp	r2, r0
   16914:	d1e8      	bne.n	168e8 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   16916:	f1c5 0220 	rsb	r2, r5, #32
   1691a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1691e:	4094      	lsls	r4, r2
   16920:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   16922:	4014      	ands	r4, r2
   16924:	d0eb      	beq.n	168fe <alloc_chunk+0x32>
		int minbucket = __builtin_ctz(bmask);
   16926:	fa94 f2a4 	rbit	r2, r4
   1692a:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1692e:	1d11      	adds	r1, r2, #4
   16930:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   16934:	4621      	mov	r1, r4
   16936:	e7df      	b.n	168f8 <alloc_chunk+0x2c>

00016938 <merge_chunks>:
{
   16938:	b538      	push	{r3, r4, r5, lr}
   1693a:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1693c:	f7ff ff70 	bl	16820 <chunk_size>
{
   16940:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   16942:	4604      	mov	r4, r0
   16944:	4611      	mov	r1, r2
   16946:	4618      	mov	r0, r3
   16948:	f7ff ff6a 	bl	16820 <chunk_size>
		((uint16_t *)cmem)[f] = val;
   1694c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   16950:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   16952:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   16954:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   16956:	4618      	mov	r0, r3
   16958:	f7ff ff62 	bl	16820 <chunk_size>
	void *cmem = &buf[c];
   1695c:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   1695e:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   16962:	bd38      	pop	{r3, r4, r5, pc}

00016964 <split_chunks>:
{
   16964:	b538      	push	{r3, r4, r5, lr}
   16966:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   16968:	f7ff ff5a 	bl	16820 <chunk_size>
{
   1696c:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   1696e:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   16970:	1a51      	subs	r1, r2, r1
   16972:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   16976:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   16978:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   1697a:	8060      	strh	r0, [r4, #2]
   1697c:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   16980:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   16982:	8044      	strh	r4, [r0, #2]
   16984:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   16988:	4618      	mov	r0, r3
   1698a:	4611      	mov	r1, r2
   1698c:	f7ff ff48 	bl	16820 <chunk_size>
	void *cmem = &buf[c];
   16990:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   16992:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   16996:	bd38      	pop	{r3, r4, r5, pc}

00016998 <free_chunk>:
{
   16998:	b538      	push	{r3, r4, r5, lr}
   1699a:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   1699c:	f7ff ff40 	bl	16820 <chunk_size>
   169a0:	460c      	mov	r4, r1
   169a2:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   169a4:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   169a8:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   169aa:	07da      	lsls	r2, r3, #31
   169ac:	d40a      	bmi.n	169c4 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   169ae:	4628      	mov	r0, r5
   169b0:	f7ff ff7f 	bl	168b2 <free_list_remove>
	return c + chunk_size(h, c);
   169b4:	4621      	mov	r1, r4
   169b6:	4628      	mov	r0, r5
   169b8:	f7ff ff32 	bl	16820 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   169bc:	1822      	adds	r2, r4, r0
   169be:	4628      	mov	r0, r5
   169c0:	f7ff ffba 	bl	16938 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   169c4:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   169c8:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   169ca:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   169ce:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   169d0:	07db      	lsls	r3, r3, #31
   169d2:	d40c      	bmi.n	169ee <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   169d4:	4628      	mov	r0, r5
   169d6:	f7ff ff6c 	bl	168b2 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   169da:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   169de:	4622      	mov	r2, r4
   169e0:	1a61      	subs	r1, r4, r1
   169e2:	4628      	mov	r0, r5
   169e4:	f7ff ffa8 	bl	16938 <merge_chunks>
   169e8:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   169ec:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   169ee:	4621      	mov	r1, r4
   169f0:	4628      	mov	r0, r5
}
   169f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   169f6:	f7ff bf18 	b.w	1682a <free_list_add>

000169fa <sys_heap_free>:
	if (mem == NULL) {
   169fa:	b161      	cbz	r1, 16a16 <sys_heap_free+0x1c>
   169fc:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   169fe:	3904      	subs	r1, #4
   16a00:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   16a02:	f021 0307 	bic.w	r3, r1, #7
   16a06:	4403      	add	r3, r0
	free_chunk(h, c);
   16a08:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   16a0a:	885a      	ldrh	r2, [r3, #2]
   16a0c:	f022 0201 	bic.w	r2, r2, #1
   16a10:	805a      	strh	r2, [r3, #2]
   16a12:	f7ff bfc1 	b.w	16998 <free_chunk>
}
   16a16:	4770      	bx	lr

00016a18 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   16a18:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   16a1a:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   16a1c:	b909      	cbnz	r1, 16a22 <sys_heap_alloc+0xa>
		return NULL;
   16a1e:	2000      	movs	r0, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   16a20:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   16a22:	68ab      	ldr	r3, [r5, #8]
   16a24:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   16a28:	d9f9      	bls.n	16a1e <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   16a2a:	310b      	adds	r1, #11
   16a2c:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   16a2e:	4621      	mov	r1, r4
   16a30:	4628      	mov	r0, r5
   16a32:	f7ff ff4b 	bl	168cc <alloc_chunk>
	if (c == 0U) {
   16a36:	4606      	mov	r6, r0
   16a38:	2800      	cmp	r0, #0
   16a3a:	d0f0      	beq.n	16a1e <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   16a3c:	4601      	mov	r1, r0
   16a3e:	4628      	mov	r0, r5
   16a40:	f7ff feee 	bl	16820 <chunk_size>
   16a44:	42a0      	cmp	r0, r4
   16a46:	d907      	bls.n	16a58 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   16a48:	1932      	adds	r2, r6, r4
   16a4a:	4628      	mov	r0, r5
   16a4c:	f7ff ff8a 	bl	16964 <split_chunks>
		free_list_add(h, c + chunk_sz);
   16a50:	4611      	mov	r1, r2
   16a52:	4628      	mov	r0, r5
   16a54:	f7ff fee9 	bl	1682a <free_list_add>
	void *cmem = &buf[c];
   16a58:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   16a5c:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   16a5e:	8853      	ldrh	r3, [r2, #2]
   16a60:	f043 0301 	orr.w	r3, r3, #1
   16a64:	8053      	strh	r3, [r2, #2]
   16a66:	3004      	adds	r0, #4
	return mem;
   16a68:	e7da      	b.n	16a20 <sys_heap_alloc+0x8>

00016a6a <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   16a6a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16a6e:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   16a70:	424a      	negs	r2, r1
   16a72:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
   16a76:	ea31 0202 	bics.w	r2, r1, r2
{
   16a7a:	4603      	mov	r3, r0
	if (align != rew) {
   16a7c:	d00a      	beq.n	16a94 <sys_heap_aligned_alloc+0x2a>
		return false;
   16a7e:	2f04      	cmp	r7, #4
   16a80:	463a      	mov	r2, r7
   16a82:	46b9      	mov	r9, r7
   16a84:	bf28      	it	cs
   16a86:	2204      	movcs	r2, #4
		align -= rew;
   16a88:	1bcf      	subs	r7, r1, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   16a8a:	b974      	cbnz	r4, 16aaa <sys_heap_aligned_alloc+0x40>
		return NULL;
   16a8c:	2500      	movs	r5, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   16a8e:	4628      	mov	r0, r5
   16a90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   16a94:	2904      	cmp	r1, #4
   16a96:	d804      	bhi.n	16aa2 <sys_heap_aligned_alloc+0x38>
			return sys_heap_alloc(heap, bytes);
   16a98:	4621      	mov	r1, r4
}
   16a9a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   16a9e:	f7ff bfbb 	b.w	16a18 <sys_heap_alloc>
		rew = 0;
   16aa2:	f04f 0900 	mov.w	r9, #0
		gap = chunk_header_bytes(h);
   16aa6:	2204      	movs	r2, #4
   16aa8:	e7ef      	b.n	16a8a <sys_heap_aligned_alloc+0x20>
	struct z_heap *h = heap->heap;
   16aaa:	681e      	ldr	r6, [r3, #0]
	if (bytes == 0 || size_too_big(h, bytes)) {
   16aac:	68b3      	ldr	r3, [r6, #8]
   16aae:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   16ab2:	d9eb      	bls.n	16a8c <sys_heap_aligned_alloc+0x22>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   16ab4:	f104 010b 	add.w	r1, r4, #11
   16ab8:	4439      	add	r1, r7
   16aba:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   16abc:	08c9      	lsrs	r1, r1, #3
   16abe:	4630      	mov	r0, r6
   16ac0:	f7ff ff04 	bl	168cc <alloc_chunk>
	if (c0 == 0) {
   16ac4:	4680      	mov	r8, r0
   16ac6:	2800      	cmp	r0, #0
   16ac8:	d0e0      	beq.n	16a8c <sys_heap_aligned_alloc+0x22>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   16aca:	f109 0504 	add.w	r5, r9, #4
   16ace:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   16ad2:	1e7b      	subs	r3, r7, #1
   16ad4:	4435      	add	r5, r6
   16ad6:	441d      	add	r5, r3
   16ad8:	427f      	negs	r7, r7
   16ada:	403d      	ands	r5, r7
   16adc:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   16ae0:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   16ae2:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   16ae4:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   16ae6:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   16ae8:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   16aec:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   16aee:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   16af2:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   16af6:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   16afa:	d208      	bcs.n	16b0e <sys_heap_aligned_alloc+0xa4>
		split_chunks(h, c0, c);
   16afc:	4601      	mov	r1, r0
   16afe:	463a      	mov	r2, r7
   16b00:	4630      	mov	r0, r6
   16b02:	f7ff ff2f 	bl	16964 <split_chunks>
		free_list_add(h, c0);
   16b06:	4641      	mov	r1, r8
   16b08:	4630      	mov	r0, r6
   16b0a:	f7ff fe8e 	bl	1682a <free_list_add>
	return c + chunk_size(h, c);
   16b0e:	4639      	mov	r1, r7
   16b10:	4630      	mov	r0, r6
   16b12:	f7ff fe85 	bl	16820 <chunk_size>
   16b16:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   16b18:	4284      	cmp	r4, r0
   16b1a:	d207      	bcs.n	16b2c <sys_heap_aligned_alloc+0xc2>
		split_chunks(h, c, c_end);
   16b1c:	4630      	mov	r0, r6
   16b1e:	4622      	mov	r2, r4
   16b20:	f7ff ff20 	bl	16964 <split_chunks>
		free_list_add(h, c_end);
   16b24:	4621      	mov	r1, r4
   16b26:	4630      	mov	r0, r6
   16b28:	f7ff fe7f 	bl	1682a <free_list_add>
	void *cmem = &buf[c];
   16b2c:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   16b30:	8873      	ldrh	r3, [r6, #2]
   16b32:	f043 0301 	orr.w	r3, r3, #1
   16b36:	8073      	strh	r3, [r6, #2]
   16b38:	e7a9      	b.n	16a8e <sys_heap_aligned_alloc+0x24>

00016b3a <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   16b3a:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   16b3c:	1dcb      	adds	r3, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   16b3e:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   16b40:	f023 0307 	bic.w	r3, r3, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   16b44:	f021 0107 	bic.w	r1, r1, #7
{
   16b48:	b4f0      	push	{r4, r5, r6, r7}
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   16b4a:	1acd      	subs	r5, r1, r3
   16b4c:	08ea      	lsrs	r2, r5, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   16b4e:	6003      	str	r3, [r0, #0]
	return 31 - __builtin_clz(usable_sz);
   16b50:	fab2 f082 	clz	r0, r2
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   16b54:	f1c0 0424 	rsb	r4, r0, #36	; 0x24
   16b58:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   16b5a:	3407      	adds	r4, #7
	h->avail_buckets = 0;
   16b5c:	2600      	movs	r6, #0
   16b5e:	08e1      	lsrs	r1, r4, #3
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   16b60:	f1c0 0020 	rsb	r0, r0, #32
   16b64:	f103 0410 	add.w	r4, r3, #16
	h->end_chunk = heap_sz;
   16b68:	609a      	str	r2, [r3, #8]
	h->avail_buckets = 0;
   16b6a:	60de      	str	r6, [r3, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   16b6c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   16b70:	4284      	cmp	r4, r0
   16b72:	d118      	bne.n	16ba6 <sys_heap_init+0x6c>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   16b74:	0048      	lsls	r0, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   16b76:	f040 0001 	orr.w	r0, r0, #1
   16b7a:	8058      	strh	r0, [r3, #2]
		((uint16_t *)cmem)[f] = val;
   16b7c:	eb03 04c1 	add.w	r4, r3, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   16b80:	1a50      	subs	r0, r2, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   16b82:	0047      	lsls	r7, r0, #1
		((uint16_t *)cmem)[f] = val;
   16b84:	801e      	strh	r6, [r3, #0]
   16b86:	8067      	strh	r7, [r4, #2]
   16b88:	195c      	adds	r4, r3, r5
   16b8a:	f823 1031 	strh.w	r1, [r3, r1, lsl #3]
	void *cmem = &buf[c];
   16b8e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
		((uint16_t *)cmem)[f] = val;
   16b92:	8066      	strh	r6, [r4, #2]
   16b94:	5358      	strh	r0, [r3, r5]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   16b96:	8850      	ldrh	r0, [r2, #2]
   16b98:	f040 0001 	orr.w	r0, r0, #1
   16b9c:	8050      	strh	r0, [r2, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   16b9e:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   16ba0:	4618      	mov	r0, r3
   16ba2:	f7ff be42 	b.w	1682a <free_list_add>
		h->buckets[i].next = 0;
   16ba6:	f844 6b04 	str.w	r6, [r4], #4
	for (int i = 0; i < nb_buckets; i++) {
   16baa:	e7e1      	b.n	16b70 <sys_heap_init+0x36>

00016bac <_ldiv5>:
	uint32_t v_lo = *v;
   16bac:	e9d0 2100 	ldrd	r2, r1, [r0]
{
   16bb0:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
   16bb2:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
   16bb6:	fba2 2403 	umull	r2, r4, r2, r3
   16bba:	18d5      	adds	r5, r2, r3
   16bbc:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
   16bc0:	fba1 1303 	umull	r1, r3, r1, r3
   16bc4:	1852      	adds	r2, r2, r1
   16bc6:	eb44 0403 	adc.w	r4, r4, r3
   16bca:	1952      	adds	r2, r2, r5
   16bcc:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
   16bd0:	1889      	adds	r1, r1, r2
   16bd2:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
   16bd6:	e9c0 1300 	strd	r1, r3, [r0]
}
   16bda:	bd30      	pop	{r4, r5, pc}

00016bdc <_get_digit>:
	if (*digit_count > 0) {
   16bdc:	680a      	ldr	r2, [r1, #0]
   16bde:	2a00      	cmp	r2, #0
{
   16be0:	b510      	push	{r4, lr}
   16be2:	4603      	mov	r3, r0
	if (*digit_count > 0) {
   16be4:	dd0f      	ble.n	16c06 <_get_digit+0x2a>
		--*digit_count;
   16be6:	3a01      	subs	r2, #1
   16be8:	600a      	str	r2, [r1, #0]
		*fr *= 10U;
   16bea:	681a      	ldr	r2, [r3, #0]
   16bec:	6844      	ldr	r4, [r0, #4]
   16bee:	200a      	movs	r0, #10
   16bf0:	fba2 1200 	umull	r1, r2, r2, r0
   16bf4:	fb00 2204 	mla	r2, r0, r4, r2
		rval = ((*fr >> 60) & 0xF) + '0';
   16bf8:	0f10      	lsrs	r0, r2, #28
		*fr &= (BIT64(60) - 1U);
   16bfa:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
   16bfe:	e9c3 1200 	strd	r1, r2, [r3]
		rval = ((*fr >> 60) & 0xF) + '0';
   16c02:	3030      	adds	r0, #48	; 0x30
}
   16c04:	bd10      	pop	{r4, pc}
		rval = '0';
   16c06:	2030      	movs	r0, #48	; 0x30
   16c08:	e7fc      	b.n	16c04 <_get_digit+0x28>

00016c0a <encode_uint>:
{
   16c0a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c0e:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   16c10:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
   16c12:	2b6f      	cmp	r3, #111	; 0x6f
{
   16c14:	4680      	mov	r8, r0
   16c16:	460f      	mov	r7, r1
   16c18:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   16c1a:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   16c1e:	d029      	beq.n	16c74 <encode_uint+0x6a>
   16c20:	d824      	bhi.n	16c6c <encode_uint+0x62>
		return 16;
   16c22:	2b58      	cmp	r3, #88	; 0x58
   16c24:	bf14      	ite	ne
   16c26:	260a      	movne	r6, #10
   16c28:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
   16c2a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   16c2e:	4632      	mov	r2, r6
   16c30:	2300      	movs	r3, #0
   16c32:	4640      	mov	r0, r8
   16c34:	4639      	mov	r1, r7
   16c36:	f7e9 fec1 	bl	9bc <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   16c3a:	2a09      	cmp	r2, #9
   16c3c:	b2d4      	uxtb	r4, r2
   16c3e:	d81e      	bhi.n	16c7e <encode_uint+0x74>
   16c40:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   16c42:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   16c44:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   16c46:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   16c4a:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   16c4e:	d301      	bcc.n	16c54 <encode_uint+0x4a>
   16c50:	45d1      	cmp	r9, sl
   16c52:	d811      	bhi.n	16c78 <encode_uint+0x6e>
	if (conv->flag_hash) {
   16c54:	782b      	ldrb	r3, [r5, #0]
   16c56:	069b      	lsls	r3, r3, #26
   16c58:	d505      	bpl.n	16c66 <encode_uint+0x5c>
		if (radix == 8) {
   16c5a:	2e08      	cmp	r6, #8
   16c5c:	d115      	bne.n	16c8a <encode_uint+0x80>
			conv->altform_0 = true;
   16c5e:	78ab      	ldrb	r3, [r5, #2]
   16c60:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   16c64:	70ab      	strb	r3, [r5, #2]
}
   16c66:	4648      	mov	r0, r9
   16c68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   16c6c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   16c70:	2b70      	cmp	r3, #112	; 0x70
   16c72:	e7d7      	b.n	16c24 <encode_uint+0x1a>
	switch (specifier) {
   16c74:	2608      	movs	r6, #8
   16c76:	e7d8      	b.n	16c2a <encode_uint+0x20>
		value /= radix;
   16c78:	4680      	mov	r8, r0
   16c7a:	460f      	mov	r7, r1
   16c7c:	e7d7      	b.n	16c2e <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   16c7e:	f1bb 0f19 	cmp.w	fp, #25
   16c82:	bf94      	ite	ls
   16c84:	3437      	addls	r4, #55	; 0x37
   16c86:	3457      	addhi	r4, #87	; 0x57
   16c88:	e7db      	b.n	16c42 <encode_uint+0x38>
		} else if (radix == 16) {
   16c8a:	2e10      	cmp	r6, #16
   16c8c:	d1eb      	bne.n	16c66 <encode_uint+0x5c>
			conv->altform_0c = true;
   16c8e:	78ab      	ldrb	r3, [r5, #2]
   16c90:	f043 0310 	orr.w	r3, r3, #16
   16c94:	e7e6      	b.n	16c64 <encode_uint+0x5a>

00016c96 <outs>:
{
   16c96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16c9a:	4607      	mov	r7, r0
   16c9c:	4688      	mov	r8, r1
   16c9e:	4615      	mov	r5, r2
   16ca0:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   16ca2:	4614      	mov	r4, r2
   16ca4:	42b4      	cmp	r4, r6
   16ca6:	eba4 0005 	sub.w	r0, r4, r5
   16caa:	d302      	bcc.n	16cb2 <outs+0x1c>
   16cac:	b93e      	cbnz	r6, 16cbe <outs+0x28>
   16cae:	7823      	ldrb	r3, [r4, #0]
   16cb0:	b12b      	cbz	r3, 16cbe <outs+0x28>
		int rc = out((int)*sp++, ctx);
   16cb2:	f814 0b01 	ldrb.w	r0, [r4], #1
   16cb6:	4641      	mov	r1, r8
   16cb8:	47b8      	blx	r7
		if (rc < 0) {
   16cba:	2800      	cmp	r0, #0
   16cbc:	daf2      	bge.n	16ca4 <outs+0xe>
}
   16cbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00016cc2 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   16cc2:	4770      	bx	lr

00016cc4 <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                        uint16_t len)
{
   16cc4:	b410      	push	{r4}
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
   16cc6:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
   16cca:	46a4      	mov	ip, r4

  return ret;
}
   16ccc:	bc10      	pop	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
   16cce:	4760      	bx	ip

00016cd0 <hts221_write_reg>:
  *
  */
int32_t hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
   16cd0:	b410      	push	{r4}
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
   16cd2:	6804      	ldr	r4, [r0, #0]
   16cd4:	6880      	ldr	r0, [r0, #8]
   16cd6:	46a4      	mov	ip, r4

  return ret;
}
   16cd8:	bc10      	pop	{r4}
  ret = ctx->write_reg(ctx->handle, reg, data, len);
   16cda:	4760      	bx	ip

00016cdc <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
   16cdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   16cde:	2301      	movs	r3, #1
{
   16ce0:	460d      	mov	r5, r1
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   16ce2:	aa01      	add	r2, sp, #4
   16ce4:	2120      	movs	r1, #32
{
   16ce6:	4604      	mov	r4, r0
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   16ce8:	f7ff ffec 	bl	16cc4 <hts221_read_reg>

  if (ret == 0)
   16cec:	b958      	cbnz	r0, 16d06 <hts221_data_rate_set+0x2a>
  {
    reg.odr = (uint8_t)val;
   16cee:	f89d 3004 	ldrb.w	r3, [sp, #4]
   16cf2:	f365 0301 	bfi	r3, r5, #0, #2
   16cf6:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   16cfa:	aa01      	add	r2, sp, #4
   16cfc:	2301      	movs	r3, #1
   16cfe:	2120      	movs	r1, #32
   16d00:	4620      	mov	r0, r4
   16d02:	f7ff ffe5 	bl	16cd0 <hts221_write_reg>
  }

  return ret;
}
   16d06:	b003      	add	sp, #12
   16d08:	bd30      	pop	{r4, r5, pc}

00016d0a <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
   16d0a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   16d0c:	2301      	movs	r3, #1
{
   16d0e:	460d      	mov	r5, r1
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   16d10:	aa01      	add	r2, sp, #4
   16d12:	2120      	movs	r1, #32
{
   16d14:	4604      	mov	r4, r0
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   16d16:	f7ff ffd5 	bl	16cc4 <hts221_read_reg>

  if (ret == 0)
   16d1a:	b958      	cbnz	r0, 16d34 <hts221_block_data_update_set+0x2a>
  {
    reg.bdu = val;
   16d1c:	f89d 3004 	ldrb.w	r3, [sp, #4]
   16d20:	f365 0382 	bfi	r3, r5, #2, #1
   16d24:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   16d28:	aa01      	add	r2, sp, #4
   16d2a:	2301      	movs	r3, #1
   16d2c:	2120      	movs	r1, #32
   16d2e:	4620      	mov	r0, r4
   16d30:	f7ff ffce 	bl	16cd0 <hts221_write_reg>
  }

  return ret;
}
   16d34:	b003      	add	sp, #12
   16d36:	bd30      	pop	{r4, r5, pc}

00016d38 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
   16d38:	460a      	mov	r2, r1
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
   16d3a:	2301      	movs	r3, #1
   16d3c:	210f      	movs	r1, #15
   16d3e:	f7ff bfc1 	b.w	16cc4 <hts221_read_reg>

00016d42 <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
   16d42:	b537      	push	{r0, r1, r2, r4, r5, lr}
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   16d44:	2301      	movs	r3, #1
{
   16d46:	460d      	mov	r5, r1
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   16d48:	aa01      	add	r2, sp, #4
   16d4a:	2120      	movs	r1, #32
{
   16d4c:	4604      	mov	r4, r0
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   16d4e:	f7ff ffb9 	bl	16cc4 <hts221_read_reg>

  if (ret == 0)
   16d52:	b958      	cbnz	r0, 16d6c <hts221_power_on_set+0x2a>
  {
    reg.pd = val;
   16d54:	f89d 3004 	ldrb.w	r3, [sp, #4]
   16d58:	f365 13c7 	bfi	r3, r5, #7, #1
   16d5c:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   16d60:	aa01      	add	r2, sp, #4
   16d62:	2301      	movs	r3, #1
   16d64:	2120      	movs	r1, #32
   16d66:	4620      	mov	r0, r4
   16d68:	f7ff ffb2 	bl	16cd0 <hts221_write_reg>
  }

  return ret;
}
   16d6c:	b003      	add	sp, #12
   16d6e:	bd30      	pop	{r4, r5, pc}

00016d70 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   16d70:	b538      	push	{r3, r4, r5, lr}
   16d72:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   16d74:	42ab      	cmp	r3, r5
{
   16d76:	4611      	mov	r1, r2
   16d78:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   16d7a:	d804      	bhi.n	16d86 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   16d7c:	461a      	mov	r2, r3
   16d7e:	f000 fa69 	bl	17254 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   16d82:	4620      	mov	r0, r4
   16d84:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   16d86:	2400      	movs	r4, #0
   16d88:	e7fb      	b.n	16d82 <_copy+0x12>

00016d8a <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   16d8a:	f000 ba6e 	b.w	1726a <memset>

00016d8e <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   16d8e:	09c3      	lsrs	r3, r0, #7
   16d90:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   16d94:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   16d98:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   16d9c:	b2c0      	uxtb	r0, r0
   16d9e:	4770      	bx	lr

00016da0 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   16da0:	78cb      	ldrb	r3, [r1, #3]
   16da2:	7802      	ldrb	r2, [r0, #0]
   16da4:	4053      	eors	r3, r2
   16da6:	7003      	strb	r3, [r0, #0]
   16da8:	884b      	ldrh	r3, [r1, #2]
   16daa:	7842      	ldrb	r2, [r0, #1]
   16dac:	4053      	eors	r3, r2
   16dae:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   16db0:	680a      	ldr	r2, [r1, #0]
   16db2:	7883      	ldrb	r3, [r0, #2]
   16db4:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   16db8:	7083      	strb	r3, [r0, #2]
   16dba:	680a      	ldr	r2, [r1, #0]
   16dbc:	78c3      	ldrb	r3, [r0, #3]
   16dbe:	4053      	eors	r3, r2
   16dc0:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   16dc2:	79cb      	ldrb	r3, [r1, #7]
   16dc4:	7902      	ldrb	r2, [r0, #4]
   16dc6:	4053      	eors	r3, r2
   16dc8:	7103      	strb	r3, [r0, #4]
   16dca:	88cb      	ldrh	r3, [r1, #6]
   16dcc:	7942      	ldrb	r2, [r0, #5]
   16dce:	4053      	eors	r3, r2
   16dd0:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   16dd2:	684a      	ldr	r2, [r1, #4]
   16dd4:	7983      	ldrb	r3, [r0, #6]
   16dd6:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   16dda:	7183      	strb	r3, [r0, #6]
   16ddc:	684a      	ldr	r2, [r1, #4]
   16dde:	79c3      	ldrb	r3, [r0, #7]
   16de0:	4053      	eors	r3, r2
   16de2:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   16de4:	7acb      	ldrb	r3, [r1, #11]
   16de6:	7a02      	ldrb	r2, [r0, #8]
   16de8:	4053      	eors	r3, r2
   16dea:	7203      	strb	r3, [r0, #8]
   16dec:	7a42      	ldrb	r2, [r0, #9]
   16dee:	894b      	ldrh	r3, [r1, #10]
   16df0:	4053      	eors	r3, r2
   16df2:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   16df4:	688a      	ldr	r2, [r1, #8]
   16df6:	7a83      	ldrb	r3, [r0, #10]
   16df8:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   16dfc:	7283      	strb	r3, [r0, #10]
   16dfe:	688a      	ldr	r2, [r1, #8]
   16e00:	7ac3      	ldrb	r3, [r0, #11]
   16e02:	4053      	eors	r3, r2
   16e04:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   16e06:	7bcb      	ldrb	r3, [r1, #15]
   16e08:	7b02      	ldrb	r2, [r0, #12]
   16e0a:	4053      	eors	r3, r2
   16e0c:	7303      	strb	r3, [r0, #12]
   16e0e:	89cb      	ldrh	r3, [r1, #14]
   16e10:	7b42      	ldrb	r2, [r0, #13]
   16e12:	4053      	eors	r3, r2
   16e14:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   16e16:	68ca      	ldr	r2, [r1, #12]
   16e18:	7b83      	ldrb	r3, [r0, #14]
   16e1a:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   16e1e:	7383      	strb	r3, [r0, #14]
   16e20:	68ca      	ldr	r2, [r1, #12]
   16e22:	7bc3      	ldrb	r3, [r0, #15]
   16e24:	4053      	eors	r3, r2
   16e26:	73c3      	strb	r3, [r0, #15]
}
   16e28:	4770      	bx	lr

00016e2a <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   16e2a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   16e2c:	7802      	ldrb	r2, [r0, #0]
   16e2e:	f88d 2000 	strb.w	r2, [sp]
   16e32:	7942      	ldrb	r2, [r0, #5]
   16e34:	f88d 2001 	strb.w	r2, [sp, #1]
   16e38:	7a82      	ldrb	r2, [r0, #10]
   16e3a:	f88d 2002 	strb.w	r2, [sp, #2]
   16e3e:	7bc2      	ldrb	r2, [r0, #15]
   16e40:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   16e44:	7902      	ldrb	r2, [r0, #4]
   16e46:	f88d 2004 	strb.w	r2, [sp, #4]
   16e4a:	7a42      	ldrb	r2, [r0, #9]
   16e4c:	f88d 2005 	strb.w	r2, [sp, #5]
   16e50:	7b82      	ldrb	r2, [r0, #14]
   16e52:	f88d 2006 	strb.w	r2, [sp, #6]
   16e56:	78c2      	ldrb	r2, [r0, #3]
   16e58:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   16e5c:	7a02      	ldrb	r2, [r0, #8]
   16e5e:	f88d 2008 	strb.w	r2, [sp, #8]
   16e62:	7b42      	ldrb	r2, [r0, #13]
   16e64:	f88d 2009 	strb.w	r2, [sp, #9]
   16e68:	7882      	ldrb	r2, [r0, #2]
   16e6a:	f88d 200a 	strb.w	r2, [sp, #10]
   16e6e:	79c2      	ldrb	r2, [r0, #7]
   16e70:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   16e74:	7b02      	ldrb	r2, [r0, #12]
   16e76:	f88d 200c 	strb.w	r2, [sp, #12]
   16e7a:	7842      	ldrb	r2, [r0, #1]
   16e7c:	7ac3      	ldrb	r3, [r0, #11]
   16e7e:	f88d 200d 	strb.w	r2, [sp, #13]
   16e82:	7982      	ldrb	r2, [r0, #6]
   16e84:	f88d 200e 	strb.w	r2, [sp, #14]
   16e88:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   16e8c:	2310      	movs	r3, #16
   16e8e:	466a      	mov	r2, sp
   16e90:	4619      	mov	r1, r3
   16e92:	f7ff ff6d 	bl	16d70 <_copy>
}
   16e96:	b005      	add	sp, #20
   16e98:	f85d fb04 	ldr.w	pc, [sp], #4

00016e9c <mult_row_column>:
{
   16e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16e9e:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   16ea0:	7808      	ldrb	r0, [r1, #0]
{
   16ea2:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   16ea4:	f7ff ff73 	bl	16d8e <_double_byte>
   16ea8:	4605      	mov	r5, r0
   16eaa:	7860      	ldrb	r0, [r4, #1]
   16eac:	f7ff ff6f 	bl	16d8e <_double_byte>
   16eb0:	78a2      	ldrb	r2, [r4, #2]
   16eb2:	7863      	ldrb	r3, [r4, #1]
   16eb4:	4053      	eors	r3, r2
   16eb6:	78e2      	ldrb	r2, [r4, #3]
   16eb8:	4053      	eors	r3, r2
   16eba:	405d      	eors	r5, r3
   16ebc:	4045      	eors	r5, r0
   16ebe:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   16ec0:	7860      	ldrb	r0, [r4, #1]
   16ec2:	7827      	ldrb	r7, [r4, #0]
   16ec4:	f7ff ff63 	bl	16d8e <_double_byte>
   16ec8:	4605      	mov	r5, r0
   16eca:	78a0      	ldrb	r0, [r4, #2]
   16ecc:	f7ff ff5f 	bl	16d8e <_double_byte>
   16ed0:	78a3      	ldrb	r3, [r4, #2]
   16ed2:	405f      	eors	r7, r3
   16ed4:	78e3      	ldrb	r3, [r4, #3]
   16ed6:	405f      	eors	r7, r3
   16ed8:	407d      	eors	r5, r7
   16eda:	4045      	eors	r5, r0
   16edc:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   16ede:	78a0      	ldrb	r0, [r4, #2]
   16ee0:	7865      	ldrb	r5, [r4, #1]
   16ee2:	7827      	ldrb	r7, [r4, #0]
   16ee4:	f7ff ff53 	bl	16d8e <_double_byte>
   16ee8:	406f      	eors	r7, r5
   16eea:	4605      	mov	r5, r0
   16eec:	78e0      	ldrb	r0, [r4, #3]
   16eee:	f7ff ff4e 	bl	16d8e <_double_byte>
   16ef2:	78e3      	ldrb	r3, [r4, #3]
   16ef4:	405f      	eors	r7, r3
   16ef6:	407d      	eors	r5, r7
   16ef8:	4045      	eors	r5, r0
   16efa:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   16efc:	7820      	ldrb	r0, [r4, #0]
   16efe:	f7ff ff46 	bl	16d8e <_double_byte>
   16f02:	7863      	ldrb	r3, [r4, #1]
   16f04:	7825      	ldrb	r5, [r4, #0]
   16f06:	405d      	eors	r5, r3
   16f08:	78a3      	ldrb	r3, [r4, #2]
   16f0a:	405d      	eors	r5, r3
   16f0c:	4045      	eors	r5, r0
   16f0e:	78e0      	ldrb	r0, [r4, #3]
   16f10:	f7ff ff3d 	bl	16d8e <_double_byte>
   16f14:	b2ed      	uxtb	r5, r5
   16f16:	4045      	eors	r5, r0
   16f18:	70f5      	strb	r5, [r6, #3]
}
   16f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00016f1c <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   16f1c:	b570      	push	{r4, r5, r6, lr}
   16f1e:	4614      	mov	r4, r2
   16f20:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   16f22:	4605      	mov	r5, r0
   16f24:	2800      	cmp	r0, #0
   16f26:	d049      	beq.n	16fbc <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   16f28:	2900      	cmp	r1, #0
   16f2a:	d049      	beq.n	16fc0 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   16f2c:	2a00      	cmp	r2, #0
   16f2e:	d049      	beq.n	16fc4 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   16f30:	2310      	movs	r3, #16
   16f32:	460a      	mov	r2, r1
   16f34:	4668      	mov	r0, sp
   16f36:	4619      	mov	r1, r3
   16f38:	f7ff ff1a 	bl	16d70 <_copy>
	add_round_key(state, s->words);
   16f3c:	4621      	mov	r1, r4
   16f3e:	4668      	mov	r0, sp
   16f40:	f7ff ff2e 	bl	16da0 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   16f44:	3410      	adds	r4, #16
   16f46:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   16f4a:	4668      	mov	r0, sp
   16f4c:	f7ec fe0a 	bl	3b64 <sub_bytes>
		shift_rows(state);
   16f50:	4668      	mov	r0, sp
   16f52:	f7ff ff6a 	bl	16e2a <shift_rows>
	mult_row_column(t, s);
   16f56:	4669      	mov	r1, sp
   16f58:	a804      	add	r0, sp, #16
   16f5a:	f7ff ff9f 	bl	16e9c <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   16f5e:	a901      	add	r1, sp, #4
   16f60:	a805      	add	r0, sp, #20
   16f62:	f7ff ff9b 	bl	16e9c <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   16f66:	a902      	add	r1, sp, #8
   16f68:	a806      	add	r0, sp, #24
   16f6a:	f7ff ff97 	bl	16e9c <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   16f6e:	a903      	add	r1, sp, #12
   16f70:	a807      	add	r0, sp, #28
   16f72:	f7ff ff93 	bl	16e9c <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   16f76:	2310      	movs	r3, #16
   16f78:	4619      	mov	r1, r3
   16f7a:	eb0d 0203 	add.w	r2, sp, r3
   16f7e:	4668      	mov	r0, sp
   16f80:	f7ff fef6 	bl	16d70 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   16f84:	4621      	mov	r1, r4
   16f86:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   16f88:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   16f8a:	f7ff ff09 	bl	16da0 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   16f8e:	42a6      	cmp	r6, r4
   16f90:	d1db      	bne.n	16f4a <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   16f92:	f7ec fde7 	bl	3b64 <sub_bytes>
	shift_rows(state);
   16f96:	4668      	mov	r0, sp
   16f98:	f7ff ff47 	bl	16e2a <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   16f9c:	4631      	mov	r1, r6
   16f9e:	4668      	mov	r0, sp
   16fa0:	f7ff fefe 	bl	16da0 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   16fa4:	2310      	movs	r3, #16
   16fa6:	4619      	mov	r1, r3
   16fa8:	466a      	mov	r2, sp
   16faa:	4628      	mov	r0, r5
   16fac:	f7ff fee0 	bl	16d70 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   16fb0:	4668      	mov	r0, sp
   16fb2:	2210      	movs	r2, #16
   16fb4:	2100      	movs	r1, #0
   16fb6:	f7ff fee8 	bl	16d8a <_set>

	return TC_CRYPTO_SUCCESS;
   16fba:	2001      	movs	r0, #1
}
   16fbc:	b008      	add	sp, #32
   16fbe:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   16fc0:	4608      	mov	r0, r1
   16fc2:	e7fb      	b.n	16fbc <tc_aes_encrypt+0xa0>
   16fc4:	4610      	mov	r0, r2
   16fc6:	e7f9      	b.n	16fbc <tc_aes_encrypt+0xa0>

00016fc8 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   16fc8:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   16fca:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   16fcc:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   16fce:	f912 3b10 	ldrsb.w	r3, [r2], #16
   16fd2:	2b00      	cmp	r3, #0
   16fd4:	bfb4      	ite	lt
   16fd6:	2387      	movlt	r3, #135	; 0x87
   16fd8:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   16fda:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   16fde:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   16fe2:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   16fe4:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   16fe8:	d002      	beq.n	16ff0 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   16fea:	7813      	ldrb	r3, [r2, #0]
   16fec:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   16fee:	e7f4      	b.n	16fda <gf_double+0x12>
	}
}
   16ff0:	bd10      	pop	{r4, pc}

00016ff2 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   16ff2:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   16ff4:	b120      	cbz	r0, 17000 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   16ff6:	2258      	movs	r2, #88	; 0x58
   16ff8:	2100      	movs	r1, #0
   16ffa:	f7ff fec6 	bl	16d8a <_set>
   16ffe:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   17000:	bd08      	pop	{r3, pc}

00017002 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   17002:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   17004:	4604      	mov	r4, r0
   17006:	b188      	cbz	r0, 1702c <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   17008:	2210      	movs	r2, #16
   1700a:	2100      	movs	r1, #0
   1700c:	f7ff febd 	bl	16d8a <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   17010:	2210      	movs	r2, #16
   17012:	f104 0030 	add.w	r0, r4, #48	; 0x30
   17016:	2100      	movs	r1, #0
   17018:	f7ff feb7 	bl	16d8a <_set>
	s->leftover_offset = 0;
   1701c:	2300      	movs	r3, #0
   1701e:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   17020:	2200      	movs	r2, #0
   17022:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   17026:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   1702a:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1702c:	bd10      	pop	{r4, pc}

0001702e <tc_cmac_setup>:
{
   1702e:	b570      	push	{r4, r5, r6, lr}
   17030:	460d      	mov	r5, r1
   17032:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   17034:	4604      	mov	r4, r0
   17036:	b310      	cbz	r0, 1707e <tc_cmac_setup+0x50>
   17038:	b311      	cbz	r1, 17080 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   1703a:	2258      	movs	r2, #88	; 0x58
   1703c:	2100      	movs	r1, #0
   1703e:	f7ff fea4 	bl	16d8a <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   17042:	4629      	mov	r1, r5
	s->sched = sched;
   17044:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   17046:	4630      	mov	r0, r6
   17048:	f7ec fd98 	bl	3b7c <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1704c:	2210      	movs	r2, #16
   1704e:	2100      	movs	r1, #0
   17050:	4620      	mov	r0, r4
   17052:	f7ff fe9a 	bl	16d8a <_set>
	gf_double (s->K1, s->iv);
   17056:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   1705a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1705c:	4621      	mov	r1, r4
   1705e:	4620      	mov	r0, r4
   17060:	f7ff ff5c 	bl	16f1c <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   17064:	4621      	mov	r1, r4
   17066:	4628      	mov	r0, r5
   17068:	f7ff ffae 	bl	16fc8 <gf_double>
	gf_double (s->K2, s->K1);
   1706c:	4629      	mov	r1, r5
   1706e:	f104 0020 	add.w	r0, r4, #32
   17072:	f7ff ffa9 	bl	16fc8 <gf_double>
	tc_cmac_init(s);
   17076:	4620      	mov	r0, r4
   17078:	f7ff ffc3 	bl	17002 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   1707c:	2001      	movs	r0, #1
}
   1707e:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   17080:	4608      	mov	r0, r1
   17082:	e7fc      	b.n	1707e <tc_cmac_setup+0x50>

00017084 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   17084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17088:	460d      	mov	r5, r1
   1708a:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1708c:	4604      	mov	r4, r0
   1708e:	2800      	cmp	r0, #0
   17090:	d061      	beq.n	17156 <tc_cmac_update+0xd2>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   17092:	b912      	cbnz	r2, 1709a <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   17094:	2001      	movs	r0, #1
}
   17096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   1709a:	2900      	cmp	r1, #0
   1709c:	d05b      	beq.n	17156 <tc_cmac_update+0xd2>
	if (s->countdown == 0) {
   1709e:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   170a2:	ea53 0102 	orrs.w	r1, r3, r2
   170a6:	d056      	beq.n	17156 <tc_cmac_update+0xd2>
	s->countdown--;
   170a8:	3b01      	subs	r3, #1
	if (s->leftover_offset > 0) {
   170aa:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   170ae:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
   170b2:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   170b6:	f1b8 0f00 	cmp.w	r8, #0
   170ba:	d02a      	beq.n	17112 <tc_cmac_update+0x8e>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   170bc:	f1c8 0710 	rsb	r7, r8, #16
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   170c0:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   170c4:	42be      	cmp	r6, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   170c6:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   170c8:	d208      	bcs.n	170dc <tc_cmac_update+0x58>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   170ca:	462a      	mov	r2, r5
   170cc:	4633      	mov	r3, r6
   170ce:	4631      	mov	r1, r6
   170d0:	f7ff fe4e 	bl	16d70 <_copy>
			s->leftover_offset += data_length;
   170d4:	6c62      	ldr	r2, [r4, #68]	; 0x44
   170d6:	4432      	add	r2, r6
   170d8:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   170da:	e7db      	b.n	17094 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   170dc:	463b      	mov	r3, r7
   170de:	462a      	mov	r2, r5
   170e0:	4639      	mov	r1, r7
   170e2:	f7ff fe45 	bl	16d70 <_copy>
		data_length -= remaining_space;
   170e6:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   170e8:	2300      	movs	r3, #0
   170ea:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   170ec:	4446      	add	r6, r8
		data += remaining_space;
   170ee:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   170f0:	1e63      	subs	r3, r4, #1
   170f2:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   170f6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   170fa:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   170fe:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   17100:	ea82 0200 	eor.w	r2, r2, r0
   17104:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   17106:	d1f6      	bne.n	170f6 <tc_cmac_update+0x72>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   17108:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1710a:	4621      	mov	r1, r4
   1710c:	4620      	mov	r0, r4
   1710e:	f7ff ff05 	bl	16f1c <tc_aes_encrypt>
   17112:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   17116:	2e10      	cmp	r6, #16
   17118:	d80a      	bhi.n	17130 <tc_cmac_update+0xac>
	if (data_length > 0) {
   1711a:	2e00      	cmp	r6, #0
   1711c:	d0ba      	beq.n	17094 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   1711e:	4633      	mov	r3, r6
   17120:	462a      	mov	r2, r5
   17122:	4631      	mov	r1, r6
   17124:	f104 0030 	add.w	r0, r4, #48	; 0x30
   17128:	f7ff fe22 	bl	16d70 <_copy>
		s->leftover_offset = data_length;
   1712c:	6466      	str	r6, [r4, #68]	; 0x44
   1712e:	e7b1      	b.n	17094 <tc_cmac_update+0x10>
   17130:	1e63      	subs	r3, r4, #1
   17132:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   17134:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   17138:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1713c:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   1713e:	ea82 0200 	eor.w	r2, r2, r0
   17142:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   17144:	d1f6      	bne.n	17134 <tc_cmac_update+0xb0>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   17146:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   17148:	4621      	mov	r1, r4
   1714a:	4620      	mov	r0, r4
   1714c:	f7ff fee6 	bl	16f1c <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   17150:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   17152:	3e10      	subs	r6, #16
   17154:	e7df      	b.n	17116 <tc_cmac_update+0x92>
		return TC_CRYPTO_FAIL;
   17156:	2000      	movs	r0, #0
   17158:	e79d      	b.n	17096 <tc_cmac_update+0x12>

0001715a <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   1715a:	b570      	push	{r4, r5, r6, lr}
   1715c:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   1715e:	4605      	mov	r5, r0
   17160:	b1e8      	cbz	r0, 1719e <tc_cmac_final+0x44>
   17162:	b369      	cbz	r1, 171c0 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   17164:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   17166:	2a10      	cmp	r2, #16
   17168:	d11a      	bne.n	171a0 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   1716a:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1716c:	1e63      	subs	r3, r4, #1
   1716e:	3901      	subs	r1, #1
   17170:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   17174:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   17178:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   1717c:	4072      	eors	r2, r6
   1717e:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   17182:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   17184:	ea82 0206 	eor.w	r2, r2, r6
   17188:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1718a:	d1f3      	bne.n	17174 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   1718c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1718e:	4621      	mov	r1, r4
   17190:	4628      	mov	r0, r5
   17192:	f7ff fec3 	bl	16f1c <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   17196:	4620      	mov	r0, r4
   17198:	f7ff ff2b 	bl	16ff2 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   1719c:	2001      	movs	r0, #1
}
   1719e:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   171a0:	f102 0030 	add.w	r0, r2, #48	; 0x30
   171a4:	2100      	movs	r1, #0
   171a6:	f1c2 0210 	rsb	r2, r2, #16
   171aa:	4420      	add	r0, r4
   171ac:	f7ff fded 	bl	16d8a <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   171b0:	6c63      	ldr	r3, [r4, #68]	; 0x44
   171b2:	4423      	add	r3, r4
   171b4:	2280      	movs	r2, #128	; 0x80
   171b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   171ba:	f104 0120 	add.w	r1, r4, #32
   171be:	e7d5      	b.n	1716c <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   171c0:	4608      	mov	r0, r1
   171c2:	e7ec      	b.n	1719e <tc_cmac_final+0x44>

000171c4 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   171c4:	f007 b876 	b.w	1e2b4 <z_fatal_error>

000171c8 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   171c8:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   171ca:	6800      	ldr	r0, [r0, #0]
   171cc:	f007 b872 	b.w	1e2b4 <z_fatal_error>

000171d0 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   171d0:	2100      	movs	r1, #0
   171d2:	2001      	movs	r0, #1
   171d4:	f7ff bff6 	b.w	171c4 <z_arm_fatal_error>

000171d8 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   171d8:	b508      	push	{r3, lr}
	handler();
   171da:	f7ec fd97 	bl	3d0c <z_SysNmiOnReset>
	z_arm_int_exit();
}
   171de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   171e2:	f7ec be77 	b.w	3ed4 <z_arm_exc_exit>

000171e6 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   171e6:	3901      	subs	r1, #1
   171e8:	4603      	mov	r3, r0
   171ea:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   171ee:	b90a      	cbnz	r2, 171f4 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   171f0:	701a      	strb	r2, [r3, #0]

	return dest;
}
   171f2:	4770      	bx	lr
		*d = *s;
   171f4:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   171f8:	e7f7      	b.n	171ea <strcpy+0x4>

000171fa <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   171fa:	4603      	mov	r3, r0
	size_t n = 0;
   171fc:	2000      	movs	r0, #0

	while (*s != '\0') {
   171fe:	5c1a      	ldrb	r2, [r3, r0]
   17200:	b902      	cbnz	r2, 17204 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   17202:	4770      	bx	lr
		n++;
   17204:	3001      	adds	r0, #1
   17206:	e7fa      	b.n	171fe <strlen+0x4>

00017208 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   17208:	4603      	mov	r3, r0
	size_t n = 0;
   1720a:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   1720c:	5c1a      	ldrb	r2, [r3, r0]
   1720e:	b10a      	cbz	r2, 17214 <strnlen+0xc>
   17210:	4288      	cmp	r0, r1
   17212:	d100      	bne.n	17216 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   17214:	4770      	bx	lr
		n++;
   17216:	3001      	adds	r0, #1
   17218:	e7f8      	b.n	1720c <strnlen+0x4>

0001721a <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   1721a:	1e43      	subs	r3, r0, #1
   1721c:	3901      	subs	r1, #1
   1721e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   17222:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   17226:	4282      	cmp	r2, r0
   17228:	d101      	bne.n	1722e <strcmp+0x14>
   1722a:	2a00      	cmp	r2, #0
   1722c:	d1f7      	bne.n	1721e <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   1722e:	1a10      	subs	r0, r2, r0
   17230:	4770      	bx	lr

00017232 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   17232:	b510      	push	{r4, lr}
   17234:	4603      	mov	r3, r0
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   17236:	b15a      	cbz	r2, 17250 <memcmp+0x1e>
   17238:	3901      	subs	r1, #1
   1723a:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   1723c:	f813 0b01 	ldrb.w	r0, [r3], #1
   17240:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   17244:	42a3      	cmp	r3, r4
   17246:	d001      	beq.n	1724c <memcmp+0x1a>
   17248:	4290      	cmp	r0, r2
   1724a:	d0f7      	beq.n	1723c <memcmp+0xa>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   1724c:	1a80      	subs	r0, r0, r2
}
   1724e:	bd10      	pop	{r4, pc}
		return 0;
   17250:	4610      	mov	r0, r2
   17252:	e7fc      	b.n	1724e <memcmp+0x1c>

00017254 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   17254:	b510      	push	{r4, lr}
   17256:	1e43      	subs	r3, r0, #1
   17258:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   1725a:	4291      	cmp	r1, r2
   1725c:	d100      	bne.n	17260 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   1725e:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   17260:	f811 4b01 	ldrb.w	r4, [r1], #1
   17264:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   17268:	e7f7      	b.n	1725a <memcpy+0x6>

0001726a <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   1726a:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   1726c:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   1726e:	4603      	mov	r3, r0
	while (n > 0) {
   17270:	4293      	cmp	r3, r2
   17272:	d100      	bne.n	17276 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   17274:	4770      	bx	lr
		*(d_byte++) = c_byte;
   17276:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1727a:	e7f9      	b.n	17270 <memset+0x6>

0001727c <_stdout_hook_default>:
}
   1727c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17280:	4770      	bx	lr

00017282 <fputc>:
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&c, *(uintptr_t *)&stream, K_SYSCALL_ZEPHYR_FPUTC);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_fputc(c, stream);
   17282:	f7ed b831 	b.w	42e8 <z_impl_zephyr_fputc>

00017286 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   17286:	b084      	sub	sp, #16
   17288:	ab04      	add	r3, sp, #16
   1728a:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   1728e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   17292:	2b06      	cmp	r3, #6
   17294:	d108      	bne.n	172a8 <pm_power_state_set+0x22>
#endif // defined(POWER_RAMSTATUS_RAMBLOCK0_Msk)

#if defined(POWER_SYSTEMOFF_SYSTEMOFF_Enter)
NRF_STATIC_INLINE void nrf_power_system_off(NRF_POWER_Type * p_reg)
{
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   17296:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1729a:	2201      	movs	r2, #1
   1729c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   172a0:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
   172a4:	bf20      	wfe
    while (true)
   172a6:	e7fd      	b.n	172a4 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   172a8:	b004      	add	sp, #16
   172aa:	4770      	bx	lr

000172ac <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   172ac:	b084      	sub	sp, #16
   172ae:	ab04      	add	r3, sp, #16
   172b0:	e903 0007 	stmdb	r3, {r0, r1, r2}
   172b4:	2300      	movs	r3, #0
   172b6:	f383 8811 	msr	BASEPRI, r3
   172ba:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   172be:	b004      	add	sp, #16
   172c0:	4770      	bx	lr

000172c2 <xor16>:
#define BT_DBG_ENABLED IS_ENABLED(CONFIG_BT_DEBUG_HCI_CORE)
#define LOG_MODULE_NAME bt_aes_ccm
#include "common/log.h"

static inline void xor16(uint8_t *dst, const uint8_t *a, const uint8_t *b)
{
   172c2:	b510      	push	{r4, lr}
	dst[0] = a[0] ^ b[0];
   172c4:	780b      	ldrb	r3, [r1, #0]
   172c6:	7814      	ldrb	r4, [r2, #0]
   172c8:	4063      	eors	r3, r4
   172ca:	7003      	strb	r3, [r0, #0]
	dst[1] = a[1] ^ b[1];
   172cc:	7854      	ldrb	r4, [r2, #1]
   172ce:	784b      	ldrb	r3, [r1, #1]
   172d0:	4063      	eors	r3, r4
   172d2:	7043      	strb	r3, [r0, #1]
	dst[2] = a[2] ^ b[2];
   172d4:	7894      	ldrb	r4, [r2, #2]
   172d6:	788b      	ldrb	r3, [r1, #2]
   172d8:	4063      	eors	r3, r4
   172da:	7083      	strb	r3, [r0, #2]
	dst[3] = a[3] ^ b[3];
   172dc:	78d4      	ldrb	r4, [r2, #3]
   172de:	78cb      	ldrb	r3, [r1, #3]
   172e0:	4063      	eors	r3, r4
   172e2:	70c3      	strb	r3, [r0, #3]
	dst[4] = a[4] ^ b[4];
   172e4:	7914      	ldrb	r4, [r2, #4]
   172e6:	790b      	ldrb	r3, [r1, #4]
   172e8:	4063      	eors	r3, r4
   172ea:	7103      	strb	r3, [r0, #4]
	dst[5] = a[5] ^ b[5];
   172ec:	7954      	ldrb	r4, [r2, #5]
   172ee:	794b      	ldrb	r3, [r1, #5]
   172f0:	4063      	eors	r3, r4
   172f2:	7143      	strb	r3, [r0, #5]
	dst[6] = a[6] ^ b[6];
   172f4:	7994      	ldrb	r4, [r2, #6]
   172f6:	798b      	ldrb	r3, [r1, #6]
   172f8:	4063      	eors	r3, r4
   172fa:	7183      	strb	r3, [r0, #6]
	dst[7] = a[7] ^ b[7];
   172fc:	79d4      	ldrb	r4, [r2, #7]
   172fe:	79cb      	ldrb	r3, [r1, #7]
   17300:	4063      	eors	r3, r4
   17302:	71c3      	strb	r3, [r0, #7]
	dst[8] = a[8] ^ b[8];
   17304:	7a14      	ldrb	r4, [r2, #8]
   17306:	7a0b      	ldrb	r3, [r1, #8]
   17308:	4063      	eors	r3, r4
   1730a:	7203      	strb	r3, [r0, #8]
	dst[9] = a[9] ^ b[9];
   1730c:	7a54      	ldrb	r4, [r2, #9]
   1730e:	7a4b      	ldrb	r3, [r1, #9]
   17310:	4063      	eors	r3, r4
   17312:	7243      	strb	r3, [r0, #9]
	dst[10] = a[10] ^ b[10];
   17314:	7a8b      	ldrb	r3, [r1, #10]
   17316:	7a94      	ldrb	r4, [r2, #10]
   17318:	4063      	eors	r3, r4
   1731a:	7283      	strb	r3, [r0, #10]
	dst[11] = a[11] ^ b[11];
   1731c:	7ad4      	ldrb	r4, [r2, #11]
   1731e:	7acb      	ldrb	r3, [r1, #11]
   17320:	4063      	eors	r3, r4
   17322:	72c3      	strb	r3, [r0, #11]
	dst[12] = a[12] ^ b[12];
   17324:	7b14      	ldrb	r4, [r2, #12]
   17326:	7b0b      	ldrb	r3, [r1, #12]
   17328:	4063      	eors	r3, r4
   1732a:	7303      	strb	r3, [r0, #12]
	dst[13] = a[13] ^ b[13];
   1732c:	7b54      	ldrb	r4, [r2, #13]
   1732e:	7b4b      	ldrb	r3, [r1, #13]
   17330:	4063      	eors	r3, r4
   17332:	7343      	strb	r3, [r0, #13]
	dst[14] = a[14] ^ b[14];
   17334:	7b94      	ldrb	r4, [r2, #14]
   17336:	7b8b      	ldrb	r3, [r1, #14]
   17338:	4063      	eors	r3, r4
   1733a:	7383      	strb	r3, [r0, #14]
	dst[15] = a[15] ^ b[15];
   1733c:	7bcb      	ldrb	r3, [r1, #15]
   1733e:	7bd2      	ldrb	r2, [r2, #15]
   17340:	4053      	eors	r3, r2
   17342:	73c3      	strb	r3, [r0, #15]
}
   17344:	bd10      	pop	{r4, pc}

00017346 <ccm_crypt.isra.0>:
	}

	return 0;
}

static int ccm_crypt(const uint8_t key[16], const uint8_t nonce[13],
   17346:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1734a:	b08b      	sub	sp, #44	; 0x2c
   1734c:	4607      	mov	r7, r0
   1734e:	9d14      	ldr	r5, [sp, #80]	; 0x50
   17350:	4690      	mov	r8, r2
	uint16_t last_blk, blk_cnt;
	size_t i, j;
	int err;

	last_blk = msg_len % 16;
	blk_cnt = (msg_len + 15) / 16;
   17352:	f105 060f 	add.w	r6, r5, #15
	if (!last_blk) {
		last_blk = 16U;
	}

	a_i[0] = 0x01;
   17356:	2401      	movs	r4, #1
		last_blk = 16U;
   17358:	f015 050f 	ands.w	r5, r5, #15
	memcpy(&a_i[1], nonce, 13);
   1735c:	f04f 020d 	mov.w	r2, #13
   17360:	f10d 0009 	add.w	r0, sp, #9
static int ccm_crypt(const uint8_t key[16], const uint8_t nonce[13],
   17364:	4699      	mov	r9, r3
	blk_cnt = (msg_len + 15) / 16;
   17366:	ea4f 1616 	mov.w	r6, r6, lsr #4
		last_blk = 16U;
   1736a:	bf08      	it	eq
   1736c:	2510      	moveq	r5, #16
	a_i[0] = 0x01;
   1736e:	f88d 4008 	strb.w	r4, [sp, #8]
	memcpy(&a_i[1], nonce, 13);
   17372:	f7ff ff6f 	bl	17254 <memcpy>

	for (j = 0; j < blk_cnt; j++) {
   17376:	b2b6      	uxth	r6, r6
   17378:	f04f 0b00 	mov.w	fp, #0
		if (err) {
			return err;
		}

		/* Encrypted = Payload[0-15] ^ C_1 */
		if (j < blk_cnt - 1) {
   1737c:	f106 3aff 	add.w	sl, r6, #4294967295	; 0xffffffff
	for (j = 0; j < blk_cnt; j++) {
   17380:	1e63      	subs	r3, r4, #1
   17382:	429e      	cmp	r6, r3
   17384:	d802      	bhi.n	1738c <ccm_crypt.isra.0+0x46>
					in_msg[(j * 16) + i] ^ s_i[i];
			}
		}
	}
	return 0;
}
   17386:	b00b      	add	sp, #44	; 0x2c
   17388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	dst[0] = val >> 8;
   1738c:	f3c4 2207 	ubfx	r2, r4, #8, #8
   17390:	f88d 2016 	strb.w	r2, [sp, #22]
		err = bt_encrypt_be(key, a_i, s_i);
   17394:	a902      	add	r1, sp, #8
   17396:	aa06      	add	r2, sp, #24
   17398:	4638      	mov	r0, r7
   1739a:	9301      	str	r3, [sp, #4]
	dst[1] = val;
   1739c:	f88d 4017 	strb.w	r4, [sp, #23]
   173a0:	f004 ff16 	bl	1c1d0 <bt_encrypt_be>
		if (err) {
   173a4:	4601      	mov	r1, r0
   173a6:	2800      	cmp	r0, #0
   173a8:	d1ed      	bne.n	17386 <ccm_crypt.isra.0+0x40>
		if (j < blk_cnt - 1) {
   173aa:	9b01      	ldr	r3, [sp, #4]
   173ac:	459a      	cmp	sl, r3
   173ae:	eb08 020b 	add.w	r2, r8, fp
   173b2:	eb09 000b 	add.w	r0, r9, fp
   173b6:	d906      	bls.n	173c6 <ccm_crypt.isra.0+0x80>
			xor16(&out_msg[j * 16], s_i, &in_msg[j * 16]);
   173b8:	a906      	add	r1, sp, #24
   173ba:	f7ff ff82 	bl	172c2 <xor16>
	for (j = 0; j < blk_cnt; j++) {
   173be:	3401      	adds	r4, #1
   173c0:	f10b 0b10 	add.w	fp, fp, #16
   173c4:	e7dc      	b.n	17380 <ccm_crypt.isra.0+0x3a>
   173c6:	f10d 0c18 	add.w	ip, sp, #24
					in_msg[(j * 16) + i] ^ s_i[i];
   173ca:	f812 3b01 	ldrb.w	r3, [r2], #1
   173ce:	f81c eb01 	ldrb.w	lr, [ip], #1
			for (i = 0; i < last_blk; i++) {
   173d2:	3101      	adds	r1, #1
				out_msg[(j * 16) + i] =
   173d4:	ea83 030e 	eor.w	r3, r3, lr
			for (i = 0; i < last_blk; i++) {
   173d8:	42a9      	cmp	r1, r5
				out_msg[(j * 16) + i] =
   173da:	f800 3b01 	strb.w	r3, [r0], #1
			for (i = 0; i < last_blk; i++) {
   173de:	d3f4      	bcc.n	173ca <ccm_crypt.isra.0+0x84>
   173e0:	e7ed      	b.n	173be <ccm_crypt.isra.0+0x78>

000173e2 <ccm_auth.isra.0>:
static int ccm_auth(const uint8_t key[16], uint8_t nonce[13],
   173e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		last_blk = 16U;
   173e6:	f013 080f 	ands.w	r8, r3, #15
static int ccm_auth(const uint8_t key[16], uint8_t nonce[13],
   173ea:	b08d      	sub	sp, #52	; 0x34
   173ec:	461d      	mov	r5, r3
	b[0] = 0x01;
   173ee:	f04f 0301 	mov.w	r3, #1
static int ccm_auth(const uint8_t key[16], uint8_t nonce[13],
   173f2:	4607      	mov	r7, r0
   173f4:	4616      	mov	r6, r2
	memcpy(b + 1, nonce, 13);
   173f6:	eb0d 0003 	add.w	r0, sp, r3
   173fa:	f04f 020d 	mov.w	r2, #13
   173fe:	46e9      	mov	r9, sp
		last_blk = 16U;
   17400:	bf08      	it	eq
   17402:	f04f 0810 	moveq.w	r8, #16
	b[0] = 0x01;
   17406:	f88d 3000 	strb.w	r3, [sp]
static int ccm_auth(const uint8_t key[16], uint8_t nonce[13],
   1740a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
	memcpy(b + 1, nonce, 13);
   1740c:	f7ff ff22 	bl	17254 <memcpy>
	dst[0] = val >> 8;
   17410:	2300      	movs	r3, #0
	err = bt_encrypt_be(key, b, s0);
   17412:	aa08      	add	r2, sp, #32
   17414:	4649      	mov	r1, r9
   17416:	4638      	mov	r0, r7
   17418:	f88d 300e 	strb.w	r3, [sp, #14]
	dst[1] = val;
   1741c:	f88d 300f 	strb.w	r3, [sp, #15]
   17420:	f004 fed6 	bl	1c1d0 <bt_encrypt_be>
	if (err) {
   17424:	2800      	cmp	r0, #0
   17426:	f040 809e 	bne.w	17566 <ccm_auth.isra.0+0x184>
	b[0] = (((mic_size - 2) / 2) << 3) | ((!!aad_len) << 6) | 0x01;
   1742a:	9b19      	ldr	r3, [sp, #100]	; 0x64
	dst[0] = val >> 8;
   1742c:	f88d 000e 	strb.w	r0, [sp, #14]
   17430:	3b02      	subs	r3, #2
   17432:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   17436:	ea4f 0383 	mov.w	r3, r3, lsl #2
   1743a:	bf14      	ite	ne
   1743c:	2240      	movne	r2, #64	; 0x40
   1743e:	2200      	moveq	r2, #0
   17440:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
   17444:	4313      	orrs	r3, r2
	err = bt_encrypt_be(key, b, X0);
   17446:	f10d 0b10 	add.w	fp, sp, #16
	b[0] = (((mic_size - 2) / 2) << 3) | ((!!aad_len) << 6) | 0x01;
   1744a:	f043 0301 	orr.w	r3, r3, #1
	err = bt_encrypt_be(key, b, X0);
   1744e:	465a      	mov	r2, fp
   17450:	4649      	mov	r1, r9
   17452:	4638      	mov	r0, r7
	b[0] = (((mic_size - 2) / 2) << 3) | ((!!aad_len) << 6) | 0x01;
   17454:	f88d 3000 	strb.w	r3, [sp]
	dst[1] = val;
   17458:	f88d 500f 	strb.w	r5, [sp, #15]
	err = bt_encrypt_be(key, b, X0);
   1745c:	f004 feb8 	bl	1c1d0 <bt_encrypt_be>
	if (err) {
   17460:	4682      	mov	sl, r0
   17462:	bbb8      	cbnz	r0, 174d4 <ccm_auth.isra.0+0xf2>
	if (aad_len) {
   17464:	b3b4      	cbz	r4, 174d4 <ccm_auth.isra.0+0xf2>
			b[i] = X0[i] ^ b[i];
   17466:	f89d 3010 	ldrb.w	r3, [sp, #16]
   1746a:	f88d 3000 	strb.w	r3, [sp]
   1746e:	f89d 3011 	ldrb.w	r3, [sp, #17]
   17472:	4063      	eors	r3, r4
		aad_len += sizeof(uint16_t);
   17474:	3402      	adds	r4, #2
			b[i] = X0[i] ^ b[i];
   17476:	f88d 3001 	strb.w	r3, [sp, #1]
		aad_len += sizeof(uint16_t);
   1747a:	b2e4      	uxtb	r4, r4
		while (aad_len > 16) {
   1747c:	2302      	movs	r3, #2
				b[i] = X0[i] ^ aad[j];
   1747e:	4649      	mov	r1, r9
		while (aad_len > 16) {
   17480:	9a16      	ldr	r2, [sp, #88]	; 0x58
   17482:	2c10      	cmp	r4, #16
   17484:	4452      	add	r2, sl
   17486:	d80b      	bhi.n	174a0 <ccm_auth.isra.0+0xbe>
   17488:	4611      	mov	r1, r2
   1748a:	aa04      	add	r2, sp, #16
		for (; i < aad_len; i++, j++) {
   1748c:	42a3      	cmp	r3, r4
   1748e:	4620      	mov	r0, r4
   17490:	db38      	blt.n	17504 <ccm_auth.isra.0+0x122>
		for (i = aad_len; i < 16; i++) {
   17492:	280f      	cmp	r0, #15
   17494:	dd40      	ble.n	17518 <ccm_auth.isra.0+0x136>
		err = bt_encrypt_be(key, b, X0);
   17496:	4669      	mov	r1, sp
   17498:	4638      	mov	r0, r7
   1749a:	f004 fe99 	bl	1c1d0 <bt_encrypt_be>
		if (err) {
   1749e:	e019      	b.n	174d4 <ccm_auth.isra.0+0xf2>
		while (aad_len > 16) {
   174a0:	4618      	mov	r0, r3
				b[i] = X0[i] ^ aad[j];
   174a2:	f810 e00b 	ldrb.w	lr, [r0, fp]
   174a6:	f812 cb01 	ldrb.w	ip, [r2], #1
   174aa:	ea8c 0c0e 	eor.w	ip, ip, lr
   174ae:	f800 c001 	strb.w	ip, [r0, r1]
				i++, j++;
   174b2:	3001      	adds	r0, #1
			} while (i < 16);
   174b4:	2810      	cmp	r0, #16
   174b6:	d1f4      	bne.n	174a2 <ccm_auth.isra.0+0xc0>
				i++, j++;
   174b8:	f10a 0a10 	add.w	sl, sl, #16
			err = bt_encrypt_be(key, b, X0);
   174bc:	465a      	mov	r2, fp
   174be:	4638      	mov	r0, r7
				i++, j++;
   174c0:	ebaa 0a03 	sub.w	sl, sl, r3
			err = bt_encrypt_be(key, b, X0);
   174c4:	f004 fe84 	bl	1c1d0 <bt_encrypt_be>
			aad_len -= 16;
   174c8:	3c10      	subs	r4, #16
   174ca:	b2e4      	uxtb	r4, r4
			if (err) {
   174cc:	4603      	mov	r3, r0
   174ce:	4669      	mov	r1, sp
   174d0:	2800      	cmp	r0, #0
   174d2:	d0d5      	beq.n	17480 <ccm_auth.isra.0+0x9e>
	blk_cnt = (msg_len + 15) / 16;
   174d4:	350f      	adds	r5, #15
			memcpy(&b[i], &Xn[i], 16 - i);
   174d6:	ab04      	add	r3, sp, #16
	blk_cnt = (msg_len + 15) / 16;
   174d8:	2400      	movs	r4, #0
	for (j = 0; j < blk_cnt; j++) {
   174da:	f3c5 150f 	ubfx	r5, r5, #4, #16
			memcpy(&b[i], &Xn[i], 16 - i);
   174de:	eb03 0a08 	add.w	sl, r3, r8
	for (j = 0; j < blk_cnt; j++) {
   174e2:	42ac      	cmp	r4, r5
   174e4:	db1d      	blt.n	17522 <ccm_auth.isra.0+0x140>
   174e6:	e9dd 2118 	ldrd	r2, r1, [sp, #96]	; 0x60
   174ea:	ac08      	add	r4, sp, #32
   174ec:	ab04      	add	r3, sp, #16
   174ee:	1851      	adds	r1, r2, r1
	for (i = 0; i < mic_size; i++) {
   174f0:	4291      	cmp	r1, r2
   174f2:	d038      	beq.n	17566 <ccm_auth.isra.0+0x184>
		mic[i] = s0[i] ^ Xn[i];
   174f4:	f814 0b01 	ldrb.w	r0, [r4], #1
   174f8:	f813 5b01 	ldrb.w	r5, [r3], #1
   174fc:	4068      	eors	r0, r5
   174fe:	f802 0b01 	strb.w	r0, [r2], #1
	for (i = 0; i < mic_size; i++) {
   17502:	e7f5      	b.n	174f0 <ccm_auth.isra.0+0x10e>
			b[i] = X0[i] ^ aad[j];
   17504:	f812 c003 	ldrb.w	ip, [r2, r3]
   17508:	f811 0b01 	ldrb.w	r0, [r1], #1
   1750c:	ea80 000c 	eor.w	r0, r0, ip
   17510:	f80d 0003 	strb.w	r0, [sp, r3]
		for (; i < aad_len; i++, j++) {
   17514:	3301      	adds	r3, #1
   17516:	e7b9      	b.n	1748c <ccm_auth.isra.0+0xaa>
			b[i] = X0[i];
   17518:	5c13      	ldrb	r3, [r2, r0]
   1751a:	f80d 3000 	strb.w	r3, [sp, r0]
		for (i = aad_len; i < 16; i++) {
   1751e:	3001      	adds	r0, #1
   17520:	e7b7      	b.n	17492 <ccm_auth.isra.0+0xb0>
		if (j + 1 == blk_cnt) {
   17522:	3401      	adds	r4, #1
   17524:	42ac      	cmp	r4, r5
   17526:	d121      	bne.n	1756c <ccm_auth.isra.0+0x18a>
   17528:	f10d 0c10 	add.w	ip, sp, #16
   1752c:	466b      	mov	r3, sp
   1752e:	4630      	mov	r0, r6
			for (i = 0; i < last_blk; i++) {
   17530:	2200      	movs	r2, #0
				b[i] = Xn[i] ^ cleartext_msg[(j * 16) + i];
   17532:	f81c 1b01 	ldrb.w	r1, [ip], #1
   17536:	f810 eb01 	ldrb.w	lr, [r0], #1
			for (i = 0; i < last_blk; i++) {
   1753a:	3201      	adds	r2, #1
				b[i] = Xn[i] ^ cleartext_msg[(j * 16) + i];
   1753c:	ea81 010e 	eor.w	r1, r1, lr
			for (i = 0; i < last_blk; i++) {
   17540:	4542      	cmp	r2, r8
				b[i] = Xn[i] ^ cleartext_msg[(j * 16) + i];
   17542:	f803 1b01 	strb.w	r1, [r3], #1
			for (i = 0; i < last_blk; i++) {
   17546:	dbf4      	blt.n	17532 <ccm_auth.isra.0+0x150>
			memcpy(&b[i], &Xn[i], 16 - i);
   17548:	f1c8 0210 	rsb	r2, r8, #16
   1754c:	4651      	mov	r1, sl
   1754e:	eb0d 0008 	add.w	r0, sp, r8
   17552:	f7ff fe7f 	bl	17254 <memcpy>
		err = bt_encrypt_be(key, b, Xn);
   17556:	aa04      	add	r2, sp, #16
   17558:	4649      	mov	r1, r9
   1755a:	4638      	mov	r0, r7
   1755c:	f004 fe38 	bl	1c1d0 <bt_encrypt_be>
		if (err) {
   17560:	3610      	adds	r6, #16
   17562:	2800      	cmp	r0, #0
   17564:	d0bd      	beq.n	174e2 <ccm_auth.isra.0+0x100>
}
   17566:	b00d      	add	sp, #52	; 0x34
   17568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			xor16(b, Xn, &cleartext_msg[j * 16]);
   1756c:	4632      	mov	r2, r6
   1756e:	a904      	add	r1, sp, #16
   17570:	4668      	mov	r0, sp
   17572:	f7ff fea6 	bl	172c2 <xor16>
   17576:	e7ee      	b.n	17556 <ccm_auth.isra.0+0x174>

00017578 <bt_ccm_decrypt>:

int bt_ccm_decrypt(const uint8_t key[16], uint8_t nonce[13],
		   const uint8_t *enc_data, size_t len, const uint8_t *aad,
		   size_t aad_len, uint8_t *plaintext, size_t mic_size)
{
   17578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1757c:	b089      	sub	sp, #36	; 0x24
   1757e:	e9dd ba13 	ldrd	fp, sl, [sp, #76]	; 0x4c
	uint8_t mic[16];

	if (aad_len >= 0xff00 || mic_size > sizeof(mic)) {
   17582:	f5bb 4f7f 	cmp.w	fp, #65280	; 0xff00
{
   17586:	9e15      	ldr	r6, [sp, #84]	; 0x54
   17588:	4607      	mov	r7, r0
   1758a:	4688      	mov	r8, r1
   1758c:	4615      	mov	r5, r2
   1758e:	461c      	mov	r4, r3
	if (aad_len >= 0xff00 || mic_size > sizeof(mic)) {
   17590:	d21e      	bcs.n	175d0 <bt_ccm_decrypt+0x58>
   17592:	2e10      	cmp	r6, #16
   17594:	d81c      	bhi.n	175d0 <bt_ccm_decrypt+0x58>
		return -EINVAL;
	}

	ccm_crypt(key, nonce, enc_data, plaintext, len);
   17596:	9300      	str	r3, [sp, #0]
   17598:	4653      	mov	r3, sl
   1759a:	f7ff fed4 	bl	17346 <ccm_crypt.isra.0>

	ccm_auth(key, nonce, plaintext, len, aad, aad_len, mic, mic_size);
   1759e:	f10d 0910 	add.w	r9, sp, #16
   175a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   175a4:	9300      	str	r3, [sp, #0]
   175a6:	4652      	mov	r2, sl
   175a8:	4623      	mov	r3, r4
   175aa:	4641      	mov	r1, r8
   175ac:	4638      	mov	r0, r7
   175ae:	e9cd b901 	strd	fp, r9, [sp, #4]
   175b2:	9603      	str	r6, [sp, #12]
   175b4:	f7ff ff15 	bl	173e2 <ccm_auth.isra.0>

	if (memcmp(mic, enc_data + len, mic_size)) {
   175b8:	4632      	mov	r2, r6
   175ba:	1929      	adds	r1, r5, r4
   175bc:	4648      	mov	r0, r9
   175be:	f7ff fe38 	bl	17232 <memcmp>
		return -EBADMSG;
   175c2:	2800      	cmp	r0, #0
   175c4:	bf18      	it	ne
   175c6:	f06f 004c 	mvnne.w	r0, #76	; 0x4c
	}

	return 0;
}
   175ca:	b009      	add	sp, #36	; 0x24
   175cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EINVAL;
   175d0:	f06f 0015 	mvn.w	r0, #21
   175d4:	e7f9      	b.n	175ca <bt_ccm_decrypt+0x52>

000175d6 <bt_ccm_encrypt>:

int bt_ccm_encrypt(const uint8_t key[16], uint8_t nonce[13],
		   const uint8_t *plaintext, size_t len, const uint8_t *aad,
		   size_t aad_len, uint8_t *enc_data, size_t mic_size)
{
   175d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   175da:	b085      	sub	sp, #20
   175dc:	e9dd 790d 	ldrd	r7, r9, [sp, #52]	; 0x34
	BT_DBG("nonce %s", bt_hex(nonce, 13));
	BT_DBG("msg (len %zu) %s", len, bt_hex(plaintext, len));
	BT_DBG("aad_len %zu mic_size %zu", aad_len, mic_size);

	/* Unsupported AAD size */
	if (aad_len >= 0xff00 || mic_size > 16) {
   175e0:	f5b7 4f7f 	cmp.w	r7, #65280	; 0xff00
{
   175e4:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
   175e8:	4605      	mov	r5, r0
   175ea:	460e      	mov	r6, r1
   175ec:	4690      	mov	r8, r2
   175ee:	461c      	mov	r4, r3
	uint8_t *mic = enc_data + len;
   175f0:	eb09 0e03 	add.w	lr, r9, r3
	if (aad_len >= 0xff00 || mic_size > 16) {
   175f4:	d214      	bcs.n	17620 <bt_ccm_encrypt+0x4a>
   175f6:	f1bc 0f10 	cmp.w	ip, #16
   175fa:	d811      	bhi.n	17620 <bt_ccm_encrypt+0x4a>
		return -EINVAL;
	}

	ccm_auth(key, nonce, plaintext, len, aad, aad_len, mic, mic_size);
   175fc:	9701      	str	r7, [sp, #4]
   175fe:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   17600:	9700      	str	r7, [sp, #0]
   17602:	e9cd ec02 	strd	lr, ip, [sp, #8]
   17606:	f7ff feec 	bl	173e2 <ccm_auth.isra.0>

	ccm_crypt(key, nonce, plaintext, enc_data, len);
   1760a:	4628      	mov	r0, r5
   1760c:	9400      	str	r4, [sp, #0]
   1760e:	464b      	mov	r3, r9
   17610:	4642      	mov	r2, r8
   17612:	4631      	mov	r1, r6
   17614:	f7ff fe97 	bl	17346 <ccm_crypt.isra.0>

	return 0;
   17618:	2000      	movs	r0, #0
}
   1761a:	b005      	add	sp, #20
   1761c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EINVAL;
   17620:	f06f 0015 	mvn.w	r0, #21
   17624:	e7f9      	b.n	1761a <bt_ccm_encrypt+0x44>

00017626 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   17626:	b510      	push	{r4, lr}
   17628:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   1762a:	7801      	ldrb	r1, [r0, #0]
   1762c:	7822      	ldrb	r2, [r4, #0]
   1762e:	428a      	cmp	r2, r1
{
   17630:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   17632:	d00f      	beq.n	17654 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   17634:	4669      	mov	r1, sp
   17636:	f7ec feb7 	bl	43a8 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   1763a:	a905      	add	r1, sp, #20
   1763c:	4620      	mov	r0, r4
   1763e:	f7ec feb3 	bl	43a8 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   17642:	2210      	movs	r2, #16
   17644:	f10d 0115 	add.w	r1, sp, #21
   17648:	f10d 0001 	add.w	r0, sp, #1
   1764c:	f7ff fdf1 	bl	17232 <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   17650:	b00a      	add	sp, #40	; 0x28
   17652:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   17654:	2a01      	cmp	r2, #1
   17656:	d006      	beq.n	17666 <bt_uuid_cmp+0x40>
   17658:	2a02      	cmp	r2, #2
   1765a:	d007      	beq.n	1766c <bt_uuid_cmp+0x46>
   1765c:	b972      	cbnz	r2, 1767c <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   1765e:	8840      	ldrh	r0, [r0, #2]
   17660:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   17662:	1ac0      	subs	r0, r0, r3
   17664:	e7f4      	b.n	17650 <bt_uuid_cmp+0x2a>
   17666:	6840      	ldr	r0, [r0, #4]
   17668:	6863      	ldr	r3, [r4, #4]
   1766a:	e7fa      	b.n	17662 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1766c:	2210      	movs	r2, #16
   1766e:	1c61      	adds	r1, r4, #1
   17670:	3001      	adds	r0, #1
}
   17672:	b00a      	add	sp, #40	; 0x28
   17674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   17678:	f7ff bddb 	b.w	17232 <memcmp>
	switch (u1->type) {
   1767c:	f06f 0015 	mvn.w	r0, #21
   17680:	e7e6      	b.n	17650 <bt_uuid_cmp+0x2a>

00017682 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   17682:	2a04      	cmp	r2, #4
{
   17684:	b510      	push	{r4, lr}
	switch (data_len) {
   17686:	d00a      	beq.n	1769e <bt_uuid_create+0x1c>
   17688:	2a10      	cmp	r2, #16
   1768a:	d00d      	beq.n	176a8 <bt_uuid_create+0x26>
   1768c:	2a02      	cmp	r2, #2
   1768e:	f04f 0300 	mov.w	r3, #0
   17692:	d10f      	bne.n	176b4 <bt_uuid_create+0x32>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   17694:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   17696:	880b      	ldrh	r3, [r1, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   17698:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   1769a:	2001      	movs	r0, #1
}
   1769c:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   1769e:	2301      	movs	r3, #1
   176a0:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   176a2:	680a      	ldr	r2, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   176a4:	6042      	str	r2, [r0, #4]
		break;
   176a6:	e7f8      	b.n	1769a <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   176a8:	2302      	movs	r3, #2
   176aa:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   176ae:	f7ff fdd1 	bl	17254 <memcpy>
		break;
   176b2:	e7f2      	b.n	1769a <bt_uuid_create+0x18>
	switch (data_len) {
   176b4:	4618      	mov	r0, r3
   176b6:	e7f1      	b.n	1769c <bt_uuid_create+0x1a>

000176b8 <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   176b8:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   176ba:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   176bc:	2106      	movs	r1, #6
{
   176be:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   176c0:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   176c4:	f004 fd82 	bl	1c1cc <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   176c8:	b918      	cbnz	r0, 176d2 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   176ca:	79a3      	ldrb	r3, [r4, #6]
   176cc:	f063 033f 	orn	r3, r3, #63	; 0x3f
   176d0:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   176d2:	bd10      	pop	{r4, pc}

000176d4 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   176d4:	280f      	cmp	r0, #15
   176d6:	d806      	bhi.n	176e6 <bt_hci_evt_get_flags+0x12>
   176d8:	280d      	cmp	r0, #13
   176da:	d80b      	bhi.n	176f4 <bt_hci_evt_get_flags+0x20>
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   176dc:	2805      	cmp	r0, #5
   176de:	bf14      	ite	ne
   176e0:	2002      	movne	r0, #2
   176e2:	2003      	moveq	r0, #3
   176e4:	4770      	bx	lr
	switch (evt) {
   176e6:	2813      	cmp	r0, #19
   176e8:	d004      	beq.n	176f4 <bt_hci_evt_get_flags+0x20>
   176ea:	281a      	cmp	r0, #26
   176ec:	bf14      	ite	ne
   176ee:	2002      	movne	r0, #2
   176f0:	2001      	moveq	r0, #1
   176f2:	4770      	bx	lr
   176f4:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   176f6:	4770      	bx	lr

000176f8 <handle_event>:
{
   176f8:	b410      	push	{r4}
   176fa:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   176fe:	4604      	mov	r4, r0
   17700:	4608      	mov	r0, r1
		if (handler->event != event) {
   17702:	7811      	ldrb	r1, [r2, #0]
   17704:	42a1      	cmp	r1, r4
   17706:	d004      	beq.n	17712 <handle_event+0x1a>
	for (i = 0; i < num_handlers; i++) {
   17708:	3208      	adds	r2, #8
   1770a:	429a      	cmp	r2, r3
   1770c:	d1f9      	bne.n	17702 <handle_event+0xa>
}
   1770e:	bc10      	pop	{r4}
   17710:	4770      	bx	lr
		if (buf->len < handler->min_len) {
   17712:	8981      	ldrh	r1, [r0, #12]
   17714:	7853      	ldrb	r3, [r2, #1]
   17716:	4299      	cmp	r1, r3
   17718:	d3f9      	bcc.n	1770e <handle_event+0x16>
		handler->handler(buf);
   1771a:	6853      	ldr	r3, [r2, #4]
}
   1771c:	bc10      	pop	{r4}
		handler->handler(buf);
   1771e:	4718      	bx	r3

00017720 <hci_data_buf_overflow>:
}
   17720:	4770      	bx	lr

00017722 <hci_disconn_complete>:
{
   17722:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   17724:	6885      	ldr	r5, [r0, #8]
	if (evt->status) {
   17726:	782e      	ldrb	r6, [r5, #0]
   17728:	b97e      	cbnz	r6, 1774a <hci_disconn_complete+0x28>
	conn = bt_conn_lookup_handle(handle);
   1772a:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   1772e:	f7ee fd31 	bl	6194 <bt_conn_lookup_handle>
	if (!conn) {
   17732:	4604      	mov	r4, r0
   17734:	b148      	cbz	r0, 1774a <hci_disconn_complete+0x28>
	conn->err = evt->reason;
   17736:	78eb      	ldrb	r3, [r5, #3]
   17738:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1773a:	4631      	mov	r1, r6
   1773c:	f7ee fd32 	bl	61a4 <bt_conn_set_state>
		bt_conn_unref(conn);
   17740:	4620      	mov	r0, r4
}
   17742:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   17746:	f000 bc4a 	b.w	17fde <bt_conn_unref>
}
   1774a:	bd70      	pop	{r4, r5, r6, pc}

0001774c <hci_hardware_error>:
	return net_buf_simple_pull_mem(&buf->b, len);
   1774c:	2101      	movs	r1, #1
   1774e:	3008      	adds	r0, #8
   17750:	f005 bcbe 	b.w	1d0d0 <net_buf_simple_pull_mem>

00017754 <hci_vendor_event>:
   17754:	4770      	bx	lr

00017756 <hci_num_completed_packets>:
{
   17756:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	for (i = 0; i < evt->num_handles; i++) {
   1775a:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   1775c:	6887      	ldr	r7, [r0, #8]
			tx->pending_no_cb = 0U;
   1775e:	46a8      	mov	r8, r5
	for (i = 0; i < evt->num_handles; i++) {
   17760:	783b      	ldrb	r3, [r7, #0]
   17762:	429d      	cmp	r5, r3
   17764:	db01      	blt.n	1776a <hci_num_completed_packets+0x14>
}
   17766:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   1776a:	eb07 0385 	add.w	r3, r7, r5, lsl #2
		conn = bt_conn_lookup_handle(handle);
   1776e:	f8b3 0001 	ldrh.w	r0, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   17772:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   17776:	f7ee fd0d 	bl	6194 <bt_conn_lookup_handle>
		if (!conn) {
   1777a:	4604      	mov	r4, r0
   1777c:	b350      	cbz	r0, 177d4 <hci_num_completed_packets+0x7e>
			k_work_submit(&conn->tx_complete_work);
   1777e:	f100 0928 	add.w	r9, r0, #40	; 0x28
		while (count--) {
   17782:	b326      	cbz	r6, 177ce <hci_num_completed_packets+0x78>
	__asm__ volatile(
   17784:	f04f 0320 	mov.w	r3, #32
   17788:	f3ef 8211 	mrs	r2, BASEPRI
   1778c:	f383 8812 	msr	BASEPRI_MAX, r3
   17790:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   17794:	69e3      	ldr	r3, [r4, #28]
   17796:	b16b      	cbz	r3, 177b4 <hci_num_completed_packets+0x5e>
				conn->pending_no_cb--;
   17798:	3b01      	subs	r3, #1
   1779a:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   1779c:	f382 8811 	msr	BASEPRI, r2
   177a0:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   177a4:	4620      	mov	r0, r4
   177a6:	f7ee fc49 	bl	603c <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   177aa:	3e01      	subs	r6, #1
   177ac:	f7fd ff84 	bl	156b8 <z_impl_k_sem_give>
   177b0:	b2b6      	uxth	r6, r6
   177b2:	e7e6      	b.n	17782 <hci_num_completed_packets+0x2c>
	return list->head;
   177b4:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_GET(slist, snode)
   177b6:	b12b      	cbz	r3, 177c4 <hci_num_completed_packets+0x6e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   177b8:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   177ba:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   177bc:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   177be:	428b      	cmp	r3, r1
	list->tail = node;
   177c0:	bf08      	it	eq
   177c2:	61a0      	streq	r0, [r4, #24]
   177c4:	f382 8811 	msr	BASEPRI, r2
   177c8:	f3bf 8f6f 	isb	sy
			if (!node) {
   177cc:	b923      	cbnz	r3, 177d8 <hci_num_completed_packets+0x82>
		bt_conn_unref(conn);
   177ce:	4620      	mov	r0, r4
   177d0:	f000 fc05 	bl	17fde <bt_conn_unref>
	for (i = 0; i < evt->num_handles; i++) {
   177d4:	3501      	adds	r5, #1
   177d6:	e7c3      	b.n	17760 <hci_num_completed_packets+0xa>
	__asm__ volatile(
   177d8:	f04f 0220 	mov.w	r2, #32
   177dc:	f3ef 8111 	mrs	r1, BASEPRI
   177e0:	f382 8812 	msr	BASEPRI_MAX, r2
   177e4:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   177e8:	68da      	ldr	r2, [r3, #12]
   177ea:	61e2      	str	r2, [r4, #28]
	return list->tail;
   177ec:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
   177ee:	f8c3 800c 	str.w	r8, [r3, #12]
	parent->next = child;
   177f2:	f8c3 8000 	str.w	r8, [r3]
Z_GENLIST_APPEND(slist, snode)
   177f6:	b94a      	cbnz	r2, 1780c <hci_num_completed_packets+0xb6>
	list->head = node;
   177f8:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   177fc:	f381 8811 	msr	BASEPRI, r1
   17800:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   17804:	4648      	mov	r0, r9
   17806:	f7fe f8c3 	bl	15990 <k_work_submit>
   1780a:	e7cb      	b.n	177a4 <hci_num_completed_packets+0x4e>
	parent->next = child;
   1780c:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1780e:	6263      	str	r3, [r4, #36]	; 0x24
}
   17810:	e7f4      	b.n	177fc <hci_num_completed_packets+0xa6>

00017812 <le_conn_update_complete>:
{
   17812:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   17814:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   17816:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   1781a:	f7ee fcbb 	bl	6194 <bt_conn_lookup_handle>
	if (!conn) {
   1781e:	4604      	mov	r4, r0
   17820:	2800      	cmp	r0, #0
   17822:	d043      	beq.n	178ac <le_conn_update_complete+0x9a>
	if (!evt->status) {
   17824:	782b      	ldrb	r3, [r5, #0]
   17826:	b9cb      	cbnz	r3, 1785c <le_conn_update_complete+0x4a>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   17828:	792a      	ldrb	r2, [r5, #4]
   1782a:	78eb      	ldrb	r3, [r5, #3]
   1782c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   17830:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   17834:	79aa      	ldrb	r2, [r5, #6]
   17836:	796b      	ldrb	r3, [r5, #5]
   17838:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1783c:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   17840:	79eb      	ldrb	r3, [r5, #7]
   17842:	7a2a      	ldrb	r2, [r5, #8]
   17844:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   17848:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
   1784c:	f7ee fd70 	bl	6330 <notify_le_param_updated>
	bt_conn_unref(conn);
   17850:	4620      	mov	r0, r4
}
   17852:	b003      	add	sp, #12
   17854:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	bt_conn_unref(conn);
   17858:	f000 bbc1 	b.w	17fde <bt_conn_unref>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   1785c:	2b1a      	cmp	r3, #26
   1785e:	d1f7      	bne.n	17850 <le_conn_update_complete+0x3e>
   17860:	78c3      	ldrb	r3, [r0, #3]
   17862:	2b01      	cmp	r3, #1
   17864:	d1f4      	bne.n	17850 <le_conn_update_complete+0x3e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17866:	f3bf 8f5b 	dmb	ish
   1786a:	1d03      	adds	r3, r0, #4
   1786c:	e853 2f00 	ldrex	r2, [r3]
   17870:	f442 6180 	orr.w	r1, r2, #1024	; 0x400
   17874:	e843 1500 	strex	r5, r1, [r3]
   17878:	2d00      	cmp	r5, #0
   1787a:	d1f7      	bne.n	1786c <le_conn_update_complete+0x5a>
   1787c:	f3bf 8f5b 	dmb	ish
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   17880:	0553      	lsls	r3, r2, #21
   17882:	d4e5      	bmi.n	17850 <le_conn_update_complete+0x3e>
		param.interval_min = conn->le.interval_min;
   17884:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
   17888:	f8ad 3000 	strh.w	r3, [sp]
		param.interval_max = conn->le.interval_max;
   1788c:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
   17890:	f8ad 3002 	strh.w	r3, [sp, #2]
		param.latency = conn->le.pending_latency;
   17894:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
   17898:	f8ad 3004 	strh.w	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   1789c:	4669      	mov	r1, sp
		param.timeout = conn->le.pending_timeout;
   1789e:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
   178a2:	f8ad 3006 	strh.w	r3, [sp, #6]
		bt_l2cap_update_conn_param(conn, &param);
   178a6:	f7ee ffed 	bl	6884 <bt_l2cap_update_conn_param>
   178aa:	e7d1      	b.n	17850 <le_conn_update_complete+0x3e>
}
   178ac:	b003      	add	sp, #12
   178ae:	bd30      	pop	{r4, r5, pc}

000178b0 <bt_hci_disconnect>:
{
   178b0:	b570      	push	{r4, r5, r6, lr}
   178b2:	4606      	mov	r6, r0
   178b4:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   178b6:	f240 4006 	movw	r0, #1030	; 0x406
   178ba:	2103      	movs	r1, #3
   178bc:	f7ec fef8 	bl	46b0 <bt_hci_cmd_create>
	if (!buf) {
   178c0:	4604      	mov	r4, r0
   178c2:	b168      	cbz	r0, 178e0 <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   178c4:	2103      	movs	r1, #3
   178c6:	3008      	adds	r0, #8
   178c8:	f005 fb7f 	bl	1cfca <net_buf_simple_add>
	disconn->reason = reason;
   178cc:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   178ce:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   178d0:	4621      	mov	r1, r4
   178d2:	2200      	movs	r2, #0
}
   178d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   178d8:	f240 4006 	movw	r0, #1030	; 0x406
   178dc:	f7ec bf22 	b.w	4724 <bt_hci_cmd_send_sync>
}
   178e0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   178e4:	bd70      	pop	{r4, r5, r6, pc}

000178e6 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   178e6:	8803      	ldrh	r3, [r0, #0]
   178e8:	8842      	ldrh	r2, [r0, #2]
   178ea:	4293      	cmp	r3, r2
{
   178ec:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   178ee:	d819      	bhi.n	17924 <bt_le_conn_params_valid+0x3e>
   178f0:	2b05      	cmp	r3, #5
   178f2:	d917      	bls.n	17924 <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   178f4:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   178f8:	d814      	bhi.n	17924 <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   178fa:	8883      	ldrh	r3, [r0, #4]
   178fc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   17900:	d210      	bcs.n	17924 <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   17902:	88c0      	ldrh	r0, [r0, #6]
   17904:	f1a0 010a 	sub.w	r1, r0, #10
   17908:	b289      	uxth	r1, r1
   1790a:	f640 4476 	movw	r4, #3190	; 0xc76
   1790e:	42a1      	cmp	r1, r4
   17910:	d808      	bhi.n	17924 <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   17912:	3301      	adds	r3, #1
   17914:	b29b      	uxth	r3, r3
   17916:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   17918:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   1791c:	bf34      	ite	cc
   1791e:	2001      	movcc	r0, #1
   17920:	2000      	movcs	r0, #0
}
   17922:	bd10      	pop	{r4, pc}
		return false;
   17924:	2000      	movs	r0, #0
   17926:	e7fc      	b.n	17922 <bt_le_conn_params_valid+0x3c>

00017928 <le_conn_param_neg_reply>:
{
   17928:	b570      	push	{r4, r5, r6, lr}
   1792a:	4606      	mov	r6, r0
   1792c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   1792e:	f242 0021 	movw	r0, #8225	; 0x2021
   17932:	2103      	movs	r1, #3
   17934:	f7ec febc 	bl	46b0 <bt_hci_cmd_create>
	if (!buf) {
   17938:	4604      	mov	r4, r0
   1793a:	b160      	cbz	r0, 17956 <le_conn_param_neg_reply+0x2e>
   1793c:	2103      	movs	r1, #3
   1793e:	3008      	adds	r0, #8
   17940:	f005 fb43 	bl	1cfca <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
   17944:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
   17946:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   17948:	4621      	mov	r1, r4
   1794a:	f242 0021 	movw	r0, #8225	; 0x2021
}
   1794e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   17952:	f7ec bf51 	b.w	47f8 <bt_hci_cmd_send>
}
   17956:	bd70      	pop	{r4, r5, r6, pc}

00017958 <le_conn_param_req>:
{
   17958:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   1795a:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   1795c:	78d9      	ldrb	r1, [r3, #3]
   1795e:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   17960:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   17962:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   17966:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   1796a:	7959      	ldrb	r1, [r3, #5]
   1796c:	791a      	ldrb	r2, [r3, #4]
   1796e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   17972:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   17976:	799a      	ldrb	r2, [r3, #6]
   17978:	79d9      	ldrb	r1, [r3, #7]
   1797a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1797e:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   17982:	7a1a      	ldrb	r2, [r3, #8]
   17984:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   17986:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
   17988:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   1798c:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1798e:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   17992:	f7ee fbff 	bl	6194 <bt_conn_lookup_handle>
	if (!conn) {
   17996:	4606      	mov	r6, r0
   17998:	b928      	cbnz	r0, 179a6 <le_conn_param_req+0x4e>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   1799a:	2102      	movs	r1, #2
   1799c:	4620      	mov	r0, r4
   1799e:	f7ff ffc3 	bl	17928 <le_conn_param_neg_reply>
}
   179a2:	b003      	add	sp, #12
   179a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   179a6:	4669      	mov	r1, sp
   179a8:	f7ee fd0e 	bl	63c8 <le_param_req>
   179ac:	b938      	cbnz	r0, 179be <le_conn_param_req+0x66>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   179ae:	211e      	movs	r1, #30
   179b0:	4620      	mov	r0, r4
   179b2:	f7ff ffb9 	bl	17928 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   179b6:	4630      	mov	r0, r6
   179b8:	f000 fb11 	bl	17fde <bt_conn_unref>
   179bc:	e7f1      	b.n	179a2 <le_conn_param_req+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   179be:	210e      	movs	r1, #14
   179c0:	f242 0020 	movw	r0, #8224	; 0x2020
   179c4:	f7ec fe74 	bl	46b0 <bt_hci_cmd_create>
	if (!buf) {
   179c8:	4605      	mov	r5, r0
   179ca:	2800      	cmp	r0, #0
   179cc:	d0f3      	beq.n	179b6 <le_conn_param_req+0x5e>
   179ce:	210e      	movs	r1, #14
   179d0:	3008      	adds	r0, #8
   179d2:	f005 fafa 	bl	1cfca <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
   179d6:	220e      	movs	r2, #14
   179d8:	4604      	mov	r4, r0
   179da:	2100      	movs	r1, #0
   179dc:	f7ff fc45 	bl	1726a <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   179e0:	f8bd 3000 	ldrh.w	r3, [sp]
   179e4:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   179e6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   179ea:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   179ec:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   179f0:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   179f2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
   179f6:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   179f8:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   179fa:	4629      	mov	r1, r5
   179fc:	f242 0020 	movw	r0, #8224	; 0x2020
   17a00:	f7ec fefa 	bl	47f8 <bt_hci_cmd_send>
   17a04:	e7d7      	b.n	179b6 <le_conn_param_req+0x5e>

00017a06 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   17a06:	6880      	ldr	r0, [r0, #8]
   17a08:	f7ec bf42 	b.w	4890 <bt_hci_le_enh_conn_complete>

00017a0c <le_legacy_conn_complete>:
{
   17a0c:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   17a0e:	6881      	ldr	r1, [r0, #8]
{
   17a10:	b08a      	sub	sp, #40	; 0x28
	enh.status         = evt->status;
   17a12:	780b      	ldrb	r3, [r1, #0]
   17a14:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   17a18:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   17a1c:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   17a20:	78cb      	ldrb	r3, [r1, #3]
   17a22:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   17a26:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   17a2a:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   17a2e:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   17a32:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   17a36:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   17a3a:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   17a3e:	7c4b      	ldrb	r3, [r1, #17]
   17a40:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	memcpy(dst, src, sizeof(*dst));
   17a44:	2207      	movs	r2, #7
   17a46:	3104      	adds	r1, #4
   17a48:	a803      	add	r0, sp, #12
   17a4a:	f7ff fc03 	bl	17254 <memcpy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   17a4e:	2400      	movs	r4, #0
	memcpy(dst, src, sizeof(*dst));
   17a50:	4669      	mov	r1, sp
   17a52:	2206      	movs	r2, #6
   17a54:	f10d 0013 	add.w	r0, sp, #19
   17a58:	9400      	str	r4, [sp, #0]
   17a5a:	f8ad 4004 	strh.w	r4, [sp, #4]
   17a5e:	f7ff fbf9 	bl	17254 <memcpy>
   17a62:	2206      	movs	r2, #6
   17a64:	4669      	mov	r1, sp
   17a66:	f10d 0019 	add.w	r0, sp, #25
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   17a6a:	9400      	str	r4, [sp, #0]
   17a6c:	f8ad 4004 	strh.w	r4, [sp, #4]
   17a70:	f7ff fbf0 	bl	17254 <memcpy>
	bt_hci_le_enh_conn_complete(evt);
   17a74:	a802      	add	r0, sp, #8
   17a76:	f7ec ff0b 	bl	4890 <bt_hci_le_enh_conn_complete>
}
   17a7a:	b00a      	add	sp, #40	; 0x28
   17a7c:	bd10      	pop	{r4, pc}

00017a7e <le_remote_feat_complete>:
{
   17a7e:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   17a80:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   17a82:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   17a86:	f7ee fb85 	bl	6194 <bt_conn_lookup_handle>
	if (!conn) {
   17a8a:	4604      	mov	r4, r0
   17a8c:	b1d8      	cbz	r0, 17ac6 <le_remote_feat_complete+0x48>
	if (!evt->status) {
   17a8e:	782b      	ldrb	r3, [r5, #0]
   17a90:	b923      	cbnz	r3, 17a9c <le_remote_feat_complete+0x1e>
		memcpy(conn->le.features, evt->features,
   17a92:	2208      	movs	r2, #8
   17a94:	1ce9      	adds	r1, r5, #3
   17a96:	30ac      	adds	r0, #172	; 0xac
   17a98:	f7ff fbdc 	bl	17254 <memcpy>
   17a9c:	f3bf 8f5b 	dmb	ish
   17aa0:	1d23      	adds	r3, r4, #4
   17aa2:	e853 2f00 	ldrex	r2, [r3]
   17aa6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   17aaa:	e843 2100 	strex	r1, r2, [r3]
   17aae:	2900      	cmp	r1, #0
   17ab0:	d1f7      	bne.n	17aa2 <le_remote_feat_complete+0x24>
   17ab2:	f3bf 8f5b 	dmb	ish
	conn_auto_initiate(conn);
   17ab6:	4620      	mov	r0, r4
   17ab8:	f7ec fec0 	bl	483c <conn_auto_initiate>
	bt_conn_unref(conn);
   17abc:	4620      	mov	r0, r4
}
   17abe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   17ac2:	f000 ba8c 	b.w	17fde <bt_conn_unref>
}
   17ac6:	bd38      	pop	{r3, r4, r5, pc}

00017ac8 <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
   17ac8:	2000      	movs	r0, #0
   17aca:	4770      	bx	lr

00017acc <bt_hci_evt_create>:
#include <stdint.h>
#include <sys/byteorder.h>
#include <drivers/bluetooth/hci_driver.h>

struct net_buf *bt_hci_evt_create(uint8_t evt, uint8_t len)
{
   17acc:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;

	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   17ace:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   17ad2:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   17ad4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17ad8:	2100      	movs	r1, #0
{
   17ada:	4606      	mov	r6, r0
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   17adc:	f7ec fcc4 	bl	4468 <bt_buf_get_evt>
   17ae0:	2102      	movs	r1, #2
   17ae2:	4604      	mov	r4, r0
   17ae4:	3008      	adds	r0, #8
   17ae6:	f005 fa70 	bl	1cfca <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = evt;
   17aea:	7006      	strb	r6, [r0, #0]
	hdr->len = len;
   17aec:	7045      	strb	r5, [r0, #1]

	return buf;
}
   17aee:	4620      	mov	r0, r4
   17af0:	bd70      	pop	{r4, r5, r6, pc}

00017af2 <bt_hci_cmd_complete_create>:
struct net_buf *bt_hci_cmd_complete_create(uint16_t op, uint8_t plen)
{
	struct net_buf *buf;
	struct bt_hci_evt_cmd_complete *cc;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   17af2:	3103      	adds	r1, #3
{
   17af4:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   17af6:	b2c9      	uxtb	r1, r1
{
   17af8:	4605      	mov	r5, r0
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   17afa:	200e      	movs	r0, #14
   17afc:	f7ff ffe6 	bl	17acc <bt_hci_evt_create>
   17b00:	2103      	movs	r1, #3
   17b02:	4604      	mov	r4, r0
   17b04:	3008      	adds	r0, #8
   17b06:	f005 fa60 	bl	1cfca <net_buf_simple_add>

	cc = net_buf_add(buf, sizeof(*cc));
	cc->ncmd = 1U;
   17b0a:	2301      	movs	r3, #1
   17b0c:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(op);
   17b0e:	f8a0 5001 	strh.w	r5, [r0, #1]

	return buf;
}
   17b12:	4620      	mov	r0, r4
   17b14:	bd38      	pop	{r3, r4, r5, pc}

00017b16 <bt_hci_cmd_status_create>:

struct net_buf *bt_hci_cmd_status_create(uint16_t op, uint8_t status)
{
   17b16:	b570      	push	{r4, r5, r6, lr}
   17b18:	4605      	mov	r5, r0
   17b1a:	460e      	mov	r6, r1
	struct net_buf *buf;
	struct bt_hci_evt_cmd_status *cs;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   17b1c:	200f      	movs	r0, #15
   17b1e:	2104      	movs	r1, #4
   17b20:	f7ff ffd4 	bl	17acc <bt_hci_evt_create>
   17b24:	2104      	movs	r1, #4
   17b26:	4604      	mov	r4, r0
   17b28:	3008      	adds	r0, #8
   17b2a:	f005 fa4e 	bl	1cfca <net_buf_simple_add>

	cs = net_buf_add(buf, sizeof(*cs));
	cs->status = status;
	cs->ncmd = 1U;
   17b2e:	2201      	movs	r2, #1
	cs->status = status;
   17b30:	7006      	strb	r6, [r0, #0]
	cs->ncmd = 1U;
   17b32:	7042      	strb	r2, [r0, #1]
	cs->opcode = sys_cpu_to_le16(op);
   17b34:	8045      	strh	r5, [r0, #2]

	return buf;
}
   17b36:	4620      	mov	r0, r4
   17b38:	bd70      	pop	{r4, r5, r6, pc}

00017b3a <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17b3a:	f3bf 8f5b 	dmb	ish
   17b3e:	6800      	ldr	r0, [r0, #0]
   17b40:	f3bf 8f5b 	dmb	ish
}
   17b44:	4770      	bx	lr

00017b46 <is_adv_using_rand_addr>:
{
   17b46:	b508      	push	{r3, lr}
	adv = bt_le_adv_lookup_legacy();
   17b48:	f7ed fdde 	bl	5708 <bt_le_adv_lookup_legacy>
	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
   17b4c:	b120      	cbz	r0, 17b58 <is_adv_using_rand_addr+0x12>
   17b4e:	3010      	adds	r0, #16
   17b50:	f7ff fff3 	bl	17b3a <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   17b54:	f3c0 1080 	ubfx	r0, r0, #6, #1
}
   17b58:	bd08      	pop	{r3, pc}

00017b5a <bt_lookup_id_addr>:
}
   17b5a:	4608      	mov	r0, r1
   17b5c:	4770      	bx	lr

00017b5e <bt_id_set_private_addr>:
{
   17b5e:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   17b60:	2106      	movs	r1, #6
   17b62:	4668      	mov	r0, sp
   17b64:	f004 fb32 	bl	1c1cc <bt_rand>
	if (err) {
   17b68:	b940      	cbnz	r0, 17b7c <bt_id_set_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   17b6a:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   17b6e:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   17b70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   17b74:	f88d 3005 	strb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   17b78:	f7ed fb40 	bl	51fc <set_random_address>
}
   17b7c:	b003      	add	sp, #12
   17b7e:	f85d fb04 	ldr.w	pc, [sp], #4

00017b82 <bt_id_set_adv_private_addr>:
{
   17b82:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   17b84:	2106      	movs	r1, #6
   17b86:	4668      	mov	r0, sp
   17b88:	f004 fb20 	bl	1c1cc <bt_rand>
	if (err) {
   17b8c:	b940      	cbnz	r0, 17ba0 <bt_id_set_adv_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   17b8e:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
   17b92:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   17b94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   17b98:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
   17b9c:	f7ed fb2e 	bl	51fc <set_random_address>
}
   17ba0:	b003      	add	sp, #12
   17ba2:	f85d fb04 	ldr.w	pc, [sp], #4

00017ba6 <bt_id_scan_random_addr_check>:
{
   17ba6:	b508      	push	{r3, lr}
	adv = bt_le_adv_lookup_legacy();
   17ba8:	f7ed fdae 	bl	5708 <bt_le_adv_lookup_legacy>
	if (!adv) {
   17bac:	b110      	cbz	r0, 17bb4 <bt_id_scan_random_addr_check+0xe>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   17bae:	3010      	adds	r0, #16
   17bb0:	f7ff ffc3 	bl	17b3a <atomic_get>
}
   17bb4:	2001      	movs	r0, #1
   17bb6:	bd08      	pop	{r3, pc}

00017bb8 <get_adv_channel_map>:
{
   17bb8:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   17bba:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   17bbe:	bf0c      	ite	eq
   17bc0:	2007      	moveq	r0, #7
   17bc2:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   17bc4:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   17bc6:	bf48      	it	mi
   17bc8:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   17bcc:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   17bce:	bf48      	it	mi
   17bd0:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   17bd4:	4770      	bx	lr

00017bd6 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17bd6:	f3bf 8f5b 	dmb	ish
   17bda:	6800      	ldr	r0, [r0, #0]
   17bdc:	f3bf 8f5b 	dmb	ish
}
   17be0:	4770      	bx	lr

00017be2 <atomic_and>:
{
   17be2:	4603      	mov	r3, r0
}
   17be4:	f3bf 8f5b 	dmb	ish
   17be8:	e853 0f00 	ldrex	r0, [r3]
   17bec:	ea00 0201 	and.w	r2, r0, r1
   17bf0:	e843 2c00 	strex	ip, r2, [r3]
   17bf4:	f1bc 0f00 	cmp.w	ip, #0
   17bf8:	d1f6      	bne.n	17be8 <atomic_and+0x6>
   17bfa:	f3bf 8f5b 	dmb	ish
   17bfe:	4770      	bx	lr

00017c00 <hci_set_ad>:
{
   17c00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17c04:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   17c06:	2120      	movs	r1, #32
{
   17c08:	4682      	mov	sl, r0
   17c0a:	4616      	mov	r6, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   17c0c:	f7ec fd50 	bl	46b0 <bt_hci_cmd_create>
	if (!buf) {
   17c10:	4605      	mov	r5, r0
   17c12:	2800      	cmp	r0, #0
   17c14:	d04a      	beq.n	17cac <hci_set_ad+0xac>
   17c16:	2120      	movs	r1, #32
   17c18:	3008      	adds	r0, #8
   17c1a:	f005 f9d6 	bl	1cfca <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
   17c1e:	2220      	movs	r2, #32
   17c20:	2100      	movs	r1, #0
   17c22:	4681      	mov	r9, r0
   17c24:	f7ff fb21 	bl	1726a <memset>
	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   17c28:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
   17c2c:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   17c30:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;
   17c32:	2600      	movs	r6, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   17c34:	f8d4 8000 	ldr.w	r8, [r4]
   17c38:	2300      	movs	r3, #0
   17c3a:	6862      	ldr	r2, [r4, #4]
   17c3c:	4293      	cmp	r3, r2
   17c3e:	d30d      	bcc.n	17c5c <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
   17c40:	9b00      	ldr	r3, [sp, #0]
   17c42:	3408      	adds	r4, #8
   17c44:	42a3      	cmp	r3, r4
   17c46:	d1f5      	bne.n	17c34 <hci_set_ad+0x34>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   17c48:	2200      	movs	r2, #0
   17c4a:	4629      	mov	r1, r5
   17c4c:	4650      	mov	r0, sl
	*data_len = set_data_len;
   17c4e:	f889 6000 	strb.w	r6, [r9]
}
   17c52:	b003      	add	sp, #12
   17c54:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   17c58:	f7ec bd64 	b.w	4724 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   17c5c:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   17c60:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   17c64:	1cb0      	adds	r0, r6, #2
   17c66:	1811      	adds	r1, r2, r0
   17c68:	291f      	cmp	r1, #31
   17c6a:	d908      	bls.n	17c7e <hci_set_ad+0x7e>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   17c6c:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   17c70:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
   17c74:	d11f      	bne.n	17cb6 <hci_set_ad+0xb6>
   17c76:	2a00      	cmp	r2, #0
   17c78:	dd1d      	ble.n	17cb6 <hci_set_ad+0xb6>
				type = BT_DATA_NAME_SHORTENED;
   17c7a:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   17c7e:	b2d7      	uxtb	r7, r2
   17c80:	1c79      	adds	r1, r7, #1
   17c82:	f80b 1006 	strb.w	r1, [fp, r6]
   17c86:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
   17c88:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
   17c8a:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
   17c8e:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
   17c92:	f8d8 1004 	ldr.w	r1, [r8, #4]
   17c96:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   17c98:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
   17c9a:	f7ff fadb 	bl	17254 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   17c9e:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
   17ca0:	443e      	add	r6, r7
   17ca2:	b2f6      	uxtb	r6, r6
		for (size_t j = 0; j < ad[i].len; j++) {
   17ca4:	3301      	adds	r3, #1
   17ca6:	f108 0808 	add.w	r8, r8, #8
   17caa:	e7c6      	b.n	17c3a <hci_set_ad+0x3a>
		return -ENOBUFS;
   17cac:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   17cb0:	b003      	add	sp, #12
   17cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		net_buf_unref(buf);
   17cb6:	4628      	mov	r0, r5
   17cb8:	f7fa faea 	bl	12290 <net_buf_unref>
		return err;
   17cbc:	f06f 0015 	mvn.w	r0, #21
   17cc0:	e7f6      	b.n	17cb0 <hci_set_ad+0xb0>

00017cc2 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   17cc2:	2301      	movs	r3, #1
{
   17cc4:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   17cc6:	fa03 f101 	lsl.w	r1, r3, r1
{
   17cca:	4604      	mov	r4, r0
	if (val) {
   17ccc:	b162      	cbz	r2, 17ce8 <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17cce:	f3bf 8f5b 	dmb	ish
   17cd2:	e854 3f00 	ldrex	r3, [r4]
   17cd6:	430b      	orrs	r3, r1
   17cd8:	e844 3200 	strex	r2, r3, [r4]
   17cdc:	2a00      	cmp	r2, #0
   17cde:	d1f8      	bne.n	17cd2 <atomic_set_bit_to+0x10>
   17ce0:	f3bf 8f5b 	dmb	ish
}
   17ce4:	bc10      	pop	{r4}
   17ce6:	4770      	bx	lr
   17ce8:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17cea:	43c9      	mvns	r1, r1
   17cec:	f7ff bf79 	b.w	17be2 <atomic_and>

00017cf0 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   17cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17cf4:	b087      	sub	sp, #28
   17cf6:	4605      	mov	r5, r0
   17cf8:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   17cfc:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   17d00:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   17d04:	460c      	mov	r4, r1
   17d06:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   17d08:	2100      	movs	r1, #0
   17d0a:	2210      	movs	r2, #16
   17d0c:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   17d0e:	461f      	mov	r7, r3
	struct bt_ad d[2] = {};
   17d10:	f7ff faab 	bl	1726a <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   17d14:	b186      	cbz	r6, 17d38 <le_adv_update.constprop.0+0x48>
		const char *name = bt_get_name();
   17d16:	f7ed fa53 	bl	51c0 <bt_get_name>
   17d1a:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   17d1c:	2c00      	cmp	r4, #0
   17d1e:	d139      	bne.n	17d94 <le_adv_update.constprop.0+0xa4>
   17d20:	2f00      	cmp	r7, #0
   17d22:	d142      	bne.n	17daa <le_adv_update.constprop.0+0xba>
		data = (struct bt_data)BT_DATA(
   17d24:	4658      	mov	r0, fp
   17d26:	f7ff fa68 	bl	171fa <strlen>
   17d2a:	2309      	movs	r3, #9
   17d2c:	f88d 3000 	strb.w	r3, [sp]
   17d30:	f88d 0001 	strb.w	r0, [sp, #1]
   17d34:	f8cd b004 	str.w	fp, [sp, #4]
		if (name_type == ADV_NAME_TYPE_AD) {
   17d38:	2e01      	cmp	r6, #1
			d_len = 2;
   17d3a:	bf0c      	ite	eq
   17d3c:	2202      	moveq	r2, #2
		d_len = 1;
   17d3e:	2201      	movne	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   17d40:	a902      	add	r1, sp, #8
   17d42:	f242 0008 	movw	r0, #8200	; 0x2008
		d[0].len = ad_len;
   17d46:	e9cd 4802 	strd	r4, r8, [sp, #8]
			d[1].data = &data;
   17d4a:	bf04      	itt	eq
   17d4c:	f8cd d010 	streq.w	sp, [sp, #16]
			d[1].len = 1;
   17d50:	9605      	streq	r6, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   17d52:	f7ff ff55 	bl	17c00 <hci_set_ad>
		if (err) {
   17d56:	4604      	mov	r4, r0
   17d58:	b978      	cbnz	r0, 17d7a <le_adv_update.constprop.0+0x8a>
	if (scannable) {
   17d5a:	f1ba 0f00 	cmp.w	sl, #0
   17d5e:	d126      	bne.n	17dae <le_adv_update.constprop.0+0xbe>
   17d60:	3510      	adds	r5, #16
   17d62:	f3bf 8f5b 	dmb	ish
   17d66:	e855 3f00 	ldrex	r3, [r5]
   17d6a:	f043 0304 	orr.w	r3, r3, #4
   17d6e:	e845 3200 	strex	r2, r3, [r5]
   17d72:	2a00      	cmp	r2, #0
   17d74:	d1f7      	bne.n	17d66 <le_adv_update.constprop.0+0x76>
   17d76:	f3bf 8f5b 	dmb	ish
}
   17d7a:	4620      	mov	r0, r4
   17d7c:	b007      	add	sp, #28
   17d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   17d82:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   17d86:	3a08      	subs	r2, #8
   17d88:	2a01      	cmp	r2, #1
   17d8a:	d925      	bls.n	17dd8 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   17d8c:	3301      	adds	r3, #1
   17d8e:	4598      	cmp	r8, r3
   17d90:	d1f7      	bne.n	17d82 <le_adv_update.constprop.0+0x92>
   17d92:	e7c5      	b.n	17d20 <le_adv_update.constprop.0+0x30>
   17d94:	2300      	movs	r3, #0
   17d96:	e7fa      	b.n	17d8e <le_adv_update.constprop.0+0x9e>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   17d98:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   17d9c:	3a08      	subs	r2, #8
   17d9e:	2a01      	cmp	r2, #1
   17da0:	d91a      	bls.n	17dd8 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   17da2:	3301      	adds	r3, #1
   17da4:	4599      	cmp	r9, r3
   17da6:	d1f7      	bne.n	17d98 <le_adv_update.constprop.0+0xa8>
   17da8:	e7bc      	b.n	17d24 <le_adv_update.constprop.0+0x34>
   17daa:	2300      	movs	r3, #0
   17dac:	e7fa      	b.n	17da4 <le_adv_update.constprop.0+0xb4>
		if (name_type == ADV_NAME_TYPE_SD) {
   17dae:	2e02      	cmp	r6, #2
   17db0:	f04f 0201 	mov.w	r2, #1
			d[1].len = 1;
   17db4:	bf08      	it	eq
   17db6:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   17db8:	a902      	add	r1, sp, #8
			d_len = 2;
   17dba:	bf08      	it	eq
   17dbc:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   17dbe:	f242 0009 	movw	r0, #8201	; 0x2009
			d[1].data = &data;
   17dc2:	bf08      	it	eq
   17dc4:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   17dc8:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   17dcc:	f7ff ff18 	bl	17c00 <hci_set_ad>
		if (err) {
   17dd0:	2800      	cmp	r0, #0
   17dd2:	d0c5      	beq.n	17d60 <le_adv_update.constprop.0+0x70>
   17dd4:	4604      	mov	r4, r0
   17dd6:	e7d0      	b.n	17d7a <le_adv_update.constprop.0+0x8a>
			return -EINVAL;
   17dd8:	f06f 0415 	mvn.w	r4, #21
   17ddc:	e7cd      	b.n	17d7a <le_adv_update.constprop.0+0x8a>

00017dde <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   17dde:	6843      	ldr	r3, [r0, #4]
   17de0:	f013 0008 	ands.w	r0, r3, #8
   17de4:	d00a      	beq.n	17dfc <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   17de6:	035a      	lsls	r2, r3, #13
   17de8:	d407      	bmi.n	17dfa <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   17dea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
		return ADV_NAME_TYPE_SD;
   17dee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   17df2:	bf0c      	ite	eq
   17df4:	2001      	moveq	r0, #1
   17df6:	2002      	movne	r0, #2
   17df8:	4770      	bx	lr
			return ADV_NAME_TYPE_AD;
   17dfa:	2001      	movs	r0, #1
}
   17dfc:	4770      	bx	lr

00017dfe <bt_le_adv_set_enable_legacy>:
{
   17dfe:	b570      	push	{r4, r5, r6, lr}
   17e00:	4606      	mov	r6, r0
   17e02:	b086      	sub	sp, #24
   17e04:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   17e06:	f242 000a 	movw	r0, #8202	; 0x200a
   17e0a:	2101      	movs	r1, #1
   17e0c:	f7ec fc50 	bl	46b0 <bt_hci_cmd_create>
	if (!buf) {
   17e10:	4604      	mov	r4, r0
   17e12:	b1b0      	cbz	r0, 17e42 <bt_le_adv_set_enable_legacy+0x44>
	return net_buf_simple_add_u8(&buf->b, val);
   17e14:	3008      	adds	r0, #8
	if (enable) {
   17e16:	b195      	cbz	r5, 17e3e <bt_le_adv_set_enable_legacy+0x40>
   17e18:	2101      	movs	r1, #1
   17e1a:	f005 f8e5 	bl	1cfe8 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   17e1e:	f106 0210 	add.w	r2, r6, #16
   17e22:	a903      	add	r1, sp, #12
   17e24:	4620      	mov	r0, r4
   17e26:	9500      	str	r5, [sp, #0]
   17e28:	2306      	movs	r3, #6
   17e2a:	f7ec fc2f 	bl	468c <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   17e2e:	2200      	movs	r2, #0
   17e30:	4621      	mov	r1, r4
   17e32:	f242 000a 	movw	r0, #8202	; 0x200a
   17e36:	f7ec fc75 	bl	4724 <bt_hci_cmd_send_sync>
}
   17e3a:	b006      	add	sp, #24
   17e3c:	bd70      	pop	{r4, r5, r6, pc}
   17e3e:	4629      	mov	r1, r5
   17e40:	e7eb      	b.n	17e1a <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   17e42:	f06f 0068 	mvn.w	r0, #104	; 0x68
   17e46:	e7f8      	b.n	17e3a <bt_le_adv_set_enable_legacy+0x3c>

00017e48 <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   17e48:	3018      	adds	r0, #24
   17e4a:	f006 bc80 	b.w	1e74e <k_work_cancel_delayable>

00017e4e <adv_timeout>:
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   17e4e:	f7ed bdb7 	b.w	59c0 <bt_le_adv_stop>

00017e52 <atomic_and>:
{
   17e52:	4603      	mov	r3, r0
}
   17e54:	f3bf 8f5b 	dmb	ish
   17e58:	e853 0f00 	ldrex	r0, [r3]
   17e5c:	ea00 0201 	and.w	r2, r0, r1
   17e60:	e843 2c00 	strex	ip, r2, [r3]
   17e64:	f1bc 0f00 	cmp.w	ip, #0
   17e68:	d1f6      	bne.n	17e58 <atomic_and+0x6>
   17e6a:	f3bf 8f5b 	dmb	ish
   17e6e:	4770      	bx	lr

00017e70 <bt_le_scan_set_enable>:
	return bt_le_scan_set_enable_legacy(enable);
   17e70:	f7ed be46 	b.w	5b00 <bt_le_scan_set_enable_legacy>

00017e74 <tx_notify>:
{
   17e74:	b570      	push	{r4, r5, r6, lr}
   17e76:	4604      	mov	r4, r0
	__asm__ volatile(
   17e78:	f04f 0220 	mov.w	r2, #32
   17e7c:	f3ef 8311 	mrs	r3, BASEPRI
   17e80:	f382 8812 	msr	BASEPRI_MAX, r2
   17e84:	f3bf 8f6f 	isb	sy
	return list->head;
   17e88:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   17e8a:	b920      	cbnz	r0, 17e96 <tx_notify+0x22>
	__asm__ volatile(
   17e8c:	f383 8811 	msr	BASEPRI, r3
   17e90:	f3bf 8f6f 	isb	sy
}
   17e94:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   17e96:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return node->next;
   17e98:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   17e9a:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   17e9c:	4288      	cmp	r0, r1
	list->tail = node;
   17e9e:	bf08      	it	eq
   17ea0:	6262      	streq	r2, [r4, #36]	; 0x24
   17ea2:	f383 8811 	msr	BASEPRI, r3
   17ea6:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   17eaa:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   17eae:	f7ee f80f 	bl	5ed0 <tx_free>
		cb(conn, user_data);
   17eb2:	4631      	mov	r1, r6
   17eb4:	4620      	mov	r0, r4
   17eb6:	47a8      	blx	r5
	while (1) {
   17eb8:	e7de      	b.n	17e78 <tx_notify+0x4>

00017eba <tx_complete_work>:
	tx_notify(conn);
   17eba:	3828      	subs	r0, #40	; 0x28
   17ebc:	f7ff bfda 	b.w	17e74 <tx_notify>

00017ec0 <bt_conn_reset_rx_state>:
{
   17ec0:	b510      	push	{r4, lr}
   17ec2:	4604      	mov	r4, r0
	if (!conn->rx) {
   17ec4:	6900      	ldr	r0, [r0, #16]
   17ec6:	b118      	cbz	r0, 17ed0 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   17ec8:	f7fa f9e2 	bl	12290 <net_buf_unref>
	conn->rx = NULL;
   17ecc:	2300      	movs	r3, #0
   17ece:	6123      	str	r3, [r4, #16]
}
   17ed0:	bd10      	pop	{r4, pc}

00017ed2 <conn_cleanup>:
{
   17ed2:	b570      	push	{r4, r5, r6, lr}
   17ed4:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   17ed6:	f100 0638 	add.w	r6, r0, #56	; 0x38
   17eda:	2200      	movs	r2, #0
   17edc:	2300      	movs	r3, #0
   17ede:	4630      	mov	r0, r6
   17ee0:	f005 f810 	bl	1cf04 <net_buf_get>
   17ee4:	4605      	mov	r5, r0
   17ee6:	b950      	cbnz	r0, 17efe <conn_cleanup+0x2c>
	bt_conn_reset_rx_state(conn);
   17ee8:	4620      	mov	r0, r4
   17eea:	f7ff ffe9 	bl	17ec0 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   17eee:	f104 0058 	add.w	r0, r4, #88	; 0x58
   17ef2:	2200      	movs	r2, #0
}
   17ef4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   17ef8:	2300      	movs	r3, #0
   17efa:	f7fd bde5 	b.w	15ac8 <k_work_reschedule>
		if (tx_data(buf)->tx) {
   17efe:	6968      	ldr	r0, [r5, #20]
   17f00:	b108      	cbz	r0, 17f06 <conn_cleanup+0x34>
			tx_free(tx_data(buf)->tx);
   17f02:	f7ed ffe5 	bl	5ed0 <tx_free>
		net_buf_unref(buf);
   17f06:	4628      	mov	r0, r5
   17f08:	f7fa f9c2 	bl	12290 <net_buf_unref>
   17f0c:	e7e5      	b.n	17eda <conn_cleanup+0x8>

00017f0e <bt_conn_recv>:
{
   17f0e:	b570      	push	{r4, r5, r6, lr}
   17f10:	4616      	mov	r6, r2
   17f12:	4604      	mov	r4, r0
   17f14:	460d      	mov	r5, r1
	tx_notify(conn);
   17f16:	f7ff ffad 	bl	17e74 <tx_notify>
	switch (flags) {
   17f1a:	2e01      	cmp	r6, #1
   17f1c:	d017      	beq.n	17f4e <bt_conn_recv+0x40>
   17f1e:	2e02      	cmp	r6, #2
   17f20:	d117      	bne.n	17f52 <bt_conn_recv+0x44>
		if (conn->rx) {
   17f22:	6923      	ldr	r3, [r4, #16]
   17f24:	b113      	cbz	r3, 17f2c <bt_conn_recv+0x1e>
			bt_conn_reset_rx_state(conn);
   17f26:	4620      	mov	r0, r4
   17f28:	f7ff ffca 	bl	17ec0 <bt_conn_reset_rx_state>
		conn->rx = buf;
   17f2c:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   17f2e:	6921      	ldr	r1, [r4, #16]
   17f30:	898a      	ldrh	r2, [r1, #12]
   17f32:	2a01      	cmp	r2, #1
   17f34:	d937      	bls.n	17fa6 <bt_conn_recv+0x98>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   17f36:	688b      	ldr	r3, [r1, #8]
   17f38:	881b      	ldrh	r3, [r3, #0]
   17f3a:	3304      	adds	r3, #4
   17f3c:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   17f3e:	429a      	cmp	r2, r3
   17f40:	d331      	bcc.n	17fa6 <bt_conn_recv+0x98>
	if (conn->rx->len > acl_total_len) {
   17f42:	d928      	bls.n	17f96 <bt_conn_recv+0x88>
		bt_conn_reset_rx_state(conn);
   17f44:	4620      	mov	r0, r4
}
   17f46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   17f4a:	f7ff bfb9 	b.w	17ec0 <bt_conn_reset_rx_state>
		if (!conn->rx) {
   17f4e:	6920      	ldr	r0, [r4, #16]
   17f50:	b918      	cbnz	r0, 17f5a <bt_conn_recv+0x4c>
		bt_conn_reset_rx_state(conn);
   17f52:	4620      	mov	r0, r4
   17f54:	f7ff ffb4 	bl	17ec0 <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   17f58:	e001      	b.n	17f5e <bt_conn_recv+0x50>
		if (!buf->len) {
   17f5a:	89ae      	ldrh	r6, [r5, #12]
   17f5c:	b926      	cbnz	r6, 17f68 <bt_conn_recv+0x5a>
			net_buf_unref(buf);
   17f5e:	4628      	mov	r0, r5
}
   17f60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   17f64:	f7fa b994 	b.w	12290 <net_buf_unref>
	return net_buf_simple_tailroom(&buf->b);
   17f68:	3008      	adds	r0, #8
   17f6a:	f005 f8e8 	bl	1d13e <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   17f6e:	4286      	cmp	r6, r0
   17f70:	d907      	bls.n	17f82 <bt_conn_recv+0x74>
			bt_l2cap_recv(conn, conn->rx, false);
   17f72:	6921      	ldr	r1, [r4, #16]
   17f74:	2200      	movs	r2, #0
   17f76:	4620      	mov	r0, r4
   17f78:	f000 f996 	bl	182a8 <bt_l2cap_recv>
			conn->rx = NULL;
   17f7c:	2300      	movs	r3, #0
   17f7e:	6123      	str	r3, [r4, #16]
   17f80:	e7ed      	b.n	17f5e <bt_conn_recv+0x50>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   17f82:	6920      	ldr	r0, [r4, #16]
   17f84:	89aa      	ldrh	r2, [r5, #12]
   17f86:	68a9      	ldr	r1, [r5, #8]
   17f88:	3008      	adds	r0, #8
   17f8a:	f005 f824 	bl	1cfd6 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   17f8e:	4628      	mov	r0, r5
   17f90:	f7fa f97e 	bl	12290 <net_buf_unref>
		break;
   17f94:	e7cb      	b.n	17f2e <bt_conn_recv+0x20>
	conn->rx = NULL;
   17f96:	2300      	movs	r3, #0
   17f98:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   17f9a:	4620      	mov	r0, r4
   17f9c:	2201      	movs	r2, #1
}
   17f9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf, true);
   17fa2:	f000 b981 	b.w	182a8 <bt_l2cap_recv>
}
   17fa6:	bd70      	pop	{r4, r5, r6, pc}

00017fa8 <bt_conn_ref>:
{
   17fa8:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   17faa:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17fae:	f3bf 8f5b 	dmb	ish
   17fb2:	6813      	ldr	r3, [r2, #0]
   17fb4:	f3bf 8f5b 	dmb	ish
		if (!old) {
   17fb8:	b17b      	cbz	r3, 17fda <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   17fba:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   17fbe:	1c59      	adds	r1, r3, #1
   17fc0:	e852 4f00 	ldrex	r4, [r2]
   17fc4:	429c      	cmp	r4, r3
   17fc6:	d104      	bne.n	17fd2 <bt_conn_ref+0x2a>
   17fc8:	e842 1c00 	strex	ip, r1, [r2]
   17fcc:	f1bc 0f00 	cmp.w	ip, #0
   17fd0:	d1f6      	bne.n	17fc0 <bt_conn_ref+0x18>
   17fd2:	f3bf 8f5b 	dmb	ish
   17fd6:	d1ea      	bne.n	17fae <bt_conn_ref+0x6>
}
   17fd8:	bd10      	pop	{r4, pc}
			return NULL;
   17fda:	4618      	mov	r0, r3
   17fdc:	e7fc      	b.n	17fd8 <bt_conn_ref+0x30>

00017fde <bt_conn_unref>:
	old = atomic_dec(&conn->ref);
   17fde:	f100 03b8 	add.w	r3, r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   17fe2:	f3bf 8f5b 	dmb	ish
   17fe6:	e853 2f00 	ldrex	r2, [r3]
   17fea:	3a01      	subs	r2, #1
   17fec:	e843 2100 	strex	r1, r2, [r3]
   17ff0:	2900      	cmp	r1, #0
   17ff2:	d1f8      	bne.n	17fe6 <bt_conn_unref+0x8>
   17ff4:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   17ff8:	7883      	ldrb	r3, [r0, #2]
   17ffa:	2b01      	cmp	r3, #1
   17ffc:	d108      	bne.n	18010 <bt_conn_unref+0x32>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17ffe:	f3bf 8f5b 	dmb	ish
   18002:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   18006:	f3bf 8f5b 	dmb	ish
   1800a:	b90b      	cbnz	r3, 18010 <bt_conn_unref+0x32>
		bt_le_adv_resume();
   1800c:	f7ed bd38 	b.w	5a80 <bt_le_adv_resume>
}
   18010:	4770      	bx	lr

00018012 <conn_lookup_handle>:
{
   18012:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18016:	4607      	mov	r7, r0
   18018:	460e      	mov	r6, r1
   1801a:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   1801c:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1801e:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   18022:	42b4      	cmp	r4, r6
   18024:	d103      	bne.n	1802e <conn_lookup_handle+0x1c>
	return NULL;
   18026:	2300      	movs	r3, #0
}
   18028:	4618      	mov	r0, r3
   1802a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1802e:	fb09 7004 	mla	r0, r9, r4, r7
   18032:	f7ff ffb9 	bl	17fa8 <bt_conn_ref>
   18036:	4603      	mov	r3, r0
		if (!conn) {
   18038:	b158      	cbz	r0, 18052 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   1803a:	7a85      	ldrb	r5, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   1803c:	2d01      	cmp	r5, #1
   1803e:	d002      	beq.n	18046 <conn_lookup_handle+0x34>
   18040:	3d07      	subs	r5, #7
   18042:	2d01      	cmp	r5, #1
   18044:	d803      	bhi.n	1804e <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   18046:	881a      	ldrh	r2, [r3, #0]
   18048:	4542      	cmp	r2, r8
   1804a:	d0ed      	beq.n	18028 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   1804c:	4618      	mov	r0, r3
   1804e:	f7ff ffc6 	bl	17fde <bt_conn_unref>
	for (i = 0; i < size; i++) {
   18052:	3401      	adds	r4, #1
   18054:	e7e5      	b.n	18022 <conn_lookup_handle+0x10>

00018056 <bt_conn_connected>:
{
   18056:	b510      	push	{r4, lr}
   18058:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   1805a:	f7ee fbb7 	bl	67cc <bt_l2cap_connected>
	notify_connected(conn);
   1805e:	4620      	mov	r0, r4
}
   18060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   18064:	f7ed bf3e 	b.w	5ee4 <notify_connected>

00018068 <bt_conn_get_security>:
}
   18068:	2001      	movs	r0, #1
   1806a:	4770      	bx	lr

0001806c <bt_conn_is_peer_addr_le>:
{
   1806c:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   1806e:	7a03      	ldrb	r3, [r0, #8]
   18070:	428b      	cmp	r3, r1
{
   18072:	4604      	mov	r4, r0
   18074:	4615      	mov	r5, r2
	if (id != conn->id) {
   18076:	d115      	bne.n	180a4 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   18078:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1807c:	2207      	movs	r2, #7
   1807e:	4628      	mov	r0, r5
   18080:	f7ff f8d7 	bl	17232 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   18084:	b180      	cbz	r0, 180a8 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   18086:	78e3      	ldrb	r3, [r4, #3]
   18088:	2207      	movs	r2, #7
   1808a:	b943      	cbnz	r3, 1809e <bt_conn_is_peer_addr_le+0x32>
   1808c:	f104 0196 	add.w	r1, r4, #150	; 0x96
   18090:	4628      	mov	r0, r5
   18092:	f7ff f8ce 	bl	17232 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   18096:	fab0 f080 	clz	r0, r0
   1809a:	0940      	lsrs	r0, r0, #5
}
   1809c:	bd38      	pop	{r3, r4, r5, pc}
   1809e:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   180a2:	e7f5      	b.n	18090 <bt_conn_is_peer_addr_le+0x24>
		return false;
   180a4:	2000      	movs	r0, #0
   180a6:	e7f9      	b.n	1809c <bt_conn_is_peer_addr_le+0x30>
		return true;
   180a8:	2001      	movs	r0, #1
   180aa:	e7f7      	b.n	1809c <bt_conn_is_peer_addr_le+0x30>

000180ac <bt_conn_exists_le>:
{
   180ac:	b508      	push	{r3, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   180ae:	f7ee f9df 	bl	6470 <bt_conn_lookup_addr_le>
	if (conn) {
   180b2:	b110      	cbz	r0, 180ba <bt_conn_exists_le+0xe>
		bt_conn_unref(conn);
   180b4:	f7ff ff93 	bl	17fde <bt_conn_unref>
		return true;
   180b8:	2001      	movs	r0, #1
}
   180ba:	bd08      	pop	{r3, pc}

000180bc <bt_conn_le_conn_update>:
{
   180bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   180be:	4607      	mov	r7, r0
   180c0:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   180c2:	f242 0013 	movw	r0, #8211	; 0x2013
   180c6:	210e      	movs	r1, #14
   180c8:	f7ec faf2 	bl	46b0 <bt_hci_cmd_create>
	if (!buf) {
   180cc:	4606      	mov	r6, r0
   180ce:	b1d0      	cbz	r0, 18106 <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   180d0:	210e      	movs	r1, #14
   180d2:	3008      	adds	r0, #8
   180d4:	f004 ff79 	bl	1cfca <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   180d8:	220e      	movs	r2, #14
   180da:	4604      	mov	r4, r0
   180dc:	2100      	movs	r1, #0
   180de:	f7ff f8c4 	bl	1726a <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   180e2:	883b      	ldrh	r3, [r7, #0]
   180e4:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   180e6:	882b      	ldrh	r3, [r5, #0]
   180e8:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   180ea:	886b      	ldrh	r3, [r5, #2]
   180ec:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   180ee:	88ab      	ldrh	r3, [r5, #4]
   180f0:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   180f2:	88eb      	ldrh	r3, [r5, #6]
   180f4:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   180f6:	4631      	mov	r1, r6
   180f8:	2200      	movs	r2, #0
}
   180fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   180fe:	f242 0013 	movw	r0, #8211	; 0x2013
   18102:	f7ec bb0f 	b.w	4724 <bt_hci_cmd_send_sync>
}
   18106:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1810a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001810c <l2cap_connected>:
}
   1810c:	4770      	bx	lr

0001810e <l2cap_disconnected>:
	(void)k_work_cancel_delayable(&chan->rtx_work);
   1810e:	3010      	adds	r0, #16
   18110:	f006 bb1d 	b.w	1e74e <k_work_cancel_delayable>

00018114 <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   18114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18116:	4607      	mov	r7, r0
   18118:	460e      	mov	r6, r1
   1811a:	4615      	mov	r5, r2
	return bt_conn_create_pdu_timeout(pool,
   1811c:	2300      	movs	r3, #0
   1811e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   18122:	2104      	movs	r1, #4
   18124:	2000      	movs	r0, #0
   18126:	f7ee f8f1 	bl	630c <bt_conn_create_pdu_timeout>
	if (!buf) {
   1812a:	4604      	mov	r4, r0
   1812c:	b130      	cbz	r0, 1813c <l2cap_create_le_sig_pdu.constprop.0+0x28>
   1812e:	2104      	movs	r1, #4
   18130:	3008      	adds	r0, #8
   18132:	f004 ff4a 	bl	1cfca <net_buf_simple_add>
	hdr->code = code;
   18136:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
   18138:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   1813a:	8045      	strh	r5, [r0, #2]
}
   1813c:	4620      	mov	r0, r4
   1813e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00018140 <bt_l2cap_chan_remove>:
	return list->head;
   18140:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   18142:	b530      	push	{r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   18144:	b173      	cbz	r3, 18164 <bt_l2cap_chan_remove+0x24>
   18146:	3b08      	subs	r3, #8
   18148:	2500      	movs	r5, #0
	return node->next;
   1814a:	461a      	mov	r2, r3
		if (chan == ch) {
   1814c:	4299      	cmp	r1, r3
   1814e:	f852 4f08 	ldr.w	r4, [r2, #8]!
   18152:	d10d      	bne.n	18170 <bt_l2cap_chan_remove+0x30>
	return list->tail;
   18154:	6d41      	ldr	r1, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
   18156:	b935      	cbnz	r5, 18166 <bt_l2cap_chan_remove+0x26>
   18158:	4291      	cmp	r1, r2
	list->head = node;
   1815a:	6504      	str	r4, [r0, #80]	; 0x50
Z_GENLIST_REMOVE(slist, snode)
   1815c:	d100      	bne.n	18160 <bt_l2cap_chan_remove+0x20>
	list->tail = node;
   1815e:	6544      	str	r4, [r0, #84]	; 0x54
	parent->next = child;
   18160:	2200      	movs	r2, #0
   18162:	609a      	str	r2, [r3, #8]
}
   18164:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_REMOVE(slist, snode)
   18166:	4291      	cmp	r1, r2
	parent->next = child;
   18168:	602c      	str	r4, [r5, #0]
	list->tail = node;
   1816a:	bf08      	it	eq
   1816c:	6545      	streq	r5, [r0, #84]	; 0x54
}
   1816e:	e7f7      	b.n	18160 <bt_l2cap_chan_remove+0x20>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   18170:	2c00      	cmp	r4, #0
   18172:	d0f7      	beq.n	18164 <bt_l2cap_chan_remove+0x24>
   18174:	f1a4 0308 	sub.w	r3, r4, #8
			sys_slist_remove(&conn->channels, prev, &chan->node);
   18178:	4615      	mov	r5, r2
   1817a:	e7e6      	b.n	1814a <bt_l2cap_chan_remove+0xa>

0001817c <bt_l2cap_chan_del>:
{
   1817c:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   1817e:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   18182:	4604      	mov	r4, r0
	if (!chan->conn) {
   18184:	b123      	cbz	r3, 18190 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   18186:	686b      	ldr	r3, [r5, #4]
   18188:	b103      	cbz	r3, 1818c <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   1818a:	4798      	blx	r3
	chan->conn = NULL;
   1818c:	2300      	movs	r3, #0
   1818e:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   18190:	68e3      	ldr	r3, [r4, #12]
   18192:	b10b      	cbz	r3, 18198 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   18194:	4620      	mov	r0, r4
   18196:	4798      	blx	r3
	if (ops->released) {
   18198:	69eb      	ldr	r3, [r5, #28]
   1819a:	b11b      	cbz	r3, 181a4 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   1819c:	4620      	mov	r0, r4
}
   1819e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   181a2:	4718      	bx	r3
}
   181a4:	bd70      	pop	{r4, r5, r6, pc}

000181a6 <l2cap_rtx_timeout>:
{
   181a6:	b510      	push	{r4, lr}
	bt_l2cap_chan_remove(conn, &chan->chan);
   181a8:	f1a0 0410 	sub.w	r4, r0, #16
   181ac:	4621      	mov	r1, r4
   181ae:	f850 0c10 	ldr.w	r0, [r0, #-16]
   181b2:	f7ff ffc5 	bl	18140 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
   181b6:	4620      	mov	r0, r4
}
   181b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_l2cap_chan_del(&chan->chan);
   181bc:	f7ff bfde 	b.w	1817c <bt_l2cap_chan_del>

000181c0 <bt_l2cap_disconnected>:
	return list->head;
   181c0:	6d00      	ldr	r0, [r0, #80]	; 0x50
{
   181c2:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   181c4:	b160      	cbz	r0, 181e0 <bt_l2cap_disconnected+0x20>
	return node->next;
   181c6:	f850 4908 	ldr.w	r4, [r0], #-8
   181ca:	b104      	cbz	r4, 181ce <bt_l2cap_disconnected+0xe>
   181cc:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   181ce:	f7ff ffd5 	bl	1817c <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   181d2:	b12c      	cbz	r4, 181e0 <bt_l2cap_disconnected+0x20>
   181d4:	68a3      	ldr	r3, [r4, #8]
   181d6:	b103      	cbz	r3, 181da <bt_l2cap_disconnected+0x1a>
   181d8:	3b08      	subs	r3, #8
{
   181da:	4620      	mov	r0, r4
   181dc:	461c      	mov	r4, r3
   181de:	e7f6      	b.n	181ce <bt_l2cap_disconnected+0xe>
}
   181e0:	bd10      	pop	{r4, pc}

000181e2 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   181e2:	3104      	adds	r1, #4
   181e4:	f7ee b892 	b.w	630c <bt_conn_create_pdu_timeout>

000181e8 <bt_l2cap_send_cb>:
{
   181e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   181ec:	4614      	mov	r4, r2
   181ee:	4605      	mov	r5, r0
   181f0:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   181f2:	f102 0008 	add.w	r0, r2, #8
   181f6:	2104      	movs	r1, #4
   181f8:	461e      	mov	r6, r3
   181fa:	f8dd 8018 	ldr.w	r8, [sp, #24]
   181fe:	f004 ff32 	bl	1d066 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   18202:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   18204:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   18206:	3a04      	subs	r2, #4
   18208:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1820a:	4643      	mov	r3, r8
   1820c:	4632      	mov	r2, r6
   1820e:	4621      	mov	r1, r4
   18210:	4628      	mov	r0, r5
}
   18212:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   18216:	f7ed bf49 	b.w	60ac <bt_conn_send_cb>

0001821a <l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
   1821a:	898b      	ldrh	r3, [r1, #12]
   1821c:	2b03      	cmp	r3, #3
{
   1821e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   18220:	4605      	mov	r5, r0
   18222:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   18224:	d927      	bls.n	18276 <l2cap_recv+0x5c>
	return net_buf_simple_pull_mem(&buf->b, len);
   18226:	2104      	movs	r1, #4
   18228:	f104 0008 	add.w	r0, r4, #8
   1822c:	f004 ff50 	bl	1d0d0 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   18230:	89a3      	ldrh	r3, [r4, #12]
   18232:	8842      	ldrh	r2, [r0, #2]
   18234:	429a      	cmp	r2, r3
   18236:	d11e      	bne.n	18276 <l2cap_recv+0x5c>
	if (!hdr->ident) {
   18238:	7841      	ldrb	r1, [r0, #1]
   1823a:	b1e1      	cbz	r1, 18276 <l2cap_recv+0x5c>
	switch (hdr->code) {
   1823c:	7803      	ldrb	r3, [r0, #0]
   1823e:	2b01      	cmp	r3, #1
   18240:	d019      	beq.n	18276 <l2cap_recv+0x5c>
   18242:	2b13      	cmp	r3, #19
   18244:	d017      	beq.n	18276 <l2cap_recv+0x5c>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   18246:	2202      	movs	r2, #2
   18248:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
   1824a:	682d      	ldr	r5, [r5, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1824c:	f7ff ff62 	bl	18114 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   18250:	4604      	mov	r4, r0
   18252:	b180      	cbz	r0, 18276 <l2cap_recv+0x5c>
	return net_buf_simple_add(&buf->b, len);
   18254:	2102      	movs	r1, #2
   18256:	3008      	adds	r0, #8
   18258:	f004 feb7 	bl	1cfca <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   1825c:	2300      	movs	r3, #0
   1825e:	7003      	strb	r3, [r0, #0]
   18260:	7043      	strb	r3, [r0, #1]
   18262:	4622      	mov	r2, r4
   18264:	9300      	str	r3, [sp, #0]
   18266:	2105      	movs	r1, #5
   18268:	4628      	mov	r0, r5
   1826a:	f7ff ffbd 	bl	181e8 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   1826e:	b110      	cbz	r0, 18276 <l2cap_recv+0x5c>
		net_buf_unref(buf);
   18270:	4620      	mov	r0, r4
   18272:	f7fa f80d 	bl	12290 <net_buf_unref>
}
   18276:	2000      	movs	r0, #0
   18278:	b003      	add	sp, #12
   1827a:	bd30      	pop	{r4, r5, pc}

0001827c <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   1827c:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1827e:	b138      	cbz	r0, 18290 <bt_l2cap_le_lookup_tx_cid+0x14>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   18280:	f8b0 3078 	ldrh.w	r3, [r0, #120]	; 0x78
   18284:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   18286:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   1828a:	d001      	beq.n	18290 <bt_l2cap_le_lookup_tx_cid+0x14>
	return node->next;
   1828c:	6880      	ldr	r0, [r0, #8]
   1828e:	e7f6      	b.n	1827e <bt_l2cap_le_lookup_tx_cid+0x2>
}
   18290:	4770      	bx	lr

00018292 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   18292:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   18294:	b138      	cbz	r0, 182a6 <bt_l2cap_le_lookup_rx_cid+0x14>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   18296:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
   1829a:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1829c:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   182a0:	d001      	beq.n	182a6 <bt_l2cap_le_lookup_rx_cid+0x14>
	return node->next;
   182a2:	6880      	ldr	r0, [r0, #8]
   182a4:	e7f6      	b.n	18294 <bt_l2cap_le_lookup_rx_cid+0x2>
}
   182a6:	4770      	bx	lr

000182a8 <bt_l2cap_recv>:
{
   182a8:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   182aa:	898b      	ldrh	r3, [r1, #12]
   182ac:	2b03      	cmp	r3, #3
{
   182ae:	4605      	mov	r5, r0
   182b0:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   182b2:	d804      	bhi.n	182be <bt_l2cap_recv+0x16>
	net_buf_unref(buf);
   182b4:	4620      	mov	r0, r4
}
   182b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   182ba:	f7f9 bfe9 	b.w	12290 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   182be:	2104      	movs	r1, #4
   182c0:	f104 0008 	add.w	r0, r4, #8
   182c4:	f004 ff04 	bl	1d0d0 <net_buf_simple_pull_mem>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   182c8:	8841      	ldrh	r1, [r0, #2]
   182ca:	4628      	mov	r0, r5
   182cc:	f7ff ffe1 	bl	18292 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   182d0:	2800      	cmp	r0, #0
   182d2:	d0ef      	beq.n	182b4 <bt_l2cap_recv+0xc>
	chan->ops->recv(chan, buf);
   182d4:	6843      	ldr	r3, [r0, #4]
   182d6:	4621      	mov	r1, r4
   182d8:	691b      	ldr	r3, [r3, #16]
   182da:	4798      	blx	r3
   182dc:	e7ea      	b.n	182b4 <bt_l2cap_recv+0xc>

000182de <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   182de:	4770      	bx	lr

000182e0 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   182e0:	4603      	mov	r3, r0
	return list->head;
   182e2:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   182e4:	b128      	cbz	r0, 182f2 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   182e6:	6859      	ldr	r1, [r3, #4]
	return node->next;
   182e8:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   182ea:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   182ec:	4288      	cmp	r0, r1
	list->tail = node;
   182ee:	bf08      	it	eq
   182f0:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   182f2:	4770      	bx	lr

000182f4 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   182f4:	4603      	mov	r3, r0
	size_t bytes = 0;
   182f6:	2000      	movs	r0, #0

	while (buf) {
   182f8:	b903      	cbnz	r3, 182fc <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   182fa:	4770      	bx	lr
		bytes += buf->len;
   182fc:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   182fe:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   18300:	4410      	add	r0, r2
		buf = buf->frags;
   18302:	e7f9      	b.n	182f8 <net_buf_frags_len+0x4>

00018304 <att_sent>:
	if (chan->ops->sent) {
   18304:	684b      	ldr	r3, [r1, #4]
   18306:	695b      	ldr	r3, [r3, #20]
{
   18308:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   1830a:	b103      	cbz	r3, 1830e <att_sent+0xa>
		chan->ops->sent(chan);
   1830c:	4718      	bx	r3
}
   1830e:	4770      	bx	lr

00018310 <attr_read_type_cb>:
{
   18310:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   18312:	68d4      	ldr	r4, [r2, #12]
   18314:	7823      	ldrb	r3, [r4, #0]
   18316:	3102      	adds	r1, #2
   18318:	b913      	cbnz	r3, 18320 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   1831a:	7021      	strb	r1, [r4, #0]
	return true;
   1831c:	2001      	movs	r0, #1
   1831e:	e006      	b.n	1832e <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   18320:	428b      	cmp	r3, r1
   18322:	d0fb      	beq.n	1831c <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   18324:	8983      	ldrh	r3, [r0, #12]
   18326:	3b02      	subs	r3, #2
   18328:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   1832a:	2000      	movs	r0, #0
   1832c:	6110      	str	r0, [r2, #16]
}
   1832e:	bd10      	pop	{r4, pc}

00018330 <att_prepare_write_req>:
}
   18330:	2006      	movs	r0, #6
   18332:	4770      	bx	lr

00018334 <att_op_get_type>:
	switch (op) {
   18334:	281e      	cmp	r0, #30
   18336:	d816      	bhi.n	18366 <att_op_get_type+0x32>
   18338:	b308      	cbz	r0, 1837e <att_op_get_type+0x4a>
   1833a:	1e43      	subs	r3, r0, #1
   1833c:	2b1d      	cmp	r3, #29
   1833e:	d81e      	bhi.n	1837e <att_op_get_type+0x4a>
   18340:	e8df f003 	tbb	[pc, r3]
   18344:	23172317 	.word	0x23172317
   18348:	23172317 	.word	0x23172317
   1834c:	23172317 	.word	0x23172317
   18350:	23172317 	.word	0x23172317
   18354:	1d172317 	.word	0x1d172317
   18358:	2317231d 	.word	0x2317231d
   1835c:	1d191d17 	.word	0x1d191d17
   18360:	0f1b      	.short	0x0f1b
   18362:	2004      	movs	r0, #4
   18364:	4770      	bx	lr
   18366:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   1836a:	2b52      	cmp	r3, #82	; 0x52
   1836c:	d107      	bne.n	1837e <att_op_get_type+0x4a>
		return ATT_COMMAND;
   1836e:	2000      	movs	r0, #0
}
   18370:	4770      	bx	lr
		return ATT_RESPONSE;
   18372:	2002      	movs	r0, #2
   18374:	4770      	bx	lr
		return ATT_NOTIFICATION;
   18376:	2003      	movs	r0, #3
   18378:	4770      	bx	lr
		return ATT_INDICATION;
   1837a:	2005      	movs	r0, #5
   1837c:	4770      	bx	lr
		return ATT_COMMAND;
   1837e:	f010 0f40 	tst.w	r0, #64	; 0x40
   18382:	bf0c      	ite	eq
   18384:	2006      	moveq	r0, #6
   18386:	2000      	movne	r0, #0
   18388:	4770      	bx	lr
		return ATT_REQUEST;
   1838a:	2001      	movs	r0, #1
   1838c:	4770      	bx	lr

0001838e <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   1838e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   18390:	e9cd 2301 	strd	r2, r3, [sp, #4]
   18394:	2300      	movs	r3, #0
   18396:	9300      	str	r3, [sp, #0]
   18398:	461a      	mov	r2, r3
   1839a:	f7ef f939 	bl	7610 <bt_gatt_foreach_attr_type>
				  user_data);
}
   1839e:	b005      	add	sp, #20
   183a0:	f85d fb04 	ldr.w	pc, [sp], #4

000183a4 <find_type_cb>:
{
   183a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
   183a8:	f8d2 9000 	ldr.w	r9, [r2]
{
   183ac:	b091      	sub	sp, #68	; 0x44
   183ae:	4607      	mov	r7, r0
   183b0:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   183b2:	2500      	movs	r5, #0
   183b4:	f642 0301 	movw	r3, #10241	; 0x2801
   183b8:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   183ba:	f8d9 8008 	ldr.w	r8, [r9, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   183be:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   183c2:	a90b      	add	r1, sp, #44	; 0x2c
{
   183c4:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   183c6:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   183ca:	f7ff f92c 	bl	17626 <bt_uuid_cmp>
   183ce:	2800      	cmp	r0, #0
   183d0:	d079      	beq.n	184c6 <find_type_cb+0x122>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   183d2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   183d6:	6838      	ldr	r0, [r7, #0]
   183d8:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   183dc:	a90b      	add	r1, sp, #44	; 0x2c
   183de:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   183e2:	f7ff f920 	bl	17626 <bt_uuid_cmp>
   183e6:	b138      	cbz	r0, 183f8 <find_type_cb+0x54>
		if (data->group &&
   183e8:	68a3      	ldr	r3, [r4, #8]
   183ea:	b11b      	cbz	r3, 183f4 <find_type_cb+0x50>
   183ec:	885a      	ldrh	r2, [r3, #2]
   183ee:	42b2      	cmp	r2, r6
   183f0:	d200      	bcs.n	183f4 <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
   183f2:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   183f4:	2001      	movs	r0, #1
   183f6:	e009      	b.n	1840c <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   183f8:	6861      	ldr	r1, [r4, #4]
   183fa:	4608      	mov	r0, r1
   183fc:	f7ff ff7a 	bl	182f4 <net_buf_frags_len>
   18400:	f8b9 308a 	ldrh.w	r3, [r9, #138]	; 0x8a
   18404:	1a1b      	subs	r3, r3, r0
   18406:	2b03      	cmp	r3, #3
   18408:	d803      	bhi.n	18412 <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   1840a:	2000      	movs	r0, #0
}
   1840c:	b011      	add	sp, #68	; 0x44
   1840e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   18412:	4608      	mov	r0, r1
   18414:	f004 fdab 	bl	1cf6e <net_buf_frag_last>
   18418:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   1841a:	6860      	ldr	r0, [r4, #4]
   1841c:	f7ff ff6a 	bl	182f4 <net_buf_frags_len>
   18420:	f8b9 a08a 	ldrh.w	sl, [r9, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
   18424:	f105 0b08 	add.w	fp, r5, #8
   18428:	ebaa 0a00 	sub.w	sl, sl, r0
   1842c:	4658      	mov	r0, fp
   1842e:	f004 fe86 	bl	1d13e <net_buf_simple_tailroom>
   18432:	4582      	cmp	sl, r0
   18434:	d23f      	bcs.n	184b6 <find_type_cb+0x112>
   18436:	6860      	ldr	r0, [r4, #4]
   18438:	f7ff ff5c 	bl	182f4 <net_buf_frags_len>
   1843c:	f8b9 308a 	ldrh.w	r3, [r9, #138]	; 0x8a
   18440:	1a18      	subs	r0, r3, r0
	if (!len) {
   18442:	b970      	cbnz	r0, 18462 <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   18444:	6863      	ldr	r3, [r4, #4]
   18446:	7998      	ldrb	r0, [r3, #6]
   18448:	f7f9 fe5e 	bl	12108 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1844c:	2200      	movs	r2, #0
   1844e:	2300      	movs	r3, #0
   18450:	f004 fd53 	bl	1cefa <net_buf_alloc_fixed>
		if (!frag) {
   18454:	4605      	mov	r5, r0
   18456:	2800      	cmp	r0, #0
   18458:	d0d7      	beq.n	1840a <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   1845a:	4601      	mov	r1, r0
   1845c:	6860      	ldr	r0, [r4, #4]
   1845e:	f004 fd97 	bl	1cf90 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   18462:	2300      	movs	r3, #0
   18464:	9300      	str	r3, [sp, #0]
   18466:	f8d7 9004 	ldr.w	r9, [r7, #4]
   1846a:	4639      	mov	r1, r7
   1846c:	2310      	movs	r3, #16
   1846e:	aa02      	add	r2, sp, #8
   18470:	4640      	mov	r0, r8
   18472:	47c8      	blx	r9
	if (read < 0) {
   18474:	1e07      	subs	r7, r0, #0
   18476:	db26      	blt.n	184c6 <find_type_cb+0x122>
	if (read != data->value_len) {
   18478:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1847a:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   1847c:	42ba      	cmp	r2, r7
   1847e:	d01e      	beq.n	184be <find_type_cb+0x11a>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   18480:	4601      	mov	r1, r0
   18482:	a80b      	add	r0, sp, #44	; 0x2c
   18484:	f7ff f8fd 	bl	17682 <bt_uuid_create>
   18488:	b1e8      	cbz	r0, 184c6 <find_type_cb+0x122>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   1848a:	b2fa      	uxtb	r2, r7
   1848c:	a902      	add	r1, sp, #8
   1848e:	a806      	add	r0, sp, #24
   18490:	f7ff f8f7 	bl	17682 <bt_uuid_create>
   18494:	b1b8      	cbz	r0, 184c6 <find_type_cb+0x122>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   18496:	a906      	add	r1, sp, #24
   18498:	a80b      	add	r0, sp, #44	; 0x2c
   1849a:	f7ff f8c4 	bl	17626 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   1849e:	b990      	cbnz	r0, 184c6 <find_type_cb+0x122>
	data->err = 0x00;
   184a0:	2300      	movs	r3, #0
   184a2:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   184a4:	2104      	movs	r1, #4
   184a6:	f105 0008 	add.w	r0, r5, #8
   184aa:	f004 fd8e 	bl	1cfca <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   184ae:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   184b0:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   184b2:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   184b4:	e79e      	b.n	183f4 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   184b6:	4658      	mov	r0, fp
   184b8:	f004 fe41 	bl	1d13e <net_buf_simple_tailroom>
   184bc:	e7c1      	b.n	18442 <find_type_cb+0x9e>
	} else if (memcmp(data->value, uuid, read)) {
   184be:	a902      	add	r1, sp, #8
   184c0:	f7fe feb7 	bl	17232 <memcmp>
   184c4:	e7eb      	b.n	1849e <find_type_cb+0xfa>
	data->group = NULL;
   184c6:	2300      	movs	r3, #0
   184c8:	60a3      	str	r3, [r4, #8]
   184ca:	e793      	b.n	183f4 <find_type_cb+0x50>

000184cc <find_info_cb>:
{
   184cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   184ce:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   184d0:	6817      	ldr	r7, [r2, #0]
{
   184d2:	4605      	mov	r5, r0
   184d4:	460e      	mov	r6, r1
   184d6:	4614      	mov	r4, r2
	if (!data->rsp) {
   184d8:	b963      	cbnz	r3, 184f4 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   184da:	6850      	ldr	r0, [r2, #4]
   184dc:	2101      	movs	r1, #1
   184de:	3008      	adds	r0, #8
   184e0:	f004 fd73 	bl	1cfca <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   184e4:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   184e6:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   184e8:	781b      	ldrb	r3, [r3, #0]
   184ea:	2b00      	cmp	r3, #0
   184ec:	bf0c      	ite	eq
   184ee:	2301      	moveq	r3, #1
   184f0:	2302      	movne	r3, #2
   184f2:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   184f4:	68a3      	ldr	r3, [r4, #8]
   184f6:	781b      	ldrb	r3, [r3, #0]
   184f8:	2b01      	cmp	r3, #1
   184fa:	d003      	beq.n	18504 <find_info_cb+0x38>
   184fc:	2b02      	cmp	r3, #2
   184fe:	d019      	beq.n	18534 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   18500:	2000      	movs	r0, #0
   18502:	e016      	b.n	18532 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   18504:	682b      	ldr	r3, [r5, #0]
   18506:	781b      	ldrb	r3, [r3, #0]
   18508:	2b00      	cmp	r3, #0
   1850a:	d1f9      	bne.n	18500 <find_info_cb+0x34>
   1850c:	6860      	ldr	r0, [r4, #4]
   1850e:	2104      	movs	r1, #4
   18510:	3008      	adds	r0, #8
   18512:	f004 fd5a 	bl	1cfca <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   18516:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   18518:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1851a:	885b      	ldrh	r3, [r3, #2]
   1851c:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   1851e:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   18520:	8006      	strh	r6, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   18522:	899b      	ldrh	r3, [r3, #12]
   18524:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
   18528:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1852a:	2804      	cmp	r0, #4
   1852c:	bf94      	ite	ls
   1852e:	2000      	movls	r0, #0
   18530:	2001      	movhi	r0, #1
}
   18532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   18534:	682b      	ldr	r3, [r5, #0]
   18536:	781b      	ldrb	r3, [r3, #0]
   18538:	2b02      	cmp	r3, #2
   1853a:	d1e1      	bne.n	18500 <find_info_cb+0x34>
   1853c:	6860      	ldr	r0, [r4, #4]
   1853e:	2112      	movs	r1, #18
   18540:	3008      	adds	r0, #8
   18542:	f004 fd42 	bl	1cfca <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   18546:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   18548:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1854a:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   1854c:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   18550:	3101      	adds	r1, #1
   18552:	f7fe fe7f 	bl	17254 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   18556:	6863      	ldr	r3, [r4, #4]
   18558:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
   1855c:	899b      	ldrh	r3, [r3, #12]
   1855e:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   18560:	2812      	cmp	r0, #18
   18562:	e7e3      	b.n	1852c <find_info_cb+0x60>

00018564 <att_chan_mtu_updated>:
{
   18564:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   18566:	6806      	ldr	r6, [r0, #0]
	return list->head;
   18568:	6a73      	ldr	r3, [r6, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1856a:	b1e3      	cbz	r3, 185a6 <att_chan_mtu_updated+0x42>
	return node->next;
   1856c:	681a      	ldr	r2, [r3, #0]
   1856e:	f5a3 75a2 	sub.w	r5, r3, #324	; 0x144
   18572:	b10a      	cbz	r2, 18578 <att_chan_mtu_updated+0x14>
   18574:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
{
   18578:	2300      	movs	r3, #0
   1857a:	4619      	mov	r1, r3
		if (chan == updated_chan) {
   1857c:	42a8      	cmp	r0, r5
   1857e:	d009      	beq.n	18594 <att_chan_mtu_updated+0x30>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   18580:	f8b5 408a 	ldrh.w	r4, [r5, #138]	; 0x8a
   18584:	42a1      	cmp	r1, r4
   18586:	bf38      	it	cc
   18588:	4621      	movcc	r1, r4
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   1858a:	f8b5 407a 	ldrh.w	r4, [r5, #122]	; 0x7a
   1858e:	42a3      	cmp	r3, r4
   18590:	bf38      	it	cc
   18592:	4623      	movcc	r3, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   18594:	b142      	cbz	r2, 185a8 <att_chan_mtu_updated+0x44>
   18596:	f8d2 4144 	ldr.w	r4, [r2, #324]	; 0x144
   1859a:	b10c      	cbz	r4, 185a0 <att_chan_mtu_updated+0x3c>
   1859c:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
{
   185a0:	4615      	mov	r5, r2
   185a2:	4622      	mov	r2, r4
   185a4:	e7ea      	b.n	1857c <att_chan_mtu_updated+0x18>
   185a6:	4619      	mov	r1, r3
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   185a8:	f8b0 408a 	ldrh.w	r4, [r0, #138]	; 0x8a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   185ac:	f8b0 207a 	ldrh.w	r2, [r0, #122]	; 0x7a
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   185b0:	428c      	cmp	r4, r1
   185b2:	d801      	bhi.n	185b8 <att_chan_mtu_updated+0x54>
   185b4:	429a      	cmp	r2, r3
   185b6:	d909      	bls.n	185cc <att_chan_mtu_updated+0x68>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   185b8:	429a      	cmp	r2, r3
   185ba:	bf38      	it	cc
   185bc:	461a      	movcc	r2, r3
   185be:	42a1      	cmp	r1, r4
   185c0:	6830      	ldr	r0, [r6, #0]
   185c2:	bf38      	it	cc
   185c4:	4621      	movcc	r1, r4
}
   185c6:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   185c8:	f7ef ba82 	b.w	7ad0 <bt_gatt_att_max_mtu_changed>
}
   185cc:	bc70      	pop	{r4, r5, r6}
   185ce:	4770      	bx	lr

000185d0 <attr_read_group_cb>:
	if (!data->rsp->len) {
   185d0:	68d0      	ldr	r0, [r2, #12]
   185d2:	7803      	ldrb	r3, [r0, #0]
   185d4:	3104      	adds	r1, #4
   185d6:	b913      	cbnz	r3, 185de <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   185d8:	7001      	strb	r1, [r0, #0]
	return true;
   185da:	2001      	movs	r0, #1
}
   185dc:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   185de:	428b      	cmp	r3, r1
   185e0:	d0fb      	beq.n	185da <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   185e2:	6891      	ldr	r1, [r2, #8]
   185e4:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   185e6:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   185e8:	3b04      	subs	r3, #4
   185ea:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   185ec:	6110      	str	r0, [r2, #16]
		return false;
   185ee:	4770      	bx	lr

000185f0 <att_get>:
{
   185f0:	b508      	push	{r3, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   185f2:	7a83      	ldrb	r3, [r0, #10]
   185f4:	2b07      	cmp	r3, #7
   185f6:	d001      	beq.n	185fc <att_get+0xc>
		return NULL;
   185f8:	2000      	movs	r0, #0
}
   185fa:	bd08      	pop	{r3, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   185fc:	2104      	movs	r1, #4
   185fe:	f7ff fe48 	bl	18292 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   18602:	2800      	cmp	r0, #0
   18604:	d0f8      	beq.n	185f8 <att_get+0x8>
   18606:	f3bf 8f5b 	dmb	ish
   1860a:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
   1860e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   18612:	075b      	lsls	r3, r3, #29
   18614:	d4f0      	bmi.n	185f8 <att_get+0x8>
	return att_chan->att;
   18616:	f850 0c08 	ldr.w	r0, [r0, #-8]
   1861a:	e7ee      	b.n	185fa <att_get+0xa>

0001861c <chan_req_sent>:
	if (chan->req) {
   1861c:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   18620:	b133      	cbz	r3, 18630 <chan_req_sent+0x14>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   18622:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   18626:	2300      	movs	r3, #0
   18628:	f500 7088 	add.w	r0, r0, #272	; 0x110
   1862c:	f7fd ba4c 	b.w	15ac8 <k_work_reschedule>
}
   18630:	4770      	bx	lr

00018632 <write_cb>:
{
   18632:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   18634:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   18636:	4601      	mov	r1, r0
{
   18638:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   1863a:	222a      	movs	r2, #42	; 0x2a
   1863c:	6820      	ldr	r0, [r4, #0]
   1863e:	f000 fdf5 	bl	1922c <bt_gatt_check_perm>
   18642:	4605      	mov	r5, r0
   18644:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   18646:	bb20      	cbnz	r0, 18692 <write_cb+0x60>
	if (!data->req) {
   18648:	7a23      	ldrb	r3, [r4, #8]
   1864a:	b1ab      	cbz	r3, 18678 <write_cb+0x46>
		flags |= BT_GATT_WRITE_FLAG_EXECUTE;
   1864c:	2b18      	cmp	r3, #24
   1864e:	bf14      	ite	ne
   18650:	2300      	movne	r3, #0
   18652:	2304      	moveq	r3, #4
	write = attr->write(data->conn, attr, data->value, data->len,
   18654:	9301      	str	r3, [sp, #4]
   18656:	8a63      	ldrh	r3, [r4, #18]
   18658:	9300      	str	r3, [sp, #0]
   1865a:	68b7      	ldr	r7, [r6, #8]
   1865c:	8a23      	ldrh	r3, [r4, #16]
   1865e:	68e2      	ldr	r2, [r4, #12]
   18660:	6820      	ldr	r0, [r4, #0]
   18662:	4631      	mov	r1, r6
   18664:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   18666:	1e03      	subs	r3, r0, #0
   18668:	db08      	blt.n	1867c <write_cb+0x4a>
   1866a:	8a22      	ldrh	r2, [r4, #16]
   1866c:	4293      	cmp	r3, r2
   1866e:	d10e      	bne.n	1868e <write_cb+0x5c>
	data->err = 0U;
   18670:	2300      	movs	r3, #0
   18672:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   18674:	2501      	movs	r5, #1
   18676:	e007      	b.n	18688 <write_cb+0x56>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   18678:	2302      	movs	r3, #2
   1867a:	e7eb      	b.n	18654 <write_cb+0x22>
	if (err < 0 && err >= -0xff) {
   1867c:	f113 0fff 	cmn.w	r3, #255	; 0xff
   18680:	d305      	bcc.n	1868e <write_cb+0x5c>
		return -err;
   18682:	425b      	negs	r3, r3
   18684:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   18686:	7523      	strb	r3, [r4, #20]
}
   18688:	4628      	mov	r0, r5
   1868a:	b003      	add	sp, #12
   1868c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   1868e:	230e      	movs	r3, #14
   18690:	e7f9      	b.n	18686 <write_cb+0x54>
		return BT_GATT_ITER_STOP;
   18692:	2500      	movs	r5, #0
   18694:	e7f8      	b.n	18688 <write_cb+0x56>

00018696 <att_chan_read>:
{
   18696:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1869a:	4680      	mov	r8, r0
   1869c:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1869e:	4610      	mov	r0, r2
{
   186a0:	4699      	mov	r9, r3
   186a2:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   186a4:	f7ff fe26 	bl	182f4 <net_buf_frags_len>
   186a8:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
   186ac:	4283      	cmp	r3, r0
{
   186ae:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   186b0:	d97a      	bls.n	187a8 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   186b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   186b6:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   186b8:	4630      	mov	r0, r6
   186ba:	f004 fc58 	bl	1cf6e <net_buf_frag_last>
	size_t len, total = 0;
   186be:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   186c2:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   186c4:	4630      	mov	r0, r6
   186c6:	f7ff fe15 	bl	182f4 <net_buf_frags_len>
   186ca:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
   186ce:	f105 0708 	add.w	r7, r5, #8
   186d2:	1a24      	subs	r4, r4, r0
   186d4:	4638      	mov	r0, r7
   186d6:	f004 fd32 	bl	1d13e <net_buf_simple_tailroom>
   186da:	4284      	cmp	r4, r0
   186dc:	d211      	bcs.n	18702 <att_chan_read+0x6c>
   186de:	4630      	mov	r0, r6
   186e0:	f7ff fe08 	bl	182f4 <net_buf_frags_len>
   186e4:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   186e8:	1a24      	subs	r4, r4, r0
		if (!len) {
   186ea:	bb34      	cbnz	r4, 1873a <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   186ec:	79b0      	ldrb	r0, [r6, #6]
   186ee:	f7f9 fd0b 	bl	12108 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   186f2:	2200      	movs	r2, #0
   186f4:	2300      	movs	r3, #0
   186f6:	f004 fc00 	bl	1cefa <net_buf_alloc_fixed>
			if (!frag) {
   186fa:	4605      	mov	r5, r0
   186fc:	b930      	cbnz	r0, 1870c <att_chan_read+0x76>
	return total;
   186fe:	4657      	mov	r7, sl
   18700:	e02c      	b.n	1875c <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   18702:	4638      	mov	r0, r7
   18704:	f004 fd1b 	bl	1d13e <net_buf_simple_tailroom>
   18708:	4604      	mov	r4, r0
   1870a:	e7ee      	b.n	186ea <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   1870c:	4601      	mov	r1, r0
   1870e:	4630      	mov	r0, r6
   18710:	f004 fc3e 	bl	1cf90 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   18714:	4630      	mov	r0, r6
   18716:	f7ff fded 	bl	182f4 <net_buf_frags_len>
   1871a:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   1871e:	f105 0708 	add.w	r7, r5, #8
   18722:	1a24      	subs	r4, r4, r0
   18724:	4638      	mov	r0, r7
   18726:	f004 fd0a 	bl	1d13e <net_buf_simple_tailroom>
   1872a:	4284      	cmp	r4, r0
   1872c:	d21a      	bcs.n	18764 <att_chan_read+0xce>
   1872e:	4630      	mov	r0, r6
   18730:	f7ff fde0 	bl	182f4 <net_buf_frags_len>
   18734:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   18738:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   1873a:	68a9      	ldr	r1, [r5, #8]
   1873c:	89aa      	ldrh	r2, [r5, #12]
   1873e:	f8db 7004 	ldr.w	r7, [fp, #4]
   18742:	9803      	ldr	r0, [sp, #12]
   18744:	f8cd 9000 	str.w	r9, [sp]
   18748:	440a      	add	r2, r1
   1874a:	b2a3      	uxth	r3, r4
   1874c:	4659      	mov	r1, fp
   1874e:	47b8      	blx	r7
		if (read < 0) {
   18750:	1e07      	subs	r7, r0, #0
   18752:	da0c      	bge.n	1876e <att_chan_read+0xd8>
				return total;
   18754:	f1ba 0f00 	cmp.w	sl, #0
   18758:	bf18      	it	ne
   1875a:	4657      	movne	r7, sl
}
   1875c:	4638      	mov	r0, r7
   1875e:	b005      	add	sp, #20
   18760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18764:	4638      	mov	r0, r7
   18766:	f004 fcea 	bl	1d13e <net_buf_simple_tailroom>
   1876a:	4604      	mov	r4, r0
   1876c:	e7e5      	b.n	1873a <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   1876e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   18770:	b993      	cbnz	r3, 18798 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   18772:	4639      	mov	r1, r7
   18774:	f105 0008 	add.w	r0, r5, #8
   18778:	f004 fc27 	bl	1cfca <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1877c:	4630      	mov	r0, r6
   1877e:	f7ff fdb9 	bl	182f4 <net_buf_frags_len>
   18782:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
		offset += read;
   18786:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   18788:	4283      	cmp	r3, r0
		total += read;
   1878a:	44ba      	add	sl, r7
		offset += read;
   1878c:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   18790:	d9b5      	bls.n	186fe <att_chan_read+0x68>
   18792:	42a7      	cmp	r7, r4
   18794:	d096      	beq.n	186c4 <att_chan_read+0x2e>
   18796:	e7b2      	b.n	186fe <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   18798:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1879a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1879c:	4639      	mov	r1, r7
   1879e:	4628      	mov	r0, r5
   187a0:	4798      	blx	r3
   187a2:	2800      	cmp	r0, #0
   187a4:	d1e5      	bne.n	18772 <att_chan_read+0xdc>
   187a6:	e7aa      	b.n	186fe <att_chan_read+0x68>
		return 0;
   187a8:	2700      	movs	r7, #0
   187aa:	e7d7      	b.n	1875c <att_chan_read+0xc6>

000187ac <chan_req_send>:
{
   187ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   187ae:	688f      	ldr	r7, [r1, #8]
{
   187b0:	4604      	mov	r4, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   187b2:	4638      	mov	r0, r7
   187b4:	f7ff fd9e 	bl	182f4 <net_buf_frags_len>
   187b8:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
   187bc:	4283      	cmp	r3, r0
{
   187be:	460d      	mov	r5, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   187c0:	d30d      	bcc.n	187de <chan_req_send+0x32>
	req->buf = NULL;
   187c2:	2600      	movs	r6, #0
	chan->req = req;
   187c4:	f8c4 10f4 	str.w	r1, [r4, #244]	; 0xf4
	err = chan_send(chan, buf, NULL);
   187c8:	4632      	mov	r2, r6
	req->buf = NULL;
   187ca:	608e      	str	r6, [r1, #8]
	err = chan_send(chan, buf, NULL);
   187cc:	4620      	mov	r0, r4
   187ce:	4639      	mov	r1, r7
   187d0:	f7ee f94c 	bl	6a6c <chan_send>
	if (err) {
   187d4:	b110      	cbz	r0, 187dc <chan_req_send+0x30>
		req->buf = buf;
   187d6:	60af      	str	r7, [r5, #8]
		chan->req = NULL;
   187d8:	f8c4 60f4 	str.w	r6, [r4, #244]	; 0xf4
}
   187dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   187de:	f06f 0079 	mvn.w	r0, #121	; 0x79
   187e2:	e7fb      	b.n	187dc <chan_req_send+0x30>

000187e4 <process_queue>:
{
   187e4:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   187e6:	2200      	movs	r2, #0
{
   187e8:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   187ea:	2300      	movs	r3, #0
   187ec:	4608      	mov	r0, r1
{
   187ee:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   187f0:	f004 fb88 	bl	1cf04 <net_buf_get>
	if (buf) {
   187f4:	4605      	mov	r5, r0
   187f6:	b160      	cbz	r0, 18812 <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   187f8:	4601      	mov	r1, r0
   187fa:	2200      	movs	r2, #0
   187fc:	4620      	mov	r0, r4
   187fe:	f7ee f935 	bl	6a6c <chan_send>
		if (err) {
   18802:	4604      	mov	r4, r0
   18804:	b118      	cbz	r0, 1880e <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   18806:	4629      	mov	r1, r5
   18808:	4630      	mov	r0, r6
   1880a:	f005 fe96 	bl	1e53a <k_queue_prepend>
}
   1880e:	4620      	mov	r0, r4
   18810:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   18812:	f06f 0401 	mvn.w	r4, #1
   18816:	e7fa      	b.n	1880e <process_queue+0x2a>

00018818 <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   18818:	b510      	push	{r4, lr}
	return list->head;
   1881a:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1881c:	2200      	movs	r2, #0
   1881e:	b153      	cbz	r3, 18836 <sys_slist_find_and_remove.isra.0+0x1e>
   18820:	428b      	cmp	r3, r1
   18822:	d10e      	bne.n	18842 <sys_slist_find_and_remove.isra.0+0x2a>
	return node->next;
   18824:	680b      	ldr	r3, [r1, #0]
	return list->tail;
   18826:	6844      	ldr	r4, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   18828:	b932      	cbnz	r2, 18838 <sys_slist_find_and_remove.isra.0+0x20>
   1882a:	42a1      	cmp	r1, r4
	list->head = node;
   1882c:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   1882e:	d100      	bne.n	18832 <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   18830:	6043      	str	r3, [r0, #4]
	parent->next = child;
   18832:	2300      	movs	r3, #0
   18834:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   18836:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   18838:	42a1      	cmp	r1, r4
	parent->next = child;
   1883a:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1883c:	bf08      	it	eq
   1883e:	6042      	streq	r2, [r0, #4]
}
   18840:	e7f7      	b.n	18832 <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   18842:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   18844:	681b      	ldr	r3, [r3, #0]
   18846:	e7ea      	b.n	1881e <sys_slist_find_and_remove.isra.0+0x6>

00018848 <att_exec_write_req>:
   18848:	2006      	movs	r0, #6
   1884a:	4770      	bx	lr

0001884c <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1884c:	30f0      	adds	r0, #240	; 0xf0
   1884e:	f3bf 8f5b 	dmb	ish
   18852:	e850 3f00 	ldrex	r3, [r0]
   18856:	f023 0301 	bic.w	r3, r3, #1
   1885a:	e840 3200 	strex	r2, r3, [r0]
   1885e:	2a00      	cmp	r2, #0
   18860:	d1f7      	bne.n	18852 <chan_rsp_sent+0x6>
   18862:	f3bf 8f5b 	dmb	ish
}
   18866:	4770      	bx	lr

00018868 <chan_cfm_sent>:
   18868:	30f0      	adds	r0, #240	; 0xf0
   1886a:	f3bf 8f5b 	dmb	ish
   1886e:	e850 3f00 	ldrex	r3, [r0]
   18872:	f023 0302 	bic.w	r3, r3, #2
   18876:	e840 3200 	strex	r2, r3, [r0]
   1887a:	2a00      	cmp	r2, #0
   1887c:	d1f7      	bne.n	1886e <chan_cfm_sent+0x6>
   1887e:	f3bf 8f5b 	dmb	ish
}
   18882:	4770      	bx	lr

00018884 <read_cb>:
{
   18884:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   18888:	f8d2 8000 	ldr.w	r8, [r2]
{
   1888c:	4606      	mov	r6, r0
	data->err = 0x00;
   1888e:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   18890:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = 0x00;
   18894:	7317      	strb	r7, [r2, #12]
{
   18896:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   18898:	4631      	mov	r1, r6
   1889a:	2215      	movs	r2, #21
   1889c:	f000 fcc6 	bl	1922c <bt_gatt_check_perm>
   188a0:	4604      	mov	r4, r0
   188a2:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   188a4:	b9a0      	cbnz	r0, 188d0 <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   188a6:	e9cd 0000 	strd	r0, r0, [sp]
   188aa:	88ab      	ldrh	r3, [r5, #4]
   188ac:	68aa      	ldr	r2, [r5, #8]
   188ae:	4631      	mov	r1, r6
   188b0:	4640      	mov	r0, r8
   188b2:	f7ff fef0 	bl	18696 <att_chan_read>
	if (ret < 0) {
   188b6:	1e03      	subs	r3, r0, #0
   188b8:	da0c      	bge.n	188d4 <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   188ba:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   188be:	bf26      	itte	cs
   188c0:	425b      	negcs	r3, r3
   188c2:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   188c4:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   188c6:	732b      	strb	r3, [r5, #12]
}
   188c8:	4620      	mov	r0, r4
   188ca:	b002      	add	sp, #8
   188cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   188d0:	463c      	mov	r4, r7
   188d2:	e7f9      	b.n	188c8 <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   188d4:	2401      	movs	r4, #1
   188d6:	e7f7      	b.n	188c8 <read_cb+0x44>

000188d8 <bt_att_sent>:
{
   188d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   188da:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
	struct bt_att *att = chan->att;
   188de:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   188e2:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   188e4:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   188e8:	b10b      	cbz	r3, 188ee <bt_att_sent+0x16>
		chan->sent(chan);
   188ea:	4638      	mov	r0, r7
   188ec:	4798      	blx	r3
   188ee:	f3bf 8f5b 	dmb	ish
   188f2:	f105 03e8 	add.w	r3, r5, #232	; 0xe8
   188f6:	e853 2f00 	ldrex	r2, [r3]
   188fa:	f022 0210 	bic.w	r2, r2, #16
   188fe:	e843 2100 	strex	r1, r2, [r3]
   18902:	2900      	cmp	r1, #0
   18904:	d1f7      	bne.n	188f6 <bt_att_sent+0x1e>
   18906:	f3bf 8f5b 	dmb	ish
	if (!att) {
   1890a:	b30c      	cbz	r4, 18950 <bt_att_sent+0x78>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   1890c:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   18910:	b98b      	cbnz	r3, 18936 <bt_att_sent+0x5e>
   18912:	6863      	ldr	r3, [r4, #4]
   18914:	b17b      	cbz	r3, 18936 <bt_att_sent+0x5e>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   18916:	1d20      	adds	r0, r4, #4
   18918:	f7ff fce2 	bl	182e0 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1891c:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1891e:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   18920:	4638      	mov	r0, r7
   18922:	f7ff ff43 	bl	187ac <chan_req_send>
   18926:	2800      	cmp	r0, #0
   18928:	da12      	bge.n	18950 <bt_att_sent+0x78>
	parent->next = child;
   1892a:	6863      	ldr	r3, [r4, #4]
   1892c:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1892e:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   18930:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   18932:	b903      	cbnz	r3, 18936 <bt_att_sent+0x5e>
	list->tail = node;
   18934:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   18936:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
   1893a:	4638      	mov	r0, r7
   1893c:	f7ff ff52 	bl	187e4 <process_queue>
	if (!err) {
   18940:	b130      	cbz	r0, 18950 <bt_att_sent+0x78>
	(void)process_queue(chan, &att->tx_queue);
   18942:	f104 010c 	add.w	r1, r4, #12
   18946:	4638      	mov	r0, r7
}
   18948:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   1894c:	f7ff bf4a 	b.w	187e4 <process_queue>
}
   18950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00018952 <att_req_send_process>:
{
   18952:	b570      	push	{r4, r5, r6, lr}
   18954:	4604      	mov	r4, r0
	node = sys_slist_get(&att->reqs);
   18956:	3004      	adds	r0, #4
   18958:	f7ff fcc2 	bl	182e0 <sys_slist_get>
	if (!node) {
   1895c:	4605      	mov	r5, r0
   1895e:	b1b8      	cbz	r0, 18990 <att_req_send_process+0x3e>
	return list->head;
   18960:	6a63      	ldr	r3, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   18962:	b14b      	cbz	r3, 18978 <att_req_send_process+0x26>
	return node->next;
   18964:	681e      	ldr	r6, [r3, #0]
   18966:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
   1896a:	b10e      	cbz	r6, 18970 <att_req_send_process+0x1e>
   1896c:	f5a6 76a2 	sub.w	r6, r6, #324	; 0x144
		if (!chan->req) {
   18970:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   18974:	b13b      	cbz	r3, 18986 <att_req_send_process+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   18976:	b966      	cbnz	r6, 18992 <att_req_send_process+0x40>
	parent->next = child;
   18978:	6863      	ldr	r3, [r4, #4]
   1897a:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   1897c:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   1897e:	6065      	str	r5, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   18980:	b933      	cbnz	r3, 18990 <att_req_send_process+0x3e>
	list->tail = node;
   18982:	60a5      	str	r5, [r4, #8]
}
   18984:	e004      	b.n	18990 <att_req_send_process+0x3e>
	return chan_req_send(chan, req);
   18986:	4629      	mov	r1, r5
   18988:	f7ff ff10 	bl	187ac <chan_req_send>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1898c:	2800      	cmp	r0, #0
   1898e:	dbf2      	blt.n	18976 <att_req_send_process+0x24>
}
   18990:	bd70      	pop	{r4, r5, r6, pc}
	return node->next;
   18992:	f8d6 3144 	ldr.w	r3, [r6, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   18996:	b10b      	cbz	r3, 1899c <att_req_send_process+0x4a>
   18998:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   1899c:	4630      	mov	r0, r6
   1899e:	461e      	mov	r6, r3
   189a0:	e7e6      	b.n	18970 <att_req_send_process+0x1e>

000189a2 <bt_att_status>:
{
   189a2:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   189a4:	f3bf 8f5b 	dmb	ish
   189a8:	680b      	ldr	r3, [r1, #0]
   189aa:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   189ae:	07db      	lsls	r3, r3, #31
{
   189b0:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   189b2:	d519      	bpl.n	189e8 <bt_att_status+0x46>
	if (!chan->att) {
   189b4:	f850 0c08 	ldr.w	r0, [r0, #-8]
   189b8:	b1b0      	cbz	r0, 189e8 <bt_att_status+0x46>
	if (chan->req) {
   189ba:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   189be:	b99b      	cbnz	r3, 189e8 <bt_att_status+0x46>
	node = sys_slist_get(&chan->att->reqs);
   189c0:	3004      	adds	r0, #4
   189c2:	f7ff fc8d 	bl	182e0 <sys_slist_get>
	if (!node) {
   189c6:	4604      	mov	r4, r0
   189c8:	b170      	cbz	r0, 189e8 <bt_att_status+0x46>
	return chan_req_send(chan, req);
   189ca:	4601      	mov	r1, r0
   189cc:	f1a5 0008 	sub.w	r0, r5, #8
   189d0:	f7ff feec 	bl	187ac <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   189d4:	2800      	cmp	r0, #0
   189d6:	da07      	bge.n	189e8 <bt_att_status+0x46>
	sys_slist_prepend(&chan->att->reqs, node);
   189d8:	f855 3c08 	ldr.w	r3, [r5, #-8]
	parent->next = child;
   189dc:	685a      	ldr	r2, [r3, #4]
   189de:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   189e0:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   189e2:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   189e4:	b902      	cbnz	r2, 189e8 <bt_att_status+0x46>
	list->tail = node;
   189e6:	609c      	str	r4, [r3, #8]
}
   189e8:	bd38      	pop	{r3, r4, r5, pc}

000189ea <bt_att_chan_create_pdu>:
{
   189ea:	b538      	push	{r3, r4, r5, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   189ec:	f8b0 308a 	ldrh.w	r3, [r0, #138]	; 0x8a
   189f0:	3201      	adds	r2, #1
   189f2:	429a      	cmp	r2, r3
{
   189f4:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   189f6:	d81b      	bhi.n	18a30 <bt_att_chan_create_pdu+0x46>
	switch (att_op_get_type(op)) {
   189f8:	4608      	mov	r0, r1
   189fa:	f7ff fc9b 	bl	18334 <att_op_get_type>
   189fe:	2802      	cmp	r0, #2
   18a00:	d001      	beq.n	18a06 <bt_att_chan_create_pdu+0x1c>
   18a02:	2804      	cmp	r0, #4
   18a04:	d10f      	bne.n	18a26 <bt_att_chan_create_pdu+0x3c>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   18a06:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   18a0a:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
   18a0c:	2100      	movs	r1, #0
   18a0e:	4608      	mov	r0, r1
   18a10:	f7ff fbe7 	bl	181e2 <bt_l2cap_create_pdu_timeout>
   18a14:	4604      	mov	r4, r0
	if (!buf) {
   18a16:	b120      	cbz	r0, 18a22 <bt_att_chan_create_pdu+0x38>
   18a18:	2101      	movs	r1, #1
   18a1a:	3008      	adds	r0, #8
   18a1c:	f004 fad5 	bl	1cfca <net_buf_simple_add>
	hdr->code = op;
   18a20:	7005      	strb	r5, [r0, #0]
}
   18a22:	4620      	mov	r0, r4
   18a24:	bd38      	pop	{r3, r4, r5, pc}
		buf = bt_l2cap_create_pdu(NULL, 0);
   18a26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   18a2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18a2e:	e7ed      	b.n	18a0c <bt_att_chan_create_pdu+0x22>
		return NULL;
   18a30:	2400      	movs	r4, #0
   18a32:	e7f6      	b.n	18a22 <bt_att_chan_create_pdu+0x38>

00018a34 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   18a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18a38:	4688      	mov	r8, r1
   18a3a:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   18a3c:	2101      	movs	r1, #1
   18a3e:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   18a40:	4605      	mov	r5, r0
   18a42:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   18a44:	f7ff ffd1 	bl	189ea <bt_att_chan_create_pdu>
	if (!buf) {
   18a48:	4604      	mov	r4, r0
   18a4a:	b170      	cbz	r0, 18a6a <send_err_rsp.part.0+0x36>
   18a4c:	2104      	movs	r1, #4
   18a4e:	3008      	adds	r0, #8
   18a50:	f004 fabb 	bl	1cfca <net_buf_simple_add>
	rsp->request = req;
   18a54:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   18a58:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   18a5a:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   18a5e:	4621      	mov	r1, r4
   18a60:	4628      	mov	r0, r5
}
   18a62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   18a66:	f7ee b85f 	b.w	6b28 <bt_att_chan_send_rsp.constprop.0>
}
   18a6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00018a6e <att_write_req>:
{
   18a6e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   18a70:	460c      	mov	r4, r1
   18a72:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   18a74:	f101 0008 	add.w	r0, r1, #8
   18a78:	f004 fb3a 	bl	1d0f0 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   18a7c:	89a2      	ldrh	r2, [r4, #12]
   18a7e:	9201      	str	r2, [sp, #4]
   18a80:	68a2      	ldr	r2, [r4, #8]
   18a82:	9200      	str	r2, [sp, #0]
   18a84:	4603      	mov	r3, r0
   18a86:	2213      	movs	r2, #19
   18a88:	2112      	movs	r1, #18
   18a8a:	4628      	mov	r0, r5
   18a8c:	f7ee f958 	bl	6d40 <att_write_rsp.constprop.0>
}
   18a90:	b003      	add	sp, #12
   18a92:	bd30      	pop	{r4, r5, pc}

00018a94 <att_write_cmd>:
{
   18a94:	b537      	push	{r0, r1, r2, r4, r5, lr}
   18a96:	460c      	mov	r4, r1
   18a98:	4605      	mov	r5, r0
   18a9a:	f101 0008 	add.w	r0, r1, #8
   18a9e:	f004 fb27 	bl	1d0f0 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   18aa2:	89a2      	ldrh	r2, [r4, #12]
   18aa4:	9201      	str	r2, [sp, #4]
   18aa6:	68a2      	ldr	r2, [r4, #8]
   18aa8:	9200      	str	r2, [sp, #0]
   18aaa:	2200      	movs	r2, #0
   18aac:	4603      	mov	r3, r0
   18aae:	4611      	mov	r1, r2
   18ab0:	4628      	mov	r0, r5
   18ab2:	f7ee f945 	bl	6d40 <att_write_rsp.constprop.0>
}
   18ab6:	b003      	add	sp, #12
   18ab8:	bd30      	pop	{r4, r5, pc}

00018aba <bt_att_create_pdu>:
{
   18aba:	b570      	push	{r4, r5, r6, lr}
   18abc:	460e      	mov	r6, r1
   18abe:	4615      	mov	r5, r2
	att = att_get(conn);
   18ac0:	f7ff fd96 	bl	185f0 <att_get>
	if (!att) {
   18ac4:	b168      	cbz	r0, 18ae2 <bt_att_create_pdu+0x28>
	return list->head;
   18ac6:	6a43      	ldr	r3, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   18ac8:	b15b      	cbz	r3, 18ae2 <bt_att_create_pdu+0x28>
   18aca:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
	return node->next;
   18ace:	681b      	ldr	r3, [r3, #0]
   18ad0:	b10b      	cbz	r3, 18ad6 <bt_att_create_pdu+0x1c>
   18ad2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   18ad6:	1c6a      	adds	r2, r5, #1
   18ad8:	f8b0 108a 	ldrh.w	r1, [r0, #138]	; 0x8a
   18adc:	428a      	cmp	r2, r1
   18ade:	d902      	bls.n	18ae6 <bt_att_create_pdu+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   18ae0:	b93b      	cbnz	r3, 18af2 <bt_att_create_pdu+0x38>
}
   18ae2:	2000      	movs	r0, #0
   18ae4:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   18ae6:	462a      	mov	r2, r5
   18ae8:	4631      	mov	r1, r6
}
   18aea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   18aee:	f7ff bf7c 	b.w	189ea <bt_att_chan_create_pdu>
   18af2:	f8d3 4144 	ldr.w	r4, [r3, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   18af6:	b10c      	cbz	r4, 18afc <bt_att_create_pdu+0x42>
   18af8:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
{
   18afc:	4618      	mov	r0, r3
   18afe:	4623      	mov	r3, r4
   18b00:	e7ea      	b.n	18ad8 <bt_att_create_pdu+0x1e>

00018b02 <att_read_blob_req>:
{
   18b02:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   18b04:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   18b06:	8813      	ldrh	r3, [r2, #0]
   18b08:	8852      	ldrh	r2, [r2, #2]
   18b0a:	9200      	str	r2, [sp, #0]
   18b0c:	210c      	movs	r1, #12
   18b0e:	220d      	movs	r2, #13
   18b10:	f7ee fa44 	bl	6f9c <att_read_rsp>
}
   18b14:	b003      	add	sp, #12
   18b16:	f85d fb04 	ldr.w	pc, [sp], #4

00018b1a <att_read_req>:
{
   18b1a:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   18b1c:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   18b1e:	2200      	movs	r2, #0
   18b20:	881b      	ldrh	r3, [r3, #0]
   18b22:	9200      	str	r2, [sp, #0]
   18b24:	210a      	movs	r1, #10
   18b26:	220b      	movs	r2, #11
   18b28:	f7ee fa38 	bl	6f9c <att_read_rsp>
}
   18b2c:	b003      	add	sp, #12
   18b2e:	f85d fb04 	ldr.w	pc, [sp], #4

00018b32 <att_mtu_req>:
{
   18b32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   18b34:	6803      	ldr	r3, [r0, #0]
{
   18b36:	4604      	mov	r4, r0
	struct bt_conn *conn = chan->att->conn;
   18b38:	6818      	ldr	r0, [r3, #0]
   18b3a:	f3bf 8f5b 	dmb	ish
   18b3e:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   18b42:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   18b46:	f3c3 05c0 	ubfx	r5, r3, #3, #1
   18b4a:	071b      	lsls	r3, r3, #28
   18b4c:	d41d      	bmi.n	18b8a <att_mtu_req+0x58>
	mtu_client = sys_le16_to_cpu(req->mtu);
   18b4e:	688b      	ldr	r3, [r1, #8]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   18b50:	881b      	ldrh	r3, [r3, #0]
   18b52:	2b16      	cmp	r3, #22
   18b54:	d91b      	bls.n	18b8e <att_mtu_req+0x5c>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   18b56:	2202      	movs	r2, #2
   18b58:	2103      	movs	r1, #3
   18b5a:	f7ff ffae 	bl	18aba <bt_att_create_pdu>
	if (!pdu) {
   18b5e:	4606      	mov	r6, r0
   18b60:	b1b8      	cbz	r0, 18b92 <att_mtu_req+0x60>
	return net_buf_simple_add(&buf->b, len);
   18b62:	2102      	movs	r1, #2
   18b64:	3008      	adds	r0, #8
   18b66:	f004 fa30 	bl	1cfca <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   18b6a:	2717      	movs	r7, #23
   18b6c:	7007      	strb	r7, [r0, #0]
   18b6e:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   18b70:	4631      	mov	r1, r6
   18b72:	4620      	mov	r0, r4
   18b74:	f7ed ffd8 	bl	6b28 <bt_att_chan_send_rsp.constprop.0>
	att_chan_mtu_updated(chan);
   18b78:	4620      	mov	r0, r4
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   18b7a:	f8a4 707a 	strh.w	r7, [r4, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   18b7e:	f8a4 708a 	strh.w	r7, [r4, #138]	; 0x8a
	att_chan_mtu_updated(chan);
   18b82:	f7ff fcef 	bl	18564 <att_chan_mtu_updated>
	return 0;
   18b86:	4628      	mov	r0, r5
}
   18b88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   18b8a:	2006      	movs	r0, #6
   18b8c:	e7fc      	b.n	18b88 <att_mtu_req+0x56>
		return BT_ATT_ERR_INVALID_PDU;
   18b8e:	2004      	movs	r0, #4
   18b90:	e7fa      	b.n	18b88 <att_mtu_req+0x56>
		return BT_ATT_ERR_UNLIKELY;
   18b92:	200e      	movs	r0, #14
   18b94:	e7f8      	b.n	18b88 <att_mtu_req+0x56>

00018b96 <bt_att_init>:
	bt_gatt_init();
   18b96:	f7ee bcb5 	b.w	7504 <bt_gatt_init>

00018b9a <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   18b9a:	898a      	ldrh	r2, [r1, #12]
   18b9c:	6889      	ldr	r1, [r1, #8]
   18b9e:	2300      	movs	r3, #0
   18ba0:	f7ee bb7a 	b.w	7298 <att_handle_rsp>

00018ba4 <att_timeout>:
	bt_att_disconnected(&chan->chan.chan);
   18ba4:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
   18ba8:	f7ee bba8 	b.w	72fc <bt_att_disconnected>

00018bac <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   18bac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   18bb0:	4607      	mov	r7, r0
   18bb2:	460d      	mov	r5, r1
   18bb4:	4616      	mov	r6, r2
   18bb6:	4698      	mov	r8, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   18bb8:	f7ff fd1a 	bl	185f0 <att_get>
	if (!att) {
   18bbc:	4604      	mov	r4, r0
   18bbe:	b938      	cbnz	r0, 18bd0 <bt_att_send+0x24>
		net_buf_unref(buf);
   18bc0:	4628      	mov	r0, r5
   18bc2:	f7f9 fb65 	bl	12290 <net_buf_unref>
		return -ENOTCONN;
   18bc6:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   18bca:	b002      	add	sp, #8
   18bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   18bd0:	b146      	cbz	r6, 18be4 <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   18bd2:	f8cd 8000 	str.w	r8, [sp]
   18bd6:	4633      	mov	r3, r6
   18bd8:	462a      	mov	r2, r5
   18bda:	2104      	movs	r1, #4
   18bdc:	4638      	mov	r0, r7
   18bde:	f7ff fb03 	bl	181e8 <bt_l2cap_send_cb>
   18be2:	e7f2      	b.n	18bca <bt_att_send+0x1e>
	net_buf_put(&att->tx_queue, buf);
   18be4:	f100 060c 	add.w	r6, r0, #12
   18be8:	4629      	mov	r1, r5
   18bea:	4630      	mov	r0, r6
   18bec:	f004 f9ae 	bl	1cf4c <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   18bf0:	2200      	movs	r2, #0
   18bf2:	2300      	movs	r3, #0
   18bf4:	4630      	mov	r0, r6
   18bf6:	f004 f985 	bl	1cf04 <net_buf_get>
	if (!buf) {
   18bfa:	4605      	mov	r5, r0
   18bfc:	b908      	cbnz	r0, 18c02 <bt_att_send+0x56>
	return 0;
   18bfe:	2000      	movs	r0, #0
   18c00:	e7e3      	b.n	18bca <bt_att_send+0x1e>
	return list->head;
   18c02:	6a63      	ldr	r3, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   18c04:	b1a3      	cbz	r3, 18c30 <bt_att_send+0x84>
	return node->next;
   18c06:	681c      	ldr	r4, [r3, #0]
   18c08:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
   18c0c:	b10c      	cbz	r4, 18c12 <bt_att_send+0x66>
   18c0e:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
	return chan_send(chan, buf, cb);
   18c12:	2200      	movs	r2, #0
   18c14:	4629      	mov	r1, r5
   18c16:	f7ed ff29 	bl	6a6c <chan_send>
		if (err >= 0) {
   18c1a:	2800      	cmp	r0, #0
   18c1c:	daef      	bge.n	18bfe <bt_att_send+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   18c1e:	b13c      	cbz	r4, 18c30 <bt_att_send+0x84>
   18c20:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   18c24:	b10b      	cbz	r3, 18c2a <bt_att_send+0x7e>
   18c26:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   18c2a:	4620      	mov	r0, r4
   18c2c:	461c      	mov	r4, r3
   18c2e:	e7f0      	b.n	18c12 <bt_att_send+0x66>
		k_queue_prepend(&att->tx_queue._queue, buf);
   18c30:	4629      	mov	r1, r5
   18c32:	4630      	mov	r0, r6
   18c34:	f005 fc81 	bl	1e53a <k_queue_prepend>
   18c38:	e7e1      	b.n	18bfe <bt_att_send+0x52>

00018c3a <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   18c3a:	b510      	push	{r4, lr}
   18c3c:	460c      	mov	r4, r1
	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   18c3e:	f7ff fcd7 	bl	185f0 <att_get>
	if (!att) {
   18c42:	b160      	cbz	r0, 18c5e <bt_att_req_send+0x24>
	parent->next = child;
   18c44:	2300      	movs	r3, #0
   18c46:	6023      	str	r3, [r4, #0]
	return list->tail;
   18c48:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   18c4a:	b92b      	cbnz	r3, 18c58 <bt_att_req_send+0x1e>
	list->head = node;
   18c4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   18c50:	f7ff fe7f 	bl	18952 <att_req_send_process>

	return 0;
   18c54:	2000      	movs	r0, #0
}
   18c56:	bd10      	pop	{r4, pc}
	parent->next = child;
   18c58:	601c      	str	r4, [r3, #0]
	list->tail = node;
   18c5a:	6084      	str	r4, [r0, #8]
}
   18c5c:	e7f8      	b.n	18c50 <bt_att_req_send+0x16>
		return -ENOTCONN;
   18c5e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   18c62:	e7f8      	b.n	18c56 <bt_att_req_send+0x1c>

00018c64 <gatt_ccc_changed>:
{
   18c64:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   18c66:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   18c68:	895a      	ldrh	r2, [r3, #10]
   18c6a:	428a      	cmp	r2, r1
   18c6c:	d003      	beq.n	18c76 <gatt_ccc_changed+0x12>
		ccc->value = value;
   18c6e:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   18c70:	68db      	ldr	r3, [r3, #12]
   18c72:	b103      	cbz	r3, 18c76 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   18c74:	4718      	bx	r3
}
   18c76:	4770      	bx	lr

00018c78 <gatt_indicate_rsp>:
{
   18c78:	b510      	push	{r4, lr}
   18c7a:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   18c7c:	68a3      	ldr	r3, [r4, #8]
{
   18c7e:	460a      	mov	r2, r1
	if (params->func) {
   18c80:	b10b      	cbz	r3, 18c86 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   18c82:	4621      	mov	r1, r4
   18c84:	4798      	blx	r3
	params->_ref--;
   18c86:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   18c88:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   18c8a:	3b01      	subs	r3, #1
   18c8c:	b2db      	uxtb	r3, r3
   18c8e:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   18c90:	b122      	cbz	r2, 18c9c <gatt_indicate_rsp+0x24>
   18c92:	b91b      	cbnz	r3, 18c9c <gatt_indicate_rsp+0x24>
		params->destroy(params);
   18c94:	4620      	mov	r0, r4
}
   18c96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   18c9a:	4710      	bx	r2
}
   18c9c:	bd10      	pop	{r4, pc}

00018c9e <match_uuid>:
	data->attr = attr;
   18c9e:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   18ca0:	8091      	strh	r1, [r2, #4]
}
   18ca2:	2000      	movs	r0, #0
   18ca4:	4770      	bx	lr

00018ca6 <gen_hash_m>:
{
   18ca6:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   18ca8:	6807      	ldr	r7, [r0, #0]
   18caa:	783d      	ldrb	r5, [r7, #0]
{
   18cac:	b089      	sub	sp, #36	; 0x24
   18cae:	4606      	mov	r6, r0
   18cb0:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   18cb2:	b10d      	cbz	r5, 18cb8 <gen_hash_m+0x12>
	switch (u16->val) {
   18cb4:	2501      	movs	r5, #1
   18cb6:	e014      	b.n	18ce2 <gen_hash_m+0x3c>
   18cb8:	887b      	ldrh	r3, [r7, #2]
   18cba:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   18cbe:	d004      	beq.n	18cca <gen_hash_m+0x24>
   18cc0:	d812      	bhi.n	18ce8 <gen_hash_m+0x42>
   18cc2:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   18cc6:	2b03      	cmp	r3, #3
   18cc8:	d8f4      	bhi.n	18cb4 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   18cca:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   18cce:	2202      	movs	r2, #2
   18cd0:	f10d 010a 	add.w	r1, sp, #10
   18cd4:	4620      	mov	r0, r4
   18cd6:	f7fe f9d5 	bl	17084 <tc_cmac_update>
   18cda:	b9e0      	cbnz	r0, 18d16 <gen_hash_m+0x70>
			state->err = -EINVAL;
   18cdc:	f06f 0315 	mvn.w	r3, #21
   18ce0:	65a3      	str	r3, [r4, #88]	; 0x58
}
   18ce2:	4628      	mov	r0, r5
   18ce4:	b009      	add	sp, #36	; 0x24
   18ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   18ce8:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   18cec:	33ff      	adds	r3, #255	; 0xff
   18cee:	b29b      	uxth	r3, r3
   18cf0:	2b04      	cmp	r3, #4
   18cf2:	d8df      	bhi.n	18cb4 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   18cf4:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   18cf8:	2202      	movs	r2, #2
   18cfa:	f10d 010a 	add.w	r1, sp, #10
   18cfe:	4620      	mov	r0, r4
   18d00:	f7fe f9c0 	bl	17084 <tc_cmac_update>
   18d04:	2800      	cmp	r0, #0
   18d06:	d0e9      	beq.n	18cdc <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   18d08:	887b      	ldrh	r3, [r7, #2]
   18d0a:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   18d0e:	2202      	movs	r2, #2
   18d10:	f10d 010a 	add.w	r1, sp, #10
   18d14:	e016      	b.n	18d44 <gen_hash_m+0x9e>
		value = sys_cpu_to_le16(u16->val);
   18d16:	887b      	ldrh	r3, [r7, #2]
   18d18:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   18d1c:	2202      	movs	r2, #2
   18d1e:	f10d 010a 	add.w	r1, sp, #10
   18d22:	4620      	mov	r0, r4
   18d24:	f7fe f9ae 	bl	17084 <tc_cmac_update>
   18d28:	2800      	cmp	r0, #0
   18d2a:	d0d7      	beq.n	18cdc <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   18d2c:	2000      	movs	r0, #0
   18d2e:	aa03      	add	r2, sp, #12
   18d30:	6877      	ldr	r7, [r6, #4]
   18d32:	9000      	str	r0, [sp, #0]
   18d34:	2313      	movs	r3, #19
   18d36:	4631      	mov	r1, r6
   18d38:	47b8      	blx	r7
		if (len < 0) {
   18d3a:	1e02      	subs	r2, r0, #0
   18d3c:	da01      	bge.n	18d42 <gen_hash_m+0x9c>
			state->err = len;
   18d3e:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   18d40:	e7cf      	b.n	18ce2 <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   18d42:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   18d44:	4620      	mov	r0, r4
   18d46:	f7fe f99d 	bl	17084 <tc_cmac_update>
   18d4a:	2800      	cmp	r0, #0
   18d4c:	d1b2      	bne.n	18cb4 <gen_hash_m+0xe>
   18d4e:	e7c5      	b.n	18cdc <gen_hash_m+0x36>

00018d50 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   18d50:	2207      	movs	r2, #7
   18d52:	f7fe ba7f 	b.w	17254 <memcpy>

00018d56 <clear_cf_cfg>:
{
   18d56:	b537      	push	{r0, r1, r2, r4, r5, lr}
   18d58:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   18d5a:	2500      	movs	r5, #0
   18d5c:	4669      	mov	r1, sp
   18d5e:	3001      	adds	r0, #1
   18d60:	9500      	str	r5, [sp, #0]
   18d62:	f8cd 5003 	str.w	r5, [sp, #3]
   18d66:	f7ff fff3 	bl	18d50 <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   18d6a:	f104 0008 	add.w	r0, r4, #8
   18d6e:	2201      	movs	r2, #1
   18d70:	4629      	mov	r1, r5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   18d72:	340c      	adds	r4, #12
   18d74:	f7fe fa79 	bl	1726a <memset>
   18d78:	f3bf 8f5b 	dmb	ish
   18d7c:	e854 3f00 	ldrex	r3, [r4]
   18d80:	e844 5200 	strex	r2, r5, [r4]
   18d84:	2a00      	cmp	r2, #0
   18d86:	d1f9      	bne.n	18d7c <clear_cf_cfg+0x26>
   18d88:	f3bf 8f5b 	dmb	ish
}
   18d8c:	b003      	add	sp, #12
   18d8e:	bd30      	pop	{r4, r5, pc}

00018d90 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   18d90:	2301      	movs	r3, #1
   18d92:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18d94:	f3bf 8f5b 	dmb	ish
   18d98:	e850 2f00 	ldrex	r2, [r0]
   18d9c:	431a      	orrs	r2, r3
   18d9e:	e840 2100 	strex	r1, r2, [r0]
   18da2:	2900      	cmp	r1, #0
   18da4:	d1f8      	bne.n	18d98 <atomic_set_bit+0x8>
   18da6:	f3bf 8f5b 	dmb	ish
}
   18daa:	4770      	bx	lr

00018dac <cf_write>:
{
   18dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18db0:	4698      	mov	r8, r3
   18db2:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   18db6:	2b01      	cmp	r3, #1
{
   18db8:	4606      	mov	r6, r0
   18dba:	4617      	mov	r7, r2
	if (offset > sizeof(cfg->data)) {
   18dbc:	d830      	bhi.n	18e20 <cf_write+0x74>
	if (offset + len > sizeof(cfg->data)) {
   18dbe:	4443      	add	r3, r8
   18dc0:	2b01      	cmp	r3, #1
   18dc2:	4645      	mov	r5, r8
   18dc4:	dc2f      	bgt.n	18e26 <cf_write+0x7a>
	cfg = find_cf_cfg(conn);
   18dc6:	f7ee faf3 	bl	73b0 <find_cf_cfg>
	if (!cfg) {
   18dca:	4604      	mov	r4, r0
   18dcc:	b918      	cbnz	r0, 18dd6 <cf_write+0x2a>
		cfg = find_cf_cfg(NULL);
   18dce:	f7ee faef 	bl	73b0 <find_cf_cfg>
	if (!cfg) {
   18dd2:	4604      	mov	r4, r0
   18dd4:	b350      	cbz	r0, 18e2c <cf_write+0x80>
{
   18dd6:	2100      	movs	r1, #0
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   18dd8:	f1b8 0f00 	cmp.w	r8, #0
   18ddc:	d10e      	bne.n	18dfc <cf_write+0x50>
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   18dde:	f106 0188 	add.w	r1, r6, #136	; 0x88
   18de2:	1c60      	adds	r0, r4, #1
   18de4:	f7ff ffb4 	bl	18d50 <bt_addr_le_copy>
	cfg->id = conn->id;
   18de8:	4620      	mov	r0, r4
   18dea:	7a33      	ldrb	r3, [r6, #8]
   18dec:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   18df0:	2100      	movs	r1, #0
   18df2:	f7ff ffcd 	bl	18d90 <atomic_set_bit>
}
   18df6:	4628      	mov	r0, r5
   18df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   18dfc:	7a20      	ldrb	r0, [r4, #8]
   18dfe:	fa20 f301 	lsr.w	r3, r0, r1
   18e02:	07da      	lsls	r2, r3, #31
   18e04:	d503      	bpl.n	18e0e <cf_write+0x62>
		    !(value[i / 8] & BIT(i % 8))) {
   18e06:	783b      	ldrb	r3, [r7, #0]
   18e08:	40cb      	lsrs	r3, r1
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   18e0a:	07db      	lsls	r3, r3, #31
   18e0c:	d511      	bpl.n	18e32 <cf_write+0x86>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   18e0e:	3101      	adds	r1, #1
   18e10:	2903      	cmp	r1, #3
   18e12:	d1e1      	bne.n	18dd8 <cf_write+0x2c>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   18e14:	783b      	ldrb	r3, [r7, #0]
   18e16:	f003 0307 	and.w	r3, r3, #7
   18e1a:	4318      	orrs	r0, r3
   18e1c:	7220      	strb	r0, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   18e1e:	e7de      	b.n	18dde <cf_write+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   18e20:	f06f 0506 	mvn.w	r5, #6
   18e24:	e7e7      	b.n	18df6 <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   18e26:	f06f 050c 	mvn.w	r5, #12
   18e2a:	e7e4      	b.n	18df6 <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   18e2c:	f06f 0510 	mvn.w	r5, #16
   18e30:	e7e1      	b.n	18df6 <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   18e32:	f06f 0512 	mvn.w	r5, #18
   18e36:	e7de      	b.n	18df6 <cf_write+0x4a>

00018e38 <read_ppcp>:
{
   18e38:	b513      	push	{r0, r1, r4, lr}
   18e3a:	4610      	mov	r0, r2
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   18e3c:	2218      	movs	r2, #24
{
   18e3e:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   18e42:	f8ad 2000 	strh.w	r2, [sp]
	ppcp.max_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MAX_INT);
   18e46:	2228      	movs	r2, #40	; 0x28
   18e48:	f8ad 2002 	strh.w	r2, [sp, #2]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   18e4c:	2200      	movs	r2, #0
   18e4e:	f8ad 2004 	strh.w	r2, [sp, #4]
	if (offset > value_len) {
   18e52:	2908      	cmp	r1, #8
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   18e54:	f04f 022a 	mov.w	r2, #42	; 0x2a
   18e58:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   18e5c:	d80b      	bhi.n	18e76 <read_ppcp+0x3e>
	len = MIN(buf_len, value_len - offset);
   18e5e:	f1c1 0408 	rsb	r4, r1, #8
   18e62:	429c      	cmp	r4, r3
   18e64:	bfa8      	it	ge
   18e66:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   18e68:	4622      	mov	r2, r4
   18e6a:	4469      	add	r1, sp
   18e6c:	f7fe f9f2 	bl	17254 <memcpy>
}
   18e70:	4620      	mov	r0, r4
   18e72:	b002      	add	sp, #8
   18e74:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   18e76:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   18e7a:	e7f9      	b.n	18e70 <read_ppcp+0x38>

00018e7c <read_appearance>:
{
   18e7c:	b513      	push	{r0, r1, r4, lr}
   18e7e:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   18e82:	4610      	mov	r0, r2
	if (offset > value_len) {
   18e84:	2902      	cmp	r1, #2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   18e86:	f04f 0200 	mov.w	r2, #0
   18e8a:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   18e8e:	d80d      	bhi.n	18eac <read_appearance+0x30>
	len = MIN(buf_len, value_len - offset);
   18e90:	f1c1 0402 	rsb	r4, r1, #2
   18e94:	429c      	cmp	r4, r3
   18e96:	bfa8      	it	ge
   18e98:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   18e9a:	f10d 0306 	add.w	r3, sp, #6
   18e9e:	4622      	mov	r2, r4
   18ea0:	4419      	add	r1, r3
   18ea2:	f7fe f9d7 	bl	17254 <memcpy>
}
   18ea6:	4620      	mov	r0, r4
   18ea8:	b002      	add	sp, #8
   18eaa:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   18eac:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   18eb0:	e7f9      	b.n	18ea6 <read_appearance+0x2a>

00018eb2 <read_name>:
{
   18eb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18eb6:	4698      	mov	r8, r3
   18eb8:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   18ebc:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   18ebe:	f7ec f97f 	bl	51c0 <bt_get_name>
   18ec2:	4607      	mov	r7, r0
				 strlen(name));
   18ec4:	f7fe f999 	bl	171fa <strlen>
	if (offset > value_len) {
   18ec8:	b283      	uxth	r3, r0
   18eca:	42b3      	cmp	r3, r6
   18ecc:	d30c      	bcc.n	18ee8 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   18ece:	1b9c      	subs	r4, r3, r6
   18ed0:	4544      	cmp	r4, r8
   18ed2:	bfa8      	it	ge
   18ed4:	4644      	movge	r4, r8
   18ed6:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   18ed8:	4622      	mov	r2, r4
   18eda:	19b9      	adds	r1, r7, r6
   18edc:	4628      	mov	r0, r5
   18ede:	f7fe f9b9 	bl	17254 <memcpy>
}
   18ee2:	4620      	mov	r0, r4
   18ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   18ee8:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   18eec:	e7f9      	b.n	18ee2 <read_name+0x30>

00018eee <cf_read>:
{
   18eee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   18ef0:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   18ef2:	2300      	movs	r3, #0
{
   18ef4:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   18ef8:	f88d 3004 	strb.w	r3, [sp, #4]
{
   18efc:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   18efe:	f7ee fa57 	bl	73b0 <find_cf_cfg>
	if (cfg) {
   18f02:	b128      	cbz	r0, 18f10 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   18f04:	f100 0108 	add.w	r1, r0, #8
   18f08:	2201      	movs	r2, #1
   18f0a:	a801      	add	r0, sp, #4
   18f0c:	f7fe f9a2 	bl	17254 <memcpy>
	if (offset > value_len) {
   18f10:	2e01      	cmp	r6, #1
   18f12:	d80d      	bhi.n	18f30 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   18f14:	f1c6 0401 	rsb	r4, r6, #1
   18f18:	42bc      	cmp	r4, r7
   18f1a:	bfa8      	it	ge
   18f1c:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   18f1e:	ab01      	add	r3, sp, #4
   18f20:	4622      	mov	r2, r4
   18f22:	1999      	adds	r1, r3, r6
   18f24:	4628      	mov	r0, r5
   18f26:	f7fe f995 	bl	17254 <memcpy>
}
   18f2a:	4620      	mov	r0, r4
   18f2c:	b003      	add	sp, #12
   18f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   18f30:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   18f34:	e7f9      	b.n	18f2a <cf_read+0x3c>

00018f36 <bt_gatt_attr_read_service>:
{
   18f36:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   18f38:	68c9      	ldr	r1, [r1, #12]
{
   18f3a:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   18f3e:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   18f40:	780b      	ldrb	r3, [r1, #0]
{
   18f42:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   18f44:	b993      	cbnz	r3, 18f6c <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   18f46:	884b      	ldrh	r3, [r1, #2]
   18f48:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   18f4c:	2d02      	cmp	r5, #2
   18f4e:	d819      	bhi.n	18f84 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   18f50:	f1c5 0202 	rsb	r2, r5, #2
   18f54:	4294      	cmp	r4, r2
   18f56:	bfa8      	it	ge
   18f58:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   18f5a:	f10d 0306 	add.w	r3, sp, #6
   18f5e:	4622      	mov	r2, r4
   18f60:	1959      	adds	r1, r3, r5
   18f62:	f7fe f977 	bl	17254 <memcpy>
}
   18f66:	4620      	mov	r0, r4
   18f68:	b003      	add	sp, #12
   18f6a:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   18f6c:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   18f6e:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   18f72:	d807      	bhi.n	18f84 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   18f74:	f1c5 0210 	rsb	r2, r5, #16
   18f78:	4294      	cmp	r4, r2
   18f7a:	bfa8      	it	ge
   18f7c:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   18f7e:	4622      	mov	r2, r4
   18f80:	4429      	add	r1, r5
   18f82:	e7ee      	b.n	18f62 <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   18f84:	f06f 0406 	mvn.w	r4, #6
   18f88:	e7ed      	b.n	18f66 <bt_gatt_attr_read_service+0x30>

00018f8a <find_ccc_cfg>:
{
   18f8a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   18f8c:	460c      	mov	r4, r1
						    &cfg->peer)) {
   18f8e:	1c4d      	adds	r5, r1, #1
		if (conn) {
   18f90:	b148      	cbz	r0, 18fa6 <find_ccc_cfg+0x1c>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   18f92:	7809      	ldrb	r1, [r1, #0]
   18f94:	462a      	mov	r2, r5
   18f96:	f7ff f869 	bl	1806c <bt_conn_is_peer_addr_le>
	return NULL;
   18f9a:	2800      	cmp	r0, #0
   18f9c:	bf08      	it	eq
   18f9e:	2400      	moveq	r4, #0
}
   18fa0:	4620      	mov	r0, r4
   18fa2:	b003      	add	sp, #12
   18fa4:	bd30      	pop	{r4, r5, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   18fa6:	9000      	str	r0, [sp, #0]
	return memcmp(a, b, sizeof(*a));
   18fa8:	2207      	movs	r2, #7
   18faa:	f8cd 0003 	str.w	r0, [sp, #3]
   18fae:	4669      	mov	r1, sp
   18fb0:	4628      	mov	r0, r5
   18fb2:	f7fe f93e 	bl	17232 <memcmp>
	return NULL;
   18fb6:	2800      	cmp	r0, #0
   18fb8:	bf18      	it	ne
   18fba:	2400      	movne	r4, #0
   18fbc:	e7f0      	b.n	18fa0 <find_ccc_cfg+0x16>

00018fbe <bt_gatt_attr_write_ccc>:
{
   18fbe:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   18fc2:	461f      	mov	r7, r3
   18fc4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	struct _bt_gatt_ccc *ccc = attr->user_data;
   18fc8:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
   18fcc:	4606      	mov	r6, r0
   18fce:	4688      	mov	r8, r1
	if (offset) {
   18fd0:	2b00      	cmp	r3, #0
   18fd2:	d141      	bne.n	19058 <bt_gatt_attr_write_ccc+0x9a>
	if (!len || len > sizeof(uint16_t)) {
   18fd4:	1e7b      	subs	r3, r7, #1
   18fd6:	2b01      	cmp	r3, #1
   18fd8:	d841      	bhi.n	1905e <bt_gatt_attr_write_ccc+0xa0>
		value = *(uint8_t *)buf;
   18fda:	7815      	ldrb	r5, [r2, #0]
	if (len < sizeof(uint16_t)) {
   18fdc:	2f01      	cmp	r7, #1
	cfg = find_ccc_cfg(conn, ccc);
   18fde:	4649      	mov	r1, r9
   18fe0:	bf14      	ite	ne
   18fe2:	8815      	ldrhne	r5, [r2, #0]
		value = *(uint8_t *)buf;
   18fe4:	b2ad      	uxtheq	r5, r5
	cfg = find_ccc_cfg(conn, ccc);
   18fe6:	f7ff ffd0 	bl	18f8a <find_ccc_cfg>
	if (!cfg) {
   18fea:	4604      	mov	r4, r0
   18fec:	b980      	cbnz	r0, 19010 <bt_gatt_attr_write_ccc+0x52>
		if (!value) {
   18fee:	b91d      	cbnz	r5, 18ff8 <bt_gatt_attr_write_ccc+0x3a>
			return len;
   18ff0:	4638      	mov	r0, r7
}
   18ff2:	b003      	add	sp, #12
   18ff4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   18ff8:	4649      	mov	r1, r9
   18ffa:	f7ff ffc6 	bl	18f8a <find_ccc_cfg>
		if (!cfg) {
   18ffe:	4604      	mov	r4, r0
   19000:	b380      	cbz	r0, 19064 <bt_gatt_attr_write_ccc+0xa6>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   19002:	f106 0188 	add.w	r1, r6, #136	; 0x88
   19006:	3001      	adds	r0, #1
   19008:	f7ff fea2 	bl	18d50 <bt_addr_le_copy>
		cfg->id = conn->id;
   1900c:	7a33      	ldrb	r3, [r6, #8]
   1900e:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   19010:	f8d9 3010 	ldr.w	r3, [r9, #16]
   19014:	b9a3      	cbnz	r3, 19040 <bt_gatt_attr_write_ccc+0x82>
	if (cfg->value != ccc->value) {
   19016:	f8b9 300a 	ldrh.w	r3, [r9, #10]
	cfg->value = value;
   1901a:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   1901c:	42ab      	cmp	r3, r5
   1901e:	d003      	beq.n	19028 <bt_gatt_attr_write_ccc+0x6a>
		gatt_ccc_changed(attr, ccc);
   19020:	4649      	mov	r1, r9
   19022:	4640      	mov	r0, r8
   19024:	f7ff fe1e 	bl	18c64 <gatt_ccc_changed>
	if (!value) {
   19028:	2d00      	cmp	r5, #0
   1902a:	d1e1      	bne.n	18ff0 <bt_gatt_attr_write_ccc+0x32>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1902c:	4669      	mov	r1, sp
   1902e:	1c60      	adds	r0, r4, #1
   19030:	9500      	str	r5, [sp, #0]
   19032:	f8cd 5003 	str.w	r5, [sp, #3]
   19036:	f7ff fe8b 	bl	18d50 <bt_addr_le_copy>
	cfg->id = 0U;
   1903a:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   1903c:	8125      	strh	r5, [r4, #8]
}
   1903e:	e7d7      	b.n	18ff0 <bt_gatt_attr_write_ccc+0x32>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   19040:	462a      	mov	r2, r5
   19042:	4641      	mov	r1, r8
   19044:	4630      	mov	r0, r6
   19046:	4798      	blx	r3
		if (write < 0) {
   19048:	2800      	cmp	r0, #0
   1904a:	dbd2      	blt.n	18ff2 <bt_gatt_attr_write_ccc+0x34>
		if (write != sizeof(value) && write != 1) {
   1904c:	3801      	subs	r0, #1
   1904e:	2801      	cmp	r0, #1
   19050:	d9e1      	bls.n	19016 <bt_gatt_attr_write_ccc+0x58>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   19052:	f06f 000d 	mvn.w	r0, #13
   19056:	e7cc      	b.n	18ff2 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   19058:	f06f 0006 	mvn.w	r0, #6
   1905c:	e7c9      	b.n	18ff2 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1905e:	f06f 000c 	mvn.w	r0, #12
   19062:	e7c6      	b.n	18ff2 <bt_gatt_attr_write_ccc+0x34>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   19064:	f06f 0010 	mvn.w	r0, #16
   19068:	e7c3      	b.n	18ff2 <bt_gatt_attr_write_ccc+0x34>

0001906a <bt_gatt_attr_read_ccc>:
{
   1906a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   1906c:	68c9      	ldr	r1, [r1, #12]
{
   1906e:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   19072:	4615      	mov	r5, r2
   19074:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   19076:	f7ff ff88 	bl	18f8a <find_ccc_cfg>
	if (cfg) {
   1907a:	b100      	cbz	r0, 1907e <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   1907c:	8900      	ldrh	r0, [r0, #8]
   1907e:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   19082:	2e02      	cmp	r6, #2
   19084:	d80e      	bhi.n	190a4 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   19086:	f1c6 0402 	rsb	r4, r6, #2
   1908a:	42bc      	cmp	r4, r7
   1908c:	bfa8      	it	ge
   1908e:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   19090:	f10d 0306 	add.w	r3, sp, #6
   19094:	4622      	mov	r2, r4
   19096:	1999      	adds	r1, r3, r6
   19098:	4628      	mov	r0, r5
   1909a:	f7fe f8db 	bl	17254 <memcpy>
}
   1909e:	4620      	mov	r0, r4
   190a0:	b003      	add	sp, #12
   190a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   190a4:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   190a8:	e7f9      	b.n	1909e <bt_gatt_attr_read_ccc+0x34>

000190aa <sc_save>:
{
   190aa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   190ae:	4680      	mov	r8, r0
   190b0:	460f      	mov	r7, r1
   190b2:	4616      	mov	r6, r2
   190b4:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   190b6:	f7ee f999 	bl	73ec <find_sc_cfg>
	if (!cfg) {
   190ba:	4604      	mov	r4, r0
   190bc:	b960      	cbnz	r0, 190d8 <sc_save+0x2e>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   190be:	4669      	mov	r1, sp
   190c0:	9000      	str	r0, [sp, #0]
   190c2:	f8cd 0003 	str.w	r0, [sp, #3]
   190c6:	f7ee f991 	bl	73ec <find_sc_cfg>
		if (!cfg) {
   190ca:	4604      	mov	r4, r0
   190cc:	b178      	cbz	r0, 190ee <sc_save+0x44>
		cfg->id = id;
   190ce:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   190d2:	4639      	mov	r1, r7
   190d4:	f7ff fe3c 	bl	18d50 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   190d8:	8922      	ldrh	r2, [r4, #8]
   190da:	8963      	ldrh	r3, [r4, #10]
   190dc:	b91a      	cbnz	r2, 190e6 <sc_save+0x3c>
   190de:	b923      	cbnz	r3, 190ea <sc_save+0x40>
		cfg->data.start = start;
   190e0:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   190e2:	8165      	strh	r5, [r4, #10]
   190e4:	e003      	b.n	190ee <sc_save+0x44>
	if (new_start >= *start && new_end <= *end) {
   190e6:	4296      	cmp	r6, r2
   190e8:	d304      	bcc.n	190f4 <sc_save+0x4a>
   190ea:	429d      	cmp	r5, r3
   190ec:	d8f9      	bhi.n	190e2 <sc_save+0x38>
}
   190ee:	b002      	add	sp, #8
   190f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*start = new_start;
   190f4:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   190f6:	e7f8      	b.n	190ea <sc_save+0x40>

000190f8 <sc_clear>:
{
   190f8:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   190fa:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   190fe:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   19100:	4631      	mov	r1, r6
   19102:	7a00      	ldrb	r0, [r0, #8]
   19104:	f7fe fce0 	bl	17ac8 <bt_addr_le_is_bonded>
   19108:	7a20      	ldrb	r0, [r4, #8]
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   1910a:	4631      	mov	r1, r6
   1910c:	f7ee f96e 	bl	73ec <find_sc_cfg>
	if (!cfg) {
   19110:	b128      	cbz	r0, 1911e <sc_clear+0x26>
}
   19112:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   19116:	220c      	movs	r2, #12
   19118:	2100      	movs	r1, #0
   1911a:	f7fe b8a6 	b.w	1726a <memset>
}
   1911e:	bd70      	pop	{r4, r5, r6, pc}

00019120 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   19120:	2a02      	cmp	r2, #2
{
   19122:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   19124:	d108      	bne.n	19138 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   19126:	2300      	movs	r3, #0
   19128:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1912c:	461a      	mov	r2, r3
   1912e:	7a00      	ldrb	r0, [r0, #8]
   19130:	f7ff ffbb 	bl	190aa <sc_save>
}
   19134:	2002      	movs	r0, #2
   19136:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   19138:	f7ff ffde 	bl	190f8 <sc_clear>
   1913c:	e7fa      	b.n	19134 <sc_ccc_cfg_write+0x14>

0001913e <sc_restore_rsp>:
{
   1913e:	b538      	push	{r3, r4, r5, lr}
   19140:	4605      	mov	r5, r0
   19142:	4614      	mov	r4, r2
	cfg = find_cf_cfg(conn);
   19144:	f7ee f934 	bl	73b0 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   19148:	b130      	cbz	r0, 19158 <sc_restore_rsp+0x1a>
   1914a:	7a03      	ldrb	r3, [r0, #8]
   1914c:	07db      	lsls	r3, r3, #31
   1914e:	d503      	bpl.n	19158 <sc_restore_rsp+0x1a>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   19150:	2100      	movs	r1, #0
   19152:	300c      	adds	r0, #12
   19154:	f7ff fe1c 	bl	18d90 <atomic_set_bit>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   19158:	b964      	cbnz	r4, 19174 <sc_restore_rsp+0x36>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1915a:	7a28      	ldrb	r0, [r5, #8]
   1915c:	f105 0188 	add.w	r1, r5, #136	; 0x88
   19160:	f7ee f944 	bl	73ec <find_sc_cfg>
		if (sc_cfg) {
   19164:	b130      	cbz	r0, 19174 <sc_restore_rsp+0x36>
	memset(&cfg->data, 0, sizeof(cfg->data));
   19166:	4621      	mov	r1, r4
   19168:	2204      	movs	r2, #4
}
   1916a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memset(&cfg->data, 0, sizeof(cfg->data));
   1916e:	3008      	adds	r0, #8
   19170:	f7fe b87b 	b.w	1726a <memset>
}
   19174:	bd38      	pop	{r3, r4, r5, pc}

00019176 <bt_gatt_attr_value_handle>:
{
   19176:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   19178:	4604      	mov	r4, r0
   1917a:	b910      	cbnz	r0, 19182 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   1917c:	2000      	movs	r0, #0
}
   1917e:	b002      	add	sp, #8
   19180:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   19182:	2300      	movs	r3, #0
   19184:	f88d 3004 	strb.w	r3, [sp, #4]
   19188:	6800      	ldr	r0, [r0, #0]
   1918a:	f642 0303 	movw	r3, #10243	; 0x2803
   1918e:	a901      	add	r1, sp, #4
   19190:	f8ad 3006 	strh.w	r3, [sp, #6]
   19194:	f7fe fa47 	bl	17626 <bt_uuid_cmp>
   19198:	2800      	cmp	r0, #0
   1919a:	d1ef      	bne.n	1917c <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   1919c:	68e3      	ldr	r3, [r4, #12]
   1919e:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   191a0:	2800      	cmp	r0, #0
   191a2:	d1ec      	bne.n	1917e <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   191a4:	4620      	mov	r0, r4
   191a6:	f7ee fa03 	bl	75b0 <bt_gatt_attr_get_handle>
   191aa:	3001      	adds	r0, #1
   191ac:	b280      	uxth	r0, r0
	return handle;
   191ae:	e7e6      	b.n	1917e <bt_gatt_attr_value_handle+0x8>

000191b0 <bt_gatt_attr_read_chrc>:
{
   191b0:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   191b2:	68cf      	ldr	r7, [r1, #12]
{
   191b4:	b087      	sub	sp, #28
   191b6:	4608      	mov	r0, r1
   191b8:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   191ba:	79bb      	ldrb	r3, [r7, #6]
   191bc:	f88d 3004 	strb.w	r3, [sp, #4]
{
   191c0:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   191c4:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   191c6:	f7ff ffd6 	bl	19176 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   191ca:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   191cc:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   191d0:	780b      	ldrb	r3, [r1, #0]
   191d2:	b99b      	cbnz	r3, 191fc <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   191d4:	884b      	ldrh	r3, [r1, #2]
   191d6:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   191da:	2105      	movs	r1, #5
	if (offset > value_len) {
   191dc:	42b1      	cmp	r1, r6
   191de:	d315      	bcc.n	1920c <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   191e0:	1b89      	subs	r1, r1, r6
   191e2:	42a1      	cmp	r1, r4
   191e4:	bfa8      	it	ge
   191e6:	4621      	movge	r1, r4
   191e8:	b28c      	uxth	r4, r1
	memcpy(buf, (uint8_t *)value + offset, len);
   191ea:	ab01      	add	r3, sp, #4
   191ec:	4622      	mov	r2, r4
   191ee:	1999      	adds	r1, r3, r6
   191f0:	4628      	mov	r0, r5
   191f2:	f7fe f82f 	bl	17254 <memcpy>
}
   191f6:	4620      	mov	r0, r4
   191f8:	b007      	add	sp, #28
   191fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   191fc:	3101      	adds	r1, #1
   191fe:	2210      	movs	r2, #16
   19200:	f10d 0007 	add.w	r0, sp, #7
   19204:	f7fe f826 	bl	17254 <memcpy>
		value_len += 16U;
   19208:	2113      	movs	r1, #19
   1920a:	e7e7      	b.n	191dc <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1920c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   19210:	e7f1      	b.n	191f6 <bt_gatt_attr_read_chrc+0x46>

00019212 <bt_gatt_foreach_attr>:
{
   19212:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   19214:	e9cd 2301 	strd	r2, r3, [sp, #4]
   19218:	2300      	movs	r3, #0
   1921a:	9300      	str	r3, [sp, #0]
   1921c:	461a      	mov	r2, r3
   1921e:	f7ee f9f7 	bl	7610 <bt_gatt_foreach_attr_type>
}
   19222:	b005      	add	sp, #20
   19224:	f85d fb04 	ldr.w	pc, [sp], #4

00019228 <db_hash_process>:
	db_hash_gen(true);
   19228:	f7ee ba4c 	b.w	76c4 <db_hash_gen.constprop.0>

0001922c <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   1922c:	07d3      	lsls	r3, r2, #31
{
   1922e:	b510      	push	{r4, lr}
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   19230:	7c8c      	ldrb	r4, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   19232:	d504      	bpl.n	1923e <bt_gatt_check_perm+0x12>
   19234:	f014 0f15 	tst.w	r4, #21
   19238:	d017      	beq.n	1926a <bt_gatt_check_perm+0x3e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1923a:	684b      	ldr	r3, [r1, #4]
   1923c:	b1ab      	cbz	r3, 1926a <bt_gatt_check_perm+0x3e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   1923e:	0793      	lsls	r3, r2, #30
   19240:	d504      	bpl.n	1924c <bt_gatt_check_perm+0x20>
   19242:	f014 0f2a 	tst.w	r4, #42	; 0x2a
   19246:	d012      	beq.n	1926e <bt_gatt_check_perm+0x42>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   19248:	688b      	ldr	r3, [r1, #8]
   1924a:	b183      	cbz	r3, 1926e <bt_gatt_check_perm+0x42>
	mask &= attr->perm;
   1924c:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   1924e:	f014 0f30 	tst.w	r4, #48	; 0x30
   19252:	d104      	bne.n	1925e <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   19254:	f014 000c 	ands.w	r0, r4, #12
   19258:	bf18      	it	ne
   1925a:	200f      	movne	r0, #15
}
   1925c:	bd10      	pop	{r4, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   1925e:	f7fe ff03 	bl	18068 <bt_conn_get_security>
   19262:	2802      	cmp	r0, #2
   19264:	d8f6      	bhi.n	19254 <bt_gatt_check_perm+0x28>
			return BT_ATT_ERR_AUTHENTICATION;
   19266:	2005      	movs	r0, #5
   19268:	e7f8      	b.n	1925c <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   1926a:	2002      	movs	r0, #2
   1926c:	e7f6      	b.n	1925c <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   1926e:	2003      	movs	r0, #3
   19270:	e7f4      	b.n	1925c <bt_gatt_check_perm+0x30>

00019272 <gatt_notify>:
{
   19272:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19276:	4614      	mov	r4, r2
   19278:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr,
   1927a:	2214      	movs	r2, #20
   1927c:	6861      	ldr	r1, [r4, #4]
{
   1927e:	4607      	mov	r7, r0
	if (bt_gatt_check_perm(conn, params->attr,
   19280:	f7ff ffd4 	bl	1922c <bt_gatt_check_perm>
   19284:	bb08      	cbnz	r0, 192ca <gatt_notify+0x58>
				sizeof(*nfy) + params->len);
   19286:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   19288:	211b      	movs	r1, #27
   1928a:	3202      	adds	r2, #2
   1928c:	4638      	mov	r0, r7
   1928e:	f7ff fc14 	bl	18aba <bt_att_create_pdu>
	if (!buf) {
   19292:	4605      	mov	r5, r0
   19294:	b1e8      	cbz	r0, 192d2 <gatt_notify+0x60>
   19296:	f100 0908 	add.w	r9, r0, #8
   1929a:	2102      	movs	r1, #2
   1929c:	4648      	mov	r0, r9
   1929e:	f003 fe94 	bl	1cfca <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   192a2:	4606      	mov	r6, r0
   192a4:	89a1      	ldrh	r1, [r4, #12]
   192a6:	f826 8b02 	strh.w	r8, [r6], #2
   192aa:	4648      	mov	r0, r9
   192ac:	f003 fe8d 	bl	1cfca <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   192b0:	89a2      	ldrh	r2, [r4, #12]
   192b2:	68a1      	ldr	r1, [r4, #8]
   192b4:	4630      	mov	r0, r6
   192b6:	f7fd ffcd 	bl	17254 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   192ba:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   192be:	4629      	mov	r1, r5
   192c0:	4638      	mov	r0, r7
}
   192c2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
   192c6:	f7ff bc71 	b.w	18bac <bt_att_send>
		return -EPERM;
   192ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   192ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOMEM;
   192d2:	f06f 000b 	mvn.w	r0, #11
   192d6:	e7fa      	b.n	192ce <gatt_notify+0x5c>

000192d8 <bt_gatt_change_aware>:
{
   192d8:	b510      	push	{r4, lr}
   192da:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   192dc:	f7ee f868 	bl	73b0 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   192e0:	4603      	mov	r3, r0
   192e2:	b910      	cbnz	r0, 192ea <bt_gatt_change_aware+0x12>
		return true;
   192e4:	2401      	movs	r4, #1
}
   192e6:	4620      	mov	r0, r4
   192e8:	bd10      	pop	{r4, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   192ea:	7a02      	ldrb	r2, [r0, #8]
   192ec:	07d2      	lsls	r2, r2, #31
   192ee:	d5f9      	bpl.n	192e4 <bt_gatt_change_aware+0xc>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   192f0:	f3bf 8f5b 	dmb	ish
   192f4:	68d9      	ldr	r1, [r3, #12]
   192f6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   192fa:	f011 0101 	ands.w	r1, r1, #1
   192fe:	f100 000c 	add.w	r0, r0, #12
   19302:	d1ef      	bne.n	192e4 <bt_gatt_change_aware+0xc>
	if (!req) {
   19304:	2c00      	cmp	r4, #0
   19306:	d0ee      	beq.n	192e6 <bt_gatt_change_aware+0xe>
   19308:	f3bf 8f5b 	dmb	ish
   1930c:	68db      	ldr	r3, [r3, #12]
   1930e:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   19312:	f3c3 0440 	ubfx	r4, r3, #1, #1
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   19316:	079b      	lsls	r3, r3, #30
   19318:	d50e      	bpl.n	19338 <bt_gatt_change_aware+0x60>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1931a:	f3bf 8f5b 	dmb	ish
   1931e:	e850 3f00 	ldrex	r3, [r0]
   19322:	f023 0302 	bic.w	r3, r3, #2
   19326:	e840 3200 	strex	r2, r3, [r0]
   1932a:	2a00      	cmp	r2, #0
   1932c:	d1f7      	bne.n	1931e <bt_gatt_change_aware+0x46>
   1932e:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   19332:	f7ff fd2d 	bl	18d90 <atomic_set_bit>
	return false;
   19336:	e7d6      	b.n	192e6 <bt_gatt_change_aware+0xe>
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   19338:	2101      	movs	r1, #1
   1933a:	e7fa      	b.n	19332 <bt_gatt_change_aware+0x5a>

0001933c <bt_smp_recv>:
{
   1933c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   1933e:	2100      	movs	r1, #0
   19340:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   19344:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	struct bt_conn *conn = chan->conn;
   19348:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   1934a:	4608      	mov	r0, r1
   1934c:	f7fe ff49 	bl	181e2 <bt_l2cap_create_pdu_timeout>
   19350:	f100 0608 	add.w	r6, r0, #8
   19354:	4604      	mov	r4, r0
   19356:	2101      	movs	r1, #1
   19358:	4630      	mov	r0, r6
   1935a:	f003 fe36 	bl	1cfca <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   1935e:	2505      	movs	r5, #5
   19360:	7005      	strb	r5, [r0, #0]
   19362:	2101      	movs	r1, #1
   19364:	4630      	mov	r0, r6
   19366:	f003 fe30 	bl	1cfca <net_buf_simple_add>
   1936a:	2300      	movs	r3, #0
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   1936c:	7005      	strb	r5, [r0, #0]
   1936e:	4622      	mov	r2, r4
   19370:	9300      	str	r3, [sp, #0]
   19372:	2106      	movs	r1, #6
   19374:	4638      	mov	r0, r7
   19376:	f7fe ff37 	bl	181e8 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   1937a:	b110      	cbz	r0, 19382 <bt_smp_recv+0x46>
		net_buf_unref(buf);
   1937c:	4620      	mov	r0, r4
   1937e:	f7f8 ff87 	bl	12290 <net_buf_unref>
}
   19382:	2000      	movs	r0, #0
   19384:	b003      	add	sp, #12
   19386:	bdf0      	pop	{r4, r5, r6, r7, pc}

00019388 <bt_smp_sign>:
   19388:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1938c:	4770      	bx	lr

0001938e <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   1938e:	2000      	movs	r0, #0
   19390:	4770      	bx	lr

00019392 <model_start>:
	if (mod->cb && mod->cb->start) {
   19392:	6983      	ldr	r3, [r0, #24]
   19394:	b113      	cbz	r3, 1939c <model_start+0xa>
   19396:	685b      	ldr	r3, [r3, #4]
   19398:	b103      	cbz	r3, 1939c <model_start+0xa>
		mod->cb->start(mod);
   1939a:	4718      	bx	r3
}
   1939c:	4770      	bx	lr

0001939e <bt_mesh_init>:
{
   1939e:	b510      	push	{r4, lr}
	err = bt_mesh_comp_register(comp);
   193a0:	4608      	mov	r0, r1
   193a2:	f7f1 f94d 	bl	a640 <bt_mesh_comp_register>
	if (err) {
   193a6:	4604      	mov	r4, r0
   193a8:	b958      	cbnz	r0, 193c2 <bt_mesh_init+0x24>
	bt_mesh_cfg_default_set();
   193aa:	f7ee fd55 	bl	7e58 <bt_mesh_cfg_default_set>
	bt_mesh_net_init();
   193ae:	f7ef fbab 	bl	8b08 <bt_mesh_net_init>
	bt_mesh_trans_init();
   193b2:	f7f0 fcb7 	bl	9d24 <bt_mesh_trans_init>
	bt_mesh_hb_init();
   193b6:	f7f0 fee5 	bl	a184 <bt_mesh_hb_init>
	bt_mesh_beacon_init();
   193ba:	f7ee fe95 	bl	80e8 <bt_mesh_beacon_init>
	bt_mesh_adv_init();
   193be:	f7f1 fd41 	bl	ae44 <bt_mesh_adv_init>
}
   193c2:	4620      	mov	r0, r4
   193c4:	bd10      	pop	{r4, pc}

000193c6 <bt_mesh_gatt_proxy_set>:
}
   193c6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   193ca:	4770      	bx	lr

000193cc <bt_mesh_gatt_proxy_get>:
}
   193cc:	2002      	movs	r0, #2
   193ce:	4770      	bx	lr

000193d0 <bt_mesh_friend_set>:
   193d0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   193d4:	4770      	bx	lr

000193d6 <bt_mesh_friend_get>:
   193d6:	2002      	movs	r0, #2
   193d8:	4770      	bx	lr

000193da <bt_mesh_fixed_group_match>:
{
   193da:	b508      	push	{r3, lr}
	switch (addr) {
   193dc:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   193e0:	4298      	cmp	r0, r3
   193e2:	d006      	beq.n	193f2 <bt_mesh_fixed_group_match+0x18>
   193e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   193e8:	4298      	cmp	r0, r3
		return (bt_mesh_relay_get() == BT_MESH_FEATURE_ENABLED);
   193ea:	bf14      	ite	ne
   193ec:	2000      	movne	r0, #0
   193ee:	2001      	moveq	r0, #1
}
   193f0:	bd08      	pop	{r3, pc}
		return (bt_mesh_relay_get() == BT_MESH_FEATURE_ENABLED);
   193f2:	f7ee fd1f 	bl	7e34 <bt_mesh_relay_get>
   193f6:	2801      	cmp	r0, #1
   193f8:	e7f7      	b.n	193ea <bt_mesh_fixed_group_match+0x10>

000193fa <adv_buf_destroy>:
{
   193fa:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct bt_mesh_adv adv = *BT_MESH_ADV(buf);
   193fc:	6943      	ldr	r3, [r0, #20]
{
   193fe:	4604      	mov	r4, r0
	struct bt_mesh_adv adv = *BT_MESH_ADV(buf);
   19400:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   19404:	ab04      	add	r3, sp, #16
   19406:	e903 0007 	stmdb	r3, {r0, r1, r2}
   1940a:	4605      	mov	r5, r0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1940c:	79a0      	ldrb	r0, [r4, #6]
   1940e:	460e      	mov	r6, r1
   19410:	f7f8 fe7a 	bl	12108 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   19414:	4621      	mov	r1, r4
   19416:	f005 f890 	bl	1e53a <k_queue_prepend>
}

static inline void bt_mesh_adv_send_end(
	int err, struct bt_mesh_adv const *adv)
{
	if (adv->started && adv->cb && adv->cb->end) {
   1941a:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1941e:	075b      	lsls	r3, r3, #29
   19420:	d508      	bpl.n	19434 <adv_buf_destroy+0x3a>
   19422:	b13d      	cbz	r5, 19434 <adv_buf_destroy+0x3a>
   19424:	686b      	ldr	r3, [r5, #4]
   19426:	b12b      	cbz	r3, 19434 <adv_buf_destroy+0x3a>
		adv->cb->end(err, adv->cb_data);
   19428:	4631      	mov	r1, r6
   1942a:	2000      	movs	r0, #0
}
   1942c:	b004      	add	sp, #16
   1942e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   19432:	4718      	bx	r3
   19434:	b004      	add	sp, #16
   19436:	bd70      	pop	{r4, r5, r6, pc}

00019438 <bt_mesh_scan_cb>:
	if (adv_type != BT_GAP_ADV_TYPE_ADV_NONCONN_IND) {
   19438:	2a03      	cmp	r2, #3
{
   1943a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1943e:	4688      	mov	r8, r1
   19440:	461c      	mov	r4, r3
	if (adv_type != BT_GAP_ADV_TYPE_ADV_NONCONN_IND) {
   19442:	d024      	beq.n	1948e <bt_mesh_scan_cb+0x56>
}
   19444:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		len = net_buf_simple_pull_u8(buf);
   19448:	4620      	mov	r0, r4
   1944a:	f003 fe49 	bl	1d0e0 <net_buf_simple_pull_u8>
		if (len == 0U) {
   1944e:	4605      	mov	r5, r0
   19450:	2800      	cmp	r0, #0
   19452:	d0f7      	beq.n	19444 <bt_mesh_scan_cb+0xc>
		if (len > buf->len) {
   19454:	88a3      	ldrh	r3, [r4, #4]
   19456:	b287      	uxth	r7, r0
   19458:	42bb      	cmp	r3, r7
   1945a:	d3f3      	bcc.n	19444 <bt_mesh_scan_cb+0xc>
	state->offset = net_buf_simple_headroom(buf);
   1945c:	4620      	mov	r0, r4
   1945e:	f003 fe6a 	bl	1d136 <net_buf_simple_headroom>
   19462:	4606      	mov	r6, r0
		type = net_buf_simple_pull_u8(buf);
   19464:	4620      	mov	r0, r4
	state->len = buf->len;
   19466:	f8b4 9004 	ldrh.w	r9, [r4, #4]
   1946a:	f003 fe39 	bl	1d0e0 <net_buf_simple_pull_u8>
		buf->len = len - 1;
   1946e:	3f01      	subs	r7, #1
		switch (type) {
   19470:	282a      	cmp	r0, #42	; 0x2a
		buf->len = len - 1;
   19472:	80a7      	strh	r7, [r4, #4]
		switch (type) {
   19474:	d00f      	beq.n	19496 <bt_mesh_scan_cb+0x5e>
   19476:	282b      	cmp	r0, #43	; 0x2b
   19478:	d013      	beq.n	194a2 <bt_mesh_scan_cb+0x6a>
	buf->data = buf->__buf + state->offset;
   1947a:	68a0      	ldr	r0, [r4, #8]
	buf->len = state->len;
   1947c:	f8a4 9004 	strh.w	r9, [r4, #4]
	buf->data = buf->__buf + state->offset;
   19480:	fa10 f686 	uxtah	r6, r0, r6
   19484:	6026      	str	r6, [r4, #0]
		net_buf_simple_pull(buf, len);
   19486:	4629      	mov	r1, r5
   19488:	4620      	mov	r0, r4
   1948a:	f003 fe19 	bl	1d0c0 <net_buf_simple_pull>
	while (buf->len > 1) {
   1948e:	88a3      	ldrh	r3, [r4, #4]
   19490:	2b01      	cmp	r3, #1
   19492:	d8d9      	bhi.n	19448 <bt_mesh_scan_cb+0x10>
   19494:	e7d6      	b.n	19444 <bt_mesh_scan_cb+0xc>
			bt_mesh_net_recv(buf, rssi, BT_MESH_NET_IF_ADV);
   19496:	2200      	movs	r2, #0
   19498:	4641      	mov	r1, r8
   1949a:	4620      	mov	r0, r4
   1949c:	f7ef fa56 	bl	894c <bt_mesh_net_recv>
			break;
   194a0:	e7eb      	b.n	1947a <bt_mesh_scan_cb+0x42>
			bt_mesh_beacon_recv(buf);
   194a2:	4620      	mov	r0, r4
   194a4:	f7ee fe48 	bl	8138 <bt_mesh_beacon_recv>
			break;
   194a8:	e7e7      	b.n	1947a <bt_mesh_scan_cb+0x42>

000194aa <bt_mesh_scan_disable>:

int bt_mesh_scan_disable(void)
{
   194aa:	b508      	push	{r3, lr}
	int err;

	BT_DBG("");

	err = bt_le_scan_stop();
   194ac:	f7ec fcfa 	bl	5ea4 <bt_le_scan_stop>
	if (err && err != -EALREADY) {
   194b0:	b118      	cbz	r0, 194ba <bt_mesh_scan_disable+0x10>
		BT_ERR("stopping scan failed (err %d)", err);
		return err;
	}

	return 0;
   194b2:	f110 0f78 	cmn.w	r0, #120	; 0x78
   194b6:	bf08      	it	eq
   194b8:	2000      	moveq	r0, #0
}
   194ba:	bd08      	pop	{r3, pc}

000194bc <sub_update_beacon_observation>:
	sub->beacons_last = sub->beacons_cur;
   194bc:	7943      	ldrb	r3, [r0, #5]
   194be:	7103      	strb	r3, [r0, #4]
	sub->beacons_cur = 0U;
   194c0:	2300      	movs	r3, #0
   194c2:	7143      	strb	r3, [r0, #5]
}
   194c4:	4770      	bx	lr

000194c6 <beacon_cache_match>:
{
   194c6:	b508      	push	{r3, lr}
	return !memcmp(sub->beacon_cache, beacon_data, 21);
   194c8:	2215      	movs	r2, #21
   194ca:	3006      	adds	r0, #6
   194cc:	f7fd feb1 	bl	17232 <memcmp>
}
   194d0:	fab0 f080 	clz	r0, r0
   194d4:	0940      	lsrs	r0, r0, #5
   194d6:	bd08      	pop	{r3, pc}

000194d8 <subnet_by_id>:
{
   194d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   194dc:	b085      	sub	sp, #20
   194de:	460d      	mov	r5, r1
	for (int i = 0; i < ARRAY_SIZE(sub->keys); i++) {
   194e0:	f100 0466 	add.w	r4, r0, #102	; 0x66
   194e4:	2700      	movs	r7, #0
	bt_mesh_beacon_auth(keys->beacon, params->flags, keys->net_id,
   194e6:	f10d 0808 	add.w	r8, sp, #8
		if (sub->keys[i].valid && auth_match(&sub->keys[i], params)) {
   194ea:	f814 6c3a 	ldrb.w	r6, [r4, #-58]
   194ee:	b1e6      	cbz	r6, 1952a <subnet_by_id+0x52>
	if (memcmp(params->net_id, keys->net_id, 8)) {
   194f0:	f1a4 0908 	sub.w	r9, r4, #8
   194f4:	6828      	ldr	r0, [r5, #0]
   194f6:	2208      	movs	r2, #8
   194f8:	4649      	mov	r1, r9
   194fa:	f7fd fe9a 	bl	17232 <memcmp>
   194fe:	b9a0      	cbnz	r0, 1952a <subnet_by_id+0x52>
	bt_mesh_beacon_auth(keys->beacon, params->flags, keys->net_id,
   19500:	7b29      	ldrb	r1, [r5, #12]
   19502:	68ab      	ldr	r3, [r5, #8]
   19504:	f8cd 8000 	str.w	r8, [sp]
   19508:	464a      	mov	r2, r9
   1950a:	4620      	mov	r0, r4
   1950c:	f000 fc55 	bl	19dba <bt_mesh_beacon_auth>
	if (memcmp(params->auth, net_auth, 8)) {
   19510:	6868      	ldr	r0, [r5, #4]
   19512:	2208      	movs	r2, #8
   19514:	4641      	mov	r1, r8
   19516:	f7fd fe8c 	bl	17232 <memcmp>
   1951a:	b930      	cbnz	r0, 1952a <subnet_by_id+0x52>
			params->new_key = (i > 0);
   1951c:	736f      	strb	r7, [r5, #13]
}
   1951e:	4630      	mov	r0, r6
   19520:	b005      	add	sp, #20
   19522:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   19526:	2701      	movs	r7, #1
   19528:	e7df      	b.n	194ea <subnet_by_id+0x12>
	for (int i = 0; i < ARRAY_SIZE(sub->keys); i++) {
   1952a:	344a      	adds	r4, #74	; 0x4a
   1952c:	2f00      	cmp	r7, #0
   1952e:	d0fa      	beq.n	19526 <subnet_by_id+0x4e>
	return false;
   19530:	2600      	movs	r6, #0
   19532:	e7f4      	b.n	1951e <subnet_by_id+0x46>

00019534 <beacon_complete>:
{
   19534:	b510      	push	{r4, lr}
   19536:	460c      	mov	r4, r1
	return z_impl_k_uptime_ticks();
   19538:	f005 fa89 	bl	1ea4e <z_impl_k_uptime_ticks>
   1953c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   19540:	fba0 0302 	umull	r0, r3, r0, r2
   19544:	fb02 3301 	mla	r3, r2, r1, r3
   19548:	0bc0      	lsrs	r0, r0, #15
   1954a:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return (uint32_t)k_uptime_get();
   1954e:	6020      	str	r0, [r4, #0]
}
   19550:	bd10      	pop	{r4, pc}

00019552 <subnet_evt>:
	if (evt != BT_MESH_KEY_DELETED) {
   19552:	2901      	cmp	r1, #1
   19554:	d001      	beq.n	1955a <subnet_evt+0x8>
		bt_mesh_beacon_update(sub);
   19556:	f7ee bdab 	b.w	80b0 <bt_mesh_beacon_update>
}
   1955a:	4770      	bx	lr

0001955c <subnet_beacon_enable>:
	sub->beacons_last = 0U;
   1955c:	2200      	movs	r2, #0
   1955e:	8082      	strh	r2, [r0, #4]
	bt_mesh_beacon_update(sub);
   19560:	f7ee bda6 	b.w	80b0 <bt_mesh_beacon_update>

00019564 <sys_get_be24>:
	return ((uint32_t)src[0] << 16) | sys_get_be16(&src[1]);
   19564:	f8b0 3001 	ldrh.w	r3, [r0, #1]
   19568:	7802      	ldrb	r2, [r0, #0]
   1956a:	ba5b      	rev16	r3, r3
   1956c:	b29b      	uxth	r3, r3
}
   1956e:	ea43 4002 	orr.w	r0, r3, r2, lsl #16
   19572:	4770      	bx	lr

00019574 <net_encrypt>:
{
   19574:	b570      	push	{r4, r5, r6, lr}
   19576:	460d      	mov	r5, r1
   19578:	4604      	mov	r4, r0
	err = bt_mesh_net_encrypt(cred->enc, buf, iv_index, proxy);
   1957a:	4601      	mov	r1, r0
   1957c:	1c68      	adds	r0, r5, #1
{
   1957e:	4616      	mov	r6, r2
	err = bt_mesh_net_encrypt(cred->enc, buf, iv_index, proxy);
   19580:	f000 fb51 	bl	19c26 <bt_mesh_net_encrypt>
	if (err) {
   19584:	b938      	cbnz	r0, 19596 <net_encrypt+0x22>
	return bt_mesh_net_obfuscate(buf->data, iv_index, cred->privacy);
   19586:	6820      	ldr	r0, [r4, #0]
   19588:	f105 0211 	add.w	r2, r5, #17
   1958c:	4631      	mov	r1, r6
}
   1958e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_mesh_net_obfuscate(buf->data, iv_index, cred->privacy);
   19592:	f7f0 bee5 	b.w	a360 <bt_mesh_net_obfuscate>
}
   19596:	bd70      	pop	{r4, r5, r6, pc}

00019598 <key_refresh>:
{
   19598:	b538      	push	{r3, r4, r5, lr}
   1959a:	4604      	mov	r4, r0
	switch (new_phase) {
   1959c:	2903      	cmp	r1, #3
   1959e:	d81e      	bhi.n	195de <key_refresh+0x46>
   195a0:	e8df f001 	tbb	[pc, r1]
   195a4:	0e0a0210 	.word	0x0e0a0210
		sub->kr_phase = new_phase;
   195a8:	2301      	movs	r3, #1
   195aa:	7783      	strb	r3, [r0, #30]
		subnet_evt(sub, BT_MESH_KEY_UPDATED);
   195ac:	2102      	movs	r1, #2
		subnet_evt(sub, BT_MESH_KEY_REVOKED);
   195ae:	4620      	mov	r0, r4
}
   195b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		subnet_evt(sub, BT_MESH_KEY_REVOKED);
   195b4:	f7ef babc 	b.w	8b30 <subnet_evt>
		sub->kr_phase = new_phase;
   195b8:	2302      	movs	r3, #2
   195ba:	7783      	strb	r3, [r0, #30]
		subnet_evt(sub, BT_MESH_KEY_SWAPPED);
   195bc:	2103      	movs	r1, #3
   195be:	e7f6      	b.n	195ae <key_refresh+0x16>
		if (sub->kr_phase == BT_MESH_KR_NORMAL) {
   195c0:	7f83      	ldrb	r3, [r0, #30]
   195c2:	b163      	cbz	r3, 195de <key_refresh+0x46>
		sub->kr_phase = BT_MESH_KR_NORMAL;
   195c4:	2500      	movs	r5, #0
		memcpy(&sub->keys[0], &sub->keys[1], sizeof(sub->keys[0]));
   195c6:	f104 0176 	add.w	r1, r4, #118	; 0x76
		sub->kr_phase = BT_MESH_KR_NORMAL;
   195ca:	77a5      	strb	r5, [r4, #30]
		memcpy(&sub->keys[0], &sub->keys[1], sizeof(sub->keys[0]));
   195cc:	224a      	movs	r2, #74	; 0x4a
   195ce:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   195d2:	f7fd fe3f 	bl	17254 <memcpy>
		sub->keys[1].valid = 0U;
   195d6:	f884 5076 	strb.w	r5, [r4, #118]	; 0x76
		subnet_evt(sub, BT_MESH_KEY_REVOKED);
   195da:	2104      	movs	r1, #4
   195dc:	e7e7      	b.n	195ae <key_refresh+0x16>
}
   195de:	bd38      	pop	{r3, r4, r5, pc}

000195e0 <subnet_del>:
{
   195e0:	b510      	push	{r4, lr}
   195e2:	4604      	mov	r4, r0
	bt_mesh_net_loopback_clear(sub->net_idx);
   195e4:	8b80      	ldrh	r0, [r0, #28]
   195e6:	f7ef f8ed 	bl	87c4 <bt_mesh_net_loopback_clear>
	subnet_evt(sub, BT_MESH_KEY_DELETED);
   195ea:	2101      	movs	r1, #1
   195ec:	4620      	mov	r0, r4
   195ee:	f7ef fa9f 	bl	8b30 <subnet_evt>
	(void)memset(sub, 0, sizeof(*sub));
   195f2:	22c0      	movs	r2, #192	; 0xc0
   195f4:	2100      	movs	r1, #0
   195f6:	4620      	mov	r0, r4
   195f8:	f7fd fe37 	bl	1726a <memset>
	sub->net_idx = BT_MESH_KEY_UNUSED;
   195fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   19600:	83a3      	strh	r3, [r4, #28]
}
   19602:	bd10      	pop	{r4, pc}

00019604 <bt_mesh_kr_update>:
	if (!new_key) {
   19604:	b16a      	cbz	r2, 19622 <bt_mesh_kr_update+0x1e>
	if (sub->kr_phase == BT_MESH_KR_PHASE_1) {
   19606:	7f83      	ldrb	r3, [r0, #30]
   19608:	2b01      	cmp	r3, #1
   1960a:	d105      	bne.n	19618 <bt_mesh_kr_update+0x14>
		key_refresh(sub, (kr_flag ? BT_MESH_KR_PHASE_2 :
   1960c:	2900      	cmp	r1, #0
   1960e:	bf14      	ite	ne
   19610:	2102      	movne	r1, #2
   19612:	2103      	moveq	r1, #3
		key_refresh(sub, BT_MESH_KR_PHASE_3);
   19614:	f7ff bfc0 	b.w	19598 <key_refresh>
	} else if (sub->kr_phase == BT_MESH_KR_PHASE_2 && !kr_flag) {
   19618:	2b02      	cmp	r3, #2
   1961a:	d102      	bne.n	19622 <bt_mesh_kr_update+0x1e>
   1961c:	b909      	cbnz	r1, 19622 <bt_mesh_kr_update+0x1e>
		key_refresh(sub, BT_MESH_KR_PHASE_3);
   1961e:	2103      	movs	r1, #3
   19620:	e7f8      	b.n	19614 <bt_mesh_kr_update+0x10>
}
   19622:	4770      	bx	lr

00019624 <bt_mesh_subnet_exists>:
{
   19624:	b508      	push	{r3, lr}
	return !!bt_mesh_subnet_get(net_idx);
   19626:	f7ef fb1d 	bl	8c64 <bt_mesh_subnet_get>
}
   1962a:	3800      	subs	r0, #0
   1962c:	bf18      	it	ne
   1962e:	2001      	movne	r0, #1
   19630:	bd08      	pop	{r3, pc}

00019632 <bt_mesh_subnet_update>:
{
   19632:	b538      	push	{r3, r4, r5, lr}
	sub = bt_mesh_subnet_get(net_idx);
   19634:	f7ef fb16 	bl	8c64 <bt_mesh_subnet_get>
{
   19638:	460c      	mov	r4, r1
	if (!sub) {
   1963a:	4605      	mov	r5, r0
   1963c:	b340      	cbz	r0, 19690 <bt_mesh_subnet_update+0x5e>
	switch (sub->kr_phase) {
   1963e:	7f83      	ldrb	r3, [r0, #30]
   19640:	2b01      	cmp	r3, #1
   19642:	d00e      	beq.n	19662 <bt_mesh_subnet_update+0x30>
   19644:	d904      	bls.n	19650 <bt_mesh_subnet_update+0x1e>
   19646:	3b02      	subs	r3, #2
   19648:	2b01      	cmp	r3, #1
   1964a:	d813      	bhi.n	19674 <bt_mesh_subnet_update+0x42>
		return STATUS_CANNOT_UPDATE;
   1964c:	200b      	movs	r0, #11
   1964e:	e010      	b.n	19672 <bt_mesh_subnet_update+0x40>
		if (!memcmp(key, sub->keys[0].net, 16)) {
   19650:	f100 012d 	add.w	r1, r0, #45	; 0x2d
   19654:	2210      	movs	r2, #16
   19656:	4620      	mov	r0, r4
   19658:	f7fd fdeb 	bl	17232 <memcmp>
   1965c:	b950      	cbnz	r0, 19674 <bt_mesh_subnet_update+0x42>
			return STATUS_IDX_ALREADY_STORED;
   1965e:	2006      	movs	r0, #6
   19660:	e007      	b.n	19672 <bt_mesh_subnet_update+0x40>
		if (!memcmp(key, sub->keys[1].net, 16)) {
   19662:	f100 0177 	add.w	r1, r0, #119	; 0x77
   19666:	2210      	movs	r2, #16
   19668:	4620      	mov	r0, r4
   1966a:	f7fd fde2 	bl	17232 <memcmp>
   1966e:	2800      	cmp	r0, #0
   19670:	d1ec      	bne.n	1964c <bt_mesh_subnet_update+0x1a>
}
   19672:	bd38      	pop	{r3, r4, r5, pc}
	err = net_keys_create(&sub->keys[1], key);
   19674:	4621      	mov	r1, r4
   19676:	f105 0076 	add.w	r0, r5, #118	; 0x76
   1967a:	f7ef fa6b 	bl	8b54 <net_keys_create>
	if (err) {
   1967e:	4604      	mov	r4, r0
   19680:	2800      	cmp	r0, #0
   19682:	d1e3      	bne.n	1964c <bt_mesh_subnet_update+0x1a>
	key_refresh(sub, BT_MESH_KR_PHASE_1);
   19684:	4628      	mov	r0, r5
   19686:	2101      	movs	r1, #1
   19688:	f7ff ff86 	bl	19598 <key_refresh>
	return STATUS_SUCCESS;
   1968c:	4620      	mov	r0, r4
   1968e:	e7f0      	b.n	19672 <bt_mesh_subnet_update+0x40>
		return STATUS_INVALID_NETKEY;
   19690:	2004      	movs	r0, #4
   19692:	e7ee      	b.n	19672 <bt_mesh_subnet_update+0x40>

00019694 <bt_mesh_subnet_del>:
{
   19694:	b508      	push	{r3, lr}
	sub = bt_mesh_subnet_get(net_idx);
   19696:	f7ef fae5 	bl	8c64 <bt_mesh_subnet_get>
	if (!sub) {
   1969a:	b118      	cbz	r0, 196a4 <bt_mesh_subnet_del+0x10>
	subnet_del(sub);
   1969c:	f7ff ffa0 	bl	195e0 <subnet_del>
	return STATUS_SUCCESS;
   196a0:	2000      	movs	r0, #0
}
   196a2:	bd08      	pop	{r3, pc}
		return STATUS_INVALID_NETKEY;
   196a4:	2004      	movs	r0, #4
   196a6:	e7fc      	b.n	196a2 <bt_mesh_subnet_del+0xe>

000196a8 <bt_mesh_subnet_kr_phase_get>:
{
   196a8:	b508      	push	{r3, lr}
	sub = bt_mesh_subnet_get(net_idx);
   196aa:	f7ef fadb 	bl	8c64 <bt_mesh_subnet_get>
	if (!sub) {
   196ae:	b118      	cbz	r0, 196b8 <bt_mesh_subnet_kr_phase_get+0x10>
	*phase = sub->kr_phase;
   196b0:	7f83      	ldrb	r3, [r0, #30]
	return STATUS_SUCCESS;
   196b2:	2000      	movs	r0, #0
   196b4:	700b      	strb	r3, [r1, #0]
}
   196b6:	bd08      	pop	{r3, pc}
		*phase = BT_MESH_KR_NORMAL;
   196b8:	4603      	mov	r3, r0
		return STATUS_INVALID_NETKEY;
   196ba:	2004      	movs	r0, #4
   196bc:	e7fa      	b.n	196b4 <bt_mesh_subnet_kr_phase_get+0xc>

000196be <bt_mesh_subnet_node_id_set>:
	if (node_id == BT_MESH_FEATURE_NOT_SUPPORTED) {
   196be:	2902      	cmp	r1, #2
{
   196c0:	b508      	push	{r3, lr}
	if (node_id == BT_MESH_FEATURE_NOT_SUPPORTED) {
   196c2:	d006      	beq.n	196d2 <bt_mesh_subnet_node_id_set+0x14>
	sub = bt_mesh_subnet_get(net_idx);
   196c4:	f7ef face 	bl	8c64 <bt_mesh_subnet_get>
		return STATUS_FEAT_NOT_SUPP;
   196c8:	2800      	cmp	r0, #0
   196ca:	bf0c      	ite	eq
   196cc:	2004      	moveq	r0, #4
   196ce:	200a      	movne	r0, #10
}
   196d0:	bd08      	pop	{r3, pc}
		return STATUS_CANNOT_SET;
   196d2:	200f      	movs	r0, #15
   196d4:	e7fc      	b.n	196d0 <bt_mesh_subnet_node_id_set+0x12>

000196d6 <bt_mesh_subnet_node_id_get>:
{
   196d6:	b508      	push	{r3, lr}
	sub = bt_mesh_subnet_get(net_idx);
   196d8:	f7ef fac4 	bl	8c64 <bt_mesh_subnet_get>
	if (!sub) {
   196dc:	b118      	cbz	r0, 196e6 <bt_mesh_subnet_node_id_get+0x10>
	*node_id = sub->node_id;
   196de:	7fc3      	ldrb	r3, [r0, #31]
	return STATUS_SUCCESS;
   196e0:	2000      	movs	r0, #0
   196e2:	700b      	strb	r3, [r1, #0]
}
   196e4:	bd08      	pop	{r3, pc}
		*node_id = 0x00;
   196e6:	4603      	mov	r3, r0
		return STATUS_INVALID_NETKEY;
   196e8:	2004      	movs	r0, #4
   196ea:	e7fa      	b.n	196e2 <bt_mesh_subnet_node_id_get+0xc>

000196ec <app_key_del>:
{
   196ec:	b510      	push	{r4, lr}
	app_key_evt(app, BT_MESH_KEY_DELETED);
   196ee:	2101      	movs	r1, #1
{
   196f0:	4604      	mov	r4, r0
	app_key_evt(app, BT_MESH_KEY_DELETED);
   196f2:	f7ef fb7d 	bl	8df0 <app_key_evt>
	app->net_idx = BT_MESH_KEY_UNUSED;
   196f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   196fa:	8023      	strh	r3, [r4, #0]
	app->app_idx = BT_MESH_KEY_UNUSED;
   196fc:	8063      	strh	r3, [r4, #2]
	(void)memset(app->keys, 0, sizeof(app->keys));
   196fe:	1d60      	adds	r0, r4, #5
   19700:	2222      	movs	r2, #34	; 0x22
}
   19702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)memset(app->keys, 0, sizeof(app->keys));
   19706:	2100      	movs	r1, #0
   19708:	f7fd bdaf 	b.w	1726a <memset>

0001970c <seg_rx_assemble>:
{
   1970c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf->data = buf->__buf;
   19710:	688b      	ldr	r3, [r1, #8]
   19712:	600b      	str	r3, [r1, #0]
	buf->len  = 0U;
   19714:	2500      	movs	r5, #0
   19716:	4606      	mov	r6, r0
   19718:	460c      	mov	r4, r1
   1971a:	4617      	mov	r7, r2
   1971c:	808d      	strh	r5, [r1, #4]
	for (i = 0; i <= rx->seg_n; i++) {
   1971e:	f100 0804 	add.w	r8, r0, #4
				       MIN(seg_len(rx->ctl),
   19722:	7ff3      	ldrb	r3, [r6, #31]
		net_buf_simple_add_mem(buf, rx->seg[i],
   19724:	f858 1b04 	ldr.w	r1, [r8], #4
		return BT_MESH_APP_SEG_SDU_MAX;
   19728:	f013 0f20 	tst.w	r3, #32
				       MIN(seg_len(rx->ctl),
   1972c:	8bb3      	ldrh	r3, [r6, #28]
		return BT_MESH_APP_SEG_SDU_MAX;
   1972e:	bf14      	ite	ne
   19730:	2208      	movne	r2, #8
   19732:	220c      	moveq	r2, #12
				       MIN(seg_len(rx->ctl),
   19734:	fb05 3312 	mls	r3, r5, r2, r3
		net_buf_simple_add_mem(buf, rx->seg[i],
   19738:	429a      	cmp	r2, r3
   1973a:	bfa8      	it	ge
   1973c:	461a      	movge	r2, r3
   1973e:	4620      	mov	r0, r4
   19740:	f003 fc49 	bl	1cfd6 <net_buf_simple_add_mem>
	for (i = 0; i <= rx->seg_n; i++) {
   19744:	7ff3      	ldrb	r3, [r6, #31]
   19746:	3501      	adds	r5, #1
   19748:	461a      	mov	r2, r3
   1974a:	f003 031f 	and.w	r3, r3, #31
   1974e:	42ab      	cmp	r3, r5
   19750:	dae7      	bge.n	19722 <seg_rx_assemble+0x16>
	if (!rx->ctl) {
   19752:	0693      	lsls	r3, r2, #26
   19754:	d406      	bmi.n	19764 <seg_rx_assemble+0x58>
		buf->len -= APP_MIC_LEN(aszmic);
   19756:	88a3      	ldrh	r3, [r4, #4]
   19758:	2f00      	cmp	r7, #0
   1975a:	bf14      	ite	ne
   1975c:	2208      	movne	r2, #8
   1975e:	2204      	moveq	r2, #4
   19760:	1a9b      	subs	r3, r3, r2
   19762:	80a3      	strh	r3, [r4, #4]
}
   19764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00019768 <ack_timeout>:
{
   19768:	b538      	push	{r3, r4, r5, lr}
	if (rx->ttl == BT_MESH_TTL_DEFAULT) {
   1976a:	f890 4020 	ldrb.w	r4, [r0, #32]
   1976e:	2cff      	cmp	r4, #255	; 0xff
{
   19770:	4605      	mov	r5, r0
	if (rx->ttl == BT_MESH_TTL_DEFAULT) {
   19772:	d102      	bne.n	1977a <ack_timeout+0x12>
		ttl = bt_mesh_default_ttl_get();
   19774:	f7ee fb0e 	bl	7d94 <bt_mesh_default_ttl_get>
   19778:	4604      	mov	r4, r0
	to += ((rx->seg_n + 1) - popcount(rx->block)) * 100U;
   1977a:	6a68      	ldr	r0, [r5, #36]	; 0x24
   1977c:	f7e7 f938 	bl	9f0 <__popcountsi2>
   19780:	7feb      	ldrb	r3, [r5, #31]
   19782:	f003 031f 	and.w	r3, r3, #31
   19786:	1a18      	subs	r0, r3, r0
   19788:	2364      	movs	r3, #100	; 0x64
   1978a:	fb00 3303 	mla	r3, r0, r3, r3
	to = 150 + (ttl * 50U);
   1978e:	2296      	movs	r2, #150	; 0x96
   19790:	2032      	movs	r0, #50	; 0x32
   19792:	fb10 2004 	smlabb	r0, r0, r4, r2
	to += ((rx->seg_n + 1) - popcount(rx->block)) * 100U;
   19796:	4418      	add	r0, r3
}
   19798:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
   1979c:	bfb8      	it	lt
   1979e:	f44f 70c8 	movlt.w	r0, #400	; 0x190
   197a2:	bd38      	pop	{r3, r4, r5, pc}

000197a4 <sdu_try_decrypt>:
	if (ctx->seg) {
   197a4:	69d0      	ldr	r0, [r2, #28]
{
   197a6:	b570      	push	{r4, r5, r6, lr}
   197a8:	460d      	mov	r5, r1
   197aa:	4614      	mov	r4, r2
	if (ctx->seg) {
   197ac:	b118      	cbz	r0, 197b6 <sdu_try_decrypt+0x12>
		seg_rx_assemble(ctx->seg, ctx->buf, ctx->crypto.aszmic);
   197ae:	7852      	ldrb	r2, [r2, #1]
   197b0:	6961      	ldr	r1, [r4, #20]
   197b2:	f7ff ffab 	bl	1970c <seg_rx_assemble>
	net_buf_simple_reset(ctx->sdu);
   197b6:	69a3      	ldr	r3, [r4, #24]
   197b8:	2200      	movs	r2, #0
   197ba:	809a      	strh	r2, [r3, #4]
	buf->data = buf->__buf;
   197bc:	689a      	ldr	r2, [r3, #8]
   197be:	601a      	str	r2, [r3, #0]
	return bt_mesh_app_decrypt(key, &ctx->crypto, ctx->buf, ctx->sdu);
   197c0:	4621      	mov	r1, r4
   197c2:	6962      	ldr	r2, [r4, #20]
   197c4:	4628      	mov	r0, r5
}
   197c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_mesh_app_decrypt(key, &ctx->crypto, ctx->buf, ctx->sdu);
   197ca:	f000 bacf 	b.w	19d6c <bt_mesh_app_decrypt>

000197ce <schedule_retransmit>:
{
   197ce:	b510      	push	{r4, lr}
	if (!tx->nack_count) {
   197d0:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   197d4:	b38b      	cbz	r3, 1983a <schedule_retransmit+0x6c>
	if (--tx->seg_pending || tx->sending) {
   197d6:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
   197da:	3b01      	subs	r3, #1
   197dc:	b2db      	uxtb	r3, r3
   197de:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
   197e2:	bb53      	cbnz	r3, 1983a <schedule_retransmit+0x6c>
   197e4:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
   197e8:	06db      	lsls	r3, r3, #27
   197ea:	d426      	bmi.n	1983a <schedule_retransmit+0x6c>
	k_work_reschedule(&tx->retransmit,
   197ec:	f890 1021 	ldrb.w	r1, [r0, #33]	; 0x21
   197f0:	f100 0430 	add.w	r4, r0, #48	; 0x30
   197f4:	b131      	cbz	r1, 19804 <schedule_retransmit+0x36>
   197f6:	2200      	movs	r2, #0
   197f8:	4613      	mov	r3, r2
   197fa:	4620      	mov	r0, r4
}
   197fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_reschedule(&tx->retransmit,
   19800:	f7fc b962 	b.w	15ac8 <k_work_reschedule>
			  K_MSEC(SEG_RETRANSMIT_TIMEOUT(tx)));
   19804:	f9b0 301a 	ldrsh.w	r3, [r0, #26]
   19808:	2b00      	cmp	r3, #0
   1980a:	bfc8      	it	gt
   1980c:	f890 2024 	ldrbgt.w	r2, [r0, #36]	; 0x24
   19810:	f04f 0332 	mov.w	r3, #50	; 0x32
   19814:	bfc5      	ittet	gt
   19816:	f44f 70c8 	movgt.w	r0, #400	; 0x190
   1981a:	fb03 0002 	mlagt	r0, r3, r2, r0
   1981e:	4618      	movle	r0, r3
   19820:	2100      	movgt	r1, #0
   19822:	03c0      	lsls	r0, r0, #15
   19824:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   19828:	2300      	movs	r3, #0
   1982a:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   1982e:	03c9      	lsls	r1, r1, #15
   19830:	f7e7 f8c4 	bl	9bc <__aeabi_uldivmod>
   19834:	4602      	mov	r2, r0
   19836:	460b      	mov	r3, r1
   19838:	e7df      	b.n	197fa <schedule_retransmit+0x2c>
}
   1983a:	bd10      	pop	{r4, pc}

0001983c <seg_sent>:
	schedule_retransmit(tx);
   1983c:	4608      	mov	r0, r1
   1983e:	f7ff bfc6 	b.w	197ce <schedule_retransmit>

00019842 <seg_send_start>:
{
   19842:	b538      	push	{r3, r4, r5, lr}
	if (!tx->started && tx->cb && tx->cb->start) {
   19844:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
   19848:	071b      	lsls	r3, r3, #28
{
   1984a:	460d      	mov	r5, r1
   1984c:	4614      	mov	r4, r2
	if (!tx->started && tx->cb && tx->cb->start) {
   1984e:	d40b      	bmi.n	19868 <seg_send_start+0x26>
   19850:	6a93      	ldr	r3, [r2, #40]	; 0x28
   19852:	b14b      	cbz	r3, 19868 <seg_send_start+0x26>
   19854:	681b      	ldr	r3, [r3, #0]
   19856:	b13b      	cbz	r3, 19868 <seg_send_start+0x26>
		tx->cb->start(duration, err, tx->cb_data);
   19858:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   1985a:	4798      	blx	r3
		tx->started = 1U;
   1985c:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   19860:	f043 0308 	orr.w	r3, r3, #8
   19864:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	if (err) {
   19868:	b125      	cbz	r5, 19874 <seg_send_start+0x32>
		schedule_retransmit(tx);
   1986a:	4620      	mov	r0, r4
}
   1986c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		schedule_retransmit(tx);
   19870:	f7ff bfad 	b.w	197ce <schedule_retransmit>
}
   19874:	bd38      	pop	{r3, r4, r5, pc}

00019876 <seg_retransmit>:
	seg_tx_send_unacked(tx);
   19876:	3830      	subs	r0, #48	; 0x30
   19878:	f7ef bd40 	b.w	92fc <seg_tx_send_unacked>

0001987c <send_unseg>:
{
   1987c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   19880:	4690      	mov	r8, r2
   19882:	4699      	mov	r9, r3
				 tx->xmit, BUF_TIMEOUT);
   19884:	2200      	movs	r2, #0
   19886:	2300      	movs	r3, #0
	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA, BT_MESH_LOCAL_ADV,
   19888:	e9cd 2300 	strd	r2, r3, [sp]
{
   1988c:	460f      	mov	r7, r1
	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA, BT_MESH_LOCAL_ADV,
   1988e:	2101      	movs	r1, #1
   19890:	7a82      	ldrb	r2, [r0, #10]
{
   19892:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   19896:	4604      	mov	r4, r0
	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA, BT_MESH_LOCAL_ADV,
   19898:	4608      	mov	r0, r1
   1989a:	f7ee fb01 	bl	7ea0 <bt_mesh_adv_create>
	if (!buf) {
   1989e:	4605      	mov	r5, r0
   198a0:	b348      	cbz	r0, 198f6 <send_unseg+0x7a>
	net_buf_simple_reserve(&buf->b, reserve);
   198a2:	f100 0608 	add.w	r6, r0, #8
   198a6:	2109      	movs	r1, #9
   198a8:	4630      	mov	r0, r6
   198aa:	f003 fb4b 	bl	1cf44 <net_buf_simple_reserve>
	if (ctl_op) {
   198ae:	f1ba 0f00 	cmp.w	sl, #0
   198b2:	d014      	beq.n	198de <send_unseg+0x62>
		net_buf_add_u8(buf, TRANS_CTL_HDR(*ctl_op, 0));
   198b4:	f89a 1000 	ldrb.w	r1, [sl]
	return net_buf_simple_add_u8(&buf->b, val);
   198b8:	f001 017f 	and.w	r1, r1, #127	; 0x7f
   198bc:	4630      	mov	r0, r6
   198be:	f003 fb93 	bl	1cfe8 <net_buf_simple_add_u8>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   198c2:	88ba      	ldrh	r2, [r7, #4]
   198c4:	6839      	ldr	r1, [r7, #0]
   198c6:	4630      	mov	r0, r6
   198c8:	f003 fb85 	bl	1cfd6 <net_buf_simple_add_mem>
	return bt_mesh_net_send(tx, buf, cb, cb_data);
   198cc:	464b      	mov	r3, r9
   198ce:	4642      	mov	r2, r8
   198d0:	4629      	mov	r1, r5
   198d2:	4620      	mov	r0, r4
}
   198d4:	b002      	add	sp, #8
   198d6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_mesh_net_send(tx, buf, cb, cb_data);
   198da:	f7ee bed9 	b.w	8690 <bt_mesh_net_send>
	} else if (BT_MESH_IS_DEV_KEY(tx->ctx->app_idx)) {
   198de:	6863      	ldr	r3, [r4, #4]
   198e0:	8858      	ldrh	r0, [r3, #2]
   198e2:	3003      	adds	r0, #3
   198e4:	b280      	uxth	r0, r0
   198e6:	2801      	cmp	r0, #1
		net_buf_add_u8(buf, UNSEG_HDR(1, tx->aid));
   198e8:	bf85      	ittet	hi
   198ea:	7ae1      	ldrbhi	r1, [r4, #11]
   198ec:	0889      	lsrhi	r1, r1, #2
	return net_buf_simple_add_u8(&buf->b, val);
   198ee:	4651      	movls	r1, sl
   198f0:	f041 0140 	orrhi.w	r1, r1, #64	; 0x40
   198f4:	e7e2      	b.n	198bc <send_unseg+0x40>
}
   198f6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   198fa:	b002      	add	sp, #8
   198fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00019900 <bt_mesh_ctl_send>:
{
   19900:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
   19904:	f8d0 9004 	ldr.w	r9, [r0, #4]
{
   19908:	461d      	mov	r5, r3
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
   1990a:	f899 300b 	ldrb.w	r3, [r9, #11]
{
   1990e:	b089      	sub	sp, #36	; 0x24
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
   19910:	2bff      	cmp	r3, #255	; 0xff
{
   19912:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   19916:	4604      	mov	r4, r0
   19918:	4616      	mov	r6, r2
   1991a:	f88d 100f 	strb.w	r1, [sp, #15]
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
   1991e:	d123      	bne.n	19968 <bt_mesh_ctl_send+0x68>
		tx->ctx->send_ttl = bt_mesh_default_ttl_get();
   19920:	f7ee fa38 	bl	7d94 <bt_mesh_default_ttl_get>
   19924:	f889 000b 	strb.w	r0, [r9, #11]
	net_buf_simple_init_with_data(&buf, data, data_len);
   19928:	462a      	mov	r2, r5
   1992a:	4631      	mov	r1, r6
   1992c:	a805      	add	r0, sp, #20
   1992e:	f003 fb03 	bl	1cf38 <net_buf_simple_init_with_data>
	if (data_len > BT_MESH_SDU_UNSEG_MAX) {
   19932:	6863      	ldr	r3, [r4, #4]
   19934:	2d0b      	cmp	r5, #11
		tx->ctx->send_rel = true;
   19936:	bf84      	itt	hi
   19938:	2201      	movhi	r2, #1
   1993a:	729a      	strbhi	r2, [r3, #10]
	tx->ctx->app_idx = BT_MESH_KEY_UNUSED;
   1993c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   19940:	805a      	strh	r2, [r3, #2]
	if (tx->ctx->addr == BT_MESH_ADDR_UNASSIGNED ||
   19942:	889a      	ldrh	r2, [r3, #4]
   19944:	b192      	cbz	r2, 1996c <bt_mesh_ctl_send+0x6c>
   19946:	f482 4200 	eor.w	r2, r2, #32768	; 0x8000
   1994a:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
   1994e:	d30d      	bcc.n	1996c <bt_mesh_ctl_send+0x6c>
	if (tx->ctx->send_rel) {
   19950:	7a9a      	ldrb	r2, [r3, #10]
   19952:	f10d 030f 	add.w	r3, sp, #15
		return send_seg(tx, &buf, cb, cb_data, &ctl_op);
   19956:	9300      	str	r3, [sp, #0]
   19958:	4643      	mov	r3, r8
	if (tx->ctx->send_rel) {
   1995a:	b162      	cbz	r2, 19976 <bt_mesh_ctl_send+0x76>
		return send_seg(tx, &buf, cb, cb_data, &ctl_op);
   1995c:	463a      	mov	r2, r7
   1995e:	a905      	add	r1, sp, #20
   19960:	4620      	mov	r0, r4
   19962:	f7ef fe45 	bl	95f0 <send_seg>
   19966:	e003      	b.n	19970 <bt_mesh_ctl_send+0x70>
	} else if (tx->ctx->send_ttl > BT_MESH_TTL_MAX) {
   19968:	061b      	lsls	r3, r3, #24
   1996a:	d5dd      	bpl.n	19928 <bt_mesh_ctl_send+0x28>
		return -EINVAL;
   1996c:	f06f 0015 	mvn.w	r0, #21
}
   19970:	b009      	add	sp, #36	; 0x24
   19972:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return send_unseg(tx, &buf, cb, cb_data, &ctl_op);
   19976:	463a      	mov	r2, r7
   19978:	a905      	add	r1, sp, #20
   1997a:	4620      	mov	r0, r4
   1997c:	f7ff ff7e 	bl	1987c <send_unseg>
   19980:	e7f6      	b.n	19970 <bt_mesh_ctl_send+0x70>

00019982 <send_ack.isra.0>:
static int send_ack(struct bt_mesh_subnet *sub, uint16_t src, uint16_t dst,
   19982:	b5f0      	push	{r4, r5, r6, r7, lr}
   19984:	b08b      	sub	sp, #44	; 0x2c
	struct bt_mesh_msg_ctx ctx = {
   19986:	8b87      	ldrh	r7, [r0, #28]
static int send_ack(struct bt_mesh_subnet *sub, uint16_t src, uint16_t dst,
   19988:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
	struct bt_mesh_msg_ctx ctx = {
   1998c:	f8ad 7010 	strh.w	r7, [sp, #16]
static int send_ack(struct bt_mesh_subnet *sub, uint16_t src, uint16_t dst,
   19990:	460d      	mov	r5, r1
	struct bt_mesh_msg_ctx ctx = {
   19992:	f64f 77ff 	movw	r7, #65535	; 0xffff
   19996:	2100      	movs	r1, #0
   19998:	f88d 301b 	strb.w	r3, [sp, #27]
	struct bt_mesh_net_tx tx = {
   1999c:	ab04      	add	r3, sp, #16
static int send_ack(struct bt_mesh_subnet *sub, uint16_t src, uint16_t dst,
   1999e:	9e11      	ldr	r6, [sp, #68]	; 0x44
	struct bt_mesh_msg_ctx ctx = {
   199a0:	f8cd 1016 	str.w	r1, [sp, #22]
   199a4:	f88d 101a 	strb.w	r1, [sp, #26]
   199a8:	f8ad 7012 	strh.w	r7, [sp, #18]
   199ac:	f8ad 2014 	strh.w	r2, [sp, #20]
	struct bt_mesh_net_tx tx = {
   199b0:	9109      	str	r1, [sp, #36]	; 0x24
   199b2:	9007      	str	r0, [sp, #28]
   199b4:	9308      	str	r3, [sp, #32]
   199b6:	b36c      	cbz	r4, 19a14 <send_ack.isra.0+0x92>
		.src = obo ? bt_mesh_primary_addr() : src,
   199b8:	f7f0 fe76 	bl	a6a8 <bt_mesh_primary_addr>
	struct bt_mesh_net_tx tx = {
   199bc:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
		.xmit = bt_mesh_net_transmit_get(),
   199c0:	f7ee f9f8 	bl	7db4 <bt_mesh_net_transmit_get>
	if (!BT_MESH_ADDR_IS_UNICAST(src)) {
   199c4:	b22d      	sxth	r5, r5
   199c6:	2d00      	cmp	r5, #0
	struct bt_mesh_net_tx tx = {
   199c8:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
	if (!BT_MESH_ADDR_IS_UNICAST(src)) {
   199cc:	dd20      	ble.n	19a10 <send_ack.isra.0+0x8e>
	uint16_t seq_zero = *seq_auth & TRANS_SEQ_ZERO_MASK;
   199ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
	dst[1] = val;
   199d0:	f88d 600d 	strb.w	r6, [sp, #13]
   199d4:	881b      	ldrh	r3, [r3, #0]
	sys_put_be16(((seq_zero << 2) & 0x7ffc) | (obo << 15), buf);
   199d6:	03e4      	lsls	r4, r4, #15
   199d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
   199dc:	ea44 0483 	orr.w	r4, r4, r3, lsl #2
	dst[0] = val >> 8;
   199e0:	f3c4 2307 	ubfx	r3, r4, #8, #8
   199e4:	f88d 3008 	strb.w	r3, [sp, #8]
	sys_put_be16(val >> 16, dst);
   199e8:	0c33      	lsrs	r3, r6, #16
	dst[0] = val >> 8;
   199ea:	0e32      	lsrs	r2, r6, #24
	dst[1] = val;
   199ec:	f88d 300b 	strb.w	r3, [sp, #11]
	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_ACK, buf, sizeof(buf),
   199f0:	2100      	movs	r1, #0
	dst[0] = val >> 8;
   199f2:	f3c6 2307 	ubfx	r3, r6, #8, #8
   199f6:	f88d 200a 	strb.w	r2, [sp, #10]
   199fa:	f88d 300c 	strb.w	r3, [sp, #12]
   199fe:	e9cd 1100 	strd	r1, r1, [sp]
   19a02:	2306      	movs	r3, #6
   19a04:	aa02      	add	r2, sp, #8
   19a06:	a807      	add	r0, sp, #28
	dst[1] = val;
   19a08:	f88d 4009 	strb.w	r4, [sp, #9]
   19a0c:	f7ff ff78 	bl	19900 <bt_mesh_ctl_send>
}
   19a10:	b00b      	add	sp, #44	; 0x2c
   19a12:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct bt_mesh_net_tx tx = {
   19a14:	4628      	mov	r0, r5
   19a16:	e7d1      	b.n	199bc <send_ack.isra.0+0x3a>

00019a18 <seg_ack>:
{
   19a18:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!rx->in_use || rx->block == BLOCK_COMPLETE(rx->seg_n)) {
   19a1a:	f810 3c11 	ldrb.w	r3, [r0, #-17]
   19a1e:	065a      	lsls	r2, r3, #25
{
   19a20:	b085      	sub	sp, #20
   19a22:	4604      	mov	r4, r0
	if (!rx->in_use || rx->block == BLOCK_COMPLETE(rx->seg_n)) {
   19a24:	d554      	bpl.n	19ad0 <seg_ack+0xb8>
   19a26:	f003 031f 	and.w	r3, r3, #31
   19a2a:	2201      	movs	r2, #1
   19a2c:	3301      	adds	r3, #1
   19a2e:	fa02 f303 	lsl.w	r3, r2, r3
   19a32:	f850 2c0c 	ldr.w	r2, [r0, #-12]
   19a36:	3b01      	subs	r3, #1
   19a38:	429a      	cmp	r2, r3
   19a3a:	d049      	beq.n	19ad0 <seg_ack+0xb8>
	struct seg_rx *rx = CONTAINER_OF(dwork, struct seg_rx, ack);
   19a3c:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
   19a40:	f005 f805 	bl	1ea4e <z_impl_k_uptime_ticks>
   19a44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   19a48:	fba0 0302 	umull	r0, r3, r0, r2
   19a4c:	fb02 3301 	mla	r3, r2, r1, r3
   19a50:	0bc0      	lsrs	r0, r0, #15
   19a52:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	if (k_uptime_get_32() - rx->last > (60 * MSEC_PER_SEC)) {
   19a56:	f854 3c08 	ldr.w	r3, [r4, #-8]
   19a5a:	1ac0      	subs	r0, r0, r3
   19a5c:	f64e 2360 	movw	r3, #60000	; 0xea60
   19a60:	4298      	cmp	r0, r3
   19a62:	f04f 0500 	mov.w	r5, #0
   19a66:	d906      	bls.n	19a76 <seg_ack+0x5e>
		seg_rx_reset(rx, false);
   19a68:	4629      	mov	r1, r5
   19a6a:	4630      	mov	r0, r6
}
   19a6c:	b005      	add	sp, #20
   19a6e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		seg_rx_reset(rx, false);
   19a72:	f7ef bb9d 	b.w	91b0 <seg_rx_reset>
		 rx->block, rx->obo);
   19a76:	f814 3c11 	ldrb.w	r3, [r4, #-17]
	send_ack(rx->sub, rx->dst, rx->src, rx->ttl, &rx->seq_auth,
   19a7a:	f834 2c18 	ldrh.w	r2, [r4, #-24]
   19a7e:	f834 1c16 	ldrh.w	r1, [r4, #-22]
   19a82:	f854 0c30 	ldr.w	r0, [r4, #-48]
   19a86:	09db      	lsrs	r3, r3, #7
   19a88:	9302      	str	r3, [sp, #8]
   19a8a:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   19a8e:	9301      	str	r3, [sp, #4]
   19a90:	f1a4 0320 	sub.w	r3, r4, #32
   19a94:	9300      	str	r3, [sp, #0]
   19a96:	f814 3c10 	ldrb.w	r3, [r4, #-16]
   19a9a:	f7ff ff72 	bl	19982 <send_ack.isra.0>
	timeout = ack_timeout(rx);
   19a9e:	4630      	mov	r0, r6
   19aa0:	f7ff fe62 	bl	19768 <ack_timeout>
   19aa4:	f44f 4700 	mov.w	r7, #32768	; 0x8000
	k_work_schedule(&rx->ack, K_MSEC(timeout));
   19aa8:	ea20 76e0 	bic.w	r6, r0, r0, asr #31
   19aac:	4629      	mov	r1, r5
   19aae:	f240 30e7 	movw	r0, #999	; 0x3e7
   19ab2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   19ab6:	2300      	movs	r3, #0
   19ab8:	fbc6 0107 	smlal	r0, r1, r6, r7
   19abc:	f7e6 ff7e 	bl	9bc <__aeabi_uldivmod>
   19ac0:	4602      	mov	r2, r0
   19ac2:	460b      	mov	r3, r1
   19ac4:	4620      	mov	r0, r4
}
   19ac6:	b005      	add	sp, #20
   19ac8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_work_schedule(&rx->ack, K_MSEC(timeout));
   19acc:	f7fb bfc8 	b.w	15a60 <k_work_schedule>
}
   19ad0:	b005      	add	sp, #20
   19ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}

00019ad4 <bt_mesh_va_add>:
	va_store(va);

	*addr = va->addr;

	return STATUS_SUCCESS;
}
   19ad4:	2005      	movs	r0, #5
   19ad6:	4770      	bx	lr

00019ad8 <bt_mesh_va_del>:
		*addr = va->addr;
	}

	va_store(va);
	return STATUS_SUCCESS;
}
   19ad8:	200c      	movs	r0, #12
   19ada:	4770      	bx	lr

00019adc <bt_mesh_va_label_get>:
	}

	BT_WARN("No matching Label UUID for 0x%04x", addr);

	return NULL;
}
   19adc:	2000      	movs	r0, #0
   19ade:	4770      	bx	lr

00019ae0 <bt_mesh_rpl_update>:
	if (rpl->old_iv && !rx->old_iv) {
   19ae0:	f990 3001 	ldrsb.w	r3, [r0, #1]
   19ae4:	2b00      	cmp	r3, #0
   19ae6:	da07      	bge.n	19af8 <bt_mesh_rpl_update+0x18>
   19ae8:	7d0b      	ldrb	r3, [r1, #20]
   19aea:	f013 0301 	ands.w	r3, r3, #1
		rpl->seg = 0;
   19aee:	bf02      	ittt	eq
   19af0:	6842      	ldreq	r2, [r0, #4]
   19af2:	f363 221f 	bfieq	r2, r3, #8, #24
   19af6:	6042      	streq	r2, [r0, #4]
	rpl->seq = rx->seq;
   19af8:	8a0a      	ldrh	r2, [r1, #16]
	rpl->src = rx->ctx.addr;
   19afa:	890b      	ldrh	r3, [r1, #8]
	rpl->seq = rx->seq;
   19afc:	8042      	strh	r2, [r0, #2]
   19afe:	7c8a      	ldrb	r2, [r1, #18]
   19b00:	7102      	strb	r2, [r0, #4]
	rpl->old_iv = rx->old_iv;
   19b02:	7d0a      	ldrb	r2, [r1, #20]
	rpl->src = rx->ctx.addr;
   19b04:	f3c3 030e 	ubfx	r3, r3, #0, #15
   19b08:	f002 0201 	and.w	r2, r2, #1
   19b0c:	ea43 33c2 	orr.w	r3, r3, r2, lsl #15
   19b10:	8003      	strh	r3, [r0, #0]
}
   19b12:	4770      	bx	lr

00019b14 <hb_publish_start_cb>:
{
   19b14:	4608      	mov	r0, r1
   19b16:	4611      	mov	r1, r2
	if (err) {
   19b18:	b108      	cbz	r0, 19b1e <hb_publish_start_cb+0xa>
		hb_publish_end_cb(err, cb_data);
   19b1a:	f7f0 b995 	b.w	9e48 <hb_publish_end_cb>
}
   19b1e:	4770      	bx	lr

00019b20 <sys_put_be32>:
	sys_put_be16(val >> 16, dst);
   19b20:	0c03      	lsrs	r3, r0, #16
	dst[0] = val >> 8;
   19b22:	0e02      	lsrs	r2, r0, #24
	dst[1] = val;
   19b24:	704b      	strb	r3, [r1, #1]
	dst[0] = val >> 8;
   19b26:	f3c0 2307 	ubfx	r3, r0, #8, #8
   19b2a:	700a      	strb	r2, [r1, #0]
   19b2c:	708b      	strb	r3, [r1, #2]
	dst[1] = val;
   19b2e:	70c8      	strb	r0, [r1, #3]
}
   19b30:	4770      	bx	lr

00019b32 <create_app_nonce>:
			      &buf->data[7], mic_len);
}

static void create_app_nonce(uint8_t nonce[13],
			     const struct bt_mesh_app_crypto_ctx *ctx)
{
   19b32:	b538      	push	{r3, r4, r5, lr}
	if (ctx->dev_key) {
   19b34:	780b      	ldrb	r3, [r1, #0]
{
   19b36:	460c      	mov	r4, r1
		nonce[0] = 0x02;
	} else {
		nonce[0] = 0x01;
   19b38:	2b00      	cmp	r3, #0
   19b3a:	4601      	mov	r1, r0
   19b3c:	bf14      	ite	ne
   19b3e:	2302      	movne	r3, #2
   19b40:	2301      	moveq	r3, #1
   19b42:	f801 3b01 	strb.w	r3, [r1], #1
{
   19b46:	4605      	mov	r5, r0
	}

	sys_put_be32((ctx->seq_num | ((uint32_t)ctx->aszmic << 31)), &nonce[1]);
   19b48:	68a3      	ldr	r3, [r4, #8]
   19b4a:	7860      	ldrb	r0, [r4, #1]
   19b4c:	ea43 70c0 	orr.w	r0, r3, r0, lsl #31
   19b50:	f7ff ffe6 	bl	19b20 <sys_put_be32>

	sys_put_be16(ctx->src, &nonce[5]);
   19b54:	8863      	ldrh	r3, [r4, #2]
	dst[1] = val;
   19b56:	71ab      	strb	r3, [r5, #6]
	dst[0] = val >> 8;
   19b58:	0a1a      	lsrs	r2, r3, #8
   19b5a:	716a      	strb	r2, [r5, #5]
	sys_put_be16(ctx->dst, &nonce[7]);
   19b5c:	88a3      	ldrh	r3, [r4, #4]
	dst[1] = val;
   19b5e:	722b      	strb	r3, [r5, #8]
	dst[0] = val >> 8;
   19b60:	0a1a      	lsrs	r2, r3, #8
   19b62:	71ea      	strb	r2, [r5, #7]

	sys_put_be32(ctx->iv_index, &nonce[9]);
   19b64:	68e0      	ldr	r0, [r4, #12]
   19b66:	f105 0109 	add.w	r1, r5, #9
}
   19b6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	sys_put_be32(ctx->iv_index, &nonce[9]);
   19b6e:	f7ff bfd7 	b.w	19b20 <sys_put_be32>

00019b72 <bt_mesh_aes_cmac>:
{
   19b72:	b570      	push	{r4, r5, r6, lr}
   19b74:	b0c2      	sub	sp, #264	; 0x108
   19b76:	460d      	mov	r5, r1
   19b78:	4614      	mov	r4, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   19b7a:	4601      	mov	r1, r0
   19b7c:	aa16      	add	r2, sp, #88	; 0x58
   19b7e:	4668      	mov	r0, sp
{
   19b80:	461e      	mov	r6, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   19b82:	f7fd fa54 	bl	1702e <tc_cmac_setup>
   19b86:	b130      	cbz	r0, 19b96 <bt_mesh_aes_cmac+0x24>
   19b88:	3508      	adds	r5, #8
	for (; sg_len; sg_len--, sg++) {
   19b8a:	b944      	cbnz	r4, 19b9e <bt_mesh_aes_cmac+0x2c>
	if (tc_cmac_final(mac, &state) == TC_CRYPTO_FAIL) {
   19b8c:	4669      	mov	r1, sp
   19b8e:	4630      	mov	r0, r6
   19b90:	f7fd fae3 	bl	1715a <tc_cmac_final>
   19b94:	b968      	cbnz	r0, 19bb2 <bt_mesh_aes_cmac+0x40>
		return -EIO;
   19b96:	f06f 0004 	mvn.w	r0, #4
}
   19b9a:	b042      	add	sp, #264	; 0x108
   19b9c:	bd70      	pop	{r4, r5, r6, pc}
		if (tc_cmac_update(&state, sg->data,
   19b9e:	e955 1202 	ldrd	r1, r2, [r5, #-8]
   19ba2:	4668      	mov	r0, sp
   19ba4:	f7fd fa6e 	bl	17084 <tc_cmac_update>
   19ba8:	3508      	adds	r5, #8
   19baa:	2800      	cmp	r0, #0
   19bac:	d0f3      	beq.n	19b96 <bt_mesh_aes_cmac+0x24>
	for (; sg_len; sg_len--, sg++) {
   19bae:	3c01      	subs	r4, #1
   19bb0:	e7eb      	b.n	19b8a <bt_mesh_aes_cmac+0x18>
	return 0;
   19bb2:	4620      	mov	r0, r4
   19bb4:	e7f1      	b.n	19b9a <bt_mesh_aes_cmac+0x28>

00019bb6 <bt_mesh_aes_cmac_one>:
{
   19bb6:	b507      	push	{r0, r1, r2, lr}
	struct bt_mesh_sg sg = { m, len };
   19bb8:	e9cd 1200 	strd	r1, r2, [sp]
	return bt_mesh_aes_cmac(key, &sg, 1, mac);
   19bbc:	2201      	movs	r2, #1
   19bbe:	4669      	mov	r1, sp
   19bc0:	f7ff ffd7 	bl	19b72 <bt_mesh_aes_cmac>
}
   19bc4:	b003      	add	sp, #12
   19bc6:	f85d fb04 	ldr.w	pc, [sp], #4

00019bca <bt_mesh_s1>:
{
   19bca:	b530      	push	{r4, r5, lr}
	const uint8_t zero[16] = { 0 };
   19bcc:	2200      	movs	r2, #0
{
   19bce:	b085      	sub	sp, #20
   19bd0:	460d      	mov	r5, r1
	const uint8_t zero[16] = { 0 };
   19bd2:	e9cd 2200 	strd	r2, r2, [sp]
   19bd6:	e9cd 2202 	strd	r2, r2, [sp, #8]
{
   19bda:	4604      	mov	r4, r0
	return bt_mesh_aes_cmac_one(zero, m, strlen(m), salt);
   19bdc:	f7fd fb0d 	bl	171fa <strlen>
   19be0:	462b      	mov	r3, r5
   19be2:	4602      	mov	r2, r0
   19be4:	4621      	mov	r1, r4
   19be6:	4668      	mov	r0, sp
   19be8:	f7ff ffe5 	bl	19bb6 <bt_mesh_aes_cmac_one>
}
   19bec:	3800      	subs	r0, #0
   19bee:	bf18      	it	ne
   19bf0:	2001      	movne	r0, #1
   19bf2:	b005      	add	sp, #20
   19bf4:	bd30      	pop	{r4, r5, pc}

00019bf6 <bt_mesh_k1>:
{
   19bf6:	b570      	push	{r4, r5, r6, lr}
   19bf8:	9d04      	ldr	r5, [sp, #16]
   19bfa:	4606      	mov	r6, r0
   19bfc:	461c      	mov	r4, r3
   19bfe:	4610      	mov	r0, r2
	err = bt_mesh_aes_cmac_one(salt, ikm, ikm_len, okm);
   19c00:	462b      	mov	r3, r5
   19c02:	460a      	mov	r2, r1
   19c04:	4631      	mov	r1, r6
   19c06:	f7ff ffd6 	bl	19bb6 <bt_mesh_aes_cmac_one>
	if (err < 0) {
   19c0a:	2800      	cmp	r0, #0
   19c0c:	db0a      	blt.n	19c24 <bt_mesh_k1+0x2e>
	return bt_mesh_aes_cmac_one(okm, info, strlen(info), okm);
   19c0e:	4620      	mov	r0, r4
   19c10:	f7fd faf3 	bl	171fa <strlen>
   19c14:	462b      	mov	r3, r5
   19c16:	4602      	mov	r2, r0
   19c18:	4621      	mov	r1, r4
   19c1a:	4628      	mov	r0, r5
}
   19c1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_mesh_aes_cmac_one(okm, info, strlen(info), okm);
   19c20:	f7ff bfc9 	b.w	19bb6 <bt_mesh_aes_cmac_one>
}
   19c24:	bd70      	pop	{r4, r5, r6, pc}

00019c26 <bt_mesh_net_encrypt>:
{
   19c26:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   19c28:	680b      	ldr	r3, [r1, #0]
{
   19c2a:	b089      	sub	sp, #36	; 0x24
   19c2c:	460c      	mov	r4, r1
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   19c2e:	7859      	ldrb	r1, [r3, #1]
{
   19c30:	4607      	mov	r7, r0
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   19c32:	f993 0001 	ldrsb.w	r0, [r3, #1]
	nonce[1] = pdu[1];
   19c36:	f88d 1011 	strb.w	r1, [sp, #17]
	nonce[2] = pdu[2];
   19c3a:	7899      	ldrb	r1, [r3, #2]
   19c3c:	f88d 1012 	strb.w	r1, [sp, #18]
	nonce[3] = pdu[3];
   19c40:	78d9      	ldrb	r1, [r3, #3]
   19c42:	f88d 1013 	strb.w	r1, [sp, #19]
	nonce[4] = pdu[4];
   19c46:	7919      	ldrb	r1, [r3, #4]
   19c48:	f88d 1014 	strb.w	r1, [sp, #20]
	nonce[5] = pdu[5];
   19c4c:	7959      	ldrb	r1, [r3, #5]
   19c4e:	f88d 1015 	strb.w	r1, [sp, #21]
	nonce[6] = pdu[6];
   19c52:	799b      	ldrb	r3, [r3, #6]
   19c54:	f88d 3016 	strb.w	r3, [sp, #22]
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   19c58:	2800      	cmp	r0, #0
	nonce[0] = 0x00;
   19c5a:	f04f 0500 	mov.w	r5, #0
	sys_put_be32(iv_index, &nonce[9]);
   19c5e:	4610      	mov	r0, r2
   19c60:	f10d 0119 	add.w	r1, sp, #25
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   19c64:	bfb4      	ite	lt
   19c66:	2608      	movlt	r6, #8
   19c68:	2604      	movge	r6, #4
	nonce[0] = 0x00;
   19c6a:	f88d 5010 	strb.w	r5, [sp, #16]
	nonce[7] = 0U;
   19c6e:	f88d 5017 	strb.w	r5, [sp, #23]
	nonce[8] = 0U;
   19c72:	f88d 5018 	strb.w	r5, [sp, #24]
	sys_put_be32(iv_index, &nonce[9]);
   19c76:	f7ff ff53 	bl	19b20 <sys_put_be32>
	err = bt_ccm_encrypt(key, nonce, &buf->data[7], buf->len - 7, NULL, 0,
   19c7a:	6822      	ldr	r2, [r4, #0]
   19c7c:	88a3      	ldrh	r3, [r4, #4]
   19c7e:	3207      	adds	r2, #7
   19c80:	e9cd 5500 	strd	r5, r5, [sp]
   19c84:	e9cd 2602 	strd	r2, r6, [sp, #8]
   19c88:	3b07      	subs	r3, #7
   19c8a:	a904      	add	r1, sp, #16
   19c8c:	4638      	mov	r0, r7
   19c8e:	f7fd fca2 	bl	175d6 <bt_ccm_encrypt>
	if (!err) {
   19c92:	4605      	mov	r5, r0
   19c94:	b918      	cbnz	r0, 19c9e <bt_mesh_net_encrypt+0x78>
		net_buf_simple_add(buf, mic_len);
   19c96:	4631      	mov	r1, r6
   19c98:	4620      	mov	r0, r4
   19c9a:	f003 f996 	bl	1cfca <net_buf_simple_add>
}
   19c9e:	4628      	mov	r0, r5
   19ca0:	b009      	add	sp, #36	; 0x24
   19ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}

00019ca4 <bt_mesh_net_decrypt>:
{
   19ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   19ca6:	680b      	ldr	r3, [r1, #0]
{
   19ca8:	b089      	sub	sp, #36	; 0x24
   19caa:	460c      	mov	r4, r1
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   19cac:	7859      	ldrb	r1, [r3, #1]
{
   19cae:	4606      	mov	r6, r0
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   19cb0:	f993 0001 	ldrsb.w	r0, [r3, #1]
	nonce[1] = pdu[1];
   19cb4:	f88d 1011 	strb.w	r1, [sp, #17]
	nonce[2] = pdu[2];
   19cb8:	7899      	ldrb	r1, [r3, #2]
   19cba:	f88d 1012 	strb.w	r1, [sp, #18]
	nonce[3] = pdu[3];
   19cbe:	78d9      	ldrb	r1, [r3, #3]
   19cc0:	f88d 1013 	strb.w	r1, [sp, #19]
	nonce[4] = pdu[4];
   19cc4:	7919      	ldrb	r1, [r3, #4]
   19cc6:	f88d 1014 	strb.w	r1, [sp, #20]
	nonce[5] = pdu[5];
   19cca:	7959      	ldrb	r1, [r3, #5]
   19ccc:	f88d 1015 	strb.w	r1, [sp, #21]
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   19cd0:	2800      	cmp	r0, #0
	nonce[6] = pdu[6];
   19cd2:	799b      	ldrb	r3, [r3, #6]
   19cd4:	f88d 3016 	strb.w	r3, [sp, #22]
	nonce[0] = 0x00;
   19cd8:	f04f 0500 	mov.w	r5, #0
	sys_put_be32(iv_index, &nonce[9]);
   19cdc:	f10d 0119 	add.w	r1, sp, #25
   19ce0:	4610      	mov	r0, r2
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   19ce2:	bfb4      	ite	lt
   19ce4:	2708      	movlt	r7, #8
   19ce6:	2704      	movge	r7, #4
	nonce[0] = 0x00;
   19ce8:	f88d 5010 	strb.w	r5, [sp, #16]
	nonce[7] = 0U;
   19cec:	f88d 5017 	strb.w	r5, [sp, #23]
	nonce[8] = 0U;
   19cf0:	f88d 5018 	strb.w	r5, [sp, #24]
	sys_put_be32(iv_index, &nonce[9]);
   19cf4:	f7ff ff14 	bl	19b20 <sys_put_be32>
	buf->len -= mic_len;
   19cf8:	88a3      	ldrh	r3, [r4, #4]
	return bt_ccm_decrypt(key, nonce, &buf->data[7], buf->len - 7, NULL, 0,
   19cfa:	6822      	ldr	r2, [r4, #0]
	buf->len -= mic_len;
   19cfc:	1bdb      	subs	r3, r3, r7
	return bt_ccm_decrypt(key, nonce, &buf->data[7], buf->len - 7, NULL, 0,
   19cfe:	3207      	adds	r2, #7
	buf->len -= mic_len;
   19d00:	b29b      	uxth	r3, r3
   19d02:	80a3      	strh	r3, [r4, #4]
	return bt_ccm_decrypt(key, nonce, &buf->data[7], buf->len - 7, NULL, 0,
   19d04:	e9cd 2702 	strd	r2, r7, [sp, #8]
   19d08:	e9cd 5500 	strd	r5, r5, [sp]
   19d0c:	3b07      	subs	r3, #7
   19d0e:	a904      	add	r1, sp, #16
   19d10:	4630      	mov	r0, r6
   19d12:	f7fd fc31 	bl	17578 <bt_ccm_decrypt>
}
   19d16:	b009      	add	sp, #36	; 0x24
   19d18:	bdf0      	pop	{r4, r5, r6, r7, pc}

00019d1a <bt_mesh_app_encrypt>:

int bt_mesh_app_encrypt(const uint8_t key[16],
			const struct bt_mesh_app_crypto_ctx *ctx,
			struct net_buf_simple *buf)
{
   19d1a:	b570      	push	{r4, r5, r6, lr}
   19d1c:	460d      	mov	r5, r1
   19d1e:	b088      	sub	sp, #32
   19d20:	4606      	mov	r6, r0
	BT_DBG("dev_key %u src 0x%04x dst 0x%04x", ctx->dev_key, ctx->src,
	       ctx->dst);
	BT_DBG("seq_num 0x%08x iv_index 0x%08x", ctx->seq_num, ctx->iv_index);
	BT_DBG("Clear: %s", bt_hex(buf->data, buf->len));

	create_app_nonce(nonce, ctx);
   19d22:	a804      	add	r0, sp, #16
{
   19d24:	4614      	mov	r4, r2
	create_app_nonce(nonce, ctx);
   19d26:	f7ff ff04 	bl	19b32 <create_app_nonce>

	BT_DBG("Nonce  %s", bt_hex(nonce, 13));

	err = bt_ccm_encrypt(key, nonce, buf->data, buf->len, ctx->ad,
   19d2a:	692b      	ldr	r3, [r5, #16]
   19d2c:	7868      	ldrb	r0, [r5, #1]
   19d2e:	6822      	ldr	r2, [r4, #0]
   19d30:	2b00      	cmp	r3, #0
   19d32:	bf14      	ite	ne
   19d34:	2110      	movne	r1, #16
   19d36:	2100      	moveq	r1, #0
   19d38:	2800      	cmp	r0, #0
   19d3a:	bf14      	ite	ne
   19d3c:	2008      	movne	r0, #8
   19d3e:	2004      	moveq	r0, #4
   19d40:	e9cd 3100 	strd	r3, r1, [sp]
   19d44:	e9cd 2002 	strd	r2, r0, [sp, #8]
   19d48:	88a3      	ldrh	r3, [r4, #4]
   19d4a:	4630      	mov	r0, r6
   19d4c:	a904      	add	r1, sp, #16
   19d4e:	f7fd fc42 	bl	175d6 <bt_ccm_encrypt>
			     ctx->ad ? 16 : 0, buf->data,
			     APP_MIC_LEN(ctx->aszmic));
	if (!err) {
   19d52:	4606      	mov	r6, r0
   19d54:	b938      	cbnz	r0, 19d66 <bt_mesh_app_encrypt+0x4c>
		net_buf_simple_add(buf, APP_MIC_LEN(ctx->aszmic));
   19d56:	786b      	ldrb	r3, [r5, #1]
   19d58:	2b00      	cmp	r3, #0
   19d5a:	bf14      	ite	ne
   19d5c:	2108      	movne	r1, #8
   19d5e:	2104      	moveq	r1, #4
   19d60:	4620      	mov	r0, r4
   19d62:	f003 f932 	bl	1cfca <net_buf_simple_add>
		BT_DBG("Encr: %s", bt_hex(buf->data, buf->len));
	}

	return err;
}
   19d66:	4630      	mov	r0, r6
   19d68:	b008      	add	sp, #32
   19d6a:	bd70      	pop	{r4, r5, r6, pc}

00019d6c <bt_mesh_app_decrypt>:

int bt_mesh_app_decrypt(const uint8_t key[16],
			const struct bt_mesh_app_crypto_ctx *ctx,
			struct net_buf_simple *buf, struct net_buf_simple *out)
{
   19d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   19d6e:	460d      	mov	r5, r1
   19d70:	b089      	sub	sp, #36	; 0x24
   19d72:	4607      	mov	r7, r0
	int err;

	BT_DBG("EncData (len %u) %s", buf->len,
	       bt_hex(buf->data, buf->len));

	create_app_nonce(nonce, ctx);
   19d74:	a804      	add	r0, sp, #16
{
   19d76:	4614      	mov	r4, r2
   19d78:	461e      	mov	r6, r3
	create_app_nonce(nonce, ctx);
   19d7a:	f7ff feda 	bl	19b32 <create_app_nonce>

	BT_DBG("AppKey %s", bt_hex(key, 16));
	BT_DBG("Nonce  %s", bt_hex(nonce, 13));

	err = bt_ccm_decrypt(key, nonce, buf->data, buf->len, ctx->ad,
   19d7e:	692b      	ldr	r3, [r5, #16]
   19d80:	7868      	ldrb	r0, [r5, #1]
   19d82:	6831      	ldr	r1, [r6, #0]
   19d84:	2b00      	cmp	r3, #0
   19d86:	bf14      	ite	ne
   19d88:	2210      	movne	r2, #16
   19d8a:	2200      	moveq	r2, #0
   19d8c:	2800      	cmp	r0, #0
   19d8e:	bf14      	ite	ne
   19d90:	2008      	movne	r0, #8
   19d92:	2004      	moveq	r0, #4
   19d94:	e9cd 1002 	strd	r1, r0, [sp, #8]
   19d98:	e9cd 3200 	strd	r3, r2, [sp]
   19d9c:	a904      	add	r1, sp, #16
   19d9e:	88a3      	ldrh	r3, [r4, #4]
   19da0:	6822      	ldr	r2, [r4, #0]
   19da2:	4638      	mov	r0, r7
   19da4:	f7fd fbe8 	bl	17578 <bt_ccm_decrypt>
			     ctx->ad ? 16 : 0, out->data,
			     APP_MIC_LEN(ctx->aszmic));
	if (!err) {
   19da8:	4605      	mov	r5, r0
   19daa:	b918      	cbnz	r0, 19db4 <bt_mesh_app_decrypt+0x48>
		net_buf_simple_add(out, buf->len);
   19dac:	88a1      	ldrh	r1, [r4, #4]
   19dae:	4630      	mov	r0, r6
   19db0:	f003 f90b 	bl	1cfca <net_buf_simple_add>
	}

	return err;
}
   19db4:	4628      	mov	r0, r5
   19db6:	b009      	add	sp, #36	; 0x24
   19db8:	bdf0      	pop	{r4, r5, r6, r7, pc}

00019dba <bt_mesh_beacon_auth>:
}

int bt_mesh_beacon_auth(const uint8_t beacon_key[16], uint8_t flags,
			const uint8_t net_id[8], uint32_t iv_index,
			uint8_t auth[8])
{
   19dba:	b530      	push	{r4, r5, lr}
   19dbc:	b089      	sub	sp, #36	; 0x24
   19dbe:	4604      	mov	r4, r0
   19dc0:	4608      	mov	r0, r1
   19dc2:	461d      	mov	r5, r3
   19dc4:	4611      	mov	r1, r2

	BT_DBG("BeaconKey %s", bt_hex(beacon_key, 16));
	BT_DBG("NetId %s", bt_hex(net_id, 8));
	BT_DBG("IV Index 0x%08x", iv_index);

	msg[0] = flags;
   19dc6:	f88d 0000 	strb.w	r0, [sp]
	memcpy(&msg[1], net_id, 8);
   19dca:	2208      	movs	r2, #8
   19dcc:	f10d 0001 	add.w	r0, sp, #1
   19dd0:	f7fd fa40 	bl	17254 <memcpy>
	sys_put_be32(iv_index, &msg[9]);
   19dd4:	f10d 0109 	add.w	r1, sp, #9
   19dd8:	4628      	mov	r0, r5
   19dda:	f7ff fea1 	bl	19b20 <sys_put_be32>

	BT_DBG("BeaconMsg %s", bt_hex(msg, sizeof(msg)));

	err = bt_mesh_aes_cmac_one(beacon_key, msg, sizeof(msg), tmp);
   19dde:	4620      	mov	r0, r4
   19de0:	ab04      	add	r3, sp, #16
   19de2:	220d      	movs	r2, #13
   19de4:	4669      	mov	r1, sp
   19de6:	f7ff fee6 	bl	19bb6 <bt_mesh_aes_cmac_one>
	if (!err) {
   19dea:	4604      	mov	r4, r0
   19dec:	b920      	cbnz	r0, 19df8 <bt_mesh_beacon_auth+0x3e>
		memcpy(auth, tmp, 8);
   19dee:	980c      	ldr	r0, [sp, #48]	; 0x30
   19df0:	2208      	movs	r2, #8
   19df2:	a904      	add	r1, sp, #16
   19df4:	f7fd fa2e 	bl	17254 <memcpy>
	}

	return err;
}
   19df8:	4620      	mov	r0, r4
   19dfa:	b009      	add	sp, #36	; 0x24
   19dfc:	bd30      	pop	{r4, r5, pc}

00019dfe <k_uptime_get_32>:
{
   19dfe:	b508      	push	{r3, lr}
   19e00:	f004 fe25 	bl	1ea4e <z_impl_k_uptime_ticks>
   19e04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   19e08:	fba0 3002 	umull	r3, r0, r0, r2
   19e0c:	fb02 0101 	mla	r1, r2, r1, r0
   19e10:	0bd8      	lsrs	r0, r3, #15
}
   19e12:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   19e16:	bd08      	pop	{r3, pc}

00019e18 <find_group_mod_visitor>:
{
   19e18:	b510      	push	{r4, lr}
	if (mod->elem_idx != ctx->mod->elem_idx) {
   19e1a:	684b      	ldr	r3, [r1, #4]
   19e1c:	7902      	ldrb	r2, [r0, #4]
   19e1e:	791b      	ldrb	r3, [r3, #4]
   19e20:	429a      	cmp	r2, r3
   19e22:	d109      	bne.n	19e38 <find_group_mod_visitor+0x20>
		if (mod->groups[i] == addr) {
   19e24:	89c3      	ldrh	r3, [r0, #14]
	ctx->entry = model_group_get(mod, ctx->addr);
   19e26:	890a      	ldrh	r2, [r1, #8]
		if (mod->groups[i] == addr) {
   19e28:	4293      	cmp	r3, r2
   19e2a:	f04f 0300 	mov.w	r3, #0
   19e2e:	d006      	beq.n	19e3e <find_group_mod_visitor+0x26>
   19e30:	8a04      	ldrh	r4, [r0, #16]
   19e32:	4294      	cmp	r4, r2
   19e34:	d002      	beq.n	19e3c <find_group_mod_visitor+0x24>
	ctx->entry = model_group_get(mod, ctx->addr);
   19e36:	600b      	str	r3, [r1, #0]
		return BT_MESH_WALK_CONTINUE;
   19e38:	2001      	movs	r0, #1
   19e3a:	e006      	b.n	19e4a <find_group_mod_visitor+0x32>
	for (i = 0; i < ARRAY_SIZE(mod->groups); i++) {
   19e3c:	2301      	movs	r3, #1
			return &mod->groups[i];
   19e3e:	3307      	adds	r3, #7
   19e40:	eb00 0343 	add.w	r3, r0, r3, lsl #1
		ctx->mod = mod;
   19e44:	e9c1 3000 	strd	r3, r0, [r1]
		return BT_MESH_WALK_STOP;
   19e48:	2000      	movs	r0, #0
}
   19e4a:	bd10      	pop	{r4, pc}

00019e4c <publish_sent>:
{
   19e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_mesh_model_pub *pub = mod->pub;
   19e50:	688d      	ldr	r5, [r1, #8]
{
   19e52:	460e      	mov	r6, r1
	elapsed = k_uptime_get_32() - pub->period_start;
   19e54:	f7ff ffd3 	bl	19dfe <k_uptime_get_32>
   19e58:	68ec      	ldr	r4, [r5, #12]
	if (mod->pub->count) {
   19e5a:	68b5      	ldr	r5, [r6, #8]
	elapsed = k_uptime_get_32() - pub->period_start;
   19e5c:	4601      	mov	r1, r0
   19e5e:	1b07      	subs	r7, r0, r4
	if (mod->pub->count) {
   19e60:	7ae8      	ldrb	r0, [r5, #11]
   19e62:	f010 0ff0 	tst.w	r0, #240	; 0xf0
   19e66:	d027      	beq.n	19eb8 <publish_sent+0x6c>
		period = BT_MESH_PUB_TRANSMIT_INT(mod->pub->retransmit);
   19e68:	7a6a      	ldrb	r2, [r5, #9]
   19e6a:	ea4f 0cd2 	mov.w	ip, r2, lsr #3
		period *= BT_MESH_PUB_MSG_NUM(mod->pub);
   19e6e:	f002 0207 	and.w	r2, r2, #7
		period = BT_MESH_PUB_TRANSMIT_INT(mod->pub->retransmit);
   19e72:	2332      	movs	r3, #50	; 0x32
		period *= BT_MESH_PUB_MSG_NUM(mod->pub);
   19e74:	3201      	adds	r2, #1
		period = BT_MESH_PUB_TRANSMIT_INT(mod->pub->retransmit);
   19e76:	fb0c 3303 	mla	r3, ip, r3, r3
		period *= BT_MESH_PUB_MSG_NUM(mod->pub);
   19e7a:	eba2 1010 	sub.w	r0, r2, r0, lsr #4
		if (period && elapsed >= period) {
   19e7e:	4343      	muls	r3, r0
   19e80:	d01a      	beq.n	19eb8 <publish_sent+0x6c>
   19e82:	429f      	cmp	r7, r3
	if (elapsed >= period) {
   19e84:	d21f      	bcs.n	19ec6 <publish_sent+0x7a>
	return period - elapsed;
   19e86:	1a64      	subs	r4, r4, r1
	if (delay) {
   19e88:	18e0      	adds	r0, r4, r3
   19e8a:	d01e      	beq.n	19eca <publish_sent+0x7e>
		k_work_schedule(&mod->pub->timer, K_MSEC(delay));
   19e8c:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
   19e90:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   19e94:	f240 30e7 	movw	r0, #999	; 0x3e7
   19e98:	2100      	movs	r1, #0
   19e9a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   19e9e:	2300      	movs	r3, #0
   19ea0:	fbc4 0106 	smlal	r0, r1, r4, r6
   19ea4:	f7e6 fd8a 	bl	9bc <__aeabi_uldivmod>
   19ea8:	4602      	mov	r2, r0
   19eaa:	460b      	mov	r3, r1
   19eac:	f105 0018 	add.w	r0, r5, #24
}
   19eb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_work_schedule(&mod->pub->timer, K_MSEC(delay));
   19eb4:	f7fb bdd4 	b.w	15a60 <k_work_schedule>
		period = bt_mesh_model_pub_period_get(mod);
   19eb8:	4630      	mov	r0, r6
   19eba:	f7f0 fb05 	bl	a4c8 <bt_mesh_model_pub_period_get>
   19ebe:	4603      	mov	r3, r0
		if (!period) {
   19ec0:	b118      	cbz	r0, 19eca <publish_sent+0x7e>
	if (elapsed >= period) {
   19ec2:	4287      	cmp	r7, r0
   19ec4:	e7de      	b.n	19e84 <publish_sent+0x38>
			return 1;
   19ec6:	2001      	movs	r0, #1
   19ec8:	e7e0      	b.n	19e8c <publish_sent+0x40>
}
   19eca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00019ece <publish_start>:
{
   19ece:	4608      	mov	r0, r1
   19ed0:	4611      	mov	r1, r2
	if (err) {
   19ed2:	b108      	cbz	r0, 19ed8 <publish_start+0xa>
		publish_sent(err, user_data);
   19ed4:	f7ff bfba 	b.w	19e4c <publish_sent>
}
   19ed8:	4770      	bx	lr

00019eda <bt_mesh_msg_send>:
{
   19eda:	b530      	push	{r4, r5, lr}
   19edc:	b085      	sub	sp, #20
   19ede:	461d      	mov	r5, r3
	struct bt_mesh_net_tx tx = {
   19ee0:	2300      	movs	r3, #0
   19ee2:	e9cd 0302 	strd	r0, r3, [sp, #8]
{
   19ee6:	460c      	mov	r4, r1
	struct bt_mesh_net_tx tx = {
   19ee8:	9301      	str	r3, [sp, #4]
   19eea:	f8ad 200c 	strh.w	r2, [sp, #12]
	if (!bt_mesh_is_provisioned()) {
   19eee:	f7ed fea9 	bl	7c44 <bt_mesh_is_provisioned>
   19ef2:	b138      	cbz	r0, 19f04 <bt_mesh_msg_send+0x2a>
	return bt_mesh_trans_send(&tx, buf, cb, cb_data);
   19ef4:	9b08      	ldr	r3, [sp, #32]
   19ef6:	462a      	mov	r2, r5
   19ef8:	4621      	mov	r1, r4
   19efa:	a801      	add	r0, sp, #4
   19efc:	f7ef fc34 	bl	9768 <bt_mesh_trans_send>
}
   19f00:	b005      	add	sp, #20
   19f02:	bd30      	pop	{r4, r5, pc}
		return -EAGAIN;
   19f04:	f06f 000a 	mvn.w	r0, #10
   19f08:	e7fa      	b.n	19f00 <bt_mesh_msg_send+0x26>

00019f0a <bt_mesh_model_has_key>:
		if (mod->keys[i] == key ||
   19f0a:	8983      	ldrh	r3, [r0, #12]
   19f0c:	428b      	cmp	r3, r1
   19f0e:	d00a      	beq.n	19f26 <bt_mesh_model_has_key+0x1c>
   19f10:	f64f 72fc 	movw	r2, #65532	; 0xfffc
   19f14:	4293      	cmp	r3, r2
   19f16:	d108      	bne.n	19f2a <bt_mesh_model_has_key+0x20>
		     BT_MESH_IS_DEV_KEY(key))) {
   19f18:	1cc8      	adds	r0, r1, #3
		    (mod->keys[i] == BT_MESH_KEY_DEV_ANY &&
   19f1a:	b280      	uxth	r0, r0
   19f1c:	2801      	cmp	r0, #1
   19f1e:	bf8c      	ite	hi
   19f20:	2000      	movhi	r0, #0
   19f22:	2001      	movls	r0, #1
   19f24:	4770      	bx	lr
			return true;
   19f26:	2001      	movs	r0, #1
   19f28:	4770      	bx	lr
	return false;
   19f2a:	2000      	movs	r0, #0
}
   19f2c:	4770      	bx	lr

00019f2e <bt_mesh_model_send>:
{
   19f2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19f32:	460c      	mov	r4, r1
	if (!bt_mesh_model_has_key(model, ctx->app_idx)) {
   19f34:	8849      	ldrh	r1, [r1, #2]
{
   19f36:	4607      	mov	r7, r0
   19f38:	4615      	mov	r5, r2
   19f3a:	461e      	mov	r6, r3
	if (!bt_mesh_model_has_key(model, ctx->app_idx)) {
   19f3c:	f7ff ffe5 	bl	19f0a <bt_mesh_model_has_key>
   19f40:	b150      	cbz	r0, 19f58 <bt_mesh_model_send+0x2a>
	return bt_mesh_msg_send(ctx, msg, bt_mesh_model_elem(model)->addr, cb, cb_data);
   19f42:	4638      	mov	r0, r7
   19f44:	f7f0 fae4 	bl	a510 <bt_mesh_model_elem>
   19f48:	4629      	mov	r1, r5
   19f4a:	8802      	ldrh	r2, [r0, #0]
   19f4c:	4633      	mov	r3, r6
   19f4e:	4620      	mov	r0, r4
}
   19f50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_mesh_msg_send(ctx, msg, bt_mesh_model_elem(model)->addr, cb, cb_data);
   19f54:	f7ff bfc1 	b.w	19eda <bt_mesh_msg_send>
}
   19f58:	f06f 0015 	mvn.w	r0, #21
   19f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00019f60 <bt_mesh_model_find_vnd>:
{
   19f60:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0U; i < elem->vnd_model_count; i++) {
   19f62:	7947      	ldrb	r7, [r0, #5]
{
   19f64:	4604      	mov	r4, r0
	for (i = 0U; i < elem->vnd_model_count; i++) {
   19f66:	2300      	movs	r3, #0
   19f68:	b2d8      	uxtb	r0, r3
   19f6a:	4287      	cmp	r7, r0
   19f6c:	d801      	bhi.n	19f72 <bt_mesh_model_find_vnd+0x12>
	return NULL;
   19f6e:	2000      	movs	r0, #0
}
   19f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (elem->vnd_models[i].vnd.company == company &&
   19f72:	68e6      	ldr	r6, [r4, #12]
   19f74:	015d      	lsls	r5, r3, #5
   19f76:	eb06 1043 	add.w	r0, r6, r3, lsl #5
   19f7a:	5b75      	ldrh	r5, [r6, r5]
   19f7c:	428d      	cmp	r5, r1
   19f7e:	d102      	bne.n	19f86 <bt_mesh_model_find_vnd+0x26>
   19f80:	8845      	ldrh	r5, [r0, #2]
   19f82:	4295      	cmp	r5, r2
   19f84:	d0f4      	beq.n	19f70 <bt_mesh_model_find_vnd+0x10>
	for (i = 0U; i < elem->vnd_model_count; i++) {
   19f86:	3301      	adds	r3, #1
   19f88:	e7ee      	b.n	19f68 <bt_mesh_model_find_vnd+0x8>

00019f8a <bt_mesh_model_find>:
{
   19f8a:	b570      	push	{r4, r5, r6, lr}
	for (i = 0U; i < elem->model_count; i++) {
   19f8c:	7906      	ldrb	r6, [r0, #4]
{
   19f8e:	4602      	mov	r2, r0
	for (i = 0U; i < elem->model_count; i++) {
   19f90:	2300      	movs	r3, #0
   19f92:	b2d8      	uxtb	r0, r3
   19f94:	4286      	cmp	r6, r0
   19f96:	d801      	bhi.n	19f9c <bt_mesh_model_find+0x12>
	return NULL;
   19f98:	2000      	movs	r0, #0
   19f9a:	e008      	b.n	19fae <bt_mesh_model_find+0x24>
		if (elem->models[i].id == id) {
   19f9c:	6895      	ldr	r5, [r2, #8]
   19f9e:	015c      	lsls	r4, r3, #5
   19fa0:	eb05 1043 	add.w	r0, r5, r3, lsl #5
   19fa4:	5b2c      	ldrh	r4, [r5, r4]
   19fa6:	428c      	cmp	r4, r1
   19fa8:	f103 0301 	add.w	r3, r3, #1
   19fac:	d1f1      	bne.n	19f92 <bt_mesh_model_find+0x8>
}
   19fae:	bd70      	pop	{r4, r5, r6, pc}

00019fb0 <bt_mesh_model_extensions_walk>:

void bt_mesh_model_extensions_walk(struct bt_mesh_model *model,
				   enum bt_mesh_walk (*cb)(struct bt_mesh_model *mod,
							   void *user_data),
				   void *user_data)
{
   19fb0:	460b      	mov	r3, r1
#ifndef CONFIG_BT_MESH_MODEL_EXTENSIONS
	(void)cb(model, user_data);
   19fb2:	4611      	mov	r1, r2
   19fb4:	4718      	bx	r3

00019fb6 <bt_mesh_model_msg_init>:
#define BT_DBG_ENABLED IS_ENABLED(CONFIG_BT_MESH_DEBUG_ACCESS)
#define LOG_MODULE_NAME bt_mesh_msg
#include "common/log.h"

void bt_mesh_model_msg_init(struct net_buf_simple *msg, uint32_t opcode)
{
   19fb6:	b538      	push	{r3, r4, r5, lr}
	if (!buf->__buf) {
   19fb8:	6883      	ldr	r3, [r0, #8]
   19fba:	4604      	mov	r4, r0
   19fbc:	b913      	cbnz	r3, 19fc4 <bt_mesh_model_msg_init+0xe>
		buf->__buf = (uint8_t *)buf + sizeof(*buf);
   19fbe:	f100 030c 	add.w	r3, r0, #12
   19fc2:	6083      	str	r3, [r0, #8]
	buf->data = buf->__buf + reserve_head;
   19fc4:	68a3      	ldr	r3, [r4, #8]
   19fc6:	6023      	str	r3, [r4, #0]
	net_buf_simple_init(msg, 0);

	switch (BT_MESH_MODEL_OP_LEN(opcode)) {
   19fc8:	29ff      	cmp	r1, #255	; 0xff
	buf->len = 0U;
   19fca:	f04f 0300 	mov.w	r3, #0
   19fce:	80a3      	strh	r3, [r4, #4]
   19fd0:	d805      	bhi.n	19fde <bt_mesh_model_msg_init+0x28>
	case 1:
		net_buf_simple_add_u8(msg, opcode);
   19fd2:	4620      	mov	r0, r4
   19fd4:	b2c9      	uxtb	r1, r1
		break;
	default:
		BT_WARN("Unknown opcode format");
		break;
	}
}
   19fd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_simple_add_u8(msg, opcode);
   19fda:	f003 b805 	b.w	1cfe8 <net_buf_simple_add_u8>
	switch (BT_MESH_MODEL_OP_LEN(opcode)) {
   19fde:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
		net_buf_simple_add_be16(msg, opcode);
   19fe2:	b28d      	uxth	r5, r1
	switch (BT_MESH_MODEL_OP_LEN(opcode)) {
   19fe4:	d205      	bcs.n	19ff2 <bt_mesh_model_msg_init+0x3c>
		net_buf_simple_add_be16(msg, opcode);
   19fe6:	4629      	mov	r1, r5
   19fe8:	4620      	mov	r0, r4
}
   19fea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_simple_add_be16(msg, opcode);
   19fee:	f003 b80d 	b.w	1d00c <net_buf_simple_add_be16>
		net_buf_simple_add_u8(msg, ((opcode >> 16) & 0xff));
   19ff2:	f3c1 4107 	ubfx	r1, r1, #16, #8
   19ff6:	4620      	mov	r0, r4
   19ff8:	f002 fff6 	bl	1cfe8 <net_buf_simple_add_u8>
		net_buf_simple_add_le16(msg, opcode & 0xffff);
   19ffc:	4629      	mov	r1, r5
   19ffe:	4620      	mov	r0, r4
}
   1a000:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_simple_add_le16(msg, opcode & 0xffff);
   1a004:	f002 bff8 	b.w	1cff8 <net_buf_simple_add_le16>

0001a008 <cfg_srv_init>:
{
   1a008:	4603      	mov	r3, r0
	if (!bt_mesh_model_in_primary(model)) {
   1a00a:	7900      	ldrb	r0, [r0, #4]
   1a00c:	b918      	cbnz	r0, 1a016 <cfg_srv_init+0xe>
	model->keys[0] = BT_MESH_KEY_DEV_LOCAL;
   1a00e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   1a012:	819a      	strh	r2, [r3, #12]
	return 0;
   1a014:	4770      	bx	lr
		return -EINVAL;
   1a016:	f06f 0015 	mvn.w	r0, #21
}
   1a01a:	4770      	bx	lr

0001a01c <key_idx_pack>:

#include <sys/byteorder.h>

static inline void key_idx_pack(struct net_buf_simple *buf,
				uint16_t idx1, uint16_t idx2)
{
   1a01c:	b538      	push	{r3, r4, r5, lr}
	net_buf_simple_add_le16(buf, idx1 | ((idx2 & 0x00f) << 12));
   1a01e:	ea41 3102 	orr.w	r1, r1, r2, lsl #12
{
   1a022:	4605      	mov	r5, r0
   1a024:	4614      	mov	r4, r2
	net_buf_simple_add_le16(buf, idx1 | ((idx2 & 0x00f) << 12));
   1a026:	b289      	uxth	r1, r1
   1a028:	f002 ffe6 	bl	1cff8 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(buf, idx2 >> 4);
   1a02c:	f3c4 1107 	ubfx	r1, r4, #4, #8
   1a030:	4628      	mov	r0, r5
}
   1a032:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_simple_add_u8(buf, idx2 >> 4);
   1a036:	f002 bfd7 	b.w	1cfe8 <net_buf_simple_add_u8>

0001a03a <send_krp_status>:
{
   1a03a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a03c:	b089      	sub	sp, #36	; 0x24
   1a03e:	4605      	mov	r5, r0
   1a040:	460e      	mov	r6, r1
   1a042:	4617      	mov	r7, r2
   1a044:	461c      	mov	r4, r3
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_KRP_STATUS, 4);
   1a046:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
   1a04a:	ab02      	add	r3, sp, #8
	bt_mesh_model_msg_init(&msg, OP_KRP_STATUS);
   1a04c:	a805      	add	r0, sp, #20
   1a04e:	f248 0117 	movw	r1, #32791	; 0x8017
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_KRP_STATUS, 4);
   1a052:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1a056:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_KRP_STATUS);
   1a058:	f7ff ffad 	bl	19fb6 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   1a05c:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
   1a060:	a805      	add	r0, sp, #20
   1a062:	f002 ffc1 	bl	1cfe8 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, idx);
   1a066:	4639      	mov	r1, r7
   1a068:	a805      	add	r0, sp, #20
   1a06a:	f002 ffc5 	bl	1cff8 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(&msg, phase);
   1a06e:	4621      	mov	r1, r4
   1a070:	a805      	add	r0, sp, #20
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1a072:	2400      	movs	r4, #0
	net_buf_simple_add_u8(&msg, phase);
   1a074:	f002 ffb8 	bl	1cfe8 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1a078:	9400      	str	r4, [sp, #0]
   1a07a:	4623      	mov	r3, r4
   1a07c:	aa05      	add	r2, sp, #20
   1a07e:	4631      	mov	r1, r6
   1a080:	4628      	mov	r0, r5
   1a082:	f7ff ff54 	bl	19f2e <bt_mesh_model_send>
}
   1a086:	4620      	mov	r0, r4
   1a088:	b009      	add	sp, #36	; 0x24
   1a08a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001a08c <send_node_id_status>:
{
   1a08c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a08e:	b089      	sub	sp, #36	; 0x24
   1a090:	4605      	mov	r5, r0
   1a092:	460e      	mov	r6, r1
   1a094:	4617      	mov	r7, r2
   1a096:	461c      	mov	r4, r3
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NODE_IDENTITY_STATUS, 4);
   1a098:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
   1a09c:	ab02      	add	r3, sp, #8
	bt_mesh_model_msg_init(&msg, OP_NODE_IDENTITY_STATUS);
   1a09e:	a805      	add	r0, sp, #20
   1a0a0:	f248 0148 	movw	r1, #32840	; 0x8048
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NODE_IDENTITY_STATUS, 4);
   1a0a4:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1a0a8:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_NODE_IDENTITY_STATUS);
   1a0aa:	f7ff ff84 	bl	19fb6 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   1a0ae:	4639      	mov	r1, r7
   1a0b0:	a805      	add	r0, sp, #20
   1a0b2:	f002 ff99 	bl	1cfe8 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, net_idx);
   1a0b6:	4621      	mov	r1, r4
   1a0b8:	a805      	add	r0, sp, #20
   1a0ba:	f002 ff9d 	bl	1cff8 <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1a0be:	2400      	movs	r4, #0
	net_buf_simple_add_u8(&msg, node_id);
   1a0c0:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
   1a0c4:	a805      	add	r0, sp, #20
   1a0c6:	f002 ff8f 	bl	1cfe8 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1a0ca:	9400      	str	r4, [sp, #0]
   1a0cc:	4623      	mov	r3, r4
   1a0ce:	aa05      	add	r2, sp, #20
   1a0d0:	4631      	mov	r1, r6
   1a0d2:	4628      	mov	r0, r5
   1a0d4:	f7ff ff2b 	bl	19f2e <bt_mesh_model_send>
}
   1a0d8:	4620      	mov	r0, r4
   1a0da:	b009      	add	sp, #36	; 0x24
   1a0dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001a0de <send_net_key_status>:
{
   1a0de:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a0e0:	b089      	sub	sp, #36	; 0x24
   1a0e2:	4605      	mov	r5, r0
   1a0e4:	460e      	mov	r6, r1
   1a0e6:	4614      	mov	r4, r2
   1a0e8:	461f      	mov	r7, r3
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_KEY_STATUS, 3);
   1a0ea:	f44f 2210 	mov.w	r2, #589824	; 0x90000
   1a0ee:	ab02      	add	r3, sp, #8
	bt_mesh_model_msg_init(&msg, OP_NET_KEY_STATUS);
   1a0f0:	a805      	add	r0, sp, #20
   1a0f2:	f248 0144 	movw	r1, #32836	; 0x8044
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_KEY_STATUS, 3);
   1a0f6:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1a0fa:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_NET_KEY_STATUS);
   1a0fc:	f7ff ff5b 	bl	19fb6 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   1a100:	4639      	mov	r1, r7
   1a102:	a805      	add	r0, sp, #20
   1a104:	f002 ff70 	bl	1cfe8 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, idx);
   1a108:	4621      	mov	r1, r4
   1a10a:	a805      	add	r0, sp, #20
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1a10c:	2400      	movs	r4, #0
	net_buf_simple_add_le16(&msg, idx);
   1a10e:	f002 ff73 	bl	1cff8 <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1a112:	9400      	str	r4, [sp, #0]
   1a114:	4623      	mov	r3, r4
   1a116:	aa05      	add	r2, sp, #20
   1a118:	4631      	mov	r1, r6
   1a11a:	4628      	mov	r0, r5
   1a11c:	f7ff ff07 	bl	19f2e <bt_mesh_model_send>
}
   1a120:	4620      	mov	r0, r4
   1a122:	b009      	add	sp, #36	; 0x24
   1a124:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001a126 <send_app_key_status>:
{
   1a126:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a128:	b089      	sub	sp, #36	; 0x24
   1a12a:	4605      	mov	r5, r0
   1a12c:	460e      	mov	r6, r1
   1a12e:	4617      	mov	r7, r2
   1a130:	461c      	mov	r4, r3
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_APP_KEY_STATUS, 4);
   1a132:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
   1a136:	ab02      	add	r3, sp, #8
	bt_mesh_model_msg_init(&msg, OP_APP_KEY_STATUS);
   1a138:	a805      	add	r0, sp, #20
   1a13a:	f248 0103 	movw	r1, #32771	; 0x8003
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_APP_KEY_STATUS, 4);
   1a13e:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1a142:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_APP_KEY_STATUS);
   1a144:	f7ff ff37 	bl	19fb6 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   1a148:	4639      	mov	r1, r7
   1a14a:	a805      	add	r0, sp, #20
   1a14c:	f002 ff4c 	bl	1cfe8 <net_buf_simple_add_u8>
	key_idx_pack(&msg, net_idx, app_idx);
   1a150:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
   1a154:	4622      	mov	r2, r4
   1a156:	a805      	add	r0, sp, #20
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1a158:	2400      	movs	r4, #0
	key_idx_pack(&msg, net_idx, app_idx);
   1a15a:	f7ff ff5f 	bl	1a01c <key_idx_pack>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1a15e:	9400      	str	r4, [sp, #0]
   1a160:	4623      	mov	r3, r4
   1a162:	aa05      	add	r2, sp, #20
   1a164:	4631      	mov	r1, r6
   1a166:	4628      	mov	r0, r5
   1a168:	f7ff fee1 	bl	19f2e <bt_mesh_model_send>
}
   1a16c:	4620      	mov	r0, r4
   1a16e:	b009      	add	sp, #36	; 0x24
   1a170:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001a172 <krp_set>:
{
   1a172:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a174:	4606      	mov	r6, r0
   1a176:	b085      	sub	sp, #20
	idx = net_buf_simple_pull_le16(buf);
   1a178:	4610      	mov	r0, r2
{
   1a17a:	4615      	mov	r5, r2
   1a17c:	460f      	mov	r7, r1
	idx = net_buf_simple_pull_le16(buf);
   1a17e:	f002 ffb7 	bl	1d0f0 <net_buf_simple_pull_le16>
   1a182:	4604      	mov	r4, r0
	phase = net_buf_simple_pull_u8(buf);
   1a184:	4628      	mov	r0, r5
   1a186:	f002 ffab 	bl	1d0e0 <net_buf_simple_pull_u8>
	if (idx > 0xfff) {
   1a18a:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
	phase = net_buf_simple_pull_u8(buf);
   1a18e:	f88d 000f 	strb.w	r0, [sp, #15]
	if (idx > 0xfff) {
   1a192:	d303      	bcc.n	1a19c <krp_set+0x2a>
		return -EINVAL;
   1a194:	f06f 0015 	mvn.w	r0, #21
}
   1a198:	b005      	add	sp, #20
   1a19a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = bt_mesh_subnet_kr_phase_set(idx, &phase);
   1a19c:	f10d 010f 	add.w	r1, sp, #15
   1a1a0:	4620      	mov	r0, r4
   1a1a2:	f7ee fd69 	bl	8c78 <bt_mesh_subnet_kr_phase_set>
	if (status == STATUS_CANNOT_UPDATE) {
   1a1a6:	280b      	cmp	r0, #11
   1a1a8:	d0f4      	beq.n	1a194 <krp_set+0x22>
	return send_krp_status(model, ctx, idx, phase, status);
   1a1aa:	9000      	str	r0, [sp, #0]
   1a1ac:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1a1b0:	4622      	mov	r2, r4
   1a1b2:	4639      	mov	r1, r7
   1a1b4:	4630      	mov	r0, r6
   1a1b6:	f7ff ff40 	bl	1a03a <send_krp_status>
   1a1ba:	e7ed      	b.n	1a198 <krp_set+0x26>

0001a1bc <krp_get>:
{
   1a1bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1a1be:	4605      	mov	r5, r0
	idx = net_buf_simple_pull_le16(buf);
   1a1c0:	4610      	mov	r0, r2
{
   1a1c2:	460e      	mov	r6, r1
	idx = net_buf_simple_pull_le16(buf);
   1a1c4:	f002 ff94 	bl	1d0f0 <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
   1a1c8:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
   1a1cc:	4604      	mov	r4, r0
	if (idx > 0xfff) {
   1a1ce:	d20d      	bcs.n	1a1ec <krp_get+0x30>
	status = bt_mesh_subnet_kr_phase_get(idx, &kr_phase);
   1a1d0:	f10d 010f 	add.w	r1, sp, #15
   1a1d4:	f7ff fa68 	bl	196a8 <bt_mesh_subnet_kr_phase_get>
	return send_krp_status(model, ctx, idx, kr_phase, status);
   1a1d8:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1a1dc:	9000      	str	r0, [sp, #0]
   1a1de:	4622      	mov	r2, r4
   1a1e0:	4631      	mov	r1, r6
   1a1e2:	4628      	mov	r0, r5
   1a1e4:	f7ff ff29 	bl	1a03a <send_krp_status>
}
   1a1e8:	b004      	add	sp, #16
   1a1ea:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   1a1ec:	f06f 0015 	mvn.w	r0, #21
   1a1f0:	e7fa      	b.n	1a1e8 <krp_get+0x2c>

0001a1f2 <lpn_timeout_get>:
{
   1a1f2:	b570      	push	{r4, r5, r6, lr}
   1a1f4:	b088      	sub	sp, #32
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_LPN_TIMEOUT_STATUS, 5);
   1a1f6:	ab02      	add	r3, sp, #8
{
   1a1f8:	4605      	mov	r5, r0
   1a1fa:	460e      	mov	r6, r1
	lpn_addr = net_buf_simple_pull_le16(buf);
   1a1fc:	4610      	mov	r0, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_LPN_TIMEOUT_STATUS, 5);
   1a1fe:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
   1a202:	e9cd 1306 	strd	r1, r3, [sp, #24]
   1a206:	9305      	str	r3, [sp, #20]
	lpn_addr = net_buf_simple_pull_le16(buf);
   1a208:	f002 ff72 	bl	1d0f0 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(lpn_addr)) {
   1a20c:	b203      	sxth	r3, r0
   1a20e:	2b00      	cmp	r3, #0
	lpn_addr = net_buf_simple_pull_le16(buf);
   1a210:	4604      	mov	r4, r0
	if (!BT_MESH_ADDR_IS_UNICAST(lpn_addr)) {
   1a212:	dd17      	ble.n	1a244 <lpn_timeout_get+0x52>
	bt_mesh_model_msg_init(&msg, OP_LPN_TIMEOUT_STATUS);
   1a214:	f248 012e 	movw	r1, #32814	; 0x802e
   1a218:	a805      	add	r0, sp, #20
   1a21a:	f7ff fecc 	bl	19fb6 <bt_mesh_model_msg_init>
	net_buf_simple_add_le16(&msg, lpn_addr);
   1a21e:	4621      	mov	r1, r4
   1a220:	a805      	add	r0, sp, #20
   1a222:	f002 fee9 	bl	1cff8 <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1a226:	2400      	movs	r4, #0
	net_buf_simple_add_le24(&msg, timeout_steps);
   1a228:	2100      	movs	r1, #0
   1a22a:	a805      	add	r0, sp, #20
   1a22c:	f002 fef8 	bl	1d020 <net_buf_simple_add_le24>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1a230:	9400      	str	r4, [sp, #0]
   1a232:	4623      	mov	r3, r4
   1a234:	aa05      	add	r2, sp, #20
   1a236:	4631      	mov	r1, r6
   1a238:	4628      	mov	r0, r5
   1a23a:	f7ff fe78 	bl	19f2e <bt_mesh_model_send>
	return 0;
   1a23e:	4620      	mov	r0, r4
}
   1a240:	b008      	add	sp, #32
   1a242:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   1a244:	f06f 0015 	mvn.w	r0, #21
   1a248:	e7fa      	b.n	1a240 <lpn_timeout_get+0x4e>

0001a24a <send_friend_status>:
{
   1a24a:	b570      	push	{r4, r5, r6, lr}
   1a24c:	b088      	sub	sp, #32
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_FRIEND_STATUS, 1);
   1a24e:	ab03      	add	r3, sp, #12
   1a250:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   1a254:	4605      	mov	r5, r0
   1a256:	460e      	mov	r6, r1
	bt_mesh_model_msg_init(&msg, OP_FRIEND_STATUS);
   1a258:	a805      	add	r0, sp, #20
   1a25a:	f248 0111 	movw	r1, #32785	; 0x8011
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_FRIEND_STATUS, 1);
   1a25e:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1a262:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_FRIEND_STATUS);
   1a264:	f7ff fea7 	bl	19fb6 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_friend_get());
   1a268:	f7ff f8b5 	bl	193d6 <bt_mesh_friend_get>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1a26c:	2400      	movs	r4, #0
	net_buf_simple_add_u8(&msg, bt_mesh_friend_get());
   1a26e:	4601      	mov	r1, r0
   1a270:	a805      	add	r0, sp, #20
   1a272:	f002 feb9 	bl	1cfe8 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1a276:	9400      	str	r4, [sp, #0]
   1a278:	4623      	mov	r3, r4
   1a27a:	aa05      	add	r2, sp, #20
   1a27c:	4631      	mov	r1, r6
   1a27e:	4628      	mov	r0, r5
   1a280:	f7ff fe55 	bl	19f2e <bt_mesh_model_send>
}
   1a284:	4620      	mov	r0, r4
   1a286:	b008      	add	sp, #32
   1a288:	bd70      	pop	{r4, r5, r6, pc}

0001a28a <friend_set>:
{
   1a28a:	b538      	push	{r3, r4, r5, lr}
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   1a28c:	6813      	ldr	r3, [r2, #0]
{
   1a28e:	4604      	mov	r4, r0
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   1a290:	7818      	ldrb	r0, [r3, #0]
   1a292:	2801      	cmp	r0, #1
{
   1a294:	460d      	mov	r5, r1
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   1a296:	d807      	bhi.n	1a2a8 <friend_set+0x1e>
	(void)bt_mesh_friend_set(buf->data[0]);
   1a298:	f7ff f89a 	bl	193d0 <bt_mesh_friend_set>
	return send_friend_status(model, ctx);
   1a29c:	4629      	mov	r1, r5
   1a29e:	4620      	mov	r0, r4
}
   1a2a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return send_friend_status(model, ctx);
   1a2a4:	f7ff bfd1 	b.w	1a24a <send_friend_status>
}
   1a2a8:	f06f 0015 	mvn.w	r0, #21
   1a2ac:	bd38      	pop	{r3, r4, r5, pc}

0001a2ae <friend_get>:
	return send_friend_status(model, ctx);
   1a2ae:	f7ff bfcc 	b.w	1a24a <send_friend_status>

0001a2b2 <reset_send_end>:
	bt_mesh_reset();
   1a2b2:	f7ed bc8f 	b.w	7bd4 <bt_mesh_reset>

0001a2b6 <reset_send_start>:
	if (err) {
   1a2b6:	b109      	cbz	r1, 1a2bc <reset_send_start+0x6>
		bt_mesh_reset();
   1a2b8:	f7ed bc8c 	b.w	7bd4 <bt_mesh_reset>
}
   1a2bc:	4770      	bx	lr

0001a2be <send_mod_sub_status>:
{
   1a2be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a2c2:	b08b      	sub	sp, #44	; 0x2c
   1a2c4:	4617      	mov	r7, r2
   1a2c6:	461c      	mov	r4, r3
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_SUB_STATUS, 9);
   1a2c8:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1a2cc:	ab06      	add	r3, sp, #24
{
   1a2ce:	4605      	mov	r5, r0
   1a2d0:	460e      	mov	r6, r1
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_STATUS);
   1a2d2:	a803      	add	r0, sp, #12
   1a2d4:	f248 011f 	movw	r1, #32799	; 0x801f
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_SUB_STATUS, 9);
   1a2d8:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1a2dc:	9303      	str	r3, [sp, #12]
{
   1a2de:	f89d 9050 	ldrb.w	r9, [sp, #80]	; 0x50
   1a2e2:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_STATUS);
   1a2e6:	f7ff fe66 	bl	19fb6 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   1a2ea:	4639      	mov	r1, r7
   1a2ec:	a803      	add	r0, sp, #12
   1a2ee:	f002 fe7b 	bl	1cfe8 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, elem_addr);
   1a2f2:	4621      	mov	r1, r4
   1a2f4:	a803      	add	r0, sp, #12
   1a2f6:	f002 fe7f 	bl	1cff8 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, sub_addr);
   1a2fa:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   1a2fe:	a803      	add	r0, sp, #12
   1a300:	f002 fe7a 	bl	1cff8 <net_buf_simple_add_le16>
	if (vnd) {
   1a304:	f1b9 0f00 	cmp.w	r9, #0
   1a308:	d013      	beq.n	1a332 <send_mod_sub_status+0x74>
		memcpy(net_buf_simple_add(&msg, 4), mod_id, 4);
   1a30a:	2104      	movs	r1, #4
   1a30c:	a803      	add	r0, sp, #12
   1a30e:	f002 fe5c 	bl	1cfca <net_buf_simple_add>
   1a312:	2204      	movs	r2, #4
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1a314:	2400      	movs	r4, #0
		memcpy(net_buf_simple_add(&msg, 2), mod_id, 2);
   1a316:	4641      	mov	r1, r8
   1a318:	f7fc ff9c 	bl	17254 <memcpy>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1a31c:	9400      	str	r4, [sp, #0]
   1a31e:	4623      	mov	r3, r4
   1a320:	aa03      	add	r2, sp, #12
   1a322:	4631      	mov	r1, r6
   1a324:	4628      	mov	r0, r5
   1a326:	f7ff fe02 	bl	19f2e <bt_mesh_model_send>
}
   1a32a:	4620      	mov	r0, r4
   1a32c:	b00b      	add	sp, #44	; 0x2c
   1a32e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		memcpy(net_buf_simple_add(&msg, 2), mod_id, 2);
   1a332:	2102      	movs	r1, #2
   1a334:	a803      	add	r0, sp, #12
   1a336:	f002 fe48 	bl	1cfca <net_buf_simple_add>
   1a33a:	2202      	movs	r2, #2
   1a33c:	e7ea      	b.n	1a314 <send_mod_sub_status+0x56>

0001a33e <node_identity_set>:
{
   1a33e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1a340:	4605      	mov	r5, r0
	idx = net_buf_simple_pull_le16(buf);
   1a342:	4610      	mov	r0, r2
{
   1a344:	460e      	mov	r6, r1
   1a346:	4617      	mov	r7, r2
	idx = net_buf_simple_pull_le16(buf);
   1a348:	f002 fed2 	bl	1d0f0 <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
   1a34c:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
   1a350:	4604      	mov	r4, r0
	if (idx > 0xfff) {
   1a352:	d303      	bcc.n	1a35c <node_identity_set+0x1e>
		return -EINVAL;
   1a354:	f06f 0015 	mvn.w	r0, #21
}
   1a358:	b003      	add	sp, #12
   1a35a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	node_id = net_buf_simple_pull_u8(buf);
   1a35c:	4638      	mov	r0, r7
   1a35e:	f002 febf 	bl	1d0e0 <net_buf_simple_pull_u8>
	if (node_id != 0x00 && node_id != 0x01) {
   1a362:	2801      	cmp	r0, #1
	node_id = net_buf_simple_pull_u8(buf);
   1a364:	4607      	mov	r7, r0
	if (node_id != 0x00 && node_id != 0x01) {
   1a366:	d8f5      	bhi.n	1a354 <node_identity_set+0x16>
	status = bt_mesh_subnet_node_id_set(idx, node_id);
   1a368:	4601      	mov	r1, r0
   1a36a:	4620      	mov	r0, r4
   1a36c:	f7ff f9a7 	bl	196be <bt_mesh_subnet_node_id_set>
	if (status == STATUS_INVALID_NETKEY) {
   1a370:	2804      	cmp	r0, #4
	status = bt_mesh_subnet_node_id_set(idx, node_id);
   1a372:	4602      	mov	r2, r0
	if (status == STATUS_INVALID_NETKEY) {
   1a374:	d103      	bne.n	1a37e <node_identity_set+0x40>
		return send_node_id_status(model, ctx, status, idx,
   1a376:	2300      	movs	r3, #0
   1a378:	9300      	str	r3, [sp, #0]
	return send_node_id_status(model, ctx, status, idx, node_id);
   1a37a:	4623      	mov	r3, r4
   1a37c:	e005      	b.n	1a38a <node_identity_set+0x4c>
	if (status == STATUS_FEAT_NOT_SUPP) {
   1a37e:	280a      	cmp	r0, #10
   1a380:	d108      	bne.n	1a394 <node_identity_set+0x56>
		return send_node_id_status(model, ctx, STATUS_SUCCESS, idx,
   1a382:	2302      	movs	r3, #2
   1a384:	9300      	str	r3, [sp, #0]
   1a386:	2200      	movs	r2, #0
   1a388:	4623      	mov	r3, r4
	return send_node_id_status(model, ctx, status, idx, node_id);
   1a38a:	4631      	mov	r1, r6
   1a38c:	4628      	mov	r0, r5
   1a38e:	f7ff fe7d 	bl	1a08c <send_node_id_status>
   1a392:	e7e1      	b.n	1a358 <node_identity_set+0x1a>
   1a394:	9700      	str	r7, [sp, #0]
   1a396:	e7f0      	b.n	1a37a <node_identity_set+0x3c>

0001a398 <node_identity_get>:
{
   1a398:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1a39a:	4605      	mov	r5, r0
	idx = net_buf_simple_pull_le16(buf);
   1a39c:	4610      	mov	r0, r2
{
   1a39e:	460e      	mov	r6, r1
	idx = net_buf_simple_pull_le16(buf);
   1a3a0:	f002 fea6 	bl	1d0f0 <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
   1a3a4:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
   1a3a8:	4604      	mov	r4, r0
	if (idx > 0xfff) {
   1a3aa:	d20e      	bcs.n	1a3ca <node_identity_get+0x32>
	status = bt_mesh_subnet_node_id_get(idx, &node_id);
   1a3ac:	f10d 010f 	add.w	r1, sp, #15
   1a3b0:	f7ff f991 	bl	196d6 <bt_mesh_subnet_node_id_get>
	return send_node_id_status(model, ctx, status, idx, node_id);
   1a3b4:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1a3b8:	9300      	str	r3, [sp, #0]
	status = bt_mesh_subnet_node_id_get(idx, &node_id);
   1a3ba:	4602      	mov	r2, r0
	return send_node_id_status(model, ctx, status, idx, node_id);
   1a3bc:	4623      	mov	r3, r4
   1a3be:	4631      	mov	r1, r6
   1a3c0:	4628      	mov	r0, r5
   1a3c2:	f7ff fe63 	bl	1a08c <send_node_id_status>
}
   1a3c6:	b004      	add	sp, #16
   1a3c8:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   1a3ca:	f06f 0015 	mvn.w	r0, #21
   1a3ce:	e7fa      	b.n	1a3c6 <node_identity_get+0x2e>

0001a3d0 <net_key_get>:
{
   1a3d0:	b570      	push	{r4, r5, r6, lr}
   1a3d2:	b088      	sub	sp, #32
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_KEY_LIST,
   1a3d4:	ab03      	add	r3, sp, #12
   1a3d6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
{
   1a3da:	4605      	mov	r5, r0
   1a3dc:	460e      	mov	r6, r1
	bt_mesh_model_msg_init(&msg, OP_NET_KEY_LIST);
   1a3de:	a805      	add	r0, sp, #20
   1a3e0:	f248 0143 	movw	r1, #32835	; 0x8043
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_KEY_LIST,
   1a3e4:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1a3e8:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_NET_KEY_LIST);
   1a3ea:	f7ff fde4 	bl	19fb6 <bt_mesh_model_msg_init>
	count = bt_mesh_subnets_get(net_idx, ARRAY_SIZE(net_idx), 0);
   1a3ee:	2200      	movs	r2, #0
   1a3f0:	2101      	movs	r1, #1
   1a3f2:	a802      	add	r0, sp, #8
   1a3f4:	f7ee fc1a 	bl	8c2c <bt_mesh_subnets_get>
	if (count < 0 || count > ARRAY_SIZE(net_idx)) {
   1a3f8:	b120      	cbz	r0, 1a404 <net_key_get+0x34>
		net_buf_simple_add_le16(&msg, net_idx[i]);
   1a3fa:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   1a3fe:	a805      	add	r0, sp, #20
   1a400:	f002 fdfa 	bl	1cff8 <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1a404:	2400      	movs	r4, #0
   1a406:	9400      	str	r4, [sp, #0]
   1a408:	4623      	mov	r3, r4
   1a40a:	aa05      	add	r2, sp, #20
   1a40c:	4631      	mov	r1, r6
   1a40e:	4628      	mov	r0, r5
   1a410:	f7ff fd8d 	bl	19f2e <bt_mesh_model_send>
}
   1a414:	4620      	mov	r0, r4
   1a416:	b008      	add	sp, #32
   1a418:	bd70      	pop	{r4, r5, r6, pc}

0001a41a <net_key_del>:
{
   1a41a:	b570      	push	{r4, r5, r6, lr}
   1a41c:	4606      	mov	r6, r0
	del_idx = net_buf_simple_pull_le16(buf);
   1a41e:	4610      	mov	r0, r2
{
   1a420:	460c      	mov	r4, r1
	del_idx = net_buf_simple_pull_le16(buf);
   1a422:	f002 fe65 	bl	1d0f0 <net_buf_simple_pull_le16>
	if (del_idx > 0xfff) {
   1a426:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	del_idx = net_buf_simple_pull_le16(buf);
   1a42a:	4605      	mov	r5, r0
	if (del_idx > 0xfff) {
   1a42c:	d20e      	bcs.n	1a44c <net_key_del+0x32>
	if (ctx->net_idx == del_idx) {
   1a42e:	8822      	ldrh	r2, [r4, #0]
   1a430:	4282      	cmp	r2, r0
   1a432:	d106      	bne.n	1a442 <net_key_del+0x28>
		return send_net_key_status(model, ctx, del_idx,
   1a434:	230c      	movs	r3, #12
	return send_net_key_status(model, ctx, del_idx, STATUS_SUCCESS);
   1a436:	4621      	mov	r1, r4
   1a438:	4630      	mov	r0, r6
}
   1a43a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return send_net_key_status(model, ctx, del_idx, STATUS_SUCCESS);
   1a43e:	f7ff be4e 	b.w	1a0de <send_net_key_status>
	(void)bt_mesh_subnet_del(del_idx);
   1a442:	f7ff f927 	bl	19694 <bt_mesh_subnet_del>
	return send_net_key_status(model, ctx, del_idx, STATUS_SUCCESS);
   1a446:	2300      	movs	r3, #0
   1a448:	462a      	mov	r2, r5
   1a44a:	e7f4      	b.n	1a436 <net_key_del+0x1c>
}
   1a44c:	f06f 0015 	mvn.w	r0, #21
   1a450:	bd70      	pop	{r4, r5, r6, pc}

0001a452 <net_key_update>:
{
   1a452:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a456:	4606      	mov	r6, r0
	idx = net_buf_simple_pull_le16(buf);
   1a458:	4610      	mov	r0, r2
{
   1a45a:	460f      	mov	r7, r1
   1a45c:	4615      	mov	r5, r2
	idx = net_buf_simple_pull_le16(buf);
   1a45e:	f002 fe47 	bl	1d0f0 <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
   1a462:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
   1a466:	4604      	mov	r4, r0
	if (idx > 0xfff) {
   1a468:	d20a      	bcs.n	1a480 <net_key_update+0x2e>
	status = bt_mesh_subnet_update(idx, buf->data);
   1a46a:	6829      	ldr	r1, [r5, #0]
   1a46c:	f7ff f8e1 	bl	19632 <bt_mesh_subnet_update>
	return send_net_key_status(model, ctx, idx, status);
   1a470:	4622      	mov	r2, r4
	status = bt_mesh_subnet_update(idx, buf->data);
   1a472:	4603      	mov	r3, r0
	return send_net_key_status(model, ctx, idx, status);
   1a474:	4639      	mov	r1, r7
   1a476:	4630      	mov	r0, r6
}
   1a478:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return send_net_key_status(model, ctx, idx, status);
   1a47c:	f7ff be2f 	b.w	1a0de <send_net_key_status>
}
   1a480:	f06f 0015 	mvn.w	r0, #21
   1a484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001a488 <net_key_add>:
{
   1a488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a48c:	4606      	mov	r6, r0
	idx = net_buf_simple_pull_le16(buf);
   1a48e:	4610      	mov	r0, r2
{
   1a490:	460f      	mov	r7, r1
   1a492:	4615      	mov	r5, r2
	idx = net_buf_simple_pull_le16(buf);
   1a494:	f002 fe2c 	bl	1d0f0 <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
   1a498:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
   1a49c:	4604      	mov	r4, r0
	if (idx > 0xfff) {
   1a49e:	d20a      	bcs.n	1a4b6 <net_key_add+0x2e>
	status = bt_mesh_subnet_add(idx, buf->data);
   1a4a0:	6829      	ldr	r1, [r5, #0]
   1a4a2:	f7ee fb97 	bl	8bd4 <bt_mesh_subnet_add>
	return send_net_key_status(model, ctx, idx, status);
   1a4a6:	4622      	mov	r2, r4
	status = bt_mesh_subnet_add(idx, buf->data);
   1a4a8:	4603      	mov	r3, r0
	return send_net_key_status(model, ctx, idx, status);
   1a4aa:	4639      	mov	r1, r7
   1a4ac:	4630      	mov	r0, r6
}
   1a4ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return send_net_key_status(model, ctx, idx, status);
   1a4b2:	f7ff be14 	b.w	1a0de <send_net_key_status>
}
   1a4b6:	f06f 0015 	mvn.w	r0, #21
   1a4ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001a4be <send_mod_pub_status>:
{
   1a4be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a4c2:	b08b      	sub	sp, #44	; 0x2c
   1a4c4:	4692      	mov	sl, r2
   1a4c6:	f89d b058 	ldrb.w	fp, [sp, #88]	; 0x58
   1a4ca:	f89d 8050 	ldrb.w	r8, [sp, #80]	; 0x50
   1a4ce:	9c15      	ldr	r4, [sp, #84]	; 0x54
   1a4d0:	9f17      	ldr	r7, [sp, #92]	; 0x5c
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_PUB_STATUS, 14);
   1a4d2:	f44f 12a0 	mov.w	r2, #1310720	; 0x140000
{
   1a4d6:	4605      	mov	r5, r0
   1a4d8:	460e      	mov	r6, r1
	bt_mesh_model_msg_init(&msg, OP_MOD_PUB_STATUS);
   1a4da:	a802      	add	r0, sp, #8
   1a4dc:	f248 0119 	movw	r1, #32793	; 0x8019
{
   1a4e0:	4699      	mov	r9, r3
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_PUB_STATUS, 14);
   1a4e2:	ab05      	add	r3, sp, #20
   1a4e4:	e9cd 2303 	strd	r2, r3, [sp, #12]
   1a4e8:	9302      	str	r3, [sp, #8]
	bt_mesh_model_msg_init(&msg, OP_MOD_PUB_STATUS);
   1a4ea:	f7ff fd64 	bl	19fb6 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   1a4ee:	4659      	mov	r1, fp
   1a4f0:	a802      	add	r0, sp, #8
   1a4f2:	f002 fd79 	bl	1cfe8 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, elem_addr);
   1a4f6:	4651      	mov	r1, sl
   1a4f8:	a802      	add	r0, sp, #8
   1a4fa:	f002 fd7d 	bl	1cff8 <net_buf_simple_add_le16>
	if (status != STATUS_SUCCESS) {
   1a4fe:	f1bb 0f00 	cmp.w	fp, #0
   1a502:	d01e      	beq.n	1a542 <send_mod_pub_status+0x84>
		(void)memset(net_buf_simple_add(&msg, 7), 0, 7);
   1a504:	2107      	movs	r1, #7
   1a506:	a802      	add	r0, sp, #8
   1a508:	f002 fd5f 	bl	1cfca <net_buf_simple_add>
   1a50c:	2207      	movs	r2, #7
   1a50e:	2100      	movs	r1, #0
   1a510:	f7fc feab 	bl	1726a <memset>
	if (vnd) {
   1a514:	f1b8 0f00 	cmp.w	r8, #0
   1a518:	d035      	beq.n	1a586 <send_mod_pub_status+0xc8>
		memcpy(net_buf_simple_add(&msg, 4), mod_id, 4);
   1a51a:	2104      	movs	r1, #4
   1a51c:	a802      	add	r0, sp, #8
   1a51e:	f002 fd54 	bl	1cfca <net_buf_simple_add>
   1a522:	2204      	movs	r2, #4
	if (bt_mesh_model_send(cfg_mod, ctx, &msg, NULL, NULL)) {
   1a524:	2400      	movs	r4, #0
		memcpy(net_buf_simple_add(&msg, 2), mod_id, 2);
   1a526:	4639      	mov	r1, r7
   1a528:	f7fc fe94 	bl	17254 <memcpy>
	if (bt_mesh_model_send(cfg_mod, ctx, &msg, NULL, NULL)) {
   1a52c:	9400      	str	r4, [sp, #0]
   1a52e:	4623      	mov	r3, r4
   1a530:	aa02      	add	r2, sp, #8
   1a532:	4631      	mov	r1, r6
   1a534:	4628      	mov	r0, r5
   1a536:	f7ff fcfa 	bl	19f2e <bt_mesh_model_send>
}
   1a53a:	4620      	mov	r0, r4
   1a53c:	b00b      	add	sp, #44	; 0x2c
   1a53e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		net_buf_simple_add_le16(&msg, pub_addr);
   1a542:	4649      	mov	r1, r9
   1a544:	a802      	add	r0, sp, #8
   1a546:	f002 fd57 	bl	1cff8 <net_buf_simple_add_le16>
		idx_cred = mod->pub->key | (uint16_t)mod->pub->cred << 12;
   1a54a:	68a3      	ldr	r3, [r4, #8]
   1a54c:	79d9      	ldrb	r1, [r3, #7]
   1a54e:	88db      	ldrh	r3, [r3, #6]
   1a550:	f3c1 1100 	ubfx	r1, r1, #4, #1
   1a554:	f3c3 030b 	ubfx	r3, r3, #0, #12
   1a558:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
		net_buf_simple_add_le16(&msg, idx_cred);
   1a55c:	a802      	add	r0, sp, #8
   1a55e:	f3c1 010c 	ubfx	r1, r1, #0, #13
   1a562:	f002 fd49 	bl	1cff8 <net_buf_simple_add_le16>
		net_buf_simple_add_u8(&msg, mod->pub->ttl);
   1a566:	68a3      	ldr	r3, [r4, #8]
   1a568:	a802      	add	r0, sp, #8
   1a56a:	7a19      	ldrb	r1, [r3, #8]
   1a56c:	f002 fd3c 	bl	1cfe8 <net_buf_simple_add_u8>
		net_buf_simple_add_u8(&msg, mod->pub->period);
   1a570:	68a3      	ldr	r3, [r4, #8]
   1a572:	a802      	add	r0, sp, #8
   1a574:	7a99      	ldrb	r1, [r3, #10]
   1a576:	f002 fd37 	bl	1cfe8 <net_buf_simple_add_u8>
		net_buf_simple_add_u8(&msg, mod->pub->retransmit);
   1a57a:	68a3      	ldr	r3, [r4, #8]
   1a57c:	a802      	add	r0, sp, #8
   1a57e:	7a59      	ldrb	r1, [r3, #9]
   1a580:	f002 fd32 	bl	1cfe8 <net_buf_simple_add_u8>
   1a584:	e7c6      	b.n	1a514 <send_mod_pub_status+0x56>
		memcpy(net_buf_simple_add(&msg, 2), mod_id, 2);
   1a586:	2102      	movs	r1, #2
   1a588:	a802      	add	r0, sp, #8
   1a58a:	f002 fd1e 	bl	1cfca <net_buf_simple_add>
   1a58e:	2202      	movs	r2, #2
   1a590:	e7c8      	b.n	1a524 <send_mod_pub_status+0x66>

0001a592 <relay_set>:
{
   1a592:	b570      	push	{r4, r5, r6, lr}
   1a594:	b088      	sub	sp, #32
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_RELAY_STATUS, 2);
   1a596:	ab03      	add	r3, sp, #12
{
   1a598:	460e      	mov	r6, r1
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_RELAY_STATUS, 2);
   1a59a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   1a59e:	e9cd 1306 	strd	r1, r3, [sp, #24]
   1a5a2:	9305      	str	r3, [sp, #20]
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   1a5a4:	6813      	ldr	r3, [r2, #0]
{
   1a5a6:	4605      	mov	r5, r0
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   1a5a8:	7818      	ldrb	r0, [r3, #0]
   1a5aa:	2801      	cmp	r0, #1
   1a5ac:	d81e      	bhi.n	1a5ec <relay_set+0x5a>
	(void)bt_mesh_relay_set(buf->data[0], buf->data[1]);
   1a5ae:	7859      	ldrb	r1, [r3, #1]
   1a5b0:	f7ed fc06 	bl	7dc0 <bt_mesh_relay_set>
	bt_mesh_model_msg_init(&msg, OP_RELAY_STATUS);
   1a5b4:	f248 0128 	movw	r1, #32808	; 0x8028
   1a5b8:	a805      	add	r0, sp, #20
   1a5ba:	f7ff fcfc 	bl	19fb6 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_relay_get());
   1a5be:	f7ed fc39 	bl	7e34 <bt_mesh_relay_get>
   1a5c2:	4601      	mov	r1, r0
   1a5c4:	a805      	add	r0, sp, #20
   1a5c6:	f002 fd0f 	bl	1cfe8 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, bt_mesh_relay_retransmit_get());
   1a5ca:	f7ed fc3f 	bl	7e4c <bt_mesh_relay_retransmit_get>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1a5ce:	2400      	movs	r4, #0
	net_buf_simple_add_u8(&msg, bt_mesh_relay_retransmit_get());
   1a5d0:	4601      	mov	r1, r0
   1a5d2:	a805      	add	r0, sp, #20
   1a5d4:	f002 fd08 	bl	1cfe8 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1a5d8:	9400      	str	r4, [sp, #0]
   1a5da:	4623      	mov	r3, r4
   1a5dc:	aa05      	add	r2, sp, #20
   1a5de:	4631      	mov	r1, r6
   1a5e0:	4628      	mov	r0, r5
   1a5e2:	f7ff fca4 	bl	19f2e <bt_mesh_model_send>
	return 0;
   1a5e6:	4620      	mov	r0, r4
}
   1a5e8:	b008      	add	sp, #32
   1a5ea:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   1a5ec:	f06f 0015 	mvn.w	r0, #21
   1a5f0:	e7fa      	b.n	1a5e8 <relay_set+0x56>

0001a5f2 <relay_get>:
{
   1a5f2:	b570      	push	{r4, r5, r6, lr}
   1a5f4:	b088      	sub	sp, #32
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_RELAY_STATUS, 2);
   1a5f6:	ab03      	add	r3, sp, #12
   1a5f8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
{
   1a5fc:	4605      	mov	r5, r0
   1a5fe:	460e      	mov	r6, r1
	bt_mesh_model_msg_init(&msg, OP_RELAY_STATUS);
   1a600:	a805      	add	r0, sp, #20
   1a602:	f248 0128 	movw	r1, #32808	; 0x8028
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_RELAY_STATUS, 2);
   1a606:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1a60a:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_RELAY_STATUS);
   1a60c:	f7ff fcd3 	bl	19fb6 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_relay_get());
   1a610:	f7ed fc10 	bl	7e34 <bt_mesh_relay_get>
   1a614:	4601      	mov	r1, r0
   1a616:	a805      	add	r0, sp, #20
   1a618:	f002 fce6 	bl	1cfe8 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, bt_mesh_relay_retransmit_get());
   1a61c:	f7ed fc16 	bl	7e4c <bt_mesh_relay_retransmit_get>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1a620:	2400      	movs	r4, #0
	net_buf_simple_add_u8(&msg, bt_mesh_relay_retransmit_get());
   1a622:	4601      	mov	r1, r0
   1a624:	a805      	add	r0, sp, #20
   1a626:	f002 fcdf 	bl	1cfe8 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1a62a:	9400      	str	r4, [sp, #0]
   1a62c:	4623      	mov	r3, r4
   1a62e:	aa05      	add	r2, sp, #20
   1a630:	4631      	mov	r1, r6
   1a632:	4628      	mov	r0, r5
   1a634:	f7ff fc7b 	bl	19f2e <bt_mesh_model_send>
}
   1a638:	4620      	mov	r0, r4
   1a63a:	b008      	add	sp, #32
   1a63c:	bd70      	pop	{r4, r5, r6, pc}

0001a63e <net_transmit_set>:
{
   1a63e:	b570      	push	{r4, r5, r6, lr}
   1a640:	b088      	sub	sp, #32
   1a642:	4614      	mov	r4, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_TRANSMIT_STATUS, 1);
   1a644:	ab03      	add	r3, sp, #12
   1a646:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
   1a64a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1a64e:	9305      	str	r3, [sp, #20]
	bt_mesh_net_transmit_set(buf->data[0]);
   1a650:	6823      	ldr	r3, [r4, #0]
{
   1a652:	4605      	mov	r5, r0
	bt_mesh_net_transmit_set(buf->data[0]);
   1a654:	7818      	ldrb	r0, [r3, #0]
{
   1a656:	460e      	mov	r6, r1
	bt_mesh_net_transmit_set(buf->data[0]);
   1a658:	f7ed fba2 	bl	7da0 <bt_mesh_net_transmit_set>
	bt_mesh_model_msg_init(&msg, OP_NET_TRANSMIT_STATUS);
   1a65c:	a805      	add	r0, sp, #20
   1a65e:	f248 0125 	movw	r1, #32805	; 0x8025
   1a662:	f7ff fca8 	bl	19fb6 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, buf->data[0]);
   1a666:	6823      	ldr	r3, [r4, #0]
   1a668:	a805      	add	r0, sp, #20
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1a66a:	2400      	movs	r4, #0
	net_buf_simple_add_u8(&msg, buf->data[0]);
   1a66c:	7819      	ldrb	r1, [r3, #0]
   1a66e:	f002 fcbb 	bl	1cfe8 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1a672:	9400      	str	r4, [sp, #0]
   1a674:	4623      	mov	r3, r4
   1a676:	aa05      	add	r2, sp, #20
   1a678:	4631      	mov	r1, r6
   1a67a:	4628      	mov	r0, r5
   1a67c:	f7ff fc57 	bl	19f2e <bt_mesh_model_send>
}
   1a680:	4620      	mov	r0, r4
   1a682:	b008      	add	sp, #32
   1a684:	bd70      	pop	{r4, r5, r6, pc}

0001a686 <net_transmit_get>:
{
   1a686:	b570      	push	{r4, r5, r6, lr}
   1a688:	b088      	sub	sp, #32
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_TRANSMIT_STATUS, 1);
   1a68a:	ab03      	add	r3, sp, #12
   1a68c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   1a690:	4605      	mov	r5, r0
   1a692:	460e      	mov	r6, r1
	bt_mesh_model_msg_init(&msg, OP_NET_TRANSMIT_STATUS);
   1a694:	a805      	add	r0, sp, #20
   1a696:	f248 0125 	movw	r1, #32805	; 0x8025
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_TRANSMIT_STATUS, 1);
   1a69a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1a69e:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_NET_TRANSMIT_STATUS);
   1a6a0:	f7ff fc89 	bl	19fb6 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_net_transmit_get());
   1a6a4:	f7ed fb86 	bl	7db4 <bt_mesh_net_transmit_get>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1a6a8:	2400      	movs	r4, #0
	net_buf_simple_add_u8(&msg, bt_mesh_net_transmit_get());
   1a6aa:	4601      	mov	r1, r0
   1a6ac:	a805      	add	r0, sp, #20
   1a6ae:	f002 fc9b 	bl	1cfe8 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1a6b2:	9400      	str	r4, [sp, #0]
   1a6b4:	4623      	mov	r3, r4
   1a6b6:	aa05      	add	r2, sp, #20
   1a6b8:	4631      	mov	r1, r6
   1a6ba:	4628      	mov	r0, r5
   1a6bc:	f7ff fc37 	bl	19f2e <bt_mesh_model_send>
}
   1a6c0:	4620      	mov	r0, r4
   1a6c2:	b008      	add	sp, #32
   1a6c4:	bd70      	pop	{r4, r5, r6, pc}

0001a6c6 <send_gatt_proxy_status>:
{
   1a6c6:	b570      	push	{r4, r5, r6, lr}
   1a6c8:	b088      	sub	sp, #32
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_GATT_PROXY_STATUS, 1);
   1a6ca:	ab03      	add	r3, sp, #12
   1a6cc:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   1a6d0:	4605      	mov	r5, r0
   1a6d2:	460e      	mov	r6, r1
	bt_mesh_model_msg_init(&msg, OP_GATT_PROXY_STATUS);
   1a6d4:	a805      	add	r0, sp, #20
   1a6d6:	f248 0114 	movw	r1, #32788	; 0x8014
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_GATT_PROXY_STATUS, 1);
   1a6da:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1a6de:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_GATT_PROXY_STATUS);
   1a6e0:	f7ff fc69 	bl	19fb6 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_gatt_proxy_get());
   1a6e4:	f7fe fe72 	bl	193cc <bt_mesh_gatt_proxy_get>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1a6e8:	2400      	movs	r4, #0
	net_buf_simple_add_u8(&msg, bt_mesh_gatt_proxy_get());
   1a6ea:	4601      	mov	r1, r0
   1a6ec:	a805      	add	r0, sp, #20
   1a6ee:	f002 fc7b 	bl	1cfe8 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1a6f2:	9400      	str	r4, [sp, #0]
   1a6f4:	4623      	mov	r3, r4
   1a6f6:	aa05      	add	r2, sp, #20
   1a6f8:	4631      	mov	r1, r6
   1a6fa:	4628      	mov	r0, r5
   1a6fc:	f7ff fc17 	bl	19f2e <bt_mesh_model_send>
}
   1a700:	4620      	mov	r0, r4
   1a702:	b008      	add	sp, #32
   1a704:	bd70      	pop	{r4, r5, r6, pc}

0001a706 <gatt_proxy_set>:
{
   1a706:	b538      	push	{r3, r4, r5, lr}
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   1a708:	6813      	ldr	r3, [r2, #0]
{
   1a70a:	4604      	mov	r4, r0
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   1a70c:	7818      	ldrb	r0, [r3, #0]
   1a70e:	2801      	cmp	r0, #1
{
   1a710:	460d      	mov	r5, r1
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   1a712:	d807      	bhi.n	1a724 <gatt_proxy_set+0x1e>
	(void)bt_mesh_gatt_proxy_set(buf->data[0]);
   1a714:	f7fe fe57 	bl	193c6 <bt_mesh_gatt_proxy_set>
	return send_gatt_proxy_status(model, ctx);
   1a718:	4629      	mov	r1, r5
   1a71a:	4620      	mov	r0, r4
}
   1a71c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return send_gatt_proxy_status(model, ctx);
   1a720:	f7ff bfd1 	b.w	1a6c6 <send_gatt_proxy_status>
}
   1a724:	f06f 0015 	mvn.w	r0, #21
   1a728:	bd38      	pop	{r3, r4, r5, pc}

0001a72a <gatt_proxy_get>:
	return send_gatt_proxy_status(model, ctx);
   1a72a:	f7ff bfcc 	b.w	1a6c6 <send_gatt_proxy_status>

0001a72e <default_ttl_set>:
{
   1a72e:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a730:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_DEFAULT_TTL_STATUS, 1);
   1a732:	ab03      	add	r3, sp, #12
{
   1a734:	4615      	mov	r5, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_DEFAULT_TTL_STATUS, 1);
   1a736:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
   1a73a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1a73e:	9305      	str	r3, [sp, #20]
	err = bt_mesh_default_ttl_set(buf->data[0]);
   1a740:	682b      	ldr	r3, [r5, #0]
{
   1a742:	4606      	mov	r6, r0
	err = bt_mesh_default_ttl_set(buf->data[0]);
   1a744:	7818      	ldrb	r0, [r3, #0]
{
   1a746:	460f      	mov	r7, r1
	err = bt_mesh_default_ttl_set(buf->data[0]);
   1a748:	f7ed fb12 	bl	7d70 <bt_mesh_default_ttl_set>
	if (err) {
   1a74c:	4604      	mov	r4, r0
   1a74e:	b980      	cbnz	r0, 1a772 <default_ttl_set+0x44>
	bt_mesh_model_msg_init(&msg, OP_DEFAULT_TTL_STATUS);
   1a750:	f248 010e 	movw	r1, #32782	; 0x800e
   1a754:	a805      	add	r0, sp, #20
   1a756:	f7ff fc2e 	bl	19fb6 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, buf->data[0]);
   1a75a:	682b      	ldr	r3, [r5, #0]
   1a75c:	a805      	add	r0, sp, #20
   1a75e:	7819      	ldrb	r1, [r3, #0]
   1a760:	f002 fc42 	bl	1cfe8 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1a764:	9400      	str	r4, [sp, #0]
   1a766:	4623      	mov	r3, r4
   1a768:	aa05      	add	r2, sp, #20
   1a76a:	4639      	mov	r1, r7
   1a76c:	4630      	mov	r0, r6
   1a76e:	f7ff fbde 	bl	19f2e <bt_mesh_model_send>
}
   1a772:	4620      	mov	r0, r4
   1a774:	b009      	add	sp, #36	; 0x24
   1a776:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001a778 <default_ttl_get>:
{
   1a778:	b570      	push	{r4, r5, r6, lr}
   1a77a:	b088      	sub	sp, #32
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_DEFAULT_TTL_STATUS, 1);
   1a77c:	ab03      	add	r3, sp, #12
   1a77e:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   1a782:	4605      	mov	r5, r0
   1a784:	460e      	mov	r6, r1
	bt_mesh_model_msg_init(&msg, OP_DEFAULT_TTL_STATUS);
   1a786:	a805      	add	r0, sp, #20
   1a788:	f248 010e 	movw	r1, #32782	; 0x800e
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_DEFAULT_TTL_STATUS, 1);
   1a78c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1a790:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_DEFAULT_TTL_STATUS);
   1a792:	f7ff fc10 	bl	19fb6 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_default_ttl_get());
   1a796:	f7ed fafd 	bl	7d94 <bt_mesh_default_ttl_get>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1a79a:	2400      	movs	r4, #0
	net_buf_simple_add_u8(&msg, bt_mesh_default_ttl_get());
   1a79c:	4601      	mov	r1, r0
   1a79e:	a805      	add	r0, sp, #20
   1a7a0:	f002 fc22 	bl	1cfe8 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1a7a4:	9400      	str	r4, [sp, #0]
   1a7a6:	4623      	mov	r3, r4
   1a7a8:	aa05      	add	r2, sp, #20
   1a7aa:	4631      	mov	r1, r6
   1a7ac:	4628      	mov	r0, r5
   1a7ae:	f7ff fbbe 	bl	19f2e <bt_mesh_model_send>
}
   1a7b2:	4620      	mov	r0, r4
   1a7b4:	b008      	add	sp, #32
   1a7b6:	bd70      	pop	{r4, r5, r6, pc}

0001a7b8 <beacon_set>:
{
   1a7b8:	b570      	push	{r4, r5, r6, lr}
   1a7ba:	b088      	sub	sp, #32
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_BEACON_STATUS, 1);
   1a7bc:	ab03      	add	r3, sp, #12
{
   1a7be:	4614      	mov	r4, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_BEACON_STATUS, 1);
   1a7c0:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
   1a7c4:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1a7c8:	9305      	str	r3, [sp, #20]
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   1a7ca:	6823      	ldr	r3, [r4, #0]
{
   1a7cc:	4605      	mov	r5, r0
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   1a7ce:	7818      	ldrb	r0, [r3, #0]
   1a7d0:	2801      	cmp	r0, #1
{
   1a7d2:	460e      	mov	r6, r1
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   1a7d4:	d818      	bhi.n	1a808 <beacon_set+0x50>
	bt_mesh_beacon_set(buf->data[0]);
   1a7d6:	f000 0001 	and.w	r0, r0, #1
   1a7da:	f7ed fa95 	bl	7d08 <bt_mesh_beacon_set>
	bt_mesh_model_msg_init(&msg, OP_BEACON_STATUS);
   1a7de:	f248 010b 	movw	r1, #32779	; 0x800b
   1a7e2:	a805      	add	r0, sp, #20
   1a7e4:	f7ff fbe7 	bl	19fb6 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, buf->data[0]);
   1a7e8:	6823      	ldr	r3, [r4, #0]
   1a7ea:	a805      	add	r0, sp, #20
   1a7ec:	7819      	ldrb	r1, [r3, #0]
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1a7ee:	2400      	movs	r4, #0
	net_buf_simple_add_u8(&msg, buf->data[0]);
   1a7f0:	f002 fbfa 	bl	1cfe8 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1a7f4:	9400      	str	r4, [sp, #0]
   1a7f6:	4623      	mov	r3, r4
   1a7f8:	aa05      	add	r2, sp, #20
   1a7fa:	4631      	mov	r1, r6
   1a7fc:	4628      	mov	r0, r5
   1a7fe:	f7ff fb96 	bl	19f2e <bt_mesh_model_send>
	return 0;
   1a802:	4620      	mov	r0, r4
}
   1a804:	b008      	add	sp, #32
   1a806:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   1a808:	f06f 0015 	mvn.w	r0, #21
   1a80c:	e7fa      	b.n	1a804 <beacon_set+0x4c>

0001a80e <beacon_get>:
{
   1a80e:	b570      	push	{r4, r5, r6, lr}
   1a810:	b088      	sub	sp, #32
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_BEACON_STATUS, 1);
   1a812:	ab03      	add	r3, sp, #12
   1a814:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   1a818:	4605      	mov	r5, r0
   1a81a:	460e      	mov	r6, r1
	bt_mesh_model_msg_init(&msg, OP_BEACON_STATUS);
   1a81c:	a805      	add	r0, sp, #20
   1a81e:	f248 010b 	movw	r1, #32779	; 0x800b
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_BEACON_STATUS, 1);
   1a822:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1a826:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_BEACON_STATUS);
   1a828:	f7ff fbc5 	bl	19fb6 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_beacon_enabled());
   1a82c:	f7ed fa94 	bl	7d58 <bt_mesh_beacon_enabled>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1a830:	2400      	movs	r4, #0
	net_buf_simple_add_u8(&msg, bt_mesh_beacon_enabled());
   1a832:	4601      	mov	r1, r0
   1a834:	a805      	add	r0, sp, #20
   1a836:	f002 fbd7 	bl	1cfe8 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1a83a:	9400      	str	r4, [sp, #0]
   1a83c:	4623      	mov	r3, r4
   1a83e:	aa05      	add	r2, sp, #20
   1a840:	4631      	mov	r1, r6
   1a842:	4628      	mov	r0, r5
   1a844:	f7ff fb73 	bl	19f2e <bt_mesh_model_send>
}
   1a848:	4620      	mov	r0, r4
   1a84a:	b008      	add	sp, #32
   1a84c:	bd70      	pop	{r4, r5, r6, pc}

0001a84e <app_key_get>:
{
   1a84e:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a850:	b08b      	sub	sp, #44	; 0x2c
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_APP_KEY_LIST,
   1a852:	ab04      	add	r3, sp, #16
{
   1a854:	4605      	mov	r5, r0
   1a856:	460e      	mov	r6, r1
	get_idx = net_buf_simple_pull_le16(buf);
   1a858:	4610      	mov	r0, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_APP_KEY_LIST,
   1a85a:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
   1a85e:	e9cd 1308 	strd	r1, r3, [sp, #32]
   1a862:	9307      	str	r3, [sp, #28]
	get_idx = net_buf_simple_pull_le16(buf);
   1a864:	f002 fc44 	bl	1d0f0 <net_buf_simple_pull_le16>
	if (get_idx > 0xfff) {
   1a868:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	get_idx = net_buf_simple_pull_le16(buf);
   1a86c:	4604      	mov	r4, r0
	if (get_idx > 0xfff) {
   1a86e:	d22b      	bcs.n	1a8c8 <app_key_get+0x7a>
	bt_mesh_model_msg_init(&msg, OP_APP_KEY_LIST);
   1a870:	f248 0102 	movw	r1, #32770	; 0x8002
   1a874:	a807      	add	r0, sp, #28
   1a876:	f7ff fb9e 	bl	19fb6 <bt_mesh_model_msg_init>
	if (!bt_mesh_subnet_exists(get_idx)) {
   1a87a:	4620      	mov	r0, r4
   1a87c:	f7fe fed2 	bl	19624 <bt_mesh_subnet_exists>
		status = STATUS_SUCCESS;
   1a880:	2800      	cmp	r0, #0
   1a882:	bf0c      	ite	eq
   1a884:	2704      	moveq	r7, #4
   1a886:	2700      	movne	r7, #0
	net_buf_simple_add_u8(&msg, status);
   1a888:	4639      	mov	r1, r7
   1a88a:	a807      	add	r0, sp, #28
   1a88c:	f002 fbac 	bl	1cfe8 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, get_idx);
   1a890:	4621      	mov	r1, r4
   1a892:	a807      	add	r0, sp, #28
   1a894:	f002 fbb0 	bl	1cff8 <net_buf_simple_add_le16>
	if (status != STATUS_SUCCESS) {
   1a898:	b95f      	cbnz	r7, 1a8b2 <app_key_get+0x64>
	count = bt_mesh_app_keys_get(get_idx, app_idx, ARRAY_SIZE(app_idx), 0);
   1a89a:	463b      	mov	r3, r7
   1a89c:	2201      	movs	r2, #1
   1a89e:	a903      	add	r1, sp, #12
   1a8a0:	4620      	mov	r0, r4
   1a8a2:	f7ee fb99 	bl	8fd8 <bt_mesh_app_keys_get>
	if (count < 0 || count > ARRAY_SIZE(app_idx)) {
   1a8a6:	b120      	cbz	r0, 1a8b2 <app_key_get+0x64>
		net_buf_simple_add_le16(&msg, app_idx[i]);
   1a8a8:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   1a8ac:	a807      	add	r0, sp, #28
   1a8ae:	f002 fba3 	bl	1cff8 <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1a8b2:	2400      	movs	r4, #0
   1a8b4:	9400      	str	r4, [sp, #0]
   1a8b6:	4623      	mov	r3, r4
   1a8b8:	aa07      	add	r2, sp, #28
   1a8ba:	4631      	mov	r1, r6
   1a8bc:	4628      	mov	r0, r5
   1a8be:	f7ff fb36 	bl	19f2e <bt_mesh_model_send>
	return 0;
   1a8c2:	4620      	mov	r0, r4
}
   1a8c4:	b00b      	add	sp, #44	; 0x2c
   1a8c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EINVAL;
   1a8c8:	f06f 0015 	mvn.w	r0, #21
   1a8cc:	e7fa      	b.n	1a8c4 <app_key_get+0x76>

0001a8ce <key_idx_unpack>:

static inline void key_idx_unpack(struct net_buf_simple *buf,
				  uint16_t *idx1, uint16_t *idx2)
{
   1a8ce:	b410      	push	{r4}
	*idx1 = sys_get_le16(&buf->data[0]) & 0xfff;
   1a8d0:	6804      	ldr	r4, [r0, #0]
   1a8d2:	8823      	ldrh	r3, [r4, #0]
   1a8d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
   1a8d8:	800b      	strh	r3, [r1, #0]
	*idx2 = sys_get_le16(&buf->data[1]) >> 4;
   1a8da:	f8b4 3001 	ldrh.w	r3, [r4, #1]
	net_buf_simple_pull(buf, 3);
}
   1a8de:	bc10      	pop	{r4}
	*idx2 = sys_get_le16(&buf->data[1]) >> 4;
   1a8e0:	091b      	lsrs	r3, r3, #4
   1a8e2:	8013      	strh	r3, [r2, #0]
	net_buf_simple_pull(buf, 3);
   1a8e4:	2103      	movs	r1, #3
   1a8e6:	f002 bbeb 	b.w	1d0c0 <net_buf_simple_pull>

0001a8ea <app_key_del>:
{
   1a8ea:	b530      	push	{r4, r5, lr}
   1a8ec:	b085      	sub	sp, #20
   1a8ee:	4604      	mov	r4, r0
   1a8f0:	460d      	mov	r5, r1
   1a8f2:	4610      	mov	r0, r2
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
   1a8f4:	a903      	add	r1, sp, #12
   1a8f6:	f10d 020e 	add.w	r2, sp, #14
   1a8fa:	f7ff ffe8 	bl	1a8ce <key_idx_unpack>
	status = bt_mesh_app_key_del(key_app_idx, key_net_idx);
   1a8fe:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   1a902:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   1a906:	f7ee fb3b 	bl	8f80 <bt_mesh_app_key_del>
	return send_app_key_status(model, ctx, status, key_app_idx, key_net_idx);
   1a90a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   1a90e:	9300      	str	r3, [sp, #0]
	status = bt_mesh_app_key_del(key_app_idx, key_net_idx);
   1a910:	4602      	mov	r2, r0
	return send_app_key_status(model, ctx, status, key_app_idx, key_net_idx);
   1a912:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1a916:	4629      	mov	r1, r5
   1a918:	4620      	mov	r0, r4
   1a91a:	f7ff fc04 	bl	1a126 <send_app_key_status>
}
   1a91e:	b005      	add	sp, #20
   1a920:	bd30      	pop	{r4, r5, pc}

0001a922 <app_key_update>:
{
   1a922:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1a924:	4614      	mov	r4, r2
   1a926:	4605      	mov	r5, r0
   1a928:	460e      	mov	r6, r1
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
   1a92a:	f10d 020e 	add.w	r2, sp, #14
   1a92e:	a903      	add	r1, sp, #12
   1a930:	4620      	mov	r0, r4
   1a932:	f7ff ffcc 	bl	1a8ce <key_idx_unpack>
	status = bt_mesh_app_key_update(key_app_idx, key_net_idx, buf->data);
   1a936:	6822      	ldr	r2, [r4, #0]
   1a938:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   1a93c:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   1a940:	f7ee fade 	bl	8f00 <bt_mesh_app_key_update>
	return send_app_key_status(model, ctx, status, key_app_idx, key_net_idx);
   1a944:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   1a948:	9300      	str	r3, [sp, #0]
	status = bt_mesh_app_key_update(key_app_idx, key_net_idx, buf->data);
   1a94a:	4602      	mov	r2, r0
	return send_app_key_status(model, ctx, status, key_app_idx, key_net_idx);
   1a94c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1a950:	4631      	mov	r1, r6
   1a952:	4628      	mov	r0, r5
   1a954:	f7ff fbe7 	bl	1a126 <send_app_key_status>
}
   1a958:	b004      	add	sp, #16
   1a95a:	bd70      	pop	{r4, r5, r6, pc}

0001a95c <app_key_add>:
{
   1a95c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1a95e:	4614      	mov	r4, r2
   1a960:	4605      	mov	r5, r0
   1a962:	460e      	mov	r6, r1
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
   1a964:	f10d 020e 	add.w	r2, sp, #14
   1a968:	a903      	add	r1, sp, #12
   1a96a:	4620      	mov	r0, r4
   1a96c:	f7ff ffaf 	bl	1a8ce <key_idx_unpack>
	status = bt_mesh_app_key_add(key_app_idx, key_net_idx, buf->data);
   1a970:	6822      	ldr	r2, [r4, #0]
   1a972:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   1a976:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   1a97a:	f7ee fa85 	bl	8e88 <bt_mesh_app_key_add>
	return send_app_key_status(model, ctx, status, key_app_idx, key_net_idx);
   1a97e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   1a982:	9300      	str	r3, [sp, #0]
	status = bt_mesh_app_key_add(key_app_idx, key_net_idx, buf->data);
   1a984:	4602      	mov	r2, r0
	return send_app_key_status(model, ctx, status, key_app_idx, key_net_idx);
   1a986:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1a98a:	4631      	mov	r1, r6
   1a98c:	4628      	mov	r0, r5
   1a98e:	f7ff fbca 	bl	1a126 <send_app_key_status>
}
   1a992:	b004      	add	sp, #16
   1a994:	bd70      	pop	{r4, r5, r6, pc}

0001a996 <bt_mesh_hb_pwr2>:
 * SPDX-License-Identifier: Apache-2.0
 */

static inline uint16_t bt_mesh_hb_pwr2(uint8_t val)
{
	if (!val) {
   1a996:	b158      	cbz	r0, 1a9b0 <bt_mesh_hb_pwr2+0x1a>
		return 0x0000;
	} else if (val == 0xff || val == 0x11) {
   1a998:	28ff      	cmp	r0, #255	; 0xff
   1a99a:	d007      	beq.n	1a9ac <bt_mesh_hb_pwr2+0x16>
   1a99c:	2811      	cmp	r0, #17
   1a99e:	d005      	beq.n	1a9ac <bt_mesh_hb_pwr2+0x16>
		return 0xffff;
	} else {
		return (1 << (val - 1));
   1a9a0:	2301      	movs	r3, #1
   1a9a2:	3801      	subs	r0, #1
   1a9a4:	fa03 f000 	lsl.w	r0, r3, r0
   1a9a8:	b280      	uxth	r0, r0
   1a9aa:	4770      	bx	lr
		return 0xffff;
   1a9ac:	f64f 70ff 	movw	r0, #65535	; 0xffff
	}
}
   1a9b0:	4770      	bx	lr

0001a9b2 <get_model>:
{
   1a9b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < 4) {
   1a9b4:	888b      	ldrh	r3, [r1, #4]
   1a9b6:	2b03      	cmp	r3, #3
{
   1a9b8:	4605      	mov	r5, r0
   1a9ba:	460c      	mov	r4, r1
   1a9bc:	4616      	mov	r6, r2
		id = net_buf_simple_pull_le16(buf);
   1a9be:	4608      	mov	r0, r1
	if (buf->len < 4) {
   1a9c0:	d809      	bhi.n	1a9d6 <get_model+0x24>
		id = net_buf_simple_pull_le16(buf);
   1a9c2:	f002 fb95 	bl	1d0f0 <net_buf_simple_pull_le16>
		*vnd = false;
   1a9c6:	2300      	movs	r3, #0
		id = net_buf_simple_pull_le16(buf);
   1a9c8:	4601      	mov	r1, r0
		*vnd = false;
   1a9ca:	7033      	strb	r3, [r6, #0]
		return bt_mesh_model_find(elem, id);
   1a9cc:	4628      	mov	r0, r5
}
   1a9ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		return bt_mesh_model_find(elem, id);
   1a9d2:	f7ff bada 	b.w	19f8a <bt_mesh_model_find>
		company = net_buf_simple_pull_le16(buf);
   1a9d6:	f002 fb8b 	bl	1d0f0 <net_buf_simple_pull_le16>
   1a9da:	4607      	mov	r7, r0
		id = net_buf_simple_pull_le16(buf);
   1a9dc:	4620      	mov	r0, r4
   1a9de:	f002 fb87 	bl	1d0f0 <net_buf_simple_pull_le16>
		*vnd = true;
   1a9e2:	2301      	movs	r3, #1
		id = net_buf_simple_pull_le16(buf);
   1a9e4:	4602      	mov	r2, r0
		*vnd = true;
   1a9e6:	7033      	strb	r3, [r6, #0]
		return bt_mesh_model_find_vnd(elem, company, id);
   1a9e8:	4639      	mov	r1, r7
   1a9ea:	4628      	mov	r0, r5
}
   1a9ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		return bt_mesh_model_find_vnd(elem, company, id);
   1a9f0:	f7ff bab6 	b.w	19f60 <bt_mesh_model_find_vnd>

0001a9f4 <mod_app_get>:
{
   1a9f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a9f8:	4615      	mov	r5, r2
   1a9fa:	b08d      	sub	sp, #52	; 0x34
	NET_BUF_SIMPLE_DEFINE(msg,
   1a9fc:	ab07      	add	r3, sp, #28
   1a9fe:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
   1aa02:	e9cd 2305 	strd	r2, r3, [sp, #20]
   1aa06:	9304      	str	r3, [sp, #16]
	if ((buf->len != 4U) && (buf->len != 6U)) {
   1aa08:	88ab      	ldrh	r3, [r5, #4]
   1aa0a:	f023 0302 	bic.w	r3, r3, #2
   1aa0e:	b29b      	uxth	r3, r3
   1aa10:	2b04      	cmp	r3, #4
{
   1aa12:	4606      	mov	r6, r0
   1aa14:	460f      	mov	r7, r1
	if ((buf->len != 4U) && (buf->len != 6U)) {
   1aa16:	d147      	bne.n	1aaa8 <mod_app_get+0xb4>
	elem_addr = net_buf_simple_pull_le16(buf);
   1aa18:	4628      	mov	r0, r5
   1aa1a:	f002 fb69 	bl	1d0f0 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1aa1e:	b203      	sxth	r3, r0
   1aa20:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   1aa22:	4680      	mov	r8, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1aa24:	dd43      	ble.n	1aaae <mod_app_get+0xba>
	mod_id = buf->data;
   1aa26:	f8d5 9000 	ldr.w	r9, [r5]
	elem = bt_mesh_elem_find(elem_addr);
   1aa2a:	f7ef fe43 	bl	a6b4 <bt_mesh_elem_find>
	if (!elem) {
   1aa2e:	4604      	mov	r4, r0
   1aa30:	bb58      	cbnz	r0, 1aa8a <mod_app_get+0x96>
		vnd = (buf->len == 4U);
   1aa32:	88ab      	ldrh	r3, [r5, #4]
   1aa34:	1f1a      	subs	r2, r3, #4
   1aa36:	4253      	negs	r3, r2
   1aa38:	4153      	adcs	r3, r2
   1aa3a:	f88d 300f 	strb.w	r3, [sp, #15]
		status = STATUS_INVALID_ADDRESS;
   1aa3e:	2501      	movs	r5, #1
	if (vnd) {
   1aa40:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1aa44:	b35b      	cbz	r3, 1aa9e <mod_app_get+0xaa>
		bt_mesh_model_msg_init(&msg, OP_VND_MOD_APP_LIST);
   1aa46:	f248 014e 	movw	r1, #32846	; 0x804e
		bt_mesh_model_msg_init(&msg, OP_SIG_MOD_APP_LIST);
   1aa4a:	a804      	add	r0, sp, #16
   1aa4c:	f7ff fab3 	bl	19fb6 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   1aa50:	4629      	mov	r1, r5
   1aa52:	a804      	add	r0, sp, #16
   1aa54:	f002 fac8 	bl	1cfe8 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, elem_addr);
   1aa58:	4641      	mov	r1, r8
   1aa5a:	a804      	add	r0, sp, #16
   1aa5c:	f002 facc 	bl	1cff8 <net_buf_simple_add_le16>
	if (vnd) {
   1aa60:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1aa64:	b1f3      	cbz	r3, 1aaa4 <mod_app_get+0xb0>
		net_buf_simple_add_mem(&msg, mod_id, 4);
   1aa66:	2204      	movs	r2, #4
		net_buf_simple_add_mem(&msg, mod_id, 2);
   1aa68:	4649      	mov	r1, r9
   1aa6a:	a804      	add	r0, sp, #16
   1aa6c:	f002 fab3 	bl	1cfd6 <net_buf_simple_add_mem>
	if (mod) {
   1aa70:	bb04      	cbnz	r4, 1aab4 <mod_app_get+0xc0>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1aa72:	2400      	movs	r4, #0
   1aa74:	9400      	str	r4, [sp, #0]
   1aa76:	4623      	mov	r3, r4
   1aa78:	aa04      	add	r2, sp, #16
   1aa7a:	4639      	mov	r1, r7
   1aa7c:	4630      	mov	r0, r6
   1aa7e:	f7ff fa56 	bl	19f2e <bt_mesh_model_send>
	return 0;
   1aa82:	4620      	mov	r0, r4
}
   1aa84:	b00d      	add	sp, #52	; 0x34
   1aa86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	mod = get_model(elem, buf, &vnd);
   1aa8a:	4629      	mov	r1, r5
   1aa8c:	f10d 020f 	add.w	r2, sp, #15
   1aa90:	f7ff ff8f 	bl	1a9b2 <get_model>
		status = STATUS_INVALID_MODEL;
   1aa94:	1e04      	subs	r4, r0, #0
   1aa96:	bf14      	ite	ne
   1aa98:	2500      	movne	r5, #0
   1aa9a:	2502      	moveq	r5, #2
   1aa9c:	e7d0      	b.n	1aa40 <mod_app_get+0x4c>
		bt_mesh_model_msg_init(&msg, OP_SIG_MOD_APP_LIST);
   1aa9e:	f248 014c 	movw	r1, #32844	; 0x804c
   1aaa2:	e7d2      	b.n	1aa4a <mod_app_get+0x56>
		net_buf_simple_add_mem(&msg, mod_id, 2);
   1aaa4:	2202      	movs	r2, #2
   1aaa6:	e7df      	b.n	1aa68 <mod_app_get+0x74>
		return -EMSGSIZE;
   1aaa8:	f06f 0079 	mvn.w	r0, #121	; 0x79
   1aaac:	e7ea      	b.n	1aa84 <mod_app_get+0x90>
		return -EINVAL;
   1aaae:	f06f 0015 	mvn.w	r0, #21
   1aab2:	e7e7      	b.n	1aa84 <mod_app_get+0x90>
			if (mod->keys[i] != BT_MESH_KEY_UNUSED) {
   1aab4:	89a1      	ldrh	r1, [r4, #12]
   1aab6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1aaba:	4299      	cmp	r1, r3
   1aabc:	d0d9      	beq.n	1aa72 <mod_app_get+0x7e>
				net_buf_simple_add_le16(&msg, mod->keys[i]);
   1aabe:	a804      	add	r0, sp, #16
   1aac0:	f002 fa9a 	bl	1cff8 <net_buf_simple_add_le16>
		for (i = 0; i < ARRAY_SIZE(mod->keys); i++) {
   1aac4:	e7d5      	b.n	1aa72 <mod_app_get+0x7e>

0001aac6 <mod_sub_va_del>:
{
   1aac6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if ((buf->len != 20U) && (buf->len != 22U)) {
   1aaca:	8893      	ldrh	r3, [r2, #4]
   1aacc:	f023 0302 	bic.w	r3, r3, #2
   1aad0:	b29b      	uxth	r3, r3
   1aad2:	2b14      	cmp	r3, #20
{
   1aad4:	b087      	sub	sp, #28
   1aad6:	4606      	mov	r6, r0
   1aad8:	460f      	mov	r7, r1
   1aada:	4614      	mov	r4, r2
	if ((buf->len != 20U) && (buf->len != 22U)) {
   1aadc:	d148      	bne.n	1ab70 <mod_sub_va_del+0xaa>
	elem_addr = net_buf_simple_pull_le16(buf);
   1aade:	4610      	mov	r0, r2
   1aae0:	f002 fb06 	bl	1d0f0 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1aae4:	b203      	sxth	r3, r0
   1aae6:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   1aae8:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1aaea:	dd44      	ble.n	1ab76 <mod_sub_va_del+0xb0>
	label_uuid = net_buf_simple_pull_mem(buf, 16);
   1aaec:	2110      	movs	r1, #16
   1aaee:	4620      	mov	r0, r4
   1aaf0:	f002 faee 	bl	1d0d0 <net_buf_simple_pull_mem>
   1aaf4:	4681      	mov	r9, r0
	elem = bt_mesh_elem_find(elem_addr);
   1aaf6:	4628      	mov	r0, r5
	mod_id = buf->data;
   1aaf8:	f8d4 8000 	ldr.w	r8, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   1aafc:	f7ef fdda 	bl	a6b4 <bt_mesh_elem_find>
	if (!elem) {
   1ab00:	b9c0      	cbnz	r0, 1ab34 <mod_sub_va_del+0x6e>
		vnd = (buf->len == 4U);
   1ab02:	88a2      	ldrh	r2, [r4, #4]
		mod = NULL;
   1ab04:	9005      	str	r0, [sp, #20]
		vnd = (buf->len == 4U);
   1ab06:	1f11      	subs	r1, r2, #4
   1ab08:	424a      	negs	r2, r1
   1ab0a:	414a      	adcs	r2, r1
   1ab0c:	f88d 2011 	strb.w	r2, [sp, #17]
		sub_addr = BT_MESH_ADDR_UNASSIGNED;
   1ab10:	f8ad 0012 	strh.w	r0, [sp, #18]
		status = STATUS_INVALID_ADDRESS;
   1ab14:	2201      	movs	r2, #1
	return send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   1ab16:	f89d 3011 	ldrb.w	r3, [sp, #17]
   1ab1a:	e9cd 8301 	strd	r8, r3, [sp, #4]
   1ab1e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   1ab22:	9300      	str	r3, [sp, #0]
   1ab24:	4639      	mov	r1, r7
   1ab26:	462b      	mov	r3, r5
   1ab28:	4630      	mov	r0, r6
   1ab2a:	f7ff fbc8 	bl	1a2be <send_mod_sub_status>
}
   1ab2e:	b007      	add	sp, #28
   1ab30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	mod = get_model(elem, buf, &vnd);
   1ab34:	f10d 0211 	add.w	r2, sp, #17
   1ab38:	4621      	mov	r1, r4
   1ab3a:	f7ff ff3a 	bl	1a9b2 <get_model>
   1ab3e:	9005      	str	r0, [sp, #20]
	if (!mod) {
   1ab40:	b918      	cbnz	r0, 1ab4a <mod_sub_va_del+0x84>
		sub_addr = BT_MESH_ADDR_UNASSIGNED;
   1ab42:	f8ad 0012 	strh.w	r0, [sp, #18]
		status = STATUS_INVALID_MODEL;
   1ab46:	2202      	movs	r2, #2
		goto send_status;
   1ab48:	e7e5      	b.n	1ab16 <mod_sub_va_del+0x50>
	status = bt_mesh_va_del(label_uuid, &sub_addr);
   1ab4a:	f10d 0112 	add.w	r1, sp, #18
   1ab4e:	4648      	mov	r0, r9
   1ab50:	f7fe ffc2 	bl	19ad8 <bt_mesh_va_del>
	if (sub_addr == BT_MESH_ADDR_UNASSIGNED) {
   1ab54:	f8bd 1012 	ldrh.w	r1, [sp, #18]
	status = bt_mesh_va_del(label_uuid, &sub_addr);
   1ab58:	4602      	mov	r2, r0
	if (sub_addr == BT_MESH_ADDR_UNASSIGNED) {
   1ab5a:	2900      	cmp	r1, #0
   1ab5c:	d0db      	beq.n	1ab16 <mod_sub_va_del+0x50>
	match = bt_mesh_model_find_group(&mod, sub_addr);
   1ab5e:	a805      	add	r0, sp, #20
   1ab60:	f7ef fe00 	bl	a764 <bt_mesh_model_find_group>
	if (match) {
   1ab64:	b110      	cbz	r0, 1ab6c <mod_sub_va_del+0xa6>
		*match = BT_MESH_ADDR_UNASSIGNED;
   1ab66:	2200      	movs	r2, #0
   1ab68:	8002      	strh	r2, [r0, #0]
		status = STATUS_SUCCESS;
   1ab6a:	e7d4      	b.n	1ab16 <mod_sub_va_del+0x50>
		status = STATUS_CANNOT_REMOVE;
   1ab6c:	220c      	movs	r2, #12
   1ab6e:	e7d2      	b.n	1ab16 <mod_sub_va_del+0x50>
		return -EMSGSIZE;
   1ab70:	f06f 0079 	mvn.w	r0, #121	; 0x79
   1ab74:	e7db      	b.n	1ab2e <mod_sub_va_del+0x68>
		return -EINVAL;
   1ab76:	f06f 0015 	mvn.w	r0, #21
   1ab7a:	e7d8      	b.n	1ab2e <mod_sub_va_del+0x68>

0001ab7c <mod_sub_del>:
{
   1ab7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if ((buf->len != 6U) && (buf->len != 8U)) {
   1ab80:	8893      	ldrh	r3, [r2, #4]
   1ab82:	2b06      	cmp	r3, #6
{
   1ab84:	b087      	sub	sp, #28
   1ab86:	4606      	mov	r6, r0
   1ab88:	460f      	mov	r7, r1
   1ab8a:	4691      	mov	r9, r2
	if ((buf->len != 6U) && (buf->len != 8U)) {
   1ab8c:	d001      	beq.n	1ab92 <mod_sub_del+0x16>
   1ab8e:	2b08      	cmp	r3, #8
   1ab90:	d13f      	bne.n	1ac12 <mod_sub_del+0x96>
	elem_addr = net_buf_simple_pull_le16(buf);
   1ab92:	4648      	mov	r0, r9
   1ab94:	f002 faac 	bl	1d0f0 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1ab98:	b203      	sxth	r3, r0
   1ab9a:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   1ab9c:	4604      	mov	r4, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1ab9e:	dd3b      	ble.n	1ac18 <mod_sub_del+0x9c>
	sub_addr = net_buf_simple_pull_le16(buf);
   1aba0:	4648      	mov	r0, r9
   1aba2:	f002 faa5 	bl	1d0f0 <net_buf_simple_pull_le16>
   1aba6:	4605      	mov	r5, r0
	elem = bt_mesh_elem_find(elem_addr);
   1aba8:	4620      	mov	r0, r4
	mod_id = buf->data;
   1abaa:	f8d9 8000 	ldr.w	r8, [r9]
	elem = bt_mesh_elem_find(elem_addr);
   1abae:	f7ef fd81 	bl	a6b4 <bt_mesh_elem_find>
	if (!elem) {
   1abb2:	b948      	cbnz	r0, 1abc8 <mod_sub_del+0x4c>
		vnd = (buf->len == 4U);
   1abb4:	f8b9 3004 	ldrh.w	r3, [r9, #4]
		mod = NULL;
   1abb8:	9005      	str	r0, [sp, #20]
		vnd = (buf->len == 4U);
   1abba:	1f1a      	subs	r2, r3, #4
   1abbc:	4253      	negs	r3, r2
   1abbe:	4153      	adcs	r3, r2
   1abc0:	f88d 3013 	strb.w	r3, [sp, #19]
		status = STATUS_INVALID_ADDRESS;
   1abc4:	2201      	movs	r2, #1
   1abc6:	e015      	b.n	1abf4 <mod_sub_del+0x78>
	mod = get_model(elem, buf, &vnd);
   1abc8:	f10d 0213 	add.w	r2, sp, #19
   1abcc:	4649      	mov	r1, r9
   1abce:	f7ff fef0 	bl	1a9b2 <get_model>
   1abd2:	9005      	str	r0, [sp, #20]
	if (!mod) {
   1abd4:	b1d8      	cbz	r0, 1ac0e <mod_sub_del+0x92>
	if (!BT_MESH_ADDR_IS_GROUP(sub_addr)) {
   1abd6:	f505 4380 	add.w	r3, r5, #16384	; 0x4000
   1abda:	b29b      	uxth	r3, r3
   1abdc:	f5b3 5f7c 	cmp.w	r3, #16128	; 0x3f00
   1abe0:	d8f0      	bhi.n	1abc4 <mod_sub_del+0x48>
	match = bt_mesh_model_find_group(&mod, sub_addr);
   1abe2:	4629      	mov	r1, r5
   1abe4:	a805      	add	r0, sp, #20
   1abe6:	f7ef fdbd 	bl	a764 <bt_mesh_model_find_group>
	if (match) {
   1abea:	4602      	mov	r2, r0
   1abec:	2000      	movs	r0, #0
   1abee:	b10a      	cbz	r2, 1abf4 <mod_sub_del+0x78>
		*match = BT_MESH_ADDR_UNASSIGNED;
   1abf0:	8010      	strh	r0, [r2, #0]
	status = STATUS_SUCCESS;
   1abf2:	4602      	mov	r2, r0
	return send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   1abf4:	f89d 3013 	ldrb.w	r3, [sp, #19]
   1abf8:	9500      	str	r5, [sp, #0]
   1abfa:	e9cd 8301 	strd	r8, r3, [sp, #4]
   1abfe:	4639      	mov	r1, r7
   1ac00:	4623      	mov	r3, r4
   1ac02:	4630      	mov	r0, r6
   1ac04:	f7ff fb5b 	bl	1a2be <send_mod_sub_status>
}
   1ac08:	b007      	add	sp, #28
   1ac0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		status = STATUS_INVALID_MODEL;
   1ac0e:	2202      	movs	r2, #2
   1ac10:	e7f0      	b.n	1abf4 <mod_sub_del+0x78>
		return -EMSGSIZE;
   1ac12:	f06f 0079 	mvn.w	r0, #121	; 0x79
   1ac16:	e7f7      	b.n	1ac08 <mod_sub_del+0x8c>
		return -EINVAL;
   1ac18:	f06f 0015 	mvn.w	r0, #21
   1ac1c:	e7f4      	b.n	1ac08 <mod_sub_del+0x8c>

0001ac1e <mod_sub_va_add>:
{
   1ac1e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if ((buf->len != 20U) && (buf->len != 22U)) {
   1ac22:	8893      	ldrh	r3, [r2, #4]
   1ac24:	f023 0302 	bic.w	r3, r3, #2
   1ac28:	b29b      	uxth	r3, r3
   1ac2a:	2b14      	cmp	r3, #20
{
   1ac2c:	b087      	sub	sp, #28
   1ac2e:	4607      	mov	r7, r0
   1ac30:	4688      	mov	r8, r1
   1ac32:	4614      	mov	r4, r2
	if ((buf->len != 20U) && (buf->len != 22U)) {
   1ac34:	d157      	bne.n	1ace6 <mod_sub_va_add+0xc8>
	elem_addr = net_buf_simple_pull_le16(buf);
   1ac36:	4610      	mov	r0, r2
   1ac38:	f002 fa5a 	bl	1d0f0 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1ac3c:	b203      	sxth	r3, r0
   1ac3e:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   1ac40:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1ac42:	dd53      	ble.n	1acec <mod_sub_va_add+0xce>
	label_uuid = net_buf_simple_pull_mem(buf, 16);
   1ac44:	2110      	movs	r1, #16
   1ac46:	4620      	mov	r0, r4
   1ac48:	f002 fa42 	bl	1d0d0 <net_buf_simple_pull_mem>
   1ac4c:	4606      	mov	r6, r0
	elem = bt_mesh_elem_find(elem_addr);
   1ac4e:	4628      	mov	r0, r5
	mod_id = buf->data;
   1ac50:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   1ac54:	f7ef fd2e 	bl	a6b4 <bt_mesh_elem_find>
	if (!elem) {
   1ac58:	b9c8      	cbnz	r0, 1ac8e <mod_sub_va_add+0x70>
		vnd = (buf->len == 4U);
   1ac5a:	88a2      	ldrh	r2, [r4, #4]
		mod = NULL;
   1ac5c:	9005      	str	r0, [sp, #20]
		vnd = (buf->len == 4U);
   1ac5e:	1f11      	subs	r1, r2, #4
   1ac60:	424a      	negs	r2, r1
   1ac62:	414a      	adcs	r2, r1
   1ac64:	f88d 2011 	strb.w	r2, [sp, #17]
		sub_addr = BT_MESH_ADDR_UNASSIGNED;
   1ac68:	f8ad 0012 	strh.w	r0, [sp, #18]
		status = STATUS_INVALID_ADDRESS;
   1ac6c:	2401      	movs	r4, #1
	return send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   1ac6e:	f89d 3011 	ldrb.w	r3, [sp, #17]
   1ac72:	e9cd 9301 	strd	r9, r3, [sp, #4]
   1ac76:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   1ac7a:	9300      	str	r3, [sp, #0]
   1ac7c:	4622      	mov	r2, r4
   1ac7e:	462b      	mov	r3, r5
   1ac80:	4641      	mov	r1, r8
   1ac82:	4638      	mov	r0, r7
   1ac84:	f7ff fb1b 	bl	1a2be <send_mod_sub_status>
}
   1ac88:	b007      	add	sp, #28
   1ac8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	mod = get_model(elem, buf, &vnd);
   1ac8e:	f10d 0211 	add.w	r2, sp, #17
   1ac92:	4621      	mov	r1, r4
   1ac94:	f7ff fe8d 	bl	1a9b2 <get_model>
   1ac98:	9005      	str	r0, [sp, #20]
	if (!mod) {
   1ac9a:	b918      	cbnz	r0, 1aca4 <mod_sub_va_add+0x86>
		sub_addr = BT_MESH_ADDR_UNASSIGNED;
   1ac9c:	f8ad 0012 	strh.w	r0, [sp, #18]
		status = STATUS_INVALID_MODEL;
   1aca0:	2402      	movs	r4, #2
		goto send_status;
   1aca2:	e7e4      	b.n	1ac6e <mod_sub_va_add+0x50>
	status = bt_mesh_va_add(label_uuid, &sub_addr);
   1aca4:	f10d 0112 	add.w	r1, sp, #18
   1aca8:	4630      	mov	r0, r6
   1acaa:	f7fe ff13 	bl	19ad4 <bt_mesh_va_add>
	if (status != STATUS_SUCCESS) {
   1acae:	4604      	mov	r4, r0
   1acb0:	2800      	cmp	r0, #0
   1acb2:	d1dc      	bne.n	1ac6e <mod_sub_va_add+0x50>
	if (bt_mesh_model_find_group(&mod, sub_addr)) {
   1acb4:	f8bd 1012 	ldrh.w	r1, [sp, #18]
   1acb8:	a805      	add	r0, sp, #20
   1acba:	f7ef fd53 	bl	a764 <bt_mesh_model_find_group>
		bt_mesh_va_del(label_uuid, NULL);
   1acbe:	4621      	mov	r1, r4
	if (bt_mesh_model_find_group(&mod, sub_addr)) {
   1acc0:	b118      	cbz	r0, 1acca <mod_sub_va_add+0xac>
		bt_mesh_va_del(label_uuid, NULL);
   1acc2:	4630      	mov	r0, r6
   1acc4:	f7fe ff08 	bl	19ad8 <bt_mesh_va_del>
		goto send_status;
   1acc8:	e7d1      	b.n	1ac6e <mod_sub_va_add+0x50>
	entry = bt_mesh_model_find_group(&mod, BT_MESH_ADDR_UNASSIGNED);
   1acca:	a805      	add	r0, sp, #20
   1accc:	f7ef fd4a 	bl	a764 <bt_mesh_model_find_group>
	if (!entry) {
   1acd0:	b928      	cbnz	r0, 1acde <mod_sub_va_add+0xc0>
		bt_mesh_va_del(label_uuid, NULL);
   1acd2:	4621      	mov	r1, r4
   1acd4:	4630      	mov	r0, r6
   1acd6:	f7fe feff 	bl	19ad8 <bt_mesh_va_del>
		status = STATUS_INSUFF_RESOURCES;
   1acda:	2405      	movs	r4, #5
		goto send_status;
   1acdc:	e7c7      	b.n	1ac6e <mod_sub_va_add+0x50>
	*entry = sub_addr;
   1acde:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   1ace2:	8003      	strh	r3, [r0, #0]
	status = STATUS_SUCCESS;
   1ace4:	e7c3      	b.n	1ac6e <mod_sub_va_add+0x50>
		return -EMSGSIZE;
   1ace6:	f06f 0079 	mvn.w	r0, #121	; 0x79
   1acea:	e7cd      	b.n	1ac88 <mod_sub_va_add+0x6a>
		return -EINVAL;
   1acec:	f06f 0015 	mvn.w	r0, #21
   1acf0:	e7ca      	b.n	1ac88 <mod_sub_va_add+0x6a>

0001acf2 <mod_sub_add>:
{
   1acf2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if ((buf->len != 6U) && (buf->len != 8U)) {
   1acf6:	8893      	ldrh	r3, [r2, #4]
   1acf8:	2b06      	cmp	r3, #6
{
   1acfa:	b087      	sub	sp, #28
   1acfc:	4607      	mov	r7, r0
   1acfe:	4688      	mov	r8, r1
   1ad00:	4614      	mov	r4, r2
	if ((buf->len != 6U) && (buf->len != 8U)) {
   1ad02:	d001      	beq.n	1ad08 <mod_sub_add+0x16>
   1ad04:	2b08      	cmp	r3, #8
   1ad06:	d143      	bne.n	1ad90 <mod_sub_add+0x9e>
	elem_addr = net_buf_simple_pull_le16(buf);
   1ad08:	4620      	mov	r0, r4
   1ad0a:	f002 f9f1 	bl	1d0f0 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1ad0e:	b203      	sxth	r3, r0
   1ad10:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   1ad12:	4606      	mov	r6, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1ad14:	dd3f      	ble.n	1ad96 <mod_sub_add+0xa4>
	sub_addr = net_buf_simple_pull_le16(buf);
   1ad16:	4620      	mov	r0, r4
   1ad18:	f002 f9ea 	bl	1d0f0 <net_buf_simple_pull_le16>
   1ad1c:	4605      	mov	r5, r0
	elem = bt_mesh_elem_find(elem_addr);
   1ad1e:	4630      	mov	r0, r6
	mod_id = buf->data;
   1ad20:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   1ad24:	f7ef fcc6 	bl	a6b4 <bt_mesh_elem_find>
	if (!elem) {
   1ad28:	b940      	cbnz	r0, 1ad3c <mod_sub_add+0x4a>
		vnd = (buf->len == 4U);
   1ad2a:	88a3      	ldrh	r3, [r4, #4]
		mod = NULL;
   1ad2c:	9005      	str	r0, [sp, #20]
		vnd = (buf->len == 4U);
   1ad2e:	1f1a      	subs	r2, r3, #4
   1ad30:	4253      	negs	r3, r2
   1ad32:	4153      	adcs	r3, r2
   1ad34:	f88d 3013 	strb.w	r3, [sp, #19]
		status = STATUS_INVALID_ADDRESS;
   1ad38:	2201      	movs	r2, #1
   1ad3a:	e01a      	b.n	1ad72 <mod_sub_add+0x80>
	mod = get_model(elem, buf, &vnd);
   1ad3c:	f10d 0213 	add.w	r2, sp, #19
   1ad40:	4621      	mov	r1, r4
   1ad42:	f7ff fe36 	bl	1a9b2 <get_model>
   1ad46:	9005      	str	r0, [sp, #20]
	if (!mod) {
   1ad48:	b190      	cbz	r0, 1ad70 <mod_sub_add+0x7e>
	if (!BT_MESH_ADDR_IS_GROUP(sub_addr)) {
   1ad4a:	f505 4380 	add.w	r3, r5, #16384	; 0x4000
   1ad4e:	b29b      	uxth	r3, r3
   1ad50:	f5b3 5f7c 	cmp.w	r3, #16128	; 0x3f00
   1ad54:	d8f0      	bhi.n	1ad38 <mod_sub_add+0x46>
	if (bt_mesh_model_find_group(&mod, sub_addr)) {
   1ad56:	4629      	mov	r1, r5
   1ad58:	a805      	add	r0, sp, #20
   1ad5a:	f7ef fd03 	bl	a764 <bt_mesh_model_find_group>
   1ad5e:	b928      	cbnz	r0, 1ad6c <mod_sub_add+0x7a>
	entry = bt_mesh_model_find_group(&mod, BT_MESH_ADDR_UNASSIGNED);
   1ad60:	4601      	mov	r1, r0
   1ad62:	a805      	add	r0, sp, #20
   1ad64:	f7ef fcfe 	bl	a764 <bt_mesh_model_find_group>
	if (!entry) {
   1ad68:	b180      	cbz	r0, 1ad8c <mod_sub_add+0x9a>
	*entry = sub_addr;
   1ad6a:	8005      	strh	r5, [r0, #0]
		status = STATUS_SUCCESS;
   1ad6c:	2200      	movs	r2, #0
   1ad6e:	e000      	b.n	1ad72 <mod_sub_add+0x80>
		status = STATUS_INVALID_MODEL;
   1ad70:	2202      	movs	r2, #2
	return send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   1ad72:	f89d 3013 	ldrb.w	r3, [sp, #19]
   1ad76:	9500      	str	r5, [sp, #0]
   1ad78:	e9cd 9301 	strd	r9, r3, [sp, #4]
   1ad7c:	4641      	mov	r1, r8
   1ad7e:	4633      	mov	r3, r6
   1ad80:	4638      	mov	r0, r7
   1ad82:	f7ff fa9c 	bl	1a2be <send_mod_sub_status>
}
   1ad86:	b007      	add	sp, #28
   1ad88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		status = STATUS_INSUFF_RESOURCES;
   1ad8c:	2205      	movs	r2, #5
   1ad8e:	e7f0      	b.n	1ad72 <mod_sub_add+0x80>
		return -EMSGSIZE;
   1ad90:	f06f 0079 	mvn.w	r0, #121	; 0x79
   1ad94:	e7f7      	b.n	1ad86 <mod_sub_add+0x94>
		return -EINVAL;
   1ad96:	f06f 0015 	mvn.w	r0, #21
   1ad9a:	e7f4      	b.n	1ad86 <mod_sub_add+0x94>

0001ad9c <mod_pub_get>:
{
   1ad9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if ((buf->len != 4U) && (buf->len != 6U)) {
   1ada0:	8893      	ldrh	r3, [r2, #4]
   1ada2:	f023 0302 	bic.w	r3, r3, #2
   1ada6:	b29b      	uxth	r3, r3
   1ada8:	2b04      	cmp	r3, #4
{
   1adaa:	b087      	sub	sp, #28
   1adac:	4606      	mov	r6, r0
   1adae:	460f      	mov	r7, r1
   1adb0:	4691      	mov	r9, r2
	if ((buf->len != 4U) && (buf->len != 6U)) {
   1adb2:	d133      	bne.n	1ae1c <mod_pub_get+0x80>
	elem_addr = net_buf_simple_pull_le16(buf);
   1adb4:	4610      	mov	r0, r2
   1adb6:	f002 f99b 	bl	1d0f0 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1adba:	b203      	sxth	r3, r0
   1adbc:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   1adbe:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1adc0:	dd2f      	ble.n	1ae22 <mod_pub_get+0x86>
	mod_id = buf->data;
   1adc2:	f8d9 8000 	ldr.w	r8, [r9]
	elem = bt_mesh_elem_find(elem_addr);
   1adc6:	f7ef fc75 	bl	a6b4 <bt_mesh_elem_find>
	if (!elem) {
   1adca:	4604      	mov	r4, r0
   1adcc:	b948      	cbnz	r0, 1ade2 <mod_pub_get+0x46>
		vnd = (buf->len == 4U);
   1adce:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   1add2:	1f1a      	subs	r2, r3, #4
   1add4:	4253      	negs	r3, r2
   1add6:	4153      	adcs	r3, r2
   1add8:	f88d 3017 	strb.w	r3, [sp, #23]
		status = STATUS_INVALID_ADDRESS;
   1addc:	2201      	movs	r2, #1
	uint16_t elem_addr, pub_addr = 0U;
   1adde:	4623      	mov	r3, r4
   1ade0:	e00a      	b.n	1adf8 <mod_pub_get+0x5c>
	mod = get_model(elem, buf, &vnd);
   1ade2:	f10d 0217 	add.w	r2, sp, #23
   1ade6:	4649      	mov	r1, r9
   1ade8:	f7ff fde3 	bl	1a9b2 <get_model>
	if (!mod) {
   1adec:	4604      	mov	r4, r0
   1adee:	b188      	cbz	r0, 1ae14 <mod_pub_get+0x78>
	if (!mod->pub) {
   1adf0:	6883      	ldr	r3, [r0, #8]
   1adf2:	b18b      	cbz	r3, 1ae18 <mod_pub_get+0x7c>
	pub_addr = mod->pub->addr;
   1adf4:	889b      	ldrh	r3, [r3, #4]
	status = STATUS_SUCCESS;
   1adf6:	2200      	movs	r2, #0
	return send_mod_pub_status(model, ctx, elem_addr, pub_addr, vnd, mod,
   1adf8:	e9cd 2802 	strd	r2, r8, [sp, #8]
   1adfc:	f89d 2017 	ldrb.w	r2, [sp, #23]
   1ae00:	9200      	str	r2, [sp, #0]
   1ae02:	9401      	str	r4, [sp, #4]
   1ae04:	462a      	mov	r2, r5
   1ae06:	4639      	mov	r1, r7
   1ae08:	4630      	mov	r0, r6
   1ae0a:	f7ff fb58 	bl	1a4be <send_mod_pub_status>
}
   1ae0e:	b007      	add	sp, #28
   1ae10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		status = STATUS_INVALID_MODEL;
   1ae14:	2202      	movs	r2, #2
   1ae16:	e7e2      	b.n	1adde <mod_pub_get+0x42>
		status = STATUS_NVAL_PUB_PARAM;
   1ae18:	2207      	movs	r2, #7
   1ae1a:	e7ed      	b.n	1adf8 <mod_pub_get+0x5c>
		return -EMSGSIZE;
   1ae1c:	f06f 0079 	mvn.w	r0, #121	; 0x79
   1ae20:	e7f5      	b.n	1ae0e <mod_pub_get+0x72>
		return -EINVAL;
   1ae22:	f06f 0015 	mvn.w	r0, #21
   1ae26:	e7f2      	b.n	1ae0e <mod_pub_get+0x72>

0001ae28 <mod_sub_list_visitor>:
{
   1ae28:	b538      	push	{r3, r4, r5, lr}
	if (mod->elem_idx != visit->elem_idx) {
   1ae2a:	880b      	ldrh	r3, [r1, #0]
   1ae2c:	7902      	ldrb	r2, [r0, #4]
   1ae2e:	429a      	cmp	r2, r3
{
   1ae30:	4605      	mov	r5, r0
   1ae32:	460c      	mov	r4, r1
	if (mod->elem_idx != visit->elem_idx) {
   1ae34:	d117      	bne.n	1ae66 <mod_sub_list_visitor+0x3e>
		if (mod->groups[i] == BT_MESH_ADDR_UNASSIGNED) {
   1ae36:	89c3      	ldrh	r3, [r0, #14]
   1ae38:	b143      	cbz	r3, 1ae4c <mod_sub_list_visitor+0x24>
		if (net_buf_simple_tailroom(visit->msg) <
   1ae3a:	6848      	ldr	r0, [r1, #4]
   1ae3c:	f002 f97f 	bl	1d13e <net_buf_simple_tailroom>
   1ae40:	2805      	cmp	r0, #5
   1ae42:	d90a      	bls.n	1ae5a <mod_sub_list_visitor+0x32>
		net_buf_simple_add_le16(visit->msg, mod->groups[i]);
   1ae44:	89e9      	ldrh	r1, [r5, #14]
   1ae46:	6860      	ldr	r0, [r4, #4]
   1ae48:	f002 f8d6 	bl	1cff8 <net_buf_simple_add_le16>
		if (mod->groups[i] == BT_MESH_ADDR_UNASSIGNED) {
   1ae4c:	8a2b      	ldrh	r3, [r5, #16]
   1ae4e:	b153      	cbz	r3, 1ae66 <mod_sub_list_visitor+0x3e>
		if (net_buf_simple_tailroom(visit->msg) <
   1ae50:	6860      	ldr	r0, [r4, #4]
   1ae52:	f002 f974 	bl	1d13e <net_buf_simple_tailroom>
   1ae56:	2805      	cmp	r0, #5
   1ae58:	d801      	bhi.n	1ae5e <mod_sub_list_visitor+0x36>
			return BT_MESH_WALK_STOP;
   1ae5a:	2000      	movs	r0, #0
}
   1ae5c:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_simple_add_le16(visit->msg, mod->groups[i]);
   1ae5e:	8a29      	ldrh	r1, [r5, #16]
   1ae60:	6860      	ldr	r0, [r4, #4]
   1ae62:	f002 f8c9 	bl	1cff8 <net_buf_simple_add_le16>
		return BT_MESH_WALK_CONTINUE;
   1ae66:	2001      	movs	r0, #1
   1ae68:	e7f8      	b.n	1ae5c <mod_sub_list_visitor+0x34>

0001ae6a <create_mod_app_status.constprop.0>:
static void create_mod_app_status(struct net_buf_simple *msg,
   1ae6a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ae6e:	f89d 9020 	ldrb.w	r9, [sp, #32]
   1ae72:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
   1ae76:	4604      	mov	r4, r0
   1ae78:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(msg, OP_MOD_APP_STATUS);
   1ae7a:	f248 013e 	movw	r1, #32830	; 0x803e
static void create_mod_app_status(struct net_buf_simple *msg,
   1ae7e:	4617      	mov	r7, r2
   1ae80:	461e      	mov	r6, r3
	bt_mesh_model_msg_init(msg, OP_MOD_APP_STATUS);
   1ae82:	f7ff f898 	bl	19fb6 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(msg, status);
   1ae86:	4649      	mov	r1, r9
   1ae88:	4620      	mov	r0, r4
   1ae8a:	f002 f8ad 	bl	1cfe8 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(msg, elem_addr);
   1ae8e:	4639      	mov	r1, r7
   1ae90:	4620      	mov	r0, r4
   1ae92:	f002 f8b1 	bl	1cff8 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(msg, app_idx);
   1ae96:	4631      	mov	r1, r6
   1ae98:	4620      	mov	r0, r4
   1ae9a:	f002 f8ad 	bl	1cff8 <net_buf_simple_add_le16>
	if (vnd) {
   1ae9e:	b14d      	cbz	r5, 1aeb4 <create_mod_app_status.constprop.0+0x4a>
		memcpy(net_buf_simple_add(msg, 4), mod_id, 4);
   1aea0:	2104      	movs	r1, #4
   1aea2:	4620      	mov	r0, r4
   1aea4:	f002 f891 	bl	1cfca <net_buf_simple_add>
   1aea8:	2204      	movs	r2, #4
		memcpy(net_buf_simple_add(msg, 2), mod_id, 2);
   1aeaa:	4641      	mov	r1, r8
}
   1aeac:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		memcpy(net_buf_simple_add(msg, 2), mod_id, 2);
   1aeb0:	f7fc b9d0 	b.w	17254 <memcpy>
   1aeb4:	2102      	movs	r1, #2
   1aeb6:	4620      	mov	r0, r4
   1aeb8:	f002 f887 	bl	1cfca <net_buf_simple_add>
   1aebc:	2202      	movs	r2, #2
   1aebe:	e7f4      	b.n	1aeaa <create_mod_app_status.constprop.0+0x40>

0001aec0 <mod_app_bind>:
{
   1aec0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1aec4:	4614      	mov	r4, r2
   1aec6:	b08b      	sub	sp, #44	; 0x2c
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_APP_STATUS, 9);
   1aec8:	ab06      	add	r3, sp, #24
   1aeca:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1aece:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1aed2:	9303      	str	r3, [sp, #12]
	if ((buf->len != 6U) && (buf->len != 8U)) {
   1aed4:	88a3      	ldrh	r3, [r4, #4]
   1aed6:	2b06      	cmp	r3, #6
{
   1aed8:	4607      	mov	r7, r0
   1aeda:	4688      	mov	r8, r1
	if ((buf->len != 6U) && (buf->len != 8U)) {
   1aedc:	d001      	beq.n	1aee2 <mod_app_bind+0x22>
   1aede:	2b08      	cmp	r3, #8
   1aee0:	d14b      	bne.n	1af7a <mod_app_bind+0xba>
	elem_addr = net_buf_simple_pull_le16(buf);
   1aee2:	4620      	mov	r0, r4
   1aee4:	f002 f904 	bl	1d0f0 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1aee8:	b203      	sxth	r3, r0
   1aeea:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   1aeec:	4606      	mov	r6, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1aeee:	dd47      	ble.n	1af80 <mod_app_bind+0xc0>
	key_app_idx = net_buf_simple_pull_le16(buf);
   1aef0:	4620      	mov	r0, r4
   1aef2:	f002 f8fd 	bl	1d0f0 <net_buf_simple_pull_le16>
   1aef6:	4605      	mov	r5, r0
	elem = bt_mesh_elem_find(elem_addr);
   1aef8:	4630      	mov	r0, r6
	mod_id = buf->data;
   1aefa:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   1aefe:	f7ef fbd9 	bl	a6b4 <bt_mesh_elem_find>
	if (!elem) {
   1af02:	b9d8      	cbnz	r0, 1af3c <mod_app_bind+0x7c>
		vnd = (buf->len == 4U);
   1af04:	88a3      	ldrh	r3, [r4, #4]
   1af06:	1f1a      	subs	r2, r3, #4
   1af08:	4253      	negs	r3, r2
   1af0a:	4153      	adcs	r3, r2
   1af0c:	f88d 300b 	strb.w	r3, [sp, #11]
		status = STATUS_INVALID_ADDRESS;
   1af10:	2401      	movs	r4, #1
	create_mod_app_status(&msg, mod, vnd, elem_addr, key_app_idx, status,
   1af12:	e9cd 4900 	strd	r4, r9, [sp]
   1af16:	f89d 100b 	ldrb.w	r1, [sp, #11]
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1af1a:	2400      	movs	r4, #0
	create_mod_app_status(&msg, mod, vnd, elem_addr, key_app_idx, status,
   1af1c:	462b      	mov	r3, r5
   1af1e:	4632      	mov	r2, r6
   1af20:	a803      	add	r0, sp, #12
   1af22:	f7ff ffa2 	bl	1ae6a <create_mod_app_status.constprop.0>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1af26:	9400      	str	r4, [sp, #0]
   1af28:	4623      	mov	r3, r4
   1af2a:	aa03      	add	r2, sp, #12
   1af2c:	4641      	mov	r1, r8
   1af2e:	4638      	mov	r0, r7
   1af30:	f7fe fffd 	bl	19f2e <bt_mesh_model_send>
	return 0;
   1af34:	4620      	mov	r0, r4
}
   1af36:	b00b      	add	sp, #44	; 0x2c
   1af38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	mod = get_model(elem, buf, &vnd);
   1af3c:	4621      	mov	r1, r4
   1af3e:	f10d 020b 	add.w	r2, sp, #11
   1af42:	f7ff fd36 	bl	1a9b2 <get_model>
	if (!mod) {
   1af46:	4604      	mov	r4, r0
   1af48:	b188      	cbz	r0, 1af6e <mod_app_bind+0xae>
	if (model == mod) {
   1af4a:	4287      	cmp	r7, r0
   1af4c:	d011      	beq.n	1af72 <mod_app_bind+0xb2>
	if (!bt_mesh_app_key_exists(key_idx)) {
   1af4e:	4628      	mov	r0, r5
   1af50:	f7ee f83a 	bl	8fc8 <bt_mesh_app_key_exists>
   1af54:	b178      	cbz	r0, 1af76 <mod_app_bind+0xb6>
		if (model->keys[i] == key_idx) {
   1af56:	89a3      	ldrh	r3, [r4, #12]
   1af58:	429d      	cmp	r5, r3
   1af5a:	d006      	beq.n	1af6a <mod_app_bind+0xaa>
		if (model->keys[i] == BT_MESH_KEY_UNUSED) {
   1af5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1af60:	4293      	cmp	r3, r2
   1af62:	d001      	beq.n	1af68 <mod_app_bind+0xa8>
	return STATUS_INSUFF_RESOURCES;
   1af64:	2405      	movs	r4, #5
   1af66:	e7d4      	b.n	1af12 <mod_app_bind+0x52>
			model->keys[i] = key_idx;
   1af68:	81a5      	strh	r5, [r4, #12]
			return STATUS_SUCCESS;
   1af6a:	2400      	movs	r4, #0
   1af6c:	e7d1      	b.n	1af12 <mod_app_bind+0x52>
		status = STATUS_INVALID_MODEL;
   1af6e:	2402      	movs	r4, #2
   1af70:	e7cf      	b.n	1af12 <mod_app_bind+0x52>
		status = STATUS_CANNOT_BIND;
   1af72:	240d      	movs	r4, #13
   1af74:	e7cd      	b.n	1af12 <mod_app_bind+0x52>
		return STATUS_INVALID_APPKEY;
   1af76:	2403      	movs	r4, #3
   1af78:	e7cb      	b.n	1af12 <mod_app_bind+0x52>
		return -EMSGSIZE;
   1af7a:	f06f 0079 	mvn.w	r0, #121	; 0x79
   1af7e:	e7da      	b.n	1af36 <mod_app_bind+0x76>
		return -EINVAL;
   1af80:	f06f 0015 	mvn.w	r0, #21
   1af84:	e7d7      	b.n	1af36 <mod_app_bind+0x76>

0001af86 <_mod_pub_set.constprop.0>:
static uint8_t _mod_pub_set(struct bt_mesh_model *model, uint16_t pub_addr,
   1af86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1af8a:	4605      	mov	r5, r0
	if (!model->pub) {
   1af8c:	6880      	ldr	r0, [r0, #8]
static uint8_t _mod_pub_set(struct bt_mesh_model *model, uint16_t pub_addr,
   1af8e:	f89d 701c 	ldrb.w	r7, [sp, #28]
   1af92:	460e      	mov	r6, r1
   1af94:	4690      	mov	r8, r2
   1af96:	461c      	mov	r4, r3
	if (!model->pub) {
   1af98:	2800      	cmp	r0, #0
   1af9a:	d055      	beq.n	1b048 <_mod_pub_set.constprop.0+0xc2>
	if (!IS_ENABLED(CONFIG_BT_MESH_LOW_POWER) && cred_flag) {
   1af9c:	2b00      	cmp	r3, #0
   1af9e:	d151      	bne.n	1b044 <_mod_pub_set.constprop.0+0xbe>
	if (!model->pub->update && period) {
   1afa0:	6941      	ldr	r1, [r0, #20]
   1afa2:	b909      	cbnz	r1, 1afa8 <_mod_pub_set.constprop.0+0x22>
   1afa4:	2f00      	cmp	r7, #0
   1afa6:	d14f      	bne.n	1b048 <_mod_pub_set.constprop.0+0xc2>
	if (pub_addr == BT_MESH_ADDR_UNASSIGNED) {
   1afa8:	b976      	cbnz	r6, 1afc8 <_mod_pub_set.constprop.0+0x42>
		if (model->pub->addr == BT_MESH_ADDR_UNASSIGNED) {
   1afaa:	8882      	ldrh	r2, [r0, #4]
   1afac:	b18a      	cbz	r2, 1afd2 <_mod_pub_set.constprop.0+0x4c>
		model->pub->addr = BT_MESH_ADDR_UNASSIGNED;
   1afae:	6842      	ldr	r2, [r0, #4]
   1afb0:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
   1afb4:	6042      	str	r2, [r0, #4]
		model->pub->ttl = 0U;
   1afb6:	6882      	ldr	r2, [r0, #8]
   1afb8:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
   1afbc:	6082      	str	r2, [r0, #8]
		if (model->pub->update) {
   1afbe:	b141      	cbz	r1, 1afd2 <_mod_pub_set.constprop.0+0x4c>
			(void)k_work_cancel_delayable(&model->pub->timer);
   1afc0:	3018      	adds	r0, #24
   1afc2:	f003 fbc4 	bl	1e74e <k_work_cancel_delayable>
   1afc6:	e004      	b.n	1afd2 <_mod_pub_set.constprop.0+0x4c>
	if (!bt_mesh_app_key_exists(app_idx) || !bt_mesh_model_has_key(model, app_idx)) {
   1afc8:	4640      	mov	r0, r8
   1afca:	f7ed fffd 	bl	8fc8 <bt_mesh_app_key_exists>
   1afce:	b918      	cbnz	r0, 1afd8 <_mod_pub_set.constprop.0+0x52>
		return STATUS_INVALID_APPKEY;
   1afd0:	2403      	movs	r4, #3
}
   1afd2:	4620      	mov	r0, r4
   1afd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!bt_mesh_app_key_exists(app_idx) || !bt_mesh_model_has_key(model, app_idx)) {
   1afd8:	4641      	mov	r1, r8
   1afda:	4628      	mov	r0, r5
   1afdc:	f7fe ff95 	bl	19f0a <bt_mesh_model_has_key>
   1afe0:	2800      	cmp	r0, #0
   1afe2:	d0f5      	beq.n	1afd0 <_mod_pub_set.constprop.0+0x4a>
	model->pub->addr = pub_addr;
   1afe4:	68ab      	ldr	r3, [r5, #8]
	model->pub->ttl = ttl;
   1afe6:	f89d 2018 	ldrb.w	r2, [sp, #24]
	model->pub->addr = pub_addr;
   1afea:	809e      	strh	r6, [r3, #4]
	model->pub->key = app_idx;
   1afec:	88de      	ldrh	r6, [r3, #6]
	model->pub->ttl = ttl;
   1afee:	721a      	strb	r2, [r3, #8]
	model->pub->key = app_idx;
   1aff0:	f426 56ff 	bic.w	r6, r6, #8160	; 0x1fe0
   1aff4:	f026 061f 	bic.w	r6, r6, #31
   1aff8:	f3c8 080c 	ubfx	r8, r8, #0, #13
	model->pub->retransmit = retransmit;
   1affc:	f89d 2020 	ldrb.w	r2, [sp, #32]
	model->pub->period = period;
   1b000:	729f      	strb	r7, [r3, #10]
	model->pub->key = app_idx;
   1b002:	ea46 0608 	orr.w	r6, r6, r8
   1b006:	80de      	strh	r6, [r3, #6]
	model->pub->retransmit = retransmit;
   1b008:	725a      	strb	r2, [r3, #9]
	if (model->pub->update) {
   1b00a:	695b      	ldr	r3, [r3, #20]
   1b00c:	2b00      	cmp	r3, #0
   1b00e:	d0e0      	beq.n	1afd2 <_mod_pub_set.constprop.0+0x4c>
		period_ms = bt_mesh_model_pub_period_get(model);
   1b010:	4628      	mov	r0, r5
   1b012:	f7ef fa59 	bl	a4c8 <bt_mesh_model_pub_period_get>
		if (period_ms > 0) {
   1b016:	1e06      	subs	r6, r0, #0
   1b018:	68a8      	ldr	r0, [r5, #8]
   1b01a:	ddd1      	ble.n	1afc0 <_mod_pub_set.constprop.0+0x3a>
			k_work_reschedule(&model->pub->timer,
   1b01c:	f100 0518 	add.w	r5, r0, #24
   1b020:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   1b024:	f240 30e7 	movw	r0, #999	; 0x3e7
   1b028:	2100      	movs	r1, #0
   1b02a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b02e:	2300      	movs	r3, #0
   1b030:	fbc6 0107 	smlal	r0, r1, r6, r7
   1b034:	f7e5 fcc2 	bl	9bc <__aeabi_uldivmod>
   1b038:	4602      	mov	r2, r0
   1b03a:	460b      	mov	r3, r1
   1b03c:	4628      	mov	r0, r5
   1b03e:	f7fa fd43 	bl	15ac8 <k_work_reschedule>
   1b042:	e7c6      	b.n	1afd2 <_mod_pub_set.constprop.0+0x4c>
		return STATUS_FEAT_NOT_SUPP;
   1b044:	240a      	movs	r4, #10
   1b046:	e7c4      	b.n	1afd2 <_mod_pub_set.constprop.0+0x4c>
		return STATUS_NVAL_PUB_PARAM;
   1b048:	2407      	movs	r4, #7
   1b04a:	e7c2      	b.n	1afd2 <_mod_pub_set.constprop.0+0x4c>

0001b04c <mod_unbind.constprop.0>:
static uint8_t mod_unbind(struct bt_mesh_model *model, uint16_t key_idx, bool store)
   1b04c:	b530      	push	{r4, r5, lr}
   1b04e:	4605      	mov	r5, r0
   1b050:	b085      	sub	sp, #20
	if (!bt_mesh_app_key_exists(key_idx)) {
   1b052:	4608      	mov	r0, r1
static uint8_t mod_unbind(struct bt_mesh_model *model, uint16_t key_idx, bool store)
   1b054:	460c      	mov	r4, r1
	if (!bt_mesh_app_key_exists(key_idx)) {
   1b056:	f7ed ffb7 	bl	8fc8 <bt_mesh_app_key_exists>
   1b05a:	b990      	cbnz	r0, 1b082 <mod_unbind.constprop.0+0x36>
		return STATUS_INVALID_APPKEY;
   1b05c:	2003      	movs	r0, #3
}
   1b05e:	b005      	add	sp, #20
   1b060:	bd30      	pop	{r4, r5, pc}
		if (model->pub && model->pub->key == key_idx) {
   1b062:	88db      	ldrh	r3, [r3, #6]
   1b064:	f3c3 030b 	ubfx	r3, r3, #0, #12
   1b068:	4293      	cmp	r3, r2
   1b06a:	d113      	bne.n	1b094 <mod_unbind.constprop.0+0x48>
			_mod_pub_set(model, BT_MESH_ADDR_UNASSIGNED,
   1b06c:	2400      	movs	r4, #0
   1b06e:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1b072:	9400      	str	r4, [sp, #0]
   1b074:	4623      	mov	r3, r4
   1b076:	4622      	mov	r2, r4
   1b078:	4621      	mov	r1, r4
   1b07a:	4628      	mov	r0, r5
   1b07c:	f7ff ff83 	bl	1af86 <_mod_pub_set.constprop.0>
   1b080:	e008      	b.n	1b094 <mod_unbind.constprop.0+0x48>
		if (model->keys[i] != key_idx) {
   1b082:	89aa      	ldrh	r2, [r5, #12]
   1b084:	42a2      	cmp	r2, r4
   1b086:	d105      	bne.n	1b094 <mod_unbind.constprop.0+0x48>
		model->keys[i] = BT_MESH_KEY_UNUSED;
   1b088:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1b08c:	81ab      	strh	r3, [r5, #12]
		if (model->pub && model->pub->key == key_idx) {
   1b08e:	68ab      	ldr	r3, [r5, #8]
   1b090:	2b00      	cmp	r3, #0
   1b092:	d1e6      	bne.n	1b062 <mod_unbind.constprop.0+0x16>
static uint8_t mod_unbind(struct bt_mesh_model *model, uint16_t key_idx, bool store)
   1b094:	2000      	movs	r0, #0
   1b096:	e7e2      	b.n	1b05e <mod_unbind.constprop.0+0x12>

0001b098 <mod_app_unbind>:
{
   1b098:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b09c:	4614      	mov	r4, r2
   1b09e:	b08b      	sub	sp, #44	; 0x2c
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_APP_STATUS, 9);
   1b0a0:	ab06      	add	r3, sp, #24
   1b0a2:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1b0a6:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1b0aa:	9303      	str	r3, [sp, #12]
	if ((buf->len != 6U) && (buf->len != 8U)) {
   1b0ac:	88a3      	ldrh	r3, [r4, #4]
   1b0ae:	2b06      	cmp	r3, #6
{
   1b0b0:	4607      	mov	r7, r0
   1b0b2:	4688      	mov	r8, r1
	if ((buf->len != 6U) && (buf->len != 8U)) {
   1b0b4:	d001      	beq.n	1b0ba <mod_app_unbind+0x22>
   1b0b6:	2b08      	cmp	r3, #8
   1b0b8:	d138      	bne.n	1b12c <mod_app_unbind+0x94>
	elem_addr = net_buf_simple_pull_le16(buf);
   1b0ba:	4620      	mov	r0, r4
   1b0bc:	f002 f818 	bl	1d0f0 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1b0c0:	b203      	sxth	r3, r0
   1b0c2:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   1b0c4:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1b0c6:	dd34      	ble.n	1b132 <mod_app_unbind+0x9a>
	key_app_idx = net_buf_simple_pull_le16(buf);
   1b0c8:	4620      	mov	r0, r4
   1b0ca:	f002 f811 	bl	1d0f0 <net_buf_simple_pull_le16>
   1b0ce:	4606      	mov	r6, r0
	elem = bt_mesh_elem_find(elem_addr);
   1b0d0:	4628      	mov	r0, r5
	mod_id = buf->data;
   1b0d2:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   1b0d6:	f7ef faed 	bl	a6b4 <bt_mesh_elem_find>
	if (!elem) {
   1b0da:	b9d8      	cbnz	r0, 1b114 <mod_app_unbind+0x7c>
		vnd = (buf->len == 4U);
   1b0dc:	88a3      	ldrh	r3, [r4, #4]
   1b0de:	1f1a      	subs	r2, r3, #4
   1b0e0:	4253      	negs	r3, r2
   1b0e2:	4153      	adcs	r3, r2
   1b0e4:	f88d 300b 	strb.w	r3, [sp, #11]
		status = STATUS_INVALID_ADDRESS;
   1b0e8:	2001      	movs	r0, #1
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1b0ea:	2400      	movs	r4, #0
	create_mod_app_status(&msg, mod, vnd, elem_addr, key_app_idx, status,
   1b0ec:	e9cd 0900 	strd	r0, r9, [sp]
   1b0f0:	f89d 100b 	ldrb.w	r1, [sp, #11]
   1b0f4:	4633      	mov	r3, r6
   1b0f6:	462a      	mov	r2, r5
   1b0f8:	a803      	add	r0, sp, #12
   1b0fa:	f7ff feb6 	bl	1ae6a <create_mod_app_status.constprop.0>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1b0fe:	9400      	str	r4, [sp, #0]
   1b100:	4623      	mov	r3, r4
   1b102:	aa03      	add	r2, sp, #12
   1b104:	4641      	mov	r1, r8
   1b106:	4638      	mov	r0, r7
   1b108:	f7fe ff11 	bl	19f2e <bt_mesh_model_send>
	return 0;
   1b10c:	4620      	mov	r0, r4
}
   1b10e:	b00b      	add	sp, #44	; 0x2c
   1b110:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	mod = get_model(elem, buf, &vnd);
   1b114:	f10d 020b 	add.w	r2, sp, #11
   1b118:	4621      	mov	r1, r4
   1b11a:	f7ff fc4a 	bl	1a9b2 <get_model>
	if (!mod) {
   1b11e:	b118      	cbz	r0, 1b128 <mod_app_unbind+0x90>
	status = mod_unbind(mod, key_app_idx, true);
   1b120:	4631      	mov	r1, r6
   1b122:	f7ff ff93 	bl	1b04c <mod_unbind.constprop.0>
send_status:
   1b126:	e7e0      	b.n	1b0ea <mod_app_unbind+0x52>
		status = STATUS_INVALID_MODEL;
   1b128:	2002      	movs	r0, #2
   1b12a:	e7de      	b.n	1b0ea <mod_app_unbind+0x52>
		return -EMSGSIZE;
   1b12c:	f06f 0079 	mvn.w	r0, #121	; 0x79
   1b130:	e7ed      	b.n	1b10e <mod_app_unbind+0x76>
		return -EINVAL;
   1b132:	f06f 0015 	mvn.w	r0, #21
   1b136:	e7ea      	b.n	1b10e <mod_app_unbind+0x76>

0001b138 <mod_app_key_del>:
	mod_unbind(mod, *app_idx, true);
   1b138:	9b00      	ldr	r3, [sp, #0]
   1b13a:	8819      	ldrh	r1, [r3, #0]
   1b13c:	f7ff bf86 	b.w	1b04c <mod_unbind.constprop.0>

0001b140 <mod_pub_set>:
{
   1b140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if ((buf->len != 11U) && (buf->len != 13U)) {
   1b144:	8893      	ldrh	r3, [r2, #4]
   1b146:	2b0b      	cmp	r3, #11
{
   1b148:	b08b      	sub	sp, #44	; 0x2c
   1b14a:	4681      	mov	r9, r0
   1b14c:	468a      	mov	sl, r1
   1b14e:	4693      	mov	fp, r2
	if ((buf->len != 11U) && (buf->len != 13U)) {
   1b150:	d001      	beq.n	1b156 <mod_pub_set+0x16>
   1b152:	2b0d      	cmp	r3, #13
   1b154:	d158      	bne.n	1b208 <mod_pub_set+0xc8>
	elem_addr = net_buf_simple_pull_le16(buf);
   1b156:	4658      	mov	r0, fp
   1b158:	f001 ffca 	bl	1d0f0 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1b15c:	b203      	sxth	r3, r0
   1b15e:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   1b160:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1b162:	dc04      	bgt.n	1b16e <mod_pub_set+0x2e>
		return -EINVAL;
   1b164:	f06f 0015 	mvn.w	r0, #21
}
   1b168:	b00b      	add	sp, #44	; 0x2c
   1b16a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	pub_addr = net_buf_simple_pull_le16(buf);
   1b16e:	4658      	mov	r0, fp
   1b170:	f001 ffbe 	bl	1d0f0 <net_buf_simple_pull_le16>
   1b174:	4606      	mov	r6, r0
	pub_app_idx = net_buf_simple_pull_le16(buf);
   1b176:	4658      	mov	r0, fp
   1b178:	f001 ffba 	bl	1d0f0 <net_buf_simple_pull_le16>
   1b17c:	4607      	mov	r7, r0
	pub_ttl = net_buf_simple_pull_u8(buf);
   1b17e:	4658      	mov	r0, fp
   1b180:	f001 ffae 	bl	1d0e0 <net_buf_simple_pull_u8>
	if (pub_ttl > BT_MESH_TTL_MAX && pub_ttl != BT_MESH_TTL_DEFAULT) {
   1b184:	f1a0 0380 	sub.w	r3, r0, #128	; 0x80
   1b188:	b2db      	uxtb	r3, r3
   1b18a:	2b7e      	cmp	r3, #126	; 0x7e
	pub_ttl = net_buf_simple_pull_u8(buf);
   1b18c:	4680      	mov	r8, r0
	if (pub_ttl > BT_MESH_TTL_MAX && pub_ttl != BT_MESH_TTL_DEFAULT) {
   1b18e:	d9e9      	bls.n	1b164 <mod_pub_set+0x24>
	pub_period = net_buf_simple_pull_u8(buf);
   1b190:	4658      	mov	r0, fp
   1b192:	f001 ffa5 	bl	1d0e0 <net_buf_simple_pull_u8>
   1b196:	9006      	str	r0, [sp, #24]
	retransmit = net_buf_simple_pull_u8(buf);
   1b198:	4658      	mov	r0, fp
   1b19a:	f001 ffa1 	bl	1d0e0 <net_buf_simple_pull_u8>
	mod_id = buf->data;
   1b19e:	f8db 3000 	ldr.w	r3, [fp]
	retransmit = net_buf_simple_pull_u8(buf);
   1b1a2:	9007      	str	r0, [sp, #28]
	elem = bt_mesh_elem_find(elem_addr);
   1b1a4:	4628      	mov	r0, r5
	mod_id = buf->data;
   1b1a6:	9305      	str	r3, [sp, #20]
	elem = bt_mesh_elem_find(elem_addr);
   1b1a8:	f7ef fa84 	bl	a6b4 <bt_mesh_elem_find>
	if (!elem) {
   1b1ac:	4604      	mov	r4, r0
   1b1ae:	b9a8      	cbnz	r0, 1b1dc <mod_pub_set+0x9c>
		vnd = (buf->len == 4U);
   1b1b0:	f8bb 3004 	ldrh.w	r3, [fp, #4]
   1b1b4:	1f1a      	subs	r2, r3, #4
   1b1b6:	4253      	negs	r3, r2
   1b1b8:	4153      	adcs	r3, r2
   1b1ba:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
		status = STATUS_INVALID_ADDRESS;
   1b1be:	2001      	movs	r0, #1
	return send_mod_pub_status(model, ctx, elem_addr, pub_addr, vnd, mod,
   1b1c0:	9b05      	ldr	r3, [sp, #20]
   1b1c2:	9401      	str	r4, [sp, #4]
   1b1c4:	e9cd 0302 	strd	r0, r3, [sp, #8]
   1b1c8:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   1b1cc:	9300      	str	r3, [sp, #0]
   1b1ce:	462a      	mov	r2, r5
   1b1d0:	4633      	mov	r3, r6
   1b1d2:	4651      	mov	r1, sl
   1b1d4:	4648      	mov	r0, r9
   1b1d6:	f7ff f972 	bl	1a4be <send_mod_pub_status>
   1b1da:	e7c5      	b.n	1b168 <mod_pub_set+0x28>
	mod = get_model(elem, buf, &vnd);
   1b1dc:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   1b1e0:	4659      	mov	r1, fp
   1b1e2:	f7ff fbe6 	bl	1a9b2 <get_model>
	if (!mod) {
   1b1e6:	4604      	mov	r4, r0
   1b1e8:	b160      	cbz	r0, 1b204 <mod_pub_set+0xc4>
	status = _mod_pub_set(mod, pub_addr, pub_app_idx, cred_flag, pub_ttl,
   1b1ea:	9b07      	ldr	r3, [sp, #28]
   1b1ec:	9302      	str	r3, [sp, #8]
   1b1ee:	9b06      	ldr	r3, [sp, #24]
   1b1f0:	f3c7 020b 	ubfx	r2, r7, #0, #12
   1b1f4:	e9cd 8300 	strd	r8, r3, [sp]
   1b1f8:	4631      	mov	r1, r6
   1b1fa:	f3c7 3300 	ubfx	r3, r7, #12, #1
   1b1fe:	f7ff fec2 	bl	1af86 <_mod_pub_set.constprop.0>
   1b202:	e7dd      	b.n	1b1c0 <mod_pub_set+0x80>
		status = STATUS_INVALID_MODEL;
   1b204:	2002      	movs	r0, #2
   1b206:	e7db      	b.n	1b1c0 <mod_pub_set+0x80>
		return -EMSGSIZE;
   1b208:	f06f 0079 	mvn.w	r0, #121	; 0x79
   1b20c:	e7ac      	b.n	1b168 <mod_pub_set+0x28>

0001b20e <mod_pub_va_set>:
{
   1b20e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if ((buf->len != 25U) && (buf->len != 27U)) {
   1b212:	8893      	ldrh	r3, [r2, #4]
   1b214:	f023 0302 	bic.w	r3, r3, #2
   1b218:	b29b      	uxth	r3, r3
   1b21a:	2b19      	cmp	r3, #25
{
   1b21c:	b08b      	sub	sp, #44	; 0x2c
   1b21e:	4681      	mov	r9, r0
   1b220:	468a      	mov	sl, r1
   1b222:	4693      	mov	fp, r2
	if ((buf->len != 25U) && (buf->len != 27U)) {
   1b224:	d172      	bne.n	1b30c <mod_pub_va_set+0xfe>
	elem_addr = net_buf_simple_pull_le16(buf);
   1b226:	4610      	mov	r0, r2
   1b228:	f001 ff62 	bl	1d0f0 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1b22c:	b203      	sxth	r3, r0
   1b22e:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   1b230:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1b232:	dc04      	bgt.n	1b23e <mod_pub_va_set+0x30>
		return -EINVAL;
   1b234:	f06f 0015 	mvn.w	r0, #21
}
   1b238:	b00b      	add	sp, #44	; 0x2c
   1b23a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	label_uuid = net_buf_simple_pull_mem(buf, 16);
   1b23e:	2110      	movs	r1, #16
   1b240:	4658      	mov	r0, fp
   1b242:	f001 ff45 	bl	1d0d0 <net_buf_simple_pull_mem>
   1b246:	4606      	mov	r6, r0
	pub_app_idx = net_buf_simple_pull_le16(buf);
   1b248:	4658      	mov	r0, fp
   1b24a:	f001 ff51 	bl	1d0f0 <net_buf_simple_pull_le16>
   1b24e:	4607      	mov	r7, r0
	pub_ttl = net_buf_simple_pull_u8(buf);
   1b250:	4658      	mov	r0, fp
   1b252:	f001 ff45 	bl	1d0e0 <net_buf_simple_pull_u8>
	if (pub_ttl > BT_MESH_TTL_MAX && pub_ttl != BT_MESH_TTL_DEFAULT) {
   1b256:	f1a0 0380 	sub.w	r3, r0, #128	; 0x80
   1b25a:	b2db      	uxtb	r3, r3
   1b25c:	2b7e      	cmp	r3, #126	; 0x7e
	pub_ttl = net_buf_simple_pull_u8(buf);
   1b25e:	4680      	mov	r8, r0
	if (pub_ttl > BT_MESH_TTL_MAX && pub_ttl != BT_MESH_TTL_DEFAULT) {
   1b260:	d9e8      	bls.n	1b234 <mod_pub_va_set+0x26>
	pub_period = net_buf_simple_pull_u8(buf);
   1b262:	4658      	mov	r0, fp
   1b264:	f001 ff3c 	bl	1d0e0 <net_buf_simple_pull_u8>
   1b268:	9006      	str	r0, [sp, #24]
	retransmit = net_buf_simple_pull_u8(buf);
   1b26a:	4658      	mov	r0, fp
   1b26c:	f001 ff38 	bl	1d0e0 <net_buf_simple_pull_u8>
	mod_id = buf->data;
   1b270:	f8db 3000 	ldr.w	r3, [fp]
	retransmit = net_buf_simple_pull_u8(buf);
   1b274:	9007      	str	r0, [sp, #28]
	elem = bt_mesh_elem_find(elem_addr);
   1b276:	4628      	mov	r0, r5
	mod_id = buf->data;
   1b278:	9305      	str	r3, [sp, #20]
	elem = bt_mesh_elem_find(elem_addr);
   1b27a:	f7ef fa1b 	bl	a6b4 <bt_mesh_elem_find>
	if (!elem) {
   1b27e:	4604      	mov	r4, r0
   1b280:	b9c0      	cbnz	r0, 1b2b4 <mod_pub_va_set+0xa6>
		vnd = (buf->len == 4U);
   1b282:	f8bb 3004 	ldrh.w	r3, [fp, #4]
		pub_addr = 0U;
   1b286:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
		vnd = (buf->len == 4U);
   1b28a:	1f1a      	subs	r2, r3, #4
   1b28c:	4253      	negs	r3, r2
   1b28e:	4153      	adcs	r3, r2
   1b290:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
		status = STATUS_INVALID_ADDRESS;
   1b294:	2301      	movs	r3, #1
	return send_mod_pub_status(model, ctx, elem_addr, pub_addr, vnd, mod,
   1b296:	9a05      	ldr	r2, [sp, #20]
   1b298:	9401      	str	r4, [sp, #4]
   1b29a:	e9cd 3202 	strd	r3, r2, [sp, #8]
   1b29e:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   1b2a2:	9300      	str	r3, [sp, #0]
   1b2a4:	462a      	mov	r2, r5
   1b2a6:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   1b2aa:	4651      	mov	r1, sl
   1b2ac:	4648      	mov	r0, r9
   1b2ae:	f7ff f906 	bl	1a4be <send_mod_pub_status>
   1b2b2:	e7c1      	b.n	1b238 <mod_pub_va_set+0x2a>
	mod = get_model(elem, buf, &vnd);
   1b2b4:	f10d 0225 	add.w	r2, sp, #37	; 0x25
   1b2b8:	4659      	mov	r1, fp
   1b2ba:	f7ff fb7a 	bl	1a9b2 <get_model>
	if (!mod) {
   1b2be:	4604      	mov	r4, r0
   1b2c0:	b918      	cbnz	r0, 1b2ca <mod_pub_va_set+0xbc>
		pub_addr = 0U;
   1b2c2:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
		status = STATUS_INVALID_MODEL;
   1b2c6:	2302      	movs	r3, #2
		goto send_status;
   1b2c8:	e7e5      	b.n	1b296 <mod_pub_va_set+0x88>
	status = bt_mesh_va_add(label_uuid, &pub_addr);
   1b2ca:	f10d 0126 	add.w	r1, sp, #38	; 0x26
   1b2ce:	4630      	mov	r0, r6
   1b2d0:	f7fe fc00 	bl	19ad4 <bt_mesh_va_add>
   1b2d4:	4603      	mov	r3, r0
   1b2d6:	4683      	mov	fp, r0
	if (status != STATUS_SUCCESS) {
   1b2d8:	2800      	cmp	r0, #0
   1b2da:	d1dc      	bne.n	1b296 <mod_pub_va_set+0x88>
	status = _mod_pub_set(mod, pub_addr, pub_app_idx, cred_flag, pub_ttl,
   1b2dc:	9b07      	ldr	r3, [sp, #28]
   1b2de:	9302      	str	r3, [sp, #8]
   1b2e0:	9b06      	ldr	r3, [sp, #24]
   1b2e2:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
   1b2e6:	e9cd 8300 	strd	r8, r3, [sp]
   1b2ea:	f3c7 020b 	ubfx	r2, r7, #0, #12
   1b2ee:	f3c7 3300 	ubfx	r3, r7, #12, #1
   1b2f2:	4620      	mov	r0, r4
   1b2f4:	f7ff fe47 	bl	1af86 <_mod_pub_set.constprop.0>
	if (status != STATUS_SUCCESS) {
   1b2f8:	4603      	mov	r3, r0
   1b2fa:	2800      	cmp	r0, #0
   1b2fc:	d0cb      	beq.n	1b296 <mod_pub_va_set+0x88>
   1b2fe:	9006      	str	r0, [sp, #24]
		bt_mesh_va_del(label_uuid, NULL);
   1b300:	4659      	mov	r1, fp
   1b302:	4630      	mov	r0, r6
   1b304:	f7fe fbe8 	bl	19ad8 <bt_mesh_va_del>
   1b308:	9b06      	ldr	r3, [sp, #24]
   1b30a:	e7c4      	b.n	1b296 <mod_pub_va_set+0x88>
		return -EMSGSIZE;
   1b30c:	f06f 0079 	mvn.w	r0, #121	; 0x79
   1b310:	e792      	b.n	1b238 <mod_pub_va_set+0x2a>

0001b312 <dev_comp_data_get>:
{
   1b312:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b316:	b08f      	sub	sp, #60	; 0x3c
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   1b318:	ab05      	add	r3, sp, #20
{
   1b31a:	4680      	mov	r8, r0
   1b31c:	4689      	mov	r9, r1
	page = net_buf_simple_pull_u8(buf);
   1b31e:	4610      	mov	r0, r2
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   1b320:	f44f 1110 	mov.w	r1, #2359296	; 0x240000
   1b324:	e9cd 1303 	strd	r1, r3, [sp, #12]
   1b328:	9302      	str	r3, [sp, #8]
	page = net_buf_simple_pull_u8(buf);
   1b32a:	f001 fed9 	bl	1d0e0 <net_buf_simple_pull_u8>
	bt_mesh_model_msg_init(&sdu, OP_DEV_COMP_DATA_STATUS);
   1b32e:	2102      	movs	r1, #2
   1b330:	a802      	add	r0, sp, #8
   1b332:	f7fe fe40 	bl	19fb6 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&sdu, page);
   1b336:	2100      	movs	r1, #0
   1b338:	a802      	add	r0, sp, #8
   1b33a:	f001 fe55 	bl	1cfe8 <net_buf_simple_add_u8>
	comp = bt_mesh_comp_get();
   1b33e:	f7ef fa0b 	bl	a758 <bt_mesh_comp_get>
   1b342:	4605      	mov	r5, r0
	net_buf_simple_add_le16(buf, comp->cid);
   1b344:	8801      	ldrh	r1, [r0, #0]
   1b346:	a802      	add	r0, sp, #8
   1b348:	f001 fe56 	bl	1cff8 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(buf, comp->pid);
   1b34c:	8869      	ldrh	r1, [r5, #2]
   1b34e:	a802      	add	r0, sp, #8
   1b350:	f001 fe52 	bl	1cff8 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(buf, comp->vid);
   1b354:	88a9      	ldrh	r1, [r5, #4]
   1b356:	a802      	add	r0, sp, #8
   1b358:	f001 fe4e 	bl	1cff8 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(buf, CONFIG_BT_MESH_CRPL);
   1b35c:	210a      	movs	r1, #10
   1b35e:	a802      	add	r0, sp, #8
   1b360:	f001 fe4a 	bl	1cff8 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(buf, feat);
   1b364:	2101      	movs	r1, #1
   1b366:	a802      	add	r0, sp, #8
   1b368:	f001 fe46 	bl	1cff8 <net_buf_simple_add_le16>
	for (i = 0; i < comp->elem_count; i++) {
   1b36c:	2700      	movs	r7, #0
	    4 + (elem->model_count * 2U) + (elem->vnd_model_count * 4U)) {
   1b36e:	f04f 0a02 	mov.w	sl, #2
	for (i = 0; i < comp->elem_count; i++) {
   1b372:	68ab      	ldr	r3, [r5, #8]
   1b374:	429f      	cmp	r7, r3
   1b376:	d309      	bcc.n	1b38c <dev_comp_data_get+0x7a>
	if (bt_mesh_model_send(model, ctx, &sdu, NULL, NULL)) {
   1b378:	2400      	movs	r4, #0
   1b37a:	9400      	str	r4, [sp, #0]
   1b37c:	4623      	mov	r3, r4
   1b37e:	aa02      	add	r2, sp, #8
   1b380:	4649      	mov	r1, r9
   1b382:	4640      	mov	r0, r8
   1b384:	f7fe fdd3 	bl	19f2e <bt_mesh_model_send>
	return 0;
   1b388:	4620      	mov	r0, r4
   1b38a:	e03c      	b.n	1b406 <dev_comp_data_get+0xf4>
		err = comp_add_elem(buf, &comp->elem[i], i == 0);
   1b38c:	68ec      	ldr	r4, [r5, #12]
   1b38e:	eb04 1407 	add.w	r4, r4, r7, lsl #4
	if (net_buf_simple_tailroom(buf) <
   1b392:	a802      	add	r0, sp, #8
   1b394:	f001 fed3 	bl	1d13e <net_buf_simple_tailroom>
	    4 + (elem->model_count * 2U) + (elem->vnd_model_count * 4U)) {
   1b398:	7922      	ldrb	r2, [r4, #4]
   1b39a:	7963      	ldrb	r3, [r4, #5]
   1b39c:	3202      	adds	r2, #2
   1b39e:	fb1a 2303 	smlabb	r3, sl, r3, r2
	if (net_buf_simple_tailroom(buf) <
   1b3a2:	ebb0 0f43 	cmp.w	r0, r3, lsl #1
   1b3a6:	d32c      	bcc.n	1b402 <dev_comp_data_get+0xf0>
	net_buf_simple_add_le16(buf, elem->loc);
   1b3a8:	8861      	ldrh	r1, [r4, #2]
   1b3aa:	a802      	add	r0, sp, #8
   1b3ac:	f001 fe24 	bl	1cff8 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(buf, elem->model_count);
   1b3b0:	7921      	ldrb	r1, [r4, #4]
   1b3b2:	a802      	add	r0, sp, #8
   1b3b4:	f001 fe18 	bl	1cfe8 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, elem->vnd_model_count);
   1b3b8:	7961      	ldrb	r1, [r4, #5]
   1b3ba:	a802      	add	r0, sp, #8
   1b3bc:	f001 fe14 	bl	1cfe8 <net_buf_simple_add_u8>
	for (i = 0; i < elem->model_count; i++) {
   1b3c0:	2600      	movs	r6, #0
   1b3c2:	7923      	ldrb	r3, [r4, #4]
   1b3c4:	429e      	cmp	r6, r3
   1b3c6:	db05      	blt.n	1b3d4 <dev_comp_data_get+0xc2>
	for (i = 0; i < elem->vnd_model_count; i++) {
   1b3c8:	2600      	movs	r6, #0
   1b3ca:	7963      	ldrb	r3, [r4, #5]
   1b3cc:	429e      	cmp	r6, r3
   1b3ce:	db09      	blt.n	1b3e4 <dev_comp_data_get+0xd2>
	for (i = 0; i < comp->elem_count; i++) {
   1b3d0:	3701      	adds	r7, #1
   1b3d2:	e7ce      	b.n	1b372 <dev_comp_data_get+0x60>
		net_buf_simple_add_le16(buf, mod->id);
   1b3d4:	0173      	lsls	r3, r6, #5
   1b3d6:	68a2      	ldr	r2, [r4, #8]
   1b3d8:	a802      	add	r0, sp, #8
   1b3da:	5ad1      	ldrh	r1, [r2, r3]
   1b3dc:	f001 fe0c 	bl	1cff8 <net_buf_simple_add_le16>
	for (i = 0; i < elem->model_count; i++) {
   1b3e0:	3601      	adds	r6, #1
   1b3e2:	e7ee      	b.n	1b3c2 <dev_comp_data_get+0xb0>
		mod = &elem->vnd_models[i];
   1b3e4:	68e3      	ldr	r3, [r4, #12]
   1b3e6:	0172      	lsls	r2, r6, #5
   1b3e8:	eb03 1b46 	add.w	fp, r3, r6, lsl #5
		net_buf_simple_add_le16(buf, mod->vnd.company);
   1b3ec:	5a99      	ldrh	r1, [r3, r2]
   1b3ee:	a802      	add	r0, sp, #8
   1b3f0:	f001 fe02 	bl	1cff8 <net_buf_simple_add_le16>
		net_buf_simple_add_le16(buf, mod->vnd.id);
   1b3f4:	f8bb 1002 	ldrh.w	r1, [fp, #2]
   1b3f8:	a802      	add	r0, sp, #8
   1b3fa:	f001 fdfd 	bl	1cff8 <net_buf_simple_add_le16>
	for (i = 0; i < elem->vnd_model_count; i++) {
   1b3fe:	3601      	adds	r6, #1
   1b400:	e7e3      	b.n	1b3ca <dev_comp_data_get+0xb8>
   1b402:	f06f 0006 	mvn.w	r0, #6
}
   1b406:	b00f      	add	sp, #60	; 0x3c
   1b408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001b40c <mod_sub_list_clear.isra.0>:
static size_t mod_sub_list_clear(struct bt_mesh_model *mod)
   1b40c:	b570      	push	{r4, r5, r6, lr}
   1b40e:	f100 050e 	add.w	r5, r0, #14
   1b412:	f100 0412 	add.w	r4, r0, #18
		mod->groups[i] = BT_MESH_ADDR_UNASSIGNED;
   1b416:	2600      	movs	r6, #0
		if (!BT_MESH_ADDR_IS_VIRTUAL(mod->groups[i])) {
   1b418:	f835 0b02 	ldrh.w	r0, [r5], #2
   1b41c:	f480 4300 	eor.w	r3, r0, #32768	; 0x8000
   1b420:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   1b424:	d305      	bcc.n	1b432 <mod_sub_list_clear.isra.0+0x26>
			if (mod->groups[i] != BT_MESH_ADDR_UNASSIGNED) {
   1b426:	b108      	cbz	r0, 1b42c <mod_sub_list_clear.isra.0+0x20>
				mod->groups[i] = BT_MESH_ADDR_UNASSIGNED;
   1b428:	f825 6c02 	strh.w	r6, [r5, #-2]
	for (i = 0, clear_count = 0; i < ARRAY_SIZE(mod->groups); i++) {
   1b42c:	42a5      	cmp	r5, r4
   1b42e:	d1f3      	bne.n	1b418 <mod_sub_list_clear.isra.0+0xc>
}
   1b430:	bd70      	pop	{r4, r5, r6, pc}
		label_uuid = bt_mesh_va_label_get(mod->groups[i]);
   1b432:	f7fe fb53 	bl	19adc <bt_mesh_va_label_get>
		mod->groups[i] = BT_MESH_ADDR_UNASSIGNED;
   1b436:	f825 6c02 	strh.w	r6, [r5, #-2]
		if (label_uuid) {
   1b43a:	2800      	cmp	r0, #0
   1b43c:	d0f6      	beq.n	1b42c <mod_sub_list_clear.isra.0+0x20>
			bt_mesh_va_del(label_uuid, NULL);
   1b43e:	2100      	movs	r1, #0
   1b440:	f7fe fb4a 	bl	19ad8 <bt_mesh_va_del>
   1b444:	e7f2      	b.n	1b42c <mod_sub_list_clear.isra.0+0x20>

0001b446 <mod_reset>:
{
   1b446:	b510      	push	{r4, lr}
   1b448:	4604      	mov	r4, r0
	clear_count = mod_sub_list_clear(mod);
   1b44a:	f7ff ffdf 	bl	1b40c <mod_sub_list_clear.isra.0>
	if (mod->cb && mod->cb->reset) {
   1b44e:	69a3      	ldr	r3, [r4, #24]
   1b450:	b12b      	cbz	r3, 1b45e <mod_reset+0x18>
   1b452:	68db      	ldr	r3, [r3, #12]
   1b454:	b11b      	cbz	r3, 1b45e <mod_reset+0x18>
		mod->cb->reset(mod);
   1b456:	4620      	mov	r0, r4
}
   1b458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		mod->cb->reset(mod);
   1b45c:	4718      	bx	r3
}
   1b45e:	bd10      	pop	{r4, pc}

0001b460 <mod_sub_clear_visitor>:
{
   1b460:	b508      	push	{r3, lr}
	mod_sub_list_clear(mod);
   1b462:	f7ff ffd3 	bl	1b40c <mod_sub_list_clear.isra.0>
}
   1b466:	2001      	movs	r0, #1
   1b468:	bd08      	pop	{r3, pc}

0001b46a <hb_pub_send_status>:
{
   1b46a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b46c:	b08b      	sub	sp, #44	; 0x2c
   1b46e:	461c      	mov	r4, r3
   1b470:	4617      	mov	r7, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_HEARTBEAT_PUB_STATUS, 10);
   1b472:	ab06      	add	r3, sp, #24
   1b474:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
{
   1b478:	4605      	mov	r5, r0
   1b47a:	460e      	mov	r6, r1
	bt_mesh_model_msg_init(&msg, OP_HEARTBEAT_PUB_STATUS);
   1b47c:	a803      	add	r0, sp, #12
   1b47e:	2106      	movs	r1, #6
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_HEARTBEAT_PUB_STATUS, 10);
   1b480:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1b484:	9303      	str	r3, [sp, #12]
	bt_mesh_model_msg_init(&msg, OP_HEARTBEAT_PUB_STATUS);
   1b486:	f7fe fd96 	bl	19fb6 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   1b48a:	4639      	mov	r1, r7
   1b48c:	a803      	add	r0, sp, #12
   1b48e:	f001 fdab 	bl	1cfe8 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, pub->dst);
   1b492:	8821      	ldrh	r1, [r4, #0]
   1b494:	a803      	add	r0, sp, #12
   1b496:	f001 fdaf 	bl	1cff8 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(&msg, hb_pub_count_log(pub->count));
   1b49a:	8861      	ldrh	r1, [r4, #2]
	if (!val) {
   1b49c:	b171      	cbz	r1, 1b4bc <hb_pub_send_status+0x52>
	} else if (val == 0x01) {
   1b49e:	2901      	cmp	r1, #1
   1b4a0:	d00c      	beq.n	1b4bc <hb_pub_send_status+0x52>
	} else if (val == 0xffff) {
   1b4a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1b4a6:	4299      	cmp	r1, r3
		return 32 - __builtin_clz(val - 1) + 1;
   1b4a8:	bf1f      	itttt	ne
   1b4aa:	f101 31ff 	addne.w	r1, r1, #4294967295	; 0xffffffff
   1b4ae:	fab1 f181 	clzne	r1, r1
   1b4b2:	f1c1 0121 	rsbne	r1, r1, #33	; 0x21
   1b4b6:	b2c9      	uxtbne	r1, r1
		return 0xff;
   1b4b8:	bf08      	it	eq
   1b4ba:	21ff      	moveq	r1, #255	; 0xff
	net_buf_simple_add_u8(&msg, hb_pub_count_log(pub->count));
   1b4bc:	a803      	add	r0, sp, #12
   1b4be:	f001 fd93 	bl	1cfe8 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, bt_mesh_hb_log(pub->period));
   1b4c2:	68e1      	ldr	r1, [r4, #12]

static inline uint8_t bt_mesh_hb_log(uint32_t val)
{
	if (!val) {
   1b4c4:	b149      	cbz	r1, 1b4da <hb_pub_send_status+0x70>
		return 0x00;
	} else if (val == 0xffff) {
   1b4c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1b4ca:	4299      	cmp	r1, r3
		return 0xff;
	} else {
		return 32 - __builtin_clz(val);
   1b4cc:	bf1d      	ittte	ne
   1b4ce:	fab1 f181 	clzne	r1, r1
   1b4d2:	f1c1 0120 	rsbne	r1, r1, #32
   1b4d6:	b2c9      	uxtbne	r1, r1
		return 0xff;
   1b4d8:	21ff      	moveq	r1, #255	; 0xff
   1b4da:	a803      	add	r0, sp, #12
   1b4dc:	f001 fd84 	bl	1cfe8 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, pub->ttl);
   1b4e0:	7921      	ldrb	r1, [r4, #4]
   1b4e2:	a803      	add	r0, sp, #12
   1b4e4:	f001 fd80 	bl	1cfe8 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, pub->feat);
   1b4e8:	88e1      	ldrh	r1, [r4, #6]
   1b4ea:	a803      	add	r0, sp, #12
   1b4ec:	f001 fd84 	bl	1cff8 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, pub->net_idx);
   1b4f0:	8921      	ldrh	r1, [r4, #8]
   1b4f2:	a803      	add	r0, sp, #12
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1b4f4:	2400      	movs	r4, #0
	net_buf_simple_add_le16(&msg, pub->net_idx);
   1b4f6:	f001 fd7f 	bl	1cff8 <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1b4fa:	9400      	str	r4, [sp, #0]
   1b4fc:	4623      	mov	r3, r4
   1b4fe:	aa03      	add	r2, sp, #12
   1b500:	4631      	mov	r1, r6
   1b502:	4628      	mov	r0, r5
   1b504:	f7fe fd13 	bl	19f2e <bt_mesh_model_send>
}
   1b508:	4620      	mov	r0, r4
   1b50a:	b00b      	add	sp, #44	; 0x2c
   1b50c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001b50e <heartbeat_pub_set>:
{
   1b50e:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct hb_pub_param *param = (void *)buf->data;
   1b510:	6812      	ldr	r2, [r2, #0]
	pub.count = bt_mesh_hb_pwr2(param->count_log);
   1b512:	7894      	ldrb	r4, [r2, #2]
	pub.dst = sys_le16_to_cpu(param->dst);
   1b514:	8813      	ldrh	r3, [r2, #0]
{
   1b516:	b085      	sub	sp, #20
   1b518:	4605      	mov	r5, r0
	pub.count = bt_mesh_hb_pwr2(param->count_log);
   1b51a:	4620      	mov	r0, r4
	pub.dst = sys_le16_to_cpu(param->dst);
   1b51c:	f8ad 3000 	strh.w	r3, [sp]
{
   1b520:	460e      	mov	r6, r1
	pub.dst = sys_le16_to_cpu(param->dst);
   1b522:	b299      	uxth	r1, r3
	pub.count = bt_mesh_hb_pwr2(param->count_log);
   1b524:	f7ff fa37 	bl	1a996 <bt_mesh_hb_pwr2>
   1b528:	f8ad 0002 	strh.w	r0, [sp, #2]
	pub.period = bt_mesh_hb_pwr2(param->period_log);
   1b52c:	78d7      	ldrb	r7, [r2, #3]
   1b52e:	4638      	mov	r0, r7
   1b530:	f7ff fa31 	bl	1a996 <bt_mesh_hb_pwr2>
   1b534:	9003      	str	r0, [sp, #12]
	pub.ttl = param->ttl;
   1b536:	7913      	ldrb	r3, [r2, #4]
   1b538:	f88d 3004 	strb.w	r3, [sp, #4]
	pub.feat = sys_le16_to_cpu(param->feat);
   1b53c:	7950      	ldrb	r0, [r2, #5]
   1b53e:	f892 c006 	ldrb.w	ip, [r2, #6]
   1b542:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
   1b546:	f8ad 0006 	strh.w	r0, [sp, #6]
	pub.net_idx = sys_le16_to_cpu(param->net_idx);
   1b54a:	f8b2 2007 	ldrh.w	r2, [r2, #7]
   1b54e:	f8ad 2008 	strh.w	r2, [sp, #8]
	if (BT_MESH_ADDR_IS_VIRTUAL(pub.dst)) {
   1b552:	f481 4100 	eor.w	r1, r1, #32768	; 0x8000
   1b556:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
	pub.net_idx = sys_le16_to_cpu(param->net_idx);
   1b55a:	b290      	uxth	r0, r2
	if (BT_MESH_ADDR_IS_VIRTUAL(pub.dst)) {
   1b55c:	d317      	bcc.n	1b58e <heartbeat_pub_set+0x80>
	if (param->count_log > 0x11 && param->count_log != 0xff) {
   1b55e:	3c12      	subs	r4, #18
   1b560:	b2e4      	uxtb	r4, r4
   1b562:	2cec      	cmp	r4, #236	; 0xec
   1b564:	d915      	bls.n	1b592 <heartbeat_pub_set+0x84>
	if (param->period_log > 0x10) {
   1b566:	2f10      	cmp	r7, #16
   1b568:	d813      	bhi.n	1b592 <heartbeat_pub_set+0x84>
	if (param->ttl > BT_MESH_TTL_MAX && param->ttl != BT_MESH_TTL_DEFAULT) {
   1b56a:	f083 0380 	eor.w	r3, r3, #128	; 0x80
   1b56e:	2b7e      	cmp	r3, #126	; 0x7e
   1b570:	d911      	bls.n	1b596 <heartbeat_pub_set+0x88>
	if (pub.net_idx > 0xfff) {
   1b572:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   1b576:	d20e      	bcs.n	1b596 <heartbeat_pub_set+0x88>
	status = bt_mesh_hb_pub_set(&pub);
   1b578:	4668      	mov	r0, sp
   1b57a:	f7ee fd55 	bl	a028 <bt_mesh_hb_pub_set>
   1b57e:	4602      	mov	r2, r0
	return hb_pub_send_status(model, ctx, status, &pub);
   1b580:	466b      	mov	r3, sp
   1b582:	4631      	mov	r1, r6
   1b584:	4628      	mov	r0, r5
   1b586:	f7ff ff70 	bl	1b46a <hb_pub_send_status>
}
   1b58a:	b005      	add	sp, #20
   1b58c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		status = STATUS_INVALID_ADDRESS;
   1b58e:	2201      	movs	r2, #1
   1b590:	e7f6      	b.n	1b580 <heartbeat_pub_set+0x72>
		status = STATUS_CANNOT_SET;
   1b592:	220f      	movs	r2, #15
   1b594:	e7f4      	b.n	1b580 <heartbeat_pub_set+0x72>
		return -EINVAL;
   1b596:	f06f 0015 	mvn.w	r0, #21
   1b59a:	e7f6      	b.n	1b58a <heartbeat_pub_set+0x7c>

0001b59c <heartbeat_pub_get>:
{
   1b59c:	b530      	push	{r4, r5, lr}
   1b59e:	b085      	sub	sp, #20
   1b5a0:	4604      	mov	r4, r0
   1b5a2:	460d      	mov	r5, r1
	bt_mesh_hb_pub_get(&pub);
   1b5a4:	4668      	mov	r0, sp
   1b5a6:	f7ee fd6b 	bl	a080 <bt_mesh_hb_pub_get>
	return hb_pub_send_status(model, ctx, STATUS_SUCCESS, &pub);
   1b5aa:	466b      	mov	r3, sp
   1b5ac:	2200      	movs	r2, #0
   1b5ae:	4629      	mov	r1, r5
   1b5b0:	4620      	mov	r0, r4
   1b5b2:	f7ff ff5a 	bl	1b46a <hb_pub_send_status>
}
   1b5b6:	b005      	add	sp, #20
   1b5b8:	bd30      	pop	{r4, r5, pc}

0001b5ba <hb_sub_send_status>:
{
   1b5ba:	b570      	push	{r4, r5, r6, lr}
   1b5bc:	b08a      	sub	sp, #40	; 0x28
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_HEARTBEAT_SUB_STATUS, 9);
   1b5be:	ab06      	add	r3, sp, #24
{
   1b5c0:	4614      	mov	r4, r2
   1b5c2:	4605      	mov	r5, r0
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_HEARTBEAT_SUB_STATUS, 9);
   1b5c4:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
	bt_mesh_model_msg_init(&msg, OP_HEARTBEAT_SUB_STATUS);
   1b5c8:	a803      	add	r0, sp, #12
{
   1b5ca:	460e      	mov	r6, r1
	bt_mesh_model_msg_init(&msg, OP_HEARTBEAT_SUB_STATUS);
   1b5cc:	f248 013c 	movw	r1, #32828	; 0x803c
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_HEARTBEAT_SUB_STATUS, 9);
   1b5d0:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1b5d4:	9303      	str	r3, [sp, #12]
	bt_mesh_model_msg_init(&msg, OP_HEARTBEAT_SUB_STATUS);
   1b5d6:	f7fe fcee 	bl	19fb6 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, STATUS_SUCCESS);
   1b5da:	2100      	movs	r1, #0
   1b5dc:	a803      	add	r0, sp, #12
   1b5de:	f001 fd03 	bl	1cfe8 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, sub->src);
   1b5e2:	8921      	ldrh	r1, [r4, #8]
   1b5e4:	a803      	add	r0, sp, #12
   1b5e6:	f001 fd07 	bl	1cff8 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, sub->dst);
   1b5ea:	8961      	ldrh	r1, [r4, #10]
   1b5ec:	a803      	add	r0, sp, #12
   1b5ee:	f001 fd03 	bl	1cff8 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(&msg, bt_mesh_hb_log(sub->remaining));
   1b5f2:	6861      	ldr	r1, [r4, #4]
	if (!val) {
   1b5f4:	b149      	cbz	r1, 1b60a <hb_sub_send_status+0x50>
	} else if (val == 0xffff) {
   1b5f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1b5fa:	4299      	cmp	r1, r3
		return 32 - __builtin_clz(val);
   1b5fc:	bf1d      	ittte	ne
   1b5fe:	fab1 f181 	clzne	r1, r1
   1b602:	f1c1 0120 	rsbne	r1, r1, #32
   1b606:	b2c9      	uxtbne	r1, r1
		return 0xff;
   1b608:	21ff      	moveq	r1, #255	; 0xff
   1b60a:	a803      	add	r0, sp, #12
   1b60c:	f001 fcec 	bl	1cfe8 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, bt_mesh_hb_log(sub->count));
   1b610:	89a1      	ldrh	r1, [r4, #12]
	if (!val) {
   1b612:	b149      	cbz	r1, 1b628 <hb_sub_send_status+0x6e>
	} else if (val == 0xffff) {
   1b614:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1b618:	4299      	cmp	r1, r3
		return 32 - __builtin_clz(val);
   1b61a:	bf1d      	ittte	ne
   1b61c:	fab1 f181 	clzne	r1, r1
   1b620:	f1c1 0120 	rsbne	r1, r1, #32
   1b624:	b2c9      	uxtbne	r1, r1
		return 0xff;
   1b626:	21ff      	moveq	r1, #255	; 0xff
   1b628:	a803      	add	r0, sp, #12
   1b62a:	f001 fcdd 	bl	1cfe8 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, sub->min_hops);
   1b62e:	7ba1      	ldrb	r1, [r4, #14]
   1b630:	a803      	add	r0, sp, #12
   1b632:	f001 fcd9 	bl	1cfe8 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, sub->max_hops);
   1b636:	7be1      	ldrb	r1, [r4, #15]
   1b638:	a803      	add	r0, sp, #12
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1b63a:	2400      	movs	r4, #0
	net_buf_simple_add_u8(&msg, sub->max_hops);
   1b63c:	f001 fcd4 	bl	1cfe8 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1b640:	9400      	str	r4, [sp, #0]
   1b642:	4623      	mov	r3, r4
   1b644:	aa03      	add	r2, sp, #12
   1b646:	4631      	mov	r1, r6
   1b648:	4628      	mov	r0, r5
   1b64a:	f7fe fc70 	bl	19f2e <bt_mesh_model_send>
}
   1b64e:	4620      	mov	r0, r4
   1b650:	b00a      	add	sp, #40	; 0x28
   1b652:	bd70      	pop	{r4, r5, r6, pc}

0001b654 <heartbeat_sub_set>:
{
   1b654:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b658:	4606      	mov	r6, r0
   1b65a:	b085      	sub	sp, #20
	sub_src = net_buf_simple_pull_le16(buf);
   1b65c:	4610      	mov	r0, r2
{
   1b65e:	4614      	mov	r4, r2
   1b660:	460f      	mov	r7, r1
	sub_src = net_buf_simple_pull_le16(buf);
   1b662:	f001 fd45 	bl	1d0f0 <net_buf_simple_pull_le16>
   1b666:	4680      	mov	r8, r0
	sub_dst = net_buf_simple_pull_le16(buf);
   1b668:	4620      	mov	r0, r4
   1b66a:	f001 fd41 	bl	1d0f0 <net_buf_simple_pull_le16>
   1b66e:	4681      	mov	r9, r0
	period_log = net_buf_simple_pull_u8(buf);
   1b670:	4620      	mov	r0, r4
   1b672:	f001 fd35 	bl	1d0e0 <net_buf_simple_pull_u8>
	if (period_log > 0x11) {
   1b676:	2811      	cmp	r0, #17
	period_log = net_buf_simple_pull_u8(buf);
   1b678:	4604      	mov	r4, r0
	if (period_log > 0x11) {
   1b67a:	d905      	bls.n	1b688 <heartbeat_sub_set+0x34>
		return -EINVAL;
   1b67c:	f06f 0415 	mvn.w	r4, #21
}
   1b680:	4620      	mov	r0, r4
   1b682:	b005      	add	sp, #20
   1b684:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	period = bt_mesh_hb_pwr2(period_log);
   1b688:	f7ff f985 	bl	1a996 <bt_mesh_hb_pwr2>
	status = bt_mesh_hb_sub_set(sub_src, sub_dst, period);
   1b68c:	4649      	mov	r1, r9
	period = bt_mesh_hb_pwr2(period_log);
   1b68e:	4605      	mov	r5, r0
	status = bt_mesh_hb_sub_set(sub_src, sub_dst, period);
   1b690:	4602      	mov	r2, r0
   1b692:	4640      	mov	r0, r8
   1b694:	f7ee fcfe 	bl	a094 <bt_mesh_hb_sub_set>
	if (status != STATUS_SUCCESS) {
   1b698:	2800      	cmp	r0, #0
   1b69a:	d1ef      	bne.n	1b67c <heartbeat_sub_set+0x28>
	bt_mesh_hb_sub_get(&sub);
   1b69c:	4668      	mov	r0, sp
   1b69e:	f7ee fd49 	bl	a134 <bt_mesh_hb_sub_get>
	if (sub.src == BT_MESH_ADDR_UNASSIGNED || !period_log) {
   1b6a2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   1b6a6:	b103      	cbz	r3, 1b6aa <heartbeat_sub_set+0x56>
   1b6a8:	b914      	cbnz	r4, 1b6b0 <heartbeat_sub_set+0x5c>
		sub.min_hops = BT_MESH_TTL_MAX;
   1b6aa:	237f      	movs	r3, #127	; 0x7f
   1b6ac:	f88d 300e 	strb.w	r3, [sp, #14]
	err = hb_sub_send_status(model, ctx, &sub);
   1b6b0:	466a      	mov	r2, sp
   1b6b2:	4639      	mov	r1, r7
   1b6b4:	4630      	mov	r0, r6
   1b6b6:	f7ff ff80 	bl	1b5ba <hb_sub_send_status>
	if (err) {
   1b6ba:	4604      	mov	r4, r0
   1b6bc:	2800      	cmp	r0, #0
   1b6be:	d1df      	bne.n	1b680 <heartbeat_sub_set+0x2c>
	if (sub.src != BT_MESH_ADDR_UNASSIGNED &&
   1b6c0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   1b6c4:	2b00      	cmp	r3, #0
   1b6c6:	d0db      	beq.n	1b680 <heartbeat_sub_set+0x2c>
   1b6c8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   1b6cc:	2b00      	cmp	r3, #0
   1b6ce:	d0d7      	beq.n	1b680 <heartbeat_sub_set+0x2c>
	    sub.dst != BT_MESH_ADDR_UNASSIGNED && !period) {
   1b6d0:	2d00      	cmp	r5, #0
   1b6d2:	d1d5      	bne.n	1b680 <heartbeat_sub_set+0x2c>
		bt_mesh_hb_sub_reset_count();
   1b6d4:	f7ee fd28 	bl	a128 <bt_mesh_hb_sub_reset_count>
   1b6d8:	e7d2      	b.n	1b680 <heartbeat_sub_set+0x2c>

0001b6da <heartbeat_sub_get>:
{
   1b6da:	b530      	push	{r4, r5, lr}
   1b6dc:	b085      	sub	sp, #20
   1b6de:	4604      	mov	r4, r0
   1b6e0:	460d      	mov	r5, r1
	bt_mesh_hb_sub_get(&sub);
   1b6e2:	4668      	mov	r0, sp
   1b6e4:	f7ee fd26 	bl	a134 <bt_mesh_hb_sub_get>
	return hb_sub_send_status(model, ctx, &sub);
   1b6e8:	466a      	mov	r2, sp
   1b6ea:	4629      	mov	r1, r5
   1b6ec:	4620      	mov	r0, r4
   1b6ee:	f7ff ff64 	bl	1b5ba <hb_sub_send_status>
}
   1b6f2:	b005      	add	sp, #20
   1b6f4:	bd30      	pop	{r4, r5, pc}

0001b6f6 <attention_off>:
	if (srv->cb && srv->cb->attn_off) {
   1b6f6:	f850 3c04 	ldr.w	r3, [r0, #-4]
   1b6fa:	b123      	cbz	r3, 1b706 <attention_off+0x10>
   1b6fc:	695b      	ldr	r3, [r3, #20]
   1b6fe:	b113      	cbz	r3, 1b706 <attention_off+0x10>
		srv->cb->attn_off(srv->model);
   1b700:	f850 0c08 	ldr.w	r0, [r0, #-8]
   1b704:	4718      	bx	r3
}
   1b706:	4770      	bx	lr

0001b708 <health_period_set_unrel>:
{
   1b708:	b510      	push	{r4, lr}
   1b70a:	4604      	mov	r4, r0
	period = net_buf_simple_pull_u8(buf);
   1b70c:	4610      	mov	r0, r2
   1b70e:	f001 fce7 	bl	1d0e0 <net_buf_simple_pull_u8>
	if (period > 15) {
   1b712:	280f      	cmp	r0, #15
	model->pub->period_div = period;
   1b714:	bf9f      	itttt	ls
   1b716:	68a3      	ldrls	r3, [r4, #8]
   1b718:	7ada      	ldrbls	r2, [r3, #11]
   1b71a:	f360 0203 	bfils	r2, r0, #0, #4
   1b71e:	72da      	strbls	r2, [r3, #11]
	return 0;
   1b720:	bf94      	ite	ls
   1b722:	2000      	movls	r0, #0
		return -EINVAL;
   1b724:	f06f 0015 	mvnhi.w	r0, #21
}
   1b728:	bd10      	pop	{r4, pc}

0001b72a <send_health_period_status>:
{
   1b72a:	b570      	push	{r4, r5, r6, lr}
   1b72c:	4604      	mov	r4, r0
   1b72e:	b088      	sub	sp, #32
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_HEALTH_PERIOD_STATUS, 1);
   1b730:	ab03      	add	r3, sp, #12
   1b732:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   1b736:	460e      	mov	r6, r1
	bt_mesh_model_msg_init(&msg, OP_HEALTH_PERIOD_STATUS);
   1b738:	a805      	add	r0, sp, #20
   1b73a:	f248 0137 	movw	r1, #32823	; 0x8037
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_HEALTH_PERIOD_STATUS, 1);
   1b73e:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1b742:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_HEALTH_PERIOD_STATUS);
   1b744:	f7fe fc37 	bl	19fb6 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, model->pub->period_div);
   1b748:	68a3      	ldr	r3, [r4, #8]
   1b74a:	7ad9      	ldrb	r1, [r3, #11]
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1b74c:	2500      	movs	r5, #0
	net_buf_simple_add_u8(&msg, model->pub->period_div);
   1b74e:	f001 010f 	and.w	r1, r1, #15
   1b752:	a805      	add	r0, sp, #20
   1b754:	f001 fc48 	bl	1cfe8 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1b758:	9500      	str	r5, [sp, #0]
   1b75a:	462b      	mov	r3, r5
   1b75c:	aa05      	add	r2, sp, #20
   1b75e:	4631      	mov	r1, r6
   1b760:	4620      	mov	r0, r4
   1b762:	f7fe fbe4 	bl	19f2e <bt_mesh_model_send>
}
   1b766:	4628      	mov	r0, r5
   1b768:	b008      	add	sp, #32
   1b76a:	bd70      	pop	{r4, r5, r6, pc}

0001b76c <health_period_set>:
{
   1b76c:	b538      	push	{r3, r4, r5, lr}
   1b76e:	4604      	mov	r4, r0
   1b770:	460d      	mov	r5, r1
	err = health_period_set_unrel(model, ctx, buf);
   1b772:	f7ff ffc9 	bl	1b708 <health_period_set_unrel>
	if (err) {
   1b776:	b928      	cbnz	r0, 1b784 <health_period_set+0x18>
	return send_health_period_status(model, ctx);
   1b778:	4629      	mov	r1, r5
   1b77a:	4620      	mov	r0, r4
}
   1b77c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return send_health_period_status(model, ctx);
   1b780:	f7ff bfd3 	b.w	1b72a <send_health_period_status>
}
   1b784:	bd38      	pop	{r3, r4, r5, pc}

0001b786 <health_period_get>:
	return send_health_period_status(model, ctx);
   1b786:	f7ff bfd0 	b.w	1b72a <send_health_period_status>

0001b78a <send_attention_status>:
{
   1b78a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b78c:	4605      	mov	r5, r0
	return z_timeout_remaining(&dwork->timeout);
   1b78e:	69c0      	ldr	r0, [r0, #28]
   1b790:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_ATTENTION_STATUS, 1);
   1b792:	ab03      	add	r3, sp, #12
   1b794:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
   1b798:	3018      	adds	r0, #24
   1b79a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1b79e:	9305      	str	r3, [sp, #20]
{
   1b7a0:	460f      	mov	r7, r1
   1b7a2:	f003 f916 	bl	1e9d2 <z_timeout_remaining>
	bt_mesh_model_msg_init(&msg, OP_ATTENTION_STATUS);
   1b7a6:	f248 0107 	movw	r1, #32775	; 0x8007
   1b7aa:	4604      	mov	r4, r0
   1b7ac:	a805      	add	r0, sp, #20
   1b7ae:	f7fe fc02 	bl	19fb6 <bt_mesh_model_msg_init>
			return (uint32_t)((t * to_hz + off) / from_hz);
   1b7b2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1b7b6:	fba4 4001 	umull	r4, r0, r4, r1
   1b7ba:	0be2      	lsrs	r2, r4, #15
 * @return The converted time value
 */
static TIME_CONSTEXPR inline uint32_t k_ticks_to_ms_floor32(uint32_t t)
{
	/* Generated.  Do not edit.  See above. */
	return z_tmcvt(t, Z_HZ_ticks, Z_HZ_ms, true, true, false, false);
   1b7bc:	2600      	movs	r6, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   1b7be:	ea42 4240 	orr.w	r2, r2, r0, lsl #17
	net_buf_simple_add_u8(&msg, time);
   1b7c2:	a805      	add	r0, sp, #20
		k_work_delayable_remaining_get(&srv->attn_timer)) / 1000U;
   1b7c4:	fbb2 f1f1 	udiv	r1, r2, r1
	net_buf_simple_add_u8(&msg, time);
   1b7c8:	b2c9      	uxtb	r1, r1
   1b7ca:	f001 fc0d 	bl	1cfe8 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1b7ce:	9600      	str	r6, [sp, #0]
   1b7d0:	4633      	mov	r3, r6
   1b7d2:	aa05      	add	r2, sp, #20
   1b7d4:	4639      	mov	r1, r7
   1b7d6:	4628      	mov	r0, r5
   1b7d8:	f7fe fba9 	bl	19f2e <bt_mesh_model_send>
}
   1b7dc:	4630      	mov	r0, r6
   1b7de:	b009      	add	sp, #36	; 0x24
   1b7e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001b7e2 <attention_get>:
	return send_attention_status(model, ctx);
   1b7e2:	f7ff bfd2 	b.w	1b78a <send_attention_status>

0001b7e6 <health_fault_test_unrel>:
{
   1b7e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_mesh_health_srv *srv = model->user_data;
   1b7ea:	69c7      	ldr	r7, [r0, #28]
{
   1b7ec:	4604      	mov	r4, r0
	test_id = net_buf_simple_pull_u8(buf);
   1b7ee:	4610      	mov	r0, r2
{
   1b7f0:	4615      	mov	r5, r2
	test_id = net_buf_simple_pull_u8(buf);
   1b7f2:	f001 fc75 	bl	1d0e0 <net_buf_simple_pull_u8>
   1b7f6:	4606      	mov	r6, r0
	company_id = net_buf_simple_pull_le16(buf);
   1b7f8:	4628      	mov	r0, r5
   1b7fa:	f001 fc79 	bl	1d0f0 <net_buf_simple_pull_le16>
	if (srv->cb && srv->cb->fault_test) {
   1b7fe:	687b      	ldr	r3, [r7, #4]
	company_id = net_buf_simple_pull_le16(buf);
   1b800:	4602      	mov	r2, r0
	if (srv->cb && srv->cb->fault_test) {
   1b802:	b133      	cbz	r3, 1b812 <health_fault_test_unrel+0x2c>
   1b804:	68db      	ldr	r3, [r3, #12]
   1b806:	b123      	cbz	r3, 1b812 <health_fault_test_unrel+0x2c>
		return srv->cb->fault_test(model, test_id, company_id);
   1b808:	4631      	mov	r1, r6
   1b80a:	4620      	mov	r0, r4
}
   1b80c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return srv->cb->fault_test(model, test_id, company_id);
   1b810:	4718      	bx	r3
}
   1b812:	2000      	movs	r0, #0
   1b814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001b818 <health_fault_clear_unrel>:
{
   1b818:	b570      	push	{r4, r5, r6, lr}
	struct bt_mesh_health_srv *srv = model->user_data;
   1b81a:	69c5      	ldr	r5, [r0, #28]
{
   1b81c:	4604      	mov	r4, r0
	company_id = net_buf_simple_pull_le16(buf);
   1b81e:	4610      	mov	r0, r2
   1b820:	f001 fc66 	bl	1d0f0 <net_buf_simple_pull_le16>
	if (srv->cb && srv->cb->fault_clear) {
   1b824:	686b      	ldr	r3, [r5, #4]
	company_id = net_buf_simple_pull_le16(buf);
   1b826:	4601      	mov	r1, r0
	if (srv->cb && srv->cb->fault_clear) {
   1b828:	b12b      	cbz	r3, 1b836 <health_fault_clear_unrel+0x1e>
   1b82a:	689b      	ldr	r3, [r3, #8]
   1b82c:	b11b      	cbz	r3, 1b836 <health_fault_clear_unrel+0x1e>
		return srv->cb->fault_clear(model, company_id);
   1b82e:	4620      	mov	r0, r4
}
   1b830:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return srv->cb->fault_clear(model, company_id);
   1b834:	4718      	bx	r3
}
   1b836:	2000      	movs	r0, #0
   1b838:	bd70      	pop	{r4, r5, r6, pc}

0001b83a <health_get_registered>:
{
   1b83a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1b83e:	4614      	mov	r4, r2
	struct bt_mesh_health_srv *srv = mod->user_data;
   1b840:	f8d0 801c 	ldr.w	r8, [r0, #28]
{
   1b844:	460f      	mov	r7, r1
   1b846:	4606      	mov	r6, r0
	bt_mesh_model_msg_init(msg, OP_HEALTH_FAULT_STATUS);
   1b848:	2105      	movs	r1, #5
   1b84a:	4610      	mov	r0, r2
   1b84c:	f7fe fbb3 	bl	19fb6 <bt_mesh_model_msg_init>
	test_id = net_buf_simple_add(msg, 1);
   1b850:	2101      	movs	r1, #1
   1b852:	4620      	mov	r0, r4
   1b854:	f001 fbb9 	bl	1cfca <net_buf_simple_add>
	net_buf_simple_add_le16(msg, company_id);
   1b858:	4639      	mov	r1, r7
	test_id = net_buf_simple_add(msg, 1);
   1b85a:	4605      	mov	r5, r0
	net_buf_simple_add_le16(msg, company_id);
   1b85c:	4620      	mov	r0, r4
   1b85e:	f001 fbcb 	bl	1cff8 <net_buf_simple_add_le16>
	if (srv->cb && srv->cb->fault_get_reg) {
   1b862:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1b866:	b1b3      	cbz	r3, 1b896 <health_get_registered+0x5c>
   1b868:	685b      	ldr	r3, [r3, #4]
   1b86a:	b1a3      	cbz	r3, 1b896 <health_get_registered+0x5c>
		uint8_t fault_count = net_buf_simple_tailroom(msg) - 4;
   1b86c:	4620      	mov	r0, r4
   1b86e:	f001 fc66 	bl	1d13e <net_buf_simple_tailroom>
   1b872:	3804      	subs	r0, #4
		err = srv->cb->fault_get_reg(mod, company_id, test_id,
   1b874:	f8d8 1004 	ldr.w	r1, [r8, #4]
	return buf->data + buf->len;
   1b878:	6822      	ldr	r2, [r4, #0]
   1b87a:	88a3      	ldrh	r3, [r4, #4]
		uint8_t fault_count = net_buf_simple_tailroom(msg) - 4;
   1b87c:	f88d 000f 	strb.w	r0, [sp, #15]
		err = srv->cb->fault_get_reg(mod, company_id, test_id,
   1b880:	f10d 000f 	add.w	r0, sp, #15
   1b884:	9000      	str	r0, [sp, #0]
   1b886:	f8d1 8004 	ldr.w	r8, [r1, #4]
   1b88a:	4413      	add	r3, r2
   1b88c:	4639      	mov	r1, r7
   1b88e:	462a      	mov	r2, r5
   1b890:	4630      	mov	r0, r6
   1b892:	47c0      	blx	r8
		if (err) {
   1b894:	b110      	cbz	r0, 1b89c <health_get_registered+0x62>
		*test_id = HEALTH_TEST_STANDARD;
   1b896:	2300      	movs	r3, #0
   1b898:	702b      	strb	r3, [r5, #0]
}
   1b89a:	e004      	b.n	1b8a6 <health_get_registered+0x6c>
			net_buf_simple_add(msg, fault_count);
   1b89c:	f89d 100f 	ldrb.w	r1, [sp, #15]
   1b8a0:	4620      	mov	r0, r4
   1b8a2:	f001 fb92 	bl	1cfca <net_buf_simple_add>
}
   1b8a6:	b004      	add	sp, #16
   1b8a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001b8ac <health_fault_test>:
{
   1b8ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b8b0:	4614      	mov	r4, r2
   1b8b2:	b08e      	sub	sp, #56	; 0x38
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   1b8b4:	ab05      	add	r3, sp, #20
	struct bt_mesh_health_srv *srv = model->user_data;
   1b8b6:	f8d0 801c 	ldr.w	r8, [r0, #28]
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   1b8ba:	9302      	str	r3, [sp, #8]
   1b8bc:	f44f 1210 	mov.w	r2, #2359296	; 0x240000
{
   1b8c0:	4605      	mov	r5, r0
	test_id = net_buf_simple_pull_u8(buf);
   1b8c2:	4620      	mov	r0, r4
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   1b8c4:	e9cd 2303 	strd	r2, r3, [sp, #12]
{
   1b8c8:	460e      	mov	r6, r1
	test_id = net_buf_simple_pull_u8(buf);
   1b8ca:	f001 fc09 	bl	1d0e0 <net_buf_simple_pull_u8>
   1b8ce:	4607      	mov	r7, r0
	company_id = net_buf_simple_pull_le16(buf);
   1b8d0:	4620      	mov	r0, r4
   1b8d2:	f001 fc0d 	bl	1d0f0 <net_buf_simple_pull_le16>
	if (srv->cb && srv->cb->fault_test) {
   1b8d6:	f8d8 3004 	ldr.w	r3, [r8, #4]
	company_id = net_buf_simple_pull_le16(buf);
   1b8da:	4604      	mov	r4, r0
	if (srv->cb && srv->cb->fault_test) {
   1b8dc:	b983      	cbnz	r3, 1b900 <health_fault_test+0x54>
	health_get_registered(model, company_id, &sdu);
   1b8de:	4621      	mov	r1, r4
   1b8e0:	aa02      	add	r2, sp, #8
	if (bt_mesh_model_send(model, ctx, &sdu, NULL, NULL)) {
   1b8e2:	2400      	movs	r4, #0
	health_get_registered(model, company_id, &sdu);
   1b8e4:	4628      	mov	r0, r5
   1b8e6:	f7ff ffa8 	bl	1b83a <health_get_registered>
	if (bt_mesh_model_send(model, ctx, &sdu, NULL, NULL)) {
   1b8ea:	9400      	str	r4, [sp, #0]
   1b8ec:	4623      	mov	r3, r4
   1b8ee:	aa02      	add	r2, sp, #8
   1b8f0:	4631      	mov	r1, r6
   1b8f2:	4628      	mov	r0, r5
   1b8f4:	f7fe fb1b 	bl	19f2e <bt_mesh_model_send>
	return 0;
   1b8f8:	4620      	mov	r0, r4
}
   1b8fa:	b00e      	add	sp, #56	; 0x38
   1b8fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (srv->cb && srv->cb->fault_test) {
   1b900:	68db      	ldr	r3, [r3, #12]
   1b902:	2b00      	cmp	r3, #0
   1b904:	d0eb      	beq.n	1b8de <health_fault_test+0x32>
		err = srv->cb->fault_test(model, test_id, company_id);
   1b906:	4602      	mov	r2, r0
   1b908:	4639      	mov	r1, r7
   1b90a:	4628      	mov	r0, r5
   1b90c:	4798      	blx	r3
		if (err) {
   1b90e:	2800      	cmp	r0, #0
   1b910:	d0e5      	beq.n	1b8de <health_fault_test+0x32>
   1b912:	e7f2      	b.n	1b8fa <health_fault_test+0x4e>

0001b914 <health_fault_clear>:
{
   1b914:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b916:	b08f      	sub	sp, #60	; 0x3c
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   1b918:	ab05      	add	r3, sp, #20
	struct bt_mesh_health_srv *srv = model->user_data;
   1b91a:	69c7      	ldr	r7, [r0, #28]
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   1b91c:	9302      	str	r3, [sp, #8]
{
   1b91e:	4605      	mov	r5, r0
   1b920:	460e      	mov	r6, r1
	company_id = net_buf_simple_pull_le16(buf);
   1b922:	4610      	mov	r0, r2
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   1b924:	f44f 1110 	mov.w	r1, #2359296	; 0x240000
   1b928:	e9cd 1303 	strd	r1, r3, [sp, #12]
	company_id = net_buf_simple_pull_le16(buf);
   1b92c:	f001 fbe0 	bl	1d0f0 <net_buf_simple_pull_le16>
	if (srv->cb && srv->cb->fault_clear) {
   1b930:	687b      	ldr	r3, [r7, #4]
	company_id = net_buf_simple_pull_le16(buf);
   1b932:	4604      	mov	r4, r0
	if (srv->cb && srv->cb->fault_clear) {
   1b934:	b97b      	cbnz	r3, 1b956 <health_fault_clear+0x42>
	health_get_registered(model, company_id, &sdu);
   1b936:	4621      	mov	r1, r4
   1b938:	aa02      	add	r2, sp, #8
	if (bt_mesh_model_send(model, ctx, &sdu, NULL, NULL)) {
   1b93a:	2400      	movs	r4, #0
	health_get_registered(model, company_id, &sdu);
   1b93c:	4628      	mov	r0, r5
   1b93e:	f7ff ff7c 	bl	1b83a <health_get_registered>
	if (bt_mesh_model_send(model, ctx, &sdu, NULL, NULL)) {
   1b942:	9400      	str	r4, [sp, #0]
   1b944:	4623      	mov	r3, r4
   1b946:	aa02      	add	r2, sp, #8
   1b948:	4631      	mov	r1, r6
   1b94a:	4628      	mov	r0, r5
   1b94c:	f7fe faef 	bl	19f2e <bt_mesh_model_send>
	return 0;
   1b950:	4620      	mov	r0, r4
}
   1b952:	b00f      	add	sp, #60	; 0x3c
   1b954:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (srv->cb && srv->cb->fault_clear) {
   1b956:	689b      	ldr	r3, [r3, #8]
   1b958:	2b00      	cmp	r3, #0
   1b95a:	d0ec      	beq.n	1b936 <health_fault_clear+0x22>
		err = srv->cb->fault_clear(model, company_id);
   1b95c:	4601      	mov	r1, r0
   1b95e:	4628      	mov	r0, r5
   1b960:	4798      	blx	r3
		if (err) {
   1b962:	2800      	cmp	r0, #0
   1b964:	d0e7      	beq.n	1b936 <health_fault_clear+0x22>
   1b966:	e7f4      	b.n	1b952 <health_fault_clear+0x3e>

0001b968 <health_fault_get>:
{
   1b968:	b570      	push	{r4, r5, r6, lr}
   1b96a:	b08e      	sub	sp, #56	; 0x38
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   1b96c:	ab05      	add	r3, sp, #20
{
   1b96e:	4604      	mov	r4, r0
   1b970:	460e      	mov	r6, r1
	company_id = net_buf_simple_pull_le16(buf);
   1b972:	4610      	mov	r0, r2
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   1b974:	f44f 1110 	mov.w	r1, #2359296	; 0x240000
   1b978:	e9cd 1303 	strd	r1, r3, [sp, #12]
   1b97c:	9302      	str	r3, [sp, #8]
	company_id = net_buf_simple_pull_le16(buf);
   1b97e:	f001 fbb7 	bl	1d0f0 <net_buf_simple_pull_le16>
	if (bt_mesh_model_send(model, ctx, &sdu, NULL, NULL)) {
   1b982:	2500      	movs	r5, #0
	company_id = net_buf_simple_pull_le16(buf);
   1b984:	4601      	mov	r1, r0
	health_get_registered(model, company_id, &sdu);
   1b986:	aa02      	add	r2, sp, #8
   1b988:	4620      	mov	r0, r4
   1b98a:	f7ff ff56 	bl	1b83a <health_get_registered>
	if (bt_mesh_model_send(model, ctx, &sdu, NULL, NULL)) {
   1b98e:	9500      	str	r5, [sp, #0]
   1b990:	462b      	mov	r3, r5
   1b992:	aa02      	add	r2, sp, #8
   1b994:	4631      	mov	r1, r6
   1b996:	4620      	mov	r0, r4
   1b998:	f7fe fac9 	bl	19f2e <bt_mesh_model_send>
}
   1b99c:	4628      	mov	r0, r5
   1b99e:	b00e      	add	sp, #56	; 0x38
   1b9a0:	bd70      	pop	{r4, r5, r6, pc}

0001b9a2 <health_pub_update>:
{
   1b9a2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_mesh_model_pub *pub = mod->pub;
   1b9a6:	f8d0 9008 	ldr.w	r9, [r0, #8]
	struct bt_mesh_health_srv *srv = mod->user_data;
   1b9aa:	f8d0 a01c 	ldr.w	sl, [r0, #28]
	count = health_get_current(mod, pub->msg);
   1b9ae:	f8d9 5010 	ldr.w	r5, [r9, #16]
	bt_mesh_model_msg_init(msg, OP_HEALTH_CURRENT_STATUS);
   1b9b2:	2104      	movs	r1, #4
{
   1b9b4:	4607      	mov	r7, r0
	bt_mesh_model_msg_init(msg, OP_HEALTH_CURRENT_STATUS);
   1b9b6:	4628      	mov	r0, r5
   1b9b8:	f7fe fafd 	bl	19fb6 <bt_mesh_model_msg_init>
	test_id = net_buf_simple_add(msg, 1);
   1b9bc:	2101      	movs	r1, #1
   1b9be:	4628      	mov	r0, r5
   1b9c0:	f001 fb03 	bl	1cfca <net_buf_simple_add>
	company_ptr = net_buf_simple_add(msg, sizeof(company_id));
   1b9c4:	2102      	movs	r1, #2
	test_id = net_buf_simple_add(msg, 1);
   1b9c6:	4606      	mov	r6, r0
	company_ptr = net_buf_simple_add(msg, sizeof(company_id));
   1b9c8:	4628      	mov	r0, r5
   1b9ca:	f001 fafe 	bl	1cfca <net_buf_simple_add>
   1b9ce:	4604      	mov	r4, r0
	comp = bt_mesh_comp_get();
   1b9d0:	f7ee fec2 	bl	a758 <bt_mesh_comp_get>
	if (srv->cb && srv->cb->fault_get_cur) {
   1b9d4:	f8da 3004 	ldr.w	r3, [sl, #4]
	comp = bt_mesh_comp_get();
   1b9d8:	4680      	mov	r8, r0
	if (srv->cb && srv->cb->fault_get_cur) {
   1b9da:	b1b3      	cbz	r3, 1ba0a <health_pub_update+0x68>
   1b9dc:	681b      	ldr	r3, [r3, #0]
   1b9de:	b1a3      	cbz	r3, 1ba0a <health_pub_update+0x68>
		fault_count = net_buf_simple_tailroom(msg);
   1b9e0:	4628      	mov	r0, r5
   1b9e2:	f001 fbac 	bl	1d13e <net_buf_simple_tailroom>
   1b9e6:	f88d 000d 	strb.w	r0, [sp, #13]
   1b9ea:	682a      	ldr	r2, [r5, #0]
		err = srv->cb->fault_get_cur(mod, test_id, &company_id,
   1b9ec:	f8da 1004 	ldr.w	r1, [sl, #4]
   1b9f0:	88ab      	ldrh	r3, [r5, #4]
   1b9f2:	f10d 000d 	add.w	r0, sp, #13
   1b9f6:	9000      	str	r0, [sp, #0]
   1b9f8:	f8d1 a000 	ldr.w	sl, [r1]
   1b9fc:	4413      	add	r3, r2
   1b9fe:	4631      	mov	r1, r6
   1ba00:	f10d 020e 	add.w	r2, sp, #14
   1ba04:	4638      	mov	r0, r7
   1ba06:	47d0      	blx	sl
		if (err) {
   1ba08:	b148      	cbz	r0, 1ba1e <health_pub_update+0x7c>
		sys_put_le16(comp->cid, company_ptr);
   1ba0a:	f8b8 3000 	ldrh.w	r3, [r8]
	dst[0] = val;
   1ba0e:	7023      	strb	r3, [r4, #0]
	dst[1] = val >> 8;
   1ba10:	0a1b      	lsrs	r3, r3, #8
   1ba12:	7063      	strb	r3, [r4, #1]
		*test_id = HEALTH_TEST_STANDARD;
   1ba14:	2300      	movs	r3, #0
   1ba16:	7033      	strb	r3, [r6, #0]
		fault_count = 0U;
   1ba18:	f88d 300d 	strb.w	r3, [sp, #13]
   1ba1c:	e009      	b.n	1ba32 <health_pub_update+0x90>
			sys_put_le16(company_id, company_ptr);
   1ba1e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
	dst[0] = val;
   1ba22:	7023      	strb	r3, [r4, #0]
	dst[1] = val >> 8;
   1ba24:	0a1b      	lsrs	r3, r3, #8
			net_buf_simple_add(msg, fault_count);
   1ba26:	f89d 100d 	ldrb.w	r1, [sp, #13]
   1ba2a:	7063      	strb	r3, [r4, #1]
   1ba2c:	4628      	mov	r0, r5
   1ba2e:	f001 facc 	bl	1cfca <net_buf_simple_add>
	return fault_count;
   1ba32:	f89d 300d 	ldrb.w	r3, [sp, #13]
	if (count) {
   1ba36:	f899 2007 	ldrb.w	r2, [r9, #7]
   1ba3a:	3b00      	subs	r3, #0
   1ba3c:	bf18      	it	ne
   1ba3e:	2301      	movne	r3, #1
   1ba40:	f363 1286 	bfi	r2, r3, #6, #1
}
   1ba44:	2000      	movs	r0, #0
   1ba46:	f889 2007 	strb.w	r2, [r9, #7]
   1ba4a:	b004      	add	sp, #16
   1ba4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001ba50 <attention_set_unrel>:
{
   1ba50:	b510      	push	{r4, lr}
   1ba52:	4604      	mov	r4, r0
	time = net_buf_simple_pull_u8(buf);
   1ba54:	4610      	mov	r0, r2
   1ba56:	f001 fb43 	bl	1d0e0 <net_buf_simple_pull_u8>
   1ba5a:	4601      	mov	r1, r0
	bt_mesh_attention(model, time);
   1ba5c:	4620      	mov	r0, r4
   1ba5e:	f7ef f93d 	bl	acdc <bt_mesh_attention>
}
   1ba62:	2000      	movs	r0, #0
   1ba64:	bd10      	pop	{r4, pc}

0001ba66 <attention_set>:
{
   1ba66:	b538      	push	{r3, r4, r5, lr}
   1ba68:	4604      	mov	r4, r0
   1ba6a:	460d      	mov	r5, r1
	err = attention_set_unrel(model, ctx, buf);
   1ba6c:	f7ff fff0 	bl	1ba50 <attention_set_unrel>
	if (err) {
   1ba70:	b928      	cbnz	r0, 1ba7e <attention_set+0x18>
	return send_attention_status(model, ctx);
   1ba72:	4629      	mov	r1, r5
   1ba74:	4620      	mov	r0, r4
}
   1ba76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return send_attention_status(model, ctx);
   1ba7a:	f7ff be86 	b.w	1b78a <send_attention_status>
}
   1ba7e:	bd38      	pop	{r3, r4, r5, pc}

0001ba80 <bt_mesh_adv_buf_local_ready>:
}
   1ba80:	4770      	bx	lr

0001ba82 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, uint16_t mem_size, uint16_t mem_count,
	      void **mem_head)
{
   1ba82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	*mem_head = mem_pool;
   1ba84:	6018      	str	r0, [r3, #0]

	/* Store free mem_count after the list's next pointer at an 32-bit
	 * aligned memory location to ensure atomic read/write (in ARM for now).
	 */
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   1ba86:	1dc3      	adds	r3, r0, #7
{
   1ba88:	4605      	mov	r5, r0
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   1ba8a:	f023 0303 	bic.w	r3, r3, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   1ba8e:	1e50      	subs	r0, r2, #1
{
   1ba90:	460e      	mov	r6, r1
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   1ba92:	b280      	uxth	r0, r0
{
   1ba94:	4614      	mov	r4, r2
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   1ba96:	801a      	strh	r2, [r3, #0]
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   1ba98:	2100      	movs	r1, #0
   1ba9a:	2204      	movs	r2, #4
   1ba9c:	fb06 5000 	mla	r0, r6, r0, r5
   1baa0:	f7fb fbe3 	bl	1726a <memset>
		     sizeof(mem_pool));
	while (mem_count--) {
   1baa4:	3c02      	subs	r4, #2
   1baa6:	b2a4      	uxth	r4, r4
   1baa8:	f64f 77ff 	movw	r7, #65535	; 0xffff
   1baac:	42bc      	cmp	r4, r7
   1baae:	d101      	bne.n	1bab4 <mem_init+0x32>
		next = (uint32_t)((uint8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
		       (void *)&next, sizeof(next));
	}
}
   1bab0:	b003      	add	sp, #12
   1bab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			       (mem_size * (mem_count + 1)));
   1bab4:	1c63      	adds	r3, r4, #1
   1bab6:	b29b      	uxth	r3, r3
   1bab8:	4373      	muls	r3, r6
		next = (uint32_t)((uint8_t *) mem_pool +
   1baba:	18ea      	adds	r2, r5, r3
   1babc:	9201      	str	r2, [sp, #4]
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
   1babe:	1b98      	subs	r0, r3, r6
   1bac0:	2204      	movs	r2, #4
   1bac2:	eb0d 0102 	add.w	r1, sp, r2
   1bac6:	4428      	add	r0, r5
   1bac8:	3c01      	subs	r4, #1
   1baca:	f7fb fbc3 	bl	17254 <memcpy>
   1bace:	b2a4      	uxth	r4, r4
   1bad0:	e7ec      	b.n	1baac <mem_init+0x2a>

0001bad2 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
   1bad2:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (*mem_head) {
   1bad4:	6804      	ldr	r4, [r0, #0]
{
   1bad6:	4605      	mov	r5, r0
	if (*mem_head) {
   1bad8:	b18c      	cbz	r4, 1bafe <mem_acquire+0x2c>
		uint16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   1bada:	1de3      	adds	r3, r4, #7
   1badc:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
   1bae0:	2204      	movs	r2, #4
   1bae2:	4621      	mov	r1, r4
   1bae4:	eb0d 0002 	add.w	r0, sp, r2
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   1bae8:	881e      	ldrh	r6, [r3, #0]
		memcpy(&head, mem, sizeof(head));
   1baea:	f7fb fbb3 	bl	17254 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
   1baee:	9b01      	ldr	r3, [sp, #4]
   1baf0:	b123      	cbz	r3, 1bafc <mem_acquire+0x2a>
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
   1baf2:	1dda      	adds	r2, r3, #7
   1baf4:	f022 0203 	bic.w	r2, r2, #3
		free_count--;
   1baf8:	3e01      	subs	r6, #1
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
   1bafa:	8016      	strh	r6, [r2, #0]
				free_count;
		}

		*mem_head = head;
   1bafc:	602b      	str	r3, [r5, #0]
		return mem;
	}

	return NULL;
}
   1bafe:	4620      	mov	r0, r4
   1bb00:	b002      	add	sp, #8
   1bb02:	bd70      	pop	{r4, r5, r6, pc}

0001bb04 <mem_release>:

void mem_release(void *mem, void **mem_head)
{
   1bb04:	b570      	push	{r4, r5, r6, lr}
	uint16_t free_count = 0U;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
   1bb06:	680c      	ldr	r4, [r1, #0]
{
   1bb08:	4606      	mov	r6, r0
   1bb0a:	460d      	mov	r5, r1
	if (*mem_head) {
   1bb0c:	b11c      	cbz	r4, 1bb16 <mem_release+0x12>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   1bb0e:	1de3      	adds	r3, r4, #7
   1bb10:	f023 0303 	bic.w	r3, r3, #3
   1bb14:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
   1bb16:	2204      	movs	r2, #4
   1bb18:	4629      	mov	r1, r5
   1bb1a:	4630      	mov	r0, r6
   1bb1c:	f7fb fb9a 	bl	17254 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((uint16_t *)MROUND((uint8_t *)mem + sizeof(mem))) = free_count;
   1bb20:	1df2      	adds	r2, r6, #7
   1bb22:	f022 0203 	bic.w	r2, r2, #3
	free_count++;
   1bb26:	1c63      	adds	r3, r4, #1
	*((uint16_t *)MROUND((uint8_t *)mem + sizeof(mem))) = free_count;
   1bb28:	8013      	strh	r3, [r2, #0]

	*mem_head = mem;
   1bb2a:	602e      	str	r6, [r5, #0]
}
   1bb2c:	bd70      	pop	{r4, r5, r6, pc}

0001bb2e <mem_get>:
}

void *mem_get(void *mem_pool, uint16_t mem_size, uint16_t index)
{
	return ((void *)((uint8_t *)mem_pool + (mem_size * index)));
}
   1bb2e:	fb02 0001 	mla	r0, r2, r1, r0
   1bb32:	4770      	bx	lr

0001bb34 <mem_index_get>:

uint16_t mem_index_get(void *mem, void *mem_pool, uint16_t mem_size)
{
	return ((uint16_t)((uint8_t *)mem - (uint8_t *)mem_pool) / mem_size);
   1bb34:	1a40      	subs	r0, r0, r1
   1bb36:	b280      	uxth	r0, r0
}
   1bb38:	fbb0 f0f2 	udiv	r0, r0, r2
   1bb3c:	4770      	bx	lr

0001bb3e <mem_rcopy>:
/**
 * @brief  Copy bytes in reverse
 * @details Example: [ 0x11 0x22 0x33 ] -> [ 0x33 0x22 0x11 ]
 */
void mem_rcopy(uint8_t *dst, uint8_t const *src, uint16_t len)
{
   1bb3e:	b510      	push	{r4, lr}
	src += len;
   1bb40:	4411      	add	r1, r2
	while (len--) {
   1bb42:	3801      	subs	r0, #1
   1bb44:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1bb48:	3a01      	subs	r2, #1
   1bb4a:	b292      	uxth	r2, r2
   1bb4c:	429a      	cmp	r2, r3
   1bb4e:	d100      	bne.n	1bb52 <mem_rcopy+0x14>
		*dst++ = *--src;
	}
}
   1bb50:	bd10      	pop	{r4, pc}
		*dst++ = *--src;
   1bb52:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   1bb56:	f800 4f01 	strb.w	r4, [r0, #1]!
   1bb5a:	e7f5      	b.n	1bb48 <mem_rcopy+0xa>

0001bb5c <mem_nz>:
 * @brief Determine if src[0..len-1] contains one or more non-zero bytes
 * @return 0 if all bytes are zero; otherwise 1
 */
uint8_t mem_nz(uint8_t *src, uint16_t len)
{
	while (len--) {
   1bb5c:	4401      	add	r1, r0
   1bb5e:	4288      	cmp	r0, r1
   1bb60:	d101      	bne.n	1bb66 <mem_nz+0xa>
		if (*src++) {
			return 1;
		}
	}

	return 0;
   1bb62:	2000      	movs	r0, #0
   1bb64:	4770      	bx	lr
		if (*src++) {
   1bb66:	f810 3b01 	ldrb.w	r3, [r0], #1
   1bb6a:	2b00      	cmp	r3, #0
   1bb6c:	d0f7      	beq.n	1bb5e <mem_nz+0x2>
			return 1;
   1bb6e:	2001      	movs	r0, #1
}
   1bb70:	4770      	bx	lr

0001bb72 <memq_init>:
 * @return          Initial link-element
 */
memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* Head and tail pointer to the initial link - forms an empty queue */
	*head = *tail = link;
   1bb72:	6010      	str	r0, [r2, #0]
   1bb74:	6008      	str	r0, [r1, #0]

	return link;
}
   1bb76:	4770      	bx	lr

0001bb78 <memq_deinit>:
memq_link_t *memq_deinit(memq_link_t **head, memq_link_t **tail)
{
	memq_link_t *old_head;

	/* If head and tail are not equal, then queue is not empty */
	if (*head != *tail) {
   1bb78:	680a      	ldr	r2, [r1, #0]
{
   1bb7a:	4603      	mov	r3, r0
	if (*head != *tail) {
   1bb7c:	6800      	ldr	r0, [r0, #0]
   1bb7e:	4290      	cmp	r0, r2
   1bb80:	f04f 0200 	mov.w	r2, #0
		return NULL;
	}

	old_head = *head;
	*head = *tail = NULL;
   1bb84:	bf0a      	itet	eq
   1bb86:	600a      	streq	r2, [r1, #0]
		return NULL;
   1bb88:	4610      	movne	r0, r2
	*head = *tail = NULL;
   1bb8a:	601a      	streq	r2, [r3, #0]

	return old_head;
}
   1bb8c:	4770      	bx	lr

0001bb8e <memq_enqueue>:
 * @param mem[in]      The memory payload to be enqueued. Pointed to by old tail
 * @param tail[in,out] Tail of queue. Will be updated to point to link
 * @return             New tail. Note: Does not point to the new mem
 */
memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
   1bb8e:	b510      	push	{r4, lr}
	/* Let the old tail element point to the new tail element */
	(*tail)->next = link;
   1bb90:	6814      	ldr	r4, [r2, #0]
   1bb92:	6020      	str	r0, [r4, #0]

	/* Let the old tail element point the the new memory */
	(*tail)->mem = mem;
   1bb94:	6814      	ldr	r4, [r2, #0]
   1bb96:	6061      	str	r1, [r4, #4]

	/* Update the tail-pointer to point to the new tail element.
	 * The new tail-element is not expected to point to anything sensible
	 */
	cpu_dmb(); /* Ensure data accesses are synchronized */
	*tail = link; /* Commit: enqueue of memq node */
   1bb98:	6010      	str	r0, [r2, #0]

	return link;
}
   1bb9a:	bd10      	pop	{r4, pc}

0001bb9c <memq_peek>:
 * @return         head or NULL if queue is empty
 */
memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* If head and tail are equal, then queue empty */
	if (head == tail) {
   1bb9c:	4288      	cmp	r0, r1
   1bb9e:	d003      	beq.n	1bba8 <memq_peek+0xc>
		return NULL;
	}

	/* Extract the head link-element's memory */
	if (mem) {
   1bba0:	b11a      	cbz	r2, 1bbaa <memq_peek+0xe>
		*mem = head->mem;
   1bba2:	6843      	ldr	r3, [r0, #4]
   1bba4:	6013      	str	r3, [r2, #0]
   1bba6:	4770      	bx	lr
		return NULL;
   1bba8:	2000      	movs	r0, #0
	}

	return head; /* queue was not empty */
}
   1bbaa:	4770      	bx	lr

0001bbac <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *old_head;

	/* Use memq peek to get the old head and its mem */
	old_head = memq_peek(*head, tail, mem);
   1bbac:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
   1bbae:	4283      	cmp	r3, r0
   1bbb0:	d009      	beq.n	1bbc6 <memq_dequeue+0x1a>
	if (mem) {
   1bbb2:	b122      	cbz	r2, 1bbbe <memq_dequeue+0x12>
		*mem = head->mem;
   1bbb4:	6858      	ldr	r0, [r3, #4]
   1bbb6:	6010      	str	r0, [r2, #0]
	if (old_head == NULL) {
		return NULL; /* queue is empty */
	}

	/* Update the head-pointer to point to the new head element */
	*head = old_head->next;
   1bbb8:	681a      	ldr	r2, [r3, #0]
   1bbba:	600a      	str	r2, [r1, #0]

	return old_head;
   1bbbc:	e001      	b.n	1bbc2 <memq_dequeue+0x16>
	if (old_head == NULL) {
   1bbbe:	2b00      	cmp	r3, #0
   1bbc0:	d1fa      	bne.n	1bbb8 <memq_dequeue+0xc>
}
   1bbc2:	4618      	mov	r0, r3
   1bbc4:	4770      	bx	lr
		return NULL; /* queue is empty */
   1bbc6:	2300      	movs	r3, #0
   1bbc8:	e7fb      	b.n	1bbc2 <memq_dequeue+0x16>

0001bbca <util_ones_count_get>:
 * @param octets_len Must not be bigger than 255/8 = 31 bytes
 *
 * @return popcnt of 'octets'
 */
uint8_t util_ones_count_get(const uint8_t *octets, uint8_t octets_len)
{
   1bbca:	b510      	push	{r4, lr}
   1bbcc:	1e43      	subs	r3, r0, #1
	uint8_t one_count = 0U;
   1bbce:	2000      	movs	r0, #0

	while (octets_len--) {
   1bbd0:	3901      	subs	r1, #1
   1bbd2:	b2c9      	uxtb	r1, r1
   1bbd4:	29ff      	cmp	r1, #255	; 0xff
   1bbd6:	d100      	bne.n	1bbda <util_ones_count_get+0x10>
		}
		octets++;
	}

	return one_count;
}
   1bbd8:	bd10      	pop	{r4, pc}
		bite = *octets;
   1bbda:	f813 2f01 	ldrb.w	r2, [r3, #1]!
		while (bite) {
   1bbde:	2a00      	cmp	r2, #0
   1bbe0:	d0f6      	beq.n	1bbd0 <util_ones_count_get+0x6>
			bite &= (bite - 1);
   1bbe2:	1e54      	subs	r4, r2, #1
			one_count++;
   1bbe4:	3001      	adds	r0, #1
			bite &= (bite - 1);
   1bbe6:	4022      	ands	r2, r4
			one_count++;
   1bbe8:	b2c0      	uxtb	r0, r0
   1bbea:	e7f8      	b.n	1bbde <util_ones_count_get+0x14>

0001bbec <ticker_dequeue>:
{
   1bbec:	b5f0      	push	{r4, r5, r6, r7, lr}
	previous = instance->ticker_id_head;
   1bbee:	7f42      	ldrb	r2, [r0, #29]
	node = &instance->nodes[0];
   1bbf0:	6806      	ldr	r6, [r0, #0]
{
   1bbf2:	4605      	mov	r5, r0
   1bbf4:	468c      	mov	ip, r1
	previous = instance->ticker_id_head;
   1bbf6:	4613      	mov	r3, r2
	total = 0U;
   1bbf8:	2000      	movs	r0, #0
	while (current != TICKER_NULL) {
   1bbfa:	2aff      	cmp	r2, #255	; 0xff
   1bbfc:	d101      	bne.n	1bc02 <ticker_dequeue+0x16>
		return 0;
   1bbfe:	2000      	movs	r0, #0
}
   1bc00:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ticker_current = &node[current];
   1bc02:	eb02 0442 	add.w	r4, r2, r2, lsl #1
   1bc06:	0127      	lsls	r7, r4, #4
   1bc08:	eb06 1404 	add.w	r4, r6, r4, lsl #4
		if (current == id) {
   1bc0c:	4562      	cmp	r2, ip
		total += ticker_current->ticks_to_expire;
   1bc0e:	68a1      	ldr	r1, [r4, #8]
		current = ticker_current->next;
   1bc10:	5df7      	ldrb	r7, [r6, r7]
		total += ticker_current->ticks_to_expire;
   1bc12:	4408      	add	r0, r1
		if (current == id) {
   1bc14:	d002      	beq.n	1bc1c <ticker_dequeue+0x30>
   1bc16:	4613      	mov	r3, r2
		current = ticker_current->next;
   1bc18:	463a      	mov	r2, r7
   1bc1a:	e7ee      	b.n	1bbfa <ticker_dequeue+0xe>
	if (previous == current) {
   1bc1c:	4293      	cmp	r3, r2
   1bc1e:	d100      	bne.n	1bc22 <ticker_dequeue+0x36>
		instance->ticker_id_head = ticker_current->next;
   1bc20:	776f      	strb	r7, [r5, #29]
	node[previous].next = ticker_current->next;
   1bc22:	b21b      	sxth	r3, r3
   1bc24:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1bc28:	011b      	lsls	r3, r3, #4
   1bc2a:	54f7      	strb	r7, [r6, r3]
	if (ticker_current->next != TICKER_NULL) {
   1bc2c:	7823      	ldrb	r3, [r4, #0]
   1bc2e:	2bff      	cmp	r3, #255	; 0xff
   1bc30:	d0e6      	beq.n	1bc00 <ticker_dequeue+0x14>
		node[ticker_current->next].ticks_to_expire += timeout;
   1bc32:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1bc36:	eb06 1303 	add.w	r3, r6, r3, lsl #4
   1bc3a:	689a      	ldr	r2, [r3, #8]
   1bc3c:	440a      	add	r2, r1
   1bc3e:	609a      	str	r2, [r3, #8]
	return (total + timeout);
   1bc40:	e7de      	b.n	1bc00 <ticker_dequeue+0x14>

0001bc42 <ticks_to_expire_prep>:
{
   1bc42:	b530      	push	{r4, r5, lr}
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   1bc44:	1a55      	subs	r5, r2, r1
   1bc46:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
   1bc4a:	6883      	ldr	r3, [r0, #8]
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
   1bc4c:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   1bc4e:	d109      	bne.n	1bc64 <ticks_to_expire_prep+0x22>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1bc50:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   1bc54:	442b      	add	r3, r5
	if (ticks_to_expire > ticks_to_expire_minus) {
   1bc56:	42a3      	cmp	r3, r4
   1bc58:	d90e      	bls.n	1bc78 <ticks_to_expire_prep+0x36>
		ticks_to_expire -= ticks_to_expire_minus;
   1bc5a:	1b1b      	subs	r3, r3, r4
		ticks_to_expire_minus = 0U;
   1bc5c:	2400      	movs	r4, #0
	ticker->ticks_to_expire = ticks_to_expire;
   1bc5e:	6083      	str	r3, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   1bc60:	6144      	str	r4, [r0, #20]
}
   1bc62:	bd30      	pop	{r4, r5, pc}
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1bc64:	1a8a      	subs	r2, r1, r2
   1bc66:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
   1bc6a:	4293      	cmp	r3, r2
   1bc6c:	d901      	bls.n	1bc72 <ticks_to_expire_prep+0x30>
			ticks_to_expire -= delta_current_start;
   1bc6e:	1a9b      	subs	r3, r3, r2
   1bc70:	e7f1      	b.n	1bc56 <ticks_to_expire_prep+0x14>
			ticks_to_expire_minus +=
   1bc72:	4414      	add	r4, r2
   1bc74:	1ae4      	subs	r4, r4, r3
			ticks_to_expire = 0U;
   1bc76:	2300      	movs	r3, #0
		ticks_to_expire_minus -= ticks_to_expire;
   1bc78:	1ae4      	subs	r4, r4, r3
		ticks_to_expire = 0U;
   1bc7a:	2300      	movs	r3, #0
   1bc7c:	e7ef      	b.n	1bc5e <ticks_to_expire_prep+0x1c>

0001bc7e <ticker_job_op_cb>:
{
   1bc7e:	4603      	mov	r3, r0
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   1bc80:	2200      	movs	r2, #0
   1bc82:	701a      	strb	r2, [r3, #0]
	if (user_op->fp_op_func) {
   1bc84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	user_op->status = status;
   1bc86:	6299      	str	r1, [r3, #40]	; 0x28
{
   1bc88:	4608      	mov	r0, r1
	if (user_op->fp_op_func) {
   1bc8a:	b10a      	cbz	r2, 1bc90 <ticker_job_op_cb+0x12>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   1bc8c:	6b19      	ldr	r1, [r3, #48]	; 0x30
   1bc8e:	4710      	bx	r2
}
   1bc90:	4770      	bx	lr

0001bc92 <ticker_job_list_insert>:
{
   1bc92:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bc96:	b089      	sub	sp, #36	; 0x24
	node = &instance->nodes[0];
   1bc98:	6803      	ldr	r3, [r0, #0]
   1bc9a:	9303      	str	r3, [sp, #12]
	users = &instance->users[0];
   1bc9c:	6843      	ldr	r3, [r0, #4]
   1bc9e:	9305      	str	r3, [sp, #20]
	while (count_user--) {
   1bca0:	7a43      	ldrb	r3, [r0, #9]
{
   1bca2:	4606      	mov	r6, r0
   1bca4:	4688      	mov	r8, r1
   1bca6:	3b01      	subs	r3, #1
   1bca8:	fa5f fa83 	uxtb.w	sl, r3
	while (count_user--) {
   1bcac:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   1bcb0:	d102      	bne.n	1bcb8 <ticker_job_list_insert+0x26>
}
   1bcb2:	b009      	add	sp, #36	; 0x24
   1bcb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		user = &users[count_user];
   1bcb8:	9b05      	ldr	r3, [sp, #20]
   1bcba:	eb03 0bca 	add.w	fp, r3, sl, lsl #3
		user_ops = (void *)&user->user_op[0];
   1bcbe:	f8db 3004 	ldr.w	r3, [fp, #4]
		user_ops_first = user->first;
   1bcc2:	f89b 7001 	ldrb.w	r7, [fp, #1]
		user_ops = (void *)&user->user_op[0];
   1bcc6:	9304      	str	r3, [sp, #16]
		while ((insert_head != TICKER_NULL) ||
   1bcc8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   1bccc:	d076      	beq.n	1bdbc <ticker_job_list_insert+0x12a>
				ticker = &node[id_insert];
   1bcce:	eb08 0448 	add.w	r4, r8, r8, lsl #1
   1bcd2:	9a03      	ldr	r2, [sp, #12]
   1bcd4:	f8cd 8008 	str.w	r8, [sp, #8]
   1bcd8:	0123      	lsls	r3, r4, #4
				user_op = NULL;
   1bcda:	2500      	movs	r5, #0
				insert_head = ticker->next;
   1bcdc:	f812 8003 	ldrb.w	r8, [r2, r3]
				ticker = &node[id_insert];
   1bce0:	eb02 1404 	add.w	r4, r2, r4, lsl #4
	ticker->next = TICKER_NULL;
   1bce4:	23ff      	movs	r3, #255	; 0xff
   1bce6:	7023      	strb	r3, [r4, #0]
	ticker_new = &node[id];
   1bce8:	f9bd c008 	ldrsh.w	ip, [sp, #8]
	node = &instance->nodes[0];
   1bcec:	6830      	ldr	r0, [r6, #0]
	ticker_new = &node[id];
   1bcee:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   1bcf2:	ea4f 120c 	mov.w	r2, ip, lsl #4
   1bcf6:	eb00 1c0c 	add.w	ip, r0, ip, lsl #4
   1bcfa:	9206      	str	r2, [sp, #24]
	ticks_to_expire = ticker_new->ticks_to_expire;
   1bcfc:	f8dc 2008 	ldr.w	r2, [ip, #8]
   1bd00:	9201      	str	r2, [sp, #4]
	current = instance->ticker_id_head;
   1bd02:	7f72      	ldrb	r2, [r6, #29]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   1bd04:	2aff      	cmp	r2, #255	; 0xff
   1bd06:	d00c      	beq.n	1bd22 <ticker_job_list_insert+0x90>
		(ticker_current = &node[current])->ticks_to_expire))) {
   1bd08:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
   1bd0c:	ea4f 110e 	mov.w	r1, lr, lsl #4
   1bd10:	eb00 1e0e 	add.w	lr, r0, lr, lsl #4
   1bd14:	9107      	str	r1, [sp, #28]
		(ticks_to_expire_current =
   1bd16:	f8de 9008 	ldr.w	r9, [lr, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   1bd1a:	9901      	ldr	r1, [sp, #4]
   1bd1c:	4549      	cmp	r1, r9
   1bd1e:	f080 8085 	bcs.w	1be2c <ticker_job_list_insert+0x19a>
	if (previous == TICKER_NULL) {
   1bd22:	2bff      	cmp	r3, #255	; 0xff
		node[previous].next = id;
   1bd24:	bf18      	it	ne
   1bd26:	b21b      	sxthne	r3, r3
	ticker_new->ticks_to_expire = ticks_to_expire;
   1bd28:	9901      	ldr	r1, [sp, #4]
   1bd2a:	f8cc 1008 	str.w	r1, [ip, #8]
		node[previous].next = id;
   1bd2e:	bf18      	it	ne
   1bd30:	eb03 0343 	addne.w	r3, r3, r3, lsl #1
	ticker_new->next = current;
   1bd34:	9906      	ldr	r1, [sp, #24]
		instance->ticker_id_head = id;
   1bd36:	bf08      	it	eq
   1bd38:	9b02      	ldreq	r3, [sp, #8]
	ticker_new->next = current;
   1bd3a:	5442      	strb	r2, [r0, r1]
		node[previous].next = id;
   1bd3c:	bf1d      	ittte	ne
   1bd3e:	011b      	lslne	r3, r3, #4
   1bd40:	9902      	ldrne	r1, [sp, #8]
   1bd42:	54c1      	strbne	r1, [r0, r3]
		instance->ticker_id_head = id;
   1bd44:	7773      	strbeq	r3, [r6, #29]
	if (current != TICKER_NULL) {
   1bd46:	2aff      	cmp	r2, #255	; 0xff
   1bd48:	d007      	beq.n	1bd5a <ticker_job_list_insert+0xc8>
		node[current].ticks_to_expire -= ticks_to_expire;
   1bd4a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1bd4e:	eb00 1202 	add.w	r2, r0, r2, lsl #4
   1bd52:	9901      	ldr	r1, [sp, #4]
   1bd54:	6893      	ldr	r3, [r2, #8]
   1bd56:	1a5b      	subs	r3, r3, r1
   1bd58:	6093      	str	r3, [r2, #8]
	ticker->req = ticker->ack + 1;
   1bd5a:	78a3      	ldrb	r3, [r4, #2]
   1bd5c:	3301      	adds	r3, #1
   1bd5e:	7063      	strb	r3, [r4, #1]
			if (user_op) {
   1bd60:	2d00      	cmp	r5, #0
   1bd62:	d0b1      	beq.n	1bcc8 <ticker_job_list_insert+0x36>
				ticker_job_op_cb(user_op, status);
   1bd64:	2100      	movs	r1, #0
   1bd66:	4628      	mov	r0, r5
   1bd68:	f7ff ff89 	bl	1bc7e <ticker_job_op_cb>
				if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   1bd6c:	6863      	ldr	r3, [r4, #4]
   1bd6e:	2b00      	cmp	r3, #0
   1bd70:	d1aa      	bne.n	1bcc8 <ticker_job_list_insert+0x36>
					ticker->fp_op_func =
   1bd72:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1bd74:	6223      	str	r3, [r4, #32]
					ticker->op_context =
   1bd76:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   1bd78:	6263      	str	r3, [r4, #36]	; 0x24
   1bd7a:	e7a5      	b.n	1bcc8 <ticker_job_list_insert+0x36>
				user_op = &user_ops[user_ops_first];
   1bd7c:	9a04      	ldr	r2, [sp, #16]
   1bd7e:	2334      	movs	r3, #52	; 0x34
   1bd80:	fb17 f303 	smulbb	r3, r7, r3
   1bd84:	18d5      	adds	r5, r2, r3
				first = user_ops_first + 1;
   1bd86:	3701      	adds	r7, #1
				if (first == user->count_user_op) {
   1bd88:	f89b 2000 	ldrb.w	r2, [fp]
				first = user_ops_first + 1;
   1bd8c:	b2ff      	uxtb	r7, r7
					first = 0U;
   1bd8e:	42ba      	cmp	r2, r7
   1bd90:	bf08      	it	eq
   1bd92:	2700      	moveq	r7, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   1bd94:	9a04      	ldr	r2, [sp, #16]
   1bd96:	5cd3      	ldrb	r3, [r2, r3]
   1bd98:	2b04      	cmp	r3, #4
   1bd9a:	d10f      	bne.n	1bdbc <ticker_job_list_insert+0x12a>
				id_insert = user_op->id;
   1bd9c:	786b      	ldrb	r3, [r5, #1]
   1bd9e:	9302      	str	r3, [sp, #8]
				ticker = &node[id_insert];
   1bda0:	eb03 0443 	add.w	r4, r3, r3, lsl #1
   1bda4:	9b03      	ldr	r3, [sp, #12]
   1bda6:	eb03 1404 	add.w	r4, r3, r4, lsl #4
				if (((ticker->req -
   1bdaa:	7863      	ldrb	r3, [r4, #1]
				      ticker->ack) & 0xff) != 0U) {
   1bdac:	78a2      	ldrb	r2, [r4, #2]
				if (((ticker->req -
   1bdae:	1a9b      	subs	r3, r3, r2
				      ticker->ack) & 0xff) != 0U) {
   1bdb0:	b2db      	uxtb	r3, r3
				if (((ticker->req -
   1bdb2:	b153      	cbz	r3, 1bdca <ticker_job_list_insert+0x138>
					ticker_job_op_cb(user_op,
   1bdb4:	2101      	movs	r1, #1
   1bdb6:	4628      	mov	r0, r5
   1bdb8:	f7ff ff61 	bl	1bc7e <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
   1bdbc:	f89b 3002 	ldrb.w	r3, [fp, #2]
   1bdc0:	42bb      	cmp	r3, r7
   1bdc2:	d1db      	bne.n	1bd7c <ticker_job_list_insert+0xea>
   1bdc4:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
   1bdc8:	e76e      	b.n	1bca8 <ticker_job_list_insert+0x16>
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   1bdca:	8aab      	ldrh	r3, [r5, #20]
				ticker_job_op_start(ticker, user_op,
   1bdcc:	6971      	ldr	r1, [r6, #20]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   1bdce:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   1bdd2:	4293      	cmp	r3, r2
   1bdd4:	d006      	beq.n	1bde4 <ticker_job_list_insert+0x152>
		ticker->must_expire =
   1bdd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1bdda:	1a98      	subs	r0, r3, r2
   1bddc:	4242      	negs	r2, r0
   1bdde:	4142      	adcs	r2, r0
   1bde0:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
	ticker->ext_data = start->ext_data;
   1bde4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   1bde6:	62a2      	str	r2, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
   1bde8:	68ea      	ldr	r2, [r5, #12]
   1bdea:	6062      	str	r2, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   1bdec:	692a      	ldr	r2, [r5, #16]
   1bdee:	6222      	str	r2, [r4, #32]
	ticker->lazy_periodic =
   1bdf0:	f64f 72fd 	movw	r2, #65533	; 0xfffd
   1bdf4:	4293      	cmp	r3, r2
   1bdf6:	bf88      	it	hi
   1bdf8:	2300      	movhi	r3, #0
   1bdfa:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
   1bdfc:	69ab      	ldr	r3, [r5, #24]
   1bdfe:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
   1be00:	69eb      	ldr	r3, [r5, #28]
   1be02:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
   1be04:	6a2b      	ldr	r3, [r5, #32]
   1be06:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire_minus = 0U;
   1be08:	f04f 0900 	mov.w	r9, #0
	ticker->ticks_to_expire = start->ticks_first;
   1be0c:	68ab      	ldr	r3, [r5, #8]
   1be0e:	60a3      	str	r3, [r4, #8]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   1be10:	686a      	ldr	r2, [r5, #4]
	ticker->ticks_to_expire_minus = 0U;
   1be12:	f8c4 9014 	str.w	r9, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   1be16:	4620      	mov	r0, r4
   1be18:	f7ff ff13 	bl	1bc42 <ticks_to_expire_prep>
	ticker->force = 1U;
   1be1c:	f04f 0301 	mov.w	r3, #1
	ticker->remainder_current = 0U;
   1be20:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
   1be24:	f8a4 901e 	strh.w	r9, [r4, #30]
	ticker->force = 1U;
   1be28:	70e3      	strb	r3, [r4, #3]
}
   1be2a:	e75b      	b.n	1bce4 <ticker_job_list_insert+0x52>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
   1be2c:	9901      	ldr	r1, [sp, #4]
   1be2e:	ebb1 0109 	subs.w	r1, r1, r9
   1be32:	9101      	str	r1, [sp, #4]
   1be34:	d105      	bne.n	1be42 <ticker_job_list_insert+0x1b0>
   1be36:	f8bc 101e 	ldrh.w	r1, [ip, #30]
   1be3a:	f8be e01e 	ldrh.w	lr, [lr, #30]
   1be3e:	4571      	cmp	r1, lr
   1be40:	d803      	bhi.n	1be4a <ticker_job_list_insert+0x1b8>
		current = ticker_current->next;
   1be42:	4613      	mov	r3, r2
   1be44:	9a07      	ldr	r2, [sp, #28]
   1be46:	5c82      	ldrb	r2, [r0, r2]
   1be48:	e75c      	b.n	1bd04 <ticker_job_list_insert+0x72>
   1be4a:	f8cd 9004 	str.w	r9, [sp, #4]
   1be4e:	e768      	b.n	1bd22 <ticker_job_list_insert+0x90>

0001be50 <ticker_worker>:
{
   1be50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
   1be54:	7f86      	ldrb	r6, [r0, #30]
	instance->worker_trigger = 1U;
   1be56:	2301      	movs	r3, #1
{
   1be58:	b08d      	sub	sp, #52	; 0x34
   1be5a:	4605      	mov	r5, r0
	instance->worker_trigger = 1U;
   1be5c:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
   1be5e:	b91e      	cbnz	r6, 1be68 <ticker_worker+0x18>
	if (instance->ticker_id_head == TICKER_NULL) {
   1be60:	7f43      	ldrb	r3, [r0, #29]
   1be62:	2bff      	cmp	r3, #255	; 0xff
   1be64:	d103      	bne.n	1be6e <ticker_worker+0x1e>
		instance->worker_trigger = 0U;
   1be66:	77c6      	strb	r6, [r0, #31]
}
   1be68:	b00d      	add	sp, #52	; 0x34
   1be6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
   1be6e:	f7f5 fcb1 	bl	117d4 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1be72:	696b      	ldr	r3, [r5, #20]
	ticker_id_head = instance->ticker_id_head;
   1be74:	7f6f      	ldrb	r7, [r5, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1be76:	1ac0      	subs	r0, r0, r3
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   1be78:	7f2b      	ldrb	r3, [r5, #28]
   1be7a:	2bff      	cmp	r3, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1be7c:	f020 4b7f 	bic.w	fp, r0, #4278190080	; 0xff000000
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   1be80:	d004      	beq.n	1be8c <ticker_worker+0x3c>
		if (instance->ticks_slot_previous > ticks_elapsed) {
   1be82:	69ae      	ldr	r6, [r5, #24]
	uint8_t slot_reserved = 0;
   1be84:	455e      	cmp	r6, fp
   1be86:	bf94      	ite	ls
   1be88:	2600      	movls	r6, #0
   1be8a:	2601      	movhi	r6, #1
	node = &instance->nodes[0];
   1be8c:	f8d5 9000 	ldr.w	r9, [r5]
	ticks_expired = 0U;
   1be90:	f04f 0800 	mov.w	r8, #0
	while (ticker_id_head != TICKER_NULL) {
   1be94:	2fff      	cmp	r7, #255	; 0xff
   1be96:	d11a      	bne.n	1bece <ticker_worker+0x7e>
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
   1be98:	7aea      	ldrb	r2, [r5, #11]
   1be9a:	7aab      	ldrb	r3, [r5, #10]
   1be9c:	4293      	cmp	r3, r2
   1be9e:	d105      	bne.n	1beac <ticker_worker+0x5c>
	uint8_t idx = *ticks_elapsed_index + 1;
   1bea0:	3301      	adds	r3, #1
   1bea2:	b2db      	uxtb	r3, r3
		idx = 0U;
   1bea4:	2b02      	cmp	r3, #2
   1bea6:	bf08      	it	eq
   1bea8:	2300      	moveq	r3, #0
	*ticks_elapsed_index = idx;
   1beaa:	72eb      	strb	r3, [r5, #11]
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   1beac:	7aeb      	ldrb	r3, [r5, #11]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   1beae:	6a6c      	ldr	r4, [r5, #36]	; 0x24
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   1beb0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   1beb4:	2201      	movs	r2, #1
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   1beb6:	f8c3 800c 	str.w	r8, [r3, #12]
	instance->worker_trigger = 0U;
   1beba:	2300      	movs	r3, #0
   1bebc:	77eb      	strb	r3, [r5, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   1bebe:	2104      	movs	r1, #4
   1bec0:	462b      	mov	r3, r5
   1bec2:	2003      	movs	r0, #3
   1bec4:	46a4      	mov	ip, r4
}
   1bec6:	b00d      	add	sp, #52	; 0x34
   1bec8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   1becc:	4760      	bx	ip
		ticker = &node[ticker_id_head];
   1bece:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   1bed2:	eb09 1407 	add.w	r4, r9, r7, lsl #4
   1bed6:	013a      	lsls	r2, r7, #4
		ticks_to_expire = ticker->ticks_to_expire;
   1bed8:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
   1beda:	459b      	cmp	fp, r3
   1bedc:	d3dc      	bcc.n	1be98 <ticker_worker+0x48>
		ticks_elapsed -= ticks_to_expire;
   1bede:	ebab 0b03 	sub.w	fp, fp, r3
		ticks_expired += ticks_to_expire;
   1bee2:	4498      	add	r8, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   1bee4:	78a3      	ldrb	r3, [r4, #2]
   1bee6:	9303      	str	r3, [sp, #12]
		ticker_id_head = ticker->next;
   1bee8:	f819 7002 	ldrb.w	r7, [r9, r2]
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   1beec:	7863      	ldrb	r3, [r4, #1]
   1beee:	9a03      	ldr	r2, [sp, #12]
   1bef0:	1a9b      	subs	r3, r3, r2
   1bef2:	b2db      	uxtb	r3, r3
   1bef4:	2b01      	cmp	r3, #1
   1bef6:	d1cd      	bne.n	1be94 <ticker_worker+0x44>
		if (ticker->ticks_slot != 0U &&
   1bef8:	69a3      	ldr	r3, [r4, #24]
   1befa:	9304      	str	r3, [sp, #16]
   1befc:	2b00      	cmp	r3, #0
   1befe:	d034      	beq.n	1bf6a <ticker_worker+0x11a>
   1bf00:	2e00      	cmp	r6, #0
   1bf02:	f040 80a8 	bne.w	1c056 <ticker_worker+0x206>
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
   1bf06:	f994 302d 	ldrsb.w	r3, [r4, #45]	; 0x2d
   1bf0a:	9305      	str	r3, [sp, #20]
   1bf0c:	3380      	adds	r3, #128	; 0x80
   1bf0e:	d02c      	beq.n	1bf6a <ticker_worker+0x11a>
   1bf10:	2fff      	cmp	r7, #255	; 0xff
   1bf12:	d02a      	beq.n	1bf6a <ticker_worker+0x11a>
		int32_t lazy_current = ticker->lazy_current;
   1bf14:	8be3      	ldrh	r3, [r4, #30]
		if (lazy_current >= ticker->lazy_periodic) {
   1bf16:	8ba2      	ldrh	r2, [r4, #28]
		uint32_t current_age = ticker->ticks_periodic +
   1bf18:	6861      	ldr	r1, [r4, #4]
		if (lazy_current >= ticker->lazy_periodic) {
   1bf1a:	4293      	cmp	r3, r2
			lazy_current -= ticker->lazy_periodic;
   1bf1c:	bf28      	it	cs
   1bf1e:	1a9b      	subcs	r3, r3, r2
		uint32_t current_age = ticker->ticks_periodic +
   1bf20:	fb03 1201 	mla	r2, r3, r1, r1
   1bf24:	9209      	str	r2, [sp, #36]	; 0x24
		uint32_t acc_ticks_to_expire = 0U;
   1bf26:	2200      	movs	r2, #0
   1bf28:	9206      	str	r2, [sp, #24]
				(lazy_current - ticker->priority);
   1bf2a:	9a05      	ldr	r2, [sp, #20]
   1bf2c:	1a9b      	subs	r3, r3, r2
		uint32_t current_age = ticker->ticks_periodic +
   1bf2e:	46ba      	mov	sl, r7
				(lazy_current - ticker->priority);
   1bf30:	930b      	str	r3, [sp, #44]	; 0x2c
			struct ticker_node *ticker_next = &nodes[id_head];
   1bf32:	fa0f fa8a 	sxth.w	sl, sl
   1bf36:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
   1bf3a:	ea4f 130a 	mov.w	r3, sl, lsl #4
   1bf3e:	eb09 1a0a 	add.w	sl, r9, sl, lsl #4
   1bf42:	9308      	str	r3, [sp, #32]
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
   1bf44:	f8da c008 	ldr.w	ip, [sl, #8]
   1bf48:	9b06      	ldr	r3, [sp, #24]
   1bf4a:	4463      	add	r3, ip
   1bf4c:	9306      	str	r3, [sp, #24]
			if (acc_ticks_to_expire > ticker->ticks_slot) {
   1bf4e:	9a06      	ldr	r2, [sp, #24]
   1bf50:	9b04      	ldr	r3, [sp, #16]
   1bf52:	4293      	cmp	r3, r2
   1bf54:	d309      	bcc.n	1bf6a <ticker_worker+0x11a>
			if (ticker_next->ticks_slot == 0U) {
   1bf56:	f8da 3018 	ldr.w	r3, [sl, #24]
   1bf5a:	2b00      	cmp	r3, #0
   1bf5c:	d13a      	bne.n	1bfd4 <ticker_worker+0x184>
			id_head = ticker_next->next;
   1bf5e:	9b08      	ldr	r3, [sp, #32]
   1bf60:	f819 a003 	ldrb.w	sl, [r9, r3]
		while (id_head != TICKER_NULL) {
   1bf64:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   1bf68:	d1e3      	bne.n	1bf32 <ticker_worker+0xe2>
		must_expire_skip = 0U;
   1bf6a:	f04f 0a00 	mov.w	sl, #0
		if (ticker->ext_data) {
   1bf6e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1bf70:	2b00      	cmp	r3, #0
   1bf72:	f000 809a 	beq.w	1c0aa <ticker_worker+0x25a>
			ticker->ext_data->ticks_drift = 0U;
   1bf76:	2200      	movs	r2, #0
			ticks_drift = ticker->ext_data->ticks_drift;
   1bf78:	6859      	ldr	r1, [r3, #4]
			ticker->ext_data->reschedule_state =
   1bf7a:	721a      	strb	r2, [r3, #8]
			ticker->ext_data->ticks_drift = 0U;
   1bf7c:	605a      	str	r2, [r3, #4]
		ticker->ack--;
   1bf7e:	9b03      	ldr	r3, [sp, #12]
   1bf80:	3b01      	subs	r3, #1
   1bf82:	70a3      	strb	r3, [r4, #2]
		if (ticker->timeout_func) {
   1bf84:	68e3      	ldr	r3, [r4, #12]
   1bf86:	469e      	mov	lr, r3
   1bf88:	2b00      	cmp	r3, #0
   1bf8a:	d083      	beq.n	1be94 <ticker_worker+0x44>
					   ticks_expired -
   1bf8c:	6960      	ldr	r0, [r4, #20]
   1bf8e:	696b      	ldr	r3, [r5, #20]
			ticker->timeout_func(ticks_at_expire,
   1bf90:	6a62      	ldr	r2, [r4, #36]	; 0x24
					   ticks_expired -
   1bf92:	eba8 0000 	sub.w	r0, r8, r0
   1bf96:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
   1bf98:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
   1bf9c:	f1ba 0f00 	cmp.w	sl, #0
   1bfa0:	f040 8085 	bne.w	1c0ae <ticker_worker+0x25e>
   1bfa4:	8be3      	ldrh	r3, [r4, #30]
   1bfa6:	f8d4 c010 	ldr.w	ip, [r4, #16]
   1bfaa:	f8cd c004 	str.w	ip, [sp, #4]
   1bfae:	f894 c003 	ldrb.w	ip, [r4, #3]
   1bfb2:	f8cd c000 	str.w	ip, [sp]
   1bfb6:	46f4      	mov	ip, lr
   1bfb8:	47e0      	blx	ip
			if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   1bfba:	f1ba 0f00 	cmp.w	sl, #0
   1bfbe:	f47f af69 	bne.w	1be94 <ticker_worker+0x44>
				if (ticker->ticks_slot != 0U) {
   1bfc2:	69a3      	ldr	r3, [r4, #24]
				ticker->lazy_current = 0U;
   1bfc4:	f8a4 a01e 	strh.w	sl, [r4, #30]
					slot_reserved = 1U;
   1bfc8:	2b00      	cmp	r3, #0
				ticker->force = 0U;
   1bfca:	f884 a003 	strb.w	sl, [r4, #3]
					slot_reserved = 1U;
   1bfce:	bf18      	it	ne
   1bfd0:	2601      	movne	r6, #1
   1bfd2:	e75f      	b.n	1be94 <ticker_worker+0x44>
			int32_t lazy_next = ticker_next->lazy_current;
   1bfd4:	f8ba 201e 	ldrh.w	r2, [sl, #30]
				ticker_next->lazy_periodic > lazy_next;
   1bfd8:	f8ba 001c 	ldrh.w	r0, [sl, #28]
				ticker_next->priority;
   1bfdc:	f99a e02d 	ldrsb.w	lr, [sl, #45]	; 0x2d
   1bfe0:	f8cd e01c 	str.w	lr, [sp, #28]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   1bfe4:	f8da e004 	ldr.w	lr, [sl, #4]
			if (!lazy_next_periodic_skip) {
   1bfe8:	4282      	cmp	r2, r0
			int32_t lazy_next = ticker_next->lazy_current;
   1bfea:	4613      	mov	r3, r2
				lazy_next -= ticker_next->lazy_periodic;
   1bfec:	bf28      	it	cs
   1bfee:	1a13      	subcs	r3, r2, r0
					  0U :
   1bff0:	f1be 0f00 	cmp.w	lr, #0
   1bff4:	d04d      	beq.n	1c092 <ticker_worker+0x242>
   1bff6:	ebae 0c0c 	sub.w	ip, lr, ip
				(ticker->ticks_periodic == 0U) ||
   1bffa:	2900      	cmp	r1, #0
   1bffc:	d04b      	beq.n	1c096 <ticker_worker+0x246>
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   1bffe:	fb0e cc03 	mla	ip, lr, r3, ip
				(ticker->ticks_periodic == 0U) ||
   1c002:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
   1c006:	45e6      	cmp	lr, ip
   1c008:	bf8c      	ite	hi
   1c00a:	f04f 0e01 	movhi.w	lr, #1
   1c00e:	f04f 0e00 	movls.w	lr, #0
					(ticker->ticks_periodic != 0U) &&
   1c012:	bf34      	ite	cc
   1c014:	f04f 0c01 	movcc.w	ip, #1
   1c018:	f04f 0c00 	movcs.w	ip, #0
			uint8_t next_force = (ticker_next->force > ticker->force);
   1c01c:	f89a a003 	ldrb.w	sl, [sl, #3]
   1c020:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
			if (!lazy_next_periodic_skip &&
   1c024:	4282      	cmp	r2, r0
			uint8_t next_force = (ticker_next->force > ticker->force);
   1c026:	f894 a003 	ldrb.w	sl, [r4, #3]
			if (!lazy_next_periodic_skip &&
   1c02a:	d398      	bcc.n	1bf5e <ticker_worker+0x10e>
   1c02c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1c02e:	4552      	cmp	r2, sl
   1c030:	d811      	bhi.n	1c056 <ticker_worker+0x206>
			    (next_force ||
   1c032:	9a07      	ldr	r2, [sp, #28]
   1c034:	f112 0f80 	cmn.w	r2, #128	; 0x80
   1c038:	d00d      	beq.n	1c056 <ticker_worker+0x206>
				(lazy_next - ticker_next->priority) >
   1c03a:	1a9b      	subs	r3, r3, r2
			     next_is_critical ||
   1c03c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1c03e:	4293      	cmp	r3, r2
   1c040:	dd02      	ble.n	1c048 <ticker_worker+0x1f8>
			     (next_has_priority && !current_is_older) ||
   1c042:	f1be 0f00 	cmp.w	lr, #0
   1c046:	d006      	beq.n	1c056 <ticker_worker+0x206>
   1c048:	9b05      	ldr	r3, [sp, #20]
   1c04a:	9a07      	ldr	r2, [sp, #28]
   1c04c:	4293      	cmp	r3, r2
   1c04e:	d186      	bne.n	1bf5e <ticker_worker+0x10e>
			     (equal_priority && next_is_older))) {
   1c050:	f1bc 0f00 	cmp.w	ip, #0
   1c054:	d083      	beq.n	1bf5e <ticker_worker+0x10e>
			struct ticker_ext *ext_data = ticker->ext_data;
   1c056:	6aa3      	ldr	r3, [r4, #40]	; 0x28
		int32_t lazy_current = ticker->lazy_current;
   1c058:	8be2      	ldrh	r2, [r4, #30]
			if (ext_data &&
   1c05a:	b14b      	cbz	r3, 1c070 <ticker_worker+0x220>
   1c05c:	6819      	ldr	r1, [r3, #0]
   1c05e:	b1f1      	cbz	r1, 1c09e <ticker_worker+0x24e>
			    ext_data->ticks_slot_window != 0U &&
   1c060:	7a19      	ldrb	r1, [r3, #8]
   1c062:	b9e1      	cbnz	r1, 1c09e <ticker_worker+0x24e>
			    TICKER_RESCHEDULE_STATE_NONE &&
   1c064:	8ba1      	ldrh	r1, [r4, #28]
   1c066:	4291      	cmp	r1, r2
   1c068:	d819      	bhi.n	1c09e <ticker_worker+0x24e>
				ext_data->reschedule_state =
   1c06a:	f04f 0101 	mov.w	r1, #1
				ext_data->reschedule_state =
   1c06e:	7219      	strb	r1, [r3, #8]
			ticker->lazy_current++;
   1c070:	3201      	adds	r2, #1
			if ((ticker->must_expire == 0U) ||
   1c072:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
			ticker->lazy_current++;
   1c076:	b292      	uxth	r2, r2
   1c078:	83e2      	strh	r2, [r4, #30]
			if ((ticker->must_expire == 0U) ||
   1c07a:	b131      	cbz	r1, 1c08a <ticker_worker+0x23a>
   1c07c:	8ba1      	ldrh	r1, [r4, #28]
   1c07e:	4291      	cmp	r1, r2
   1c080:	d203      	bcs.n	1c08a <ticker_worker+0x23a>
			    (ticker->lazy_periodic >= ticker->lazy_current) ||
   1c082:	b17b      	cbz	r3, 1c0a4 <ticker_worker+0x254>
			    TICKER_RESCHEDULE_PENDING(ticker)) {
   1c084:	7a1b      	ldrb	r3, [r3, #8]
   1c086:	2b01      	cmp	r3, #1
   1c088:	d10c      	bne.n	1c0a4 <ticker_worker+0x254>
				ticker->ack--;
   1c08a:	9b03      	ldr	r3, [sp, #12]
   1c08c:	3b01      	subs	r3, #1
   1c08e:	70a3      	strb	r3, [r4, #2]
				continue;
   1c090:	e700      	b.n	1be94 <ticker_worker+0x44>
					  0U :
   1c092:	46f4      	mov	ip, lr
   1c094:	e7b1      	b.n	1bffa <ticker_worker+0x1aa>
				(ticker->ticks_periodic == 0U) ||
   1c096:	f04f 0e01 	mov.w	lr, #1
					(ticker->ticks_periodic != 0U) &&
   1c09a:	468c      	mov	ip, r1
   1c09c:	e7be      	b.n	1c01c <ticker_worker+0x1cc>
				ext_data->reschedule_state =
   1c09e:	f04f 0100 	mov.w	r1, #0
   1c0a2:	e7e4      	b.n	1c06e <ticker_worker+0x21e>
			must_expire_skip = 1U;
   1c0a4:	f04f 0a01 	mov.w	sl, #1
   1c0a8:	e761      	b.n	1bf6e <ticker_worker+0x11e>
			ticks_drift = 0U;
   1c0aa:	4619      	mov	r1, r3
   1c0ac:	e767      	b.n	1bf7e <ticker_worker+0x12e>
			ticker->timeout_func(ticks_at_expire,
   1c0ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1c0b2:	e778      	b.n	1bfa6 <ticker_worker+0x156>

0001c0b4 <ticker_start>:
{
   1c0b4:	b510      	push	{r4, lr}
   1c0b6:	b08a      	sub	sp, #40	; 0x28
	return ticker_start_ext(instance_index, user_id, ticker_id,
   1c0b8:	2400      	movs	r4, #0
   1c0ba:	9409      	str	r4, [sp, #36]	; 0x24
   1c0bc:	9c14      	ldr	r4, [sp, #80]	; 0x50
   1c0be:	9408      	str	r4, [sp, #32]
   1c0c0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   1c0c2:	9407      	str	r4, [sp, #28]
   1c0c4:	9c12      	ldr	r4, [sp, #72]	; 0x48
   1c0c6:	9406      	str	r4, [sp, #24]
   1c0c8:	9c11      	ldr	r4, [sp, #68]	; 0x44
   1c0ca:	9405      	str	r4, [sp, #20]
   1c0cc:	9c10      	ldr	r4, [sp, #64]	; 0x40
   1c0ce:	9404      	str	r4, [sp, #16]
   1c0d0:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
   1c0d4:	9403      	str	r4, [sp, #12]
   1c0d6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   1c0d8:	9402      	str	r4, [sp, #8]
   1c0da:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   1c0dc:	9401      	str	r4, [sp, #4]
   1c0de:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1c0e0:	9400      	str	r4, [sp, #0]
   1c0e2:	f7ef fc61 	bl	b9a8 <ticker_start_ext>
}
   1c0e6:	b00a      	add	sp, #40	; 0x28
   1c0e8:	bd10      	pop	{r4, pc}

0001c0ea <ticker_update>:
{
   1c0ea:	b510      	push	{r4, lr}
   1c0ec:	b088      	sub	sp, #32
	return ticker_update_ext(instance_index, user_id, ticker_id,
   1c0ee:	2400      	movs	r4, #0
   1c0f0:	9407      	str	r4, [sp, #28]
   1c0f2:	9c10      	ldr	r4, [sp, #64]	; 0x40
   1c0f4:	9406      	str	r4, [sp, #24]
   1c0f6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   1c0f8:	9405      	str	r4, [sp, #20]
   1c0fa:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
   1c0fe:	9404      	str	r4, [sp, #16]
   1c100:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
   1c104:	9403      	str	r4, [sp, #12]
   1c106:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1c108:	9402      	str	r4, [sp, #8]
   1c10a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   1c10c:	9401      	str	r4, [sp, #4]
   1c10e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1c110:	9400      	str	r4, [sp, #0]
   1c112:	f7ef fc97 	bl	ba44 <ticker_update_ext>
}
   1c116:	b008      	add	sp, #32
   1c118:	bd10      	pop	{r4, pc}

0001c11a <ticker_ticks_now_get>:
	return cntr_cnt_get();
   1c11a:	f7f5 bb5b 	b.w	117d4 <cntr_cnt_get>

0001c11e <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1c11e:	1a40      	subs	r0, r0, r1
}
   1c120:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1c124:	4770      	bx	lr

0001c126 <ll_addr_read>:

uint8_t *ll_addr_read(uint8_t addr_type, uint8_t *const bdaddr)
{
   1c126:	b538      	push	{r3, r4, r5, lr}
	uint8_t *addr;

	addr = ll_addr_get(addr_type);
   1c128:	f7ef fd32 	bl	bb90 <ll_addr_get>
{
   1c12c:	460d      	mov	r5, r1
	if (addr) {
   1c12e:	4604      	mov	r4, r0
   1c130:	b120      	cbz	r0, 1c13c <ll_addr_read+0x16>
		memcpy(bdaddr, addr, BDADDR_SIZE);
   1c132:	4601      	mov	r1, r0
   1c134:	2206      	movs	r2, #6
   1c136:	4628      	mov	r0, r5
   1c138:	f7fb f88c 	bl	17254 <memcpy>
	}

	return addr;
}
   1c13c:	4620      	mov	r0, r4
   1c13e:	bd38      	pop	{r3, r4, r5, pc}

0001c140 <ll_tx_pwr_lvl_get>:

#include "ll.h"

uint8_t ll_tx_pwr_lvl_get(uint8_t handle_type,
		       uint16_t handle, uint8_t type, int8_t *tx_pwr_lvl)
{
   1c140:	b538      	push	{r3, r4, r5, lr}
   1c142:	4604      	mov	r4, r0
	switch (handle_type) {
   1c144:	2c02      	cmp	r4, #2
{
   1c146:	4608      	mov	r0, r1
   1c148:	461d      	mov	r5, r3
	switch (handle_type) {
   1c14a:	d106      	bne.n	1c15a <ll_tx_pwr_lvl_get+0x1a>
#endif /* CONFIG_BT_OBSERVER && CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL*/
#if defined(CONFIG_BT_CONN)
		case (BT_HCI_VS_LL_HANDLE_TYPE_CONN): {
			struct ll_conn *conn;

			conn = ll_connected_get(handle);
   1c14c:	f000 fa60 	bl	1c610 <ll_connected_get>
			if (!conn) {
   1c150:	b108      	cbz	r0, 1c156 <ll_tx_pwr_lvl_get+0x16>
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
				/* Level desired is maximum available */
				*tx_pwr_lvl = lll_radio_tx_pwr_max_get();
#else  /* !CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
				/* Return default if not multiple TXP */
				*tx_pwr_lvl = RADIO_TXP_DEFAULT;
   1c152:	2400      	movs	r4, #0
   1c154:	702c      	strb	r4, [r5, #0]
			return BT_HCI_ERR_UNKNOWN_CMD;
		}
	}

	return BT_HCI_ERR_SUCCESS;
}
   1c156:	4620      	mov	r0, r4
   1c158:	bd38      	pop	{r3, r4, r5, pc}
			return BT_HCI_ERR_UNKNOWN_CMD;
   1c15a:	2401      	movs	r4, #1
   1c15c:	e7fb      	b.n	1c156 <ll_tx_pwr_lvl_get+0x16>

0001c15e <ll_tx_pwr_get>:
{
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	*min = lll_radio_tx_pwr_min_get();
	*max = lll_radio_tx_pwr_max_get();
#else
	*min = RADIO_TXP_DEFAULT;
   1c15e:	2300      	movs	r3, #0
   1c160:	7003      	strb	r3, [r0, #0]
	*max = RADIO_TXP_DEFAULT;
   1c162:	700b      	strb	r3, [r1, #0]
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
}
   1c164:	4770      	bx	lr

0001c166 <meta_evt>:
{
   1c166:	b570      	push	{r4, r5, r6, lr}
	return net_buf_simple_add(&buf->b, len);
   1c168:	f100 0408 	add.w	r4, r0, #8
   1c16c:	460e      	mov	r6, r1
   1c16e:	4620      	mov	r0, r4
   1c170:	2102      	movs	r1, #2
   1c172:	4615      	mov	r5, r2
   1c174:	f000 ff29 	bl	1cfca <net_buf_simple_add>
	hdr->evt = evt;
   1c178:	233e      	movs	r3, #62	; 0x3e
   1c17a:	7003      	strb	r3, [r0, #0]
	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
   1c17c:	1c6b      	adds	r3, r5, #1
	hdr->len = len;
   1c17e:	7043      	strb	r3, [r0, #1]
   1c180:	2101      	movs	r1, #1
   1c182:	4620      	mov	r0, r4
   1c184:	f000 ff21 	bl	1cfca <net_buf_simple_add>
	me->subevent = subevt;
   1c188:	7006      	strb	r6, [r0, #0]
   1c18a:	4629      	mov	r1, r5
   1c18c:	4620      	mov	r0, r4
}
   1c18e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1c192:	f000 bf1a 	b.w	1cfca <net_buf_simple_add>

0001c196 <sys_get_le64>:
{
   1c196:	4603      	mov	r3, r0
}
   1c198:	6800      	ldr	r0, [r0, #0]
   1c19a:	6859      	ldr	r1, [r3, #4]
   1c19c:	4770      	bx	lr

0001c19e <hci_num_cmplt_encode>:
{
   1c19e:	b570      	push	{r4, r5, r6, lr}
   1c1a0:	f100 0408 	add.w	r4, r0, #8
   1c1a4:	460e      	mov	r6, r1
   1c1a6:	4620      	mov	r0, r4
   1c1a8:	2102      	movs	r1, #2
   1c1aa:	4615      	mov	r5, r2
   1c1ac:	f000 ff0d 	bl	1cfca <net_buf_simple_add>
	hdr->evt = evt;
   1c1b0:	2313      	movs	r3, #19
	hdr->len = len;
   1c1b2:	2105      	movs	r1, #5
	hdr->evt = evt;
   1c1b4:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   1c1b6:	7041      	strb	r1, [r0, #1]
   1c1b8:	4620      	mov	r0, r4
   1c1ba:	f000 ff06 	bl	1cfca <net_buf_simple_add>
	ep->num_handles = num_handles;
   1c1be:	2301      	movs	r3, #1
   1c1c0:	7003      	strb	r3, [r0, #0]
	hc->handle = sys_cpu_to_le16(handle);
   1c1c2:	f8a0 6001 	strh.w	r6, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
   1c1c6:	f8a0 5003 	strh.w	r5, [r0, #3]
}
   1c1ca:	bd70      	pop	{r4, r5, r6, pc}

0001c1cc <bt_rand>:
#include "hal/ecb.h"
#include "lll.h"

int bt_rand(void *buf, size_t len)
{
	return lll_csrand_get(buf, len);
   1c1cc:	f7f3 bdf6 	b.w	fdbc <lll_csrand_get>

0001c1d0 <bt_encrypt_be>:
	return 0;
}

int bt_encrypt_be(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
   1c1d0:	b508      	push	{r3, lr}
	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	ecb_encrypt_be(key, plaintext, enc_data);
   1c1d2:	f000 fd6d 	bl	1ccb0 <ecb_encrypt_be>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
   1c1d6:	2000      	movs	r0, #0
   1c1d8:	bd08      	pop	{r3, pc}

0001c1da <ll_feat_get>:

#else /* !CONFIG_BT_CTLR_SET_HOST_FEATURE */
uint64_t ll_feat_get(void)
{
	return LL_FEAT;
}
   1c1da:	208e      	movs	r0, #142	; 0x8e
   1c1dc:	2100      	movs	r1, #0
   1c1de:	4770      	bx	lr

0001c1e0 <disabled_cb>:
	z_impl_k_sem_give(sem);
   1c1e0:	f7f9 ba6a 	b.w	156b8 <z_impl_k_sem_give>

0001c1e4 <rx_demux_conn_tx_ack>:
{
   1c1e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1c1e6:	4605      	mov	r5, r0
   1c1e8:	4614      	mov	r4, r2
   1c1ea:	9300      	str	r3, [sp, #0]
   1c1ec:	f8ad 1006 	strh.w	r1, [sp, #6]
		ull_conn_ack_dequeue();
   1c1f0:	f7f3 f998 	bl	f524 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
   1c1f4:	4621      	mov	r1, r4
   1c1f6:	9a00      	ldr	r2, [sp, #0]
   1c1f8:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   1c1fc:	f7f3 f9d6 	bl	f5ac <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
   1c200:	4620      	mov	r0, r4
   1c202:	f7f3 f959 	bl	f4b8 <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   1c206:	466a      	mov	r2, sp
   1c208:	f10d 0106 	add.w	r1, sp, #6
   1c20c:	4628      	mov	r0, r5
   1c20e:	f7f3 f975 	bl	f4fc <ull_conn_ack_by_last_peek>
	} while (link);
   1c212:	4604      	mov	r4, r0
   1c214:	2800      	cmp	r0, #0
   1c216:	d1eb      	bne.n	1c1f0 <rx_demux_conn_tx_ack+0xc>
			ll_rx_sched();
   1c218:	f7f0 fee8 	bl	cfec <ll_rx_sched>
}
   1c21c:	b003      	add	sp, #12
   1c21e:	bd30      	pop	{r4, r5, pc}

0001c220 <ll_timeslice_ticker_id_get>:
	*instance_index = TICKER_INSTANCE_ID_CTLR;
   1c220:	2300      	movs	r3, #0
   1c222:	7003      	strb	r3, [r0, #0]
	*ticker_id = (TICKER_NODES - FLASH_TICKER_NODES);
   1c224:	2306      	movs	r3, #6
   1c226:	700b      	strb	r3, [r1, #0]
}
   1c228:	4770      	bx	lr

0001c22a <ull_rxfifo_alloc>:
 * @details This function allocates up to 'max' number of MFIFO elements by
 *          enqueuing pointers to memory elements with associated memq links.
 */
void ull_rxfifo_alloc(uint8_t s, uint8_t n, uint8_t f, uint8_t *l, uint8_t *m,
		      void *mem_free, void *link_free, uint8_t max)
{
   1c22a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c22e:	e9dd a60d 	ldrd	sl, r6, [sp, #52]	; 0x34
   1c232:	469b      	mov	fp, r3
   1c234:	f89d 703c 	ldrb.w	r7, [sp, #60]	; 0x3c
   1c238:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1c23a:	9100      	str	r1, [sp, #0]
   1c23c:	4681      	mov	r9, r0
   1c23e:	4690      	mov	r8, r2
   1c240:	9301      	str	r3, [sp, #4]
	uint8_t idx;

	while ((max--) && mfifo_enqueue_idx_get(n, f, *l, &idx)) {
   1c242:	b177      	cbz	r7, 1c262 <ull_rxfifo_alloc+0x38>
	last = last + 1;
   1c244:	f89b 4000 	ldrb.w	r4, [fp]
		last = 0U;
   1c248:	9b00      	ldr	r3, [sp, #0]
	last = last + 1;
   1c24a:	3401      	adds	r4, #1
   1c24c:	b2e4      	uxtb	r4, r4
		last = 0U;
   1c24e:	42a3      	cmp	r3, r4
   1c250:	bf08      	it	eq
   1c252:	2400      	moveq	r4, #0
	if (last == first) {
   1c254:	45a0      	cmp	r8, r4
   1c256:	d004      	beq.n	1c262 <ull_rxfifo_alloc+0x38>
		memq_link_t *link;
		struct node_rx_hdr *rx;

		link = mem_acquire(link_free);
   1c258:	4630      	mov	r0, r6
   1c25a:	f7ff fc3a 	bl	1bad2 <mem_acquire>
		if (!link) {
   1c25e:	4605      	mov	r5, r0
   1c260:	b910      	cbnz	r0, 1c268 <ull_rxfifo_alloc+0x3e>
		link->mem = NULL;
		rx->link = link;

		mfifo_by_idx_enqueue(m, s, idx, rx, l);
	}
}
   1c262:	b003      	add	sp, #12
   1c264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rx = mem_acquire(mem_free);
   1c268:	4650      	mov	r0, sl
   1c26a:	f7ff fc32 	bl	1bad2 <mem_acquire>
		if (!rx) {
   1c26e:	b930      	cbnz	r0, 1c27e <ull_rxfifo_alloc+0x54>
			mem_release(link, link_free);
   1c270:	4631      	mov	r1, r6
   1c272:	4628      	mov	r0, r5
}
   1c274:	b003      	add	sp, #12
   1c276:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mem_release(link, link_free);
   1c27a:	f7ff bc43 	b.w	1bb04 <mem_release>
		link->mem = NULL;
   1c27e:	2300      	movs	r3, #0
   1c280:	606b      	str	r3, [r5, #4]
		rx->link = link;
   1c282:	6005      	str	r5, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   1c284:	f89b 5000 	ldrb.w	r5, [fp]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1c288:	9b01      	ldr	r3, [sp, #4]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   1c28a:	fb15 f509 	smulbb	r5, r5, r9
	while ((max--) && mfifo_enqueue_idx_get(n, f, *l, &idx)) {
   1c28e:	1e7a      	subs	r2, r7, #1
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1c290:	5158      	str	r0, [r3, r5]
   1c292:	b2d7      	uxtb	r7, r2
	*last = idx; /* Commit: Update write index */
   1c294:	f88b 4000 	strb.w	r4, [fp]
}
   1c298:	e7d3      	b.n	1c242 <ull_rxfifo_alloc+0x18>

0001c29a <ull_rxfifo_release>:
 * @brief   Support function for RXFIFO_RELEASE macro
 * @details This function releases a node by returning it to the FIFO.
 */
void *ull_rxfifo_release(uint8_t s, uint8_t n, uint8_t f, uint8_t *l, uint8_t *m,
			 memq_link_t *link, struct node_rx_hdr *rx)
{
   1c29a:	b530      	push	{r4, r5, lr}
	last = last + 1;
   1c29c:	781c      	ldrb	r4, [r3, #0]
   1c29e:	3401      	adds	r4, #1
   1c2a0:	b2e4      	uxtb	r4, r4
		last = 0U;
   1c2a2:	42a1      	cmp	r1, r4
   1c2a4:	bf08      	it	eq
   1c2a6:	2400      	moveq	r4, #0
	if (last == first) {
   1c2a8:	42a2      	cmp	r2, r4
   1c2aa:	4605      	mov	r5, r0
   1c2ac:	9805      	ldr	r0, [sp, #20]
   1c2ae:	d008      	beq.n	1c2c2 <ull_rxfifo_release+0x28>

	if (!mfifo_enqueue_idx_get(n, f, *l, &idx)) {
		return NULL;
	}

	rx->link = link;
   1c2b0:	9a04      	ldr	r2, [sp, #16]
   1c2b2:	6002      	str	r2, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   1c2b4:	781a      	ldrb	r2, [r3, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1c2b6:	9903      	ldr	r1, [sp, #12]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   1c2b8:	fb12 f205 	smulbb	r2, r2, r5
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1c2bc:	5088      	str	r0, [r1, r2]
	*last = idx; /* Commit: Update write index */
   1c2be:	701c      	strb	r4, [r3, #0]

	mfifo_by_idx_enqueue(m, s, idx, rx, l);

	return rx;
}
   1c2c0:	bd30      	pop	{r4, r5, pc}
		return NULL;
   1c2c2:	2000      	movs	r0, #0
   1c2c4:	e7fc      	b.n	1c2c0 <ull_rxfifo_release+0x26>

0001c2c6 <lll_prepare>:
{
   1c2c6:	b507      	push	{r0, r1, r2, lr}
	return lll_prepare_resolve(is_abort_cb, abort_cb, prepare_cb,
   1c2c8:	2300      	movs	r3, #0
   1c2ca:	e9cd 3300 	strd	r3, r3, [sp]
   1c2ce:	9b04      	ldr	r3, [sp, #16]
   1c2d0:	f7f3 feb2 	bl	10038 <lll_prepare_resolve>
}
   1c2d4:	b003      	add	sp, #12
   1c2d6:	f85d fb04 	ldr.w	pc, [sp], #4

0001c2da <adv_time_get.constprop.0.isra.0>:
static uint16_t adv_time_get(struct pdu_adv *pdu, struct pdu_adv *pdu_scan,
   1c2da:	b530      	push	{r4, r5, lr}
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
   1c2dc:	7804      	ldrb	r4, [r0, #0]
   1c2de:	f004 040f 	and.w	r4, r4, #15
				   rxtx_turn_us * (adv_chn_cnt - 1);
   1c2e2:	1e53      	subs	r3, r2, #1
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
   1c2e4:	2c02      	cmp	r4, #2
			time_us += BYTES2US(adv_size, PHY_1M) * adv_chn_cnt +
   1c2e6:	b29d      	uxth	r5, r3
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
   1c2e8:	d10d      	bne.n	1c306 <adv_time_get.constprop.0.isra.0+0x2c>
			adv_size += pdu->len;
   1c2ea:	7841      	ldrb	r1, [r0, #1]
			time_us += BYTES2US(adv_size, PHY_1M) * adv_chn_cnt +
   1c2ec:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   1c2f0:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   1c2f4:	3110      	adds	r1, #16
   1c2f6:	0058      	lsls	r0, r3, #1
   1c2f8:	00c9      	lsls	r1, r1, #3
   1c2fa:	f500 70c8 	add.w	r0, r0, #400	; 0x190
   1c2fe:	fb01 0002 	mla	r0, r1, r2, r0
			time_us += (BYTES2US(adv_size, PHY_1M) +
   1c302:	b280      	uxth	r0, r0
}
   1c304:	bd30      	pop	{r4, r5, pc}
			if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   1c306:	2c01      	cmp	r4, #1
   1c308:	d016      	beq.n	1c338 <adv_time_get.constprop.0.isra.0+0x5e>
			BYTES2US((PDU_OVERHEAD_SIZE(PHY_1M) +
   1c30a:	3110      	adds	r1, #16
		const uint16_t scan_rsp_us =
   1c30c:	00c9      	lsls	r1, r1, #3
			} else if (pdu->type == PDU_ADV_TYPE_ADV_IND) {
   1c30e:	b96c      	cbnz	r4, 1c32c <adv_time_get.constprop.0.isra.0+0x52>
				adv_size += pdu->len;
   1c310:	7840      	ldrb	r0, [r0, #1]
				time_us += scan_req_us + EVENT_IFS_MAX_US +
   1c312:	f501 7136 	add.w	r1, r1, #728	; 0x2d8
				adv_size += pdu->len;
   1c316:	3010      	adds	r0, #16
				   BYTES2US(adv_size, PHY_1M) + EVENT_IFS_MAX_US;
   1c318:	00c3      	lsls	r3, r0, #3
				    EVENT_IFS_MAX_US + rx_to_us +
   1c31a:	f503 73b3 	add.w	r3, r3, #358	; 0x166
   1c31e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
   1c322:	3098      	adds	r0, #152	; 0x98
				    rxtx_turn_us) * (adv_chn_cnt - 1) +
   1c324:	fb13 f305 	smulbb	r3, r3, r5
			time_us += (BYTES2US(adv_size, PHY_1M) +
   1c328:	4418      	add	r0, r3
   1c32a:	e7ea      	b.n	1c302 <adv_time_get.constprop.0.isra.0+0x28>
			} else if (pdu->type == PDU_ADV_TYPE_SCAN_IND) {
   1c32c:	2c06      	cmp	r4, #6
   1c32e:	d0ef      	beq.n	1c310 <adv_time_get.constprop.0.isra.0+0x36>
		uint16_t adv_size =
   1c330:	2010      	movs	r0, #16
	uint16_t time_us = EVENT_OVERHEAD_START_US + EVENT_OVERHEAD_END_US;
   1c332:	f44f 71c8 	mov.w	r1, #400	; 0x190
   1c336:	e7ef      	b.n	1c318 <adv_time_get.constprop.0.isra.0+0x3e>
				adv_size += TARGETA_SIZE;
   1c338:	2016      	movs	r0, #22
				time_us += conn_ind_us;
   1c33a:	f44f 713c 	mov.w	r1, #752	; 0x2f0
   1c33e:	e7eb      	b.n	1c318 <adv_time_get.constprop.0.isra.0+0x3e>

0001c340 <ull_adv_init>:
	err = init_reset();
   1c340:	f7f1 bcca 	b.w	dcd8 <init_reset>

0001c344 <ull_adv_reset>:
{
   1c344:	b508      	push	{r3, lr}
		(void)disable(handle);
   1c346:	f7f1 fe65 	bl	e014 <disable.constprop.0>
}
   1c34a:	2000      	movs	r0, #0
   1c34c:	bd08      	pop	{r3, pc}

0001c34e <ull_adv_is_enabled>:
{
   1c34e:	b508      	push	{r3, lr}
	adv = ull_adv_is_enabled_get(handle);
   1c350:	f7f1 fe52 	bl	dff8 <ull_adv_is_enabled_get>
}
   1c354:	3800      	subs	r0, #0
   1c356:	bf18      	it	ne
   1c358:	2001      	movne	r0, #1
   1c35a:	bd08      	pop	{r3, pc}

0001c35c <ull_adv_filter_pol_get>:
{
   1c35c:	b508      	push	{r3, lr}
	adv = ull_adv_is_enabled_get(handle);
   1c35e:	f7f1 fe4b 	bl	dff8 <ull_adv_is_enabled_get>
	if (!adv) {
   1c362:	b118      	cbz	r0, 1c36c <ull_adv_filter_pol_get+0x10>
	return adv->lll.filter_policy;
   1c364:	f890 0025 	ldrb.w	r0, [r0, #37]	; 0x25
   1c368:	f000 0003 	and.w	r0, r0, #3
}
   1c36c:	bd08      	pop	{r3, pc}

0001c36e <ull_adv_pdu_update_addrs>:
{
   1c36e:	b510      	push	{r4, lr}
			own_id_addr = ll_addr_get(pdu->tx_addr);
   1c370:	460c      	mov	r4, r1
   1c372:	f814 0b02 	ldrb.w	r0, [r4], #2
   1c376:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1c37a:	f7ef fc09 	bl	bb90 <ll_addr_get>
	memcpy(adv_addr, tx_addr, BDADDR_SIZE);
   1c37e:	2206      	movs	r2, #6
			own_id_addr = ll_addr_get(pdu->tx_addr);
   1c380:	4601      	mov	r1, r0
	memcpy(adv_addr, tx_addr, BDADDR_SIZE);
   1c382:	4620      	mov	r0, r4
   1c384:	f7fa ff66 	bl	17254 <memcpy>
}
   1c388:	4620      	mov	r0, r4
   1c38a:	bd10      	pop	{r4, pc}

0001c38c <ull_adv_data_set>:
	if (len > PDU_AC_DATA_SIZE_MAX) {
   1c38c:	291f      	cmp	r1, #31
{
   1c38e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1c392:	4604      	mov	r4, r0
   1c394:	460d      	mov	r5, r1
   1c396:	4690      	mov	r8, r2
	if (len > PDU_AC_DATA_SIZE_MAX) {
   1c398:	d849      	bhi.n	1c42e <ull_adv_data_set+0xa2>
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   1c39a:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   1c39e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   1c3a2:	6adf      	ldr	r7, [r3, #44]	; 0x2c
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
   1c3a4:	783b      	ldrb	r3, [r7, #0]
   1c3a6:	f003 030f 	and.w	r3, r3, #15
   1c3aa:	2b01      	cmp	r3, #1
   1c3ac:	d10a      	bne.n	1c3c4 <ull_adv_data_set+0x38>
		adv->ad_data_backup.len = len;
   1c3ae:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
		memcpy(adv->ad_data_backup.data, data, adv->ad_data_backup.len);
   1c3b2:	460a      	mov	r2, r1
   1c3b4:	3041      	adds	r0, #65	; 0x41
   1c3b6:	4641      	mov	r1, r8
   1c3b8:	f7fa ff4c 	bl	17254 <memcpy>
	return 0;
   1c3bc:	2000      	movs	r0, #0
}
   1c3be:	b002      	add	sp, #8
   1c3c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   1c3c4:	f10d 0107 	add.w	r1, sp, #7
   1c3c8:	3028      	adds	r0, #40	; 0x28
   1c3ca:	f000 fadf 	bl	1c98c <lll_adv_pdu_alloc>
	pdu->tx_addr = prev->tx_addr;
   1c3ce:	4639      	mov	r1, r7
   1c3d0:	4606      	mov	r6, r0
   1c3d2:	f811 2b02 	ldrb.w	r2, [r1], #2
   1c3d6:	f3c2 1080 	ubfx	r0, r2, #6, #1
	pdu->type = prev->type;
   1c3da:	f3c2 0303 	ubfx	r3, r2, #0, #4
   1c3de:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
   1c3e2:	f002 0280 	and.w	r2, r2, #128	; 0x80
   1c3e6:	4630      	mov	r0, r6
   1c3e8:	4313      	orrs	r3, r2
   1c3ea:	f800 3b02 	strb.w	r3, [r0], #2
	memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
   1c3ee:	2206      	movs	r2, #6
   1c3f0:	f7fa ff30 	bl	17254 <memcpy>
	memcpy(&pdu->adv_ind.data[0], data, len);
   1c3f4:	462a      	mov	r2, r5
   1c3f6:	4641      	mov	r1, r8
   1c3f8:	f106 0008 	add.w	r0, r6, #8
	pdu->len = BDADDR_SIZE + len;
   1c3fc:	3506      	adds	r5, #6
	memcpy(&pdu->adv_ind.data[0], data, len);
   1c3fe:	f7fa ff29 	bl	17254 <memcpy>
	pdu->len = BDADDR_SIZE + len;
   1c402:	7075      	strb	r5, [r6, #1]
	if (adv->is_enabled) {
   1c404:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   1c408:	07db      	lsls	r3, r3, #31
   1c40a:	d404      	bmi.n	1c416 <ull_adv_data_set+0x8a>
	pdu->last = idx;
   1c40c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1c410:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
   1c414:	e7d2      	b.n	1c3bc <ull_adv_data_set+0x30>
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   1c416:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
   1c41a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
		err = ull_adv_time_update(adv, pdu, pdu_scan);
   1c41e:	4631      	mov	r1, r6
   1c420:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1c422:	4620      	mov	r0, r4
   1c424:	f7e4 fed0 	bl	11c8 <ull_adv_time_update>
		if (err) {
   1c428:	2800      	cmp	r0, #0
   1c42a:	d0ef      	beq.n	1c40c <ull_adv_data_set+0x80>
   1c42c:	e7c7      	b.n	1c3be <ull_adv_data_set+0x32>
		return BT_HCI_ERR_INVALID_PARAM;
   1c42e:	2012      	movs	r0, #18
   1c430:	e7c5      	b.n	1c3be <ull_adv_data_set+0x32>

0001c432 <ull_scan_rsp_set>:
	if (len > PDU_AC_DATA_SIZE_MAX) {
   1c432:	291f      	cmp	r1, #31
{
   1c434:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1c438:	4604      	mov	r4, r0
   1c43a:	460e      	mov	r6, r1
   1c43c:	4617      	mov	r7, r2
	if (len > PDU_AC_DATA_SIZE_MAX) {
   1c43e:	d83e      	bhi.n	1c4be <ull_scan_rsp_set+0x8c>
   1c440:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
   1c444:	eb00 0383 	add.w	r3, r0, r3, lsl #2
	return lll_adv_pdu_alloc(&lll->scan_rsp, idx);
   1c448:	f10d 0107 	add.w	r1, sp, #7
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   1c44c:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
	return lll_adv_pdu_alloc(&lll->scan_rsp, idx);
   1c450:	3034      	adds	r0, #52	; 0x34
   1c452:	f000 fa9b 	bl	1c98c <lll_adv_pdu_alloc>
	pdu->tx_addr = prev->tx_addr;
   1c456:	4641      	mov	r1, r8
   1c458:	4605      	mov	r5, r0
   1c45a:	f811 3b02 	ldrb.w	r3, [r1], #2
   1c45e:	f3c3 1380 	ubfx	r3, r3, #6, #1
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   1c462:	019b      	lsls	r3, r3, #6
   1c464:	f043 0304 	orr.w	r3, r3, #4
   1c468:	7003      	strb	r3, [r0, #0]
	pdu->len = BDADDR_SIZE + len;
   1c46a:	1db3      	adds	r3, r6, #6
   1c46c:	7043      	strb	r3, [r0, #1]
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
   1c46e:	2206      	movs	r2, #6
   1c470:	3002      	adds	r0, #2
   1c472:	f7fa feef 	bl	17254 <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
   1c476:	4632      	mov	r2, r6
   1c478:	4639      	mov	r1, r7
   1c47a:	f105 0008 	add.w	r0, r5, #8
   1c47e:	f7fa fee9 	bl	17254 <memcpy>
	if (adv->is_enabled) {
   1c482:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   1c486:	07db      	lsls	r3, r3, #31
   1c488:	d407      	bmi.n	1c49a <ull_scan_rsp_set+0x68>
	pdu->last = idx;
   1c48a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1c48e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	return 0;
   1c492:	2000      	movs	r0, #0
}
   1c494:	b002      	add	sp, #8
   1c496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   1c49a:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   1c49e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   1c4a2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
		if ((pdu_adv_scan->type == PDU_ADV_TYPE_ADV_IND) ||
   1c4a4:	780b      	ldrb	r3, [r1, #0]
   1c4a6:	f013 030f 	ands.w	r3, r3, #15
   1c4aa:	d001      	beq.n	1c4b0 <ull_scan_rsp_set+0x7e>
   1c4ac:	2b06      	cmp	r3, #6
   1c4ae:	d1ec      	bne.n	1c48a <ull_scan_rsp_set+0x58>
			err = ull_adv_time_update(adv, pdu_adv_scan, pdu);
   1c4b0:	462a      	mov	r2, r5
   1c4b2:	4620      	mov	r0, r4
   1c4b4:	f7e4 fe88 	bl	11c8 <ull_adv_time_update>
			if (err) {
   1c4b8:	2800      	cmp	r0, #0
   1c4ba:	d0e6      	beq.n	1c48a <ull_scan_rsp_set+0x58>
   1c4bc:	e7ea      	b.n	1c494 <ull_scan_rsp_set+0x62>
		return BT_HCI_ERR_INVALID_PARAM;
   1c4be:	2012      	movs	r0, #18
   1c4c0:	e7e8      	b.n	1c494 <ull_scan_rsp_set+0x62>

0001c4c2 <ull_scan_init>:
}
   1c4c2:	2000      	movs	r0, #0
   1c4c4:	4770      	bx	lr

0001c4c6 <disable.constprop.0>:
	ll_rx_put(rx_hdr->link, rx_hdr);
	ll_rx_sched();
}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

static uint8_t disable(uint8_t handle)
   1c4c6:	b510      	push	{r4, lr}
{
	struct ll_scan_set *scan;
	uint8_t ret;

	scan = ull_scan_is_enabled_get(handle);
   1c4c8:	2000      	movs	r0, #0
   1c4ca:	f7f1 fec3 	bl	e254 <ull_scan_is_enabled_get>
	if (!scan) {
   1c4ce:	4604      	mov	r4, r0
   1c4d0:	b158      	cbz	r0, 1c4ea <disable.constprop.0+0x24>
	if (scan->lll.conn) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}
#endif

	ret = ull_scan_disable(handle, scan);
   1c4d2:	4601      	mov	r1, r0
   1c4d4:	2000      	movs	r0, #0
   1c4d6:	f7f1 fe93 	bl	e200 <ull_scan_disable>
	if (ret) {
   1c4da:	b928      	cbnz	r0, 1c4e8 <disable.constprop.0+0x22>
		return ret;
	}

	scan->is_enabled = 0U;
   1c4dc:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   1c4e0:	f360 0300 	bfi	r3, r0, #0, #1
   1c4e4:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		ull_filter_adv_scan_state_cb(0);
	}
#endif

	return 0;
}
   1c4e8:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1c4ea:	200c      	movs	r0, #12
   1c4ec:	e7fc      	b.n	1c4e8 <disable.constprop.0+0x22>

0001c4ee <ull_scan_reset>:
{
   1c4ee:	b508      	push	{r3, lr}
		(void)disable(handle);
   1c4f0:	f7ff ffe9 	bl	1c4c6 <disable.constprop.0>
}
   1c4f4:	2000      	movs	r0, #0
   1c4f6:	bd08      	pop	{r3, pc}

0001c4f8 <ll_scan_enable>:
{
   1c4f8:	b510      	push	{r4, lr}
	if (!enable) {
   1c4fa:	b918      	cbnz	r0, 1c504 <ll_scan_enable+0xc>
}
   1c4fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = disable(SCAN_HANDLE_1M);
   1c500:	f7ff bfe1 	b.w	1c4c6 <disable.constprop.0>
	scan = ull_scan_is_disabled_get(SCAN_HANDLE_1M);
   1c504:	2000      	movs	r0, #0
   1c506:	f7f1 feb3 	bl	e270 <ull_scan_is_disabled_get>
	if (!scan) {
   1c50a:	4604      	mov	r4, r0
   1c50c:	b190      	cbz	r0, 1c534 <ll_scan_enable+0x3c>
	    (!is_coded_phy && (scan->own_addr_type & 0x1))) {
   1c50e:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
   1c512:	079b      	lsls	r3, r3, #30
   1c514:	d404      	bmi.n	1c520 <ll_scan_enable+0x28>
		err = ull_scan_enable(scan);
   1c516:	4620      	mov	r0, r4
}
   1c518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = ull_scan_enable(scan);
   1c51c:	f7e4 beac 	b.w	1278 <ull_scan_enable>
		if (!mem_nz(ll_addr_get(BT_ADDR_LE_RANDOM), BDADDR_SIZE)) {
   1c520:	2001      	movs	r0, #1
   1c522:	f7ef fb35 	bl	bb90 <ll_addr_get>
   1c526:	2106      	movs	r1, #6
   1c528:	f7ff fb18 	bl	1bb5c <mem_nz>
   1c52c:	2800      	cmp	r0, #0
   1c52e:	d1f2      	bne.n	1c516 <ll_scan_enable+0x1e>
			return BT_HCI_ERR_INVALID_PARAM;
   1c530:	2012      	movs	r0, #18
}
   1c532:	bd10      	pop	{r4, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   1c534:	200c      	movs	r0, #12
   1c536:	e7fc      	b.n	1c532 <ll_scan_enable+0x3a>

0001c538 <ull_scan_is_enabled>:
{
   1c538:	b508      	push	{r3, lr}
	scan = ull_scan_is_enabled_get(handle);
   1c53a:	f7f1 fe8b 	bl	e254 <ull_scan_is_enabled_get>
	if (!scan) {
   1c53e:	b148      	cbz	r0, 1c554 <ull_scan_is_enabled+0x1c>
	return (((uint32_t)scan->is_enabled << scan->lll.type) |
   1c540:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
   1c544:	f890 0020 	ldrb.w	r0, [r0, #32]
   1c548:	f003 0301 	and.w	r3, r3, #1
   1c54c:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1c550:	fa03 f000 	lsl.w	r0, r3, r0
}
   1c554:	bd08      	pop	{r3, pc}

0001c556 <ull_scan_filter_pol_get>:
{
   1c556:	b508      	push	{r3, lr}
	scan = ull_scan_is_enabled_get(handle);
   1c558:	f7f1 fe7c 	bl	e254 <ull_scan_is_enabled_get>
	if (!scan) {
   1c55c:	b118      	cbz	r0, 1c566 <ull_scan_filter_pol_get+0x10>
	return scan->lll.filter_policy;
   1c55e:	f890 0020 	ldrb.w	r0, [r0, #32]
   1c562:	f3c0 00c1 	ubfx	r0, r0, #3, #2
}
   1c566:	bd08      	pop	{r3, pc}

0001c568 <sys_put_le64>:
	dst[1] = val >> 8;
   1c568:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   1c56c:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   1c56e:	7053      	strb	r3, [r2, #1]
	sys_put_le16(val >> 16, &dst[2]);
   1c570:	0c00      	lsrs	r0, r0, #16
	dst[1] = val >> 8;
   1c572:	f3c1 2307 	ubfx	r3, r1, #8, #8
	dst[0] = val;
   1c576:	7111      	strb	r1, [r2, #4]
	sys_put_le16(val >> 16, &dst[2]);
   1c578:	0c09      	lsrs	r1, r1, #16
	dst[0] = val;
   1c57a:	7090      	strb	r0, [r2, #2]
   1c57c:	7191      	strb	r1, [r2, #6]
	dst[1] = val >> 8;
   1c57e:	0a00      	lsrs	r0, r0, #8
   1c580:	0a09      	lsrs	r1, r1, #8
   1c582:	70d0      	strb	r0, [r2, #3]
   1c584:	7153      	strb	r3, [r2, #5]
   1c586:	71d1      	strb	r1, [r2, #7]
}
   1c588:	4770      	bx	lr

0001c58a <ctrl_tx_enqueue>:
		if (!conn->tx_ctrl) {
   1c58a:	e9d0 3247 	ldrd	r3, r2, [r0, #284]	; 0x11c
{
   1c58e:	b510      	push	{r4, lr}
	if (
   1c590:	b18b      	cbz	r3, 1c5b6 <ctrl_tx_enqueue+0x2c>
		if (conn->tx_head == conn->tx_data) {
   1c592:	f8d0 4128 	ldr.w	r4, [r0, #296]	; 0x128
   1c596:	42a3      	cmp	r3, r4
			conn->tx_data = conn->tx_data->next;
   1c598:	bf04      	itt	eq
   1c59a:	681c      	ldreq	r4, [r3, #0]
   1c59c:	f8c0 4128 	streq.w	r4, [r0, #296]	; 0x128
		if (!conn->tx_ctrl) {
   1c5a0:	b992      	cbnz	r2, 1c5c8 <ctrl_tx_enqueue+0x3e>
			tx->next = conn->tx_head->next;
   1c5a2:	681a      	ldr	r2, [r3, #0]
   1c5a4:	600a      	str	r2, [r1, #0]
			conn->tx_head->next = tx;
   1c5a6:	6019      	str	r1, [r3, #0]
				conn->tx_ctrl = tx;
   1c5a8:	f8c0 1120 	str.w	r1, [r0, #288]	; 0x120
	if (!tx->next) {
   1c5ac:	680b      	ldr	r3, [r1, #0]
	conn->tx_ctrl_last = tx;
   1c5ae:	f8c0 1124 	str.w	r1, [r0, #292]	; 0x124
	if (!tx->next) {
   1c5b2:	b133      	cbz	r3, 1c5c2 <ctrl_tx_enqueue+0x38>
}
   1c5b4:	bd10      	pop	{r4, pc}
		if (!conn->tx_ctrl) {
   1c5b6:	b93a      	cbnz	r2, 1c5c8 <ctrl_tx_enqueue+0x3e>
			tx->next = conn->tx_head;
   1c5b8:	600a      	str	r2, [r1, #0]
				conn->tx_ctrl = tx;
   1c5ba:	e9c0 1147 	strd	r1, r1, [r0, #284]	; 0x11c
				conn->tx_ctrl_last = tx;
   1c5be:	f8c0 1124 	str.w	r1, [r0, #292]	; 0x124
		conn->tx_data_last = tx;
   1c5c2:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
}
   1c5c6:	e7f5      	b.n	1c5b4 <ctrl_tx_enqueue+0x2a>
	tx->next = conn->tx_ctrl_last->next;
   1c5c8:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
   1c5cc:	681a      	ldr	r2, [r3, #0]
   1c5ce:	600a      	str	r2, [r1, #0]
	conn->tx_ctrl_last->next = tx;
   1c5d0:	6019      	str	r1, [r3, #0]
   1c5d2:	e7eb      	b.n	1c5ac <ctrl_tx_enqueue+0x22>

0001c5d4 <reject_ext_ind_send.constprop.0>:
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
   1c5d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1c5d6:	4616      	mov	r6, r2
	tx = ctrl_tx_rsp_mem_acquire(conn, rx, &err);
   1c5d8:	aa01      	add	r2, sp, #4
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
   1c5da:	460c      	mov	r4, r1
   1c5dc:	4605      	mov	r5, r0
	tx = ctrl_tx_rsp_mem_acquire(conn, rx, &err);
   1c5de:	f7f1 fe5b 	bl	e298 <ctrl_tx_rsp_mem_acquire>
	if (!tx) {
   1c5e2:	4601      	mov	r1, r0
   1c5e4:	b910      	cbnz	r0, 1c5ec <reject_ext_ind_send.constprop.0+0x18>
		return err;
   1c5e6:	9801      	ldr	r0, [sp, #4]
}
   1c5e8:	b002      	add	sp, #8
   1c5ea:	bd70      	pop	{r4, r5, r6, pc}
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1c5ec:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
   1c5ee:	7246      	strb	r6, [r0, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1c5f0:	f043 0303 	orr.w	r3, r3, #3
   1c5f4:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   1c5f6:	2303      	movs	r3, #3
   1c5f8:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   1c5fa:	2311      	movs	r3, #17
   1c5fc:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
   1c5fe:	230f      	movs	r3, #15
   1c600:	7203      	strb	r3, [r0, #8]
	ctrl_tx_enqueue(conn, tx);
   1c602:	4628      	mov	r0, r5
   1c604:	f7ff ffc1 	bl	1c58a <ctrl_tx_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1c608:	2301      	movs	r3, #1
   1c60a:	7123      	strb	r3, [r4, #4]
	return 0;
   1c60c:	2000      	movs	r0, #0
   1c60e:	e7eb      	b.n	1c5e8 <reject_ext_ind_send.constprop.0+0x14>

0001c610 <ll_connected_get>:
{
   1c610:	b508      	push	{r3, lr}
	if (handle >= CONFIG_BT_MAX_CONN) {
   1c612:	b918      	cbnz	r0, 1c61c <ll_connected_get+0xc>
	conn = ll_conn_get(handle);
   1c614:	f7f2 f83a 	bl	e68c <ll_conn_get>
	if (conn->lll.handle != handle) {
   1c618:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   1c61a:	b103      	cbz	r3, 1c61e <ll_connected_get+0xe>
		return NULL;
   1c61c:	2000      	movs	r0, #0
}
   1c61e:	bd08      	pop	{r3, pc}

0001c620 <ll_conn_update>:
{
   1c620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c624:	4605      	mov	r5, r0
   1c626:	f8bd a020 	ldrh.w	sl, [sp, #32]
   1c62a:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
   1c62e:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
   1c632:	460c      	mov	r4, r1
   1c634:	4617      	mov	r7, r2
   1c636:	461e      	mov	r6, r3
	conn = ll_connected_get(handle);
   1c638:	f7ff ffea 	bl	1c610 <ll_connected_get>
	if (!conn) {
   1c63c:	2800      	cmp	r0, #0
   1c63e:	d06e      	beq.n	1c71e <ll_conn_update+0xfe>
	if (!cmd) {
   1c640:	bb84      	cbnz	r4, 1c6a4 <ll_conn_update+0x84>
		if (!conn->llcp_conn_param.disabled &&
   1c642:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
   1c646:	069a      	lsls	r2, r3, #26
   1c648:	d408      	bmi.n	1c65c <ll_conn_update+0x3c>
		    (!conn->common.fex_valid ||
   1c64a:	f890 107c 	ldrb.w	r1, [r0, #124]	; 0x7c
		if (!conn->llcp_conn_param.disabled &&
   1c64e:	f011 0101 	ands.w	r1, r1, #1
   1c652:	d045      	beq.n	1c6e0 <ll_conn_update+0xc0>
		     (conn->llcp_feature.features_conn &
   1c654:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
		    (!conn->common.fex_valid ||
   1c658:	079b      	lsls	r3, r3, #30
   1c65a:	d424      	bmi.n	1c6a6 <ll_conn_update+0x86>
		} else if (conn->lll.role) {
   1c65c:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   1c660:	2b00      	cmp	r3, #0
   1c662:	db5e      	blt.n	1c722 <ll_conn_update+0x102>
		if (conn->llcp_cu.req != conn->llcp_cu.ack) {
   1c664:	f890 309c 	ldrb.w	r3, [r0, #156]	; 0x9c
   1c668:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
   1c66c:	429a      	cmp	r2, r3
   1c66e:	d15a      	bne.n	1c726 <ll_conn_update+0x106>
		conn->llcp_cu.win_size = 1U;
   1c670:	2301      	movs	r3, #1
   1c672:	f880 30ac 	strb.w	r3, [r0, #172]	; 0xac
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1c676:	f890 309e 	ldrb.w	r3, [r0, #158]	; 0x9e
		conn->llcp_cu.interval = interval_max;
   1c67a:	f8a0 a0a0 	strh.w	sl, [r0, #160]	; 0xa0
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1c67e:	f023 030f 	bic.w	r3, r3, #15
		conn->llcp_cu.win_offset_us = 0U;
   1c682:	2400      	movs	r4, #0
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1c684:	f043 0309 	orr.w	r3, r3, #9
		conn->llcp_cu.req++;
   1c688:	3201      	adds	r2, #1
		conn->llcp_cu.win_offset_us = 0U;
   1c68a:	f8c0 40a8 	str.w	r4, [r0, #168]	; 0xa8
		conn->llcp_cu.latency = latency;
   1c68e:	f8a0 90a2 	strh.w	r9, [r0, #162]	; 0xa2
		conn->llcp_cu.timeout = timeout;
   1c692:	f8a0 80a4 	strh.w	r8, [r0, #164]	; 0xa4
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1c696:	f880 309e 	strb.w	r3, [r0, #158]	; 0x9e
		conn->llcp_cu.req++;
   1c69a:	f880 209c 	strb.w	r2, [r0, #156]	; 0x9c
}
   1c69e:	4620      	mov	r0, r4
   1c6a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c6a4:	4621      	mov	r1, r4
		cmd--;
   1c6a6:	1e4c      	subs	r4, r1, #1
		if (cmd) {
   1c6a8:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
			if ((conn->llcp_conn_param.req ==
   1c6ac:	f890 30f4 	ldrb.w	r3, [r0, #244]	; 0xf4
			     conn->llcp_conn_param.ack) ||
   1c6b0:	f890 20f5 	ldrb.w	r2, [r0, #245]	; 0xf5
		if (cmd) {
   1c6b4:	d016      	beq.n	1c6e4 <ll_conn_update+0xc4>
			if ((conn->llcp_conn_param.req ==
   1c6b6:	4293      	cmp	r3, r2
   1c6b8:	d035      	beq.n	1c726 <ll_conn_update+0x106>
			    (conn->llcp_conn_param.state !=
   1c6ba:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
			     conn->llcp_conn_param.ack) ||
   1c6be:	f003 020f 	and.w	r2, r3, #15
   1c6c2:	2a03      	cmp	r2, #3
   1c6c4:	d12f      	bne.n	1c726 <ll_conn_update+0x106>
			conn->llcp_conn_param.state = cmd;
   1c6c6:	f004 040f 	and.w	r4, r4, #15
   1c6ca:	f044 0410 	orr.w	r4, r4, #16
   1c6ce:	f023 031f 	bic.w	r3, r3, #31
   1c6d2:	431c      	orrs	r4, r3
   1c6d4:	f880 40f6 	strb.w	r4, [r0, #246]	; 0xf6
			conn->llcp_conn_param.status = status;
   1c6d8:	f880 70f7 	strb.w	r7, [r0, #247]	; 0xf7
	return 0;
   1c6dc:	2400      	movs	r4, #0
   1c6de:	e7de      	b.n	1c69e <ll_conn_update+0x7e>
			cmd++;
   1c6e0:	2101      	movs	r1, #1
   1c6e2:	e7e0      	b.n	1c6a6 <ll_conn_update+0x86>
			if (conn->llcp_conn_param.req !=
   1c6e4:	4293      	cmp	r3, r2
   1c6e6:	d11e      	bne.n	1c726 <ll_conn_update+0x106>
			conn->llcp_conn_param.state = cmd;
   1c6e8:	f8b0 20f6 	ldrh.w	r2, [r0, #246]	; 0xf6
			conn->llcp_conn_param.interval_min = interval_min;
   1c6ec:	f8a0 60f8 	strh.w	r6, [r0, #248]	; 0xf8
			conn->llcp_conn_param.req++;
   1c6f0:	3301      	adds	r3, #1
   1c6f2:	f880 30f4 	strb.w	r3, [r0, #244]	; 0xf4
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1c6f6:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
			conn->llcp_conn_param.interval_max = interval_max;
   1c6fa:	f8a0 a0fa 	strh.w	sl, [r0, #250]	; 0xfa
			conn->llcp_conn_param.state = cmd;
   1c6fe:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
   1c702:	f042 0210 	orr.w	r2, r2, #16
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1c706:	2b00      	cmp	r3, #0
			conn->llcp_conn_param.latency = latency;
   1c708:	f8a0 90fc 	strh.w	r9, [r0, #252]	; 0xfc
			conn->llcp_conn_param.timeout = timeout;
   1c70c:	f8a0 80fe 	strh.w	r8, [r0, #254]	; 0xfe
			conn->llcp_conn_param.state = cmd;
   1c710:	f8a0 20f6 	strh.w	r2, [r0, #246]	; 0xf6
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1c714:	dac3      	bge.n	1c69e <ll_conn_update+0x7e>
				ull_periph_latency_cancel(conn, handle);
   1c716:	4629      	mov	r1, r5
   1c718:	f7f3 f85e 	bl	f7d8 <ull_periph_latency_cancel>
   1c71c:	e7bf      	b.n	1c69e <ll_conn_update+0x7e>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1c71e:	2402      	movs	r4, #2
   1c720:	e7bd      	b.n	1c69e <ll_conn_update+0x7e>
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   1c722:	241a      	movs	r4, #26
   1c724:	e7bb      	b.n	1c69e <ll_conn_update+0x7e>
			return BT_HCI_ERR_CMD_DISALLOWED;
   1c726:	240c      	movs	r4, #12
   1c728:	e7b9      	b.n	1c69e <ll_conn_update+0x7e>

0001c72a <ll_chm_get>:
{
   1c72a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c72c:	460d      	mov	r5, r1
	conn = ll_connected_get(handle);
   1c72e:	f7ff ff6f 	bl	1c610 <ll_connected_get>
	if (!conn) {
   1c732:	4604      	mov	r4, r0
   1c734:	b170      	cbz	r0, 1c754 <ll_chm_get+0x2a>
		conn->chm_updated = 0U;
   1c736:	2700      	movs	r7, #0
		memcpy(chm, conn->lll.data_chan_map,
   1c738:	f100 0634 	add.w	r6, r0, #52	; 0x34
		conn->chm_updated = 0U;
   1c73c:	f884 7130 	strb.w	r7, [r4, #304]	; 0x130
		memcpy(chm, conn->lll.data_chan_map,
   1c740:	2205      	movs	r2, #5
   1c742:	4631      	mov	r1, r6
   1c744:	4628      	mov	r0, r5
   1c746:	f7fa fd85 	bl	17254 <memcpy>
	} while (conn->chm_updated);
   1c74a:	f894 0130 	ldrb.w	r0, [r4, #304]	; 0x130
   1c74e:	2800      	cmp	r0, #0
   1c750:	d1f4      	bne.n	1c73c <ll_chm_get+0x12>
}
   1c752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1c754:	2002      	movs	r0, #2
   1c756:	e7fc      	b.n	1c752 <ll_chm_get+0x28>

0001c758 <ll_feature_req_send>:
{
   1c758:	b510      	push	{r4, lr}
   1c75a:	4604      	mov	r4, r0
	conn = ll_connected_get(handle);
   1c75c:	f7ff ff58 	bl	1c610 <ll_connected_get>
	if (!conn) {
   1c760:	b188      	cbz	r0, 1c786 <ll_feature_req_send+0x2e>
	if (conn->llcp_feature.req != conn->llcp_feature.ack) {
   1c762:	f890 10b0 	ldrb.w	r1, [r0, #176]	; 0xb0
   1c766:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
   1c76a:	428a      	cmp	r2, r1
   1c76c:	d10d      	bne.n	1c78a <ll_feature_req_send+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1c76e:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
	conn->llcp_feature.req++;
   1c772:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1c774:	2b00      	cmp	r3, #0
	conn->llcp_feature.req++;
   1c776:	f880 20b0 	strb.w	r2, [r0, #176]	; 0xb0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1c77a:	da02      	bge.n	1c782 <ll_feature_req_send+0x2a>
		ull_periph_latency_cancel(conn, handle);
   1c77c:	4621      	mov	r1, r4
   1c77e:	f7f3 f82b 	bl	f7d8 <ull_periph_latency_cancel>
	return 0;
   1c782:	2000      	movs	r0, #0
   1c784:	e000      	b.n	1c788 <ll_feature_req_send+0x30>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1c786:	2002      	movs	r0, #2
}
   1c788:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1c78a:	200c      	movs	r0, #12
   1c78c:	e7fc      	b.n	1c788 <ll_feature_req_send+0x30>

0001c78e <ll_version_ind_send>:
{
   1c78e:	b510      	push	{r4, lr}
   1c790:	4604      	mov	r4, r0
	conn = ll_connected_get(handle);
   1c792:	f7ff ff3d 	bl	1c610 <ll_connected_get>
	if (!conn) {
   1c796:	b188      	cbz	r0, 1c7bc <ll_version_ind_send+0x2e>
	if (conn->llcp_version.req != conn->llcp_version.ack) {
   1c798:	f890 10c8 	ldrb.w	r1, [r0, #200]	; 0xc8
   1c79c:	f890 20c9 	ldrb.w	r2, [r0, #201]	; 0xc9
   1c7a0:	428a      	cmp	r2, r1
   1c7a2:	d10d      	bne.n	1c7c0 <ll_version_ind_send+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1c7a4:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
	conn->llcp_version.req++;
   1c7a8:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1c7aa:	2b00      	cmp	r3, #0
	conn->llcp_version.req++;
   1c7ac:	f880 20c8 	strb.w	r2, [r0, #200]	; 0xc8
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1c7b0:	da02      	bge.n	1c7b8 <ll_version_ind_send+0x2a>
		ull_periph_latency_cancel(conn, handle);
   1c7b2:	4621      	mov	r1, r4
   1c7b4:	f7f3 f810 	bl	f7d8 <ull_periph_latency_cancel>
	return 0;
   1c7b8:	2000      	movs	r0, #0
   1c7ba:	e000      	b.n	1c7be <ll_version_ind_send+0x30>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1c7bc:	2002      	movs	r0, #2
}
   1c7be:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1c7c0:	200c      	movs	r0, #12
   1c7c2:	e7fc      	b.n	1c7be <ll_version_ind_send+0x30>

0001c7c4 <ull_conn_init>:
	err = init_reset();
   1c7c4:	f7f1 bd86 	b.w	e2d4 <init_reset>

0001c7c8 <tx_demux>:
{
   1c7c8:	b510      	push	{r4, lr}
   1c7ca:	4604      	mov	r4, r0
	ull_conn_tx_demux(1);
   1c7cc:	2001      	movs	r0, #1
   1c7ce:	f7f2 fc79 	bl	f0c4 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(param, 1);
   1c7d2:	4620      	mov	r0, r4
   1c7d4:	2101      	movs	r1, #1
}
   1c7d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ull_conn_tx_lll_enqueue(param, 1);
   1c7da:	f7f2 be1d 	b.w	f418 <ull_conn_tx_lll_enqueue>

0001c7de <ull_conn_lll_max_tx_octets_get>:
}
   1c7de:	201b      	movs	r0, #27
   1c7e0:	4770      	bx	lr

0001c7e2 <lll_chan_sel_1>:
/* Refer to Bluetooth Specification v5.2 Vol 6, Part B, Section 4.5.8.2
 * Channel Selection algorithm #1
 */
uint8_t lll_chan_sel_1(uint8_t *chan_use, uint8_t hop, uint16_t latency, uint8_t *chan_map,
		    uint8_t chan_count)
{
   1c7e2:	b530      	push	{r4, r5, lr}
	uint8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   1c7e4:	fb02 1101 	mla	r1, r2, r1, r1
   1c7e8:	7802      	ldrb	r2, [r0, #0]
{
   1c7ea:	f89d 500c 	ldrb.w	r5, [sp, #12]
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   1c7ee:	4411      	add	r1, r2
   1c7f0:	2225      	movs	r2, #37	; 0x25
{
   1c7f2:	4604      	mov	r4, r0
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   1c7f4:	fbb1 f0f2 	udiv	r0, r1, r2
   1c7f8:	fb02 1110 	mls	r1, r2, r0, r1
   1c7fc:	b2c8      	uxtb	r0, r1
	*chan_use = chan_next;

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   1c7fe:	08c2      	lsrs	r2, r0, #3
	*chan_use = chan_next;
   1c800:	7020      	strb	r0, [r4, #0]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   1c802:	5c9c      	ldrb	r4, [r3, r2]
   1c804:	f001 0107 	and.w	r1, r1, #7
   1c808:	fa44 f101 	asr.w	r1, r4, r1
   1c80c:	f011 0101 	ands.w	r1, r1, #1
   1c810:	d109      	bne.n	1c826 <lll_chan_sel_1+0x44>
		uint8_t chan_index;

		chan_index = chan_next % chan_count;
   1c812:	fbb0 f2f5 	udiv	r2, r0, r5
   1c816:	fb05 0212 	mls	r2, r5, r2, r0
   1c81a:	1e5c      	subs	r4, r3, #1
   1c81c:	b2d2      	uxtb	r2, r2
	uint8_t chan_next;
	uint8_t byte_count;

	chan_next = 0U;
	byte_count = 5U;
	while (byte_count--) {
   1c81e:	3304      	adds	r3, #4
	chan_next = 0U;
   1c820:	4608      	mov	r0, r1
	while (byte_count--) {
   1c822:	42a3      	cmp	r3, r4
   1c824:	d100      	bne.n	1c828 <lll_chan_sel_1+0x46>
}
   1c826:	bd30      	pop	{r4, r5, pc}
		uint8_t bite;
		uint8_t bit_count;

		bite = *chan_map;
   1c828:	f100 0108 	add.w	r1, r0, #8
   1c82c:	f814 5f01 	ldrb.w	r5, [r4, #1]!
		bit_count = 8U;
		while (bit_count--) {
   1c830:	b2c9      	uxtb	r1, r1
   1c832:	4288      	cmp	r0, r1
   1c834:	d0f5      	beq.n	1c822 <lll_chan_sel_1+0x40>
			if (bite & 0x01) {
   1c836:	f015 0f01 	tst.w	r5, #1
   1c83a:	d003      	beq.n	1c844 <lll_chan_sel_1+0x62>
				if (chan_index == 0U) {
   1c83c:	2a00      	cmp	r2, #0
   1c83e:	d0f2      	beq.n	1c826 <lll_chan_sel_1+0x44>
					break;
				}
				chan_index--;
   1c840:	3a01      	subs	r2, #1
   1c842:	b2d2      	uxtb	r2, r2
			}
			chan_next++;
   1c844:	3001      	adds	r0, #1
   1c846:	b2c0      	uxtb	r0, r0
			bite >>= 1;
   1c848:	086d      	lsrs	r5, r5, #1
   1c84a:	e7f2      	b.n	1c832 <lll_chan_sel_1+0x50>

0001c84c <filter_find.part.0>:
static uint32_t filter_find(const struct lll_filter *const filter,
   1c84c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c850:	4605      	mov	r5, r0
   1c852:	460f      	mov	r7, r1
   1c854:	4690      	mov	r8, r2
   1c856:	f100 062c 	add.w	r6, r0, #44	; 0x2c
	index = FAL_SIZE;
   1c85a:	2408      	movs	r4, #8
	while (index--) {
   1c85c:	3c01      	subs	r4, #1
   1c85e:	d202      	bcs.n	1c866 <filter_find.part.0+0x1a>
	return FILTER_IDX_NONE;
   1c860:	f04f 09ff 	mov.w	r9, #255	; 0xff
   1c864:	e012      	b.n	1c88c <filter_find.part.0+0x40>
		if ((filter->enable_bitmask & BIT(index)) &&
   1c866:	782b      	ldrb	r3, [r5, #0]
   1c868:	40e3      	lsrs	r3, r4
   1c86a:	07da      	lsls	r2, r3, #31
   1c86c:	d401      	bmi.n	1c872 <filter_find.part.0+0x26>
   1c86e:	3e06      	subs	r6, #6
   1c870:	e7f4      	b.n	1c85c <filter_find.part.0+0x10>
		    (((filter->addr_type_bitmask >> index) & 0x01) ==
   1c872:	786b      	ldrb	r3, [r5, #1]
   1c874:	4123      	asrs	r3, r4
   1c876:	407b      	eors	r3, r7
		if ((filter->enable_bitmask & BIT(index)) &&
   1c878:	07db      	lsls	r3, r3, #31
   1c87a:	d4f8      	bmi.n	1c86e <filter_find.part.0+0x22>
		    !memcmp(filter->bdaddr[index], bdaddr, BDADDR_SIZE)) {
   1c87c:	2206      	movs	r2, #6
   1c87e:	4641      	mov	r1, r8
   1c880:	4630      	mov	r0, r6
   1c882:	46a1      	mov	r9, r4
   1c884:	f7fa fcd5 	bl	17232 <memcmp>
		     (addr_type & 0x01)) &&
   1c888:	2800      	cmp	r0, #0
   1c88a:	d1f0      	bne.n	1c86e <filter_find.part.0+0x22>
}
   1c88c:	4648      	mov	r0, r9
   1c88e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001c892 <ll_fal_size_get>:
}
   1c892:	2008      	movs	r0, #8
   1c894:	4770      	bx	lr

0001c896 <swi_lll_nrf5_isr>:
	mayfly_run(TICKER_USER_ID_LLL);
   1c896:	2000      	movs	r0, #0
   1c898:	f7ee bbac 	b.w	aff4 <mayfly_run>

0001c89c <isr_race>:
	radio_status_reset();
   1c89c:	f7f5 b8ca 	b.w	11a34 <radio_status_reset>

0001c8a0 <radio_nrf5_isr>:
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   1c8a0:	4668      	mov	r0, sp
   1c8a2:	f020 0107 	bic.w	r1, r0, #7
   1c8a6:	468d      	mov	sp, r1
   1c8a8:	b501      	push	{r0, lr}
	isr_radio();
   1c8aa:	f7f4 ffd9 	bl	11860 <isr_radio>
	ISR_DIRECT_PM();
   1c8ae:	f7e7 fa1f 	bl	3cf0 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   1c8b2:	f7e7 fb0f 	bl	3ed4 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   1c8b6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1c8ba:	4685      	mov	sp, r0
   1c8bc:	4770      	bx	lr

0001c8be <lll_rand_isr_get>:
   1c8be:	f7f3 ba8b 	b.w	fdd8 <lll_csrand_isr_get>

0001c8c2 <lll_reset>:
}
   1c8c2:	2000      	movs	r0, #0
   1c8c4:	4770      	bx	lr

0001c8c6 <lll_prepare_done>:
}
   1c8c6:	2000      	movs	r0, #0
   1c8c8:	4770      	bx	lr

0001c8ca <lll_is_abort_cb>:
}
   1c8ca:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   1c8ce:	4770      	bx	lr

0001c8d0 <lll_event_offset_get>:
{
   1c8d0:	4603      	mov	r3, r0
		return MAX(ull->ticks_active_to_start,
   1c8d2:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
	} else if (ull->ticks_prepare_to_start & XON_BITMASK) {
   1c8d6:	2a00      	cmp	r2, #0
   1c8d8:	da04      	bge.n	1c8e4 <lll_event_offset_get+0x14>
		return MAX(ull->ticks_active_to_start,
   1c8da:	68db      	ldr	r3, [r3, #12]
   1c8dc:	4298      	cmp	r0, r3
   1c8de:	bf38      	it	cc
   1c8e0:	4618      	movcc	r0, r3
   1c8e2:	4770      	bx	lr
		return MAX(ull->ticks_active_to_start,
   1c8e4:	4290      	cmp	r0, r2
   1c8e6:	bf38      	it	cc
   1c8e8:	4610      	movcc	r0, r2
}
   1c8ea:	4770      	bx	lr

0001c8ec <lll_preempt_calc>:
{
   1c8ec:	b510      	push	{r4, lr}
   1c8ee:	4614      	mov	r4, r2
	ticks_now = ticker_ticks_now_get();
   1c8f0:	f7ff fc13 	bl	1c11a <ticker_ticks_now_get>
	diff = ticks_now - ticks_at_event;
   1c8f4:	1b00      	subs	r0, r0, r4
	if (diff & BIT(HAL_TICKER_CNTR_MSBIT)) {
   1c8f6:	0203      	lsls	r3, r0, #8
   1c8f8:	d405      	bmi.n	1c906 <lll_preempt_calc+0x1a>
	diff += HAL_TICKER_CNTR_CMP_OFFSET_MIN;
   1c8fa:	3003      	adds	r0, #3
	if (diff > HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US)) {
   1c8fc:	2809      	cmp	r0, #9
   1c8fe:	bf94      	ite	ls
   1c900:	2000      	movls	r0, #0
   1c902:	2001      	movhi	r0, #1
}
   1c904:	bd10      	pop	{r4, pc}
		return 0;
   1c906:	2000      	movs	r0, #0
   1c908:	e7fc      	b.n	1c904 <lll_preempt_calc+0x18>

0001c90a <lll_radio_rx_ready_delay_get>:
	return radio_rx_ready_delay_get(phy, flags);
   1c90a:	f000 ba2f 	b.w	1cd6c <radio_rx_ready_delay_get>

0001c90e <lll_isr_tx_status_reset>:
{
   1c90e:	b508      	push	{r3, lr}
	radio_status_reset();
   1c910:	f7f5 f890 	bl	11a34 <radio_status_reset>
}
   1c914:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_status_reset();
   1c918:	f7f5 b9da 	b.w	11cd0 <radio_tmr_status_reset>

0001c91c <lll_isr_rx_status_reset>:
{
   1c91c:	b508      	push	{r3, lr}
	radio_status_reset();
   1c91e:	f7f5 f889 	bl	11a34 <radio_status_reset>
	radio_tmr_status_reset();
   1c922:	f7f5 f9d5 	bl	11cd0 <radio_tmr_status_reset>
}
   1c926:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   1c92a:	f7f5 b981 	b.w	11c30 <radio_rssi_status_reset>

0001c92e <lll_isr_status_reset>:
{
   1c92e:	b508      	push	{r3, lr}
	radio_status_reset();
   1c930:	f7f5 f880 	bl	11a34 <radio_status_reset>
	radio_tmr_status_reset();
   1c934:	f7f5 f9cc 	bl	11cd0 <radio_tmr_status_reset>
	radio_filter_status_reset();
   1c938:	f7f5 f9b2 	bl	11ca0 <radio_filter_status_reset>
	radio_ar_status_reset();
   1c93c:	f7f5 facc 	bl	11ed8 <radio_ar_status_reset>
}
   1c940:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   1c944:	f7f5 b974 	b.w	11c30 <radio_rssi_status_reset>

0001c948 <lll_isr_abort>:
{
   1c948:	b510      	push	{r4, lr}
   1c94a:	4604      	mov	r4, r0
	lll_isr_status_reset();
   1c94c:	f7ff ffef 	bl	1c92e <lll_isr_status_reset>
	lll_isr_cleanup(param);
   1c950:	4620      	mov	r0, r4
}
   1c952:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   1c956:	f7f3 bb1d 	b.w	ff94 <lll_isr_cleanup>

0001c95a <clock_ready>:
   1c95a:	f101 0010 	add.w	r0, r1, #16
   1c95e:	f7f8 beab 	b.w	156b8 <z_impl_k_sem_give>

0001c962 <lll_clock_ppm_local_get>:
}
   1c962:	2032      	movs	r0, #50	; 0x32
   1c964:	4770      	bx	lr

0001c966 <isr_abort>:
{
   1c966:	b510      	push	{r4, lr}
   1c968:	4604      	mov	r4, r0
	lll_isr_status_reset();
   1c96a:	f7ff ffe0 	bl	1c92e <lll_isr_status_reset>
	radio_filter_disable();
   1c96e:	f7f5 f98d 	bl	11c8c <radio_filter_disable>
	lll_isr_cleanup(param);
   1c972:	4620      	mov	r0, r4
}
   1c974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   1c978:	f7f3 bb0c 	b.w	ff94 <lll_isr_cleanup>

0001c97c <lll_adv_reset>:
   1c97c:	f7f3 bd40 	b.w	10400 <lll_adv_init>

0001c980 <lll_adv_data_reset>:
{
   1c980:	4603      	mov	r3, r0
	pdu->first = 0U;
   1c982:	2000      	movs	r0, #0
   1c984:	7018      	strb	r0, [r3, #0]
	pdu->last = 0U;
   1c986:	7058      	strb	r0, [r3, #1]
	pdu->pdu[1] = NULL;
   1c988:	6098      	str	r0, [r3, #8]
}
   1c98a:	4770      	bx	lr

0001c98c <lll_adv_pdu_alloc>:
{
   1c98c:	b510      	push	{r4, lr}
	first = pdu->first;
   1c98e:	7804      	ldrb	r4, [r0, #0]
	last = pdu->last;
   1c990:	7843      	ldrb	r3, [r0, #1]
	if (first == last) {
   1c992:	429c      	cmp	r4, r3
	first = pdu->first;
   1c994:	b2e2      	uxtb	r2, r4
	if (first == last) {
   1c996:	d10d      	bne.n	1c9b4 <lll_adv_pdu_alloc+0x28>
		last++;
   1c998:	3301      	adds	r3, #1
   1c99a:	b2db      	uxtb	r3, r3
		if (last == DOUBLE_BUFFER_SIZE) {
   1c99c:	2b02      	cmp	r3, #2
   1c99e:	d100      	bne.n	1c9a2 <lll_adv_pdu_alloc+0x16>
			last = 0U;
   1c9a0:	2300      	movs	r3, #0
	*idx = last;
   1c9a2:	eb00 0483 	add.w	r4, r0, r3, lsl #2
   1c9a6:	700b      	strb	r3, [r1, #0]
	p = (void *)pdu->pdu[last];
   1c9a8:	6860      	ldr	r0, [r4, #4]
	if (p) {
   1c9aa:	b910      	cbnz	r0, 1c9b2 <lll_adv_pdu_alloc+0x26>
	p = lll_adv_pdu_alloc_pdu_adv();
   1c9ac:	f7f3 fd50 	bl	10450 <lll_adv_pdu_alloc_pdu_adv>
	pdu->pdu[last] = (void *)p;
   1c9b0:	6060      	str	r0, [r4, #4]
}
   1c9b2:	bd10      	pop	{r4, pc}
		pdu->last = first;
   1c9b4:	7042      	strb	r2, [r0, #1]
		first_latest = pdu->first;
   1c9b6:	7804      	ldrb	r4, [r0, #0]
		if (first_latest != first) {
   1c9b8:	42a2      	cmp	r2, r4
   1c9ba:	d0f2      	beq.n	1c9a2 <lll_adv_pdu_alloc+0x16>
			pdu->last = last;
   1c9bc:	7043      	strb	r3, [r0, #1]
			last++;
   1c9be:	e7eb      	b.n	1c998 <lll_adv_pdu_alloc+0xc>

0001c9c0 <isr_done>:
{
   1c9c0:	b510      	push	{r4, lr}
   1c9c2:	4604      	mov	r4, r0
	lll_isr_status_reset();
   1c9c4:	f7ff ffb3 	bl	1c92e <lll_isr_status_reset>
	if (!IS_ENABLED(CONFIG_BT_CTLR_LOW_LAT) && lll->is_hdcd &&
   1c9c8:	7a23      	ldrb	r3, [r4, #8]
   1c9ca:	f003 0271 	and.w	r2, r3, #113	; 0x71
   1c9ce:	2a01      	cmp	r2, #1
		lll->chan_map_curr = lll->chan_map;
   1c9d0:	bf02      	ittt	eq
   1c9d2:	f3c3 0242 	ubfxeq	r2, r3, #1, #3
   1c9d6:	f362 1306 	bfieq	r3, r2, #4, #3
   1c9da:	7223      	strbeq	r3, [r4, #8]
	if (lll->chan_map_curr &&
   1c9dc:	7a23      	ldrb	r3, [r4, #8]
   1c9de:	f013 0f70 	tst.w	r3, #112	; 0x70
   1c9e2:	d00e      	beq.n	1ca02 <isr_done+0x42>
	    (!lll->conn || !lll->conn->periph.cancelled) &&
   1c9e4:	6863      	ldr	r3, [r4, #4]
   1c9e6:	b11b      	cbz	r3, 1c9f0 <isr_done+0x30>
   1c9e8:	f893 3020 	ldrb.w	r3, [r3, #32]
   1c9ec:	079b      	lsls	r3, r3, #30
   1c9ee:	d408      	bmi.n	1ca02 <isr_done+0x42>
		pdu = chan_prepare(lll);
   1c9f0:	4620      	mov	r0, r4
   1c9f2:	f7f3 fdd7 	bl	105a4 <chan_prepare.isra.0>
		radio_tx_enable();
   1c9f6:	f7f5 f805 	bl	11a04 <radio_tx_enable>
}
   1c9fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_tmr_end_capture();
   1c9fe:	f7f5 ba51 	b.w	11ea4 <radio_tmr_end_capture>
	radio_filter_disable();
   1ca02:	f7f5 f943 	bl	11c8c <radio_filter_disable>
	lll_isr_cleanup(param);
   1ca06:	4620      	mov	r0, r4
}
   1ca08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   1ca0c:	f7f3 bac2 	b.w	ff94 <lll_isr_cleanup>

0001ca10 <resume_prepare_cb>:
	ull = HDR_LLL2ULL(p->param);
   1ca10:	68c3      	ldr	r3, [r0, #12]
{
   1ca12:	b570      	push	{r4, r5, r6, lr}
   1ca14:	4604      	mov	r4, r0
	ull = HDR_LLL2ULL(p->param);
   1ca16:	681e      	ldr	r6, [r3, #0]
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   1ca18:	f7ff fb7f 	bl	1c11a <ticker_ticks_now_get>
   1ca1c:	4605      	mov	r5, r0
   1ca1e:	4630      	mov	r0, r6
   1ca20:	f7ff ff56 	bl	1c8d0 <lll_event_offset_get>
	p->remainder = 0;
   1ca24:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   1ca26:	1a2d      	subs	r5, r5, r0
   1ca28:	6025      	str	r5, [r4, #0]
	p->remainder = 0;
   1ca2a:	6063      	str	r3, [r4, #4]
	p->lazy = 0;
   1ca2c:	8123      	strh	r3, [r4, #8]
	return prepare_cb(p);
   1ca2e:	4620      	mov	r0, r4
}
   1ca30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return prepare_cb(p);
   1ca34:	f7f3 be34 	b.w	106a0 <prepare_cb>

0001ca38 <lll_adv_scan_req_check>:
{
   1ca38:	b510      	push	{r4, lr}
	return (((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) == 0U) ||
   1ca3a:	7a40      	ldrb	r0, [r0, #9]
{
   1ca3c:	f89d 4008 	ldrb.w	r4, [sp, #8]
		 devmatch_ok) &&
   1ca40:	07c0      	lsls	r0, r0, #31
   1ca42:	d500      	bpl.n	1ca46 <lll_adv_scan_req_check+0xe>
	return (((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) == 0U) ||
   1ca44:	b174      	cbz	r4, 1ca64 <lll_adv_scan_req_check+0x2c>
}

static bool isr_rx_sr_adva_check(uint8_t tx_addr, uint8_t *addr,
				 struct pdu_adv *sr)
{
	return (tx_addr == sr->rx_addr) &&
   1ca46:	7808      	ldrb	r0, [r1, #0]
   1ca48:	ebb2 1fd0 	cmp.w	r2, r0, lsr #7
   1ca4c:	d108      	bne.n	1ca60 <lll_adv_scan_req_check+0x28>
		!memcmp(addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   1ca4e:	2206      	movs	r2, #6
   1ca50:	3108      	adds	r1, #8
   1ca52:	4618      	mov	r0, r3
   1ca54:	f7fa fbed 	bl	17232 <memcmp>
	return (tx_addr == sr->rx_addr) &&
   1ca58:	fab0 f080 	clz	r0, r0
   1ca5c:	0940      	lsrs	r0, r0, #5
}
   1ca5e:	bd10      	pop	{r4, pc}
	return (tx_addr == sr->rx_addr) &&
   1ca60:	2000      	movs	r0, #0
   1ca62:	e7fc      	b.n	1ca5e <lll_adv_scan_req_check+0x26>
		 devmatch_ok) &&
   1ca64:	4620      	mov	r0, r4
   1ca66:	e7fa      	b.n	1ca5e <lll_adv_scan_req_check+0x26>

0001ca68 <lll_adv_connect_ind_check>:
{
   1ca68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ca6a:	9f07      	ldr	r7, [sp, #28]
   1ca6c:	f89d 4020 	ldrb.w	r4, [sp, #32]
   1ca70:	4606      	mov	r6, r0
   1ca72:	460d      	mov	r5, r1
   1ca74:	4618      	mov	r0, r3
	if (tgt_addr) {
   1ca76:	b1ef      	cbz	r7, 1cab4 <lll_adv_connect_ind_check+0x4c>
}

static inline bool isr_rx_ci_adva_check(uint8_t tx_addr, uint8_t *addr,
					struct pdu_adv *ci)
{
	return (tx_addr == ci->rx_addr) &&
   1ca78:	780b      	ldrb	r3, [r1, #0]
   1ca7a:	ebb2 1fd3 	cmp.w	r2, r3, lsr #7
   1ca7e:	d003      	beq.n	1ca88 <lll_adv_connect_ind_check+0x20>
		       isr_rx_ci_adva_check(tx_addr, addr, ci) &&
   1ca80:	2000      	movs	r0, #0
   1ca82:	f000 0001 	and.w	r0, r0, #1
}
   1ca86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		!memcmp(addr, ci->connect_ind.adv_addr, BDADDR_SIZE);
   1ca88:	2206      	movs	r2, #6
   1ca8a:	3108      	adds	r1, #8
   1ca8c:	f7fa fbd1 	bl	17232 <memcmp>
		       isr_rx_ci_adva_check(tx_addr, addr, ci) &&
   1ca90:	2800      	cmp	r0, #0
   1ca92:	d1f5      	bne.n	1ca80 <lll_adv_connect_ind_check+0x18>
	return (rx_addr == ci->tx_addr) &&
   1ca94:	782b      	ldrb	r3, [r5, #0]
   1ca96:	f89d 2018 	ldrb.w	r2, [sp, #24]
   1ca9a:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1ca9e:	4293      	cmp	r3, r2
   1caa0:	d1ef      	bne.n	1ca82 <lll_adv_connect_ind_check+0x1a>
	       !memcmp(tgt_addr, ci->connect_ind.init_addr, BDADDR_SIZE);
   1caa2:	2206      	movs	r2, #6
   1caa4:	1ca9      	adds	r1, r5, #2
   1caa6:	4638      	mov	r0, r7
   1caa8:	f7fa fbc3 	bl	17232 <memcmp>
	return (rx_addr == ci->tx_addr) &&
   1caac:	fab0 f080 	clz	r0, r0
   1cab0:	0940      	lsrs	r0, r0, #5
   1cab2:	e7e6      	b.n	1ca82 <lll_adv_connect_ind_check+0x1a>
	return (((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) == 0) ||
   1cab4:	7a73      	ldrb	r3, [r6, #9]
		(devmatch_ok)) &&
   1cab6:	079b      	lsls	r3, r3, #30
   1cab8:	d500      	bpl.n	1cabc <lll_adv_connect_ind_check+0x54>
	return (((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) == 0) ||
   1caba:	b174      	cbz	r4, 1cada <lll_adv_connect_ind_check+0x72>
	return (tx_addr == ci->rx_addr) &&
   1cabc:	782b      	ldrb	r3, [r5, #0]
   1cabe:	ebb2 1fd3 	cmp.w	r2, r3, lsr #7
   1cac2:	d108      	bne.n	1cad6 <lll_adv_connect_ind_check+0x6e>
		!memcmp(addr, ci->connect_ind.adv_addr, BDADDR_SIZE);
   1cac4:	2206      	movs	r2, #6
   1cac6:	f105 0108 	add.w	r1, r5, #8
   1caca:	f7fa fbb2 	bl	17232 <memcmp>
	return (tx_addr == ci->rx_addr) &&
   1cace:	fab0 f080 	clz	r0, r0
   1cad2:	0940      	lsrs	r0, r0, #5
   1cad4:	e7d7      	b.n	1ca86 <lll_adv_connect_ind_check+0x1e>
   1cad6:	2000      	movs	r0, #0
   1cad8:	e7d5      	b.n	1ca86 <lll_adv_connect_ind_check+0x1e>
		(devmatch_ok)) &&
   1cada:	4620      	mov	r0, r4
   1cadc:	e7d3      	b.n	1ca86 <lll_adv_connect_ind_check+0x1e>

0001cade <prepare_cb>:
	return common_prepare_cb(p, false);
   1cade:	2100      	movs	r1, #0
   1cae0:	f7f3 bf84 	b.w	109ec <common_prepare_cb>

0001cae4 <isr_abort>:
{
   1cae4:	b510      	push	{r4, lr}
   1cae6:	4604      	mov	r4, r0
	lll_isr_status_reset();
   1cae8:	f7ff ff21 	bl	1c92e <lll_isr_status_reset>
	radio_filter_disable();
   1caec:	f7f5 f8ce 	bl	11c8c <radio_filter_disable>
	lll_isr_cleanup(param);
   1caf0:	4620      	mov	r0, r4
}
   1caf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   1caf6:	f7f3 ba4d 	b.w	ff94 <lll_isr_cleanup>

0001cafa <isr_done>:
{
   1cafa:	b508      	push	{r3, lr}
	isr_common_done(param);
   1cafc:	f7f4 f846 	bl	10b8c <isr_common_done>
	radio_rx_enable();
   1cb00:	f7f4 ff7a 	bl	119f8 <radio_rx_enable>
}
   1cb04:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_end_capture();
   1cb08:	f7f5 b9cc 	b.w	11ea4 <radio_tmr_end_capture>

0001cb0c <isr_window>:
{
   1cb0c:	b510      	push	{r4, lr}
   1cb0e:	4604      	mov	r4, r0
	isr_common_done(param);
   1cb10:	f7f4 f83c 	bl	10b8c <isr_common_done>
	if (++lll->chan == ADV_CHAN_MAX) {
   1cb14:	7923      	ldrb	r3, [r4, #4]
   1cb16:	f3c3 0241 	ubfx	r2, r3, #1, #2
   1cb1a:	3201      	adds	r2, #1
   1cb1c:	f002 0203 	and.w	r2, r2, #3
   1cb20:	2a03      	cmp	r2, #3
   1cb22:	bf14      	ite	ne
   1cb24:	f362 0342 	bfine	r3, r2, #1, #2
		lll->chan = 0U;
   1cb28:	f36f 0342 	bfceq	r3, #1, #2
   1cb2c:	7123      	strb	r3, [r4, #4]
	lll_chan_set(37 + lll->chan);
   1cb2e:	7920      	ldrb	r0, [r4, #4]
   1cb30:	f3c0 0041 	ubfx	r0, r0, #1, #2
   1cb34:	3025      	adds	r0, #37	; 0x25
   1cb36:	f7f3 f9fb 	bl	ff30 <lll_chan_set>
	remainder_us = radio_tmr_start_now(0);
   1cb3a:	2000      	movs	r0, #0
   1cb3c:	f7f5 f952 	bl	11de4 <radio_tmr_start_now>
}
   1cb40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_tmr_end_capture();
   1cb44:	f7f5 b9ae 	b.w	11ea4 <radio_tmr_end_capture>

0001cb48 <resume_prepare_cb>:
	ull = HDR_LLL2ULL(p->param);
   1cb48:	68c3      	ldr	r3, [r0, #12]
{
   1cb4a:	b570      	push	{r4, r5, r6, lr}
   1cb4c:	4604      	mov	r4, r0
	ull = HDR_LLL2ULL(p->param);
   1cb4e:	681e      	ldr	r6, [r3, #0]
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   1cb50:	f7ff fae3 	bl	1c11a <ticker_ticks_now_get>
   1cb54:	4605      	mov	r5, r0
   1cb56:	4630      	mov	r0, r6
   1cb58:	f7ff feba 	bl	1c8d0 <lll_event_offset_get>
	p->remainder = 0;
   1cb5c:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   1cb5e:	1a2d      	subs	r5, r5, r0
   1cb60:	6025      	str	r5, [r4, #0]
	p->remainder = 0;
   1cb62:	6063      	str	r3, [r4, #4]
	p->lazy = 0;
   1cb64:	8123      	strh	r3, [r4, #8]
	return common_prepare_cb(p, true);
   1cb66:	4620      	mov	r0, r4
   1cb68:	2101      	movs	r1, #1
}
   1cb6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return common_prepare_cb(p, true);
   1cb6e:	f7f3 bf3d 	b.w	109ec <common_prepare_cb>

0001cb72 <isr_done_cleanup>:
{
   1cb72:	b530      	push	{r4, r5, lr}
   1cb74:	4604      	mov	r4, r0
   1cb76:	b085      	sub	sp, #20
	lll_isr_status_reset();
   1cb78:	f7ff fed9 	bl	1c92e <lll_isr_status_reset>
	if (lll_is_done(param, &is_resume)) {
   1cb7c:	f10d 010f 	add.w	r1, sp, #15
   1cb80:	4620      	mov	r0, r4
   1cb82:	f7f3 f9c7 	bl	ff14 <lll_is_done>
   1cb86:	4605      	mov	r5, r0
   1cb88:	b9c0      	cbnz	r0, 1cbbc <isr_done_cleanup+0x4a>
	radio_filter_disable();
   1cb8a:	f7f5 f87f 	bl	11c8c <radio_filter_disable>
	if (++lll->chan == ADV_CHAN_MAX) {
   1cb8e:	7923      	ldrb	r3, [r4, #4]
   1cb90:	f3c3 0241 	ubfx	r2, r3, #1, #2
   1cb94:	3201      	adds	r2, #1
   1cb96:	f002 0203 	and.w	r2, r2, #3
   1cb9a:	2a03      	cmp	r2, #3
   1cb9c:	bf14      	ite	ne
   1cb9e:	f362 0342 	bfine	r3, r2, #1, #2
		lll->chan = 0U;
   1cba2:	f365 0342 	bfieq	r3, r5, #1, #2
   1cba6:	7123      	strb	r3, [r4, #4]
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_LLL,
   1cba8:	2300      	movs	r3, #0
   1cbaa:	9300      	str	r3, [sp, #0]
   1cbac:	2203      	movs	r2, #3
   1cbae:	4619      	mov	r1, r3
   1cbb0:	4618      	mov	r0, r3
   1cbb2:	f7ee ff93 	bl	badc <ticker_stop>
	lll_isr_cleanup(param);
   1cbb6:	4620      	mov	r0, r4
   1cbb8:	f7f3 f9ec 	bl	ff94 <lll_isr_cleanup>
}
   1cbbc:	b005      	add	sp, #20
   1cbbe:	bd30      	pop	{r4, r5, pc}

0001cbc0 <lll_scan_init>:
}
   1cbc0:	2000      	movs	r0, #0
   1cbc2:	4770      	bx	lr

0001cbc4 <lll_scan_reset>:
   1cbc4:	2000      	movs	r0, #0
   1cbc6:	4770      	bx	lr

0001cbc8 <lll_conn_init>:
{
   1cbc8:	b508      	push	{r3, lr}

static void empty_tx_init(void)
{
	struct pdu_data *p;

	p = (void *)radio_pkt_empty_get();
   1cbca:	f7f4 ff73 	bl	11ab4 <radio_pkt_empty_get>
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1cbce:	7803      	ldrb	r3, [r0, #0]
   1cbd0:	2201      	movs	r2, #1
   1cbd2:	f362 0301 	bfi	r3, r2, #0, #2
   1cbd6:	7003      	strb	r3, [r0, #0]
}
   1cbd8:	2000      	movs	r0, #0
   1cbda:	bd08      	pop	{r3, pc}

0001cbdc <lll_conn_reset>:
}
   1cbdc:	2000      	movs	r0, #0
   1cbde:	4770      	bx	lr

0001cbe0 <lll_conn_flush>:
}
   1cbe0:	4770      	bx	lr

0001cbe2 <lll_conn_tx_pkt_set>:
{
   1cbe2:	b510      	push	{r4, lr}
   1cbe4:	460c      	mov	r4, r1
	radio_phy_set(phy, flags);
   1cbe6:	2100      	movs	r1, #0
   1cbe8:	4608      	mov	r0, r1
   1cbea:	f7f4 fe8d 	bl	11908 <radio_phy_set>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, max_tx_octets, pkt_flags);
   1cbee:	2008      	movs	r0, #8
   1cbf0:	2201      	movs	r2, #1
   1cbf2:	211b      	movs	r1, #27
   1cbf4:	f7f4 fece 	bl	11994 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   1cbf8:	4620      	mov	r0, r4
}
   1cbfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_pkt_tx_set(pdu_data_tx);
   1cbfe:	f7f4 bef5 	b.w	119ec <radio_pkt_tx_set>

0001cc02 <lll_conn_pdu_tx_prep>:
{
   1cc02:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1cc06:	4604      	mov	r4, r0
   1cc08:	4688      	mov	r8, r1
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   1cc0a:	aa01      	add	r2, sp, #4
   1cc0c:	e9d0 010f 	ldrd	r0, r1, [r0, #60]	; 0x3c
   1cc10:	f7fe ffc4 	bl	1bb9c <memq_peek>
	if (lll->empty || !link) {
   1cc14:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
   1cc18:	075b      	lsls	r3, r3, #29
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   1cc1a:	4681      	mov	r9, r0
	if (lll->empty || !link) {
   1cc1c:	d400      	bmi.n	1cc20 <lll_conn_pdu_tx_prep+0x1e>
   1cc1e:	b9b8      	cbnz	r0, 1cc50 <lll_conn_pdu_tx_prep+0x4e>
		lll->empty = 1U;
   1cc20:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
   1cc24:	f043 0304 	orr.w	r3, r3, #4
   1cc28:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
		p = (void *)radio_pkt_empty_get();
   1cc2c:	f7f4 ff42 	bl	11ab4 <radio_pkt_empty_get>
   1cc30:	7803      	ldrb	r3, [r0, #0]
   1cc32:	4605      	mov	r5, r0
		if (link || FORCE_MD_CNT_GET()) {
   1cc34:	f1b9 0f00 	cmp.w	r9, #0
   1cc38:	d007      	beq.n	1cc4a <lll_conn_pdu_tx_prep+0x48>
			p->md = 1U;
   1cc3a:	f043 0310 	orr.w	r3, r3, #16
			p->md = 0U;
   1cc3e:	702b      	strb	r3, [r5, #0]
	*pdu_data_tx = p;
   1cc40:	f8c8 5000 	str.w	r5, [r8]
}
   1cc44:	b003      	add	sp, #12
   1cc46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			p->md = 0U;
   1cc4a:	f369 1304 	bfi	r3, r9, #4, #1
   1cc4e:	e7f6      	b.n	1cc3e <lll_conn_pdu_tx_prep+0x3c>
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   1cc50:	9f01      	ldr	r7, [sp, #4]
   1cc52:	f894 6051 	ldrb.w	r6, [r4, #81]	; 0x51
		if (!lll->packet_tx_head_len) {
   1cc56:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   1cc5a:	3704      	adds	r7, #4
   1cc5c:	19bd      	adds	r5, r7, r6
		if (!lll->packet_tx_head_len) {
   1cc5e:	b913      	cbnz	r3, 1cc66 <lll_conn_pdu_tx_prep+0x64>
			lll->packet_tx_head_len = p->len;
   1cc60:	786b      	ldrb	r3, [r5, #1]
   1cc62:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
		if (lll->packet_tx_head_offset) {
   1cc66:	b126      	cbz	r6, 1cc72 <lll_conn_pdu_tx_prep+0x70>
			p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1cc68:	5dbb      	ldrb	r3, [r7, r6]
   1cc6a:	2201      	movs	r2, #1
   1cc6c:	f362 0301 	bfi	r3, r2, #0, #2
   1cc70:	55bb      	strb	r3, [r7, r6]
		p->len = lll->packet_tx_head_len - lll->packet_tx_head_offset;
   1cc72:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   1cc76:	1b9b      	subs	r3, r3, r6
   1cc78:	706b      	strb	r3, [r5, #1]
		max_tx_octets = ull_conn_lll_max_tx_octets_get(lll);
   1cc7a:	4620      	mov	r0, r4
   1cc7c:	f7ff fdaf 	bl	1c7de <ull_conn_lll_max_tx_octets_get>
		if (p->len > max_tx_octets) {
   1cc80:	786b      	ldrb	r3, [r5, #1]
   1cc82:	4283      	cmp	r3, r0
   1cc84:	d90b      	bls.n	1cc9e <lll_conn_pdu_tx_prep+0x9c>
			p->len = max_tx_octets;
   1cc86:	7068      	strb	r0, [r5, #1]
			p->md = 1U;
   1cc88:	5dbb      	ldrb	r3, [r7, r6]
			p->md = 1U;
   1cc8a:	f043 0310 	orr.w	r3, r3, #16
			p->md = 0U;
   1cc8e:	55bb      	strb	r3, [r7, r6]
		p->rfu = 0U;
   1cc90:	5dbb      	ldrb	r3, [r7, r6]
   1cc92:	f36f 1347 	bfc	r3, #5, #3
   1cc96:	55bb      	strb	r3, [r7, r6]
		p->resv = 0U;
   1cc98:	2300      	movs	r3, #0
   1cc9a:	70ab      	strb	r3, [r5, #2]
   1cc9c:	e7d0      	b.n	1cc40 <lll_conn_pdu_tx_prep+0x3e>
		} else if ((link->next != lll->memq_tx.tail) ||
   1cc9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1cca0:	f8d9 2000 	ldr.w	r2, [r9]
   1cca4:	429a      	cmp	r2, r3
   1cca6:	5dbb      	ldrb	r3, [r7, r6]
   1cca8:	d1ef      	bne.n	1cc8a <lll_conn_pdu_tx_prep+0x88>
			p->md = 0U;
   1ccaa:	f36f 1304 	bfc	r3, #4, #1
   1ccae:	e7ee      	b.n	1cc8e <lll_conn_pdu_tx_prep+0x8c>

0001ccb0 <ecb_encrypt_be>:

void ecb_encrypt_be(uint8_t const *const key_be, uint8_t const *const clear_text_be,
		    uint8_t * const cipher_text_be)
{
   1ccb0:	b530      	push	{r4, r5, lr}
   1ccb2:	b08d      	sub	sp, #52	; 0x34
   1ccb4:	460d      	mov	r5, r1
   1ccb6:	4614      	mov	r4, r2
	struct ecb_param ecb;

	memcpy(&ecb.key[0], key_be, sizeof(ecb.key));
   1ccb8:	4601      	mov	r1, r0
   1ccba:	2210      	movs	r2, #16
   1ccbc:	4668      	mov	r0, sp
   1ccbe:	f7fa fac9 	bl	17254 <memcpy>
	memcpy(&ecb.clear_text[0], clear_text_be, sizeof(ecb.clear_text));
   1ccc2:	2210      	movs	r2, #16
   1ccc4:	4629      	mov	r1, r5
   1ccc6:	eb0d 0002 	add.w	r0, sp, r2
   1ccca:	f7fa fac3 	bl	17254 <memcpy>

	do_ecb(&ecb);
   1ccce:	4668      	mov	r0, sp
   1ccd0:	f7f4 fd8e 	bl	117f0 <do_ecb>

	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
   1ccd4:	2210      	movs	r2, #16
   1ccd6:	a908      	add	r1, sp, #32
   1ccd8:	4620      	mov	r0, r4
   1ccda:	f7fa fabb 	bl	17254 <memcpy>
}
   1ccde:	b00d      	add	sp, #52	; 0x34
   1cce0:	bd30      	pop	{r4, r5, pc}

0001cce2 <ecb_encrypt>:

void ecb_encrypt(uint8_t const *const key_le, uint8_t const *const clear_text_le,
		 uint8_t * const cipher_text_le, uint8_t * const cipher_text_be)
{
   1cce2:	b570      	push	{r4, r5, r6, lr}
   1cce4:	b08c      	sub	sp, #48	; 0x30
   1cce6:	460e      	mov	r6, r1
   1cce8:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   1ccea:	4601      	mov	r1, r0
   1ccec:	2210      	movs	r2, #16
   1ccee:	4668      	mov	r0, sp
{
   1ccf0:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   1ccf2:	f7fe ff24 	bl	1bb3e <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   1ccf6:	2210      	movs	r2, #16
   1ccf8:	eb0d 0002 	add.w	r0, sp, r2
   1ccfc:	4631      	mov	r1, r6
   1ccfe:	f7fe ff1e 	bl	1bb3e <mem_rcopy>

	do_ecb(&ecb);
   1cd02:	4668      	mov	r0, sp
   1cd04:	f7f4 fd74 	bl	117f0 <do_ecb>

	if (cipher_text_le) {
   1cd08:	b125      	cbz	r5, 1cd14 <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   1cd0a:	2210      	movs	r2, #16
   1cd0c:	a908      	add	r1, sp, #32
   1cd0e:	4628      	mov	r0, r5
   1cd10:	f7fe ff15 	bl	1bb3e <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   1cd14:	b124      	cbz	r4, 1cd20 <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   1cd16:	2210      	movs	r2, #16
   1cd18:	a908      	add	r1, sp, #32
   1cd1a:	4620      	mov	r0, r4
   1cd1c:	f7fa fa9a 	bl	17254 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   1cd20:	b00c      	add	sp, #48	; 0x30
   1cd22:	bd70      	pop	{r4, r5, r6, pc}

0001cd24 <radio_setup>:
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   1cd24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1cd28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   1cd2c:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   1cd2e:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   1cd32:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   1cd36:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   1cd3a:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   1cd3e:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   1cd42:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   1cd46:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   1cd4a:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   1cd4e:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   1cd52:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   1cd56:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   1cd5a:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   1cd5e:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   1cd62:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
}
   1cd66:	4770      	bx	lr

0001cd68 <radio_tx_chain_delay_get>:
}
   1cd68:	2001      	movs	r0, #1
   1cd6a:	4770      	bx	lr

0001cd6c <radio_rx_ready_delay_get>:
}
   1cd6c:	2029      	movs	r0, #41	; 0x29
   1cd6e:	4770      	bx	lr

0001cd70 <radio_rx_chain_delay_get>:
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_2M_US;
   1cd70:	2802      	cmp	r0, #2
}
   1cd72:	bf14      	ite	ne
   1cd74:	200a      	movne	r0, #10
   1cd76:	2006      	moveq	r0, #6
   1cd78:	4770      	bx	lr

0001cd7a <radio_phy_flags_rx_get>:
}
   1cd7a:	2000      	movs	r0, #0
   1cd7c:	4770      	bx	lr

0001cd7e <mayfly_prio_is_equal>:
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   1cd7e:	4288      	cmp	r0, r1
   1cd80:	d00a      	beq.n	1cd98 <mayfly_prio_is_equal+0x1a>
	return (caller_id == callee_id) ||
   1cd82:	2801      	cmp	r0, #1
   1cd84:	d104      	bne.n	1cd90 <mayfly_prio_is_equal+0x12>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   1cd86:	2902      	cmp	r1, #2
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   1cd88:	bf14      	ite	ne
   1cd8a:	2000      	movne	r0, #0
   1cd8c:	2001      	moveq	r0, #1
   1cd8e:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   1cd90:	2802      	cmp	r0, #2
   1cd92:	d103      	bne.n	1cd9c <mayfly_prio_is_equal+0x1e>
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   1cd94:	2901      	cmp	r1, #1
   1cd96:	e7f7      	b.n	1cd88 <mayfly_prio_is_equal+0xa>
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   1cd98:	2001      	movs	r0, #1
   1cd9a:	4770      	bx	lr
   1cd9c:	2000      	movs	r0, #0
}
   1cd9e:	4770      	bx	lr

0001cda0 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(uint32_t value)
{
   1cda0:	4601      	mov	r1, r0
	cntr_cmp_set(0, value);
   1cda2:	2000      	movs	r0, #0
   1cda4:	f7f4 bd1c 	b.w	117e0 <cntr_cmp_set>

0001cda8 <sys_put_le32>:
	dst[1] = val >> 8;
   1cda8:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   1cdac:	7008      	strb	r0, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
   1cdae:	0c00      	lsrs	r0, r0, #16
	dst[0] = val;
   1cdb0:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
   1cdb2:	0a00      	lsrs	r0, r0, #8
   1cdb4:	704b      	strb	r3, [r1, #1]
   1cdb6:	70c8      	strb	r0, [r1, #3]
}
   1cdb8:	4770      	bx	lr

0001cdba <hci_vendor_read_static_addr>:
				 uint8_t size)
{
	/* only one supported */
	ARG_UNUSED(size);

	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   1cdba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
{
   1cdbe:	b510      	push	{r4, lr}
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   1cdc0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   1cdc4:	3201      	adds	r2, #1
{
   1cdc6:	4604      	mov	r4, r0
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   1cdc8:	d106      	bne.n	1cdd8 <hci_vendor_read_static_addr+0x1e>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   1cdca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   1cdce:	f64f 72ff 	movw	r2, #65535	; 0xffff
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   1cdd2:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   1cdd4:	4293      	cmp	r3, r2
   1cdd6:	d044      	beq.n	1ce62 <hci_vendor_read_static_addr+0xa8>
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   1cdd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1cddc:	f8d2 00a0 	ldr.w	r0, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   1cde0:	f010 0001 	ands.w	r0, r0, #1
   1cde4:	d036      	beq.n	1ce54 <hci_vendor_read_static_addr+0x9a>
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addrs[0].bdaddr.val[0]);
   1cde6:	4621      	mov	r1, r4
   1cde8:	f8d2 00a4 	ldr.w	r0, [r2, #164]	; 0xa4
   1cdec:	f7ff ffdc 	bl	1cda8 <sys_put_le32>
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addrs[0].bdaddr.val[4]);
   1cdf0:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
	dst[0] = val;
   1cdf4:	7123      	strb	r3, [r4, #4]
	dst[1] = val >> 8;
   1cdf6:	f3c3 2307 	ubfx	r3, r3, #8, #8

		/* The FICR value is a just a random number, with no knowledge
		 * of the Bluetooth Specification requirements for random
		 * static addresses.
		 */
		BT_ADDR_SET_STATIC(&addrs[0].bdaddr);
   1cdfa:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1cdfe:	7163      	strb	r3, [r4, #5]

		/* If no public address is provided and a static address is
		 * available, then it is recommended to return an identity root
		 * key (if available) from this command.
		 */
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   1ce00:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
   1ce04:	3101      	adds	r1, #1
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
		    (NRF_FICR->IR[3] != UINT32_MAX)) {
			sys_put_le32(NRF_FICR->IR[0], &addrs[0].ir[0]);
   1ce06:	f104 0306 	add.w	r3, r4, #6
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   1ce0a:	d024      	beq.n	1ce56 <hci_vendor_read_static_addr+0x9c>
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   1ce0c:	f8d2 1094 	ldr.w	r1, [r2, #148]	; 0x94
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   1ce10:	3101      	adds	r1, #1
   1ce12:	d020      	beq.n	1ce56 <hci_vendor_read_static_addr+0x9c>
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   1ce14:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   1ce18:	3101      	adds	r1, #1
   1ce1a:	d01c      	beq.n	1ce56 <hci_vendor_read_static_addr+0x9c>
		    (NRF_FICR->IR[3] != UINT32_MAX)) {
   1ce1c:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   1ce20:	3101      	adds	r1, #1
   1ce22:	d018      	beq.n	1ce56 <hci_vendor_read_static_addr+0x9c>
			sys_put_le32(NRF_FICR->IR[0], &addrs[0].ir[0]);
   1ce24:	4619      	mov	r1, r3
   1ce26:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
   1ce2a:	f7ff ffbd 	bl	1cda8 <sys_put_le32>
			sys_put_le32(NRF_FICR->IR[1], &addrs[0].ir[4]);
   1ce2e:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
   1ce32:	f104 010a 	add.w	r1, r4, #10
   1ce36:	f7ff ffb7 	bl	1cda8 <sys_put_le32>
			sys_put_le32(NRF_FICR->IR[2], &addrs[0].ir[8]);
   1ce3a:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
   1ce3e:	f104 010e 	add.w	r1, r4, #14
   1ce42:	f7ff ffb1 	bl	1cda8 <sys_put_le32>
			sys_put_le32(NRF_FICR->IR[3], &addrs[0].ir[12]);
   1ce46:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
   1ce4a:	f104 0112 	add.w	r1, r4, #18
   1ce4e:	f7ff ffab 	bl	1cda8 <sys_put_le32>
		} else {
			/* Mark IR as invalid */
			(void)memset(addrs[0].ir, 0x00, sizeof(addrs[0].ir));
		}

		return 1;
   1ce52:	2001      	movs	r0, #1
	}

	return 0;
}
   1ce54:	bd10      	pop	{r4, pc}
			(void)memset(addrs[0].ir, 0x00, sizeof(addrs[0].ir));
   1ce56:	2210      	movs	r2, #16
   1ce58:	2100      	movs	r1, #0
   1ce5a:	4618      	mov	r0, r3
   1ce5c:	f7fa fa05 	bl	1726a <memset>
   1ce60:	e7f7      	b.n	1ce52 <hci_vendor_read_static_addr+0x98>
	return 0;
   1ce62:	2000      	movs	r0, #0
   1ce64:	e7f6      	b.n	1ce54 <hci_vendor_read_static_addr+0x9a>

0001ce66 <hci_vendor_read_key_hierarchy_roots>:

void hci_vendor_read_key_hierarchy_roots(uint8_t ir[16], uint8_t er[16])
{
   1ce66:	b510      	push	{r4, lr}
	/* Mark IR as invalid.
	 * No public address is available, and static address IR should be read
	 * using Read Static Addresses command.
	 */
	(void)memset(ir, 0x00, 16);
   1ce68:	2210      	movs	r2, #16
{
   1ce6a:	460c      	mov	r4, r1
	(void)memset(ir, 0x00, 16);
   1ce6c:	2100      	movs	r1, #0
   1ce6e:	f7fa f9fc 	bl	1726a <memset>

	/* Fill in ER if present */
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   1ce72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1ce76:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   1ce7a:	3301      	adds	r3, #1
   1ce7c:	d023      	beq.n	1cec6 <hci_vendor_read_key_hierarchy_roots+0x60>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   1ce7e:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   1ce82:	3301      	adds	r3, #1
   1ce84:	d01f      	beq.n	1cec6 <hci_vendor_read_key_hierarchy_roots+0x60>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   1ce86:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   1ce8a:	3301      	adds	r3, #1
   1ce8c:	d01b      	beq.n	1cec6 <hci_vendor_read_key_hierarchy_roots+0x60>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
   1ce8e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   1ce92:	3301      	adds	r3, #1
   1ce94:	d017      	beq.n	1cec6 <hci_vendor_read_key_hierarchy_roots+0x60>
		sys_put_le32(NRF_FICR->ER[0], &er[0]);
   1ce96:	4621      	mov	r1, r4
   1ce98:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
   1ce9c:	f7ff ff84 	bl	1cda8 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[1], &er[4]);
   1cea0:	1d21      	adds	r1, r4, #4
   1cea2:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
   1cea6:	f7ff ff7f 	bl	1cda8 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[2], &er[8]);
   1ceaa:	f104 0108 	add.w	r1, r4, #8
   1ceae:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
   1ceb2:	f7ff ff79 	bl	1cda8 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
   1ceb6:	f104 010c 	add.w	r1, r4, #12
   1ceba:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
	} else {
		/* Mark ER as invalid */
		(void)memset(er, 0x00, 16);
	}
}
   1cebe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
   1cec2:	f7ff bf71 	b.w	1cda8 <sys_put_le32>
		(void)memset(er, 0x00, 16);
   1cec6:	4620      	mov	r0, r4
   1cec8:	2210      	movs	r2, #16
}
   1ceca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		(void)memset(er, 0x00, 16);
   1cece:	2100      	movs	r1, #0
   1ced0:	f7fa b9cb 	b.w	1726a <memset>

0001ced4 <sys_put_be32>:
	sys_put_be16(val >> 16, dst);
   1ced4:	0c03      	lsrs	r3, r0, #16
	dst[0] = val >> 8;
   1ced6:	0e02      	lsrs	r2, r0, #24
	dst[1] = val;
   1ced8:	704b      	strb	r3, [r1, #1]
	dst[0] = val >> 8;
   1ceda:	f3c0 2307 	ubfx	r3, r0, #8, #8
   1cede:	700a      	strb	r2, [r1, #0]
   1cee0:	708b      	strb	r3, [r1, #2]
	dst[1] = val;
   1cee2:	70c8      	strb	r0, [r1, #3]
}
   1cee4:	4770      	bx	lr

0001cee6 <sys_put_le32>:
	dst[1] = val >> 8;
   1cee6:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   1ceea:	7008      	strb	r0, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
   1ceec:	0c00      	lsrs	r0, r0, #16
	dst[0] = val;
   1ceee:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
   1cef0:	0a00      	lsrs	r0, r0, #8
   1cef2:	704b      	strb	r3, [r1, #1]
   1cef4:	70c8      	strb	r0, [r1, #3]
}
   1cef6:	4770      	bx	lr

0001cef8 <fixed_data_unref>:
}
   1cef8:	4770      	bx	lr

0001cefa <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1cefa:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   1cefc:	6849      	ldr	r1, [r1, #4]
   1cefe:	6809      	ldr	r1, [r1, #0]
   1cf00:	f7f5 b932 	b.w	12168 <net_buf_alloc_len>

0001cf04 <net_buf_get>:
{
   1cf04:	b570      	push	{r4, r5, r6, lr}
   1cf06:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   1cf08:	f7f8 fba2 	bl	15650 <z_impl_k_queue_get>
	if (!buf) {
   1cf0c:	4605      	mov	r5, r0
   1cf0e:	b128      	cbz	r0, 1cf1c <net_buf_get+0x18>
   1cf10:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1cf12:	7963      	ldrb	r3, [r4, #5]
   1cf14:	f013 0301 	ands.w	r3, r3, #1
   1cf18:	d102      	bne.n	1cf20 <net_buf_get+0x1c>
	frag->frags = NULL;
   1cf1a:	6023      	str	r3, [r4, #0]
}
   1cf1c:	4628      	mov	r0, r5
   1cf1e:	bd70      	pop	{r4, r5, r6, pc}
   1cf20:	2300      	movs	r3, #0
   1cf22:	2200      	movs	r2, #0
   1cf24:	4630      	mov	r0, r6
   1cf26:	f7f8 fb93 	bl	15650 <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   1cf2a:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1cf2c:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   1cf2e:	f023 0301 	bic.w	r3, r3, #1
   1cf32:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1cf34:	4604      	mov	r4, r0
   1cf36:	e7ec      	b.n	1cf12 <net_buf_get+0xe>

0001cf38 <net_buf_simple_init_with_data>:
	buf->size  = size;
   1cf38:	b292      	uxth	r2, r2
	buf->__buf = data;
   1cf3a:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   1cf3c:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   1cf3e:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   1cf40:	8082      	strh	r2, [r0, #4]
}
   1cf42:	4770      	bx	lr

0001cf44 <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   1cf44:	6883      	ldr	r3, [r0, #8]
   1cf46:	440b      	add	r3, r1
   1cf48:	6003      	str	r3, [r0, #0]
}
   1cf4a:	4770      	bx	lr

0001cf4c <net_buf_put>:
{
   1cf4c:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   1cf4e:	460a      	mov	r2, r1
   1cf50:	6814      	ldr	r4, [r2, #0]
   1cf52:	b914      	cbnz	r4, 1cf5a <net_buf_put+0xe>
}
   1cf54:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   1cf56:	f001 bafa 	b.w	1e54e <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   1cf5a:	7953      	ldrb	r3, [r2, #5]
   1cf5c:	f043 0301 	orr.w	r3, r3, #1
   1cf60:	7153      	strb	r3, [r2, #5]
   1cf62:	4622      	mov	r2, r4
   1cf64:	e7f4      	b.n	1cf50 <net_buf_put+0x4>

0001cf66 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1cf66:	7902      	ldrb	r2, [r0, #4]
   1cf68:	3201      	adds	r2, #1
   1cf6a:	7102      	strb	r2, [r0, #4]
	return buf;
}
   1cf6c:	4770      	bx	lr

0001cf6e <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   1cf6e:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   1cf70:	4618      	mov	r0, r3
   1cf72:	681b      	ldr	r3, [r3, #0]
   1cf74:	2b00      	cmp	r3, #0
   1cf76:	d1fb      	bne.n	1cf70 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   1cf78:	4770      	bx	lr

0001cf7a <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   1cf7a:	6802      	ldr	r2, [r0, #0]
{
   1cf7c:	b510      	push	{r4, lr}
	if (parent->frags) {
   1cf7e:	b12a      	cbz	r2, 1cf8c <net_buf_frag_insert+0x12>
   1cf80:	460b      	mov	r3, r1
	while (buf->frags) {
   1cf82:	461c      	mov	r4, r3
   1cf84:	681b      	ldr	r3, [r3, #0]
   1cf86:	2b00      	cmp	r3, #0
   1cf88:	d1fb      	bne.n	1cf82 <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   1cf8a:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1cf8c:	6001      	str	r1, [r0, #0]
}
   1cf8e:	bd10      	pop	{r4, pc}

0001cf90 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1cf90:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   1cf92:	4604      	mov	r4, r0
   1cf94:	b920      	cbnz	r0, 1cfa0 <net_buf_frag_add+0x10>
	buf->ref++;
   1cf96:	790b      	ldrb	r3, [r1, #4]
   1cf98:	3301      	adds	r3, #1
   1cf9a:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   1cf9c:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   1cf9e:	bd10      	pop	{r4, pc}
   1cfa0:	4603      	mov	r3, r0
	while (buf->frags) {
   1cfa2:	4618      	mov	r0, r3
   1cfa4:	681b      	ldr	r3, [r3, #0]
   1cfa6:	2b00      	cmp	r3, #0
   1cfa8:	d1fb      	bne.n	1cfa2 <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1cfaa:	f7ff ffe6 	bl	1cf7a <net_buf_frag_insert>
   1cfae:	4620      	mov	r0, r4
   1cfb0:	e7f5      	b.n	1cf9e <net_buf_frag_add+0xe>

0001cfb2 <net_buf_frag_del>:
				       struct net_buf *frag,
				       const char *func, int line)
#else
struct net_buf *net_buf_frag_del(struct net_buf *parent, struct net_buf *frag)
#endif
{
   1cfb2:	b510      	push	{r4, lr}
	struct net_buf *next_frag;

	__ASSERT_NO_MSG(frag);

	if (parent) {
   1cfb4:	b108      	cbz	r0, 1cfba <net_buf_frag_del+0x8>
		__ASSERT_NO_MSG(parent->frags);
		__ASSERT_NO_MSG(parent->frags == frag);
		parent->frags = frag->frags;
   1cfb6:	680b      	ldr	r3, [r1, #0]
   1cfb8:	6003      	str	r3, [r0, #0]
	}

	next_frag = frag->frags;
   1cfba:	680c      	ldr	r4, [r1, #0]

	frag->frags = NULL;
   1cfbc:	2300      	movs	r3, #0

#if defined(CONFIG_NET_BUF_LOG)
	net_buf_unref_debug(frag, func, line);
#else
	net_buf_unref(frag);
   1cfbe:	4608      	mov	r0, r1
	frag->frags = NULL;
   1cfc0:	600b      	str	r3, [r1, #0]
	net_buf_unref(frag);
   1cfc2:	f7f5 f965 	bl	12290 <net_buf_unref>
#endif

	return next_frag;
}
   1cfc6:	4620      	mov	r0, r4
   1cfc8:	bd10      	pop	{r4, pc}

0001cfca <net_buf_simple_add>:
	return buf->data + buf->len;
   1cfca:	8883      	ldrh	r3, [r0, #4]
   1cfcc:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   1cfce:	4419      	add	r1, r3
   1cfd0:	8081      	strh	r1, [r0, #4]
	return tail;
}
   1cfd2:	18d0      	adds	r0, r2, r3
   1cfd4:	4770      	bx	lr

0001cfd6 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   1cfd6:	b430      	push	{r4, r5}
   1cfd8:	8884      	ldrh	r4, [r0, #4]
   1cfda:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   1cfdc:	18a3      	adds	r3, r4, r2
   1cfde:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1cfe0:	1928      	adds	r0, r5, r4
}
   1cfe2:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1cfe4:	f7fa b936 	b.w	17254 <memcpy>

0001cfe8 <net_buf_simple_add_u8>:
   1cfe8:	8883      	ldrh	r3, [r0, #4]
   1cfea:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   1cfec:	b510      	push	{r4, lr}
	buf->len += len;
   1cfee:	1c5c      	adds	r4, r3, #1
   1cff0:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   1cff2:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   1cff4:	18d0      	adds	r0, r2, r3
   1cff6:	bd10      	pop	{r4, pc}

0001cff8 <net_buf_simple_add_le16>:
   1cff8:	8883      	ldrh	r3, [r0, #4]
   1cffa:	6802      	ldr	r2, [r0, #0]

void net_buf_simple_add_le16(struct net_buf_simple *buf, uint16_t val)
{
   1cffc:	b530      	push	{r4, r5, lr}
   1cffe:	18d4      	adds	r4, r2, r3
	buf->len += len;
   1d000:	1c9d      	adds	r5, r3, #2
   1d002:	8085      	strh	r5, [r0, #4]
	dst[0] = val;
   1d004:	54d1      	strb	r1, [r2, r3]
	dst[1] = val >> 8;
   1d006:	0a09      	lsrs	r1, r1, #8
   1d008:	7061      	strb	r1, [r4, #1]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
}
   1d00a:	bd30      	pop	{r4, r5, pc}

0001d00c <net_buf_simple_add_be16>:
   1d00c:	8883      	ldrh	r3, [r0, #4]
   1d00e:	6802      	ldr	r2, [r0, #0]

void net_buf_simple_add_be16(struct net_buf_simple *buf, uint16_t val)
{
   1d010:	b530      	push	{r4, r5, lr}
	buf->len += len;
   1d012:	1c9d      	adds	r5, r3, #2
   1d014:	8085      	strh	r5, [r0, #4]
   1d016:	18d4      	adds	r4, r2, r3
	dst[0] = val >> 8;
   1d018:	0a08      	lsrs	r0, r1, #8
   1d01a:	54d0      	strb	r0, [r2, r3]
	dst[1] = val;
   1d01c:	7061      	strb	r1, [r4, #1]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_be16(val, net_buf_simple_add(buf, sizeof(val)));
}
   1d01e:	bd30      	pop	{r4, r5, pc}

0001d020 <net_buf_simple_add_le24>:
   1d020:	8883      	ldrh	r3, [r0, #4]

void net_buf_simple_add_le24(struct net_buf_simple *buf, uint32_t val)
{
   1d022:	b530      	push	{r4, r5, lr}
   1d024:	6804      	ldr	r4, [r0, #0]
	buf->len += len;
   1d026:	1cdd      	adds	r5, r3, #3
   1d028:	18e2      	adds	r2, r4, r3
   1d02a:	8085      	strh	r5, [r0, #4]
	dst[0] = val;
   1d02c:	54e1      	strb	r1, [r4, r3]
	dst[1] = val >> 8;
   1d02e:	f3c1 2307 	ubfx	r3, r1, #8, #8
	dst[2] = val >> 16;
   1d032:	0c09      	lsrs	r1, r1, #16
	dst[1] = val >> 8;
   1d034:	7053      	strb	r3, [r2, #1]
	dst[2] = val >> 16;
   1d036:	7091      	strb	r1, [r2, #2]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_le24(val, net_buf_simple_add(buf, 3));
}
   1d038:	bd30      	pop	{r4, r5, pc}

0001d03a <net_buf_simple_add_le32>:

	sys_put_be24(val, net_buf_simple_add(buf, 3));
}

void net_buf_simple_add_le32(struct net_buf_simple *buf, uint32_t val)
{
   1d03a:	4603      	mov	r3, r0
   1d03c:	4608      	mov	r0, r1
   1d03e:	889a      	ldrh	r2, [r3, #4]
   1d040:	6819      	ldr	r1, [r3, #0]
   1d042:	b410      	push	{r4}
	buf->len += len;
   1d044:	1d14      	adds	r4, r2, #4
   1d046:	809c      	strh	r4, [r3, #4]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_le32(val, net_buf_simple_add(buf, sizeof(val)));
   1d048:	4411      	add	r1, r2
}
   1d04a:	bc10      	pop	{r4}
	sys_put_le32(val, net_buf_simple_add(buf, sizeof(val)));
   1d04c:	f7ff bf4b 	b.w	1cee6 <sys_put_le32>

0001d050 <net_buf_simple_add_be32>:

void net_buf_simple_add_be32(struct net_buf_simple *buf, uint32_t val)
{
   1d050:	4603      	mov	r3, r0
   1d052:	4608      	mov	r0, r1
   1d054:	889a      	ldrh	r2, [r3, #4]
   1d056:	6819      	ldr	r1, [r3, #0]
   1d058:	b410      	push	{r4}
	buf->len += len;
   1d05a:	1d14      	adds	r4, r2, #4
   1d05c:	809c      	strh	r4, [r3, #4]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_be32(val, net_buf_simple_add(buf, sizeof(val)));
   1d05e:	4411      	add	r1, r2
}
   1d060:	bc10      	pop	{r4}
	sys_put_be32(val, net_buf_simple_add(buf, sizeof(val)));
   1d062:	f7ff bf37 	b.w	1ced4 <sys_put_be32>

0001d066 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   1d066:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   1d068:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   1d06a:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   1d06c:	1a40      	subs	r0, r0, r1
	buf->len += len;
   1d06e:	4411      	add	r1, r2
	buf->data -= len;
   1d070:	6018      	str	r0, [r3, #0]
	buf->len += len;
   1d072:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   1d074:	4770      	bx	lr

0001d076 <net_buf_simple_push_be16>:
	buf->data -= len;
   1d076:	6803      	ldr	r3, [r0, #0]
   1d078:	1e9a      	subs	r2, r3, #2
   1d07a:	6002      	str	r2, [r0, #0]
	buf->len += len;
   1d07c:	8882      	ldrh	r2, [r0, #4]
   1d07e:	3202      	adds	r2, #2
   1d080:	8082      	strh	r2, [r0, #4]
	dst[0] = val >> 8;
   1d082:	0a0a      	lsrs	r2, r1, #8
   1d084:	f803 2c02 	strb.w	r2, [r3, #-2]
	dst[1] = val;
   1d088:	f803 1c01 	strb.w	r1, [r3, #-1]
void net_buf_simple_push_be16(struct net_buf_simple *buf, uint16_t val)
{
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_be16(val, net_buf_simple_push(buf, sizeof(val)));
}
   1d08c:	4770      	bx	lr

0001d08e <net_buf_simple_push_u8>:
	buf->data -= len;
   1d08e:	6802      	ldr	r2, [r0, #0]
   1d090:	1e53      	subs	r3, r2, #1
   1d092:	6003      	str	r3, [r0, #0]
	buf->len += len;
   1d094:	8883      	ldrh	r3, [r0, #4]
   1d096:	3301      	adds	r3, #1
   1d098:	8083      	strh	r3, [r0, #4]

void net_buf_simple_push_u8(struct net_buf_simple *buf, uint8_t val)
{
	uint8_t *data = net_buf_simple_push(buf, 1);

	*data = val;
   1d09a:	f802 1c01 	strb.w	r1, [r2, #-1]
}
   1d09e:	4770      	bx	lr

0001d0a0 <net_buf_simple_push_be24>:
	buf->data -= len;
   1d0a0:	6803      	ldr	r3, [r0, #0]
   1d0a2:	1eda      	subs	r2, r3, #3
   1d0a4:	6002      	str	r2, [r0, #0]
	buf->len += len;
   1d0a6:	8882      	ldrh	r2, [r0, #4]
   1d0a8:	3203      	adds	r2, #3
   1d0aa:	8082      	strh	r2, [r0, #4]
	dst[0] = val >> 16;
   1d0ac:	0c0a      	lsrs	r2, r1, #16
   1d0ae:	f803 2c03 	strb.w	r2, [r3, #-3]
	dst[0] = val >> 8;
   1d0b2:	f3c1 2207 	ubfx	r2, r1, #8, #8
   1d0b6:	f803 2c02 	strb.w	r2, [r3, #-2]
	dst[1] = val;
   1d0ba:	f803 1c01 	strb.w	r1, [r3, #-1]
void net_buf_simple_push_be24(struct net_buf_simple *buf, uint32_t val)
{
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_be24(val, net_buf_simple_push(buf, 3));
}
   1d0be:	4770      	bx	lr

0001d0c0 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   1d0c0:	8882      	ldrh	r2, [r0, #4]
   1d0c2:	1a52      	subs	r2, r2, r1
{
   1d0c4:	4603      	mov	r3, r0
	buf->len -= len;
   1d0c6:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   1d0c8:	6800      	ldr	r0, [r0, #0]
   1d0ca:	4408      	add	r0, r1
   1d0cc:	6018      	str	r0, [r3, #0]
}
   1d0ce:	4770      	bx	lr

0001d0d0 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   1d0d0:	4603      	mov	r3, r0
	void *data = buf->data;
   1d0d2:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   1d0d4:	889a      	ldrh	r2, [r3, #4]
   1d0d6:	1a52      	subs	r2, r2, r1
	buf->data += len;
   1d0d8:	4401      	add	r1, r0
	buf->len -= len;
   1d0da:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   1d0dc:	6019      	str	r1, [r3, #0]

	return data;
}
   1d0de:	4770      	bx	lr

0001d0e0 <net_buf_simple_pull_u8>:

uint8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   1d0e0:	b510      	push	{r4, lr}
	uint8_t val;

	val = buf->data[0];
   1d0e2:	6803      	ldr	r3, [r0, #0]
   1d0e4:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   1d0e6:	2101      	movs	r1, #1
   1d0e8:	f7ff ffea 	bl	1d0c0 <net_buf_simple_pull>

	return val;
}
   1d0ec:	4620      	mov	r0, r4
   1d0ee:	bd10      	pop	{r4, pc}

0001d0f0 <net_buf_simple_pull_le16>:

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   1d0f0:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   1d0f2:	6803      	ldr	r3, [r0, #0]
   1d0f4:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1d0f6:	2102      	movs	r1, #2
   1d0f8:	f7ff ffe2 	bl	1d0c0 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   1d0fc:	4620      	mov	r0, r4
   1d0fe:	bd10      	pop	{r4, pc}

0001d100 <net_buf_simple_pull_be16>:

uint16_t net_buf_simple_pull_be16(struct net_buf_simple *buf)
{
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   1d100:	6803      	ldr	r3, [r0, #0]
{
   1d102:	b510      	push	{r4, lr}
   1d104:	881c      	ldrh	r4, [r3, #0]
   1d106:	ba64      	rev16	r4, r4
   1d108:	b2a4      	uxth	r4, r4
	net_buf_simple_pull(buf, sizeof(val));
   1d10a:	2102      	movs	r1, #2
   1d10c:	f7ff ffd8 	bl	1d0c0 <net_buf_simple_pull>

	return sys_be16_to_cpu(val);
}
   1d110:	4620      	mov	r0, r4
   1d112:	bd10      	pop	{r4, pc}

0001d114 <net_buf_simple_pull_le32>:

	return sys_be24_to_cpu(val.u24);
}

uint32_t net_buf_simple_pull_le32(struct net_buf_simple *buf)
{
   1d114:	b510      	push	{r4, lr}
	uint32_t val;

	val = UNALIGNED_GET((uint32_t *)buf->data);
   1d116:	6803      	ldr	r3, [r0, #0]
   1d118:	681c      	ldr	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1d11a:	2104      	movs	r1, #4
   1d11c:	f7ff ffd0 	bl	1d0c0 <net_buf_simple_pull>

	return sys_le32_to_cpu(val);
}
   1d120:	4620      	mov	r0, r4
   1d122:	bd10      	pop	{r4, pc}

0001d124 <net_buf_simple_pull_be32>:

uint32_t net_buf_simple_pull_be32(struct net_buf_simple *buf)
{
   1d124:	b510      	push	{r4, lr}
   1d126:	6803      	ldr	r3, [r0, #0]
   1d128:	681c      	ldr	r4, [r3, #0]
	uint32_t val;

	val = UNALIGNED_GET((uint32_t *)buf->data);
	net_buf_simple_pull(buf, sizeof(val));
   1d12a:	2104      	movs	r1, #4
   1d12c:	ba24      	rev	r4, r4
   1d12e:	f7ff ffc7 	bl	1d0c0 <net_buf_simple_pull>

	return sys_be32_to_cpu(val);
}
   1d132:	4620      	mov	r0, r4
   1d134:	bd10      	pop	{r4, pc}

0001d136 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1d136:	6802      	ldr	r2, [r0, #0]
   1d138:	6880      	ldr	r0, [r0, #8]
}
   1d13a:	1a10      	subs	r0, r2, r0
   1d13c:	4770      	bx	lr

0001d13e <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1d13e:	8883      	ldrh	r3, [r0, #4]
   1d140:	88c2      	ldrh	r2, [r0, #6]
   1d142:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   1d144:	6803      	ldr	r3, [r0, #0]
   1d146:	6880      	ldr	r0, [r0, #8]
   1d148:	1a18      	subs	r0, r3, r0
}
   1d14a:	1a10      	subs	r0, r2, r0
   1d14c:	4770      	bx	lr

0001d14e <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1d14e:	6903      	ldr	r3, [r0, #16]
   1d150:	b2c9      	uxtb	r1, r1
   1d152:	220c      	movs	r2, #12
   1d154:	fb01 3302 	mla	r3, r1, r2, r3
   1d158:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   1d15a:	f000 0007 	and.w	r0, r0, #7
   1d15e:	4770      	bx	lr

0001d160 <set_on_state>:
	__asm__ volatile(
   1d160:	f04f 0320 	mov.w	r3, #32
   1d164:	f3ef 8211 	mrs	r2, BASEPRI
   1d168:	f383 8812 	msr	BASEPRI_MAX, r3
   1d16c:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1d170:	6803      	ldr	r3, [r0, #0]
   1d172:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1d176:	f043 0302 	orr.w	r3, r3, #2
   1d17a:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1d17c:	f382 8811 	msr	BASEPRI, r2
   1d180:	f3bf 8f6f 	isb	sy
}
   1d184:	4770      	bx	lr

0001d186 <stop>:
{
   1d186:	4603      	mov	r3, r0
   1d188:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
   1d18a:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   1d18c:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   1d18e:	f04f 0420 	mov.w	r4, #32
   1d192:	f3ef 8611 	mrs	r6, BASEPRI
   1d196:	f384 8812 	msr	BASEPRI_MAX, r4
   1d19a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1d19e:	250c      	movs	r5, #12
   1d1a0:	fb05 0401 	mla	r4, r5, r1, r0
   1d1a4:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1d1a6:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   1d1aa:	d001      	beq.n	1d1b0 <stop+0x2a>
   1d1ac:	42a2      	cmp	r2, r4
   1d1ae:	d110      	bne.n	1d1d2 <stop+0x4c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1d1b0:	fb05 0001 	mla	r0, r5, r1, r0
   1d1b4:	2201      	movs	r2, #1
   1d1b6:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
   1d1b8:	2000      	movs	r0, #0
	__asm__ volatile(
   1d1ba:	f386 8811 	msr	BASEPRI, r6
   1d1be:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   1d1c2:	b928      	cbnz	r0, 1d1d0 <stop+0x4a>
	get_sub_config(dev, type)->stop();
   1d1c4:	685b      	ldr	r3, [r3, #4]
   1d1c6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   1d1ca:	684b      	ldr	r3, [r1, #4]
   1d1cc:	4798      	blx	r3
	return 0;
   1d1ce:	2000      	movs	r0, #0
}
   1d1d0:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
   1d1d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d1d6:	e7f0      	b.n	1d1ba <stop+0x34>

0001d1d8 <api_stop>:
	return stop(dev, subsys, CTX_API);
   1d1d8:	2280      	movs	r2, #128	; 0x80
   1d1da:	f7ff bfd4 	b.w	1d186 <stop>

0001d1de <async_start>:
{
   1d1de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d1e0:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   1d1e2:	6904      	ldr	r4, [r0, #16]
{
   1d1e4:	4605      	mov	r5, r0
   1d1e6:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   1d1e8:	f04f 0020 	mov.w	r0, #32
   1d1ec:	f3ef 8c11 	mrs	ip, BASEPRI
   1d1f0:	f380 8812 	msr	BASEPRI_MAX, r0
   1d1f4:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1d1f8:	260c      	movs	r6, #12
   1d1fa:	fb06 4601 	mla	r6, r6, r1, r4
   1d1fe:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1d200:	f000 0e07 	and.w	lr, r0, #7
   1d204:	f1be 0f01 	cmp.w	lr, #1
   1d208:	d111      	bne.n	1d22e <async_start+0x50>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1d20a:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
   1d20c:	2600      	movs	r6, #0
	__asm__ volatile(
   1d20e:	f38c 8811 	msr	BASEPRI, ip
   1d212:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   1d216:	b946      	cbnz	r6, 1d22a <async_start+0x4c>
	subdata->cb = cb;
   1d218:	200c      	movs	r0, #12
   1d21a:	fb00 4401 	mla	r4, r0, r1, r4
	subdata->user_data = user_data;
   1d21e:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   1d222:	686b      	ldr	r3, [r5, #4]
   1d224:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
   1d228:	4798      	blx	r3
}
   1d22a:	4630      	mov	r0, r6
   1d22c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   1d22e:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
   1d232:	4287      	cmp	r7, r0
   1d234:	bf14      	ite	ne
   1d236:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
   1d23a:	f06f 0677 	mvneq.w	r6, #119	; 0x77
   1d23e:	e7e6      	b.n	1d20e <async_start+0x30>

0001d240 <api_start>:
{
   1d240:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   1d242:	2480      	movs	r4, #128	; 0x80
   1d244:	9400      	str	r4, [sp, #0]
   1d246:	f7ff ffca 	bl	1d1de <async_start>
}
   1d24a:	b002      	add	sp, #8
   1d24c:	bd10      	pop	{r4, pc}

0001d24e <onoff_started_callback>:
	return &data->mgr[type];
   1d24e:	6900      	ldr	r0, [r0, #16]
{
   1d250:	b410      	push	{r4}
	return &data->mgr[type];
   1d252:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   1d254:	241c      	movs	r4, #28
   1d256:	fb03 0004 	mla	r0, r3, r4, r0
   1d25a:	2100      	movs	r1, #0
}
   1d25c:	bc10      	pop	{r4}
	notify(mgr, 0);
   1d25e:	4710      	bx	r2

0001d260 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1d260:	2000      	movs	r0, #0
   1d262:	f7f7 b831 	b.w	142c8 <nrfx_clock_stop>

0001d266 <blocking_start_callback>:
{
   1d266:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   1d268:	f7f8 ba26 	b.w	156b8 <z_impl_k_sem_give>

0001d26c <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d26c:	6843      	ldr	r3, [r0, #4]
   1d26e:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   1d270:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   1d274:	600b      	str	r3, [r1, #0]
}
   1d276:	2000      	movs	r0, #0
   1d278:	4770      	bx	lr

0001d27a <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d27a:	6843      	ldr	r3, [r0, #4]
   1d27c:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   1d27e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   1d282:	4042      	eors	r2, r0
   1d284:	400a      	ands	r2, r1
   1d286:	4042      	eors	r2, r0
    p_reg->OUT = value;
   1d288:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   1d28c:	2000      	movs	r0, #0
   1d28e:	4770      	bx	lr

0001d290 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d290:	6843      	ldr	r3, [r0, #4]
   1d292:	685b      	ldr	r3, [r3, #4]
}
   1d294:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   1d296:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   1d29a:	4770      	bx	lr

0001d29c <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d29c:	6843      	ldr	r3, [r0, #4]
   1d29e:	685b      	ldr	r3, [r3, #4]
}
   1d2a0:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   1d2a2:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   1d2a6:	4770      	bx	lr

0001d2a8 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d2a8:	6843      	ldr	r3, [r0, #4]
   1d2aa:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   1d2ac:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   1d2b0:	404b      	eors	r3, r1
    p_reg->OUT = value;
   1d2b2:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   1d2b6:	2000      	movs	r0, #0
   1d2b8:	4770      	bx	lr

0001d2ba <gpio_nrfx_manage_callback>:
	return port->data;
   1d2ba:	6903      	ldr	r3, [r0, #16]
	return list->head;
   1d2bc:	6858      	ldr	r0, [r3, #4]
{
   1d2be:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   1d2c0:	b158      	cbz	r0, 1d2da <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1d2c2:	2400      	movs	r4, #0
   1d2c4:	4281      	cmp	r1, r0
   1d2c6:	d112      	bne.n	1d2ee <gpio_nrfx_manage_callback+0x34>
	return node->next;
   1d2c8:	6808      	ldr	r0, [r1, #0]
	return list->tail;
   1d2ca:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
   1d2cc:	b954      	cbnz	r4, 1d2e4 <gpio_nrfx_manage_callback+0x2a>
   1d2ce:	428d      	cmp	r5, r1
	list->head = node;
   1d2d0:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1d2d2:	d100      	bne.n	1d2d6 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   1d2d4:	6098      	str	r0, [r3, #8]
	parent->next = child;
   1d2d6:	2000      	movs	r0, #0
   1d2d8:	6008      	str	r0, [r1, #0]
	if (set) {
   1d2da:	b96a      	cbnz	r2, 1d2f8 <gpio_nrfx_manage_callback+0x3e>
	return 0;
   1d2dc:	2000      	movs	r0, #0
}
   1d2de:	bd30      	pop	{r4, r5, pc}
   1d2e0:	4628      	mov	r0, r5
   1d2e2:	e7ef      	b.n	1d2c4 <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
   1d2e4:	428d      	cmp	r5, r1
	parent->next = child;
   1d2e6:	6020      	str	r0, [r4, #0]
	list->tail = node;
   1d2e8:	bf08      	it	eq
   1d2ea:	609c      	streq	r4, [r3, #8]
}
   1d2ec:	e7f3      	b.n	1d2d6 <gpio_nrfx_manage_callback+0x1c>
	return node->next;
   1d2ee:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1d2f0:	4604      	mov	r4, r0
   1d2f2:	2d00      	cmp	r5, #0
   1d2f4:	d1f4      	bne.n	1d2e0 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   1d2f6:	b13a      	cbz	r2, 1d308 <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
   1d2f8:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
   1d2fa:	685a      	ldr	r2, [r3, #4]
   1d2fc:	600a      	str	r2, [r1, #0]
	list->head = node;
   1d2fe:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1d300:	2800      	cmp	r0, #0
   1d302:	d1eb      	bne.n	1d2dc <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   1d304:	6099      	str	r1, [r3, #8]
}
   1d306:	e7ea      	b.n	1d2de <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   1d308:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1d30c:	e7e7      	b.n	1d2de <gpio_nrfx_manage_callback+0x24>

0001d30e <pin_interrupt_configure>:
{
	int rc = 0;

	if (!IS_ENABLED(CONFIG_GPIO_SX1509B_INTERRUPT)
	    && (mode != GPIO_INT_MODE_DISABLED)) {
		return -ENOTSUP;
   1d30e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000

	k_sem_give(&drv_data->lock);
#endif /* CONFIG_GPIO_SX1509B_INTERRUPT */

	return rc;
}
   1d312:	bf14      	ite	ne
   1d314:	f06f 0085 	mvnne.w	r0, #133	; 0x85
   1d318:	2000      	moveq	r0, #0
   1d31a:	4770      	bx	lr

0001d31c <k_sem_take.constprop.0.isra.0>:
	return z_impl_k_sem_take(sem, timeout);
   1d31c:	f7f8 b9f2 	b.w	15704 <z_impl_k_sem_take>

0001d320 <i2c_write>:
{
   1d320:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	msg.len = num_bytes;
   1d322:	e9cd 1201 	strd	r1, r2, [sp, #4]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1d326:	2202      	movs	r2, #2
   1d328:	f88d 200c 	strb.w	r2, [sp, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1d32c:	6882      	ldr	r2, [r0, #8]
   1d32e:	a901      	add	r1, sp, #4
   1d330:	6894      	ldr	r4, [r2, #8]
   1d332:	2201      	movs	r2, #1
   1d334:	47a0      	blx	r4
}
   1d336:	b004      	add	sp, #16
   1d338:	bd10      	pop	{r4, pc}

0001d33a <i2c_reg_write_word_be>:
{
   1d33a:	b507      	push	{r0, r1, r2, lr}
	uint8_t tx_buf[3] = { reg_addr, value >> 8, value & 0xff };
   1d33c:	f88d 2004 	strb.w	r2, [sp, #4]
   1d340:	0a1a      	lsrs	r2, r3, #8
   1d342:	f88d 2005 	strb.w	r2, [sp, #5]
   1d346:	f88d 3006 	strb.w	r3, [sp, #6]
	return i2c_write(dev, tx_buf, 3, dev_addr);
   1d34a:	2203      	movs	r2, #3
   1d34c:	460b      	mov	r3, r1
   1d34e:	a901      	add	r1, sp, #4
   1d350:	f7ff ffe6 	bl	1d320 <i2c_write>
}
   1d354:	b003      	add	sp, #12
   1d356:	f85d fb04 	ldr.w	pc, [sp], #4

0001d35a <port_write>:
{
   1d35a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d35e:	4605      	mov	r5, r0
   1d360:	4689      	mov	r9, r1
   1d362:	4614      	mov	r4, r2
   1d364:	4698      	mov	r8, r3
	if (k_is_in_isr()) {
   1d366:	f001 f84f 	bl	1e408 <k_is_in_isr>
   1d36a:	bb08      	cbnz	r0, 1d3b0 <port_write+0x56>
	const struct sx1509b_config *cfg = dev->config;
   1d36c:	686f      	ldr	r7, [r5, #4]
	struct sx1509b_drv_data *drv_data = dev->data;
   1d36e:	692d      	ldr	r5, [r5, #16]
	k_sem_take(&drv_data->lock, K_FOREVER);
   1d370:	f105 0620 	add.w	r6, r5, #32
   1d374:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d378:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d37c:	4630      	mov	r0, r6
   1d37e:	f7ff ffcd 	bl	1d31c <k_sem_take.constprop.0.isra.0>
	uint16_t orig_out = *outp;
   1d382:	8b28      	ldrh	r0, [r5, #24]
	int rc = i2c_reg_write_word_be(drv_data->i2c_master, cfg->i2c_slave_addr,
   1d384:	8939      	ldrh	r1, [r7, #8]
	uint16_t out = ((orig_out & ~mask) | (value & mask)) ^ toggle;
   1d386:	4044      	eors	r4, r0
   1d388:	ea04 0409 	and.w	r4, r4, r9
   1d38c:	ea84 0408 	eor.w	r4, r4, r8
   1d390:	4044      	eors	r4, r0
   1d392:	b2a4      	uxth	r4, r4
	int rc = i2c_reg_write_word_be(drv_data->i2c_master, cfg->i2c_slave_addr,
   1d394:	6868      	ldr	r0, [r5, #4]
   1d396:	4623      	mov	r3, r4
   1d398:	2210      	movs	r2, #16
   1d39a:	f7ff ffce 	bl	1d33a <i2c_reg_write_word_be>
	if (rc == 0) {
   1d39e:	4607      	mov	r7, r0
   1d3a0:	b900      	cbnz	r0, 1d3a4 <port_write+0x4a>
		*outp = out;
   1d3a2:	832c      	strh	r4, [r5, #24]
	z_impl_k_sem_give(sem);
   1d3a4:	4630      	mov	r0, r6
   1d3a6:	f7f8 f987 	bl	156b8 <z_impl_k_sem_give>
}
   1d3aa:	4638      	mov	r0, r7
   1d3ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EWOULDBLOCK;
   1d3b0:	f06f 070a 	mvn.w	r7, #10
   1d3b4:	e7f9      	b.n	1d3aa <port_write+0x50>

0001d3b6 <port_toggle_bits>:
	return port_write(dev, 0, 0, pins);
   1d3b6:	2200      	movs	r2, #0
{
   1d3b8:	460b      	mov	r3, r1
	return port_write(dev, 0, 0, pins);
   1d3ba:	4611      	mov	r1, r2
   1d3bc:	f7ff bfcd 	b.w	1d35a <port_write>

0001d3c0 <port_clear_bits>:
	return port_write(dev, pins, 0, 0);
   1d3c0:	2300      	movs	r3, #0
   1d3c2:	461a      	mov	r2, r3
   1d3c4:	f7ff bfc9 	b.w	1d35a <port_write>

0001d3c8 <port_set_bits>:
{
   1d3c8:	460a      	mov	r2, r1
	return port_write(dev, pins, pins, 0);
   1d3ca:	2300      	movs	r3, #0
   1d3cc:	f7ff bfc5 	b.w	1d35a <port_write>

0001d3d0 <port_set_masked>:
	return port_write(dev, mask, value, 0);
   1d3d0:	2300      	movs	r3, #0
   1d3d2:	f7ff bfc2 	b.w	1d35a <port_write>

0001d3d6 <write_pin_state>:
{
   1d3d6:	b530      	push	{r4, r5, lr}
   1d3d8:	b087      	sub	sp, #28
   1d3da:	460c      	mov	r4, r1
	pin_buf.reg = SX1509B_REG_INPUT_DISABLE;
   1d3dc:	2100      	movs	r1, #0
   1d3de:	f88d 1004 	strb.w	r1, [sp, #4]
	pin_buf.pins.input_disable = sys_cpu_to_be16(pins->input_disable);
   1d3e2:	8811      	ldrh	r1, [r2, #0]
   1d3e4:	ba49      	rev16	r1, r1
   1d3e6:	f8ad 1005 	strh.w	r1, [sp, #5]
	pin_buf.pins.long_slew = sys_cpu_to_be16(pins->long_slew);
   1d3ea:	8851      	ldrh	r1, [r2, #2]
   1d3ec:	ba49      	rev16	r1, r1
   1d3ee:	f8ad 1007 	strh.w	r1, [sp, #7]
	pin_buf.pins.low_drive = sys_cpu_to_be16(pins->low_drive);
   1d3f2:	8891      	ldrh	r1, [r2, #4]
   1d3f4:	ba49      	rev16	r1, r1
   1d3f6:	f8ad 1009 	strh.w	r1, [sp, #9]
	pin_buf.pins.pull_up = sys_cpu_to_be16(pins->pull_up);
   1d3fa:	88d1      	ldrh	r1, [r2, #6]
   1d3fc:	ba49      	rev16	r1, r1
   1d3fe:	f8ad 100b 	strh.w	r1, [sp, #11]
	pin_buf.pins.pull_down = sys_cpu_to_be16(pins->pull_down);
   1d402:	8911      	ldrh	r1, [r2, #8]
   1d404:	ba49      	rev16	r1, r1
   1d406:	f8ad 100d 	strh.w	r1, [sp, #13]
	pin_buf.pins.open_drain = sys_cpu_to_be16(pins->open_drain);
   1d40a:	8951      	ldrh	r1, [r2, #10]
   1d40c:	ba49      	rev16	r1, r1
   1d40e:	f8ad 100f 	strh.w	r1, [sp, #15]
	pin_buf.pins.polarity = sys_cpu_to_be16(pins->polarity);
   1d412:	8991      	ldrh	r1, [r2, #12]
   1d414:	ba49      	rev16	r1, r1
   1d416:	f8ad 1011 	strh.w	r1, [sp, #17]
	pin_buf.pins.dir = sys_cpu_to_be16(pins->dir);
   1d41a:	89d1      	ldrh	r1, [r2, #14]
   1d41c:	8a12      	ldrh	r2, [r2, #16]
{
   1d41e:	4605      	mov	r5, r0
	pin_buf.pins.dir = sys_cpu_to_be16(pins->dir);
   1d420:	ba49      	rev16	r1, r1
   1d422:	f8ad 1013 	strh.w	r1, [sp, #19]
	pin_buf.pins.data = sys_cpu_to_be16(pins->data);
   1d426:	ba51      	rev16	r1, r2
   1d428:	f8ad 1015 	strh.w	r1, [sp, #21]
		rc = i2c_reg_write_word_be(drv_data->i2c_master,
   1d42c:	6860      	ldr	r0, [r4, #4]
   1d42e:	8929      	ldrh	r1, [r5, #8]
	if (data_first) {
   1d430:	b163      	cbz	r3, 1d44c <write_pin_state+0x76>
		rc = i2c_reg_write_word_be(drv_data->i2c_master,
   1d432:	4613      	mov	r3, r2
   1d434:	2210      	movs	r2, #16
   1d436:	f7ff ff80 	bl	1d33a <i2c_reg_write_word_be>
		if (rc == 0) {
   1d43a:	b928      	cbnz	r0, 1d448 <write_pin_state+0x72>
			rc = i2c_write(drv_data->i2c_master, &pin_buf.reg,
   1d43c:	892b      	ldrh	r3, [r5, #8]
   1d43e:	6860      	ldr	r0, [r4, #4]
   1d440:	2211      	movs	r2, #17
   1d442:	a901      	add	r1, sp, #4
		rc = i2c_write(drv_data->i2c_master, &pin_buf.reg,
   1d444:	f7ff ff6c 	bl	1d320 <i2c_write>
}
   1d448:	b007      	add	sp, #28
   1d44a:	bd30      	pop	{r4, r5, pc}
		rc = i2c_write(drv_data->i2c_master, &pin_buf.reg,
   1d44c:	460b      	mov	r3, r1
   1d44e:	2213      	movs	r2, #19
   1d450:	a901      	add	r1, sp, #4
   1d452:	e7f7      	b.n	1d444 <write_pin_state+0x6e>

0001d454 <sx1509b_init>:
 *
 * @param dev Device struct
 * @return 0 if successful, failed otherwise.
 */
static int sx1509b_init(const struct device *dev)
{
   1d454:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	const struct sx1509b_config *cfg = dev->config;
   1d458:	6846      	ldr	r6, [r0, #4]
	struct sx1509b_drv_data *drv_data = dev->data;
   1d45a:	6905      	ldr	r5, [r0, #16]
	int rc;

	drv_data->i2c_master = device_get_binding(cfg->i2c_master_dev_name);
   1d45c:	6870      	ldr	r0, [r6, #4]
   1d45e:	f7f7 fed1 	bl	15204 <z_impl_device_get_binding>
   1d462:	6068      	str	r0, [r5, #4]
	if (!drv_data->i2c_master) {
   1d464:	2800      	cmp	r0, #0
   1d466:	d061      	beq.n	1d52c <sx1509b_init+0xd8>
	drv_data->irq_state = (struct sx1509b_irq_state) {
		.interrupt_mask = ALL_PINS,
	};
#endif

	rc = i2c_reg_write_byte(drv_data->i2c_master, cfg->i2c_slave_addr,
   1d468:	8933      	ldrh	r3, [r6, #8]
	uint8_t tx_buf[2] = {reg_addr, value};
   1d46a:	f04f 087d 	mov.w	r8, #125	; 0x7d
   1d46e:	2712      	movs	r7, #18
	return i2c_write(dev, tx_buf, 2, dev_addr);
   1d470:	2202      	movs	r2, #2
   1d472:	a901      	add	r1, sp, #4
	uint8_t tx_buf[2] = {reg_addr, value};
   1d474:	f88d 8004 	strb.w	r8, [sp, #4]
   1d478:	f88d 7005 	strb.w	r7, [sp, #5]
	return i2c_write(dev, tx_buf, 2, dev_addr);
   1d47c:	f7ff ff50 	bl	1d320 <i2c_write>
				SX1509B_REG_RESET, SX1509B_REG_RESET_MAGIC0);
	if (rc != 0) {
   1d480:	4604      	mov	r4, r0
   1d482:	2800      	cmp	r0, #0
   1d484:	d14a      	bne.n	1d51c <sx1509b_init+0xc8>
	uint8_t tx_buf[2] = {reg_addr, value};
   1d486:	2234      	movs	r2, #52	; 0x34
		LOG_ERR("%s: reset m0 failed: %d\n", dev->name, rc);
		goto out;
	}
	rc = i2c_reg_write_byte(drv_data->i2c_master, cfg->i2c_slave_addr,
   1d488:	6868      	ldr	r0, [r5, #4]
   1d48a:	8933      	ldrh	r3, [r6, #8]
   1d48c:	f88d 2005 	strb.w	r2, [sp, #5]
	return i2c_write(dev, tx_buf, 2, dev_addr);
   1d490:	a901      	add	r1, sp, #4
   1d492:	2202      	movs	r2, #2
	uint8_t tx_buf[2] = {reg_addr, value};
   1d494:	f88d 8004 	strb.w	r8, [sp, #4]
	return i2c_write(dev, tx_buf, 2, dev_addr);
   1d498:	f7ff ff42 	bl	1d320 <i2c_write>
				SX1509B_REG_RESET, SX1509B_REG_RESET_MAGIC1);
	if (rc != 0) {
   1d49c:	4604      	mov	r4, r0
   1d49e:	2800      	cmp	r0, #0
   1d4a0:	d13c      	bne.n	1d51c <sx1509b_init+0xc8>
	return z_impl_k_sleep(timeout);
   1d4a2:	2100      	movs	r1, #0
   1d4a4:	2063      	movs	r0, #99	; 0x63
   1d4a6:	f7f8 fda3 	bl	15ff0 <z_impl_k_sleep>
	}

	k_sleep(K_MSEC(RESET_DELAY_MS));

	/* Reset state mediated by initial configuration */
	drv_data->pin_state = (struct sx1509b_pin_state) {
   1d4aa:	463a      	mov	r2, r7
   1d4ac:	4621      	mov	r1, r4
   1d4ae:	f105 0008 	add.w	r0, r5, #8
   1d4b2:	f7f9 feda 	bl	1726a <memset>
   1d4b6:	f24e 03e0 	movw	r3, #57568	; 0xe0e0
	uint8_t tx_buf[2] = {reg_addr, value};
   1d4ba:	221e      	movs	r2, #30
   1d4bc:	832b      	strh	r3, [r5, #24]
			& ~(DT_INST_PROP(0, init_out_low)
			    | DT_INST_PROP(0, init_out_high))),
		.data = (ALL_PINS
			 & ~DT_INST_PROP(0, init_out_low)),
	};
	drv_data->debounce_state = (struct sx1509b_debounce_state) {
   1d4be:	83ac      	strh	r4, [r5, #28]
   1d4c0:	77ac      	strb	r4, [r5, #30]
		.debounce_config = CONFIG_GPIO_SX1509B_DEBOUNCE_TIME,
	};

	rc = i2c_reg_write_byte(drv_data->i2c_master, cfg->i2c_slave_addr,
   1d4c2:	6868      	ldr	r0, [r5, #4]
   1d4c4:	8933      	ldrh	r3, [r6, #8]
   1d4c6:	f88d 2004 	strb.w	r2, [sp, #4]
   1d4ca:	2240      	movs	r2, #64	; 0x40
   1d4cc:	f88d 2005 	strb.w	r2, [sp, #5]
	return i2c_write(dev, tx_buf, 2, dev_addr);
   1d4d0:	a901      	add	r1, sp, #4
   1d4d2:	2202      	movs	r2, #2
   1d4d4:	f7ff ff24 	bl	1d320 <i2c_write>
	drv_data->debounce_state = (struct sx1509b_debounce_state) {
   1d4d8:	4627      	mov	r7, r4
				SX1509B_REG_CLOCK,
				SX1509B_REG_CLOCK_FOSC_INT_2MHZ);
	if (rc == 0) {
   1d4da:	4604      	mov	r4, r0
   1d4dc:	b9f0      	cbnz	r0, 1d51c <sx1509b_init+0xc8>
		rc = i2c_reg_write_word_be(drv_data->i2c_master,
   1d4de:	8b2b      	ldrh	r3, [r5, #24]
   1d4e0:	8931      	ldrh	r1, [r6, #8]
   1d4e2:	6868      	ldr	r0, [r5, #4]
   1d4e4:	2210      	movs	r2, #16
   1d4e6:	f7ff ff28 	bl	1d33a <i2c_reg_write_word_be>
					   cfg->i2c_slave_addr,
					   SX1509B_REG_DATA,
					   drv_data->pin_state.data);
	}
	if (rc == 0) {
   1d4ea:	4604      	mov	r4, r0
   1d4ec:	b9b0      	cbnz	r0, 1d51c <sx1509b_init+0xc8>
		rc = i2c_reg_write_word_be(drv_data->i2c_master,
   1d4ee:	8aeb      	ldrh	r3, [r5, #22]
   1d4f0:	8931      	ldrh	r1, [r6, #8]
   1d4f2:	6868      	ldr	r0, [r5, #4]
   1d4f4:	220e      	movs	r2, #14
   1d4f6:	f7ff ff20 	bl	1d33a <i2c_reg_write_word_be>
					   cfg->i2c_slave_addr,
					   SX1509B_REG_DIR,
					   drv_data->pin_state.dir);
	}
	if (rc == 0) {
   1d4fa:	4604      	mov	r4, r0
   1d4fc:	b970      	cbnz	r0, 1d51c <sx1509b_init+0xc8>
	uint8_t tx_buf[3] = { reg_addr, value };
   1d4fe:	221f      	movs	r2, #31
		rc = i2c_reg_write_byte_be(
   1d500:	6868      	ldr	r0, [r5, #4]
   1d502:	8933      	ldrh	r3, [r6, #8]
	uint8_t tx_buf[3] = { reg_addr, value };
   1d504:	f88d 2004 	strb.w	r2, [sp, #4]
   1d508:	2298      	movs	r2, #152	; 0x98
   1d50a:	f88d 2005 	strb.w	r2, [sp, #5]
	return i2c_write(dev, tx_buf, 2, dev_addr);
   1d50e:	a901      	add	r1, sp, #4
   1d510:	2202      	movs	r2, #2
	uint8_t tx_buf[3] = { reg_addr, value };
   1d512:	f88d 7006 	strb.w	r7, [sp, #6]
	return i2c_write(dev, tx_buf, 2, dev_addr);
   1d516:	f7ff ff03 	bl	1d320 <i2c_write>
   1d51a:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   1d51c:	f105 0020 	add.w	r0, r5, #32
   1d520:	f7f8 f8ca 	bl	156b8 <z_impl_k_sem_give>
	} else {
		LOG_INF("%s init ok", dev->name);
	}
	k_sem_give(&drv_data->lock);
	return rc;
}
   1d524:	4620      	mov	r0, r4
   1d526:	b002      	add	sp, #8
   1d528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rc = -EINVAL;
   1d52c:	f06f 0415 	mvn.w	r4, #21
   1d530:	e7f4      	b.n	1d51c <sx1509b_init+0xc8>

0001d532 <sx1509b_config>:
{
   1d532:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct sx1509b_config *cfg = dev->config;
   1d536:	f8d0 a004 	ldr.w	sl, [r0, #4]
	struct sx1509b_drv_data *drv_data = dev->data;
   1d53a:	6904      	ldr	r4, [r0, #16]
{
   1d53c:	460d      	mov	r5, r1
   1d53e:	4617      	mov	r7, r2
	if (k_is_in_isr()) {
   1d540:	f000 ff62 	bl	1e408 <k_is_in_isr>
   1d544:	4683      	mov	fp, r0
   1d546:	2800      	cmp	r0, #0
   1d548:	f040 808c 	bne.w	1d664 <sx1509b_config+0x132>
	if ((flags & GPIO_DS_ALT) != 0) {
   1d54c:	f417 0fa0 	tst.w	r7, #5242880	; 0x500000
   1d550:	f040 808b 	bne.w	1d66a <sx1509b_config+0x138>
	k_sem_take(&drv_data->lock, K_FOREVER);
   1d554:	f104 0920 	add.w	r9, r4, #32
   1d558:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d55c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d560:	4648      	mov	r0, r9
   1d562:	f7ff fedb 	bl	1d31c <k_sem_take.constprop.0.isra.0>
		drv_data->led_drv_enable &= ~BIT(pin);
   1d566:	2601      	movs	r6, #1
	if (drv_data->led_drv_enable & BIT(pin)) {
   1d568:	8b63      	ldrh	r3, [r4, #26]
		drv_data->led_drv_enable &= ~BIT(pin);
   1d56a:	40ae      	lsls	r6, r5
   1d56c:	b2b6      	uxth	r6, r6
	if (drv_data->led_drv_enable & BIT(pin)) {
   1d56e:	fa23 f505 	lsr.w	r5, r3, r5
		drv_data->led_drv_enable &= ~BIT(pin);
   1d572:	ea6f 0806 	mvn.w	r8, r6
	if (drv_data->led_drv_enable & BIT(pin)) {
   1d576:	07e9      	lsls	r1, r5, #31
		drv_data->led_drv_enable &= ~BIT(pin);
   1d578:	fa1f f888 	uxth.w	r8, r8
	if (drv_data->led_drv_enable & BIT(pin)) {
   1d57c:	d44f      	bmi.n	1d61e <sx1509b_config+0xec>
	pins->open_drain &= ~BIT(pin);
   1d57e:	8a63      	ldrh	r3, [r4, #18]
   1d580:	ea03 0208 	and.w	r2, r3, r8
   1d584:	8262      	strh	r2, [r4, #18]
	if ((flags & GPIO_SINGLE_ENDED) != 0) {
   1d586:	07ba      	lsls	r2, r7, #30
   1d588:	d45c      	bmi.n	1d644 <sx1509b_config+0x112>
		pins->pull_up |= BIT(pin);
   1d58a:	89e3      	ldrh	r3, [r4, #14]
	if ((flags & GPIO_PULL_UP) != 0) {
   1d58c:	06f8      	lsls	r0, r7, #27
		pins->pull_up |= BIT(pin);
   1d58e:	bf4c      	ite	mi
   1d590:	4333      	orrmi	r3, r6
		pins->pull_up &= ~BIT(pin);
   1d592:	ea08 0303 	andpl.w	r3, r8, r3
   1d596:	81e3      	strh	r3, [r4, #14]
		pins->pull_down |= BIT(pin);
   1d598:	8a23      	ldrh	r3, [r4, #16]
	if ((flags & GPIO_PULL_DOWN) != 0) {
   1d59a:	06b9      	lsls	r1, r7, #26
		pins->pull_down |= BIT(pin);
   1d59c:	bf4c      	ite	mi
   1d59e:	4333      	orrmi	r3, r6
		pins->pull_down &= ~BIT(pin);
   1d5a0:	ea08 0303 	andpl.w	r3, r8, r3
   1d5a4:	8223      	strh	r3, [r4, #16]
		pins->input_disable &= ~BIT(pin);
   1d5a6:	8923      	ldrh	r3, [r4, #8]
	if ((flags & GPIO_INPUT) != 0) {
   1d5a8:	05fa      	lsls	r2, r7, #23
		pins->input_disable &= ~BIT(pin);
   1d5aa:	bf4c      	ite	mi
   1d5ac:	ea08 0303 	andmi.w	r3, r8, r3
		pins->input_disable |= BIT(pin);
   1d5b0:	4333      	orrpl	r3, r6
	if ((flags & GPIO_OUTPUT) != 0) {
   1d5b2:	05bd      	lsls	r5, r7, #22
   1d5b4:	8123      	strh	r3, [r4, #8]
		pins->dir &= ~BIT(pin);
   1d5b6:	8ae3      	ldrh	r3, [r4, #22]
	if ((flags & GPIO_OUTPUT) != 0) {
   1d5b8:	d54e      	bpl.n	1d658 <sx1509b_config+0x126>
		pins->dir &= ~BIT(pin);
   1d5ba:	ea08 0303 	and.w	r3, r8, r3
		if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   1d5be:	0578      	lsls	r0, r7, #21
		pins->dir &= ~BIT(pin);
   1d5c0:	82e3      	strh	r3, [r4, #22]
		if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   1d5c2:	d544      	bpl.n	1d64e <sx1509b_config+0x11c>
			pins->data &= ~BIT(pin);
   1d5c4:	8b23      	ldrh	r3, [r4, #24]
   1d5c6:	ea08 0303 	and.w	r3, r8, r3
			pins->data |= BIT(pin);
   1d5ca:	8323      	strh	r3, [r4, #24]
			data_first = true;
   1d5cc:	f04f 0b01 	mov.w	fp, #1
		debounce->debounce_enable |= BIT(pin);
   1d5d0:	f8b4 301d 	ldrh.w	r3, [r4, #29]
	if ((flags & GPIO_INT_DEBOUNCE) != 0) {
   1d5d4:	033a      	lsls	r2, r7, #12
		debounce->debounce_enable |= BIT(pin);
   1d5d6:	bf4c      	ite	mi
   1d5d8:	431e      	orrmi	r6, r3
		debounce->debounce_enable &= ~BIT(pin);
   1d5da:	ea08 0603 	andpl.w	r6, r8, r3
   1d5de:	f8a4 601d 	strh.w	r6, [r4, #29]
	rc = write_pin_state(cfg, drv_data, pins, data_first);
   1d5e2:	465b      	mov	r3, fp
   1d5e4:	f104 0208 	add.w	r2, r4, #8
   1d5e8:	4621      	mov	r1, r4
   1d5ea:	4650      	mov	r0, sl
   1d5ec:	f7ff fef3 	bl	1d3d6 <write_pin_state>
	if (rc == 0) {
   1d5f0:	4605      	mov	r5, r0
   1d5f2:	bb00      	cbnz	r0, 1d636 <sx1509b_config+0x104>
		debounce_buf.reg = SX1509B_REG_DEBOUNCE_CONFIG;
   1d5f4:	2322      	movs	r3, #34	; 0x22
   1d5f6:	f88d 3004 	strb.w	r3, [sp, #4]
			= debounce->debounce_config;
   1d5fa:	7f23      	ldrb	r3, [r4, #28]
   1d5fc:	f88d 3005 	strb.w	r3, [sp, #5]
			= sys_cpu_to_be16(debounce->debounce_enable);
   1d600:	f8b4 301d 	ldrh.w	r3, [r4, #29]
		rc = i2c_write(drv_data->i2c_master,
   1d604:	6860      	ldr	r0, [r4, #4]
			= sys_cpu_to_be16(debounce->debounce_enable);
   1d606:	ba5b      	rev16	r3, r3
		rc = i2c_write(drv_data->i2c_master,
   1d608:	2204      	movs	r2, #4
			= sys_cpu_to_be16(debounce->debounce_enable);
   1d60a:	f8ad 3006 	strh.w	r3, [sp, #6]
		rc = i2c_write(drv_data->i2c_master,
   1d60e:	eb0d 0102 	add.w	r1, sp, r2
   1d612:	f8ba 3008 	ldrh.w	r3, [sl, #8]
   1d616:	f7ff fe83 	bl	1d320 <i2c_write>
   1d61a:	4605      	mov	r5, r0
   1d61c:	e00b      	b.n	1d636 <sx1509b_config+0x104>
		drv_data->led_drv_enable &= ~BIT(pin);
   1d61e:	ea03 0308 	and.w	r3, r3, r8
		rc = i2c_reg_write_word_be(drv_data->i2c_master,
   1d622:	f8ba 1008 	ldrh.w	r1, [sl, #8]
   1d626:	6860      	ldr	r0, [r4, #4]
		drv_data->led_drv_enable &= ~BIT(pin);
   1d628:	8363      	strh	r3, [r4, #26]
		rc = i2c_reg_write_word_be(drv_data->i2c_master,
   1d62a:	2220      	movs	r2, #32
   1d62c:	f7ff fe85 	bl	1d33a <i2c_reg_write_word_be>
		if (rc) {
   1d630:	4605      	mov	r5, r0
   1d632:	2800      	cmp	r0, #0
   1d634:	d0a3      	beq.n	1d57e <sx1509b_config+0x4c>
   1d636:	4648      	mov	r0, r9
   1d638:	f7f8 f83e 	bl	156b8 <z_impl_k_sem_give>
}
   1d63c:	4628      	mov	r0, r5
   1d63e:	b003      	add	sp, #12
   1d640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((flags & GPIO_LINE_OPEN_DRAIN) != 0) {
   1d644:	077d      	lsls	r5, r7, #29
   1d646:	d50a      	bpl.n	1d65e <sx1509b_config+0x12c>
			pins->open_drain |= BIT(pin);
   1d648:	4333      	orrs	r3, r6
   1d64a:	8263      	strh	r3, [r4, #18]
   1d64c:	e79d      	b.n	1d58a <sx1509b_config+0x58>
		} else if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1d64e:	0539      	lsls	r1, r7, #20
   1d650:	d5be      	bpl.n	1d5d0 <sx1509b_config+0x9e>
			pins->data |= BIT(pin);
   1d652:	8b23      	ldrh	r3, [r4, #24]
   1d654:	4333      	orrs	r3, r6
   1d656:	e7b8      	b.n	1d5ca <sx1509b_config+0x98>
		pins->dir |= BIT(pin);
   1d658:	4333      	orrs	r3, r6
   1d65a:	82e3      	strh	r3, [r4, #22]
   1d65c:	e7b8      	b.n	1d5d0 <sx1509b_config+0x9e>
			rc = -ENOTSUP;
   1d65e:	f06f 0585 	mvn.w	r5, #133	; 0x85
   1d662:	e7e8      	b.n	1d636 <sx1509b_config+0x104>
		return -EWOULDBLOCK;
   1d664:	f06f 050a 	mvn.w	r5, #10
   1d668:	e7e8      	b.n	1d63c <sx1509b_config+0x10a>
		return -ENOTSUP;
   1d66a:	f06f 0585 	mvn.w	r5, #133	; 0x85
   1d66e:	e7e5      	b.n	1d63c <sx1509b_config+0x10a>

0001d670 <port_get>:
{
   1d670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d674:	b088      	sub	sp, #32
	const struct sx1509b_config *cfg = dev->config;
   1d676:	f8d0 8004 	ldr.w	r8, [r0, #4]
	struct sx1509b_drv_data *drv_data = dev->data;
   1d67a:	6907      	ldr	r7, [r0, #16]
{
   1d67c:	460d      	mov	r5, r1
	if (k_is_in_isr()) {
   1d67e:	f000 fec3 	bl	1e408 <k_is_in_isr>
   1d682:	4604      	mov	r4, r0
   1d684:	bb78      	cbnz	r0, 1d6e6 <port_get+0x76>
	k_sem_take(&drv_data->lock, K_FOREVER);
   1d686:	f107 0620 	add.w	r6, r7, #32
   1d68a:	4630      	mov	r0, r6
   1d68c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d690:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d694:	f7ff fe42 	bl	1d31c <k_sem_take.constprop.0.isra.0>
	msg[0].buf = (uint8_t *)write_buf;
   1d698:	f10d 0205 	add.w	r2, sp, #5
   1d69c:	9202      	str	r2, [sp, #8]
	msg[0].len = num_write;
   1d69e:	2201      	movs	r2, #1
	rc = i2c_write_read(drv_data->i2c_master, cfg->i2c_slave_addr,
   1d6a0:	6878      	ldr	r0, [r7, #4]
   1d6a2:	9203      	str	r2, [sp, #12]
	uint8_t cmd = SX1509B_REG_DATA;
   1d6a4:	2310      	movs	r3, #16
	msg[1].buf = (uint8_t *)read_buf;
   1d6a6:	f10d 0206 	add.w	r2, sp, #6
   1d6aa:	f88d 3005 	strb.w	r3, [sp, #5]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1d6ae:	2107      	movs	r1, #7
	rc = i2c_write_read(drv_data->i2c_master, cfg->i2c_slave_addr,
   1d6b0:	f8b8 3008 	ldrh.w	r3, [r8, #8]
	msg[1].buf = (uint8_t *)read_buf;
   1d6b4:	9205      	str	r2, [sp, #20]
	msg[1].len = num_read;
   1d6b6:	2202      	movs	r2, #2
	msg[0].flags = I2C_MSG_WRITE;
   1d6b8:	f88d 4010 	strb.w	r4, [sp, #16]
	msg[1].len = num_read;
   1d6bc:	9206      	str	r2, [sp, #24]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1d6be:	f88d 101c 	strb.w	r1, [sp, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1d6c2:	6881      	ldr	r1, [r0, #8]
   1d6c4:	688c      	ldr	r4, [r1, #8]
   1d6c6:	a902      	add	r1, sp, #8
   1d6c8:	47a0      	blx	r4
	if (rc != 0) {
   1d6ca:	4604      	mov	r4, r0
   1d6cc:	b920      	cbnz	r0, 1d6d8 <port_get+0x68>
	*value = sys_be16_to_cpu(pin_data);
   1d6ce:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1d6d2:	ba5b      	rev16	r3, r3
   1d6d4:	b29b      	uxth	r3, r3
   1d6d6:	602b      	str	r3, [r5, #0]
   1d6d8:	4630      	mov	r0, r6
   1d6da:	f7f7 ffed 	bl	156b8 <z_impl_k_sem_give>
}
   1d6de:	4620      	mov	r0, r4
   1d6e0:	b008      	add	sp, #32
   1d6e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EWOULDBLOCK;
   1d6e6:	f06f 040a 	mvn.w	r4, #10
   1d6ea:	e7f8      	b.n	1d6de <port_get+0x6e>

0001d6ec <i2c_nrfx_twim_configure>:
{
   1d6ec:	b538      	push	{r3, r4, r5, lr}
	if (I2C_ADDR_10_BITS & i2c_config) {
   1d6ee:	07cb      	lsls	r3, r1, #31
{
   1d6f0:	4604      	mov	r4, r0
	if (I2C_ADDR_10_BITS & i2c_config) {
   1d6f2:	d41d      	bmi.n	1d730 <i2c_nrfx_twim_configure+0x44>
	switch (I2C_SPEED_GET(i2c_config)) {
   1d6f4:	f3c1 0142 	ubfx	r1, r1, #1, #3
   1d6f8:	2901      	cmp	r1, #1
   1d6fa:	d016      	beq.n	1d72a <i2c_nrfx_twim_configure+0x3e>
   1d6fc:	2902      	cmp	r1, #2
   1d6fe:	d117      	bne.n	1d730 <i2c_nrfx_twim_configure+0x44>
   1d700:	f04f 63c8 	mov.w	r3, #104857600	; 0x6400000
	struct i2c_nrfx_twim_data *dev_data = dev->data;
   1d704:	6925      	ldr	r5, [r4, #16]
	if (frequency != dev_data->twim_config.frequency) {
   1d706:	6baa      	ldr	r2, [r5, #56]	; 0x38
   1d708:	4293      	cmp	r3, r2
   1d70a:	d014      	beq.n	1d736 <i2c_nrfx_twim_configure+0x4a>
		dev_data->twim_config.frequency = frequency;
   1d70c:	63ab      	str	r3, [r5, #56]	; 0x38
	if (dev_data->twim_initialized) {
   1d70e:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
   1d712:	b12b      	cbz	r3, 1d720 <i2c_nrfx_twim_configure+0x34>
		nrfx_twim_uninit(&dev_config->twim);
   1d714:	6860      	ldr	r0, [r4, #4]
   1d716:	f7f7 fae3 	bl	14ce0 <nrfx_twim_uninit>
		dev_data->twim_initialized = false;
   1d71a:	2300      	movs	r3, #0
   1d71c:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
		return init_twim(dev);
   1d720:	4620      	mov	r0, r4
}
   1d722:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return init_twim(dev);
   1d726:	f7f5 b933 	b.w	12990 <init_twim>
		frequency = NRF_TWIM_FREQ_100K;
   1d72a:	f04f 73cc 	mov.w	r3, #26738688	; 0x1980000
   1d72e:	e7e9      	b.n	1d704 <i2c_nrfx_twim_configure+0x18>
	switch (I2C_SPEED_GET(i2c_config)) {
   1d730:	f06f 0015 	mvn.w	r0, #21
}
   1d734:	bd38      	pop	{r3, r4, r5, pc}
	return 0;
   1d736:	2000      	movs	r0, #0
   1d738:	e7fc      	b.n	1d734 <i2c_nrfx_twim_configure+0x48>

0001d73a <twim_0_init>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twim_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(0);
   1d73a:	b510      	push	{r4, lr}
   1d73c:	2200      	movs	r2, #0
   1d73e:	4604      	mov	r4, r0
   1d740:	2101      	movs	r1, #1
   1d742:	2003      	movs	r0, #3
   1d744:	f7e6 fabc 	bl	3cc0 <z_arm_irq_priority_set>
   1d748:	4620      	mov	r0, r4
   1d74a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1d74e:	f7f5 b91f 	b.w	12990 <init_twim>

0001d752 <twim_1_init>:
#endif

#ifdef CONFIG_I2C_1_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(1);
   1d752:	b510      	push	{r4, lr}
   1d754:	2200      	movs	r2, #0
   1d756:	4604      	mov	r4, r0
   1d758:	2101      	movs	r1, #1
   1d75a:	2004      	movs	r0, #4
   1d75c:	f7e6 fab0 	bl	3cc0 <z_arm_irq_priority_set>
   1d760:	4620      	mov	r0, r4
   1d762:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1d766:	f7f5 b913 	b.w	12990 <init_twim>

0001d76a <i2c_write_read.constprop.0>:
static inline int i2c_write_read(const struct device *dev, uint16_t addr,
   1d76a:	b510      	push	{r4, lr}
   1d76c:	b086      	sub	sp, #24
	msg[1].len = num_read;
   1d76e:	e9cd 2303 	strd	r2, r3, [sp, #12]
	msg[0].buf = (uint8_t *)write_buf;
   1d772:	9100      	str	r1, [sp, #0]
	msg[0].len = num_write;
   1d774:	2101      	movs	r1, #1
   1d776:	9101      	str	r1, [sp, #4]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1d778:	2307      	movs	r3, #7
	msg[0].flags = I2C_MSG_WRITE;
   1d77a:	2100      	movs	r1, #0
   1d77c:	f88d 1008 	strb.w	r1, [sp, #8]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1d780:	f88d 3014 	strb.w	r3, [sp, #20]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1d784:	6883      	ldr	r3, [r0, #8]
   1d786:	2202      	movs	r2, #2
   1d788:	689c      	ldr	r4, [r3, #8]
   1d78a:	4669      	mov	r1, sp
   1d78c:	235a      	movs	r3, #90	; 0x5a
   1d78e:	47a0      	blx	r4
}
   1d790:	b006      	add	sp, #24
   1d792:	bd10      	pop	{r4, pc}

0001d794 <gpio_pin_set.isra.0>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1d794:	2301      	movs	r3, #1
   1d796:	fa03 f101 	lsl.w	r1, r3, r1
   1d79a:	6903      	ldr	r3, [r0, #16]
   1d79c:	681b      	ldr	r3, [r3, #0]
   1d79e:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   1d7a0:	bf18      	it	ne
   1d7a2:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   1d7a6:	b112      	cbz	r2, 1d7ae <gpio_pin_set.isra.0+0x1a>
	return api->port_set_bits_raw(port, pins);
   1d7a8:	6883      	ldr	r3, [r0, #8]
   1d7aa:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   1d7ac:	4718      	bx	r3
   1d7ae:	6883      	ldr	r3, [r0, #8]
   1d7b0:	691b      	ldr	r3, [r3, #16]
   1d7b2:	e7fb      	b.n	1d7ac <gpio_pin_set.isra.0+0x18>

0001d7b4 <k_msleep.isra.0>:
static inline int32_t k_msleep(int32_t ms)
   1d7b4:	4601      	mov	r1, r0
			return ((t * to_hz + off) / from_hz);
   1d7b6:	f240 30e7 	movw	r0, #999	; 0x3e7
   1d7ba:	b508      	push	{r3, lr}
   1d7bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1d7c0:	2300      	movs	r3, #0
   1d7c2:	eb00 30c1 	add.w	r0, r0, r1, lsl #15
   1d7c6:	1449      	asrs	r1, r1, #17
   1d7c8:	f7e3 f8f8 	bl	9bc <__aeabi_uldivmod>
}
   1d7cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return z_impl_k_sleep(timeout);
   1d7d0:	f7f8 bc0e 	b.w	15ff0 <z_impl_k_sleep>

0001d7d4 <i2c_write.constprop.0>:
static inline int i2c_write(const struct device *dev, const uint8_t *buf,
   1d7d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	msg.len = num_bytes;
   1d7d6:	e9cd 1201 	strd	r1, r2, [sp, #4]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1d7da:	2202      	movs	r2, #2
   1d7dc:	f88d 200c 	strb.w	r2, [sp, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1d7e0:	6883      	ldr	r3, [r0, #8]
   1d7e2:	2201      	movs	r2, #1
   1d7e4:	689c      	ldr	r4, [r3, #8]
   1d7e6:	a901      	add	r1, sp, #4
   1d7e8:	235a      	movs	r3, #90	; 0x5a
   1d7ea:	47a0      	blx	r4
}
   1d7ec:	b004      	add	sp, #16
   1d7ee:	bd10      	pop	{r4, pc}

0001d7f0 <fetch_status>:
{
   1d7f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1d7f2:	2300      	movs	r3, #0
   1d7f4:	f88d 3007 	strb.w	r3, [sp, #7]
	return i2c_write_read(dev, dev_addr,
   1d7f8:	f10d 0205 	add.w	r2, sp, #5
   1d7fc:	2301      	movs	r3, #1
   1d7fe:	f10d 0107 	add.w	r1, sp, #7
   1d802:	4605      	mov	r5, r0
   1d804:	f7ff ffb1 	bl	1d76a <i2c_write_read.constprop.0>
	if (i2c_reg_read_byte(i2c, DT_INST_REG_ADDR(0),
   1d808:	2800      	cmp	r0, #0
   1d80a:	db10      	blt.n	1d82e <fetch_status+0x3e>
	rv = status;
   1d80c:	f89d 4005 	ldrb.w	r4, [sp, #5]
	if (status & CCS811_STATUS_ERROR) {
   1d810:	07e3      	lsls	r3, r4, #31
   1d812:	d513      	bpl.n	1d83c <fetch_status+0x4c>
		if (i2c_reg_read_byte(i2c, DT_INST_REG_ADDR(0),
   1d814:	23e0      	movs	r3, #224	; 0xe0
   1d816:	f88d 3007 	strb.w	r3, [sp, #7]
   1d81a:	f10d 0206 	add.w	r2, sp, #6
   1d81e:	2301      	movs	r3, #1
   1d820:	f10d 0107 	add.w	r1, sp, #7
   1d824:	4628      	mov	r0, r5
   1d826:	f7ff ffa0 	bl	1d76a <i2c_write_read.constprop.0>
   1d82a:	2800      	cmp	r0, #0
   1d82c:	da02      	bge.n	1d834 <fetch_status+0x44>
		return -EIO;
   1d82e:	f06f 0404 	mvn.w	r4, #4
   1d832:	e003      	b.n	1d83c <fetch_status+0x4c>
		rv |= (error_id << 8);
   1d834:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1d838:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
}
   1d83c:	4620      	mov	r0, r4
   1d83e:	b003      	add	sp, #12
   1d840:	bd30      	pop	{r4, r5, pc}

0001d842 <set_wake.isra.0>:
static void set_wake(struct ccs811_data *drv_data, bool enable)
   1d842:	b510      	push	{r4, lr}
	gpio_pin_set(drv_data->wake_gpio, WAKE_PIN, enable);
   1d844:	460a      	mov	r2, r1
static void set_wake(struct ccs811_data *drv_data, bool enable)
   1d846:	460c      	mov	r4, r1
	gpio_pin_set(drv_data->wake_gpio, WAKE_PIN, enable);
   1d848:	210c      	movs	r1, #12
   1d84a:	f7ff ffa3 	bl	1d794 <gpio_pin_set.isra.0>
	if (enable) {
   1d84e:	b124      	cbz	r4, 1d85a <set_wake.isra.0+0x18>
	z_impl_k_busy_wait(usec_to_wait);
   1d850:	2032      	movs	r0, #50	; 0x32
}
   1d852:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1d856:	f001 b8fc 	b.w	1ea52 <z_impl_k_busy_wait>
   1d85a:	2014      	movs	r0, #20
   1d85c:	e7f9      	b.n	1d852 <set_wake.isra.0+0x10>

0001d85e <ccs811_sample_fetch>:
{
   1d85e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct ccs811_data *drv_data = dev->data;
   1d860:	6905      	ldr	r5, [r0, #16]
	const uint8_t cmd = CCS811_REG_ALG_RESULT_DATA;
   1d862:	2302      	movs	r3, #2
	uint16_t buf[4] = { 0 };
   1d864:	2400      	movs	r4, #0
	set_wake(drv_data, true);
   1d866:	68e8      	ldr	r0, [r5, #12]
	const uint8_t cmd = CCS811_REG_ALG_RESULT_DATA;
   1d868:	f88d 3007 	strb.w	r3, [sp, #7]
	set_wake(drv_data, true);
   1d86c:	2101      	movs	r1, #1
	uint16_t buf[4] = { 0 };
   1d86e:	e9cd 4402 	strd	r4, r4, [sp, #8]
	set_wake(drv_data, true);
   1d872:	f7ff ffe6 	bl	1d842 <set_wake.isra.0>
	rc = i2c_write_read(drv_data->i2c, DT_INST_REG_ADDR(0),
   1d876:	2308      	movs	r3, #8
   1d878:	eb0d 0203 	add.w	r2, sp, r3
   1d87c:	f10d 0107 	add.w	r1, sp, #7
   1d880:	6828      	ldr	r0, [r5, #0]
   1d882:	f7ff ff72 	bl	1d76a <i2c_write_read.constprop.0>
	set_wake(drv_data, false);
   1d886:	4621      	mov	r1, r4
	rc = i2c_write_read(drv_data->i2c, DT_INST_REG_ADDR(0),
   1d888:	4606      	mov	r6, r0
	set_wake(drv_data, false);
   1d88a:	68e8      	ldr	r0, [r5, #12]
   1d88c:	f7ff ffd9 	bl	1d842 <set_wake.isra.0>
	if (rc < 0) {
   1d890:	42a6      	cmp	r6, r4
   1d892:	db1b      	blt.n	1d8cc <ccs811_sample_fetch+0x6e>
	rp->co2 = sys_be16_to_cpu(buf[0]);
   1d894:	f8bd 3008 	ldrh.w	r3, [sp, #8]
	status = sys_le16_to_cpu(buf[2]); /* sic */
   1d898:	f8bd 200c 	ldrh.w	r2, [sp, #12]
	rp->status = status;
   1d89c:	82ea      	strh	r2, [r5, #22]
   1d89e:	ba5b      	rev16	r3, r3
   1d8a0:	b299      	uxth	r1, r3
	rp->co2 = sys_be16_to_cpu(buf[0]);
   1d8a2:	822b      	strh	r3, [r5, #16]
	rp->voc = sys_be16_to_cpu(buf[1]);
   1d8a4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   1d8a8:	ba5b      	rev16	r3, r3
   1d8aa:	826b      	strh	r3, [r5, #18]
	rp->raw = sys_be16_to_cpu(buf[3]);
   1d8ac:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1d8b0:	ba5b      	rev16	r3, r3
   1d8b2:	82ab      	strh	r3, [r5, #20]
	if ((drv_data->app_fw_ver <= 0x11)
   1d8b4:	7e6b      	ldrb	r3, [r5, #25]
   1d8b6:	2b11      	cmp	r3, #17
   1d8b8:	d800      	bhi.n	1d8bc <ccs811_sample_fetch+0x5e>
	    && (rp->co2 != 0)) {
   1d8ba:	b951      	cbnz	r1, 1d8d2 <ccs811_sample_fetch+0x74>
	return (status & CCS811_STATUS_DATA_READY) ? 0 : -EAGAIN;
   1d8bc:	f012 0f08 	tst.w	r2, #8
   1d8c0:	bf14      	ite	ne
   1d8c2:	2000      	movne	r0, #0
   1d8c4:	f06f 000a 	mvneq.w	r0, #10
}
   1d8c8:	b004      	add	sp, #16
   1d8ca:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   1d8cc:	f06f 0004 	mvn.w	r0, #4
   1d8d0:	e7fa      	b.n	1d8c8 <ccs811_sample_fetch+0x6a>
	return (status & CCS811_STATUS_DATA_READY) ? 0 : -EAGAIN;
   1d8d2:	4620      	mov	r0, r4
   1d8d4:	e7f8      	b.n	1d8c8 <ccs811_sample_fetch+0x6a>

0001d8d6 <ccs811_result>:
	return &drv_data->result;
   1d8d6:	6900      	ldr	r0, [r0, #16]
}
   1d8d8:	3010      	adds	r0, #16
   1d8da:	4770      	bx	lr

0001d8dc <ccs811_configver_fetch>:
{
   1d8dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct ccs811_data *drv_data = dev->data;
   1d8de:	6906      	ldr	r6, [r0, #16]
	if (!ptr) {
   1d8e0:	460d      	mov	r5, r1
   1d8e2:	2900      	cmp	r1, #0
   1d8e4:	d037      	beq.n	1d956 <ccs811_configver_fetch+0x7a>
	set_wake(drv_data, true);
   1d8e6:	68f0      	ldr	r0, [r6, #12]
   1d8e8:	2101      	movs	r1, #1
   1d8ea:	f7ff ffaa 	bl	1d842 <set_wake.isra.0>
	cmd = CCS811_REG_HW_VERSION;
   1d8ee:	2321      	movs	r3, #33	; 0x21
   1d8f0:	f88d 3007 	strb.w	r3, [sp, #7]
	rc = i2c_write_read(drv_data->i2c, DT_INST_REG_ADDR(0),
   1d8f4:	6830      	ldr	r0, [r6, #0]
   1d8f6:	2301      	movs	r3, #1
   1d8f8:	1d2a      	adds	r2, r5, #4
   1d8fa:	f10d 0107 	add.w	r1, sp, #7
   1d8fe:	f7ff ff34 	bl	1d76a <i2c_write_read.constprop.0>
	if (rc == 0) {
   1d902:	4604      	mov	r4, r0
   1d904:	b9e0      	cbnz	r0, 1d940 <ccs811_configver_fetch+0x64>
		cmd = CCS811_REG_FW_BOOT_VERSION;
   1d906:	2323      	movs	r3, #35	; 0x23
   1d908:	f88d 3007 	strb.w	r3, [sp, #7]
		rc = i2c_write_read(drv_data->i2c, DT_INST_REG_ADDR(0),
   1d90c:	6830      	ldr	r0, [r6, #0]
   1d90e:	2302      	movs	r3, #2
   1d910:	462a      	mov	r2, r5
   1d912:	f10d 0107 	add.w	r1, sp, #7
   1d916:	f7ff ff28 	bl	1d76a <i2c_write_read.constprop.0>
		ptr->fw_boot_version = sys_be16_to_cpu(ptr->fw_boot_version);
   1d91a:	882b      	ldrh	r3, [r5, #0]
   1d91c:	ba5b      	rev16	r3, r3
   1d91e:	802b      	strh	r3, [r5, #0]
	if (rc == 0) {
   1d920:	4604      	mov	r4, r0
   1d922:	b968      	cbnz	r0, 1d940 <ccs811_configver_fetch+0x64>
		cmd = CCS811_REG_FW_APP_VERSION;
   1d924:	2324      	movs	r3, #36	; 0x24
   1d926:	f88d 3007 	strb.w	r3, [sp, #7]
		rc = i2c_write_read(drv_data->i2c, DT_INST_REG_ADDR(0),
   1d92a:	2302      	movs	r3, #2
   1d92c:	18ea      	adds	r2, r5, r3
   1d92e:	6830      	ldr	r0, [r6, #0]
   1d930:	f10d 0107 	add.w	r1, sp, #7
   1d934:	f7ff ff19 	bl	1d76a <i2c_write_read.constprop.0>
		ptr->fw_app_version = sys_be16_to_cpu(ptr->fw_app_version);
   1d938:	886b      	ldrh	r3, [r5, #2]
   1d93a:	ba5b      	rev16	r3, r3
		rc = i2c_write_read(drv_data->i2c, DT_INST_REG_ADDR(0),
   1d93c:	4604      	mov	r4, r0
		ptr->fw_app_version = sys_be16_to_cpu(ptr->fw_app_version);
   1d93e:	806b      	strh	r3, [r5, #2]
	set_wake(drv_data, false);
   1d940:	68f0      	ldr	r0, [r6, #12]
   1d942:	2100      	movs	r1, #0
   1d944:	f7ff ff7d 	bl	1d842 <set_wake.isra.0>
	ptr->mode = drv_data->mode & CCS811_MODE_MSK;
   1d948:	7e33      	ldrb	r3, [r6, #24]
   1d94a:	f003 0370 	and.w	r3, r3, #112	; 0x70
   1d94e:	716b      	strb	r3, [r5, #5]
}
   1d950:	4620      	mov	r0, r4
   1d952:	b002      	add	sp, #8
   1d954:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   1d956:	f06f 0415 	mvn.w	r4, #21
   1d95a:	e7f9      	b.n	1d950 <ccs811_configver_fetch+0x74>

0001d95c <hts221_sample_fetch>:
{
   1d95c:	b513      	push	{r0, r1, r4, lr}
	status = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L |
   1d95e:	2304      	movs	r3, #4
	struct hts221_data *data = dev->data;
   1d960:	6904      	ldr	r4, [r0, #16]
	status = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L |
   1d962:	6840      	ldr	r0, [r0, #4]
   1d964:	eb0d 0203 	add.w	r2, sp, r3
   1d968:	21a8      	movs	r1, #168	; 0xa8
   1d96a:	f7f9 f9ab 	bl	16cc4 <hts221_read_reg>
	if (status < 0) {
   1d96e:	2800      	cmp	r0, #0
   1d970:	db06      	blt.n	1d980 <hts221_sample_fetch+0x24>
	data->rh_sample = sys_le16_to_cpu(buf[0] | (buf[1] << 8));
   1d972:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1d976:	8023      	strh	r3, [r4, #0]
	data->t_sample = sys_le16_to_cpu(buf[2] | (buf[3] << 8));
   1d978:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1d97c:	8063      	strh	r3, [r4, #2]
	return 0;
   1d97e:	2000      	movs	r0, #0
}
   1d980:	b002      	add	sp, #8
   1d982:	bd10      	pop	{r4, pc}

0001d984 <lis2dh_fetch_xyz.constprop.0>:
static int lis2dh_fetch_xyz(const struct device *dev,
   1d984:	b538      	push	{r3, r4, r5, lr}
	struct lis2dh_data *lis2dh = dev->data;
   1d986:	6904      	ldr	r4, [r0, #16]
	status = lis2dh->hw_tf->read_data(dev, LIS2DH_REG_STATUS,
   1d988:	6863      	ldr	r3, [r4, #4]
   1d98a:	f104 0208 	add.w	r2, r4, #8
   1d98e:	681d      	ldr	r5, [r3, #0]
   1d990:	2127      	movs	r1, #39	; 0x27
   1d992:	2307      	movs	r3, #7
   1d994:	47a8      	blx	r5
	if (status < 0) {
   1d996:	2800      	cmp	r0, #0
   1d998:	db04      	blt.n	1d9a4 <lis2dh_fetch_xyz.constprop.0+0x20>
	if (lis2dh->sample.status & LIS2DH_STATUS_DRDY_MASK) {
   1d99a:	7a23      	ldrb	r3, [r4, #8]
		status = 0;
   1d99c:	f013 0f0f 	tst.w	r3, #15
   1d9a0:	bf18      	it	ne
   1d9a2:	2000      	movne	r0, #0
}
   1d9a4:	bd38      	pop	{r3, r4, r5, pc}

0001d9a6 <lis2dh_sample_fetch>:
	if (chan == SENSOR_CHAN_ALL) {
   1d9a6:	2939      	cmp	r1, #57	; 0x39
   1d9a8:	d101      	bne.n	1d9ae <lis2dh_sample_fetch+0x8>
		status = lis2dh_fetch_xyz(dev, chan);
   1d9aa:	f7ff bfeb 	b.w	1d984 <lis2dh_fetch_xyz.constprop.0>
	} else if (chan == SENSOR_CHAN_ACCEL_XYZ) {
   1d9ae:	2903      	cmp	r1, #3
   1d9b0:	d0fb      	beq.n	1d9aa <lis2dh_sample_fetch+0x4>
		status = lis2dh_sample_fetch_temp(dev);
   1d9b2:	290c      	cmp	r1, #12
}
   1d9b4:	bf14      	ite	ne
   1d9b6:	f06f 003c 	mvnne.w	r0, #60	; 0x3c
   1d9ba:	f06f 0085 	mvneq.w	r0, #133	; 0x85
   1d9be:	4770      	bx	lr

0001d9c0 <i2c_transfer>:

extern int z_impl_i2c_transfer(const struct device * dev, struct i2c_msg * msgs, uint8_t num_msgs, uint16_t addr);

__pinned_func
static inline int i2c_transfer(const struct device * dev, struct i2c_msg * msgs, uint8_t num_msgs, uint16_t addr)
{
   1d9c0:	b410      	push	{r4}
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1d9c2:	6884      	ldr	r4, [r0, #8]
   1d9c4:	68a4      	ldr	r4, [r4, #8]
   1d9c6:	46a4      	mov	ip, r4
		return (int) arch_syscall_invoke4(*(uintptr_t *)&dev, *(uintptr_t *)&msgs, *(uintptr_t *)&num_msgs, *(uintptr_t *)&addr, K_SYSCALL_I2C_TRANSFER);
	}
#endif
	compiler_barrier();
	return z_impl_i2c_transfer(dev, msgs, num_msgs, addr);
}
   1d9c8:	bc10      	pop	{r4}
   1d9ca:	4760      	bx	ip

0001d9cc <lis2dh_i2c_write_data>:
{
   1d9cc:	b530      	push	{r4, r5, lr}
   1d9ce:	461d      	mov	r5, r3
   1d9d0:	b089      	sub	sp, #36	; 0x24
	return i2c_burst_write(data->bus, cfg->bus_cfg.i2c_slv_addr,
   1d9d2:	6903      	ldr	r3, [r0, #16]
{
   1d9d4:	4604      	mov	r4, r0
	return i2c_burst_write(data->bus, cfg->bus_cfg.i2c_slv_addr,
   1d9d6:	f061 017f 	orn	r1, r1, #127	; 0x7f
   1d9da:	6818      	ldr	r0, [r3, #0]
   1d9dc:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = &start_addr;
   1d9e0:	f10d 0107 	add.w	r1, sp, #7
   1d9e4:	6863      	ldr	r3, [r4, #4]
   1d9e6:	9102      	str	r1, [sp, #8]
	msg[0].len = 1U;
   1d9e8:	2101      	movs	r1, #1
   1d9ea:	9103      	str	r1, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
   1d9ec:	2100      	movs	r1, #0
   1d9ee:	891b      	ldrh	r3, [r3, #8]
   1d9f0:	f88d 1010 	strb.w	r1, [sp, #16]
   1d9f4:	e9cd 2505 	strd	r2, r5, [sp, #20]
	return i2c_transfer(dev, msg, 2, dev_addr);
   1d9f8:	a902      	add	r1, sp, #8
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1d9fa:	2202      	movs	r2, #2
   1d9fc:	f88d 201c 	strb.w	r2, [sp, #28]
	return i2c_transfer(dev, msg, 2, dev_addr);
   1da00:	f7ff ffde 	bl	1d9c0 <i2c_transfer>
}
   1da04:	b009      	add	sp, #36	; 0x24
   1da06:	bd30      	pop	{r4, r5, pc}

0001da08 <lis2dh_i2c_read_data>:
{
   1da08:	b530      	push	{r4, r5, lr}
   1da0a:	4604      	mov	r4, r0
   1da0c:	b089      	sub	sp, #36	; 0x24
   1da0e:	461d      	mov	r5, r3
	return i2c_burst_read(data->bus, cfg->bus_cfg.i2c_slv_addr,
   1da10:	6903      	ldr	r3, [r0, #16]
   1da12:	f061 017f 	orn	r1, r1, #127	; 0x7f
   1da16:	6818      	ldr	r0, [r3, #0]
   1da18:	6863      	ldr	r3, [r4, #4]
   1da1a:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
   1da1e:	f10d 0107 	add.w	r1, sp, #7
   1da22:	9102      	str	r1, [sp, #8]
	msg[0].len = num_write;
   1da24:	2101      	movs	r1, #1
   1da26:	891b      	ldrh	r3, [r3, #8]
   1da28:	9103      	str	r1, [sp, #12]
   1da2a:	e9cd 2505 	strd	r2, r5, [sp, #20]
	msg[0].flags = I2C_MSG_WRITE;
   1da2e:	2100      	movs	r1, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1da30:	2207      	movs	r2, #7
	msg[0].flags = I2C_MSG_WRITE;
   1da32:	f88d 1010 	strb.w	r1, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1da36:	f88d 201c 	strb.w	r2, [sp, #28]
	return i2c_transfer(dev, msg, 2, addr);
   1da3a:	a902      	add	r1, sp, #8
   1da3c:	2202      	movs	r2, #2
   1da3e:	f7ff ffbf 	bl	1d9c0 <i2c_transfer>
}
   1da42:	b009      	add	sp, #36	; 0x24
   1da44:	bd30      	pop	{r4, r5, pc}

0001da46 <lis2dh_i2c_write_reg>:
{
   1da46:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1da48:	4603      	mov	r3, r0
	return i2c_reg_write_byte(data->bus,
   1da4a:	6900      	ldr	r0, [r0, #16]
   1da4c:	685b      	ldr	r3, [r3, #4]
   1da4e:	6800      	ldr	r0, [r0, #0]
	uint8_t tx_buf[2] = {reg_addr, value};
   1da50:	f88d 2001 	strb.w	r2, [sp, #1]
	msg.len = num_bytes;
   1da54:	2202      	movs	r2, #2
   1da56:	891b      	ldrh	r3, [r3, #8]
	uint8_t tx_buf[2] = {reg_addr, value};
   1da58:	f88d 1000 	strb.w	r1, [sp]
	msg.len = num_bytes;
   1da5c:	9202      	str	r2, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1da5e:	f88d 200c 	strb.w	r2, [sp, #12]
	return i2c_transfer(dev, &msg, 1, addr);
   1da62:	a901      	add	r1, sp, #4
   1da64:	2201      	movs	r2, #1
	msg.buf = (uint8_t *)buf;
   1da66:	f8cd d004 	str.w	sp, [sp, #4]
	return i2c_transfer(dev, &msg, 1, addr);
   1da6a:	f7ff ffa9 	bl	1d9c0 <i2c_transfer>
}
   1da6e:	b005      	add	sp, #20
   1da70:	f85d fb04 	ldr.w	pc, [sp], #4

0001da74 <lis2dh_i2c_read_reg>:
{
   1da74:	b510      	push	{r4, lr}
   1da76:	4603      	mov	r3, r0
   1da78:	b088      	sub	sp, #32
	return i2c_reg_read_byte(data->bus,
   1da7a:	6900      	ldr	r0, [r0, #16]
   1da7c:	685b      	ldr	r3, [r3, #4]
   1da7e:	6800      	ldr	r0, [r0, #0]
   1da80:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
   1da84:	f10d 0107 	add.w	r1, sp, #7
   1da88:	9102      	str	r1, [sp, #8]
	msg[0].len = num_write;
   1da8a:	2101      	movs	r1, #1
   1da8c:	891b      	ldrh	r3, [r3, #8]
   1da8e:	9103      	str	r1, [sp, #12]
	msg[1].len = num_read;
   1da90:	e9cd 2105 	strd	r2, r1, [sp, #20]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1da94:	2207      	movs	r2, #7
   1da96:	f88d 201c 	strb.w	r2, [sp, #28]
	msg[0].flags = I2C_MSG_WRITE;
   1da9a:	2400      	movs	r4, #0
	return i2c_transfer(dev, msg, 2, addr);
   1da9c:	2202      	movs	r2, #2
   1da9e:	a902      	add	r1, sp, #8
	msg[0].flags = I2C_MSG_WRITE;
   1daa0:	f88d 4010 	strb.w	r4, [sp, #16]
	return i2c_transfer(dev, msg, 2, addr);
   1daa4:	f7ff ff8c 	bl	1d9c0 <i2c_transfer>
}
   1daa8:	b008      	add	sp, #32
   1daaa:	bd10      	pop	{r4, pc}

0001daac <lis2dh_i2c_update_reg>:
{
   1daac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1dab0:	4698      	mov	r8, r3
	return i2c_reg_update_byte(data->bus,
   1dab2:	6903      	ldr	r3, [r0, #16]
   1dab4:	f8d3 9000 	ldr.w	r9, [r3]
				   cfg->bus_cfg.i2c_slv_addr,
   1dab8:	6843      	ldr	r3, [r0, #4]
{
   1daba:	b088      	sub	sp, #32
   1dabc:	f893 a008 	ldrb.w	sl, [r3, #8]
   1dac0:	f88d 1004 	strb.w	r1, [sp, #4]
	msg[0].flags = I2C_MSG_WRITE;
   1dac4:	2300      	movs	r3, #0
	msg[0].len = num_write;
   1dac6:	2701      	movs	r7, #1
	msg[0].flags = I2C_MSG_WRITE;
   1dac8:	f88d 3010 	strb.w	r3, [sp, #16]
	msg[1].buf = (uint8_t *)read_buf;
   1dacc:	f10d 0303 	add.w	r3, sp, #3
	msg[1].len = num_read;
   1dad0:	e9cd 3705 	strd	r3, r7, [sp, #20]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1dad4:	2307      	movs	r3, #7
   1dad6:	460e      	mov	r6, r1
   1dad8:	4614      	mov	r4, r2
	msg[0].buf = (uint8_t *)write_buf;
   1dada:	ad01      	add	r5, sp, #4
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1dadc:	f88d 301c 	strb.w	r3, [sp, #28]
	return i2c_transfer(dev, msg, 2, addr);
   1dae0:	2202      	movs	r2, #2
   1dae2:	4653      	mov	r3, sl
   1dae4:	a902      	add	r1, sp, #8
   1dae6:	4648      	mov	r0, r9
	msg[0].buf = (uint8_t *)write_buf;
   1dae8:	9502      	str	r5, [sp, #8]
	msg[0].len = num_write;
   1daea:	9703      	str	r7, [sp, #12]
	return i2c_transfer(dev, msg, 2, addr);
   1daec:	f7ff ff68 	bl	1d9c0 <i2c_transfer>
{
	uint8_t old_value, new_value;
	int rc;

	rc = i2c_reg_read_byte(dev, dev_addr, reg_addr, &old_value);
	if (rc != 0) {
   1daf0:	b9b8      	cbnz	r0, 1db22 <lis2dh_i2c_update_reg+0x76>
		return rc;
	}

	new_value = (old_value & ~mask) | (value & mask);
   1daf2:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1daf6:	ea23 0104 	bic.w	r1, r3, r4
   1dafa:	ea04 0408 	and.w	r4, r4, r8
   1dafe:	430c      	orrs	r4, r1
	if (new_value == old_value) {
   1db00:	42a3      	cmp	r3, r4
   1db02:	d00e      	beq.n	1db22 <lis2dh_i2c_update_reg+0x76>
	msg.len = num_bytes;
   1db04:	2302      	movs	r3, #2
   1db06:	9303      	str	r3, [sp, #12]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1db08:	f88d 3010 	strb.w	r3, [sp, #16]
	return i2c_transfer(dev, &msg, 1, addr);
   1db0c:	463a      	mov	r2, r7
   1db0e:	4653      	mov	r3, sl
   1db10:	a902      	add	r1, sp, #8
   1db12:	4648      	mov	r0, r9
	uint8_t tx_buf[2] = {reg_addr, value};
   1db14:	f88d 6004 	strb.w	r6, [sp, #4]
   1db18:	f88d 4005 	strb.w	r4, [sp, #5]
	msg.buf = (uint8_t *)buf;
   1db1c:	9502      	str	r5, [sp, #8]
	return i2c_transfer(dev, &msg, 1, addr);
   1db1e:	f7ff ff4f 	bl	1d9c0 <i2c_transfer>
}
   1db22:	b008      	add	sp, #32
   1db24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001db28 <z_impl_i2c_transfer>:
{
   1db28:	b410      	push	{r4}
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1db2a:	6884      	ldr	r4, [r0, #8]
   1db2c:	68a4      	ldr	r4, [r4, #8]
   1db2e:	46a4      	mov	ip, r4
}
   1db30:	bc10      	pop	{r4}
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1db32:	4760      	bx	ip

0001db34 <lps22hb_sample_fetch>:
{
   1db34:	b530      	push	{r4, r5, lr}
   1db36:	4603      	mov	r3, r0
   1db38:	b08b      	sub	sp, #44	; 0x2c
	struct lps22hb_data *data = dev->data;
   1db3a:	6905      	ldr	r5, [r0, #16]
	if (i2c_burst_read(data->i2c_master, config->i2c_slave_addr,
   1db3c:	685b      	ldr	r3, [r3, #4]
   1db3e:	6828      	ldr	r0, [r5, #0]
   1db40:	889b      	ldrh	r3, [r3, #4]
static inline int i2c_burst_read(const struct device *dev,
   1db42:	2228      	movs	r2, #40	; 0x28
   1db44:	f88d 2007 	strb.w	r2, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
   1db48:	f10d 0207 	add.w	r2, sp, #7
   1db4c:	9204      	str	r2, [sp, #16]
	msg[0].len = num_write;
   1db4e:	2201      	movs	r2, #1
   1db50:	9205      	str	r2, [sp, #20]
	msg[1].buf = (uint8_t *)read_buf;
   1db52:	aa02      	add	r2, sp, #8
   1db54:	9207      	str	r2, [sp, #28]
	msg[1].len = num_read;
   1db56:	2205      	movs	r2, #5
	msg[0].flags = I2C_MSG_WRITE;
   1db58:	2400      	movs	r4, #0
	msg[1].len = num_read;
   1db5a:	9208      	str	r2, [sp, #32]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1db5c:	2207      	movs	r2, #7
	msg[0].flags = I2C_MSG_WRITE;
   1db5e:	f88d 4018 	strb.w	r4, [sp, #24]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1db62:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
	return z_impl_i2c_transfer(dev, msgs, num_msgs, addr);
   1db66:	2202      	movs	r2, #2
   1db68:	a904      	add	r1, sp, #16
   1db6a:	f7ff ffdd 	bl	1db28 <z_impl_i2c_transfer>
   1db6e:	42a0      	cmp	r0, r4
   1db70:	db10      	blt.n	1db94 <lps22hb_sample_fetch+0x60>
				     ((uint32_t)(out[2]) << 16));
   1db72:	f89d 300a 	ldrb.w	r3, [sp, #10]
				     ((uint32_t)(out[1]) << 8) |
   1db76:	f89d 2009 	ldrb.w	r2, [sp, #9]
				     ((uint32_t)(out[2]) << 16));
   1db7a:	041b      	lsls	r3, r3, #16
				     ((uint32_t)(out[1]) << 8) |
   1db7c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	data->sample_press = (int32_t)((uint32_t)(out[0]) |
   1db80:	f89d 2008 	ldrb.w	r2, [sp, #8]
				     ((uint32_t)(out[1]) << 8) |
   1db84:	4313      	orrs	r3, r2
	data->sample_press = (int32_t)((uint32_t)(out[0]) |
   1db86:	606b      	str	r3, [r5, #4]
	data->sample_temp = (int16_t)((uint16_t)(out[3]) |
   1db88:	f8bd 300b 	ldrh.w	r3, [sp, #11]
   1db8c:	812b      	strh	r3, [r5, #8]
	return 0;
   1db8e:	4620      	mov	r0, r4
}
   1db90:	b00b      	add	sp, #44	; 0x2c
   1db92:	bd30      	pop	{r4, r5, pc}
		return -EIO;
   1db94:	f06f 0004 	mvn.w	r0, #4
   1db98:	e7fa      	b.n	1db90 <lps22hb_sample_fetch+0x5c>

0001db9a <i2c_reg_update_byte.constprop.0>:
static inline int i2c_reg_update_byte(const struct device *dev,
   1db9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1db9e:	b088      	sub	sp, #32
   1dba0:	4698      	mov	r8, r3
	msg[0].flags = I2C_MSG_WRITE;
   1dba2:	2300      	movs	r3, #0
	msg[0].len = num_write;
   1dba4:	2701      	movs	r7, #1
	msg[0].flags = I2C_MSG_WRITE;
   1dba6:	f88d 3010 	strb.w	r3, [sp, #16]
	msg[1].buf = (uint8_t *)read_buf;
   1dbaa:	f10d 0303 	add.w	r3, sp, #3
	msg[1].len = num_read;
   1dbae:	e9cd 3705 	strd	r3, r7, [sp, #20]
   1dbb2:	f04f 0910 	mov.w	r9, #16
	msg[0].buf = (uint8_t *)write_buf;
   1dbb6:	ad01      	add	r5, sp, #4
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1dbb8:	2307      	movs	r3, #7
static inline int i2c_reg_update_byte(const struct device *dev,
   1dbba:	4606      	mov	r6, r0
   1dbbc:	4614      	mov	r4, r2
	rc = i2c_reg_read_byte(dev, dev_addr, reg_addr, &old_value);
   1dbbe:	468a      	mov	sl, r1
   1dbc0:	f88d 9004 	strb.w	r9, [sp, #4]
	msg[0].buf = (uint8_t *)write_buf;
   1dbc4:	9502      	str	r5, [sp, #8]
	msg[0].len = num_write;
   1dbc6:	9703      	str	r7, [sp, #12]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1dbc8:	f88d 301c 	strb.w	r3, [sp, #28]
   1dbcc:	2202      	movs	r2, #2
   1dbce:	460b      	mov	r3, r1
   1dbd0:	a902      	add	r1, sp, #8
   1dbd2:	f7ff ffa9 	bl	1db28 <z_impl_i2c_transfer>
	if (rc != 0) {
   1dbd6:	b9b8      	cbnz	r0, 1dc08 <i2c_reg_update_byte.constprop.0+0x6e>
	new_value = (old_value & ~mask) | (value & mask);
   1dbd8:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1dbdc:	ea23 0104 	bic.w	r1, r3, r4
   1dbe0:	ea04 0408 	and.w	r4, r4, r8
   1dbe4:	430c      	orrs	r4, r1
	if (new_value == old_value) {
   1dbe6:	42a3      	cmp	r3, r4
   1dbe8:	d00e      	beq.n	1dc08 <i2c_reg_update_byte.constprop.0+0x6e>
	msg.len = num_bytes;
   1dbea:	2302      	movs	r3, #2
	uint8_t tx_buf[2] = {reg_addr, value};
   1dbec:	f88d 9004 	strb.w	r9, [sp, #4]
   1dbf0:	f88d 4005 	strb.w	r4, [sp, #5]
	msg.buf = (uint8_t *)buf;
   1dbf4:	9502      	str	r5, [sp, #8]
	msg.len = num_bytes;
   1dbf6:	9303      	str	r3, [sp, #12]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1dbf8:	f88d 3010 	strb.w	r3, [sp, #16]
   1dbfc:	4653      	mov	r3, sl
   1dbfe:	463a      	mov	r2, r7
   1dc00:	a902      	add	r1, sp, #8
   1dc02:	4630      	mov	r0, r6
   1dc04:	f7ff ff90 	bl	1db28 <z_impl_i2c_transfer>
		return 0;
	}

	return i2c_reg_write_byte(dev, dev_addr, reg_addr, new_value);
}
   1dc08:	b008      	add	sp, #32
   1dc0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001dc0e <lps22hb_init>:
err_poweroff:
	return -EIO;
}

static int lps22hb_init(const struct device *dev)
{
   1dc0e:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct lps22hb_config * const config = dev->config;
	struct lps22hb_data *data = dev->data;

	data->i2c_master = device_get_binding(config->i2c_master_dev_name);
   1dc10:	6843      	ldr	r3, [r0, #4]
	struct lps22hb_data *data = dev->data;
   1dc12:	6905      	ldr	r5, [r0, #16]
{
   1dc14:	4604      	mov	r4, r0
   1dc16:	b089      	sub	sp, #36	; 0x24
	data->i2c_master = device_get_binding(config->i2c_master_dev_name);
   1dc18:	6818      	ldr	r0, [r3, #0]
   1dc1a:	f7f7 faf3 	bl	15204 <z_impl_device_get_binding>
   1dc1e:	6028      	str	r0, [r5, #0]

	if (!data->i2c_master) {
   1dc20:	2800      	cmp	r0, #0
   1dc22:	d037      	beq.n	1dc94 <lps22hb_init+0x86>
	struct lps22hb_data *data = dev->data;
   1dc24:	6926      	ldr	r6, [r4, #16]
	const struct lps22hb_config *config = dev->config;
   1dc26:	6867      	ldr	r7, [r4, #4]
	if (i2c_reg_read_byte(data->i2c_master, config->i2c_slave_addr,
   1dc28:	6830      	ldr	r0, [r6, #0]
   1dc2a:	88bb      	ldrh	r3, [r7, #4]
   1dc2c:	220f      	movs	r2, #15
   1dc2e:	f88d 2007 	strb.w	r2, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
   1dc32:	f10d 0207 	add.w	r2, sp, #7
   1dc36:	9202      	str	r2, [sp, #8]
	msg[1].buf = (uint8_t *)read_buf;
   1dc38:	f10d 0106 	add.w	r1, sp, #6
	msg[0].len = num_write;
   1dc3c:	2201      	movs	r2, #1
	msg[1].len = num_read;
   1dc3e:	e9cd 1205 	strd	r1, r2, [sp, #20]
	msg[0].len = num_write;
   1dc42:	9203      	str	r2, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
   1dc44:	2500      	movs	r5, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1dc46:	2207      	movs	r2, #7
	msg[0].flags = I2C_MSG_WRITE;
   1dc48:	f88d 5010 	strb.w	r5, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1dc4c:	f88d 201c 	strb.w	r2, [sp, #28]
   1dc50:	2202      	movs	r2, #2
   1dc52:	a902      	add	r1, sp, #8
   1dc54:	f7ff ff68 	bl	1db28 <z_impl_i2c_transfer>
   1dc58:	42a8      	cmp	r0, r5
   1dc5a:	da03      	bge.n	1dc64 <lps22hb_init+0x56>
		return -EINVAL;
	}

	if (lps22hb_init_chip(dev) < 0) {
		LOG_DBG("Failed to initialize chip");
		return -EIO;
   1dc5c:	f06f 0004 	mvn.w	r0, #4
	}

	return 0;
}
   1dc60:	b009      	add	sp, #36	; 0x24
   1dc62:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (chip_id != LPS22HB_VAL_WHO_AM_I) {
   1dc64:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1dc68:	2bb1      	cmp	r3, #177	; 0xb1
   1dc6a:	d1f7      	bne.n	1dc5c <lps22hb_init+0x4e>
	return i2c_reg_update_byte(data->i2c_master, config->i2c_slave_addr,
   1dc6c:	6861      	ldr	r1, [r4, #4]
   1dc6e:	6920      	ldr	r0, [r4, #16]
   1dc70:	7909      	ldrb	r1, [r1, #4]
   1dc72:	6800      	ldr	r0, [r0, #0]
   1dc74:	2330      	movs	r3, #48	; 0x30
   1dc76:	2270      	movs	r2, #112	; 0x70
   1dc78:	f7ff ff8f 	bl	1db9a <i2c_reg_update_byte.constprop.0>
	if (lps22hb_set_odr_raw(dev, LPS22HB_DEFAULT_SAMPLING_RATE) < 0) {
   1dc7c:	2800      	cmp	r0, #0
   1dc7e:	dbed      	blt.n	1dc5c <lps22hb_init+0x4e>
	if (i2c_reg_update_byte(data->i2c_master, config->i2c_slave_addr,
   1dc80:	2302      	movs	r3, #2
   1dc82:	7939      	ldrb	r1, [r7, #4]
   1dc84:	6830      	ldr	r0, [r6, #0]
   1dc86:	461a      	mov	r2, r3
   1dc88:	f7ff ff87 	bl	1db9a <i2c_reg_update_byte.constprop.0>
   1dc8c:	2800      	cmp	r0, #0
   1dc8e:	dbe5      	blt.n	1dc5c <lps22hb_init+0x4e>
	return 0;
   1dc90:	4628      	mov	r0, r5
   1dc92:	e7e5      	b.n	1dc60 <lps22hb_init+0x52>
		return -EINVAL;
   1dc94:	f06f 0015 	mvn.w	r0, #21
   1dc98:	e7e2      	b.n	1dc60 <lps22hb_init+0x52>

0001dc9a <stmemsc_i2c_read>:

#include "stmemsc.h"

int stmemsc_i2c_read(const struct i2c_dt_spec *stmemsc,
			     uint8_t reg_addr, uint8_t *value, uint8_t len)
{
   1dc9a:	b530      	push	{r4, r5, lr}
   1dc9c:	b089      	sub	sp, #36	; 0x24
   1dc9e:	4604      	mov	r4, r0
   1dca0:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
   1dca4:	f10d 0107 	add.w	r1, sp, #7
   1dca8:	461d      	mov	r5, r3
   1dcaa:	9102      	str	r1, [sp, #8]
	msg[0].len = num_write;
   1dcac:	2101      	movs	r1, #1
	return i2c_burst_read_dt(stmemsc, reg_addr, value, len);
   1dcae:	e9cd 2505 	strd	r2, r5, [sp, #20]
   1dcb2:	9103      	str	r1, [sp, #12]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1dcb4:	2207      	movs	r2, #7
	msg[0].flags = I2C_MSG_WRITE;
   1dcb6:	2100      	movs	r1, #0
	return i2c_burst_read(spec->bus, spec->addr,
   1dcb8:	6800      	ldr	r0, [r0, #0]
   1dcba:	88a3      	ldrh	r3, [r4, #4]
	msg[0].flags = I2C_MSG_WRITE;
   1dcbc:	f88d 1010 	strb.w	r1, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1dcc0:	f88d 201c 	strb.w	r2, [sp, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1dcc4:	6882      	ldr	r2, [r0, #8]
   1dcc6:	a902      	add	r1, sp, #8
   1dcc8:	6894      	ldr	r4, [r2, #8]
   1dcca:	2202      	movs	r2, #2
   1dccc:	47a0      	blx	r4
}
   1dcce:	b009      	add	sp, #36	; 0x24
   1dcd0:	bd30      	pop	{r4, r5, pc}

0001dcd2 <stmemsc_i2c_write>:

int stmemsc_i2c_write(const struct i2c_dt_spec *stmemsc,
			      uint8_t reg_addr, uint8_t *value, uint8_t len)
{
   1dcd2:	b530      	push	{r4, r5, lr}
   1dcd4:	b089      	sub	sp, #36	; 0x24
   1dcd6:	4604      	mov	r4, r0
   1dcd8:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = &start_addr;
   1dcdc:	f10d 0107 	add.w	r1, sp, #7
   1dce0:	461d      	mov	r5, r3
   1dce2:	9102      	str	r1, [sp, #8]
	msg[0].len = 1U;
   1dce4:	2101      	movs	r1, #1
	return i2c_burst_write_dt(stmemsc, reg_addr, value, len);
   1dce6:	e9cd 2505 	strd	r2, r5, [sp, #20]
   1dcea:	9103      	str	r1, [sp, #12]
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1dcec:	2202      	movs	r2, #2
	msg[0].flags = I2C_MSG_WRITE;
   1dcee:	2100      	movs	r1, #0
	return i2c_burst_write(spec->bus, spec->addr,
   1dcf0:	6800      	ldr	r0, [r0, #0]
   1dcf2:	88a3      	ldrh	r3, [r4, #4]
	msg[0].flags = I2C_MSG_WRITE;
   1dcf4:	f88d 1010 	strb.w	r1, [sp, #16]
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1dcf8:	f88d 201c 	strb.w	r2, [sp, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1dcfc:	6881      	ldr	r1, [r0, #8]
   1dcfe:	688c      	ldr	r4, [r1, #8]
   1dd00:	a902      	add	r1, sp, #8
   1dd02:	47a0      	blx	r4
}
   1dd04:	b009      	add	sp, #36	; 0x24
   1dd06:	bd30      	pop	{r4, r5, pc}

0001dd08 <z_impl_hwinfo_get_device_id>:
struct nrf_uid {
	uint32_t id[2];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
   1dd08:	b573      	push	{r0, r1, r4, r5, r6, lr}
NRF_STATIC_INLINE uint32_t nrf_ficr_deviceid_get(NRF_FICR_Type const * p_reg, uint32_t reg_id)
{
#if defined(FICR_INFO_DEVICEID_DEVICEID_Msk)
    return p_reg->INFO.DEVICEID[reg_id];
#else
    return p_reg->DEVICEID[reg_id];
   1dd0a:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
   1dd0e:	2908      	cmp	r1, #8
   1dd10:	6e66      	ldr	r6, [r4, #100]	; 0x64
   1dd12:	6e65      	ldr	r5, [r4, #100]	; 0x64
   1dd14:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1dd16:	6e63      	ldr	r3, [r4, #100]	; 0x64
	struct nrf_uid dev_id;

	dev_id.id[0] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 1));
   1dd18:	ea4f 2515 	mov.w	r5, r5, lsr #8
   1dd1c:	ea4f 6303 	mov.w	r3, r3, lsl #24
   1dd20:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
   1dd24:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
   1dd28:	ea4f 2202 	mov.w	r2, r2, lsl #8
   1dd2c:	ea43 0305 	orr.w	r3, r3, r5
   1dd30:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
   1dd34:	ea43 0302 	orr.w	r3, r3, r2
   1dd38:	9300      	str	r3, [sp, #0]
   1dd3a:	6e26      	ldr	r6, [r4, #96]	; 0x60
   1dd3c:	6e25      	ldr	r5, [r4, #96]	; 0x60
   1dd3e:	6e22      	ldr	r2, [r4, #96]	; 0x60
   1dd40:	6e23      	ldr	r3, [r4, #96]	; 0x60
	dev_id.id[1] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 0));
   1dd42:	ea4f 2415 	mov.w	r4, r5, lsr #8
   1dd46:	ea4f 6303 	mov.w	r3, r3, lsl #24
   1dd4a:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
   1dd4e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
   1dd52:	ea43 0304 	orr.w	r3, r3, r4
   1dd56:	ea4f 2402 	mov.w	r4, r2, lsl #8
   1dd5a:	bf28      	it	cs
   1dd5c:	2108      	movcs	r1, #8
   1dd5e:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
   1dd62:	4323      	orrs	r3, r4

	if (length > sizeof(dev_id.id)) {
		length = sizeof(dev_id.id);
	}

	memcpy(buffer, dev_id.id, length);
   1dd64:	460a      	mov	r2, r1
   1dd66:	460c      	mov	r4, r1
   1dd68:	4669      	mov	r1, sp
	dev_id.id[1] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 0));
   1dd6a:	9301      	str	r3, [sp, #4]
	memcpy(buffer, dev_id.id, length);
   1dd6c:	f7f9 fa72 	bl	17254 <memcpy>

	return length;
}
   1dd70:	4620      	mov	r0, r4
   1dd72:	b002      	add	sp, #8
   1dd74:	bd70      	pop	{r4, r5, r6, pc}

0001dd76 <gpio_pin_set_dt>:
{
   1dd76:	4603      	mov	r3, r0
   1dd78:	460a      	mov	r2, r1
	return gpio_pin_set(spec->port, spec->pin, value);
   1dd7a:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1dd7c:	7919      	ldrb	r1, [r3, #4]
   1dd7e:	2301      	movs	r3, #1
   1dd80:	fa03 f101 	lsl.w	r1, r3, r1
   1dd84:	6903      	ldr	r3, [r0, #16]
   1dd86:	681b      	ldr	r3, [r3, #0]
   1dd88:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   1dd8a:	bf18      	it	ne
   1dd8c:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   1dd90:	b112      	cbz	r2, 1dd98 <gpio_pin_set_dt+0x22>
	return api->port_set_bits_raw(port, pins);
   1dd92:	6883      	ldr	r3, [r0, #8]
   1dd94:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   1dd96:	4718      	bx	r3
   1dd98:	6883      	ldr	r3, [r0, #8]
   1dd9a:	691b      	ldr	r3, [r3, #16]
   1dd9c:	e7fb      	b.n	1dd96 <gpio_pin_set_dt+0x20>

0001dd9e <disable_sync>:

	return onoff_sync_finalize(&data->srv, key, cli, rc, true);
}

static int disable_sync(const struct device *dev)
{
   1dd9e:	b530      	push	{r4, r5, lr}
	struct driver_data_sync *data = dev->data;
	const struct driver_config *cfg = dev->config;
	k_spinlock_key_t key;
	int rc = onoff_sync_lock(&data->srv, &key);
   1dda0:	6904      	ldr	r4, [r0, #16]
	const struct driver_config *cfg = dev->config;
   1dda2:	6845      	ldr	r5, [r0, #4]
{
   1dda4:	b085      	sub	sp, #20
	int rc = onoff_sync_lock(&data->srv, &key);
   1dda6:	a903      	add	r1, sp, #12
   1dda8:	4620      	mov	r0, r4
   1ddaa:	f7f8 fd03 	bl	167b4 <onoff_sync_lock>

	if  ((cfg->options & OPTION_ALWAYS_ON) != 0) {
   1ddae:	7d29      	ldrb	r1, [r5, #20]
   1ddb0:	f011 0101 	ands.w	r1, r1, #1
	int rc = onoff_sync_lock(&data->srv, &key);
   1ddb4:	4603      	mov	r3, r0
	if  ((cfg->options & OPTION_ALWAYS_ON) != 0) {
   1ddb6:	d114      	bne.n	1dde2 <disable_sync+0x44>
		rc = 0;
	} else if (rc == 1) {
   1ddb8:	2801      	cmp	r0, #1
   1ddba:	d10c      	bne.n	1ddd6 <disable_sync+0x38>
		rc = gpio_pin_set_dt(&cfg->enable, false);
   1ddbc:	f105 000c 	add.w	r0, r5, #12
   1ddc0:	f7ff ffd9 	bl	1dd76 <gpio_pin_set_dt>
   1ddc4:	4603      	mov	r3, r0
	} else if (rc == 0) {
		rc = -EINVAL;
	} /* else rc > 0, leave it on */

	return onoff_sync_finalize(&data->srv, key, NULL, rc, false);
   1ddc6:	2200      	movs	r2, #0
   1ddc8:	9903      	ldr	r1, [sp, #12]
   1ddca:	9200      	str	r2, [sp, #0]
   1ddcc:	4620      	mov	r0, r4
   1ddce:	f7f8 fcfc 	bl	167ca <onoff_sync_finalize>
}
   1ddd2:	b005      	add	sp, #20
   1ddd4:	bd30      	pop	{r4, r5, pc}
		rc = -EINVAL;
   1ddd6:	2800      	cmp	r0, #0
   1ddd8:	bf14      	ite	ne
   1ddda:	4603      	movne	r3, r0
   1dddc:	f06f 0315 	mvneq.w	r3, #21
   1dde0:	e7f1      	b.n	1ddc6 <disable_sync+0x28>
		rc = 0;
   1dde2:	2300      	movs	r3, #0
   1dde4:	e7ef      	b.n	1ddc6 <disable_sync+0x28>

0001dde6 <enable_sync>:
{
   1dde6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc = onoff_sync_lock(&data->srv, &key);
   1dde8:	6905      	ldr	r5, [r0, #16]
	const struct driver_config *cfg = dev->config;
   1ddea:	6846      	ldr	r6, [r0, #4]
{
   1ddec:	460c      	mov	r4, r1
	int rc = onoff_sync_lock(&data->srv, &key);
   1ddee:	4628      	mov	r0, r5
   1ddf0:	a903      	add	r1, sp, #12
   1ddf2:	f7f8 fcdf 	bl	167b4 <onoff_sync_lock>
	if ((rc == 0)
   1ddf6:	4603      	mov	r3, r0
   1ddf8:	b940      	cbnz	r0, 1de0c <enable_sync+0x26>
	    && ((cfg->options & OPTION_ALWAYS_ON) == 0)) {
   1ddfa:	7d32      	ldrb	r2, [r6, #20]
   1ddfc:	07d2      	lsls	r2, r2, #31
   1ddfe:	d405      	bmi.n	1de0c <enable_sync+0x26>
		rc = gpio_pin_set_dt(&cfg->enable, true);
   1de00:	2101      	movs	r1, #1
   1de02:	f106 000c 	add.w	r0, r6, #12
   1de06:	f7ff ffb6 	bl	1dd76 <gpio_pin_set_dt>
   1de0a:	4603      	mov	r3, r0
	return onoff_sync_finalize(&data->srv, key, cli, rc, true);
   1de0c:	2201      	movs	r2, #1
   1de0e:	9200      	str	r2, [sp, #0]
   1de10:	9903      	ldr	r1, [sp, #12]
   1de12:	4622      	mov	r2, r4
   1de14:	4628      	mov	r0, r5
   1de16:	f7f8 fcd8 	bl	167ca <onoff_sync_finalize>
}
   1de1a:	b004      	add	sp, #16
   1de1c:	bd70      	pop	{r4, r5, r6, pc}

0001de1e <disable_onoff>:
	return onoff_release(&data->mgr);
   1de1e:	6900      	ldr	r0, [r0, #16]
   1de20:	3004      	adds	r0, #4
   1de22:	f7f8 bca2 	b.w	1676a <onoff_release>

0001de26 <enable_onoff>:
	return onoff_request(&data->mgr, cli);
   1de26:	6900      	ldr	r0, [r0, #16]
   1de28:	3004      	adds	r0, #4
   1de2a:	f7f8 bc55 	b.w	166d8 <onoff_request>

0001de2e <common_init.isra.0>:
static int common_init(const struct device *dev)
   1de2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1de30:	4605      	mov	r5, r0
	if (!device_is_ready(cfg->enable.port)) {
   1de32:	68c0      	ldr	r0, [r0, #12]
   1de34:	f000 fa28 	bl	1e288 <z_device_is_ready>
   1de38:	b340      	cbz	r0, 1de8c <common_init.isra.0+0x5e>
	if (on) {
   1de3a:	7d2c      	ldrb	r4, [r5, #20]
				  spec->dt_flags | extra_flags);
   1de3c:	7c6b      	ldrb	r3, [r5, #17]
	return gpio_pin_configure(spec->port,
   1de3e:	68e8      	ldr	r0, [r5, #12]
   1de40:	7c29      	ldrb	r1, [r5, #16]
   1de42:	f014 0403 	ands.w	r4, r4, #3
		flags = GPIO_OUTPUT_ACTIVE;
   1de46:	bf16      	itet	ne
   1de48:	f44f 52d0 	movne.w	r2, #6656	; 0x1a00
		flags = GPIO_OUTPUT_INACTIVE;
   1de4c:	f44f 52b0 	moveq.w	r2, #5632	; 0x1600
		delay_us = cfg->startup_delay_us;
   1de50:	686c      	ldrne	r4, [r5, #4]
   1de52:	4313      	orrs	r3, r2
	struct gpio_driver_data *data =
   1de54:	6907      	ldr	r7, [r0, #16]
	const struct gpio_driver_api *api =
   1de56:	f8d0 c008 	ldr.w	ip, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1de5a:	683d      	ldr	r5, [r7, #0]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   1de5c:	07da      	lsls	r2, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   1de5e:	bf48      	it	mi
   1de60:	f483 6340 	eormi.w	r3, r3, #3072	; 0xc00
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1de64:	2601      	movs	r6, #1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   1de66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1de6a:	408e      	lsls	r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1de6c:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1de6e:	bf4c      	ite	mi
   1de70:	4335      	orrmi	r5, r6
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1de72:	43b5      	bicpl	r5, r6
   1de74:	603d      	str	r5, [r7, #0]
	return api->pin_configure(port, pin, flags);
   1de76:	f8dc 3000 	ldr.w	r3, [ip]
   1de7a:	4798      	blx	r3
	if ((rc == 0) && (delay_us > 0)) {
   1de7c:	4605      	mov	r5, r0
   1de7e:	b918      	cbnz	r0, 1de88 <common_init.isra.0+0x5a>
   1de80:	b114      	cbz	r4, 1de88 <common_init.isra.0+0x5a>
   1de82:	4620      	mov	r0, r4
   1de84:	f000 fde5 	bl	1ea52 <z_impl_k_busy_wait>
}
   1de88:	4628      	mov	r0, r5
   1de8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENODEV;
   1de8c:	f06f 0512 	mvn.w	r5, #18
   1de90:	e7fa      	b.n	1de88 <common_init.isra.0+0x5a>

0001de92 <regulator_fixed_init_sync>:
};

static int regulator_fixed_init_sync(const struct device *dev)
{
	const struct driver_config *cfg = dev->config;
	int rc = common_init(dev);
   1de92:	6840      	ldr	r0, [r0, #4]
   1de94:	f7ff bfcb 	b.w	1de2e <common_init.isra.0>

0001de98 <onoff_worker>:
{
   1de98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (data->task == WORK_TASK_ENABLE) {
   1de9c:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
	const struct driver_config *cfg = data->dev->config;
   1dea0:	f850 3c20 	ldr.w	r3, [r0, #-32]
	onoff_notify_fn notify = data->notify;
   1dea4:	6b07      	ldr	r7, [r0, #48]	; 0x30
	const struct driver_config *cfg = data->dev->config;
   1dea6:	685d      	ldr	r5, [r3, #4]
	if (data->task == WORK_TASK_ENABLE) {
   1dea8:	2901      	cmp	r1, #1
{
   1deaa:	4604      	mov	r4, r0
	struct driver_data_onoff *data
   1deac:	f1a0 0620 	sub.w	r6, r0, #32
	if (data->task == WORK_TASK_ENABLE) {
   1deb0:	d10f      	bne.n	1ded2 <onoff_worker+0x3a>
		rc = gpio_pin_set_dt(&cfg->enable, true);
   1deb2:	f105 000c 	add.w	r0, r5, #12
   1deb6:	f7ff ff5e 	bl	1dd76 <gpio_pin_set_dt>
		delay_us = cfg->startup_delay_us;
   1deba:	686a      	ldr	r2, [r5, #4]
		rc = gpio_pin_set_dt(&cfg->enable, true);
   1debc:	4603      	mov	r3, r0
	data->notify = NULL;
   1debe:	2100      	movs	r1, #0
   1dec0:	6321      	str	r1, [r4, #48]	; 0x30
	data->task = WORK_TASK_UNDEFINED;
   1dec2:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
	finalize_transition(data, notify, delay_us, rc);
   1dec6:	4630      	mov	r0, r6
   1dec8:	4639      	mov	r1, r7
}
   1deca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	finalize_transition(data, notify, delay_us, rc);
   1dece:	f7f5 b8e3 	b.w	13098 <finalize_transition>
	} else if (data->task == WORK_TASK_DISABLE) {
   1ded2:	2902      	cmp	r1, #2
   1ded4:	d107      	bne.n	1dee6 <onoff_worker+0x4e>
		rc = gpio_pin_set_dt(&cfg->enable, false);
   1ded6:	2100      	movs	r1, #0
   1ded8:	f105 000c 	add.w	r0, r5, #12
   1dedc:	f7ff ff4b 	bl	1dd76 <gpio_pin_set_dt>
		delay_us = cfg->off_on_delay_us;
   1dee0:	68aa      	ldr	r2, [r5, #8]
		rc = gpio_pin_set_dt(&cfg->enable, false);
   1dee2:	4603      	mov	r3, r0
		delay_us = cfg->off_on_delay_us;
   1dee4:	e7eb      	b.n	1debe <onoff_worker+0x26>
	int rc = 0;
   1dee6:	2300      	movs	r3, #0
	uint32_t delay_us = 0;
   1dee8:	461a      	mov	r2, r3
   1deea:	e7e8      	b.n	1debe <onoff_worker+0x26>

0001deec <stop>:
{
   1deec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct driver_config *cfg = data->dev->config;
   1def0:	f850 3c04 	ldr.w	r3, [r0, #-4]
{
   1def4:	4604      	mov	r4, r0
	struct driver_data_onoff *data =
   1def6:	1f06      	subs	r6, r0, #4
	const struct driver_config *cfg = data->dev->config;
   1def8:	6858      	ldr	r0, [r3, #4]
{
   1defa:	460d      	mov	r5, r1
	if ((cfg->options & OPTION_ALWAYS_ON) != 0) {
   1defc:	7d01      	ldrb	r1, [r0, #20]
   1defe:	f011 0101 	ands.w	r1, r1, #1
   1df02:	d113      	bne.n	1df2c <stop+0x40>
	uint32_t delay_us = cfg->off_on_delay_us;
   1df04:	6887      	ldr	r7, [r0, #8]
	rc = gpio_pin_set_dt(&cfg->enable, false);
   1df06:	300c      	adds	r0, #12
   1df08:	f7ff ff35 	bl	1dd76 <gpio_pin_set_dt>
	if (rc == -EWOULDBLOCK) {
   1df0c:	f110 0f0b 	cmn.w	r0, #11
	rc = gpio_pin_set_dt(&cfg->enable, false);
   1df10:	4603      	mov	r3, r0
	if (rc == -EWOULDBLOCK) {
   1df12:	d10d      	bne.n	1df30 <stop+0x44>
		data->task = WORK_TASK_DISABLE;
   1df14:	2302      	movs	r3, #2
   1df16:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
		data->notify = notify;
   1df1a:	64e5      	str	r5, [r4, #76]	; 0x4c
		k_work_schedule(&data->dwork, K_NO_WAIT);
   1df1c:	f104 001c 	add.w	r0, r4, #28
   1df20:	2200      	movs	r2, #0
}
   1df22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_work_schedule(&data->dwork, K_NO_WAIT);
   1df26:	2300      	movs	r3, #0
   1df28:	f7f7 bd9a 	b.w	15a60 <k_work_schedule>
	int rc = 0;
   1df2c:	2300      	movs	r3, #0
		delay_us = 0;
   1df2e:	461f      	mov	r7, r3
	finalize_transition(data, notify, delay_us, rc);
   1df30:	463a      	mov	r2, r7
   1df32:	4629      	mov	r1, r5
   1df34:	4630      	mov	r0, r6
}
   1df36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	finalize_transition(data, notify, delay_us, rc);
   1df3a:	f7f5 b8ad 	b.w	13098 <finalize_transition>

0001df3e <start>:
{
   1df3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct driver_config *cfg = data->dev->config;
   1df42:	f850 3c04 	ldr.w	r3, [r0, #-4]
{
   1df46:	4604      	mov	r4, r0
	struct driver_data_onoff *data =
   1df48:	1f07      	subs	r7, r0, #4
	const struct driver_config *cfg = data->dev->config;
   1df4a:	6858      	ldr	r0, [r3, #4]
	if ((cfg->options & OPTION_ALWAYS_ON) != 0) {
   1df4c:	7d03      	ldrb	r3, [r0, #20]
   1df4e:	07db      	lsls	r3, r3, #31
{
   1df50:	460d      	mov	r5, r1
	if ((cfg->options & OPTION_ALWAYS_ON) != 0) {
   1df52:	d414      	bmi.n	1df7e <start+0x40>
	uint32_t delay_us = cfg->startup_delay_us;
   1df54:	6846      	ldr	r6, [r0, #4]
	rc = gpio_pin_set_dt(&cfg->enable, true);
   1df56:	2101      	movs	r1, #1
   1df58:	300c      	adds	r0, #12
   1df5a:	f7ff ff0c 	bl	1dd76 <gpio_pin_set_dt>
	if (rc == -EWOULDBLOCK) {
   1df5e:	f110 0f0b 	cmn.w	r0, #11
	rc = gpio_pin_set_dt(&cfg->enable, true);
   1df62:	4603      	mov	r3, r0
	if (rc == -EWOULDBLOCK) {
   1df64:	d10d      	bne.n	1df82 <start+0x44>
		data->task = WORK_TASK_ENABLE;
   1df66:	2301      	movs	r3, #1
   1df68:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
		data->notify = notify;
   1df6c:	64e5      	str	r5, [r4, #76]	; 0x4c
		k_work_schedule(&data->dwork, K_NO_WAIT);
   1df6e:	f104 001c 	add.w	r0, r4, #28
   1df72:	2200      	movs	r2, #0
}
   1df74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_work_schedule(&data->dwork, K_NO_WAIT);
   1df78:	2300      	movs	r3, #0
   1df7a:	f7f7 bd71 	b.w	15a60 <k_work_schedule>
	int rc = 0;
   1df7e:	2300      	movs	r3, #0
		delay_us = 0;
   1df80:	461e      	mov	r6, r3
	finalize_transition(data, notify, delay_us, rc);
   1df82:	4632      	mov	r2, r6
   1df84:	4629      	mov	r1, r5
   1df86:	4638      	mov	r0, r7
}
   1df88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	finalize_transition(data, notify, delay_us, rc);
   1df8c:	f7f5 b884 	b.w	13098 <finalize_transition>

0001df90 <erase_op>:
{
   1df90:	b570      	push	{r4, r5, r6, lr}
   1df92:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1df94:	f000 f8e5 	bl	1e162 <nrfx_nvmc_flash_page_size_get>
	if (e_ctx->enable_time_limit) {
   1df98:	7b23      	ldrb	r3, [r4, #12]
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1df9a:	4605      	mov	r5, r0
	if (e_ctx->enable_time_limit) {
   1df9c:	b10b      	cbz	r3, 1dfa2 <erase_op+0x12>
		nrf_flash_sync_get_timestamp_begin();
   1df9e:	f7f5 fa1f 	bl	133e0 <nrf_flash_sync_get_timestamp_begin>
{
   1dfa2:	2600      	movs	r6, #0
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   1dfa4:	6860      	ldr	r0, [r4, #4]
   1dfa6:	f7f6 fd2b 	bl	14a00 <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
   1dfaa:	68a3      	ldr	r3, [r4, #8]
   1dfac:	1b5b      	subs	r3, r3, r5
   1dfae:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
   1dfb0:	6863      	ldr	r3, [r4, #4]
   1dfb2:	442b      	add	r3, r5
   1dfb4:	6063      	str	r3, [r4, #4]
		if (e_ctx->enable_time_limit) {
   1dfb6:	7b23      	ldrb	r3, [r4, #12]
		i++;
   1dfb8:	3601      	adds	r6, #1
		if (e_ctx->enable_time_limit) {
   1dfba:	b93b      	cbnz	r3, 1dfcc <erase_op+0x3c>
	} while (e_ctx->len > 0);
   1dfbc:	68a3      	ldr	r3, [r4, #8]
   1dfbe:	2b00      	cmp	r3, #0
   1dfc0:	d1f0      	bne.n	1dfa4 <erase_op+0x14>
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
   1dfc2:	68a0      	ldr	r0, [r4, #8]
}
   1dfc4:	3800      	subs	r0, #0
   1dfc6:	bf18      	it	ne
   1dfc8:	2001      	movne	r0, #1
   1dfca:	bd70      	pop	{r4, r5, r6, pc}
			if (nrf_flash_sync_check_time_limit(i)) {
   1dfcc:	4630      	mov	r0, r6
   1dfce:	f7e4 f98b 	bl	22e8 <nrf_flash_sync_check_time_limit>
   1dfd2:	2800      	cmp	r0, #0
   1dfd4:	d0f2      	beq.n	1dfbc <erase_op+0x2c>
   1dfd6:	e7f4      	b.n	1dfc2 <erase_op+0x32>

0001dfd8 <is_regular_addr_valid>:
{
   1dfd8:	b538      	push	{r3, r4, r5, lr}
   1dfda:	4605      	mov	r5, r0
   1dfdc:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
   1dfde:	f000 f8ba 	bl	1e156 <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
   1dfe2:	2d00      	cmp	r5, #0
   1dfe4:	db07      	blt.n	1dff6 <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
   1dfe6:	42a8      	cmp	r0, r5
   1dfe8:	d905      	bls.n	1dff6 <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
   1dfea:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
   1dfec:	4284      	cmp	r4, r0
   1dfee:	bf8c      	ite	hi
   1dff0:	2000      	movhi	r0, #0
   1dff2:	2001      	movls	r0, #1
}
   1dff4:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
   1dff6:	2000      	movs	r0, #0
   1dff8:	e7fc      	b.n	1dff4 <is_regular_addr_valid+0x1c>

0001dffa <flash_nrf_read>:
{
   1dffa:	b570      	push	{r4, r5, r6, lr}
   1dffc:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   1dffe:	4628      	mov	r0, r5
   1e000:	4619      	mov	r1, r3
{
   1e002:	4616      	mov	r6, r2
   1e004:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   1e006:	f7ff ffe7 	bl	1dfd8 <is_regular_addr_valid>
   1e00a:	b138      	cbz	r0, 1e01c <flash_nrf_read+0x22>
	if (!len) {
   1e00c:	b14c      	cbz	r4, 1e022 <flash_nrf_read+0x28>
	memcpy(data, (void *)addr, len);
   1e00e:	4622      	mov	r2, r4
   1e010:	4629      	mov	r1, r5
   1e012:	4630      	mov	r0, r6
   1e014:	f7f9 f91e 	bl	17254 <memcpy>
	return 0;
   1e018:	2000      	movs	r0, #0
}
   1e01a:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   1e01c:	f06f 0015 	mvn.w	r0, #21
   1e020:	e7fb      	b.n	1e01a <flash_nrf_read+0x20>
		return 0;
   1e022:	4620      	mov	r0, r4
   1e024:	e7f9      	b.n	1e01a <flash_nrf_read+0x20>

0001e026 <nrf_flash_sync_is_required>:
	return ticker_is_initialized(0);
   1e026:	2000      	movs	r0, #0
   1e028:	f7ed bca0 	b.w	b96c <ticker_is_initialized>

0001e02c <uarte_nrfx_config_get>:
	*cfg = data->uart_config;
   1e02c:	6902      	ldr	r2, [r0, #16]
{
   1e02e:	460b      	mov	r3, r1
	*cfg = data->uart_config;
   1e030:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   1e034:	e883 0003 	stmia.w	r3, {r0, r1}
}
   1e038:	2000      	movs	r0, #0
   1e03a:	4770      	bx	lr

0001e03c <uarte_nrfx_err_check>:
	return config->uarte_regs;
   1e03c:	6843      	ldr	r3, [r0, #4]
   1e03e:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1e040:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1e044:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1e048:	4770      	bx	lr

0001e04a <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   1e04a:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   1e04c:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   1e04e:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e050:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1e054:	b148      	cbz	r0, 1e06a <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
   1e056:	7c52      	ldrb	r2, [r2, #17]
   1e058:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e05a:	2000      	movs	r0, #0
   1e05c:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1e060:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e064:	2201      	movs	r2, #1
   1e066:	601a      	str	r2, [r3, #0]
	return 0;
   1e068:	4770      	bx	lr
		return -1;
   1e06a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1e06e:	4770      	bx	lr

0001e070 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   1e070:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   1e072:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e074:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1e078:	b940      	cbnz	r0, 1e08c <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   1e07a:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1e07c:	079b      	lsls	r3, r3, #30
   1e07e:	d406      	bmi.n	1e08e <is_tx_ready.isra.0+0x1e>
   1e080:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   1e084:	3800      	subs	r0, #0
   1e086:	bf18      	it	ne
   1e088:	2001      	movne	r0, #1
   1e08a:	4770      	bx	lr
   1e08c:	2001      	movs	r0, #1
}
   1e08e:	4770      	bx	lr

0001e090 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
   1e090:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   1e092:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   1e094:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   1e098:	05c9      	lsls	r1, r1, #23
   1e09a:	d518      	bpl.n	1e0ce <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e09c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   1e0a0:	b1a9      	cbz	r1, 1e0ce <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   1e0a2:	f04f 0020 	mov.w	r0, #32
   1e0a6:	f3ef 8111 	mrs	r1, BASEPRI
   1e0aa:	f380 8812 	msr	BASEPRI_MAX, r0
   1e0ae:	f3bf 8f6f 	isb	sy
   1e0b2:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1e0b6:	b130      	cbz	r0, 1e0c6 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e0b8:	2000      	movs	r0, #0
   1e0ba:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   1e0be:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e0c2:	2001      	movs	r0, #1
   1e0c4:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
   1e0c6:	f381 8811 	msr	BASEPRI, r1
   1e0ca:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1e0ce:	6852      	ldr	r2, [r2, #4]
   1e0d0:	06d2      	lsls	r2, r2, #27
   1e0d2:	d515      	bpl.n	1e100 <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
   1e0d4:	f04f 0120 	mov.w	r1, #32
   1e0d8:	f3ef 8211 	mrs	r2, BASEPRI
   1e0dc:	f381 8812 	msr	BASEPRI_MAX, r1
   1e0e0:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e0e4:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   1e0e8:	b111      	cbz	r1, 1e0f0 <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1e0ea:	2100      	movs	r1, #0
   1e0ec:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   1e0f0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   1e0f4:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   1e0f8:	f382 8811 	msr	BASEPRI, r2
   1e0fc:	f3bf 8f6f 	isb	sy
}
   1e100:	4770      	bx	lr

0001e102 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   1e102:	4770      	bx	lr

0001e104 <nrf52_errata_108>:
            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   1e104:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1e108:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
   1e10c:	1c42      	adds	r2, r0, #1
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1e10e:	bf04      	itt	eq
   1e110:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
   1e114:	f893 0fe0 	ldrbeq.w	r0, [r3, #4064]	; 0xfe0
}
   1e118:	1f83      	subs	r3, r0, #6
   1e11a:	4258      	negs	r0, r3
   1e11c:	4158      	adcs	r0, r3
   1e11e:	4770      	bx	lr

0001e120 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   1e120:	4700      	bx	r0

0001e122 <nrfx_busy_wait>:
   1e122:	f000 bc96 	b.w	1ea52 <z_impl_k_busy_wait>

0001e126 <nrfx_clock_enable>:
{
   1e126:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   1e128:	2000      	movs	r0, #0
   1e12a:	f7e5 fdbb 	bl	3ca4 <arch_irq_is_enabled>
   1e12e:	b918      	cbnz	r0, 1e138 <nrfx_clock_enable+0x12>
}
   1e130:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   1e134:	f7e5 bd92 	b.w	3c5c <arch_irq_enable>
   1e138:	bd08      	pop	{r3, pc}

0001e13a <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
   1e13a:	f000 001f 	and.w	r0, r0, #31
   1e13e:	0080      	lsls	r0, r0, #2
   1e140:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1e144:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    cnf &= ~to_update;
   1e148:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1e14c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   1e150:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
   1e154:	4770      	bx	lr

0001e156 <nrfx_nvmc_flash_size_get>:
    return p_reg->CODEPAGESIZE;
   1e156:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1e15a:	691a      	ldr	r2, [r3, #16]
    return p_reg->CODESIZE;
   1e15c:	6958      	ldr	r0, [r3, #20]
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   1e15e:	4350      	muls	r0, r2
   1e160:	4770      	bx	lr

0001e162 <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
   1e162:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1e166:	6918      	ldr	r0, [r3, #16]

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   1e168:	4770      	bx	lr

0001e16a <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
   1e16a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1e16e:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   1e170:	4770      	bx	lr

0001e172 <xfer_completeness_check>:
    switch (p_cb->xfer_desc.type)
   1e172:	7b0a      	ldrb	r2, [r1, #12]
{
   1e174:	4603      	mov	r3, r0
    switch (p_cb->xfer_desc.type)
   1e176:	2a03      	cmp	r2, #3
   1e178:	d829      	bhi.n	1e1ce <xfer_completeness_check+0x5c>
   1e17a:	e8df f002 	tbb	[pc, r2]
   1e17e:	2521      	.short	0x2521
   1e180:	0219      	.short	0x0219
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   1e182:	688a      	ldr	r2, [r1, #8]
   1e184:	0350      	lsls	r0, r2, #13
   1e186:	d504      	bpl.n	1e192 <xfer_completeness_check+0x20>
    return p_reg->TXD.AMOUNT;
   1e188:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
   1e18c:	6908      	ldr	r0, [r1, #16]
   1e18e:	4290      	cmp	r0, r2
   1e190:	d107      	bne.n	1e1a2 <xfer_completeness_check+0x30>
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   1e192:	688a      	ldr	r2, [r1, #8]
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
   1e194:	0352      	lsls	r2, r2, #13
   1e196:	d41a      	bmi.n	1e1ce <xfer_completeness_check+0x5c>
   1e198:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   1e19c:	6949      	ldr	r1, [r1, #20]
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   1e19e:	4291      	cmp	r1, r2
   1e1a0:	d015      	beq.n	1e1ce <xfer_completeness_check+0x5c>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   1e1a2:	2000      	movs	r0, #0
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   1e1a4:	2206      	movs	r2, #6
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   1e1a6:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   1e1aa:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   1e1ae:	4770      	bx	lr
    return p_reg->TXD.AMOUNT;
   1e1b0:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   1e1b4:	6908      	ldr	r0, [r1, #16]
   1e1b6:	4290      	cmp	r0, r2
   1e1b8:	d1f3      	bne.n	1e1a2 <xfer_completeness_check+0x30>
    return p_reg->RXD.AMOUNT;
   1e1ba:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
   1e1be:	e7ed      	b.n	1e19c <xfer_completeness_check+0x2a>
    return p_reg->TXD.AMOUNT;
   1e1c0:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   1e1c4:	6909      	ldr	r1, [r1, #16]
   1e1c6:	e7ea      	b.n	1e19e <xfer_completeness_check+0x2c>
    return p_reg->RXD.AMOUNT;
   1e1c8:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
   1e1cc:	e7fa      	b.n	1e1c4 <xfer_completeness_check+0x52>
    bool transfer_complete = true;
   1e1ce:	2001      	movs	r0, #1
}
   1e1d0:	4770      	bx	lr

0001e1d2 <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
   1e1d2:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
   1e1d4:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
   1e1d6:	4293      	cmp	r3, r2
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   1e1d8:	bf9c      	itt	ls
   1e1da:	6880      	ldrls	r0, [r0, #8]
   1e1dc:	181b      	addls	r3, r3, r0
    r = RdOff - WrOff - 1u;
   1e1de:	3b01      	subs	r3, #1
   1e1e0:	1a98      	subs	r0, r3, r2
}
   1e1e2:	4770      	bx	lr

0001e1e4 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1e1e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
   1e1e8:	e9d0 9402 	ldrd	r9, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1e1ec:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
   1e1ee:	eba9 0804 	sub.w	r8, r9, r4
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1e1f2:	6840      	ldr	r0, [r0, #4]
  if (Rem > NumBytes) {
   1e1f4:	4590      	cmp	r8, r2
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1e1f6:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1e1f8:	460f      	mov	r7, r1
    pRing->WrOff = WrOff + NumBytes;
   1e1fa:	4414      	add	r4, r2
  if (Rem > NumBytes) {
   1e1fc:	d906      	bls.n	1e20c <_WriteNoCheck+0x28>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
   1e1fe:	f7f9 f829 	bl	17254 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
   1e202:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
   1e206:	60ec      	str	r4, [r5, #12]
}
   1e208:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
   1e20c:	4642      	mov	r2, r8
    NumBytesAtOnce = NumBytes - Rem;
   1e20e:	eba4 0409 	sub.w	r4, r4, r9
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
   1e212:	f7f9 f81f 	bl	17254 <memcpy>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
   1e216:	6868      	ldr	r0, [r5, #4]
   1e218:	4622      	mov	r2, r4
   1e21a:	eb07 0108 	add.w	r1, r7, r8
   1e21e:	e7ee      	b.n	1e1fe <_WriteNoCheck+0x1a>

0001e220 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   1e220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
   1e224:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   1e226:	4606      	mov	r6, r0
   1e228:	4689      	mov	r9, r1
   1e22a:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
   1e22c:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   1e230:	6934      	ldr	r4, [r6, #16]
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   1e232:	68b3      	ldr	r3, [r6, #8]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1e234:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
   1e236:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   1e238:	bf28      	it	cs
   1e23a:	18e4      	addcs	r4, r4, r3
   1e23c:	3c01      	subs	r4, #1
   1e23e:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   1e240:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   1e242:	42bc      	cmp	r4, r7
   1e244:	bf28      	it	cs
   1e246:	463c      	movcs	r4, r7
   1e248:	4294      	cmp	r4, r2
   1e24a:	bf28      	it	cs
   1e24c:	4614      	movcs	r4, r2
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
   1e24e:	4649      	mov	r1, r9
   1e250:	4622      	mov	r2, r4
   1e252:	4428      	add	r0, r5
   1e254:	f7f8 fffe 	bl	17254 <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
   1e258:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
   1e25a:	4425      	add	r5, r4
    NumBytesWritten += NumBytesToWrite;
   1e25c:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
   1e25e:	44a1      	add	r9, r4
    NumBytes        -= NumBytesToWrite;
   1e260:	1b3f      	subs	r7, r7, r4
      WrOff = 0u;
   1e262:	42ab      	cmp	r3, r5
   1e264:	bf08      	it	eq
   1e266:	2500      	moveq	r5, #0
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
   1e268:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
   1e26c:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
   1e26e:	2f00      	cmp	r7, #0
   1e270:	d1de      	bne.n	1e230 <_WriteBlocking+0x10>
}
   1e272:	4640      	mov	r0, r8
   1e274:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001e278 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   1e278:	f7f6 bf3e 	b.w	150f8 <_DoInit>

0001e27c <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   1e27c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   1e27e:	f7ff fffb 	bl	1e278 <SEGGER_RTT_Init>

	return 0;
}
   1e282:	2000      	movs	r0, #0
   1e284:	bd08      	pop	{r3, pc}

0001e286 <z_device_state_init>:
}
   1e286:	4770      	bx	lr

0001e288 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   1e288:	b138      	cbz	r0, 1e29a <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   1e28a:	68c3      	ldr	r3, [r0, #12]
   1e28c:	8818      	ldrh	r0, [r3, #0]
   1e28e:	f3c0 0008 	ubfx	r0, r0, #0, #9
   1e292:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   1e296:	4258      	negs	r0, r3
   1e298:	4158      	adcs	r0, r3
}
   1e29a:	4770      	bx	lr

0001e29c <arch_system_halt>:
	__asm__ volatile(
   1e29c:	f04f 0220 	mov.w	r2, #32
   1e2a0:	f3ef 8311 	mrs	r3, BASEPRI
   1e2a4:	f382 8812 	msr	BASEPRI_MAX, r2
   1e2a8:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
   1e2ac:	e7fe      	b.n	1e2ac <arch_system_halt+0x10>

0001e2ae <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
   1e2ae:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
   1e2b0:	f7ff fff4 	bl	1e29c <arch_system_halt>

0001e2b4 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1e2b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e2b6:	4605      	mov	r5, r0
   1e2b8:	460e      	mov	r6, r1
   1e2ba:	f04f 0320 	mov.w	r3, #32
   1e2be:	f3ef 8711 	mrs	r7, BASEPRI
   1e2c2:	f383 8812 	msr	BASEPRI_MAX, r3
   1e2c6:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   1e2ca:	f7f7 feab 	bl	16024 <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   1e2ce:	4631      	mov	r1, r6
   1e2d0:	4604      	mov	r4, r0
   1e2d2:	4628      	mov	r0, r5
   1e2d4:	f7ff ffeb 	bl	1e2ae <k_sys_fatal_error_handler>
	__asm__ volatile(
   1e2d8:	f387 8811 	msr	BASEPRI, r7
   1e2dc:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1e2e0:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   1e2e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1e2e6:	f7e5 bf21 	b.w	412c <z_impl_k_thread_abort>

0001e2ea <k_heap_init>:
{
   1e2ea:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   1e2ec:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   1e2f0:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   1e2f4:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   1e2f6:	f7f8 bc20 	b.w	16b3a <sys_heap_init>

0001e2fa <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   1e2fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e2fe:	b085      	sub	sp, #20
   1e300:	4606      	mov	r6, r0
   1e302:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1e304:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
{
   1e308:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1e30a:	f000 fba6 	bl	1ea5a <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   1e30e:	f106 0a14 	add.w	sl, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1e312:	4605      	mov	r5, r0
   1e314:	460f      	mov	r7, r1
	__asm__ volatile(
   1e316:	f04f 0320 	mov.w	r3, #32
   1e31a:	f3ef 8411 	mrs	r4, BASEPRI
   1e31e:	f383 8812 	msr	BASEPRI_MAX, r3
   1e322:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1e326:	f106 0b0c 	add.w	fp, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   1e32a:	464a      	mov	r2, r9
   1e32c:	4641      	mov	r1, r8
   1e32e:	4630      	mov	r0, r6
   1e330:	f7f8 fb9b 	bl	16a6a <sys_heap_aligned_alloc>
   1e334:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   1e336:	f7f8 f84f 	bl	163d8 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   1e33a:	9b03      	ldr	r3, [sp, #12]
   1e33c:	b13b      	cbz	r3, 1e34e <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   1e33e:	f384 8811 	msr	BASEPRI, r4
   1e342:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   1e346:	4618      	mov	r0, r3
   1e348:	b005      	add	sp, #20
   1e34a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   1e34e:	1a28      	subs	r0, r5, r0
   1e350:	eb67 0101 	sbc.w	r1, r7, r1
   1e354:	2801      	cmp	r0, #1
   1e356:	f171 0200 	sbcs.w	r2, r1, #0
   1e35a:	dbf0      	blt.n	1e33e <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1e35c:	e9cd 0100 	strd	r0, r1, [sp]
   1e360:	465a      	mov	r2, fp
   1e362:	4621      	mov	r1, r4
   1e364:	4650      	mov	r0, sl
   1e366:	f7f7 fd4d 	bl	15e04 <z_pend_curr>
	__asm__ volatile(
   1e36a:	f04f 0320 	mov.w	r3, #32
   1e36e:	f3ef 8411 	mrs	r4, BASEPRI
   1e372:	f383 8812 	msr	BASEPRI_MAX, r3
   1e376:	f3bf 8f6f 	isb	sy
   1e37a:	e7d6      	b.n	1e32a <k_heap_aligned_alloc+0x30>

0001e37c <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   1e37c:	b538      	push	{r3, r4, r5, lr}
   1e37e:	4604      	mov	r4, r0
   1e380:	f04f 0320 	mov.w	r3, #32
   1e384:	f3ef 8511 	mrs	r5, BASEPRI
   1e388:	f383 8812 	msr	BASEPRI_MAX, r3
   1e38c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   1e390:	f7f8 fb33 	bl	169fa <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   1e394:	f104 000c 	add.w	r0, r4, #12
   1e398:	f000 fad8 	bl	1e94c <z_unpend_all>
   1e39c:	b130      	cbz	r0, 1e3ac <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   1e39e:	4629      	mov	r1, r5
   1e3a0:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   1e3a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   1e3a8:	f7f7 bbda 	b.w	15b60 <z_reschedule>
	__asm__ volatile(
   1e3ac:	f385 8811 	msr	BASEPRI, r5
   1e3b0:	f3bf 8f6f 	isb	sy
}
   1e3b4:	bd38      	pop	{r3, r4, r5, pc}

0001e3b6 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1e3b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e3b8:	4604      	mov	r4, r0
   1e3ba:	460d      	mov	r5, r1
	__asm__ volatile(
   1e3bc:	f04f 0320 	mov.w	r3, #32
   1e3c0:	f3ef 8611 	mrs	r6, BASEPRI
   1e3c4:	f383 8812 	msr	BASEPRI_MAX, r3
   1e3c8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   1e3cc:	6947      	ldr	r7, [r0, #20]
   1e3ce:	b977      	cbnz	r7, 1e3ee <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1e3d0:	f000 faa4 	bl	1e91c <z_unpend_first_thread>

		if (pending_thread != NULL) {
   1e3d4:	b158      	cbz	r0, 1e3ee <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1e3d6:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1e3d8:	6142      	str	r2, [r0, #20]
   1e3da:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   1e3dc:	f000 fa42 	bl	1e864 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   1e3e0:	4631      	mov	r1, r6
   1e3e2:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   1e3e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   1e3ea:	f7f7 bbb9 	b.w	15b60 <z_reschedule>
	**(char ***) mem = slab->free_list;
   1e3ee:	682b      	ldr	r3, [r5, #0]
   1e3f0:	6962      	ldr	r2, [r4, #20]
   1e3f2:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   1e3f4:	682b      	ldr	r3, [r5, #0]
   1e3f6:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   1e3f8:	69a3      	ldr	r3, [r4, #24]
   1e3fa:	3b01      	subs	r3, #1
   1e3fc:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   1e3fe:	f386 8811 	msr	BASEPRI, r6
   1e402:	f3bf 8f6f 	isb	sy
}
   1e406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001e408 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1e408:	f3ef 8005 	mrs	r0, IPSR
}
   1e40c:	3800      	subs	r0, #0
   1e40e:	bf18      	it	ne
   1e410:	2001      	movne	r0, #1
   1e412:	4770      	bx	lr

0001e414 <z_impl_k_thread_name_set>:
}
   1e414:	f06f 0057 	mvn.w	r0, #87	; 0x57
   1e418:	4770      	bx	lr

0001e41a <z_impl_k_thread_start>:
	z_sched_start(thread);
   1e41a:	f7f7 bc97 	b.w	15d4c <z_sched_start>

0001e41e <z_pm_save_idle_exit>:
{
   1e41e:	b508      	push	{r3, lr}
	pm_system_resume();
   1e420:	f7e5 fa84 	bl	392c <pm_system_resume>
}
   1e424:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   1e428:	f7ff be6b 	b.w	1e102 <sys_clock_idle_exit>

0001e42c <queue_insert>:
{
   1e42c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e430:	4699      	mov	r9, r3
   1e432:	4604      	mov	r4, r0
   1e434:	f89d 3020 	ldrb.w	r3, [sp, #32]
   1e438:	460d      	mov	r5, r1
   1e43a:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1e43c:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   1e440:	f04f 0220 	mov.w	r2, #32
   1e444:	f3ef 8711 	mrs	r7, BASEPRI
   1e448:	f382 8812 	msr	BASEPRI_MAX, r2
   1e44c:	f3bf 8f6f 	isb	sy
	if (is_append) {
   1e450:	b103      	cbz	r3, 1e454 <queue_insert+0x28>
	return list->tail;
   1e452:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   1e454:	4630      	mov	r0, r6
   1e456:	f000 fa61 	bl	1e91c <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   1e45a:	b158      	cbz	r0, 1e474 <queue_insert+0x48>
   1e45c:	2400      	movs	r4, #0
   1e45e:	67c4      	str	r4, [r0, #124]	; 0x7c
   1e460:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   1e464:	f000 f9fe 	bl	1e864 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   1e468:	4630      	mov	r0, r6
   1e46a:	4639      	mov	r1, r7
   1e46c:	f7f7 fb78 	bl	15b60 <z_reschedule>
	return 0;
   1e470:	2000      	movs	r0, #0
   1e472:	e00c      	b.n	1e48e <queue_insert+0x62>
	if (alloc) {
   1e474:	f1b9 0f00 	cmp.w	r9, #0
   1e478:	d01b      	beq.n	1e4b2 <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   1e47a:	2108      	movs	r1, #8
   1e47c:	f7f8 f848 	bl	16510 <z_thread_aligned_alloc>
		if (anode == NULL) {
   1e480:	b938      	cbnz	r0, 1e492 <queue_insert+0x66>
	__asm__ volatile(
   1e482:	f387 8811 	msr	BASEPRI, r7
   1e486:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   1e48a:	f06f 000b 	mvn.w	r0, #11
}
   1e48e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   1e492:	2301      	movs	r3, #1
		anode->data = data;
   1e494:	f8c0 8004 	str.w	r8, [r0, #4]
   1e498:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1e49a:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1e49c:	f003 0203 	and.w	r2, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
   1e4a0:	b95d      	cbnz	r5, 1e4ba <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1e4a2:	6823      	ldr	r3, [r4, #0]
   1e4a4:	4313      	orrs	r3, r2
   1e4a6:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1e4a8:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   1e4aa:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1e4ac:	b973      	cbnz	r3, 1e4cc <queue_insert+0xa0>
	list->tail = node;
   1e4ae:	6060      	str	r0, [r4, #4]
}
   1e4b0:	e00c      	b.n	1e4cc <queue_insert+0xa0>
	node->next_and_flags = flags;
   1e4b2:	f8c8 9000 	str.w	r9, [r8]
}
   1e4b6:	4640      	mov	r0, r8
   1e4b8:	e7ef      	b.n	1e49a <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1e4ba:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1e4bc:	f033 0303 	bics.w	r3, r3, #3
   1e4c0:	d110      	bne.n	1e4e4 <queue_insert+0xb8>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1e4c2:	6002      	str	r2, [r0, #0]
	return list->tail;
   1e4c4:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   1e4c6:	b93a      	cbnz	r2, 1e4d8 <queue_insert+0xac>
	list->head = node;
   1e4c8:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1e4cc:	2104      	movs	r1, #4
   1e4ce:	f104 0010 	add.w	r0, r4, #16
   1e4d2:	f000 fc2b 	bl	1ed2c <z_handle_obj_poll_events>
   1e4d6:	e7c7      	b.n	1e468 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1e4d8:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1e4da:	f003 0303 	and.w	r3, r3, #3
   1e4de:	4303      	orrs	r3, r0
   1e4e0:	6013      	str	r3, [r2, #0]
   1e4e2:	e7e4      	b.n	1e4ae <queue_insert+0x82>
   1e4e4:	4313      	orrs	r3, r2
   1e4e6:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1e4e8:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1e4ea:	f003 0303 	and.w	r3, r3, #3
   1e4ee:	4303      	orrs	r3, r0
   1e4f0:	602b      	str	r3, [r5, #0]
}
   1e4f2:	e7eb      	b.n	1e4cc <queue_insert+0xa0>

0001e4f4 <z_queue_node_peek>:
{
   1e4f4:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   1e4f6:	4604      	mov	r4, r0
   1e4f8:	b130      	cbz	r0, 1e508 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1e4fa:	6802      	ldr	r2, [r0, #0]
   1e4fc:	0793      	lsls	r3, r2, #30
   1e4fe:	d003      	beq.n	1e508 <z_queue_node_peek+0x14>
		ret = anode->data;
   1e500:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   1e502:	b109      	cbz	r1, 1e508 <z_queue_node_peek+0x14>
			k_free(anode);
   1e504:	f000 fc20 	bl	1ed48 <k_free>
}
   1e508:	4620      	mov	r0, r4
   1e50a:	bd10      	pop	{r4, pc}

0001e50c <z_impl_k_queue_init>:
	list->head = NULL;
   1e50c:	2300      	movs	r3, #0
	list->tail = NULL;
   1e50e:	e9c0 3300 	strd	r3, r3, [r0]
   1e512:	f100 0308 	add.w	r3, r0, #8
   1e516:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   1e51a:	f100 0310 	add.w	r3, r0, #16
   1e51e:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   1e522:	4770      	bx	lr

0001e524 <k_queue_append>:
{
   1e524:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   1e526:	2301      	movs	r3, #1
   1e528:	9300      	str	r3, [sp, #0]
   1e52a:	2300      	movs	r3, #0
{
   1e52c:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   1e52e:	4619      	mov	r1, r3
   1e530:	f7ff ff7c 	bl	1e42c <queue_insert>
}
   1e534:	b003      	add	sp, #12
   1e536:	f85d fb04 	ldr.w	pc, [sp], #4

0001e53a <k_queue_prepend>:
{
   1e53a:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   1e53c:	2300      	movs	r3, #0
{
   1e53e:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   1e540:	9300      	str	r3, [sp, #0]
   1e542:	4619      	mov	r1, r3
   1e544:	f7ff ff72 	bl	1e42c <queue_insert>
}
   1e548:	b003      	add	sp, #12
   1e54a:	f85d fb04 	ldr.w	pc, [sp], #4

0001e54e <k_queue_append_list>:
{
   1e54e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e552:	4605      	mov	r5, r0
   1e554:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   1e556:	460c      	mov	r4, r1
   1e558:	b391      	cbz	r1, 1e5c0 <k_queue_append_list+0x72>
   1e55a:	b38a      	cbz	r2, 1e5c0 <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1e55c:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   1e560:	f04f 0320 	mov.w	r3, #32
   1e564:	f3ef 8811 	mrs	r8, BASEPRI
   1e568:	f383 8812 	msr	BASEPRI_MAX, r3
   1e56c:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   1e570:	4638      	mov	r0, r7
   1e572:	f000 f9d3 	bl	1e91c <z_unpend_first_thread>
   1e576:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   1e57a:	b920      	cbnz	r0, 1e586 <k_queue_append_list+0x38>
	return list->tail;
   1e57c:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   1e57e:	b9ca      	cbnz	r2, 1e5b4 <k_queue_append_list+0x66>
	list->head = node;
   1e580:	602c      	str	r4, [r5, #0]
	list->tail = node;
   1e582:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   1e584:	e00a      	b.n	1e59c <k_queue_append_list+0x4e>
	thread->base.swap_data = data;
   1e586:	6144      	str	r4, [r0, #20]
   1e588:	f8c0 907c 	str.w	r9, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   1e58c:	f000 f96a 	bl	1e864 <z_ready_thread>
		head = *(void **)head;
   1e590:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   1e592:	4638      	mov	r0, r7
   1e594:	f000 f9c2 	bl	1e91c <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   1e598:	2c00      	cmp	r4, #0
   1e59a:	d1ee      	bne.n	1e57a <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   1e59c:	2104      	movs	r1, #4
   1e59e:	f105 0010 	add.w	r0, r5, #16
   1e5a2:	f000 fbc3 	bl	1ed2c <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   1e5a6:	4638      	mov	r0, r7
   1e5a8:	4641      	mov	r1, r8
   1e5aa:	f7f7 fad9 	bl	15b60 <z_reschedule>
	return 0;
   1e5ae:	2000      	movs	r0, #0
}
   1e5b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1e5b4:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1e5b6:	f003 0303 	and.w	r3, r3, #3
   1e5ba:	431c      	orrs	r4, r3
   1e5bc:	6014      	str	r4, [r2, #0]
}
   1e5be:	e7e0      	b.n	1e582 <k_queue_append_list+0x34>
		return -EINVAL;
   1e5c0:	f06f 0015 	mvn.w	r0, #21
   1e5c4:	e7f4      	b.n	1e5b0 <k_queue_append_list+0x62>

0001e5c6 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   1e5c6:	b15a      	cbz	r2, 1e5e0 <z_impl_k_sem_init+0x1a>
   1e5c8:	428a      	cmp	r2, r1
   1e5ca:	d309      	bcc.n	1e5e0 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   1e5cc:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   1e5d0:	e9c0 1202 	strd	r1, r2, [r0, #8]
   1e5d4:	e9c0 0000 	strd	r0, r0, [r0]
   1e5d8:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   1e5dc:	2000      	movs	r0, #0
   1e5de:	4770      	bx	lr
		return -EINVAL;
   1e5e0:	f06f 0015 	mvn.w	r0, #21
}
   1e5e4:	4770      	bx	lr

0001e5e6 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   1e5e6:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   1e5e8:	2301      	movs	r3, #1
   1e5ea:	408b      	lsls	r3, r1
   1e5ec:	ea22 0303 	bic.w	r3, r2, r3
   1e5f0:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   1e5f2:	fa22 f001 	lsr.w	r0, r2, r1
}
   1e5f6:	f000 0001 	and.w	r0, r0, #1
   1e5fa:	4770      	bx	lr

0001e5fc <unschedule_locked>:
{
   1e5fc:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   1e5fe:	2103      	movs	r1, #3
{
   1e600:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   1e602:	300c      	adds	r0, #12
   1e604:	f7ff ffef 	bl	1e5e6 <flag_test_and_clear>
   1e608:	4604      	mov	r4, r0
   1e60a:	b118      	cbz	r0, 1e614 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   1e60c:	f105 0010 	add.w	r0, r5, #16
   1e610:	f000 f9c9 	bl	1e9a6 <z_abort_timeout>
}
   1e614:	4620      	mov	r0, r4
   1e616:	bd38      	pop	{r3, r4, r5, pc}

0001e618 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   1e618:	b120      	cbz	r0, 1e624 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   1e61a:	2200      	movs	r2, #0
   1e61c:	4611      	mov	r1, r2
   1e61e:	3088      	adds	r0, #136	; 0x88
   1e620:	f000 b9a4 	b.w	1e96c <z_sched_wake>
}
   1e624:	4770      	bx	lr

0001e626 <cancel_async_locked>:
	return (*flagp & BIT(bit)) != 0U;
   1e626:	68c3      	ldr	r3, [r0, #12]
{
   1e628:	b570      	push	{r4, r5, r6, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1e62a:	f3c3 0540 	ubfx	r5, r3, #1, #1
   1e62e:	079b      	lsls	r3, r3, #30
{
   1e630:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1e632:	d416      	bmi.n	1e662 <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   1e634:	6886      	ldr	r6, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   1e636:	2102      	movs	r1, #2
   1e638:	300c      	adds	r0, #12
   1e63a:	f7ff ffd4 	bl	1e5e6 <flag_test_and_clear>
   1e63e:	b180      	cbz	r0, 1e662 <cancel_async_locked+0x3c>
	return list->head;
   1e640:	f8d6 2080 	ldr.w	r2, [r6, #128]	; 0x80
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1e644:	b16a      	cbz	r2, 1e662 <cancel_async_locked+0x3c>
   1e646:	4294      	cmp	r4, r2
   1e648:	d11b      	bne.n	1e682 <cancel_async_locked+0x5c>
	return node->next;
   1e64a:	6822      	ldr	r2, [r4, #0]
	return list->tail;
   1e64c:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
Z_GENLIST_REMOVE(slist, snode)
   1e650:	b98d      	cbnz	r5, 1e676 <cancel_async_locked+0x50>
   1e652:	428c      	cmp	r4, r1
	list->head = node;
   1e654:	f8c6 2080 	str.w	r2, [r6, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   1e658:	d101      	bne.n	1e65e <cancel_async_locked+0x38>
	list->tail = node;
   1e65a:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
	parent->next = child;
   1e65e:	2300      	movs	r3, #0
   1e660:	6023      	str	r3, [r4, #0]
	return *flagp;
   1e662:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   1e664:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   1e668:	bf1e      	ittt	ne
   1e66a:	f043 0302 	orrne.w	r3, r3, #2
   1e66e:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   1e670:	f003 000f 	andne.w	r0, r3, #15
}
   1e674:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_REMOVE(slist, snode)
   1e676:	428c      	cmp	r4, r1
	parent->next = child;
   1e678:	602a      	str	r2, [r5, #0]
	list->tail = node;
   1e67a:	bf08      	it	eq
   1e67c:	f8c6 5084 	streq.w	r5, [r6, #132]	; 0x84
}
   1e680:	e7ed      	b.n	1e65e <cancel_async_locked+0x38>
	return node->next;
   1e682:	4615      	mov	r5, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1e684:	6812      	ldr	r2, [r2, #0]
   1e686:	e7dd      	b.n	1e644 <cancel_async_locked+0x1e>

0001e688 <work_timeout>:
{
   1e688:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1e68a:	4604      	mov	r4, r0
   1e68c:	f04f 0320 	mov.w	r3, #32
   1e690:	f3ef 8511 	mrs	r5, BASEPRI
   1e694:	f383 8812 	msr	BASEPRI_MAX, r3
   1e698:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   1e69c:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   1e69e:	f1a0 0610 	sub.w	r6, r0, #16
   1e6a2:	2103      	movs	r1, #3
   1e6a4:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   1e6a6:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   1e6a8:	f7ff ff9d 	bl	1e5e6 <flag_test_and_clear>
   1e6ac:	b128      	cbz	r0, 1e6ba <work_timeout+0x32>
		queue = dw->queue;
   1e6ae:	69a3      	ldr	r3, [r4, #24]
   1e6b0:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   1e6b2:	a901      	add	r1, sp, #4
   1e6b4:	4630      	mov	r0, r6
   1e6b6:	f7f7 f91b 	bl	158f0 <submit_to_queue_locked>
	__asm__ volatile(
   1e6ba:	f385 8811 	msr	BASEPRI, r5
   1e6be:	f3bf 8f6f 	isb	sy
}
   1e6c2:	b002      	add	sp, #8
   1e6c4:	bd70      	pop	{r4, r5, r6, pc}

0001e6c6 <k_work_init>:
{
   1e6c6:	b538      	push	{r3, r4, r5, lr}
   1e6c8:	4604      	mov	r4, r0
   1e6ca:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   1e6cc:	2210      	movs	r2, #16
   1e6ce:	2100      	movs	r1, #0
   1e6d0:	f7f8 fdcb 	bl	1726a <memset>
   1e6d4:	6065      	str	r5, [r4, #4]
}
   1e6d6:	bd38      	pop	{r3, r4, r5, pc}

0001e6d8 <k_work_busy_get>:
	__asm__ volatile(
   1e6d8:	f04f 0220 	mov.w	r2, #32
   1e6dc:	f3ef 8311 	mrs	r3, BASEPRI
   1e6e0:	f382 8812 	msr	BASEPRI_MAX, r2
   1e6e4:	f3bf 8f6f 	isb	sy
	return flags_get(&work->flags) & K_WORK_MASK;
   1e6e8:	68c0      	ldr	r0, [r0, #12]
   1e6ea:	f000 000f 	and.w	r0, r0, #15
	__asm__ volatile(
   1e6ee:	f383 8811 	msr	BASEPRI, r3
   1e6f2:	f3bf 8f6f 	isb	sy
}
   1e6f6:	4770      	bx	lr

0001e6f8 <k_work_submit_to_queue>:
{
   1e6f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1e6fa:	9001      	str	r0, [sp, #4]
   1e6fc:	4608      	mov	r0, r1
	__asm__ volatile(
   1e6fe:	f04f 0320 	mov.w	r3, #32
   1e702:	f3ef 8511 	mrs	r5, BASEPRI
   1e706:	f383 8812 	msr	BASEPRI_MAX, r3
   1e70a:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   1e70e:	a901      	add	r1, sp, #4
   1e710:	f7f7 f8ee 	bl	158f0 <submit_to_queue_locked>
   1e714:	4604      	mov	r4, r0
	__asm__ volatile(
   1e716:	f385 8811 	msr	BASEPRI, r5
   1e71a:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   1e71e:	2800      	cmp	r0, #0
   1e720:	dd04      	ble.n	1e72c <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
   1e722:	f7f7 fc85 	bl	16030 <z_impl_k_is_preempt_thread>
   1e726:	b108      	cbz	r0, 1e72c <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
   1e728:	f7f7 fbda 	bl	15ee0 <z_impl_k_yield>
}
   1e72c:	4620      	mov	r0, r4
   1e72e:	b003      	add	sp, #12
   1e730:	bd30      	pop	{r4, r5, pc}

0001e732 <k_work_init_delayable>:
{
   1e732:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   1e734:	2230      	movs	r2, #48	; 0x30
{
   1e736:	4604      	mov	r4, r0
   1e738:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   1e73a:	2100      	movs	r1, #0
   1e73c:	f7f8 fd95 	bl	1726a <memset>
   1e740:	f44f 7380 	mov.w	r3, #256	; 0x100
   1e744:	6065      	str	r5, [r4, #4]
   1e746:	60e3      	str	r3, [r4, #12]
}
   1e748:	bd38      	pop	{r3, r4, r5, pc}

0001e74a <k_work_delayable_busy_get>:
   1e74a:	f7ff bfc5 	b.w	1e6d8 <k_work_busy_get>

0001e74e <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   1e74e:	b538      	push	{r3, r4, r5, lr}
   1e750:	4604      	mov	r4, r0
	__asm__ volatile(
   1e752:	f04f 0320 	mov.w	r3, #32
   1e756:	f3ef 8511 	mrs	r5, BASEPRI
   1e75a:	f383 8812 	msr	BASEPRI_MAX, r3
   1e75e:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   1e762:	f7ff ff4b 	bl	1e5fc <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   1e766:	4620      	mov	r0, r4
   1e768:	f7ff ff5d 	bl	1e626 <cancel_async_locked>
	__asm__ volatile(
   1e76c:	f385 8811 	msr	BASEPRI, r5
   1e770:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   1e774:	bd38      	pop	{r3, r4, r5, pc}

0001e776 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   1e776:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e778:	4604      	mov	r4, r0
   1e77a:	460d      	mov	r5, r1
	__asm__ volatile(
   1e77c:	f04f 0320 	mov.w	r3, #32
   1e780:	f3ef 8711 	mrs	r7, BASEPRI
   1e784:	f383 8812 	msr	BASEPRI_MAX, r3
   1e788:	f3bf 8f6f 	isb	sy
	return flags_get(&dwork->work.flags) & K_WORK_MASK;
   1e78c:	68c3      	ldr	r3, [r0, #12]
   1e78e:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   1e792:	2b00      	cmp	r3, #0
   1e794:	bf14      	ite	ne
   1e796:	2601      	movne	r6, #1
   1e798:	2600      	moveq	r6, #0
	bool need_wait = false;

	if (pending) {
   1e79a:	d009      	beq.n	1e7b0 <k_work_cancel_delayable_sync+0x3a>
	(void)unschedule_locked(dwork);
   1e79c:	f7ff ff2e 	bl	1e5fc <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   1e7a0:	4620      	mov	r0, r4
   1e7a2:	f7ff ff40 	bl	1e626 <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   1e7a6:	4629      	mov	r1, r5
   1e7a8:	4620      	mov	r0, r4
   1e7aa:	f7f7 f883 	bl	158b4 <cancel_sync_locked>
   1e7ae:	4603      	mov	r3, r0
	__asm__ volatile(
   1e7b0:	f387 8811 	msr	BASEPRI, r7
   1e7b4:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   1e7b8:	b13b      	cbz	r3, 1e7ca <k_work_cancel_delayable_sync+0x54>
	return z_impl_k_sem_take(sem, timeout);
   1e7ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1e7be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e7c2:	f105 0008 	add.w	r0, r5, #8
   1e7c6:	f7f6 ff9d 	bl	15704 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   1e7ca:	4630      	mov	r0, r6
   1e7cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001e7ce <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   1e7ce:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1e7d2:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1e7d4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1e7d6:	2300      	movs	r3, #0
	node->prev = NULL;
   1e7d8:	e9c0 3300 	strd	r3, r3, [r0]
}
   1e7dc:	4770      	bx	lr

0001e7de <unpend_thread_no_timeout>:
{
   1e7de:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   1e7e0:	f7ff fff5 	bl	1e7ce <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1e7e4:	7b43      	ldrb	r3, [r0, #13]
   1e7e6:	f023 0302 	bic.w	r3, r3, #2
   1e7ea:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   1e7ec:	2300      	movs	r3, #0
   1e7ee:	6083      	str	r3, [r0, #8]
}
   1e7f0:	bd08      	pop	{r3, pc}

0001e7f2 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   1e7f2:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   1e7f6:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   1e7fa:	4283      	cmp	r3, r0
		return b2 - b1;
   1e7fc:	bf14      	ite	ne
   1e7fe:	1ac0      	subne	r0, r0, r3
	return 0;
   1e800:	2000      	moveq	r0, #0
}
   1e802:	4770      	bx	lr

0001e804 <z_unpend_thread>:
{
   1e804:	b510      	push	{r4, lr}
	__asm__ volatile(
   1e806:	f04f 0320 	mov.w	r3, #32
   1e80a:	f3ef 8411 	mrs	r4, BASEPRI
   1e80e:	f383 8812 	msr	BASEPRI_MAX, r3
   1e812:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   1e816:	f7ff ffe2 	bl	1e7de <unpend_thread_no_timeout>
	__asm__ volatile(
   1e81a:	f384 8811 	msr	BASEPRI, r4
   1e81e:	f3bf 8f6f 	isb	sy
}
   1e822:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1e826:	3018      	adds	r0, #24
   1e828:	f000 b8bd 	b.w	1e9a6 <z_abort_timeout>

0001e82c <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1e82c:	4603      	mov	r3, r0
   1e82e:	b920      	cbnz	r0, 1e83a <z_reschedule_irqlock+0xe>
   1e830:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   1e834:	b90a      	cbnz	r2, 1e83a <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   1e836:	f7e5 ba91 	b.w	3d5c <arch_swap>
   1e83a:	f383 8811 	msr	BASEPRI, r3
   1e83e:	f3bf 8f6f 	isb	sy
}
   1e842:	4770      	bx	lr

0001e844 <z_reschedule_unlocked>:
	__asm__ volatile(
   1e844:	f04f 0320 	mov.w	r3, #32
   1e848:	f3ef 8011 	mrs	r0, BASEPRI
   1e84c:	f383 8812 	msr	BASEPRI_MAX, r3
   1e850:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1e854:	f7ff bfea 	b.w	1e82c <z_reschedule_irqlock>

0001e858 <z_priq_dumb_best>:
{
   1e858:	4603      	mov	r3, r0
	return list->head == list;
   1e85a:	6800      	ldr	r0, [r0, #0]
}
   1e85c:	4283      	cmp	r3, r0
   1e85e:	bf08      	it	eq
   1e860:	2000      	moveq	r0, #0
   1e862:	4770      	bx	lr

0001e864 <z_ready_thread>:
{
   1e864:	b510      	push	{r4, lr}
   1e866:	f04f 0320 	mov.w	r3, #32
   1e86a:	f3ef 8411 	mrs	r4, BASEPRI
   1e86e:	f383 8812 	msr	BASEPRI_MAX, r3
   1e872:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   1e876:	f7f7 fa33 	bl	15ce0 <ready_thread>
	__asm__ volatile(
   1e87a:	f384 8811 	msr	BASEPRI, r4
   1e87e:	f3bf 8f6f 	isb	sy
}
   1e882:	bd10      	pop	{r4, pc}

0001e884 <z_thread_timeout>:
{
   1e884:	b510      	push	{r4, lr}
   1e886:	4601      	mov	r1, r0
	__asm__ volatile(
   1e888:	f04f 0320 	mov.w	r3, #32
   1e88c:	f3ef 8411 	mrs	r4, BASEPRI
   1e890:	f383 8812 	msr	BASEPRI_MAX, r3
   1e894:	f3bf 8f6f 	isb	sy
		if (!killed) {
   1e898:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   1e89c:	f013 0f28 	tst.w	r3, #40	; 0x28
   1e8a0:	d10d      	bne.n	1e8be <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   1e8a2:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   1e8a6:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   1e8a8:	b10b      	cbz	r3, 1e8ae <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   1e8aa:	f7ff ff98 	bl	1e7de <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1e8ae:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   1e8b2:	f023 0314 	bic.w	r3, r3, #20
   1e8b6:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   1e8ba:	f7f7 fa11 	bl	15ce0 <ready_thread>
	__asm__ volatile(
   1e8be:	f384 8811 	msr	BASEPRI, r4
   1e8c2:	f3bf 8f6f 	isb	sy
}
   1e8c6:	bd10      	pop	{r4, pc}

0001e8c8 <add_to_waitq_locked>:
{
   1e8c8:	b538      	push	{r3, r4, r5, lr}
   1e8ca:	4604      	mov	r4, r0
   1e8cc:	460d      	mov	r5, r1
	unready_thread(thread);
   1e8ce:	f7f7 fa5b 	bl	15d88 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   1e8d2:	7b63      	ldrb	r3, [r4, #13]
   1e8d4:	f043 0302 	orr.w	r3, r3, #2
   1e8d8:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   1e8da:	b195      	cbz	r5, 1e902 <add_to_waitq_locked+0x3a>
   1e8dc:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   1e8de:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e8e0:	429d      	cmp	r5, r3
   1e8e2:	d015      	beq.n	1e910 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1e8e4:	b1a3      	cbz	r3, 1e910 <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
   1e8e6:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   1e8ea:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   1e8ee:	4291      	cmp	r1, r2
   1e8f0:	d008      	beq.n	1e904 <add_to_waitq_locked+0x3c>
		return b2 - b1;
   1e8f2:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   1e8f4:	2a00      	cmp	r2, #0
   1e8f6:	dd05      	ble.n	1e904 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
   1e8f8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1e8fa:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1e8fe:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1e900:	605c      	str	r4, [r3, #4]
}
   1e902:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   1e904:	686a      	ldr	r2, [r5, #4]
   1e906:	4293      	cmp	r3, r2
   1e908:	d002      	beq.n	1e910 <add_to_waitq_locked+0x48>
   1e90a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1e90c:	2b00      	cmp	r3, #0
   1e90e:	d1ec      	bne.n	1e8ea <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
   1e910:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   1e912:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   1e916:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1e918:	606c      	str	r4, [r5, #4]
}
   1e91a:	e7f2      	b.n	1e902 <add_to_waitq_locked+0x3a>

0001e91c <z_unpend_first_thread>:
{
   1e91c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1e91e:	f04f 0320 	mov.w	r3, #32
   1e922:	f3ef 8511 	mrs	r5, BASEPRI
   1e926:	f383 8812 	msr	BASEPRI_MAX, r3
   1e92a:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   1e92e:	f7ff ff93 	bl	1e858 <z_priq_dumb_best>
		if (thread != NULL) {
   1e932:	4604      	mov	r4, r0
   1e934:	b120      	cbz	r0, 1e940 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
   1e936:	f7ff ff52 	bl	1e7de <unpend_thread_no_timeout>
   1e93a:	3018      	adds	r0, #24
   1e93c:	f000 f833 	bl	1e9a6 <z_abort_timeout>
	__asm__ volatile(
   1e940:	f385 8811 	msr	BASEPRI, r5
   1e944:	f3bf 8f6f 	isb	sy
}
   1e948:	4620      	mov	r0, r4
   1e94a:	bd38      	pop	{r3, r4, r5, pc}

0001e94c <z_unpend_all>:
{
   1e94c:	b538      	push	{r3, r4, r5, lr}
   1e94e:	4605      	mov	r5, r0
	int need_sched = 0;
   1e950:	2000      	movs	r0, #0
	return list->head == list;
   1e952:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e954:	42a5      	cmp	r5, r4
   1e956:	d000      	beq.n	1e95a <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1e958:	b904      	cbnz	r4, 1e95c <z_unpend_all+0x10>
}
   1e95a:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   1e95c:	4620      	mov	r0, r4
   1e95e:	f7ff ff51 	bl	1e804 <z_unpend_thread>
		z_ready_thread(thread);
   1e962:	4620      	mov	r0, r4
   1e964:	f7ff ff7e 	bl	1e864 <z_ready_thread>
		need_sched = 1;
   1e968:	2001      	movs	r0, #1
   1e96a:	e7f2      	b.n	1e952 <z_unpend_all+0x6>

0001e96c <z_sched_wake>:
{
   1e96c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1e96e:	f04f 0320 	mov.w	r3, #32
   1e972:	f3ef 8511 	mrs	r5, BASEPRI
   1e976:	f383 8812 	msr	BASEPRI_MAX, r3
   1e97a:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   1e97e:	f7ff ff6b 	bl	1e858 <z_priq_dumb_best>
		if (thread != NULL) {
   1e982:	4604      	mov	r4, r0
   1e984:	b150      	cbz	r0, 1e99c <z_sched_wake+0x30>
   1e986:	67c1      	str	r1, [r0, #124]	; 0x7c
   1e988:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
   1e98a:	f7ff ff28 	bl	1e7de <unpend_thread_no_timeout>
   1e98e:	3018      	adds	r0, #24
   1e990:	f000 f809 	bl	1e9a6 <z_abort_timeout>
			ready_thread(thread);
   1e994:	4620      	mov	r0, r4
   1e996:	f7f7 f9a3 	bl	15ce0 <ready_thread>
			ret = true;
   1e99a:	2001      	movs	r0, #1
	__asm__ volatile(
   1e99c:	f385 8811 	msr	BASEPRI, r5
   1e9a0:	f3bf 8f6f 	isb	sy
}
   1e9a4:	bd38      	pop	{r3, r4, r5, pc}

0001e9a6 <z_abort_timeout>:
{
   1e9a6:	b510      	push	{r4, lr}
	__asm__ volatile(
   1e9a8:	f04f 0220 	mov.w	r2, #32
   1e9ac:	f3ef 8411 	mrs	r4, BASEPRI
   1e9b0:	f382 8812 	msr	BASEPRI_MAX, r2
   1e9b4:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   1e9b8:	6803      	ldr	r3, [r0, #0]
   1e9ba:	b13b      	cbz	r3, 1e9cc <z_abort_timeout+0x26>
			remove_timeout(to);
   1e9bc:	f7f7 fbf6 	bl	161ac <remove_timeout>
			ret = 0;
   1e9c0:	2000      	movs	r0, #0
	__asm__ volatile(
   1e9c2:	f384 8811 	msr	BASEPRI, r4
   1e9c6:	f3bf 8f6f 	isb	sy
}
   1e9ca:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   1e9cc:	f06f 0015 	mvn.w	r0, #21
   1e9d0:	e7f7      	b.n	1e9c2 <z_abort_timeout+0x1c>

0001e9d2 <z_timeout_remaining>:
{
   1e9d2:	b510      	push	{r4, lr}
	__asm__ volatile(
   1e9d4:	f04f 0320 	mov.w	r3, #32
   1e9d8:	f3ef 8411 	mrs	r4, BASEPRI
   1e9dc:	f383 8812 	msr	BASEPRI_MAX, r3
   1e9e0:	f3bf 8f6f 	isb	sy
		ticks = timeout_rem(timeout);
   1e9e4:	f7f7 fbfc 	bl	161e0 <timeout_rem>
	__asm__ volatile(
   1e9e8:	f384 8811 	msr	BASEPRI, r4
   1e9ec:	f3bf 8f6f 	isb	sy
}
   1e9f0:	bd10      	pop	{r4, pc}

0001e9f2 <z_get_next_timeout_expiry>:
{
   1e9f2:	b510      	push	{r4, lr}
	__asm__ volatile(
   1e9f4:	f04f 0320 	mov.w	r3, #32
   1e9f8:	f3ef 8411 	mrs	r4, BASEPRI
   1e9fc:	f383 8812 	msr	BASEPRI_MAX, r3
   1ea00:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   1ea04:	f7f7 fbac 	bl	16160 <next_timeout>
	__asm__ volatile(
   1ea08:	f384 8811 	msr	BASEPRI, r4
   1ea0c:	f3bf 8f6f 	isb	sy
}
   1ea10:	bd10      	pop	{r4, pc}

0001ea12 <z_set_timeout_expiry>:
{
   1ea12:	b570      	push	{r4, r5, r6, lr}
   1ea14:	4604      	mov	r4, r0
   1ea16:	460d      	mov	r5, r1
	__asm__ volatile(
   1ea18:	f04f 0320 	mov.w	r3, #32
   1ea1c:	f3ef 8611 	mrs	r6, BASEPRI
   1ea20:	f383 8812 	msr	BASEPRI_MAX, r3
   1ea24:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   1ea28:	f7f7 fb9a 	bl	16160 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   1ea2c:	2801      	cmp	r0, #1
   1ea2e:	dd05      	ble.n	1ea3c <z_set_timeout_expiry+0x2a>
   1ea30:	42a0      	cmp	r0, r4
   1ea32:	db03      	blt.n	1ea3c <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   1ea34:	4629      	mov	r1, r5
   1ea36:	4620      	mov	r0, r4
   1ea38:	f7f5 fa0a 	bl	13e50 <sys_clock_set_timeout>
	__asm__ volatile(
   1ea3c:	f386 8811 	msr	BASEPRI, r6
   1ea40:	f3bf 8f6f 	isb	sy
}
   1ea44:	bd70      	pop	{r4, r5, r6, pc}

0001ea46 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   1ea46:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   1ea48:	f7f7 fcc6 	bl	163d8 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   1ea4c:	bd08      	pop	{r3, pc}

0001ea4e <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   1ea4e:	f7f7 bcc3 	b.w	163d8 <sys_clock_tick_get>

0001ea52 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   1ea52:	b108      	cbz	r0, 1ea58 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   1ea54:	f7e5 bc7a 	b.w	434c <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   1ea58:	4770      	bx	lr

0001ea5a <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1ea5a:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   1ea5e:	bf08      	it	eq
   1ea60:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   1ea64:	b538      	push	{r3, r4, r5, lr}
   1ea66:	4605      	mov	r5, r0
   1ea68:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1ea6a:	d01d      	beq.n	1eaa8 <sys_clock_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1ea6c:	ea51 0300 	orrs.w	r3, r1, r0
   1ea70:	d103      	bne.n	1ea7a <sys_clock_timeout_end_calc+0x20>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   1ea72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   1ea76:	f7f7 bcaf 	b.w	163d8 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   1ea7a:	f06f 0301 	mvn.w	r3, #1
   1ea7e:	1a18      	subs	r0, r3, r0
   1ea80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ea84:	eb63 0101 	sbc.w	r1, r3, r1
   1ea88:	2900      	cmp	r1, #0
   1ea8a:	da0c      	bge.n	1eaa6 <sys_clock_timeout_end_calc+0x4c>
		return sys_clock_tick_get() + MAX(1, dt);
   1ea8c:	f7f7 fca4 	bl	163d8 <sys_clock_tick_get>
   1ea90:	2d01      	cmp	r5, #1
   1ea92:	4622      	mov	r2, r4
   1ea94:	f174 0400 	sbcs.w	r4, r4, #0
   1ea98:	462b      	mov	r3, r5
   1ea9a:	bfbc      	itt	lt
   1ea9c:	2301      	movlt	r3, #1
   1ea9e:	2200      	movlt	r2, #0
   1eaa0:	1818      	adds	r0, r3, r0
   1eaa2:	eb41 0102 	adc.w	r1, r1, r2
}
   1eaa6:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   1eaa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1eaac:	4601      	mov	r1, r0
   1eaae:	e7fa      	b.n	1eaa6 <sys_clock_timeout_end_calc+0x4c>

0001eab0 <add_event>:
{
   1eab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1eab2:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1eab4:	e9d0 1300 	ldrd	r1, r3, [r0]
   1eab8:	4288      	cmp	r0, r1
   1eaba:	4604      	mov	r4, r0
   1eabc:	d00d      	beq.n	1eada <add_event+0x2a>
	if ((pending == NULL) ||
   1eabe:	b163      	cbz	r3, 1eada <add_event+0x2a>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1eac0:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1eac2:	b100      	cbz	r0, 1eac6 <add_event+0x16>
   1eac4:	3860      	subs	r0, #96	; 0x60
   1eac6:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1eaca:	4639      	mov	r1, r7
   1eacc:	f7ff fe91 	bl	1e7f2 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   1ead0:	2800      	cmp	r0, #0
   1ead2:	dc02      	bgt.n	1eada <add_event+0x2a>
	return list->head == list;
   1ead4:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ead6:	42b4      	cmp	r4, r6
   1ead8:	d109      	bne.n	1eaee <add_event+0x3e>
	sys_dnode_t *const tail = list->tail;
   1eada:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   1eadc:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   1eae0:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1eae2:	6065      	str	r5, [r4, #4]
}
   1eae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1eae6:	6863      	ldr	r3, [r4, #4]
   1eae8:	42b3      	cmp	r3, r6
   1eaea:	d0f6      	beq.n	1eada <add_event+0x2a>
   1eaec:	6836      	ldr	r6, [r6, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1eaee:	2e00      	cmp	r6, #0
   1eaf0:	d0f3      	beq.n	1eada <add_event+0x2a>
		if (z_sched_prio_cmp(poller_thread(poller),
   1eaf2:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1eaf4:	b101      	cbz	r1, 1eaf8 <add_event+0x48>
   1eaf6:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   1eaf8:	4638      	mov	r0, r7
   1eafa:	f7ff fe7a 	bl	1e7f2 <z_sched_prio_cmp>
   1eafe:	2800      	cmp	r0, #0
   1eb00:	ddf1      	ble.n	1eae6 <add_event+0x36>
	sys_dnode_t *const prev = successor->prev;
   1eb02:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   1eb04:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   1eb08:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1eb0a:	6075      	str	r5, [r6, #4]
			return;
   1eb0c:	e7ea      	b.n	1eae4 <add_event+0x34>

0001eb0e <register_events>:
{
   1eb0e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   1eb12:	2500      	movs	r5, #0
{
   1eb14:	468b      	mov	fp, r1
   1eb16:	4614      	mov	r4, r2
   1eb18:	461f      	mov	r7, r3
   1eb1a:	4682      	mov	sl, r0
	int events_registered = 0;
   1eb1c:	462e      	mov	r6, r5
	event->poller = NULL;
   1eb1e:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   1eb20:	455d      	cmp	r5, fp
   1eb22:	db02      	blt.n	1eb2a <register_events+0x1c>
}
   1eb24:	4630      	mov	r0, r6
   1eb26:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   1eb2a:	f04f 0320 	mov.w	r3, #32
   1eb2e:	f3ef 8911 	mrs	r9, BASEPRI
   1eb32:	f383 8812 	msr	BASEPRI_MAX, r3
   1eb36:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   1eb3a:	f89a 300d 	ldrb.w	r3, [sl, #13]
   1eb3e:	f003 031f 	and.w	r3, r3, #31
   1eb42:	3b01      	subs	r3, #1
   1eb44:	2b07      	cmp	r3, #7
   1eb46:	d80f      	bhi.n	1eb68 <register_events+0x5a>
   1eb48:	e8df f003 	tbb	[pc, r3]
   1eb4c:	0a0e041e 	.word	0x0a0e041e
   1eb50:	250e0e0e 	.word	0x250e0e0e
		if (k_sem_count_get(event->sem) > 0U) {
   1eb54:	f8da 3010 	ldr.w	r3, [sl, #16]
   1eb58:	689b      	ldr	r3, [r3, #8]
   1eb5a:	b12b      	cbz	r3, 1eb68 <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   1eb5c:	2302      	movs	r3, #2
   1eb5e:	e020      	b.n	1eba2 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   1eb60:	f8da 3010 	ldr.w	r3, [sl, #16]
   1eb64:	681b      	ldr	r3, [r3, #0]
   1eb66:	bb8b      	cbnz	r3, 1ebcc <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   1eb68:	bb47      	cbnz	r7, 1ebbc <register_events+0xae>
   1eb6a:	7823      	ldrb	r3, [r4, #0]
   1eb6c:	b333      	cbz	r3, 1ebbc <register_events+0xae>
	switch (event->type) {
   1eb6e:	f89a 300d 	ldrb.w	r3, [sl, #13]
   1eb72:	f003 031f 	and.w	r3, r3, #31
   1eb76:	3b01      	subs	r3, #1
   1eb78:	2b07      	cmp	r3, #7
   1eb7a:	d830      	bhi.n	1ebde <register_events+0xd0>
   1eb7c:	e8df f003 	tbb	[pc, r3]
   1eb80:	282f2833 	.word	0x282f2833
   1eb84:	382f2f2f 	.word	0x382f2f2f
		if (event->signal->signaled != 0U) {
   1eb88:	f8da 3010 	ldr.w	r3, [sl, #16]
   1eb8c:	689b      	ldr	r3, [r3, #8]
   1eb8e:	2b00      	cmp	r3, #0
   1eb90:	d0ea      	beq.n	1eb68 <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   1eb92:	2301      	movs	r3, #1
   1eb94:	e005      	b.n	1eba2 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   1eb96:	f8da 3010 	ldr.w	r3, [sl, #16]
   1eb9a:	6a1b      	ldr	r3, [r3, #32]
   1eb9c:	2b00      	cmp	r3, #0
   1eb9e:	d0e3      	beq.n	1eb68 <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   1eba0:	2310      	movs	r3, #16
	event->state |= state;
   1eba2:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   1eba6:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   1ebaa:	f3c2 3145 	ubfx	r1, r2, #13, #6
   1ebae:	430b      	orrs	r3, r1
   1ebb0:	f363 3252 	bfi	r2, r3, #13, #6
   1ebb4:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   1ebb8:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   1ebbc:	f389 8811 	msr	BASEPRI, r9
   1ebc0:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   1ebc4:	3501      	adds	r5, #1
   1ebc6:	f10a 0a14 	add.w	sl, sl, #20
   1ebca:	e7a9      	b.n	1eb20 <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   1ebcc:	2304      	movs	r3, #4
   1ebce:	e7e8      	b.n	1eba2 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   1ebd0:	f8da 0010 	ldr.w	r0, [sl, #16]
   1ebd4:	4622      	mov	r2, r4
   1ebd6:	4651      	mov	r1, sl
   1ebd8:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   1ebda:	f7ff ff69 	bl	1eab0 <add_event>
	event->poller = poller;
   1ebde:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   1ebe2:	3601      	adds	r6, #1
   1ebe4:	e7ea      	b.n	1ebbc <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   1ebe6:	f8da 0010 	ldr.w	r0, [sl, #16]
   1ebea:	4622      	mov	r2, r4
   1ebec:	4651      	mov	r1, sl
   1ebee:	e7f4      	b.n	1ebda <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   1ebf0:	f8da 0010 	ldr.w	r0, [sl, #16]
   1ebf4:	4622      	mov	r2, r4
   1ebf6:	4651      	mov	r1, sl
   1ebf8:	3024      	adds	r0, #36	; 0x24
   1ebfa:	e7ee      	b.n	1ebda <register_events+0xcc>

0001ebfc <signal_poll_event>:
{
   1ebfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   1ec00:	6884      	ldr	r4, [r0, #8]
{
   1ec02:	4605      	mov	r5, r0
   1ec04:	460e      	mov	r6, r1
	if (poller != NULL) {
   1ec06:	b144      	cbz	r4, 1ec1a <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   1ec08:	7863      	ldrb	r3, [r4, #1]
   1ec0a:	2b01      	cmp	r3, #1
   1ec0c:	d136      	bne.n	1ec7c <signal_poll_event+0x80>
	if (!z_is_thread_pending(thread)) {
   1ec0e:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   1ec12:	f013 0302 	ands.w	r3, r3, #2
   1ec16:	d10a      	bne.n	1ec2e <signal_poll_event+0x32>
		poller->is_polling = false;
   1ec18:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   1ec1a:	68eb      	ldr	r3, [r5, #12]
   1ec1c:	f3c3 3145 	ubfx	r1, r3, #13, #6
   1ec20:	430e      	orrs	r6, r1
	event->poller = NULL;
   1ec22:	2000      	movs	r0, #0
	event->state |= state;
   1ec24:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
   1ec28:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   1ec2a:	60eb      	str	r3, [r5, #12]
	return retcode;
   1ec2c:	e00b      	b.n	1ec46 <signal_poll_event+0x4a>
	if (z_is_thread_timeout_expired(thread)) {
   1ec2e:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   1ec32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1ec36:	bf08      	it	eq
   1ec38:	f112 0f02 	cmneq.w	r2, #2
   1ec3c:	d105      	bne.n	1ec4a <signal_poll_event+0x4e>
		poller->is_polling = false;
   1ec3e:	2300      	movs	r3, #0
   1ec40:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   1ec42:	f06f 000a 	mvn.w	r0, #10
}
   1ec46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1ec4a:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   1ec4e:	4640      	mov	r0, r8
   1ec50:	f7ff fdd8 	bl	1e804 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   1ec54:	2e08      	cmp	r6, #8
   1ec56:	bf0c      	ite	eq
   1ec58:	f06f 0303 	mvneq.w	r3, #3
   1ec5c:	2300      	movne	r3, #0
   1ec5e:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1ec60:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   1ec64:	06db      	lsls	r3, r3, #27
   1ec66:	d102      	bne.n	1ec6e <signal_poll_event+0x72>
	if (!z_is_thread_ready(thread)) {
   1ec68:	f854 7c48 	ldr.w	r7, [r4, #-72]
   1ec6c:	b10f      	cbz	r7, 1ec72 <signal_poll_event+0x76>
		poller->is_polling = false;
   1ec6e:	2300      	movs	r3, #0
   1ec70:	e7d2      	b.n	1ec18 <signal_poll_event+0x1c>
	z_ready_thread(thread);
   1ec72:	4640      	mov	r0, r8
   1ec74:	f7ff fdf6 	bl	1e864 <z_ready_thread>
		poller->is_polling = false;
   1ec78:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   1ec7a:	e7ce      	b.n	1ec1a <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   1ec7c:	2b02      	cmp	r3, #2
   1ec7e:	d1f6      	bne.n	1ec6e <signal_poll_event+0x72>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   1ec80:	7823      	ldrb	r3, [r4, #0]
   1ec82:	2b00      	cmp	r3, #0
   1ec84:	d0c9      	beq.n	1ec1a <signal_poll_event+0x1e>
   1ec86:	f854 7c04 	ldr.w	r7, [r4, #-4]
   1ec8a:	2f00      	cmp	r7, #0
   1ec8c:	d0f4      	beq.n	1ec78 <signal_poll_event+0x7c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   1ec8e:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   1ec92:	f1a4 0914 	sub.w	r9, r4, #20
   1ec96:	f104 0014 	add.w	r0, r4, #20
   1ec9a:	f7ff fe84 	bl	1e9a6 <z_abort_timeout>
		twork->poll_result = 0;
   1ec9e:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   1eca2:	4649      	mov	r1, r9
   1eca4:	4638      	mov	r0, r7
   1eca6:	f7ff fd27 	bl	1e6f8 <k_work_submit_to_queue>
		poller->is_polling = false;
   1ecaa:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   1ecae:	e7b4      	b.n	1ec1a <signal_poll_event+0x1e>

0001ecb0 <clear_event_registrations>:
	while (num_events--) {
   1ecb0:	2314      	movs	r3, #20
{
   1ecb2:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ecb4:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   1ecb8:	2400      	movs	r4, #0
   1ecba:	2601      	movs	r6, #1
	while (num_events--) {
   1ecbc:	b901      	cbnz	r1, 1ecc0 <clear_event_registrations+0x10>
}
   1ecbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   1ecc0:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   1ecc4:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   1ecc8:	f003 031f 	and.w	r3, r3, #31
   1eccc:	2b08      	cmp	r3, #8
   1ecce:	f1a0 0714 	sub.w	r7, r0, #20
   1ecd2:	d80d      	bhi.n	1ecf0 <clear_event_registrations+0x40>
   1ecd4:	fa06 f303 	lsl.w	r3, r6, r3
   1ecd8:	f413 7f8b 	tst.w	r3, #278	; 0x116
   1ecdc:	d008      	beq.n	1ecf0 <clear_event_registrations+0x40>
	return node->next != NULL;
   1ecde:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   1ece2:	b12b      	cbz	r3, 1ecf0 <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   1ece4:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   1ece8:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   1ecea:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   1ecec:	e940 4405 	strd	r4, r4, [r0, #-20]
   1ecf0:	f382 8811 	msr	BASEPRI, r2
   1ecf4:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1ecf8:	f04f 0320 	mov.w	r3, #32
   1ecfc:	f3ef 8211 	mrs	r2, BASEPRI
   1ed00:	f383 8812 	msr	BASEPRI_MAX, r3
   1ed04:	f3bf 8f6f 	isb	sy
   1ed08:	3901      	subs	r1, #1
   1ed0a:	4638      	mov	r0, r7
   1ed0c:	e7d6      	b.n	1ecbc <clear_event_registrations+0xc>

0001ed0e <k_poll_event_init>:
{
   1ed0e:	b510      	push	{r4, lr}
	event->type = type;
   1ed10:	04d2      	lsls	r2, r2, #19
   1ed12:	0209      	lsls	r1, r1, #8
   1ed14:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
   1ed18:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
   1ed1c:	430a      	orrs	r2, r1
   1ed1e:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   1ed20:	2400      	movs	r4, #0
	event->type = type;
   1ed22:	430a      	orrs	r2, r1
	event->obj = obj;
   1ed24:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   1ed28:	6084      	str	r4, [r0, #8]
}
   1ed2a:	bd10      	pop	{r4, pc}

0001ed2c <z_handle_obj_poll_events>:
{
   1ed2c:	4603      	mov	r3, r0
	return list->head == list;
   1ed2e:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   1ed30:	4283      	cmp	r3, r0
   1ed32:	d008      	beq.n	1ed46 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   1ed34:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1ed38:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1ed3a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1ed3c:	2300      	movs	r3, #0
	node->prev = NULL;
   1ed3e:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   1ed42:	f7ff bf5b 	b.w	1ebfc <signal_poll_event>
}
   1ed46:	4770      	bx	lr

0001ed48 <k_free>:
	if (ptr != NULL) {
   1ed48:	b120      	cbz	r0, 1ed54 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   1ed4a:	1f01      	subs	r1, r0, #4
   1ed4c:	f850 0c04 	ldr.w	r0, [r0, #-4]
   1ed50:	f7ff bb14 	b.w	1e37c <k_heap_free>
}
   1ed54:	4770      	bx	lr
	...

0001ed58 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   1ed58:	f7f5 b8d2 	b.w	13f00 <SystemInit>
